var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2115662724189031 ± 0.001542568950941067\n   G2(1) = 0.9166973137109745 ± 0.0007161983833966068\n   G2(2) = 0.9827884420366393 ± 0.0006686589079325897\n   G2(3) = 0.9894622160858689 ± 0.0008981239355924015\n   G2(4) = 0.9827884420366393 ± 0.0006686589079325897\n   G2(5) = 0.9166973137109745 ± 0.0007161983833966068\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.037519882624489 ± 0.15076252599560036\n   Replica 2: -4.025266726543114 ± 0.12432714339725766\n   Replica 3: -4.019834105348701 ± 0.1372051431250487\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip930\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip931\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip932\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.13 2211.02,1003.13 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.423 2211.02,745.423 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.717 2211.02,487.717 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.01 2211.02,230.01 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.13 423.181,1003.13 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.423 423.181,745.423 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.717 423.181,487.717 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.01 423.181,230.01 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M290.043 1016.47 L306.363 1016.47 L306.363 1020.41 L284.418 1020.41 L284.418 1016.47 Q287.08 1013.72 291.664 1009.09 Q296.27 1004.44 297.451 1003.1 Q299.696 1000.57 300.576 998.836 Q301.478 997.077 301.478 995.387 Q301.478 992.632 299.534 990.896 Q297.613 989.16 294.511 989.16 Q292.312 989.16 289.858 989.924 Q287.427 990.688 284.65 992.239 L284.65 987.517 Q287.474 986.383 289.927 985.804 Q292.381 985.225 294.418 985.225 Q299.789 985.225 302.983 987.91 Q306.177 990.595 306.177 995.086 Q306.177 997.216 305.367 999.137 Q304.58 1001.04 302.474 1003.63 Q301.895 1004.3 298.793 1007.52 Q295.691 1010.71 290.043 1016.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M316.224 985.85 L334.58 985.85 L334.58 989.785 L320.506 989.785 L320.506 998.257 Q321.524 997.91 322.543 997.748 Q323.562 997.563 324.58 997.563 Q330.367 997.563 333.747 1000.73 Q337.126 1003.91 337.126 1009.32 Q337.126 1014.9 333.654 1018 Q330.182 1021.08 323.862 1021.08 Q321.687 1021.08 319.418 1020.71 Q317.173 1020.34 314.765 1019.6 L314.765 1014.9 Q316.849 1016.04 319.071 1016.59 Q321.293 1017.15 323.77 1017.15 Q327.774 1017.15 330.112 1015.04 Q332.45 1012.93 332.45 1009.32 Q332.45 1005.71 330.112 1003.6 Q327.774 1001.5 323.77 1001.5 Q321.895 1001.5 320.02 1001.91 Q318.168 1002.33 316.224 1003.21 L316.224 985.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M356.339 988.929 Q352.728 988.929 350.899 992.494 Q349.094 996.035 349.094 1003.16 Q349.094 1010.27 350.899 1013.84 Q352.728 1017.38 356.339 1017.38 Q359.973 1017.38 361.779 1013.84 Q363.608 1010.27 363.608 1003.16 Q363.608 996.035 361.779 992.494 Q359.973 988.929 356.339 988.929 M356.339 985.225 Q362.149 985.225 365.205 989.832 Q368.284 994.415 368.284 1003.16 Q368.284 1011.89 365.205 1016.5 Q362.149 1021.08 356.339 1021.08 Q350.529 1021.08 347.45 1016.5 Q344.395 1011.89 344.395 1003.16 Q344.395 994.415 347.45 989.832 Q350.529 985.225 356.339 985.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M286.062 728.143 L304.418 728.143 L304.418 732.079 L290.344 732.079 L290.344 740.551 Q291.363 740.204 292.381 740.041 Q293.4 739.856 294.418 739.856 Q300.205 739.856 303.585 743.028 Q306.964 746.199 306.964 751.616 Q306.964 757.194 303.492 760.296 Q300.02 763.375 293.701 763.375 Q291.525 763.375 289.256 763.004 Q287.011 762.634 284.603 761.893 L284.603 757.194 Q286.687 758.328 288.909 758.884 Q291.131 759.44 293.608 759.44 Q297.613 759.44 299.951 757.333 Q302.288 755.227 302.288 751.616 Q302.288 748.004 299.951 745.898 Q297.613 743.791 293.608 743.791 Q291.733 743.791 289.858 744.208 Q288.006 744.625 286.062 745.504 L286.062 728.143 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M326.177 731.222 Q322.566 731.222 320.737 734.787 Q318.932 738.329 318.932 745.458 Q318.932 752.565 320.737 756.129 Q322.566 759.671 326.177 759.671 Q329.811 759.671 331.617 756.129 Q333.446 752.565 333.446 745.458 Q333.446 738.329 331.617 734.787 Q329.811 731.222 326.177 731.222 M326.177 727.518 Q331.987 727.518 335.043 732.125 Q338.122 736.708 338.122 745.458 Q338.122 754.185 335.043 758.791 Q331.987 763.375 326.177 763.375 Q320.367 763.375 317.288 758.791 Q314.233 754.185 314.233 745.458 Q314.233 736.708 317.288 732.125 Q320.367 727.518 326.177 727.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M356.339 731.222 Q352.728 731.222 350.899 734.787 Q349.094 738.329 349.094 745.458 Q349.094 752.565 350.899 756.129 Q352.728 759.671 356.339 759.671 Q359.973 759.671 361.779 756.129 Q363.608 752.565 363.608 745.458 Q363.608 738.329 361.779 734.787 Q359.973 731.222 356.339 731.222 M356.339 727.518 Q362.149 727.518 365.205 732.125 Q368.284 736.708 368.284 745.458 Q368.284 754.185 365.205 758.791 Q362.149 763.375 356.339 763.375 Q350.529 763.375 347.45 758.791 Q344.395 754.185 344.395 745.458 Q344.395 736.708 347.45 732.125 Q350.529 727.518 356.339 727.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M284.835 470.437 L307.057 470.437 L307.057 472.427 L294.511 504.997 L289.627 504.997 L301.432 474.372 L284.835 474.372 L284.835 470.437 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M316.224 470.437 L334.58 470.437 L334.58 474.372 L320.506 474.372 L320.506 482.844 Q321.524 482.497 322.543 482.335 Q323.562 482.15 324.58 482.15 Q330.367 482.15 333.747 485.321 Q337.126 488.492 337.126 493.909 Q337.126 499.487 333.654 502.589 Q330.182 505.668 323.862 505.668 Q321.687 505.668 319.418 505.298 Q317.173 504.927 314.765 504.187 L314.765 499.487 Q316.849 500.622 319.071 501.177 Q321.293 501.733 323.77 501.733 Q327.774 501.733 330.112 499.626 Q332.45 497.52 332.45 493.909 Q332.45 490.298 330.112 488.191 Q327.774 486.085 323.77 486.085 Q321.895 486.085 320.02 486.501 Q318.168 486.918 316.224 487.798 L316.224 470.437 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M356.339 473.515 Q352.728 473.515 350.899 477.08 Q349.094 480.622 349.094 487.751 Q349.094 494.858 350.899 498.423 Q352.728 501.964 356.339 501.964 Q359.973 501.964 361.779 498.423 Q363.608 494.858 363.608 487.751 Q363.608 480.622 361.779 477.08 Q359.973 473.515 356.339 473.515 M356.339 469.812 Q362.149 469.812 365.205 474.418 Q368.284 479.001 368.284 487.751 Q368.284 496.478 365.205 501.085 Q362.149 505.668 356.339 505.668 Q350.529 505.668 347.45 501.085 Q344.395 496.478 344.395 487.751 Q344.395 479.001 347.45 474.418 Q350.529 469.812 356.339 469.812 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M256.664 243.355 L264.303 243.355 L264.303 216.989 L255.992 218.656 L255.992 214.397 L264.256 212.73 L268.932 212.73 L268.932 243.355 L276.571 243.355 L276.571 247.29 L256.664 247.29 L256.664 243.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M296.015 215.809 Q292.404 215.809 290.576 219.373 Q288.77 222.915 288.77 230.045 Q288.77 237.151 290.576 240.716 Q292.404 244.258 296.015 244.258 Q299.65 244.258 301.455 240.716 Q303.284 237.151 303.284 230.045 Q303.284 222.915 301.455 219.373 Q299.65 215.809 296.015 215.809 M296.015 212.105 Q301.826 212.105 304.881 216.711 Q307.96 221.295 307.96 230.045 Q307.96 238.772 304.881 243.378 Q301.826 247.961 296.015 247.961 Q290.205 247.961 287.127 243.378 Q284.071 238.772 284.071 230.045 Q284.071 221.295 287.127 216.711 Q290.205 212.105 296.015 212.105 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M326.177 215.809 Q322.566 215.809 320.737 219.373 Q318.932 222.915 318.932 230.045 Q318.932 237.151 320.737 240.716 Q322.566 244.258 326.177 244.258 Q329.811 244.258 331.617 240.716 Q333.446 237.151 333.446 230.045 Q333.446 222.915 331.617 219.373 Q329.811 215.809 326.177 215.809 M326.177 212.105 Q331.987 212.105 335.043 216.711 Q338.122 221.295 338.122 230.045 Q338.122 238.772 335.043 243.378 Q331.987 247.961 326.177 247.961 Q320.367 247.961 317.288 243.378 Q314.233 238.772 314.233 230.045 Q314.233 221.295 317.288 216.711 Q320.367 212.105 326.177 212.105 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M356.339 215.809 Q352.728 215.809 350.899 219.373 Q349.094 222.915 349.094 230.045 Q349.094 237.151 350.899 240.716 Q352.728 244.258 356.339 244.258 Q359.973 244.258 361.779 240.716 Q363.608 237.151 363.608 230.045 Q363.608 222.915 361.779 219.373 Q359.973 215.809 356.339 215.809 M356.339 212.105 Q362.149 212.105 365.205 216.711 Q368.284 221.295 368.284 230.045 Q368.284 238.772 365.205 243.378 Q362.149 247.961 356.339 247.961 Q350.529 247.961 347.45 243.378 Q344.395 238.772 344.395 230.045 Q344.395 221.295 347.45 216.711 Q350.529 212.105 356.339 212.105 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip932)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.01 4017.76,230.01 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.34 457.123,1249.18 457.691,1247.91 458.259,1247.68 458.828,1247.34 459.396,1246.92 459.964,1245.41 460.533,1244.88 461.101,1244.28 461.669,1243.61 462.238,1242.87 462.806,1241.01 463.375,1240.11 463.943,1239.12 464.511,1238.03 465.08,1235.78 465.648,1234.52 466.216,1233.13 466.785,1230.59 467.353,1228.92 467.921,1227.17 468.49,1223.24 469.058,1220.16 469.626,1217.97 470.195,1215.58 470.763,1213.04 471.331,1210.41 471.9,1207.57 472.468,1203.5 473.036,1200.29 473.605,1195.84 474.173,1191.29 474.741,1187.58 475.31,1182.67 475.878,1178.55 476.446,1174.29 477.015,1167.75 477.583,1161.93 478.152,1156.96 478.72,1150.7 479.288,1144.31 479.857,1137.76 480.425,1130.97 480.993,1121.93 481.562,1115.84 482.13,1109.61 482.698,1101 483.267,1094.3 483.835,1087.29 484.403,1080 484.972,1072.67 485.54,1064.04 486.108,1055.26 486.677,1047.46 487.245,1038.28 487.813,1030.07 488.382,1019.52 488.95,1008.86 489.518,999.249 490.087,988.463 490.655,977.619 491.224,967.608 491.792,957.562 492.36,948.475 492.929,936.2 493.497,923.87 494.065,912.609 494.634,902.395 495.202,890.941 495.77,880.59 496.339,868.342 496.907,857.124 497.475,846.911 498.044,834.632 498.612,825.53 499.18,814.362 499.749,802.148 500.317,793.195 500.885,784.267 501.454,774.224 502.022,765.172 502.59,755.129 503.159,746.133 503.727,737.157 504.295,728.137 504.864,717.136 505.432,708.341 506.001,697.543 506.569,688.896 507.137,676.17 507.706,664.626 508.274,655.589 508.842,647.512 509.411,639.487 509.979,631.621 510.547,621.643 511.116,610.995 511.684,602.553 512.252,592.088 512.821,585.051 513.389,577.063 513.957,568.139 514.526,559.377 515.094,549.885 515.662,540.464 516.231,531.332 516.799,524.533 517.367,517.858 517.936,511.203 518.504,504.675 519.072,498.166 519.641,491.796 520.209,485.238 520.778,478.066 521.346,471.687 521.914,464.659 522.483,459.824 523.051,451.05 523.619,444.598 524.188,438.54 524.756,434.53 525.324,430.485 525.893,426.609 526.461,422.791 527.029,417.936 527.598,412.135 528.166,407.413 528.734,402.779 529.303,401.206 529.871,397.612 530.439,392.907 531.008,388.553 531.576,384.27 532.144,381.258 532.713,378.022 533.281,373.91 533.85,368.783 534.418,364.815 534.986,361.048 535.555,358.436 536.123,355.766 536.691,350.147 537.26,347.796 537.828,344.553 538.396,340.29 538.965,337.136 539.533,335.184 540.101,331.053 540.67,326.194 541.238,321.585 541.806,320.098 542.375,317.799 542.943,313.263 543.511,311.017 544.08,308.928 544.648,306.922 545.216,306.026 545.785,304.079 546.353,300.941 546.921,299.126 547.49,298.142 548.058,295.403 548.627,293.922 549.195,291.526 549.763,291.03 550.332,290.295 550.9,289.621 551.468,287.822 552.037,288.586 552.605,287.055 553.173,287.589 553.742,287.999 554.31,288.175 554.878,288.372 555.447,286.286 556.015,285.526 556.583,286.91 557.152,284.852 557.72,283.734 558.288,282.688 558.857,280.864 559.425,278.185 559.993,280.582 560.562,278.74 561.13,277.959 561.698,278.114 562.267,278.302 562.835,275.247 563.404,273.54 563.972,271.969 564.54,272.113 565.109,270.371 565.677,268.749 566.245,268.263 566.814,267.705 567.382,264.918 567.95,264.702 568.519,264.415 569.087,263.914 569.655,262.52 570.224,261.035 570.792,258.842 571.36,255.736 571.929,256.829 572.497,253.577 573.065,249.701 573.634,248.946 574.202,246.393 574.77,246.961 575.339,248.458 575.907,248.958 576.476,248.304 577.044,248.48 577.612,250.809 578.181,251.025 578.749,250.071 579.317,251.391 579.886,251.424 580.454,252.547 581.022,253.307 581.591,252.264 582.159,251.322 582.727,252.273 583.296,248.956 583.864,247.019 584.432,246.305 585.001,247.666 585.569,244.882 586.137,244.151 586.706,243.748 587.274,243.186 587.842,242.664 588.411,243.906 588.979,242.312 589.547,243.472 590.116,242.689 590.684,244.156 591.253,244.473 591.821,242.698 592.389,242.93 592.958,243.128 593.526,243.715 594.094,243.827 594.663,244.025 595.231,245.264 595.799,246.286 596.368,246.484 596.936,244.528 597.504,244.538 598.073,247.232 598.641,248.149 599.209,247.961 599.778,246.723 600.346,245.579 600.914,244.496 601.483,246.422 602.051,246.228 602.619,246.191 603.188,247.009 603.756,246.873 604.325,246.454 604.893,245.188 605.461,242.085 606.03,244.278 606.598,245.277 607.166,245.134 607.735,243.71 608.303,244.655 608.871,243.472 609.44,243.319 610.008,244.288 610.576,244.166 611.145,243.846 611.713,242.8 612.281,241.663 612.85,241.755 613.418,242.745 613.986,240.475 614.555,240.21 615.123,238.214 615.691,239.429 616.26,240.43 616.828,242.601 617.396,241.53 617.965,240.237 618.533,239.158 619.102,239.349 619.67,239.389 620.238,238.613 620.807,238.482 621.375,238.616 621.943,235.822 622.512,234.87 623.08,234.099 623.648,235.508 624.217,231.761 624.785,232.02 625.353,233.256 625.922,232.695 626.49,232.054 627.058,233.494 627.627,234.974 628.195,234.952 628.763,233.406 629.332,234.877 629.9,235.207 630.468,233.44 631.037,235.896 631.605,237.13 632.173,238.394 632.742,237.389 633.31,234.522 633.879,234.801 634.447,235.938 635.015,235.12 635.584,234.333 636.152,234.722 636.72,235.019 637.289,234.273 637.857,232.538 638.425,232.9 638.994,231.349 639.562,231.814 640.13,231.278 640.699,229.893 641.267,232.594 641.835,234.33 642.404,235.784 642.972,236.182 643.54,235.408 644.109,236.644 644.677,235.775 645.245,236.751 645.814,236.897 646.382,240.139 646.951,241.1 647.519,242.926 648.087,241.492 648.656,241.221 649.224,239.994 649.792,240.741 650.361,239.486 650.929,238.32 651.497,238.224 652.066,239.032 652.634,237.839 653.202,236.798 653.771,238.829 654.339,236.716 654.907,236.552 655.476,234.522 656.044,234.62 656.612,234.769 657.181,232.81 657.749,233.011 658.317,232.109 658.886,233.353 659.454,232.616 660.022,234.059 660.591,235.007 661.159,234.001 661.728,235.204 662.296,234.111 662.864,232.19 663.433,233.369 664.001,232.303 664.569,232.401 665.138,232.791 665.706,229.841 666.274,231.193 666.843,231.446 667.411,230.901 667.979,232.341 668.548,231.509 669.116,230.67 669.684,230.062 670.253,228.566 670.821,228.934 671.389,228.286 671.958,228.79 672.526,229.471 673.094,228.982 673.663,232.473 674.231,231.415 674.799,233.794 675.368,233.729 675.936,234.95 676.505,236.208 677.073,236.499 677.641,235.612 678.21,233.653 678.778,233.851 679.346,233.876 679.915,233.066 680.483,233.155 681.051,232.535 681.62,233.73 682.188,234.97 682.756,237.086 683.325,238.166 683.893,238.99 684.461,237.789 685.03,238.511 685.598,241.464 686.166,241.219 686.735,241.73 687.303,241.119 687.871,241.72 688.44,240.987 689.008,239.381 689.577,237.859 690.145,236.552 690.713,236.348 691.282,232.156 691.85,232.459 692.418,230.457 692.987,229.504 693.555,230.716 694.123,232.127 694.692,233.309 695.26,233.574 695.828,233.836 696.397,233.994 696.965,231.01 697.533,232.275 698.102,232.46 698.67,230.565 699.238,231.946 699.807,231.129 700.375,231.462 700.943,229.847 701.512,228.2 702.08,227.801 702.648,229.474 703.217,229.828 703.785,230.266 704.354,229.753 704.922,229.983 705.49,228.181 706.059,226.538 706.627,228.106 707.195,229.544 707.764,227.754 708.332,228.368 708.9,228.872 709.469,228.279 710.037,226.778 710.605,228.312 711.174,227.91 711.742,229.379 712.31,229.752 712.879,230.208 713.447,229.391 714.015,232.987 714.584,236.583 715.152,237.388 715.72,238.335 716.289,238.171 716.857,238.957 717.425,237.863 717.994,236.6 718.562,236.428 719.131,236.227 719.699,234.258 720.267,233.332 720.836,233.315 721.404,233.24 721.972,233.424 722.541,233.552 723.109,233.597 723.677,234.651 724.246,235.566 724.814,234.592 725.382,236.741 725.951,233.426 726.519,232.35 727.087,232.675 727.656,232.632 728.224,232.692 728.792,234.831 729.361,233.658 729.929,233.723 730.497,232.773 731.066,232.904 731.634,231.817 732.203,233.181 732.771,233.24 733.339,234.354 733.908,235.338 734.476,235.329 735.044,234.119 735.613,235.059 736.181,234.88 736.749,236.897 737.318,237.646 737.886,234.194 738.454,234.929 739.023,233.835 739.591,232.737 740.159,232.687 740.728,232.435 741.296,231.153 741.864,229.344 742.433,229.605 743.001,231.981 743.569,232.158 744.138,233.332 744.706,233.45 745.274,233.353 745.843,233.377 746.411,232.174 746.98,234.204 747.548,233.103 748.116,232.089 748.685,231.14 749.253,232.346 749.821,232.371 750.39,232.353 750.958,232.548 751.526,231.548 752.095,231.509 752.663,233.758 753.231,234.864 753.8,234.581 754.368,234.34 754.936,234.108 755.505,233.022 756.073,230.825 756.641,230.908 757.21,229.905 757.778,230.868 758.346,230.649 758.915,229.489 759.483,227.662 760.052,228.017 760.62,228.077 761.188,227.314 761.757,230.9 762.325,230.89 762.893,228.809 763.462,225.976 764.03,225.553 764.598,226.19 765.167,226.535 765.735,227.908 766.303,229.226 766.872,232.583 767.44,233.745 768.008,231.665 768.577,231.871 769.145,232.009 769.713,231.045 770.282,230.214 770.85,231.456 771.418,231.693 771.987,233.822 772.555,234.386 773.123,232.137 773.692,234.157 774.26,233.926 774.829,233.899 775.397,231.601 775.965,232.601 776.534,232.729 777.102,233.803 777.67,235.541 778.239,233.296 778.807,233.276 779.375,230.078 779.944,230.077 780.512,232.075 781.08,231.97 781.649,231.85 782.217,232.92 782.785,233.003 783.354,232.97 783.922,231.854 784.49,230.733 785.059,231.828 785.627,229.892 786.195,228.011 786.764,227.211 787.332,227.578 787.9,225.843 788.469,229.275 789.037,231.349 789.606,231.44 790.174,231.39 790.742,231.39 791.311,232.349 791.879,230.344 792.447,230.354 793.016,231.243 793.584,231.075 794.152,233.031 794.721,231.9 795.289,230.665 795.857,226.554 796.426,228.064 796.994,229.459 797.562,230.761 798.131,229.427 798.699,229.491 799.267,229.608 799.836,230.619 800.404,230.5 800.972,229.394 801.541,228.681 802.109,230.831 802.678,230.953 803.246,232.076 803.814,234.047 804.383,233.02 804.951,232.946 805.519,232.987 806.088,231.677 806.656,234.626 807.224,234.703 807.793,233.463 808.361,234.34 808.929,234.278 809.498,233.05 810.066,233.704 810.634,234.454 811.203,233.101 811.771,234.265 812.339,234.208 812.908,234.068 813.476,232.81 814.044,231.688 814.613,233.831 815.181,233.489 815.749,231.18 816.318,230.126 816.886,234.21 817.455,234.09 818.023,234.094 818.591,234.999 819.16,235.545 819.728,233.056 820.296,229.595 820.865,229.698 821.433,231.072 822.001,229.93 822.57,229.883 823.138,229.894 823.706,231.14 824.275,230.171 824.843,231.237 825.411,234.379 825.98,234.259 826.548,234.966 827.116,233.83 827.685,234.697 828.253,236.438 828.821,237.042 829.39,235.576 829.958,234.179 830.526,234.831 831.095,234.319 831.663,234.069 832.232,233.745 832.8,234.61 833.368,232.23 833.937,231.928 834.505,231.774 835.073,231.558 835.642,232.554 836.21,231.411 836.778,227.167 837.347,228.471 837.915,231.91 838.483,232.942 839.052,231.769 839.62,230.542 840.188,229.402 840.757,228.336 841.325,229.742 841.893,228.608 842.462,229.799 843.03,230.733 843.598,230.884 844.167,228.767 844.735,227.969 845.304,227.919 845.872,227.939 846.44,226.959 847.009,224.255 847.577,224.654 848.145,224.985 848.714,226.606 849.282,228.829 849.85,229.952 850.419,229.934 850.987,230.839 851.555,230.733 852.124,232.833 852.692,231.633 853.26,233.4 853.829,233.025 854.397,231.789 854.965,234.817 855.534,235.389 856.102,234.925 856.67,233.648 857.239,232.192 857.807,230.894 858.375,229.772 858.944,230.83 859.512,229.723 860.081,227.73 860.649,230.041 861.217,233.101 861.786,232.661 862.354,232.539 862.922,232.379 863.491,232.238 864.059,233.012 864.627,233.683 865.196,234.454 865.764,232.945 866.332,231.755 866.901,230.636 867.469,229.352 868.037,229.327 868.606,228.43 869.174,230.522 869.742,228.19 870.311,228.173 870.879,226.264 871.447,226.468 872.016,227.912 872.584,228.219 873.152,229.266 873.721,228.384 874.289,227.693 874.858,226.774 875.426,225.114 875.994,225.592 876.563,225.954 877.131,224.305 877.699,222.723 878.268,224.176 878.836,224.59 879.404,225.076 879.973,225.519 880.541,229.78 881.109,229.948 881.678,230.994 882.246,229.806 882.814,229.043 883.383,230.295 883.951,227.185 884.519,226.445 885.088,226.032 885.656,227.495 886.224,230.902 886.793,228.768 887.361,228.865 887.93,227.033 888.498,228.324 889.066,226.412 889.635,226.591 890.203,227.73 890.771,229.189 891.34,229.242 891.908,230.591 892.476,228.638 893.045,230.979 893.613,231.914 894.181,230.794 894.75,230.655 895.318,232.369 895.886,233.307 896.455,234.01 897.023,233.795 897.591,233.563 898.16,233.523 898.728,231.513 899.296,232.828 899.865,231.794 900.433,232.781 901.001,232.871 901.57,232.746 902.138,233.927 902.707,233.551 903.275,233.219 903.843,233.949 904.412,233.749 904.98,234.578 905.548,233.341 906.117,231.127 906.685,231.125 907.253,234.261 907.822,235.072 908.39,235.777 908.958,235.373 909.527,236.121 910.095,234.783 910.663,234.582 911.232,235.34 911.8,235.916 912.368,236.321 912.937,236.741 913.505,234.977 914.073,234.779 914.642,235.329 915.21,234.867 915.779,234.476 916.347,234.124 916.915,231.71 917.484,230.482 918.052,229.292 918.62,228.155 919.189,228.352 919.757,229.203 920.325,228.182 920.894,228.272 921.462,227.297 922.03,225.431 922.599,225.923 923.167,226.246 923.735,227.718 924.304,228.724 924.872,226.902 925.44,227.074 926.009,228.287 926.577,228.159 927.145,228.174 927.714,225.241 928.282,225.589 928.85,225.738 929.419,223.997 929.987,224.347 930.556,225.773 931.124,225.171 931.692,225.733 932.261,226.147 932.829,225.464 933.397,225.6 933.966,225.92 934.534,225.042 935.102,225.411 935.671,223.909 936.239,224.114 936.807,225.76 937.376,226.105 937.944,225.528 938.512,225.915 939.081,226.318 939.649,227.434 940.217,228.721 940.786,227.898 941.354,230.284 941.922,229.268 942.491,230.528 943.059,230.624 943.627,230.688 944.196,231.897 944.764,233.994 945.333,235.019 945.901,233.837 946.469,233.78 947.038,234.702 947.606,233.633 948.174,233.317 948.743,232.244 949.311,233.245 949.879,233.148 950.448,230.829 951.016,231.803 951.584,229.803 952.153,229.762 952.721,230.928 953.289,230.828 953.858,231.638 954.426,230.457 954.994,229.592 955.563,230.618 956.131,230.786 956.699,228.654 957.268,227.833 957.836,227.119 958.405,228.361 958.973,229.535 959.541,229.669 960.11,230.952 960.678,231.857 961.246,229.783 961.815,227.745 962.383,230.075 962.951,232.207 963.52,233.933 964.088,234.874 964.656,234.71 965.225,234.556 965.793,236.121 966.361,234.79 966.93,233.305 967.498,232.049 968.066,232.78 968.635,231.567 969.203,231.595 969.771,229.711 970.34,229.01 970.908,231.368 971.476,230.234 972.045,229.319 972.613,230.258 973.182,232.346 973.75,231.227 974.318,229.097 974.887,229.367 975.455,229.598 976.023,230.549 976.592,232.541 977.16,232.462 977.728,231.141 978.297,231.231 978.865,230.386 979.433,229.35 980.002,230.322 980.57,232.345 981.138,233.172 981.707,231.977 982.275,229.065 982.843,228.94 983.412,229.845 983.98,228.728 984.548,228.734 985.117,227.84 985.685,227.225 986.253,228.369 986.822,229.609 987.39,229.729 987.959,230.86 988.527,230.94 989.095,229.88 989.664,227.044 990.232,225.516 990.8,226.783 991.369,227.043 991.937,227.471 992.505,225.61 993.074,225.277 993.642,226.679 994.21,226.816 994.779,227.261 995.347,230.772 995.915,231.796 996.484,231.716 997.052,235.563 997.62,235.047 998.189,231.637 998.757,230.496 999.325,231.486 999.894,229.514 1000.46,228.626 1001.03,230.79 1001.6,230.786 1002.17,229.563 1002.74,230.608 1003.3,230.483 1003.87,229.341 1004.44,226.462 1005.01,227.766 1005.58,228.115 1006.15,230.636 1006.71,230.529 1007.28,232.205 1007.85,230.32 1008.42,228.378 1008.99,229.547 1009.56,225.506 1010.12,224.846 1010.69,224.255 1011.26,224.801 1011.83,224.459 1012.4,224.944 1012.97,226.381 1013.53,225.458 1014.1,226.908 1014.67,226.381 1015.24,227.714 1015.81,227.015 1016.38,227.314 1016.94,227.62 1017.51,227.836 1018.08,227.143 1018.65,226.546 1019.22,228.984 1019.79,229.374 1020.35,229.594 1020.92,230.694 1021.49,232.991 1022.06,237.24 1022.63,236.875 1023.2,240.634 1023.76,240.02 1024.33,239.237 1024.9,238.717 1025.47,238.13 1026.04,237.637 1026.61,238.313 1027.17,237.839 1027.74,236.244 1028.31,233.867 1028.88,234.665 1029.45,232.475 1030.02,231.254 1030.58,230.175 1031.15,229.973 1031.72,232.067 1032.29,233.073 1032.86,233.848 1033.43,233.434 1033.99,233.185 1034.56,235.102 1035.13,233.863 1035.7,234.615 1036.27,237.329 1036.84,236.868 1037.4,238.418 1037.97,237.667 1038.54,239.012 1039.11,237.43 1039.68,237.127 1040.25,237.47 1040.81,235.492 1041.38,235.099 1041.95,233.688 1042.52,234.396 1043.09,230.878 1043.66,230.681 1044.22,231.391 1044.79,231.109 1045.36,229.86 1045.93,230.797 1046.5,229.713 1047.07,228.534 1047.63,229.606 1048.2,229.649 1048.77,230.584 1049.34,231.405 1049.91,231.141 1050.48,230.876 1051.05,234.884 1051.61,234.304 1052.18,233.896 1052.75,232.533 1053.32,231.374 1053.89,232.243 1054.46,233.191 1055.02,230.759 1055.59,230.745 1056.16,231.596 1056.73,233.261 1057.3,232.893 1057.87,228.481 1058.43,232.528 1059,231.069 1059.57,232.052 1060.14,234.397 1060.71,234.096 1061.28,233.569 1061.84,231.052 1062.41,228.613 1062.98,228.567 1063.55,228.379 1064.12,227.256 1064.69,228.305 1065.25,228.22 1065.82,228.033 1066.39,227.96 1066.96,227.103 1067.53,230.203 1068.1,229.942 1068.66,227.716 1069.23,226.517 1069.8,226.357 1070.37,227.594 1070.94,224.759 1071.51,224.981 1072.07,225.349 1072.64,224.494 1073.21,221.809 1073.78,224.333 1074.35,223.706 1074.92,222.847 1075.48,223.083 1076.05,226.324 1076.62,224.484 1077.19,225.875 1077.76,228.214 1078.33,228.19 1078.89,228.235 1079.46,225.251 1080.03,224.524 1080.6,222.758 1081.17,223.333 1081.74,224.782 1082.3,225.178 1082.87,224.514 1083.44,223.508 1084.01,225.388 1084.58,226.671 1085.15,229.745 1085.71,230.738 1086.28,230.668 1086.85,230.665 1087.42,230.575 1087.99,227.453 1088.56,224.467 1089.12,225.012 1089.69,226.447 1090.26,227.52 1090.83,229.578 1091.4,227.579 1091.97,228.946 1092.53,229.895 1093.1,229.874 1093.67,229.864 1094.24,229.127 1094.81,226.113 1095.38,227.483 1095.94,229.602 1096.51,231.447 1097.08,231.457 1097.65,231.207 1098.22,229.998 1098.79,229.825 1099.35,229.989 1099.92,229.013 1100.49,227.344 1101.06,228.593 1101.63,228.789 1102.2,226.926 1102.76,226.18 1103.33,226.42 1103.9,225.682 1104.47,225.866 1105.04,227.189 1105.61,231.712 1106.17,229.694 1106.74,227.748 1107.31,226.044 1107.88,224.376 1108.45,223.771 1109.02,224.28 1109.58,223.709 1110.15,224.288 1110.72,224.887 1111.29,223.401 1111.86,223.153 1112.43,223.859 1112.99,226.547 1113.56,227.063 1114.13,226.353 1114.7,228.815 1115.27,228.208 1115.84,228.533 1116.4,228.801 1116.97,228.953 1117.54,229.991 1118.11,231.266 1118.68,233.393 1119.25,236.485 1119.81,238.476 1120.38,235.739 1120.95,236.473 1121.52,237.048 1122.09,234.317 1122.66,236.253 1123.23,235.93 1123.79,233.366 1124.36,233.214 1124.93,235.297 1125.5,234.937 1126.07,233.899 1126.64,234.665 1127.2,234.169 1127.77,235.998 1128.34,232.49 1128.91,231.177 1129.48,230.965 1130.05,228.863 1130.61,228.945 1131.18,227.906 1131.75,226.199 1132.32,228.746 1132.89,228.011 1133.46,227.261 1134.02,229.685 1134.59,230.959 1135.16,231.08 1135.73,232.359 1136.3,233.424 1136.87,233.228 1137.43,232.994 1138,233.108 1138.57,231.979 1139.14,228.797 1139.71,227.887 1140.28,229.166 1140.84,229.291 1141.41,228.503 1141.98,228.863 1142.55,227.219 1143.12,228.58 1143.69,230.909 1144.25,231.045 1144.82,232.146 1145.39,233.251 1145.96,233.268 1146.53,232.983 1147.1,231.744 1147.66,232.495 1148.23,235.41 1148.8,231.928 1149.37,231.006 1149.94,230.937 1150.51,229.71 1151.07,231.075 1151.64,229.968 1152.21,227.885 1152.78,230.284 1153.35,229.147 1153.92,229.153 1154.48,228.182 1155.05,227.36 1155.62,228.66 1156.19,229.004 1156.76,232.26 1157.33,233.327 1157.89,230.953 1158.46,231.91 1159.03,230.9 1159.6,229.995 1160.17,230.048 1160.74,231.035 1161.3,230.102 1161.87,231.424 1162.44,231.469 1163.01,230.355 1163.58,232.326 1164.15,232.145 1164.71,233.168 1165.28,233.917 1165.85,234.563 1166.42,234.219 1166.99,231.938 1167.56,231.873 1168.12,230.379 1168.69,232.566 1169.26,233.216 1169.83,232.061 1170.4,230.746 1170.97,230.652 1171.53,229.708 1172.1,228.822 1172.67,228.075 1173.24,228.425 1173.81,226.454 1174.38,225.525 1174.94,227.009 1175.51,228.119 1176.08,228.187 1176.65,227.179 1177.22,226.425 1177.79,224.936 1178.35,227.425 1178.92,226.737 1179.49,226.776 1180.06,227.039 1180.63,227.067 1181.2,227.186 1181.76,227.377 1182.33,229.796 1182.9,229.952 1183.47,229.742 1184.04,229.98 1184.61,231.94 1185.17,234.117 1185.74,233.86 1186.31,232.526 1186.88,231.534 1187.45,231.344 1188.02,232.267 1188.58,231.952 1189.15,231.84 1189.72,230.662 1190.29,230.637 1190.86,231.58 1191.43,233.572 1192,234.19 1192.56,234.971 1193.13,233.607 1193.7,233.355 1194.27,234.23 1194.84,236.022 1195.41,234.527 1195.97,234.28 1196.54,237.107 1197.11,237.546 1197.68,234.938 1198.25,234.491 1198.82,235.14 1199.38,234.715 1199.95,232.944 1200.52,231.731 1201.09,233.593 1201.66,233.134 1202.23,231.847 1202.79,230.492 1203.36,230.309 1203.93,230.147 1204.5,227.995 1205.07,228.065 1205.64,227.252 1206.2,227.41 1206.77,227.487 1207.34,226.884 1207.91,226.052 1208.48,225.303 1209.05,224.279 1209.61,225.749 1210.18,227.058 1210.75,228.492 1211.32,230.597 1211.89,231.513 1212.46,232.316 1213.02,228.996 1213.59,230.159 1214.16,230.258 1214.73,230.514 1215.3,229.523 1215.87,228.267 1216.43,227.441 1217,228.667 1217.57,228.532 1218.14,226.592 1218.71,227.705 1219.28,228.008 1219.84,230.37 1220.41,230.296 1220.98,230.148 1221.55,229.92 1222.12,229.828 1222.69,227.711 1223.25,230.092 1223.82,231.233 1224.39,231.077 1224.96,232.028 1225.53,232.028 1226.1,233.995 1226.66,232.606 1227.23,231.461 1227.8,230.19 1228.37,234.147 1228.94,234.711 1229.51,235.16 1230.07,235.762 1230.64,235.211 1231.21,234.962 1231.78,234.325 1232.35,229.979 1232.92,230.585 1233.48,229.421 1234.05,229.203 1234.62,230.169 1235.19,229.952 1235.76,229.951 1236.33,230.945 1236.89,229.823 1237.46,229.939 1238.03,231.079 1238.6,230.986 1239.17,229.806 1239.74,228.654 1240.3,224.588 1240.87,223.942 1241.44,225.357 1242.01,225.556 1242.58,227.818 1243.15,227.918 1243.71,230.02 1244.28,230.05 1244.85,227.888 1245.42,231.244 1245.99,232.017 1246.56,233.955 1247.12,233.769 1247.69,234.741 1248.26,235.516 1248.83,234.028 1249.4,233.779 1249.97,235.578 1250.53,234.249 1251.1,235.054 1251.67,233.563 1252.24,234.023 1252.81,233.667 1253.38,233.355 1253.94,232.131 1254.51,230.841 1255.08,231.584 1255.65,230.6 1256.22,229.368 1256.79,228.266 1257.35,227.228 1257.92,226.114 1258.49,225.332 1259.06,226.623 1259.63,226.738 1260.2,228.737 1260.76,228.747 1261.33,229.795 1261.9,229.83 1262.47,228.667 1263.04,230.08 1263.61,229.919 1264.18,226.757 1264.74,226.009 1265.31,226.392 1265.88,228.787 1266.45,226.801 1267.02,227.068 1267.59,226.021 1268.15,226.222 1268.72,226.495 1269.29,227.658 1269.86,227.792 1270.43,228.952 1271,231.969 1271.56,231.781 1272.13,231.672 1272.7,231.247 1273.27,232.17 1273.84,230.015 1274.41,229.896 1274.97,231.781 1275.54,232.61 1276.11,230.204 1276.68,230.023 1277.25,230.14 1277.82,230.026 1278.38,229.882 1278.95,229.779 1279.52,228.858 1280.09,229.783 1280.66,229.832 1281.23,228.869 1281.79,229.944 1282.36,229.997 1282.93,229.785 1283.5,232.951 1284.07,235.811 1284.64,234.138 1285.2,233.713 1285.77,235.389 1286.34,234.125 1286.91,233.793 1287.48,232.446 1288.05,232.39 1288.61,232.39 1289.18,230.921 1289.75,231.9 1290.32,230.53 1290.89,230.193 1291.46,229.948 1292.02,231.849 1292.59,230.657 1293.16,234.746 1293.73,233.279 1294.3,233.061 1294.87,232.708 1295.43,231.455 1296,230.164 1296.57,230.87 1297.14,230.705 1297.71,228.57 1298.28,228.923 1298.84,228.013 1299.41,226.986 1299.98,227.142 1300.55,226.191 1301.12,225.219 1301.69,224.354 1302.25,223.611 1302.82,223.024 1303.39,221.136 1303.96,219.895 1304.53,220.585 1305.1,223.082 1305.66,221.499 1306.23,221.993 1306.8,224.42 1307.37,225.898 1307.94,224.256 1308.51,224.863 1309.07,225.219 1309.64,223.523 1310.21,225.017 1310.78,226.48 1311.35,228.945 1311.92,227.947 1312.48,228.217 1313.05,226.132 1313.62,228.403 1314.19,232.505 1314.76,231.334 1315.33,229.927 1315.89,230.191 1316.46,230.206 1317.03,230.374 1317.6,229.236 1318.17,227.339 1318.74,226.375 1319.3,228.719 1319.87,227.863 1320.44,224.027 1321.01,224.558 1321.58,226.112 1322.15,227.784 1322.71,227.241 1323.28,226.5 1323.85,228.767 1324.42,228.039 1324.99,226.358 1325.56,225.867 1326.12,227.347 1326.69,224.801 1327.26,227.356 1327.83,226.773 1328.4,227.176 1328.97,226.475 1329.53,225.95 1330.1,226.529 1330.67,227.009 1331.24,227.486 1331.81,227.759 1332.38,229.044 1332.94,229.31 1333.51,227.747 1334.08,227.879 1334.65,225 1335.22,225.547 1335.79,223.855 1336.36,227.746 1336.92,228.189 1337.49,226.365 1338.06,226.76 1338.63,224.989 1339.2,225.394 1339.77,225.74 1340.33,226.392 1340.9,226.732 1341.47,227.19 1342.04,228.424 1342.61,229.888 1343.18,229.135 1343.74,230.378 1344.31,231.668 1344.88,231.583 1345.45,232.861 1346.02,235.06 1346.59,233.794 1347.15,235.718 1347.72,235.539 1348.29,234.252 1348.86,235.458 1349.43,235.266 1350,235.047 1350.56,235.964 1351.13,235.714 1351.7,235.358 1352.27,233.857 1352.84,233.734 1353.41,233.458 1353.97,234.419 1354.54,235.107 1355.11,234.593 1355.68,234.387 1356.25,235.069 1356.82,234.908 1357.38,234.502 1357.95,234.268 1358.52,234.977 1359.09,233.706 1359.66,232.434 1360.23,233.259 1360.79,231.143 1361.36,232.331 1361.93,230.006 1362.5,231.303 1363.07,231.176 1363.64,231.186 1364.2,232.062 1364.77,227.877 1365.34,227.323 1365.91,227.753 1366.48,228.329 1367.05,226.409 1367.61,225.838 1368.18,228.301 1368.75,228.755 1369.32,226.834 1369.89,228.269 1370.46,228.457 1371.02,230.746 1371.59,231.008 1372.16,234.012 1372.73,233.777 1373.3,234.673 1373.87,234.441 1374.43,234.064 1375,233.741 1375.57,233.462 1376.14,235.395 1376.71,233.972 1377.28,234.629 1377.84,234.516 1378.41,233.413 1378.98,232.444 1379.55,231.476 1380.12,232.535 1380.69,230.538 1381.25,231.462 1381.82,232.204 1382.39,233.037 1382.96,231.84 1383.53,233.815 1384.1,232.498 1384.66,232.336 1385.23,233.312 1385.8,231.946 1386.37,232.687 1386.94,230.522 1387.51,231.642 1388.07,232.69 1388.64,233.499 1389.21,234.392 1389.78,232.991 1390.35,232.772 1390.92,231.574 1391.48,233.466 1392.05,235.13 1392.62,235.52 1393.19,234.986 1393.76,233.419 1394.33,233.049 1394.89,231.924 1395.46,229.655 1396.03,231.52 1396.6,232.523 1397.17,232.336 1397.74,230.95 1398.3,231.014 1398.87,230.87 1399.44,230.808 1400.01,230.622 1400.58,232.094 1401.15,231.735 1401.71,229.455 1402.28,229.418 1402.85,229.28 1403.42,230.391 1403.99,230.185 1404.56,225.849 1405.13,224.853 1405.69,225.137 1406.26,225.48 1406.83,225.899 1407.4,227.005 1407.97,228.357 1408.54,229.435 1409.1,228.153 1409.67,227.479 1410.24,227.628 1410.81,228.556 1411.38,229.832 1411.95,230.984 1412.51,232.171 1413.08,230.822 1413.65,230.74 1414.22,227.463 1414.79,228.719 1415.36,229.835 1415.92,229.026 1416.49,230.248 1417.06,229.191 1417.63,231.034 1418.2,232.097 1418.77,233.013 1419.33,232.582 1419.9,232.431 1420.47,234.174 1421.04,233.988 1421.61,232.729 1422.18,232.317 1422.74,227.979 1423.31,227.998 1423.88,229.242 1424.45,229.118 1425.02,228.193 1425.59,228.191 1426.15,228.346 1426.72,227.1 1427.29,226.108 1427.86,226.323 1428.43,226.459 1429,225.657 1429.56,227.995 1430.13,229.056 1430.7,225.978 1431.27,225.075 1431.84,224.392 1432.41,224.516 1432.97,225.027 1433.54,225.529 1434.11,225.788 1434.68,225.182 1435.25,227.777 1435.82,227.963 1436.38,228.108 1436.95,228.082 1437.52,228.252 1438.09,229.336 1438.66,229.416 1439.23,226.287 1439.79,227.72 1440.36,228.944 1440.93,228.199 1441.5,226.585 1442.07,229.123 1442.64,228.154 1443.2,229.384 1443.77,231.409 1444.34,233.36 1444.91,232.05 1445.48,229.898 1446.05,231.092 1446.61,232.989 1447.18,232.905 1447.75,231.776 1448.32,231.607 1448.89,231.669 1449.46,229.343 1450.02,230.599 1450.59,233.539 1451.16,232.444 1451.73,233.535 1452.3,230.022 1452.87,229.126 1453.43,230.111 1454,229.945 1454.57,234.163 1455.14,234.8 1455.71,237.527 1456.28,236.823 1456.84,237.485 1457.41,237.686 1457.98,237.165 1458.55,236.737 1459.12,239.424 1459.69,238.644 1460.25,235.997 1460.82,234.685 1461.39,236.456 1461.96,234.681 1462.53,234.362 1463.1,233.823 1463.66,233.422 1464.23,233.961 1464.8,231.318 1465.37,230.195 1465.94,229.018 1466.51,228.65 1467.07,226.68 1467.64,227.848 1468.21,226.892 1468.78,227.114 1469.35,227.288 1469.92,226.452 1470.48,227.577 1471.05,226.654 1471.62,225.899 1472.19,229.189 1472.76,229.127 1473.33,230.207 1473.89,232.11 1474.46,234.033 1475.03,234.608 1475.6,237.212 1476.17,237.537 1476.74,236.917 1477.31,235.251 1477.87,237.063 1478.44,235.278 1479.01,232.606 1479.58,232.631 1480.15,232.356 1480.72,232.964 1481.28,231.681 1481.85,229.247 1482.42,229.202 1482.99,226.952 1483.56,227.862 1484.13,226.925 1484.69,229.08 1485.26,230.081 1485.83,226.941 1486.4,227.033 1486.97,224.001 1487.54,223.274 1488.1,222.688 1488.67,225.111 1489.24,223.36 1489.81,225.78 1490.38,225.831 1490.95,224.051 1491.51,223.408 1492.08,223.827 1492.65,228.18 1493.22,227.383 1493.79,226.342 1494.36,228.815 1494.92,227.898 1495.49,226.081 1496.06,225.257 1496.63,226.661 1497.2,225.65 1497.77,224.965 1498.33,227.502 1498.9,228.68 1499.47,227.855 1500.04,228.899 1500.61,229.88 1501.18,229.897 1501.74,229.84 1502.31,230.923 1502.88,229.838 1503.45,229.905 1504.02,229.804 1504.59,228.875 1505.15,230.013 1505.72,230.992 1506.29,230.7 1506.86,231.471 1507.43,230.234 1508,232.193 1508.56,231.03 1509.13,229.905 1509.7,229.985 1510.27,228.866 1510.84,228.932 1511.41,226.772 1511.97,228.293 1512.54,225.044 1513.11,226.424 1513.68,224.599 1514.25,226.038 1514.82,226.257 1515.38,225.7 1515.95,224.797 1516.52,224.993 1517.09,226.357 1517.66,227.651 1518.23,225.898 1518.79,228.333 1519.36,228.604 1519.93,226.748 1520.5,227.136 1521.07,227.419 1521.64,227.687 1522.2,227.885 1522.77,227.063 1523.34,226.203 1523.91,228.682 1524.48,230.962 1525.05,232.371 1525.61,230.455 1526.18,228.347 1526.75,227.566 1527.32,227.791 1527.89,228.121 1528.46,229.21 1529.02,230.467 1529.59,230.619 1530.16,231.674 1530.73,232.537 1531.3,231.529 1531.87,232.52 1532.43,232.727 1533,231.5 1533.57,230.204 1534.14,231.17 1534.71,230.115 1535.28,232.369 1535.84,232.267 1536.41,232.141 1536.98,230.111 1537.55,229.92 1538.12,232.374 1538.69,233.204 1539.25,233.012 1539.82,231.794 1540.39,232.68 1540.96,232.621 1541.53,232.518 1542.1,235.421 1542.66,234.995 1543.23,235.518 1543.8,234.94 1544.37,234.7 1544.94,231.262 1545.51,231.175 1546.08,231.113 1546.64,233.207 1547.21,230.892 1547.78,230.671 1548.35,231.596 1548.92,232.317 1549.49,233.298 1550.05,234.027 1550.62,232.517 1551.19,231.337 1551.76,231.128 1552.33,231.221 1552.9,230.171 1553.46,228.238 1554.03,226.669 1554.6,224.702 1555.17,225.983 1555.74,227.345 1556.31,228.701 1556.87,232.77 1557.44,232.497 1558.01,232.017 1558.58,232.903 1559.15,232.831 1559.72,233.726 1560.28,232.234 1560.85,230.904 1561.42,229.83 1561.99,228.851 1562.56,228.103 1563.13,226.263 1563.69,229.694 1564.26,229.623 1564.83,230.617 1565.4,231.471 1565.97,230.178 1566.54,227.999 1567.1,226.23 1567.67,226.666 1568.24,223.737 1568.81,224.218 1569.38,223.452 1569.95,221.963 1570.51,224.53 1571.08,226.19 1571.65,225.473 1572.22,225.941 1572.79,227.206 1573.36,229.259 1573.92,228.546 1574.49,228.857 1575.06,227.022 1575.63,228.289 1576.2,227.633 1576.77,228.818 1577.33,228.047 1577.9,227.22 1578.47,227.491 1579.04,226.713 1579.61,228.161 1580.18,228.608 1580.74,227.891 1581.31,227.201 1581.88,228.518 1582.45,227.738 1583.02,227.867 1583.59,228.074 1584.15,227.437 1584.72,227.715 1585.29,228.948 1585.86,228.249 1586.43,230.75 1587,229.83 1587.56,230.807 1588.13,231.892 1588.7,232.649 1589.27,234.517 1589.84,233.394 1590.41,233.317 1590.97,233.206 1591.54,233.943 1592.11,233.805 1592.68,232.451 1593.25,232.29 1593.82,231.176 1594.38,231.172 1594.95,232.273 1595.52,235.375 1596.09,233.783 1596.66,234.684 1597.23,235.418 1597.79,237.165 1598.36,235.734 1598.93,234.331 1599.5,233.126 1600.07,229.938 1600.64,229.852 1601.2,227.946 1601.77,229.169 1602.34,229.394 1602.91,228.435 1603.48,226.536 1604.05,227.982 1604.61,228.371 1605.18,228.436 1605.75,227.637 1606.32,229.918 1606.89,228.76 1607.46,230.006 1608.02,228.114 1608.59,227.437 1609.16,228.479 1609.73,227.727 1610.3,228.985 1610.87,228.178 1611.43,229.33 1612,227.102 1612.57,229.311 1613.14,230.391 1613.71,231.61 1614.28,231.369 1614.84,232.35 1615.41,232.282 1615.98,233.154 1616.55,234 1617.12,234.929 1617.69,234.474 1618.26,234.039 1618.82,235.669 1619.39,235.181 1619.96,233.63 1620.53,231.277 1621.1,231.057 1621.67,230.954 1622.23,229.817 1622.8,230.066 1623.37,232.959 1623.94,231.572 1624.51,233.528 1625.08,234.335 1625.64,234.791 1626.21,233.392 1626.78,230.116 1627.35,229.851 1627.92,229.866 1628.49,228.641 1629.05,228.617 1629.62,229.757 1630.19,228.765 1630.76,229.88 1631.33,228.98 1631.9,227.885 1632.46,228.737 1633.03,228.93 1633.6,232.037 1634.17,229.776 1634.74,228.603 1635.31,226.747 1635.87,227.978 1636.44,226.969 1637.01,228.046 1637.58,228.282 1638.15,228.311 1638.72,229.443 1639.28,230.574 1639.85,230.368 1640.42,229.252 1640.99,230.385 1641.56,229.345 1642.13,229.433 1642.69,232.43 1643.26,232.384 1643.83,236.331 1644.4,235.038 1644.97,234.499 1645.54,237.052 1646.1,239.358 1646.67,239.519 1647.24,237.692 1647.81,234.998 1648.38,234.451 1648.95,235.128 1649.51,235.768 1650.08,236.221 1650.65,235.906 1651.22,235.41 1651.79,236.141 1652.36,234.424 1652.92,233.123 1653.49,231.949 1654.06,232.56 1654.63,231.9 1655.2,230.787 1655.77,230.632 1656.33,230.303 1656.9,230.081 1657.47,227.816 1658.04,226.895 1658.61,228.082 1659.18,228.962 1659.74,229.84 1660.31,231.573 1660.88,231.418 1661.45,232.149 1662.02,231.983 1662.59,229.681 1663.15,229.579 1663.72,228.367 1664.29,227.312 1664.86,225.166 1665.43,222.33 1666,222.027 1666.56,223.734 1667.13,225.307 1667.7,224.284 1668.27,224.496 1668.84,223.925 1669.41,222.128 1669.97,221.593 1670.54,220.925 1671.11,221.632 1671.68,223.003 1672.25,222.466 1672.82,222.926 1673.38,223.475 1673.95,222.033 1674.52,221.543 1675.09,222.365 1675.66,224.021 1676.23,225.511 1676.79,226.894 1677.36,227.188 1677.93,227.184 1678.5,227.357 1679.07,227.527 1679.64,228.851 1680.2,229.104 1680.77,230.161 1681.34,230.294 1681.91,229.336 1682.48,227.117 1683.05,229.211 1683.61,230.416 1684.18,231.4 1684.75,234.384 1685.32,234.17 1685.89,233.831 1686.46,234.59 1687.02,234.292 1687.59,234.19 1688.16,233.892 1688.73,233.45 1689.3,233.22 1689.87,231.917 1690.44,231.877 1691,232.746 1691.57,232.509 1692.14,231.323 1692.71,231.415 1693.28,231.457 1693.85,230.443 1694.41,232.276 1694.98,229.06 1695.55,229.243 1696.12,230.492 1696.69,229.623 1697.26,228.901 1697.82,230.275 1698.39,231.3 1698.96,231.198 1699.53,232.062 1700.1,232.044 1700.67,231.937 1701.23,231.772 1701.8,228.696 1702.37,229.838 1702.94,227.926 1703.51,231.183 1704.08,232.03 1704.64,232.976 1705.21,231.652 1705.78,230.416 1706.35,229.364 1706.92,229.408 1707.49,229.386 1708.05,227.518 1708.62,228.781 1709.19,229.024 1709.76,228.769 1710.33,228.89 1710.9,229.834 1711.46,229.941 1712.03,227.922 1712.6,227.937 1713.17,228.185 1713.74,229.316 1714.31,230.08 1714.87,230.979 1715.44,229.847 1716.01,229.508 1716.58,229.666 1717.15,229.684 1717.72,229.764 1718.28,229.856 1718.85,228.723 1719.42,226.802 1719.99,226.892 1720.56,227.328 1721.13,228.382 1721.69,229.488 1722.26,231.402 1722.83,228.248 1723.4,228.117 1723.97,228.238 1724.54,228.219 1725.1,229.582 1725.67,228.489 1726.24,230.811 1726.81,231.477 1727.38,229.432 1727.95,229.572 1728.51,228.55 1729.08,228.703 1729.65,228.793 1730.22,229.81 1730.79,230.106 1731.36,229.983 1731.92,229.913 1732.49,233.884 1733.06,234.728 1733.63,234.516 1734.2,233.379 1734.77,234.068 1735.33,234.856 1735.9,235.508 1736.47,236.194 1737.04,237.831 1737.61,238.116 1738.18,237.424 1738.74,234.729 1739.31,234.575 1739.88,234.15 1740.45,233.808 1741.02,233.358 1741.59,233.038 1742.15,230.625 1742.72,230.218 1743.29,230.04 1743.86,228.904 1744.43,230.11 1745,229.037 1745.56,228.237 1746.13,229.236 1746.7,229.384 1747.27,229.236 1747.84,229.153 1748.41,228.184 1748.97,225.101 1749.54,224.238 1750.11,222.608 1750.68,221.216 1751.25,222.914 1751.82,223.388 1752.38,223.77 1752.95,225.38 1753.52,225.9 1754.09,227.304 1754.66,229.55 1755.23,227.287 1755.79,227.428 1756.36,227.607 1756.93,225.722 1757.5,225.026 1758.07,223.267 1758.64,224.752 1759.21,226.193 1759.77,227.624 1760.34,228.823 1760.91,228.316 1761.48,228.475 1762.05,230.751 1762.62,229.636 1763.18,231.763 1763.75,230.613 1764.32,233.778 1764.89,233.56 1765.46,231.507 1766.03,231.354 1766.59,231.227 1767.16,232.108 1767.73,231.001 1768.3,231.971 1768.87,228.752 1769.44,230.973 1770,232.048 1770.57,233.041 1771.14,233.554 1771.71,231.32 1772.28,233.451 1772.85,235.117 1773.41,234.782 1773.98,236.812 1774.55,237.27 1775.12,235.645 1775.69,234.175 1776.26,231.924 1776.82,230.825 1777.39,229.696 1777.96,228.779 1778.53,228.858 1779.1,228.753 1779.67,228.966 1780.23,227.802 1780.8,225.826 1781.37,221.984 1781.94,222.608 1782.51,224.308 1783.08,225.921 1783.64,227.183 1784.21,225.59 1784.78,227.02 1785.35,227.277 1785.92,228.472 1786.49,228.682 1787.05,229.919 1787.62,231.059 1788.19,231.274 1788.76,228.147 1789.33,228.502 1789.9,227.796 1790.46,228.196 1791.03,228.52 1791.6,227.433 1792.17,226.687 1792.74,227.1 1793.31,227.48 1793.87,232.972 1794.44,234.923 1795.01,232.688 1795.58,232.476 1796.15,234.213 1796.72,232.623 1797.28,232.168 1797.85,231.934 1798.42,232.837 1798.99,233.752 1799.56,235.521 1800.13,234.183 1800.69,233.714 1801.26,232.432 1801.83,230.432 1802.4,230.564 1802.97,230.598 1803.54,231.525 1804.1,230.587 1804.67,230.428 1805.24,229.322 1805.81,226.431 1806.38,227.824 1806.95,228.036 1807.51,229.361 1808.08,227.561 1808.65,227.621 1809.22,226.975 1809.79,228.178 1810.36,228.31 1810.92,226.366 1811.49,225.453 1812.06,224.656 1812.63,227.285 1813.2,226.565 1813.77,227.947 1814.33,229.242 1814.9,229.466 1815.47,228.502 1816.04,228.481 1816.61,227.646 1817.18,229.063 1817.74,229.268 1818.31,231.464 1818.88,230.513 1819.45,230.457 1820.02,231.532 1820.59,231.484 1821.15,233.527 1821.72,231.084 1822.29,231.992 1822.86,232 1823.43,231.059 1824,231.828 1824.56,232.797 1825.13,232.671 1825.7,232.511 1826.27,234.224 1826.84,233.966 1827.41,232.845 1827.97,234.819 1828.54,234.507 1829.11,235.202 1829.68,234.771 1830.25,235.258 1830.82,235.203 1831.39,236.894 1831.95,235.348 1832.52,233.962 1833.09,232.593 1833.66,233.686 1834.23,233.274 1834.8,233.097 1835.36,229.753 1835.93,229.783 1836.5,228.709 1837.07,226.633 1837.64,225.735 1838.21,225.175 1838.77,223.511 1839.34,222.992 1839.91,224.38 1840.48,225.758 1841.05,226.983 1841.62,228.21 1842.18,227.067 1842.75,227.436 1843.32,224.498 1843.89,223.966 1844.46,225.539 1845.03,227.983 1845.59,227.16 1846.16,229.179 1846.73,229.333 1847.3,231.266 1847.87,229.152 1848.44,228.183 1849,229.475 1849.57,231.582 1850.14,233.443 1850.71,232.056 1851.28,229.758 1851.85,230.688 1852.41,228.89 1852.98,226.81 1853.55,224.028 1854.12,224.587 1854.69,225.052 1855.26,224.47 1855.82,223.939 1856.39,223.261 1856.96,222.789 1857.53,221.276 1858.1,222.14 1858.67,220.669 1859.23,222.539 1859.8,222.904 1860.37,223.692 1860.94,223.303 1861.51,223.721 1862.08,227.382 1862.64,228.906 1863.21,230.045 1863.78,228.068 1864.35,229.316 1864.92,226.134 1865.49,227.512 1866.05,228.64 1866.62,230.064 1867.19,232.125 1867.76,233.088 1868.33,234.972 1868.9,233.814 1869.46,229.525 1870.03,228.386 1870.6,231.68 1871.17,231.859 1871.74,231.974 1872.31,233.082 1872.87,235.201 1873.44,233.75 1874.01,233.869 1874.58,233.699 1875.15,233.531 1875.72,234.492 1876.28,233.202 1876.85,234.912 1877.42,235.901 1877.99,237.635 1878.56,237.995 1879.13,234.471 1879.69,231.279 1880.26,232.285 1880.83,234.262 1881.4,233.871 1881.97,236.02 1882.54,233.46 1883.1,231.301 1883.67,231.156 1884.24,232.132 1884.81,232.186 1885.38,232.119 1885.95,233.028 1886.51,234.995 1887.08,234.542 1887.65,232.214 1888.22,231.156 1888.79,231.811 1889.36,232.562 1889.92,230.257 1890.49,230.392 1891.06,229.235 1891.63,229.239 1892.2,232.354 1892.77,231.383 1893.33,230.42 1893.9,232.508 1894.47,231.401 1895.04,232.427 1895.61,232.329 1896.18,232.247 1896.74,232.118 1897.31,232.049 1897.88,231.053 1898.45,230.86 1899.02,231.687 1899.59,232.435 1900.16,233.474 1900.72,233.1 1901.29,233.937 1901.86,235.667 1902.43,234.212 1903,233.029 1903.57,234.714 1904.13,235.352 1904.7,234.876 1905.27,235.325 1905.84,234.716 1906.41,234.442 1906.98,234.982 1907.54,234.536 1908.11,233.158 1908.68,232.697 1909.25,233.68 1909.82,233.52 1910.39,232.216 1910.95,230.956 1911.52,229.634 1912.09,230.818 1912.66,230.662 1913.23,229.411 1913.8,228.304 1914.36,227.294 1914.93,226.143 1915.5,226.247 1916.07,227.602 1916.64,227.455 1917.21,227.622 1917.77,223.69 1918.34,222.988 1918.91,225.422 1919.48,226.699 1920.05,225.785 1920.62,224.857 1921.18,225.054 1921.75,223.356 1922.32,226.796 1922.89,229.209 1923.46,229.227 1924.03,227.16 1924.59,226.519 1925.16,228.769 1925.73,228.66 1926.3,229.651 1926.87,228.562 1927.44,231.629 1928,232.438 1928.57,232.061 1929.14,231.882 1929.71,233.729 1930.28,231.453 1930.85,230.339 1931.41,229.207 1931.98,230.245 1932.55,230.156 1933.12,232.973 1933.69,233.799 1934.26,231.343 1934.82,231.105 1935.39,231.928 1935.96,232.729 1936.53,233.468 1937.1,233.173 1937.67,233.916 1938.23,233.298 1938.8,233.945 1939.37,233.602 1939.94,232.249 1940.51,232.095 1941.08,230.733 1941.64,227.456 1942.21,228.384 1942.78,229.368 1943.35,231.531 1943.92,232.487 1944.49,231.178 1945.05,230.052 1945.62,229.905 1946.19,228.699 1946.76,227.654 1947.33,228.66 1947.9,228.67 1948.46,228.621 1949.03,227.727 1949.6,229.953 1950.17,229.907 1950.74,227.904 1951.31,226.957 1951.87,228.192 1952.44,227.525 1953.01,227.755 1953.58,226.969 1954.15,231.079 1954.72,229.86 1955.28,230.868 1955.85,229.474 1956.42,228.657 1956.99,227.825 1957.56,228.04 1958.13,229.175 1958.69,229.305 1959.26,227.121 1959.83,228.312 1960.4,227.525 1960.97,229.892 1961.54,230.958 1962.1,231.921 1962.67,231.939 1963.24,231.821 1963.81,231.797 1964.38,230.568 1964.95,230.466 1965.51,233.186 1966.08,233.693 1966.65,233.38 1967.22,232.984 1967.79,232.638 1968.36,232.33 1968.92,232.354 1969.49,229.122 1970.06,229.109 1970.63,225.035 1971.2,225.291 1971.77,224.77 1972.34,227.306 1972.9,227.35 1973.47,228.601 1974.04,229.719 1974.61,229.754 1975.18,227.643 1975.75,227.692 1976.31,226.561 1976.88,224.889 1977.45,225.327 1978.02,226.798 1978.59,227.947 1979.16,226.095 1979.72,225.555 1980.29,224.785 1980.86,225.269 1981.43,227.739 1982,227.956 1982.57,226.021 1983.13,227.368 1983.7,228.327 1984.27,228.577 1984.84,227.595 1985.41,227.928 1985.98,229.262 1986.54,230.465 1987.11,230.629 1987.68,232.838 1988.25,235.709 1988.82,234.517 1989.39,233.325 1989.95,232.226 1990.52,233.218 1991.09,231.994 1991.66,228.89 1992.23,229.953 1992.8,231.95 1993.36,232.05 1993.93,231.856 1994.5,232.727 1995.07,231.478 1995.64,232.476 1996.21,231.438 1996.77,232.125 1997.34,233.006 1997.91,232.791 1998.48,232.572 1999.05,231.302 1999.62,229.178 2000.18,230.239 2000.75,229.979 2001.32,232.92 2001.89,232.611 2002.46,233.449 2003.03,232.198 2003.59,234.062 2004.16,231.614 2004.73,234.333 2005.3,232.95 2005.87,233.649 2006.44,233.141 2007,232.56 2007.57,229.207 2008.14,229.081 2008.71,228.012 2009.28,226.063 2009.85,228.224 2010.41,225.352 2010.98,226.647 2011.55,226.851 2012.12,228.971 2012.69,229.055 2013.26,230.105 2013.82,227.076 2014.39,226.162 2014.96,226.528 2015.53,226.871 2016.1,224.882 2016.67,225.23 2017.23,228.833 2017.8,227.838 2018.37,229.112 2018.94,228.305 2019.51,227.352 2020.08,226.515 2020.64,226.828 2021.21,226.748 2021.78,225.985 2022.35,226.298 2022.92,227.42 2023.49,228.679 2024.05,229.221 2024.62,226.174 2025.19,225.272 2025.76,225.781 2026.33,226.123 2026.9,224.474 2027.46,226.801 2028.03,228.396 2028.6,229.493 2029.17,232.714 2029.74,229.469 2030.31,228.591 2030.87,228.346 2031.44,227.388 2032.01,227.534 2032.58,227.833 2033.15,228.849 2033.72,229.878 2034.28,228.937 2034.85,228.957 2035.42,228.1 2035.99,227.606 2036.56,227.052 2037.13,229.204 2037.69,229.515 2038.26,229.545 2038.83,230.705 2039.4,230.645 2039.97,233.814 2040.54,236.732 2041.11,234.301 2041.67,234.186 2042.24,234.761 2042.81,232.622 2043.38,233.519 2043.95,232.373 2044.52,232.307 2045.08,231.092 2045.65,229.908 2046.22,229.978 2046.79,230.156 2047.36,228.661 2047.93,227.952 2048.49,230.367 2049.06,231.643 2049.63,232.647 2050.2,231.746 2050.77,230.741 2051.34,230.824 2051.9,230.801 2052.47,230.735 2053.04,230.475 2053.61,231.494 2054.18,232.581 2054.75,233.681 2055.31,232.349 2055.88,233.351 2056.45,233.091 2057.02,232.872 2057.59,231.536 2058.16,228.205 2058.72,229.463 2059.29,230.311 2059.86,229.441 2060.43,230.575 2061,230.504 2061.57,230.299 2062.13,230.163 2062.7,229.071 2063.27,229.259 2063.84,229.319 2064.41,227.142 2064.98,225.149 2065.54,226.519 2066.11,226.913 2066.68,231.267 2067.25,230.212 2067.82,229.15 2068.39,230.301 2068.95,227.294 2069.52,227.642 2070.09,228.899 2070.66,228.965 2071.23,230.901 2071.8,232.026 2072.36,230.883 2072.93,230.952 2073.5,231.056 2074.07,231.823 2074.64,234.974 2075.21,234.761 2075.77,231.461 2076.34,230.457 2076.91,230.393 2077.48,232.359 2078.05,230.414 2078.62,230.49 2079.18,229.249 2079.75,229.376 2080.32,227.339 2080.89,226.625 2081.46,228.736 2082.03,229.716 2082.59,233.81 2083.16,235.584 2083.73,235.965 2084.3,234.353 2084.87,234.08 2085.44,236.725 2086,236.096 2086.57,235.454 2087.14,233.879 2087.71,233.611 2088.28,232.355 2088.85,231.975 2089.41,231.958 2089.98,231.765 2090.55,231.666 2091.12,229.745 2091.69,232.823 2092.26,234.761 2092.82,235.285 2093.39,233.782 2093.96,231.398 2094.53,231.201 2095.1,232.007 2095.67,230.834 2096.23,228.62 2096.8,229.492 2097.37,230.46 2097.94,229.425 2098.51,229.587 2099.08,229.388 2099.64,228.538 2100.21,228.63 2100.78,227.515 2101.35,227.712 2101.92,228.799 2102.49,229.801 2103.05,229.745 2103.62,228.674 2104.19,228.914 2104.76,229.986 2105.33,230.861 2105.9,234.788 2106.46,233.36 2107.03,231.963 2107.6,232.821 2108.17,231.538 2108.74,231.345 2109.31,230.144 2109.87,227.966 2110.44,227.057 2111.01,227.212 2111.58,228.439 2112.15,228.364 2112.72,233.522 2113.29,233.303 2113.85,232.045 2114.42,231.831 2114.99,229.678 2115.56,229.417 2116.13,229.172 2116.7,227.128 2117.26,227.249 2117.83,227.277 2118.4,225.074 2118.97,226.449 2119.54,226.553 2120.11,227.51 2120.67,227.681 2121.24,225.788 2121.81,228.044 2122.38,228.324 2122.95,227.328 2123.52,227.371 2124.08,226.663 2124.65,226.688 2125.22,229.862 2125.79,226.7 2126.36,225.632 2126.93,223.71 2127.49,226.122 2128.06,225.457 2128.63,224.884 2129.2,225.601 2129.77,227.026 2130.34,227.186 2130.9,228.652 2131.47,226.675 2132.04,227.88 2132.61,229.9 2133.18,229.889 2133.75,230.912 2134.31,227.576 2134.88,227.818 2135.45,229.016 2136.02,230.314 2136.59,231.458 2137.16,233.432 2137.72,232.125 2138.29,231.987 2138.86,232.265 2139.43,230.388 2140,230.449 2140.57,230.549 2141.13,230.681 2141.7,227.19 2142.27,229.537 2142.84,230.008 2143.41,230.967 2143.98,230.825 2144.54,231.7 2145.11,228.603 2145.68,228.776 2146.25,230.848 2146.82,231.788 2147.39,231.637 2147.95,231.545 2148.52,230.641 2149.09,231.787 2149.66,232.658 2150.23,229.429 2150.8,227.421 2151.36,226.65 2151.93,226.803 2152.5,227.128 2153.07,226.406 2153.64,224.561 2154.21,227 2154.77,227.987 2155.34,227.207 2155.91,225.433 2156.48,226.868 2157.05,227.192 2157.62,229.359 2158.18,227.705 2158.75,227.941 2159.32,229.049 2159.89,230.162 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.024 ± 0.023\n  with uncertainty of ± 0.002094979407802378\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01185 ± (0.00193717, 0.00184643) (MC)\n  95% confidence interval: [-4.01538, -4.00833]) (MC)\n  linear error propagation: -4.01186 ± 0.00182338\n  |δ_y| = |0.00174868| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0118535541218625, val_l = 0.0035282082613692367, val_u = 0.003523866181555313)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip960\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip960)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip961\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip960)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip962\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1138.74 2211.02,1138.74 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,969.297 2211.02,969.297 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,799.854 2211.02,799.854 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,630.411 2211.02,630.411 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,460.967 2211.02,460.967 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,291.524 2211.02,291.524 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1138.74 365.751,1138.74 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,969.297 365.751,969.297 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,799.854 365.751,799.854 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,630.411 365.751,630.411 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,460.967 365.751,460.967 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,291.524 365.751,291.524 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M298.909 1124.54 Q295.298 1124.54 293.469 1128.1 Q291.664 1131.65 291.664 1138.78 Q291.664 1145.88 293.469 1149.45 Q295.298 1152.99 298.909 1152.99 Q302.543 1152.99 304.349 1149.45 Q306.177 1145.88 306.177 1138.78 Q306.177 1131.65 304.349 1128.1 Q302.543 1124.54 298.909 1124.54 M298.909 1120.84 Q304.719 1120.84 307.775 1125.44 Q310.853 1130.03 310.853 1138.78 Q310.853 1147.5 307.775 1152.11 Q304.719 1156.69 298.909 1156.69 Q293.099 1156.69 290.02 1152.11 Q286.964 1147.5 286.964 1138.78 Q286.964 1130.03 290.02 1125.44 Q293.099 1120.84 298.909 1120.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M259.557 982.642 L267.196 982.642 L267.196 956.276 L258.886 957.943 L258.886 953.684 L267.15 952.017 L271.826 952.017 L271.826 982.642 L279.465 982.642 L279.465 986.577 L259.557 986.577 L259.557 982.642 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 955.096 Q295.298 955.096 293.469 958.661 Q291.664 962.202 291.664 969.332 Q291.664 976.438 293.469 980.003 Q295.298 983.545 298.909 983.545 Q302.543 983.545 304.349 980.003 Q306.177 976.438 306.177 969.332 Q306.177 962.202 304.349 958.661 Q302.543 955.096 298.909 955.096 M298.909 951.392 Q304.719 951.392 307.775 955.999 Q310.853 960.582 310.853 969.332 Q310.853 978.059 307.775 982.665 Q304.719 987.249 298.909 987.249 Q293.099 987.249 290.02 982.665 Q286.964 978.059 286.964 969.332 Q286.964 960.582 290.02 955.999 Q293.099 951.392 298.909 951.392 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M262.775 813.199 L279.094 813.199 L279.094 817.134 L257.15 817.134 L257.15 813.199 Q259.812 810.444 264.395 805.814 Q269.002 801.162 270.182 799.819 Q272.428 797.296 273.307 795.56 Q274.21 793.801 274.21 792.111 Q274.21 789.356 272.266 787.62 Q270.344 785.884 267.242 785.884 Q265.043 785.884 262.59 786.648 Q260.159 787.412 257.381 788.963 L257.381 784.241 Q260.205 783.106 262.659 782.528 Q265.113 781.949 267.15 781.949 Q272.52 781.949 275.715 784.634 Q278.909 787.319 278.909 791.81 Q278.909 793.94 278.099 795.861 Q277.312 797.759 275.205 800.352 Q274.627 801.023 271.525 804.24 Q268.423 807.435 262.775 813.199 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 785.653 Q295.298 785.653 293.469 789.217 Q291.664 792.759 291.664 799.889 Q291.664 806.995 293.469 810.56 Q295.298 814.101 298.909 814.101 Q302.543 814.101 304.349 810.56 Q306.177 806.995 306.177 799.889 Q306.177 792.759 304.349 789.217 Q302.543 785.653 298.909 785.653 M298.909 781.949 Q304.719 781.949 307.775 786.555 Q310.853 791.139 310.853 799.889 Q310.853 808.615 307.775 813.222 Q304.719 817.805 298.909 817.805 Q293.099 817.805 290.02 813.222 Q286.964 808.615 286.964 799.889 Q286.964 791.139 290.02 786.555 Q293.099 781.949 298.909 781.949 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M272.914 629.056 Q276.27 629.774 278.145 632.042 Q280.043 634.311 280.043 637.644 Q280.043 642.76 276.525 645.561 Q273.006 648.362 266.525 648.362 Q264.349 648.362 262.034 647.922 Q259.742 647.505 257.289 646.649 L257.289 642.135 Q259.233 643.269 261.548 643.848 Q263.863 644.427 266.386 644.427 Q270.784 644.427 273.076 642.691 Q275.39 640.954 275.39 637.644 Q275.39 634.589 273.238 632.876 Q271.108 631.14 267.289 631.14 L263.261 631.14 L263.261 627.297 L267.474 627.297 Q270.923 627.297 272.752 625.931 Q274.58 624.542 274.58 621.95 Q274.58 619.288 272.682 617.876 Q270.807 616.441 267.289 616.441 Q265.367 616.441 263.168 616.857 Q260.969 617.274 258.33 618.154 L258.33 613.987 Q260.992 613.246 263.307 612.876 Q265.645 612.506 267.705 612.506 Q273.029 612.506 276.131 614.936 Q279.233 617.343 279.233 621.464 Q279.233 624.334 277.59 626.325 Q275.946 628.292 272.914 629.056 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 616.209 Q295.298 616.209 293.469 619.774 Q291.664 623.316 291.664 630.445 Q291.664 637.552 293.469 641.116 Q295.298 644.658 298.909 644.658 Q302.543 644.658 304.349 641.116 Q306.177 637.552 306.177 630.445 Q306.177 623.316 304.349 619.774 Q302.543 616.209 298.909 616.209 M298.909 612.506 Q304.719 612.506 307.775 617.112 Q310.853 621.695 310.853 630.445 Q310.853 639.172 307.775 643.779 Q304.719 648.362 298.909 648.362 Q293.099 648.362 290.02 643.779 Q286.964 639.172 286.964 630.445 Q286.964 621.695 290.02 617.112 Q293.099 612.506 298.909 612.506 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M271.594 447.761 L259.789 466.21 L271.594 466.21 L271.594 447.761 M270.367 443.687 L276.247 443.687 L276.247 466.21 L281.177 466.21 L281.177 470.099 L276.247 470.099 L276.247 478.247 L271.594 478.247 L271.594 470.099 L255.992 470.099 L255.992 465.585 L270.367 443.687 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 446.766 Q295.298 446.766 293.469 450.331 Q291.664 453.872 291.664 461.002 Q291.664 468.108 293.469 471.673 Q295.298 475.215 298.909 475.215 Q302.543 475.215 304.349 471.673 Q306.177 468.108 306.177 461.002 Q306.177 453.872 304.349 450.331 Q302.543 446.766 298.909 446.766 M298.909 443.062 Q304.719 443.062 307.775 447.669 Q310.853 452.252 310.853 461.002 Q310.853 469.729 307.775 474.335 Q304.719 478.918 298.909 478.918 Q293.099 478.918 290.02 474.335 Q286.964 469.729 286.964 461.002 Q286.964 452.252 290.02 447.669 Q293.099 443.062 298.909 443.062 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M258.793 274.244 L277.15 274.244 L277.15 278.179 L263.076 278.179 L263.076 286.651 Q264.094 286.304 265.113 286.142 Q266.131 285.957 267.15 285.957 Q272.937 285.957 276.316 289.128 Q279.696 292.299 279.696 297.716 Q279.696 303.295 276.224 306.396 Q272.752 309.475 266.432 309.475 Q264.256 309.475 261.988 309.105 Q259.742 308.734 257.335 307.994 L257.335 303.295 Q259.418 304.429 261.641 304.984 Q263.863 305.54 266.34 305.54 Q270.344 305.54 272.682 303.433 Q275.02 301.327 275.02 297.716 Q275.02 294.105 272.682 291.998 Q270.344 289.892 266.34 289.892 Q264.465 289.892 262.59 290.309 Q260.738 290.725 258.793 291.605 L258.793 274.244 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 277.323 Q295.298 277.323 293.469 280.887 Q291.664 284.429 291.664 291.559 Q291.664 298.665 293.469 302.23 Q295.298 305.771 298.909 305.771 Q302.543 305.771 304.349 302.23 Q306.177 298.665 306.177 291.559 Q306.177 284.429 304.349 280.887 Q302.543 277.323 298.909 277.323 M298.909 273.619 Q304.719 273.619 307.775 278.225 Q310.853 282.809 310.853 291.559 Q310.853 300.285 307.775 304.892 Q304.719 309.475 298.909 309.475 Q293.099 309.475 290.02 304.892 Q286.964 300.285 286.964 291.559 Q286.964 282.809 290.02 278.225 Q293.099 273.619 298.909 273.619 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip962)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1013.89 400.199,1030.05 400.786,918.183 401.372,815.536 401.958,836.407 402.545,742.721 403.131,658.919 403.718,584.324 404.304,609.816 404.891,542.968 405.477,480.68 406.063,423.464 406.65,370.742 407.236,397.096 407.823,351.127 408.409,309.927 408.995,273.188 409.582,299.726 410.168,266.898 410.755,238.699 411.341,261.957 411.927,240.674 412.514,219.895 413.1,280.12 413.687,299.204 414.273,283.966 414.86,272.819 415.446,263.454 416.032,254.314 416.619,248.223 417.205,269.799 417.792,266.775 418.378,287.847 418.964,306.607 419.551,305.28 420.137,323.379 420.724,324.366 421.31,325.629 421.896,359.29 422.483,377.925 423.069,382.186 423.656,400.834 424.242,418.23 424.829,434.668 425.415,451.352 426.001,488.25 426.588,493.2 427.174,498.14 427.761,522.694 428.347,528.953 428.933,536.549 429.52,545.132 430.106,552.856 430.693,568.765 431.279,584.216 431.865,592.024 432.452,607.572 433.038,616.091 433.625,637.335 434.211,657.71 434.798,671.274 435.384,689.964 435.97,707.857 436.557,720.866 437.143,733.356 437.73,741.006 438.316,761.932 438.902,782.152 439.489,797.287 440.075,807.837 440.662,822.692 441.248,833.064 441.835,849.861 442.421,862.647 443.007,871.776 443.594,887.459 444.18,892.731 444.767,904.386 445.353,919.018 445.939,923.79 446.526,928.511 447.112,936.429 447.699,941.563 448.285,949.448 448.871,954.519 449.458,959.594 450.044,964.845 450.631,975.211 451.217,980.055 451.804,989.908 452.39,994.59 452.976,1009.05 453.563,1020.71 454.149,1026.66 454.736,1030.56 455.322,1034.45 455.908,1038.12 456.495,1046.5 457.081,1056.38 457.668,1061.72 458.254,1071.37 458.84,1074.11 459.427,1078.91 460.013,1085.71 460.6,1092.31 461.186,1100.46 461.773,1108.59 462.359,1116.29 462.945,1119.74 463.532,1123.1 464.118,1126.55 464.705,1129.91 465.291,1133.36 465.877,1136.69 466.464,1140.49 467.05,1145.5 467.637,1149.26 468.223,1154.28 468.809,1155.65 469.396,1163.87 469.982,1168.3 470.569,1172.19 471.155,1172.79 471.742,1173.55 472.328,1174.12 472.914,1174.7 473.501,1177.08 474.087,1181.1 474.674,1183.5 475.26,1185.87 475.846,1183.43 476.433,1184.28 477.019,1186.98 477.606,1189.23 478.192,1191.48 478.778,1191.83 479.365,1192.6 479.951,1194.83 480.538,1198.72 481.124,1200.94 481.711,1202.94 482.297,1203.26 482.883,1203.74 483.47,1208.77 484.056,1208.97 484.643,1210.59 485.229,1213.81 485.815,1215.47 486.402,1215.42 486.988,1218.66 487.575,1223.07 488.161,1227.21 488.748,1226.88 489.334,1227.77 489.92,1231.99 490.507,1232.98 491.093,1233.8 491.68,1234.55 492.266,1233.75 492.852,1234.49 493.439,1236.99 494.025,1237.67 494.612,1237.21 495.198,1239.28 495.784,1239.62 496.371,1241.31 496.957,1240.35 497.544,1239.74 498.13,1239.07 498.717,1240.01 499.303,1237.36 499.889,1237.95 500.476,1235.65 501.062,1233.51 501.649,1231.69 502.235,1229.83 502.821,1231.22 503.408,1230.77 503.994,1227.31 504.581,1228.69 505.167,1228.79 505.753,1228.82 506.34,1229.97 506.926,1232.37 507.513,1227.7 508.099,1228.93 508.686,1228.72 509.272,1227.21 509.858,1225.65 510.445,1228.64 511.031,1229.82 511.618,1230.84 512.204,1229.52 512.79,1230.82 513.377,1232 513.963,1231.64 514.55,1231.39 515.136,1234.25 515.722,1233.62 516.309,1233.09 516.895,1232.86 517.482,1233.89 518.068,1235.08 518.655,1237.28 519.241,1240.79 519.827,1238.6 520.414,1242.35 521,1247.04 521.587,1247.55 522.173,1250.53 522.759,1249.32 523.346,1246.83 523.932,1245.65 524.519,1246.05 525.105,1245.32 525.691,1241.64 526.278,1240.8 526.864,1241.54 527.451,1239.2 528.037,1238.59 528.624,1236.48 529.21,1234.84 529.796,1235.65 530.383,1236.35 530.969,1234.48 531.556,1238.43 532.142,1240.57 532.728,1241.09 533.315,1238.8 533.901,1242.13 534.488,1242.73 535.074,1242.9 535.661,1243.3 536.247,1243.66 536.833,1241.64 537.42,1243.44 538.006,1241.54 538.593,1242.25 539.179,1239.92 539.765,1239.11 540.352,1241.14 540.938,1240.49 541.525,1239.88 542.111,1238.73 542.697,1238.22 543.284,1237.58 543.87,1235.53 544.457,1233.73 545.043,1233.03 545.63,1235.25 546.216,1234.86 546.802,1230.8 547.389,1229.09 547.975,1228.87 548.562,1230.08 549.148,1231.2 549.734,1232.26 550.321,1229.25 550.907,1229.08 551.494,1228.7 552.08,1227.16 552.666,1226.89 553.253,1227.02 553.839,1228.31 554.426,1232.12 555.012,1228.82 555.599,1227.09 556.185,1226.88 556.771,1228.41 557.358,1226.76 557.944,1227.98 558.531,1227.84 559.117,1226.17 559.703,1225.95 560.29,1226.02 560.876,1227.07 561.463,1228.27 562.049,1227.84 562.635,1226.19 563.222,1228.93 563.808,1229.01 564.395,1231.44 564.981,1229.58 565.568,1227.98 566.154,1224.76 566.74,1225.88 567.327,1227.33 567.913,1228.52 568.5,1228.02 569.086,1227.72 569.672,1228.52 570.259,1228.47 570.845,1228.06 571.432,1231.61 572.018,1232.74 572.605,1233.65 573.191,1231.65 573.777,1236.54 574.364,1236.15 574.95,1234.43 575.537,1235.1 576.123,1235.89 576.709,1233.9 577.296,1231.82 577.882,1231.72 578.469,1233.67 579.055,1231.6 579.641,1231.03 580.228,1233.27 580.814,1229.87 581.401,1228.05 581.987,1226.15 582.574,1227.29 583.16,1230.96 583.746,1230.47 584.333,1228.81 584.919,1229.75 585.506,1230.68 586.092,1230.04 586.678,1229.52 587.265,1230.39 587.851,1232.61 588.438,1232.06 589.024,1234.07 589.61,1233.41 590.197,1234.08 590.783,1235.91 591.37,1232.28 591.956,1229.88 592.543,1227.8 593.129,1227.12 593.715,1228 594.302,1226.19 594.888,1227.18 595.475,1225.72 596.061,1225.34 596.647,1220.77 597.234,1219.2 597.82,1216.43 598.407,1218.04 598.993,1218.1 599.579,1219.47 600.166,1218.19 600.752,1219.61 601.339,1220.94 601.925,1220.85 602.512,1219.53 603.098,1220.91 603.684,1222.11 604.271,1219.19 604.857,1221.81 605.444,1221.85 606.03,1224.42 606.616,1224.17 607.203,1223.85 607.789,1226.36 608.376,1226.01 608.962,1227.15 609.548,1225.42 610.135,1226.32 610.721,1224.31 611.308,1222.93 611.894,1224.15 612.481,1222.42 613.067,1223.76 613.653,1226.24 614.24,1224.59 614.826,1225.94 615.413,1225.75 615.999,1225.16 616.585,1229.05 617.172,1227.24 617.758,1226.87 618.345,1227.56 618.931,1225.6 619.518,1226.66 620.104,1227.75 620.69,1228.55 621.277,1230.55 621.863,1230.09 622.45,1230.99 623.036,1230.36 623.622,1229.48 624.209,1230.15 624.795,1225.49 625.382,1226.85 625.968,1223.61 626.554,1223.6 627.141,1221.86 627.727,1220.03 628.314,1219.47 628.9,1220.5 629.487,1222.99 630.073,1222.63 630.659,1222.49 631.246,1223.48 631.832,1223.28 632.419,1224.03 633.005,1222.36 633.591,1220.59 634.178,1217.6 634.764,1215.96 635.351,1214.63 635.937,1216.02 636.523,1214.83 637.11,1210.61 637.696,1210.64 638.283,1209.65 638.869,1210.17 639.456,1209.06 640.042,1209.74 640.628,1211.63 641.215,1213.44 641.801,1215 642.388,1215.1 642.974,1220.58 643.56,1220.12 644.147,1222.74 644.733,1224.01 645.32,1222.4 645.906,1220.48 646.492,1218.84 647.079,1218.39 647.665,1217.95 648.252,1217.63 648.838,1221.54 649.425,1219.81 650.011,1219.51 650.597,1221.99 651.184,1220.12 651.77,1221.16 652.357,1220.69 652.943,1222.82 653.529,1225.03 654.116,1225.61 654.702,1223.43 655.289,1222.97 655.875,1222.38 656.462,1223.06 657.048,1222.76 657.634,1225.18 658.221,1227.42 658.807,1225.42 659.394,1223.54 659.98,1225.95 660.566,1225.19 661.153,1224.56 661.739,1225.38 662.326,1227.43 662.912,1225.47 663.498,1226.05 664.085,1224.14 664.671,1223.65 665.258,1223.05 665.844,1224.14 666.431,1219.33 667.017,1214.4 667.603,1213.14 668.19,1211.67 668.776,1211.67 669.363,1210.39 669.949,1211.63 670.535,1213.13 671.122,1213.19 671.708,1213.29 672.295,1215.78 672.881,1216.92 673.467,1216.85 674.054,1216.87 674.64,1216.53 675.227,1216.27 675.813,1216.12 676.4,1214.6 676.986,1213.25 677.572,1214.42 678.159,1211.4 678.745,1215.69 679.332,1217.04 679.918,1216.55 680.504,1216.53 681.091,1216.38 681.677,1213.43 682.264,1214.89 682.85,1214.7 683.436,1215.88 684.023,1215.63 684.609,1217.02 685.196,1215.14 685.782,1214.97 686.369,1213.39 686.955,1211.95 687.541,1211.82 688.128,1213.31 688.714,1211.94 689.301,1212.04 689.887,1209.2 690.473,1208 691.06,1212.46 691.646,1211.36 692.233,1212.7 692.819,1214.08 693.405,1214.07 693.992,1214.34 694.578,1216 695.165,1218.4 695.751,1218.06 696.338,1214.89 696.924,1214.6 697.51,1212.96 698.097,1212.71 698.683,1212.75 699.27,1212.63 699.856,1214.16 700.442,1211.37 701.029,1212.75 701.615,1214.03 702.202,1215.25 702.788,1213.6 703.375,1213.5 703.961,1213.46 704.547,1213.14 705.134,1214.42 705.72,1214.43 706.307,1211.37 706.893,1209.78 707.479,1210.03 708.066,1210.24 708.652,1210.43 709.239,1211.79 709.825,1214.66 710.411,1214.53 710.998,1215.85 711.584,1214.56 712.171,1214.83 712.757,1216.37 713.344,1218.83 713.93,1218.42 714.516,1218.39 715.103,1219.46 715.689,1214.73 716.276,1214.72 716.862,1217.48 717.448,1221.31 718.035,1221.98 718.621,1221.24 719.208,1220.88 719.794,1219.14 720.38,1217.43 720.967,1212.94 721.553,1211.31 722.14,1214.01 722.726,1213.69 723.313,1213.45 723.899,1214.7 724.485,1215.79 725.072,1214.11 725.658,1213.76 726.245,1210.85 726.831,1209.99 727.417,1212.9 728.004,1210.13 728.59,1210.33 729.177,1210.26 729.763,1213.25 730.349,1211.86 730.936,1211.62 731.522,1210.11 732.109,1207.66 732.695,1210.54 733.282,1210.48 733.868,1214.69 734.454,1214.69 735.041,1212.01 735.627,1212.09 736.214,1212.2 736.8,1210.72 737.386,1210.53 737.973,1210.49 738.559,1211.92 739.146,1213.37 739.732,1211.88 740.318,1214.43 740.905,1216.96 741.491,1218.08 742.078,1217.66 742.664,1220.05 743.251,1215.56 743.837,1212.8 744.423,1212.64 745.01,1212.67 745.596,1212.64 746.183,1211.31 746.769,1213.94 747.355,1213.92 747.942,1212.72 748.528,1212.91 749.115,1210.25 749.701,1211.7 750.288,1213.3 750.874,1218.79 751.46,1216.86 752.047,1215.05 752.633,1213.32 753.22,1215.09 753.806,1215.01 754.392,1214.87 754.979,1213.53 755.565,1213.67 756.152,1215.14 756.738,1216.11 757.324,1213.26 757.911,1213.08 758.497,1211.55 759.084,1208.84 759.67,1210.11 760.257,1210.14 760.843,1210 761.429,1211.68 762.016,1207.67 762.602,1207.45 763.189,1208.99 763.775,1207.72 764.361,1207.69 764.948,1209.23 765.534,1208.27 766.121,1207.16 766.707,1208.87 767.293,1207.22 767.88,1207.19 768.466,1207.26 769.053,1208.85 769.639,1210.28 770.226,1207.36 770.812,1207.72 771.398,1210.73 771.985,1212.11 772.571,1206.62 773.158,1206.67 773.744,1206.56 774.33,1205.23 774.917,1204.36 775.503,1207.57 776.09,1212.14 776.676,1212.01 777.262,1210.18 777.849,1211.68 778.435,1211.75 779.022,1211.73 779.608,1210.07 780.195,1211.34 780.781,1209.9 781.367,1205.64 781.954,1205.69 782.54,1204.62 783.127,1206.03 783.713,1204.76 784.299,1202.28 784.886,1201.3 785.472,1203.09 786.059,1204.83 786.645,1203.84 787.232,1204.4 787.818,1204.63 788.404,1204.96 788.991,1203.69 789.577,1206.77 790.164,1207.12 790.75,1207.28 791.336,1207.52 791.923,1206.14 792.509,1207.61 793.096,1213.26 793.682,1211.59 794.268,1207.02 794.855,1205.58 795.441,1207.08 796.028,1208.68 796.614,1210.2 797.201,1211.64 797.787,1209.8 798.373,1211.33 798.96,1209.77 799.546,1208.52 800.133,1208.3 800.719,1211.12 801.305,1212.22 801.892,1212.34 802.478,1212.37 803.065,1213.73 803.651,1217.42 804.237,1217.04 804.824,1216.74 805.41,1214.71 805.997,1211.82 806.583,1210.35 807.17,1210.37 807.756,1209.16 808.342,1209.28 808.929,1206.44 809.515,1207.98 810.102,1205.56 810.688,1205.98 811.274,1207.56 811.861,1203.44 812.447,1202.54 813.034,1203.02 813.62,1204.61 814.206,1206.48 814.793,1208.16 815.379,1209.64 815.966,1208.23 816.552,1209.69 817.139,1212.37 817.725,1209.34 818.311,1205.22 818.898,1205.74 819.484,1205.83 820.071,1205.98 820.657,1206.1 821.243,1205 821.83,1204.02 822.416,1202.89 823.003,1204.8 823.589,1206.32 824.175,1207.78 824.762,1209.49 825.348,1209.54 825.935,1210.76 826.521,1207.99 827.108,1211.11 827.694,1211.18 828.28,1213.78 828.867,1213.61 829.453,1211.77 830.04,1211.41 830.626,1210.06 831.212,1211.26 831.799,1212.22 832.385,1213.51 832.972,1215.82 833.558,1215.31 834.145,1214.94 834.731,1217.25 835.317,1219.51 835.904,1217.76 836.49,1217.36 837.077,1216.85 837.663,1216.39 838.249,1210.81 838.836,1210.59 839.422,1209.19 840.009,1210.76 840.595,1211.78 841.181,1210.13 841.768,1214.29 842.354,1215.35 842.941,1216 843.527,1214.15 844.114,1209.65 844.7,1212.48 845.286,1212.39 845.873,1214.87 846.459,1213.22 847.046,1215.82 847.632,1215.68 848.218,1214.24 848.805,1212.35 849.391,1212.3 849.978,1210.51 850.564,1213.11 851.15,1210.01 851.737,1208.73 852.323,1210.18 852.91,1210.35 853.496,1208.03 854.083,1206.71 854.669,1205.67 855.255,1205.86 855.842,1206.07 856.428,1206.03 857.015,1208.64 857.601,1206.83 858.187,1208.15 858.774,1206.78 859.36,1206.58 859.947,1206.67 860.533,1205.01 861.119,1205.42 861.706,1205.77 862.292,1204.7 862.879,1204.87 863.465,1203.65 864.052,1205.2 864.638,1208.09 865.224,1208.06 865.811,1203.81 866.397,1202.61 866.984,1201.52 867.57,1201.92 868.156,1200.77 868.743,1202.41 869.329,1202.55 869.916,1201.41 870.502,1200.49 871.089,1199.79 871.675,1199.06 872.261,1201.26 872.848,1201.4 873.434,1200.53 874.021,1201.01 874.607,1201.41 875.193,1201.77 875.78,1204.91 876.366,1206.51 876.953,1208.09 877.539,1209.64 878.125,1209.42 878.712,1208.32 879.298,1209.71 879.885,1209.64 880.471,1210.99 881.058,1213.56 881.644,1213.02 882.23,1212.7 882.817,1210.83 883.403,1209.54 883.99,1212.01 884.576,1211.86 885.162,1210.32 885.749,1210.53 886.335,1210.56 886.922,1214.53 887.508,1214.19 888.094,1214.11 888.681,1216.54 889.267,1216.24 889.854,1214.48 890.44,1215.4 891.027,1214.77 891.613,1214.33 892.199,1215.35 892.786,1215.28 893.372,1214.97 893.959,1216.25 894.545,1215.89 895.131,1218.01 895.718,1217.9 896.304,1215.86 896.891,1215.51 897.477,1216.38 898.063,1215.98 898.65,1215.55 899.236,1214.16 899.823,1212.5 900.409,1213.64 900.996,1210.49 901.582,1211.85 902.168,1210.18 902.755,1210.04 903.341,1209.94 903.928,1208.29 904.514,1205.42 905.1,1203.94 905.687,1205.4 906.273,1205.37 906.86,1204.03 907.446,1205.35 908.032,1205.68 908.619,1207.03 909.205,1205.63 909.792,1205.67 910.378,1208.71 910.965,1207.38 911.551,1210.02 912.137,1210.08 912.724,1208.52 913.31,1208.63 913.897,1207.52 914.483,1209.06 915.069,1210.21 915.656,1208.85 916.242,1208.6 916.829,1211.44 917.415,1212.58 918.002,1213.59 918.588,1212 919.174,1210.47 919.761,1210.31 920.347,1208.59 920.934,1207.35 921.52,1210.09 922.106,1212.83 922.693,1209.76 923.279,1206.9 923.866,1204.52 924.452,1203.15 925.038,1203.24 925.625,1203.32 926.211,1201.09 926.798,1202.73 927.384,1204.6 927.971,1206.2 928.557,1205.17 929.143,1206.73 929.73,1206.65 930.316,1209.13 930.903,1210.08 931.489,1206.94 932.075,1208.43 932.662,1209.65 933.248,1208.41 933.835,1205.6 934.421,1207.04 935.007,1209.87 935.594,1209.53 936.18,1209.24 936.767,1207.97 937.353,1205.28 937.94,1205.32 938.526,1207.03 939.112,1206.88 939.699,1207.98 940.285,1209.36 940.872,1208.08 941.458,1205.35 942.044,1204.18 942.631,1205.7 943.217,1209.56 943.804,1209.75 944.39,1208.56 944.976,1210.07 945.563,1210.09 946.149,1211.32 946.736,1212.2 947.322,1210.74 947.909,1209.13 948.495,1208.98 949.081,1207.47 949.668,1207.34 950.254,1208.73 950.841,1212.54 951.427,1214.66 952.013,1213.08 952.6,1212.82 953.186,1212.32 953.773,1214.88 954.359,1215.44 954.945,1213.69 955.532,1213.59 956.118,1213.08 956.705,1208.45 957.291,1207.05 957.878,1207.11 958.464,1201.89 959.05,1202.44 959.637,1206.89 960.223,1208.38 960.81,1207.04 961.396,1209.65 961.982,1210.85 962.569,1207.99 963.155,1207.97 963.742,1209.59 964.328,1208.2 964.915,1208.36 965.501,1209.87 966.087,1213.75 966.674,1212.09 967.26,1211.69 967.847,1208.36 968.433,1208.48 969.019,1206.22 969.606,1208.69 970.192,1211.29 970.779,1209.76 971.365,1215.18 971.951,1216.18 972.538,1217.11 973.124,1216.53 973.711,1217.12 974.297,1216.62 974.884,1214.83 975.47,1216.16 976.056,1214.34 976.643,1215.13 977.229,1213.44 977.816,1214.44 978.402,1214.12 978.988,1213.78 979.575,1213.55 980.161,1214.54 980.748,1215.41 981.334,1212.24 981.92,1211.74 982.507,1211.46 983.093,1210 983.68,1206.89 984.266,1201.09 984.853,1201.39 985.439,1196.13 986.025,1196.68 986.612,1197.47 987.198,1197.93 987.785,1198.5 988.371,1198.95 988.957,1197.83 989.544,1198.25 990.13,1200.2 990.717,1203.24 991.303,1202.06 991.889,1204.89 992.476,1206.46 993.062,1207.88 993.649,1208.15 994.235,1205.34 994.822,1203.93 995.408,1202.81 995.994,1203.26 996.581,1203.51 997.167,1200.84 997.754,1202.38 998.34,1201.26 998.926,1197.48 999.513,1197.91 1000.1,1195.63 1000.69,1196.43 1001.27,1194.41 1001.86,1196.31 1002.44,1196.52 1003.03,1195.87 1003.62,1198.34 1004.2,1198.73 1004.79,1200.49 1005.38,1199.44 1005.96,1204.06 1006.55,1204.3 1007.14,1203.33 1007.72,1203.67 1008.31,1205.32 1008.9,1204.07 1009.48,1205.5 1010.07,1207.09 1010.65,1205.69 1011.24,1205.64 1011.83,1204.4 1012.41,1203.28 1013,1203.6 1013.59,1203.92 1014.17,1198.51 1014.76,1199.16 1015.35,1199.6 1015.93,1201.33 1016.52,1202.82 1017.11,1201.62 1017.69,1200.28 1018.28,1203.47 1018.86,1203.47 1019.45,1202.31 1020.04,1200.03 1020.62,1200.44 1021.21,1206.28 1021.8,1200.89 1022.38,1202.78 1022.97,1201.44 1023.56,1198.23 1024.14,1198.52 1024.73,1199.12 1025.32,1202.41 1025.9,1205.65 1026.49,1205.75 1027.07,1206.04 1027.66,1207.59 1028.25,1206.25 1028.83,1206.41 1029.42,1206.71 1030.01,1206.86 1030.59,1208.06 1031.18,1203.99 1031.77,1204.33 1032.35,1207.31 1032.94,1208.98 1033.52,1209.28 1034.11,1207.73 1034.7,1211.58 1035.28,1211.42 1035.87,1211.06 1036.46,1212.32 1037.04,1216.04 1037.63,1212.9 1038.22,1213.88 1038.8,1215.19 1039.39,1215.06 1039.98,1210.92 1040.56,1213.48 1041.15,1211.76 1041.73,1208.74 1042.32,1208.82 1042.91,1208.81 1043.49,1212.85 1044.08,1213.94 1044.67,1216.44 1045.25,1215.86 1045.84,1214.11 1046.43,1213.72 1047.01,1214.73 1047.6,1216.21 1048.19,1213.88 1048.77,1212.28 1049.36,1208.26 1049.94,1206.93 1050.53,1207 1051.12,1206.99 1051.7,1207.1 1052.29,1211.26 1052.88,1215.32 1053.46,1214.74 1054.05,1212.95 1054.64,1211.61 1055.22,1208.92 1055.81,1211.61 1056.39,1209.84 1056.98,1208.6 1057.57,1208.63 1058.15,1208.65 1058.74,1209.64 1059.33,1213.69 1059.91,1211.97 1060.5,1209.19 1061.09,1206.73 1061.67,1206.68 1062.26,1206.97 1062.85,1208.57 1063.43,1208.8 1064.02,1208.58 1064.6,1209.89 1065.19,1212.15 1065.78,1210.55 1066.36,1210.33 1066.95,1212.85 1067.54,1213.93 1068.12,1213.71 1068.71,1214.79 1069.3,1214.66 1069.88,1213 1070.47,1207.01 1071.06,1209.67 1071.64,1212.29 1072.23,1214.63 1072.81,1216.96 1073.4,1217.91 1073.99,1217.4 1074.57,1218.31 1075.16,1217.7 1075.75,1217.05 1076.33,1219.17 1076.92,1219.67 1077.51,1218.91 1078.09,1215.48 1078.68,1214.88 1079.26,1215.91 1079.85,1212.71 1080.44,1213.56 1081.02,1213.17 1081.61,1212.85 1082.2,1212.68 1082.78,1211.31 1083.37,1209.6 1083.96,1206.71 1084.54,1202.45 1085.13,1199.59 1085.72,1203.07 1086.3,1201.92 1086.89,1200.98 1087.47,1204.48 1088.06,1201.75 1088.65,1202.02 1089.23,1205.32 1089.82,1205.44 1090.41,1202.55 1090.99,1202.89 1091.58,1204.16 1092.17,1203.03 1092.75,1203.57 1093.34,1201 1093.93,1205.56 1094.51,1207.26 1095.1,1207.52 1095.68,1210.31 1096.27,1210.23 1096.86,1211.65 1097.44,1213.99 1098.03,1210.68 1098.62,1211.7 1099.2,1212.76 1099.79,1209.58 1100.38,1207.88 1100.96,1207.69 1101.55,1205.95 1102.14,1204.45 1102.72,1204.62 1103.31,1204.86 1103.89,1204.62 1104.48,1206.06 1105.07,1210.28 1105.65,1211.53 1106.24,1209.87 1106.83,1209.73 1107.41,1210.8 1108,1210.36 1108.59,1212.59 1109.17,1210.84 1109.76,1207.76 1110.34,1207.55 1110.93,1206.04 1111.52,1204.5 1112.1,1204.39 1112.69,1204.69 1113.28,1206.28 1113.86,1205.22 1114.45,1201.23 1115.04,1205.78 1115.62,1206.96 1116.21,1207.03 1116.8,1208.65 1117.38,1206.83 1117.97,1208.29 1118.55,1211.08 1119.14,1207.92 1119.73,1209.44 1120.31,1209.45 1120.9,1210.77 1121.49,1211.92 1122.07,1210.25 1122.66,1209.83 1123.25,1205.48 1123.83,1203.99 1124.42,1207.09 1125.01,1205.78 1125.59,1207.09 1126.18,1208.28 1126.76,1208.21 1127.35,1206.88 1127.94,1208.11 1128.52,1206.33 1129.11,1206.23 1129.7,1207.69 1130.28,1205.03 1130.87,1205.22 1131.46,1203.78 1132.04,1202.69 1132.63,1201.72 1133.21,1202.06 1133.8,1205.02 1134.39,1205.06 1134.97,1207.02 1135.56,1204.07 1136.15,1203.13 1136.73,1204.6 1137.32,1206.31 1137.91,1206.41 1138.49,1207.66 1139.08,1208.86 1139.67,1209.89 1140.25,1209.47 1140.84,1212.15 1141.42,1213.49 1142.01,1211.62 1142.6,1210.21 1143.18,1210.17 1143.77,1211.57 1144.36,1212.65 1144.94,1214.74 1145.53,1211.54 1146.12,1212.53 1146.7,1212.56 1147.29,1212.3 1147.88,1212.34 1148.46,1212.26 1149.05,1212.08 1149.63,1208.9 1150.22,1208.7 1150.81,1208.98 1151.39,1208.67 1151.98,1206.04 1152.57,1203.06 1153.15,1203.3 1153.74,1204.99 1154.33,1206.26 1154.91,1206.47 1155.5,1205.2 1156.09,1205.56 1156.67,1205.66 1157.26,1207.2 1157.84,1207.21 1158.43,1205.93 1159.02,1203.21 1159.6,1202.28 1160.19,1201.12 1160.78,1202.83 1161.36,1203.07 1161.95,1201.81 1162.54,1199.28 1163.12,1201.14 1163.71,1201.35 1164.29,1197.43 1164.88,1196.65 1165.47,1199.96 1166.05,1200.44 1166.64,1199.45 1167.23,1199.88 1167.81,1202.14 1168.4,1203.7 1168.99,1201.15 1169.57,1201.67 1170.16,1203.32 1170.75,1205.09 1171.33,1205.32 1171.92,1205.53 1172.5,1208.41 1173.09,1208.37 1173.68,1209.51 1174.26,1209.37 1174.85,1209.34 1175.44,1210.21 1176.02,1211.4 1176.61,1212.51 1177.2,1214 1177.78,1212.19 1178.37,1210.55 1178.96,1208.71 1179.54,1205.92 1180.13,1204.68 1180.71,1203.56 1181.3,1207.96 1181.89,1206.42 1182.47,1206.29 1183.06,1205.94 1183.65,1207.25 1184.23,1208.95 1184.82,1210.1 1185.41,1208.53 1185.99,1208.74 1186.58,1211.38 1187.16,1209.98 1187.75,1209.63 1188.34,1206.52 1188.92,1206.61 1189.51,1206.8 1190.1,1207.1 1190.68,1207.23 1191.27,1210.07 1191.86,1206.94 1192.44,1205.41 1193.03,1205.58 1193.62,1204.28 1194.2,1204.22 1194.79,1201.52 1195.37,1203.29 1195.96,1204.76 1196.55,1206.43 1197.13,1201.1 1197.72,1200.24 1198.31,1199.51 1198.89,1198.56 1199.48,1199.15 1200.07,1199.35 1200.65,1200.08 1201.24,1205.8 1201.83,1204.99 1202.41,1206.54 1203,1206.85 1203.58,1205.57 1204.17,1205.86 1204.76,1205.86 1205.34,1204.53 1205.93,1206.01 1206.52,1205.86 1207.1,1204.33 1207.69,1204.43 1208.28,1205.99 1208.86,1207.54 1209.45,1213.01 1210.03,1214.01 1210.62,1212.28 1211.21,1212.14 1211.79,1209.23 1212.38,1209.15 1212.97,1206.39 1213.55,1206.35 1214.14,1209.25 1214.73,1204.8 1215.31,1203.73 1215.9,1201.07 1216.49,1201.22 1217.07,1199.81 1217.66,1198.64 1218.24,1200.5 1218.83,1200.73 1219.42,1198.21 1220,1199.85 1220.59,1198.66 1221.18,1200.53 1221.76,1199.82 1222.35,1200.19 1222.94,1200.52 1223.52,1202.07 1224.11,1203.75 1224.7,1202.73 1225.28,1204.01 1225.87,1205.65 1226.45,1207.14 1227.04,1208.58 1227.63,1210.14 1228.21,1211.29 1228.8,1209.68 1229.39,1209.62 1229.97,1207.03 1230.56,1207.05 1231.15,1205.68 1231.73,1205.64 1232.32,1207.2 1232.91,1205.34 1233.49,1205.56 1234.08,1209.79 1234.66,1210.88 1235.25,1210.47 1235.84,1207.36 1236.42,1210.05 1237.01,1209.78 1237.6,1211.26 1238.18,1211.09 1238.77,1210.82 1239.36,1209.36 1239.94,1209.24 1240.53,1207.75 1241.11,1203.73 1241.7,1203.93 1242.29,1204.03 1242.87,1204.56 1243.46,1203.28 1244.05,1206.12 1244.63,1206.28 1245.22,1203.75 1245.81,1202.59 1246.39,1205.76 1246.98,1205.99 1247.57,1205.84 1248.15,1205.98 1248.74,1206.18 1249.32,1206.32 1249.91,1207.56 1250.5,1206.35 1251.08,1206.29 1251.67,1207.59 1252.26,1206.18 1252.84,1206.11 1253.43,1206.39 1254.02,1202.14 1254.6,1198.21 1255.19,1200.32 1255.78,1200.78 1256.36,1198.42 1256.95,1199.98 1257.53,1200.32 1258.12,1202.04 1258.71,1202.05 1259.29,1201.98 1259.88,1203.9 1260.47,1202.56 1261.05,1204.35 1261.64,1204.79 1262.23,1205.11 1262.81,1202.56 1263.4,1204.11 1263.98,1198.6 1264.57,1200.45 1265.16,1200.65 1265.74,1201.05 1266.33,1202.66 1266.92,1204.36 1267.5,1203.4 1268.09,1203.6 1268.68,1206.45 1269.26,1206.01 1269.85,1207.26 1270.44,1208.69 1271.02,1208.56 1271.61,1209.9 1272.19,1211.3 1272.78,1212.58 1273.37,1213.72 1273.95,1214.67 1274.54,1217.37 1275.13,1219.25 1275.71,1218.6 1276.3,1215.52 1276.89,1217.81 1277.47,1217.38 1278.06,1214.35 1278.65,1212.53 1279.23,1214.82 1279.82,1214.17 1280.4,1213.83 1280.99,1216.21 1281.58,1214.39 1282.16,1212.57 1282.75,1209.36 1283.34,1210.73 1283.92,1210.42 1284.51,1213.25 1285.1,1210.32 1285.68,1204.86 1286.27,1206.37 1286.86,1208.22 1287.44,1207.87 1288.03,1207.84 1288.61,1207.61 1289.2,1209.13 1289.79,1211.69 1290.37,1213.05 1290.96,1210.01 1291.55,1211.19 1292.13,1216.37 1292.72,1215.82 1293.31,1213.88 1293.89,1211.75 1294.48,1212.54 1295.06,1213.6 1295.65,1210.66 1296.24,1211.66 1296.82,1213.97 1297.41,1214.72 1298,1212.85 1298.58,1216.32 1299.17,1213.04 1299.76,1213.89 1300.34,1213.44 1300.93,1214.45 1301.52,1215.24 1302.1,1214.58 1302.69,1214.03 1303.27,1213.47 1303.86,1213.17 1304.45,1211.51 1305.03,1211.18 1305.62,1213.29 1306.21,1213.17 1306.79,1217.07 1307.38,1216.48 1307.97,1218.85 1308.55,1213.81 1309.14,1213.28 1309.73,1215.77 1310.31,1215.34 1310.9,1217.79 1311.48,1217.38 1312.07,1217.04 1312.66,1216.28 1313.24,1215.92 1313.83,1215.39 1314.42,1213.81 1315,1211.89 1315.59,1212.91 1316.18,1211.26 1316.76,1209.52 1317.35,1209.59 1317.93,1207.83 1318.52,1204.8 1319.11,1206.37 1319.69,1203.68 1320.28,1203.77 1320.87,1205.36 1321.45,1203.62 1322.04,1203.73 1322.63,1203.89 1323.21,1202.52 1323.8,1202.7 1324.39,1203.03 1324.97,1204.91 1325.56,1204.98 1326.14,1205.25 1326.73,1203.87 1327.32,1202.82 1327.9,1203.38 1328.49,1203.54 1329.08,1202.5 1329.66,1202.59 1330.25,1203 1330.84,1203.2 1331.42,1202.13 1332.01,1203.72 1332.6,1205.33 1333.18,1204.16 1333.77,1206.91 1334.35,1205.29 1334.94,1208.35 1335.53,1206.61 1336.11,1206.75 1336.7,1206.7 1337.29,1205.49 1337.87,1211.05 1338.46,1211.85 1339.05,1211.34 1339.63,1210.63 1340.22,1213.25 1340.8,1214.1 1341.39,1210.92 1341.98,1210.36 1342.56,1212.96 1343.15,1211.12 1343.74,1210.92 1344.32,1207.89 1344.91,1207.52 1345.5,1203.45 1346.08,1203.66 1346.67,1202.36 1347.26,1202.55 1347.84,1202.94 1348.43,1203.27 1349.01,1203.54 1349.6,1200.85 1350.19,1202.62 1350.77,1201.63 1351.36,1201.67 1351.95,1203.03 1352.53,1204.24 1353.12,1205.48 1353.71,1204.02 1354.29,1206.64 1354.88,1205.38 1355.47,1204.35 1356.05,1203.17 1356.64,1204.7 1357.22,1201.99 1357.81,1203.66 1358.4,1203.82 1358.98,1202.44 1359.57,1204.19 1360.16,1203.15 1360.74,1205.98 1361.33,1204.47 1361.92,1203.01 1362.5,1201.86 1363.09,1200.56 1363.68,1202.33 1364.26,1202.55 1364.85,1204.09 1365.43,1201.5 1366.02,1199.17 1366.61,1198.51 1367.19,1199.08 1367.78,1201.06 1368.37,1201.47 1368.95,1202.9 1369.54,1205.9 1370.13,1203.4 1370.71,1202.02 1371.3,1202.2 1371.88,1204 1372.47,1203.89 1373.06,1204.06 1373.64,1204.12 1374.23,1204.35 1374.82,1202.35 1375.4,1202.78 1375.99,1205.8 1376.58,1205.86 1377.16,1206.06 1377.75,1204.59 1378.34,1204.86 1378.92,1210.66 1379.51,1212.1 1380.09,1211.85 1380.68,1211.52 1381.27,1211.08 1381.85,1209.71 1382.44,1207.98 1383.03,1206.58 1383.61,1208.31 1384.2,1209.26 1384.79,1209.13 1385.37,1207.95 1385.96,1206.28 1386.55,1204.74 1387.13,1203.12 1387.72,1204.87 1388.3,1204.96 1388.89,1209.33 1389.48,1207.72 1390.06,1206.26 1390.65,1207.35 1391.24,1205.73 1391.82,1207.14 1392.41,1204.69 1393,1203.24 1393.58,1201.95 1394.17,1202.45 1394.75,1202.59 1395.34,1200.18 1395.93,1200.32 1396.51,1201.91 1397.1,1202.39 1397.69,1208.15 1398.27,1208.18 1398.86,1206.56 1399.45,1206.75 1400.03,1208.01 1400.62,1208.06 1401.21,1207.9 1401.79,1209.61 1402.38,1211.02 1402.96,1210.83 1403.55,1210.75 1404.14,1211.91 1404.72,1208.9 1405.31,1207.53 1405.9,1211.68 1406.48,1212.99 1407.07,1214.03 1407.66,1214.01 1408.24,1213.47 1408.83,1212.93 1409.42,1212.71 1410,1213.63 1410.59,1210.28 1411.17,1210.09 1411.76,1209.95 1412.35,1210.04 1412.93,1209.86 1413.52,1208.45 1414.11,1208.37 1414.69,1212.57 1415.28,1210.75 1415.87,1209.17 1416.45,1210.2 1417.04,1212.4 1417.63,1209.1 1418.21,1210.42 1418.8,1208.82 1419.38,1206.12 1419.97,1203.46 1420.56,1205.13 1421.14,1207.97 1421.73,1206.37 1422.32,1203.79 1422.9,1203.83 1423.49,1205.27 1424.08,1205.45 1424.66,1205.32 1425.25,1208.4 1425.83,1206.73 1426.42,1202.77 1427.01,1204.15 1427.59,1202.61 1428.18,1207.24 1428.77,1208.44 1429.35,1207.14 1429.94,1207.36 1430.53,1201.7 1431.11,1200.73 1431.7,1196.92 1432.29,1197.68 1432.87,1196.6 1433.46,1196.13 1434.04,1196.63 1434.63,1197.02 1435.22,1193.21 1435.8,1194.02 1436.39,1197.37 1436.98,1198.98 1437.56,1196.47 1438.15,1198.69 1438.74,1199 1439.32,1199.61 1439.91,1200.05 1440.5,1199.23 1441.08,1202.68 1441.67,1204.16 1442.25,1205.73 1442.84,1206.25 1443.43,1208.92 1444.01,1207.45 1444.6,1208.78 1445.19,1208.57 1445.77,1208.41 1446.36,1209.6 1446.95,1208.19 1447.53,1209.49 1448.12,1210.58 1448.7,1206.29 1449.29,1206.39 1449.88,1204.97 1450.46,1202.41 1451.05,1199.77 1451.64,1198.88 1452.22,1195.25 1452.81,1194.62 1453.4,1195.26 1453.98,1197.33 1454.57,1194.74 1455.16,1196.97 1455.74,1200.42 1456.33,1200.32 1456.91,1200.62 1457.5,1199.74 1458.09,1201.39 1458.67,1204.61 1459.26,1204.69 1459.85,1207.73 1460.43,1206.59 1461.02,1207.9 1461.61,1205.1 1462.19,1203.78 1462.78,1207.98 1463.37,1207.94 1463.95,1212.07 1464.54,1213.19 1465.12,1214.15 1465.71,1211.11 1466.3,1213.58 1466.88,1210.52 1467.47,1210.56 1468.06,1213.05 1468.64,1214.06 1469.23,1213.68 1469.82,1208.02 1470.4,1209.14 1470.99,1210.6 1471.57,1207.39 1472.16,1208.65 1472.75,1211.13 1473.33,1212.34 1473.92,1210.58 1474.51,1212.02 1475.09,1213.05 1475.68,1209.79 1476.27,1208.28 1476.85,1209.42 1477.44,1208.08 1478.03,1206.8 1478.61,1206.78 1479.2,1206.86 1479.78,1205.41 1480.37,1206.84 1480.96,1206.75 1481.54,1206.89 1482.13,1208.14 1482.72,1206.65 1483.3,1205.33 1483.89,1205.7 1484.48,1204.65 1485.06,1206.27 1485.65,1203.63 1486.24,1205.14 1486.82,1206.62 1487.41,1206.51 1487.99,1208.02 1488.58,1207.96 1489.17,1210.88 1489.75,1208.93 1490.34,1213.31 1490.93,1211.6 1491.51,1214.13 1492.1,1212.35 1492.69,1212.17 1493.27,1213.01 1493.86,1214.33 1494.45,1214.2 1495.03,1212.51 1495.62,1210.88 1496.2,1213.28 1496.79,1210.13 1497.38,1209.81 1497.96,1212.34 1498.55,1211.9 1499.14,1211.6 1499.72,1211.31 1500.31,1211.1 1500.9,1212.26 1501.48,1213.49 1502.07,1210.27 1502.65,1207.25 1503.24,1205.33 1503.83,1207.84 1504.41,1210.66 1505,1211.74 1505.59,1211.51 1506.17,1211.12 1506.76,1209.72 1507.35,1208.05 1507.93,1207.83 1508.52,1206.4 1509.11,1205.2 1509.69,1206.49 1510.28,1205.11 1510.86,1204.77 1511.45,1206.35 1512.04,1208.05 1512.62,1206.75 1513.21,1208.13 1513.8,1205.1 1514.38,1205.18 1514.97,1205.29 1515.56,1207.96 1516.14,1208.21 1516.73,1204.92 1517.32,1203.74 1517.9,1203.91 1518.49,1205.47 1519.07,1204.23 1519.66,1204.24 1520.25,1204.31 1520.83,1200.34 1521.42,1200.77 1522.01,1199.93 1522.59,1200.57 1523.18,1200.76 1523.77,1205.26 1524.35,1205.34 1524.94,1205.4 1525.52,1202.55 1526.11,1205.58 1526.7,1205.85 1527.28,1204.59 1527.87,1203.58 1528.46,1202.2 1529.04,1201.14 1529.63,1203.06 1530.22,1204.58 1530.8,1204.83 1531.39,1204.67 1531.98,1206.05 1532.56,1208.64 1533.15,1210.78 1533.73,1213.5 1534.32,1211.93 1534.91,1210.21 1535.49,1208.47 1536.08,1203.04 1536.67,1203.33 1537.25,1203.91 1537.84,1202.67 1538.43,1202.69 1539.01,1201.41 1539.6,1203.32 1540.19,1205.05 1540.77,1206.47 1541.36,1207.78 1541.94,1208.82 1542.53,1211.33 1543.12,1206.83 1543.7,1206.94 1544.29,1205.61 1544.88,1204.45 1545.46,1206.15 1546.05,1209.06 1546.64,1211.48 1547.22,1211 1547.81,1215 1548.4,1214.52 1548.98,1215.69 1549.57,1217.85 1550.15,1214.64 1550.74,1212.56 1551.33,1213.62 1551.91,1213.12 1552.5,1211.53 1553.09,1208.86 1553.67,1209.83 1554.26,1209.46 1554.85,1211.94 1555.43,1210.32 1556.02,1211.25 1556.6,1209.72 1557.19,1210.79 1557.78,1211.95 1558.36,1211.66 1558.95,1212.76 1559.54,1210.91 1560.12,1210.36 1560.71,1211.36 1561.3,1212.34 1561.88,1210.65 1562.47,1211.73 1563.06,1211.62 1563.64,1211.4 1564.23,1212.3 1564.81,1212 1565.4,1210.41 1565.99,1211.37 1566.57,1208.06 1567.16,1209.28 1567.75,1207.97 1568.33,1206.49 1568.92,1205.43 1569.51,1202.84 1570.09,1204.24 1570.68,1204.25 1571.27,1204.31 1571.85,1203.24 1572.44,1203.32 1573.02,1205.04 1573.61,1205.19 1574.2,1206.63 1574.78,1206.61 1575.37,1205.09 1575.96,1200.86 1576.54,1202.86 1577.13,1201.55 1577.72,1200.44 1578.3,1197.94 1578.89,1199.68 1579.47,1201.42 1580.06,1202.93 1580.65,1207.13 1581.23,1207.25 1581.82,1209.8 1582.41,1208.22 1582.99,1207.94 1583.58,1209.24 1584.17,1211.82 1584.75,1209.98 1585.34,1209.51 1585.93,1209.47 1586.51,1210.58 1587.1,1207.59 1587.68,1209.14 1588.27,1207.5 1588.86,1210.04 1589.44,1210.99 1590.03,1209.67 1590.62,1210.71 1591.2,1209.09 1591.79,1210.2 1592.38,1208.7 1592.96,1211.7 1593.55,1208.82 1594.14,1207.39 1594.72,1205.75 1595.31,1206.03 1595.89,1204.67 1596.48,1204.7 1597.07,1203.47 1597.65,1202.25 1598.24,1200.89 1598.83,1201.38 1599.41,1201.84 1600,1199.54 1600.59,1200.05 1601.17,1202 1601.76,1205.07 1602.34,1205.33 1602.93,1205.44 1603.52,1206.95 1604.1,1206.62 1604.69,1202.73 1605.28,1204.52 1605.86,1201.84 1606.45,1200.67 1607.04,1199.94 1607.62,1201.7 1608.21,1206.01 1608.8,1206.36 1609.38,1206.34 1609.97,1207.99 1610.55,1208.06 1611.14,1206.57 1611.73,1207.9 1612.31,1206.44 1612.9,1207.65 1613.49,1209.14 1614.07,1208.06 1614.66,1207.83 1615.25,1203.69 1615.83,1206.67 1616.42,1208.25 1617.01,1210.77 1617.59,1209.21 1618.18,1210.62 1618.76,1209.26 1619.35,1208.99 1619.94,1209 1620.52,1207.52 1621.11,1206.02 1621.7,1206.29 1622.28,1207.77 1622.87,1206.27 1623.46,1207.66 1624.04,1207.56 1624.63,1203.55 1625.22,1203.55 1625.8,1198.17 1626.39,1199.75 1626.97,1200.34 1627.56,1196.78 1628.15,1193.47 1628.73,1193.01 1629.32,1195.23 1629.91,1198.66 1630.49,1199.27 1631.08,1198.24 1631.67,1197.24 1632.25,1196.48 1632.84,1196.74 1633.42,1197.25 1634.01,1196.12 1634.6,1198.28 1635.18,1199.91 1635.77,1201.41 1636.36,1200.54 1636.94,1201.36 1637.53,1202.8 1638.12,1202.99 1638.7,1203.41 1639.29,1203.7 1639.88,1206.74 1640.46,1208.03 1641.05,1206.52 1641.63,1205.39 1642.22,1204.24 1642.81,1201.92 1643.39,1202.09 1643.98,1201.07 1644.57,1201.24 1645.15,1204.27 1645.74,1204.42 1646.33,1206.05 1646.91,1207.51 1647.5,1210.45 1648.09,1214.36 1648.67,1214.96 1649.26,1212.9 1649.84,1210.96 1650.43,1212.45 1651.02,1212.32 1651.6,1213.22 1652.19,1215.78 1652.78,1216.7 1653.36,1217.81 1653.95,1217.1 1654.54,1215.5 1655.12,1216.4 1655.71,1215.98 1656.29,1215.44 1656.88,1217.53 1657.47,1218.39 1658.05,1217.52 1658.64,1215.51 1659.23,1213.68 1659.81,1211.95 1660.4,1211.64 1660.99,1211.72 1661.57,1211.56 1662.16,1211.4 1662.75,1209.69 1663.33,1209.38 1663.92,1207.99 1664.5,1207.81 1665.09,1209.09 1665.68,1212.07 1666.26,1209.35 1666.85,1207.75 1667.44,1206.42 1668.02,1202.37 1668.61,1202.54 1669.2,1202.89 1669.78,1201.77 1670.37,1202.05 1670.96,1202.07 1671.54,1202.36 1672.13,1202.86 1672.71,1203.08 1673.3,1204.74 1673.89,1204.75 1674.47,1203.53 1675.06,1203.78 1675.65,1205.3 1676.23,1205.15 1676.82,1205.05 1677.41,1206.38 1677.99,1203.9 1678.58,1208.16 1679.17,1207.94 1679.75,1206.28 1680.34,1207.44 1680.92,1208.41 1681.51,1206.6 1682.1,1205.22 1682.68,1205.32 1683.27,1204.13 1683.86,1204.1 1684.44,1204.19 1685.03,1204.36 1685.62,1208.44 1686.2,1206.95 1686.79,1209.51 1687.37,1205.2 1687.96,1204.03 1688.55,1202.71 1689.13,1204.41 1689.72,1206.02 1690.31,1207.42 1690.89,1207.38 1691.48,1207.43 1692.07,1209.95 1692.65,1208.32 1693.24,1208.03 1693.83,1208.39 1694.41,1208.27 1695,1207.03 1695.58,1206.89 1696.17,1209.6 1696.76,1209.63 1697.34,1209.35 1697.93,1207.89 1698.52,1206.88 1699.1,1205.67 1699.69,1207.17 1700.28,1207.63 1700.86,1207.43 1701.45,1207.41 1702.04,1207.31 1702.62,1207.2 1703.21,1208.72 1703.79,1211.32 1704.38,1211.29 1704.97,1210.79 1705.55,1209.45 1706.14,1208.01 1706.73,1205.45 1707.31,1209.64 1707.9,1209.87 1708.49,1209.75 1709.07,1209.83 1709.66,1208.05 1710.24,1209.52 1710.83,1206.45 1711.42,1205.53 1712,1208.24 1712.59,1208.07 1713.18,1209.45 1713.76,1209.28 1714.35,1209.2 1714.94,1207.86 1715.52,1207.47 1716.11,1207.63 1716.7,1207.73 1717.28,1202.4 1717.87,1201.16 1718.45,1201.32 1719.04,1202.73 1719.63,1201.71 1720.21,1200.55 1720.8,1199.54 1721.39,1198.47 1721.97,1196.1 1722.56,1195.5 1723.15,1196.22 1723.73,1199.66 1724.32,1199.75 1724.91,1200.2 1725.49,1200.55 1726.08,1201.06 1726.66,1201.4 1727.25,1204.56 1727.84,1205.09 1728.42,1205.33 1729.01,1206.85 1729.6,1205.26 1730.18,1206.7 1730.77,1207.79 1731.36,1206.5 1731.94,1206.32 1732.53,1206.54 1733.11,1206.67 1733.7,1207.99 1734.29,1212.16 1734.87,1213.44 1735.46,1215.76 1736.05,1217.81 1736.63,1215.78 1737.22,1215.34 1737.81,1215 1738.39,1213.02 1738.98,1212.44 1739.57,1210.67 1740.15,1207.74 1740.74,1210.78 1741.32,1210.66 1741.91,1210.49 1742.5,1213.07 1743.08,1214.12 1743.67,1216.59 1744.26,1214.79 1744.84,1213 1745.43,1211.19 1746.02,1209.65 1746.6,1210.36 1747.19,1210.19 1747.78,1207.18 1748.36,1208.65 1748.95,1205.81 1749.53,1207.31 1750.12,1203.04 1750.71,1203.23 1751.29,1205.9 1751.88,1206.06 1752.47,1206.2 1753.05,1204.98 1753.64,1206.41 1754.23,1205.09 1754.81,1209.35 1755.4,1206.41 1755.99,1204.94 1756.57,1203.55 1757.16,1202.78 1757.74,1205.69 1758.33,1202.79 1758.92,1200.45 1759.5,1200.77 1760.09,1197.91 1760.68,1197.11 1761.26,1199.11 1761.85,1200.94 1762.44,1203.86 1763.02,1205.29 1763.61,1206.78 1764.19,1208.02 1764.78,1207.95 1765.37,1208.12 1765.95,1207.86 1766.54,1209.45 1767.13,1212.15 1767.71,1217.38 1768.3,1216.76 1768.89,1214.69 1769.47,1212.69 1770.06,1211.11 1770.65,1213.31 1771.23,1211.52 1771.82,1211.25 1772.4,1209.72 1772.99,1209.48 1773.58,1207.86 1774.16,1206.33 1774.75,1206.02 1775.34,1210.17 1775.92,1209.75 1776.51,1210.73 1777.1,1210.26 1777.68,1209.87 1778.27,1211.36 1778.86,1212.43 1779.44,1211.96 1780.03,1211.53 1780.61,1204.23 1781.2,1201.53 1781.79,1204.4 1782.37,1204.62 1782.96,1202.22 1783.55,1204.25 1784.13,1204.79 1784.72,1205.05 1785.31,1203.78 1785.89,1202.48 1786.48,1199.99 1787.06,1201.65 1787.65,1202.17 1788.24,1203.8 1788.82,1206.42 1789.41,1206.23 1790,1206.18 1790.58,1204.92 1791.17,1206.13 1791.76,1206.33 1792.34,1207.81 1792.93,1211.69 1793.52,1209.92 1794.1,1209.7 1794.69,1207.97 1795.27,1210.4 1795.86,1210.39 1796.45,1211.31 1797.03,1209.78 1797.62,1209.65 1798.21,1212.3 1798.79,1213.62 1799.38,1214.8 1799.97,1211.43 1800.55,1212.46 1801.14,1210.7 1801.73,1209.02 1802.31,1208.74 1802.9,1210.05 1803.48,1210.12 1804.07,1211.27 1804.66,1209.44 1805.24,1209.19 1805.83,1206.26 1806.42,1207.5 1807,1207.56 1807.59,1206.11 1808.18,1206.13 1808.76,1203.35 1809.35,1206.54 1809.94,1205.29 1810.52,1205.23 1811.11,1206.44 1811.69,1205.38 1812.28,1204.03 1812.87,1204.12 1813.45,1204.27 1814.04,1201.9 1814.63,1202.13 1815.21,1203.54 1815.8,1200.81 1816.39,1201.1 1816.97,1200.04 1817.56,1200.49 1818.14,1199.71 1818.73,1199.64 1819.32,1197.22 1819.9,1199.13 1820.49,1200.85 1821.08,1202.59 1821.66,1201.05 1822.25,1201.51 1822.84,1201.66 1823.42,1206.07 1824.01,1206.04 1824.6,1207.49 1825.18,1210.3 1825.77,1211.59 1826.35,1212.45 1826.94,1214.79 1827.53,1215.66 1828.11,1213.99 1828.7,1212.3 1829.29,1210.77 1829.87,1209.21 1830.46,1210.79 1831.05,1210.37 1831.63,1214.36 1832.22,1215.22 1832.81,1213.28 1833.39,1210.13 1833.98,1211.28 1834.56,1208.65 1835.15,1208.47 1835.74,1205.89 1836.32,1208.69 1836.91,1210.01 1837.5,1208.33 1838.08,1205.52 1838.67,1202.98 1839.26,1204.75 1839.84,1207.78 1840.43,1206.54 1841.01,1208.93 1841.6,1211.75 1842.19,1215.55 1842.77,1214.96 1843.36,1214.48 1843.95,1215.39 1844.53,1216.24 1845.12,1217.3 1845.71,1218.11 1846.29,1220.31 1846.88,1219.39 1847.47,1221.55 1848.05,1219.31 1848.64,1219.02 1849.22,1218.16 1849.81,1218.84 1850.4,1218.46 1850.98,1213.73 1851.57,1211.76 1852.16,1210.26 1852.74,1212.91 1853.33,1211.29 1853.92,1215.57 1854.5,1213.83 1855.09,1212.38 1855.68,1210.51 1856.26,1207.74 1856.85,1206.39 1857.43,1203.77 1858.02,1205.2 1858.61,1210.86 1859.19,1212.4 1859.78,1208.03 1860.37,1207.74 1860.95,1207.54 1861.54,1206 1862.13,1203.06 1862.71,1204.88 1863.3,1204.62 1863.88,1204.75 1864.47,1204.88 1865.06,1203.49 1865.64,1205.11 1866.23,1202.72 1866.82,1201.26 1867.4,1198.76 1867.99,1198.08 1868.58,1202.62 1869.16,1206.8 1869.75,1205.41 1870.34,1202.69 1870.92,1203.11 1871.51,1200.11 1872.09,1203.4 1872.68,1206.21 1873.27,1206.37 1873.85,1205.03 1874.44,1204.9 1875.03,1204.94 1875.61,1203.66 1876.2,1200.93 1876.79,1201.41 1877.37,1204.42 1877.96,1205.79 1878.55,1204.87 1879.13,1203.82 1879.72,1206.85 1880.3,1206.66 1880.89,1208.2 1881.48,1208.22 1882.06,1204.06 1882.65,1205.3 1883.24,1206.55 1883.82,1203.74 1884.41,1205.16 1885,1203.74 1885.58,1203.81 1886.17,1203.86 1886.76,1203.98 1887.34,1204.02 1887.93,1205.3 1888.51,1205.53 1889.1,1204.4 1889.69,1203.35 1890.27,1201.89 1890.86,1202.3 1891.45,1201.09 1892.03,1198.66 1892.62,1200.47 1893.21,1201.95 1893.79,1199.6 1894.38,1198.62 1894.96,1199.12 1895.55,1198.38 1896.14,1199.06 1896.72,1199.31 1897.31,1198.47 1897.9,1198.94 1898.48,1200.67 1899.07,1201.21 1899.66,1199.82 1900.24,1199.93 1900.83,1201.6 1901.42,1203.23 1902,1204.98 1902.59,1203.4 1903.17,1203.59 1903.76,1205.25 1904.35,1206.75 1904.93,1208.14 1905.52,1209.75 1906.11,1209.72 1906.69,1208 1907.28,1208.26 1907.87,1208.11 1908.45,1213.42 1909.04,1214.52 1909.63,1211.46 1910.21,1209.88 1910.8,1211.18 1911.38,1212.53 1911.97,1212.41 1912.56,1214.8 1913.14,1210.38 1913.73,1207.24 1914.32,1207.24 1914.9,1210.02 1915.49,1210.96 1916.08,1208.04 1916.66,1208.21 1917.25,1206.92 1917.83,1208.39 1918.42,1204.31 1919.01,1203.18 1919.59,1203.63 1920.18,1203.81 1920.77,1201.28 1921.35,1204.24 1921.94,1205.7 1922.53,1207.21 1923.11,1205.84 1923.7,1205.95 1924.29,1202.16 1924.87,1200.97 1925.46,1204.18 1926.04,1204.46 1926.63,1203.33 1927.22,1202.2 1927.8,1201.13 1928.39,1201.44 1928.98,1200.36 1929.56,1201.09 1930.15,1200.13 1930.74,1200.49 1931.32,1202.21 1931.91,1202.36 1932.5,1204.13 1933.08,1208.51 1933.67,1207.33 1934.25,1206.06 1934.84,1203.17 1935.43,1201.85 1936.01,1203.54 1936.6,1205.02 1937.19,1205.22 1937.77,1206.83 1938.36,1208.27 1938.95,1206.98 1939.53,1207.01 1940.12,1207.11 1940.71,1208.34 1941.29,1205.42 1941.88,1205.48 1942.46,1208.17 1943.05,1209.49 1943.64,1207.92 1944.22,1208.86 1944.81,1208.62 1945.4,1209.73 1945.98,1204.3 1946.57,1205.91 1947.16,1204.56 1947.74,1206.4 1948.33,1207.51 1948.91,1208.66 1949.5,1208.43 1950.09,1206.96 1950.67,1206.81 1951.26,1209.76 1951.85,1208.24 1952.43,1209.33 1953.02,1206.23 1953.61,1204.8 1954.19,1203.48 1954.78,1203.41 1955.37,1203.52 1955.95,1203.5 1956.54,1205.11 1957.12,1205.23 1957.71,1201.56 1958.3,1200.79 1958.88,1201.12 1959.47,1201.56 1960.06,1201.95 1960.64,1202.29 1961.23,1202.2 1961.82,1206.48 1962.4,1206.52 1962.99,1211.99 1963.58,1211.78 1964.16,1212.6 1964.75,1209.35 1965.33,1209.36 1965.92,1207.76 1966.51,1206.29 1967.09,1206.25 1967.68,1209.09 1968.27,1209.09 1968.85,1210.66 1969.44,1212.98 1970.03,1212.53 1970.61,1210.69 1971.2,1209.24 1971.78,1211.77 1972.37,1212.59 1972.96,1213.74 1973.54,1213.23 1974.13,1210.05 1974.72,1209.82 1975.3,1212.46 1975.89,1210.77 1976.48,1209.55 1977.06,1209.26 1977.65,1210.61 1978.24,1210.23 1978.82,1208.5 1979.41,1206.91 1979.99,1206.67 1980.58,1203.69 1981.17,1199.75 1981.75,1201.2 1982.34,1202.69 1982.93,1204.08 1983.51,1202.69 1984.1,1204.25 1984.69,1208.36 1985.27,1206.97 1985.86,1204.29 1986.45,1204.1 1987.03,1204.31 1987.62,1203.09 1988.2,1204.7 1988.79,1203.32 1989.38,1204.65 1989.96,1203.69 1990.55,1202.45 1991.14,1202.66 1991.72,1202.88 1992.31,1204.52 1992.9,1207.33 1993.48,1205.93 1994.07,1206.28 1994.65,1202.32 1995.24,1202.66 1995.83,1201.47 1996.41,1203.06 1997,1200.5 1997.59,1203.68 1998.17,1199.98 1998.76,1201.73 1999.35,1200.71 1999.93,1201.3 2000.52,1202 2001.11,1206.43 2001.69,1206.62 2002.28,1208.08 2002.86,1210.74 2003.45,1207.95 2004.04,1211.84 2004.62,1210.23 2005.21,1210.05 2005.8,1207.29 2006.38,1207.2 2006.97,1205.82 2007.56,1209.88 2008.14,1211.18 2008.73,1210.79 2009.32,1210.42 2009.9,1213.16 2010.49,1212.83 2011.07,1208.14 2011.66,1209.5 2012.25,1207.85 2012.83,1208.96 2013.42,1210.28 2014.01,1211.47 2014.59,1211.14 2015.18,1211.33 2015.77,1212.43 2016.35,1212.12 2016.94,1210.72 2017.53,1209.1 2018.11,1208.41 2018.7,1212.51 2019.28,1213.81 2019.87,1213.26 2020.46,1212.91 2021.04,1215.22 2021.63,1212.25 2022.22,1210.2 2022.8,1208.78 2023.39,1204.47 2023.98,1208.75 2024.56,1209.94 2025.15,1210.31 2025.73,1211.63 2026.32,1211.51 2026.91,1211.17 2027.49,1209.87 2028.08,1208.52 2028.67,1209.78 2029.25,1209.78 2029.84,1210.96 2030.43,1211.67 2031.01,1212.48 2031.6,1209.67 2032.19,1209.28 2032.77,1209.25 2033.36,1207.71 2033.94,1207.77 2034.53,1203.49 2035.12,1199.46 2035.7,1202.56 2036.29,1202.6 2036.88,1201.72 2037.46,1204.47 2038.05,1203.19 2038.64,1204.64 2039.22,1204.67 2039.81,1206.24 2040.4,1207.8 2040.98,1207.71 2041.57,1207.47 2042.15,1209.47 2042.74,1210.46 2043.33,1207.28 2043.91,1205.55 2044.5,1204.16 2045.09,1205.3 2045.67,1206.61 2046.26,1206.48 2046.85,1206.49 2047.43,1206.55 2048.02,1206.88 2048.6,1205.5 2049.19,1204 2049.78,1202.46 2050.36,1204.15 2050.95,1202.74 2051.54,1203 2052.12,1203.22 2052.71,1204.94 2053.3,1209.36 2053.88,1207.73 2054.47,1206.6 2055.06,1207.76 2055.64,1206.26 2056.23,1206.34 2056.81,1206.6 2057.4,1206.77 2057.99,1208.23 2058.57,1208.01 2059.16,1207.94 2059.75,1210.88 2060.33,1213.62 2060.92,1211.91 2061.51,1211.48 2062.09,1205.73 2062.68,1207.11 2063.27,1208.53 2063.85,1207.01 2064.44,1211.03 2065.02,1210.63 2065.61,1209.01 2066.2,1208.95 2066.78,1206.38 2067.37,1204.85 2067.96,1206.33 2068.54,1206.22 2069.13,1206.05 2069.72,1204.99 2070.3,1200.7 2070.89,1200.86 2071.48,1205.18 2072.06,1206.49 2072.65,1206.56 2073.23,1203.91 2073.82,1206.46 2074.41,1206.35 2074.99,1208 2075.58,1207.85 2076.17,1210.59 2076.75,1211.62 2077.34,1208.88 2077.93,1207.6 2078.51,1202.11 2079.1,1199.62 2079.68,1198.96 2080.27,1200.97 2080.86,1201.23 2081.44,1197.55 2082.03,1198.23 2082.62,1198.93 2083.2,1200.91 2083.79,1201.17 2084.38,1202.76 2084.96,1203.21 2085.55,1203.18 2086.14,1203.39 2086.72,1203.48 2087.31,1206.01 2087.89,1201.89 2088.48,1199.2 2089.07,1198.37 2089.65,1200.26 2090.24,1203.36 2090.83,1203.59 2091.41,1202.48 2092,1204 2092.59,1206.95 2093.17,1205.81 2093.76,1204.53 2094.35,1205.91 2094.93,1205.71 2095.52,1205.98 2096.1,1207.14 2096.69,1207.05 2097.28,1208.58 2097.86,1208.39 2098.45,1206.99 2099.04,1205.68 2099.62,1205.76 2100.21,1207.2 2100.8,1206.91 2101.38,1205.51 2101.97,1204.33 2102.55,1199.03 2103.14,1200.83 2103.73,1202.62 2104.31,1201.41 2104.9,1203.06 2105.49,1203.28 2106.07,1204.86 2106.66,1207.77 2107.25,1209.04 2107.83,1208.91 2108.42,1207.34 2109.01,1207.49 2109.59,1200.6 2110.18,1200.81 2110.76,1202.41 2111.35,1202.65 2111.94,1205.49 2112.52,1205.85 2113.11,1206.19 2113.7,1208.95 2114.28,1208.86 2114.87,1208.9 2115.46,1211.91 2116.04,1210.21 2116.63,1210.16 2117.22,1208.97 2117.8,1208.81 2118.39,1211.4 2118.97,1208.49 2119.56,1208.17 2120.15,1209.55 2120.73,1209.56 2121.32,1210.58 2121.91,1210.63 2122.49,1206.47 2123.08,1210.71 2123.67,1212.22 2124.25,1214.9 2124.84,1211.85 2125.42,1212.84 2126.01,1213.72 2126.6,1212.9 2127.18,1211.11 2127.77,1210.97 2128.36,1209.09 2128.94,1211.77 2129.53,1210.24 2130.12,1207.59 2130.7,1207.61 2131.29,1206.24 2131.88,1210.69 2132.46,1210.43 2133.05,1208.88 2133.63,1207.17 2134.22,1205.62 2134.81,1202.93 2135.39,1204.6 2135.98,1204.73 2136.57,1204.3 2137.15,1206.76 2137.74,1206.67 2138.33,1206.53 2138.91,1206.34 2139.5,1211 2140.09,1207.93 2140.67,1207.31 2141.26,1206.02 2141.84,1206.19 2142.43,1204.99 2143.02,1209.1 2143.6,1208.91 2144.19,1206.16 2144.78,1204.87 2145.36,1205.03 2145.95,1205.11 2146.54,1206.28 2147.12,1204.73 2147.71,1203.51 2148.3,1207.78 2148.88,1210.48 2149.47,1211.58 2150.05,1211.47 2150.64,1211.11 2151.23,1212.16 2151.81,1214.71 2152.4,1211.6 2152.99,1210.36 2153.57,1211.45 2154.16,1213.9 2154.75,1212.1 2155.33,1211.75 2155.92,1208.92 2156.5,1211.15 2157.09,1210.9 2157.68,1209.47 2158.26,1208 \"/>\n<path clip-path=\"url(#clip962)\" d=\"M986.025 1207.32 L986.612 1207.32 L987.198 1207.32 L987.785 1207.32 L988.371 1207.32 L988.957 1207.32 L989.544 1207.32 L990.13 1207.32 L990.717 1207.32 L991.303 1207.32 L991.889 1207.32 L992.476 1207.32 L993.062 1207.32 L993.649 1207.32 L994.235 1207.32 L994.822 1207.32 L995.408 1207.32 L995.994 1207.32 L996.581 1207.32 L997.167 1207.32 L997.754 1207.32 L998.34 1207.32 L998.926 1207.32 L999.513 1207.32 L1000.1 1207.32 L1000.69 1207.32 L1001.27 1207.32 L1001.86 1207.32 L1002.44 1207.32 L1003.03 1207.32 L1003.62 1207.32 L1004.2 1207.32 L1004.79 1207.32 L1005.38 1207.32 L1005.96 1207.32 L1006.55 1207.32 L1007.14 1207.32 L1007.72 1207.32 L1008.31 1207.32 L1008.9 1207.32 L1009.48 1207.32 L1010.07 1207.32 L1010.65 1207.32 L1011.24 1207.32 L1011.83 1207.32 L1012.41 1207.32 L1013 1207.32 L1013.59 1207.32 L1014.17 1207.32 L1014.76 1207.32 L1015.35 1207.32 L1015.93 1207.32 L1016.52 1207.32 L1017.11 1207.32 L1017.69 1207.32 L1018.28 1207.32 L1018.86 1207.32 L1019.45 1207.32 L1020.04 1207.32 L1020.62 1207.32 L1021.21 1207.32 L1021.8 1207.32 L1022.38 1207.32 L1022.97 1207.32 L1023.56 1207.32 L1024.14 1207.32 L1024.73 1207.32 L1025.32 1207.32 L1025.9 1207.32 L1026.49 1207.32 L1027.07 1207.32 L1027.66 1207.32 L1028.25 1207.32 L1028.83 1207.32 L1029.42 1207.32 L1030.01 1207.32 L1030.59 1207.32 L1031.18 1207.32 L1031.77 1207.32 L1032.35 1207.32 L1032.94 1207.32 L1033.52 1207.32 L1034.11 1207.32 L1034.7 1207.32 L1035.28 1207.32 L1035.87 1207.32 L1036.46 1207.32 L1037.04 1207.32 L1037.63 1207.32 L1038.22 1207.32 L1038.8 1207.32 L1039.39 1207.32 L1039.98 1207.32 L1040.56 1207.32 L1041.15 1207.32 L1041.73 1207.32 L1042.32 1207.32 L1042.91 1207.32 L1043.49 1207.32 L1044.08 1207.32 L1044.67 1207.32 L1045.25 1207.32 L1045.84 1207.32 L1046.43 1207.32 L1047.01 1207.32 L1047.6 1207.32 L1048.19 1207.32 L1048.77 1207.32 L1049.36 1207.32 L1049.94 1207.32 L1050.53 1207.32 L1051.12 1207.32 L1051.7 1207.32 L1052.29 1207.32 L1052.88 1207.32 L1053.46 1207.32 L1054.05 1207.32 L1054.64 1207.32 L1055.22 1207.32 L1055.81 1207.32 L1056.39 1207.32 L1056.98 1207.32 L1057.57 1207.32 L1058.15 1207.32 L1058.74 1207.32 L1059.33 1207.32 L1059.91 1207.32 L1060.5 1207.32 L1061.09 1207.32 L1061.67 1207.32 L1062.26 1207.32 L1062.85 1207.32 L1063.43 1207.32 L1064.02 1207.32 L1064.6 1207.32 L1065.19 1207.32 L1065.78 1207.32 L1066.36 1207.32 L1066.95 1207.32 L1067.54 1207.32 L1068.12 1207.32 L1068.71 1207.32 L1069.3 1207.32 L1069.88 1207.32 L1070.47 1207.32 L1071.06 1207.32 L1071.64 1207.32 L1072.23 1207.32 L1072.81 1207.32 L1073.4 1207.32 L1073.99 1207.32 L1074.57 1207.32 L1075.16 1207.32 L1075.75 1207.32 L1076.33 1207.32 L1076.92 1207.32 L1077.51 1207.32 L1078.09 1207.32 L1078.68 1207.32 L1079.26 1207.32 L1079.85 1207.32 L1080.44 1207.32 L1081.02 1207.32 L1081.61 1207.32 L1082.2 1207.32 L1082.78 1207.32 L1083.37 1207.32 L1083.96 1207.32 L1084.54 1207.32 L1085.13 1207.32 L1085.72 1207.32 L1086.3 1207.32 L1086.89 1207.32 L1087.47 1207.32 L1088.06 1207.32 L1088.65 1207.32 L1089.23 1207.32 L1089.82 1207.32 L1090.41 1207.32 L1090.99 1207.32 L1091.58 1207.32 L1092.17 1207.32 L1092.75 1207.32 L1093.34 1207.32 L1093.93 1207.32 L1094.51 1207.32 L1095.1 1207.32 L1095.68 1207.32 L1096.27 1207.32 L1096.86 1207.32 L1097.44 1207.32 L1098.03 1207.32 L1098.62 1207.32 L1099.2 1207.32 L1099.79 1207.32 L1100.38 1207.32 L1100.96 1207.32 L1101.55 1207.32 L1102.14 1207.32 L1102.72 1207.32 L1103.31 1207.32 L1103.89 1207.32 L1104.48 1207.32 L1105.07 1207.32 L1105.65 1207.32 L1106.24 1207.32 L1106.83 1207.32 L1107.41 1207.32 L1108 1207.32 L1108.59 1207.32 L1109.17 1207.32 L1109.76 1207.32 L1110.34 1207.32 L1110.93 1207.32 L1111.52 1207.32 L1112.1 1207.32 L1112.69 1207.32 L1113.28 1207.32 L1113.86 1207.32 L1114.45 1207.32 L1115.04 1207.32 L1115.62 1207.32 L1116.21 1207.32 L1116.8 1207.32 L1117.38 1207.32 L1117.97 1207.32 L1118.55 1207.32 L1119.14 1207.32 L1119.73 1207.32 L1120.31 1207.32 L1120.9 1207.32 L1121.49 1207.32 L1122.07 1207.32 L1122.66 1207.32 L1123.25 1207.32 L1123.83 1207.32 L1124.42 1207.32 L1125.01 1207.32 L1125.59 1207.32 L1126.18 1207.32 L1126.76 1207.32 L1127.35 1207.32 L1127.94 1207.32 L1128.52 1207.32 L1129.11 1207.32 L1129.7 1207.32 L1130.28 1207.32 L1130.87 1207.32 L1131.46 1207.32 L1132.04 1207.32 L1132.63 1207.32 L1133.21 1207.32 L1133.8 1207.32 L1134.39 1207.32 L1134.97 1207.32 L1135.56 1207.32 L1136.15 1207.32 L1136.73 1207.32 L1137.32 1207.32 L1137.91 1207.32 L1138.49 1207.32 L1139.08 1207.32 L1139.67 1207.32 L1140.25 1207.32 L1140.84 1207.32 L1141.42 1207.32 L1142.01 1207.32 L1142.6 1207.32 L1143.18 1207.32 L1143.77 1207.32 L1144.36 1207.32 L1144.94 1207.32 L1145.53 1207.32 L1146.12 1207.32 L1146.7 1207.32 L1147.29 1207.32 L1147.88 1207.32 L1148.46 1207.32 L1149.05 1207.32 L1149.63 1207.32 L1150.22 1207.32 L1150.81 1207.32 L1151.39 1207.32 L1151.98 1207.32 L1152.57 1207.32 L1153.15 1207.32 L1153.74 1207.32 L1154.33 1207.32 L1154.91 1207.32 L1155.5 1207.32 L1156.09 1207.32 L1156.67 1207.32 L1157.26 1207.32 L1157.84 1207.32 L1158.43 1207.32 L1159.02 1207.32 L1159.6 1207.32 L1160.19 1207.32 L1160.78 1207.32 L1161.36 1207.32 L1161.95 1207.32 L1162.54 1207.32 L1163.12 1207.32 L1163.71 1207.32 L1164.29 1207.32 L1164.88 1207.32 L1165.47 1207.32 L1166.05 1207.32 L1166.64 1207.32 L1167.23 1207.32 L1167.81 1207.32 L1168.4 1207.32 L1168.99 1207.32 L1169.57 1207.32 L1170.16 1207.32 L1170.75 1207.32 L1171.33 1207.32 L1171.92 1207.32 L1172.5 1207.32 L1173.09 1207.32 L1173.68 1207.32 L1174.26 1207.32 L1174.85 1207.32 L1175.44 1207.32 L1176.02 1207.32 L1176.61 1207.32 L1177.2 1207.32 L1177.78 1207.32 L1178.37 1207.32 L1178.96 1207.32 L1179.54 1207.32 L1180.13 1207.32 L1180.71 1207.32 L1181.3 1207.32 L1181.89 1207.32 L1182.47 1207.32 L1183.06 1207.32 L1183.65 1207.32 L1184.23 1207.32 L1184.82 1207.32 L1185.41 1207.32 L1185.99 1207.32 L1186.58 1207.32 L1187.16 1207.32 L1187.75 1207.32 L1188.34 1207.32 L1188.92 1207.32 L1189.51 1207.32 L1190.1 1207.32 L1190.68 1207.32 L1191.27 1207.32 L1191.86 1207.32 L1192.44 1207.32 L1193.03 1207.32 L1193.62 1207.32 L1194.2 1207.32 L1194.79 1207.32 L1195.37 1207.32 L1195.96 1207.32 L1196.55 1207.32 L1197.13 1207.32 L1197.72 1207.32 L1198.31 1207.32 L1198.89 1207.32 L1199.48 1207.32 L1200.07 1207.32 L1200.65 1207.32 L1201.24 1207.32 L1201.83 1207.32 L1202.41 1207.32 L1203 1207.32 L1203.58 1207.32 L1204.17 1207.32 L1204.76 1207.32 L1205.34 1207.32 L1205.93 1207.32 L1206.52 1207.32 L1207.1 1207.32 L1207.69 1207.32 L1208.28 1207.32 L1208.86 1207.32 L1209.45 1207.32 L1210.03 1207.32 L1210.62 1207.32 L1211.21 1207.32 L1211.79 1207.32 L1212.38 1207.32 L1212.97 1207.32 L1213.55 1207.32 L1214.14 1207.32 L1214.73 1207.32 L1215.31 1207.32 L1215.9 1207.32 L1216.49 1207.32 L1217.07 1207.32 L1217.66 1207.32 L1218.24 1207.32 L1218.83 1207.32 L1219.42 1207.32 L1220 1207.32 L1220.59 1207.32 L1221.18 1207.32 L1221.76 1207.32 L1222.35 1207.32 L1222.94 1207.32 L1223.52 1207.32 L1224.11 1207.32 L1224.7 1207.32 L1225.28 1207.32 L1225.87 1207.32 L1226.45 1207.32 L1227.04 1207.32 L1227.63 1207.32 L1228.21 1207.32 L1228.8 1207.32 L1229.39 1207.32 L1229.97 1207.32 L1230.56 1207.32 L1231.15 1207.32 L1231.73 1207.32 L1232.32 1207.32 L1232.91 1207.32 L1233.49 1207.32 L1234.08 1207.32 L1234.66 1207.32 L1235.25 1207.32 L1235.84 1207.32 L1236.42 1207.32 L1237.01 1207.32 L1237.6 1207.32 L1238.18 1207.32 L1238.77 1207.32 L1239.36 1207.32 L1239.94 1207.32 L1240.53 1207.32 L1241.11 1207.32 L1241.7 1207.32 L1242.29 1207.32 L1242.87 1207.32 L1243.46 1207.32 L1244.05 1207.32 L1244.63 1207.32 L1245.22 1207.32 L1245.81 1207.32 L1246.39 1207.32 L1246.98 1207.32 L1247.57 1207.32 L1248.15 1207.32 L1248.74 1207.32 L1249.32 1207.32 L1249.91 1207.32 L1250.5 1207.32 L1251.08 1207.32 L1251.67 1207.32 L1252.26 1207.32 L1252.84 1207.32 L1253.43 1207.32 L1254.02 1207.32 L1254.6 1207.32 L1255.19 1207.32 L1255.78 1207.32 L1256.36 1207.32 L1256.95 1207.32 L1257.53 1207.32 L1258.12 1207.32 L1258.71 1207.32 L1259.29 1207.32 L1259.88 1207.32 L1260.47 1207.32 L1261.05 1207.32 L1261.64 1207.32 L1262.23 1207.32 L1262.81 1207.32 L1263.4 1207.32 L1263.98 1207.32 L1264.57 1207.32 L1265.16 1207.32 L1265.74 1207.32 L1266.33 1207.32 L1266.92 1207.32 L1267.5 1207.32 L1268.09 1207.32 L1268.68 1207.32 L1269.26 1207.32 L1269.85 1207.32 L1270.44 1207.32 L1271.02 1207.32 L1271.61 1207.32 L1272.19 1207.32 L1272.78 1207.32 L1273.37 1207.32 L1273.95 1207.32 L1274.54 1207.32 L1275.13 1207.32 L1275.71 1207.32 L1276.3 1207.32 L1276.89 1207.32 L1277.47 1207.32 L1278.06 1207.32 L1278.65 1207.32 L1279.23 1207.32 L1279.82 1207.32 L1280.4 1207.32 L1280.99 1207.32 L1281.58 1207.32 L1282.16 1207.32 L1282.75 1207.32 L1283.34 1207.32 L1283.92 1207.32 L1284.51 1207.32 L1285.1 1207.32 L1285.68 1207.32 L1286.27 1207.32 L1286.86 1207.32 L1287.44 1207.32 L1288.03 1207.32 L1288.61 1207.32 L1289.2 1207.32 L1289.79 1207.32 L1290.37 1207.32 L1290.96 1207.32 L1291.55 1207.32 L1292.13 1207.32 L1292.72 1207.32 L1293.31 1207.32 L1293.89 1207.32 L1294.48 1207.32 L1295.06 1207.32 L1295.65 1207.32 L1296.24 1207.32 L1296.82 1207.32 L1297.41 1207.32 L1298 1207.32 L1298.58 1207.32 L1299.17 1207.32 L1299.76 1207.32 L1300.34 1207.32 L1300.93 1207.32 L1301.52 1207.32 L1302.1 1207.32 L1302.69 1207.32 L1303.27 1207.32 L1303.86 1207.32 L1304.45 1207.32 L1305.03 1207.32 L1305.62 1207.32 L1306.21 1207.32 L1306.79 1207.32 L1307.38 1207.32 L1307.97 1207.32 L1308.55 1207.32 L1309.14 1207.32 L1309.73 1207.32 L1310.31 1207.32 L1310.9 1207.32 L1311.48 1207.32 L1312.07 1207.32 L1312.66 1207.32 L1313.24 1207.32 L1313.83 1207.32 L1314.42 1207.32 L1315 1207.32 L1315.59 1207.32 L1316.18 1207.32 L1316.76 1207.32 L1317.35 1207.32 L1317.93 1207.32 L1318.52 1207.32 L1319.11 1207.32 L1319.69 1207.32 L1320.28 1207.32 L1320.87 1207.32 L1321.45 1207.32 L1322.04 1207.32 L1322.63 1207.32 L1323.21 1207.32 L1323.8 1207.32 L1324.39 1207.32 L1324.97 1207.32 L1325.56 1207.32 L1326.14 1207.32 L1326.73 1207.32 L1327.32 1207.32 L1327.9 1207.32 L1328.49 1207.32 L1329.08 1207.32 L1329.66 1207.32 L1330.25 1207.32 L1330.84 1207.32 L1331.42 1207.32 L1332.01 1207.32 L1332.6 1207.32 L1333.18 1207.32 L1333.77 1207.32 L1334.35 1207.32 L1334.94 1207.32 L1335.53 1207.32 L1336.11 1207.32 L1336.7 1207.32 L1337.29 1207.32 L1337.87 1207.32 L1338.46 1207.32 L1339.05 1207.32 L1339.63 1207.32 L1340.22 1207.32 L1340.8 1207.32 L1341.39 1207.32 L1341.98 1207.32 L1342.56 1207.32 L1343.15 1207.32 L1343.74 1207.32 L1344.32 1207.32 L1344.91 1207.32 L1345.5 1207.32 L1346.08 1207.32 L1346.67 1207.32 L1347.26 1207.32 L1347.84 1207.32 L1348.43 1207.32 L1349.01 1207.32 L1349.6 1207.32 L1350.19 1207.32 L1350.77 1207.32 L1351.36 1207.32 L1351.95 1207.32 L1352.53 1207.32 L1353.12 1207.32 L1353.71 1207.32 L1354.29 1207.32 L1354.88 1207.32 L1355.47 1207.32 L1356.05 1207.32 L1356.64 1207.32 L1357.22 1207.32 L1357.81 1207.32 L1358.4 1207.32 L1358.98 1207.32 L1359.57 1207.32 L1360.16 1207.32 L1360.74 1207.32 L1361.33 1207.32 L1361.92 1207.32 L1362.5 1207.32 L1363.09 1207.32 L1363.68 1207.32 L1364.26 1207.32 L1364.85 1207.32 L1365.43 1207.32 L1366.02 1207.32 L1366.61 1207.32 L1367.19 1207.32 L1367.78 1207.32 L1368.37 1207.32 L1368.95 1207.32 L1369.54 1207.32 L1370.13 1207.32 L1370.71 1207.32 L1371.3 1207.32 L1371.88 1207.32 L1372.47 1207.32 L1373.06 1207.32 L1373.64 1207.32 L1374.23 1207.32 L1374.82 1207.32 L1375.4 1207.32 L1375.99 1207.32 L1376.58 1207.32 L1377.16 1207.32 L1377.75 1207.32 L1378.34 1207.32 L1378.92 1207.32 L1379.51 1207.32 L1380.09 1207.32 L1380.68 1207.32 L1381.27 1207.32 L1381.85 1207.32 L1382.44 1207.32 L1383.03 1207.32 L1383.61 1207.32 L1384.2 1207.32 L1384.79 1207.32 L1385.37 1207.32 L1385.96 1207.32 L1386.55 1207.32 L1387.13 1207.32 L1387.72 1207.32 L1388.3 1207.32 L1388.89 1207.32 L1389.48 1207.32 L1390.06 1207.32 L1390.65 1207.32 L1391.24 1207.32 L1391.82 1207.32 L1392.41 1207.32 L1393 1207.32 L1393.58 1207.32 L1394.17 1207.32 L1394.75 1207.32 L1395.34 1207.32 L1395.93 1207.32 L1396.51 1207.32 L1397.1 1207.32 L1397.69 1207.32 L1398.27 1207.32 L1398.86 1207.32 L1399.45 1207.32 L1400.03 1207.32 L1400.62 1207.32 L1401.21 1207.32 L1401.79 1207.32 L1402.38 1207.32 L1402.96 1207.32 L1403.55 1207.32 L1404.14 1207.32 L1404.72 1207.32 L1405.31 1207.32 L1405.9 1207.32 L1406.48 1207.32 L1407.07 1207.32 L1407.66 1207.32 L1408.24 1207.32 L1408.83 1207.32 L1409.42 1207.32 L1410 1207.32 L1410.59 1207.32 L1411.17 1207.32 L1411.76 1207.32 L1412.35 1207.32 L1412.93 1207.32 L1413.52 1207.32 L1414.11 1207.32 L1414.69 1207.32 L1415.28 1207.32 L1415.87 1207.32 L1416.45 1207.32 L1417.04 1207.32 L1417.63 1207.32 L1418.21 1207.32 L1418.8 1207.32 L1419.38 1207.32 L1419.97 1207.32 L1420.56 1207.32 L1421.14 1207.32 L1421.73 1207.32 L1422.32 1207.32 L1422.9 1207.32 L1423.49 1207.32 L1424.08 1207.32 L1424.66 1207.32 L1425.25 1207.32 L1425.83 1207.32 L1426.42 1207.32 L1427.01 1207.32 L1427.59 1207.32 L1428.18 1207.32 L1428.77 1207.32 L1429.35 1207.32 L1429.94 1207.32 L1430.53 1207.32 L1431.11 1207.32 L1431.7 1207.32 L1432.29 1207.32 L1432.87 1207.32 L1433.46 1207.32 L1434.04 1207.32 L1434.63 1207.32 L1435.22 1207.32 L1435.8 1207.32 L1436.39 1207.32 L1436.98 1207.32 L1437.56 1207.32 L1438.15 1207.32 L1438.74 1207.32 L1439.32 1207.32 L1439.91 1207.32 L1440.5 1207.32 L1441.08 1207.32 L1441.67 1207.32 L1442.25 1207.32 L1442.84 1207.32 L1443.43 1207.32 L1444.01 1207.32 L1444.6 1207.32 L1445.19 1207.32 L1445.77 1207.32 L1446.36 1207.32 L1446.95 1207.32 L1447.53 1207.32 L1448.12 1207.32 L1448.7 1207.32 L1449.29 1207.32 L1449.88 1207.32 L1450.46 1207.32 L1451.05 1207.32 L1451.64 1207.32 L1452.22 1207.32 L1452.81 1207.32 L1453.4 1207.32 L1453.98 1207.32 L1454.57 1207.32 L1455.16 1207.32 L1455.74 1207.32 L1456.33 1207.32 L1456.91 1207.32 L1457.5 1207.32 L1458.09 1207.32 L1458.67 1207.32 L1459.26 1207.32 L1459.85 1207.32 L1460.43 1207.32 L1461.02 1207.32 L1461.61 1207.32 L1462.19 1207.32 L1462.78 1207.32 L1463.37 1207.32 L1463.95 1207.32 L1464.54 1207.32 L1465.12 1207.32 L1465.71 1207.32 L1466.3 1207.32 L1466.88 1207.32 L1467.47 1207.32 L1468.06 1207.32 L1468.64 1207.32 L1469.23 1207.32 L1469.82 1207.32 L1470.4 1207.32 L1470.99 1207.32 L1471.57 1207.32 L1472.16 1207.32 L1472.75 1207.32 L1473.33 1207.32 L1473.92 1207.32 L1474.51 1207.32 L1475.09 1207.32 L1475.68 1207.32 L1476.27 1207.32 L1476.85 1207.32 L1477.44 1207.32 L1478.03 1207.32 L1478.61 1207.32 L1479.2 1207.32 L1479.78 1207.32 L1480.37 1207.32 L1480.96 1207.32 L1481.54 1207.32 L1482.13 1207.32 L1482.72 1207.32 L1483.3 1207.32 L1483.89 1207.32 L1484.48 1207.32 L1485.06 1207.32 L1485.65 1207.32 L1486.24 1207.32 L1486.82 1207.32 L1487.41 1207.32 L1487.99 1207.32 L1488.58 1207.32 L1489.17 1207.32 L1489.75 1207.32 L1490.34 1207.32 L1490.93 1207.32 L1491.51 1207.32 L1492.1 1207.32 L1492.69 1207.32 L1493.27 1207.32 L1493.86 1207.32 L1494.45 1207.32 L1495.03 1207.32 L1495.62 1207.32 L1496.2 1207.32 L1496.79 1207.32 L1497.38 1207.32 L1497.96 1207.32 L1498.55 1207.32 L1499.14 1207.32 L1499.72 1207.32 L1500.31 1207.32 L1500.9 1207.32 L1501.48 1207.32 L1502.07 1207.32 L1502.65 1207.32 L1503.24 1207.32 L1503.83 1207.32 L1504.41 1207.32 L1505 1207.32 L1505.59 1207.32 L1506.17 1207.32 L1506.76 1207.32 L1507.35 1207.32 L1507.93 1207.32 L1508.52 1207.32 L1509.11 1207.32 L1509.69 1207.32 L1510.28 1207.32 L1510.86 1207.32 L1511.45 1207.32 L1512.04 1207.32 L1512.62 1207.32 L1513.21 1207.32 L1513.8 1207.32 L1514.38 1207.32 L1514.97 1207.32 L1515.56 1207.32 L1516.14 1207.32 L1516.73 1207.32 L1517.32 1207.32 L1517.9 1207.32 L1518.49 1207.32 L1519.07 1207.32 L1519.66 1207.32 L1520.25 1207.32 L1520.83 1207.32 L1521.42 1207.32 L1522.01 1207.32 L1522.59 1207.32 L1523.18 1207.32 L1523.77 1207.32 L1524.35 1207.32 L1524.94 1207.32 L1525.52 1207.32 L1526.11 1207.32 L1526.7 1207.32 L1527.28 1207.32 L1527.87 1207.32 L1528.46 1207.32 L1529.04 1207.32 L1529.63 1207.32 L1530.22 1207.32 L1530.8 1207.32 L1531.39 1207.32 L1531.98 1207.32 L1532.56 1207.32 L1533.15 1207.32 L1533.73 1207.32 L1534.32 1207.32 L1534.91 1207.32 L1535.49 1207.32 L1536.08 1207.32 L1536.67 1207.32 L1537.25 1207.32 L1537.84 1207.32 L1538.43 1207.32 L1539.01 1207.32 L1539.6 1207.32 L1540.19 1207.32 L1540.77 1207.32 L1541.36 1207.32 L1541.94 1207.32 L1542.53 1207.32 L1543.12 1207.32 L1543.7 1207.32 L1544.29 1207.32 L1544.88 1207.32 L1545.46 1207.32 L1546.05 1207.32 L1546.64 1207.32 L1547.22 1207.32 L1547.81 1207.32 L1548.4 1207.32 L1548.98 1207.32 L1549.57 1207.32 L1550.15 1207.32 L1550.74 1207.32 L1551.33 1207.32 L1551.91 1207.32 L1552.5 1207.32 L1553.09 1207.32 L1553.67 1207.32 L1554.26 1207.32 L1554.85 1207.32 L1555.43 1207.32 L1556.02 1207.32 L1556.6 1207.32 L1557.19 1207.32 L1557.78 1207.32 L1558.36 1207.32 L1558.95 1207.32 L1559.54 1207.32 L1560.12 1207.32 L1560.71 1207.32 L1561.3 1207.32 L1561.88 1207.32 L1562.47 1207.32 L1563.06 1207.32 L1563.64 1207.32 L1564.23 1207.32 L1564.81 1207.32 L1565.4 1207.32 L1565.99 1207.32 L1566.57 1207.32 L1567.16 1207.32 L1567.75 1207.32 L1568.33 1207.32 L1568.92 1207.32 L1569.51 1207.32 L1570.09 1207.32 L1570.68 1207.32 L1571.27 1207.32 L1571.85 1207.32 L1572.44 1207.32 L1573.02 1207.32 L1573.61 1207.32 L1574.2 1207.32 L1574.78 1207.32 L1575.37 1207.32 L1575.96 1207.32 L1576.54 1207.32 L1577.13 1207.32 L1577.72 1207.32 L1578.3 1207.32 L1578.89 1207.32 L1579.47 1207.32 L1580.06 1207.32 L1580.65 1207.32 L1581.23 1207.32 L1581.82 1207.32 L1582.41 1207.32 L1582.99 1207.32 L1583.58 1207.32 L1584.17 1207.32 L1584.75 1207.32 L1585.34 1207.32 L1585.93 1207.32 L1586.51 1207.32 L1587.1 1207.32 L1587.68 1207.32 L1588.27 1207.32 L1588.86 1207.32 L1589.44 1207.32 L1590.03 1207.32 L1590.62 1207.32 L1591.2 1207.32 L1591.79 1207.32 L1592.38 1207.32 L1592.96 1207.32 L1593.55 1207.32 L1594.14 1207.32 L1594.72 1207.32 L1595.31 1207.32 L1595.89 1207.32 L1596.48 1207.32 L1597.07 1207.32 L1597.65 1207.32 L1598.24 1207.32 L1598.83 1207.32 L1599.41 1207.32 L1600 1207.32 L1600.59 1207.32 L1601.17 1207.32 L1601.76 1207.32 L1602.34 1207.32 L1602.93 1207.32 L1603.52 1207.32 L1604.1 1207.32 L1604.69 1207.32 L1605.28 1207.32 L1605.86 1207.32 L1606.45 1207.32 L1607.04 1207.32 L1607.62 1207.32 L1608.21 1207.32 L1608.8 1207.32 L1609.38 1207.32 L1609.97 1207.32 L1610.55 1207.32 L1611.14 1207.32 L1611.73 1207.32 L1612.31 1207.32 L1612.9 1207.32 L1613.49 1207.32 L1614.07 1207.32 L1614.66 1207.32 L1615.25 1207.32 L1615.83 1207.32 L1616.42 1207.32 L1617.01 1207.32 L1617.59 1207.32 L1618.18 1207.32 L1618.76 1207.32 L1619.35 1207.32 L1619.94 1207.32 L1620.52 1207.32 L1621.11 1207.32 L1621.7 1207.32 L1622.28 1207.32 L1622.87 1207.32 L1623.46 1207.32 L1624.04 1207.32 L1624.63 1207.32 L1625.22 1207.32 L1625.8 1207.32 L1626.39 1207.32 L1626.97 1207.32 L1627.56 1207.32 L1628.15 1207.32 L1628.73 1207.32 L1629.32 1207.32 L1629.91 1207.32 L1630.49 1207.32 L1631.08 1207.32 L1631.67 1207.32 L1632.25 1207.32 L1632.84 1207.32 L1633.42 1207.32 L1634.01 1207.32 L1634.6 1207.32 L1635.18 1207.32 L1635.77 1207.32 L1636.36 1207.32 L1636.94 1207.32 L1637.53 1207.32 L1638.12 1207.32 L1638.7 1207.32 L1639.29 1207.32 L1639.88 1207.32 L1640.46 1207.32 L1641.05 1207.32 L1641.63 1207.32 L1642.22 1207.32 L1642.81 1207.32 L1643.39 1207.32 L1643.98 1207.32 L1644.57 1207.32 L1645.15 1207.32 L1645.74 1207.32 L1646.33 1207.32 L1646.91 1207.32 L1647.5 1207.32 L1648.09 1207.32 L1648.67 1207.32 L1649.26 1207.32 L1649.84 1207.32 L1650.43 1207.32 L1651.02 1207.32 L1651.6 1207.32 L1652.19 1207.32 L1652.78 1207.32 L1653.36 1207.32 L1653.95 1207.32 L1654.54 1207.32 L1655.12 1207.32 L1655.71 1207.32 L1656.29 1207.32 L1656.88 1207.32 L1657.47 1207.32 L1658.05 1207.32 L1658.64 1207.32 L1659.23 1207.32 L1659.81 1207.32 L1660.4 1207.32 L1660.99 1207.32 L1661.57 1207.32 L1662.16 1207.32 L1662.75 1207.32 L1663.33 1207.32 L1663.92 1207.32 L1664.5 1207.32 L1665.09 1207.32 L1665.68 1207.32 L1666.26 1207.32 L1666.85 1207.32 L1667.44 1207.32 L1668.02 1207.32 L1668.61 1207.32 L1669.2 1207.32 L1669.78 1207.32 L1670.37 1207.32 L1670.96 1207.32 L1671.54 1207.32 L1672.13 1207.32 L1672.71 1207.32 L1673.3 1207.32 L1673.89 1207.32 L1674.47 1207.32 L1675.06 1207.32 L1675.65 1207.32 L1676.23 1207.32 L1676.82 1207.32 L1677.41 1207.32 L1677.99 1207.32 L1678.58 1207.32 L1679.17 1207.32 L1679.75 1207.32 L1680.34 1207.32 L1680.92 1207.32 L1681.51 1207.32 L1682.1 1207.32 L1682.68 1207.32 L1683.27 1207.32 L1683.86 1207.32 L1684.44 1207.32 L1685.03 1207.32 L1685.62 1207.32 L1686.2 1207.32 L1686.79 1207.32 L1687.37 1207.32 L1687.96 1207.32 L1688.55 1207.32 L1689.13 1207.32 L1689.72 1207.32 L1690.31 1207.32 L1690.89 1207.32 L1691.48 1207.32 L1692.07 1207.32 L1692.65 1207.32 L1693.24 1207.32 L1693.83 1207.32 L1694.41 1207.32 L1695 1207.32 L1695.58 1207.32 L1696.17 1207.32 L1696.76 1207.32 L1697.34 1207.32 L1697.93 1207.32 L1698.52 1207.32 L1699.1 1207.32 L1699.69 1207.32 L1700.28 1207.32 L1700.86 1207.32 L1701.45 1207.32 L1702.04 1207.32 L1702.62 1207.32 L1703.21 1207.32 L1703.79 1207.32 L1704.38 1207.32 L1704.97 1207.32 L1705.55 1207.32 L1706.14 1207.32 L1706.73 1207.32 L1707.31 1207.32 L1707.9 1207.32 L1708.49 1207.32 L1709.07 1207.32 L1709.66 1207.32 L1710.24 1207.32 L1710.83 1207.32 L1711.42 1207.32 L1712 1207.32 L1712.59 1207.32 L1713.18 1207.32 L1713.76 1207.32 L1714.35 1207.32 L1714.94 1207.32 L1715.52 1207.32 L1716.11 1207.32 L1716.7 1207.32 L1717.28 1207.32 L1717.87 1207.32 L1718.45 1207.32 L1719.04 1207.32 L1719.63 1207.32 L1720.21 1207.32 L1720.8 1207.32 L1721.39 1207.32 L1721.97 1207.32 L1722.56 1207.32 L1723.15 1207.32 L1723.73 1207.32 L1724.32 1207.32 L1724.91 1207.32 L1725.49 1207.32 L1726.08 1207.32 L1726.66 1207.32 L1727.25 1207.32 L1727.84 1207.32 L1728.42 1207.32 L1729.01 1207.32 L1729.6 1207.32 L1730.18 1207.32 L1730.77 1207.32 L1731.36 1207.32 L1731.94 1207.32 L1732.53 1207.32 L1733.11 1207.32 L1733.7 1207.32 L1734.29 1207.32 L1734.87 1207.32 L1735.46 1207.32 L1736.05 1207.32 L1736.63 1207.32 L1737.22 1207.32 L1737.81 1207.32 L1738.39 1207.32 L1738.98 1207.32 L1739.57 1207.32 L1740.15 1207.32 L1740.74 1207.32 L1741.32 1207.32 L1741.91 1207.32 L1742.5 1207.32 L1743.08 1207.32 L1743.67 1207.32 L1744.26 1207.32 L1744.84 1207.32 L1745.43 1207.32 L1746.02 1207.32 L1746.6 1207.32 L1747.19 1207.32 L1747.78 1207.32 L1748.36 1207.32 L1748.95 1207.32 L1749.53 1207.32 L1750.12 1207.32 L1750.71 1207.32 L1751.29 1207.32 L1751.88 1207.32 L1752.47 1207.32 L1753.05 1207.32 L1753.64 1207.32 L1754.23 1207.32 L1754.81 1207.32 L1755.4 1207.32 L1755.99 1207.32 L1756.57 1207.32 L1757.16 1207.32 L1757.74 1207.32 L1758.33 1207.32 L1758.92 1207.32 L1759.5 1207.32 L1760.09 1207.32 L1760.68 1207.32 L1761.26 1207.32 L1761.85 1207.32 L1762.44 1207.32 L1763.02 1207.32 L1763.61 1207.32 L1764.19 1207.32 L1764.78 1207.32 L1765.37 1207.32 L1765.95 1207.32 L1766.54 1207.32 L1767.13 1207.32 L1767.71 1207.32 L1768.3 1207.32 L1768.89 1207.32 L1769.47 1207.32 L1770.06 1207.32 L1770.65 1207.32 L1771.23 1207.32 L1771.82 1207.32 L1772.4 1207.32 L1772.99 1207.32 L1773.58 1207.32 L1774.16 1207.32 L1774.75 1207.32 L1775.34 1207.32 L1775.92 1207.32 L1776.51 1207.32 L1777.1 1207.32 L1777.68 1207.32 L1778.27 1207.32 L1778.86 1207.32 L1779.44 1207.32 L1780.03 1207.32 L1780.61 1207.32 L1781.2 1207.32 L1781.79 1207.32 L1782.37 1207.32 L1782.96 1207.32 L1783.55 1207.32 L1784.13 1207.32 L1784.72 1207.32 L1785.31 1207.32 L1785.89 1207.32 L1786.48 1207.32 L1787.06 1207.32 L1787.65 1207.32 L1788.24 1207.32 L1788.82 1207.32 L1789.41 1207.32 L1790 1207.32 L1790.58 1207.32 L1791.17 1207.32 L1791.76 1207.32 L1792.34 1207.32 L1792.93 1207.32 L1793.52 1207.32 L1794.1 1207.32 L1794.69 1207.32 L1795.27 1207.32 L1795.86 1207.32 L1796.45 1207.32 L1797.03 1207.32 L1797.62 1207.32 L1798.21 1207.32 L1798.79 1207.32 L1799.38 1207.32 L1799.97 1207.32 L1800.55 1207.32 L1801.14 1207.32 L1801.73 1207.32 L1802.31 1207.32 L1802.9 1207.32 L1803.48 1207.32 L1804.07 1207.32 L1804.66 1207.32 L1805.24 1207.32 L1805.83 1207.32 L1806.42 1207.32 L1807 1207.32 L1807.59 1207.32 L1808.18 1207.32 L1808.76 1207.32 L1809.35 1207.32 L1809.94 1207.32 L1810.52 1207.32 L1811.11 1207.32 L1811.69 1207.32 L1812.28 1207.32 L1812.87 1207.32 L1813.45 1207.32 L1814.04 1207.32 L1814.63 1207.32 L1815.21 1207.32 L1815.8 1207.32 L1816.39 1207.32 L1816.97 1207.32 L1817.56 1207.32 L1818.14 1207.32 L1818.73 1207.32 L1819.32 1207.32 L1819.9 1207.32 L1820.49 1207.32 L1821.08 1207.32 L1821.66 1207.32 L1822.25 1207.32 L1822.84 1207.32 L1823.42 1207.32 L1824.01 1207.32 L1824.6 1207.32 L1825.18 1207.32 L1825.77 1207.32 L1826.35 1207.32 L1826.94 1207.32 L1827.53 1207.32 L1828.11 1207.32 L1828.7 1207.32 L1829.29 1207.32 L1829.87 1207.32 L1830.46 1207.32 L1831.05 1207.32 L1831.63 1207.32 L1832.22 1207.32 L1832.81 1207.32 L1833.39 1207.32 L1833.98 1207.32 L1834.56 1207.32 L1835.15 1207.32 L1835.74 1207.32 L1836.32 1207.32 L1836.91 1207.32 L1837.5 1207.32 L1838.08 1207.32 L1838.67 1207.32 L1839.26 1207.32 L1839.84 1207.32 L1840.43 1207.32 L1841.01 1207.32 L1841.6 1207.32 L1842.19 1207.32 L1842.77 1207.32 L1843.36 1207.32 L1843.95 1207.32 L1844.53 1207.32 L1845.12 1207.32 L1845.71 1207.32 L1846.29 1207.32 L1846.88 1207.32 L1847.47 1207.32 L1848.05 1207.32 L1848.64 1207.32 L1849.22 1207.32 L1849.81 1207.32 L1850.4 1207.32 L1850.98 1207.32 L1851.57 1207.32 L1852.16 1207.32 L1852.74 1207.32 L1853.33 1207.32 L1853.92 1207.32 L1854.5 1207.32 L1855.09 1207.32 L1855.68 1207.32 L1856.26 1207.32 L1856.85 1207.32 L1857.43 1207.32 L1858.02 1207.32 L1858.61 1207.32 L1859.19 1207.32 L1859.78 1207.32 L1860.37 1207.32 L1860.95 1207.32 L1861.54 1207.32 L1862.13 1207.32 L1862.71 1207.32 L1863.3 1207.32 L1863.88 1207.32 L1864.47 1207.32 L1865.06 1207.32 L1865.64 1207.32 L1866.23 1207.32 L1866.82 1207.32 L1867.4 1207.32 L1867.99 1207.32 L1868.58 1207.32 L1869.16 1207.32 L1869.75 1207.32 L1870.34 1207.32 L1870.92 1207.32 L1871.51 1207.32 L1872.09 1207.32 L1872.68 1207.32 L1873.27 1207.32 L1873.85 1207.32 L1874.44 1207.32 L1875.03 1207.32 L1875.61 1207.32 L1876.2 1207.32 L1876.79 1207.32 L1877.37 1207.32 L1877.96 1207.32 L1878.55 1207.32 L1879.13 1207.32 L1879.72 1207.32 L1880.3 1207.32 L1880.89 1207.32 L1881.48 1207.32 L1882.06 1207.32 L1882.65 1207.32 L1883.24 1207.32 L1883.82 1207.32 L1884.41 1207.32 L1885 1207.32 L1885.58 1207.32 L1886.17 1207.32 L1886.76 1207.32 L1887.34 1207.32 L1887.93 1207.32 L1888.51 1207.32 L1889.1 1207.32 L1889.69 1207.32 L1890.27 1207.32 L1890.86 1207.32 L1891.45 1207.32 L1892.03 1207.32 L1892.62 1207.32 L1893.21 1207.32 L1893.79 1207.32 L1894.38 1207.32 L1894.96 1207.32 L1895.55 1207.32 L1896.14 1207.32 L1896.72 1207.32 L1897.31 1207.32 L1897.9 1207.32 L1898.48 1207.32 L1899.07 1207.32 L1899.66 1207.32 L1900.24 1207.32 L1900.83 1207.32 L1901.42 1207.32 L1902 1207.32 L1902.59 1207.32 L1903.17 1207.32 L1903.76 1207.32 L1904.35 1207.32 L1904.93 1207.32 L1905.52 1207.32 L1906.11 1207.32 L1906.69 1207.32 L1907.28 1207.32 L1907.87 1207.32 L1908.45 1207.32 L1909.04 1207.32 L1909.63 1207.32 L1910.21 1207.32 L1910.8 1207.32 L1911.38 1207.32 L1911.97 1207.32 L1912.56 1207.32 L1913.14 1207.32 L1913.73 1207.32 L1914.32 1207.32 L1914.9 1207.32 L1915.49 1207.32 L1916.08 1207.32 L1916.66 1207.32 L1917.25 1207.32 L1917.83 1207.32 L1918.42 1207.32 L1919.01 1207.32 L1919.59 1207.32 L1920.18 1207.32 L1920.77 1207.32 L1921.35 1207.32 L1921.94 1207.32 L1922.53 1207.32 L1923.11 1207.32 L1923.7 1207.32 L1924.29 1207.32 L1924.87 1207.32 L1925.46 1207.32 L1926.04 1207.32 L1926.63 1207.32 L1927.22 1207.32 L1927.8 1207.32 L1928.39 1207.32 L1928.98 1207.32 L1929.56 1207.32 L1930.15 1207.32 L1930.74 1207.32 L1931.32 1207.32 L1931.91 1207.32 L1932.5 1207.32 L1933.08 1207.32 L1933.67 1207.32 L1934.25 1207.32 L1934.84 1207.32 L1935.43 1207.32 L1936.01 1207.32 L1936.6 1207.32 L1937.19 1207.32 L1937.77 1207.32 L1938.36 1207.32 L1938.95 1207.32 L1939.53 1207.32 L1940.12 1207.32 L1940.71 1207.32 L1941.29 1207.32 L1941.88 1207.32 L1942.46 1207.32 L1943.05 1207.32 L1943.64 1207.32 L1944.22 1207.32 L1944.81 1207.32 L1945.4 1207.32 L1945.98 1207.32 L1946.57 1207.32 L1947.16 1207.32 L1947.74 1207.32 L1948.33 1207.32 L1948.91 1207.32 L1949.5 1207.32 L1950.09 1207.32 L1950.67 1207.32 L1951.26 1207.32 L1951.85 1207.32 L1952.43 1207.32 L1953.02 1207.32 L1953.61 1207.32 L1954.19 1207.32 L1954.78 1207.32 L1955.37 1207.32 L1955.95 1207.32 L1956.54 1207.32 L1957.12 1207.32 L1957.71 1207.32 L1958.3 1207.32 L1958.88 1207.32 L1959.47 1207.32 L1960.06 1207.32 L1960.64 1207.32 L1961.23 1207.32 L1961.82 1207.32 L1962.4 1207.32 L1962.99 1207.32 L1963.58 1207.32 L1964.16 1207.32 L1964.75 1207.32 L1965.33 1207.32 L1965.92 1207.32 L1966.51 1207.32 L1967.09 1207.32 L1967.68 1207.32 L1968.27 1207.32 L1968.85 1207.32 L1969.44 1207.32 L1970.03 1207.32 L1970.61 1207.32 L1971.2 1207.32 L1971.78 1207.32 L1972.37 1207.32 L1972.96 1207.32 L1973.54 1207.32 L1974.13 1207.32 L1974.72 1207.32 L1975.3 1207.32 L1975.89 1207.32 L1976.48 1207.32 L1977.06 1207.32 L1977.65 1207.32 L1978.24 1207.32 L1978.82 1207.32 L1979.41 1207.32 L1979.99 1207.32 L1980.58 1207.32 L1981.17 1207.32 L1981.75 1207.32 L1982.34 1207.32 L1982.93 1207.32 L1983.51 1207.32 L1984.1 1207.32 L1984.69 1207.32 L1985.27 1207.32 L1985.86 1207.32 L1986.45 1207.32 L1987.03 1207.32 L1987.62 1207.32 L1988.2 1207.32 L1988.79 1207.32 L1989.38 1207.32 L1989.96 1207.32 L1990.55 1207.32 L1991.14 1207.32 L1991.72 1207.32 L1992.31 1207.32 L1992.9 1207.32 L1993.48 1207.32 L1994.07 1207.32 L1994.65 1207.32 L1995.24 1207.32 L1995.83 1207.32 L1996.41 1207.32 L1997 1207.32 L1997.59 1207.32 L1998.17 1207.32 L1998.76 1207.32 L1999.35 1207.32 L1999.93 1207.32 L2000.52 1207.32 L2001.11 1207.32 L2001.69 1207.32 L2002.28 1207.32 L2002.86 1207.32 L2003.45 1207.32 L2004.04 1207.32 L2004.62 1207.32 L2005.21 1207.32 L2005.8 1207.32 L2006.38 1207.32 L2006.97 1207.32 L2007.56 1207.32 L2008.14 1207.32 L2008.73 1207.32 L2009.32 1207.32 L2009.9 1207.32 L2010.49 1207.32 L2011.07 1207.32 L2011.66 1207.32 L2012.25 1207.32 L2012.83 1207.32 L2013.42 1207.32 L2014.01 1207.32 L2014.59 1207.32 L2015.18 1207.32 L2015.77 1207.32 L2016.35 1207.32 L2016.94 1207.32 L2017.53 1207.32 L2018.11 1207.32 L2018.7 1207.32 L2019.28 1207.32 L2019.87 1207.32 L2020.46 1207.32 L2021.04 1207.32 L2021.63 1207.32 L2022.22 1207.32 L2022.8 1207.32 L2023.39 1207.32 L2023.98 1207.32 L2024.56 1207.32 L2025.15 1207.32 L2025.73 1207.32 L2026.32 1207.32 L2026.91 1207.32 L2027.49 1207.32 L2028.08 1207.32 L2028.67 1207.32 L2029.25 1207.32 L2029.84 1207.32 L2030.43 1207.32 L2031.01 1207.32 L2031.6 1207.32 L2032.19 1207.32 L2032.77 1207.32 L2033.36 1207.32 L2033.94 1207.32 L2034.53 1207.32 L2035.12 1207.32 L2035.7 1207.32 L2036.29 1207.32 L2036.88 1207.32 L2037.46 1207.32 L2038.05 1207.32 L2038.64 1207.32 L2039.22 1207.32 L2039.81 1207.32 L2040.4 1207.32 L2040.98 1207.32 L2041.57 1207.32 L2042.15 1207.32 L2042.74 1207.32 L2043.33 1207.32 L2043.91 1207.32 L2044.5 1207.32 L2045.09 1207.32 L2045.67 1207.32 L2046.26 1207.32 L2046.85 1207.32 L2047.43 1207.32 L2048.02 1207.32 L2048.6 1207.32 L2049.19 1207.32 L2049.78 1207.32 L2050.36 1207.32 L2050.95 1207.32 L2051.54 1207.32 L2052.12 1207.32 L2052.71 1207.32 L2053.3 1207.32 L2053.88 1207.32 L2054.47 1207.32 L2055.06 1207.32 L2055.64 1207.32 L2056.23 1207.32 L2056.81 1207.32 L2057.4 1207.32 L2057.99 1207.32 L2058.57 1207.32 L2059.16 1207.32 L2059.75 1207.32 L2060.33 1207.32 L2060.92 1207.32 L2061.51 1207.32 L2062.09 1207.32 L2062.68 1207.32 L2063.27 1207.32 L2063.85 1207.32 L2064.44 1207.32 L2065.02 1207.32 L2065.61 1207.32 L2066.2 1207.32 L2066.78 1207.32 L2067.37 1207.32 L2067.96 1207.32 L2068.54 1207.32 L2069.13 1207.32 L2069.72 1207.32 L2070.3 1207.32 L2070.89 1207.32 L2071.48 1207.32 L2072.06 1207.32 L2072.65 1207.32 L2073.23 1207.32 L2073.82 1207.32 L2074.41 1207.32 L2074.99 1207.32 L2075.58 1207.32 L2076.17 1207.32 L2076.75 1207.32 L2077.34 1207.32 L2077.93 1207.32 L2078.51 1207.32 L2079.1 1207.32 L2079.68 1207.32 L2080.27 1207.32 L2080.86 1207.32 L2081.44 1207.32 L2082.03 1207.32 L2082.62 1207.32 L2083.2 1207.32 L2083.79 1207.32 L2084.38 1207.32 L2084.96 1207.32 L2085.55 1207.32 L2086.14 1207.32 L2086.72 1207.32 L2087.31 1207.32 L2087.89 1207.32 L2088.48 1207.32 L2089.07 1207.32 L2089.65 1207.32 L2090.24 1207.32 L2090.83 1207.32 L2091.41 1207.32 L2092 1207.32 L2092.59 1207.32 L2093.17 1207.32 L2093.76 1207.32 L2094.35 1207.32 L2094.93 1207.32 L2095.52 1207.32 L2096.1 1207.32 L2096.69 1207.32 L2097.28 1207.32 L2097.86 1207.32 L2098.45 1207.32 L2099.04 1207.32 L2099.62 1207.32 L2100.21 1207.32 L2100.8 1207.32 L2101.38 1207.32 L2101.97 1207.32 L2102.55 1207.32 L2103.14 1207.32 L2103.73 1207.32 L2104.31 1207.32 L2104.9 1207.32 L2105.49 1207.32 L2106.07 1207.32 L2106.66 1207.32 L2107.25 1207.32 L2107.83 1207.32 L2108.42 1207.32 L2109.01 1207.32 L2109.59 1207.32 L2110.18 1207.32 L2110.76 1207.32 L2111.35 1207.32 L2111.94 1207.32 L2112.52 1207.32 L2113.11 1207.32 L2113.7 1207.32 L2114.28 1207.32 L2114.87 1207.32 L2115.46 1207.32 L2116.04 1207.32 L2116.63 1207.32 L2117.22 1207.32 L2117.8 1207.32 L2118.39 1207.32 L2118.97 1207.32 L2119.56 1207.32 L2120.15 1207.32 L2120.73 1207.32 L2121.32 1207.32 L2121.91 1207.32 L2122.49 1207.32 L2123.08 1207.32 L2123.67 1207.32 L2124.25 1207.32 L2124.84 1207.32 L2125.42 1207.32 L2126.01 1207.32 L2126.6 1207.32 L2127.18 1207.32 L2127.77 1207.32 L2128.36 1207.32 L2128.94 1207.32 L2129.53 1207.32 L2130.12 1207.32 L2130.7 1207.32 L2131.29 1207.32 L2131.88 1207.32 L2132.46 1207.32 L2133.05 1207.32 L2133.63 1207.32 L2134.22 1207.32 L2134.81 1207.32 L2135.39 1207.32 L2135.98 1207.32 L2136.57 1207.32 L2137.15 1207.32 L2137.74 1207.32 L2138.33 1207.32 L2138.91 1207.32 L2139.5 1207.32 L2140.09 1207.32 L2140.67 1207.32 L2141.26 1207.32 L2141.84 1207.32 L2142.43 1207.32 L2143.02 1207.32 L2143.6 1207.32 L2144.19 1207.32 L2144.78 1207.32 L2145.36 1207.32 L2145.95 1207.32 L2146.54 1207.32 L2147.12 1207.32 L2147.71 1207.32 L2148.3 1207.32 L2148.88 1207.32 L2149.47 1207.32 L2150.05 1207.32 L2150.64 1207.32 L2151.23 1207.32 L2151.81 1207.32 L2152.4 1207.32 L2152.99 1207.32 L2153.57 1207.32 L2154.16 1207.32 L2154.75 1207.32 L2155.33 1207.32 L2155.92 1207.32 L2156.5 1207.32 L2157.09 1207.32 L2157.68 1207.32 L2158.26 1207.32 L2158.26 1206.54 L2157.68 1206.54 L2157.09 1206.54 L2156.5 1206.54 L2155.92 1206.54 L2155.33 1206.54 L2154.75 1206.54 L2154.16 1206.54 L2153.57 1206.54 L2152.99 1206.54 L2152.4 1206.54 L2151.81 1206.54 L2151.23 1206.54 L2150.64 1206.54 L2150.05 1206.54 L2149.47 1206.54 L2148.88 1206.54 L2148.3 1206.54 L2147.71 1206.54 L2147.12 1206.54 L2146.54 1206.54 L2145.95 1206.54 L2145.36 1206.54 L2144.78 1206.54 L2144.19 1206.54 L2143.6 1206.54 L2143.02 1206.54 L2142.43 1206.54 L2141.84 1206.54 L2141.26 1206.54 L2140.67 1206.54 L2140.09 1206.54 L2139.5 1206.54 L2138.91 1206.54 L2138.33 1206.54 L2137.74 1206.54 L2137.15 1206.54 L2136.57 1206.54 L2135.98 1206.54 L2135.39 1206.54 L2134.81 1206.54 L2134.22 1206.54 L2133.63 1206.54 L2133.05 1206.54 L2132.46 1206.54 L2131.88 1206.54 L2131.29 1206.54 L2130.7 1206.54 L2130.12 1206.54 L2129.53 1206.54 L2128.94 1206.54 L2128.36 1206.54 L2127.77 1206.54 L2127.18 1206.54 L2126.6 1206.54 L2126.01 1206.54 L2125.42 1206.54 L2124.84 1206.54 L2124.25 1206.54 L2123.67 1206.54 L2123.08 1206.54 L2122.49 1206.54 L2121.91 1206.54 L2121.32 1206.54 L2120.73 1206.54 L2120.15 1206.54 L2119.56 1206.54 L2118.97 1206.54 L2118.39 1206.54 L2117.8 1206.54 L2117.22 1206.54 L2116.63 1206.54 L2116.04 1206.54 L2115.46 1206.54 L2114.87 1206.54 L2114.28 1206.54 L2113.7 1206.54 L2113.11 1206.54 L2112.52 1206.54 L2111.94 1206.54 L2111.35 1206.54 L2110.76 1206.54 L2110.18 1206.54 L2109.59 1206.54 L2109.01 1206.54 L2108.42 1206.54 L2107.83 1206.54 L2107.25 1206.54 L2106.66 1206.54 L2106.07 1206.54 L2105.49 1206.54 L2104.9 1206.54 L2104.31 1206.54 L2103.73 1206.54 L2103.14 1206.54 L2102.55 1206.54 L2101.97 1206.54 L2101.38 1206.54 L2100.8 1206.54 L2100.21 1206.54 L2099.62 1206.54 L2099.04 1206.54 L2098.45 1206.54 L2097.86 1206.54 L2097.28 1206.54 L2096.69 1206.54 L2096.1 1206.54 L2095.52 1206.54 L2094.93 1206.54 L2094.35 1206.54 L2093.76 1206.54 L2093.17 1206.54 L2092.59 1206.54 L2092 1206.54 L2091.41 1206.54 L2090.83 1206.54 L2090.24 1206.54 L2089.65 1206.54 L2089.07 1206.54 L2088.48 1206.54 L2087.89 1206.54 L2087.31 1206.54 L2086.72 1206.54 L2086.14 1206.54 L2085.55 1206.54 L2084.96 1206.54 L2084.38 1206.54 L2083.79 1206.54 L2083.2 1206.54 L2082.62 1206.54 L2082.03 1206.54 L2081.44 1206.54 L2080.86 1206.54 L2080.27 1206.54 L2079.68 1206.54 L2079.1 1206.54 L2078.51 1206.54 L2077.93 1206.54 L2077.34 1206.54 L2076.75 1206.54 L2076.17 1206.54 L2075.58 1206.54 L2074.99 1206.54 L2074.41 1206.54 L2073.82 1206.54 L2073.23 1206.54 L2072.65 1206.54 L2072.06 1206.54 L2071.48 1206.54 L2070.89 1206.54 L2070.3 1206.54 L2069.72 1206.54 L2069.13 1206.54 L2068.54 1206.54 L2067.96 1206.54 L2067.37 1206.54 L2066.78 1206.54 L2066.2 1206.54 L2065.61 1206.54 L2065.02 1206.54 L2064.44 1206.54 L2063.85 1206.54 L2063.27 1206.54 L2062.68 1206.54 L2062.09 1206.54 L2061.51 1206.54 L2060.92 1206.54 L2060.33 1206.54 L2059.75 1206.54 L2059.16 1206.54 L2058.57 1206.54 L2057.99 1206.54 L2057.4 1206.54 L2056.81 1206.54 L2056.23 1206.54 L2055.64 1206.54 L2055.06 1206.54 L2054.47 1206.54 L2053.88 1206.54 L2053.3 1206.54 L2052.71 1206.54 L2052.12 1206.54 L2051.54 1206.54 L2050.95 1206.54 L2050.36 1206.54 L2049.78 1206.54 L2049.19 1206.54 L2048.6 1206.54 L2048.02 1206.54 L2047.43 1206.54 L2046.85 1206.54 L2046.26 1206.54 L2045.67 1206.54 L2045.09 1206.54 L2044.5 1206.54 L2043.91 1206.54 L2043.33 1206.54 L2042.74 1206.54 L2042.15 1206.54 L2041.57 1206.54 L2040.98 1206.54 L2040.4 1206.54 L2039.81 1206.54 L2039.22 1206.54 L2038.64 1206.54 L2038.05 1206.54 L2037.46 1206.54 L2036.88 1206.54 L2036.29 1206.54 L2035.7 1206.54 L2035.12 1206.54 L2034.53 1206.54 L2033.94 1206.54 L2033.36 1206.54 L2032.77 1206.54 L2032.19 1206.54 L2031.6 1206.54 L2031.01 1206.54 L2030.43 1206.54 L2029.84 1206.54 L2029.25 1206.54 L2028.67 1206.54 L2028.08 1206.54 L2027.49 1206.54 L2026.91 1206.54 L2026.32 1206.54 L2025.73 1206.54 L2025.15 1206.54 L2024.56 1206.54 L2023.98 1206.54 L2023.39 1206.54 L2022.8 1206.54 L2022.22 1206.54 L2021.63 1206.54 L2021.04 1206.54 L2020.46 1206.54 L2019.87 1206.54 L2019.28 1206.54 L2018.7 1206.54 L2018.11 1206.54 L2017.53 1206.54 L2016.94 1206.54 L2016.35 1206.54 L2015.77 1206.54 L2015.18 1206.54 L2014.59 1206.54 L2014.01 1206.54 L2013.42 1206.54 L2012.83 1206.54 L2012.25 1206.54 L2011.66 1206.54 L2011.07 1206.54 L2010.49 1206.54 L2009.9 1206.54 L2009.32 1206.54 L2008.73 1206.54 L2008.14 1206.54 L2007.56 1206.54 L2006.97 1206.54 L2006.38 1206.54 L2005.8 1206.54 L2005.21 1206.54 L2004.62 1206.54 L2004.04 1206.54 L2003.45 1206.54 L2002.86 1206.54 L2002.28 1206.54 L2001.69 1206.54 L2001.11 1206.54 L2000.52 1206.54 L1999.93 1206.54 L1999.35 1206.54 L1998.76 1206.54 L1998.17 1206.54 L1997.59 1206.54 L1997 1206.54 L1996.41 1206.54 L1995.83 1206.54 L1995.24 1206.54 L1994.65 1206.54 L1994.07 1206.54 L1993.48 1206.54 L1992.9 1206.54 L1992.31 1206.54 L1991.72 1206.54 L1991.14 1206.54 L1990.55 1206.54 L1989.96 1206.54 L1989.38 1206.54 L1988.79 1206.54 L1988.2 1206.54 L1987.62 1206.54 L1987.03 1206.54 L1986.45 1206.54 L1985.86 1206.54 L1985.27 1206.54 L1984.69 1206.54 L1984.1 1206.54 L1983.51 1206.54 L1982.93 1206.54 L1982.34 1206.54 L1981.75 1206.54 L1981.17 1206.54 L1980.58 1206.54 L1979.99 1206.54 L1979.41 1206.54 L1978.82 1206.54 L1978.24 1206.54 L1977.65 1206.54 L1977.06 1206.54 L1976.48 1206.54 L1975.89 1206.54 L1975.3 1206.54 L1974.72 1206.54 L1974.13 1206.54 L1973.54 1206.54 L1972.96 1206.54 L1972.37 1206.54 L1971.78 1206.54 L1971.2 1206.54 L1970.61 1206.54 L1970.03 1206.54 L1969.44 1206.54 L1968.85 1206.54 L1968.27 1206.54 L1967.68 1206.54 L1967.09 1206.54 L1966.51 1206.54 L1965.92 1206.54 L1965.33 1206.54 L1964.75 1206.54 L1964.16 1206.54 L1963.58 1206.54 L1962.99 1206.54 L1962.4 1206.54 L1961.82 1206.54 L1961.23 1206.54 L1960.64 1206.54 L1960.06 1206.54 L1959.47 1206.54 L1958.88 1206.54 L1958.3 1206.54 L1957.71 1206.54 L1957.12 1206.54 L1956.54 1206.54 L1955.95 1206.54 L1955.37 1206.54 L1954.78 1206.54 L1954.19 1206.54 L1953.61 1206.54 L1953.02 1206.54 L1952.43 1206.54 L1951.85 1206.54 L1951.26 1206.54 L1950.67 1206.54 L1950.09 1206.54 L1949.5 1206.54 L1948.91 1206.54 L1948.33 1206.54 L1947.74 1206.54 L1947.16 1206.54 L1946.57 1206.54 L1945.98 1206.54 L1945.4 1206.54 L1944.81 1206.54 L1944.22 1206.54 L1943.64 1206.54 L1943.05 1206.54 L1942.46 1206.54 L1941.88 1206.54 L1941.29 1206.54 L1940.71 1206.54 L1940.12 1206.54 L1939.53 1206.54 L1938.95 1206.54 L1938.36 1206.54 L1937.77 1206.54 L1937.19 1206.54 L1936.6 1206.54 L1936.01 1206.54 L1935.43 1206.54 L1934.84 1206.54 L1934.25 1206.54 L1933.67 1206.54 L1933.08 1206.54 L1932.5 1206.54 L1931.91 1206.54 L1931.32 1206.54 L1930.74 1206.54 L1930.15 1206.54 L1929.56 1206.54 L1928.98 1206.54 L1928.39 1206.54 L1927.8 1206.54 L1927.22 1206.54 L1926.63 1206.54 L1926.04 1206.54 L1925.46 1206.54 L1924.87 1206.54 L1924.29 1206.54 L1923.7 1206.54 L1923.11 1206.54 L1922.53 1206.54 L1921.94 1206.54 L1921.35 1206.54 L1920.77 1206.54 L1920.18 1206.54 L1919.59 1206.54 L1919.01 1206.54 L1918.42 1206.54 L1917.83 1206.54 L1917.25 1206.54 L1916.66 1206.54 L1916.08 1206.54 L1915.49 1206.54 L1914.9 1206.54 L1914.32 1206.54 L1913.73 1206.54 L1913.14 1206.54 L1912.56 1206.54 L1911.97 1206.54 L1911.38 1206.54 L1910.8 1206.54 L1910.21 1206.54 L1909.63 1206.54 L1909.04 1206.54 L1908.45 1206.54 L1907.87 1206.54 L1907.28 1206.54 L1906.69 1206.54 L1906.11 1206.54 L1905.52 1206.54 L1904.93 1206.54 L1904.35 1206.54 L1903.76 1206.54 L1903.17 1206.54 L1902.59 1206.54 L1902 1206.54 L1901.42 1206.54 L1900.83 1206.54 L1900.24 1206.54 L1899.66 1206.54 L1899.07 1206.54 L1898.48 1206.54 L1897.9 1206.54 L1897.31 1206.54 L1896.72 1206.54 L1896.14 1206.54 L1895.55 1206.54 L1894.96 1206.54 L1894.38 1206.54 L1893.79 1206.54 L1893.21 1206.54 L1892.62 1206.54 L1892.03 1206.54 L1891.45 1206.54 L1890.86 1206.54 L1890.27 1206.54 L1889.69 1206.54 L1889.1 1206.54 L1888.51 1206.54 L1887.93 1206.54 L1887.34 1206.54 L1886.76 1206.54 L1886.17 1206.54 L1885.58 1206.54 L1885 1206.54 L1884.41 1206.54 L1883.82 1206.54 L1883.24 1206.54 L1882.65 1206.54 L1882.06 1206.54 L1881.48 1206.54 L1880.89 1206.54 L1880.3 1206.54 L1879.72 1206.54 L1879.13 1206.54 L1878.55 1206.54 L1877.96 1206.54 L1877.37 1206.54 L1876.79 1206.54 L1876.2 1206.54 L1875.61 1206.54 L1875.03 1206.54 L1874.44 1206.54 L1873.85 1206.54 L1873.27 1206.54 L1872.68 1206.54 L1872.09 1206.54 L1871.51 1206.54 L1870.92 1206.54 L1870.34 1206.54 L1869.75 1206.54 L1869.16 1206.54 L1868.58 1206.54 L1867.99 1206.54 L1867.4 1206.54 L1866.82 1206.54 L1866.23 1206.54 L1865.64 1206.54 L1865.06 1206.54 L1864.47 1206.54 L1863.88 1206.54 L1863.3 1206.54 L1862.71 1206.54 L1862.13 1206.54 L1861.54 1206.54 L1860.95 1206.54 L1860.37 1206.54 L1859.78 1206.54 L1859.19 1206.54 L1858.61 1206.54 L1858.02 1206.54 L1857.43 1206.54 L1856.85 1206.54 L1856.26 1206.54 L1855.68 1206.54 L1855.09 1206.54 L1854.5 1206.54 L1853.92 1206.54 L1853.33 1206.54 L1852.74 1206.54 L1852.16 1206.54 L1851.57 1206.54 L1850.98 1206.54 L1850.4 1206.54 L1849.81 1206.54 L1849.22 1206.54 L1848.64 1206.54 L1848.05 1206.54 L1847.47 1206.54 L1846.88 1206.54 L1846.29 1206.54 L1845.71 1206.54 L1845.12 1206.54 L1844.53 1206.54 L1843.95 1206.54 L1843.36 1206.54 L1842.77 1206.54 L1842.19 1206.54 L1841.6 1206.54 L1841.01 1206.54 L1840.43 1206.54 L1839.84 1206.54 L1839.26 1206.54 L1838.67 1206.54 L1838.08 1206.54 L1837.5 1206.54 L1836.91 1206.54 L1836.32 1206.54 L1835.74 1206.54 L1835.15 1206.54 L1834.56 1206.54 L1833.98 1206.54 L1833.39 1206.54 L1832.81 1206.54 L1832.22 1206.54 L1831.63 1206.54 L1831.05 1206.54 L1830.46 1206.54 L1829.87 1206.54 L1829.29 1206.54 L1828.7 1206.54 L1828.11 1206.54 L1827.53 1206.54 L1826.94 1206.54 L1826.35 1206.54 L1825.77 1206.54 L1825.18 1206.54 L1824.6 1206.54 L1824.01 1206.54 L1823.42 1206.54 L1822.84 1206.54 L1822.25 1206.54 L1821.66 1206.54 L1821.08 1206.54 L1820.49 1206.54 L1819.9 1206.54 L1819.32 1206.54 L1818.73 1206.54 L1818.14 1206.54 L1817.56 1206.54 L1816.97 1206.54 L1816.39 1206.54 L1815.8 1206.54 L1815.21 1206.54 L1814.63 1206.54 L1814.04 1206.54 L1813.45 1206.54 L1812.87 1206.54 L1812.28 1206.54 L1811.69 1206.54 L1811.11 1206.54 L1810.52 1206.54 L1809.94 1206.54 L1809.35 1206.54 L1808.76 1206.54 L1808.18 1206.54 L1807.59 1206.54 L1807 1206.54 L1806.42 1206.54 L1805.83 1206.54 L1805.24 1206.54 L1804.66 1206.54 L1804.07 1206.54 L1803.48 1206.54 L1802.9 1206.54 L1802.31 1206.54 L1801.73 1206.54 L1801.14 1206.54 L1800.55 1206.54 L1799.97 1206.54 L1799.38 1206.54 L1798.79 1206.54 L1798.21 1206.54 L1797.62 1206.54 L1797.03 1206.54 L1796.45 1206.54 L1795.86 1206.54 L1795.27 1206.54 L1794.69 1206.54 L1794.1 1206.54 L1793.52 1206.54 L1792.93 1206.54 L1792.34 1206.54 L1791.76 1206.54 L1791.17 1206.54 L1790.58 1206.54 L1790 1206.54 L1789.41 1206.54 L1788.82 1206.54 L1788.24 1206.54 L1787.65 1206.54 L1787.06 1206.54 L1786.48 1206.54 L1785.89 1206.54 L1785.31 1206.54 L1784.72 1206.54 L1784.13 1206.54 L1783.55 1206.54 L1782.96 1206.54 L1782.37 1206.54 L1781.79 1206.54 L1781.2 1206.54 L1780.61 1206.54 L1780.03 1206.54 L1779.44 1206.54 L1778.86 1206.54 L1778.27 1206.54 L1777.68 1206.54 L1777.1 1206.54 L1776.51 1206.54 L1775.92 1206.54 L1775.34 1206.54 L1774.75 1206.54 L1774.16 1206.54 L1773.58 1206.54 L1772.99 1206.54 L1772.4 1206.54 L1771.82 1206.54 L1771.23 1206.54 L1770.65 1206.54 L1770.06 1206.54 L1769.47 1206.54 L1768.89 1206.54 L1768.3 1206.54 L1767.71 1206.54 L1767.13 1206.54 L1766.54 1206.54 L1765.95 1206.54 L1765.37 1206.54 L1764.78 1206.54 L1764.19 1206.54 L1763.61 1206.54 L1763.02 1206.54 L1762.44 1206.54 L1761.85 1206.54 L1761.26 1206.54 L1760.68 1206.54 L1760.09 1206.54 L1759.5 1206.54 L1758.92 1206.54 L1758.33 1206.54 L1757.74 1206.54 L1757.16 1206.54 L1756.57 1206.54 L1755.99 1206.54 L1755.4 1206.54 L1754.81 1206.54 L1754.23 1206.54 L1753.64 1206.54 L1753.05 1206.54 L1752.47 1206.54 L1751.88 1206.54 L1751.29 1206.54 L1750.71 1206.54 L1750.12 1206.54 L1749.53 1206.54 L1748.95 1206.54 L1748.36 1206.54 L1747.78 1206.54 L1747.19 1206.54 L1746.6 1206.54 L1746.02 1206.54 L1745.43 1206.54 L1744.84 1206.54 L1744.26 1206.54 L1743.67 1206.54 L1743.08 1206.54 L1742.5 1206.54 L1741.91 1206.54 L1741.32 1206.54 L1740.74 1206.54 L1740.15 1206.54 L1739.57 1206.54 L1738.98 1206.54 L1738.39 1206.54 L1737.81 1206.54 L1737.22 1206.54 L1736.63 1206.54 L1736.05 1206.54 L1735.46 1206.54 L1734.87 1206.54 L1734.29 1206.54 L1733.7 1206.54 L1733.11 1206.54 L1732.53 1206.54 L1731.94 1206.54 L1731.36 1206.54 L1730.77 1206.54 L1730.18 1206.54 L1729.6 1206.54 L1729.01 1206.54 L1728.42 1206.54 L1727.84 1206.54 L1727.25 1206.54 L1726.66 1206.54 L1726.08 1206.54 L1725.49 1206.54 L1724.91 1206.54 L1724.32 1206.54 L1723.73 1206.54 L1723.15 1206.54 L1722.56 1206.54 L1721.97 1206.54 L1721.39 1206.54 L1720.8 1206.54 L1720.21 1206.54 L1719.63 1206.54 L1719.04 1206.54 L1718.45 1206.54 L1717.87 1206.54 L1717.28 1206.54 L1716.7 1206.54 L1716.11 1206.54 L1715.52 1206.54 L1714.94 1206.54 L1714.35 1206.54 L1713.76 1206.54 L1713.18 1206.54 L1712.59 1206.54 L1712 1206.54 L1711.42 1206.54 L1710.83 1206.54 L1710.24 1206.54 L1709.66 1206.54 L1709.07 1206.54 L1708.49 1206.54 L1707.9 1206.54 L1707.31 1206.54 L1706.73 1206.54 L1706.14 1206.54 L1705.55 1206.54 L1704.97 1206.54 L1704.38 1206.54 L1703.79 1206.54 L1703.21 1206.54 L1702.62 1206.54 L1702.04 1206.54 L1701.45 1206.54 L1700.86 1206.54 L1700.28 1206.54 L1699.69 1206.54 L1699.1 1206.54 L1698.52 1206.54 L1697.93 1206.54 L1697.34 1206.54 L1696.76 1206.54 L1696.17 1206.54 L1695.58 1206.54 L1695 1206.54 L1694.41 1206.54 L1693.83 1206.54 L1693.24 1206.54 L1692.65 1206.54 L1692.07 1206.54 L1691.48 1206.54 L1690.89 1206.54 L1690.31 1206.54 L1689.72 1206.54 L1689.13 1206.54 L1688.55 1206.54 L1687.96 1206.54 L1687.37 1206.54 L1686.79 1206.54 L1686.2 1206.54 L1685.62 1206.54 L1685.03 1206.54 L1684.44 1206.54 L1683.86 1206.54 L1683.27 1206.54 L1682.68 1206.54 L1682.1 1206.54 L1681.51 1206.54 L1680.92 1206.54 L1680.34 1206.54 L1679.75 1206.54 L1679.17 1206.54 L1678.58 1206.54 L1677.99 1206.54 L1677.41 1206.54 L1676.82 1206.54 L1676.23 1206.54 L1675.65 1206.54 L1675.06 1206.54 L1674.47 1206.54 L1673.89 1206.54 L1673.3 1206.54 L1672.71 1206.54 L1672.13 1206.54 L1671.54 1206.54 L1670.96 1206.54 L1670.37 1206.54 L1669.78 1206.54 L1669.2 1206.54 L1668.61 1206.54 L1668.02 1206.54 L1667.44 1206.54 L1666.85 1206.54 L1666.26 1206.54 L1665.68 1206.54 L1665.09 1206.54 L1664.5 1206.54 L1663.92 1206.54 L1663.33 1206.54 L1662.75 1206.54 L1662.16 1206.54 L1661.57 1206.54 L1660.99 1206.54 L1660.4 1206.54 L1659.81 1206.54 L1659.23 1206.54 L1658.64 1206.54 L1658.05 1206.54 L1657.47 1206.54 L1656.88 1206.54 L1656.29 1206.54 L1655.71 1206.54 L1655.12 1206.54 L1654.54 1206.54 L1653.95 1206.54 L1653.36 1206.54 L1652.78 1206.54 L1652.19 1206.54 L1651.6 1206.54 L1651.02 1206.54 L1650.43 1206.54 L1649.84 1206.54 L1649.26 1206.54 L1648.67 1206.54 L1648.09 1206.54 L1647.5 1206.54 L1646.91 1206.54 L1646.33 1206.54 L1645.74 1206.54 L1645.15 1206.54 L1644.57 1206.54 L1643.98 1206.54 L1643.39 1206.54 L1642.81 1206.54 L1642.22 1206.54 L1641.63 1206.54 L1641.05 1206.54 L1640.46 1206.54 L1639.88 1206.54 L1639.29 1206.54 L1638.7 1206.54 L1638.12 1206.54 L1637.53 1206.54 L1636.94 1206.54 L1636.36 1206.54 L1635.77 1206.54 L1635.18 1206.54 L1634.6 1206.54 L1634.01 1206.54 L1633.42 1206.54 L1632.84 1206.54 L1632.25 1206.54 L1631.67 1206.54 L1631.08 1206.54 L1630.49 1206.54 L1629.91 1206.54 L1629.32 1206.54 L1628.73 1206.54 L1628.15 1206.54 L1627.56 1206.54 L1626.97 1206.54 L1626.39 1206.54 L1625.8 1206.54 L1625.22 1206.54 L1624.63 1206.54 L1624.04 1206.54 L1623.46 1206.54 L1622.87 1206.54 L1622.28 1206.54 L1621.7 1206.54 L1621.11 1206.54 L1620.52 1206.54 L1619.94 1206.54 L1619.35 1206.54 L1618.76 1206.54 L1618.18 1206.54 L1617.59 1206.54 L1617.01 1206.54 L1616.42 1206.54 L1615.83 1206.54 L1615.25 1206.54 L1614.66 1206.54 L1614.07 1206.54 L1613.49 1206.54 L1612.9 1206.54 L1612.31 1206.54 L1611.73 1206.54 L1611.14 1206.54 L1610.55 1206.54 L1609.97 1206.54 L1609.38 1206.54 L1608.8 1206.54 L1608.21 1206.54 L1607.62 1206.54 L1607.04 1206.54 L1606.45 1206.54 L1605.86 1206.54 L1605.28 1206.54 L1604.69 1206.54 L1604.1 1206.54 L1603.52 1206.54 L1602.93 1206.54 L1602.34 1206.54 L1601.76 1206.54 L1601.17 1206.54 L1600.59 1206.54 L1600 1206.54 L1599.41 1206.54 L1598.83 1206.54 L1598.24 1206.54 L1597.65 1206.54 L1597.07 1206.54 L1596.48 1206.54 L1595.89 1206.54 L1595.31 1206.54 L1594.72 1206.54 L1594.14 1206.54 L1593.55 1206.54 L1592.96 1206.54 L1592.38 1206.54 L1591.79 1206.54 L1591.2 1206.54 L1590.62 1206.54 L1590.03 1206.54 L1589.44 1206.54 L1588.86 1206.54 L1588.27 1206.54 L1587.68 1206.54 L1587.1 1206.54 L1586.51 1206.54 L1585.93 1206.54 L1585.34 1206.54 L1584.75 1206.54 L1584.17 1206.54 L1583.58 1206.54 L1582.99 1206.54 L1582.41 1206.54 L1581.82 1206.54 L1581.23 1206.54 L1580.65 1206.54 L1580.06 1206.54 L1579.47 1206.54 L1578.89 1206.54 L1578.3 1206.54 L1577.72 1206.54 L1577.13 1206.54 L1576.54 1206.54 L1575.96 1206.54 L1575.37 1206.54 L1574.78 1206.54 L1574.2 1206.54 L1573.61 1206.54 L1573.02 1206.54 L1572.44 1206.54 L1571.85 1206.54 L1571.27 1206.54 L1570.68 1206.54 L1570.09 1206.54 L1569.51 1206.54 L1568.92 1206.54 L1568.33 1206.54 L1567.75 1206.54 L1567.16 1206.54 L1566.57 1206.54 L1565.99 1206.54 L1565.4 1206.54 L1564.81 1206.54 L1564.23 1206.54 L1563.64 1206.54 L1563.06 1206.54 L1562.47 1206.54 L1561.88 1206.54 L1561.3 1206.54 L1560.71 1206.54 L1560.12 1206.54 L1559.54 1206.54 L1558.95 1206.54 L1558.36 1206.54 L1557.78 1206.54 L1557.19 1206.54 L1556.6 1206.54 L1556.02 1206.54 L1555.43 1206.54 L1554.85 1206.54 L1554.26 1206.54 L1553.67 1206.54 L1553.09 1206.54 L1552.5 1206.54 L1551.91 1206.54 L1551.33 1206.54 L1550.74 1206.54 L1550.15 1206.54 L1549.57 1206.54 L1548.98 1206.54 L1548.4 1206.54 L1547.81 1206.54 L1547.22 1206.54 L1546.64 1206.54 L1546.05 1206.54 L1545.46 1206.54 L1544.88 1206.54 L1544.29 1206.54 L1543.7 1206.54 L1543.12 1206.54 L1542.53 1206.54 L1541.94 1206.54 L1541.36 1206.54 L1540.77 1206.54 L1540.19 1206.54 L1539.6 1206.54 L1539.01 1206.54 L1538.43 1206.54 L1537.84 1206.54 L1537.25 1206.54 L1536.67 1206.54 L1536.08 1206.54 L1535.49 1206.54 L1534.91 1206.54 L1534.32 1206.54 L1533.73 1206.54 L1533.15 1206.54 L1532.56 1206.54 L1531.98 1206.54 L1531.39 1206.54 L1530.8 1206.54 L1530.22 1206.54 L1529.63 1206.54 L1529.04 1206.54 L1528.46 1206.54 L1527.87 1206.54 L1527.28 1206.54 L1526.7 1206.54 L1526.11 1206.54 L1525.52 1206.54 L1524.94 1206.54 L1524.35 1206.54 L1523.77 1206.54 L1523.18 1206.54 L1522.59 1206.54 L1522.01 1206.54 L1521.42 1206.54 L1520.83 1206.54 L1520.25 1206.54 L1519.66 1206.54 L1519.07 1206.54 L1518.49 1206.54 L1517.9 1206.54 L1517.32 1206.54 L1516.73 1206.54 L1516.14 1206.54 L1515.56 1206.54 L1514.97 1206.54 L1514.38 1206.54 L1513.8 1206.54 L1513.21 1206.54 L1512.62 1206.54 L1512.04 1206.54 L1511.45 1206.54 L1510.86 1206.54 L1510.28 1206.54 L1509.69 1206.54 L1509.11 1206.54 L1508.52 1206.54 L1507.93 1206.54 L1507.35 1206.54 L1506.76 1206.54 L1506.17 1206.54 L1505.59 1206.54 L1505 1206.54 L1504.41 1206.54 L1503.83 1206.54 L1503.24 1206.54 L1502.65 1206.54 L1502.07 1206.54 L1501.48 1206.54 L1500.9 1206.54 L1500.31 1206.54 L1499.72 1206.54 L1499.14 1206.54 L1498.55 1206.54 L1497.96 1206.54 L1497.38 1206.54 L1496.79 1206.54 L1496.2 1206.54 L1495.62 1206.54 L1495.03 1206.54 L1494.45 1206.54 L1493.86 1206.54 L1493.27 1206.54 L1492.69 1206.54 L1492.1 1206.54 L1491.51 1206.54 L1490.93 1206.54 L1490.34 1206.54 L1489.75 1206.54 L1489.17 1206.54 L1488.58 1206.54 L1487.99 1206.54 L1487.41 1206.54 L1486.82 1206.54 L1486.24 1206.54 L1485.65 1206.54 L1485.06 1206.54 L1484.48 1206.54 L1483.89 1206.54 L1483.3 1206.54 L1482.72 1206.54 L1482.13 1206.54 L1481.54 1206.54 L1480.96 1206.54 L1480.37 1206.54 L1479.78 1206.54 L1479.2 1206.54 L1478.61 1206.54 L1478.03 1206.54 L1477.44 1206.54 L1476.85 1206.54 L1476.27 1206.54 L1475.68 1206.54 L1475.09 1206.54 L1474.51 1206.54 L1473.92 1206.54 L1473.33 1206.54 L1472.75 1206.54 L1472.16 1206.54 L1471.57 1206.54 L1470.99 1206.54 L1470.4 1206.54 L1469.82 1206.54 L1469.23 1206.54 L1468.64 1206.54 L1468.06 1206.54 L1467.47 1206.54 L1466.88 1206.54 L1466.3 1206.54 L1465.71 1206.54 L1465.12 1206.54 L1464.54 1206.54 L1463.95 1206.54 L1463.37 1206.54 L1462.78 1206.54 L1462.19 1206.54 L1461.61 1206.54 L1461.02 1206.54 L1460.43 1206.54 L1459.85 1206.54 L1459.26 1206.54 L1458.67 1206.54 L1458.09 1206.54 L1457.5 1206.54 L1456.91 1206.54 L1456.33 1206.54 L1455.74 1206.54 L1455.16 1206.54 L1454.57 1206.54 L1453.98 1206.54 L1453.4 1206.54 L1452.81 1206.54 L1452.22 1206.54 L1451.64 1206.54 L1451.05 1206.54 L1450.46 1206.54 L1449.88 1206.54 L1449.29 1206.54 L1448.7 1206.54 L1448.12 1206.54 L1447.53 1206.54 L1446.95 1206.54 L1446.36 1206.54 L1445.77 1206.54 L1445.19 1206.54 L1444.6 1206.54 L1444.01 1206.54 L1443.43 1206.54 L1442.84 1206.54 L1442.25 1206.54 L1441.67 1206.54 L1441.08 1206.54 L1440.5 1206.54 L1439.91 1206.54 L1439.32 1206.54 L1438.74 1206.54 L1438.15 1206.54 L1437.56 1206.54 L1436.98 1206.54 L1436.39 1206.54 L1435.8 1206.54 L1435.22 1206.54 L1434.63 1206.54 L1434.04 1206.54 L1433.46 1206.54 L1432.87 1206.54 L1432.29 1206.54 L1431.7 1206.54 L1431.11 1206.54 L1430.53 1206.54 L1429.94 1206.54 L1429.35 1206.54 L1428.77 1206.54 L1428.18 1206.54 L1427.59 1206.54 L1427.01 1206.54 L1426.42 1206.54 L1425.83 1206.54 L1425.25 1206.54 L1424.66 1206.54 L1424.08 1206.54 L1423.49 1206.54 L1422.9 1206.54 L1422.32 1206.54 L1421.73 1206.54 L1421.14 1206.54 L1420.56 1206.54 L1419.97 1206.54 L1419.38 1206.54 L1418.8 1206.54 L1418.21 1206.54 L1417.63 1206.54 L1417.04 1206.54 L1416.45 1206.54 L1415.87 1206.54 L1415.28 1206.54 L1414.69 1206.54 L1414.11 1206.54 L1413.52 1206.54 L1412.93 1206.54 L1412.35 1206.54 L1411.76 1206.54 L1411.17 1206.54 L1410.59 1206.54 L1410 1206.54 L1409.42 1206.54 L1408.83 1206.54 L1408.24 1206.54 L1407.66 1206.54 L1407.07 1206.54 L1406.48 1206.54 L1405.9 1206.54 L1405.31 1206.54 L1404.72 1206.54 L1404.14 1206.54 L1403.55 1206.54 L1402.96 1206.54 L1402.38 1206.54 L1401.79 1206.54 L1401.21 1206.54 L1400.62 1206.54 L1400.03 1206.54 L1399.45 1206.54 L1398.86 1206.54 L1398.27 1206.54 L1397.69 1206.54 L1397.1 1206.54 L1396.51 1206.54 L1395.93 1206.54 L1395.34 1206.54 L1394.75 1206.54 L1394.17 1206.54 L1393.58 1206.54 L1393 1206.54 L1392.41 1206.54 L1391.82 1206.54 L1391.24 1206.54 L1390.65 1206.54 L1390.06 1206.54 L1389.48 1206.54 L1388.89 1206.54 L1388.3 1206.54 L1387.72 1206.54 L1387.13 1206.54 L1386.55 1206.54 L1385.96 1206.54 L1385.37 1206.54 L1384.79 1206.54 L1384.2 1206.54 L1383.61 1206.54 L1383.03 1206.54 L1382.44 1206.54 L1381.85 1206.54 L1381.27 1206.54 L1380.68 1206.54 L1380.09 1206.54 L1379.51 1206.54 L1378.92 1206.54 L1378.34 1206.54 L1377.75 1206.54 L1377.16 1206.54 L1376.58 1206.54 L1375.99 1206.54 L1375.4 1206.54 L1374.82 1206.54 L1374.23 1206.54 L1373.64 1206.54 L1373.06 1206.54 L1372.47 1206.54 L1371.88 1206.54 L1371.3 1206.54 L1370.71 1206.54 L1370.13 1206.54 L1369.54 1206.54 L1368.95 1206.54 L1368.37 1206.54 L1367.78 1206.54 L1367.19 1206.54 L1366.61 1206.54 L1366.02 1206.54 L1365.43 1206.54 L1364.85 1206.54 L1364.26 1206.54 L1363.68 1206.54 L1363.09 1206.54 L1362.5 1206.54 L1361.92 1206.54 L1361.33 1206.54 L1360.74 1206.54 L1360.16 1206.54 L1359.57 1206.54 L1358.98 1206.54 L1358.4 1206.54 L1357.81 1206.54 L1357.22 1206.54 L1356.64 1206.54 L1356.05 1206.54 L1355.47 1206.54 L1354.88 1206.54 L1354.29 1206.54 L1353.71 1206.54 L1353.12 1206.54 L1352.53 1206.54 L1351.95 1206.54 L1351.36 1206.54 L1350.77 1206.54 L1350.19 1206.54 L1349.6 1206.54 L1349.01 1206.54 L1348.43 1206.54 L1347.84 1206.54 L1347.26 1206.54 L1346.67 1206.54 L1346.08 1206.54 L1345.5 1206.54 L1344.91 1206.54 L1344.32 1206.54 L1343.74 1206.54 L1343.15 1206.54 L1342.56 1206.54 L1341.98 1206.54 L1341.39 1206.54 L1340.8 1206.54 L1340.22 1206.54 L1339.63 1206.54 L1339.05 1206.54 L1338.46 1206.54 L1337.87 1206.54 L1337.29 1206.54 L1336.7 1206.54 L1336.11 1206.54 L1335.53 1206.54 L1334.94 1206.54 L1334.35 1206.54 L1333.77 1206.54 L1333.18 1206.54 L1332.6 1206.54 L1332.01 1206.54 L1331.42 1206.54 L1330.84 1206.54 L1330.25 1206.54 L1329.66 1206.54 L1329.08 1206.54 L1328.49 1206.54 L1327.9 1206.54 L1327.32 1206.54 L1326.73 1206.54 L1326.14 1206.54 L1325.56 1206.54 L1324.97 1206.54 L1324.39 1206.54 L1323.8 1206.54 L1323.21 1206.54 L1322.63 1206.54 L1322.04 1206.54 L1321.45 1206.54 L1320.87 1206.54 L1320.28 1206.54 L1319.69 1206.54 L1319.11 1206.54 L1318.52 1206.54 L1317.93 1206.54 L1317.35 1206.54 L1316.76 1206.54 L1316.18 1206.54 L1315.59 1206.54 L1315 1206.54 L1314.42 1206.54 L1313.83 1206.54 L1313.24 1206.54 L1312.66 1206.54 L1312.07 1206.54 L1311.48 1206.54 L1310.9 1206.54 L1310.31 1206.54 L1309.73 1206.54 L1309.14 1206.54 L1308.55 1206.54 L1307.97 1206.54 L1307.38 1206.54 L1306.79 1206.54 L1306.21 1206.54 L1305.62 1206.54 L1305.03 1206.54 L1304.45 1206.54 L1303.86 1206.54 L1303.27 1206.54 L1302.69 1206.54 L1302.1 1206.54 L1301.52 1206.54 L1300.93 1206.54 L1300.34 1206.54 L1299.76 1206.54 L1299.17 1206.54 L1298.58 1206.54 L1298 1206.54 L1297.41 1206.54 L1296.82 1206.54 L1296.24 1206.54 L1295.65 1206.54 L1295.06 1206.54 L1294.48 1206.54 L1293.89 1206.54 L1293.31 1206.54 L1292.72 1206.54 L1292.13 1206.54 L1291.55 1206.54 L1290.96 1206.54 L1290.37 1206.54 L1289.79 1206.54 L1289.2 1206.54 L1288.61 1206.54 L1288.03 1206.54 L1287.44 1206.54 L1286.86 1206.54 L1286.27 1206.54 L1285.68 1206.54 L1285.1 1206.54 L1284.51 1206.54 L1283.92 1206.54 L1283.34 1206.54 L1282.75 1206.54 L1282.16 1206.54 L1281.58 1206.54 L1280.99 1206.54 L1280.4 1206.54 L1279.82 1206.54 L1279.23 1206.54 L1278.65 1206.54 L1278.06 1206.54 L1277.47 1206.54 L1276.89 1206.54 L1276.3 1206.54 L1275.71 1206.54 L1275.13 1206.54 L1274.54 1206.54 L1273.95 1206.54 L1273.37 1206.54 L1272.78 1206.54 L1272.19 1206.54 L1271.61 1206.54 L1271.02 1206.54 L1270.44 1206.54 L1269.85 1206.54 L1269.26 1206.54 L1268.68 1206.54 L1268.09 1206.54 L1267.5 1206.54 L1266.92 1206.54 L1266.33 1206.54 L1265.74 1206.54 L1265.16 1206.54 L1264.57 1206.54 L1263.98 1206.54 L1263.4 1206.54 L1262.81 1206.54 L1262.23 1206.54 L1261.64 1206.54 L1261.05 1206.54 L1260.47 1206.54 L1259.88 1206.54 L1259.29 1206.54 L1258.71 1206.54 L1258.12 1206.54 L1257.53 1206.54 L1256.95 1206.54 L1256.36 1206.54 L1255.78 1206.54 L1255.19 1206.54 L1254.6 1206.54 L1254.02 1206.54 L1253.43 1206.54 L1252.84 1206.54 L1252.26 1206.54 L1251.67 1206.54 L1251.08 1206.54 L1250.5 1206.54 L1249.91 1206.54 L1249.32 1206.54 L1248.74 1206.54 L1248.15 1206.54 L1247.57 1206.54 L1246.98 1206.54 L1246.39 1206.54 L1245.81 1206.54 L1245.22 1206.54 L1244.63 1206.54 L1244.05 1206.54 L1243.46 1206.54 L1242.87 1206.54 L1242.29 1206.54 L1241.7 1206.54 L1241.11 1206.54 L1240.53 1206.54 L1239.94 1206.54 L1239.36 1206.54 L1238.77 1206.54 L1238.18 1206.54 L1237.6 1206.54 L1237.01 1206.54 L1236.42 1206.54 L1235.84 1206.54 L1235.25 1206.54 L1234.66 1206.54 L1234.08 1206.54 L1233.49 1206.54 L1232.91 1206.54 L1232.32 1206.54 L1231.73 1206.54 L1231.15 1206.54 L1230.56 1206.54 L1229.97 1206.54 L1229.39 1206.54 L1228.8 1206.54 L1228.21 1206.54 L1227.63 1206.54 L1227.04 1206.54 L1226.45 1206.54 L1225.87 1206.54 L1225.28 1206.54 L1224.7 1206.54 L1224.11 1206.54 L1223.52 1206.54 L1222.94 1206.54 L1222.35 1206.54 L1221.76 1206.54 L1221.18 1206.54 L1220.59 1206.54 L1220 1206.54 L1219.42 1206.54 L1218.83 1206.54 L1218.24 1206.54 L1217.66 1206.54 L1217.07 1206.54 L1216.49 1206.54 L1215.9 1206.54 L1215.31 1206.54 L1214.73 1206.54 L1214.14 1206.54 L1213.55 1206.54 L1212.97 1206.54 L1212.38 1206.54 L1211.79 1206.54 L1211.21 1206.54 L1210.62 1206.54 L1210.03 1206.54 L1209.45 1206.54 L1208.86 1206.54 L1208.28 1206.54 L1207.69 1206.54 L1207.1 1206.54 L1206.52 1206.54 L1205.93 1206.54 L1205.34 1206.54 L1204.76 1206.54 L1204.17 1206.54 L1203.58 1206.54 L1203 1206.54 L1202.41 1206.54 L1201.83 1206.54 L1201.24 1206.54 L1200.65 1206.54 L1200.07 1206.54 L1199.48 1206.54 L1198.89 1206.54 L1198.31 1206.54 L1197.72 1206.54 L1197.13 1206.54 L1196.55 1206.54 L1195.96 1206.54 L1195.37 1206.54 L1194.79 1206.54 L1194.2 1206.54 L1193.62 1206.54 L1193.03 1206.54 L1192.44 1206.54 L1191.86 1206.54 L1191.27 1206.54 L1190.68 1206.54 L1190.1 1206.54 L1189.51 1206.54 L1188.92 1206.54 L1188.34 1206.54 L1187.75 1206.54 L1187.16 1206.54 L1186.58 1206.54 L1185.99 1206.54 L1185.41 1206.54 L1184.82 1206.54 L1184.23 1206.54 L1183.65 1206.54 L1183.06 1206.54 L1182.47 1206.54 L1181.89 1206.54 L1181.3 1206.54 L1180.71 1206.54 L1180.13 1206.54 L1179.54 1206.54 L1178.96 1206.54 L1178.37 1206.54 L1177.78 1206.54 L1177.2 1206.54 L1176.61 1206.54 L1176.02 1206.54 L1175.44 1206.54 L1174.85 1206.54 L1174.26 1206.54 L1173.68 1206.54 L1173.09 1206.54 L1172.5 1206.54 L1171.92 1206.54 L1171.33 1206.54 L1170.75 1206.54 L1170.16 1206.54 L1169.57 1206.54 L1168.99 1206.54 L1168.4 1206.54 L1167.81 1206.54 L1167.23 1206.54 L1166.64 1206.54 L1166.05 1206.54 L1165.47 1206.54 L1164.88 1206.54 L1164.29 1206.54 L1163.71 1206.54 L1163.12 1206.54 L1162.54 1206.54 L1161.95 1206.54 L1161.36 1206.54 L1160.78 1206.54 L1160.19 1206.54 L1159.6 1206.54 L1159.02 1206.54 L1158.43 1206.54 L1157.84 1206.54 L1157.26 1206.54 L1156.67 1206.54 L1156.09 1206.54 L1155.5 1206.54 L1154.91 1206.54 L1154.33 1206.54 L1153.74 1206.54 L1153.15 1206.54 L1152.57 1206.54 L1151.98 1206.54 L1151.39 1206.54 L1150.81 1206.54 L1150.22 1206.54 L1149.63 1206.54 L1149.05 1206.54 L1148.46 1206.54 L1147.88 1206.54 L1147.29 1206.54 L1146.7 1206.54 L1146.12 1206.54 L1145.53 1206.54 L1144.94 1206.54 L1144.36 1206.54 L1143.77 1206.54 L1143.18 1206.54 L1142.6 1206.54 L1142.01 1206.54 L1141.42 1206.54 L1140.84 1206.54 L1140.25 1206.54 L1139.67 1206.54 L1139.08 1206.54 L1138.49 1206.54 L1137.91 1206.54 L1137.32 1206.54 L1136.73 1206.54 L1136.15 1206.54 L1135.56 1206.54 L1134.97 1206.54 L1134.39 1206.54 L1133.8 1206.54 L1133.21 1206.54 L1132.63 1206.54 L1132.04 1206.54 L1131.46 1206.54 L1130.87 1206.54 L1130.28 1206.54 L1129.7 1206.54 L1129.11 1206.54 L1128.52 1206.54 L1127.94 1206.54 L1127.35 1206.54 L1126.76 1206.54 L1126.18 1206.54 L1125.59 1206.54 L1125.01 1206.54 L1124.42 1206.54 L1123.83 1206.54 L1123.25 1206.54 L1122.66 1206.54 L1122.07 1206.54 L1121.49 1206.54 L1120.9 1206.54 L1120.31 1206.54 L1119.73 1206.54 L1119.14 1206.54 L1118.55 1206.54 L1117.97 1206.54 L1117.38 1206.54 L1116.8 1206.54 L1116.21 1206.54 L1115.62 1206.54 L1115.04 1206.54 L1114.45 1206.54 L1113.86 1206.54 L1113.28 1206.54 L1112.69 1206.54 L1112.1 1206.54 L1111.52 1206.54 L1110.93 1206.54 L1110.34 1206.54 L1109.76 1206.54 L1109.17 1206.54 L1108.59 1206.54 L1108 1206.54 L1107.41 1206.54 L1106.83 1206.54 L1106.24 1206.54 L1105.65 1206.54 L1105.07 1206.54 L1104.48 1206.54 L1103.89 1206.54 L1103.31 1206.54 L1102.72 1206.54 L1102.14 1206.54 L1101.55 1206.54 L1100.96 1206.54 L1100.38 1206.54 L1099.79 1206.54 L1099.2 1206.54 L1098.62 1206.54 L1098.03 1206.54 L1097.44 1206.54 L1096.86 1206.54 L1096.27 1206.54 L1095.68 1206.54 L1095.1 1206.54 L1094.51 1206.54 L1093.93 1206.54 L1093.34 1206.54 L1092.75 1206.54 L1092.17 1206.54 L1091.58 1206.54 L1090.99 1206.54 L1090.41 1206.54 L1089.82 1206.54 L1089.23 1206.54 L1088.65 1206.54 L1088.06 1206.54 L1087.47 1206.54 L1086.89 1206.54 L1086.3 1206.54 L1085.72 1206.54 L1085.13 1206.54 L1084.54 1206.54 L1083.96 1206.54 L1083.37 1206.54 L1082.78 1206.54 L1082.2 1206.54 L1081.61 1206.54 L1081.02 1206.54 L1080.44 1206.54 L1079.85 1206.54 L1079.26 1206.54 L1078.68 1206.54 L1078.09 1206.54 L1077.51 1206.54 L1076.92 1206.54 L1076.33 1206.54 L1075.75 1206.54 L1075.16 1206.54 L1074.57 1206.54 L1073.99 1206.54 L1073.4 1206.54 L1072.81 1206.54 L1072.23 1206.54 L1071.64 1206.54 L1071.06 1206.54 L1070.47 1206.54 L1069.88 1206.54 L1069.3 1206.54 L1068.71 1206.54 L1068.12 1206.54 L1067.54 1206.54 L1066.95 1206.54 L1066.36 1206.54 L1065.78 1206.54 L1065.19 1206.54 L1064.6 1206.54 L1064.02 1206.54 L1063.43 1206.54 L1062.85 1206.54 L1062.26 1206.54 L1061.67 1206.54 L1061.09 1206.54 L1060.5 1206.54 L1059.91 1206.54 L1059.33 1206.54 L1058.74 1206.54 L1058.15 1206.54 L1057.57 1206.54 L1056.98 1206.54 L1056.39 1206.54 L1055.81 1206.54 L1055.22 1206.54 L1054.64 1206.54 L1054.05 1206.54 L1053.46 1206.54 L1052.88 1206.54 L1052.29 1206.54 L1051.7 1206.54 L1051.12 1206.54 L1050.53 1206.54 L1049.94 1206.54 L1049.36 1206.54 L1048.77 1206.54 L1048.19 1206.54 L1047.6 1206.54 L1047.01 1206.54 L1046.43 1206.54 L1045.84 1206.54 L1045.25 1206.54 L1044.67 1206.54 L1044.08 1206.54 L1043.49 1206.54 L1042.91 1206.54 L1042.32 1206.54 L1041.73 1206.54 L1041.15 1206.54 L1040.56 1206.54 L1039.98 1206.54 L1039.39 1206.54 L1038.8 1206.54 L1038.22 1206.54 L1037.63 1206.54 L1037.04 1206.54 L1036.46 1206.54 L1035.87 1206.54 L1035.28 1206.54 L1034.7 1206.54 L1034.11 1206.54 L1033.52 1206.54 L1032.94 1206.54 L1032.35 1206.54 L1031.77 1206.54 L1031.18 1206.54 L1030.59 1206.54 L1030.01 1206.54 L1029.42 1206.54 L1028.83 1206.54 L1028.25 1206.54 L1027.66 1206.54 L1027.07 1206.54 L1026.49 1206.54 L1025.9 1206.54 L1025.32 1206.54 L1024.73 1206.54 L1024.14 1206.54 L1023.56 1206.54 L1022.97 1206.54 L1022.38 1206.54 L1021.8 1206.54 L1021.21 1206.54 L1020.62 1206.54 L1020.04 1206.54 L1019.45 1206.54 L1018.86 1206.54 L1018.28 1206.54 L1017.69 1206.54 L1017.11 1206.54 L1016.52 1206.54 L1015.93 1206.54 L1015.35 1206.54 L1014.76 1206.54 L1014.17 1206.54 L1013.59 1206.54 L1013 1206.54 L1012.41 1206.54 L1011.83 1206.54 L1011.24 1206.54 L1010.65 1206.54 L1010.07 1206.54 L1009.48 1206.54 L1008.9 1206.54 L1008.31 1206.54 L1007.72 1206.54 L1007.14 1206.54 L1006.55 1206.54 L1005.96 1206.54 L1005.38 1206.54 L1004.79 1206.54 L1004.2 1206.54 L1003.62 1206.54 L1003.03 1206.54 L1002.44 1206.54 L1001.86 1206.54 L1001.27 1206.54 L1000.69 1206.54 L1000.1 1206.54 L999.513 1206.54 L998.926 1206.54 L998.34 1206.54 L997.754 1206.54 L997.167 1206.54 L996.581 1206.54 L995.994 1206.54 L995.408 1206.54 L994.822 1206.54 L994.235 1206.54 L993.649 1206.54 L993.062 1206.54 L992.476 1206.54 L991.889 1206.54 L991.303 1206.54 L990.717 1206.54 L990.13 1206.54 L989.544 1206.54 L988.957 1206.54 L988.371 1206.54 L987.785 1206.54 L987.198 1206.54 L986.612 1206.54 L986.025 1206.54  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.93 986.612,1206.93 987.198,1206.93 987.785,1206.93 988.371,1206.93 988.957,1206.93 989.544,1206.93 990.13,1206.93 990.717,1206.93 991.303,1206.93 991.889,1206.93 992.476,1206.93 993.062,1206.93 993.649,1206.93 994.235,1206.93 994.822,1206.93 995.408,1206.93 995.994,1206.93 996.581,1206.93 997.167,1206.93 997.754,1206.93 998.34,1206.93 998.926,1206.93 999.513,1206.93 1000.1,1206.93 1000.69,1206.93 1001.27,1206.93 1001.86,1206.93 1002.44,1206.93 1003.03,1206.93 1003.62,1206.93 1004.2,1206.93 1004.79,1206.93 1005.38,1206.93 1005.96,1206.93 1006.55,1206.93 1007.14,1206.93 1007.72,1206.93 1008.31,1206.93 1008.9,1206.93 1009.48,1206.93 1010.07,1206.93 1010.65,1206.93 1011.24,1206.93 1011.83,1206.93 1012.41,1206.93 1013,1206.93 1013.59,1206.93 1014.17,1206.93 1014.76,1206.93 1015.35,1206.93 1015.93,1206.93 1016.52,1206.93 1017.11,1206.93 1017.69,1206.93 1018.28,1206.93 1018.86,1206.93 1019.45,1206.93 1020.04,1206.93 1020.62,1206.93 1021.21,1206.93 1021.8,1206.93 1022.38,1206.93 1022.97,1206.93 1023.56,1206.93 1024.14,1206.93 1024.73,1206.93 1025.32,1206.93 1025.9,1206.93 1026.49,1206.93 1027.07,1206.93 1027.66,1206.93 1028.25,1206.93 1028.83,1206.93 1029.42,1206.93 1030.01,1206.93 1030.59,1206.93 1031.18,1206.93 1031.77,1206.93 1032.35,1206.93 1032.94,1206.93 1033.52,1206.93 1034.11,1206.93 1034.7,1206.93 1035.28,1206.93 1035.87,1206.93 1036.46,1206.93 1037.04,1206.93 1037.63,1206.93 1038.22,1206.93 1038.8,1206.93 1039.39,1206.93 1039.98,1206.93 1040.56,1206.93 1041.15,1206.93 1041.73,1206.93 1042.32,1206.93 1042.91,1206.93 1043.49,1206.93 1044.08,1206.93 1044.67,1206.93 1045.25,1206.93 1045.84,1206.93 1046.43,1206.93 1047.01,1206.93 1047.6,1206.93 1048.19,1206.93 1048.77,1206.93 1049.36,1206.93 1049.94,1206.93 1050.53,1206.93 1051.12,1206.93 1051.7,1206.93 1052.29,1206.93 1052.88,1206.93 1053.46,1206.93 1054.05,1206.93 1054.64,1206.93 1055.22,1206.93 1055.81,1206.93 1056.39,1206.93 1056.98,1206.93 1057.57,1206.93 1058.15,1206.93 1058.74,1206.93 1059.33,1206.93 1059.91,1206.93 1060.5,1206.93 1061.09,1206.93 1061.67,1206.93 1062.26,1206.93 1062.85,1206.93 1063.43,1206.93 1064.02,1206.93 1064.6,1206.93 1065.19,1206.93 1065.78,1206.93 1066.36,1206.93 1066.95,1206.93 1067.54,1206.93 1068.12,1206.93 1068.71,1206.93 1069.3,1206.93 1069.88,1206.93 1070.47,1206.93 1071.06,1206.93 1071.64,1206.93 1072.23,1206.93 1072.81,1206.93 1073.4,1206.93 1073.99,1206.93 1074.57,1206.93 1075.16,1206.93 1075.75,1206.93 1076.33,1206.93 1076.92,1206.93 1077.51,1206.93 1078.09,1206.93 1078.68,1206.93 1079.26,1206.93 1079.85,1206.93 1080.44,1206.93 1081.02,1206.93 1081.61,1206.93 1082.2,1206.93 1082.78,1206.93 1083.37,1206.93 1083.96,1206.93 1084.54,1206.93 1085.13,1206.93 1085.72,1206.93 1086.3,1206.93 1086.89,1206.93 1087.47,1206.93 1088.06,1206.93 1088.65,1206.93 1089.23,1206.93 1089.82,1206.93 1090.41,1206.93 1090.99,1206.93 1091.58,1206.93 1092.17,1206.93 1092.75,1206.93 1093.34,1206.93 1093.93,1206.93 1094.51,1206.93 1095.1,1206.93 1095.68,1206.93 1096.27,1206.93 1096.86,1206.93 1097.44,1206.93 1098.03,1206.93 1098.62,1206.93 1099.2,1206.93 1099.79,1206.93 1100.38,1206.93 1100.96,1206.93 1101.55,1206.93 1102.14,1206.93 1102.72,1206.93 1103.31,1206.93 1103.89,1206.93 1104.48,1206.93 1105.07,1206.93 1105.65,1206.93 1106.24,1206.93 1106.83,1206.93 1107.41,1206.93 1108,1206.93 1108.59,1206.93 1109.17,1206.93 1109.76,1206.93 1110.34,1206.93 1110.93,1206.93 1111.52,1206.93 1112.1,1206.93 1112.69,1206.93 1113.28,1206.93 1113.86,1206.93 1114.45,1206.93 1115.04,1206.93 1115.62,1206.93 1116.21,1206.93 1116.8,1206.93 1117.38,1206.93 1117.97,1206.93 1118.55,1206.93 1119.14,1206.93 1119.73,1206.93 1120.31,1206.93 1120.9,1206.93 1121.49,1206.93 1122.07,1206.93 1122.66,1206.93 1123.25,1206.93 1123.83,1206.93 1124.42,1206.93 1125.01,1206.93 1125.59,1206.93 1126.18,1206.93 1126.76,1206.93 1127.35,1206.93 1127.94,1206.93 1128.52,1206.93 1129.11,1206.93 1129.7,1206.93 1130.28,1206.93 1130.87,1206.93 1131.46,1206.93 1132.04,1206.93 1132.63,1206.93 1133.21,1206.93 1133.8,1206.93 1134.39,1206.93 1134.97,1206.93 1135.56,1206.93 1136.15,1206.93 1136.73,1206.93 1137.32,1206.93 1137.91,1206.93 1138.49,1206.93 1139.08,1206.93 1139.67,1206.93 1140.25,1206.93 1140.84,1206.93 1141.42,1206.93 1142.01,1206.93 1142.6,1206.93 1143.18,1206.93 1143.77,1206.93 1144.36,1206.93 1144.94,1206.93 1145.53,1206.93 1146.12,1206.93 1146.7,1206.93 1147.29,1206.93 1147.88,1206.93 1148.46,1206.93 1149.05,1206.93 1149.63,1206.93 1150.22,1206.93 1150.81,1206.93 1151.39,1206.93 1151.98,1206.93 1152.57,1206.93 1153.15,1206.93 1153.74,1206.93 1154.33,1206.93 1154.91,1206.93 1155.5,1206.93 1156.09,1206.93 1156.67,1206.93 1157.26,1206.93 1157.84,1206.93 1158.43,1206.93 1159.02,1206.93 1159.6,1206.93 1160.19,1206.93 1160.78,1206.93 1161.36,1206.93 1161.95,1206.93 1162.54,1206.93 1163.12,1206.93 1163.71,1206.93 1164.29,1206.93 1164.88,1206.93 1165.47,1206.93 1166.05,1206.93 1166.64,1206.93 1167.23,1206.93 1167.81,1206.93 1168.4,1206.93 1168.99,1206.93 1169.57,1206.93 1170.16,1206.93 1170.75,1206.93 1171.33,1206.93 1171.92,1206.93 1172.5,1206.93 1173.09,1206.93 1173.68,1206.93 1174.26,1206.93 1174.85,1206.93 1175.44,1206.93 1176.02,1206.93 1176.61,1206.93 1177.2,1206.93 1177.78,1206.93 1178.37,1206.93 1178.96,1206.93 1179.54,1206.93 1180.13,1206.93 1180.71,1206.93 1181.3,1206.93 1181.89,1206.93 1182.47,1206.93 1183.06,1206.93 1183.65,1206.93 1184.23,1206.93 1184.82,1206.93 1185.41,1206.93 1185.99,1206.93 1186.58,1206.93 1187.16,1206.93 1187.75,1206.93 1188.34,1206.93 1188.92,1206.93 1189.51,1206.93 1190.1,1206.93 1190.68,1206.93 1191.27,1206.93 1191.86,1206.93 1192.44,1206.93 1193.03,1206.93 1193.62,1206.93 1194.2,1206.93 1194.79,1206.93 1195.37,1206.93 1195.96,1206.93 1196.55,1206.93 1197.13,1206.93 1197.72,1206.93 1198.31,1206.93 1198.89,1206.93 1199.48,1206.93 1200.07,1206.93 1200.65,1206.93 1201.24,1206.93 1201.83,1206.93 1202.41,1206.93 1203,1206.93 1203.58,1206.93 1204.17,1206.93 1204.76,1206.93 1205.34,1206.93 1205.93,1206.93 1206.52,1206.93 1207.1,1206.93 1207.69,1206.93 1208.28,1206.93 1208.86,1206.93 1209.45,1206.93 1210.03,1206.93 1210.62,1206.93 1211.21,1206.93 1211.79,1206.93 1212.38,1206.93 1212.97,1206.93 1213.55,1206.93 1214.14,1206.93 1214.73,1206.93 1215.31,1206.93 1215.9,1206.93 1216.49,1206.93 1217.07,1206.93 1217.66,1206.93 1218.24,1206.93 1218.83,1206.93 1219.42,1206.93 1220,1206.93 1220.59,1206.93 1221.18,1206.93 1221.76,1206.93 1222.35,1206.93 1222.94,1206.93 1223.52,1206.93 1224.11,1206.93 1224.7,1206.93 1225.28,1206.93 1225.87,1206.93 1226.45,1206.93 1227.04,1206.93 1227.63,1206.93 1228.21,1206.93 1228.8,1206.93 1229.39,1206.93 1229.97,1206.93 1230.56,1206.93 1231.15,1206.93 1231.73,1206.93 1232.32,1206.93 1232.91,1206.93 1233.49,1206.93 1234.08,1206.93 1234.66,1206.93 1235.25,1206.93 1235.84,1206.93 1236.42,1206.93 1237.01,1206.93 1237.6,1206.93 1238.18,1206.93 1238.77,1206.93 1239.36,1206.93 1239.94,1206.93 1240.53,1206.93 1241.11,1206.93 1241.7,1206.93 1242.29,1206.93 1242.87,1206.93 1243.46,1206.93 1244.05,1206.93 1244.63,1206.93 1245.22,1206.93 1245.81,1206.93 1246.39,1206.93 1246.98,1206.93 1247.57,1206.93 1248.15,1206.93 1248.74,1206.93 1249.32,1206.93 1249.91,1206.93 1250.5,1206.93 1251.08,1206.93 1251.67,1206.93 1252.26,1206.93 1252.84,1206.93 1253.43,1206.93 1254.02,1206.93 1254.6,1206.93 1255.19,1206.93 1255.78,1206.93 1256.36,1206.93 1256.95,1206.93 1257.53,1206.93 1258.12,1206.93 1258.71,1206.93 1259.29,1206.93 1259.88,1206.93 1260.47,1206.93 1261.05,1206.93 1261.64,1206.93 1262.23,1206.93 1262.81,1206.93 1263.4,1206.93 1263.98,1206.93 1264.57,1206.93 1265.16,1206.93 1265.74,1206.93 1266.33,1206.93 1266.92,1206.93 1267.5,1206.93 1268.09,1206.93 1268.68,1206.93 1269.26,1206.93 1269.85,1206.93 1270.44,1206.93 1271.02,1206.93 1271.61,1206.93 1272.19,1206.93 1272.78,1206.93 1273.37,1206.93 1273.95,1206.93 1274.54,1206.93 1275.13,1206.93 1275.71,1206.93 1276.3,1206.93 1276.89,1206.93 1277.47,1206.93 1278.06,1206.93 1278.65,1206.93 1279.23,1206.93 1279.82,1206.93 1280.4,1206.93 1280.99,1206.93 1281.58,1206.93 1282.16,1206.93 1282.75,1206.93 1283.34,1206.93 1283.92,1206.93 1284.51,1206.93 1285.1,1206.93 1285.68,1206.93 1286.27,1206.93 1286.86,1206.93 1287.44,1206.93 1288.03,1206.93 1288.61,1206.93 1289.2,1206.93 1289.79,1206.93 1290.37,1206.93 1290.96,1206.93 1291.55,1206.93 1292.13,1206.93 1292.72,1206.93 1293.31,1206.93 1293.89,1206.93 1294.48,1206.93 1295.06,1206.93 1295.65,1206.93 1296.24,1206.93 1296.82,1206.93 1297.41,1206.93 1298,1206.93 1298.58,1206.93 1299.17,1206.93 1299.76,1206.93 1300.34,1206.93 1300.93,1206.93 1301.52,1206.93 1302.1,1206.93 1302.69,1206.93 1303.27,1206.93 1303.86,1206.93 1304.45,1206.93 1305.03,1206.93 1305.62,1206.93 1306.21,1206.93 1306.79,1206.93 1307.38,1206.93 1307.97,1206.93 1308.55,1206.93 1309.14,1206.93 1309.73,1206.93 1310.31,1206.93 1310.9,1206.93 1311.48,1206.93 1312.07,1206.93 1312.66,1206.93 1313.24,1206.93 1313.83,1206.93 1314.42,1206.93 1315,1206.93 1315.59,1206.93 1316.18,1206.93 1316.76,1206.93 1317.35,1206.93 1317.93,1206.93 1318.52,1206.93 1319.11,1206.93 1319.69,1206.93 1320.28,1206.93 1320.87,1206.93 1321.45,1206.93 1322.04,1206.93 1322.63,1206.93 1323.21,1206.93 1323.8,1206.93 1324.39,1206.93 1324.97,1206.93 1325.56,1206.93 1326.14,1206.93 1326.73,1206.93 1327.32,1206.93 1327.9,1206.93 1328.49,1206.93 1329.08,1206.93 1329.66,1206.93 1330.25,1206.93 1330.84,1206.93 1331.42,1206.93 1332.01,1206.93 1332.6,1206.93 1333.18,1206.93 1333.77,1206.93 1334.35,1206.93 1334.94,1206.93 1335.53,1206.93 1336.11,1206.93 1336.7,1206.93 1337.29,1206.93 1337.87,1206.93 1338.46,1206.93 1339.05,1206.93 1339.63,1206.93 1340.22,1206.93 1340.8,1206.93 1341.39,1206.93 1341.98,1206.93 1342.56,1206.93 1343.15,1206.93 1343.74,1206.93 1344.32,1206.93 1344.91,1206.93 1345.5,1206.93 1346.08,1206.93 1346.67,1206.93 1347.26,1206.93 1347.84,1206.93 1348.43,1206.93 1349.01,1206.93 1349.6,1206.93 1350.19,1206.93 1350.77,1206.93 1351.36,1206.93 1351.95,1206.93 1352.53,1206.93 1353.12,1206.93 1353.71,1206.93 1354.29,1206.93 1354.88,1206.93 1355.47,1206.93 1356.05,1206.93 1356.64,1206.93 1357.22,1206.93 1357.81,1206.93 1358.4,1206.93 1358.98,1206.93 1359.57,1206.93 1360.16,1206.93 1360.74,1206.93 1361.33,1206.93 1361.92,1206.93 1362.5,1206.93 1363.09,1206.93 1363.68,1206.93 1364.26,1206.93 1364.85,1206.93 1365.43,1206.93 1366.02,1206.93 1366.61,1206.93 1367.19,1206.93 1367.78,1206.93 1368.37,1206.93 1368.95,1206.93 1369.54,1206.93 1370.13,1206.93 1370.71,1206.93 1371.3,1206.93 1371.88,1206.93 1372.47,1206.93 1373.06,1206.93 1373.64,1206.93 1374.23,1206.93 1374.82,1206.93 1375.4,1206.93 1375.99,1206.93 1376.58,1206.93 1377.16,1206.93 1377.75,1206.93 1378.34,1206.93 1378.92,1206.93 1379.51,1206.93 1380.09,1206.93 1380.68,1206.93 1381.27,1206.93 1381.85,1206.93 1382.44,1206.93 1383.03,1206.93 1383.61,1206.93 1384.2,1206.93 1384.79,1206.93 1385.37,1206.93 1385.96,1206.93 1386.55,1206.93 1387.13,1206.93 1387.72,1206.93 1388.3,1206.93 1388.89,1206.93 1389.48,1206.93 1390.06,1206.93 1390.65,1206.93 1391.24,1206.93 1391.82,1206.93 1392.41,1206.93 1393,1206.93 1393.58,1206.93 1394.17,1206.93 1394.75,1206.93 1395.34,1206.93 1395.93,1206.93 1396.51,1206.93 1397.1,1206.93 1397.69,1206.93 1398.27,1206.93 1398.86,1206.93 1399.45,1206.93 1400.03,1206.93 1400.62,1206.93 1401.21,1206.93 1401.79,1206.93 1402.38,1206.93 1402.96,1206.93 1403.55,1206.93 1404.14,1206.93 1404.72,1206.93 1405.31,1206.93 1405.9,1206.93 1406.48,1206.93 1407.07,1206.93 1407.66,1206.93 1408.24,1206.93 1408.83,1206.93 1409.42,1206.93 1410,1206.93 1410.59,1206.93 1411.17,1206.93 1411.76,1206.93 1412.35,1206.93 1412.93,1206.93 1413.52,1206.93 1414.11,1206.93 1414.69,1206.93 1415.28,1206.93 1415.87,1206.93 1416.45,1206.93 1417.04,1206.93 1417.63,1206.93 1418.21,1206.93 1418.8,1206.93 1419.38,1206.93 1419.97,1206.93 1420.56,1206.93 1421.14,1206.93 1421.73,1206.93 1422.32,1206.93 1422.9,1206.93 1423.49,1206.93 1424.08,1206.93 1424.66,1206.93 1425.25,1206.93 1425.83,1206.93 1426.42,1206.93 1427.01,1206.93 1427.59,1206.93 1428.18,1206.93 1428.77,1206.93 1429.35,1206.93 1429.94,1206.93 1430.53,1206.93 1431.11,1206.93 1431.7,1206.93 1432.29,1206.93 1432.87,1206.93 1433.46,1206.93 1434.04,1206.93 1434.63,1206.93 1435.22,1206.93 1435.8,1206.93 1436.39,1206.93 1436.98,1206.93 1437.56,1206.93 1438.15,1206.93 1438.74,1206.93 1439.32,1206.93 1439.91,1206.93 1440.5,1206.93 1441.08,1206.93 1441.67,1206.93 1442.25,1206.93 1442.84,1206.93 1443.43,1206.93 1444.01,1206.93 1444.6,1206.93 1445.19,1206.93 1445.77,1206.93 1446.36,1206.93 1446.95,1206.93 1447.53,1206.93 1448.12,1206.93 1448.7,1206.93 1449.29,1206.93 1449.88,1206.93 1450.46,1206.93 1451.05,1206.93 1451.64,1206.93 1452.22,1206.93 1452.81,1206.93 1453.4,1206.93 1453.98,1206.93 1454.57,1206.93 1455.16,1206.93 1455.74,1206.93 1456.33,1206.93 1456.91,1206.93 1457.5,1206.93 1458.09,1206.93 1458.67,1206.93 1459.26,1206.93 1459.85,1206.93 1460.43,1206.93 1461.02,1206.93 1461.61,1206.93 1462.19,1206.93 1462.78,1206.93 1463.37,1206.93 1463.95,1206.93 1464.54,1206.93 1465.12,1206.93 1465.71,1206.93 1466.3,1206.93 1466.88,1206.93 1467.47,1206.93 1468.06,1206.93 1468.64,1206.93 1469.23,1206.93 1469.82,1206.93 1470.4,1206.93 1470.99,1206.93 1471.57,1206.93 1472.16,1206.93 1472.75,1206.93 1473.33,1206.93 1473.92,1206.93 1474.51,1206.93 1475.09,1206.93 1475.68,1206.93 1476.27,1206.93 1476.85,1206.93 1477.44,1206.93 1478.03,1206.93 1478.61,1206.93 1479.2,1206.93 1479.78,1206.93 1480.37,1206.93 1480.96,1206.93 1481.54,1206.93 1482.13,1206.93 1482.72,1206.93 1483.3,1206.93 1483.89,1206.93 1484.48,1206.93 1485.06,1206.93 1485.65,1206.93 1486.24,1206.93 1486.82,1206.93 1487.41,1206.93 1487.99,1206.93 1488.58,1206.93 1489.17,1206.93 1489.75,1206.93 1490.34,1206.93 1490.93,1206.93 1491.51,1206.93 1492.1,1206.93 1492.69,1206.93 1493.27,1206.93 1493.86,1206.93 1494.45,1206.93 1495.03,1206.93 1495.62,1206.93 1496.2,1206.93 1496.79,1206.93 1497.38,1206.93 1497.96,1206.93 1498.55,1206.93 1499.14,1206.93 1499.72,1206.93 1500.31,1206.93 1500.9,1206.93 1501.48,1206.93 1502.07,1206.93 1502.65,1206.93 1503.24,1206.93 1503.83,1206.93 1504.41,1206.93 1505,1206.93 1505.59,1206.93 1506.17,1206.93 1506.76,1206.93 1507.35,1206.93 1507.93,1206.93 1508.52,1206.93 1509.11,1206.93 1509.69,1206.93 1510.28,1206.93 1510.86,1206.93 1511.45,1206.93 1512.04,1206.93 1512.62,1206.93 1513.21,1206.93 1513.8,1206.93 1514.38,1206.93 1514.97,1206.93 1515.56,1206.93 1516.14,1206.93 1516.73,1206.93 1517.32,1206.93 1517.9,1206.93 1518.49,1206.93 1519.07,1206.93 1519.66,1206.93 1520.25,1206.93 1520.83,1206.93 1521.42,1206.93 1522.01,1206.93 1522.59,1206.93 1523.18,1206.93 1523.77,1206.93 1524.35,1206.93 1524.94,1206.93 1525.52,1206.93 1526.11,1206.93 1526.7,1206.93 1527.28,1206.93 1527.87,1206.93 1528.46,1206.93 1529.04,1206.93 1529.63,1206.93 1530.22,1206.93 1530.8,1206.93 1531.39,1206.93 1531.98,1206.93 1532.56,1206.93 1533.15,1206.93 1533.73,1206.93 1534.32,1206.93 1534.91,1206.93 1535.49,1206.93 1536.08,1206.93 1536.67,1206.93 1537.25,1206.93 1537.84,1206.93 1538.43,1206.93 1539.01,1206.93 1539.6,1206.93 1540.19,1206.93 1540.77,1206.93 1541.36,1206.93 1541.94,1206.93 1542.53,1206.93 1543.12,1206.93 1543.7,1206.93 1544.29,1206.93 1544.88,1206.93 1545.46,1206.93 1546.05,1206.93 1546.64,1206.93 1547.22,1206.93 1547.81,1206.93 1548.4,1206.93 1548.98,1206.93 1549.57,1206.93 1550.15,1206.93 1550.74,1206.93 1551.33,1206.93 1551.91,1206.93 1552.5,1206.93 1553.09,1206.93 1553.67,1206.93 1554.26,1206.93 1554.85,1206.93 1555.43,1206.93 1556.02,1206.93 1556.6,1206.93 1557.19,1206.93 1557.78,1206.93 1558.36,1206.93 1558.95,1206.93 1559.54,1206.93 1560.12,1206.93 1560.71,1206.93 1561.3,1206.93 1561.88,1206.93 1562.47,1206.93 1563.06,1206.93 1563.64,1206.93 1564.23,1206.93 1564.81,1206.93 1565.4,1206.93 1565.99,1206.93 1566.57,1206.93 1567.16,1206.93 1567.75,1206.93 1568.33,1206.93 1568.92,1206.93 1569.51,1206.93 1570.09,1206.93 1570.68,1206.93 1571.27,1206.93 1571.85,1206.93 1572.44,1206.93 1573.02,1206.93 1573.61,1206.93 1574.2,1206.93 1574.78,1206.93 1575.37,1206.93 1575.96,1206.93 1576.54,1206.93 1577.13,1206.93 1577.72,1206.93 1578.3,1206.93 1578.89,1206.93 1579.47,1206.93 1580.06,1206.93 1580.65,1206.93 1581.23,1206.93 1581.82,1206.93 1582.41,1206.93 1582.99,1206.93 1583.58,1206.93 1584.17,1206.93 1584.75,1206.93 1585.34,1206.93 1585.93,1206.93 1586.51,1206.93 1587.1,1206.93 1587.68,1206.93 1588.27,1206.93 1588.86,1206.93 1589.44,1206.93 1590.03,1206.93 1590.62,1206.93 1591.2,1206.93 1591.79,1206.93 1592.38,1206.93 1592.96,1206.93 1593.55,1206.93 1594.14,1206.93 1594.72,1206.93 1595.31,1206.93 1595.89,1206.93 1596.48,1206.93 1597.07,1206.93 1597.65,1206.93 1598.24,1206.93 1598.83,1206.93 1599.41,1206.93 1600,1206.93 1600.59,1206.93 1601.17,1206.93 1601.76,1206.93 1602.34,1206.93 1602.93,1206.93 1603.52,1206.93 1604.1,1206.93 1604.69,1206.93 1605.28,1206.93 1605.86,1206.93 1606.45,1206.93 1607.04,1206.93 1607.62,1206.93 1608.21,1206.93 1608.8,1206.93 1609.38,1206.93 1609.97,1206.93 1610.55,1206.93 1611.14,1206.93 1611.73,1206.93 1612.31,1206.93 1612.9,1206.93 1613.49,1206.93 1614.07,1206.93 1614.66,1206.93 1615.25,1206.93 1615.83,1206.93 1616.42,1206.93 1617.01,1206.93 1617.59,1206.93 1618.18,1206.93 1618.76,1206.93 1619.35,1206.93 1619.94,1206.93 1620.52,1206.93 1621.11,1206.93 1621.7,1206.93 1622.28,1206.93 1622.87,1206.93 1623.46,1206.93 1624.04,1206.93 1624.63,1206.93 1625.22,1206.93 1625.8,1206.93 1626.39,1206.93 1626.97,1206.93 1627.56,1206.93 1628.15,1206.93 1628.73,1206.93 1629.32,1206.93 1629.91,1206.93 1630.49,1206.93 1631.08,1206.93 1631.67,1206.93 1632.25,1206.93 1632.84,1206.93 1633.42,1206.93 1634.01,1206.93 1634.6,1206.93 1635.18,1206.93 1635.77,1206.93 1636.36,1206.93 1636.94,1206.93 1637.53,1206.93 1638.12,1206.93 1638.7,1206.93 1639.29,1206.93 1639.88,1206.93 1640.46,1206.93 1641.05,1206.93 1641.63,1206.93 1642.22,1206.93 1642.81,1206.93 1643.39,1206.93 1643.98,1206.93 1644.57,1206.93 1645.15,1206.93 1645.74,1206.93 1646.33,1206.93 1646.91,1206.93 1647.5,1206.93 1648.09,1206.93 1648.67,1206.93 1649.26,1206.93 1649.84,1206.93 1650.43,1206.93 1651.02,1206.93 1651.6,1206.93 1652.19,1206.93 1652.78,1206.93 1653.36,1206.93 1653.95,1206.93 1654.54,1206.93 1655.12,1206.93 1655.71,1206.93 1656.29,1206.93 1656.88,1206.93 1657.47,1206.93 1658.05,1206.93 1658.64,1206.93 1659.23,1206.93 1659.81,1206.93 1660.4,1206.93 1660.99,1206.93 1661.57,1206.93 1662.16,1206.93 1662.75,1206.93 1663.33,1206.93 1663.92,1206.93 1664.5,1206.93 1665.09,1206.93 1665.68,1206.93 1666.26,1206.93 1666.85,1206.93 1667.44,1206.93 1668.02,1206.93 1668.61,1206.93 1669.2,1206.93 1669.78,1206.93 1670.37,1206.93 1670.96,1206.93 1671.54,1206.93 1672.13,1206.93 1672.71,1206.93 1673.3,1206.93 1673.89,1206.93 1674.47,1206.93 1675.06,1206.93 1675.65,1206.93 1676.23,1206.93 1676.82,1206.93 1677.41,1206.93 1677.99,1206.93 1678.58,1206.93 1679.17,1206.93 1679.75,1206.93 1680.34,1206.93 1680.92,1206.93 1681.51,1206.93 1682.1,1206.93 1682.68,1206.93 1683.27,1206.93 1683.86,1206.93 1684.44,1206.93 1685.03,1206.93 1685.62,1206.93 1686.2,1206.93 1686.79,1206.93 1687.37,1206.93 1687.96,1206.93 1688.55,1206.93 1689.13,1206.93 1689.72,1206.93 1690.31,1206.93 1690.89,1206.93 1691.48,1206.93 1692.07,1206.93 1692.65,1206.93 1693.24,1206.93 1693.83,1206.93 1694.41,1206.93 1695,1206.93 1695.58,1206.93 1696.17,1206.93 1696.76,1206.93 1697.34,1206.93 1697.93,1206.93 1698.52,1206.93 1699.1,1206.93 1699.69,1206.93 1700.28,1206.93 1700.86,1206.93 1701.45,1206.93 1702.04,1206.93 1702.62,1206.93 1703.21,1206.93 1703.79,1206.93 1704.38,1206.93 1704.97,1206.93 1705.55,1206.93 1706.14,1206.93 1706.73,1206.93 1707.31,1206.93 1707.9,1206.93 1708.49,1206.93 1709.07,1206.93 1709.66,1206.93 1710.24,1206.93 1710.83,1206.93 1711.42,1206.93 1712,1206.93 1712.59,1206.93 1713.18,1206.93 1713.76,1206.93 1714.35,1206.93 1714.94,1206.93 1715.52,1206.93 1716.11,1206.93 1716.7,1206.93 1717.28,1206.93 1717.87,1206.93 1718.45,1206.93 1719.04,1206.93 1719.63,1206.93 1720.21,1206.93 1720.8,1206.93 1721.39,1206.93 1721.97,1206.93 1722.56,1206.93 1723.15,1206.93 1723.73,1206.93 1724.32,1206.93 1724.91,1206.93 1725.49,1206.93 1726.08,1206.93 1726.66,1206.93 1727.25,1206.93 1727.84,1206.93 1728.42,1206.93 1729.01,1206.93 1729.6,1206.93 1730.18,1206.93 1730.77,1206.93 1731.36,1206.93 1731.94,1206.93 1732.53,1206.93 1733.11,1206.93 1733.7,1206.93 1734.29,1206.93 1734.87,1206.93 1735.46,1206.93 1736.05,1206.93 1736.63,1206.93 1737.22,1206.93 1737.81,1206.93 1738.39,1206.93 1738.98,1206.93 1739.57,1206.93 1740.15,1206.93 1740.74,1206.93 1741.32,1206.93 1741.91,1206.93 1742.5,1206.93 1743.08,1206.93 1743.67,1206.93 1744.26,1206.93 1744.84,1206.93 1745.43,1206.93 1746.02,1206.93 1746.6,1206.93 1747.19,1206.93 1747.78,1206.93 1748.36,1206.93 1748.95,1206.93 1749.53,1206.93 1750.12,1206.93 1750.71,1206.93 1751.29,1206.93 1751.88,1206.93 1752.47,1206.93 1753.05,1206.93 1753.64,1206.93 1754.23,1206.93 1754.81,1206.93 1755.4,1206.93 1755.99,1206.93 1756.57,1206.93 1757.16,1206.93 1757.74,1206.93 1758.33,1206.93 1758.92,1206.93 1759.5,1206.93 1760.09,1206.93 1760.68,1206.93 1761.26,1206.93 1761.85,1206.93 1762.44,1206.93 1763.02,1206.93 1763.61,1206.93 1764.19,1206.93 1764.78,1206.93 1765.37,1206.93 1765.95,1206.93 1766.54,1206.93 1767.13,1206.93 1767.71,1206.93 1768.3,1206.93 1768.89,1206.93 1769.47,1206.93 1770.06,1206.93 1770.65,1206.93 1771.23,1206.93 1771.82,1206.93 1772.4,1206.93 1772.99,1206.93 1773.58,1206.93 1774.16,1206.93 1774.75,1206.93 1775.34,1206.93 1775.92,1206.93 1776.51,1206.93 1777.1,1206.93 1777.68,1206.93 1778.27,1206.93 1778.86,1206.93 1779.44,1206.93 1780.03,1206.93 1780.61,1206.93 1781.2,1206.93 1781.79,1206.93 1782.37,1206.93 1782.96,1206.93 1783.55,1206.93 1784.13,1206.93 1784.72,1206.93 1785.31,1206.93 1785.89,1206.93 1786.48,1206.93 1787.06,1206.93 1787.65,1206.93 1788.24,1206.93 1788.82,1206.93 1789.41,1206.93 1790,1206.93 1790.58,1206.93 1791.17,1206.93 1791.76,1206.93 1792.34,1206.93 1792.93,1206.93 1793.52,1206.93 1794.1,1206.93 1794.69,1206.93 1795.27,1206.93 1795.86,1206.93 1796.45,1206.93 1797.03,1206.93 1797.62,1206.93 1798.21,1206.93 1798.79,1206.93 1799.38,1206.93 1799.97,1206.93 1800.55,1206.93 1801.14,1206.93 1801.73,1206.93 1802.31,1206.93 1802.9,1206.93 1803.48,1206.93 1804.07,1206.93 1804.66,1206.93 1805.24,1206.93 1805.83,1206.93 1806.42,1206.93 1807,1206.93 1807.59,1206.93 1808.18,1206.93 1808.76,1206.93 1809.35,1206.93 1809.94,1206.93 1810.52,1206.93 1811.11,1206.93 1811.69,1206.93 1812.28,1206.93 1812.87,1206.93 1813.45,1206.93 1814.04,1206.93 1814.63,1206.93 1815.21,1206.93 1815.8,1206.93 1816.39,1206.93 1816.97,1206.93 1817.56,1206.93 1818.14,1206.93 1818.73,1206.93 1819.32,1206.93 1819.9,1206.93 1820.49,1206.93 1821.08,1206.93 1821.66,1206.93 1822.25,1206.93 1822.84,1206.93 1823.42,1206.93 1824.01,1206.93 1824.6,1206.93 1825.18,1206.93 1825.77,1206.93 1826.35,1206.93 1826.94,1206.93 1827.53,1206.93 1828.11,1206.93 1828.7,1206.93 1829.29,1206.93 1829.87,1206.93 1830.46,1206.93 1831.05,1206.93 1831.63,1206.93 1832.22,1206.93 1832.81,1206.93 1833.39,1206.93 1833.98,1206.93 1834.56,1206.93 1835.15,1206.93 1835.74,1206.93 1836.32,1206.93 1836.91,1206.93 1837.5,1206.93 1838.08,1206.93 1838.67,1206.93 1839.26,1206.93 1839.84,1206.93 1840.43,1206.93 1841.01,1206.93 1841.6,1206.93 1842.19,1206.93 1842.77,1206.93 1843.36,1206.93 1843.95,1206.93 1844.53,1206.93 1845.12,1206.93 1845.71,1206.93 1846.29,1206.93 1846.88,1206.93 1847.47,1206.93 1848.05,1206.93 1848.64,1206.93 1849.22,1206.93 1849.81,1206.93 1850.4,1206.93 1850.98,1206.93 1851.57,1206.93 1852.16,1206.93 1852.74,1206.93 1853.33,1206.93 1853.92,1206.93 1854.5,1206.93 1855.09,1206.93 1855.68,1206.93 1856.26,1206.93 1856.85,1206.93 1857.43,1206.93 1858.02,1206.93 1858.61,1206.93 1859.19,1206.93 1859.78,1206.93 1860.37,1206.93 1860.95,1206.93 1861.54,1206.93 1862.13,1206.93 1862.71,1206.93 1863.3,1206.93 1863.88,1206.93 1864.47,1206.93 1865.06,1206.93 1865.64,1206.93 1866.23,1206.93 1866.82,1206.93 1867.4,1206.93 1867.99,1206.93 1868.58,1206.93 1869.16,1206.93 1869.75,1206.93 1870.34,1206.93 1870.92,1206.93 1871.51,1206.93 1872.09,1206.93 1872.68,1206.93 1873.27,1206.93 1873.85,1206.93 1874.44,1206.93 1875.03,1206.93 1875.61,1206.93 1876.2,1206.93 1876.79,1206.93 1877.37,1206.93 1877.96,1206.93 1878.55,1206.93 1879.13,1206.93 1879.72,1206.93 1880.3,1206.93 1880.89,1206.93 1881.48,1206.93 1882.06,1206.93 1882.65,1206.93 1883.24,1206.93 1883.82,1206.93 1884.41,1206.93 1885,1206.93 1885.58,1206.93 1886.17,1206.93 1886.76,1206.93 1887.34,1206.93 1887.93,1206.93 1888.51,1206.93 1889.1,1206.93 1889.69,1206.93 1890.27,1206.93 1890.86,1206.93 1891.45,1206.93 1892.03,1206.93 1892.62,1206.93 1893.21,1206.93 1893.79,1206.93 1894.38,1206.93 1894.96,1206.93 1895.55,1206.93 1896.14,1206.93 1896.72,1206.93 1897.31,1206.93 1897.9,1206.93 1898.48,1206.93 1899.07,1206.93 1899.66,1206.93 1900.24,1206.93 1900.83,1206.93 1901.42,1206.93 1902,1206.93 1902.59,1206.93 1903.17,1206.93 1903.76,1206.93 1904.35,1206.93 1904.93,1206.93 1905.52,1206.93 1906.11,1206.93 1906.69,1206.93 1907.28,1206.93 1907.87,1206.93 1908.45,1206.93 1909.04,1206.93 1909.63,1206.93 1910.21,1206.93 1910.8,1206.93 1911.38,1206.93 1911.97,1206.93 1912.56,1206.93 1913.14,1206.93 1913.73,1206.93 1914.32,1206.93 1914.9,1206.93 1915.49,1206.93 1916.08,1206.93 1916.66,1206.93 1917.25,1206.93 1917.83,1206.93 1918.42,1206.93 1919.01,1206.93 1919.59,1206.93 1920.18,1206.93 1920.77,1206.93 1921.35,1206.93 1921.94,1206.93 1922.53,1206.93 1923.11,1206.93 1923.7,1206.93 1924.29,1206.93 1924.87,1206.93 1925.46,1206.93 1926.04,1206.93 1926.63,1206.93 1927.22,1206.93 1927.8,1206.93 1928.39,1206.93 1928.98,1206.93 1929.56,1206.93 1930.15,1206.93 1930.74,1206.93 1931.32,1206.93 1931.91,1206.93 1932.5,1206.93 1933.08,1206.93 1933.67,1206.93 1934.25,1206.93 1934.84,1206.93 1935.43,1206.93 1936.01,1206.93 1936.6,1206.93 1937.19,1206.93 1937.77,1206.93 1938.36,1206.93 1938.95,1206.93 1939.53,1206.93 1940.12,1206.93 1940.71,1206.93 1941.29,1206.93 1941.88,1206.93 1942.46,1206.93 1943.05,1206.93 1943.64,1206.93 1944.22,1206.93 1944.81,1206.93 1945.4,1206.93 1945.98,1206.93 1946.57,1206.93 1947.16,1206.93 1947.74,1206.93 1948.33,1206.93 1948.91,1206.93 1949.5,1206.93 1950.09,1206.93 1950.67,1206.93 1951.26,1206.93 1951.85,1206.93 1952.43,1206.93 1953.02,1206.93 1953.61,1206.93 1954.19,1206.93 1954.78,1206.93 1955.37,1206.93 1955.95,1206.93 1956.54,1206.93 1957.12,1206.93 1957.71,1206.93 1958.3,1206.93 1958.88,1206.93 1959.47,1206.93 1960.06,1206.93 1960.64,1206.93 1961.23,1206.93 1961.82,1206.93 1962.4,1206.93 1962.99,1206.93 1963.58,1206.93 1964.16,1206.93 1964.75,1206.93 1965.33,1206.93 1965.92,1206.93 1966.51,1206.93 1967.09,1206.93 1967.68,1206.93 1968.27,1206.93 1968.85,1206.93 1969.44,1206.93 1970.03,1206.93 1970.61,1206.93 1971.2,1206.93 1971.78,1206.93 1972.37,1206.93 1972.96,1206.93 1973.54,1206.93 1974.13,1206.93 1974.72,1206.93 1975.3,1206.93 1975.89,1206.93 1976.48,1206.93 1977.06,1206.93 1977.65,1206.93 1978.24,1206.93 1978.82,1206.93 1979.41,1206.93 1979.99,1206.93 1980.58,1206.93 1981.17,1206.93 1981.75,1206.93 1982.34,1206.93 1982.93,1206.93 1983.51,1206.93 1984.1,1206.93 1984.69,1206.93 1985.27,1206.93 1985.86,1206.93 1986.45,1206.93 1987.03,1206.93 1987.62,1206.93 1988.2,1206.93 1988.79,1206.93 1989.38,1206.93 1989.96,1206.93 1990.55,1206.93 1991.14,1206.93 1991.72,1206.93 1992.31,1206.93 1992.9,1206.93 1993.48,1206.93 1994.07,1206.93 1994.65,1206.93 1995.24,1206.93 1995.83,1206.93 1996.41,1206.93 1997,1206.93 1997.59,1206.93 1998.17,1206.93 1998.76,1206.93 1999.35,1206.93 1999.93,1206.93 2000.52,1206.93 2001.11,1206.93 2001.69,1206.93 2002.28,1206.93 2002.86,1206.93 2003.45,1206.93 2004.04,1206.93 2004.62,1206.93 2005.21,1206.93 2005.8,1206.93 2006.38,1206.93 2006.97,1206.93 2007.56,1206.93 2008.14,1206.93 2008.73,1206.93 2009.32,1206.93 2009.9,1206.93 2010.49,1206.93 2011.07,1206.93 2011.66,1206.93 2012.25,1206.93 2012.83,1206.93 2013.42,1206.93 2014.01,1206.93 2014.59,1206.93 2015.18,1206.93 2015.77,1206.93 2016.35,1206.93 2016.94,1206.93 2017.53,1206.93 2018.11,1206.93 2018.7,1206.93 2019.28,1206.93 2019.87,1206.93 2020.46,1206.93 2021.04,1206.93 2021.63,1206.93 2022.22,1206.93 2022.8,1206.93 2023.39,1206.93 2023.98,1206.93 2024.56,1206.93 2025.15,1206.93 2025.73,1206.93 2026.32,1206.93 2026.91,1206.93 2027.49,1206.93 2028.08,1206.93 2028.67,1206.93 2029.25,1206.93 2029.84,1206.93 2030.43,1206.93 2031.01,1206.93 2031.6,1206.93 2032.19,1206.93 2032.77,1206.93 2033.36,1206.93 2033.94,1206.93 2034.53,1206.93 2035.12,1206.93 2035.7,1206.93 2036.29,1206.93 2036.88,1206.93 2037.46,1206.93 2038.05,1206.93 2038.64,1206.93 2039.22,1206.93 2039.81,1206.93 2040.4,1206.93 2040.98,1206.93 2041.57,1206.93 2042.15,1206.93 2042.74,1206.93 2043.33,1206.93 2043.91,1206.93 2044.5,1206.93 2045.09,1206.93 2045.67,1206.93 2046.26,1206.93 2046.85,1206.93 2047.43,1206.93 2048.02,1206.93 2048.6,1206.93 2049.19,1206.93 2049.78,1206.93 2050.36,1206.93 2050.95,1206.93 2051.54,1206.93 2052.12,1206.93 2052.71,1206.93 2053.3,1206.93 2053.88,1206.93 2054.47,1206.93 2055.06,1206.93 2055.64,1206.93 2056.23,1206.93 2056.81,1206.93 2057.4,1206.93 2057.99,1206.93 2058.57,1206.93 2059.16,1206.93 2059.75,1206.93 2060.33,1206.93 2060.92,1206.93 2061.51,1206.93 2062.09,1206.93 2062.68,1206.93 2063.27,1206.93 2063.85,1206.93 2064.44,1206.93 2065.02,1206.93 2065.61,1206.93 2066.2,1206.93 2066.78,1206.93 2067.37,1206.93 2067.96,1206.93 2068.54,1206.93 2069.13,1206.93 2069.72,1206.93 2070.3,1206.93 2070.89,1206.93 2071.48,1206.93 2072.06,1206.93 2072.65,1206.93 2073.23,1206.93 2073.82,1206.93 2074.41,1206.93 2074.99,1206.93 2075.58,1206.93 2076.17,1206.93 2076.75,1206.93 2077.34,1206.93 2077.93,1206.93 2078.51,1206.93 2079.1,1206.93 2079.68,1206.93 2080.27,1206.93 2080.86,1206.93 2081.44,1206.93 2082.03,1206.93 2082.62,1206.93 2083.2,1206.93 2083.79,1206.93 2084.38,1206.93 2084.96,1206.93 2085.55,1206.93 2086.14,1206.93 2086.72,1206.93 2087.31,1206.93 2087.89,1206.93 2088.48,1206.93 2089.07,1206.93 2089.65,1206.93 2090.24,1206.93 2090.83,1206.93 2091.41,1206.93 2092,1206.93 2092.59,1206.93 2093.17,1206.93 2093.76,1206.93 2094.35,1206.93 2094.93,1206.93 2095.52,1206.93 2096.1,1206.93 2096.69,1206.93 2097.28,1206.93 2097.86,1206.93 2098.45,1206.93 2099.04,1206.93 2099.62,1206.93 2100.21,1206.93 2100.8,1206.93 2101.38,1206.93 2101.97,1206.93 2102.55,1206.93 2103.14,1206.93 2103.73,1206.93 2104.31,1206.93 2104.9,1206.93 2105.49,1206.93 2106.07,1206.93 2106.66,1206.93 2107.25,1206.93 2107.83,1206.93 2108.42,1206.93 2109.01,1206.93 2109.59,1206.93 2110.18,1206.93 2110.76,1206.93 2111.35,1206.93 2111.94,1206.93 2112.52,1206.93 2113.11,1206.93 2113.7,1206.93 2114.28,1206.93 2114.87,1206.93 2115.46,1206.93 2116.04,1206.93 2116.63,1206.93 2117.22,1206.93 2117.8,1206.93 2118.39,1206.93 2118.97,1206.93 2119.56,1206.93 2120.15,1206.93 2120.73,1206.93 2121.32,1206.93 2121.91,1206.93 2122.49,1206.93 2123.08,1206.93 2123.67,1206.93 2124.25,1206.93 2124.84,1206.93 2125.42,1206.93 2126.01,1206.93 2126.6,1206.93 2127.18,1206.93 2127.77,1206.93 2128.36,1206.93 2128.94,1206.93 2129.53,1206.93 2130.12,1206.93 2130.7,1206.93 2131.29,1206.93 2131.88,1206.93 2132.46,1206.93 2133.05,1206.93 2133.63,1206.93 2134.22,1206.93 2134.81,1206.93 2135.39,1206.93 2135.98,1206.93 2136.57,1206.93 2137.15,1206.93 2137.74,1206.93 2138.33,1206.93 2138.91,1206.93 2139.5,1206.93 2140.09,1206.93 2140.67,1206.93 2141.26,1206.93 2141.84,1206.93 2142.43,1206.93 2143.02,1206.93 2143.6,1206.93 2144.19,1206.93 2144.78,1206.93 2145.36,1206.93 2145.95,1206.93 2146.54,1206.93 2147.12,1206.93 2147.71,1206.93 2148.3,1206.93 2148.88,1206.93 2149.47,1206.93 2150.05,1206.93 2150.64,1206.93 2151.23,1206.93 2151.81,1206.93 2152.4,1206.93 2152.99,1206.93 2153.57,1206.93 2154.16,1206.93 2154.75,1206.93 2155.33,1206.93 2155.92,1206.93 2156.5,1206.93 2157.09,1206.93 2157.68,1206.93 2158.26,1206.93 \"/>\n<path clip-path=\"url(#clip962)\" d=\"M986.025 1206.78 L986.612 1206.78 L987.198 1206.78 L987.785 1206.78 L988.371 1206.78 L988.957 1206.78 L989.544 1206.78 L990.13 1206.78 L990.717 1206.78 L991.303 1206.78 L991.889 1206.78 L992.476 1206.78 L993.062 1206.78 L993.649 1206.78 L994.235 1206.78 L994.822 1206.78 L995.408 1206.78 L995.994 1206.78 L996.581 1206.78 L997.167 1206.78 L997.754 1206.78 L998.34 1206.78 L998.926 1206.78 L999.513 1206.78 L1000.1 1206.78 L1000.69 1206.78 L1001.27 1206.78 L1001.86 1206.78 L1002.44 1206.78 L1003.03 1206.78 L1003.62 1206.78 L1004.2 1206.78 L1004.79 1206.78 L1005.38 1206.78 L1005.96 1206.78 L1006.55 1206.78 L1007.14 1206.78 L1007.72 1206.78 L1008.31 1206.78 L1008.9 1206.78 L1009.48 1206.78 L1010.07 1206.78 L1010.65 1206.78 L1011.24 1206.78 L1011.83 1206.78 L1012.41 1206.78 L1013 1206.78 L1013.59 1206.78 L1014.17 1206.78 L1014.76 1206.78 L1015.35 1206.78 L1015.93 1206.78 L1016.52 1206.78 L1017.11 1206.78 L1017.69 1206.78 L1018.28 1206.78 L1018.86 1206.78 L1019.45 1206.78 L1020.04 1206.78 L1020.62 1206.78 L1021.21 1206.78 L1021.8 1206.78 L1022.38 1206.78 L1022.97 1206.78 L1023.56 1206.78 L1024.14 1206.78 L1024.73 1206.78 L1025.32 1206.78 L1025.9 1206.78 L1026.49 1206.78 L1027.07 1206.78 L1027.66 1206.78 L1028.25 1206.78 L1028.83 1206.78 L1029.42 1206.78 L1030.01 1206.78 L1030.59 1206.78 L1031.18 1206.78 L1031.77 1206.78 L1032.35 1206.78 L1032.94 1206.78 L1033.52 1206.78 L1034.11 1206.78 L1034.7 1206.78 L1035.28 1206.78 L1035.87 1206.78 L1036.46 1206.78 L1037.04 1206.78 L1037.63 1206.78 L1038.22 1206.78 L1038.8 1206.78 L1039.39 1206.78 L1039.98 1206.78 L1040.56 1206.78 L1041.15 1206.78 L1041.73 1206.78 L1042.32 1206.78 L1042.91 1206.78 L1043.49 1206.78 L1044.08 1206.78 L1044.67 1206.78 L1045.25 1206.78 L1045.84 1206.78 L1046.43 1206.78 L1047.01 1206.78 L1047.6 1206.78 L1048.19 1206.78 L1048.77 1206.78 L1049.36 1206.78 L1049.94 1206.78 L1050.53 1206.78 L1051.12 1206.78 L1051.7 1206.78 L1052.29 1206.78 L1052.88 1206.78 L1053.46 1206.78 L1054.05 1206.78 L1054.64 1206.78 L1055.22 1206.78 L1055.81 1206.78 L1056.39 1206.78 L1056.98 1206.78 L1057.57 1206.78 L1058.15 1206.78 L1058.74 1206.78 L1059.33 1206.78 L1059.91 1206.78 L1060.5 1206.78 L1061.09 1206.78 L1061.67 1206.78 L1062.26 1206.78 L1062.85 1206.78 L1063.43 1206.78 L1064.02 1206.78 L1064.6 1206.78 L1065.19 1206.78 L1065.78 1206.78 L1066.36 1206.78 L1066.95 1206.78 L1067.54 1206.78 L1068.12 1206.78 L1068.71 1206.78 L1069.3 1206.78 L1069.88 1206.78 L1070.47 1206.78 L1071.06 1206.78 L1071.64 1206.78 L1072.23 1206.78 L1072.81 1206.78 L1073.4 1206.78 L1073.99 1206.78 L1074.57 1206.78 L1075.16 1206.78 L1075.75 1206.78 L1076.33 1206.78 L1076.92 1206.78 L1077.51 1206.78 L1078.09 1206.78 L1078.68 1206.78 L1079.26 1206.78 L1079.85 1206.78 L1080.44 1206.78 L1081.02 1206.78 L1081.61 1206.78 L1082.2 1206.78 L1082.78 1206.78 L1083.37 1206.78 L1083.96 1206.78 L1084.54 1206.78 L1085.13 1206.78 L1085.72 1206.78 L1086.3 1206.78 L1086.89 1206.78 L1087.47 1206.78 L1088.06 1206.78 L1088.65 1206.78 L1089.23 1206.78 L1089.82 1206.78 L1090.41 1206.78 L1090.99 1206.78 L1091.58 1206.78 L1092.17 1206.78 L1092.75 1206.78 L1093.34 1206.78 L1093.93 1206.78 L1094.51 1206.78 L1095.1 1206.78 L1095.68 1206.78 L1096.27 1206.78 L1096.86 1206.78 L1097.44 1206.78 L1098.03 1206.78 L1098.62 1206.78 L1099.2 1206.78 L1099.79 1206.78 L1100.38 1206.78 L1100.96 1206.78 L1101.55 1206.78 L1102.14 1206.78 L1102.72 1206.78 L1103.31 1206.78 L1103.89 1206.78 L1104.48 1206.78 L1105.07 1206.78 L1105.65 1206.78 L1106.24 1206.78 L1106.83 1206.78 L1107.41 1206.78 L1108 1206.78 L1108.59 1206.78 L1109.17 1206.78 L1109.76 1206.78 L1110.34 1206.78 L1110.93 1206.78 L1111.52 1206.78 L1112.1 1206.78 L1112.69 1206.78 L1113.28 1206.78 L1113.86 1206.78 L1114.45 1206.78 L1115.04 1206.78 L1115.62 1206.78 L1116.21 1206.78 L1116.8 1206.78 L1117.38 1206.78 L1117.97 1206.78 L1118.55 1206.78 L1119.14 1206.78 L1119.73 1206.78 L1120.31 1206.78 L1120.9 1206.78 L1121.49 1206.78 L1122.07 1206.78 L1122.66 1206.78 L1123.25 1206.78 L1123.83 1206.78 L1124.42 1206.78 L1125.01 1206.78 L1125.59 1206.78 L1126.18 1206.78 L1126.76 1206.78 L1127.35 1206.78 L1127.94 1206.78 L1128.52 1206.78 L1129.11 1206.78 L1129.7 1206.78 L1130.28 1206.78 L1130.87 1206.78 L1131.46 1206.78 L1132.04 1206.78 L1132.63 1206.78 L1133.21 1206.78 L1133.8 1206.78 L1134.39 1206.78 L1134.97 1206.78 L1135.56 1206.78 L1136.15 1206.78 L1136.73 1206.78 L1137.32 1206.78 L1137.91 1206.78 L1138.49 1206.78 L1139.08 1206.78 L1139.67 1206.78 L1140.25 1206.78 L1140.84 1206.78 L1141.42 1206.78 L1142.01 1206.78 L1142.6 1206.78 L1143.18 1206.78 L1143.77 1206.78 L1144.36 1206.78 L1144.94 1206.78 L1145.53 1206.78 L1146.12 1206.78 L1146.7 1206.78 L1147.29 1206.78 L1147.88 1206.78 L1148.46 1206.78 L1149.05 1206.78 L1149.63 1206.78 L1150.22 1206.78 L1150.81 1206.78 L1151.39 1206.78 L1151.98 1206.78 L1152.57 1206.78 L1153.15 1206.78 L1153.74 1206.78 L1154.33 1206.78 L1154.91 1206.78 L1155.5 1206.78 L1156.09 1206.78 L1156.67 1206.78 L1157.26 1206.78 L1157.84 1206.78 L1158.43 1206.78 L1159.02 1206.78 L1159.6 1206.78 L1160.19 1206.78 L1160.78 1206.78 L1161.36 1206.78 L1161.95 1206.78 L1162.54 1206.78 L1163.12 1206.78 L1163.71 1206.78 L1164.29 1206.78 L1164.88 1206.78 L1165.47 1206.78 L1166.05 1206.78 L1166.64 1206.78 L1167.23 1206.78 L1167.81 1206.78 L1168.4 1206.78 L1168.99 1206.78 L1169.57 1206.78 L1170.16 1206.78 L1170.75 1206.78 L1171.33 1206.78 L1171.92 1206.78 L1172.5 1206.78 L1173.09 1206.78 L1173.68 1206.78 L1174.26 1206.78 L1174.85 1206.78 L1175.44 1206.78 L1176.02 1206.78 L1176.61 1206.78 L1177.2 1206.78 L1177.78 1206.78 L1178.37 1206.78 L1178.96 1206.78 L1179.54 1206.78 L1180.13 1206.78 L1180.71 1206.78 L1181.3 1206.78 L1181.89 1206.78 L1182.47 1206.78 L1183.06 1206.78 L1183.65 1206.78 L1184.23 1206.78 L1184.82 1206.78 L1185.41 1206.78 L1185.99 1206.78 L1186.58 1206.78 L1187.16 1206.78 L1187.75 1206.78 L1188.34 1206.78 L1188.92 1206.78 L1189.51 1206.78 L1190.1 1206.78 L1190.68 1206.78 L1191.27 1206.78 L1191.86 1206.78 L1192.44 1206.78 L1193.03 1206.78 L1193.62 1206.78 L1194.2 1206.78 L1194.79 1206.78 L1195.37 1206.78 L1195.96 1206.78 L1196.55 1206.78 L1197.13 1206.78 L1197.72 1206.78 L1198.31 1206.78 L1198.89 1206.78 L1199.48 1206.78 L1200.07 1206.78 L1200.65 1206.78 L1201.24 1206.78 L1201.83 1206.78 L1202.41 1206.78 L1203 1206.78 L1203.58 1206.78 L1204.17 1206.78 L1204.76 1206.78 L1205.34 1206.78 L1205.93 1206.78 L1206.52 1206.78 L1207.1 1206.78 L1207.69 1206.78 L1208.28 1206.78 L1208.86 1206.78 L1209.45 1206.78 L1210.03 1206.78 L1210.62 1206.78 L1211.21 1206.78 L1211.79 1206.78 L1212.38 1206.78 L1212.97 1206.78 L1213.55 1206.78 L1214.14 1206.78 L1214.73 1206.78 L1215.31 1206.78 L1215.9 1206.78 L1216.49 1206.78 L1217.07 1206.78 L1217.66 1206.78 L1218.24 1206.78 L1218.83 1206.78 L1219.42 1206.78 L1220 1206.78 L1220.59 1206.78 L1221.18 1206.78 L1221.76 1206.78 L1222.35 1206.78 L1222.94 1206.78 L1223.52 1206.78 L1224.11 1206.78 L1224.7 1206.78 L1225.28 1206.78 L1225.87 1206.78 L1226.45 1206.78 L1227.04 1206.78 L1227.63 1206.78 L1228.21 1206.78 L1228.8 1206.78 L1229.39 1206.78 L1229.97 1206.78 L1230.56 1206.78 L1231.15 1206.78 L1231.73 1206.78 L1232.32 1206.78 L1232.91 1206.78 L1233.49 1206.78 L1234.08 1206.78 L1234.66 1206.78 L1235.25 1206.78 L1235.84 1206.78 L1236.42 1206.78 L1237.01 1206.78 L1237.6 1206.78 L1238.18 1206.78 L1238.77 1206.78 L1239.36 1206.78 L1239.94 1206.78 L1240.53 1206.78 L1241.11 1206.78 L1241.7 1206.78 L1242.29 1206.78 L1242.87 1206.78 L1243.46 1206.78 L1244.05 1206.78 L1244.63 1206.78 L1245.22 1206.78 L1245.81 1206.78 L1246.39 1206.78 L1246.98 1206.78 L1247.57 1206.78 L1248.15 1206.78 L1248.74 1206.78 L1249.32 1206.78 L1249.91 1206.78 L1250.5 1206.78 L1251.08 1206.78 L1251.67 1206.78 L1252.26 1206.78 L1252.84 1206.78 L1253.43 1206.78 L1254.02 1206.78 L1254.6 1206.78 L1255.19 1206.78 L1255.78 1206.78 L1256.36 1206.78 L1256.95 1206.78 L1257.53 1206.78 L1258.12 1206.78 L1258.71 1206.78 L1259.29 1206.78 L1259.88 1206.78 L1260.47 1206.78 L1261.05 1206.78 L1261.64 1206.78 L1262.23 1206.78 L1262.81 1206.78 L1263.4 1206.78 L1263.98 1206.78 L1264.57 1206.78 L1265.16 1206.78 L1265.74 1206.78 L1266.33 1206.78 L1266.92 1206.78 L1267.5 1206.78 L1268.09 1206.78 L1268.68 1206.78 L1269.26 1206.78 L1269.85 1206.78 L1270.44 1206.78 L1271.02 1206.78 L1271.61 1206.78 L1272.19 1206.78 L1272.78 1206.78 L1273.37 1206.78 L1273.95 1206.78 L1274.54 1206.78 L1275.13 1206.78 L1275.71 1206.78 L1276.3 1206.78 L1276.89 1206.78 L1277.47 1206.78 L1278.06 1206.78 L1278.65 1206.78 L1279.23 1206.78 L1279.82 1206.78 L1280.4 1206.78 L1280.99 1206.78 L1281.58 1206.78 L1282.16 1206.78 L1282.75 1206.78 L1283.34 1206.78 L1283.92 1206.78 L1284.51 1206.78 L1285.1 1206.78 L1285.68 1206.78 L1286.27 1206.78 L1286.86 1206.78 L1287.44 1206.78 L1288.03 1206.78 L1288.61 1206.78 L1289.2 1206.78 L1289.79 1206.78 L1290.37 1206.78 L1290.96 1206.78 L1291.55 1206.78 L1292.13 1206.78 L1292.72 1206.78 L1293.31 1206.78 L1293.89 1206.78 L1294.48 1206.78 L1295.06 1206.78 L1295.65 1206.78 L1296.24 1206.78 L1296.82 1206.78 L1297.41 1206.78 L1298 1206.78 L1298.58 1206.78 L1299.17 1206.78 L1299.76 1206.78 L1300.34 1206.78 L1300.93 1206.78 L1301.52 1206.78 L1302.1 1206.78 L1302.69 1206.78 L1303.27 1206.78 L1303.86 1206.78 L1304.45 1206.78 L1305.03 1206.78 L1305.62 1206.78 L1306.21 1206.78 L1306.79 1206.78 L1307.38 1206.78 L1307.97 1206.78 L1308.55 1206.78 L1309.14 1206.78 L1309.73 1206.78 L1310.31 1206.78 L1310.9 1206.78 L1311.48 1206.78 L1312.07 1206.78 L1312.66 1206.78 L1313.24 1206.78 L1313.83 1206.78 L1314.42 1206.78 L1315 1206.78 L1315.59 1206.78 L1316.18 1206.78 L1316.76 1206.78 L1317.35 1206.78 L1317.93 1206.78 L1318.52 1206.78 L1319.11 1206.78 L1319.69 1206.78 L1320.28 1206.78 L1320.87 1206.78 L1321.45 1206.78 L1322.04 1206.78 L1322.63 1206.78 L1323.21 1206.78 L1323.8 1206.78 L1324.39 1206.78 L1324.97 1206.78 L1325.56 1206.78 L1326.14 1206.78 L1326.73 1206.78 L1327.32 1206.78 L1327.9 1206.78 L1328.49 1206.78 L1329.08 1206.78 L1329.66 1206.78 L1330.25 1206.78 L1330.84 1206.78 L1331.42 1206.78 L1332.01 1206.78 L1332.6 1206.78 L1333.18 1206.78 L1333.77 1206.78 L1334.35 1206.78 L1334.94 1206.78 L1335.53 1206.78 L1336.11 1206.78 L1336.7 1206.78 L1337.29 1206.78 L1337.87 1206.78 L1338.46 1206.78 L1339.05 1206.78 L1339.63 1206.78 L1340.22 1206.78 L1340.8 1206.78 L1341.39 1206.78 L1341.98 1206.78 L1342.56 1206.78 L1343.15 1206.78 L1343.74 1206.78 L1344.32 1206.78 L1344.91 1206.78 L1345.5 1206.78 L1346.08 1206.78 L1346.67 1206.78 L1347.26 1206.78 L1347.84 1206.78 L1348.43 1206.78 L1349.01 1206.78 L1349.6 1206.78 L1350.19 1206.78 L1350.77 1206.78 L1351.36 1206.78 L1351.95 1206.78 L1352.53 1206.78 L1353.12 1206.78 L1353.71 1206.78 L1354.29 1206.78 L1354.88 1206.78 L1355.47 1206.78 L1356.05 1206.78 L1356.64 1206.78 L1357.22 1206.78 L1357.81 1206.78 L1358.4 1206.78 L1358.98 1206.78 L1359.57 1206.78 L1360.16 1206.78 L1360.74 1206.78 L1361.33 1206.78 L1361.92 1206.78 L1362.5 1206.78 L1363.09 1206.78 L1363.68 1206.78 L1364.26 1206.78 L1364.85 1206.78 L1365.43 1206.78 L1366.02 1206.78 L1366.61 1206.78 L1367.19 1206.78 L1367.78 1206.78 L1368.37 1206.78 L1368.95 1206.78 L1369.54 1206.78 L1370.13 1206.78 L1370.71 1206.78 L1371.3 1206.78 L1371.88 1206.78 L1372.47 1206.78 L1373.06 1206.78 L1373.64 1206.78 L1374.23 1206.78 L1374.82 1206.78 L1375.4 1206.78 L1375.99 1206.78 L1376.58 1206.78 L1377.16 1206.78 L1377.75 1206.78 L1378.34 1206.78 L1378.92 1206.78 L1379.51 1206.78 L1380.09 1206.78 L1380.68 1206.78 L1381.27 1206.78 L1381.85 1206.78 L1382.44 1206.78 L1383.03 1206.78 L1383.61 1206.78 L1384.2 1206.78 L1384.79 1206.78 L1385.37 1206.78 L1385.96 1206.78 L1386.55 1206.78 L1387.13 1206.78 L1387.72 1206.78 L1388.3 1206.78 L1388.89 1206.78 L1389.48 1206.78 L1390.06 1206.78 L1390.65 1206.78 L1391.24 1206.78 L1391.82 1206.78 L1392.41 1206.78 L1393 1206.78 L1393.58 1206.78 L1394.17 1206.78 L1394.75 1206.78 L1395.34 1206.78 L1395.93 1206.78 L1396.51 1206.78 L1397.1 1206.78 L1397.69 1206.78 L1398.27 1206.78 L1398.86 1206.78 L1399.45 1206.78 L1400.03 1206.78 L1400.62 1206.78 L1401.21 1206.78 L1401.79 1206.78 L1402.38 1206.78 L1402.96 1206.78 L1403.55 1206.78 L1404.14 1206.78 L1404.72 1206.78 L1405.31 1206.78 L1405.9 1206.78 L1406.48 1206.78 L1407.07 1206.78 L1407.66 1206.78 L1408.24 1206.78 L1408.83 1206.78 L1409.42 1206.78 L1410 1206.78 L1410.59 1206.78 L1411.17 1206.78 L1411.76 1206.78 L1412.35 1206.78 L1412.93 1206.78 L1413.52 1206.78 L1414.11 1206.78 L1414.69 1206.78 L1415.28 1206.78 L1415.87 1206.78 L1416.45 1206.78 L1417.04 1206.78 L1417.63 1206.78 L1418.21 1206.78 L1418.8 1206.78 L1419.38 1206.78 L1419.97 1206.78 L1420.56 1206.78 L1421.14 1206.78 L1421.73 1206.78 L1422.32 1206.78 L1422.9 1206.78 L1423.49 1206.78 L1424.08 1206.78 L1424.66 1206.78 L1425.25 1206.78 L1425.83 1206.78 L1426.42 1206.78 L1427.01 1206.78 L1427.59 1206.78 L1428.18 1206.78 L1428.77 1206.78 L1429.35 1206.78 L1429.94 1206.78 L1430.53 1206.78 L1431.11 1206.78 L1431.7 1206.78 L1432.29 1206.78 L1432.87 1206.78 L1433.46 1206.78 L1434.04 1206.78 L1434.63 1206.78 L1435.22 1206.78 L1435.8 1206.78 L1436.39 1206.78 L1436.98 1206.78 L1437.56 1206.78 L1438.15 1206.78 L1438.74 1206.78 L1439.32 1206.78 L1439.91 1206.78 L1440.5 1206.78 L1441.08 1206.78 L1441.67 1206.78 L1442.25 1206.78 L1442.84 1206.78 L1443.43 1206.78 L1444.01 1206.78 L1444.6 1206.78 L1445.19 1206.78 L1445.77 1206.78 L1446.36 1206.78 L1446.95 1206.78 L1447.53 1206.78 L1448.12 1206.78 L1448.7 1206.78 L1449.29 1206.78 L1449.88 1206.78 L1450.46 1206.78 L1451.05 1206.78 L1451.64 1206.78 L1452.22 1206.78 L1452.81 1206.78 L1453.4 1206.78 L1453.98 1206.78 L1454.57 1206.78 L1455.16 1206.78 L1455.74 1206.78 L1456.33 1206.78 L1456.91 1206.78 L1457.5 1206.78 L1458.09 1206.78 L1458.67 1206.78 L1459.26 1206.78 L1459.85 1206.78 L1460.43 1206.78 L1461.02 1206.78 L1461.61 1206.78 L1462.19 1206.78 L1462.78 1206.78 L1463.37 1206.78 L1463.95 1206.78 L1464.54 1206.78 L1465.12 1206.78 L1465.71 1206.78 L1466.3 1206.78 L1466.88 1206.78 L1467.47 1206.78 L1468.06 1206.78 L1468.64 1206.78 L1469.23 1206.78 L1469.82 1206.78 L1470.4 1206.78 L1470.99 1206.78 L1471.57 1206.78 L1472.16 1206.78 L1472.75 1206.78 L1473.33 1206.78 L1473.92 1206.78 L1474.51 1206.78 L1475.09 1206.78 L1475.68 1206.78 L1476.27 1206.78 L1476.85 1206.78 L1477.44 1206.78 L1478.03 1206.78 L1478.61 1206.78 L1479.2 1206.78 L1479.78 1206.78 L1480.37 1206.78 L1480.96 1206.78 L1481.54 1206.78 L1482.13 1206.78 L1482.72 1206.78 L1483.3 1206.78 L1483.89 1206.78 L1484.48 1206.78 L1485.06 1206.78 L1485.65 1206.78 L1486.24 1206.78 L1486.82 1206.78 L1487.41 1206.78 L1487.99 1206.78 L1488.58 1206.78 L1489.17 1206.78 L1489.75 1206.78 L1490.34 1206.78 L1490.93 1206.78 L1491.51 1206.78 L1492.1 1206.78 L1492.69 1206.78 L1493.27 1206.78 L1493.86 1206.78 L1494.45 1206.78 L1495.03 1206.78 L1495.62 1206.78 L1496.2 1206.78 L1496.79 1206.78 L1497.38 1206.78 L1497.96 1206.78 L1498.55 1206.78 L1499.14 1206.78 L1499.72 1206.78 L1500.31 1206.78 L1500.9 1206.78 L1501.48 1206.78 L1502.07 1206.78 L1502.65 1206.78 L1503.24 1206.78 L1503.83 1206.78 L1504.41 1206.78 L1505 1206.78 L1505.59 1206.78 L1506.17 1206.78 L1506.76 1206.78 L1507.35 1206.78 L1507.93 1206.78 L1508.52 1206.78 L1509.11 1206.78 L1509.69 1206.78 L1510.28 1206.78 L1510.86 1206.78 L1511.45 1206.78 L1512.04 1206.78 L1512.62 1206.78 L1513.21 1206.78 L1513.8 1206.78 L1514.38 1206.78 L1514.97 1206.78 L1515.56 1206.78 L1516.14 1206.78 L1516.73 1206.78 L1517.32 1206.78 L1517.9 1206.78 L1518.49 1206.78 L1519.07 1206.78 L1519.66 1206.78 L1520.25 1206.78 L1520.83 1206.78 L1521.42 1206.78 L1522.01 1206.78 L1522.59 1206.78 L1523.18 1206.78 L1523.77 1206.78 L1524.35 1206.78 L1524.94 1206.78 L1525.52 1206.78 L1526.11 1206.78 L1526.7 1206.78 L1527.28 1206.78 L1527.87 1206.78 L1528.46 1206.78 L1529.04 1206.78 L1529.63 1206.78 L1530.22 1206.78 L1530.8 1206.78 L1531.39 1206.78 L1531.98 1206.78 L1532.56 1206.78 L1533.15 1206.78 L1533.73 1206.78 L1534.32 1206.78 L1534.91 1206.78 L1535.49 1206.78 L1536.08 1206.78 L1536.67 1206.78 L1537.25 1206.78 L1537.84 1206.78 L1538.43 1206.78 L1539.01 1206.78 L1539.6 1206.78 L1540.19 1206.78 L1540.77 1206.78 L1541.36 1206.78 L1541.94 1206.78 L1542.53 1206.78 L1543.12 1206.78 L1543.7 1206.78 L1544.29 1206.78 L1544.88 1206.78 L1545.46 1206.78 L1546.05 1206.78 L1546.64 1206.78 L1547.22 1206.78 L1547.81 1206.78 L1548.4 1206.78 L1548.98 1206.78 L1549.57 1206.78 L1550.15 1206.78 L1550.74 1206.78 L1551.33 1206.78 L1551.91 1206.78 L1552.5 1206.78 L1553.09 1206.78 L1553.67 1206.78 L1554.26 1206.78 L1554.85 1206.78 L1555.43 1206.78 L1556.02 1206.78 L1556.6 1206.78 L1557.19 1206.78 L1557.78 1206.78 L1558.36 1206.78 L1558.95 1206.78 L1559.54 1206.78 L1560.12 1206.78 L1560.71 1206.78 L1561.3 1206.78 L1561.88 1206.78 L1562.47 1206.78 L1563.06 1206.78 L1563.64 1206.78 L1564.23 1206.78 L1564.81 1206.78 L1565.4 1206.78 L1565.99 1206.78 L1566.57 1206.78 L1567.16 1206.78 L1567.75 1206.78 L1568.33 1206.78 L1568.92 1206.78 L1569.51 1206.78 L1570.09 1206.78 L1570.68 1206.78 L1571.27 1206.78 L1571.85 1206.78 L1572.44 1206.78 L1573.02 1206.78 L1573.61 1206.78 L1574.2 1206.78 L1574.78 1206.78 L1575.37 1206.78 L1575.96 1206.78 L1576.54 1206.78 L1577.13 1206.78 L1577.72 1206.78 L1578.3 1206.78 L1578.89 1206.78 L1579.47 1206.78 L1580.06 1206.78 L1580.65 1206.78 L1581.23 1206.78 L1581.82 1206.78 L1582.41 1206.78 L1582.99 1206.78 L1583.58 1206.78 L1584.17 1206.78 L1584.75 1206.78 L1585.34 1206.78 L1585.93 1206.78 L1586.51 1206.78 L1587.1 1206.78 L1587.68 1206.78 L1588.27 1206.78 L1588.86 1206.78 L1589.44 1206.78 L1590.03 1206.78 L1590.62 1206.78 L1591.2 1206.78 L1591.79 1206.78 L1592.38 1206.78 L1592.96 1206.78 L1593.55 1206.78 L1594.14 1206.78 L1594.72 1206.78 L1595.31 1206.78 L1595.89 1206.78 L1596.48 1206.78 L1597.07 1206.78 L1597.65 1206.78 L1598.24 1206.78 L1598.83 1206.78 L1599.41 1206.78 L1600 1206.78 L1600.59 1206.78 L1601.17 1206.78 L1601.76 1206.78 L1602.34 1206.78 L1602.93 1206.78 L1603.52 1206.78 L1604.1 1206.78 L1604.69 1206.78 L1605.28 1206.78 L1605.86 1206.78 L1606.45 1206.78 L1607.04 1206.78 L1607.62 1206.78 L1608.21 1206.78 L1608.8 1206.78 L1609.38 1206.78 L1609.97 1206.78 L1610.55 1206.78 L1611.14 1206.78 L1611.73 1206.78 L1612.31 1206.78 L1612.9 1206.78 L1613.49 1206.78 L1614.07 1206.78 L1614.66 1206.78 L1615.25 1206.78 L1615.83 1206.78 L1616.42 1206.78 L1617.01 1206.78 L1617.59 1206.78 L1618.18 1206.78 L1618.76 1206.78 L1619.35 1206.78 L1619.94 1206.78 L1620.52 1206.78 L1621.11 1206.78 L1621.7 1206.78 L1622.28 1206.78 L1622.87 1206.78 L1623.46 1206.78 L1624.04 1206.78 L1624.63 1206.78 L1625.22 1206.78 L1625.8 1206.78 L1626.39 1206.78 L1626.97 1206.78 L1627.56 1206.78 L1628.15 1206.78 L1628.73 1206.78 L1629.32 1206.78 L1629.91 1206.78 L1630.49 1206.78 L1631.08 1206.78 L1631.67 1206.78 L1632.25 1206.78 L1632.84 1206.78 L1633.42 1206.78 L1634.01 1206.78 L1634.6 1206.78 L1635.18 1206.78 L1635.77 1206.78 L1636.36 1206.78 L1636.94 1206.78 L1637.53 1206.78 L1638.12 1206.78 L1638.7 1206.78 L1639.29 1206.78 L1639.88 1206.78 L1640.46 1206.78 L1641.05 1206.78 L1641.63 1206.78 L1642.22 1206.78 L1642.81 1206.78 L1643.39 1206.78 L1643.98 1206.78 L1644.57 1206.78 L1645.15 1206.78 L1645.74 1206.78 L1646.33 1206.78 L1646.91 1206.78 L1647.5 1206.78 L1648.09 1206.78 L1648.67 1206.78 L1649.26 1206.78 L1649.84 1206.78 L1650.43 1206.78 L1651.02 1206.78 L1651.6 1206.78 L1652.19 1206.78 L1652.78 1206.78 L1653.36 1206.78 L1653.95 1206.78 L1654.54 1206.78 L1655.12 1206.78 L1655.71 1206.78 L1656.29 1206.78 L1656.88 1206.78 L1657.47 1206.78 L1658.05 1206.78 L1658.64 1206.78 L1659.23 1206.78 L1659.81 1206.78 L1660.4 1206.78 L1660.99 1206.78 L1661.57 1206.78 L1662.16 1206.78 L1662.75 1206.78 L1663.33 1206.78 L1663.92 1206.78 L1664.5 1206.78 L1665.09 1206.78 L1665.68 1206.78 L1666.26 1206.78 L1666.85 1206.78 L1667.44 1206.78 L1668.02 1206.78 L1668.61 1206.78 L1669.2 1206.78 L1669.78 1206.78 L1670.37 1206.78 L1670.96 1206.78 L1671.54 1206.78 L1672.13 1206.78 L1672.71 1206.78 L1673.3 1206.78 L1673.89 1206.78 L1674.47 1206.78 L1675.06 1206.78 L1675.65 1206.78 L1676.23 1206.78 L1676.82 1206.78 L1677.41 1206.78 L1677.99 1206.78 L1678.58 1206.78 L1679.17 1206.78 L1679.75 1206.78 L1680.34 1206.78 L1680.92 1206.78 L1681.51 1206.78 L1682.1 1206.78 L1682.68 1206.78 L1683.27 1206.78 L1683.86 1206.78 L1684.44 1206.78 L1685.03 1206.78 L1685.62 1206.78 L1686.2 1206.78 L1686.79 1206.78 L1687.37 1206.78 L1687.96 1206.78 L1688.55 1206.78 L1689.13 1206.78 L1689.72 1206.78 L1690.31 1206.78 L1690.89 1206.78 L1691.48 1206.78 L1692.07 1206.78 L1692.65 1206.78 L1693.24 1206.78 L1693.83 1206.78 L1694.41 1206.78 L1695 1206.78 L1695.58 1206.78 L1696.17 1206.78 L1696.76 1206.78 L1697.34 1206.78 L1697.93 1206.78 L1698.52 1206.78 L1699.1 1206.78 L1699.69 1206.78 L1700.28 1206.78 L1700.86 1206.78 L1701.45 1206.78 L1702.04 1206.78 L1702.62 1206.78 L1703.21 1206.78 L1703.79 1206.78 L1704.38 1206.78 L1704.97 1206.78 L1705.55 1206.78 L1706.14 1206.78 L1706.73 1206.78 L1707.31 1206.78 L1707.9 1206.78 L1708.49 1206.78 L1709.07 1206.78 L1709.66 1206.78 L1710.24 1206.78 L1710.83 1206.78 L1711.42 1206.78 L1712 1206.78 L1712.59 1206.78 L1713.18 1206.78 L1713.76 1206.78 L1714.35 1206.78 L1714.94 1206.78 L1715.52 1206.78 L1716.11 1206.78 L1716.7 1206.78 L1717.28 1206.78 L1717.87 1206.78 L1718.45 1206.78 L1719.04 1206.78 L1719.63 1206.78 L1720.21 1206.78 L1720.8 1206.78 L1721.39 1206.78 L1721.97 1206.78 L1722.56 1206.78 L1723.15 1206.78 L1723.73 1206.78 L1724.32 1206.78 L1724.91 1206.78 L1725.49 1206.78 L1726.08 1206.78 L1726.66 1206.78 L1727.25 1206.78 L1727.84 1206.78 L1728.42 1206.78 L1729.01 1206.78 L1729.6 1206.78 L1730.18 1206.78 L1730.77 1206.78 L1731.36 1206.78 L1731.94 1206.78 L1732.53 1206.78 L1733.11 1206.78 L1733.7 1206.78 L1734.29 1206.78 L1734.87 1206.78 L1735.46 1206.78 L1736.05 1206.78 L1736.63 1206.78 L1737.22 1206.78 L1737.81 1206.78 L1738.39 1206.78 L1738.98 1206.78 L1739.57 1206.78 L1740.15 1206.78 L1740.74 1206.78 L1741.32 1206.78 L1741.91 1206.78 L1742.5 1206.78 L1743.08 1206.78 L1743.67 1206.78 L1744.26 1206.78 L1744.84 1206.78 L1745.43 1206.78 L1746.02 1206.78 L1746.6 1206.78 L1747.19 1206.78 L1747.78 1206.78 L1748.36 1206.78 L1748.95 1206.78 L1749.53 1206.78 L1750.12 1206.78 L1750.71 1206.78 L1751.29 1206.78 L1751.88 1206.78 L1752.47 1206.78 L1753.05 1206.78 L1753.64 1206.78 L1754.23 1206.78 L1754.81 1206.78 L1755.4 1206.78 L1755.99 1206.78 L1756.57 1206.78 L1757.16 1206.78 L1757.74 1206.78 L1758.33 1206.78 L1758.92 1206.78 L1759.5 1206.78 L1760.09 1206.78 L1760.68 1206.78 L1761.26 1206.78 L1761.85 1206.78 L1762.44 1206.78 L1763.02 1206.78 L1763.61 1206.78 L1764.19 1206.78 L1764.78 1206.78 L1765.37 1206.78 L1765.95 1206.78 L1766.54 1206.78 L1767.13 1206.78 L1767.71 1206.78 L1768.3 1206.78 L1768.89 1206.78 L1769.47 1206.78 L1770.06 1206.78 L1770.65 1206.78 L1771.23 1206.78 L1771.82 1206.78 L1772.4 1206.78 L1772.99 1206.78 L1773.58 1206.78 L1774.16 1206.78 L1774.75 1206.78 L1775.34 1206.78 L1775.92 1206.78 L1776.51 1206.78 L1777.1 1206.78 L1777.68 1206.78 L1778.27 1206.78 L1778.86 1206.78 L1779.44 1206.78 L1780.03 1206.78 L1780.61 1206.78 L1781.2 1206.78 L1781.79 1206.78 L1782.37 1206.78 L1782.96 1206.78 L1783.55 1206.78 L1784.13 1206.78 L1784.72 1206.78 L1785.31 1206.78 L1785.89 1206.78 L1786.48 1206.78 L1787.06 1206.78 L1787.65 1206.78 L1788.24 1206.78 L1788.82 1206.78 L1789.41 1206.78 L1790 1206.78 L1790.58 1206.78 L1791.17 1206.78 L1791.76 1206.78 L1792.34 1206.78 L1792.93 1206.78 L1793.52 1206.78 L1794.1 1206.78 L1794.69 1206.78 L1795.27 1206.78 L1795.86 1206.78 L1796.45 1206.78 L1797.03 1206.78 L1797.62 1206.78 L1798.21 1206.78 L1798.79 1206.78 L1799.38 1206.78 L1799.97 1206.78 L1800.55 1206.78 L1801.14 1206.78 L1801.73 1206.78 L1802.31 1206.78 L1802.9 1206.78 L1803.48 1206.78 L1804.07 1206.78 L1804.66 1206.78 L1805.24 1206.78 L1805.83 1206.78 L1806.42 1206.78 L1807 1206.78 L1807.59 1206.78 L1808.18 1206.78 L1808.76 1206.78 L1809.35 1206.78 L1809.94 1206.78 L1810.52 1206.78 L1811.11 1206.78 L1811.69 1206.78 L1812.28 1206.78 L1812.87 1206.78 L1813.45 1206.78 L1814.04 1206.78 L1814.63 1206.78 L1815.21 1206.78 L1815.8 1206.78 L1816.39 1206.78 L1816.97 1206.78 L1817.56 1206.78 L1818.14 1206.78 L1818.73 1206.78 L1819.32 1206.78 L1819.9 1206.78 L1820.49 1206.78 L1821.08 1206.78 L1821.66 1206.78 L1822.25 1206.78 L1822.84 1206.78 L1823.42 1206.78 L1824.01 1206.78 L1824.6 1206.78 L1825.18 1206.78 L1825.77 1206.78 L1826.35 1206.78 L1826.94 1206.78 L1827.53 1206.78 L1828.11 1206.78 L1828.7 1206.78 L1829.29 1206.78 L1829.87 1206.78 L1830.46 1206.78 L1831.05 1206.78 L1831.63 1206.78 L1832.22 1206.78 L1832.81 1206.78 L1833.39 1206.78 L1833.98 1206.78 L1834.56 1206.78 L1835.15 1206.78 L1835.74 1206.78 L1836.32 1206.78 L1836.91 1206.78 L1837.5 1206.78 L1838.08 1206.78 L1838.67 1206.78 L1839.26 1206.78 L1839.84 1206.78 L1840.43 1206.78 L1841.01 1206.78 L1841.6 1206.78 L1842.19 1206.78 L1842.77 1206.78 L1843.36 1206.78 L1843.95 1206.78 L1844.53 1206.78 L1845.12 1206.78 L1845.71 1206.78 L1846.29 1206.78 L1846.88 1206.78 L1847.47 1206.78 L1848.05 1206.78 L1848.64 1206.78 L1849.22 1206.78 L1849.81 1206.78 L1850.4 1206.78 L1850.98 1206.78 L1851.57 1206.78 L1852.16 1206.78 L1852.74 1206.78 L1853.33 1206.78 L1853.92 1206.78 L1854.5 1206.78 L1855.09 1206.78 L1855.68 1206.78 L1856.26 1206.78 L1856.85 1206.78 L1857.43 1206.78 L1858.02 1206.78 L1858.61 1206.78 L1859.19 1206.78 L1859.78 1206.78 L1860.37 1206.78 L1860.95 1206.78 L1861.54 1206.78 L1862.13 1206.78 L1862.71 1206.78 L1863.3 1206.78 L1863.88 1206.78 L1864.47 1206.78 L1865.06 1206.78 L1865.64 1206.78 L1866.23 1206.78 L1866.82 1206.78 L1867.4 1206.78 L1867.99 1206.78 L1868.58 1206.78 L1869.16 1206.78 L1869.75 1206.78 L1870.34 1206.78 L1870.92 1206.78 L1871.51 1206.78 L1872.09 1206.78 L1872.68 1206.78 L1873.27 1206.78 L1873.85 1206.78 L1874.44 1206.78 L1875.03 1206.78 L1875.61 1206.78 L1876.2 1206.78 L1876.79 1206.78 L1877.37 1206.78 L1877.96 1206.78 L1878.55 1206.78 L1879.13 1206.78 L1879.72 1206.78 L1880.3 1206.78 L1880.89 1206.78 L1881.48 1206.78 L1882.06 1206.78 L1882.65 1206.78 L1883.24 1206.78 L1883.82 1206.78 L1884.41 1206.78 L1885 1206.78 L1885.58 1206.78 L1886.17 1206.78 L1886.76 1206.78 L1887.34 1206.78 L1887.93 1206.78 L1888.51 1206.78 L1889.1 1206.78 L1889.69 1206.78 L1890.27 1206.78 L1890.86 1206.78 L1891.45 1206.78 L1892.03 1206.78 L1892.62 1206.78 L1893.21 1206.78 L1893.79 1206.78 L1894.38 1206.78 L1894.96 1206.78 L1895.55 1206.78 L1896.14 1206.78 L1896.72 1206.78 L1897.31 1206.78 L1897.9 1206.78 L1898.48 1206.78 L1899.07 1206.78 L1899.66 1206.78 L1900.24 1206.78 L1900.83 1206.78 L1901.42 1206.78 L1902 1206.78 L1902.59 1206.78 L1903.17 1206.78 L1903.76 1206.78 L1904.35 1206.78 L1904.93 1206.78 L1905.52 1206.78 L1906.11 1206.78 L1906.69 1206.78 L1907.28 1206.78 L1907.87 1206.78 L1908.45 1206.78 L1909.04 1206.78 L1909.63 1206.78 L1910.21 1206.78 L1910.8 1206.78 L1911.38 1206.78 L1911.97 1206.78 L1912.56 1206.78 L1913.14 1206.78 L1913.73 1206.78 L1914.32 1206.78 L1914.9 1206.78 L1915.49 1206.78 L1916.08 1206.78 L1916.66 1206.78 L1917.25 1206.78 L1917.83 1206.78 L1918.42 1206.78 L1919.01 1206.78 L1919.59 1206.78 L1920.18 1206.78 L1920.77 1206.78 L1921.35 1206.78 L1921.94 1206.78 L1922.53 1206.78 L1923.11 1206.78 L1923.7 1206.78 L1924.29 1206.78 L1924.87 1206.78 L1925.46 1206.78 L1926.04 1206.78 L1926.63 1206.78 L1927.22 1206.78 L1927.8 1206.78 L1928.39 1206.78 L1928.98 1206.78 L1929.56 1206.78 L1930.15 1206.78 L1930.74 1206.78 L1931.32 1206.78 L1931.91 1206.78 L1932.5 1206.78 L1933.08 1206.78 L1933.67 1206.78 L1934.25 1206.78 L1934.84 1206.78 L1935.43 1206.78 L1936.01 1206.78 L1936.6 1206.78 L1937.19 1206.78 L1937.77 1206.78 L1938.36 1206.78 L1938.95 1206.78 L1939.53 1206.78 L1940.12 1206.78 L1940.71 1206.78 L1941.29 1206.78 L1941.88 1206.78 L1942.46 1206.78 L1943.05 1206.78 L1943.64 1206.78 L1944.22 1206.78 L1944.81 1206.78 L1945.4 1206.78 L1945.98 1206.78 L1946.57 1206.78 L1947.16 1206.78 L1947.74 1206.78 L1948.33 1206.78 L1948.91 1206.78 L1949.5 1206.78 L1950.09 1206.78 L1950.67 1206.78 L1951.26 1206.78 L1951.85 1206.78 L1952.43 1206.78 L1953.02 1206.78 L1953.61 1206.78 L1954.19 1206.78 L1954.78 1206.78 L1955.37 1206.78 L1955.95 1206.78 L1956.54 1206.78 L1957.12 1206.78 L1957.71 1206.78 L1958.3 1206.78 L1958.88 1206.78 L1959.47 1206.78 L1960.06 1206.78 L1960.64 1206.78 L1961.23 1206.78 L1961.82 1206.78 L1962.4 1206.78 L1962.99 1206.78 L1963.58 1206.78 L1964.16 1206.78 L1964.75 1206.78 L1965.33 1206.78 L1965.92 1206.78 L1966.51 1206.78 L1967.09 1206.78 L1967.68 1206.78 L1968.27 1206.78 L1968.85 1206.78 L1969.44 1206.78 L1970.03 1206.78 L1970.61 1206.78 L1971.2 1206.78 L1971.78 1206.78 L1972.37 1206.78 L1972.96 1206.78 L1973.54 1206.78 L1974.13 1206.78 L1974.72 1206.78 L1975.3 1206.78 L1975.89 1206.78 L1976.48 1206.78 L1977.06 1206.78 L1977.65 1206.78 L1978.24 1206.78 L1978.82 1206.78 L1979.41 1206.78 L1979.99 1206.78 L1980.58 1206.78 L1981.17 1206.78 L1981.75 1206.78 L1982.34 1206.78 L1982.93 1206.78 L1983.51 1206.78 L1984.1 1206.78 L1984.69 1206.78 L1985.27 1206.78 L1985.86 1206.78 L1986.45 1206.78 L1987.03 1206.78 L1987.62 1206.78 L1988.2 1206.78 L1988.79 1206.78 L1989.38 1206.78 L1989.96 1206.78 L1990.55 1206.78 L1991.14 1206.78 L1991.72 1206.78 L1992.31 1206.78 L1992.9 1206.78 L1993.48 1206.78 L1994.07 1206.78 L1994.65 1206.78 L1995.24 1206.78 L1995.83 1206.78 L1996.41 1206.78 L1997 1206.78 L1997.59 1206.78 L1998.17 1206.78 L1998.76 1206.78 L1999.35 1206.78 L1999.93 1206.78 L2000.52 1206.78 L2001.11 1206.78 L2001.69 1206.78 L2002.28 1206.78 L2002.86 1206.78 L2003.45 1206.78 L2004.04 1206.78 L2004.62 1206.78 L2005.21 1206.78 L2005.8 1206.78 L2006.38 1206.78 L2006.97 1206.78 L2007.56 1206.78 L2008.14 1206.78 L2008.73 1206.78 L2009.32 1206.78 L2009.9 1206.78 L2010.49 1206.78 L2011.07 1206.78 L2011.66 1206.78 L2012.25 1206.78 L2012.83 1206.78 L2013.42 1206.78 L2014.01 1206.78 L2014.59 1206.78 L2015.18 1206.78 L2015.77 1206.78 L2016.35 1206.78 L2016.94 1206.78 L2017.53 1206.78 L2018.11 1206.78 L2018.7 1206.78 L2019.28 1206.78 L2019.87 1206.78 L2020.46 1206.78 L2021.04 1206.78 L2021.63 1206.78 L2022.22 1206.78 L2022.8 1206.78 L2023.39 1206.78 L2023.98 1206.78 L2024.56 1206.78 L2025.15 1206.78 L2025.73 1206.78 L2026.32 1206.78 L2026.91 1206.78 L2027.49 1206.78 L2028.08 1206.78 L2028.67 1206.78 L2029.25 1206.78 L2029.84 1206.78 L2030.43 1206.78 L2031.01 1206.78 L2031.6 1206.78 L2032.19 1206.78 L2032.77 1206.78 L2033.36 1206.78 L2033.94 1206.78 L2034.53 1206.78 L2035.12 1206.78 L2035.7 1206.78 L2036.29 1206.78 L2036.88 1206.78 L2037.46 1206.78 L2038.05 1206.78 L2038.64 1206.78 L2039.22 1206.78 L2039.81 1206.78 L2040.4 1206.78 L2040.98 1206.78 L2041.57 1206.78 L2042.15 1206.78 L2042.74 1206.78 L2043.33 1206.78 L2043.91 1206.78 L2044.5 1206.78 L2045.09 1206.78 L2045.67 1206.78 L2046.26 1206.78 L2046.85 1206.78 L2047.43 1206.78 L2048.02 1206.78 L2048.6 1206.78 L2049.19 1206.78 L2049.78 1206.78 L2050.36 1206.78 L2050.95 1206.78 L2051.54 1206.78 L2052.12 1206.78 L2052.71 1206.78 L2053.3 1206.78 L2053.88 1206.78 L2054.47 1206.78 L2055.06 1206.78 L2055.64 1206.78 L2056.23 1206.78 L2056.81 1206.78 L2057.4 1206.78 L2057.99 1206.78 L2058.57 1206.78 L2059.16 1206.78 L2059.75 1206.78 L2060.33 1206.78 L2060.92 1206.78 L2061.51 1206.78 L2062.09 1206.78 L2062.68 1206.78 L2063.27 1206.78 L2063.85 1206.78 L2064.44 1206.78 L2065.02 1206.78 L2065.61 1206.78 L2066.2 1206.78 L2066.78 1206.78 L2067.37 1206.78 L2067.96 1206.78 L2068.54 1206.78 L2069.13 1206.78 L2069.72 1206.78 L2070.3 1206.78 L2070.89 1206.78 L2071.48 1206.78 L2072.06 1206.78 L2072.65 1206.78 L2073.23 1206.78 L2073.82 1206.78 L2074.41 1206.78 L2074.99 1206.78 L2075.58 1206.78 L2076.17 1206.78 L2076.75 1206.78 L2077.34 1206.78 L2077.93 1206.78 L2078.51 1206.78 L2079.1 1206.78 L2079.68 1206.78 L2080.27 1206.78 L2080.86 1206.78 L2081.44 1206.78 L2082.03 1206.78 L2082.62 1206.78 L2083.2 1206.78 L2083.79 1206.78 L2084.38 1206.78 L2084.96 1206.78 L2085.55 1206.78 L2086.14 1206.78 L2086.72 1206.78 L2087.31 1206.78 L2087.89 1206.78 L2088.48 1206.78 L2089.07 1206.78 L2089.65 1206.78 L2090.24 1206.78 L2090.83 1206.78 L2091.41 1206.78 L2092 1206.78 L2092.59 1206.78 L2093.17 1206.78 L2093.76 1206.78 L2094.35 1206.78 L2094.93 1206.78 L2095.52 1206.78 L2096.1 1206.78 L2096.69 1206.78 L2097.28 1206.78 L2097.86 1206.78 L2098.45 1206.78 L2099.04 1206.78 L2099.62 1206.78 L2100.21 1206.78 L2100.8 1206.78 L2101.38 1206.78 L2101.97 1206.78 L2102.55 1206.78 L2103.14 1206.78 L2103.73 1206.78 L2104.31 1206.78 L2104.9 1206.78 L2105.49 1206.78 L2106.07 1206.78 L2106.66 1206.78 L2107.25 1206.78 L2107.83 1206.78 L2108.42 1206.78 L2109.01 1206.78 L2109.59 1206.78 L2110.18 1206.78 L2110.76 1206.78 L2111.35 1206.78 L2111.94 1206.78 L2112.52 1206.78 L2113.11 1206.78 L2113.7 1206.78 L2114.28 1206.78 L2114.87 1206.78 L2115.46 1206.78 L2116.04 1206.78 L2116.63 1206.78 L2117.22 1206.78 L2117.8 1206.78 L2118.39 1206.78 L2118.97 1206.78 L2119.56 1206.78 L2120.15 1206.78 L2120.73 1206.78 L2121.32 1206.78 L2121.91 1206.78 L2122.49 1206.78 L2123.08 1206.78 L2123.67 1206.78 L2124.25 1206.78 L2124.84 1206.78 L2125.42 1206.78 L2126.01 1206.78 L2126.6 1206.78 L2127.18 1206.78 L2127.77 1206.78 L2128.36 1206.78 L2128.94 1206.78 L2129.53 1206.78 L2130.12 1206.78 L2130.7 1206.78 L2131.29 1206.78 L2131.88 1206.78 L2132.46 1206.78 L2133.05 1206.78 L2133.63 1206.78 L2134.22 1206.78 L2134.81 1206.78 L2135.39 1206.78 L2135.98 1206.78 L2136.57 1206.78 L2137.15 1206.78 L2137.74 1206.78 L2138.33 1206.78 L2138.91 1206.78 L2139.5 1206.78 L2140.09 1206.78 L2140.67 1206.78 L2141.26 1206.78 L2141.84 1206.78 L2142.43 1206.78 L2143.02 1206.78 L2143.6 1206.78 L2144.19 1206.78 L2144.78 1206.78 L2145.36 1206.78 L2145.95 1206.78 L2146.54 1206.78 L2147.12 1206.78 L2147.71 1206.78 L2148.3 1206.78 L2148.88 1206.78 L2149.47 1206.78 L2150.05 1206.78 L2150.64 1206.78 L2151.23 1206.78 L2151.81 1206.78 L2152.4 1206.78 L2152.99 1206.78 L2153.57 1206.78 L2154.16 1206.78 L2154.75 1206.78 L2155.33 1206.78 L2155.92 1206.78 L2156.5 1206.78 L2157.09 1206.78 L2157.68 1206.78 L2158.26 1206.78 L2158.26 1206.66 L2157.68 1206.66 L2157.09 1206.66 L2156.5 1206.66 L2155.92 1206.66 L2155.33 1206.66 L2154.75 1206.66 L2154.16 1206.66 L2153.57 1206.66 L2152.99 1206.66 L2152.4 1206.66 L2151.81 1206.66 L2151.23 1206.66 L2150.64 1206.66 L2150.05 1206.66 L2149.47 1206.66 L2148.88 1206.66 L2148.3 1206.66 L2147.71 1206.66 L2147.12 1206.66 L2146.54 1206.66 L2145.95 1206.66 L2145.36 1206.66 L2144.78 1206.66 L2144.19 1206.66 L2143.6 1206.66 L2143.02 1206.66 L2142.43 1206.66 L2141.84 1206.66 L2141.26 1206.66 L2140.67 1206.66 L2140.09 1206.66 L2139.5 1206.66 L2138.91 1206.66 L2138.33 1206.66 L2137.74 1206.66 L2137.15 1206.66 L2136.57 1206.66 L2135.98 1206.66 L2135.39 1206.66 L2134.81 1206.66 L2134.22 1206.66 L2133.63 1206.66 L2133.05 1206.66 L2132.46 1206.66 L2131.88 1206.66 L2131.29 1206.66 L2130.7 1206.66 L2130.12 1206.66 L2129.53 1206.66 L2128.94 1206.66 L2128.36 1206.66 L2127.77 1206.66 L2127.18 1206.66 L2126.6 1206.66 L2126.01 1206.66 L2125.42 1206.66 L2124.84 1206.66 L2124.25 1206.66 L2123.67 1206.66 L2123.08 1206.66 L2122.49 1206.66 L2121.91 1206.66 L2121.32 1206.66 L2120.73 1206.66 L2120.15 1206.66 L2119.56 1206.66 L2118.97 1206.66 L2118.39 1206.66 L2117.8 1206.66 L2117.22 1206.66 L2116.63 1206.66 L2116.04 1206.66 L2115.46 1206.66 L2114.87 1206.66 L2114.28 1206.66 L2113.7 1206.66 L2113.11 1206.66 L2112.52 1206.66 L2111.94 1206.66 L2111.35 1206.66 L2110.76 1206.66 L2110.18 1206.66 L2109.59 1206.66 L2109.01 1206.66 L2108.42 1206.66 L2107.83 1206.66 L2107.25 1206.66 L2106.66 1206.66 L2106.07 1206.66 L2105.49 1206.66 L2104.9 1206.66 L2104.31 1206.66 L2103.73 1206.66 L2103.14 1206.66 L2102.55 1206.66 L2101.97 1206.66 L2101.38 1206.66 L2100.8 1206.66 L2100.21 1206.66 L2099.62 1206.66 L2099.04 1206.66 L2098.45 1206.66 L2097.86 1206.66 L2097.28 1206.66 L2096.69 1206.66 L2096.1 1206.66 L2095.52 1206.66 L2094.93 1206.66 L2094.35 1206.66 L2093.76 1206.66 L2093.17 1206.66 L2092.59 1206.66 L2092 1206.66 L2091.41 1206.66 L2090.83 1206.66 L2090.24 1206.66 L2089.65 1206.66 L2089.07 1206.66 L2088.48 1206.66 L2087.89 1206.66 L2087.31 1206.66 L2086.72 1206.66 L2086.14 1206.66 L2085.55 1206.66 L2084.96 1206.66 L2084.38 1206.66 L2083.79 1206.66 L2083.2 1206.66 L2082.62 1206.66 L2082.03 1206.66 L2081.44 1206.66 L2080.86 1206.66 L2080.27 1206.66 L2079.68 1206.66 L2079.1 1206.66 L2078.51 1206.66 L2077.93 1206.66 L2077.34 1206.66 L2076.75 1206.66 L2076.17 1206.66 L2075.58 1206.66 L2074.99 1206.66 L2074.41 1206.66 L2073.82 1206.66 L2073.23 1206.66 L2072.65 1206.66 L2072.06 1206.66 L2071.48 1206.66 L2070.89 1206.66 L2070.3 1206.66 L2069.72 1206.66 L2069.13 1206.66 L2068.54 1206.66 L2067.96 1206.66 L2067.37 1206.66 L2066.78 1206.66 L2066.2 1206.66 L2065.61 1206.66 L2065.02 1206.66 L2064.44 1206.66 L2063.85 1206.66 L2063.27 1206.66 L2062.68 1206.66 L2062.09 1206.66 L2061.51 1206.66 L2060.92 1206.66 L2060.33 1206.66 L2059.75 1206.66 L2059.16 1206.66 L2058.57 1206.66 L2057.99 1206.66 L2057.4 1206.66 L2056.81 1206.66 L2056.23 1206.66 L2055.64 1206.66 L2055.06 1206.66 L2054.47 1206.66 L2053.88 1206.66 L2053.3 1206.66 L2052.71 1206.66 L2052.12 1206.66 L2051.54 1206.66 L2050.95 1206.66 L2050.36 1206.66 L2049.78 1206.66 L2049.19 1206.66 L2048.6 1206.66 L2048.02 1206.66 L2047.43 1206.66 L2046.85 1206.66 L2046.26 1206.66 L2045.67 1206.66 L2045.09 1206.66 L2044.5 1206.66 L2043.91 1206.66 L2043.33 1206.66 L2042.74 1206.66 L2042.15 1206.66 L2041.57 1206.66 L2040.98 1206.66 L2040.4 1206.66 L2039.81 1206.66 L2039.22 1206.66 L2038.64 1206.66 L2038.05 1206.66 L2037.46 1206.66 L2036.88 1206.66 L2036.29 1206.66 L2035.7 1206.66 L2035.12 1206.66 L2034.53 1206.66 L2033.94 1206.66 L2033.36 1206.66 L2032.77 1206.66 L2032.19 1206.66 L2031.6 1206.66 L2031.01 1206.66 L2030.43 1206.66 L2029.84 1206.66 L2029.25 1206.66 L2028.67 1206.66 L2028.08 1206.66 L2027.49 1206.66 L2026.91 1206.66 L2026.32 1206.66 L2025.73 1206.66 L2025.15 1206.66 L2024.56 1206.66 L2023.98 1206.66 L2023.39 1206.66 L2022.8 1206.66 L2022.22 1206.66 L2021.63 1206.66 L2021.04 1206.66 L2020.46 1206.66 L2019.87 1206.66 L2019.28 1206.66 L2018.7 1206.66 L2018.11 1206.66 L2017.53 1206.66 L2016.94 1206.66 L2016.35 1206.66 L2015.77 1206.66 L2015.18 1206.66 L2014.59 1206.66 L2014.01 1206.66 L2013.42 1206.66 L2012.83 1206.66 L2012.25 1206.66 L2011.66 1206.66 L2011.07 1206.66 L2010.49 1206.66 L2009.9 1206.66 L2009.32 1206.66 L2008.73 1206.66 L2008.14 1206.66 L2007.56 1206.66 L2006.97 1206.66 L2006.38 1206.66 L2005.8 1206.66 L2005.21 1206.66 L2004.62 1206.66 L2004.04 1206.66 L2003.45 1206.66 L2002.86 1206.66 L2002.28 1206.66 L2001.69 1206.66 L2001.11 1206.66 L2000.52 1206.66 L1999.93 1206.66 L1999.35 1206.66 L1998.76 1206.66 L1998.17 1206.66 L1997.59 1206.66 L1997 1206.66 L1996.41 1206.66 L1995.83 1206.66 L1995.24 1206.66 L1994.65 1206.66 L1994.07 1206.66 L1993.48 1206.66 L1992.9 1206.66 L1992.31 1206.66 L1991.72 1206.66 L1991.14 1206.66 L1990.55 1206.66 L1989.96 1206.66 L1989.38 1206.66 L1988.79 1206.66 L1988.2 1206.66 L1987.62 1206.66 L1987.03 1206.66 L1986.45 1206.66 L1985.86 1206.66 L1985.27 1206.66 L1984.69 1206.66 L1984.1 1206.66 L1983.51 1206.66 L1982.93 1206.66 L1982.34 1206.66 L1981.75 1206.66 L1981.17 1206.66 L1980.58 1206.66 L1979.99 1206.66 L1979.41 1206.66 L1978.82 1206.66 L1978.24 1206.66 L1977.65 1206.66 L1977.06 1206.66 L1976.48 1206.66 L1975.89 1206.66 L1975.3 1206.66 L1974.72 1206.66 L1974.13 1206.66 L1973.54 1206.66 L1972.96 1206.66 L1972.37 1206.66 L1971.78 1206.66 L1971.2 1206.66 L1970.61 1206.66 L1970.03 1206.66 L1969.44 1206.66 L1968.85 1206.66 L1968.27 1206.66 L1967.68 1206.66 L1967.09 1206.66 L1966.51 1206.66 L1965.92 1206.66 L1965.33 1206.66 L1964.75 1206.66 L1964.16 1206.66 L1963.58 1206.66 L1962.99 1206.66 L1962.4 1206.66 L1961.82 1206.66 L1961.23 1206.66 L1960.64 1206.66 L1960.06 1206.66 L1959.47 1206.66 L1958.88 1206.66 L1958.3 1206.66 L1957.71 1206.66 L1957.12 1206.66 L1956.54 1206.66 L1955.95 1206.66 L1955.37 1206.66 L1954.78 1206.66 L1954.19 1206.66 L1953.61 1206.66 L1953.02 1206.66 L1952.43 1206.66 L1951.85 1206.66 L1951.26 1206.66 L1950.67 1206.66 L1950.09 1206.66 L1949.5 1206.66 L1948.91 1206.66 L1948.33 1206.66 L1947.74 1206.66 L1947.16 1206.66 L1946.57 1206.66 L1945.98 1206.66 L1945.4 1206.66 L1944.81 1206.66 L1944.22 1206.66 L1943.64 1206.66 L1943.05 1206.66 L1942.46 1206.66 L1941.88 1206.66 L1941.29 1206.66 L1940.71 1206.66 L1940.12 1206.66 L1939.53 1206.66 L1938.95 1206.66 L1938.36 1206.66 L1937.77 1206.66 L1937.19 1206.66 L1936.6 1206.66 L1936.01 1206.66 L1935.43 1206.66 L1934.84 1206.66 L1934.25 1206.66 L1933.67 1206.66 L1933.08 1206.66 L1932.5 1206.66 L1931.91 1206.66 L1931.32 1206.66 L1930.74 1206.66 L1930.15 1206.66 L1929.56 1206.66 L1928.98 1206.66 L1928.39 1206.66 L1927.8 1206.66 L1927.22 1206.66 L1926.63 1206.66 L1926.04 1206.66 L1925.46 1206.66 L1924.87 1206.66 L1924.29 1206.66 L1923.7 1206.66 L1923.11 1206.66 L1922.53 1206.66 L1921.94 1206.66 L1921.35 1206.66 L1920.77 1206.66 L1920.18 1206.66 L1919.59 1206.66 L1919.01 1206.66 L1918.42 1206.66 L1917.83 1206.66 L1917.25 1206.66 L1916.66 1206.66 L1916.08 1206.66 L1915.49 1206.66 L1914.9 1206.66 L1914.32 1206.66 L1913.73 1206.66 L1913.14 1206.66 L1912.56 1206.66 L1911.97 1206.66 L1911.38 1206.66 L1910.8 1206.66 L1910.21 1206.66 L1909.63 1206.66 L1909.04 1206.66 L1908.45 1206.66 L1907.87 1206.66 L1907.28 1206.66 L1906.69 1206.66 L1906.11 1206.66 L1905.52 1206.66 L1904.93 1206.66 L1904.35 1206.66 L1903.76 1206.66 L1903.17 1206.66 L1902.59 1206.66 L1902 1206.66 L1901.42 1206.66 L1900.83 1206.66 L1900.24 1206.66 L1899.66 1206.66 L1899.07 1206.66 L1898.48 1206.66 L1897.9 1206.66 L1897.31 1206.66 L1896.72 1206.66 L1896.14 1206.66 L1895.55 1206.66 L1894.96 1206.66 L1894.38 1206.66 L1893.79 1206.66 L1893.21 1206.66 L1892.62 1206.66 L1892.03 1206.66 L1891.45 1206.66 L1890.86 1206.66 L1890.27 1206.66 L1889.69 1206.66 L1889.1 1206.66 L1888.51 1206.66 L1887.93 1206.66 L1887.34 1206.66 L1886.76 1206.66 L1886.17 1206.66 L1885.58 1206.66 L1885 1206.66 L1884.41 1206.66 L1883.82 1206.66 L1883.24 1206.66 L1882.65 1206.66 L1882.06 1206.66 L1881.48 1206.66 L1880.89 1206.66 L1880.3 1206.66 L1879.72 1206.66 L1879.13 1206.66 L1878.55 1206.66 L1877.96 1206.66 L1877.37 1206.66 L1876.79 1206.66 L1876.2 1206.66 L1875.61 1206.66 L1875.03 1206.66 L1874.44 1206.66 L1873.85 1206.66 L1873.27 1206.66 L1872.68 1206.66 L1872.09 1206.66 L1871.51 1206.66 L1870.92 1206.66 L1870.34 1206.66 L1869.75 1206.66 L1869.16 1206.66 L1868.58 1206.66 L1867.99 1206.66 L1867.4 1206.66 L1866.82 1206.66 L1866.23 1206.66 L1865.64 1206.66 L1865.06 1206.66 L1864.47 1206.66 L1863.88 1206.66 L1863.3 1206.66 L1862.71 1206.66 L1862.13 1206.66 L1861.54 1206.66 L1860.95 1206.66 L1860.37 1206.66 L1859.78 1206.66 L1859.19 1206.66 L1858.61 1206.66 L1858.02 1206.66 L1857.43 1206.66 L1856.85 1206.66 L1856.26 1206.66 L1855.68 1206.66 L1855.09 1206.66 L1854.5 1206.66 L1853.92 1206.66 L1853.33 1206.66 L1852.74 1206.66 L1852.16 1206.66 L1851.57 1206.66 L1850.98 1206.66 L1850.4 1206.66 L1849.81 1206.66 L1849.22 1206.66 L1848.64 1206.66 L1848.05 1206.66 L1847.47 1206.66 L1846.88 1206.66 L1846.29 1206.66 L1845.71 1206.66 L1845.12 1206.66 L1844.53 1206.66 L1843.95 1206.66 L1843.36 1206.66 L1842.77 1206.66 L1842.19 1206.66 L1841.6 1206.66 L1841.01 1206.66 L1840.43 1206.66 L1839.84 1206.66 L1839.26 1206.66 L1838.67 1206.66 L1838.08 1206.66 L1837.5 1206.66 L1836.91 1206.66 L1836.32 1206.66 L1835.74 1206.66 L1835.15 1206.66 L1834.56 1206.66 L1833.98 1206.66 L1833.39 1206.66 L1832.81 1206.66 L1832.22 1206.66 L1831.63 1206.66 L1831.05 1206.66 L1830.46 1206.66 L1829.87 1206.66 L1829.29 1206.66 L1828.7 1206.66 L1828.11 1206.66 L1827.53 1206.66 L1826.94 1206.66 L1826.35 1206.66 L1825.77 1206.66 L1825.18 1206.66 L1824.6 1206.66 L1824.01 1206.66 L1823.42 1206.66 L1822.84 1206.66 L1822.25 1206.66 L1821.66 1206.66 L1821.08 1206.66 L1820.49 1206.66 L1819.9 1206.66 L1819.32 1206.66 L1818.73 1206.66 L1818.14 1206.66 L1817.56 1206.66 L1816.97 1206.66 L1816.39 1206.66 L1815.8 1206.66 L1815.21 1206.66 L1814.63 1206.66 L1814.04 1206.66 L1813.45 1206.66 L1812.87 1206.66 L1812.28 1206.66 L1811.69 1206.66 L1811.11 1206.66 L1810.52 1206.66 L1809.94 1206.66 L1809.35 1206.66 L1808.76 1206.66 L1808.18 1206.66 L1807.59 1206.66 L1807 1206.66 L1806.42 1206.66 L1805.83 1206.66 L1805.24 1206.66 L1804.66 1206.66 L1804.07 1206.66 L1803.48 1206.66 L1802.9 1206.66 L1802.31 1206.66 L1801.73 1206.66 L1801.14 1206.66 L1800.55 1206.66 L1799.97 1206.66 L1799.38 1206.66 L1798.79 1206.66 L1798.21 1206.66 L1797.62 1206.66 L1797.03 1206.66 L1796.45 1206.66 L1795.86 1206.66 L1795.27 1206.66 L1794.69 1206.66 L1794.1 1206.66 L1793.52 1206.66 L1792.93 1206.66 L1792.34 1206.66 L1791.76 1206.66 L1791.17 1206.66 L1790.58 1206.66 L1790 1206.66 L1789.41 1206.66 L1788.82 1206.66 L1788.24 1206.66 L1787.65 1206.66 L1787.06 1206.66 L1786.48 1206.66 L1785.89 1206.66 L1785.31 1206.66 L1784.72 1206.66 L1784.13 1206.66 L1783.55 1206.66 L1782.96 1206.66 L1782.37 1206.66 L1781.79 1206.66 L1781.2 1206.66 L1780.61 1206.66 L1780.03 1206.66 L1779.44 1206.66 L1778.86 1206.66 L1778.27 1206.66 L1777.68 1206.66 L1777.1 1206.66 L1776.51 1206.66 L1775.92 1206.66 L1775.34 1206.66 L1774.75 1206.66 L1774.16 1206.66 L1773.58 1206.66 L1772.99 1206.66 L1772.4 1206.66 L1771.82 1206.66 L1771.23 1206.66 L1770.65 1206.66 L1770.06 1206.66 L1769.47 1206.66 L1768.89 1206.66 L1768.3 1206.66 L1767.71 1206.66 L1767.13 1206.66 L1766.54 1206.66 L1765.95 1206.66 L1765.37 1206.66 L1764.78 1206.66 L1764.19 1206.66 L1763.61 1206.66 L1763.02 1206.66 L1762.44 1206.66 L1761.85 1206.66 L1761.26 1206.66 L1760.68 1206.66 L1760.09 1206.66 L1759.5 1206.66 L1758.92 1206.66 L1758.33 1206.66 L1757.74 1206.66 L1757.16 1206.66 L1756.57 1206.66 L1755.99 1206.66 L1755.4 1206.66 L1754.81 1206.66 L1754.23 1206.66 L1753.64 1206.66 L1753.05 1206.66 L1752.47 1206.66 L1751.88 1206.66 L1751.29 1206.66 L1750.71 1206.66 L1750.12 1206.66 L1749.53 1206.66 L1748.95 1206.66 L1748.36 1206.66 L1747.78 1206.66 L1747.19 1206.66 L1746.6 1206.66 L1746.02 1206.66 L1745.43 1206.66 L1744.84 1206.66 L1744.26 1206.66 L1743.67 1206.66 L1743.08 1206.66 L1742.5 1206.66 L1741.91 1206.66 L1741.32 1206.66 L1740.74 1206.66 L1740.15 1206.66 L1739.57 1206.66 L1738.98 1206.66 L1738.39 1206.66 L1737.81 1206.66 L1737.22 1206.66 L1736.63 1206.66 L1736.05 1206.66 L1735.46 1206.66 L1734.87 1206.66 L1734.29 1206.66 L1733.7 1206.66 L1733.11 1206.66 L1732.53 1206.66 L1731.94 1206.66 L1731.36 1206.66 L1730.77 1206.66 L1730.18 1206.66 L1729.6 1206.66 L1729.01 1206.66 L1728.42 1206.66 L1727.84 1206.66 L1727.25 1206.66 L1726.66 1206.66 L1726.08 1206.66 L1725.49 1206.66 L1724.91 1206.66 L1724.32 1206.66 L1723.73 1206.66 L1723.15 1206.66 L1722.56 1206.66 L1721.97 1206.66 L1721.39 1206.66 L1720.8 1206.66 L1720.21 1206.66 L1719.63 1206.66 L1719.04 1206.66 L1718.45 1206.66 L1717.87 1206.66 L1717.28 1206.66 L1716.7 1206.66 L1716.11 1206.66 L1715.52 1206.66 L1714.94 1206.66 L1714.35 1206.66 L1713.76 1206.66 L1713.18 1206.66 L1712.59 1206.66 L1712 1206.66 L1711.42 1206.66 L1710.83 1206.66 L1710.24 1206.66 L1709.66 1206.66 L1709.07 1206.66 L1708.49 1206.66 L1707.9 1206.66 L1707.31 1206.66 L1706.73 1206.66 L1706.14 1206.66 L1705.55 1206.66 L1704.97 1206.66 L1704.38 1206.66 L1703.79 1206.66 L1703.21 1206.66 L1702.62 1206.66 L1702.04 1206.66 L1701.45 1206.66 L1700.86 1206.66 L1700.28 1206.66 L1699.69 1206.66 L1699.1 1206.66 L1698.52 1206.66 L1697.93 1206.66 L1697.34 1206.66 L1696.76 1206.66 L1696.17 1206.66 L1695.58 1206.66 L1695 1206.66 L1694.41 1206.66 L1693.83 1206.66 L1693.24 1206.66 L1692.65 1206.66 L1692.07 1206.66 L1691.48 1206.66 L1690.89 1206.66 L1690.31 1206.66 L1689.72 1206.66 L1689.13 1206.66 L1688.55 1206.66 L1687.96 1206.66 L1687.37 1206.66 L1686.79 1206.66 L1686.2 1206.66 L1685.62 1206.66 L1685.03 1206.66 L1684.44 1206.66 L1683.86 1206.66 L1683.27 1206.66 L1682.68 1206.66 L1682.1 1206.66 L1681.51 1206.66 L1680.92 1206.66 L1680.34 1206.66 L1679.75 1206.66 L1679.17 1206.66 L1678.58 1206.66 L1677.99 1206.66 L1677.41 1206.66 L1676.82 1206.66 L1676.23 1206.66 L1675.65 1206.66 L1675.06 1206.66 L1674.47 1206.66 L1673.89 1206.66 L1673.3 1206.66 L1672.71 1206.66 L1672.13 1206.66 L1671.54 1206.66 L1670.96 1206.66 L1670.37 1206.66 L1669.78 1206.66 L1669.2 1206.66 L1668.61 1206.66 L1668.02 1206.66 L1667.44 1206.66 L1666.85 1206.66 L1666.26 1206.66 L1665.68 1206.66 L1665.09 1206.66 L1664.5 1206.66 L1663.92 1206.66 L1663.33 1206.66 L1662.75 1206.66 L1662.16 1206.66 L1661.57 1206.66 L1660.99 1206.66 L1660.4 1206.66 L1659.81 1206.66 L1659.23 1206.66 L1658.64 1206.66 L1658.05 1206.66 L1657.47 1206.66 L1656.88 1206.66 L1656.29 1206.66 L1655.71 1206.66 L1655.12 1206.66 L1654.54 1206.66 L1653.95 1206.66 L1653.36 1206.66 L1652.78 1206.66 L1652.19 1206.66 L1651.6 1206.66 L1651.02 1206.66 L1650.43 1206.66 L1649.84 1206.66 L1649.26 1206.66 L1648.67 1206.66 L1648.09 1206.66 L1647.5 1206.66 L1646.91 1206.66 L1646.33 1206.66 L1645.74 1206.66 L1645.15 1206.66 L1644.57 1206.66 L1643.98 1206.66 L1643.39 1206.66 L1642.81 1206.66 L1642.22 1206.66 L1641.63 1206.66 L1641.05 1206.66 L1640.46 1206.66 L1639.88 1206.66 L1639.29 1206.66 L1638.7 1206.66 L1638.12 1206.66 L1637.53 1206.66 L1636.94 1206.66 L1636.36 1206.66 L1635.77 1206.66 L1635.18 1206.66 L1634.6 1206.66 L1634.01 1206.66 L1633.42 1206.66 L1632.84 1206.66 L1632.25 1206.66 L1631.67 1206.66 L1631.08 1206.66 L1630.49 1206.66 L1629.91 1206.66 L1629.32 1206.66 L1628.73 1206.66 L1628.15 1206.66 L1627.56 1206.66 L1626.97 1206.66 L1626.39 1206.66 L1625.8 1206.66 L1625.22 1206.66 L1624.63 1206.66 L1624.04 1206.66 L1623.46 1206.66 L1622.87 1206.66 L1622.28 1206.66 L1621.7 1206.66 L1621.11 1206.66 L1620.52 1206.66 L1619.94 1206.66 L1619.35 1206.66 L1618.76 1206.66 L1618.18 1206.66 L1617.59 1206.66 L1617.01 1206.66 L1616.42 1206.66 L1615.83 1206.66 L1615.25 1206.66 L1614.66 1206.66 L1614.07 1206.66 L1613.49 1206.66 L1612.9 1206.66 L1612.31 1206.66 L1611.73 1206.66 L1611.14 1206.66 L1610.55 1206.66 L1609.97 1206.66 L1609.38 1206.66 L1608.8 1206.66 L1608.21 1206.66 L1607.62 1206.66 L1607.04 1206.66 L1606.45 1206.66 L1605.86 1206.66 L1605.28 1206.66 L1604.69 1206.66 L1604.1 1206.66 L1603.52 1206.66 L1602.93 1206.66 L1602.34 1206.66 L1601.76 1206.66 L1601.17 1206.66 L1600.59 1206.66 L1600 1206.66 L1599.41 1206.66 L1598.83 1206.66 L1598.24 1206.66 L1597.65 1206.66 L1597.07 1206.66 L1596.48 1206.66 L1595.89 1206.66 L1595.31 1206.66 L1594.72 1206.66 L1594.14 1206.66 L1593.55 1206.66 L1592.96 1206.66 L1592.38 1206.66 L1591.79 1206.66 L1591.2 1206.66 L1590.62 1206.66 L1590.03 1206.66 L1589.44 1206.66 L1588.86 1206.66 L1588.27 1206.66 L1587.68 1206.66 L1587.1 1206.66 L1586.51 1206.66 L1585.93 1206.66 L1585.34 1206.66 L1584.75 1206.66 L1584.17 1206.66 L1583.58 1206.66 L1582.99 1206.66 L1582.41 1206.66 L1581.82 1206.66 L1581.23 1206.66 L1580.65 1206.66 L1580.06 1206.66 L1579.47 1206.66 L1578.89 1206.66 L1578.3 1206.66 L1577.72 1206.66 L1577.13 1206.66 L1576.54 1206.66 L1575.96 1206.66 L1575.37 1206.66 L1574.78 1206.66 L1574.2 1206.66 L1573.61 1206.66 L1573.02 1206.66 L1572.44 1206.66 L1571.85 1206.66 L1571.27 1206.66 L1570.68 1206.66 L1570.09 1206.66 L1569.51 1206.66 L1568.92 1206.66 L1568.33 1206.66 L1567.75 1206.66 L1567.16 1206.66 L1566.57 1206.66 L1565.99 1206.66 L1565.4 1206.66 L1564.81 1206.66 L1564.23 1206.66 L1563.64 1206.66 L1563.06 1206.66 L1562.47 1206.66 L1561.88 1206.66 L1561.3 1206.66 L1560.71 1206.66 L1560.12 1206.66 L1559.54 1206.66 L1558.95 1206.66 L1558.36 1206.66 L1557.78 1206.66 L1557.19 1206.66 L1556.6 1206.66 L1556.02 1206.66 L1555.43 1206.66 L1554.85 1206.66 L1554.26 1206.66 L1553.67 1206.66 L1553.09 1206.66 L1552.5 1206.66 L1551.91 1206.66 L1551.33 1206.66 L1550.74 1206.66 L1550.15 1206.66 L1549.57 1206.66 L1548.98 1206.66 L1548.4 1206.66 L1547.81 1206.66 L1547.22 1206.66 L1546.64 1206.66 L1546.05 1206.66 L1545.46 1206.66 L1544.88 1206.66 L1544.29 1206.66 L1543.7 1206.66 L1543.12 1206.66 L1542.53 1206.66 L1541.94 1206.66 L1541.36 1206.66 L1540.77 1206.66 L1540.19 1206.66 L1539.6 1206.66 L1539.01 1206.66 L1538.43 1206.66 L1537.84 1206.66 L1537.25 1206.66 L1536.67 1206.66 L1536.08 1206.66 L1535.49 1206.66 L1534.91 1206.66 L1534.32 1206.66 L1533.73 1206.66 L1533.15 1206.66 L1532.56 1206.66 L1531.98 1206.66 L1531.39 1206.66 L1530.8 1206.66 L1530.22 1206.66 L1529.63 1206.66 L1529.04 1206.66 L1528.46 1206.66 L1527.87 1206.66 L1527.28 1206.66 L1526.7 1206.66 L1526.11 1206.66 L1525.52 1206.66 L1524.94 1206.66 L1524.35 1206.66 L1523.77 1206.66 L1523.18 1206.66 L1522.59 1206.66 L1522.01 1206.66 L1521.42 1206.66 L1520.83 1206.66 L1520.25 1206.66 L1519.66 1206.66 L1519.07 1206.66 L1518.49 1206.66 L1517.9 1206.66 L1517.32 1206.66 L1516.73 1206.66 L1516.14 1206.66 L1515.56 1206.66 L1514.97 1206.66 L1514.38 1206.66 L1513.8 1206.66 L1513.21 1206.66 L1512.62 1206.66 L1512.04 1206.66 L1511.45 1206.66 L1510.86 1206.66 L1510.28 1206.66 L1509.69 1206.66 L1509.11 1206.66 L1508.52 1206.66 L1507.93 1206.66 L1507.35 1206.66 L1506.76 1206.66 L1506.17 1206.66 L1505.59 1206.66 L1505 1206.66 L1504.41 1206.66 L1503.83 1206.66 L1503.24 1206.66 L1502.65 1206.66 L1502.07 1206.66 L1501.48 1206.66 L1500.9 1206.66 L1500.31 1206.66 L1499.72 1206.66 L1499.14 1206.66 L1498.55 1206.66 L1497.96 1206.66 L1497.38 1206.66 L1496.79 1206.66 L1496.2 1206.66 L1495.62 1206.66 L1495.03 1206.66 L1494.45 1206.66 L1493.86 1206.66 L1493.27 1206.66 L1492.69 1206.66 L1492.1 1206.66 L1491.51 1206.66 L1490.93 1206.66 L1490.34 1206.66 L1489.75 1206.66 L1489.17 1206.66 L1488.58 1206.66 L1487.99 1206.66 L1487.41 1206.66 L1486.82 1206.66 L1486.24 1206.66 L1485.65 1206.66 L1485.06 1206.66 L1484.48 1206.66 L1483.89 1206.66 L1483.3 1206.66 L1482.72 1206.66 L1482.13 1206.66 L1481.54 1206.66 L1480.96 1206.66 L1480.37 1206.66 L1479.78 1206.66 L1479.2 1206.66 L1478.61 1206.66 L1478.03 1206.66 L1477.44 1206.66 L1476.85 1206.66 L1476.27 1206.66 L1475.68 1206.66 L1475.09 1206.66 L1474.51 1206.66 L1473.92 1206.66 L1473.33 1206.66 L1472.75 1206.66 L1472.16 1206.66 L1471.57 1206.66 L1470.99 1206.66 L1470.4 1206.66 L1469.82 1206.66 L1469.23 1206.66 L1468.64 1206.66 L1468.06 1206.66 L1467.47 1206.66 L1466.88 1206.66 L1466.3 1206.66 L1465.71 1206.66 L1465.12 1206.66 L1464.54 1206.66 L1463.95 1206.66 L1463.37 1206.66 L1462.78 1206.66 L1462.19 1206.66 L1461.61 1206.66 L1461.02 1206.66 L1460.43 1206.66 L1459.85 1206.66 L1459.26 1206.66 L1458.67 1206.66 L1458.09 1206.66 L1457.5 1206.66 L1456.91 1206.66 L1456.33 1206.66 L1455.74 1206.66 L1455.16 1206.66 L1454.57 1206.66 L1453.98 1206.66 L1453.4 1206.66 L1452.81 1206.66 L1452.22 1206.66 L1451.64 1206.66 L1451.05 1206.66 L1450.46 1206.66 L1449.88 1206.66 L1449.29 1206.66 L1448.7 1206.66 L1448.12 1206.66 L1447.53 1206.66 L1446.95 1206.66 L1446.36 1206.66 L1445.77 1206.66 L1445.19 1206.66 L1444.6 1206.66 L1444.01 1206.66 L1443.43 1206.66 L1442.84 1206.66 L1442.25 1206.66 L1441.67 1206.66 L1441.08 1206.66 L1440.5 1206.66 L1439.91 1206.66 L1439.32 1206.66 L1438.74 1206.66 L1438.15 1206.66 L1437.56 1206.66 L1436.98 1206.66 L1436.39 1206.66 L1435.8 1206.66 L1435.22 1206.66 L1434.63 1206.66 L1434.04 1206.66 L1433.46 1206.66 L1432.87 1206.66 L1432.29 1206.66 L1431.7 1206.66 L1431.11 1206.66 L1430.53 1206.66 L1429.94 1206.66 L1429.35 1206.66 L1428.77 1206.66 L1428.18 1206.66 L1427.59 1206.66 L1427.01 1206.66 L1426.42 1206.66 L1425.83 1206.66 L1425.25 1206.66 L1424.66 1206.66 L1424.08 1206.66 L1423.49 1206.66 L1422.9 1206.66 L1422.32 1206.66 L1421.73 1206.66 L1421.14 1206.66 L1420.56 1206.66 L1419.97 1206.66 L1419.38 1206.66 L1418.8 1206.66 L1418.21 1206.66 L1417.63 1206.66 L1417.04 1206.66 L1416.45 1206.66 L1415.87 1206.66 L1415.28 1206.66 L1414.69 1206.66 L1414.11 1206.66 L1413.52 1206.66 L1412.93 1206.66 L1412.35 1206.66 L1411.76 1206.66 L1411.17 1206.66 L1410.59 1206.66 L1410 1206.66 L1409.42 1206.66 L1408.83 1206.66 L1408.24 1206.66 L1407.66 1206.66 L1407.07 1206.66 L1406.48 1206.66 L1405.9 1206.66 L1405.31 1206.66 L1404.72 1206.66 L1404.14 1206.66 L1403.55 1206.66 L1402.96 1206.66 L1402.38 1206.66 L1401.79 1206.66 L1401.21 1206.66 L1400.62 1206.66 L1400.03 1206.66 L1399.45 1206.66 L1398.86 1206.66 L1398.27 1206.66 L1397.69 1206.66 L1397.1 1206.66 L1396.51 1206.66 L1395.93 1206.66 L1395.34 1206.66 L1394.75 1206.66 L1394.17 1206.66 L1393.58 1206.66 L1393 1206.66 L1392.41 1206.66 L1391.82 1206.66 L1391.24 1206.66 L1390.65 1206.66 L1390.06 1206.66 L1389.48 1206.66 L1388.89 1206.66 L1388.3 1206.66 L1387.72 1206.66 L1387.13 1206.66 L1386.55 1206.66 L1385.96 1206.66 L1385.37 1206.66 L1384.79 1206.66 L1384.2 1206.66 L1383.61 1206.66 L1383.03 1206.66 L1382.44 1206.66 L1381.85 1206.66 L1381.27 1206.66 L1380.68 1206.66 L1380.09 1206.66 L1379.51 1206.66 L1378.92 1206.66 L1378.34 1206.66 L1377.75 1206.66 L1377.16 1206.66 L1376.58 1206.66 L1375.99 1206.66 L1375.4 1206.66 L1374.82 1206.66 L1374.23 1206.66 L1373.64 1206.66 L1373.06 1206.66 L1372.47 1206.66 L1371.88 1206.66 L1371.3 1206.66 L1370.71 1206.66 L1370.13 1206.66 L1369.54 1206.66 L1368.95 1206.66 L1368.37 1206.66 L1367.78 1206.66 L1367.19 1206.66 L1366.61 1206.66 L1366.02 1206.66 L1365.43 1206.66 L1364.85 1206.66 L1364.26 1206.66 L1363.68 1206.66 L1363.09 1206.66 L1362.5 1206.66 L1361.92 1206.66 L1361.33 1206.66 L1360.74 1206.66 L1360.16 1206.66 L1359.57 1206.66 L1358.98 1206.66 L1358.4 1206.66 L1357.81 1206.66 L1357.22 1206.66 L1356.64 1206.66 L1356.05 1206.66 L1355.47 1206.66 L1354.88 1206.66 L1354.29 1206.66 L1353.71 1206.66 L1353.12 1206.66 L1352.53 1206.66 L1351.95 1206.66 L1351.36 1206.66 L1350.77 1206.66 L1350.19 1206.66 L1349.6 1206.66 L1349.01 1206.66 L1348.43 1206.66 L1347.84 1206.66 L1347.26 1206.66 L1346.67 1206.66 L1346.08 1206.66 L1345.5 1206.66 L1344.91 1206.66 L1344.32 1206.66 L1343.74 1206.66 L1343.15 1206.66 L1342.56 1206.66 L1341.98 1206.66 L1341.39 1206.66 L1340.8 1206.66 L1340.22 1206.66 L1339.63 1206.66 L1339.05 1206.66 L1338.46 1206.66 L1337.87 1206.66 L1337.29 1206.66 L1336.7 1206.66 L1336.11 1206.66 L1335.53 1206.66 L1334.94 1206.66 L1334.35 1206.66 L1333.77 1206.66 L1333.18 1206.66 L1332.6 1206.66 L1332.01 1206.66 L1331.42 1206.66 L1330.84 1206.66 L1330.25 1206.66 L1329.66 1206.66 L1329.08 1206.66 L1328.49 1206.66 L1327.9 1206.66 L1327.32 1206.66 L1326.73 1206.66 L1326.14 1206.66 L1325.56 1206.66 L1324.97 1206.66 L1324.39 1206.66 L1323.8 1206.66 L1323.21 1206.66 L1322.63 1206.66 L1322.04 1206.66 L1321.45 1206.66 L1320.87 1206.66 L1320.28 1206.66 L1319.69 1206.66 L1319.11 1206.66 L1318.52 1206.66 L1317.93 1206.66 L1317.35 1206.66 L1316.76 1206.66 L1316.18 1206.66 L1315.59 1206.66 L1315 1206.66 L1314.42 1206.66 L1313.83 1206.66 L1313.24 1206.66 L1312.66 1206.66 L1312.07 1206.66 L1311.48 1206.66 L1310.9 1206.66 L1310.31 1206.66 L1309.73 1206.66 L1309.14 1206.66 L1308.55 1206.66 L1307.97 1206.66 L1307.38 1206.66 L1306.79 1206.66 L1306.21 1206.66 L1305.62 1206.66 L1305.03 1206.66 L1304.45 1206.66 L1303.86 1206.66 L1303.27 1206.66 L1302.69 1206.66 L1302.1 1206.66 L1301.52 1206.66 L1300.93 1206.66 L1300.34 1206.66 L1299.76 1206.66 L1299.17 1206.66 L1298.58 1206.66 L1298 1206.66 L1297.41 1206.66 L1296.82 1206.66 L1296.24 1206.66 L1295.65 1206.66 L1295.06 1206.66 L1294.48 1206.66 L1293.89 1206.66 L1293.31 1206.66 L1292.72 1206.66 L1292.13 1206.66 L1291.55 1206.66 L1290.96 1206.66 L1290.37 1206.66 L1289.79 1206.66 L1289.2 1206.66 L1288.61 1206.66 L1288.03 1206.66 L1287.44 1206.66 L1286.86 1206.66 L1286.27 1206.66 L1285.68 1206.66 L1285.1 1206.66 L1284.51 1206.66 L1283.92 1206.66 L1283.34 1206.66 L1282.75 1206.66 L1282.16 1206.66 L1281.58 1206.66 L1280.99 1206.66 L1280.4 1206.66 L1279.82 1206.66 L1279.23 1206.66 L1278.65 1206.66 L1278.06 1206.66 L1277.47 1206.66 L1276.89 1206.66 L1276.3 1206.66 L1275.71 1206.66 L1275.13 1206.66 L1274.54 1206.66 L1273.95 1206.66 L1273.37 1206.66 L1272.78 1206.66 L1272.19 1206.66 L1271.61 1206.66 L1271.02 1206.66 L1270.44 1206.66 L1269.85 1206.66 L1269.26 1206.66 L1268.68 1206.66 L1268.09 1206.66 L1267.5 1206.66 L1266.92 1206.66 L1266.33 1206.66 L1265.74 1206.66 L1265.16 1206.66 L1264.57 1206.66 L1263.98 1206.66 L1263.4 1206.66 L1262.81 1206.66 L1262.23 1206.66 L1261.64 1206.66 L1261.05 1206.66 L1260.47 1206.66 L1259.88 1206.66 L1259.29 1206.66 L1258.71 1206.66 L1258.12 1206.66 L1257.53 1206.66 L1256.95 1206.66 L1256.36 1206.66 L1255.78 1206.66 L1255.19 1206.66 L1254.6 1206.66 L1254.02 1206.66 L1253.43 1206.66 L1252.84 1206.66 L1252.26 1206.66 L1251.67 1206.66 L1251.08 1206.66 L1250.5 1206.66 L1249.91 1206.66 L1249.32 1206.66 L1248.74 1206.66 L1248.15 1206.66 L1247.57 1206.66 L1246.98 1206.66 L1246.39 1206.66 L1245.81 1206.66 L1245.22 1206.66 L1244.63 1206.66 L1244.05 1206.66 L1243.46 1206.66 L1242.87 1206.66 L1242.29 1206.66 L1241.7 1206.66 L1241.11 1206.66 L1240.53 1206.66 L1239.94 1206.66 L1239.36 1206.66 L1238.77 1206.66 L1238.18 1206.66 L1237.6 1206.66 L1237.01 1206.66 L1236.42 1206.66 L1235.84 1206.66 L1235.25 1206.66 L1234.66 1206.66 L1234.08 1206.66 L1233.49 1206.66 L1232.91 1206.66 L1232.32 1206.66 L1231.73 1206.66 L1231.15 1206.66 L1230.56 1206.66 L1229.97 1206.66 L1229.39 1206.66 L1228.8 1206.66 L1228.21 1206.66 L1227.63 1206.66 L1227.04 1206.66 L1226.45 1206.66 L1225.87 1206.66 L1225.28 1206.66 L1224.7 1206.66 L1224.11 1206.66 L1223.52 1206.66 L1222.94 1206.66 L1222.35 1206.66 L1221.76 1206.66 L1221.18 1206.66 L1220.59 1206.66 L1220 1206.66 L1219.42 1206.66 L1218.83 1206.66 L1218.24 1206.66 L1217.66 1206.66 L1217.07 1206.66 L1216.49 1206.66 L1215.9 1206.66 L1215.31 1206.66 L1214.73 1206.66 L1214.14 1206.66 L1213.55 1206.66 L1212.97 1206.66 L1212.38 1206.66 L1211.79 1206.66 L1211.21 1206.66 L1210.62 1206.66 L1210.03 1206.66 L1209.45 1206.66 L1208.86 1206.66 L1208.28 1206.66 L1207.69 1206.66 L1207.1 1206.66 L1206.52 1206.66 L1205.93 1206.66 L1205.34 1206.66 L1204.76 1206.66 L1204.17 1206.66 L1203.58 1206.66 L1203 1206.66 L1202.41 1206.66 L1201.83 1206.66 L1201.24 1206.66 L1200.65 1206.66 L1200.07 1206.66 L1199.48 1206.66 L1198.89 1206.66 L1198.31 1206.66 L1197.72 1206.66 L1197.13 1206.66 L1196.55 1206.66 L1195.96 1206.66 L1195.37 1206.66 L1194.79 1206.66 L1194.2 1206.66 L1193.62 1206.66 L1193.03 1206.66 L1192.44 1206.66 L1191.86 1206.66 L1191.27 1206.66 L1190.68 1206.66 L1190.1 1206.66 L1189.51 1206.66 L1188.92 1206.66 L1188.34 1206.66 L1187.75 1206.66 L1187.16 1206.66 L1186.58 1206.66 L1185.99 1206.66 L1185.41 1206.66 L1184.82 1206.66 L1184.23 1206.66 L1183.65 1206.66 L1183.06 1206.66 L1182.47 1206.66 L1181.89 1206.66 L1181.3 1206.66 L1180.71 1206.66 L1180.13 1206.66 L1179.54 1206.66 L1178.96 1206.66 L1178.37 1206.66 L1177.78 1206.66 L1177.2 1206.66 L1176.61 1206.66 L1176.02 1206.66 L1175.44 1206.66 L1174.85 1206.66 L1174.26 1206.66 L1173.68 1206.66 L1173.09 1206.66 L1172.5 1206.66 L1171.92 1206.66 L1171.33 1206.66 L1170.75 1206.66 L1170.16 1206.66 L1169.57 1206.66 L1168.99 1206.66 L1168.4 1206.66 L1167.81 1206.66 L1167.23 1206.66 L1166.64 1206.66 L1166.05 1206.66 L1165.47 1206.66 L1164.88 1206.66 L1164.29 1206.66 L1163.71 1206.66 L1163.12 1206.66 L1162.54 1206.66 L1161.95 1206.66 L1161.36 1206.66 L1160.78 1206.66 L1160.19 1206.66 L1159.6 1206.66 L1159.02 1206.66 L1158.43 1206.66 L1157.84 1206.66 L1157.26 1206.66 L1156.67 1206.66 L1156.09 1206.66 L1155.5 1206.66 L1154.91 1206.66 L1154.33 1206.66 L1153.74 1206.66 L1153.15 1206.66 L1152.57 1206.66 L1151.98 1206.66 L1151.39 1206.66 L1150.81 1206.66 L1150.22 1206.66 L1149.63 1206.66 L1149.05 1206.66 L1148.46 1206.66 L1147.88 1206.66 L1147.29 1206.66 L1146.7 1206.66 L1146.12 1206.66 L1145.53 1206.66 L1144.94 1206.66 L1144.36 1206.66 L1143.77 1206.66 L1143.18 1206.66 L1142.6 1206.66 L1142.01 1206.66 L1141.42 1206.66 L1140.84 1206.66 L1140.25 1206.66 L1139.67 1206.66 L1139.08 1206.66 L1138.49 1206.66 L1137.91 1206.66 L1137.32 1206.66 L1136.73 1206.66 L1136.15 1206.66 L1135.56 1206.66 L1134.97 1206.66 L1134.39 1206.66 L1133.8 1206.66 L1133.21 1206.66 L1132.63 1206.66 L1132.04 1206.66 L1131.46 1206.66 L1130.87 1206.66 L1130.28 1206.66 L1129.7 1206.66 L1129.11 1206.66 L1128.52 1206.66 L1127.94 1206.66 L1127.35 1206.66 L1126.76 1206.66 L1126.18 1206.66 L1125.59 1206.66 L1125.01 1206.66 L1124.42 1206.66 L1123.83 1206.66 L1123.25 1206.66 L1122.66 1206.66 L1122.07 1206.66 L1121.49 1206.66 L1120.9 1206.66 L1120.31 1206.66 L1119.73 1206.66 L1119.14 1206.66 L1118.55 1206.66 L1117.97 1206.66 L1117.38 1206.66 L1116.8 1206.66 L1116.21 1206.66 L1115.62 1206.66 L1115.04 1206.66 L1114.45 1206.66 L1113.86 1206.66 L1113.28 1206.66 L1112.69 1206.66 L1112.1 1206.66 L1111.52 1206.66 L1110.93 1206.66 L1110.34 1206.66 L1109.76 1206.66 L1109.17 1206.66 L1108.59 1206.66 L1108 1206.66 L1107.41 1206.66 L1106.83 1206.66 L1106.24 1206.66 L1105.65 1206.66 L1105.07 1206.66 L1104.48 1206.66 L1103.89 1206.66 L1103.31 1206.66 L1102.72 1206.66 L1102.14 1206.66 L1101.55 1206.66 L1100.96 1206.66 L1100.38 1206.66 L1099.79 1206.66 L1099.2 1206.66 L1098.62 1206.66 L1098.03 1206.66 L1097.44 1206.66 L1096.86 1206.66 L1096.27 1206.66 L1095.68 1206.66 L1095.1 1206.66 L1094.51 1206.66 L1093.93 1206.66 L1093.34 1206.66 L1092.75 1206.66 L1092.17 1206.66 L1091.58 1206.66 L1090.99 1206.66 L1090.41 1206.66 L1089.82 1206.66 L1089.23 1206.66 L1088.65 1206.66 L1088.06 1206.66 L1087.47 1206.66 L1086.89 1206.66 L1086.3 1206.66 L1085.72 1206.66 L1085.13 1206.66 L1084.54 1206.66 L1083.96 1206.66 L1083.37 1206.66 L1082.78 1206.66 L1082.2 1206.66 L1081.61 1206.66 L1081.02 1206.66 L1080.44 1206.66 L1079.85 1206.66 L1079.26 1206.66 L1078.68 1206.66 L1078.09 1206.66 L1077.51 1206.66 L1076.92 1206.66 L1076.33 1206.66 L1075.75 1206.66 L1075.16 1206.66 L1074.57 1206.66 L1073.99 1206.66 L1073.4 1206.66 L1072.81 1206.66 L1072.23 1206.66 L1071.64 1206.66 L1071.06 1206.66 L1070.47 1206.66 L1069.88 1206.66 L1069.3 1206.66 L1068.71 1206.66 L1068.12 1206.66 L1067.54 1206.66 L1066.95 1206.66 L1066.36 1206.66 L1065.78 1206.66 L1065.19 1206.66 L1064.6 1206.66 L1064.02 1206.66 L1063.43 1206.66 L1062.85 1206.66 L1062.26 1206.66 L1061.67 1206.66 L1061.09 1206.66 L1060.5 1206.66 L1059.91 1206.66 L1059.33 1206.66 L1058.74 1206.66 L1058.15 1206.66 L1057.57 1206.66 L1056.98 1206.66 L1056.39 1206.66 L1055.81 1206.66 L1055.22 1206.66 L1054.64 1206.66 L1054.05 1206.66 L1053.46 1206.66 L1052.88 1206.66 L1052.29 1206.66 L1051.7 1206.66 L1051.12 1206.66 L1050.53 1206.66 L1049.94 1206.66 L1049.36 1206.66 L1048.77 1206.66 L1048.19 1206.66 L1047.6 1206.66 L1047.01 1206.66 L1046.43 1206.66 L1045.84 1206.66 L1045.25 1206.66 L1044.67 1206.66 L1044.08 1206.66 L1043.49 1206.66 L1042.91 1206.66 L1042.32 1206.66 L1041.73 1206.66 L1041.15 1206.66 L1040.56 1206.66 L1039.98 1206.66 L1039.39 1206.66 L1038.8 1206.66 L1038.22 1206.66 L1037.63 1206.66 L1037.04 1206.66 L1036.46 1206.66 L1035.87 1206.66 L1035.28 1206.66 L1034.7 1206.66 L1034.11 1206.66 L1033.52 1206.66 L1032.94 1206.66 L1032.35 1206.66 L1031.77 1206.66 L1031.18 1206.66 L1030.59 1206.66 L1030.01 1206.66 L1029.42 1206.66 L1028.83 1206.66 L1028.25 1206.66 L1027.66 1206.66 L1027.07 1206.66 L1026.49 1206.66 L1025.9 1206.66 L1025.32 1206.66 L1024.73 1206.66 L1024.14 1206.66 L1023.56 1206.66 L1022.97 1206.66 L1022.38 1206.66 L1021.8 1206.66 L1021.21 1206.66 L1020.62 1206.66 L1020.04 1206.66 L1019.45 1206.66 L1018.86 1206.66 L1018.28 1206.66 L1017.69 1206.66 L1017.11 1206.66 L1016.52 1206.66 L1015.93 1206.66 L1015.35 1206.66 L1014.76 1206.66 L1014.17 1206.66 L1013.59 1206.66 L1013 1206.66 L1012.41 1206.66 L1011.83 1206.66 L1011.24 1206.66 L1010.65 1206.66 L1010.07 1206.66 L1009.48 1206.66 L1008.9 1206.66 L1008.31 1206.66 L1007.72 1206.66 L1007.14 1206.66 L1006.55 1206.66 L1005.96 1206.66 L1005.38 1206.66 L1004.79 1206.66 L1004.2 1206.66 L1003.62 1206.66 L1003.03 1206.66 L1002.44 1206.66 L1001.86 1206.66 L1001.27 1206.66 L1000.69 1206.66 L1000.1 1206.66 L999.513 1206.66 L998.926 1206.66 L998.34 1206.66 L997.754 1206.66 L997.167 1206.66 L996.581 1206.66 L995.994 1206.66 L995.408 1206.66 L994.822 1206.66 L994.235 1206.66 L993.649 1206.66 L993.062 1206.66 L992.476 1206.66 L991.889 1206.66 L991.303 1206.66 L990.717 1206.66 L990.13 1206.66 L989.544 1206.66 L988.957 1206.66 L988.371 1206.66 L987.785 1206.66 L987.198 1206.66 L986.612 1206.66 L986.025 1206.66  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.72 986.612,1206.72 987.198,1206.72 987.785,1206.72 988.371,1206.72 988.957,1206.72 989.544,1206.72 990.13,1206.72 990.717,1206.72 991.303,1206.72 991.889,1206.72 992.476,1206.72 993.062,1206.72 993.649,1206.72 994.235,1206.72 994.822,1206.72 995.408,1206.72 995.994,1206.72 996.581,1206.72 997.167,1206.72 997.754,1206.72 998.34,1206.72 998.926,1206.72 999.513,1206.72 1000.1,1206.72 1000.69,1206.72 1001.27,1206.72 1001.86,1206.72 1002.44,1206.72 1003.03,1206.72 1003.62,1206.72 1004.2,1206.72 1004.79,1206.72 1005.38,1206.72 1005.96,1206.72 1006.55,1206.72 1007.14,1206.72 1007.72,1206.72 1008.31,1206.72 1008.9,1206.72 1009.48,1206.72 1010.07,1206.72 1010.65,1206.72 1011.24,1206.72 1011.83,1206.72 1012.41,1206.72 1013,1206.72 1013.59,1206.72 1014.17,1206.72 1014.76,1206.72 1015.35,1206.72 1015.93,1206.72 1016.52,1206.72 1017.11,1206.72 1017.69,1206.72 1018.28,1206.72 1018.86,1206.72 1019.45,1206.72 1020.04,1206.72 1020.62,1206.72 1021.21,1206.72 1021.8,1206.72 1022.38,1206.72 1022.97,1206.72 1023.56,1206.72 1024.14,1206.72 1024.73,1206.72 1025.32,1206.72 1025.9,1206.72 1026.49,1206.72 1027.07,1206.72 1027.66,1206.72 1028.25,1206.72 1028.83,1206.72 1029.42,1206.72 1030.01,1206.72 1030.59,1206.72 1031.18,1206.72 1031.77,1206.72 1032.35,1206.72 1032.94,1206.72 1033.52,1206.72 1034.11,1206.72 1034.7,1206.72 1035.28,1206.72 1035.87,1206.72 1036.46,1206.72 1037.04,1206.72 1037.63,1206.72 1038.22,1206.72 1038.8,1206.72 1039.39,1206.72 1039.98,1206.72 1040.56,1206.72 1041.15,1206.72 1041.73,1206.72 1042.32,1206.72 1042.91,1206.72 1043.49,1206.72 1044.08,1206.72 1044.67,1206.72 1045.25,1206.72 1045.84,1206.72 1046.43,1206.72 1047.01,1206.72 1047.6,1206.72 1048.19,1206.72 1048.77,1206.72 1049.36,1206.72 1049.94,1206.72 1050.53,1206.72 1051.12,1206.72 1051.7,1206.72 1052.29,1206.72 1052.88,1206.72 1053.46,1206.72 1054.05,1206.72 1054.64,1206.72 1055.22,1206.72 1055.81,1206.72 1056.39,1206.72 1056.98,1206.72 1057.57,1206.72 1058.15,1206.72 1058.74,1206.72 1059.33,1206.72 1059.91,1206.72 1060.5,1206.72 1061.09,1206.72 1061.67,1206.72 1062.26,1206.72 1062.85,1206.72 1063.43,1206.72 1064.02,1206.72 1064.6,1206.72 1065.19,1206.72 1065.78,1206.72 1066.36,1206.72 1066.95,1206.72 1067.54,1206.72 1068.12,1206.72 1068.71,1206.72 1069.3,1206.72 1069.88,1206.72 1070.47,1206.72 1071.06,1206.72 1071.64,1206.72 1072.23,1206.72 1072.81,1206.72 1073.4,1206.72 1073.99,1206.72 1074.57,1206.72 1075.16,1206.72 1075.75,1206.72 1076.33,1206.72 1076.92,1206.72 1077.51,1206.72 1078.09,1206.72 1078.68,1206.72 1079.26,1206.72 1079.85,1206.72 1080.44,1206.72 1081.02,1206.72 1081.61,1206.72 1082.2,1206.72 1082.78,1206.72 1083.37,1206.72 1083.96,1206.72 1084.54,1206.72 1085.13,1206.72 1085.72,1206.72 1086.3,1206.72 1086.89,1206.72 1087.47,1206.72 1088.06,1206.72 1088.65,1206.72 1089.23,1206.72 1089.82,1206.72 1090.41,1206.72 1090.99,1206.72 1091.58,1206.72 1092.17,1206.72 1092.75,1206.72 1093.34,1206.72 1093.93,1206.72 1094.51,1206.72 1095.1,1206.72 1095.68,1206.72 1096.27,1206.72 1096.86,1206.72 1097.44,1206.72 1098.03,1206.72 1098.62,1206.72 1099.2,1206.72 1099.79,1206.72 1100.38,1206.72 1100.96,1206.72 1101.55,1206.72 1102.14,1206.72 1102.72,1206.72 1103.31,1206.72 1103.89,1206.72 1104.48,1206.72 1105.07,1206.72 1105.65,1206.72 1106.24,1206.72 1106.83,1206.72 1107.41,1206.72 1108,1206.72 1108.59,1206.72 1109.17,1206.72 1109.76,1206.72 1110.34,1206.72 1110.93,1206.72 1111.52,1206.72 1112.1,1206.72 1112.69,1206.72 1113.28,1206.72 1113.86,1206.72 1114.45,1206.72 1115.04,1206.72 1115.62,1206.72 1116.21,1206.72 1116.8,1206.72 1117.38,1206.72 1117.97,1206.72 1118.55,1206.72 1119.14,1206.72 1119.73,1206.72 1120.31,1206.72 1120.9,1206.72 1121.49,1206.72 1122.07,1206.72 1122.66,1206.72 1123.25,1206.72 1123.83,1206.72 1124.42,1206.72 1125.01,1206.72 1125.59,1206.72 1126.18,1206.72 1126.76,1206.72 1127.35,1206.72 1127.94,1206.72 1128.52,1206.72 1129.11,1206.72 1129.7,1206.72 1130.28,1206.72 1130.87,1206.72 1131.46,1206.72 1132.04,1206.72 1132.63,1206.72 1133.21,1206.72 1133.8,1206.72 1134.39,1206.72 1134.97,1206.72 1135.56,1206.72 1136.15,1206.72 1136.73,1206.72 1137.32,1206.72 1137.91,1206.72 1138.49,1206.72 1139.08,1206.72 1139.67,1206.72 1140.25,1206.72 1140.84,1206.72 1141.42,1206.72 1142.01,1206.72 1142.6,1206.72 1143.18,1206.72 1143.77,1206.72 1144.36,1206.72 1144.94,1206.72 1145.53,1206.72 1146.12,1206.72 1146.7,1206.72 1147.29,1206.72 1147.88,1206.72 1148.46,1206.72 1149.05,1206.72 1149.63,1206.72 1150.22,1206.72 1150.81,1206.72 1151.39,1206.72 1151.98,1206.72 1152.57,1206.72 1153.15,1206.72 1153.74,1206.72 1154.33,1206.72 1154.91,1206.72 1155.5,1206.72 1156.09,1206.72 1156.67,1206.72 1157.26,1206.72 1157.84,1206.72 1158.43,1206.72 1159.02,1206.72 1159.6,1206.72 1160.19,1206.72 1160.78,1206.72 1161.36,1206.72 1161.95,1206.72 1162.54,1206.72 1163.12,1206.72 1163.71,1206.72 1164.29,1206.72 1164.88,1206.72 1165.47,1206.72 1166.05,1206.72 1166.64,1206.72 1167.23,1206.72 1167.81,1206.72 1168.4,1206.72 1168.99,1206.72 1169.57,1206.72 1170.16,1206.72 1170.75,1206.72 1171.33,1206.72 1171.92,1206.72 1172.5,1206.72 1173.09,1206.72 1173.68,1206.72 1174.26,1206.72 1174.85,1206.72 1175.44,1206.72 1176.02,1206.72 1176.61,1206.72 1177.2,1206.72 1177.78,1206.72 1178.37,1206.72 1178.96,1206.72 1179.54,1206.72 1180.13,1206.72 1180.71,1206.72 1181.3,1206.72 1181.89,1206.72 1182.47,1206.72 1183.06,1206.72 1183.65,1206.72 1184.23,1206.72 1184.82,1206.72 1185.41,1206.72 1185.99,1206.72 1186.58,1206.72 1187.16,1206.72 1187.75,1206.72 1188.34,1206.72 1188.92,1206.72 1189.51,1206.72 1190.1,1206.72 1190.68,1206.72 1191.27,1206.72 1191.86,1206.72 1192.44,1206.72 1193.03,1206.72 1193.62,1206.72 1194.2,1206.72 1194.79,1206.72 1195.37,1206.72 1195.96,1206.72 1196.55,1206.72 1197.13,1206.72 1197.72,1206.72 1198.31,1206.72 1198.89,1206.72 1199.48,1206.72 1200.07,1206.72 1200.65,1206.72 1201.24,1206.72 1201.83,1206.72 1202.41,1206.72 1203,1206.72 1203.58,1206.72 1204.17,1206.72 1204.76,1206.72 1205.34,1206.72 1205.93,1206.72 1206.52,1206.72 1207.1,1206.72 1207.69,1206.72 1208.28,1206.72 1208.86,1206.72 1209.45,1206.72 1210.03,1206.72 1210.62,1206.72 1211.21,1206.72 1211.79,1206.72 1212.38,1206.72 1212.97,1206.72 1213.55,1206.72 1214.14,1206.72 1214.73,1206.72 1215.31,1206.72 1215.9,1206.72 1216.49,1206.72 1217.07,1206.72 1217.66,1206.72 1218.24,1206.72 1218.83,1206.72 1219.42,1206.72 1220,1206.72 1220.59,1206.72 1221.18,1206.72 1221.76,1206.72 1222.35,1206.72 1222.94,1206.72 1223.52,1206.72 1224.11,1206.72 1224.7,1206.72 1225.28,1206.72 1225.87,1206.72 1226.45,1206.72 1227.04,1206.72 1227.63,1206.72 1228.21,1206.72 1228.8,1206.72 1229.39,1206.72 1229.97,1206.72 1230.56,1206.72 1231.15,1206.72 1231.73,1206.72 1232.32,1206.72 1232.91,1206.72 1233.49,1206.72 1234.08,1206.72 1234.66,1206.72 1235.25,1206.72 1235.84,1206.72 1236.42,1206.72 1237.01,1206.72 1237.6,1206.72 1238.18,1206.72 1238.77,1206.72 1239.36,1206.72 1239.94,1206.72 1240.53,1206.72 1241.11,1206.72 1241.7,1206.72 1242.29,1206.72 1242.87,1206.72 1243.46,1206.72 1244.05,1206.72 1244.63,1206.72 1245.22,1206.72 1245.81,1206.72 1246.39,1206.72 1246.98,1206.72 1247.57,1206.72 1248.15,1206.72 1248.74,1206.72 1249.32,1206.72 1249.91,1206.72 1250.5,1206.72 1251.08,1206.72 1251.67,1206.72 1252.26,1206.72 1252.84,1206.72 1253.43,1206.72 1254.02,1206.72 1254.6,1206.72 1255.19,1206.72 1255.78,1206.72 1256.36,1206.72 1256.95,1206.72 1257.53,1206.72 1258.12,1206.72 1258.71,1206.72 1259.29,1206.72 1259.88,1206.72 1260.47,1206.72 1261.05,1206.72 1261.64,1206.72 1262.23,1206.72 1262.81,1206.72 1263.4,1206.72 1263.98,1206.72 1264.57,1206.72 1265.16,1206.72 1265.74,1206.72 1266.33,1206.72 1266.92,1206.72 1267.5,1206.72 1268.09,1206.72 1268.68,1206.72 1269.26,1206.72 1269.85,1206.72 1270.44,1206.72 1271.02,1206.72 1271.61,1206.72 1272.19,1206.72 1272.78,1206.72 1273.37,1206.72 1273.95,1206.72 1274.54,1206.72 1275.13,1206.72 1275.71,1206.72 1276.3,1206.72 1276.89,1206.72 1277.47,1206.72 1278.06,1206.72 1278.65,1206.72 1279.23,1206.72 1279.82,1206.72 1280.4,1206.72 1280.99,1206.72 1281.58,1206.72 1282.16,1206.72 1282.75,1206.72 1283.34,1206.72 1283.92,1206.72 1284.51,1206.72 1285.1,1206.72 1285.68,1206.72 1286.27,1206.72 1286.86,1206.72 1287.44,1206.72 1288.03,1206.72 1288.61,1206.72 1289.2,1206.72 1289.79,1206.72 1290.37,1206.72 1290.96,1206.72 1291.55,1206.72 1292.13,1206.72 1292.72,1206.72 1293.31,1206.72 1293.89,1206.72 1294.48,1206.72 1295.06,1206.72 1295.65,1206.72 1296.24,1206.72 1296.82,1206.72 1297.41,1206.72 1298,1206.72 1298.58,1206.72 1299.17,1206.72 1299.76,1206.72 1300.34,1206.72 1300.93,1206.72 1301.52,1206.72 1302.1,1206.72 1302.69,1206.72 1303.27,1206.72 1303.86,1206.72 1304.45,1206.72 1305.03,1206.72 1305.62,1206.72 1306.21,1206.72 1306.79,1206.72 1307.38,1206.72 1307.97,1206.72 1308.55,1206.72 1309.14,1206.72 1309.73,1206.72 1310.31,1206.72 1310.9,1206.72 1311.48,1206.72 1312.07,1206.72 1312.66,1206.72 1313.24,1206.72 1313.83,1206.72 1314.42,1206.72 1315,1206.72 1315.59,1206.72 1316.18,1206.72 1316.76,1206.72 1317.35,1206.72 1317.93,1206.72 1318.52,1206.72 1319.11,1206.72 1319.69,1206.72 1320.28,1206.72 1320.87,1206.72 1321.45,1206.72 1322.04,1206.72 1322.63,1206.72 1323.21,1206.72 1323.8,1206.72 1324.39,1206.72 1324.97,1206.72 1325.56,1206.72 1326.14,1206.72 1326.73,1206.72 1327.32,1206.72 1327.9,1206.72 1328.49,1206.72 1329.08,1206.72 1329.66,1206.72 1330.25,1206.72 1330.84,1206.72 1331.42,1206.72 1332.01,1206.72 1332.6,1206.72 1333.18,1206.72 1333.77,1206.72 1334.35,1206.72 1334.94,1206.72 1335.53,1206.72 1336.11,1206.72 1336.7,1206.72 1337.29,1206.72 1337.87,1206.72 1338.46,1206.72 1339.05,1206.72 1339.63,1206.72 1340.22,1206.72 1340.8,1206.72 1341.39,1206.72 1341.98,1206.72 1342.56,1206.72 1343.15,1206.72 1343.74,1206.72 1344.32,1206.72 1344.91,1206.72 1345.5,1206.72 1346.08,1206.72 1346.67,1206.72 1347.26,1206.72 1347.84,1206.72 1348.43,1206.72 1349.01,1206.72 1349.6,1206.72 1350.19,1206.72 1350.77,1206.72 1351.36,1206.72 1351.95,1206.72 1352.53,1206.72 1353.12,1206.72 1353.71,1206.72 1354.29,1206.72 1354.88,1206.72 1355.47,1206.72 1356.05,1206.72 1356.64,1206.72 1357.22,1206.72 1357.81,1206.72 1358.4,1206.72 1358.98,1206.72 1359.57,1206.72 1360.16,1206.72 1360.74,1206.72 1361.33,1206.72 1361.92,1206.72 1362.5,1206.72 1363.09,1206.72 1363.68,1206.72 1364.26,1206.72 1364.85,1206.72 1365.43,1206.72 1366.02,1206.72 1366.61,1206.72 1367.19,1206.72 1367.78,1206.72 1368.37,1206.72 1368.95,1206.72 1369.54,1206.72 1370.13,1206.72 1370.71,1206.72 1371.3,1206.72 1371.88,1206.72 1372.47,1206.72 1373.06,1206.72 1373.64,1206.72 1374.23,1206.72 1374.82,1206.72 1375.4,1206.72 1375.99,1206.72 1376.58,1206.72 1377.16,1206.72 1377.75,1206.72 1378.34,1206.72 1378.92,1206.72 1379.51,1206.72 1380.09,1206.72 1380.68,1206.72 1381.27,1206.72 1381.85,1206.72 1382.44,1206.72 1383.03,1206.72 1383.61,1206.72 1384.2,1206.72 1384.79,1206.72 1385.37,1206.72 1385.96,1206.72 1386.55,1206.72 1387.13,1206.72 1387.72,1206.72 1388.3,1206.72 1388.89,1206.72 1389.48,1206.72 1390.06,1206.72 1390.65,1206.72 1391.24,1206.72 1391.82,1206.72 1392.41,1206.72 1393,1206.72 1393.58,1206.72 1394.17,1206.72 1394.75,1206.72 1395.34,1206.72 1395.93,1206.72 1396.51,1206.72 1397.1,1206.72 1397.69,1206.72 1398.27,1206.72 1398.86,1206.72 1399.45,1206.72 1400.03,1206.72 1400.62,1206.72 1401.21,1206.72 1401.79,1206.72 1402.38,1206.72 1402.96,1206.72 1403.55,1206.72 1404.14,1206.72 1404.72,1206.72 1405.31,1206.72 1405.9,1206.72 1406.48,1206.72 1407.07,1206.72 1407.66,1206.72 1408.24,1206.72 1408.83,1206.72 1409.42,1206.72 1410,1206.72 1410.59,1206.72 1411.17,1206.72 1411.76,1206.72 1412.35,1206.72 1412.93,1206.72 1413.52,1206.72 1414.11,1206.72 1414.69,1206.72 1415.28,1206.72 1415.87,1206.72 1416.45,1206.72 1417.04,1206.72 1417.63,1206.72 1418.21,1206.72 1418.8,1206.72 1419.38,1206.72 1419.97,1206.72 1420.56,1206.72 1421.14,1206.72 1421.73,1206.72 1422.32,1206.72 1422.9,1206.72 1423.49,1206.72 1424.08,1206.72 1424.66,1206.72 1425.25,1206.72 1425.83,1206.72 1426.42,1206.72 1427.01,1206.72 1427.59,1206.72 1428.18,1206.72 1428.77,1206.72 1429.35,1206.72 1429.94,1206.72 1430.53,1206.72 1431.11,1206.72 1431.7,1206.72 1432.29,1206.72 1432.87,1206.72 1433.46,1206.72 1434.04,1206.72 1434.63,1206.72 1435.22,1206.72 1435.8,1206.72 1436.39,1206.72 1436.98,1206.72 1437.56,1206.72 1438.15,1206.72 1438.74,1206.72 1439.32,1206.72 1439.91,1206.72 1440.5,1206.72 1441.08,1206.72 1441.67,1206.72 1442.25,1206.72 1442.84,1206.72 1443.43,1206.72 1444.01,1206.72 1444.6,1206.72 1445.19,1206.72 1445.77,1206.72 1446.36,1206.72 1446.95,1206.72 1447.53,1206.72 1448.12,1206.72 1448.7,1206.72 1449.29,1206.72 1449.88,1206.72 1450.46,1206.72 1451.05,1206.72 1451.64,1206.72 1452.22,1206.72 1452.81,1206.72 1453.4,1206.72 1453.98,1206.72 1454.57,1206.72 1455.16,1206.72 1455.74,1206.72 1456.33,1206.72 1456.91,1206.72 1457.5,1206.72 1458.09,1206.72 1458.67,1206.72 1459.26,1206.72 1459.85,1206.72 1460.43,1206.72 1461.02,1206.72 1461.61,1206.72 1462.19,1206.72 1462.78,1206.72 1463.37,1206.72 1463.95,1206.72 1464.54,1206.72 1465.12,1206.72 1465.71,1206.72 1466.3,1206.72 1466.88,1206.72 1467.47,1206.72 1468.06,1206.72 1468.64,1206.72 1469.23,1206.72 1469.82,1206.72 1470.4,1206.72 1470.99,1206.72 1471.57,1206.72 1472.16,1206.72 1472.75,1206.72 1473.33,1206.72 1473.92,1206.72 1474.51,1206.72 1475.09,1206.72 1475.68,1206.72 1476.27,1206.72 1476.85,1206.72 1477.44,1206.72 1478.03,1206.72 1478.61,1206.72 1479.2,1206.72 1479.78,1206.72 1480.37,1206.72 1480.96,1206.72 1481.54,1206.72 1482.13,1206.72 1482.72,1206.72 1483.3,1206.72 1483.89,1206.72 1484.48,1206.72 1485.06,1206.72 1485.65,1206.72 1486.24,1206.72 1486.82,1206.72 1487.41,1206.72 1487.99,1206.72 1488.58,1206.72 1489.17,1206.72 1489.75,1206.72 1490.34,1206.72 1490.93,1206.72 1491.51,1206.72 1492.1,1206.72 1492.69,1206.72 1493.27,1206.72 1493.86,1206.72 1494.45,1206.72 1495.03,1206.72 1495.62,1206.72 1496.2,1206.72 1496.79,1206.72 1497.38,1206.72 1497.96,1206.72 1498.55,1206.72 1499.14,1206.72 1499.72,1206.72 1500.31,1206.72 1500.9,1206.72 1501.48,1206.72 1502.07,1206.72 1502.65,1206.72 1503.24,1206.72 1503.83,1206.72 1504.41,1206.72 1505,1206.72 1505.59,1206.72 1506.17,1206.72 1506.76,1206.72 1507.35,1206.72 1507.93,1206.72 1508.52,1206.72 1509.11,1206.72 1509.69,1206.72 1510.28,1206.72 1510.86,1206.72 1511.45,1206.72 1512.04,1206.72 1512.62,1206.72 1513.21,1206.72 1513.8,1206.72 1514.38,1206.72 1514.97,1206.72 1515.56,1206.72 1516.14,1206.72 1516.73,1206.72 1517.32,1206.72 1517.9,1206.72 1518.49,1206.72 1519.07,1206.72 1519.66,1206.72 1520.25,1206.72 1520.83,1206.72 1521.42,1206.72 1522.01,1206.72 1522.59,1206.72 1523.18,1206.72 1523.77,1206.72 1524.35,1206.72 1524.94,1206.72 1525.52,1206.72 1526.11,1206.72 1526.7,1206.72 1527.28,1206.72 1527.87,1206.72 1528.46,1206.72 1529.04,1206.72 1529.63,1206.72 1530.22,1206.72 1530.8,1206.72 1531.39,1206.72 1531.98,1206.72 1532.56,1206.72 1533.15,1206.72 1533.73,1206.72 1534.32,1206.72 1534.91,1206.72 1535.49,1206.72 1536.08,1206.72 1536.67,1206.72 1537.25,1206.72 1537.84,1206.72 1538.43,1206.72 1539.01,1206.72 1539.6,1206.72 1540.19,1206.72 1540.77,1206.72 1541.36,1206.72 1541.94,1206.72 1542.53,1206.72 1543.12,1206.72 1543.7,1206.72 1544.29,1206.72 1544.88,1206.72 1545.46,1206.72 1546.05,1206.72 1546.64,1206.72 1547.22,1206.72 1547.81,1206.72 1548.4,1206.72 1548.98,1206.72 1549.57,1206.72 1550.15,1206.72 1550.74,1206.72 1551.33,1206.72 1551.91,1206.72 1552.5,1206.72 1553.09,1206.72 1553.67,1206.72 1554.26,1206.72 1554.85,1206.72 1555.43,1206.72 1556.02,1206.72 1556.6,1206.72 1557.19,1206.72 1557.78,1206.72 1558.36,1206.72 1558.95,1206.72 1559.54,1206.72 1560.12,1206.72 1560.71,1206.72 1561.3,1206.72 1561.88,1206.72 1562.47,1206.72 1563.06,1206.72 1563.64,1206.72 1564.23,1206.72 1564.81,1206.72 1565.4,1206.72 1565.99,1206.72 1566.57,1206.72 1567.16,1206.72 1567.75,1206.72 1568.33,1206.72 1568.92,1206.72 1569.51,1206.72 1570.09,1206.72 1570.68,1206.72 1571.27,1206.72 1571.85,1206.72 1572.44,1206.72 1573.02,1206.72 1573.61,1206.72 1574.2,1206.72 1574.78,1206.72 1575.37,1206.72 1575.96,1206.72 1576.54,1206.72 1577.13,1206.72 1577.72,1206.72 1578.3,1206.72 1578.89,1206.72 1579.47,1206.72 1580.06,1206.72 1580.65,1206.72 1581.23,1206.72 1581.82,1206.72 1582.41,1206.72 1582.99,1206.72 1583.58,1206.72 1584.17,1206.72 1584.75,1206.72 1585.34,1206.72 1585.93,1206.72 1586.51,1206.72 1587.1,1206.72 1587.68,1206.72 1588.27,1206.72 1588.86,1206.72 1589.44,1206.72 1590.03,1206.72 1590.62,1206.72 1591.2,1206.72 1591.79,1206.72 1592.38,1206.72 1592.96,1206.72 1593.55,1206.72 1594.14,1206.72 1594.72,1206.72 1595.31,1206.72 1595.89,1206.72 1596.48,1206.72 1597.07,1206.72 1597.65,1206.72 1598.24,1206.72 1598.83,1206.72 1599.41,1206.72 1600,1206.72 1600.59,1206.72 1601.17,1206.72 1601.76,1206.72 1602.34,1206.72 1602.93,1206.72 1603.52,1206.72 1604.1,1206.72 1604.69,1206.72 1605.28,1206.72 1605.86,1206.72 1606.45,1206.72 1607.04,1206.72 1607.62,1206.72 1608.21,1206.72 1608.8,1206.72 1609.38,1206.72 1609.97,1206.72 1610.55,1206.72 1611.14,1206.72 1611.73,1206.72 1612.31,1206.72 1612.9,1206.72 1613.49,1206.72 1614.07,1206.72 1614.66,1206.72 1615.25,1206.72 1615.83,1206.72 1616.42,1206.72 1617.01,1206.72 1617.59,1206.72 1618.18,1206.72 1618.76,1206.72 1619.35,1206.72 1619.94,1206.72 1620.52,1206.72 1621.11,1206.72 1621.7,1206.72 1622.28,1206.72 1622.87,1206.72 1623.46,1206.72 1624.04,1206.72 1624.63,1206.72 1625.22,1206.72 1625.8,1206.72 1626.39,1206.72 1626.97,1206.72 1627.56,1206.72 1628.15,1206.72 1628.73,1206.72 1629.32,1206.72 1629.91,1206.72 1630.49,1206.72 1631.08,1206.72 1631.67,1206.72 1632.25,1206.72 1632.84,1206.72 1633.42,1206.72 1634.01,1206.72 1634.6,1206.72 1635.18,1206.72 1635.77,1206.72 1636.36,1206.72 1636.94,1206.72 1637.53,1206.72 1638.12,1206.72 1638.7,1206.72 1639.29,1206.72 1639.88,1206.72 1640.46,1206.72 1641.05,1206.72 1641.63,1206.72 1642.22,1206.72 1642.81,1206.72 1643.39,1206.72 1643.98,1206.72 1644.57,1206.72 1645.15,1206.72 1645.74,1206.72 1646.33,1206.72 1646.91,1206.72 1647.5,1206.72 1648.09,1206.72 1648.67,1206.72 1649.26,1206.72 1649.84,1206.72 1650.43,1206.72 1651.02,1206.72 1651.6,1206.72 1652.19,1206.72 1652.78,1206.72 1653.36,1206.72 1653.95,1206.72 1654.54,1206.72 1655.12,1206.72 1655.71,1206.72 1656.29,1206.72 1656.88,1206.72 1657.47,1206.72 1658.05,1206.72 1658.64,1206.72 1659.23,1206.72 1659.81,1206.72 1660.4,1206.72 1660.99,1206.72 1661.57,1206.72 1662.16,1206.72 1662.75,1206.72 1663.33,1206.72 1663.92,1206.72 1664.5,1206.72 1665.09,1206.72 1665.68,1206.72 1666.26,1206.72 1666.85,1206.72 1667.44,1206.72 1668.02,1206.72 1668.61,1206.72 1669.2,1206.72 1669.78,1206.72 1670.37,1206.72 1670.96,1206.72 1671.54,1206.72 1672.13,1206.72 1672.71,1206.72 1673.3,1206.72 1673.89,1206.72 1674.47,1206.72 1675.06,1206.72 1675.65,1206.72 1676.23,1206.72 1676.82,1206.72 1677.41,1206.72 1677.99,1206.72 1678.58,1206.72 1679.17,1206.72 1679.75,1206.72 1680.34,1206.72 1680.92,1206.72 1681.51,1206.72 1682.1,1206.72 1682.68,1206.72 1683.27,1206.72 1683.86,1206.72 1684.44,1206.72 1685.03,1206.72 1685.62,1206.72 1686.2,1206.72 1686.79,1206.72 1687.37,1206.72 1687.96,1206.72 1688.55,1206.72 1689.13,1206.72 1689.72,1206.72 1690.31,1206.72 1690.89,1206.72 1691.48,1206.72 1692.07,1206.72 1692.65,1206.72 1693.24,1206.72 1693.83,1206.72 1694.41,1206.72 1695,1206.72 1695.58,1206.72 1696.17,1206.72 1696.76,1206.72 1697.34,1206.72 1697.93,1206.72 1698.52,1206.72 1699.1,1206.72 1699.69,1206.72 1700.28,1206.72 1700.86,1206.72 1701.45,1206.72 1702.04,1206.72 1702.62,1206.72 1703.21,1206.72 1703.79,1206.72 1704.38,1206.72 1704.97,1206.72 1705.55,1206.72 1706.14,1206.72 1706.73,1206.72 1707.31,1206.72 1707.9,1206.72 1708.49,1206.72 1709.07,1206.72 1709.66,1206.72 1710.24,1206.72 1710.83,1206.72 1711.42,1206.72 1712,1206.72 1712.59,1206.72 1713.18,1206.72 1713.76,1206.72 1714.35,1206.72 1714.94,1206.72 1715.52,1206.72 1716.11,1206.72 1716.7,1206.72 1717.28,1206.72 1717.87,1206.72 1718.45,1206.72 1719.04,1206.72 1719.63,1206.72 1720.21,1206.72 1720.8,1206.72 1721.39,1206.72 1721.97,1206.72 1722.56,1206.72 1723.15,1206.72 1723.73,1206.72 1724.32,1206.72 1724.91,1206.72 1725.49,1206.72 1726.08,1206.72 1726.66,1206.72 1727.25,1206.72 1727.84,1206.72 1728.42,1206.72 1729.01,1206.72 1729.6,1206.72 1730.18,1206.72 1730.77,1206.72 1731.36,1206.72 1731.94,1206.72 1732.53,1206.72 1733.11,1206.72 1733.7,1206.72 1734.29,1206.72 1734.87,1206.72 1735.46,1206.72 1736.05,1206.72 1736.63,1206.72 1737.22,1206.72 1737.81,1206.72 1738.39,1206.72 1738.98,1206.72 1739.57,1206.72 1740.15,1206.72 1740.74,1206.72 1741.32,1206.72 1741.91,1206.72 1742.5,1206.72 1743.08,1206.72 1743.67,1206.72 1744.26,1206.72 1744.84,1206.72 1745.43,1206.72 1746.02,1206.72 1746.6,1206.72 1747.19,1206.72 1747.78,1206.72 1748.36,1206.72 1748.95,1206.72 1749.53,1206.72 1750.12,1206.72 1750.71,1206.72 1751.29,1206.72 1751.88,1206.72 1752.47,1206.72 1753.05,1206.72 1753.64,1206.72 1754.23,1206.72 1754.81,1206.72 1755.4,1206.72 1755.99,1206.72 1756.57,1206.72 1757.16,1206.72 1757.74,1206.72 1758.33,1206.72 1758.92,1206.72 1759.5,1206.72 1760.09,1206.72 1760.68,1206.72 1761.26,1206.72 1761.85,1206.72 1762.44,1206.72 1763.02,1206.72 1763.61,1206.72 1764.19,1206.72 1764.78,1206.72 1765.37,1206.72 1765.95,1206.72 1766.54,1206.72 1767.13,1206.72 1767.71,1206.72 1768.3,1206.72 1768.89,1206.72 1769.47,1206.72 1770.06,1206.72 1770.65,1206.72 1771.23,1206.72 1771.82,1206.72 1772.4,1206.72 1772.99,1206.72 1773.58,1206.72 1774.16,1206.72 1774.75,1206.72 1775.34,1206.72 1775.92,1206.72 1776.51,1206.72 1777.1,1206.72 1777.68,1206.72 1778.27,1206.72 1778.86,1206.72 1779.44,1206.72 1780.03,1206.72 1780.61,1206.72 1781.2,1206.72 1781.79,1206.72 1782.37,1206.72 1782.96,1206.72 1783.55,1206.72 1784.13,1206.72 1784.72,1206.72 1785.31,1206.72 1785.89,1206.72 1786.48,1206.72 1787.06,1206.72 1787.65,1206.72 1788.24,1206.72 1788.82,1206.72 1789.41,1206.72 1790,1206.72 1790.58,1206.72 1791.17,1206.72 1791.76,1206.72 1792.34,1206.72 1792.93,1206.72 1793.52,1206.72 1794.1,1206.72 1794.69,1206.72 1795.27,1206.72 1795.86,1206.72 1796.45,1206.72 1797.03,1206.72 1797.62,1206.72 1798.21,1206.72 1798.79,1206.72 1799.38,1206.72 1799.97,1206.72 1800.55,1206.72 1801.14,1206.72 1801.73,1206.72 1802.31,1206.72 1802.9,1206.72 1803.48,1206.72 1804.07,1206.72 1804.66,1206.72 1805.24,1206.72 1805.83,1206.72 1806.42,1206.72 1807,1206.72 1807.59,1206.72 1808.18,1206.72 1808.76,1206.72 1809.35,1206.72 1809.94,1206.72 1810.52,1206.72 1811.11,1206.72 1811.69,1206.72 1812.28,1206.72 1812.87,1206.72 1813.45,1206.72 1814.04,1206.72 1814.63,1206.72 1815.21,1206.72 1815.8,1206.72 1816.39,1206.72 1816.97,1206.72 1817.56,1206.72 1818.14,1206.72 1818.73,1206.72 1819.32,1206.72 1819.9,1206.72 1820.49,1206.72 1821.08,1206.72 1821.66,1206.72 1822.25,1206.72 1822.84,1206.72 1823.42,1206.72 1824.01,1206.72 1824.6,1206.72 1825.18,1206.72 1825.77,1206.72 1826.35,1206.72 1826.94,1206.72 1827.53,1206.72 1828.11,1206.72 1828.7,1206.72 1829.29,1206.72 1829.87,1206.72 1830.46,1206.72 1831.05,1206.72 1831.63,1206.72 1832.22,1206.72 1832.81,1206.72 1833.39,1206.72 1833.98,1206.72 1834.56,1206.72 1835.15,1206.72 1835.74,1206.72 1836.32,1206.72 1836.91,1206.72 1837.5,1206.72 1838.08,1206.72 1838.67,1206.72 1839.26,1206.72 1839.84,1206.72 1840.43,1206.72 1841.01,1206.72 1841.6,1206.72 1842.19,1206.72 1842.77,1206.72 1843.36,1206.72 1843.95,1206.72 1844.53,1206.72 1845.12,1206.72 1845.71,1206.72 1846.29,1206.72 1846.88,1206.72 1847.47,1206.72 1848.05,1206.72 1848.64,1206.72 1849.22,1206.72 1849.81,1206.72 1850.4,1206.72 1850.98,1206.72 1851.57,1206.72 1852.16,1206.72 1852.74,1206.72 1853.33,1206.72 1853.92,1206.72 1854.5,1206.72 1855.09,1206.72 1855.68,1206.72 1856.26,1206.72 1856.85,1206.72 1857.43,1206.72 1858.02,1206.72 1858.61,1206.72 1859.19,1206.72 1859.78,1206.72 1860.37,1206.72 1860.95,1206.72 1861.54,1206.72 1862.13,1206.72 1862.71,1206.72 1863.3,1206.72 1863.88,1206.72 1864.47,1206.72 1865.06,1206.72 1865.64,1206.72 1866.23,1206.72 1866.82,1206.72 1867.4,1206.72 1867.99,1206.72 1868.58,1206.72 1869.16,1206.72 1869.75,1206.72 1870.34,1206.72 1870.92,1206.72 1871.51,1206.72 1872.09,1206.72 1872.68,1206.72 1873.27,1206.72 1873.85,1206.72 1874.44,1206.72 1875.03,1206.72 1875.61,1206.72 1876.2,1206.72 1876.79,1206.72 1877.37,1206.72 1877.96,1206.72 1878.55,1206.72 1879.13,1206.72 1879.72,1206.72 1880.3,1206.72 1880.89,1206.72 1881.48,1206.72 1882.06,1206.72 1882.65,1206.72 1883.24,1206.72 1883.82,1206.72 1884.41,1206.72 1885,1206.72 1885.58,1206.72 1886.17,1206.72 1886.76,1206.72 1887.34,1206.72 1887.93,1206.72 1888.51,1206.72 1889.1,1206.72 1889.69,1206.72 1890.27,1206.72 1890.86,1206.72 1891.45,1206.72 1892.03,1206.72 1892.62,1206.72 1893.21,1206.72 1893.79,1206.72 1894.38,1206.72 1894.96,1206.72 1895.55,1206.72 1896.14,1206.72 1896.72,1206.72 1897.31,1206.72 1897.9,1206.72 1898.48,1206.72 1899.07,1206.72 1899.66,1206.72 1900.24,1206.72 1900.83,1206.72 1901.42,1206.72 1902,1206.72 1902.59,1206.72 1903.17,1206.72 1903.76,1206.72 1904.35,1206.72 1904.93,1206.72 1905.52,1206.72 1906.11,1206.72 1906.69,1206.72 1907.28,1206.72 1907.87,1206.72 1908.45,1206.72 1909.04,1206.72 1909.63,1206.72 1910.21,1206.72 1910.8,1206.72 1911.38,1206.72 1911.97,1206.72 1912.56,1206.72 1913.14,1206.72 1913.73,1206.72 1914.32,1206.72 1914.9,1206.72 1915.49,1206.72 1916.08,1206.72 1916.66,1206.72 1917.25,1206.72 1917.83,1206.72 1918.42,1206.72 1919.01,1206.72 1919.59,1206.72 1920.18,1206.72 1920.77,1206.72 1921.35,1206.72 1921.94,1206.72 1922.53,1206.72 1923.11,1206.72 1923.7,1206.72 1924.29,1206.72 1924.87,1206.72 1925.46,1206.72 1926.04,1206.72 1926.63,1206.72 1927.22,1206.72 1927.8,1206.72 1928.39,1206.72 1928.98,1206.72 1929.56,1206.72 1930.15,1206.72 1930.74,1206.72 1931.32,1206.72 1931.91,1206.72 1932.5,1206.72 1933.08,1206.72 1933.67,1206.72 1934.25,1206.72 1934.84,1206.72 1935.43,1206.72 1936.01,1206.72 1936.6,1206.72 1937.19,1206.72 1937.77,1206.72 1938.36,1206.72 1938.95,1206.72 1939.53,1206.72 1940.12,1206.72 1940.71,1206.72 1941.29,1206.72 1941.88,1206.72 1942.46,1206.72 1943.05,1206.72 1943.64,1206.72 1944.22,1206.72 1944.81,1206.72 1945.4,1206.72 1945.98,1206.72 1946.57,1206.72 1947.16,1206.72 1947.74,1206.72 1948.33,1206.72 1948.91,1206.72 1949.5,1206.72 1950.09,1206.72 1950.67,1206.72 1951.26,1206.72 1951.85,1206.72 1952.43,1206.72 1953.02,1206.72 1953.61,1206.72 1954.19,1206.72 1954.78,1206.72 1955.37,1206.72 1955.95,1206.72 1956.54,1206.72 1957.12,1206.72 1957.71,1206.72 1958.3,1206.72 1958.88,1206.72 1959.47,1206.72 1960.06,1206.72 1960.64,1206.72 1961.23,1206.72 1961.82,1206.72 1962.4,1206.72 1962.99,1206.72 1963.58,1206.72 1964.16,1206.72 1964.75,1206.72 1965.33,1206.72 1965.92,1206.72 1966.51,1206.72 1967.09,1206.72 1967.68,1206.72 1968.27,1206.72 1968.85,1206.72 1969.44,1206.72 1970.03,1206.72 1970.61,1206.72 1971.2,1206.72 1971.78,1206.72 1972.37,1206.72 1972.96,1206.72 1973.54,1206.72 1974.13,1206.72 1974.72,1206.72 1975.3,1206.72 1975.89,1206.72 1976.48,1206.72 1977.06,1206.72 1977.65,1206.72 1978.24,1206.72 1978.82,1206.72 1979.41,1206.72 1979.99,1206.72 1980.58,1206.72 1981.17,1206.72 1981.75,1206.72 1982.34,1206.72 1982.93,1206.72 1983.51,1206.72 1984.1,1206.72 1984.69,1206.72 1985.27,1206.72 1985.86,1206.72 1986.45,1206.72 1987.03,1206.72 1987.62,1206.72 1988.2,1206.72 1988.79,1206.72 1989.38,1206.72 1989.96,1206.72 1990.55,1206.72 1991.14,1206.72 1991.72,1206.72 1992.31,1206.72 1992.9,1206.72 1993.48,1206.72 1994.07,1206.72 1994.65,1206.72 1995.24,1206.72 1995.83,1206.72 1996.41,1206.72 1997,1206.72 1997.59,1206.72 1998.17,1206.72 1998.76,1206.72 1999.35,1206.72 1999.93,1206.72 2000.52,1206.72 2001.11,1206.72 2001.69,1206.72 2002.28,1206.72 2002.86,1206.72 2003.45,1206.72 2004.04,1206.72 2004.62,1206.72 2005.21,1206.72 2005.8,1206.72 2006.38,1206.72 2006.97,1206.72 2007.56,1206.72 2008.14,1206.72 2008.73,1206.72 2009.32,1206.72 2009.9,1206.72 2010.49,1206.72 2011.07,1206.72 2011.66,1206.72 2012.25,1206.72 2012.83,1206.72 2013.42,1206.72 2014.01,1206.72 2014.59,1206.72 2015.18,1206.72 2015.77,1206.72 2016.35,1206.72 2016.94,1206.72 2017.53,1206.72 2018.11,1206.72 2018.7,1206.72 2019.28,1206.72 2019.87,1206.72 2020.46,1206.72 2021.04,1206.72 2021.63,1206.72 2022.22,1206.72 2022.8,1206.72 2023.39,1206.72 2023.98,1206.72 2024.56,1206.72 2025.15,1206.72 2025.73,1206.72 2026.32,1206.72 2026.91,1206.72 2027.49,1206.72 2028.08,1206.72 2028.67,1206.72 2029.25,1206.72 2029.84,1206.72 2030.43,1206.72 2031.01,1206.72 2031.6,1206.72 2032.19,1206.72 2032.77,1206.72 2033.36,1206.72 2033.94,1206.72 2034.53,1206.72 2035.12,1206.72 2035.7,1206.72 2036.29,1206.72 2036.88,1206.72 2037.46,1206.72 2038.05,1206.72 2038.64,1206.72 2039.22,1206.72 2039.81,1206.72 2040.4,1206.72 2040.98,1206.72 2041.57,1206.72 2042.15,1206.72 2042.74,1206.72 2043.33,1206.72 2043.91,1206.72 2044.5,1206.72 2045.09,1206.72 2045.67,1206.72 2046.26,1206.72 2046.85,1206.72 2047.43,1206.72 2048.02,1206.72 2048.6,1206.72 2049.19,1206.72 2049.78,1206.72 2050.36,1206.72 2050.95,1206.72 2051.54,1206.72 2052.12,1206.72 2052.71,1206.72 2053.3,1206.72 2053.88,1206.72 2054.47,1206.72 2055.06,1206.72 2055.64,1206.72 2056.23,1206.72 2056.81,1206.72 2057.4,1206.72 2057.99,1206.72 2058.57,1206.72 2059.16,1206.72 2059.75,1206.72 2060.33,1206.72 2060.92,1206.72 2061.51,1206.72 2062.09,1206.72 2062.68,1206.72 2063.27,1206.72 2063.85,1206.72 2064.44,1206.72 2065.02,1206.72 2065.61,1206.72 2066.2,1206.72 2066.78,1206.72 2067.37,1206.72 2067.96,1206.72 2068.54,1206.72 2069.13,1206.72 2069.72,1206.72 2070.3,1206.72 2070.89,1206.72 2071.48,1206.72 2072.06,1206.72 2072.65,1206.72 2073.23,1206.72 2073.82,1206.72 2074.41,1206.72 2074.99,1206.72 2075.58,1206.72 2076.17,1206.72 2076.75,1206.72 2077.34,1206.72 2077.93,1206.72 2078.51,1206.72 2079.1,1206.72 2079.68,1206.72 2080.27,1206.72 2080.86,1206.72 2081.44,1206.72 2082.03,1206.72 2082.62,1206.72 2083.2,1206.72 2083.79,1206.72 2084.38,1206.72 2084.96,1206.72 2085.55,1206.72 2086.14,1206.72 2086.72,1206.72 2087.31,1206.72 2087.89,1206.72 2088.48,1206.72 2089.07,1206.72 2089.65,1206.72 2090.24,1206.72 2090.83,1206.72 2091.41,1206.72 2092,1206.72 2092.59,1206.72 2093.17,1206.72 2093.76,1206.72 2094.35,1206.72 2094.93,1206.72 2095.52,1206.72 2096.1,1206.72 2096.69,1206.72 2097.28,1206.72 2097.86,1206.72 2098.45,1206.72 2099.04,1206.72 2099.62,1206.72 2100.21,1206.72 2100.8,1206.72 2101.38,1206.72 2101.97,1206.72 2102.55,1206.72 2103.14,1206.72 2103.73,1206.72 2104.31,1206.72 2104.9,1206.72 2105.49,1206.72 2106.07,1206.72 2106.66,1206.72 2107.25,1206.72 2107.83,1206.72 2108.42,1206.72 2109.01,1206.72 2109.59,1206.72 2110.18,1206.72 2110.76,1206.72 2111.35,1206.72 2111.94,1206.72 2112.52,1206.72 2113.11,1206.72 2113.7,1206.72 2114.28,1206.72 2114.87,1206.72 2115.46,1206.72 2116.04,1206.72 2116.63,1206.72 2117.22,1206.72 2117.8,1206.72 2118.39,1206.72 2118.97,1206.72 2119.56,1206.72 2120.15,1206.72 2120.73,1206.72 2121.32,1206.72 2121.91,1206.72 2122.49,1206.72 2123.08,1206.72 2123.67,1206.72 2124.25,1206.72 2124.84,1206.72 2125.42,1206.72 2126.01,1206.72 2126.6,1206.72 2127.18,1206.72 2127.77,1206.72 2128.36,1206.72 2128.94,1206.72 2129.53,1206.72 2130.12,1206.72 2130.7,1206.72 2131.29,1206.72 2131.88,1206.72 2132.46,1206.72 2133.05,1206.72 2133.63,1206.72 2134.22,1206.72 2134.81,1206.72 2135.39,1206.72 2135.98,1206.72 2136.57,1206.72 2137.15,1206.72 2137.74,1206.72 2138.33,1206.72 2138.91,1206.72 2139.5,1206.72 2140.09,1206.72 2140.67,1206.72 2141.26,1206.72 2141.84,1206.72 2142.43,1206.72 2143.02,1206.72 2143.6,1206.72 2144.19,1206.72 2144.78,1206.72 2145.36,1206.72 2145.95,1206.72 2146.54,1206.72 2147.12,1206.72 2147.71,1206.72 2148.3,1206.72 2148.88,1206.72 2149.47,1206.72 2150.05,1206.72 2150.64,1206.72 2151.23,1206.72 2151.81,1206.72 2152.4,1206.72 2152.99,1206.72 2153.57,1206.72 2154.16,1206.72 2154.75,1206.72 2155.33,1206.72 2155.92,1206.72 2156.5,1206.72 2157.09,1206.72 2157.68,1206.72 2158.26,1206.72 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.47,1187.88 1400.63,899.083 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1225.16 985.439,1187.88 2158.26,1187.88 2158.26,1225.16 985.439,1225.16 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip963\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip963)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2699.44 162.673,-3902.72 163.232,-3658.06 163.792,-4756.31 164.351,-5738.67 164.91,-6613.12 165.469,-6314.29 166.029,-7097.92 166.588,-7828.1 167.147,-8498.81 167.706,-9116.86 168.266,-8807.92 168.825,-9346.8 169.384,-9829.76 169.943,-10260.4 170.503,-9949.34 171.062,-10334.2 171.621,-10664.7 172.18,-10392.1 172.74,-10641.6 173.299,-10885.2 173.858,-10179.2 174.417,-9955.46 174.977,-10134.1 175.536,-10264.8 176.095,-10374.5 176.655,-10481.7 177.214,-10553.1 177.773,-10300.2 178.332,-10335.6 178.892,-10088.6 179.451,-9868.67 180.01,-9884.24 180.569,-9672.07 181.129,-9660.5 181.688,-9645.69 182.247,-9251.1 182.806,-9032.64 183.366,-8982.7 183.925,-8764.1 184.484,-8560.17 185.043,-8367.47 185.603,-8171.9 186.162,-7739.36 186.721,-7681.33 187.28,-7623.42 187.84,-7335.58 188.399,-7262.21 188.958,-7173.17 189.517,-7072.56 190.077,-6982.01 190.636,-6795.51 191.195,-6614.39 191.754,-6522.86 192.314,-6340.6 192.873,-6240.73 193.432,-5991.69 193.991,-5752.85 194.551,-5593.85 195.11,-5374.75 195.669,-5164.99 196.228,-5012.5 196.788,-4866.09 197.347,-4776.41 197.906,-4531.1 198.465,-4294.07 199.025,-4116.65 199.584,-3992.98 200.143,-3818.84 200.702,-3697.25 201.262,-3500.35 201.821,-3350.46 202.38,-3243.45 202.939,-3059.6 203.499,-2997.8 204.058,-2861.17 204.617,-2689.64 205.176,-2633.7 205.736,-2578.36 206.295,-2485.55 206.854,-2425.36 207.413,-2332.93 207.973,-2273.49 208.532,-2213.99 209.091,-2152.44 209.65,-2030.92 210.21,-1974.13 210.769,-1858.63 211.328,-1803.75 211.887,-1634.29 212.447,-1497.59 213.006,-1427.77 213.565,-1382.12 214.124,-1336.45 214.684,-1293.43 215.243,-1195.29 215.802,-1079.4 216.361,-1016.83 216.921,-903.706 217.48,-871.574 218.039,-815.298 218.598,-735.596 219.158,-658.19 219.717,-562.684 220.276,-467.389 220.835,-377.09 221.395,-336.619 221.954,-297.272 222.513,-256.791 223.072,-217.498 223.632,-177.054 224.191,-138.002 224.75,-93.4623 225.309,-34.6907 225.869,9.38164 226.428,68.1802 226.987,84.2277 227.546,180.637 228.106,232.55 228.665,278.226 229.224,285.241 229.783,294.106 230.343,300.856 230.902,307.622 231.461,335.458 232.02,382.652 232.58,410.789 233.139,438.555 233.698,409.934 234.257,419.846 234.817,451.542 235.376,477.985 235.935,504.296 236.494,508.39 237.054,517.475 237.613,543.538 238.172,589.172 238.731,615.159 239.291,638.614 239.85,642.402 240.409,647.999 240.968,706.969 241.528,709.363 242.087,728.274 242.646,766.073 243.205,785.546 243.765,784.889 244.324,822.871 244.883,874.565 245.442,923.16 246.002,919.24 246.561,929.729 247.12,979.222 247.679,990.827 248.239,1000.43 248.798,1009.24 249.357,999.816 249.916,1008.48 250.476,1037.85 251.035,1045.81 251.594,1040.34 252.153,1064.65 252.713,1068.67 253.272,1088.45 253.831,1077.19 254.39,1070.06 254.95,1062.16 255.509,1073.24 256.068,1042.16 256.627,1049.07 257.187,1022.08 257.746,996.983 258.305,975.653 258.864,953.91 259.424,970.114 259.983,964.911 260.542,924.297 261.101,940.477 261.661,941.648 262.22,941.982 262.779,955.513 263.338,983.682 263.898,928.885 264.457,943.321 265.016,940.826 265.575,923.132 266.135,904.84 266.694,939.911 267.253,953.699 267.812,965.746 268.372,950.181 268.931,965.455 269.49,979.292 270.049,975.052 270.609,972.137 271.168,1005.72 271.727,998.286 272.286,992.077 272.846,989.436 273.405,1001.45 273.964,1015.36 274.523,1041.16 275.083,1082.31 275.642,1056.65 276.201,1100.68 276.76,1155.59 277.32,1161.56 277.879,1196.51 278.438,1182.34 278.997,1153.11 279.557,1139.37 280.116,1143.95 280.675,1135.44 281.234,1092.35 281.794,1082.42 282.353,1091.18 282.912,1063.75 283.471,1056.56 284.031,1031.85 284.59,1012.6 285.149,1022.1 285.708,1030.29 286.268,1008.38 286.827,1054.66 287.386,1079.76 287.945,1085.89 288.505,1059.07 289.064,1098.05 289.623,1105.09 290.182,1107.13 290.742,1111.81 291.301,1116.04 291.86,1092.33 292.419,1113.41 292.979,1091.11 293.538,1099.41 294.097,1072.1 294.656,1062.66 295.216,1086.45 295.775,1078.81 296.334,1071.65 296.893,1058.23 297.453,1052.2 298.012,1044.74 298.571,1020.64 299.13,999.577 299.69,991.356 300.249,1017.46 300.808,1012.79 301.368,965.271 301.927,945.246 302.486,942.61 303.045,956.815 303.605,969.902 304.164,982.344 304.723,947.096 305.282,945.098 305.842,940.659 306.401,922.551 306.96,919.436 307.519,920.89 308.079,936.004 308.638,980.726 309.197,942.062 309.756,921.694 310.316,919.238 310.875,937.235 311.434,917.916 311.993,932.232 312.553,930.495 313.112,910.917 313.671,908.437 314.23,909.145 314.79,921.513 315.349,935.634 315.908,930.559 316.467,911.163 317.027,943.316 317.586,944.279 318.145,972.774 318.704,950.974 319.264,932.158 319.823,894.412 320.382,907.553 320.941,924.529 321.501,938.483 322.06,932.618 322.619,929.087 323.178,938.497 323.738,937.9 324.297,933.156 324.856,974.736 325.415,987.989 325.975,998.667 326.534,975.144 327.093,1032.57 327.652,1027.94 328.212,1007.84 328.771,1015.69 329.33,1024.96 329.889,1001.63 330.449,977.178 331.008,975.988 331.567,998.867 332.126,974.608 332.686,967.884 333.245,994.178 333.804,954.321 334.363,932.973 334.923,910.755 335.482,924.089 336.041,967.134 336.6,961.34 337.16,941.89 337.719,952.978 338.278,963.835 338.837,956.359 339.397,950.204 339.956,960.441 340.515,986.499 341.074,980.007 341.634,1003.55 342.193,995.817 342.752,1003.7 343.311,1025.1 343.871,982.616 344.43,954.436 344.989,930.127 345.548,922.046 346.108,932.367 346.667,911.149 347.226,922.854 347.785,905.629 348.345,901.237 348.904,847.705 349.463,829.301 350.022,796.806 350.582,815.622 351.141,816.369 351.7,832.389 352.259,817.425 352.819,834.026 353.378,849.597 353.937,848.539 354.496,833.18 355.056,849.296 355.615,863.371 356.174,829.092 356.733,859.832 357.293,860.349 357.852,890.42 358.411,887.478 358.97,883.708 359.53,913.154 360.089,909.112 360.648,922.411 361.207,902.144 361.767,912.731 362.326,889.161 362.885,872.946 363.444,887.282 364.004,867.046 364.563,882.71 365.122,911.737 365.681,892.478 366.241,908.254 366.8,905.993 367.359,899.114 367.918,944.699 368.478,923.483 369.037,919.134 369.596,927.275 370.155,904.311 370.715,916.711 371.274,929.441 371.833,938.805 372.392,962.302 372.952,956.964 373.511,967.473 374.07,960.094 374.629,949.766 375.189,957.613 375.748,903.008 376.307,918.902 376.866,880.967 377.426,880.838 377.985,860.408 378.544,838.985 379.103,832.467 379.663,844.497 380.222,873.695 380.781,869.449 381.34,867.863 381.9,879.459 382.459,877.106 383.018,885.911 383.577,866.289 384.137,845.552 384.696,810.551 385.255,791.257 385.814,775.677 386.374,791.934 386.933,778.084 387.492,728.558 388.051,728.902 388.611,717.305 389.17,723.388 389.729,710.388 390.288,718.404 390.848,740.51 391.407,761.742 391.966,780.008 392.525,781.212 393.085,845.443 393.644,839.999 394.203,870.761 394.762,885.614 395.322,866.71 395.881,844.282 396.44,824.983 396.999,819.796 397.559,814.552 398.118,810.875 398.677,856.684 399.236,836.456 399.796,832.832 400.355,861.922 400.914,840.01 401.473,852.279 402.033,846.691 402.592,871.653 403.151,897.575 403.71,904.396 404.27,878.804 404.829,873.407 405.388,866.57 405.947,874.563 406.507,871.016 407.066,899.333 407.625,925.671 408.184,902.155 408.744,880.145 409.303,908.401 409.862,899.455 410.421,892.052 410.981,901.711 411.54,925.783 412.099,902.724 412.658,909.556 413.218,887.128 413.777,881.469 414.336,874.381 414.895,887.152 415.455,830.742 416.014,773.013 416.573,758.243 417.132,740.962 417.692,740.981 418.251,725.983 418.81,740.567 419.369,758.136 419.929,758.806 420.488,760.014 421.047,789.21 421.606,802.501 422.166,801.755 422.725,801.91 423.284,798.013 423.843,794.934 424.403,793.134 424.962,775.38 425.521,759.486 426.08,773.165 426.64,737.768 427.199,788.073 427.758,803.983 428.318,798.143 428.877,797.999 429.436,796.243 429.995,761.654 430.555,778.687 431.114,776.536 431.673,790.37 432.232,787.444 432.792,803.69 433.351,781.626 433.91,779.718 434.469,761.15 435.029,744.258 435.588,742.749 436.147,760.216 436.706,744.105 437.266,745.37 437.825,711.971 438.384,697.977 438.943,750.209 439.503,737.302 440.062,753.063 440.621,769.194 441.18,769.153 441.74,772.288 442.299,791.73 442.858,819.839 443.417,815.934 443.977,778.681 444.536,775.273 445.095,756.112 445.654,753.222 446.214,753.692 446.773,752.281 447.332,770.205 447.891,737.517 448.451,753.591 449.01,768.623 449.569,782.933 450.128,763.583 450.688,762.475 451.247,762.02 451.806,758.228 452.365,773.193 452.925,773.336 453.484,737.425 454.043,718.81 454.602,721.779 455.162,724.172 455.721,726.489 456.28,742.364 456.839,776.045 457.399,774.484 457.958,789.98 458.517,774.874 459.076,778.047 459.636,796.096 460.195,824.941 460.754,820.095 461.313,819.772 461.873,832.337 462.432,776.829 462.991,776.711 463.55,809.149 464.11,853.957 464.669,861.816 465.228,853.215 465.787,848.992 466.347,828.522 466.906,808.47 467.465,755.888 468.024,736.768 468.584,768.412 469.143,764.647 469.702,761.894 470.261,776.463 470.821,789.224 471.38,769.611 471.939,765.434 472.498,731.351 473.058,721.265 473.617,755.392 474.176,722.875 474.735,725.245 475.295,724.46 475.854,759.481 476.413,743.231 476.972,740.421 477.532,722.641 478.091,694.013 478.65,727.761 479.209,727.059 479.769,776.418 480.328,776.414 480.887,744.937 481.446,745.956 482.006,747.251 482.565,729.817 483.124,727.614 483.683,727.209 484.243,743.871 484.802,760.961 485.361,743.49 485.92,773.393 486.48,802.983 487.039,816.148 487.598,811.255 488.157,839.196 488.717,786.64 489.276,754.254 489.835,752.411 490.394,752.755 490.954,752.319 491.513,736.793 492.072,767.634 492.631,767.373 493.191,753.284 493.75,755.544 494.309,724.394 494.868,741.298 495.428,760.148 495.987,824.504 496.546,801.879 497.105,780.573 497.665,760.27 498.224,781.019 498.783,780.186 499.342,778.518 499.902,762.742 500.461,764.42 501.02,781.658 501.579,793.058 502.139,759.66 502.698,757.485 503.257,739.524 503.816,707.8 504.376,722.751 504.935,722.99 505.494,721.436 506.053,741.157 506.613,694.134 507.172,691.499 507.731,709.617 508.29,694.712 508.85,694.352 509.409,712.412 509.968,701.148 510.527,688.168 511.087,708.146 511.646,688.828 512.205,688.414 512.764,689.324 513.324,707.928 513.883,724.731 514.442,690.434 515.001,694.644 515.561,729.97 516.12,746.18 516.679,681.799 517.238,682.395 517.798,681.077 518.357,665.522 518.916,655.35 519.475,692.94 520.035,746.486 520.594,744.994 521.153,723.48 521.712,741.118 522.272,741.88 522.831,741.738 523.39,722.178 523.949,737.069 524.509,720.25 525.068,670.344 525.627,670.881 526.186,658.397 526.746,674.812 527.305,659.94 527.864,630.965 528.423,619.426 528.983,640.436 529.542,660.796 530.101,649.202 530.66,655.803 531.22,658.423 531.779,662.275 532.338,647.47 532.897,683.586 533.457,687.663 534.016,689.502 534.575,692.359 535.134,676.191 535.694,693.405 536.253,759.655 536.812,740.07 537.371,686.471 537.931,669.61 538.49,687.196 539.049,705.97 539.608,723.735 540.168,740.65 540.727,719.093 541.286,736.984 541.845,718.708 542.405,704.087 542.964,701.478 543.523,734.489 544.082,747.41 544.642,748.818 545.201,749.144 545.76,765.157 546.319,808.426 546.879,803.966 547.438,800.424 547.997,776.591 548.556,742.767 549.116,725.486 549.675,725.78 550.234,711.569 550.793,712.987 551.353,679.674 551.912,697.721 552.471,669.372 553.031,674.234 553.59,692.783 554.149,644.474 554.708,633.94 555.268,639.612 555.827,658.26 556.386,680.097 556.945,699.853 557.505,717.239 558.064,700.666 558.623,717.819 559.182,749.211 559.742,713.613 560.301,665.42 560.86,671.411 561.419,672.514 561.979,674.245 562.538,675.734 563.097,662.847 563.656,651.347 564.216,638.029 564.775,660.477 565.334,678.324 565.893,695.393 566.453,715.398 567.012,715.983 567.571,730.292 568.13,697.891 568.69,734.384 569.249,735.219 569.808,765.711 570.367,763.667 570.927,742.119 571.486,737.945 572.045,722.059 572.604,736.133 573.164,747.478 573.723,762.607 574.282,789.594 574.841,783.629 575.401,779.315 575.96,806.369 576.519,832.835 577.078,812.384 577.638,807.7 578.197,801.758 578.756,796.344 579.315,730.882 579.875,728.306 580.434,711.879 580.993,730.266 581.552,742.316 582.112,722.925 582.671,771.681 583.23,784.147 583.789,791.721 584.349,770.016 584.908,717.258 585.467,750.532 586.026,749.384 586.586,778.486 587.145,759.153 587.704,789.664 588.263,787.968 588.823,771.156 589.382,748.951 589.941,748.375 590.5,727.397 591.06,757.909 591.619,721.531 592.178,706.522 592.737,723.559 593.297,725.505 593.856,698.315 594.415,682.805 594.974,670.689 595.534,672.854 596.093,675.347 596.652,674.867 597.211,705.477 597.771,684.288 598.33,699.706 598.889,683.615 599.448,681.341 600.008,682.418 600.567,662.947 601.126,667.675 601.685,671.814 602.245,659.309 602.804,661.252 603.363,647.005 603.922,665.112 604.482,698.972 605.041,698.656 605.6,648.884 606.159,634.755 606.719,622.046 607.278,626.66 607.837,613.161 608.396,632.435 608.956,634.12 609.515,620.737 610.074,609.978 610.633,601.752 611.193,593.15 611.752,618.963 612.311,620.567 612.87,610.389 613.43,616.058 613.989,620.725 614.548,624.91 615.107,661.693 615.667,680.503 616.226,699.066 616.785,717.142 617.344,714.618 617.904,701.765 618.463,718.045 619.022,717.202 619.581,733.031 620.141,763.109 620.7,756.815 621.259,753.007 621.818,731.093 622.378,716.011 622.937,744.993 623.496,743.244 624.055,725.12 624.615,727.66 625.174,728 625.733,774.527 626.292,770.548 626.852,769.579 627.411,798.131 627.97,794.515 628.529,773.93 629.089,784.656 629.648,777.36 630.207,772.186 630.766,784.074 631.326,783.337 631.885,779.689 632.444,794.695 633.003,790.444 633.563,815.352 634.122,814.027 634.681,790.08 635.24,785.977 635.8,796.224 636.359,791.541 636.918,786.487 637.477,770.134 638.037,750.731 638.596,764.035 639.155,727.205 639.714,743.1 640.274,723.511 640.833,721.845 641.392,720.652 641.951,701.406 642.511,667.75 643.07,650.339 643.629,667.45 644.188,667.175 644.748,651.456 645.307,666.878 645.866,670.746 646.425,686.643 646.985,670.172 647.544,670.694 648.103,706.262 648.662,690.68 649.222,721.601 649.781,722.305 650.34,704.047 650.899,705.33 651.459,692.323 652.018,710.417 652.577,723.884 653.136,707.876 653.696,705.046 654.255,738.309 654.814,751.627 655.373,763.484 655.933,744.888 656.492,726.969 657.051,725.001 657.61,704.927 658.17,690.389 658.729,722.46 659.288,754.533 659.847,718.627 660.407,685.056 660.966,657.155 661.525,641.084 662.084,642.171 662.644,643.155 663.203,617.015 663.762,636.166 664.321,658.125 664.881,676.901 665.44,664.765 665.999,683.022 666.558,682.092 667.118,711.241 667.677,722.351 668.236,685.576 668.795,703.008 669.355,717.321 669.914,702.777 670.473,669.83 671.032,686.726 671.592,719.853 672.151,715.883 672.71,712.453 673.269,697.622 673.829,666.094 674.388,666.563 674.947,686.612 675.506,684.843 676.066,697.755 676.625,713.928 677.184,698.852 677.743,666.911 678.303,653.146 678.862,671.005 679.421,716.209 679.981,718.465 680.54,704.583 681.099,722.183 681.658,722.477 682.218,736.902 682.777,747.227 683.336,730.125 683.895,711.152 684.455,709.395 685.014,691.693 685.573,690.173 686.132,706.559 686.692,751.131 687.251,775.978 687.81,757.504 688.369,754.426 688.929,748.632 689.488,778.572 690.047,785.144 690.606,764.645 691.166,763.522 691.725,757.517 692.284,703.215 692.843,686.862 693.403,687.567 693.962,626.347 694.521,632.779 695.08,685.009 695.64,702.467 696.199,686.74 696.758,717.302 697.317,731.408 697.877,697.827 698.436,697.639 698.995,716.638 699.554,700.347 700.114,702.126 700.673,719.934 701.232,765.312 701.791,745.955 702.351,741.176 702.91,702.141 703.469,703.637 704.028,677.081 704.588,706.077 705.147,736.496 705.706,718.641 706.265,782.179 706.825,793.894 707.384,804.723 707.943,797.955 708.502,804.894 709.062,799.026 709.621,778.083 710.18,793.646 710.739,772.337 711.299,781.546 711.858,761.775 712.417,773.438 712.976,769.675 713.536,765.699 714.095,763.052 714.654,774.583 715.213,784.835 715.773,747.645 716.332,741.836 716.891,738.573 717.45,721.397 718.01,685.005 718.569,616.942 719.128,620.484 719.687,558.758 720.247,565.215 720.806,574.538 721.365,579.933 721.924,586.543 722.484,591.844 723.043,578.768 723.602,583.709 724.161,606.543 724.721,642.163 725.28,628.375 725.839,661.499 726.398,679.959 726.958,696.552 727.517,699.684 728.076,666.744 728.635,650.247 729.195,637.074 729.754,642.413 730.313,645.298 730.872,614.053 731.432,632.046 731.991,618.985 732.55,574.628 733.109,579.663 733.669,552.984 734.228,562.291 734.787,538.606 735.346,560.882 735.906,563.384 736.465,555.759 737.024,584.751 737.583,589.268 738.143,609.975 738.702,597.664 739.261,651.758 739.82,654.59 740.38,643.209 740.939,647.218 741.498,666.527 742.057,651.843 742.617,668.642 743.176,687.259 743.735,670.875 744.294,670.322 744.854,655.734 745.413,642.626 745.972,646.353 746.531,650.175 747.091,586.72 747.65,594.372 748.209,599.481 748.768,619.784 749.328,637.257 749.887,623.159 750.446,607.511 751.005,644.857 751.565,644.836 752.124,631.22 752.683,604.484 753.242,609.289 753.802,677.808 754.361,614.622 754.92,636.822 755.479,621.014 756.039,583.393 756.598,586.793 757.157,593.85 757.716,632.412 758.276,670.447 758.835,671.589 759.394,674.988 759.953,693.113 760.513,677.502 761.072,679.366 761.631,682.846 762.19,684.593 762.75,698.669 763.309,650.897 763.868,654.936 764.427,689.92 764.987,709.431 765.546,713.001 766.105,694.742 766.664,739.885 767.224,738.028 767.783,733.821 768.342,748.63 768.901,792.263 769.461,755.364 770.02,766.915 770.579,782.276 771.138,780.778 771.698,732.216 772.257,762.154 772.816,742.084 773.375,706.678 773.935,707.614 774.494,707.467 775.053,754.786 775.612,767.621 776.172,796.905 776.731,790.154 777.29,769.553 777.849,764.964 778.409,776.841 778.968,794.256 779.527,766.851 780.086,748.176 780.646,700.961 781.205,685.426 781.764,686.296 782.323,686.138 782.883,687.356 783.442,736.228 784.001,783.769 784.56,776.96 785.12,756.029 785.679,740.297 786.238,708.747 786.797,740.269 787.357,719.561 787.916,704.972 788.475,705.345 789.034,705.534 789.594,717.164 790.153,764.716 790.712,744.45 791.271,711.949 791.831,683.053 792.39,682.457 792.949,685.938 793.508,704.589 794.068,707.321 794.627,704.805 795.186,720.142 795.745,746.641 796.305,727.859 796.864,725.22 797.423,754.829 797.982,767.478 798.542,764.895 799.101,777.564 799.66,776.007 800.219,756.551 800.779,686.332 801.338,717.562 801.897,748.224 802.456,775.625 803.016,802.959 803.575,814.15 804.134,808.107 804.693,818.801 805.253,811.678 805.812,804.065 806.371,828.875 806.931,834.789 807.49,825.854 808.049,785.689 808.608,778.664 809.168,790.695 809.727,753.193 810.286,763.105 810.845,758.559 811.405,754.795 811.964,752.783 812.523,736.802 813.082,716.75 813.642,682.832 814.201,632.942 814.76,599.397 815.319,640.112 815.879,626.738 816.438,615.632 816.997,656.643 817.556,624.716 818.116,627.892 818.675,666.554 819.234,667.92 819.793,634.045 820.353,638.098 820.912,652.961 821.471,639.669 822.03,646.069 822.59,615.877 823.149,669.405 823.708,689.33 824.267,692.298 824.827,725.051 825.386,724.116 825.945,740.766 826.504,768.17 827.064,729.403 827.623,741.331 828.182,753.711 828.741,716.498 829.301,696.556 829.86,694.352 830.419,673.89 830.978,656.366 831.538,658.398 832.097,661.108 832.656,658.389 833.215,675.22 833.775,724.663 834.334,739.32 834.893,719.898 835.452,718.19 836.012,730.789 836.571,725.596 837.13,751.754 837.689,731.252 838.249,695.094 838.808,692.664 839.367,675.007 839.926,656.929 840.486,655.659 841.045,659.153 841.604,677.758 842.163,665.392 842.723,618.624 843.282,671.899 843.841,685.825 844.4,686.602 844.96,705.61 845.519,684.226 846.078,701.318 846.637,734.042 847.197,697.01 847.756,714.798 848.315,714.979 848.874,730.487 849.434,743.945 849.993,724.364 850.552,719.381 851.111,668.453 851.671,650.936 852.23,687.315 852.789,671.964 853.348,687.277 853.908,701.237 854.467,700.406 855.026,684.873 855.585,699.242 856.145,678.409 856.704,677.264 857.263,694.345 857.822,663.197 858.382,665.347 858.941,648.548 859.5,635.765 860.059,624.35 860.619,628.389 861.178,663.047 861.737,663.482 862.296,686.418 862.856,651.871 863.415,640.837 863.974,658.056 864.533,678.121 865.093,679.377 865.652,694.027 866.211,708.036 866.77,720.128 867.33,715.241 867.889,746.634 868.448,762.279 869.007,740.406 869.567,723.917 870.126,723.44 870.685,739.812 871.244,752.511 871.804,776.917 872.363,739.485 872.922,751.071 873.481,751.47 874.041,748.341 874.6,748.816 875.159,747.858 875.718,745.735 876.278,708.562 876.837,706.18 877.396,709.494 877.955,705.828 878.515,674.999 879.074,640.077 879.633,642.866 880.192,662.703 880.752,677.555 881.311,680.083 881.87,665.133 882.429,669.402 882.989,670.562 883.548,688.544 884.107,688.743 884.666,673.697 885.226,641.809 885.785,630.965 886.344,617.342 886.903,637.335 887.463,640.199 888.022,625.367 888.581,595.745 889.14,617.503 889.7,620.011 890.259,574.004 890.818,564.854 891.377,603.768 891.937,609.315 892.496,597.683 893.055,602.803 893.614,629.295 894.174,647.512 894.733,617.627 895.292,623.762 895.851,643.081 896.411,663.837 896.97,666.575 897.529,669.024 898.088,702.79 898.648,702.319 899.207,715.665 899.766,714.042 900.325,713.638 900.885,723.863 901.444,737.862 902.003,750.805 902.562,768.281 903.122,747.034 903.681,727.834 904.24,706.246 904.799,673.635 905.359,659.031 905.918,645.918 906.477,697.44 907.036,679.476 907.596,677.882 908.155,673.768 908.714,689.201 909.273,709.083 909.833,722.567 910.392,704.121 910.951,706.657 911.51,737.543 912.07,721.139 912.629,717.096 913.188,680.611 913.747,681.66 914.307,683.905 914.866,687.444 915.425,688.924 915.984,722.224 916.544,685.524 917.103,667.547 917.662,669.632 918.221,654.32 918.781,653.708 919.34,622.055 919.899,642.739 920.458,659.979 921.018,679.534 921.577,617.121 922.136,606.937 922.695,598.401 923.255,587.287 923.814,594.222 924.373,596.553 924.932,605.074 925.492,672.217 926.051,662.693 926.61,680.829 927.169,684.439 927.729,669.504 928.288,672.86 928.847,672.898 929.406,657.27 929.966,674.637 930.525,672.868 931.084,654.95 931.644,656.09 932.203,674.355 932.762,692.516 933.321,756.661 933.881,768.422 934.44,748.16 934.999,746.467 935.558,712.396 936.118,711.501 936.677,679.117 937.236,678.648 937.795,712.602 938.355,660.5 938.914,647.945 939.473,616.769 940.032,618.485 940.592,601.972 941.151,588.275 941.71,610.069 942.269,612.755 942.829,583.189 943.388,602.462 943.947,588.425 944.506,610.416 945.066,602.057 945.625,606.431 946.184,610.231 946.743,628.491 947.303,648.157 947.862,636.194 948.421,651.21 948.98,670.387 949.54,687.902 950.099,704.713 950.658,723.041 951.217,736.48 951.777,717.704 952.336,716.937 952.895,686.588 953.454,686.822 954.014,670.734 954.573,670.254 955.132,688.59 955.691,666.799 956.251,669.301 956.81,718.965 957.369,731.695 957.928,726.925 958.488,690.461 959.047,721.999 959.606,718.8 960.165,736.122 960.725,734.195 961.284,731.078 961.843,713.931 962.402,712.555 962.962,695.024 963.521,647.892 964.08,650.248 964.639,651.422 965.199,657.605 965.758,642.682 966.317,675.934 966.876,677.81 967.436,648.174 967.995,634.575 968.554,671.649 969.113,674.44 969.673,672.591 970.232,674.339 970.791,676.601 971.35,678.257 971.91,692.802 972.469,678.624 973.028,677.919 973.587,693.117 974.147,676.569 974.706,675.756 975.265,679.096 975.824,629.315 976.384,583.253 976.943,607.895 977.502,613.32 978.061,585.714 978.621,604.005 979.18,607.98 979.739,628.053 980.298,628.188 980.858,627.445 981.417,649.856 981.976,634.159 982.535,655.138 983.095,660.28 983.654,664.078 984.213,634.172 984.772,652.373 985.332,587.717 985.891,609.413 986.45,611.83 987.009,616.453 987.569,635.365 988.128,655.242 988.687,644.082 989.246,646.409 989.806,679.754 990.365,674.659 990.924,689.278 991.483,706.011 992.043,704.482 992.602,720.283 993.161,736.67 993.72,751.677 994.28,765.029 994.839,776.164 995.398,807.777 995.957,829.828 996.517,822.193 997.076,786.133 997.635,812.964 998.194,807.865 998.754,772.426 999.313,751.009 999.872,777.964 1000.43,770.246 1000.99,766.258 1001.55,794.252 1002.11,772.888 1002.67,751.512 1003.23,713.927 1003.79,729.931 1004.35,726.314 1004.91,759.562 1005.46,725.142 1006.02,661.117 1006.58,678.8 1007.14,700.517 1007.7,696.4 1008.26,696.097 1008.82,693.394 1009.38,711.171 1009.94,741.201 1010.5,757.128 1011.06,721.476 1011.62,735.31 1012.18,796.049 1012.73,789.591 1013.29,766.938 1013.85,741.922 1014.41,751.137 1014.97,763.606 1015.53,729.114 1016.09,740.922 1016.65,767.888 1017.21,776.711 1017.77,754.788 1018.33,795.49 1018.89,757.072 1019.45,767.024 1020.01,761.704 1020.56,773.571 1021.12,782.885 1021.68,775.058 1022.24,768.601 1022.8,762.044 1023.36,758.551 1023.92,739.059 1024.48,735.19 1025.04,759.938 1025.6,758.564 1026.16,804.342 1026.72,797.315 1027.28,825.149 1027.83,766.119 1028.39,759.858 1028.95,789.024 1029.51,783.954 1030.07,812.695 1030.63,807.903 1031.19,803.902 1031.75,795.01 1032.31,790.781 1032.87,784.623 1033.43,766.125 1033.99,743.618 1034.55,755.488 1035.1,736.208 1035.66,715.793 1036.22,716.619 1036.78,696.005 1037.34,660.415 1037.9,678.849 1038.46,647.275 1039.02,648.344 1039.58,666.971 1040.14,646.605 1040.7,647.961 1041.26,649.799 1041.82,633.749 1042.38,635.853 1042.93,639.72 1043.49,661.771 1044.05,662.523 1044.61,665.734 1045.17,649.5 1045.73,637.262 1046.29,643.813 1046.85,645.652 1047.41,633.53 1047.97,634.511 1048.53,639.402 1049.09,641.712 1049.65,629.201 1050.2,647.734 1050.76,666.648 1051.32,652.89 1051.88,685.233 1052.44,666.178 1053,702.058 1053.56,681.65 1054.12,683.252 1054.68,682.737 1055.24,668.581 1055.8,733.734 1056.36,743.089 1056.92,737.174 1057.48,728.819 1058.03,759.457 1058.59,769.504 1059.15,732.175 1059.71,725.575 1060.27,756.106 1060.83,734.571 1061.39,732.154 1061.95,696.656 1062.51,692.299 1063.07,644.647 1063.63,647.124 1064.19,631.819 1064.75,634.031 1065.3,638.615 1065.86,642.464 1066.42,645.711 1066.98,614.118 1067.54,634.935 1068.1,623.335 1068.66,623.701 1069.22,639.711 1069.78,653.934 1070.34,668.443 1070.9,651.311 1071.46,681.966 1072.02,667.265 1072.57,655.133 1073.13,641.315 1073.69,659.253 1074.25,627.55 1074.81,647.137 1075.37,648.923 1075.93,632.817 1076.49,653.335 1077.05,641.067 1077.61,674.334 1078.17,656.549 1078.73,639.521 1079.29,625.948 1079.85,610.773 1080.4,631.52 1080.96,634.053 1081.52,652.071 1082.08,621.782 1082.64,594.436 1083.2,586.688 1083.76,593.418 1084.32,616.632 1084.88,621.415 1085.44,638.2 1086,673.313 1086.56,644.082 1087.12,627.811 1087.67,629.988 1088.23,651.102 1088.79,649.797 1089.35,651.753 1089.91,652.47 1090.47,655.154 1091.03,631.776 1091.59,636.792 1092.15,672.133 1092.71,672.891 1093.27,675.235 1093.83,658.003 1094.39,661.115 1094.94,729.104 1095.5,745.98 1096.06,743.124 1096.62,739.254 1097.18,734.084 1097.74,718.026 1098.3,697.729 1098.86,681.31 1099.42,701.631 1099.98,712.765 1100.54,711.219 1101.1,697.378 1101.66,677.781 1102.22,659.724 1102.77,640.725 1103.33,661.294 1103.89,662.334 1104.45,713.589 1105.01,694.673 1105.57,677.536 1106.13,690.304 1106.69,671.4 1107.25,687.928 1107.81,659.212 1108.37,642.149 1108.93,627.068 1109.49,632.94 1110.04,634.522 1110.6,606.282 1111.16,607.938 1111.72,626.563 1112.28,632.22 1112.84,699.724 1113.4,700.056 1113.96,681.132 1114.52,683.328 1115.08,698.123 1115.64,698.713 1116.2,696.843 1116.76,716.894 1117.31,733.349 1117.87,731.176 1118.43,730.181 1118.99,743.83 1119.55,708.521 1120.11,692.491 1120.67,741.061 1121.23,756.442 1121.79,768.633 1122.35,768.427 1122.91,762.124 1123.47,755.801 1124.03,753.123 1124.59,763.915 1125.14,724.734 1125.7,722.499 1126.26,720.86 1126.82,721.841 1127.38,719.777 1127.94,703.284 1128.5,702.249 1129.06,751.524 1129.62,730.199 1130.18,711.685 1130.74,723.714 1131.3,749.584 1131.86,710.823 1132.41,726.311 1132.97,707.565 1133.53,675.912 1134.09,644.726 1134.65,664.34 1135.21,697.584 1135.77,678.834 1136.33,648.613 1136.89,649.026 1137.45,665.916 1138.01,668.029 1138.57,666.557 1139.13,702.636 1139.68,683.095 1140.24,636.598 1140.8,652.78 1141.36,634.815 1141.92,689.06 1142.48,703.142 1143.04,687.932 1143.6,690.509 1144.16,624.072 1144.72,612.741 1145.28,568.117 1145.84,576.94 1146.4,564.343 1146.96,558.85 1147.51,564.734 1148.07,569.297 1148.63,524.628 1149.19,534.087 1149.75,573.335 1150.31,592.218 1150.87,562.774 1151.43,588.847 1151.99,592.433 1152.55,599.603 1153.11,604.748 1153.67,595.195 1154.23,635.632 1154.78,652.893 1155.34,671.338 1155.9,677.425 1156.46,708.758 1157.02,691.463 1157.58,707.119 1158.14,704.606 1158.7,702.764 1159.26,716.706 1159.82,700.167 1160.38,715.38 1160.94,728.24 1161.5,677.901 1162.05,679.138 1162.61,662.431 1163.17,632.41 1163.73,601.443 1164.29,591.107 1164.85,548.514 1165.41,541.143 1165.97,548.634 1166.53,572.842 1167.09,542.565 1167.65,568.616 1168.21,609.16 1168.77,607.971 1169.33,611.489 1169.88,601.173 1170.44,620.484 1171,658.255 1171.56,659.204 1172.12,694.764 1172.68,681.43 1173.24,696.788 1173.8,663.926 1174.36,648.469 1174.92,697.753 1175.48,697.254 1176.04,745.643 1176.6,758.849 1177.15,770.064 1177.71,734.444 1178.27,763.324 1178.83,727.526 1179.39,728.028 1179.95,757.166 1180.51,769.046 1181.07,764.522 1181.63,698.251 1182.19,711.305 1182.75,728.437 1183.31,690.769 1183.87,705.532 1184.43,734.677 1184.98,748.788 1185.54,728.264 1186.1,745.13 1186.66,757.187 1187.22,719 1187.78,701.282 1188.34,714.647 1188.9,698.917 1189.46,683.85 1190.02,683.618 1190.58,684.547 1191.14,667.571 1191.7,684.345 1192.25,683.347 1192.81,684.972 1193.37,699.636 1193.93,682.102 1194.49,666.698 1195.05,670.988 1195.61,658.641 1196.17,677.661 1196.73,646.744 1197.29,664.386 1197.85,681.774 1198.41,680.542 1198.97,698.143 1199.52,697.456 1200.08,731.676 1200.64,708.818 1201.2,760.262 1201.76,740.177 1202.32,769.851 1202.88,748.992 1203.44,746.795 1204,756.666 1204.56,772.126 1205.12,770.671 1205.68,750.851 1206.24,731.68 1206.8,759.898 1207.35,722.977 1207.91,719.236 1208.47,748.793 1209.03,743.714 1209.59,740.16 1210.15,736.748 1210.71,734.355 1211.27,747.9 1211.83,762.296 1212.39,724.575 1212.95,689.149 1213.51,666.666 1214.07,696.095 1214.62,729.088 1215.18,741.86 1215.74,739.074 1216.3,734.592 1216.86,718.07 1217.42,698.545 1217.98,696.02 1218.54,679.227 1219.1,665.116 1219.66,680.215 1220.22,664.14 1220.78,660.094 1221.34,678.594 1221.89,698.523 1222.45,683.266 1223.01,699.512 1223.57,663.992 1224.13,664.869 1224.69,666.154 1225.25,697.453 1225.81,700.427 1226.37,661.828 1226.93,648.006 1227.49,650.06 1228.05,668.327 1228.61,653.818 1229.17,653.911 1229.72,654.73 1230.28,608.136 1230.84,613.201 1231.4,603.389 1231.96,610.826 1232.52,613.097 1233.08,665.854 1233.64,666.839 1234.2,667.452 1234.76,634.126 1235.32,669.61 1235.88,672.814 1236.44,658.044 1236.99,646.2 1237.55,630.014 1238.11,617.505 1238.67,640.074 1239.23,657.894 1239.79,660.774 1240.35,658.961 1240.91,675.116 1241.47,705.433 1242.03,730.596 1242.59,762.419 1243.15,744.002 1243.71,723.898 1244.26,703.426 1244.82,639.804 1245.38,643.258 1245.94,650.051 1246.5,635.477 1247.06,635.709 1247.62,620.725 1248.18,643.108 1248.74,663.368 1249.3,679.977 1249.86,695.415 1250.42,707.522 1250.98,736.969 1251.54,684.269 1252.09,685.489 1252.65,669.972 1253.21,656.338 1253.77,676.244 1254.33,710.419 1254.89,738.775 1255.45,733.112 1256.01,779.976 1256.57,774.391 1257.13,788.137 1257.69,813.398 1258.25,775.778 1258.81,751.472 1259.36,763.876 1259.92,757.947 1260.48,739.369 1261.04,708.011 1261.6,719.445 1262.16,715.02 1262.72,744.167 1263.28,725.207 1263.84,736.032 1264.4,718.163 1264.96,730.63 1265.52,744.214 1266.08,740.822 1266.63,753.789 1267.19,732.093 1267.75,725.658 1268.31,737.342 1268.87,748.808 1269.43,729.011 1269.99,741.713 1270.55,740.396 1271.11,737.805 1271.67,748.399 1272.23,744.819 1272.79,726.169 1273.35,737.474 1273.91,698.716 1274.46,712.95 1275.02,697.642 1275.58,680.315 1276.14,667.806 1276.7,637.52 1277.26,653.852 1277.82,654.024 1278.38,654.75 1278.94,642.133 1279.5,643.092 1280.06,663.277 1280.62,665.057 1281.18,681.905 1281.73,681.611 1282.29,663.908 1282.85,614.257 1283.41,637.74 1283.97,622.356 1284.53,609.309 1285.09,580.004 1285.65,600.42 1286.21,620.831 1286.77,638.503 1287.33,687.744 1287.89,689.117 1288.45,719.105 1289,700.542 1289.56,697.258 1290.12,712.519 1290.68,742.779 1291.24,721.184 1291.8,715.702 1292.36,715.189 1292.92,728.2 1293.48,693.108 1294.04,711.343 1294.6,692.15 1295.16,721.863 1295.72,733.067 1296.28,717.515 1296.83,729.781 1297.39,710.739 1297.95,723.731 1298.51,706.2 1299.07,741.39 1299.63,707.6 1300.19,690.849 1300.75,671.535 1301.31,674.848 1301.87,658.975 1302.43,659.311 1302.99,644.875 1303.55,630.555 1304.1,614.655 1304.66,620.313 1305.22,625.801 1305.78,598.804 1306.34,604.777 1306.9,627.666 1307.46,663.628 1308.02,666.698 1308.58,667.996 1309.14,685.599 1309.7,681.747 1310.26,636.169 1310.82,657.115 1311.38,625.795 1311.93,611.982 1312.49,603.436 1313.05,624.054 1313.61,674.607 1314.17,678.739 1314.73,678.543 1315.29,697.847 1315.85,698.639 1316.41,681.153 1316.97,696.826 1317.53,679.691 1318.09,693.874 1318.65,711.372 1319.2,698.657 1319.76,696.021 1320.32,647.476 1320.88,682.429 1321.44,700.941 1322,730.49 1322.56,712.176 1323.12,728.641 1323.68,712.683 1324.24,709.58 1324.8,709.651 1325.36,692.394 1325.92,674.798 1326.47,677.862 1327.03,695.289 1327.59,677.713 1328.15,693.941 1328.71,692.765 1329.27,645.783 1329.83,645.765 1330.39,582.699 1330.95,601.198 1331.51,608.15 1332.07,566.403 1332.63,527.665 1333.19,522.213 1333.75,548.24 1334.3,588.487 1334.86,595.589 1335.42,583.521 1335.98,571.815 1336.54,562.876 1337.1,565.938 1337.66,571.957 1338.22,558.721 1338.78,583.971 1339.34,603.138 1339.9,620.678 1340.46,610.454 1341.02,620.07 1341.57,637.01 1342.13,639.21 1342.69,644.183 1343.25,647.586 1343.81,683.145 1344.37,698.26 1344.93,680.609 1345.49,667.389 1346.05,653.903 1346.61,626.69 1347.17,628.644 1347.73,616.702 1348.29,618.665 1348.84,654.275 1349.4,655.975 1349.96,675.152 1350.52,692.207 1351.08,726.654 1351.64,772.465 1352.2,779.552 1352.76,755.358 1353.32,732.678 1353.88,750.139 1354.44,748.575 1355,759.204 1355.56,789.134 1356.12,799.901 1356.67,812.908 1357.23,804.662 1357.79,785.839 1358.35,796.386 1358.91,791.522 1359.47,785.122 1360.03,809.638 1360.59,819.736 1361.15,809.51 1361.71,785.99 1362.27,764.521 1362.83,744.234 1363.39,740.597 1363.94,741.527 1364.5,739.684 1365.06,737.828 1365.62,717.819 1366.18,714.196 1366.74,697.868 1367.3,695.728 1367.86,710.691 1368.42,745.727 1368.98,713.757 1369.54,695.061 1370.1,679.444 1370.66,631.965 1371.21,634.004 1371.77,638.064 1372.33,624.896 1372.89,628.197 1373.45,628.473 1374.01,631.897 1374.57,637.666 1375.13,640.232 1375.69,659.781 1376.25,659.815 1376.81,645.555 1377.37,648.447 1377.93,666.349 1378.49,664.498 1379.04,663.406 1379.6,678.917 1380.16,649.926 1380.72,699.827 1381.28,697.247 1381.84,677.843 1382.4,691.36 1382.96,702.817 1383.52,681.567 1384.08,665.355 1384.64,666.559 1385.2,652.593 1385.76,652.248 1386.31,653.304 1386.87,655.301 1387.43,703.138 1387.99,685.605 1388.55,715.677 1389.11,665.137 1389.67,651.441 1390.23,635.902 1390.79,655.847 1391.35,674.803 1391.91,691.218 1392.47,690.726 1393.03,691.25 1393.58,720.777 1394.14,701.716 1394.7,698.277 1395.26,702.581 1395.82,701.071 1396.38,686.575 1396.94,684.945 1397.5,716.686 1398.06,717.09 1398.62,713.841 1399.18,696.644 1399.74,684.84 1400.3,670.673 1400.86,688.184 1401.41,693.573 1401.97,691.24 1402.53,691.057 1403.09,689.898 1403.65,688.53 1404.21,706.379 1404.77,736.918 1405.33,736.503 1405.89,730.617 1406.45,714.912 1407.01,698.029 1407.57,668.087 1408.13,717.246 1408.68,719.84 1409.24,718.532 1409.8,719.372 1410.36,698.518 1410.92,715.822 1411.48,679.793 1412.04,669.06 1412.6,700.766 1413.16,698.756 1413.72,714.942 1414.28,712.993 1414.84,711.98 1415.4,696.37 1415.95,691.78 1416.51,693.682 1417.07,694.788 1417.63,632.263 1418.19,617.752 1418.75,619.639 1419.31,636.187 1419.87,624.273 1420.43,610.581 1420.99,598.781 1421.55,586.228 1422.11,558.406 1422.67,551.469 1423.23,559.928 1423.78,600.254 1424.34,601.235 1424.9,606.524 1425.46,610.655 1426.02,616.58 1426.58,620.592 1427.14,657.659 1427.7,663.867 1428.26,666.613 1428.82,684.45 1429.38,665.845 1429.94,682.68 1430.5,695.534 1431.05,680.387 1431.61,678.305 1432.17,680.818 1432.73,682.361 1433.29,697.845 1433.85,746.731 1434.41,761.738 1434.97,788.979 1435.53,812.971 1436.09,789.17 1436.65,783.952 1437.21,780.012 1437.77,756.758 1438.33,750.042 1438.88,729.298 1439.44,694.868 1440,730.534 1440.56,729.168 1441.12,727.149 1441.68,757.44 1442.24,769.654 1442.8,798.689 1443.36,777.538 1443.92,756.597 1444.48,735.345 1445.04,717.249 1445.6,725.59 1446.15,723.615 1446.71,688.304 1447.27,705.612 1447.83,672.271 1448.39,689.824 1448.95,639.766 1449.51,642.04 1450.07,673.315 1450.63,675.258 1451.19,676.839 1451.75,662.583 1452.31,679.38 1452.87,663.8 1453.42,713.819 1453.98,679.293 1454.54,662.06 1455.1,645.79 1455.66,636.752 1456.22,670.867 1456.78,636.882 1457.34,609.511 1457.9,613.224 1458.46,579.65 1459.02,570.307 1459.58,593.765 1460.14,615.247 1460.7,649.459 1461.25,666.176 1461.81,683.673 1462.37,698.19 1462.93,697.321 1463.49,699.321 1464.05,696.373 1464.61,714.965 1465.17,746.61 1465.73,807.953 1466.29,800.683 1466.85,776.398 1467.41,752.901 1467.97,734.394 1468.52,760.215 1469.08,739.174 1469.64,736.067 1470.2,718.153 1470.76,715.334 1471.32,696.298 1471.88,678.394 1472.44,674.697 1473,723.455 1473.56,718.457 1474.12,729.998 1474.68,724.402 1475.24,719.874 1475.79,737.394 1476.35,749.885 1476.91,744.429 1477.47,739.364 1478.03,653.776 1478.59,622.063 1479.15,655.817 1479.71,658.34 1480.27,630.182 1480.83,653.961 1481.39,660.331 1481.95,663.35 1482.51,648.518 1483.07,633.211 1483.62,604.113 1484.18,623.558 1484.74,629.666 1485.3,648.74 1485.86,679.476 1486.42,677.272 1486.98,676.577 1487.54,661.801 1488.1,676.095 1488.66,678.422 1489.22,695.678 1489.78,741.259 1490.34,720.516 1490.89,717.863 1491.45,697.651 1492.01,726.117 1492.57,725.926 1493.13,736.798 1493.69,718.869 1494.25,717.348 1494.81,748.358 1495.37,763.787 1495.93,777.66 1496.49,738.135 1497.05,750.26 1497.61,729.65 1498.16,709.95 1498.72,706.669 1499.28,721.968 1499.84,722.765 1500.4,736.34 1500.96,714.822 1501.52,711.897 1502.08,677.589 1502.64,692.107 1503.2,692.834 1503.76,675.773 1504.32,676.063 1504.88,643.401 1505.44,680.819 1505.99,666.181 1506.55,665.455 1507.11,679.644 1507.67,667.224 1508.23,651.387 1508.79,652.522 1509.35,654.213 1509.91,626.426 1510.47,629.185 1511.03,645.656 1511.59,613.619 1512.15,617.073 1512.71,604.696 1513.26,609.909 1513.82,600.737 1514.38,599.991 1514.94,571.627 1515.5,593.953 1516.06,614.203 1516.62,634.575 1517.18,616.529 1517.74,621.894 1518.3,623.683 1518.86,675.386 1519.42,674.993 1519.98,691.934 1520.53,724.904 1521.09,740.014 1521.65,750.096 1522.21,777.609 1522.77,787.709 1523.33,768.178 1523.89,748.34 1524.45,730.454 1525.01,712.133 1525.57,730.624 1526.13,725.744 1526.69,772.547 1527.25,782.567 1527.81,759.814 1528.36,722.879 1528.92,736.409 1529.48,705.606 1530.04,703.44 1530.6,673.245 1531.16,706.104 1531.72,721.583 1532.28,701.861 1532.84,668.881 1533.4,639.061 1533.96,659.859 1534.52,695.395 1535.08,680.846 1535.63,708.913 1536.19,741.891 1536.75,786.422 1537.31,779.517 1537.87,773.914 1538.43,784.536 1538.99,794.553 1539.55,807.015 1540.11,816.457 1540.67,842.274 1541.23,831.487 1541.79,856.838 1542.35,830.54 1542.9,827.13 1543.46,817.007 1544.02,825.033 1544.58,820.565 1545.14,765.184 1545.7,742.062 1546.26,724.506 1546.82,755.547 1547.38,736.552 1547.94,786.691 1548.5,766.289 1549.06,749.353 1549.62,727.388 1550.18,694.943 1550.73,679.108 1551.29,648.422 1551.85,665.169 1552.41,731.546 1552.97,749.578 1553.53,698.281 1554.09,694.958 1554.65,692.569 1555.21,674.493 1555.77,640.09 1556.33,661.412 1556.89,658.37 1557.45,659.871 1558,661.375 1558.56,645.127 1559.12,664.099 1559.68,636.111 1560.24,618.962 1560.8,589.695 1561.36,581.641 1561.92,634.914 1562.48,683.864 1563.04,667.62 1563.6,635.749 1564.16,640.596 1564.72,605.459 1565.28,644.033 1565.83,677 1566.39,678.886 1566.95,663.156 1567.51,661.654 1568.07,662.037 1568.63,647.051 1569.19,615.071 1569.75,620.682 1570.31,656.018 1570.87,672.001 1571.43,661.327 1571.99,648.938 1572.55,684.448 1573.1,682.244 1573.66,700.307 1574.22,700.494 1574.78,651.718 1575.34,666.285 1575.9,681.023 1576.46,648.018 1577.02,664.677 1577.58,648.081 1578.14,648.886 1578.7,649.458 1579.26,650.809 1579.82,651.248 1580.37,666.298 1580.93,669.005 1581.49,655.732 1582.05,643.433 1582.61,626.301 1583.17,631.126 1583.73,616.965 1584.29,588.417 1584.85,609.659 1585.41,627.038 1585.97,599.513 1586.53,587.974 1587.09,593.835 1587.65,585.241 1588.2,593.22 1588.76,596.101 1589.32,586.202 1589.88,591.7 1590.44,612.057 1591,618.355 1591.56,602.014 1592.12,603.407 1592.68,622.888 1593.24,642.039 1593.8,662.55 1594.36,644.043 1594.92,646.251 1595.47,665.719 1596.03,683.287 1596.59,699.66 1597.15,718.535 1597.71,718.099 1598.27,698.01 1598.83,701.058 1599.39,699.234 1599.95,761.53 1600.51,774.442 1601.07,738.546 1601.63,719.954 1602.19,735.282 1602.74,751.105 1603.3,749.616 1603.86,777.687 1604.42,725.899 1604.98,689.028 1605.54,688.995 1606.1,721.678 1606.66,732.603 1607.22,698.378 1607.78,700.469 1608.34,685.317 1608.9,702.532 1609.46,654.757 1610.02,641.513 1610.57,646.699 1611.13,648.883 1611.69,619.192 1612.25,653.91 1612.81,671.005 1613.37,688.701 1613.93,672.629 1614.49,673.957 1615.05,629.548 1615.61,615.599 1616.17,653.147 1616.73,656.483 1617.29,643.192 1617.84,629.976 1618.4,617.479 1618.96,621.064 1619.52,608.359 1620.08,616.907 1620.64,605.679 1621.2,609.874 1621.76,630.103 1622.32,631.844 1622.88,652.642 1623.44,703.906 1624,690.126 1624.56,675.174 1625.11,641.347 1625.67,625.811 1626.23,645.673 1626.79,663.029 1627.35,665.319 1627.91,684.301 1628.47,701.103 1629.03,686.038 1629.59,686.299 1630.15,687.492 1630.71,701.947 1631.27,667.68 1631.83,668.43 1632.39,699.925 1632.94,715.42 1633.5,696.982 1634.06,708.011 1634.62,705.172 1635.18,718.195 1635.74,654.573 1636.3,673.418 1636.86,657.608 1637.42,679.264 1637.98,692.256 1638.54,705.742 1639.1,703.037 1639.66,685.816 1640.21,684.031 1640.77,718.542 1641.33,700.738 1641.89,713.604 1642.45,677.207 1643.01,660.473 1643.57,645.026 1644.13,644.142 1644.69,645.413 1645.25,645.228 1645.81,664.029 1646.37,665.459 1646.93,622.463 1647.48,613.493 1648.04,617.294 1648.6,622.506 1649.16,627.028 1649.72,631.074 1650.28,629.976 1650.84,680.107 1651.4,680.585 1651.96,744.753 1652.52,742.274 1653.08,751.877 1653.64,713.768 1654.2,713.907 1654.76,695.095 1655.31,677.963 1655.87,677.496 1656.43,710.734 1656.99,710.695 1657.55,729.144 1658.11,756.382 1658.67,751.104 1659.23,729.5 1659.79,712.472 1660.35,742.137 1660.91,751.796 1661.47,765.228 1662.03,759.265 1662.58,722.018 1663.14,719.304 1663.7,750.274 1664.26,730.397 1664.82,716.149 1665.38,712.747 1665.94,728.604 1666.5,724.127 1667.06,703.817 1667.62,685.136 1668.18,682.414 1668.74,647.429 1669.3,601.232 1669.85,618.3 1670.41,635.73 1670.97,652.031 1671.53,635.706 1672.09,654.012 1672.65,702.229 1673.21,685.866 1673.77,654.445 1674.33,652.282 1674.89,654.71 1675.45,640.404 1676.01,659.247 1676.57,643.078 1677.13,658.662 1677.68,647.408 1678.24,632.863 1678.8,635.324 1679.36,637.928 1679.92,657.146 1680.48,690.145 1681.04,673.728 1681.6,677.745 1682.16,631.437 1682.72,635.415 1683.28,621.404 1683.84,640.057 1684.4,609.986 1684.95,647.334 1685.51,603.964 1686.07,624.453 1686.63,612.508 1687.19,619.398 1687.75,627.606 1688.31,679.578 1688.87,681.8 1689.43,698.878 1689.99,730.055 1690.55,697.373 1691.11,742.938 1691.67,724.089 1692.23,721.938 1692.78,689.636 1693.34,688.638 1693.9,672.423 1694.46,719.962 1695.02,735.187 1695.58,730.645 1696.14,726.333 1696.7,758.444 1697.26,754.578 1697.82,699.57 1698.38,715.554 1698.94,696.21 1699.5,709.168 1700.05,724.645 1700.61,738.585 1701.17,734.754 1701.73,736.992 1702.29,749.936 1702.85,746.273 1703.41,729.836 1703.97,710.871 1704.53,702.77 1705.09,750.817 1705.65,766.116 1706.21,759.612 1706.77,755.548 1707.32,782.564 1707.88,747.825 1708.44,723.795 1709,707.053 1709.56,656.526 1710.12,706.759 1710.68,720.715 1711.24,724.999 1711.8,740.556 1712.36,739.071 1712.92,735.135 1713.48,719.855 1714.04,704.05 1714.6,718.874 1715.15,718.887 1715.71,732.668 1716.27,741.017 1716.83,750.442 1717.39,717.582 1717.95,712.932 1718.51,712.622 1719.07,694.517 1719.63,695.253 1720.19,645.125 1720.75,597.834 1721.31,634.176 1721.87,634.674 1722.42,624.294 1722.98,656.576 1723.54,641.635 1724.1,658.618 1724.66,658.919 1725.22,677.346 1725.78,695.64 1726.34,694.574 1726.9,691.788 1727.46,715.241 1728.02,726.775 1728.58,689.476 1729.14,669.283 1729.69,652.955 1730.25,666.334 1730.81,681.628 1731.37,680.093 1731.93,680.211 1732.49,681.004 1733.05,684.863 1733.61,668.691 1734.17,651.108 1734.73,632.962 1735.29,652.825 1735.85,636.308 1736.41,639.38 1736.97,641.877 1737.52,662.044 1738.08,713.951 1738.64,694.747 1739.2,681.579 1739.76,695.174 1740.32,677.508 1740.88,678.447 1741.44,681.526 1742,683.569 1742.56,700.697 1743.12,698.034 1743.68,697.313 1744.24,731.698 1744.79,763.806 1745.35,743.84 1745.91,738.74 1746.47,671.299 1747.03,687.507 1747.59,704.148 1748.15,686.306 1748.71,733.451 1749.27,728.823 1749.83,709.83 1750.39,709.125 1750.95,679.008 1751.51,661.031 1752.06,678.408 1752.62,677.042 1753.18,675.116 1753.74,662.713 1754.3,612.444 1754.86,614.288 1755.42,664.854 1755.98,680.21 1756.54,681.077 1757.1,650.004 1757.66,679.902 1758.22,678.589 1758.78,697.955 1759.34,696.189 1759.89,728.361 1760.45,740.374 1761.01,708.303 1761.57,693.299 1762.13,628.912 1762.69,599.706 1763.25,591.96 1763.81,615.599 1764.37,618.559 1764.93,575.501 1765.49,583.378 1766.05,591.638 1766.61,614.834 1767.16,617.872 1767.72,636.572 1768.28,641.834 1768.84,641.484 1769.4,643.926 1769.96,644.939 1770.52,674.667 1771.08,626.287 1771.64,594.831 1772.2,585.083 1772.76,607.186 1773.32,643.607 1773.88,646.275 1774.43,633.219 1774.99,651.068 1775.55,685.621 1776.11,672.344 1776.67,657.285 1777.23,673.427 1777.79,671.061 1778.35,674.313 1778.91,687.852 1779.47,686.865 1780.03,704.787 1780.59,702.476 1781.15,686.117 1781.71,670.736 1782.26,671.684 1782.82,688.592 1783.38,685.233 1783.94,668.733 1784.5,654.977 1785.06,592.797 1785.62,613.865 1786.18,634.855 1786.74,620.724 1787.3,640.08 1787.86,642.635 1788.42,661.119 1788.98,695.304 1789.53,710.178 1790.09,708.666 1790.65,690.278 1791.21,691.931 1791.77,611.27 1792.33,613.632 1792.89,632.448 1793.45,635.194 1794.01,668.508 1794.57,672.72 1795.13,676.744 1795.69,709.084 1796.25,708.083 1796.8,708.481 1797.36,743.832 1797.92,723.82 1798.48,723.299 1799.04,709.352 1799.6,707.444 1800.16,737.834 1800.72,703.755 1801.28,699.978 1801.84,716.123 1802.4,716.267 1802.96,728.175 1803.52,728.815 1804.08,680.015 1804.63,729.693 1805.19,747.445 1805.75,778.861 1806.31,743.054 1806.87,754.67 1807.43,765.036 1807.99,755.388 1808.55,734.417 1809.11,732.828 1809.67,710.693 1810.23,742.123 1810.79,724.257 1811.35,693.189 1811.9,693.388 1812.46,677.342 1813.02,729.471 1813.58,726.438 1814.14,708.305 1814.7,688.197 1815.26,670.099 1815.82,638.549 1816.38,658.102 1816.94,659.624 1817.5,654.622 1818.06,683.475 1818.62,682.4 1819.18,680.692 1819.73,678.462 1820.29,733.088 1820.85,697.102 1821.41,689.853 1821.97,674.757 1822.53,676.7 1823.09,662.668 1823.65,710.861 1824.21,708.579 1824.77,676.377 1825.33,661.32 1825.89,663.146 1826.45,664.092 1827,677.849 1827.56,659.621 1828.12,645.345 1828.68,695.345 1829.24,727.062 1829.8,739.947 1830.36,738.583 1830.92,734.466 1831.48,746.672 1832.04,776.659 1832.6,740.154 1833.16,725.594 1833.72,738.458 1834.27,767.101 1834.83,746.032 1835.39,741.93 1835.95,708.783 1836.51,734.942 1837.07,731.952 1837.63,715.201 1838.19,698.003 \"/>\n<path clip-path=\"url(#clip963)\" d=\"M720.247 689.983 L720.806 689.983 L721.365 689.983 L721.924 689.983 L722.484 689.983 L723.043 689.983 L723.602 689.983 L724.161 689.983 L724.721 689.983 L725.28 689.983 L725.839 689.983 L726.398 689.983 L726.958 689.983 L727.517 689.983 L728.076 689.983 L728.635 689.983 L729.195 689.983 L729.754 689.983 L730.313 689.983 L730.872 689.983 L731.432 689.983 L731.991 689.983 L732.55 689.983 L733.109 689.983 L733.669 689.983 L734.228 689.983 L734.787 689.983 L735.346 689.983 L735.906 689.983 L736.465 689.983 L737.024 689.983 L737.583 689.983 L738.143 689.983 L738.702 689.983 L739.261 689.983 L739.82 689.983 L740.38 689.983 L740.939 689.983 L741.498 689.983 L742.057 689.983 L742.617 689.983 L743.176 689.983 L743.735 689.983 L744.294 689.983 L744.854 689.983 L745.413 689.983 L745.972 689.983 L746.531 689.983 L747.091 689.983 L747.65 689.983 L748.209 689.983 L748.768 689.983 L749.328 689.983 L749.887 689.983 L750.446 689.983 L751.005 689.983 L751.565 689.983 L752.124 689.983 L752.683 689.983 L753.242 689.983 L753.802 689.983 L754.361 689.983 L754.92 689.983 L755.479 689.983 L756.039 689.983 L756.598 689.983 L757.157 689.983 L757.716 689.983 L758.276 689.983 L758.835 689.983 L759.394 689.983 L759.953 689.983 L760.513 689.983 L761.072 689.983 L761.631 689.983 L762.19 689.983 L762.75 689.983 L763.309 689.983 L763.868 689.983 L764.427 689.983 L764.987 689.983 L765.546 689.983 L766.105 689.983 L766.664 689.983 L767.224 689.983 L767.783 689.983 L768.342 689.983 L768.901 689.983 L769.461 689.983 L770.02 689.983 L770.579 689.983 L771.138 689.983 L771.698 689.983 L772.257 689.983 L772.816 689.983 L773.375 689.983 L773.935 689.983 L774.494 689.983 L775.053 689.983 L775.612 689.983 L776.172 689.983 L776.731 689.983 L777.29 689.983 L777.849 689.983 L778.409 689.983 L778.968 689.983 L779.527 689.983 L780.086 689.983 L780.646 689.983 L781.205 689.983 L781.764 689.983 L782.323 689.983 L782.883 689.983 L783.442 689.983 L784.001 689.983 L784.56 689.983 L785.12 689.983 L785.679 689.983 L786.238 689.983 L786.797 689.983 L787.357 689.983 L787.916 689.983 L788.475 689.983 L789.034 689.983 L789.594 689.983 L790.153 689.983 L790.712 689.983 L791.271 689.983 L791.831 689.983 L792.39 689.983 L792.949 689.983 L793.508 689.983 L794.068 689.983 L794.627 689.983 L795.186 689.983 L795.745 689.983 L796.305 689.983 L796.864 689.983 L797.423 689.983 L797.982 689.983 L798.542 689.983 L799.101 689.983 L799.66 689.983 L800.219 689.983 L800.779 689.983 L801.338 689.983 L801.897 689.983 L802.456 689.983 L803.016 689.983 L803.575 689.983 L804.134 689.983 L804.693 689.983 L805.253 689.983 L805.812 689.983 L806.371 689.983 L806.931 689.983 L807.49 689.983 L808.049 689.983 L808.608 689.983 L809.168 689.983 L809.727 689.983 L810.286 689.983 L810.845 689.983 L811.405 689.983 L811.964 689.983 L812.523 689.983 L813.082 689.983 L813.642 689.983 L814.201 689.983 L814.76 689.983 L815.319 689.983 L815.879 689.983 L816.438 689.983 L816.997 689.983 L817.556 689.983 L818.116 689.983 L818.675 689.983 L819.234 689.983 L819.793 689.983 L820.353 689.983 L820.912 689.983 L821.471 689.983 L822.03 689.983 L822.59 689.983 L823.149 689.983 L823.708 689.983 L824.267 689.983 L824.827 689.983 L825.386 689.983 L825.945 689.983 L826.504 689.983 L827.064 689.983 L827.623 689.983 L828.182 689.983 L828.741 689.983 L829.301 689.983 L829.86 689.983 L830.419 689.983 L830.978 689.983 L831.538 689.983 L832.097 689.983 L832.656 689.983 L833.215 689.983 L833.775 689.983 L834.334 689.983 L834.893 689.983 L835.452 689.983 L836.012 689.983 L836.571 689.983 L837.13 689.983 L837.689 689.983 L838.249 689.983 L838.808 689.983 L839.367 689.983 L839.926 689.983 L840.486 689.983 L841.045 689.983 L841.604 689.983 L842.163 689.983 L842.723 689.983 L843.282 689.983 L843.841 689.983 L844.4 689.983 L844.96 689.983 L845.519 689.983 L846.078 689.983 L846.637 689.983 L847.197 689.983 L847.756 689.983 L848.315 689.983 L848.874 689.983 L849.434 689.983 L849.993 689.983 L850.552 689.983 L851.111 689.983 L851.671 689.983 L852.23 689.983 L852.789 689.983 L853.348 689.983 L853.908 689.983 L854.467 689.983 L855.026 689.983 L855.585 689.983 L856.145 689.983 L856.704 689.983 L857.263 689.983 L857.822 689.983 L858.382 689.983 L858.941 689.983 L859.5 689.983 L860.059 689.983 L860.619 689.983 L861.178 689.983 L861.737 689.983 L862.296 689.983 L862.856 689.983 L863.415 689.983 L863.974 689.983 L864.533 689.983 L865.093 689.983 L865.652 689.983 L866.211 689.983 L866.77 689.983 L867.33 689.983 L867.889 689.983 L868.448 689.983 L869.007 689.983 L869.567 689.983 L870.126 689.983 L870.685 689.983 L871.244 689.983 L871.804 689.983 L872.363 689.983 L872.922 689.983 L873.481 689.983 L874.041 689.983 L874.6 689.983 L875.159 689.983 L875.718 689.983 L876.278 689.983 L876.837 689.983 L877.396 689.983 L877.955 689.983 L878.515 689.983 L879.074 689.983 L879.633 689.983 L880.192 689.983 L880.752 689.983 L881.311 689.983 L881.87 689.983 L882.429 689.983 L882.989 689.983 L883.548 689.983 L884.107 689.983 L884.666 689.983 L885.226 689.983 L885.785 689.983 L886.344 689.983 L886.903 689.983 L887.463 689.983 L888.022 689.983 L888.581 689.983 L889.14 689.983 L889.7 689.983 L890.259 689.983 L890.818 689.983 L891.377 689.983 L891.937 689.983 L892.496 689.983 L893.055 689.983 L893.614 689.983 L894.174 689.983 L894.733 689.983 L895.292 689.983 L895.851 689.983 L896.411 689.983 L896.97 689.983 L897.529 689.983 L898.088 689.983 L898.648 689.983 L899.207 689.983 L899.766 689.983 L900.325 689.983 L900.885 689.983 L901.444 689.983 L902.003 689.983 L902.562 689.983 L903.122 689.983 L903.681 689.983 L904.24 689.983 L904.799 689.983 L905.359 689.983 L905.918 689.983 L906.477 689.983 L907.036 689.983 L907.596 689.983 L908.155 689.983 L908.714 689.983 L909.273 689.983 L909.833 689.983 L910.392 689.983 L910.951 689.983 L911.51 689.983 L912.07 689.983 L912.629 689.983 L913.188 689.983 L913.747 689.983 L914.307 689.983 L914.866 689.983 L915.425 689.983 L915.984 689.983 L916.544 689.983 L917.103 689.983 L917.662 689.983 L918.221 689.983 L918.781 689.983 L919.34 689.983 L919.899 689.983 L920.458 689.983 L921.018 689.983 L921.577 689.983 L922.136 689.983 L922.695 689.983 L923.255 689.983 L923.814 689.983 L924.373 689.983 L924.932 689.983 L925.492 689.983 L926.051 689.983 L926.61 689.983 L927.169 689.983 L927.729 689.983 L928.288 689.983 L928.847 689.983 L929.406 689.983 L929.966 689.983 L930.525 689.983 L931.084 689.983 L931.644 689.983 L932.203 689.983 L932.762 689.983 L933.321 689.983 L933.881 689.983 L934.44 689.983 L934.999 689.983 L935.558 689.983 L936.118 689.983 L936.677 689.983 L937.236 689.983 L937.795 689.983 L938.355 689.983 L938.914 689.983 L939.473 689.983 L940.032 689.983 L940.592 689.983 L941.151 689.983 L941.71 689.983 L942.269 689.983 L942.829 689.983 L943.388 689.983 L943.947 689.983 L944.506 689.983 L945.066 689.983 L945.625 689.983 L946.184 689.983 L946.743 689.983 L947.303 689.983 L947.862 689.983 L948.421 689.983 L948.98 689.983 L949.54 689.983 L950.099 689.983 L950.658 689.983 L951.217 689.983 L951.777 689.983 L952.336 689.983 L952.895 689.983 L953.454 689.983 L954.014 689.983 L954.573 689.983 L955.132 689.983 L955.691 689.983 L956.251 689.983 L956.81 689.983 L957.369 689.983 L957.928 689.983 L958.488 689.983 L959.047 689.983 L959.606 689.983 L960.165 689.983 L960.725 689.983 L961.284 689.983 L961.843 689.983 L962.402 689.983 L962.962 689.983 L963.521 689.983 L964.08 689.983 L964.639 689.983 L965.199 689.983 L965.758 689.983 L966.317 689.983 L966.876 689.983 L967.436 689.983 L967.995 689.983 L968.554 689.983 L969.113 689.983 L969.673 689.983 L970.232 689.983 L970.791 689.983 L971.35 689.983 L971.91 689.983 L972.469 689.983 L973.028 689.983 L973.587 689.983 L974.147 689.983 L974.706 689.983 L975.265 689.983 L975.824 689.983 L976.384 689.983 L976.943 689.983 L977.502 689.983 L978.061 689.983 L978.621 689.983 L979.18 689.983 L979.739 689.983 L980.298 689.983 L980.858 689.983 L981.417 689.983 L981.976 689.983 L982.535 689.983 L983.095 689.983 L983.654 689.983 L984.213 689.983 L984.772 689.983 L985.332 689.983 L985.891 689.983 L986.45 689.983 L987.009 689.983 L987.569 689.983 L988.128 689.983 L988.687 689.983 L989.246 689.983 L989.806 689.983 L990.365 689.983 L990.924 689.983 L991.483 689.983 L992.043 689.983 L992.602 689.983 L993.161 689.983 L993.72 689.983 L994.28 689.983 L994.839 689.983 L995.398 689.983 L995.957 689.983 L996.517 689.983 L997.076 689.983 L997.635 689.983 L998.194 689.983 L998.754 689.983 L999.313 689.983 L999.872 689.983 L1000.43 689.983 L1000.99 689.983 L1001.55 689.983 L1002.11 689.983 L1002.67 689.983 L1003.23 689.983 L1003.79 689.983 L1004.35 689.983 L1004.91 689.983 L1005.46 689.983 L1006.02 689.983 L1006.58 689.983 L1007.14 689.983 L1007.7 689.983 L1008.26 689.983 L1008.82 689.983 L1009.38 689.983 L1009.94 689.983 L1010.5 689.983 L1011.06 689.983 L1011.62 689.983 L1012.18 689.983 L1012.73 689.983 L1013.29 689.983 L1013.85 689.983 L1014.41 689.983 L1014.97 689.983 L1015.53 689.983 L1016.09 689.983 L1016.65 689.983 L1017.21 689.983 L1017.77 689.983 L1018.33 689.983 L1018.89 689.983 L1019.45 689.983 L1020.01 689.983 L1020.56 689.983 L1021.12 689.983 L1021.68 689.983 L1022.24 689.983 L1022.8 689.983 L1023.36 689.983 L1023.92 689.983 L1024.48 689.983 L1025.04 689.983 L1025.6 689.983 L1026.16 689.983 L1026.72 689.983 L1027.28 689.983 L1027.83 689.983 L1028.39 689.983 L1028.95 689.983 L1029.51 689.983 L1030.07 689.983 L1030.63 689.983 L1031.19 689.983 L1031.75 689.983 L1032.31 689.983 L1032.87 689.983 L1033.43 689.983 L1033.99 689.983 L1034.55 689.983 L1035.1 689.983 L1035.66 689.983 L1036.22 689.983 L1036.78 689.983 L1037.34 689.983 L1037.9 689.983 L1038.46 689.983 L1039.02 689.983 L1039.58 689.983 L1040.14 689.983 L1040.7 689.983 L1041.26 689.983 L1041.82 689.983 L1042.38 689.983 L1042.93 689.983 L1043.49 689.983 L1044.05 689.983 L1044.61 689.983 L1045.17 689.983 L1045.73 689.983 L1046.29 689.983 L1046.85 689.983 L1047.41 689.983 L1047.97 689.983 L1048.53 689.983 L1049.09 689.983 L1049.65 689.983 L1050.2 689.983 L1050.76 689.983 L1051.32 689.983 L1051.88 689.983 L1052.44 689.983 L1053 689.983 L1053.56 689.983 L1054.12 689.983 L1054.68 689.983 L1055.24 689.983 L1055.8 689.983 L1056.36 689.983 L1056.92 689.983 L1057.48 689.983 L1058.03 689.983 L1058.59 689.983 L1059.15 689.983 L1059.71 689.983 L1060.27 689.983 L1060.83 689.983 L1061.39 689.983 L1061.95 689.983 L1062.51 689.983 L1063.07 689.983 L1063.63 689.983 L1064.19 689.983 L1064.75 689.983 L1065.3 689.983 L1065.86 689.983 L1066.42 689.983 L1066.98 689.983 L1067.54 689.983 L1068.1 689.983 L1068.66 689.983 L1069.22 689.983 L1069.78 689.983 L1070.34 689.983 L1070.9 689.983 L1071.46 689.983 L1072.02 689.983 L1072.57 689.983 L1073.13 689.983 L1073.69 689.983 L1074.25 689.983 L1074.81 689.983 L1075.37 689.983 L1075.93 689.983 L1076.49 689.983 L1077.05 689.983 L1077.61 689.983 L1078.17 689.983 L1078.73 689.983 L1079.29 689.983 L1079.85 689.983 L1080.4 689.983 L1080.96 689.983 L1081.52 689.983 L1082.08 689.983 L1082.64 689.983 L1083.2 689.983 L1083.76 689.983 L1084.32 689.983 L1084.88 689.983 L1085.44 689.983 L1086 689.983 L1086.56 689.983 L1087.12 689.983 L1087.67 689.983 L1088.23 689.983 L1088.79 689.983 L1089.35 689.983 L1089.91 689.983 L1090.47 689.983 L1091.03 689.983 L1091.59 689.983 L1092.15 689.983 L1092.71 689.983 L1093.27 689.983 L1093.83 689.983 L1094.39 689.983 L1094.94 689.983 L1095.5 689.983 L1096.06 689.983 L1096.62 689.983 L1097.18 689.983 L1097.74 689.983 L1098.3 689.983 L1098.86 689.983 L1099.42 689.983 L1099.98 689.983 L1100.54 689.983 L1101.1 689.983 L1101.66 689.983 L1102.22 689.983 L1102.77 689.983 L1103.33 689.983 L1103.89 689.983 L1104.45 689.983 L1105.01 689.983 L1105.57 689.983 L1106.13 689.983 L1106.69 689.983 L1107.25 689.983 L1107.81 689.983 L1108.37 689.983 L1108.93 689.983 L1109.49 689.983 L1110.04 689.983 L1110.6 689.983 L1111.16 689.983 L1111.72 689.983 L1112.28 689.983 L1112.84 689.983 L1113.4 689.983 L1113.96 689.983 L1114.52 689.983 L1115.08 689.983 L1115.64 689.983 L1116.2 689.983 L1116.76 689.983 L1117.31 689.983 L1117.87 689.983 L1118.43 689.983 L1118.99 689.983 L1119.55 689.983 L1120.11 689.983 L1120.67 689.983 L1121.23 689.983 L1121.79 689.983 L1122.35 689.983 L1122.91 689.983 L1123.47 689.983 L1124.03 689.983 L1124.59 689.983 L1125.14 689.983 L1125.7 689.983 L1126.26 689.983 L1126.82 689.983 L1127.38 689.983 L1127.94 689.983 L1128.5 689.983 L1129.06 689.983 L1129.62 689.983 L1130.18 689.983 L1130.74 689.983 L1131.3 689.983 L1131.86 689.983 L1132.41 689.983 L1132.97 689.983 L1133.53 689.983 L1134.09 689.983 L1134.65 689.983 L1135.21 689.983 L1135.77 689.983 L1136.33 689.983 L1136.89 689.983 L1137.45 689.983 L1138.01 689.983 L1138.57 689.983 L1139.13 689.983 L1139.68 689.983 L1140.24 689.983 L1140.8 689.983 L1141.36 689.983 L1141.92 689.983 L1142.48 689.983 L1143.04 689.983 L1143.6 689.983 L1144.16 689.983 L1144.72 689.983 L1145.28 689.983 L1145.84 689.983 L1146.4 689.983 L1146.96 689.983 L1147.51 689.983 L1148.07 689.983 L1148.63 689.983 L1149.19 689.983 L1149.75 689.983 L1150.31 689.983 L1150.87 689.983 L1151.43 689.983 L1151.99 689.983 L1152.55 689.983 L1153.11 689.983 L1153.67 689.983 L1154.23 689.983 L1154.78 689.983 L1155.34 689.983 L1155.9 689.983 L1156.46 689.983 L1157.02 689.983 L1157.58 689.983 L1158.14 689.983 L1158.7 689.983 L1159.26 689.983 L1159.82 689.983 L1160.38 689.983 L1160.94 689.983 L1161.5 689.983 L1162.05 689.983 L1162.61 689.983 L1163.17 689.983 L1163.73 689.983 L1164.29 689.983 L1164.85 689.983 L1165.41 689.983 L1165.97 689.983 L1166.53 689.983 L1167.09 689.983 L1167.65 689.983 L1168.21 689.983 L1168.77 689.983 L1169.33 689.983 L1169.88 689.983 L1170.44 689.983 L1171 689.983 L1171.56 689.983 L1172.12 689.983 L1172.68 689.983 L1173.24 689.983 L1173.8 689.983 L1174.36 689.983 L1174.92 689.983 L1175.48 689.983 L1176.04 689.983 L1176.6 689.983 L1177.15 689.983 L1177.71 689.983 L1178.27 689.983 L1178.83 689.983 L1179.39 689.983 L1179.95 689.983 L1180.51 689.983 L1181.07 689.983 L1181.63 689.983 L1182.19 689.983 L1182.75 689.983 L1183.31 689.983 L1183.87 689.983 L1184.43 689.983 L1184.98 689.983 L1185.54 689.983 L1186.1 689.983 L1186.66 689.983 L1187.22 689.983 L1187.78 689.983 L1188.34 689.983 L1188.9 689.983 L1189.46 689.983 L1190.02 689.983 L1190.58 689.983 L1191.14 689.983 L1191.7 689.983 L1192.25 689.983 L1192.81 689.983 L1193.37 689.983 L1193.93 689.983 L1194.49 689.983 L1195.05 689.983 L1195.61 689.983 L1196.17 689.983 L1196.73 689.983 L1197.29 689.983 L1197.85 689.983 L1198.41 689.983 L1198.97 689.983 L1199.52 689.983 L1200.08 689.983 L1200.64 689.983 L1201.2 689.983 L1201.76 689.983 L1202.32 689.983 L1202.88 689.983 L1203.44 689.983 L1204 689.983 L1204.56 689.983 L1205.12 689.983 L1205.68 689.983 L1206.24 689.983 L1206.8 689.983 L1207.35 689.983 L1207.91 689.983 L1208.47 689.983 L1209.03 689.983 L1209.59 689.983 L1210.15 689.983 L1210.71 689.983 L1211.27 689.983 L1211.83 689.983 L1212.39 689.983 L1212.95 689.983 L1213.51 689.983 L1214.07 689.983 L1214.62 689.983 L1215.18 689.983 L1215.74 689.983 L1216.3 689.983 L1216.86 689.983 L1217.42 689.983 L1217.98 689.983 L1218.54 689.983 L1219.1 689.983 L1219.66 689.983 L1220.22 689.983 L1220.78 689.983 L1221.34 689.983 L1221.89 689.983 L1222.45 689.983 L1223.01 689.983 L1223.57 689.983 L1224.13 689.983 L1224.69 689.983 L1225.25 689.983 L1225.81 689.983 L1226.37 689.983 L1226.93 689.983 L1227.49 689.983 L1228.05 689.983 L1228.61 689.983 L1229.17 689.983 L1229.72 689.983 L1230.28 689.983 L1230.84 689.983 L1231.4 689.983 L1231.96 689.983 L1232.52 689.983 L1233.08 689.983 L1233.64 689.983 L1234.2 689.983 L1234.76 689.983 L1235.32 689.983 L1235.88 689.983 L1236.44 689.983 L1236.99 689.983 L1237.55 689.983 L1238.11 689.983 L1238.67 689.983 L1239.23 689.983 L1239.79 689.983 L1240.35 689.983 L1240.91 689.983 L1241.47 689.983 L1242.03 689.983 L1242.59 689.983 L1243.15 689.983 L1243.71 689.983 L1244.26 689.983 L1244.82 689.983 L1245.38 689.983 L1245.94 689.983 L1246.5 689.983 L1247.06 689.983 L1247.62 689.983 L1248.18 689.983 L1248.74 689.983 L1249.3 689.983 L1249.86 689.983 L1250.42 689.983 L1250.98 689.983 L1251.54 689.983 L1252.09 689.983 L1252.65 689.983 L1253.21 689.983 L1253.77 689.983 L1254.33 689.983 L1254.89 689.983 L1255.45 689.983 L1256.01 689.983 L1256.57 689.983 L1257.13 689.983 L1257.69 689.983 L1258.25 689.983 L1258.81 689.983 L1259.36 689.983 L1259.92 689.983 L1260.48 689.983 L1261.04 689.983 L1261.6 689.983 L1262.16 689.983 L1262.72 689.983 L1263.28 689.983 L1263.84 689.983 L1264.4 689.983 L1264.96 689.983 L1265.52 689.983 L1266.08 689.983 L1266.63 689.983 L1267.19 689.983 L1267.75 689.983 L1268.31 689.983 L1268.87 689.983 L1269.43 689.983 L1269.99 689.983 L1270.55 689.983 L1271.11 689.983 L1271.67 689.983 L1272.23 689.983 L1272.79 689.983 L1273.35 689.983 L1273.91 689.983 L1274.46 689.983 L1275.02 689.983 L1275.58 689.983 L1276.14 689.983 L1276.7 689.983 L1277.26 689.983 L1277.82 689.983 L1278.38 689.983 L1278.94 689.983 L1279.5 689.983 L1280.06 689.983 L1280.62 689.983 L1281.18 689.983 L1281.73 689.983 L1282.29 689.983 L1282.85 689.983 L1283.41 689.983 L1283.97 689.983 L1284.53 689.983 L1285.09 689.983 L1285.65 689.983 L1286.21 689.983 L1286.77 689.983 L1287.33 689.983 L1287.89 689.983 L1288.45 689.983 L1289 689.983 L1289.56 689.983 L1290.12 689.983 L1290.68 689.983 L1291.24 689.983 L1291.8 689.983 L1292.36 689.983 L1292.92 689.983 L1293.48 689.983 L1294.04 689.983 L1294.6 689.983 L1295.16 689.983 L1295.72 689.983 L1296.28 689.983 L1296.83 689.983 L1297.39 689.983 L1297.95 689.983 L1298.51 689.983 L1299.07 689.983 L1299.63 689.983 L1300.19 689.983 L1300.75 689.983 L1301.31 689.983 L1301.87 689.983 L1302.43 689.983 L1302.99 689.983 L1303.55 689.983 L1304.1 689.983 L1304.66 689.983 L1305.22 689.983 L1305.78 689.983 L1306.34 689.983 L1306.9 689.983 L1307.46 689.983 L1308.02 689.983 L1308.58 689.983 L1309.14 689.983 L1309.7 689.983 L1310.26 689.983 L1310.82 689.983 L1311.38 689.983 L1311.93 689.983 L1312.49 689.983 L1313.05 689.983 L1313.61 689.983 L1314.17 689.983 L1314.73 689.983 L1315.29 689.983 L1315.85 689.983 L1316.41 689.983 L1316.97 689.983 L1317.53 689.983 L1318.09 689.983 L1318.65 689.983 L1319.2 689.983 L1319.76 689.983 L1320.32 689.983 L1320.88 689.983 L1321.44 689.983 L1322 689.983 L1322.56 689.983 L1323.12 689.983 L1323.68 689.983 L1324.24 689.983 L1324.8 689.983 L1325.36 689.983 L1325.92 689.983 L1326.47 689.983 L1327.03 689.983 L1327.59 689.983 L1328.15 689.983 L1328.71 689.983 L1329.27 689.983 L1329.83 689.983 L1330.39 689.983 L1330.95 689.983 L1331.51 689.983 L1332.07 689.983 L1332.63 689.983 L1333.19 689.983 L1333.75 689.983 L1334.3 689.983 L1334.86 689.983 L1335.42 689.983 L1335.98 689.983 L1336.54 689.983 L1337.1 689.983 L1337.66 689.983 L1338.22 689.983 L1338.78 689.983 L1339.34 689.983 L1339.9 689.983 L1340.46 689.983 L1341.02 689.983 L1341.57 689.983 L1342.13 689.983 L1342.69 689.983 L1343.25 689.983 L1343.81 689.983 L1344.37 689.983 L1344.93 689.983 L1345.49 689.983 L1346.05 689.983 L1346.61 689.983 L1347.17 689.983 L1347.73 689.983 L1348.29 689.983 L1348.84 689.983 L1349.4 689.983 L1349.96 689.983 L1350.52 689.983 L1351.08 689.983 L1351.64 689.983 L1352.2 689.983 L1352.76 689.983 L1353.32 689.983 L1353.88 689.983 L1354.44 689.983 L1355 689.983 L1355.56 689.983 L1356.12 689.983 L1356.67 689.983 L1357.23 689.983 L1357.79 689.983 L1358.35 689.983 L1358.91 689.983 L1359.47 689.983 L1360.03 689.983 L1360.59 689.983 L1361.15 689.983 L1361.71 689.983 L1362.27 689.983 L1362.83 689.983 L1363.39 689.983 L1363.94 689.983 L1364.5 689.983 L1365.06 689.983 L1365.62 689.983 L1366.18 689.983 L1366.74 689.983 L1367.3 689.983 L1367.86 689.983 L1368.42 689.983 L1368.98 689.983 L1369.54 689.983 L1370.1 689.983 L1370.66 689.983 L1371.21 689.983 L1371.77 689.983 L1372.33 689.983 L1372.89 689.983 L1373.45 689.983 L1374.01 689.983 L1374.57 689.983 L1375.13 689.983 L1375.69 689.983 L1376.25 689.983 L1376.81 689.983 L1377.37 689.983 L1377.93 689.983 L1378.49 689.983 L1379.04 689.983 L1379.6 689.983 L1380.16 689.983 L1380.72 689.983 L1381.28 689.983 L1381.84 689.983 L1382.4 689.983 L1382.96 689.983 L1383.52 689.983 L1384.08 689.983 L1384.64 689.983 L1385.2 689.983 L1385.76 689.983 L1386.31 689.983 L1386.87 689.983 L1387.43 689.983 L1387.99 689.983 L1388.55 689.983 L1389.11 689.983 L1389.67 689.983 L1390.23 689.983 L1390.79 689.983 L1391.35 689.983 L1391.91 689.983 L1392.47 689.983 L1393.03 689.983 L1393.58 689.983 L1394.14 689.983 L1394.7 689.983 L1395.26 689.983 L1395.82 689.983 L1396.38 689.983 L1396.94 689.983 L1397.5 689.983 L1398.06 689.983 L1398.62 689.983 L1399.18 689.983 L1399.74 689.983 L1400.3 689.983 L1400.86 689.983 L1401.41 689.983 L1401.97 689.983 L1402.53 689.983 L1403.09 689.983 L1403.65 689.983 L1404.21 689.983 L1404.77 689.983 L1405.33 689.983 L1405.89 689.983 L1406.45 689.983 L1407.01 689.983 L1407.57 689.983 L1408.13 689.983 L1408.68 689.983 L1409.24 689.983 L1409.8 689.983 L1410.36 689.983 L1410.92 689.983 L1411.48 689.983 L1412.04 689.983 L1412.6 689.983 L1413.16 689.983 L1413.72 689.983 L1414.28 689.983 L1414.84 689.983 L1415.4 689.983 L1415.95 689.983 L1416.51 689.983 L1417.07 689.983 L1417.63 689.983 L1418.19 689.983 L1418.75 689.983 L1419.31 689.983 L1419.87 689.983 L1420.43 689.983 L1420.99 689.983 L1421.55 689.983 L1422.11 689.983 L1422.67 689.983 L1423.23 689.983 L1423.78 689.983 L1424.34 689.983 L1424.9 689.983 L1425.46 689.983 L1426.02 689.983 L1426.58 689.983 L1427.14 689.983 L1427.7 689.983 L1428.26 689.983 L1428.82 689.983 L1429.38 689.983 L1429.94 689.983 L1430.5 689.983 L1431.05 689.983 L1431.61 689.983 L1432.17 689.983 L1432.73 689.983 L1433.29 689.983 L1433.85 689.983 L1434.41 689.983 L1434.97 689.983 L1435.53 689.983 L1436.09 689.983 L1436.65 689.983 L1437.21 689.983 L1437.77 689.983 L1438.33 689.983 L1438.88 689.983 L1439.44 689.983 L1440 689.983 L1440.56 689.983 L1441.12 689.983 L1441.68 689.983 L1442.24 689.983 L1442.8 689.983 L1443.36 689.983 L1443.92 689.983 L1444.48 689.983 L1445.04 689.983 L1445.6 689.983 L1446.15 689.983 L1446.71 689.983 L1447.27 689.983 L1447.83 689.983 L1448.39 689.983 L1448.95 689.983 L1449.51 689.983 L1450.07 689.983 L1450.63 689.983 L1451.19 689.983 L1451.75 689.983 L1452.31 689.983 L1452.87 689.983 L1453.42 689.983 L1453.98 689.983 L1454.54 689.983 L1455.1 689.983 L1455.66 689.983 L1456.22 689.983 L1456.78 689.983 L1457.34 689.983 L1457.9 689.983 L1458.46 689.983 L1459.02 689.983 L1459.58 689.983 L1460.14 689.983 L1460.7 689.983 L1461.25 689.983 L1461.81 689.983 L1462.37 689.983 L1462.93 689.983 L1463.49 689.983 L1464.05 689.983 L1464.61 689.983 L1465.17 689.983 L1465.73 689.983 L1466.29 689.983 L1466.85 689.983 L1467.41 689.983 L1467.97 689.983 L1468.52 689.983 L1469.08 689.983 L1469.64 689.983 L1470.2 689.983 L1470.76 689.983 L1471.32 689.983 L1471.88 689.983 L1472.44 689.983 L1473 689.983 L1473.56 689.983 L1474.12 689.983 L1474.68 689.983 L1475.24 689.983 L1475.79 689.983 L1476.35 689.983 L1476.91 689.983 L1477.47 689.983 L1478.03 689.983 L1478.59 689.983 L1479.15 689.983 L1479.71 689.983 L1480.27 689.983 L1480.83 689.983 L1481.39 689.983 L1481.95 689.983 L1482.51 689.983 L1483.07 689.983 L1483.62 689.983 L1484.18 689.983 L1484.74 689.983 L1485.3 689.983 L1485.86 689.983 L1486.42 689.983 L1486.98 689.983 L1487.54 689.983 L1488.1 689.983 L1488.66 689.983 L1489.22 689.983 L1489.78 689.983 L1490.34 689.983 L1490.89 689.983 L1491.45 689.983 L1492.01 689.983 L1492.57 689.983 L1493.13 689.983 L1493.69 689.983 L1494.25 689.983 L1494.81 689.983 L1495.37 689.983 L1495.93 689.983 L1496.49 689.983 L1497.05 689.983 L1497.61 689.983 L1498.16 689.983 L1498.72 689.983 L1499.28 689.983 L1499.84 689.983 L1500.4 689.983 L1500.96 689.983 L1501.52 689.983 L1502.08 689.983 L1502.64 689.983 L1503.2 689.983 L1503.76 689.983 L1504.32 689.983 L1504.88 689.983 L1505.44 689.983 L1505.99 689.983 L1506.55 689.983 L1507.11 689.983 L1507.67 689.983 L1508.23 689.983 L1508.79 689.983 L1509.35 689.983 L1509.91 689.983 L1510.47 689.983 L1511.03 689.983 L1511.59 689.983 L1512.15 689.983 L1512.71 689.983 L1513.26 689.983 L1513.82 689.983 L1514.38 689.983 L1514.94 689.983 L1515.5 689.983 L1516.06 689.983 L1516.62 689.983 L1517.18 689.983 L1517.74 689.983 L1518.3 689.983 L1518.86 689.983 L1519.42 689.983 L1519.98 689.983 L1520.53 689.983 L1521.09 689.983 L1521.65 689.983 L1522.21 689.983 L1522.77 689.983 L1523.33 689.983 L1523.89 689.983 L1524.45 689.983 L1525.01 689.983 L1525.57 689.983 L1526.13 689.983 L1526.69 689.983 L1527.25 689.983 L1527.81 689.983 L1528.36 689.983 L1528.92 689.983 L1529.48 689.983 L1530.04 689.983 L1530.6 689.983 L1531.16 689.983 L1531.72 689.983 L1532.28 689.983 L1532.84 689.983 L1533.4 689.983 L1533.96 689.983 L1534.52 689.983 L1535.08 689.983 L1535.63 689.983 L1536.19 689.983 L1536.75 689.983 L1537.31 689.983 L1537.87 689.983 L1538.43 689.983 L1538.99 689.983 L1539.55 689.983 L1540.11 689.983 L1540.67 689.983 L1541.23 689.983 L1541.79 689.983 L1542.35 689.983 L1542.9 689.983 L1543.46 689.983 L1544.02 689.983 L1544.58 689.983 L1545.14 689.983 L1545.7 689.983 L1546.26 689.983 L1546.82 689.983 L1547.38 689.983 L1547.94 689.983 L1548.5 689.983 L1549.06 689.983 L1549.62 689.983 L1550.18 689.983 L1550.73 689.983 L1551.29 689.983 L1551.85 689.983 L1552.41 689.983 L1552.97 689.983 L1553.53 689.983 L1554.09 689.983 L1554.65 689.983 L1555.21 689.983 L1555.77 689.983 L1556.33 689.983 L1556.89 689.983 L1557.45 689.983 L1558 689.983 L1558.56 689.983 L1559.12 689.983 L1559.68 689.983 L1560.24 689.983 L1560.8 689.983 L1561.36 689.983 L1561.92 689.983 L1562.48 689.983 L1563.04 689.983 L1563.6 689.983 L1564.16 689.983 L1564.72 689.983 L1565.28 689.983 L1565.83 689.983 L1566.39 689.983 L1566.95 689.983 L1567.51 689.983 L1568.07 689.983 L1568.63 689.983 L1569.19 689.983 L1569.75 689.983 L1570.31 689.983 L1570.87 689.983 L1571.43 689.983 L1571.99 689.983 L1572.55 689.983 L1573.1 689.983 L1573.66 689.983 L1574.22 689.983 L1574.78 689.983 L1575.34 689.983 L1575.9 689.983 L1576.46 689.983 L1577.02 689.983 L1577.58 689.983 L1578.14 689.983 L1578.7 689.983 L1579.26 689.983 L1579.82 689.983 L1580.37 689.983 L1580.93 689.983 L1581.49 689.983 L1582.05 689.983 L1582.61 689.983 L1583.17 689.983 L1583.73 689.983 L1584.29 689.983 L1584.85 689.983 L1585.41 689.983 L1585.97 689.983 L1586.53 689.983 L1587.09 689.983 L1587.65 689.983 L1588.2 689.983 L1588.76 689.983 L1589.32 689.983 L1589.88 689.983 L1590.44 689.983 L1591 689.983 L1591.56 689.983 L1592.12 689.983 L1592.68 689.983 L1593.24 689.983 L1593.8 689.983 L1594.36 689.983 L1594.92 689.983 L1595.47 689.983 L1596.03 689.983 L1596.59 689.983 L1597.15 689.983 L1597.71 689.983 L1598.27 689.983 L1598.83 689.983 L1599.39 689.983 L1599.95 689.983 L1600.51 689.983 L1601.07 689.983 L1601.63 689.983 L1602.19 689.983 L1602.74 689.983 L1603.3 689.983 L1603.86 689.983 L1604.42 689.983 L1604.98 689.983 L1605.54 689.983 L1606.1 689.983 L1606.66 689.983 L1607.22 689.983 L1607.78 689.983 L1608.34 689.983 L1608.9 689.983 L1609.46 689.983 L1610.02 689.983 L1610.57 689.983 L1611.13 689.983 L1611.69 689.983 L1612.25 689.983 L1612.81 689.983 L1613.37 689.983 L1613.93 689.983 L1614.49 689.983 L1615.05 689.983 L1615.61 689.983 L1616.17 689.983 L1616.73 689.983 L1617.29 689.983 L1617.84 689.983 L1618.4 689.983 L1618.96 689.983 L1619.52 689.983 L1620.08 689.983 L1620.64 689.983 L1621.2 689.983 L1621.76 689.983 L1622.32 689.983 L1622.88 689.983 L1623.44 689.983 L1624 689.983 L1624.56 689.983 L1625.11 689.983 L1625.67 689.983 L1626.23 689.983 L1626.79 689.983 L1627.35 689.983 L1627.91 689.983 L1628.47 689.983 L1629.03 689.983 L1629.59 689.983 L1630.15 689.983 L1630.71 689.983 L1631.27 689.983 L1631.83 689.983 L1632.39 689.983 L1632.94 689.983 L1633.5 689.983 L1634.06 689.983 L1634.62 689.983 L1635.18 689.983 L1635.74 689.983 L1636.3 689.983 L1636.86 689.983 L1637.42 689.983 L1637.98 689.983 L1638.54 689.983 L1639.1 689.983 L1639.66 689.983 L1640.21 689.983 L1640.77 689.983 L1641.33 689.983 L1641.89 689.983 L1642.45 689.983 L1643.01 689.983 L1643.57 689.983 L1644.13 689.983 L1644.69 689.983 L1645.25 689.983 L1645.81 689.983 L1646.37 689.983 L1646.93 689.983 L1647.48 689.983 L1648.04 689.983 L1648.6 689.983 L1649.16 689.983 L1649.72 689.983 L1650.28 689.983 L1650.84 689.983 L1651.4 689.983 L1651.96 689.983 L1652.52 689.983 L1653.08 689.983 L1653.64 689.983 L1654.2 689.983 L1654.76 689.983 L1655.31 689.983 L1655.87 689.983 L1656.43 689.983 L1656.99 689.983 L1657.55 689.983 L1658.11 689.983 L1658.67 689.983 L1659.23 689.983 L1659.79 689.983 L1660.35 689.983 L1660.91 689.983 L1661.47 689.983 L1662.03 689.983 L1662.58 689.983 L1663.14 689.983 L1663.7 689.983 L1664.26 689.983 L1664.82 689.983 L1665.38 689.983 L1665.94 689.983 L1666.5 689.983 L1667.06 689.983 L1667.62 689.983 L1668.18 689.983 L1668.74 689.983 L1669.3 689.983 L1669.85 689.983 L1670.41 689.983 L1670.97 689.983 L1671.53 689.983 L1672.09 689.983 L1672.65 689.983 L1673.21 689.983 L1673.77 689.983 L1674.33 689.983 L1674.89 689.983 L1675.45 689.983 L1676.01 689.983 L1676.57 689.983 L1677.13 689.983 L1677.68 689.983 L1678.24 689.983 L1678.8 689.983 L1679.36 689.983 L1679.92 689.983 L1680.48 689.983 L1681.04 689.983 L1681.6 689.983 L1682.16 689.983 L1682.72 689.983 L1683.28 689.983 L1683.84 689.983 L1684.4 689.983 L1684.95 689.983 L1685.51 689.983 L1686.07 689.983 L1686.63 689.983 L1687.19 689.983 L1687.75 689.983 L1688.31 689.983 L1688.87 689.983 L1689.43 689.983 L1689.99 689.983 L1690.55 689.983 L1691.11 689.983 L1691.67 689.983 L1692.23 689.983 L1692.78 689.983 L1693.34 689.983 L1693.9 689.983 L1694.46 689.983 L1695.02 689.983 L1695.58 689.983 L1696.14 689.983 L1696.7 689.983 L1697.26 689.983 L1697.82 689.983 L1698.38 689.983 L1698.94 689.983 L1699.5 689.983 L1700.05 689.983 L1700.61 689.983 L1701.17 689.983 L1701.73 689.983 L1702.29 689.983 L1702.85 689.983 L1703.41 689.983 L1703.97 689.983 L1704.53 689.983 L1705.09 689.983 L1705.65 689.983 L1706.21 689.983 L1706.77 689.983 L1707.32 689.983 L1707.88 689.983 L1708.44 689.983 L1709 689.983 L1709.56 689.983 L1710.12 689.983 L1710.68 689.983 L1711.24 689.983 L1711.8 689.983 L1712.36 689.983 L1712.92 689.983 L1713.48 689.983 L1714.04 689.983 L1714.6 689.983 L1715.15 689.983 L1715.71 689.983 L1716.27 689.983 L1716.83 689.983 L1717.39 689.983 L1717.95 689.983 L1718.51 689.983 L1719.07 689.983 L1719.63 689.983 L1720.19 689.983 L1720.75 689.983 L1721.31 689.983 L1721.87 689.983 L1722.42 689.983 L1722.98 689.983 L1723.54 689.983 L1724.1 689.983 L1724.66 689.983 L1725.22 689.983 L1725.78 689.983 L1726.34 689.983 L1726.9 689.983 L1727.46 689.983 L1728.02 689.983 L1728.58 689.983 L1729.14 689.983 L1729.69 689.983 L1730.25 689.983 L1730.81 689.983 L1731.37 689.983 L1731.93 689.983 L1732.49 689.983 L1733.05 689.983 L1733.61 689.983 L1734.17 689.983 L1734.73 689.983 L1735.29 689.983 L1735.85 689.983 L1736.41 689.983 L1736.97 689.983 L1737.52 689.983 L1738.08 689.983 L1738.64 689.983 L1739.2 689.983 L1739.76 689.983 L1740.32 689.983 L1740.88 689.983 L1741.44 689.983 L1742 689.983 L1742.56 689.983 L1743.12 689.983 L1743.68 689.983 L1744.24 689.983 L1744.79 689.983 L1745.35 689.983 L1745.91 689.983 L1746.47 689.983 L1747.03 689.983 L1747.59 689.983 L1748.15 689.983 L1748.71 689.983 L1749.27 689.983 L1749.83 689.983 L1750.39 689.983 L1750.95 689.983 L1751.51 689.983 L1752.06 689.983 L1752.62 689.983 L1753.18 689.983 L1753.74 689.983 L1754.3 689.983 L1754.86 689.983 L1755.42 689.983 L1755.98 689.983 L1756.54 689.983 L1757.1 689.983 L1757.66 689.983 L1758.22 689.983 L1758.78 689.983 L1759.34 689.983 L1759.89 689.983 L1760.45 689.983 L1761.01 689.983 L1761.57 689.983 L1762.13 689.983 L1762.69 689.983 L1763.25 689.983 L1763.81 689.983 L1764.37 689.983 L1764.93 689.983 L1765.49 689.983 L1766.05 689.983 L1766.61 689.983 L1767.16 689.983 L1767.72 689.983 L1768.28 689.983 L1768.84 689.983 L1769.4 689.983 L1769.96 689.983 L1770.52 689.983 L1771.08 689.983 L1771.64 689.983 L1772.2 689.983 L1772.76 689.983 L1773.32 689.983 L1773.88 689.983 L1774.43 689.983 L1774.99 689.983 L1775.55 689.983 L1776.11 689.983 L1776.67 689.983 L1777.23 689.983 L1777.79 689.983 L1778.35 689.983 L1778.91 689.983 L1779.47 689.983 L1780.03 689.983 L1780.59 689.983 L1781.15 689.983 L1781.71 689.983 L1782.26 689.983 L1782.82 689.983 L1783.38 689.983 L1783.94 689.983 L1784.5 689.983 L1785.06 689.983 L1785.62 689.983 L1786.18 689.983 L1786.74 689.983 L1787.3 689.983 L1787.86 689.983 L1788.42 689.983 L1788.98 689.983 L1789.53 689.983 L1790.09 689.983 L1790.65 689.983 L1791.21 689.983 L1791.77 689.983 L1792.33 689.983 L1792.89 689.983 L1793.45 689.983 L1794.01 689.983 L1794.57 689.983 L1795.13 689.983 L1795.69 689.983 L1796.25 689.983 L1796.8 689.983 L1797.36 689.983 L1797.92 689.983 L1798.48 689.983 L1799.04 689.983 L1799.6 689.983 L1800.16 689.983 L1800.72 689.983 L1801.28 689.983 L1801.84 689.983 L1802.4 689.983 L1802.96 689.983 L1803.52 689.983 L1804.08 689.983 L1804.63 689.983 L1805.19 689.983 L1805.75 689.983 L1806.31 689.983 L1806.87 689.983 L1807.43 689.983 L1807.99 689.983 L1808.55 689.983 L1809.11 689.983 L1809.67 689.983 L1810.23 689.983 L1810.79 689.983 L1811.35 689.983 L1811.9 689.983 L1812.46 689.983 L1813.02 689.983 L1813.58 689.983 L1814.14 689.983 L1814.7 689.983 L1815.26 689.983 L1815.82 689.983 L1816.38 689.983 L1816.94 689.983 L1817.5 689.983 L1818.06 689.983 L1818.62 689.983 L1819.18 689.983 L1819.73 689.983 L1820.29 689.983 L1820.85 689.983 L1821.41 689.983 L1821.97 689.983 L1822.53 689.983 L1823.09 689.983 L1823.65 689.983 L1824.21 689.983 L1824.77 689.983 L1825.33 689.983 L1825.89 689.983 L1826.45 689.983 L1827 689.983 L1827.56 689.983 L1828.12 689.983 L1828.68 689.983 L1829.24 689.983 L1829.8 689.983 L1830.36 689.983 L1830.92 689.983 L1831.48 689.983 L1832.04 689.983 L1832.6 689.983 L1833.16 689.983 L1833.72 689.983 L1834.27 689.983 L1834.83 689.983 L1835.39 689.983 L1835.95 689.983 L1836.51 689.983 L1837.07 689.983 L1837.63 689.983 L1838.19 689.983 L1838.19 680.791 L1837.63 680.791 L1837.07 680.791 L1836.51 680.791 L1835.95 680.791 L1835.39 680.791 L1834.83 680.791 L1834.27 680.791 L1833.72 680.791 L1833.16 680.791 L1832.6 680.791 L1832.04 680.791 L1831.48 680.791 L1830.92 680.791 L1830.36 680.791 L1829.8 680.791 L1829.24 680.791 L1828.68 680.791 L1828.12 680.791 L1827.56 680.791 L1827 680.791 L1826.45 680.791 L1825.89 680.791 L1825.33 680.791 L1824.77 680.791 L1824.21 680.791 L1823.65 680.791 L1823.09 680.791 L1822.53 680.791 L1821.97 680.791 L1821.41 680.791 L1820.85 680.791 L1820.29 680.791 L1819.73 680.791 L1819.18 680.791 L1818.62 680.791 L1818.06 680.791 L1817.5 680.791 L1816.94 680.791 L1816.38 680.791 L1815.82 680.791 L1815.26 680.791 L1814.7 680.791 L1814.14 680.791 L1813.58 680.791 L1813.02 680.791 L1812.46 680.791 L1811.9 680.791 L1811.35 680.791 L1810.79 680.791 L1810.23 680.791 L1809.67 680.791 L1809.11 680.791 L1808.55 680.791 L1807.99 680.791 L1807.43 680.791 L1806.87 680.791 L1806.31 680.791 L1805.75 680.791 L1805.19 680.791 L1804.63 680.791 L1804.08 680.791 L1803.52 680.791 L1802.96 680.791 L1802.4 680.791 L1801.84 680.791 L1801.28 680.791 L1800.72 680.791 L1800.16 680.791 L1799.6 680.791 L1799.04 680.791 L1798.48 680.791 L1797.92 680.791 L1797.36 680.791 L1796.8 680.791 L1796.25 680.791 L1795.69 680.791 L1795.13 680.791 L1794.57 680.791 L1794.01 680.791 L1793.45 680.791 L1792.89 680.791 L1792.33 680.791 L1791.77 680.791 L1791.21 680.791 L1790.65 680.791 L1790.09 680.791 L1789.53 680.791 L1788.98 680.791 L1788.42 680.791 L1787.86 680.791 L1787.3 680.791 L1786.74 680.791 L1786.18 680.791 L1785.62 680.791 L1785.06 680.791 L1784.5 680.791 L1783.94 680.791 L1783.38 680.791 L1782.82 680.791 L1782.26 680.791 L1781.71 680.791 L1781.15 680.791 L1780.59 680.791 L1780.03 680.791 L1779.47 680.791 L1778.91 680.791 L1778.35 680.791 L1777.79 680.791 L1777.23 680.791 L1776.67 680.791 L1776.11 680.791 L1775.55 680.791 L1774.99 680.791 L1774.43 680.791 L1773.88 680.791 L1773.32 680.791 L1772.76 680.791 L1772.2 680.791 L1771.64 680.791 L1771.08 680.791 L1770.52 680.791 L1769.96 680.791 L1769.4 680.791 L1768.84 680.791 L1768.28 680.791 L1767.72 680.791 L1767.16 680.791 L1766.61 680.791 L1766.05 680.791 L1765.49 680.791 L1764.93 680.791 L1764.37 680.791 L1763.81 680.791 L1763.25 680.791 L1762.69 680.791 L1762.13 680.791 L1761.57 680.791 L1761.01 680.791 L1760.45 680.791 L1759.89 680.791 L1759.34 680.791 L1758.78 680.791 L1758.22 680.791 L1757.66 680.791 L1757.1 680.791 L1756.54 680.791 L1755.98 680.791 L1755.42 680.791 L1754.86 680.791 L1754.3 680.791 L1753.74 680.791 L1753.18 680.791 L1752.62 680.791 L1752.06 680.791 L1751.51 680.791 L1750.95 680.791 L1750.39 680.791 L1749.83 680.791 L1749.27 680.791 L1748.71 680.791 L1748.15 680.791 L1747.59 680.791 L1747.03 680.791 L1746.47 680.791 L1745.91 680.791 L1745.35 680.791 L1744.79 680.791 L1744.24 680.791 L1743.68 680.791 L1743.12 680.791 L1742.56 680.791 L1742 680.791 L1741.44 680.791 L1740.88 680.791 L1740.32 680.791 L1739.76 680.791 L1739.2 680.791 L1738.64 680.791 L1738.08 680.791 L1737.52 680.791 L1736.97 680.791 L1736.41 680.791 L1735.85 680.791 L1735.29 680.791 L1734.73 680.791 L1734.17 680.791 L1733.61 680.791 L1733.05 680.791 L1732.49 680.791 L1731.93 680.791 L1731.37 680.791 L1730.81 680.791 L1730.25 680.791 L1729.69 680.791 L1729.14 680.791 L1728.58 680.791 L1728.02 680.791 L1727.46 680.791 L1726.9 680.791 L1726.34 680.791 L1725.78 680.791 L1725.22 680.791 L1724.66 680.791 L1724.1 680.791 L1723.54 680.791 L1722.98 680.791 L1722.42 680.791 L1721.87 680.791 L1721.31 680.791 L1720.75 680.791 L1720.19 680.791 L1719.63 680.791 L1719.07 680.791 L1718.51 680.791 L1717.95 680.791 L1717.39 680.791 L1716.83 680.791 L1716.27 680.791 L1715.71 680.791 L1715.15 680.791 L1714.6 680.791 L1714.04 680.791 L1713.48 680.791 L1712.92 680.791 L1712.36 680.791 L1711.8 680.791 L1711.24 680.791 L1710.68 680.791 L1710.12 680.791 L1709.56 680.791 L1709 680.791 L1708.44 680.791 L1707.88 680.791 L1707.32 680.791 L1706.77 680.791 L1706.21 680.791 L1705.65 680.791 L1705.09 680.791 L1704.53 680.791 L1703.97 680.791 L1703.41 680.791 L1702.85 680.791 L1702.29 680.791 L1701.73 680.791 L1701.17 680.791 L1700.61 680.791 L1700.05 680.791 L1699.5 680.791 L1698.94 680.791 L1698.38 680.791 L1697.82 680.791 L1697.26 680.791 L1696.7 680.791 L1696.14 680.791 L1695.58 680.791 L1695.02 680.791 L1694.46 680.791 L1693.9 680.791 L1693.34 680.791 L1692.78 680.791 L1692.23 680.791 L1691.67 680.791 L1691.11 680.791 L1690.55 680.791 L1689.99 680.791 L1689.43 680.791 L1688.87 680.791 L1688.31 680.791 L1687.75 680.791 L1687.19 680.791 L1686.63 680.791 L1686.07 680.791 L1685.51 680.791 L1684.95 680.791 L1684.4 680.791 L1683.84 680.791 L1683.28 680.791 L1682.72 680.791 L1682.16 680.791 L1681.6 680.791 L1681.04 680.791 L1680.48 680.791 L1679.92 680.791 L1679.36 680.791 L1678.8 680.791 L1678.24 680.791 L1677.68 680.791 L1677.13 680.791 L1676.57 680.791 L1676.01 680.791 L1675.45 680.791 L1674.89 680.791 L1674.33 680.791 L1673.77 680.791 L1673.21 680.791 L1672.65 680.791 L1672.09 680.791 L1671.53 680.791 L1670.97 680.791 L1670.41 680.791 L1669.85 680.791 L1669.3 680.791 L1668.74 680.791 L1668.18 680.791 L1667.62 680.791 L1667.06 680.791 L1666.5 680.791 L1665.94 680.791 L1665.38 680.791 L1664.82 680.791 L1664.26 680.791 L1663.7 680.791 L1663.14 680.791 L1662.58 680.791 L1662.03 680.791 L1661.47 680.791 L1660.91 680.791 L1660.35 680.791 L1659.79 680.791 L1659.23 680.791 L1658.67 680.791 L1658.11 680.791 L1657.55 680.791 L1656.99 680.791 L1656.43 680.791 L1655.87 680.791 L1655.31 680.791 L1654.76 680.791 L1654.2 680.791 L1653.64 680.791 L1653.08 680.791 L1652.52 680.791 L1651.96 680.791 L1651.4 680.791 L1650.84 680.791 L1650.28 680.791 L1649.72 680.791 L1649.16 680.791 L1648.6 680.791 L1648.04 680.791 L1647.48 680.791 L1646.93 680.791 L1646.37 680.791 L1645.81 680.791 L1645.25 680.791 L1644.69 680.791 L1644.13 680.791 L1643.57 680.791 L1643.01 680.791 L1642.45 680.791 L1641.89 680.791 L1641.33 680.791 L1640.77 680.791 L1640.21 680.791 L1639.66 680.791 L1639.1 680.791 L1638.54 680.791 L1637.98 680.791 L1637.42 680.791 L1636.86 680.791 L1636.3 680.791 L1635.74 680.791 L1635.18 680.791 L1634.62 680.791 L1634.06 680.791 L1633.5 680.791 L1632.94 680.791 L1632.39 680.791 L1631.83 680.791 L1631.27 680.791 L1630.71 680.791 L1630.15 680.791 L1629.59 680.791 L1629.03 680.791 L1628.47 680.791 L1627.91 680.791 L1627.35 680.791 L1626.79 680.791 L1626.23 680.791 L1625.67 680.791 L1625.11 680.791 L1624.56 680.791 L1624 680.791 L1623.44 680.791 L1622.88 680.791 L1622.32 680.791 L1621.76 680.791 L1621.2 680.791 L1620.64 680.791 L1620.08 680.791 L1619.52 680.791 L1618.96 680.791 L1618.4 680.791 L1617.84 680.791 L1617.29 680.791 L1616.73 680.791 L1616.17 680.791 L1615.61 680.791 L1615.05 680.791 L1614.49 680.791 L1613.93 680.791 L1613.37 680.791 L1612.81 680.791 L1612.25 680.791 L1611.69 680.791 L1611.13 680.791 L1610.57 680.791 L1610.02 680.791 L1609.46 680.791 L1608.9 680.791 L1608.34 680.791 L1607.78 680.791 L1607.22 680.791 L1606.66 680.791 L1606.1 680.791 L1605.54 680.791 L1604.98 680.791 L1604.42 680.791 L1603.86 680.791 L1603.3 680.791 L1602.74 680.791 L1602.19 680.791 L1601.63 680.791 L1601.07 680.791 L1600.51 680.791 L1599.95 680.791 L1599.39 680.791 L1598.83 680.791 L1598.27 680.791 L1597.71 680.791 L1597.15 680.791 L1596.59 680.791 L1596.03 680.791 L1595.47 680.791 L1594.92 680.791 L1594.36 680.791 L1593.8 680.791 L1593.24 680.791 L1592.68 680.791 L1592.12 680.791 L1591.56 680.791 L1591 680.791 L1590.44 680.791 L1589.88 680.791 L1589.32 680.791 L1588.76 680.791 L1588.2 680.791 L1587.65 680.791 L1587.09 680.791 L1586.53 680.791 L1585.97 680.791 L1585.41 680.791 L1584.85 680.791 L1584.29 680.791 L1583.73 680.791 L1583.17 680.791 L1582.61 680.791 L1582.05 680.791 L1581.49 680.791 L1580.93 680.791 L1580.37 680.791 L1579.82 680.791 L1579.26 680.791 L1578.7 680.791 L1578.14 680.791 L1577.58 680.791 L1577.02 680.791 L1576.46 680.791 L1575.9 680.791 L1575.34 680.791 L1574.78 680.791 L1574.22 680.791 L1573.66 680.791 L1573.1 680.791 L1572.55 680.791 L1571.99 680.791 L1571.43 680.791 L1570.87 680.791 L1570.31 680.791 L1569.75 680.791 L1569.19 680.791 L1568.63 680.791 L1568.07 680.791 L1567.51 680.791 L1566.95 680.791 L1566.39 680.791 L1565.83 680.791 L1565.28 680.791 L1564.72 680.791 L1564.16 680.791 L1563.6 680.791 L1563.04 680.791 L1562.48 680.791 L1561.92 680.791 L1561.36 680.791 L1560.8 680.791 L1560.24 680.791 L1559.68 680.791 L1559.12 680.791 L1558.56 680.791 L1558 680.791 L1557.45 680.791 L1556.89 680.791 L1556.33 680.791 L1555.77 680.791 L1555.21 680.791 L1554.65 680.791 L1554.09 680.791 L1553.53 680.791 L1552.97 680.791 L1552.41 680.791 L1551.85 680.791 L1551.29 680.791 L1550.73 680.791 L1550.18 680.791 L1549.62 680.791 L1549.06 680.791 L1548.5 680.791 L1547.94 680.791 L1547.38 680.791 L1546.82 680.791 L1546.26 680.791 L1545.7 680.791 L1545.14 680.791 L1544.58 680.791 L1544.02 680.791 L1543.46 680.791 L1542.9 680.791 L1542.35 680.791 L1541.79 680.791 L1541.23 680.791 L1540.67 680.791 L1540.11 680.791 L1539.55 680.791 L1538.99 680.791 L1538.43 680.791 L1537.87 680.791 L1537.31 680.791 L1536.75 680.791 L1536.19 680.791 L1535.63 680.791 L1535.08 680.791 L1534.52 680.791 L1533.96 680.791 L1533.4 680.791 L1532.84 680.791 L1532.28 680.791 L1531.72 680.791 L1531.16 680.791 L1530.6 680.791 L1530.04 680.791 L1529.48 680.791 L1528.92 680.791 L1528.36 680.791 L1527.81 680.791 L1527.25 680.791 L1526.69 680.791 L1526.13 680.791 L1525.57 680.791 L1525.01 680.791 L1524.45 680.791 L1523.89 680.791 L1523.33 680.791 L1522.77 680.791 L1522.21 680.791 L1521.65 680.791 L1521.09 680.791 L1520.53 680.791 L1519.98 680.791 L1519.42 680.791 L1518.86 680.791 L1518.3 680.791 L1517.74 680.791 L1517.18 680.791 L1516.62 680.791 L1516.06 680.791 L1515.5 680.791 L1514.94 680.791 L1514.38 680.791 L1513.82 680.791 L1513.26 680.791 L1512.71 680.791 L1512.15 680.791 L1511.59 680.791 L1511.03 680.791 L1510.47 680.791 L1509.91 680.791 L1509.35 680.791 L1508.79 680.791 L1508.23 680.791 L1507.67 680.791 L1507.11 680.791 L1506.55 680.791 L1505.99 680.791 L1505.44 680.791 L1504.88 680.791 L1504.32 680.791 L1503.76 680.791 L1503.2 680.791 L1502.64 680.791 L1502.08 680.791 L1501.52 680.791 L1500.96 680.791 L1500.4 680.791 L1499.84 680.791 L1499.28 680.791 L1498.72 680.791 L1498.16 680.791 L1497.61 680.791 L1497.05 680.791 L1496.49 680.791 L1495.93 680.791 L1495.37 680.791 L1494.81 680.791 L1494.25 680.791 L1493.69 680.791 L1493.13 680.791 L1492.57 680.791 L1492.01 680.791 L1491.45 680.791 L1490.89 680.791 L1490.34 680.791 L1489.78 680.791 L1489.22 680.791 L1488.66 680.791 L1488.1 680.791 L1487.54 680.791 L1486.98 680.791 L1486.42 680.791 L1485.86 680.791 L1485.3 680.791 L1484.74 680.791 L1484.18 680.791 L1483.62 680.791 L1483.07 680.791 L1482.51 680.791 L1481.95 680.791 L1481.39 680.791 L1480.83 680.791 L1480.27 680.791 L1479.71 680.791 L1479.15 680.791 L1478.59 680.791 L1478.03 680.791 L1477.47 680.791 L1476.91 680.791 L1476.35 680.791 L1475.79 680.791 L1475.24 680.791 L1474.68 680.791 L1474.12 680.791 L1473.56 680.791 L1473 680.791 L1472.44 680.791 L1471.88 680.791 L1471.32 680.791 L1470.76 680.791 L1470.2 680.791 L1469.64 680.791 L1469.08 680.791 L1468.52 680.791 L1467.97 680.791 L1467.41 680.791 L1466.85 680.791 L1466.29 680.791 L1465.73 680.791 L1465.17 680.791 L1464.61 680.791 L1464.05 680.791 L1463.49 680.791 L1462.93 680.791 L1462.37 680.791 L1461.81 680.791 L1461.25 680.791 L1460.7 680.791 L1460.14 680.791 L1459.58 680.791 L1459.02 680.791 L1458.46 680.791 L1457.9 680.791 L1457.34 680.791 L1456.78 680.791 L1456.22 680.791 L1455.66 680.791 L1455.1 680.791 L1454.54 680.791 L1453.98 680.791 L1453.42 680.791 L1452.87 680.791 L1452.31 680.791 L1451.75 680.791 L1451.19 680.791 L1450.63 680.791 L1450.07 680.791 L1449.51 680.791 L1448.95 680.791 L1448.39 680.791 L1447.83 680.791 L1447.27 680.791 L1446.71 680.791 L1446.15 680.791 L1445.6 680.791 L1445.04 680.791 L1444.48 680.791 L1443.92 680.791 L1443.36 680.791 L1442.8 680.791 L1442.24 680.791 L1441.68 680.791 L1441.12 680.791 L1440.56 680.791 L1440 680.791 L1439.44 680.791 L1438.88 680.791 L1438.33 680.791 L1437.77 680.791 L1437.21 680.791 L1436.65 680.791 L1436.09 680.791 L1435.53 680.791 L1434.97 680.791 L1434.41 680.791 L1433.85 680.791 L1433.29 680.791 L1432.73 680.791 L1432.17 680.791 L1431.61 680.791 L1431.05 680.791 L1430.5 680.791 L1429.94 680.791 L1429.38 680.791 L1428.82 680.791 L1428.26 680.791 L1427.7 680.791 L1427.14 680.791 L1426.58 680.791 L1426.02 680.791 L1425.46 680.791 L1424.9 680.791 L1424.34 680.791 L1423.78 680.791 L1423.23 680.791 L1422.67 680.791 L1422.11 680.791 L1421.55 680.791 L1420.99 680.791 L1420.43 680.791 L1419.87 680.791 L1419.31 680.791 L1418.75 680.791 L1418.19 680.791 L1417.63 680.791 L1417.07 680.791 L1416.51 680.791 L1415.95 680.791 L1415.4 680.791 L1414.84 680.791 L1414.28 680.791 L1413.72 680.791 L1413.16 680.791 L1412.6 680.791 L1412.04 680.791 L1411.48 680.791 L1410.92 680.791 L1410.36 680.791 L1409.8 680.791 L1409.24 680.791 L1408.68 680.791 L1408.13 680.791 L1407.57 680.791 L1407.01 680.791 L1406.45 680.791 L1405.89 680.791 L1405.33 680.791 L1404.77 680.791 L1404.21 680.791 L1403.65 680.791 L1403.09 680.791 L1402.53 680.791 L1401.97 680.791 L1401.41 680.791 L1400.86 680.791 L1400.3 680.791 L1399.74 680.791 L1399.18 680.791 L1398.62 680.791 L1398.06 680.791 L1397.5 680.791 L1396.94 680.791 L1396.38 680.791 L1395.82 680.791 L1395.26 680.791 L1394.7 680.791 L1394.14 680.791 L1393.58 680.791 L1393.03 680.791 L1392.47 680.791 L1391.91 680.791 L1391.35 680.791 L1390.79 680.791 L1390.23 680.791 L1389.67 680.791 L1389.11 680.791 L1388.55 680.791 L1387.99 680.791 L1387.43 680.791 L1386.87 680.791 L1386.31 680.791 L1385.76 680.791 L1385.2 680.791 L1384.64 680.791 L1384.08 680.791 L1383.52 680.791 L1382.96 680.791 L1382.4 680.791 L1381.84 680.791 L1381.28 680.791 L1380.72 680.791 L1380.16 680.791 L1379.6 680.791 L1379.04 680.791 L1378.49 680.791 L1377.93 680.791 L1377.37 680.791 L1376.81 680.791 L1376.25 680.791 L1375.69 680.791 L1375.13 680.791 L1374.57 680.791 L1374.01 680.791 L1373.45 680.791 L1372.89 680.791 L1372.33 680.791 L1371.77 680.791 L1371.21 680.791 L1370.66 680.791 L1370.1 680.791 L1369.54 680.791 L1368.98 680.791 L1368.42 680.791 L1367.86 680.791 L1367.3 680.791 L1366.74 680.791 L1366.18 680.791 L1365.62 680.791 L1365.06 680.791 L1364.5 680.791 L1363.94 680.791 L1363.39 680.791 L1362.83 680.791 L1362.27 680.791 L1361.71 680.791 L1361.15 680.791 L1360.59 680.791 L1360.03 680.791 L1359.47 680.791 L1358.91 680.791 L1358.35 680.791 L1357.79 680.791 L1357.23 680.791 L1356.67 680.791 L1356.12 680.791 L1355.56 680.791 L1355 680.791 L1354.44 680.791 L1353.88 680.791 L1353.32 680.791 L1352.76 680.791 L1352.2 680.791 L1351.64 680.791 L1351.08 680.791 L1350.52 680.791 L1349.96 680.791 L1349.4 680.791 L1348.84 680.791 L1348.29 680.791 L1347.73 680.791 L1347.17 680.791 L1346.61 680.791 L1346.05 680.791 L1345.49 680.791 L1344.93 680.791 L1344.37 680.791 L1343.81 680.791 L1343.25 680.791 L1342.69 680.791 L1342.13 680.791 L1341.57 680.791 L1341.02 680.791 L1340.46 680.791 L1339.9 680.791 L1339.34 680.791 L1338.78 680.791 L1338.22 680.791 L1337.66 680.791 L1337.1 680.791 L1336.54 680.791 L1335.98 680.791 L1335.42 680.791 L1334.86 680.791 L1334.3 680.791 L1333.75 680.791 L1333.19 680.791 L1332.63 680.791 L1332.07 680.791 L1331.51 680.791 L1330.95 680.791 L1330.39 680.791 L1329.83 680.791 L1329.27 680.791 L1328.71 680.791 L1328.15 680.791 L1327.59 680.791 L1327.03 680.791 L1326.47 680.791 L1325.92 680.791 L1325.36 680.791 L1324.8 680.791 L1324.24 680.791 L1323.68 680.791 L1323.12 680.791 L1322.56 680.791 L1322 680.791 L1321.44 680.791 L1320.88 680.791 L1320.32 680.791 L1319.76 680.791 L1319.2 680.791 L1318.65 680.791 L1318.09 680.791 L1317.53 680.791 L1316.97 680.791 L1316.41 680.791 L1315.85 680.791 L1315.29 680.791 L1314.73 680.791 L1314.17 680.791 L1313.61 680.791 L1313.05 680.791 L1312.49 680.791 L1311.93 680.791 L1311.38 680.791 L1310.82 680.791 L1310.26 680.791 L1309.7 680.791 L1309.14 680.791 L1308.58 680.791 L1308.02 680.791 L1307.46 680.791 L1306.9 680.791 L1306.34 680.791 L1305.78 680.791 L1305.22 680.791 L1304.66 680.791 L1304.1 680.791 L1303.55 680.791 L1302.99 680.791 L1302.43 680.791 L1301.87 680.791 L1301.31 680.791 L1300.75 680.791 L1300.19 680.791 L1299.63 680.791 L1299.07 680.791 L1298.51 680.791 L1297.95 680.791 L1297.39 680.791 L1296.83 680.791 L1296.28 680.791 L1295.72 680.791 L1295.16 680.791 L1294.6 680.791 L1294.04 680.791 L1293.48 680.791 L1292.92 680.791 L1292.36 680.791 L1291.8 680.791 L1291.24 680.791 L1290.68 680.791 L1290.12 680.791 L1289.56 680.791 L1289 680.791 L1288.45 680.791 L1287.89 680.791 L1287.33 680.791 L1286.77 680.791 L1286.21 680.791 L1285.65 680.791 L1285.09 680.791 L1284.53 680.791 L1283.97 680.791 L1283.41 680.791 L1282.85 680.791 L1282.29 680.791 L1281.73 680.791 L1281.18 680.791 L1280.62 680.791 L1280.06 680.791 L1279.5 680.791 L1278.94 680.791 L1278.38 680.791 L1277.82 680.791 L1277.26 680.791 L1276.7 680.791 L1276.14 680.791 L1275.58 680.791 L1275.02 680.791 L1274.46 680.791 L1273.91 680.791 L1273.35 680.791 L1272.79 680.791 L1272.23 680.791 L1271.67 680.791 L1271.11 680.791 L1270.55 680.791 L1269.99 680.791 L1269.43 680.791 L1268.87 680.791 L1268.31 680.791 L1267.75 680.791 L1267.19 680.791 L1266.63 680.791 L1266.08 680.791 L1265.52 680.791 L1264.96 680.791 L1264.4 680.791 L1263.84 680.791 L1263.28 680.791 L1262.72 680.791 L1262.16 680.791 L1261.6 680.791 L1261.04 680.791 L1260.48 680.791 L1259.92 680.791 L1259.36 680.791 L1258.81 680.791 L1258.25 680.791 L1257.69 680.791 L1257.13 680.791 L1256.57 680.791 L1256.01 680.791 L1255.45 680.791 L1254.89 680.791 L1254.33 680.791 L1253.77 680.791 L1253.21 680.791 L1252.65 680.791 L1252.09 680.791 L1251.54 680.791 L1250.98 680.791 L1250.42 680.791 L1249.86 680.791 L1249.3 680.791 L1248.74 680.791 L1248.18 680.791 L1247.62 680.791 L1247.06 680.791 L1246.5 680.791 L1245.94 680.791 L1245.38 680.791 L1244.82 680.791 L1244.26 680.791 L1243.71 680.791 L1243.15 680.791 L1242.59 680.791 L1242.03 680.791 L1241.47 680.791 L1240.91 680.791 L1240.35 680.791 L1239.79 680.791 L1239.23 680.791 L1238.67 680.791 L1238.11 680.791 L1237.55 680.791 L1236.99 680.791 L1236.44 680.791 L1235.88 680.791 L1235.32 680.791 L1234.76 680.791 L1234.2 680.791 L1233.64 680.791 L1233.08 680.791 L1232.52 680.791 L1231.96 680.791 L1231.4 680.791 L1230.84 680.791 L1230.28 680.791 L1229.72 680.791 L1229.17 680.791 L1228.61 680.791 L1228.05 680.791 L1227.49 680.791 L1226.93 680.791 L1226.37 680.791 L1225.81 680.791 L1225.25 680.791 L1224.69 680.791 L1224.13 680.791 L1223.57 680.791 L1223.01 680.791 L1222.45 680.791 L1221.89 680.791 L1221.34 680.791 L1220.78 680.791 L1220.22 680.791 L1219.66 680.791 L1219.1 680.791 L1218.54 680.791 L1217.98 680.791 L1217.42 680.791 L1216.86 680.791 L1216.3 680.791 L1215.74 680.791 L1215.18 680.791 L1214.62 680.791 L1214.07 680.791 L1213.51 680.791 L1212.95 680.791 L1212.39 680.791 L1211.83 680.791 L1211.27 680.791 L1210.71 680.791 L1210.15 680.791 L1209.59 680.791 L1209.03 680.791 L1208.47 680.791 L1207.91 680.791 L1207.35 680.791 L1206.8 680.791 L1206.24 680.791 L1205.68 680.791 L1205.12 680.791 L1204.56 680.791 L1204 680.791 L1203.44 680.791 L1202.88 680.791 L1202.32 680.791 L1201.76 680.791 L1201.2 680.791 L1200.64 680.791 L1200.08 680.791 L1199.52 680.791 L1198.97 680.791 L1198.41 680.791 L1197.85 680.791 L1197.29 680.791 L1196.73 680.791 L1196.17 680.791 L1195.61 680.791 L1195.05 680.791 L1194.49 680.791 L1193.93 680.791 L1193.37 680.791 L1192.81 680.791 L1192.25 680.791 L1191.7 680.791 L1191.14 680.791 L1190.58 680.791 L1190.02 680.791 L1189.46 680.791 L1188.9 680.791 L1188.34 680.791 L1187.78 680.791 L1187.22 680.791 L1186.66 680.791 L1186.1 680.791 L1185.54 680.791 L1184.98 680.791 L1184.43 680.791 L1183.87 680.791 L1183.31 680.791 L1182.75 680.791 L1182.19 680.791 L1181.63 680.791 L1181.07 680.791 L1180.51 680.791 L1179.95 680.791 L1179.39 680.791 L1178.83 680.791 L1178.27 680.791 L1177.71 680.791 L1177.15 680.791 L1176.6 680.791 L1176.04 680.791 L1175.48 680.791 L1174.92 680.791 L1174.36 680.791 L1173.8 680.791 L1173.24 680.791 L1172.68 680.791 L1172.12 680.791 L1171.56 680.791 L1171 680.791 L1170.44 680.791 L1169.88 680.791 L1169.33 680.791 L1168.77 680.791 L1168.21 680.791 L1167.65 680.791 L1167.09 680.791 L1166.53 680.791 L1165.97 680.791 L1165.41 680.791 L1164.85 680.791 L1164.29 680.791 L1163.73 680.791 L1163.17 680.791 L1162.61 680.791 L1162.05 680.791 L1161.5 680.791 L1160.94 680.791 L1160.38 680.791 L1159.82 680.791 L1159.26 680.791 L1158.7 680.791 L1158.14 680.791 L1157.58 680.791 L1157.02 680.791 L1156.46 680.791 L1155.9 680.791 L1155.34 680.791 L1154.78 680.791 L1154.23 680.791 L1153.67 680.791 L1153.11 680.791 L1152.55 680.791 L1151.99 680.791 L1151.43 680.791 L1150.87 680.791 L1150.31 680.791 L1149.75 680.791 L1149.19 680.791 L1148.63 680.791 L1148.07 680.791 L1147.51 680.791 L1146.96 680.791 L1146.4 680.791 L1145.84 680.791 L1145.28 680.791 L1144.72 680.791 L1144.16 680.791 L1143.6 680.791 L1143.04 680.791 L1142.48 680.791 L1141.92 680.791 L1141.36 680.791 L1140.8 680.791 L1140.24 680.791 L1139.68 680.791 L1139.13 680.791 L1138.57 680.791 L1138.01 680.791 L1137.45 680.791 L1136.89 680.791 L1136.33 680.791 L1135.77 680.791 L1135.21 680.791 L1134.65 680.791 L1134.09 680.791 L1133.53 680.791 L1132.97 680.791 L1132.41 680.791 L1131.86 680.791 L1131.3 680.791 L1130.74 680.791 L1130.18 680.791 L1129.62 680.791 L1129.06 680.791 L1128.5 680.791 L1127.94 680.791 L1127.38 680.791 L1126.82 680.791 L1126.26 680.791 L1125.7 680.791 L1125.14 680.791 L1124.59 680.791 L1124.03 680.791 L1123.47 680.791 L1122.91 680.791 L1122.35 680.791 L1121.79 680.791 L1121.23 680.791 L1120.67 680.791 L1120.11 680.791 L1119.55 680.791 L1118.99 680.791 L1118.43 680.791 L1117.87 680.791 L1117.31 680.791 L1116.76 680.791 L1116.2 680.791 L1115.64 680.791 L1115.08 680.791 L1114.52 680.791 L1113.96 680.791 L1113.4 680.791 L1112.84 680.791 L1112.28 680.791 L1111.72 680.791 L1111.16 680.791 L1110.6 680.791 L1110.04 680.791 L1109.49 680.791 L1108.93 680.791 L1108.37 680.791 L1107.81 680.791 L1107.25 680.791 L1106.69 680.791 L1106.13 680.791 L1105.57 680.791 L1105.01 680.791 L1104.45 680.791 L1103.89 680.791 L1103.33 680.791 L1102.77 680.791 L1102.22 680.791 L1101.66 680.791 L1101.1 680.791 L1100.54 680.791 L1099.98 680.791 L1099.42 680.791 L1098.86 680.791 L1098.3 680.791 L1097.74 680.791 L1097.18 680.791 L1096.62 680.791 L1096.06 680.791 L1095.5 680.791 L1094.94 680.791 L1094.39 680.791 L1093.83 680.791 L1093.27 680.791 L1092.71 680.791 L1092.15 680.791 L1091.59 680.791 L1091.03 680.791 L1090.47 680.791 L1089.91 680.791 L1089.35 680.791 L1088.79 680.791 L1088.23 680.791 L1087.67 680.791 L1087.12 680.791 L1086.56 680.791 L1086 680.791 L1085.44 680.791 L1084.88 680.791 L1084.32 680.791 L1083.76 680.791 L1083.2 680.791 L1082.64 680.791 L1082.08 680.791 L1081.52 680.791 L1080.96 680.791 L1080.4 680.791 L1079.85 680.791 L1079.29 680.791 L1078.73 680.791 L1078.17 680.791 L1077.61 680.791 L1077.05 680.791 L1076.49 680.791 L1075.93 680.791 L1075.37 680.791 L1074.81 680.791 L1074.25 680.791 L1073.69 680.791 L1073.13 680.791 L1072.57 680.791 L1072.02 680.791 L1071.46 680.791 L1070.9 680.791 L1070.34 680.791 L1069.78 680.791 L1069.22 680.791 L1068.66 680.791 L1068.1 680.791 L1067.54 680.791 L1066.98 680.791 L1066.42 680.791 L1065.86 680.791 L1065.3 680.791 L1064.75 680.791 L1064.19 680.791 L1063.63 680.791 L1063.07 680.791 L1062.51 680.791 L1061.95 680.791 L1061.39 680.791 L1060.83 680.791 L1060.27 680.791 L1059.71 680.791 L1059.15 680.791 L1058.59 680.791 L1058.03 680.791 L1057.48 680.791 L1056.92 680.791 L1056.36 680.791 L1055.8 680.791 L1055.24 680.791 L1054.68 680.791 L1054.12 680.791 L1053.56 680.791 L1053 680.791 L1052.44 680.791 L1051.88 680.791 L1051.32 680.791 L1050.76 680.791 L1050.2 680.791 L1049.65 680.791 L1049.09 680.791 L1048.53 680.791 L1047.97 680.791 L1047.41 680.791 L1046.85 680.791 L1046.29 680.791 L1045.73 680.791 L1045.17 680.791 L1044.61 680.791 L1044.05 680.791 L1043.49 680.791 L1042.93 680.791 L1042.38 680.791 L1041.82 680.791 L1041.26 680.791 L1040.7 680.791 L1040.14 680.791 L1039.58 680.791 L1039.02 680.791 L1038.46 680.791 L1037.9 680.791 L1037.34 680.791 L1036.78 680.791 L1036.22 680.791 L1035.66 680.791 L1035.1 680.791 L1034.55 680.791 L1033.99 680.791 L1033.43 680.791 L1032.87 680.791 L1032.31 680.791 L1031.75 680.791 L1031.19 680.791 L1030.63 680.791 L1030.07 680.791 L1029.51 680.791 L1028.95 680.791 L1028.39 680.791 L1027.83 680.791 L1027.28 680.791 L1026.72 680.791 L1026.16 680.791 L1025.6 680.791 L1025.04 680.791 L1024.48 680.791 L1023.92 680.791 L1023.36 680.791 L1022.8 680.791 L1022.24 680.791 L1021.68 680.791 L1021.12 680.791 L1020.56 680.791 L1020.01 680.791 L1019.45 680.791 L1018.89 680.791 L1018.33 680.791 L1017.77 680.791 L1017.21 680.791 L1016.65 680.791 L1016.09 680.791 L1015.53 680.791 L1014.97 680.791 L1014.41 680.791 L1013.85 680.791 L1013.29 680.791 L1012.73 680.791 L1012.18 680.791 L1011.62 680.791 L1011.06 680.791 L1010.5 680.791 L1009.94 680.791 L1009.38 680.791 L1008.82 680.791 L1008.26 680.791 L1007.7 680.791 L1007.14 680.791 L1006.58 680.791 L1006.02 680.791 L1005.46 680.791 L1004.91 680.791 L1004.35 680.791 L1003.79 680.791 L1003.23 680.791 L1002.67 680.791 L1002.11 680.791 L1001.55 680.791 L1000.99 680.791 L1000.43 680.791 L999.872 680.791 L999.313 680.791 L998.754 680.791 L998.194 680.791 L997.635 680.791 L997.076 680.791 L996.517 680.791 L995.957 680.791 L995.398 680.791 L994.839 680.791 L994.28 680.791 L993.72 680.791 L993.161 680.791 L992.602 680.791 L992.043 680.791 L991.483 680.791 L990.924 680.791 L990.365 680.791 L989.806 680.791 L989.246 680.791 L988.687 680.791 L988.128 680.791 L987.569 680.791 L987.009 680.791 L986.45 680.791 L985.891 680.791 L985.332 680.791 L984.772 680.791 L984.213 680.791 L983.654 680.791 L983.095 680.791 L982.535 680.791 L981.976 680.791 L981.417 680.791 L980.858 680.791 L980.298 680.791 L979.739 680.791 L979.18 680.791 L978.621 680.791 L978.061 680.791 L977.502 680.791 L976.943 680.791 L976.384 680.791 L975.824 680.791 L975.265 680.791 L974.706 680.791 L974.147 680.791 L973.587 680.791 L973.028 680.791 L972.469 680.791 L971.91 680.791 L971.35 680.791 L970.791 680.791 L970.232 680.791 L969.673 680.791 L969.113 680.791 L968.554 680.791 L967.995 680.791 L967.436 680.791 L966.876 680.791 L966.317 680.791 L965.758 680.791 L965.199 680.791 L964.639 680.791 L964.08 680.791 L963.521 680.791 L962.962 680.791 L962.402 680.791 L961.843 680.791 L961.284 680.791 L960.725 680.791 L960.165 680.791 L959.606 680.791 L959.047 680.791 L958.488 680.791 L957.928 680.791 L957.369 680.791 L956.81 680.791 L956.251 680.791 L955.691 680.791 L955.132 680.791 L954.573 680.791 L954.014 680.791 L953.454 680.791 L952.895 680.791 L952.336 680.791 L951.777 680.791 L951.217 680.791 L950.658 680.791 L950.099 680.791 L949.54 680.791 L948.98 680.791 L948.421 680.791 L947.862 680.791 L947.303 680.791 L946.743 680.791 L946.184 680.791 L945.625 680.791 L945.066 680.791 L944.506 680.791 L943.947 680.791 L943.388 680.791 L942.829 680.791 L942.269 680.791 L941.71 680.791 L941.151 680.791 L940.592 680.791 L940.032 680.791 L939.473 680.791 L938.914 680.791 L938.355 680.791 L937.795 680.791 L937.236 680.791 L936.677 680.791 L936.118 680.791 L935.558 680.791 L934.999 680.791 L934.44 680.791 L933.881 680.791 L933.321 680.791 L932.762 680.791 L932.203 680.791 L931.644 680.791 L931.084 680.791 L930.525 680.791 L929.966 680.791 L929.406 680.791 L928.847 680.791 L928.288 680.791 L927.729 680.791 L927.169 680.791 L926.61 680.791 L926.051 680.791 L925.492 680.791 L924.932 680.791 L924.373 680.791 L923.814 680.791 L923.255 680.791 L922.695 680.791 L922.136 680.791 L921.577 680.791 L921.018 680.791 L920.458 680.791 L919.899 680.791 L919.34 680.791 L918.781 680.791 L918.221 680.791 L917.662 680.791 L917.103 680.791 L916.544 680.791 L915.984 680.791 L915.425 680.791 L914.866 680.791 L914.307 680.791 L913.747 680.791 L913.188 680.791 L912.629 680.791 L912.07 680.791 L911.51 680.791 L910.951 680.791 L910.392 680.791 L909.833 680.791 L909.273 680.791 L908.714 680.791 L908.155 680.791 L907.596 680.791 L907.036 680.791 L906.477 680.791 L905.918 680.791 L905.359 680.791 L904.799 680.791 L904.24 680.791 L903.681 680.791 L903.122 680.791 L902.562 680.791 L902.003 680.791 L901.444 680.791 L900.885 680.791 L900.325 680.791 L899.766 680.791 L899.207 680.791 L898.648 680.791 L898.088 680.791 L897.529 680.791 L896.97 680.791 L896.411 680.791 L895.851 680.791 L895.292 680.791 L894.733 680.791 L894.174 680.791 L893.614 680.791 L893.055 680.791 L892.496 680.791 L891.937 680.791 L891.377 680.791 L890.818 680.791 L890.259 680.791 L889.7 680.791 L889.14 680.791 L888.581 680.791 L888.022 680.791 L887.463 680.791 L886.903 680.791 L886.344 680.791 L885.785 680.791 L885.226 680.791 L884.666 680.791 L884.107 680.791 L883.548 680.791 L882.989 680.791 L882.429 680.791 L881.87 680.791 L881.311 680.791 L880.752 680.791 L880.192 680.791 L879.633 680.791 L879.074 680.791 L878.515 680.791 L877.955 680.791 L877.396 680.791 L876.837 680.791 L876.278 680.791 L875.718 680.791 L875.159 680.791 L874.6 680.791 L874.041 680.791 L873.481 680.791 L872.922 680.791 L872.363 680.791 L871.804 680.791 L871.244 680.791 L870.685 680.791 L870.126 680.791 L869.567 680.791 L869.007 680.791 L868.448 680.791 L867.889 680.791 L867.33 680.791 L866.77 680.791 L866.211 680.791 L865.652 680.791 L865.093 680.791 L864.533 680.791 L863.974 680.791 L863.415 680.791 L862.856 680.791 L862.296 680.791 L861.737 680.791 L861.178 680.791 L860.619 680.791 L860.059 680.791 L859.5 680.791 L858.941 680.791 L858.382 680.791 L857.822 680.791 L857.263 680.791 L856.704 680.791 L856.145 680.791 L855.585 680.791 L855.026 680.791 L854.467 680.791 L853.908 680.791 L853.348 680.791 L852.789 680.791 L852.23 680.791 L851.671 680.791 L851.111 680.791 L850.552 680.791 L849.993 680.791 L849.434 680.791 L848.874 680.791 L848.315 680.791 L847.756 680.791 L847.197 680.791 L846.637 680.791 L846.078 680.791 L845.519 680.791 L844.96 680.791 L844.4 680.791 L843.841 680.791 L843.282 680.791 L842.723 680.791 L842.163 680.791 L841.604 680.791 L841.045 680.791 L840.486 680.791 L839.926 680.791 L839.367 680.791 L838.808 680.791 L838.249 680.791 L837.689 680.791 L837.13 680.791 L836.571 680.791 L836.012 680.791 L835.452 680.791 L834.893 680.791 L834.334 680.791 L833.775 680.791 L833.215 680.791 L832.656 680.791 L832.097 680.791 L831.538 680.791 L830.978 680.791 L830.419 680.791 L829.86 680.791 L829.301 680.791 L828.741 680.791 L828.182 680.791 L827.623 680.791 L827.064 680.791 L826.504 680.791 L825.945 680.791 L825.386 680.791 L824.827 680.791 L824.267 680.791 L823.708 680.791 L823.149 680.791 L822.59 680.791 L822.03 680.791 L821.471 680.791 L820.912 680.791 L820.353 680.791 L819.793 680.791 L819.234 680.791 L818.675 680.791 L818.116 680.791 L817.556 680.791 L816.997 680.791 L816.438 680.791 L815.879 680.791 L815.319 680.791 L814.76 680.791 L814.201 680.791 L813.642 680.791 L813.082 680.791 L812.523 680.791 L811.964 680.791 L811.405 680.791 L810.845 680.791 L810.286 680.791 L809.727 680.791 L809.168 680.791 L808.608 680.791 L808.049 680.791 L807.49 680.791 L806.931 680.791 L806.371 680.791 L805.812 680.791 L805.253 680.791 L804.693 680.791 L804.134 680.791 L803.575 680.791 L803.016 680.791 L802.456 680.791 L801.897 680.791 L801.338 680.791 L800.779 680.791 L800.219 680.791 L799.66 680.791 L799.101 680.791 L798.542 680.791 L797.982 680.791 L797.423 680.791 L796.864 680.791 L796.305 680.791 L795.745 680.791 L795.186 680.791 L794.627 680.791 L794.068 680.791 L793.508 680.791 L792.949 680.791 L792.39 680.791 L791.831 680.791 L791.271 680.791 L790.712 680.791 L790.153 680.791 L789.594 680.791 L789.034 680.791 L788.475 680.791 L787.916 680.791 L787.357 680.791 L786.797 680.791 L786.238 680.791 L785.679 680.791 L785.12 680.791 L784.56 680.791 L784.001 680.791 L783.442 680.791 L782.883 680.791 L782.323 680.791 L781.764 680.791 L781.205 680.791 L780.646 680.791 L780.086 680.791 L779.527 680.791 L778.968 680.791 L778.409 680.791 L777.849 680.791 L777.29 680.791 L776.731 680.791 L776.172 680.791 L775.612 680.791 L775.053 680.791 L774.494 680.791 L773.935 680.791 L773.375 680.791 L772.816 680.791 L772.257 680.791 L771.698 680.791 L771.138 680.791 L770.579 680.791 L770.02 680.791 L769.461 680.791 L768.901 680.791 L768.342 680.791 L767.783 680.791 L767.224 680.791 L766.664 680.791 L766.105 680.791 L765.546 680.791 L764.987 680.791 L764.427 680.791 L763.868 680.791 L763.309 680.791 L762.75 680.791 L762.19 680.791 L761.631 680.791 L761.072 680.791 L760.513 680.791 L759.953 680.791 L759.394 680.791 L758.835 680.791 L758.276 680.791 L757.716 680.791 L757.157 680.791 L756.598 680.791 L756.039 680.791 L755.479 680.791 L754.92 680.791 L754.361 680.791 L753.802 680.791 L753.242 680.791 L752.683 680.791 L752.124 680.791 L751.565 680.791 L751.005 680.791 L750.446 680.791 L749.887 680.791 L749.328 680.791 L748.768 680.791 L748.209 680.791 L747.65 680.791 L747.091 680.791 L746.531 680.791 L745.972 680.791 L745.413 680.791 L744.854 680.791 L744.294 680.791 L743.735 680.791 L743.176 680.791 L742.617 680.791 L742.057 680.791 L741.498 680.791 L740.939 680.791 L740.38 680.791 L739.82 680.791 L739.261 680.791 L738.702 680.791 L738.143 680.791 L737.583 680.791 L737.024 680.791 L736.465 680.791 L735.906 680.791 L735.346 680.791 L734.787 680.791 L734.228 680.791 L733.669 680.791 L733.109 680.791 L732.55 680.791 L731.991 680.791 L731.432 680.791 L730.872 680.791 L730.313 680.791 L729.754 680.791 L729.195 680.791 L728.635 680.791 L728.076 680.791 L727.517 680.791 L726.958 680.791 L726.398 680.791 L725.839 680.791 L725.28 680.791 L724.721 680.791 L724.161 680.791 L723.602 680.791 L723.043 680.791 L722.484 680.791 L721.924 680.791 L721.365 680.791 L720.806 680.791 L720.247 680.791  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.387 720.806,685.387 721.365,685.387 721.924,685.387 722.484,685.387 723.043,685.387 723.602,685.387 724.161,685.387 724.721,685.387 725.28,685.387 725.839,685.387 726.398,685.387 726.958,685.387 727.517,685.387 728.076,685.387 728.635,685.387 729.195,685.387 729.754,685.387 730.313,685.387 730.872,685.387 731.432,685.387 731.991,685.387 732.55,685.387 733.109,685.387 733.669,685.387 734.228,685.387 734.787,685.387 735.346,685.387 735.906,685.387 736.465,685.387 737.024,685.387 737.583,685.387 738.143,685.387 738.702,685.387 739.261,685.387 739.82,685.387 740.38,685.387 740.939,685.387 741.498,685.387 742.057,685.387 742.617,685.387 743.176,685.387 743.735,685.387 744.294,685.387 744.854,685.387 745.413,685.387 745.972,685.387 746.531,685.387 747.091,685.387 747.65,685.387 748.209,685.387 748.768,685.387 749.328,685.387 749.887,685.387 750.446,685.387 751.005,685.387 751.565,685.387 752.124,685.387 752.683,685.387 753.242,685.387 753.802,685.387 754.361,685.387 754.92,685.387 755.479,685.387 756.039,685.387 756.598,685.387 757.157,685.387 757.716,685.387 758.276,685.387 758.835,685.387 759.394,685.387 759.953,685.387 760.513,685.387 761.072,685.387 761.631,685.387 762.19,685.387 762.75,685.387 763.309,685.387 763.868,685.387 764.427,685.387 764.987,685.387 765.546,685.387 766.105,685.387 766.664,685.387 767.224,685.387 767.783,685.387 768.342,685.387 768.901,685.387 769.461,685.387 770.02,685.387 770.579,685.387 771.138,685.387 771.698,685.387 772.257,685.387 772.816,685.387 773.375,685.387 773.935,685.387 774.494,685.387 775.053,685.387 775.612,685.387 776.172,685.387 776.731,685.387 777.29,685.387 777.849,685.387 778.409,685.387 778.968,685.387 779.527,685.387 780.086,685.387 780.646,685.387 781.205,685.387 781.764,685.387 782.323,685.387 782.883,685.387 783.442,685.387 784.001,685.387 784.56,685.387 785.12,685.387 785.679,685.387 786.238,685.387 786.797,685.387 787.357,685.387 787.916,685.387 788.475,685.387 789.034,685.387 789.594,685.387 790.153,685.387 790.712,685.387 791.271,685.387 791.831,685.387 792.39,685.387 792.949,685.387 793.508,685.387 794.068,685.387 794.627,685.387 795.186,685.387 795.745,685.387 796.305,685.387 796.864,685.387 797.423,685.387 797.982,685.387 798.542,685.387 799.101,685.387 799.66,685.387 800.219,685.387 800.779,685.387 801.338,685.387 801.897,685.387 802.456,685.387 803.016,685.387 803.575,685.387 804.134,685.387 804.693,685.387 805.253,685.387 805.812,685.387 806.371,685.387 806.931,685.387 807.49,685.387 808.049,685.387 808.608,685.387 809.168,685.387 809.727,685.387 810.286,685.387 810.845,685.387 811.405,685.387 811.964,685.387 812.523,685.387 813.082,685.387 813.642,685.387 814.201,685.387 814.76,685.387 815.319,685.387 815.879,685.387 816.438,685.387 816.997,685.387 817.556,685.387 818.116,685.387 818.675,685.387 819.234,685.387 819.793,685.387 820.353,685.387 820.912,685.387 821.471,685.387 822.03,685.387 822.59,685.387 823.149,685.387 823.708,685.387 824.267,685.387 824.827,685.387 825.386,685.387 825.945,685.387 826.504,685.387 827.064,685.387 827.623,685.387 828.182,685.387 828.741,685.387 829.301,685.387 829.86,685.387 830.419,685.387 830.978,685.387 831.538,685.387 832.097,685.387 832.656,685.387 833.215,685.387 833.775,685.387 834.334,685.387 834.893,685.387 835.452,685.387 836.012,685.387 836.571,685.387 837.13,685.387 837.689,685.387 838.249,685.387 838.808,685.387 839.367,685.387 839.926,685.387 840.486,685.387 841.045,685.387 841.604,685.387 842.163,685.387 842.723,685.387 843.282,685.387 843.841,685.387 844.4,685.387 844.96,685.387 845.519,685.387 846.078,685.387 846.637,685.387 847.197,685.387 847.756,685.387 848.315,685.387 848.874,685.387 849.434,685.387 849.993,685.387 850.552,685.387 851.111,685.387 851.671,685.387 852.23,685.387 852.789,685.387 853.348,685.387 853.908,685.387 854.467,685.387 855.026,685.387 855.585,685.387 856.145,685.387 856.704,685.387 857.263,685.387 857.822,685.387 858.382,685.387 858.941,685.387 859.5,685.387 860.059,685.387 860.619,685.387 861.178,685.387 861.737,685.387 862.296,685.387 862.856,685.387 863.415,685.387 863.974,685.387 864.533,685.387 865.093,685.387 865.652,685.387 866.211,685.387 866.77,685.387 867.33,685.387 867.889,685.387 868.448,685.387 869.007,685.387 869.567,685.387 870.126,685.387 870.685,685.387 871.244,685.387 871.804,685.387 872.363,685.387 872.922,685.387 873.481,685.387 874.041,685.387 874.6,685.387 875.159,685.387 875.718,685.387 876.278,685.387 876.837,685.387 877.396,685.387 877.955,685.387 878.515,685.387 879.074,685.387 879.633,685.387 880.192,685.387 880.752,685.387 881.311,685.387 881.87,685.387 882.429,685.387 882.989,685.387 883.548,685.387 884.107,685.387 884.666,685.387 885.226,685.387 885.785,685.387 886.344,685.387 886.903,685.387 887.463,685.387 888.022,685.387 888.581,685.387 889.14,685.387 889.7,685.387 890.259,685.387 890.818,685.387 891.377,685.387 891.937,685.387 892.496,685.387 893.055,685.387 893.614,685.387 894.174,685.387 894.733,685.387 895.292,685.387 895.851,685.387 896.411,685.387 896.97,685.387 897.529,685.387 898.088,685.387 898.648,685.387 899.207,685.387 899.766,685.387 900.325,685.387 900.885,685.387 901.444,685.387 902.003,685.387 902.562,685.387 903.122,685.387 903.681,685.387 904.24,685.387 904.799,685.387 905.359,685.387 905.918,685.387 906.477,685.387 907.036,685.387 907.596,685.387 908.155,685.387 908.714,685.387 909.273,685.387 909.833,685.387 910.392,685.387 910.951,685.387 911.51,685.387 912.07,685.387 912.629,685.387 913.188,685.387 913.747,685.387 914.307,685.387 914.866,685.387 915.425,685.387 915.984,685.387 916.544,685.387 917.103,685.387 917.662,685.387 918.221,685.387 918.781,685.387 919.34,685.387 919.899,685.387 920.458,685.387 921.018,685.387 921.577,685.387 922.136,685.387 922.695,685.387 923.255,685.387 923.814,685.387 924.373,685.387 924.932,685.387 925.492,685.387 926.051,685.387 926.61,685.387 927.169,685.387 927.729,685.387 928.288,685.387 928.847,685.387 929.406,685.387 929.966,685.387 930.525,685.387 931.084,685.387 931.644,685.387 932.203,685.387 932.762,685.387 933.321,685.387 933.881,685.387 934.44,685.387 934.999,685.387 935.558,685.387 936.118,685.387 936.677,685.387 937.236,685.387 937.795,685.387 938.355,685.387 938.914,685.387 939.473,685.387 940.032,685.387 940.592,685.387 941.151,685.387 941.71,685.387 942.269,685.387 942.829,685.387 943.388,685.387 943.947,685.387 944.506,685.387 945.066,685.387 945.625,685.387 946.184,685.387 946.743,685.387 947.303,685.387 947.862,685.387 948.421,685.387 948.98,685.387 949.54,685.387 950.099,685.387 950.658,685.387 951.217,685.387 951.777,685.387 952.336,685.387 952.895,685.387 953.454,685.387 954.014,685.387 954.573,685.387 955.132,685.387 955.691,685.387 956.251,685.387 956.81,685.387 957.369,685.387 957.928,685.387 958.488,685.387 959.047,685.387 959.606,685.387 960.165,685.387 960.725,685.387 961.284,685.387 961.843,685.387 962.402,685.387 962.962,685.387 963.521,685.387 964.08,685.387 964.639,685.387 965.199,685.387 965.758,685.387 966.317,685.387 966.876,685.387 967.436,685.387 967.995,685.387 968.554,685.387 969.113,685.387 969.673,685.387 970.232,685.387 970.791,685.387 971.35,685.387 971.91,685.387 972.469,685.387 973.028,685.387 973.587,685.387 974.147,685.387 974.706,685.387 975.265,685.387 975.824,685.387 976.384,685.387 976.943,685.387 977.502,685.387 978.061,685.387 978.621,685.387 979.18,685.387 979.739,685.387 980.298,685.387 980.858,685.387 981.417,685.387 981.976,685.387 982.535,685.387 983.095,685.387 983.654,685.387 984.213,685.387 984.772,685.387 985.332,685.387 985.891,685.387 986.45,685.387 987.009,685.387 987.569,685.387 988.128,685.387 988.687,685.387 989.246,685.387 989.806,685.387 990.365,685.387 990.924,685.387 991.483,685.387 992.043,685.387 992.602,685.387 993.161,685.387 993.72,685.387 994.28,685.387 994.839,685.387 995.398,685.387 995.957,685.387 996.517,685.387 997.076,685.387 997.635,685.387 998.194,685.387 998.754,685.387 999.313,685.387 999.872,685.387 1000.43,685.387 1000.99,685.387 1001.55,685.387 1002.11,685.387 1002.67,685.387 1003.23,685.387 1003.79,685.387 1004.35,685.387 1004.91,685.387 1005.46,685.387 1006.02,685.387 1006.58,685.387 1007.14,685.387 1007.7,685.387 1008.26,685.387 1008.82,685.387 1009.38,685.387 1009.94,685.387 1010.5,685.387 1011.06,685.387 1011.62,685.387 1012.18,685.387 1012.73,685.387 1013.29,685.387 1013.85,685.387 1014.41,685.387 1014.97,685.387 1015.53,685.387 1016.09,685.387 1016.65,685.387 1017.21,685.387 1017.77,685.387 1018.33,685.387 1018.89,685.387 1019.45,685.387 1020.01,685.387 1020.56,685.387 1021.12,685.387 1021.68,685.387 1022.24,685.387 1022.8,685.387 1023.36,685.387 1023.92,685.387 1024.48,685.387 1025.04,685.387 1025.6,685.387 1026.16,685.387 1026.72,685.387 1027.28,685.387 1027.83,685.387 1028.39,685.387 1028.95,685.387 1029.51,685.387 1030.07,685.387 1030.63,685.387 1031.19,685.387 1031.75,685.387 1032.31,685.387 1032.87,685.387 1033.43,685.387 1033.99,685.387 1034.55,685.387 1035.1,685.387 1035.66,685.387 1036.22,685.387 1036.78,685.387 1037.34,685.387 1037.9,685.387 1038.46,685.387 1039.02,685.387 1039.58,685.387 1040.14,685.387 1040.7,685.387 1041.26,685.387 1041.82,685.387 1042.38,685.387 1042.93,685.387 1043.49,685.387 1044.05,685.387 1044.61,685.387 1045.17,685.387 1045.73,685.387 1046.29,685.387 1046.85,685.387 1047.41,685.387 1047.97,685.387 1048.53,685.387 1049.09,685.387 1049.65,685.387 1050.2,685.387 1050.76,685.387 1051.32,685.387 1051.88,685.387 1052.44,685.387 1053,685.387 1053.56,685.387 1054.12,685.387 1054.68,685.387 1055.24,685.387 1055.8,685.387 1056.36,685.387 1056.92,685.387 1057.48,685.387 1058.03,685.387 1058.59,685.387 1059.15,685.387 1059.71,685.387 1060.27,685.387 1060.83,685.387 1061.39,685.387 1061.95,685.387 1062.51,685.387 1063.07,685.387 1063.63,685.387 1064.19,685.387 1064.75,685.387 1065.3,685.387 1065.86,685.387 1066.42,685.387 1066.98,685.387 1067.54,685.387 1068.1,685.387 1068.66,685.387 1069.22,685.387 1069.78,685.387 1070.34,685.387 1070.9,685.387 1071.46,685.387 1072.02,685.387 1072.57,685.387 1073.13,685.387 1073.69,685.387 1074.25,685.387 1074.81,685.387 1075.37,685.387 1075.93,685.387 1076.49,685.387 1077.05,685.387 1077.61,685.387 1078.17,685.387 1078.73,685.387 1079.29,685.387 1079.85,685.387 1080.4,685.387 1080.96,685.387 1081.52,685.387 1082.08,685.387 1082.64,685.387 1083.2,685.387 1083.76,685.387 1084.32,685.387 1084.88,685.387 1085.44,685.387 1086,685.387 1086.56,685.387 1087.12,685.387 1087.67,685.387 1088.23,685.387 1088.79,685.387 1089.35,685.387 1089.91,685.387 1090.47,685.387 1091.03,685.387 1091.59,685.387 1092.15,685.387 1092.71,685.387 1093.27,685.387 1093.83,685.387 1094.39,685.387 1094.94,685.387 1095.5,685.387 1096.06,685.387 1096.62,685.387 1097.18,685.387 1097.74,685.387 1098.3,685.387 1098.86,685.387 1099.42,685.387 1099.98,685.387 1100.54,685.387 1101.1,685.387 1101.66,685.387 1102.22,685.387 1102.77,685.387 1103.33,685.387 1103.89,685.387 1104.45,685.387 1105.01,685.387 1105.57,685.387 1106.13,685.387 1106.69,685.387 1107.25,685.387 1107.81,685.387 1108.37,685.387 1108.93,685.387 1109.49,685.387 1110.04,685.387 1110.6,685.387 1111.16,685.387 1111.72,685.387 1112.28,685.387 1112.84,685.387 1113.4,685.387 1113.96,685.387 1114.52,685.387 1115.08,685.387 1115.64,685.387 1116.2,685.387 1116.76,685.387 1117.31,685.387 1117.87,685.387 1118.43,685.387 1118.99,685.387 1119.55,685.387 1120.11,685.387 1120.67,685.387 1121.23,685.387 1121.79,685.387 1122.35,685.387 1122.91,685.387 1123.47,685.387 1124.03,685.387 1124.59,685.387 1125.14,685.387 1125.7,685.387 1126.26,685.387 1126.82,685.387 1127.38,685.387 1127.94,685.387 1128.5,685.387 1129.06,685.387 1129.62,685.387 1130.18,685.387 1130.74,685.387 1131.3,685.387 1131.86,685.387 1132.41,685.387 1132.97,685.387 1133.53,685.387 1134.09,685.387 1134.65,685.387 1135.21,685.387 1135.77,685.387 1136.33,685.387 1136.89,685.387 1137.45,685.387 1138.01,685.387 1138.57,685.387 1139.13,685.387 1139.68,685.387 1140.24,685.387 1140.8,685.387 1141.36,685.387 1141.92,685.387 1142.48,685.387 1143.04,685.387 1143.6,685.387 1144.16,685.387 1144.72,685.387 1145.28,685.387 1145.84,685.387 1146.4,685.387 1146.96,685.387 1147.51,685.387 1148.07,685.387 1148.63,685.387 1149.19,685.387 1149.75,685.387 1150.31,685.387 1150.87,685.387 1151.43,685.387 1151.99,685.387 1152.55,685.387 1153.11,685.387 1153.67,685.387 1154.23,685.387 1154.78,685.387 1155.34,685.387 1155.9,685.387 1156.46,685.387 1157.02,685.387 1157.58,685.387 1158.14,685.387 1158.7,685.387 1159.26,685.387 1159.82,685.387 1160.38,685.387 1160.94,685.387 1161.5,685.387 1162.05,685.387 1162.61,685.387 1163.17,685.387 1163.73,685.387 1164.29,685.387 1164.85,685.387 1165.41,685.387 1165.97,685.387 1166.53,685.387 1167.09,685.387 1167.65,685.387 1168.21,685.387 1168.77,685.387 1169.33,685.387 1169.88,685.387 1170.44,685.387 1171,685.387 1171.56,685.387 1172.12,685.387 1172.68,685.387 1173.24,685.387 1173.8,685.387 1174.36,685.387 1174.92,685.387 1175.48,685.387 1176.04,685.387 1176.6,685.387 1177.15,685.387 1177.71,685.387 1178.27,685.387 1178.83,685.387 1179.39,685.387 1179.95,685.387 1180.51,685.387 1181.07,685.387 1181.63,685.387 1182.19,685.387 1182.75,685.387 1183.31,685.387 1183.87,685.387 1184.43,685.387 1184.98,685.387 1185.54,685.387 1186.1,685.387 1186.66,685.387 1187.22,685.387 1187.78,685.387 1188.34,685.387 1188.9,685.387 1189.46,685.387 1190.02,685.387 1190.58,685.387 1191.14,685.387 1191.7,685.387 1192.25,685.387 1192.81,685.387 1193.37,685.387 1193.93,685.387 1194.49,685.387 1195.05,685.387 1195.61,685.387 1196.17,685.387 1196.73,685.387 1197.29,685.387 1197.85,685.387 1198.41,685.387 1198.97,685.387 1199.52,685.387 1200.08,685.387 1200.64,685.387 1201.2,685.387 1201.76,685.387 1202.32,685.387 1202.88,685.387 1203.44,685.387 1204,685.387 1204.56,685.387 1205.12,685.387 1205.68,685.387 1206.24,685.387 1206.8,685.387 1207.35,685.387 1207.91,685.387 1208.47,685.387 1209.03,685.387 1209.59,685.387 1210.15,685.387 1210.71,685.387 1211.27,685.387 1211.83,685.387 1212.39,685.387 1212.95,685.387 1213.51,685.387 1214.07,685.387 1214.62,685.387 1215.18,685.387 1215.74,685.387 1216.3,685.387 1216.86,685.387 1217.42,685.387 1217.98,685.387 1218.54,685.387 1219.1,685.387 1219.66,685.387 1220.22,685.387 1220.78,685.387 1221.34,685.387 1221.89,685.387 1222.45,685.387 1223.01,685.387 1223.57,685.387 1224.13,685.387 1224.69,685.387 1225.25,685.387 1225.81,685.387 1226.37,685.387 1226.93,685.387 1227.49,685.387 1228.05,685.387 1228.61,685.387 1229.17,685.387 1229.72,685.387 1230.28,685.387 1230.84,685.387 1231.4,685.387 1231.96,685.387 1232.52,685.387 1233.08,685.387 1233.64,685.387 1234.2,685.387 1234.76,685.387 1235.32,685.387 1235.88,685.387 1236.44,685.387 1236.99,685.387 1237.55,685.387 1238.11,685.387 1238.67,685.387 1239.23,685.387 1239.79,685.387 1240.35,685.387 1240.91,685.387 1241.47,685.387 1242.03,685.387 1242.59,685.387 1243.15,685.387 1243.71,685.387 1244.26,685.387 1244.82,685.387 1245.38,685.387 1245.94,685.387 1246.5,685.387 1247.06,685.387 1247.62,685.387 1248.18,685.387 1248.74,685.387 1249.3,685.387 1249.86,685.387 1250.42,685.387 1250.98,685.387 1251.54,685.387 1252.09,685.387 1252.65,685.387 1253.21,685.387 1253.77,685.387 1254.33,685.387 1254.89,685.387 1255.45,685.387 1256.01,685.387 1256.57,685.387 1257.13,685.387 1257.69,685.387 1258.25,685.387 1258.81,685.387 1259.36,685.387 1259.92,685.387 1260.48,685.387 1261.04,685.387 1261.6,685.387 1262.16,685.387 1262.72,685.387 1263.28,685.387 1263.84,685.387 1264.4,685.387 1264.96,685.387 1265.52,685.387 1266.08,685.387 1266.63,685.387 1267.19,685.387 1267.75,685.387 1268.31,685.387 1268.87,685.387 1269.43,685.387 1269.99,685.387 1270.55,685.387 1271.11,685.387 1271.67,685.387 1272.23,685.387 1272.79,685.387 1273.35,685.387 1273.91,685.387 1274.46,685.387 1275.02,685.387 1275.58,685.387 1276.14,685.387 1276.7,685.387 1277.26,685.387 1277.82,685.387 1278.38,685.387 1278.94,685.387 1279.5,685.387 1280.06,685.387 1280.62,685.387 1281.18,685.387 1281.73,685.387 1282.29,685.387 1282.85,685.387 1283.41,685.387 1283.97,685.387 1284.53,685.387 1285.09,685.387 1285.65,685.387 1286.21,685.387 1286.77,685.387 1287.33,685.387 1287.89,685.387 1288.45,685.387 1289,685.387 1289.56,685.387 1290.12,685.387 1290.68,685.387 1291.24,685.387 1291.8,685.387 1292.36,685.387 1292.92,685.387 1293.48,685.387 1294.04,685.387 1294.6,685.387 1295.16,685.387 1295.72,685.387 1296.28,685.387 1296.83,685.387 1297.39,685.387 1297.95,685.387 1298.51,685.387 1299.07,685.387 1299.63,685.387 1300.19,685.387 1300.75,685.387 1301.31,685.387 1301.87,685.387 1302.43,685.387 1302.99,685.387 1303.55,685.387 1304.1,685.387 1304.66,685.387 1305.22,685.387 1305.78,685.387 1306.34,685.387 1306.9,685.387 1307.46,685.387 1308.02,685.387 1308.58,685.387 1309.14,685.387 1309.7,685.387 1310.26,685.387 1310.82,685.387 1311.38,685.387 1311.93,685.387 1312.49,685.387 1313.05,685.387 1313.61,685.387 1314.17,685.387 1314.73,685.387 1315.29,685.387 1315.85,685.387 1316.41,685.387 1316.97,685.387 1317.53,685.387 1318.09,685.387 1318.65,685.387 1319.2,685.387 1319.76,685.387 1320.32,685.387 1320.88,685.387 1321.44,685.387 1322,685.387 1322.56,685.387 1323.12,685.387 1323.68,685.387 1324.24,685.387 1324.8,685.387 1325.36,685.387 1325.92,685.387 1326.47,685.387 1327.03,685.387 1327.59,685.387 1328.15,685.387 1328.71,685.387 1329.27,685.387 1329.83,685.387 1330.39,685.387 1330.95,685.387 1331.51,685.387 1332.07,685.387 1332.63,685.387 1333.19,685.387 1333.75,685.387 1334.3,685.387 1334.86,685.387 1335.42,685.387 1335.98,685.387 1336.54,685.387 1337.1,685.387 1337.66,685.387 1338.22,685.387 1338.78,685.387 1339.34,685.387 1339.9,685.387 1340.46,685.387 1341.02,685.387 1341.57,685.387 1342.13,685.387 1342.69,685.387 1343.25,685.387 1343.81,685.387 1344.37,685.387 1344.93,685.387 1345.49,685.387 1346.05,685.387 1346.61,685.387 1347.17,685.387 1347.73,685.387 1348.29,685.387 1348.84,685.387 1349.4,685.387 1349.96,685.387 1350.52,685.387 1351.08,685.387 1351.64,685.387 1352.2,685.387 1352.76,685.387 1353.32,685.387 1353.88,685.387 1354.44,685.387 1355,685.387 1355.56,685.387 1356.12,685.387 1356.67,685.387 1357.23,685.387 1357.79,685.387 1358.35,685.387 1358.91,685.387 1359.47,685.387 1360.03,685.387 1360.59,685.387 1361.15,685.387 1361.71,685.387 1362.27,685.387 1362.83,685.387 1363.39,685.387 1363.94,685.387 1364.5,685.387 1365.06,685.387 1365.62,685.387 1366.18,685.387 1366.74,685.387 1367.3,685.387 1367.86,685.387 1368.42,685.387 1368.98,685.387 1369.54,685.387 1370.1,685.387 1370.66,685.387 1371.21,685.387 1371.77,685.387 1372.33,685.387 1372.89,685.387 1373.45,685.387 1374.01,685.387 1374.57,685.387 1375.13,685.387 1375.69,685.387 1376.25,685.387 1376.81,685.387 1377.37,685.387 1377.93,685.387 1378.49,685.387 1379.04,685.387 1379.6,685.387 1380.16,685.387 1380.72,685.387 1381.28,685.387 1381.84,685.387 1382.4,685.387 1382.96,685.387 1383.52,685.387 1384.08,685.387 1384.64,685.387 1385.2,685.387 1385.76,685.387 1386.31,685.387 1386.87,685.387 1387.43,685.387 1387.99,685.387 1388.55,685.387 1389.11,685.387 1389.67,685.387 1390.23,685.387 1390.79,685.387 1391.35,685.387 1391.91,685.387 1392.47,685.387 1393.03,685.387 1393.58,685.387 1394.14,685.387 1394.7,685.387 1395.26,685.387 1395.82,685.387 1396.38,685.387 1396.94,685.387 1397.5,685.387 1398.06,685.387 1398.62,685.387 1399.18,685.387 1399.74,685.387 1400.3,685.387 1400.86,685.387 1401.41,685.387 1401.97,685.387 1402.53,685.387 1403.09,685.387 1403.65,685.387 1404.21,685.387 1404.77,685.387 1405.33,685.387 1405.89,685.387 1406.45,685.387 1407.01,685.387 1407.57,685.387 1408.13,685.387 1408.68,685.387 1409.24,685.387 1409.8,685.387 1410.36,685.387 1410.92,685.387 1411.48,685.387 1412.04,685.387 1412.6,685.387 1413.16,685.387 1413.72,685.387 1414.28,685.387 1414.84,685.387 1415.4,685.387 1415.95,685.387 1416.51,685.387 1417.07,685.387 1417.63,685.387 1418.19,685.387 1418.75,685.387 1419.31,685.387 1419.87,685.387 1420.43,685.387 1420.99,685.387 1421.55,685.387 1422.11,685.387 1422.67,685.387 1423.23,685.387 1423.78,685.387 1424.34,685.387 1424.9,685.387 1425.46,685.387 1426.02,685.387 1426.58,685.387 1427.14,685.387 1427.7,685.387 1428.26,685.387 1428.82,685.387 1429.38,685.387 1429.94,685.387 1430.5,685.387 1431.05,685.387 1431.61,685.387 1432.17,685.387 1432.73,685.387 1433.29,685.387 1433.85,685.387 1434.41,685.387 1434.97,685.387 1435.53,685.387 1436.09,685.387 1436.65,685.387 1437.21,685.387 1437.77,685.387 1438.33,685.387 1438.88,685.387 1439.44,685.387 1440,685.387 1440.56,685.387 1441.12,685.387 1441.68,685.387 1442.24,685.387 1442.8,685.387 1443.36,685.387 1443.92,685.387 1444.48,685.387 1445.04,685.387 1445.6,685.387 1446.15,685.387 1446.71,685.387 1447.27,685.387 1447.83,685.387 1448.39,685.387 1448.95,685.387 1449.51,685.387 1450.07,685.387 1450.63,685.387 1451.19,685.387 1451.75,685.387 1452.31,685.387 1452.87,685.387 1453.42,685.387 1453.98,685.387 1454.54,685.387 1455.1,685.387 1455.66,685.387 1456.22,685.387 1456.78,685.387 1457.34,685.387 1457.9,685.387 1458.46,685.387 1459.02,685.387 1459.58,685.387 1460.14,685.387 1460.7,685.387 1461.25,685.387 1461.81,685.387 1462.37,685.387 1462.93,685.387 1463.49,685.387 1464.05,685.387 1464.61,685.387 1465.17,685.387 1465.73,685.387 1466.29,685.387 1466.85,685.387 1467.41,685.387 1467.97,685.387 1468.52,685.387 1469.08,685.387 1469.64,685.387 1470.2,685.387 1470.76,685.387 1471.32,685.387 1471.88,685.387 1472.44,685.387 1473,685.387 1473.56,685.387 1474.12,685.387 1474.68,685.387 1475.24,685.387 1475.79,685.387 1476.35,685.387 1476.91,685.387 1477.47,685.387 1478.03,685.387 1478.59,685.387 1479.15,685.387 1479.71,685.387 1480.27,685.387 1480.83,685.387 1481.39,685.387 1481.95,685.387 1482.51,685.387 1483.07,685.387 1483.62,685.387 1484.18,685.387 1484.74,685.387 1485.3,685.387 1485.86,685.387 1486.42,685.387 1486.98,685.387 1487.54,685.387 1488.1,685.387 1488.66,685.387 1489.22,685.387 1489.78,685.387 1490.34,685.387 1490.89,685.387 1491.45,685.387 1492.01,685.387 1492.57,685.387 1493.13,685.387 1493.69,685.387 1494.25,685.387 1494.81,685.387 1495.37,685.387 1495.93,685.387 1496.49,685.387 1497.05,685.387 1497.61,685.387 1498.16,685.387 1498.72,685.387 1499.28,685.387 1499.84,685.387 1500.4,685.387 1500.96,685.387 1501.52,685.387 1502.08,685.387 1502.64,685.387 1503.2,685.387 1503.76,685.387 1504.32,685.387 1504.88,685.387 1505.44,685.387 1505.99,685.387 1506.55,685.387 1507.11,685.387 1507.67,685.387 1508.23,685.387 1508.79,685.387 1509.35,685.387 1509.91,685.387 1510.47,685.387 1511.03,685.387 1511.59,685.387 1512.15,685.387 1512.71,685.387 1513.26,685.387 1513.82,685.387 1514.38,685.387 1514.94,685.387 1515.5,685.387 1516.06,685.387 1516.62,685.387 1517.18,685.387 1517.74,685.387 1518.3,685.387 1518.86,685.387 1519.42,685.387 1519.98,685.387 1520.53,685.387 1521.09,685.387 1521.65,685.387 1522.21,685.387 1522.77,685.387 1523.33,685.387 1523.89,685.387 1524.45,685.387 1525.01,685.387 1525.57,685.387 1526.13,685.387 1526.69,685.387 1527.25,685.387 1527.81,685.387 1528.36,685.387 1528.92,685.387 1529.48,685.387 1530.04,685.387 1530.6,685.387 1531.16,685.387 1531.72,685.387 1532.28,685.387 1532.84,685.387 1533.4,685.387 1533.96,685.387 1534.52,685.387 1535.08,685.387 1535.63,685.387 1536.19,685.387 1536.75,685.387 1537.31,685.387 1537.87,685.387 1538.43,685.387 1538.99,685.387 1539.55,685.387 1540.11,685.387 1540.67,685.387 1541.23,685.387 1541.79,685.387 1542.35,685.387 1542.9,685.387 1543.46,685.387 1544.02,685.387 1544.58,685.387 1545.14,685.387 1545.7,685.387 1546.26,685.387 1546.82,685.387 1547.38,685.387 1547.94,685.387 1548.5,685.387 1549.06,685.387 1549.62,685.387 1550.18,685.387 1550.73,685.387 1551.29,685.387 1551.85,685.387 1552.41,685.387 1552.97,685.387 1553.53,685.387 1554.09,685.387 1554.65,685.387 1555.21,685.387 1555.77,685.387 1556.33,685.387 1556.89,685.387 1557.45,685.387 1558,685.387 1558.56,685.387 1559.12,685.387 1559.68,685.387 1560.24,685.387 1560.8,685.387 1561.36,685.387 1561.92,685.387 1562.48,685.387 1563.04,685.387 1563.6,685.387 1564.16,685.387 1564.72,685.387 1565.28,685.387 1565.83,685.387 1566.39,685.387 1566.95,685.387 1567.51,685.387 1568.07,685.387 1568.63,685.387 1569.19,685.387 1569.75,685.387 1570.31,685.387 1570.87,685.387 1571.43,685.387 1571.99,685.387 1572.55,685.387 1573.1,685.387 1573.66,685.387 1574.22,685.387 1574.78,685.387 1575.34,685.387 1575.9,685.387 1576.46,685.387 1577.02,685.387 1577.58,685.387 1578.14,685.387 1578.7,685.387 1579.26,685.387 1579.82,685.387 1580.37,685.387 1580.93,685.387 1581.49,685.387 1582.05,685.387 1582.61,685.387 1583.17,685.387 1583.73,685.387 1584.29,685.387 1584.85,685.387 1585.41,685.387 1585.97,685.387 1586.53,685.387 1587.09,685.387 1587.65,685.387 1588.2,685.387 1588.76,685.387 1589.32,685.387 1589.88,685.387 1590.44,685.387 1591,685.387 1591.56,685.387 1592.12,685.387 1592.68,685.387 1593.24,685.387 1593.8,685.387 1594.36,685.387 1594.92,685.387 1595.47,685.387 1596.03,685.387 1596.59,685.387 1597.15,685.387 1597.71,685.387 1598.27,685.387 1598.83,685.387 1599.39,685.387 1599.95,685.387 1600.51,685.387 1601.07,685.387 1601.63,685.387 1602.19,685.387 1602.74,685.387 1603.3,685.387 1603.86,685.387 1604.42,685.387 1604.98,685.387 1605.54,685.387 1606.1,685.387 1606.66,685.387 1607.22,685.387 1607.78,685.387 1608.34,685.387 1608.9,685.387 1609.46,685.387 1610.02,685.387 1610.57,685.387 1611.13,685.387 1611.69,685.387 1612.25,685.387 1612.81,685.387 1613.37,685.387 1613.93,685.387 1614.49,685.387 1615.05,685.387 1615.61,685.387 1616.17,685.387 1616.73,685.387 1617.29,685.387 1617.84,685.387 1618.4,685.387 1618.96,685.387 1619.52,685.387 1620.08,685.387 1620.64,685.387 1621.2,685.387 1621.76,685.387 1622.32,685.387 1622.88,685.387 1623.44,685.387 1624,685.387 1624.56,685.387 1625.11,685.387 1625.67,685.387 1626.23,685.387 1626.79,685.387 1627.35,685.387 1627.91,685.387 1628.47,685.387 1629.03,685.387 1629.59,685.387 1630.15,685.387 1630.71,685.387 1631.27,685.387 1631.83,685.387 1632.39,685.387 1632.94,685.387 1633.5,685.387 1634.06,685.387 1634.62,685.387 1635.18,685.387 1635.74,685.387 1636.3,685.387 1636.86,685.387 1637.42,685.387 1637.98,685.387 1638.54,685.387 1639.1,685.387 1639.66,685.387 1640.21,685.387 1640.77,685.387 1641.33,685.387 1641.89,685.387 1642.45,685.387 1643.01,685.387 1643.57,685.387 1644.13,685.387 1644.69,685.387 1645.25,685.387 1645.81,685.387 1646.37,685.387 1646.93,685.387 1647.48,685.387 1648.04,685.387 1648.6,685.387 1649.16,685.387 1649.72,685.387 1650.28,685.387 1650.84,685.387 1651.4,685.387 1651.96,685.387 1652.52,685.387 1653.08,685.387 1653.64,685.387 1654.2,685.387 1654.76,685.387 1655.31,685.387 1655.87,685.387 1656.43,685.387 1656.99,685.387 1657.55,685.387 1658.11,685.387 1658.67,685.387 1659.23,685.387 1659.79,685.387 1660.35,685.387 1660.91,685.387 1661.47,685.387 1662.03,685.387 1662.58,685.387 1663.14,685.387 1663.7,685.387 1664.26,685.387 1664.82,685.387 1665.38,685.387 1665.94,685.387 1666.5,685.387 1667.06,685.387 1667.62,685.387 1668.18,685.387 1668.74,685.387 1669.3,685.387 1669.85,685.387 1670.41,685.387 1670.97,685.387 1671.53,685.387 1672.09,685.387 1672.65,685.387 1673.21,685.387 1673.77,685.387 1674.33,685.387 1674.89,685.387 1675.45,685.387 1676.01,685.387 1676.57,685.387 1677.13,685.387 1677.68,685.387 1678.24,685.387 1678.8,685.387 1679.36,685.387 1679.92,685.387 1680.48,685.387 1681.04,685.387 1681.6,685.387 1682.16,685.387 1682.72,685.387 1683.28,685.387 1683.84,685.387 1684.4,685.387 1684.95,685.387 1685.51,685.387 1686.07,685.387 1686.63,685.387 1687.19,685.387 1687.75,685.387 1688.31,685.387 1688.87,685.387 1689.43,685.387 1689.99,685.387 1690.55,685.387 1691.11,685.387 1691.67,685.387 1692.23,685.387 1692.78,685.387 1693.34,685.387 1693.9,685.387 1694.46,685.387 1695.02,685.387 1695.58,685.387 1696.14,685.387 1696.7,685.387 1697.26,685.387 1697.82,685.387 1698.38,685.387 1698.94,685.387 1699.5,685.387 1700.05,685.387 1700.61,685.387 1701.17,685.387 1701.73,685.387 1702.29,685.387 1702.85,685.387 1703.41,685.387 1703.97,685.387 1704.53,685.387 1705.09,685.387 1705.65,685.387 1706.21,685.387 1706.77,685.387 1707.32,685.387 1707.88,685.387 1708.44,685.387 1709,685.387 1709.56,685.387 1710.12,685.387 1710.68,685.387 1711.24,685.387 1711.8,685.387 1712.36,685.387 1712.92,685.387 1713.48,685.387 1714.04,685.387 1714.6,685.387 1715.15,685.387 1715.71,685.387 1716.27,685.387 1716.83,685.387 1717.39,685.387 1717.95,685.387 1718.51,685.387 1719.07,685.387 1719.63,685.387 1720.19,685.387 1720.75,685.387 1721.31,685.387 1721.87,685.387 1722.42,685.387 1722.98,685.387 1723.54,685.387 1724.1,685.387 1724.66,685.387 1725.22,685.387 1725.78,685.387 1726.34,685.387 1726.9,685.387 1727.46,685.387 1728.02,685.387 1728.58,685.387 1729.14,685.387 1729.69,685.387 1730.25,685.387 1730.81,685.387 1731.37,685.387 1731.93,685.387 1732.49,685.387 1733.05,685.387 1733.61,685.387 1734.17,685.387 1734.73,685.387 1735.29,685.387 1735.85,685.387 1736.41,685.387 1736.97,685.387 1737.52,685.387 1738.08,685.387 1738.64,685.387 1739.2,685.387 1739.76,685.387 1740.32,685.387 1740.88,685.387 1741.44,685.387 1742,685.387 1742.56,685.387 1743.12,685.387 1743.68,685.387 1744.24,685.387 1744.79,685.387 1745.35,685.387 1745.91,685.387 1746.47,685.387 1747.03,685.387 1747.59,685.387 1748.15,685.387 1748.71,685.387 1749.27,685.387 1749.83,685.387 1750.39,685.387 1750.95,685.387 1751.51,685.387 1752.06,685.387 1752.62,685.387 1753.18,685.387 1753.74,685.387 1754.3,685.387 1754.86,685.387 1755.42,685.387 1755.98,685.387 1756.54,685.387 1757.1,685.387 1757.66,685.387 1758.22,685.387 1758.78,685.387 1759.34,685.387 1759.89,685.387 1760.45,685.387 1761.01,685.387 1761.57,685.387 1762.13,685.387 1762.69,685.387 1763.25,685.387 1763.81,685.387 1764.37,685.387 1764.93,685.387 1765.49,685.387 1766.05,685.387 1766.61,685.387 1767.16,685.387 1767.72,685.387 1768.28,685.387 1768.84,685.387 1769.4,685.387 1769.96,685.387 1770.52,685.387 1771.08,685.387 1771.64,685.387 1772.2,685.387 1772.76,685.387 1773.32,685.387 1773.88,685.387 1774.43,685.387 1774.99,685.387 1775.55,685.387 1776.11,685.387 1776.67,685.387 1777.23,685.387 1777.79,685.387 1778.35,685.387 1778.91,685.387 1779.47,685.387 1780.03,685.387 1780.59,685.387 1781.15,685.387 1781.71,685.387 1782.26,685.387 1782.82,685.387 1783.38,685.387 1783.94,685.387 1784.5,685.387 1785.06,685.387 1785.62,685.387 1786.18,685.387 1786.74,685.387 1787.3,685.387 1787.86,685.387 1788.42,685.387 1788.98,685.387 1789.53,685.387 1790.09,685.387 1790.65,685.387 1791.21,685.387 1791.77,685.387 1792.33,685.387 1792.89,685.387 1793.45,685.387 1794.01,685.387 1794.57,685.387 1795.13,685.387 1795.69,685.387 1796.25,685.387 1796.8,685.387 1797.36,685.387 1797.92,685.387 1798.48,685.387 1799.04,685.387 1799.6,685.387 1800.16,685.387 1800.72,685.387 1801.28,685.387 1801.84,685.387 1802.4,685.387 1802.96,685.387 1803.52,685.387 1804.08,685.387 1804.63,685.387 1805.19,685.387 1805.75,685.387 1806.31,685.387 1806.87,685.387 1807.43,685.387 1807.99,685.387 1808.55,685.387 1809.11,685.387 1809.67,685.387 1810.23,685.387 1810.79,685.387 1811.35,685.387 1811.9,685.387 1812.46,685.387 1813.02,685.387 1813.58,685.387 1814.14,685.387 1814.7,685.387 1815.26,685.387 1815.82,685.387 1816.38,685.387 1816.94,685.387 1817.5,685.387 1818.06,685.387 1818.62,685.387 1819.18,685.387 1819.73,685.387 1820.29,685.387 1820.85,685.387 1821.41,685.387 1821.97,685.387 1822.53,685.387 1823.09,685.387 1823.65,685.387 1824.21,685.387 1824.77,685.387 1825.33,685.387 1825.89,685.387 1826.45,685.387 1827,685.387 1827.56,685.387 1828.12,685.387 1828.68,685.387 1829.24,685.387 1829.8,685.387 1830.36,685.387 1830.92,685.387 1831.48,685.387 1832.04,685.387 1832.6,685.387 1833.16,685.387 1833.72,685.387 1834.27,685.387 1834.83,685.387 1835.39,685.387 1835.95,685.387 1836.51,685.387 1837.07,685.387 1837.63,685.387 1838.19,685.387 \"/>\n<path clip-path=\"url(#clip963)\" d=\"M720.247 683.644 L720.806 683.644 L721.365 683.644 L721.924 683.644 L722.484 683.644 L723.043 683.644 L723.602 683.644 L724.161 683.644 L724.721 683.644 L725.28 683.644 L725.839 683.644 L726.398 683.644 L726.958 683.644 L727.517 683.644 L728.076 683.644 L728.635 683.644 L729.195 683.644 L729.754 683.644 L730.313 683.644 L730.872 683.644 L731.432 683.644 L731.991 683.644 L732.55 683.644 L733.109 683.644 L733.669 683.644 L734.228 683.644 L734.787 683.644 L735.346 683.644 L735.906 683.644 L736.465 683.644 L737.024 683.644 L737.583 683.644 L738.143 683.644 L738.702 683.644 L739.261 683.644 L739.82 683.644 L740.38 683.644 L740.939 683.644 L741.498 683.644 L742.057 683.644 L742.617 683.644 L743.176 683.644 L743.735 683.644 L744.294 683.644 L744.854 683.644 L745.413 683.644 L745.972 683.644 L746.531 683.644 L747.091 683.644 L747.65 683.644 L748.209 683.644 L748.768 683.644 L749.328 683.644 L749.887 683.644 L750.446 683.644 L751.005 683.644 L751.565 683.644 L752.124 683.644 L752.683 683.644 L753.242 683.644 L753.802 683.644 L754.361 683.644 L754.92 683.644 L755.479 683.644 L756.039 683.644 L756.598 683.644 L757.157 683.644 L757.716 683.644 L758.276 683.644 L758.835 683.644 L759.394 683.644 L759.953 683.644 L760.513 683.644 L761.072 683.644 L761.631 683.644 L762.19 683.644 L762.75 683.644 L763.309 683.644 L763.868 683.644 L764.427 683.644 L764.987 683.644 L765.546 683.644 L766.105 683.644 L766.664 683.644 L767.224 683.644 L767.783 683.644 L768.342 683.644 L768.901 683.644 L769.461 683.644 L770.02 683.644 L770.579 683.644 L771.138 683.644 L771.698 683.644 L772.257 683.644 L772.816 683.644 L773.375 683.644 L773.935 683.644 L774.494 683.644 L775.053 683.644 L775.612 683.644 L776.172 683.644 L776.731 683.644 L777.29 683.644 L777.849 683.644 L778.409 683.644 L778.968 683.644 L779.527 683.644 L780.086 683.644 L780.646 683.644 L781.205 683.644 L781.764 683.644 L782.323 683.644 L782.883 683.644 L783.442 683.644 L784.001 683.644 L784.56 683.644 L785.12 683.644 L785.679 683.644 L786.238 683.644 L786.797 683.644 L787.357 683.644 L787.916 683.644 L788.475 683.644 L789.034 683.644 L789.594 683.644 L790.153 683.644 L790.712 683.644 L791.271 683.644 L791.831 683.644 L792.39 683.644 L792.949 683.644 L793.508 683.644 L794.068 683.644 L794.627 683.644 L795.186 683.644 L795.745 683.644 L796.305 683.644 L796.864 683.644 L797.423 683.644 L797.982 683.644 L798.542 683.644 L799.101 683.644 L799.66 683.644 L800.219 683.644 L800.779 683.644 L801.338 683.644 L801.897 683.644 L802.456 683.644 L803.016 683.644 L803.575 683.644 L804.134 683.644 L804.693 683.644 L805.253 683.644 L805.812 683.644 L806.371 683.644 L806.931 683.644 L807.49 683.644 L808.049 683.644 L808.608 683.644 L809.168 683.644 L809.727 683.644 L810.286 683.644 L810.845 683.644 L811.405 683.644 L811.964 683.644 L812.523 683.644 L813.082 683.644 L813.642 683.644 L814.201 683.644 L814.76 683.644 L815.319 683.644 L815.879 683.644 L816.438 683.644 L816.997 683.644 L817.556 683.644 L818.116 683.644 L818.675 683.644 L819.234 683.644 L819.793 683.644 L820.353 683.644 L820.912 683.644 L821.471 683.644 L822.03 683.644 L822.59 683.644 L823.149 683.644 L823.708 683.644 L824.267 683.644 L824.827 683.644 L825.386 683.644 L825.945 683.644 L826.504 683.644 L827.064 683.644 L827.623 683.644 L828.182 683.644 L828.741 683.644 L829.301 683.644 L829.86 683.644 L830.419 683.644 L830.978 683.644 L831.538 683.644 L832.097 683.644 L832.656 683.644 L833.215 683.644 L833.775 683.644 L834.334 683.644 L834.893 683.644 L835.452 683.644 L836.012 683.644 L836.571 683.644 L837.13 683.644 L837.689 683.644 L838.249 683.644 L838.808 683.644 L839.367 683.644 L839.926 683.644 L840.486 683.644 L841.045 683.644 L841.604 683.644 L842.163 683.644 L842.723 683.644 L843.282 683.644 L843.841 683.644 L844.4 683.644 L844.96 683.644 L845.519 683.644 L846.078 683.644 L846.637 683.644 L847.197 683.644 L847.756 683.644 L848.315 683.644 L848.874 683.644 L849.434 683.644 L849.993 683.644 L850.552 683.644 L851.111 683.644 L851.671 683.644 L852.23 683.644 L852.789 683.644 L853.348 683.644 L853.908 683.644 L854.467 683.644 L855.026 683.644 L855.585 683.644 L856.145 683.644 L856.704 683.644 L857.263 683.644 L857.822 683.644 L858.382 683.644 L858.941 683.644 L859.5 683.644 L860.059 683.644 L860.619 683.644 L861.178 683.644 L861.737 683.644 L862.296 683.644 L862.856 683.644 L863.415 683.644 L863.974 683.644 L864.533 683.644 L865.093 683.644 L865.652 683.644 L866.211 683.644 L866.77 683.644 L867.33 683.644 L867.889 683.644 L868.448 683.644 L869.007 683.644 L869.567 683.644 L870.126 683.644 L870.685 683.644 L871.244 683.644 L871.804 683.644 L872.363 683.644 L872.922 683.644 L873.481 683.644 L874.041 683.644 L874.6 683.644 L875.159 683.644 L875.718 683.644 L876.278 683.644 L876.837 683.644 L877.396 683.644 L877.955 683.644 L878.515 683.644 L879.074 683.644 L879.633 683.644 L880.192 683.644 L880.752 683.644 L881.311 683.644 L881.87 683.644 L882.429 683.644 L882.989 683.644 L883.548 683.644 L884.107 683.644 L884.666 683.644 L885.226 683.644 L885.785 683.644 L886.344 683.644 L886.903 683.644 L887.463 683.644 L888.022 683.644 L888.581 683.644 L889.14 683.644 L889.7 683.644 L890.259 683.644 L890.818 683.644 L891.377 683.644 L891.937 683.644 L892.496 683.644 L893.055 683.644 L893.614 683.644 L894.174 683.644 L894.733 683.644 L895.292 683.644 L895.851 683.644 L896.411 683.644 L896.97 683.644 L897.529 683.644 L898.088 683.644 L898.648 683.644 L899.207 683.644 L899.766 683.644 L900.325 683.644 L900.885 683.644 L901.444 683.644 L902.003 683.644 L902.562 683.644 L903.122 683.644 L903.681 683.644 L904.24 683.644 L904.799 683.644 L905.359 683.644 L905.918 683.644 L906.477 683.644 L907.036 683.644 L907.596 683.644 L908.155 683.644 L908.714 683.644 L909.273 683.644 L909.833 683.644 L910.392 683.644 L910.951 683.644 L911.51 683.644 L912.07 683.644 L912.629 683.644 L913.188 683.644 L913.747 683.644 L914.307 683.644 L914.866 683.644 L915.425 683.644 L915.984 683.644 L916.544 683.644 L917.103 683.644 L917.662 683.644 L918.221 683.644 L918.781 683.644 L919.34 683.644 L919.899 683.644 L920.458 683.644 L921.018 683.644 L921.577 683.644 L922.136 683.644 L922.695 683.644 L923.255 683.644 L923.814 683.644 L924.373 683.644 L924.932 683.644 L925.492 683.644 L926.051 683.644 L926.61 683.644 L927.169 683.644 L927.729 683.644 L928.288 683.644 L928.847 683.644 L929.406 683.644 L929.966 683.644 L930.525 683.644 L931.084 683.644 L931.644 683.644 L932.203 683.644 L932.762 683.644 L933.321 683.644 L933.881 683.644 L934.44 683.644 L934.999 683.644 L935.558 683.644 L936.118 683.644 L936.677 683.644 L937.236 683.644 L937.795 683.644 L938.355 683.644 L938.914 683.644 L939.473 683.644 L940.032 683.644 L940.592 683.644 L941.151 683.644 L941.71 683.644 L942.269 683.644 L942.829 683.644 L943.388 683.644 L943.947 683.644 L944.506 683.644 L945.066 683.644 L945.625 683.644 L946.184 683.644 L946.743 683.644 L947.303 683.644 L947.862 683.644 L948.421 683.644 L948.98 683.644 L949.54 683.644 L950.099 683.644 L950.658 683.644 L951.217 683.644 L951.777 683.644 L952.336 683.644 L952.895 683.644 L953.454 683.644 L954.014 683.644 L954.573 683.644 L955.132 683.644 L955.691 683.644 L956.251 683.644 L956.81 683.644 L957.369 683.644 L957.928 683.644 L958.488 683.644 L959.047 683.644 L959.606 683.644 L960.165 683.644 L960.725 683.644 L961.284 683.644 L961.843 683.644 L962.402 683.644 L962.962 683.644 L963.521 683.644 L964.08 683.644 L964.639 683.644 L965.199 683.644 L965.758 683.644 L966.317 683.644 L966.876 683.644 L967.436 683.644 L967.995 683.644 L968.554 683.644 L969.113 683.644 L969.673 683.644 L970.232 683.644 L970.791 683.644 L971.35 683.644 L971.91 683.644 L972.469 683.644 L973.028 683.644 L973.587 683.644 L974.147 683.644 L974.706 683.644 L975.265 683.644 L975.824 683.644 L976.384 683.644 L976.943 683.644 L977.502 683.644 L978.061 683.644 L978.621 683.644 L979.18 683.644 L979.739 683.644 L980.298 683.644 L980.858 683.644 L981.417 683.644 L981.976 683.644 L982.535 683.644 L983.095 683.644 L983.654 683.644 L984.213 683.644 L984.772 683.644 L985.332 683.644 L985.891 683.644 L986.45 683.644 L987.009 683.644 L987.569 683.644 L988.128 683.644 L988.687 683.644 L989.246 683.644 L989.806 683.644 L990.365 683.644 L990.924 683.644 L991.483 683.644 L992.043 683.644 L992.602 683.644 L993.161 683.644 L993.72 683.644 L994.28 683.644 L994.839 683.644 L995.398 683.644 L995.957 683.644 L996.517 683.644 L997.076 683.644 L997.635 683.644 L998.194 683.644 L998.754 683.644 L999.313 683.644 L999.872 683.644 L1000.43 683.644 L1000.99 683.644 L1001.55 683.644 L1002.11 683.644 L1002.67 683.644 L1003.23 683.644 L1003.79 683.644 L1004.35 683.644 L1004.91 683.644 L1005.46 683.644 L1006.02 683.644 L1006.58 683.644 L1007.14 683.644 L1007.7 683.644 L1008.26 683.644 L1008.82 683.644 L1009.38 683.644 L1009.94 683.644 L1010.5 683.644 L1011.06 683.644 L1011.62 683.644 L1012.18 683.644 L1012.73 683.644 L1013.29 683.644 L1013.85 683.644 L1014.41 683.644 L1014.97 683.644 L1015.53 683.644 L1016.09 683.644 L1016.65 683.644 L1017.21 683.644 L1017.77 683.644 L1018.33 683.644 L1018.89 683.644 L1019.45 683.644 L1020.01 683.644 L1020.56 683.644 L1021.12 683.644 L1021.68 683.644 L1022.24 683.644 L1022.8 683.644 L1023.36 683.644 L1023.92 683.644 L1024.48 683.644 L1025.04 683.644 L1025.6 683.644 L1026.16 683.644 L1026.72 683.644 L1027.28 683.644 L1027.83 683.644 L1028.39 683.644 L1028.95 683.644 L1029.51 683.644 L1030.07 683.644 L1030.63 683.644 L1031.19 683.644 L1031.75 683.644 L1032.31 683.644 L1032.87 683.644 L1033.43 683.644 L1033.99 683.644 L1034.55 683.644 L1035.1 683.644 L1035.66 683.644 L1036.22 683.644 L1036.78 683.644 L1037.34 683.644 L1037.9 683.644 L1038.46 683.644 L1039.02 683.644 L1039.58 683.644 L1040.14 683.644 L1040.7 683.644 L1041.26 683.644 L1041.82 683.644 L1042.38 683.644 L1042.93 683.644 L1043.49 683.644 L1044.05 683.644 L1044.61 683.644 L1045.17 683.644 L1045.73 683.644 L1046.29 683.644 L1046.85 683.644 L1047.41 683.644 L1047.97 683.644 L1048.53 683.644 L1049.09 683.644 L1049.65 683.644 L1050.2 683.644 L1050.76 683.644 L1051.32 683.644 L1051.88 683.644 L1052.44 683.644 L1053 683.644 L1053.56 683.644 L1054.12 683.644 L1054.68 683.644 L1055.24 683.644 L1055.8 683.644 L1056.36 683.644 L1056.92 683.644 L1057.48 683.644 L1058.03 683.644 L1058.59 683.644 L1059.15 683.644 L1059.71 683.644 L1060.27 683.644 L1060.83 683.644 L1061.39 683.644 L1061.95 683.644 L1062.51 683.644 L1063.07 683.644 L1063.63 683.644 L1064.19 683.644 L1064.75 683.644 L1065.3 683.644 L1065.86 683.644 L1066.42 683.644 L1066.98 683.644 L1067.54 683.644 L1068.1 683.644 L1068.66 683.644 L1069.22 683.644 L1069.78 683.644 L1070.34 683.644 L1070.9 683.644 L1071.46 683.644 L1072.02 683.644 L1072.57 683.644 L1073.13 683.644 L1073.69 683.644 L1074.25 683.644 L1074.81 683.644 L1075.37 683.644 L1075.93 683.644 L1076.49 683.644 L1077.05 683.644 L1077.61 683.644 L1078.17 683.644 L1078.73 683.644 L1079.29 683.644 L1079.85 683.644 L1080.4 683.644 L1080.96 683.644 L1081.52 683.644 L1082.08 683.644 L1082.64 683.644 L1083.2 683.644 L1083.76 683.644 L1084.32 683.644 L1084.88 683.644 L1085.44 683.644 L1086 683.644 L1086.56 683.644 L1087.12 683.644 L1087.67 683.644 L1088.23 683.644 L1088.79 683.644 L1089.35 683.644 L1089.91 683.644 L1090.47 683.644 L1091.03 683.644 L1091.59 683.644 L1092.15 683.644 L1092.71 683.644 L1093.27 683.644 L1093.83 683.644 L1094.39 683.644 L1094.94 683.644 L1095.5 683.644 L1096.06 683.644 L1096.62 683.644 L1097.18 683.644 L1097.74 683.644 L1098.3 683.644 L1098.86 683.644 L1099.42 683.644 L1099.98 683.644 L1100.54 683.644 L1101.1 683.644 L1101.66 683.644 L1102.22 683.644 L1102.77 683.644 L1103.33 683.644 L1103.89 683.644 L1104.45 683.644 L1105.01 683.644 L1105.57 683.644 L1106.13 683.644 L1106.69 683.644 L1107.25 683.644 L1107.81 683.644 L1108.37 683.644 L1108.93 683.644 L1109.49 683.644 L1110.04 683.644 L1110.6 683.644 L1111.16 683.644 L1111.72 683.644 L1112.28 683.644 L1112.84 683.644 L1113.4 683.644 L1113.96 683.644 L1114.52 683.644 L1115.08 683.644 L1115.64 683.644 L1116.2 683.644 L1116.76 683.644 L1117.31 683.644 L1117.87 683.644 L1118.43 683.644 L1118.99 683.644 L1119.55 683.644 L1120.11 683.644 L1120.67 683.644 L1121.23 683.644 L1121.79 683.644 L1122.35 683.644 L1122.91 683.644 L1123.47 683.644 L1124.03 683.644 L1124.59 683.644 L1125.14 683.644 L1125.7 683.644 L1126.26 683.644 L1126.82 683.644 L1127.38 683.644 L1127.94 683.644 L1128.5 683.644 L1129.06 683.644 L1129.62 683.644 L1130.18 683.644 L1130.74 683.644 L1131.3 683.644 L1131.86 683.644 L1132.41 683.644 L1132.97 683.644 L1133.53 683.644 L1134.09 683.644 L1134.65 683.644 L1135.21 683.644 L1135.77 683.644 L1136.33 683.644 L1136.89 683.644 L1137.45 683.644 L1138.01 683.644 L1138.57 683.644 L1139.13 683.644 L1139.68 683.644 L1140.24 683.644 L1140.8 683.644 L1141.36 683.644 L1141.92 683.644 L1142.48 683.644 L1143.04 683.644 L1143.6 683.644 L1144.16 683.644 L1144.72 683.644 L1145.28 683.644 L1145.84 683.644 L1146.4 683.644 L1146.96 683.644 L1147.51 683.644 L1148.07 683.644 L1148.63 683.644 L1149.19 683.644 L1149.75 683.644 L1150.31 683.644 L1150.87 683.644 L1151.43 683.644 L1151.99 683.644 L1152.55 683.644 L1153.11 683.644 L1153.67 683.644 L1154.23 683.644 L1154.78 683.644 L1155.34 683.644 L1155.9 683.644 L1156.46 683.644 L1157.02 683.644 L1157.58 683.644 L1158.14 683.644 L1158.7 683.644 L1159.26 683.644 L1159.82 683.644 L1160.38 683.644 L1160.94 683.644 L1161.5 683.644 L1162.05 683.644 L1162.61 683.644 L1163.17 683.644 L1163.73 683.644 L1164.29 683.644 L1164.85 683.644 L1165.41 683.644 L1165.97 683.644 L1166.53 683.644 L1167.09 683.644 L1167.65 683.644 L1168.21 683.644 L1168.77 683.644 L1169.33 683.644 L1169.88 683.644 L1170.44 683.644 L1171 683.644 L1171.56 683.644 L1172.12 683.644 L1172.68 683.644 L1173.24 683.644 L1173.8 683.644 L1174.36 683.644 L1174.92 683.644 L1175.48 683.644 L1176.04 683.644 L1176.6 683.644 L1177.15 683.644 L1177.71 683.644 L1178.27 683.644 L1178.83 683.644 L1179.39 683.644 L1179.95 683.644 L1180.51 683.644 L1181.07 683.644 L1181.63 683.644 L1182.19 683.644 L1182.75 683.644 L1183.31 683.644 L1183.87 683.644 L1184.43 683.644 L1184.98 683.644 L1185.54 683.644 L1186.1 683.644 L1186.66 683.644 L1187.22 683.644 L1187.78 683.644 L1188.34 683.644 L1188.9 683.644 L1189.46 683.644 L1190.02 683.644 L1190.58 683.644 L1191.14 683.644 L1191.7 683.644 L1192.25 683.644 L1192.81 683.644 L1193.37 683.644 L1193.93 683.644 L1194.49 683.644 L1195.05 683.644 L1195.61 683.644 L1196.17 683.644 L1196.73 683.644 L1197.29 683.644 L1197.85 683.644 L1198.41 683.644 L1198.97 683.644 L1199.52 683.644 L1200.08 683.644 L1200.64 683.644 L1201.2 683.644 L1201.76 683.644 L1202.32 683.644 L1202.88 683.644 L1203.44 683.644 L1204 683.644 L1204.56 683.644 L1205.12 683.644 L1205.68 683.644 L1206.24 683.644 L1206.8 683.644 L1207.35 683.644 L1207.91 683.644 L1208.47 683.644 L1209.03 683.644 L1209.59 683.644 L1210.15 683.644 L1210.71 683.644 L1211.27 683.644 L1211.83 683.644 L1212.39 683.644 L1212.95 683.644 L1213.51 683.644 L1214.07 683.644 L1214.62 683.644 L1215.18 683.644 L1215.74 683.644 L1216.3 683.644 L1216.86 683.644 L1217.42 683.644 L1217.98 683.644 L1218.54 683.644 L1219.1 683.644 L1219.66 683.644 L1220.22 683.644 L1220.78 683.644 L1221.34 683.644 L1221.89 683.644 L1222.45 683.644 L1223.01 683.644 L1223.57 683.644 L1224.13 683.644 L1224.69 683.644 L1225.25 683.644 L1225.81 683.644 L1226.37 683.644 L1226.93 683.644 L1227.49 683.644 L1228.05 683.644 L1228.61 683.644 L1229.17 683.644 L1229.72 683.644 L1230.28 683.644 L1230.84 683.644 L1231.4 683.644 L1231.96 683.644 L1232.52 683.644 L1233.08 683.644 L1233.64 683.644 L1234.2 683.644 L1234.76 683.644 L1235.32 683.644 L1235.88 683.644 L1236.44 683.644 L1236.99 683.644 L1237.55 683.644 L1238.11 683.644 L1238.67 683.644 L1239.23 683.644 L1239.79 683.644 L1240.35 683.644 L1240.91 683.644 L1241.47 683.644 L1242.03 683.644 L1242.59 683.644 L1243.15 683.644 L1243.71 683.644 L1244.26 683.644 L1244.82 683.644 L1245.38 683.644 L1245.94 683.644 L1246.5 683.644 L1247.06 683.644 L1247.62 683.644 L1248.18 683.644 L1248.74 683.644 L1249.3 683.644 L1249.86 683.644 L1250.42 683.644 L1250.98 683.644 L1251.54 683.644 L1252.09 683.644 L1252.65 683.644 L1253.21 683.644 L1253.77 683.644 L1254.33 683.644 L1254.89 683.644 L1255.45 683.644 L1256.01 683.644 L1256.57 683.644 L1257.13 683.644 L1257.69 683.644 L1258.25 683.644 L1258.81 683.644 L1259.36 683.644 L1259.92 683.644 L1260.48 683.644 L1261.04 683.644 L1261.6 683.644 L1262.16 683.644 L1262.72 683.644 L1263.28 683.644 L1263.84 683.644 L1264.4 683.644 L1264.96 683.644 L1265.52 683.644 L1266.08 683.644 L1266.63 683.644 L1267.19 683.644 L1267.75 683.644 L1268.31 683.644 L1268.87 683.644 L1269.43 683.644 L1269.99 683.644 L1270.55 683.644 L1271.11 683.644 L1271.67 683.644 L1272.23 683.644 L1272.79 683.644 L1273.35 683.644 L1273.91 683.644 L1274.46 683.644 L1275.02 683.644 L1275.58 683.644 L1276.14 683.644 L1276.7 683.644 L1277.26 683.644 L1277.82 683.644 L1278.38 683.644 L1278.94 683.644 L1279.5 683.644 L1280.06 683.644 L1280.62 683.644 L1281.18 683.644 L1281.73 683.644 L1282.29 683.644 L1282.85 683.644 L1283.41 683.644 L1283.97 683.644 L1284.53 683.644 L1285.09 683.644 L1285.65 683.644 L1286.21 683.644 L1286.77 683.644 L1287.33 683.644 L1287.89 683.644 L1288.45 683.644 L1289 683.644 L1289.56 683.644 L1290.12 683.644 L1290.68 683.644 L1291.24 683.644 L1291.8 683.644 L1292.36 683.644 L1292.92 683.644 L1293.48 683.644 L1294.04 683.644 L1294.6 683.644 L1295.16 683.644 L1295.72 683.644 L1296.28 683.644 L1296.83 683.644 L1297.39 683.644 L1297.95 683.644 L1298.51 683.644 L1299.07 683.644 L1299.63 683.644 L1300.19 683.644 L1300.75 683.644 L1301.31 683.644 L1301.87 683.644 L1302.43 683.644 L1302.99 683.644 L1303.55 683.644 L1304.1 683.644 L1304.66 683.644 L1305.22 683.644 L1305.78 683.644 L1306.34 683.644 L1306.9 683.644 L1307.46 683.644 L1308.02 683.644 L1308.58 683.644 L1309.14 683.644 L1309.7 683.644 L1310.26 683.644 L1310.82 683.644 L1311.38 683.644 L1311.93 683.644 L1312.49 683.644 L1313.05 683.644 L1313.61 683.644 L1314.17 683.644 L1314.73 683.644 L1315.29 683.644 L1315.85 683.644 L1316.41 683.644 L1316.97 683.644 L1317.53 683.644 L1318.09 683.644 L1318.65 683.644 L1319.2 683.644 L1319.76 683.644 L1320.32 683.644 L1320.88 683.644 L1321.44 683.644 L1322 683.644 L1322.56 683.644 L1323.12 683.644 L1323.68 683.644 L1324.24 683.644 L1324.8 683.644 L1325.36 683.644 L1325.92 683.644 L1326.47 683.644 L1327.03 683.644 L1327.59 683.644 L1328.15 683.644 L1328.71 683.644 L1329.27 683.644 L1329.83 683.644 L1330.39 683.644 L1330.95 683.644 L1331.51 683.644 L1332.07 683.644 L1332.63 683.644 L1333.19 683.644 L1333.75 683.644 L1334.3 683.644 L1334.86 683.644 L1335.42 683.644 L1335.98 683.644 L1336.54 683.644 L1337.1 683.644 L1337.66 683.644 L1338.22 683.644 L1338.78 683.644 L1339.34 683.644 L1339.9 683.644 L1340.46 683.644 L1341.02 683.644 L1341.57 683.644 L1342.13 683.644 L1342.69 683.644 L1343.25 683.644 L1343.81 683.644 L1344.37 683.644 L1344.93 683.644 L1345.49 683.644 L1346.05 683.644 L1346.61 683.644 L1347.17 683.644 L1347.73 683.644 L1348.29 683.644 L1348.84 683.644 L1349.4 683.644 L1349.96 683.644 L1350.52 683.644 L1351.08 683.644 L1351.64 683.644 L1352.2 683.644 L1352.76 683.644 L1353.32 683.644 L1353.88 683.644 L1354.44 683.644 L1355 683.644 L1355.56 683.644 L1356.12 683.644 L1356.67 683.644 L1357.23 683.644 L1357.79 683.644 L1358.35 683.644 L1358.91 683.644 L1359.47 683.644 L1360.03 683.644 L1360.59 683.644 L1361.15 683.644 L1361.71 683.644 L1362.27 683.644 L1362.83 683.644 L1363.39 683.644 L1363.94 683.644 L1364.5 683.644 L1365.06 683.644 L1365.62 683.644 L1366.18 683.644 L1366.74 683.644 L1367.3 683.644 L1367.86 683.644 L1368.42 683.644 L1368.98 683.644 L1369.54 683.644 L1370.1 683.644 L1370.66 683.644 L1371.21 683.644 L1371.77 683.644 L1372.33 683.644 L1372.89 683.644 L1373.45 683.644 L1374.01 683.644 L1374.57 683.644 L1375.13 683.644 L1375.69 683.644 L1376.25 683.644 L1376.81 683.644 L1377.37 683.644 L1377.93 683.644 L1378.49 683.644 L1379.04 683.644 L1379.6 683.644 L1380.16 683.644 L1380.72 683.644 L1381.28 683.644 L1381.84 683.644 L1382.4 683.644 L1382.96 683.644 L1383.52 683.644 L1384.08 683.644 L1384.64 683.644 L1385.2 683.644 L1385.76 683.644 L1386.31 683.644 L1386.87 683.644 L1387.43 683.644 L1387.99 683.644 L1388.55 683.644 L1389.11 683.644 L1389.67 683.644 L1390.23 683.644 L1390.79 683.644 L1391.35 683.644 L1391.91 683.644 L1392.47 683.644 L1393.03 683.644 L1393.58 683.644 L1394.14 683.644 L1394.7 683.644 L1395.26 683.644 L1395.82 683.644 L1396.38 683.644 L1396.94 683.644 L1397.5 683.644 L1398.06 683.644 L1398.62 683.644 L1399.18 683.644 L1399.74 683.644 L1400.3 683.644 L1400.86 683.644 L1401.41 683.644 L1401.97 683.644 L1402.53 683.644 L1403.09 683.644 L1403.65 683.644 L1404.21 683.644 L1404.77 683.644 L1405.33 683.644 L1405.89 683.644 L1406.45 683.644 L1407.01 683.644 L1407.57 683.644 L1408.13 683.644 L1408.68 683.644 L1409.24 683.644 L1409.8 683.644 L1410.36 683.644 L1410.92 683.644 L1411.48 683.644 L1412.04 683.644 L1412.6 683.644 L1413.16 683.644 L1413.72 683.644 L1414.28 683.644 L1414.84 683.644 L1415.4 683.644 L1415.95 683.644 L1416.51 683.644 L1417.07 683.644 L1417.63 683.644 L1418.19 683.644 L1418.75 683.644 L1419.31 683.644 L1419.87 683.644 L1420.43 683.644 L1420.99 683.644 L1421.55 683.644 L1422.11 683.644 L1422.67 683.644 L1423.23 683.644 L1423.78 683.644 L1424.34 683.644 L1424.9 683.644 L1425.46 683.644 L1426.02 683.644 L1426.58 683.644 L1427.14 683.644 L1427.7 683.644 L1428.26 683.644 L1428.82 683.644 L1429.38 683.644 L1429.94 683.644 L1430.5 683.644 L1431.05 683.644 L1431.61 683.644 L1432.17 683.644 L1432.73 683.644 L1433.29 683.644 L1433.85 683.644 L1434.41 683.644 L1434.97 683.644 L1435.53 683.644 L1436.09 683.644 L1436.65 683.644 L1437.21 683.644 L1437.77 683.644 L1438.33 683.644 L1438.88 683.644 L1439.44 683.644 L1440 683.644 L1440.56 683.644 L1441.12 683.644 L1441.68 683.644 L1442.24 683.644 L1442.8 683.644 L1443.36 683.644 L1443.92 683.644 L1444.48 683.644 L1445.04 683.644 L1445.6 683.644 L1446.15 683.644 L1446.71 683.644 L1447.27 683.644 L1447.83 683.644 L1448.39 683.644 L1448.95 683.644 L1449.51 683.644 L1450.07 683.644 L1450.63 683.644 L1451.19 683.644 L1451.75 683.644 L1452.31 683.644 L1452.87 683.644 L1453.42 683.644 L1453.98 683.644 L1454.54 683.644 L1455.1 683.644 L1455.66 683.644 L1456.22 683.644 L1456.78 683.644 L1457.34 683.644 L1457.9 683.644 L1458.46 683.644 L1459.02 683.644 L1459.58 683.644 L1460.14 683.644 L1460.7 683.644 L1461.25 683.644 L1461.81 683.644 L1462.37 683.644 L1462.93 683.644 L1463.49 683.644 L1464.05 683.644 L1464.61 683.644 L1465.17 683.644 L1465.73 683.644 L1466.29 683.644 L1466.85 683.644 L1467.41 683.644 L1467.97 683.644 L1468.52 683.644 L1469.08 683.644 L1469.64 683.644 L1470.2 683.644 L1470.76 683.644 L1471.32 683.644 L1471.88 683.644 L1472.44 683.644 L1473 683.644 L1473.56 683.644 L1474.12 683.644 L1474.68 683.644 L1475.24 683.644 L1475.79 683.644 L1476.35 683.644 L1476.91 683.644 L1477.47 683.644 L1478.03 683.644 L1478.59 683.644 L1479.15 683.644 L1479.71 683.644 L1480.27 683.644 L1480.83 683.644 L1481.39 683.644 L1481.95 683.644 L1482.51 683.644 L1483.07 683.644 L1483.62 683.644 L1484.18 683.644 L1484.74 683.644 L1485.3 683.644 L1485.86 683.644 L1486.42 683.644 L1486.98 683.644 L1487.54 683.644 L1488.1 683.644 L1488.66 683.644 L1489.22 683.644 L1489.78 683.644 L1490.34 683.644 L1490.89 683.644 L1491.45 683.644 L1492.01 683.644 L1492.57 683.644 L1493.13 683.644 L1493.69 683.644 L1494.25 683.644 L1494.81 683.644 L1495.37 683.644 L1495.93 683.644 L1496.49 683.644 L1497.05 683.644 L1497.61 683.644 L1498.16 683.644 L1498.72 683.644 L1499.28 683.644 L1499.84 683.644 L1500.4 683.644 L1500.96 683.644 L1501.52 683.644 L1502.08 683.644 L1502.64 683.644 L1503.2 683.644 L1503.76 683.644 L1504.32 683.644 L1504.88 683.644 L1505.44 683.644 L1505.99 683.644 L1506.55 683.644 L1507.11 683.644 L1507.67 683.644 L1508.23 683.644 L1508.79 683.644 L1509.35 683.644 L1509.91 683.644 L1510.47 683.644 L1511.03 683.644 L1511.59 683.644 L1512.15 683.644 L1512.71 683.644 L1513.26 683.644 L1513.82 683.644 L1514.38 683.644 L1514.94 683.644 L1515.5 683.644 L1516.06 683.644 L1516.62 683.644 L1517.18 683.644 L1517.74 683.644 L1518.3 683.644 L1518.86 683.644 L1519.42 683.644 L1519.98 683.644 L1520.53 683.644 L1521.09 683.644 L1521.65 683.644 L1522.21 683.644 L1522.77 683.644 L1523.33 683.644 L1523.89 683.644 L1524.45 683.644 L1525.01 683.644 L1525.57 683.644 L1526.13 683.644 L1526.69 683.644 L1527.25 683.644 L1527.81 683.644 L1528.36 683.644 L1528.92 683.644 L1529.48 683.644 L1530.04 683.644 L1530.6 683.644 L1531.16 683.644 L1531.72 683.644 L1532.28 683.644 L1532.84 683.644 L1533.4 683.644 L1533.96 683.644 L1534.52 683.644 L1535.08 683.644 L1535.63 683.644 L1536.19 683.644 L1536.75 683.644 L1537.31 683.644 L1537.87 683.644 L1538.43 683.644 L1538.99 683.644 L1539.55 683.644 L1540.11 683.644 L1540.67 683.644 L1541.23 683.644 L1541.79 683.644 L1542.35 683.644 L1542.9 683.644 L1543.46 683.644 L1544.02 683.644 L1544.58 683.644 L1545.14 683.644 L1545.7 683.644 L1546.26 683.644 L1546.82 683.644 L1547.38 683.644 L1547.94 683.644 L1548.5 683.644 L1549.06 683.644 L1549.62 683.644 L1550.18 683.644 L1550.73 683.644 L1551.29 683.644 L1551.85 683.644 L1552.41 683.644 L1552.97 683.644 L1553.53 683.644 L1554.09 683.644 L1554.65 683.644 L1555.21 683.644 L1555.77 683.644 L1556.33 683.644 L1556.89 683.644 L1557.45 683.644 L1558 683.644 L1558.56 683.644 L1559.12 683.644 L1559.68 683.644 L1560.24 683.644 L1560.8 683.644 L1561.36 683.644 L1561.92 683.644 L1562.48 683.644 L1563.04 683.644 L1563.6 683.644 L1564.16 683.644 L1564.72 683.644 L1565.28 683.644 L1565.83 683.644 L1566.39 683.644 L1566.95 683.644 L1567.51 683.644 L1568.07 683.644 L1568.63 683.644 L1569.19 683.644 L1569.75 683.644 L1570.31 683.644 L1570.87 683.644 L1571.43 683.644 L1571.99 683.644 L1572.55 683.644 L1573.1 683.644 L1573.66 683.644 L1574.22 683.644 L1574.78 683.644 L1575.34 683.644 L1575.9 683.644 L1576.46 683.644 L1577.02 683.644 L1577.58 683.644 L1578.14 683.644 L1578.7 683.644 L1579.26 683.644 L1579.82 683.644 L1580.37 683.644 L1580.93 683.644 L1581.49 683.644 L1582.05 683.644 L1582.61 683.644 L1583.17 683.644 L1583.73 683.644 L1584.29 683.644 L1584.85 683.644 L1585.41 683.644 L1585.97 683.644 L1586.53 683.644 L1587.09 683.644 L1587.65 683.644 L1588.2 683.644 L1588.76 683.644 L1589.32 683.644 L1589.88 683.644 L1590.44 683.644 L1591 683.644 L1591.56 683.644 L1592.12 683.644 L1592.68 683.644 L1593.24 683.644 L1593.8 683.644 L1594.36 683.644 L1594.92 683.644 L1595.47 683.644 L1596.03 683.644 L1596.59 683.644 L1597.15 683.644 L1597.71 683.644 L1598.27 683.644 L1598.83 683.644 L1599.39 683.644 L1599.95 683.644 L1600.51 683.644 L1601.07 683.644 L1601.63 683.644 L1602.19 683.644 L1602.74 683.644 L1603.3 683.644 L1603.86 683.644 L1604.42 683.644 L1604.98 683.644 L1605.54 683.644 L1606.1 683.644 L1606.66 683.644 L1607.22 683.644 L1607.78 683.644 L1608.34 683.644 L1608.9 683.644 L1609.46 683.644 L1610.02 683.644 L1610.57 683.644 L1611.13 683.644 L1611.69 683.644 L1612.25 683.644 L1612.81 683.644 L1613.37 683.644 L1613.93 683.644 L1614.49 683.644 L1615.05 683.644 L1615.61 683.644 L1616.17 683.644 L1616.73 683.644 L1617.29 683.644 L1617.84 683.644 L1618.4 683.644 L1618.96 683.644 L1619.52 683.644 L1620.08 683.644 L1620.64 683.644 L1621.2 683.644 L1621.76 683.644 L1622.32 683.644 L1622.88 683.644 L1623.44 683.644 L1624 683.644 L1624.56 683.644 L1625.11 683.644 L1625.67 683.644 L1626.23 683.644 L1626.79 683.644 L1627.35 683.644 L1627.91 683.644 L1628.47 683.644 L1629.03 683.644 L1629.59 683.644 L1630.15 683.644 L1630.71 683.644 L1631.27 683.644 L1631.83 683.644 L1632.39 683.644 L1632.94 683.644 L1633.5 683.644 L1634.06 683.644 L1634.62 683.644 L1635.18 683.644 L1635.74 683.644 L1636.3 683.644 L1636.86 683.644 L1637.42 683.644 L1637.98 683.644 L1638.54 683.644 L1639.1 683.644 L1639.66 683.644 L1640.21 683.644 L1640.77 683.644 L1641.33 683.644 L1641.89 683.644 L1642.45 683.644 L1643.01 683.644 L1643.57 683.644 L1644.13 683.644 L1644.69 683.644 L1645.25 683.644 L1645.81 683.644 L1646.37 683.644 L1646.93 683.644 L1647.48 683.644 L1648.04 683.644 L1648.6 683.644 L1649.16 683.644 L1649.72 683.644 L1650.28 683.644 L1650.84 683.644 L1651.4 683.644 L1651.96 683.644 L1652.52 683.644 L1653.08 683.644 L1653.64 683.644 L1654.2 683.644 L1654.76 683.644 L1655.31 683.644 L1655.87 683.644 L1656.43 683.644 L1656.99 683.644 L1657.55 683.644 L1658.11 683.644 L1658.67 683.644 L1659.23 683.644 L1659.79 683.644 L1660.35 683.644 L1660.91 683.644 L1661.47 683.644 L1662.03 683.644 L1662.58 683.644 L1663.14 683.644 L1663.7 683.644 L1664.26 683.644 L1664.82 683.644 L1665.38 683.644 L1665.94 683.644 L1666.5 683.644 L1667.06 683.644 L1667.62 683.644 L1668.18 683.644 L1668.74 683.644 L1669.3 683.644 L1669.85 683.644 L1670.41 683.644 L1670.97 683.644 L1671.53 683.644 L1672.09 683.644 L1672.65 683.644 L1673.21 683.644 L1673.77 683.644 L1674.33 683.644 L1674.89 683.644 L1675.45 683.644 L1676.01 683.644 L1676.57 683.644 L1677.13 683.644 L1677.68 683.644 L1678.24 683.644 L1678.8 683.644 L1679.36 683.644 L1679.92 683.644 L1680.48 683.644 L1681.04 683.644 L1681.6 683.644 L1682.16 683.644 L1682.72 683.644 L1683.28 683.644 L1683.84 683.644 L1684.4 683.644 L1684.95 683.644 L1685.51 683.644 L1686.07 683.644 L1686.63 683.644 L1687.19 683.644 L1687.75 683.644 L1688.31 683.644 L1688.87 683.644 L1689.43 683.644 L1689.99 683.644 L1690.55 683.644 L1691.11 683.644 L1691.67 683.644 L1692.23 683.644 L1692.78 683.644 L1693.34 683.644 L1693.9 683.644 L1694.46 683.644 L1695.02 683.644 L1695.58 683.644 L1696.14 683.644 L1696.7 683.644 L1697.26 683.644 L1697.82 683.644 L1698.38 683.644 L1698.94 683.644 L1699.5 683.644 L1700.05 683.644 L1700.61 683.644 L1701.17 683.644 L1701.73 683.644 L1702.29 683.644 L1702.85 683.644 L1703.41 683.644 L1703.97 683.644 L1704.53 683.644 L1705.09 683.644 L1705.65 683.644 L1706.21 683.644 L1706.77 683.644 L1707.32 683.644 L1707.88 683.644 L1708.44 683.644 L1709 683.644 L1709.56 683.644 L1710.12 683.644 L1710.68 683.644 L1711.24 683.644 L1711.8 683.644 L1712.36 683.644 L1712.92 683.644 L1713.48 683.644 L1714.04 683.644 L1714.6 683.644 L1715.15 683.644 L1715.71 683.644 L1716.27 683.644 L1716.83 683.644 L1717.39 683.644 L1717.95 683.644 L1718.51 683.644 L1719.07 683.644 L1719.63 683.644 L1720.19 683.644 L1720.75 683.644 L1721.31 683.644 L1721.87 683.644 L1722.42 683.644 L1722.98 683.644 L1723.54 683.644 L1724.1 683.644 L1724.66 683.644 L1725.22 683.644 L1725.78 683.644 L1726.34 683.644 L1726.9 683.644 L1727.46 683.644 L1728.02 683.644 L1728.58 683.644 L1729.14 683.644 L1729.69 683.644 L1730.25 683.644 L1730.81 683.644 L1731.37 683.644 L1731.93 683.644 L1732.49 683.644 L1733.05 683.644 L1733.61 683.644 L1734.17 683.644 L1734.73 683.644 L1735.29 683.644 L1735.85 683.644 L1736.41 683.644 L1736.97 683.644 L1737.52 683.644 L1738.08 683.644 L1738.64 683.644 L1739.2 683.644 L1739.76 683.644 L1740.32 683.644 L1740.88 683.644 L1741.44 683.644 L1742 683.644 L1742.56 683.644 L1743.12 683.644 L1743.68 683.644 L1744.24 683.644 L1744.79 683.644 L1745.35 683.644 L1745.91 683.644 L1746.47 683.644 L1747.03 683.644 L1747.59 683.644 L1748.15 683.644 L1748.71 683.644 L1749.27 683.644 L1749.83 683.644 L1750.39 683.644 L1750.95 683.644 L1751.51 683.644 L1752.06 683.644 L1752.62 683.644 L1753.18 683.644 L1753.74 683.644 L1754.3 683.644 L1754.86 683.644 L1755.42 683.644 L1755.98 683.644 L1756.54 683.644 L1757.1 683.644 L1757.66 683.644 L1758.22 683.644 L1758.78 683.644 L1759.34 683.644 L1759.89 683.644 L1760.45 683.644 L1761.01 683.644 L1761.57 683.644 L1762.13 683.644 L1762.69 683.644 L1763.25 683.644 L1763.81 683.644 L1764.37 683.644 L1764.93 683.644 L1765.49 683.644 L1766.05 683.644 L1766.61 683.644 L1767.16 683.644 L1767.72 683.644 L1768.28 683.644 L1768.84 683.644 L1769.4 683.644 L1769.96 683.644 L1770.52 683.644 L1771.08 683.644 L1771.64 683.644 L1772.2 683.644 L1772.76 683.644 L1773.32 683.644 L1773.88 683.644 L1774.43 683.644 L1774.99 683.644 L1775.55 683.644 L1776.11 683.644 L1776.67 683.644 L1777.23 683.644 L1777.79 683.644 L1778.35 683.644 L1778.91 683.644 L1779.47 683.644 L1780.03 683.644 L1780.59 683.644 L1781.15 683.644 L1781.71 683.644 L1782.26 683.644 L1782.82 683.644 L1783.38 683.644 L1783.94 683.644 L1784.5 683.644 L1785.06 683.644 L1785.62 683.644 L1786.18 683.644 L1786.74 683.644 L1787.3 683.644 L1787.86 683.644 L1788.42 683.644 L1788.98 683.644 L1789.53 683.644 L1790.09 683.644 L1790.65 683.644 L1791.21 683.644 L1791.77 683.644 L1792.33 683.644 L1792.89 683.644 L1793.45 683.644 L1794.01 683.644 L1794.57 683.644 L1795.13 683.644 L1795.69 683.644 L1796.25 683.644 L1796.8 683.644 L1797.36 683.644 L1797.92 683.644 L1798.48 683.644 L1799.04 683.644 L1799.6 683.644 L1800.16 683.644 L1800.72 683.644 L1801.28 683.644 L1801.84 683.644 L1802.4 683.644 L1802.96 683.644 L1803.52 683.644 L1804.08 683.644 L1804.63 683.644 L1805.19 683.644 L1805.75 683.644 L1806.31 683.644 L1806.87 683.644 L1807.43 683.644 L1807.99 683.644 L1808.55 683.644 L1809.11 683.644 L1809.67 683.644 L1810.23 683.644 L1810.79 683.644 L1811.35 683.644 L1811.9 683.644 L1812.46 683.644 L1813.02 683.644 L1813.58 683.644 L1814.14 683.644 L1814.7 683.644 L1815.26 683.644 L1815.82 683.644 L1816.38 683.644 L1816.94 683.644 L1817.5 683.644 L1818.06 683.644 L1818.62 683.644 L1819.18 683.644 L1819.73 683.644 L1820.29 683.644 L1820.85 683.644 L1821.41 683.644 L1821.97 683.644 L1822.53 683.644 L1823.09 683.644 L1823.65 683.644 L1824.21 683.644 L1824.77 683.644 L1825.33 683.644 L1825.89 683.644 L1826.45 683.644 L1827 683.644 L1827.56 683.644 L1828.12 683.644 L1828.68 683.644 L1829.24 683.644 L1829.8 683.644 L1830.36 683.644 L1830.92 683.644 L1831.48 683.644 L1832.04 683.644 L1832.6 683.644 L1833.16 683.644 L1833.72 683.644 L1834.27 683.644 L1834.83 683.644 L1835.39 683.644 L1835.95 683.644 L1836.51 683.644 L1837.07 683.644 L1837.63 683.644 L1838.19 683.644 L1838.19 682.243 L1837.63 682.243 L1837.07 682.243 L1836.51 682.243 L1835.95 682.243 L1835.39 682.243 L1834.83 682.243 L1834.27 682.243 L1833.72 682.243 L1833.16 682.243 L1832.6 682.243 L1832.04 682.243 L1831.48 682.243 L1830.92 682.243 L1830.36 682.243 L1829.8 682.243 L1829.24 682.243 L1828.68 682.243 L1828.12 682.243 L1827.56 682.243 L1827 682.243 L1826.45 682.243 L1825.89 682.243 L1825.33 682.243 L1824.77 682.243 L1824.21 682.243 L1823.65 682.243 L1823.09 682.243 L1822.53 682.243 L1821.97 682.243 L1821.41 682.243 L1820.85 682.243 L1820.29 682.243 L1819.73 682.243 L1819.18 682.243 L1818.62 682.243 L1818.06 682.243 L1817.5 682.243 L1816.94 682.243 L1816.38 682.243 L1815.82 682.243 L1815.26 682.243 L1814.7 682.243 L1814.14 682.243 L1813.58 682.243 L1813.02 682.243 L1812.46 682.243 L1811.9 682.243 L1811.35 682.243 L1810.79 682.243 L1810.23 682.243 L1809.67 682.243 L1809.11 682.243 L1808.55 682.243 L1807.99 682.243 L1807.43 682.243 L1806.87 682.243 L1806.31 682.243 L1805.75 682.243 L1805.19 682.243 L1804.63 682.243 L1804.08 682.243 L1803.52 682.243 L1802.96 682.243 L1802.4 682.243 L1801.84 682.243 L1801.28 682.243 L1800.72 682.243 L1800.16 682.243 L1799.6 682.243 L1799.04 682.243 L1798.48 682.243 L1797.92 682.243 L1797.36 682.243 L1796.8 682.243 L1796.25 682.243 L1795.69 682.243 L1795.13 682.243 L1794.57 682.243 L1794.01 682.243 L1793.45 682.243 L1792.89 682.243 L1792.33 682.243 L1791.77 682.243 L1791.21 682.243 L1790.65 682.243 L1790.09 682.243 L1789.53 682.243 L1788.98 682.243 L1788.42 682.243 L1787.86 682.243 L1787.3 682.243 L1786.74 682.243 L1786.18 682.243 L1785.62 682.243 L1785.06 682.243 L1784.5 682.243 L1783.94 682.243 L1783.38 682.243 L1782.82 682.243 L1782.26 682.243 L1781.71 682.243 L1781.15 682.243 L1780.59 682.243 L1780.03 682.243 L1779.47 682.243 L1778.91 682.243 L1778.35 682.243 L1777.79 682.243 L1777.23 682.243 L1776.67 682.243 L1776.11 682.243 L1775.55 682.243 L1774.99 682.243 L1774.43 682.243 L1773.88 682.243 L1773.32 682.243 L1772.76 682.243 L1772.2 682.243 L1771.64 682.243 L1771.08 682.243 L1770.52 682.243 L1769.96 682.243 L1769.4 682.243 L1768.84 682.243 L1768.28 682.243 L1767.72 682.243 L1767.16 682.243 L1766.61 682.243 L1766.05 682.243 L1765.49 682.243 L1764.93 682.243 L1764.37 682.243 L1763.81 682.243 L1763.25 682.243 L1762.69 682.243 L1762.13 682.243 L1761.57 682.243 L1761.01 682.243 L1760.45 682.243 L1759.89 682.243 L1759.34 682.243 L1758.78 682.243 L1758.22 682.243 L1757.66 682.243 L1757.1 682.243 L1756.54 682.243 L1755.98 682.243 L1755.42 682.243 L1754.86 682.243 L1754.3 682.243 L1753.74 682.243 L1753.18 682.243 L1752.62 682.243 L1752.06 682.243 L1751.51 682.243 L1750.95 682.243 L1750.39 682.243 L1749.83 682.243 L1749.27 682.243 L1748.71 682.243 L1748.15 682.243 L1747.59 682.243 L1747.03 682.243 L1746.47 682.243 L1745.91 682.243 L1745.35 682.243 L1744.79 682.243 L1744.24 682.243 L1743.68 682.243 L1743.12 682.243 L1742.56 682.243 L1742 682.243 L1741.44 682.243 L1740.88 682.243 L1740.32 682.243 L1739.76 682.243 L1739.2 682.243 L1738.64 682.243 L1738.08 682.243 L1737.52 682.243 L1736.97 682.243 L1736.41 682.243 L1735.85 682.243 L1735.29 682.243 L1734.73 682.243 L1734.17 682.243 L1733.61 682.243 L1733.05 682.243 L1732.49 682.243 L1731.93 682.243 L1731.37 682.243 L1730.81 682.243 L1730.25 682.243 L1729.69 682.243 L1729.14 682.243 L1728.58 682.243 L1728.02 682.243 L1727.46 682.243 L1726.9 682.243 L1726.34 682.243 L1725.78 682.243 L1725.22 682.243 L1724.66 682.243 L1724.1 682.243 L1723.54 682.243 L1722.98 682.243 L1722.42 682.243 L1721.87 682.243 L1721.31 682.243 L1720.75 682.243 L1720.19 682.243 L1719.63 682.243 L1719.07 682.243 L1718.51 682.243 L1717.95 682.243 L1717.39 682.243 L1716.83 682.243 L1716.27 682.243 L1715.71 682.243 L1715.15 682.243 L1714.6 682.243 L1714.04 682.243 L1713.48 682.243 L1712.92 682.243 L1712.36 682.243 L1711.8 682.243 L1711.24 682.243 L1710.68 682.243 L1710.12 682.243 L1709.56 682.243 L1709 682.243 L1708.44 682.243 L1707.88 682.243 L1707.32 682.243 L1706.77 682.243 L1706.21 682.243 L1705.65 682.243 L1705.09 682.243 L1704.53 682.243 L1703.97 682.243 L1703.41 682.243 L1702.85 682.243 L1702.29 682.243 L1701.73 682.243 L1701.17 682.243 L1700.61 682.243 L1700.05 682.243 L1699.5 682.243 L1698.94 682.243 L1698.38 682.243 L1697.82 682.243 L1697.26 682.243 L1696.7 682.243 L1696.14 682.243 L1695.58 682.243 L1695.02 682.243 L1694.46 682.243 L1693.9 682.243 L1693.34 682.243 L1692.78 682.243 L1692.23 682.243 L1691.67 682.243 L1691.11 682.243 L1690.55 682.243 L1689.99 682.243 L1689.43 682.243 L1688.87 682.243 L1688.31 682.243 L1687.75 682.243 L1687.19 682.243 L1686.63 682.243 L1686.07 682.243 L1685.51 682.243 L1684.95 682.243 L1684.4 682.243 L1683.84 682.243 L1683.28 682.243 L1682.72 682.243 L1682.16 682.243 L1681.6 682.243 L1681.04 682.243 L1680.48 682.243 L1679.92 682.243 L1679.36 682.243 L1678.8 682.243 L1678.24 682.243 L1677.68 682.243 L1677.13 682.243 L1676.57 682.243 L1676.01 682.243 L1675.45 682.243 L1674.89 682.243 L1674.33 682.243 L1673.77 682.243 L1673.21 682.243 L1672.65 682.243 L1672.09 682.243 L1671.53 682.243 L1670.97 682.243 L1670.41 682.243 L1669.85 682.243 L1669.3 682.243 L1668.74 682.243 L1668.18 682.243 L1667.62 682.243 L1667.06 682.243 L1666.5 682.243 L1665.94 682.243 L1665.38 682.243 L1664.82 682.243 L1664.26 682.243 L1663.7 682.243 L1663.14 682.243 L1662.58 682.243 L1662.03 682.243 L1661.47 682.243 L1660.91 682.243 L1660.35 682.243 L1659.79 682.243 L1659.23 682.243 L1658.67 682.243 L1658.11 682.243 L1657.55 682.243 L1656.99 682.243 L1656.43 682.243 L1655.87 682.243 L1655.31 682.243 L1654.76 682.243 L1654.2 682.243 L1653.64 682.243 L1653.08 682.243 L1652.52 682.243 L1651.96 682.243 L1651.4 682.243 L1650.84 682.243 L1650.28 682.243 L1649.72 682.243 L1649.16 682.243 L1648.6 682.243 L1648.04 682.243 L1647.48 682.243 L1646.93 682.243 L1646.37 682.243 L1645.81 682.243 L1645.25 682.243 L1644.69 682.243 L1644.13 682.243 L1643.57 682.243 L1643.01 682.243 L1642.45 682.243 L1641.89 682.243 L1641.33 682.243 L1640.77 682.243 L1640.21 682.243 L1639.66 682.243 L1639.1 682.243 L1638.54 682.243 L1637.98 682.243 L1637.42 682.243 L1636.86 682.243 L1636.3 682.243 L1635.74 682.243 L1635.18 682.243 L1634.62 682.243 L1634.06 682.243 L1633.5 682.243 L1632.94 682.243 L1632.39 682.243 L1631.83 682.243 L1631.27 682.243 L1630.71 682.243 L1630.15 682.243 L1629.59 682.243 L1629.03 682.243 L1628.47 682.243 L1627.91 682.243 L1627.35 682.243 L1626.79 682.243 L1626.23 682.243 L1625.67 682.243 L1625.11 682.243 L1624.56 682.243 L1624 682.243 L1623.44 682.243 L1622.88 682.243 L1622.32 682.243 L1621.76 682.243 L1621.2 682.243 L1620.64 682.243 L1620.08 682.243 L1619.52 682.243 L1618.96 682.243 L1618.4 682.243 L1617.84 682.243 L1617.29 682.243 L1616.73 682.243 L1616.17 682.243 L1615.61 682.243 L1615.05 682.243 L1614.49 682.243 L1613.93 682.243 L1613.37 682.243 L1612.81 682.243 L1612.25 682.243 L1611.69 682.243 L1611.13 682.243 L1610.57 682.243 L1610.02 682.243 L1609.46 682.243 L1608.9 682.243 L1608.34 682.243 L1607.78 682.243 L1607.22 682.243 L1606.66 682.243 L1606.1 682.243 L1605.54 682.243 L1604.98 682.243 L1604.42 682.243 L1603.86 682.243 L1603.3 682.243 L1602.74 682.243 L1602.19 682.243 L1601.63 682.243 L1601.07 682.243 L1600.51 682.243 L1599.95 682.243 L1599.39 682.243 L1598.83 682.243 L1598.27 682.243 L1597.71 682.243 L1597.15 682.243 L1596.59 682.243 L1596.03 682.243 L1595.47 682.243 L1594.92 682.243 L1594.36 682.243 L1593.8 682.243 L1593.24 682.243 L1592.68 682.243 L1592.12 682.243 L1591.56 682.243 L1591 682.243 L1590.44 682.243 L1589.88 682.243 L1589.32 682.243 L1588.76 682.243 L1588.2 682.243 L1587.65 682.243 L1587.09 682.243 L1586.53 682.243 L1585.97 682.243 L1585.41 682.243 L1584.85 682.243 L1584.29 682.243 L1583.73 682.243 L1583.17 682.243 L1582.61 682.243 L1582.05 682.243 L1581.49 682.243 L1580.93 682.243 L1580.37 682.243 L1579.82 682.243 L1579.26 682.243 L1578.7 682.243 L1578.14 682.243 L1577.58 682.243 L1577.02 682.243 L1576.46 682.243 L1575.9 682.243 L1575.34 682.243 L1574.78 682.243 L1574.22 682.243 L1573.66 682.243 L1573.1 682.243 L1572.55 682.243 L1571.99 682.243 L1571.43 682.243 L1570.87 682.243 L1570.31 682.243 L1569.75 682.243 L1569.19 682.243 L1568.63 682.243 L1568.07 682.243 L1567.51 682.243 L1566.95 682.243 L1566.39 682.243 L1565.83 682.243 L1565.28 682.243 L1564.72 682.243 L1564.16 682.243 L1563.6 682.243 L1563.04 682.243 L1562.48 682.243 L1561.92 682.243 L1561.36 682.243 L1560.8 682.243 L1560.24 682.243 L1559.68 682.243 L1559.12 682.243 L1558.56 682.243 L1558 682.243 L1557.45 682.243 L1556.89 682.243 L1556.33 682.243 L1555.77 682.243 L1555.21 682.243 L1554.65 682.243 L1554.09 682.243 L1553.53 682.243 L1552.97 682.243 L1552.41 682.243 L1551.85 682.243 L1551.29 682.243 L1550.73 682.243 L1550.18 682.243 L1549.62 682.243 L1549.06 682.243 L1548.5 682.243 L1547.94 682.243 L1547.38 682.243 L1546.82 682.243 L1546.26 682.243 L1545.7 682.243 L1545.14 682.243 L1544.58 682.243 L1544.02 682.243 L1543.46 682.243 L1542.9 682.243 L1542.35 682.243 L1541.79 682.243 L1541.23 682.243 L1540.67 682.243 L1540.11 682.243 L1539.55 682.243 L1538.99 682.243 L1538.43 682.243 L1537.87 682.243 L1537.31 682.243 L1536.75 682.243 L1536.19 682.243 L1535.63 682.243 L1535.08 682.243 L1534.52 682.243 L1533.96 682.243 L1533.4 682.243 L1532.84 682.243 L1532.28 682.243 L1531.72 682.243 L1531.16 682.243 L1530.6 682.243 L1530.04 682.243 L1529.48 682.243 L1528.92 682.243 L1528.36 682.243 L1527.81 682.243 L1527.25 682.243 L1526.69 682.243 L1526.13 682.243 L1525.57 682.243 L1525.01 682.243 L1524.45 682.243 L1523.89 682.243 L1523.33 682.243 L1522.77 682.243 L1522.21 682.243 L1521.65 682.243 L1521.09 682.243 L1520.53 682.243 L1519.98 682.243 L1519.42 682.243 L1518.86 682.243 L1518.3 682.243 L1517.74 682.243 L1517.18 682.243 L1516.62 682.243 L1516.06 682.243 L1515.5 682.243 L1514.94 682.243 L1514.38 682.243 L1513.82 682.243 L1513.26 682.243 L1512.71 682.243 L1512.15 682.243 L1511.59 682.243 L1511.03 682.243 L1510.47 682.243 L1509.91 682.243 L1509.35 682.243 L1508.79 682.243 L1508.23 682.243 L1507.67 682.243 L1507.11 682.243 L1506.55 682.243 L1505.99 682.243 L1505.44 682.243 L1504.88 682.243 L1504.32 682.243 L1503.76 682.243 L1503.2 682.243 L1502.64 682.243 L1502.08 682.243 L1501.52 682.243 L1500.96 682.243 L1500.4 682.243 L1499.84 682.243 L1499.28 682.243 L1498.72 682.243 L1498.16 682.243 L1497.61 682.243 L1497.05 682.243 L1496.49 682.243 L1495.93 682.243 L1495.37 682.243 L1494.81 682.243 L1494.25 682.243 L1493.69 682.243 L1493.13 682.243 L1492.57 682.243 L1492.01 682.243 L1491.45 682.243 L1490.89 682.243 L1490.34 682.243 L1489.78 682.243 L1489.22 682.243 L1488.66 682.243 L1488.1 682.243 L1487.54 682.243 L1486.98 682.243 L1486.42 682.243 L1485.86 682.243 L1485.3 682.243 L1484.74 682.243 L1484.18 682.243 L1483.62 682.243 L1483.07 682.243 L1482.51 682.243 L1481.95 682.243 L1481.39 682.243 L1480.83 682.243 L1480.27 682.243 L1479.71 682.243 L1479.15 682.243 L1478.59 682.243 L1478.03 682.243 L1477.47 682.243 L1476.91 682.243 L1476.35 682.243 L1475.79 682.243 L1475.24 682.243 L1474.68 682.243 L1474.12 682.243 L1473.56 682.243 L1473 682.243 L1472.44 682.243 L1471.88 682.243 L1471.32 682.243 L1470.76 682.243 L1470.2 682.243 L1469.64 682.243 L1469.08 682.243 L1468.52 682.243 L1467.97 682.243 L1467.41 682.243 L1466.85 682.243 L1466.29 682.243 L1465.73 682.243 L1465.17 682.243 L1464.61 682.243 L1464.05 682.243 L1463.49 682.243 L1462.93 682.243 L1462.37 682.243 L1461.81 682.243 L1461.25 682.243 L1460.7 682.243 L1460.14 682.243 L1459.58 682.243 L1459.02 682.243 L1458.46 682.243 L1457.9 682.243 L1457.34 682.243 L1456.78 682.243 L1456.22 682.243 L1455.66 682.243 L1455.1 682.243 L1454.54 682.243 L1453.98 682.243 L1453.42 682.243 L1452.87 682.243 L1452.31 682.243 L1451.75 682.243 L1451.19 682.243 L1450.63 682.243 L1450.07 682.243 L1449.51 682.243 L1448.95 682.243 L1448.39 682.243 L1447.83 682.243 L1447.27 682.243 L1446.71 682.243 L1446.15 682.243 L1445.6 682.243 L1445.04 682.243 L1444.48 682.243 L1443.92 682.243 L1443.36 682.243 L1442.8 682.243 L1442.24 682.243 L1441.68 682.243 L1441.12 682.243 L1440.56 682.243 L1440 682.243 L1439.44 682.243 L1438.88 682.243 L1438.33 682.243 L1437.77 682.243 L1437.21 682.243 L1436.65 682.243 L1436.09 682.243 L1435.53 682.243 L1434.97 682.243 L1434.41 682.243 L1433.85 682.243 L1433.29 682.243 L1432.73 682.243 L1432.17 682.243 L1431.61 682.243 L1431.05 682.243 L1430.5 682.243 L1429.94 682.243 L1429.38 682.243 L1428.82 682.243 L1428.26 682.243 L1427.7 682.243 L1427.14 682.243 L1426.58 682.243 L1426.02 682.243 L1425.46 682.243 L1424.9 682.243 L1424.34 682.243 L1423.78 682.243 L1423.23 682.243 L1422.67 682.243 L1422.11 682.243 L1421.55 682.243 L1420.99 682.243 L1420.43 682.243 L1419.87 682.243 L1419.31 682.243 L1418.75 682.243 L1418.19 682.243 L1417.63 682.243 L1417.07 682.243 L1416.51 682.243 L1415.95 682.243 L1415.4 682.243 L1414.84 682.243 L1414.28 682.243 L1413.72 682.243 L1413.16 682.243 L1412.6 682.243 L1412.04 682.243 L1411.48 682.243 L1410.92 682.243 L1410.36 682.243 L1409.8 682.243 L1409.24 682.243 L1408.68 682.243 L1408.13 682.243 L1407.57 682.243 L1407.01 682.243 L1406.45 682.243 L1405.89 682.243 L1405.33 682.243 L1404.77 682.243 L1404.21 682.243 L1403.65 682.243 L1403.09 682.243 L1402.53 682.243 L1401.97 682.243 L1401.41 682.243 L1400.86 682.243 L1400.3 682.243 L1399.74 682.243 L1399.18 682.243 L1398.62 682.243 L1398.06 682.243 L1397.5 682.243 L1396.94 682.243 L1396.38 682.243 L1395.82 682.243 L1395.26 682.243 L1394.7 682.243 L1394.14 682.243 L1393.58 682.243 L1393.03 682.243 L1392.47 682.243 L1391.91 682.243 L1391.35 682.243 L1390.79 682.243 L1390.23 682.243 L1389.67 682.243 L1389.11 682.243 L1388.55 682.243 L1387.99 682.243 L1387.43 682.243 L1386.87 682.243 L1386.31 682.243 L1385.76 682.243 L1385.2 682.243 L1384.64 682.243 L1384.08 682.243 L1383.52 682.243 L1382.96 682.243 L1382.4 682.243 L1381.84 682.243 L1381.28 682.243 L1380.72 682.243 L1380.16 682.243 L1379.6 682.243 L1379.04 682.243 L1378.49 682.243 L1377.93 682.243 L1377.37 682.243 L1376.81 682.243 L1376.25 682.243 L1375.69 682.243 L1375.13 682.243 L1374.57 682.243 L1374.01 682.243 L1373.45 682.243 L1372.89 682.243 L1372.33 682.243 L1371.77 682.243 L1371.21 682.243 L1370.66 682.243 L1370.1 682.243 L1369.54 682.243 L1368.98 682.243 L1368.42 682.243 L1367.86 682.243 L1367.3 682.243 L1366.74 682.243 L1366.18 682.243 L1365.62 682.243 L1365.06 682.243 L1364.5 682.243 L1363.94 682.243 L1363.39 682.243 L1362.83 682.243 L1362.27 682.243 L1361.71 682.243 L1361.15 682.243 L1360.59 682.243 L1360.03 682.243 L1359.47 682.243 L1358.91 682.243 L1358.35 682.243 L1357.79 682.243 L1357.23 682.243 L1356.67 682.243 L1356.12 682.243 L1355.56 682.243 L1355 682.243 L1354.44 682.243 L1353.88 682.243 L1353.32 682.243 L1352.76 682.243 L1352.2 682.243 L1351.64 682.243 L1351.08 682.243 L1350.52 682.243 L1349.96 682.243 L1349.4 682.243 L1348.84 682.243 L1348.29 682.243 L1347.73 682.243 L1347.17 682.243 L1346.61 682.243 L1346.05 682.243 L1345.49 682.243 L1344.93 682.243 L1344.37 682.243 L1343.81 682.243 L1343.25 682.243 L1342.69 682.243 L1342.13 682.243 L1341.57 682.243 L1341.02 682.243 L1340.46 682.243 L1339.9 682.243 L1339.34 682.243 L1338.78 682.243 L1338.22 682.243 L1337.66 682.243 L1337.1 682.243 L1336.54 682.243 L1335.98 682.243 L1335.42 682.243 L1334.86 682.243 L1334.3 682.243 L1333.75 682.243 L1333.19 682.243 L1332.63 682.243 L1332.07 682.243 L1331.51 682.243 L1330.95 682.243 L1330.39 682.243 L1329.83 682.243 L1329.27 682.243 L1328.71 682.243 L1328.15 682.243 L1327.59 682.243 L1327.03 682.243 L1326.47 682.243 L1325.92 682.243 L1325.36 682.243 L1324.8 682.243 L1324.24 682.243 L1323.68 682.243 L1323.12 682.243 L1322.56 682.243 L1322 682.243 L1321.44 682.243 L1320.88 682.243 L1320.32 682.243 L1319.76 682.243 L1319.2 682.243 L1318.65 682.243 L1318.09 682.243 L1317.53 682.243 L1316.97 682.243 L1316.41 682.243 L1315.85 682.243 L1315.29 682.243 L1314.73 682.243 L1314.17 682.243 L1313.61 682.243 L1313.05 682.243 L1312.49 682.243 L1311.93 682.243 L1311.38 682.243 L1310.82 682.243 L1310.26 682.243 L1309.7 682.243 L1309.14 682.243 L1308.58 682.243 L1308.02 682.243 L1307.46 682.243 L1306.9 682.243 L1306.34 682.243 L1305.78 682.243 L1305.22 682.243 L1304.66 682.243 L1304.1 682.243 L1303.55 682.243 L1302.99 682.243 L1302.43 682.243 L1301.87 682.243 L1301.31 682.243 L1300.75 682.243 L1300.19 682.243 L1299.63 682.243 L1299.07 682.243 L1298.51 682.243 L1297.95 682.243 L1297.39 682.243 L1296.83 682.243 L1296.28 682.243 L1295.72 682.243 L1295.16 682.243 L1294.6 682.243 L1294.04 682.243 L1293.48 682.243 L1292.92 682.243 L1292.36 682.243 L1291.8 682.243 L1291.24 682.243 L1290.68 682.243 L1290.12 682.243 L1289.56 682.243 L1289 682.243 L1288.45 682.243 L1287.89 682.243 L1287.33 682.243 L1286.77 682.243 L1286.21 682.243 L1285.65 682.243 L1285.09 682.243 L1284.53 682.243 L1283.97 682.243 L1283.41 682.243 L1282.85 682.243 L1282.29 682.243 L1281.73 682.243 L1281.18 682.243 L1280.62 682.243 L1280.06 682.243 L1279.5 682.243 L1278.94 682.243 L1278.38 682.243 L1277.82 682.243 L1277.26 682.243 L1276.7 682.243 L1276.14 682.243 L1275.58 682.243 L1275.02 682.243 L1274.46 682.243 L1273.91 682.243 L1273.35 682.243 L1272.79 682.243 L1272.23 682.243 L1271.67 682.243 L1271.11 682.243 L1270.55 682.243 L1269.99 682.243 L1269.43 682.243 L1268.87 682.243 L1268.31 682.243 L1267.75 682.243 L1267.19 682.243 L1266.63 682.243 L1266.08 682.243 L1265.52 682.243 L1264.96 682.243 L1264.4 682.243 L1263.84 682.243 L1263.28 682.243 L1262.72 682.243 L1262.16 682.243 L1261.6 682.243 L1261.04 682.243 L1260.48 682.243 L1259.92 682.243 L1259.36 682.243 L1258.81 682.243 L1258.25 682.243 L1257.69 682.243 L1257.13 682.243 L1256.57 682.243 L1256.01 682.243 L1255.45 682.243 L1254.89 682.243 L1254.33 682.243 L1253.77 682.243 L1253.21 682.243 L1252.65 682.243 L1252.09 682.243 L1251.54 682.243 L1250.98 682.243 L1250.42 682.243 L1249.86 682.243 L1249.3 682.243 L1248.74 682.243 L1248.18 682.243 L1247.62 682.243 L1247.06 682.243 L1246.5 682.243 L1245.94 682.243 L1245.38 682.243 L1244.82 682.243 L1244.26 682.243 L1243.71 682.243 L1243.15 682.243 L1242.59 682.243 L1242.03 682.243 L1241.47 682.243 L1240.91 682.243 L1240.35 682.243 L1239.79 682.243 L1239.23 682.243 L1238.67 682.243 L1238.11 682.243 L1237.55 682.243 L1236.99 682.243 L1236.44 682.243 L1235.88 682.243 L1235.32 682.243 L1234.76 682.243 L1234.2 682.243 L1233.64 682.243 L1233.08 682.243 L1232.52 682.243 L1231.96 682.243 L1231.4 682.243 L1230.84 682.243 L1230.28 682.243 L1229.72 682.243 L1229.17 682.243 L1228.61 682.243 L1228.05 682.243 L1227.49 682.243 L1226.93 682.243 L1226.37 682.243 L1225.81 682.243 L1225.25 682.243 L1224.69 682.243 L1224.13 682.243 L1223.57 682.243 L1223.01 682.243 L1222.45 682.243 L1221.89 682.243 L1221.34 682.243 L1220.78 682.243 L1220.22 682.243 L1219.66 682.243 L1219.1 682.243 L1218.54 682.243 L1217.98 682.243 L1217.42 682.243 L1216.86 682.243 L1216.3 682.243 L1215.74 682.243 L1215.18 682.243 L1214.62 682.243 L1214.07 682.243 L1213.51 682.243 L1212.95 682.243 L1212.39 682.243 L1211.83 682.243 L1211.27 682.243 L1210.71 682.243 L1210.15 682.243 L1209.59 682.243 L1209.03 682.243 L1208.47 682.243 L1207.91 682.243 L1207.35 682.243 L1206.8 682.243 L1206.24 682.243 L1205.68 682.243 L1205.12 682.243 L1204.56 682.243 L1204 682.243 L1203.44 682.243 L1202.88 682.243 L1202.32 682.243 L1201.76 682.243 L1201.2 682.243 L1200.64 682.243 L1200.08 682.243 L1199.52 682.243 L1198.97 682.243 L1198.41 682.243 L1197.85 682.243 L1197.29 682.243 L1196.73 682.243 L1196.17 682.243 L1195.61 682.243 L1195.05 682.243 L1194.49 682.243 L1193.93 682.243 L1193.37 682.243 L1192.81 682.243 L1192.25 682.243 L1191.7 682.243 L1191.14 682.243 L1190.58 682.243 L1190.02 682.243 L1189.46 682.243 L1188.9 682.243 L1188.34 682.243 L1187.78 682.243 L1187.22 682.243 L1186.66 682.243 L1186.1 682.243 L1185.54 682.243 L1184.98 682.243 L1184.43 682.243 L1183.87 682.243 L1183.31 682.243 L1182.75 682.243 L1182.19 682.243 L1181.63 682.243 L1181.07 682.243 L1180.51 682.243 L1179.95 682.243 L1179.39 682.243 L1178.83 682.243 L1178.27 682.243 L1177.71 682.243 L1177.15 682.243 L1176.6 682.243 L1176.04 682.243 L1175.48 682.243 L1174.92 682.243 L1174.36 682.243 L1173.8 682.243 L1173.24 682.243 L1172.68 682.243 L1172.12 682.243 L1171.56 682.243 L1171 682.243 L1170.44 682.243 L1169.88 682.243 L1169.33 682.243 L1168.77 682.243 L1168.21 682.243 L1167.65 682.243 L1167.09 682.243 L1166.53 682.243 L1165.97 682.243 L1165.41 682.243 L1164.85 682.243 L1164.29 682.243 L1163.73 682.243 L1163.17 682.243 L1162.61 682.243 L1162.05 682.243 L1161.5 682.243 L1160.94 682.243 L1160.38 682.243 L1159.82 682.243 L1159.26 682.243 L1158.7 682.243 L1158.14 682.243 L1157.58 682.243 L1157.02 682.243 L1156.46 682.243 L1155.9 682.243 L1155.34 682.243 L1154.78 682.243 L1154.23 682.243 L1153.67 682.243 L1153.11 682.243 L1152.55 682.243 L1151.99 682.243 L1151.43 682.243 L1150.87 682.243 L1150.31 682.243 L1149.75 682.243 L1149.19 682.243 L1148.63 682.243 L1148.07 682.243 L1147.51 682.243 L1146.96 682.243 L1146.4 682.243 L1145.84 682.243 L1145.28 682.243 L1144.72 682.243 L1144.16 682.243 L1143.6 682.243 L1143.04 682.243 L1142.48 682.243 L1141.92 682.243 L1141.36 682.243 L1140.8 682.243 L1140.24 682.243 L1139.68 682.243 L1139.13 682.243 L1138.57 682.243 L1138.01 682.243 L1137.45 682.243 L1136.89 682.243 L1136.33 682.243 L1135.77 682.243 L1135.21 682.243 L1134.65 682.243 L1134.09 682.243 L1133.53 682.243 L1132.97 682.243 L1132.41 682.243 L1131.86 682.243 L1131.3 682.243 L1130.74 682.243 L1130.18 682.243 L1129.62 682.243 L1129.06 682.243 L1128.5 682.243 L1127.94 682.243 L1127.38 682.243 L1126.82 682.243 L1126.26 682.243 L1125.7 682.243 L1125.14 682.243 L1124.59 682.243 L1124.03 682.243 L1123.47 682.243 L1122.91 682.243 L1122.35 682.243 L1121.79 682.243 L1121.23 682.243 L1120.67 682.243 L1120.11 682.243 L1119.55 682.243 L1118.99 682.243 L1118.43 682.243 L1117.87 682.243 L1117.31 682.243 L1116.76 682.243 L1116.2 682.243 L1115.64 682.243 L1115.08 682.243 L1114.52 682.243 L1113.96 682.243 L1113.4 682.243 L1112.84 682.243 L1112.28 682.243 L1111.72 682.243 L1111.16 682.243 L1110.6 682.243 L1110.04 682.243 L1109.49 682.243 L1108.93 682.243 L1108.37 682.243 L1107.81 682.243 L1107.25 682.243 L1106.69 682.243 L1106.13 682.243 L1105.57 682.243 L1105.01 682.243 L1104.45 682.243 L1103.89 682.243 L1103.33 682.243 L1102.77 682.243 L1102.22 682.243 L1101.66 682.243 L1101.1 682.243 L1100.54 682.243 L1099.98 682.243 L1099.42 682.243 L1098.86 682.243 L1098.3 682.243 L1097.74 682.243 L1097.18 682.243 L1096.62 682.243 L1096.06 682.243 L1095.5 682.243 L1094.94 682.243 L1094.39 682.243 L1093.83 682.243 L1093.27 682.243 L1092.71 682.243 L1092.15 682.243 L1091.59 682.243 L1091.03 682.243 L1090.47 682.243 L1089.91 682.243 L1089.35 682.243 L1088.79 682.243 L1088.23 682.243 L1087.67 682.243 L1087.12 682.243 L1086.56 682.243 L1086 682.243 L1085.44 682.243 L1084.88 682.243 L1084.32 682.243 L1083.76 682.243 L1083.2 682.243 L1082.64 682.243 L1082.08 682.243 L1081.52 682.243 L1080.96 682.243 L1080.4 682.243 L1079.85 682.243 L1079.29 682.243 L1078.73 682.243 L1078.17 682.243 L1077.61 682.243 L1077.05 682.243 L1076.49 682.243 L1075.93 682.243 L1075.37 682.243 L1074.81 682.243 L1074.25 682.243 L1073.69 682.243 L1073.13 682.243 L1072.57 682.243 L1072.02 682.243 L1071.46 682.243 L1070.9 682.243 L1070.34 682.243 L1069.78 682.243 L1069.22 682.243 L1068.66 682.243 L1068.1 682.243 L1067.54 682.243 L1066.98 682.243 L1066.42 682.243 L1065.86 682.243 L1065.3 682.243 L1064.75 682.243 L1064.19 682.243 L1063.63 682.243 L1063.07 682.243 L1062.51 682.243 L1061.95 682.243 L1061.39 682.243 L1060.83 682.243 L1060.27 682.243 L1059.71 682.243 L1059.15 682.243 L1058.59 682.243 L1058.03 682.243 L1057.48 682.243 L1056.92 682.243 L1056.36 682.243 L1055.8 682.243 L1055.24 682.243 L1054.68 682.243 L1054.12 682.243 L1053.56 682.243 L1053 682.243 L1052.44 682.243 L1051.88 682.243 L1051.32 682.243 L1050.76 682.243 L1050.2 682.243 L1049.65 682.243 L1049.09 682.243 L1048.53 682.243 L1047.97 682.243 L1047.41 682.243 L1046.85 682.243 L1046.29 682.243 L1045.73 682.243 L1045.17 682.243 L1044.61 682.243 L1044.05 682.243 L1043.49 682.243 L1042.93 682.243 L1042.38 682.243 L1041.82 682.243 L1041.26 682.243 L1040.7 682.243 L1040.14 682.243 L1039.58 682.243 L1039.02 682.243 L1038.46 682.243 L1037.9 682.243 L1037.34 682.243 L1036.78 682.243 L1036.22 682.243 L1035.66 682.243 L1035.1 682.243 L1034.55 682.243 L1033.99 682.243 L1033.43 682.243 L1032.87 682.243 L1032.31 682.243 L1031.75 682.243 L1031.19 682.243 L1030.63 682.243 L1030.07 682.243 L1029.51 682.243 L1028.95 682.243 L1028.39 682.243 L1027.83 682.243 L1027.28 682.243 L1026.72 682.243 L1026.16 682.243 L1025.6 682.243 L1025.04 682.243 L1024.48 682.243 L1023.92 682.243 L1023.36 682.243 L1022.8 682.243 L1022.24 682.243 L1021.68 682.243 L1021.12 682.243 L1020.56 682.243 L1020.01 682.243 L1019.45 682.243 L1018.89 682.243 L1018.33 682.243 L1017.77 682.243 L1017.21 682.243 L1016.65 682.243 L1016.09 682.243 L1015.53 682.243 L1014.97 682.243 L1014.41 682.243 L1013.85 682.243 L1013.29 682.243 L1012.73 682.243 L1012.18 682.243 L1011.62 682.243 L1011.06 682.243 L1010.5 682.243 L1009.94 682.243 L1009.38 682.243 L1008.82 682.243 L1008.26 682.243 L1007.7 682.243 L1007.14 682.243 L1006.58 682.243 L1006.02 682.243 L1005.46 682.243 L1004.91 682.243 L1004.35 682.243 L1003.79 682.243 L1003.23 682.243 L1002.67 682.243 L1002.11 682.243 L1001.55 682.243 L1000.99 682.243 L1000.43 682.243 L999.872 682.243 L999.313 682.243 L998.754 682.243 L998.194 682.243 L997.635 682.243 L997.076 682.243 L996.517 682.243 L995.957 682.243 L995.398 682.243 L994.839 682.243 L994.28 682.243 L993.72 682.243 L993.161 682.243 L992.602 682.243 L992.043 682.243 L991.483 682.243 L990.924 682.243 L990.365 682.243 L989.806 682.243 L989.246 682.243 L988.687 682.243 L988.128 682.243 L987.569 682.243 L987.009 682.243 L986.45 682.243 L985.891 682.243 L985.332 682.243 L984.772 682.243 L984.213 682.243 L983.654 682.243 L983.095 682.243 L982.535 682.243 L981.976 682.243 L981.417 682.243 L980.858 682.243 L980.298 682.243 L979.739 682.243 L979.18 682.243 L978.621 682.243 L978.061 682.243 L977.502 682.243 L976.943 682.243 L976.384 682.243 L975.824 682.243 L975.265 682.243 L974.706 682.243 L974.147 682.243 L973.587 682.243 L973.028 682.243 L972.469 682.243 L971.91 682.243 L971.35 682.243 L970.791 682.243 L970.232 682.243 L969.673 682.243 L969.113 682.243 L968.554 682.243 L967.995 682.243 L967.436 682.243 L966.876 682.243 L966.317 682.243 L965.758 682.243 L965.199 682.243 L964.639 682.243 L964.08 682.243 L963.521 682.243 L962.962 682.243 L962.402 682.243 L961.843 682.243 L961.284 682.243 L960.725 682.243 L960.165 682.243 L959.606 682.243 L959.047 682.243 L958.488 682.243 L957.928 682.243 L957.369 682.243 L956.81 682.243 L956.251 682.243 L955.691 682.243 L955.132 682.243 L954.573 682.243 L954.014 682.243 L953.454 682.243 L952.895 682.243 L952.336 682.243 L951.777 682.243 L951.217 682.243 L950.658 682.243 L950.099 682.243 L949.54 682.243 L948.98 682.243 L948.421 682.243 L947.862 682.243 L947.303 682.243 L946.743 682.243 L946.184 682.243 L945.625 682.243 L945.066 682.243 L944.506 682.243 L943.947 682.243 L943.388 682.243 L942.829 682.243 L942.269 682.243 L941.71 682.243 L941.151 682.243 L940.592 682.243 L940.032 682.243 L939.473 682.243 L938.914 682.243 L938.355 682.243 L937.795 682.243 L937.236 682.243 L936.677 682.243 L936.118 682.243 L935.558 682.243 L934.999 682.243 L934.44 682.243 L933.881 682.243 L933.321 682.243 L932.762 682.243 L932.203 682.243 L931.644 682.243 L931.084 682.243 L930.525 682.243 L929.966 682.243 L929.406 682.243 L928.847 682.243 L928.288 682.243 L927.729 682.243 L927.169 682.243 L926.61 682.243 L926.051 682.243 L925.492 682.243 L924.932 682.243 L924.373 682.243 L923.814 682.243 L923.255 682.243 L922.695 682.243 L922.136 682.243 L921.577 682.243 L921.018 682.243 L920.458 682.243 L919.899 682.243 L919.34 682.243 L918.781 682.243 L918.221 682.243 L917.662 682.243 L917.103 682.243 L916.544 682.243 L915.984 682.243 L915.425 682.243 L914.866 682.243 L914.307 682.243 L913.747 682.243 L913.188 682.243 L912.629 682.243 L912.07 682.243 L911.51 682.243 L910.951 682.243 L910.392 682.243 L909.833 682.243 L909.273 682.243 L908.714 682.243 L908.155 682.243 L907.596 682.243 L907.036 682.243 L906.477 682.243 L905.918 682.243 L905.359 682.243 L904.799 682.243 L904.24 682.243 L903.681 682.243 L903.122 682.243 L902.562 682.243 L902.003 682.243 L901.444 682.243 L900.885 682.243 L900.325 682.243 L899.766 682.243 L899.207 682.243 L898.648 682.243 L898.088 682.243 L897.529 682.243 L896.97 682.243 L896.411 682.243 L895.851 682.243 L895.292 682.243 L894.733 682.243 L894.174 682.243 L893.614 682.243 L893.055 682.243 L892.496 682.243 L891.937 682.243 L891.377 682.243 L890.818 682.243 L890.259 682.243 L889.7 682.243 L889.14 682.243 L888.581 682.243 L888.022 682.243 L887.463 682.243 L886.903 682.243 L886.344 682.243 L885.785 682.243 L885.226 682.243 L884.666 682.243 L884.107 682.243 L883.548 682.243 L882.989 682.243 L882.429 682.243 L881.87 682.243 L881.311 682.243 L880.752 682.243 L880.192 682.243 L879.633 682.243 L879.074 682.243 L878.515 682.243 L877.955 682.243 L877.396 682.243 L876.837 682.243 L876.278 682.243 L875.718 682.243 L875.159 682.243 L874.6 682.243 L874.041 682.243 L873.481 682.243 L872.922 682.243 L872.363 682.243 L871.804 682.243 L871.244 682.243 L870.685 682.243 L870.126 682.243 L869.567 682.243 L869.007 682.243 L868.448 682.243 L867.889 682.243 L867.33 682.243 L866.77 682.243 L866.211 682.243 L865.652 682.243 L865.093 682.243 L864.533 682.243 L863.974 682.243 L863.415 682.243 L862.856 682.243 L862.296 682.243 L861.737 682.243 L861.178 682.243 L860.619 682.243 L860.059 682.243 L859.5 682.243 L858.941 682.243 L858.382 682.243 L857.822 682.243 L857.263 682.243 L856.704 682.243 L856.145 682.243 L855.585 682.243 L855.026 682.243 L854.467 682.243 L853.908 682.243 L853.348 682.243 L852.789 682.243 L852.23 682.243 L851.671 682.243 L851.111 682.243 L850.552 682.243 L849.993 682.243 L849.434 682.243 L848.874 682.243 L848.315 682.243 L847.756 682.243 L847.197 682.243 L846.637 682.243 L846.078 682.243 L845.519 682.243 L844.96 682.243 L844.4 682.243 L843.841 682.243 L843.282 682.243 L842.723 682.243 L842.163 682.243 L841.604 682.243 L841.045 682.243 L840.486 682.243 L839.926 682.243 L839.367 682.243 L838.808 682.243 L838.249 682.243 L837.689 682.243 L837.13 682.243 L836.571 682.243 L836.012 682.243 L835.452 682.243 L834.893 682.243 L834.334 682.243 L833.775 682.243 L833.215 682.243 L832.656 682.243 L832.097 682.243 L831.538 682.243 L830.978 682.243 L830.419 682.243 L829.86 682.243 L829.301 682.243 L828.741 682.243 L828.182 682.243 L827.623 682.243 L827.064 682.243 L826.504 682.243 L825.945 682.243 L825.386 682.243 L824.827 682.243 L824.267 682.243 L823.708 682.243 L823.149 682.243 L822.59 682.243 L822.03 682.243 L821.471 682.243 L820.912 682.243 L820.353 682.243 L819.793 682.243 L819.234 682.243 L818.675 682.243 L818.116 682.243 L817.556 682.243 L816.997 682.243 L816.438 682.243 L815.879 682.243 L815.319 682.243 L814.76 682.243 L814.201 682.243 L813.642 682.243 L813.082 682.243 L812.523 682.243 L811.964 682.243 L811.405 682.243 L810.845 682.243 L810.286 682.243 L809.727 682.243 L809.168 682.243 L808.608 682.243 L808.049 682.243 L807.49 682.243 L806.931 682.243 L806.371 682.243 L805.812 682.243 L805.253 682.243 L804.693 682.243 L804.134 682.243 L803.575 682.243 L803.016 682.243 L802.456 682.243 L801.897 682.243 L801.338 682.243 L800.779 682.243 L800.219 682.243 L799.66 682.243 L799.101 682.243 L798.542 682.243 L797.982 682.243 L797.423 682.243 L796.864 682.243 L796.305 682.243 L795.745 682.243 L795.186 682.243 L794.627 682.243 L794.068 682.243 L793.508 682.243 L792.949 682.243 L792.39 682.243 L791.831 682.243 L791.271 682.243 L790.712 682.243 L790.153 682.243 L789.594 682.243 L789.034 682.243 L788.475 682.243 L787.916 682.243 L787.357 682.243 L786.797 682.243 L786.238 682.243 L785.679 682.243 L785.12 682.243 L784.56 682.243 L784.001 682.243 L783.442 682.243 L782.883 682.243 L782.323 682.243 L781.764 682.243 L781.205 682.243 L780.646 682.243 L780.086 682.243 L779.527 682.243 L778.968 682.243 L778.409 682.243 L777.849 682.243 L777.29 682.243 L776.731 682.243 L776.172 682.243 L775.612 682.243 L775.053 682.243 L774.494 682.243 L773.935 682.243 L773.375 682.243 L772.816 682.243 L772.257 682.243 L771.698 682.243 L771.138 682.243 L770.579 682.243 L770.02 682.243 L769.461 682.243 L768.901 682.243 L768.342 682.243 L767.783 682.243 L767.224 682.243 L766.664 682.243 L766.105 682.243 L765.546 682.243 L764.987 682.243 L764.427 682.243 L763.868 682.243 L763.309 682.243 L762.75 682.243 L762.19 682.243 L761.631 682.243 L761.072 682.243 L760.513 682.243 L759.953 682.243 L759.394 682.243 L758.835 682.243 L758.276 682.243 L757.716 682.243 L757.157 682.243 L756.598 682.243 L756.039 682.243 L755.479 682.243 L754.92 682.243 L754.361 682.243 L753.802 682.243 L753.242 682.243 L752.683 682.243 L752.124 682.243 L751.565 682.243 L751.005 682.243 L750.446 682.243 L749.887 682.243 L749.328 682.243 L748.768 682.243 L748.209 682.243 L747.65 682.243 L747.091 682.243 L746.531 682.243 L745.972 682.243 L745.413 682.243 L744.854 682.243 L744.294 682.243 L743.735 682.243 L743.176 682.243 L742.617 682.243 L742.057 682.243 L741.498 682.243 L740.939 682.243 L740.38 682.243 L739.82 682.243 L739.261 682.243 L738.702 682.243 L738.143 682.243 L737.583 682.243 L737.024 682.243 L736.465 682.243 L735.906 682.243 L735.346 682.243 L734.787 682.243 L734.228 682.243 L733.669 682.243 L733.109 682.243 L732.55 682.243 L731.991 682.243 L731.432 682.243 L730.872 682.243 L730.313 682.243 L729.754 682.243 L729.195 682.243 L728.635 682.243 L728.076 682.243 L727.517 682.243 L726.958 682.243 L726.398 682.243 L725.839 682.243 L725.28 682.243 L724.721 682.243 L724.161 682.243 L723.602 682.243 L723.043 682.243 L722.484 682.243 L721.924 682.243 L721.365 682.243 L720.806 682.243 L720.247 682.243  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.943 720.806,682.943 721.365,682.943 721.924,682.943 722.484,682.943 723.043,682.943 723.602,682.943 724.161,682.943 724.721,682.943 725.28,682.943 725.839,682.943 726.398,682.943 726.958,682.943 727.517,682.943 728.076,682.943 728.635,682.943 729.195,682.943 729.754,682.943 730.313,682.943 730.872,682.943 731.432,682.943 731.991,682.943 732.55,682.943 733.109,682.943 733.669,682.943 734.228,682.943 734.787,682.943 735.346,682.943 735.906,682.943 736.465,682.943 737.024,682.943 737.583,682.943 738.143,682.943 738.702,682.943 739.261,682.943 739.82,682.943 740.38,682.943 740.939,682.943 741.498,682.943 742.057,682.943 742.617,682.943 743.176,682.943 743.735,682.943 744.294,682.943 744.854,682.943 745.413,682.943 745.972,682.943 746.531,682.943 747.091,682.943 747.65,682.943 748.209,682.943 748.768,682.943 749.328,682.943 749.887,682.943 750.446,682.943 751.005,682.943 751.565,682.943 752.124,682.943 752.683,682.943 753.242,682.943 753.802,682.943 754.361,682.943 754.92,682.943 755.479,682.943 756.039,682.943 756.598,682.943 757.157,682.943 757.716,682.943 758.276,682.943 758.835,682.943 759.394,682.943 759.953,682.943 760.513,682.943 761.072,682.943 761.631,682.943 762.19,682.943 762.75,682.943 763.309,682.943 763.868,682.943 764.427,682.943 764.987,682.943 765.546,682.943 766.105,682.943 766.664,682.943 767.224,682.943 767.783,682.943 768.342,682.943 768.901,682.943 769.461,682.943 770.02,682.943 770.579,682.943 771.138,682.943 771.698,682.943 772.257,682.943 772.816,682.943 773.375,682.943 773.935,682.943 774.494,682.943 775.053,682.943 775.612,682.943 776.172,682.943 776.731,682.943 777.29,682.943 777.849,682.943 778.409,682.943 778.968,682.943 779.527,682.943 780.086,682.943 780.646,682.943 781.205,682.943 781.764,682.943 782.323,682.943 782.883,682.943 783.442,682.943 784.001,682.943 784.56,682.943 785.12,682.943 785.679,682.943 786.238,682.943 786.797,682.943 787.357,682.943 787.916,682.943 788.475,682.943 789.034,682.943 789.594,682.943 790.153,682.943 790.712,682.943 791.271,682.943 791.831,682.943 792.39,682.943 792.949,682.943 793.508,682.943 794.068,682.943 794.627,682.943 795.186,682.943 795.745,682.943 796.305,682.943 796.864,682.943 797.423,682.943 797.982,682.943 798.542,682.943 799.101,682.943 799.66,682.943 800.219,682.943 800.779,682.943 801.338,682.943 801.897,682.943 802.456,682.943 803.016,682.943 803.575,682.943 804.134,682.943 804.693,682.943 805.253,682.943 805.812,682.943 806.371,682.943 806.931,682.943 807.49,682.943 808.049,682.943 808.608,682.943 809.168,682.943 809.727,682.943 810.286,682.943 810.845,682.943 811.405,682.943 811.964,682.943 812.523,682.943 813.082,682.943 813.642,682.943 814.201,682.943 814.76,682.943 815.319,682.943 815.879,682.943 816.438,682.943 816.997,682.943 817.556,682.943 818.116,682.943 818.675,682.943 819.234,682.943 819.793,682.943 820.353,682.943 820.912,682.943 821.471,682.943 822.03,682.943 822.59,682.943 823.149,682.943 823.708,682.943 824.267,682.943 824.827,682.943 825.386,682.943 825.945,682.943 826.504,682.943 827.064,682.943 827.623,682.943 828.182,682.943 828.741,682.943 829.301,682.943 829.86,682.943 830.419,682.943 830.978,682.943 831.538,682.943 832.097,682.943 832.656,682.943 833.215,682.943 833.775,682.943 834.334,682.943 834.893,682.943 835.452,682.943 836.012,682.943 836.571,682.943 837.13,682.943 837.689,682.943 838.249,682.943 838.808,682.943 839.367,682.943 839.926,682.943 840.486,682.943 841.045,682.943 841.604,682.943 842.163,682.943 842.723,682.943 843.282,682.943 843.841,682.943 844.4,682.943 844.96,682.943 845.519,682.943 846.078,682.943 846.637,682.943 847.197,682.943 847.756,682.943 848.315,682.943 848.874,682.943 849.434,682.943 849.993,682.943 850.552,682.943 851.111,682.943 851.671,682.943 852.23,682.943 852.789,682.943 853.348,682.943 853.908,682.943 854.467,682.943 855.026,682.943 855.585,682.943 856.145,682.943 856.704,682.943 857.263,682.943 857.822,682.943 858.382,682.943 858.941,682.943 859.5,682.943 860.059,682.943 860.619,682.943 861.178,682.943 861.737,682.943 862.296,682.943 862.856,682.943 863.415,682.943 863.974,682.943 864.533,682.943 865.093,682.943 865.652,682.943 866.211,682.943 866.77,682.943 867.33,682.943 867.889,682.943 868.448,682.943 869.007,682.943 869.567,682.943 870.126,682.943 870.685,682.943 871.244,682.943 871.804,682.943 872.363,682.943 872.922,682.943 873.481,682.943 874.041,682.943 874.6,682.943 875.159,682.943 875.718,682.943 876.278,682.943 876.837,682.943 877.396,682.943 877.955,682.943 878.515,682.943 879.074,682.943 879.633,682.943 880.192,682.943 880.752,682.943 881.311,682.943 881.87,682.943 882.429,682.943 882.989,682.943 883.548,682.943 884.107,682.943 884.666,682.943 885.226,682.943 885.785,682.943 886.344,682.943 886.903,682.943 887.463,682.943 888.022,682.943 888.581,682.943 889.14,682.943 889.7,682.943 890.259,682.943 890.818,682.943 891.377,682.943 891.937,682.943 892.496,682.943 893.055,682.943 893.614,682.943 894.174,682.943 894.733,682.943 895.292,682.943 895.851,682.943 896.411,682.943 896.97,682.943 897.529,682.943 898.088,682.943 898.648,682.943 899.207,682.943 899.766,682.943 900.325,682.943 900.885,682.943 901.444,682.943 902.003,682.943 902.562,682.943 903.122,682.943 903.681,682.943 904.24,682.943 904.799,682.943 905.359,682.943 905.918,682.943 906.477,682.943 907.036,682.943 907.596,682.943 908.155,682.943 908.714,682.943 909.273,682.943 909.833,682.943 910.392,682.943 910.951,682.943 911.51,682.943 912.07,682.943 912.629,682.943 913.188,682.943 913.747,682.943 914.307,682.943 914.866,682.943 915.425,682.943 915.984,682.943 916.544,682.943 917.103,682.943 917.662,682.943 918.221,682.943 918.781,682.943 919.34,682.943 919.899,682.943 920.458,682.943 921.018,682.943 921.577,682.943 922.136,682.943 922.695,682.943 923.255,682.943 923.814,682.943 924.373,682.943 924.932,682.943 925.492,682.943 926.051,682.943 926.61,682.943 927.169,682.943 927.729,682.943 928.288,682.943 928.847,682.943 929.406,682.943 929.966,682.943 930.525,682.943 931.084,682.943 931.644,682.943 932.203,682.943 932.762,682.943 933.321,682.943 933.881,682.943 934.44,682.943 934.999,682.943 935.558,682.943 936.118,682.943 936.677,682.943 937.236,682.943 937.795,682.943 938.355,682.943 938.914,682.943 939.473,682.943 940.032,682.943 940.592,682.943 941.151,682.943 941.71,682.943 942.269,682.943 942.829,682.943 943.388,682.943 943.947,682.943 944.506,682.943 945.066,682.943 945.625,682.943 946.184,682.943 946.743,682.943 947.303,682.943 947.862,682.943 948.421,682.943 948.98,682.943 949.54,682.943 950.099,682.943 950.658,682.943 951.217,682.943 951.777,682.943 952.336,682.943 952.895,682.943 953.454,682.943 954.014,682.943 954.573,682.943 955.132,682.943 955.691,682.943 956.251,682.943 956.81,682.943 957.369,682.943 957.928,682.943 958.488,682.943 959.047,682.943 959.606,682.943 960.165,682.943 960.725,682.943 961.284,682.943 961.843,682.943 962.402,682.943 962.962,682.943 963.521,682.943 964.08,682.943 964.639,682.943 965.199,682.943 965.758,682.943 966.317,682.943 966.876,682.943 967.436,682.943 967.995,682.943 968.554,682.943 969.113,682.943 969.673,682.943 970.232,682.943 970.791,682.943 971.35,682.943 971.91,682.943 972.469,682.943 973.028,682.943 973.587,682.943 974.147,682.943 974.706,682.943 975.265,682.943 975.824,682.943 976.384,682.943 976.943,682.943 977.502,682.943 978.061,682.943 978.621,682.943 979.18,682.943 979.739,682.943 980.298,682.943 980.858,682.943 981.417,682.943 981.976,682.943 982.535,682.943 983.095,682.943 983.654,682.943 984.213,682.943 984.772,682.943 985.332,682.943 985.891,682.943 986.45,682.943 987.009,682.943 987.569,682.943 988.128,682.943 988.687,682.943 989.246,682.943 989.806,682.943 990.365,682.943 990.924,682.943 991.483,682.943 992.043,682.943 992.602,682.943 993.161,682.943 993.72,682.943 994.28,682.943 994.839,682.943 995.398,682.943 995.957,682.943 996.517,682.943 997.076,682.943 997.635,682.943 998.194,682.943 998.754,682.943 999.313,682.943 999.872,682.943 1000.43,682.943 1000.99,682.943 1001.55,682.943 1002.11,682.943 1002.67,682.943 1003.23,682.943 1003.79,682.943 1004.35,682.943 1004.91,682.943 1005.46,682.943 1006.02,682.943 1006.58,682.943 1007.14,682.943 1007.7,682.943 1008.26,682.943 1008.82,682.943 1009.38,682.943 1009.94,682.943 1010.5,682.943 1011.06,682.943 1011.62,682.943 1012.18,682.943 1012.73,682.943 1013.29,682.943 1013.85,682.943 1014.41,682.943 1014.97,682.943 1015.53,682.943 1016.09,682.943 1016.65,682.943 1017.21,682.943 1017.77,682.943 1018.33,682.943 1018.89,682.943 1019.45,682.943 1020.01,682.943 1020.56,682.943 1021.12,682.943 1021.68,682.943 1022.24,682.943 1022.8,682.943 1023.36,682.943 1023.92,682.943 1024.48,682.943 1025.04,682.943 1025.6,682.943 1026.16,682.943 1026.72,682.943 1027.28,682.943 1027.83,682.943 1028.39,682.943 1028.95,682.943 1029.51,682.943 1030.07,682.943 1030.63,682.943 1031.19,682.943 1031.75,682.943 1032.31,682.943 1032.87,682.943 1033.43,682.943 1033.99,682.943 1034.55,682.943 1035.1,682.943 1035.66,682.943 1036.22,682.943 1036.78,682.943 1037.34,682.943 1037.9,682.943 1038.46,682.943 1039.02,682.943 1039.58,682.943 1040.14,682.943 1040.7,682.943 1041.26,682.943 1041.82,682.943 1042.38,682.943 1042.93,682.943 1043.49,682.943 1044.05,682.943 1044.61,682.943 1045.17,682.943 1045.73,682.943 1046.29,682.943 1046.85,682.943 1047.41,682.943 1047.97,682.943 1048.53,682.943 1049.09,682.943 1049.65,682.943 1050.2,682.943 1050.76,682.943 1051.32,682.943 1051.88,682.943 1052.44,682.943 1053,682.943 1053.56,682.943 1054.12,682.943 1054.68,682.943 1055.24,682.943 1055.8,682.943 1056.36,682.943 1056.92,682.943 1057.48,682.943 1058.03,682.943 1058.59,682.943 1059.15,682.943 1059.71,682.943 1060.27,682.943 1060.83,682.943 1061.39,682.943 1061.95,682.943 1062.51,682.943 1063.07,682.943 1063.63,682.943 1064.19,682.943 1064.75,682.943 1065.3,682.943 1065.86,682.943 1066.42,682.943 1066.98,682.943 1067.54,682.943 1068.1,682.943 1068.66,682.943 1069.22,682.943 1069.78,682.943 1070.34,682.943 1070.9,682.943 1071.46,682.943 1072.02,682.943 1072.57,682.943 1073.13,682.943 1073.69,682.943 1074.25,682.943 1074.81,682.943 1075.37,682.943 1075.93,682.943 1076.49,682.943 1077.05,682.943 1077.61,682.943 1078.17,682.943 1078.73,682.943 1079.29,682.943 1079.85,682.943 1080.4,682.943 1080.96,682.943 1081.52,682.943 1082.08,682.943 1082.64,682.943 1083.2,682.943 1083.76,682.943 1084.32,682.943 1084.88,682.943 1085.44,682.943 1086,682.943 1086.56,682.943 1087.12,682.943 1087.67,682.943 1088.23,682.943 1088.79,682.943 1089.35,682.943 1089.91,682.943 1090.47,682.943 1091.03,682.943 1091.59,682.943 1092.15,682.943 1092.71,682.943 1093.27,682.943 1093.83,682.943 1094.39,682.943 1094.94,682.943 1095.5,682.943 1096.06,682.943 1096.62,682.943 1097.18,682.943 1097.74,682.943 1098.3,682.943 1098.86,682.943 1099.42,682.943 1099.98,682.943 1100.54,682.943 1101.1,682.943 1101.66,682.943 1102.22,682.943 1102.77,682.943 1103.33,682.943 1103.89,682.943 1104.45,682.943 1105.01,682.943 1105.57,682.943 1106.13,682.943 1106.69,682.943 1107.25,682.943 1107.81,682.943 1108.37,682.943 1108.93,682.943 1109.49,682.943 1110.04,682.943 1110.6,682.943 1111.16,682.943 1111.72,682.943 1112.28,682.943 1112.84,682.943 1113.4,682.943 1113.96,682.943 1114.52,682.943 1115.08,682.943 1115.64,682.943 1116.2,682.943 1116.76,682.943 1117.31,682.943 1117.87,682.943 1118.43,682.943 1118.99,682.943 1119.55,682.943 1120.11,682.943 1120.67,682.943 1121.23,682.943 1121.79,682.943 1122.35,682.943 1122.91,682.943 1123.47,682.943 1124.03,682.943 1124.59,682.943 1125.14,682.943 1125.7,682.943 1126.26,682.943 1126.82,682.943 1127.38,682.943 1127.94,682.943 1128.5,682.943 1129.06,682.943 1129.62,682.943 1130.18,682.943 1130.74,682.943 1131.3,682.943 1131.86,682.943 1132.41,682.943 1132.97,682.943 1133.53,682.943 1134.09,682.943 1134.65,682.943 1135.21,682.943 1135.77,682.943 1136.33,682.943 1136.89,682.943 1137.45,682.943 1138.01,682.943 1138.57,682.943 1139.13,682.943 1139.68,682.943 1140.24,682.943 1140.8,682.943 1141.36,682.943 1141.92,682.943 1142.48,682.943 1143.04,682.943 1143.6,682.943 1144.16,682.943 1144.72,682.943 1145.28,682.943 1145.84,682.943 1146.4,682.943 1146.96,682.943 1147.51,682.943 1148.07,682.943 1148.63,682.943 1149.19,682.943 1149.75,682.943 1150.31,682.943 1150.87,682.943 1151.43,682.943 1151.99,682.943 1152.55,682.943 1153.11,682.943 1153.67,682.943 1154.23,682.943 1154.78,682.943 1155.34,682.943 1155.9,682.943 1156.46,682.943 1157.02,682.943 1157.58,682.943 1158.14,682.943 1158.7,682.943 1159.26,682.943 1159.82,682.943 1160.38,682.943 1160.94,682.943 1161.5,682.943 1162.05,682.943 1162.61,682.943 1163.17,682.943 1163.73,682.943 1164.29,682.943 1164.85,682.943 1165.41,682.943 1165.97,682.943 1166.53,682.943 1167.09,682.943 1167.65,682.943 1168.21,682.943 1168.77,682.943 1169.33,682.943 1169.88,682.943 1170.44,682.943 1171,682.943 1171.56,682.943 1172.12,682.943 1172.68,682.943 1173.24,682.943 1173.8,682.943 1174.36,682.943 1174.92,682.943 1175.48,682.943 1176.04,682.943 1176.6,682.943 1177.15,682.943 1177.71,682.943 1178.27,682.943 1178.83,682.943 1179.39,682.943 1179.95,682.943 1180.51,682.943 1181.07,682.943 1181.63,682.943 1182.19,682.943 1182.75,682.943 1183.31,682.943 1183.87,682.943 1184.43,682.943 1184.98,682.943 1185.54,682.943 1186.1,682.943 1186.66,682.943 1187.22,682.943 1187.78,682.943 1188.34,682.943 1188.9,682.943 1189.46,682.943 1190.02,682.943 1190.58,682.943 1191.14,682.943 1191.7,682.943 1192.25,682.943 1192.81,682.943 1193.37,682.943 1193.93,682.943 1194.49,682.943 1195.05,682.943 1195.61,682.943 1196.17,682.943 1196.73,682.943 1197.29,682.943 1197.85,682.943 1198.41,682.943 1198.97,682.943 1199.52,682.943 1200.08,682.943 1200.64,682.943 1201.2,682.943 1201.76,682.943 1202.32,682.943 1202.88,682.943 1203.44,682.943 1204,682.943 1204.56,682.943 1205.12,682.943 1205.68,682.943 1206.24,682.943 1206.8,682.943 1207.35,682.943 1207.91,682.943 1208.47,682.943 1209.03,682.943 1209.59,682.943 1210.15,682.943 1210.71,682.943 1211.27,682.943 1211.83,682.943 1212.39,682.943 1212.95,682.943 1213.51,682.943 1214.07,682.943 1214.62,682.943 1215.18,682.943 1215.74,682.943 1216.3,682.943 1216.86,682.943 1217.42,682.943 1217.98,682.943 1218.54,682.943 1219.1,682.943 1219.66,682.943 1220.22,682.943 1220.78,682.943 1221.34,682.943 1221.89,682.943 1222.45,682.943 1223.01,682.943 1223.57,682.943 1224.13,682.943 1224.69,682.943 1225.25,682.943 1225.81,682.943 1226.37,682.943 1226.93,682.943 1227.49,682.943 1228.05,682.943 1228.61,682.943 1229.17,682.943 1229.72,682.943 1230.28,682.943 1230.84,682.943 1231.4,682.943 1231.96,682.943 1232.52,682.943 1233.08,682.943 1233.64,682.943 1234.2,682.943 1234.76,682.943 1235.32,682.943 1235.88,682.943 1236.44,682.943 1236.99,682.943 1237.55,682.943 1238.11,682.943 1238.67,682.943 1239.23,682.943 1239.79,682.943 1240.35,682.943 1240.91,682.943 1241.47,682.943 1242.03,682.943 1242.59,682.943 1243.15,682.943 1243.71,682.943 1244.26,682.943 1244.82,682.943 1245.38,682.943 1245.94,682.943 1246.5,682.943 1247.06,682.943 1247.62,682.943 1248.18,682.943 1248.74,682.943 1249.3,682.943 1249.86,682.943 1250.42,682.943 1250.98,682.943 1251.54,682.943 1252.09,682.943 1252.65,682.943 1253.21,682.943 1253.77,682.943 1254.33,682.943 1254.89,682.943 1255.45,682.943 1256.01,682.943 1256.57,682.943 1257.13,682.943 1257.69,682.943 1258.25,682.943 1258.81,682.943 1259.36,682.943 1259.92,682.943 1260.48,682.943 1261.04,682.943 1261.6,682.943 1262.16,682.943 1262.72,682.943 1263.28,682.943 1263.84,682.943 1264.4,682.943 1264.96,682.943 1265.52,682.943 1266.08,682.943 1266.63,682.943 1267.19,682.943 1267.75,682.943 1268.31,682.943 1268.87,682.943 1269.43,682.943 1269.99,682.943 1270.55,682.943 1271.11,682.943 1271.67,682.943 1272.23,682.943 1272.79,682.943 1273.35,682.943 1273.91,682.943 1274.46,682.943 1275.02,682.943 1275.58,682.943 1276.14,682.943 1276.7,682.943 1277.26,682.943 1277.82,682.943 1278.38,682.943 1278.94,682.943 1279.5,682.943 1280.06,682.943 1280.62,682.943 1281.18,682.943 1281.73,682.943 1282.29,682.943 1282.85,682.943 1283.41,682.943 1283.97,682.943 1284.53,682.943 1285.09,682.943 1285.65,682.943 1286.21,682.943 1286.77,682.943 1287.33,682.943 1287.89,682.943 1288.45,682.943 1289,682.943 1289.56,682.943 1290.12,682.943 1290.68,682.943 1291.24,682.943 1291.8,682.943 1292.36,682.943 1292.92,682.943 1293.48,682.943 1294.04,682.943 1294.6,682.943 1295.16,682.943 1295.72,682.943 1296.28,682.943 1296.83,682.943 1297.39,682.943 1297.95,682.943 1298.51,682.943 1299.07,682.943 1299.63,682.943 1300.19,682.943 1300.75,682.943 1301.31,682.943 1301.87,682.943 1302.43,682.943 1302.99,682.943 1303.55,682.943 1304.1,682.943 1304.66,682.943 1305.22,682.943 1305.78,682.943 1306.34,682.943 1306.9,682.943 1307.46,682.943 1308.02,682.943 1308.58,682.943 1309.14,682.943 1309.7,682.943 1310.26,682.943 1310.82,682.943 1311.38,682.943 1311.93,682.943 1312.49,682.943 1313.05,682.943 1313.61,682.943 1314.17,682.943 1314.73,682.943 1315.29,682.943 1315.85,682.943 1316.41,682.943 1316.97,682.943 1317.53,682.943 1318.09,682.943 1318.65,682.943 1319.2,682.943 1319.76,682.943 1320.32,682.943 1320.88,682.943 1321.44,682.943 1322,682.943 1322.56,682.943 1323.12,682.943 1323.68,682.943 1324.24,682.943 1324.8,682.943 1325.36,682.943 1325.92,682.943 1326.47,682.943 1327.03,682.943 1327.59,682.943 1328.15,682.943 1328.71,682.943 1329.27,682.943 1329.83,682.943 1330.39,682.943 1330.95,682.943 1331.51,682.943 1332.07,682.943 1332.63,682.943 1333.19,682.943 1333.75,682.943 1334.3,682.943 1334.86,682.943 1335.42,682.943 1335.98,682.943 1336.54,682.943 1337.1,682.943 1337.66,682.943 1338.22,682.943 1338.78,682.943 1339.34,682.943 1339.9,682.943 1340.46,682.943 1341.02,682.943 1341.57,682.943 1342.13,682.943 1342.69,682.943 1343.25,682.943 1343.81,682.943 1344.37,682.943 1344.93,682.943 1345.49,682.943 1346.05,682.943 1346.61,682.943 1347.17,682.943 1347.73,682.943 1348.29,682.943 1348.84,682.943 1349.4,682.943 1349.96,682.943 1350.52,682.943 1351.08,682.943 1351.64,682.943 1352.2,682.943 1352.76,682.943 1353.32,682.943 1353.88,682.943 1354.44,682.943 1355,682.943 1355.56,682.943 1356.12,682.943 1356.67,682.943 1357.23,682.943 1357.79,682.943 1358.35,682.943 1358.91,682.943 1359.47,682.943 1360.03,682.943 1360.59,682.943 1361.15,682.943 1361.71,682.943 1362.27,682.943 1362.83,682.943 1363.39,682.943 1363.94,682.943 1364.5,682.943 1365.06,682.943 1365.62,682.943 1366.18,682.943 1366.74,682.943 1367.3,682.943 1367.86,682.943 1368.42,682.943 1368.98,682.943 1369.54,682.943 1370.1,682.943 1370.66,682.943 1371.21,682.943 1371.77,682.943 1372.33,682.943 1372.89,682.943 1373.45,682.943 1374.01,682.943 1374.57,682.943 1375.13,682.943 1375.69,682.943 1376.25,682.943 1376.81,682.943 1377.37,682.943 1377.93,682.943 1378.49,682.943 1379.04,682.943 1379.6,682.943 1380.16,682.943 1380.72,682.943 1381.28,682.943 1381.84,682.943 1382.4,682.943 1382.96,682.943 1383.52,682.943 1384.08,682.943 1384.64,682.943 1385.2,682.943 1385.76,682.943 1386.31,682.943 1386.87,682.943 1387.43,682.943 1387.99,682.943 1388.55,682.943 1389.11,682.943 1389.67,682.943 1390.23,682.943 1390.79,682.943 1391.35,682.943 1391.91,682.943 1392.47,682.943 1393.03,682.943 1393.58,682.943 1394.14,682.943 1394.7,682.943 1395.26,682.943 1395.82,682.943 1396.38,682.943 1396.94,682.943 1397.5,682.943 1398.06,682.943 1398.62,682.943 1399.18,682.943 1399.74,682.943 1400.3,682.943 1400.86,682.943 1401.41,682.943 1401.97,682.943 1402.53,682.943 1403.09,682.943 1403.65,682.943 1404.21,682.943 1404.77,682.943 1405.33,682.943 1405.89,682.943 1406.45,682.943 1407.01,682.943 1407.57,682.943 1408.13,682.943 1408.68,682.943 1409.24,682.943 1409.8,682.943 1410.36,682.943 1410.92,682.943 1411.48,682.943 1412.04,682.943 1412.6,682.943 1413.16,682.943 1413.72,682.943 1414.28,682.943 1414.84,682.943 1415.4,682.943 1415.95,682.943 1416.51,682.943 1417.07,682.943 1417.63,682.943 1418.19,682.943 1418.75,682.943 1419.31,682.943 1419.87,682.943 1420.43,682.943 1420.99,682.943 1421.55,682.943 1422.11,682.943 1422.67,682.943 1423.23,682.943 1423.78,682.943 1424.34,682.943 1424.9,682.943 1425.46,682.943 1426.02,682.943 1426.58,682.943 1427.14,682.943 1427.7,682.943 1428.26,682.943 1428.82,682.943 1429.38,682.943 1429.94,682.943 1430.5,682.943 1431.05,682.943 1431.61,682.943 1432.17,682.943 1432.73,682.943 1433.29,682.943 1433.85,682.943 1434.41,682.943 1434.97,682.943 1435.53,682.943 1436.09,682.943 1436.65,682.943 1437.21,682.943 1437.77,682.943 1438.33,682.943 1438.88,682.943 1439.44,682.943 1440,682.943 1440.56,682.943 1441.12,682.943 1441.68,682.943 1442.24,682.943 1442.8,682.943 1443.36,682.943 1443.92,682.943 1444.48,682.943 1445.04,682.943 1445.6,682.943 1446.15,682.943 1446.71,682.943 1447.27,682.943 1447.83,682.943 1448.39,682.943 1448.95,682.943 1449.51,682.943 1450.07,682.943 1450.63,682.943 1451.19,682.943 1451.75,682.943 1452.31,682.943 1452.87,682.943 1453.42,682.943 1453.98,682.943 1454.54,682.943 1455.1,682.943 1455.66,682.943 1456.22,682.943 1456.78,682.943 1457.34,682.943 1457.9,682.943 1458.46,682.943 1459.02,682.943 1459.58,682.943 1460.14,682.943 1460.7,682.943 1461.25,682.943 1461.81,682.943 1462.37,682.943 1462.93,682.943 1463.49,682.943 1464.05,682.943 1464.61,682.943 1465.17,682.943 1465.73,682.943 1466.29,682.943 1466.85,682.943 1467.41,682.943 1467.97,682.943 1468.52,682.943 1469.08,682.943 1469.64,682.943 1470.2,682.943 1470.76,682.943 1471.32,682.943 1471.88,682.943 1472.44,682.943 1473,682.943 1473.56,682.943 1474.12,682.943 1474.68,682.943 1475.24,682.943 1475.79,682.943 1476.35,682.943 1476.91,682.943 1477.47,682.943 1478.03,682.943 1478.59,682.943 1479.15,682.943 1479.71,682.943 1480.27,682.943 1480.83,682.943 1481.39,682.943 1481.95,682.943 1482.51,682.943 1483.07,682.943 1483.62,682.943 1484.18,682.943 1484.74,682.943 1485.3,682.943 1485.86,682.943 1486.42,682.943 1486.98,682.943 1487.54,682.943 1488.1,682.943 1488.66,682.943 1489.22,682.943 1489.78,682.943 1490.34,682.943 1490.89,682.943 1491.45,682.943 1492.01,682.943 1492.57,682.943 1493.13,682.943 1493.69,682.943 1494.25,682.943 1494.81,682.943 1495.37,682.943 1495.93,682.943 1496.49,682.943 1497.05,682.943 1497.61,682.943 1498.16,682.943 1498.72,682.943 1499.28,682.943 1499.84,682.943 1500.4,682.943 1500.96,682.943 1501.52,682.943 1502.08,682.943 1502.64,682.943 1503.2,682.943 1503.76,682.943 1504.32,682.943 1504.88,682.943 1505.44,682.943 1505.99,682.943 1506.55,682.943 1507.11,682.943 1507.67,682.943 1508.23,682.943 1508.79,682.943 1509.35,682.943 1509.91,682.943 1510.47,682.943 1511.03,682.943 1511.59,682.943 1512.15,682.943 1512.71,682.943 1513.26,682.943 1513.82,682.943 1514.38,682.943 1514.94,682.943 1515.5,682.943 1516.06,682.943 1516.62,682.943 1517.18,682.943 1517.74,682.943 1518.3,682.943 1518.86,682.943 1519.42,682.943 1519.98,682.943 1520.53,682.943 1521.09,682.943 1521.65,682.943 1522.21,682.943 1522.77,682.943 1523.33,682.943 1523.89,682.943 1524.45,682.943 1525.01,682.943 1525.57,682.943 1526.13,682.943 1526.69,682.943 1527.25,682.943 1527.81,682.943 1528.36,682.943 1528.92,682.943 1529.48,682.943 1530.04,682.943 1530.6,682.943 1531.16,682.943 1531.72,682.943 1532.28,682.943 1532.84,682.943 1533.4,682.943 1533.96,682.943 1534.52,682.943 1535.08,682.943 1535.63,682.943 1536.19,682.943 1536.75,682.943 1537.31,682.943 1537.87,682.943 1538.43,682.943 1538.99,682.943 1539.55,682.943 1540.11,682.943 1540.67,682.943 1541.23,682.943 1541.79,682.943 1542.35,682.943 1542.9,682.943 1543.46,682.943 1544.02,682.943 1544.58,682.943 1545.14,682.943 1545.7,682.943 1546.26,682.943 1546.82,682.943 1547.38,682.943 1547.94,682.943 1548.5,682.943 1549.06,682.943 1549.62,682.943 1550.18,682.943 1550.73,682.943 1551.29,682.943 1551.85,682.943 1552.41,682.943 1552.97,682.943 1553.53,682.943 1554.09,682.943 1554.65,682.943 1555.21,682.943 1555.77,682.943 1556.33,682.943 1556.89,682.943 1557.45,682.943 1558,682.943 1558.56,682.943 1559.12,682.943 1559.68,682.943 1560.24,682.943 1560.8,682.943 1561.36,682.943 1561.92,682.943 1562.48,682.943 1563.04,682.943 1563.6,682.943 1564.16,682.943 1564.72,682.943 1565.28,682.943 1565.83,682.943 1566.39,682.943 1566.95,682.943 1567.51,682.943 1568.07,682.943 1568.63,682.943 1569.19,682.943 1569.75,682.943 1570.31,682.943 1570.87,682.943 1571.43,682.943 1571.99,682.943 1572.55,682.943 1573.1,682.943 1573.66,682.943 1574.22,682.943 1574.78,682.943 1575.34,682.943 1575.9,682.943 1576.46,682.943 1577.02,682.943 1577.58,682.943 1578.14,682.943 1578.7,682.943 1579.26,682.943 1579.82,682.943 1580.37,682.943 1580.93,682.943 1581.49,682.943 1582.05,682.943 1582.61,682.943 1583.17,682.943 1583.73,682.943 1584.29,682.943 1584.85,682.943 1585.41,682.943 1585.97,682.943 1586.53,682.943 1587.09,682.943 1587.65,682.943 1588.2,682.943 1588.76,682.943 1589.32,682.943 1589.88,682.943 1590.44,682.943 1591,682.943 1591.56,682.943 1592.12,682.943 1592.68,682.943 1593.24,682.943 1593.8,682.943 1594.36,682.943 1594.92,682.943 1595.47,682.943 1596.03,682.943 1596.59,682.943 1597.15,682.943 1597.71,682.943 1598.27,682.943 1598.83,682.943 1599.39,682.943 1599.95,682.943 1600.51,682.943 1601.07,682.943 1601.63,682.943 1602.19,682.943 1602.74,682.943 1603.3,682.943 1603.86,682.943 1604.42,682.943 1604.98,682.943 1605.54,682.943 1606.1,682.943 1606.66,682.943 1607.22,682.943 1607.78,682.943 1608.34,682.943 1608.9,682.943 1609.46,682.943 1610.02,682.943 1610.57,682.943 1611.13,682.943 1611.69,682.943 1612.25,682.943 1612.81,682.943 1613.37,682.943 1613.93,682.943 1614.49,682.943 1615.05,682.943 1615.61,682.943 1616.17,682.943 1616.73,682.943 1617.29,682.943 1617.84,682.943 1618.4,682.943 1618.96,682.943 1619.52,682.943 1620.08,682.943 1620.64,682.943 1621.2,682.943 1621.76,682.943 1622.32,682.943 1622.88,682.943 1623.44,682.943 1624,682.943 1624.56,682.943 1625.11,682.943 1625.67,682.943 1626.23,682.943 1626.79,682.943 1627.35,682.943 1627.91,682.943 1628.47,682.943 1629.03,682.943 1629.59,682.943 1630.15,682.943 1630.71,682.943 1631.27,682.943 1631.83,682.943 1632.39,682.943 1632.94,682.943 1633.5,682.943 1634.06,682.943 1634.62,682.943 1635.18,682.943 1635.74,682.943 1636.3,682.943 1636.86,682.943 1637.42,682.943 1637.98,682.943 1638.54,682.943 1639.1,682.943 1639.66,682.943 1640.21,682.943 1640.77,682.943 1641.33,682.943 1641.89,682.943 1642.45,682.943 1643.01,682.943 1643.57,682.943 1644.13,682.943 1644.69,682.943 1645.25,682.943 1645.81,682.943 1646.37,682.943 1646.93,682.943 1647.48,682.943 1648.04,682.943 1648.6,682.943 1649.16,682.943 1649.72,682.943 1650.28,682.943 1650.84,682.943 1651.4,682.943 1651.96,682.943 1652.52,682.943 1653.08,682.943 1653.64,682.943 1654.2,682.943 1654.76,682.943 1655.31,682.943 1655.87,682.943 1656.43,682.943 1656.99,682.943 1657.55,682.943 1658.11,682.943 1658.67,682.943 1659.23,682.943 1659.79,682.943 1660.35,682.943 1660.91,682.943 1661.47,682.943 1662.03,682.943 1662.58,682.943 1663.14,682.943 1663.7,682.943 1664.26,682.943 1664.82,682.943 1665.38,682.943 1665.94,682.943 1666.5,682.943 1667.06,682.943 1667.62,682.943 1668.18,682.943 1668.74,682.943 1669.3,682.943 1669.85,682.943 1670.41,682.943 1670.97,682.943 1671.53,682.943 1672.09,682.943 1672.65,682.943 1673.21,682.943 1673.77,682.943 1674.33,682.943 1674.89,682.943 1675.45,682.943 1676.01,682.943 1676.57,682.943 1677.13,682.943 1677.68,682.943 1678.24,682.943 1678.8,682.943 1679.36,682.943 1679.92,682.943 1680.48,682.943 1681.04,682.943 1681.6,682.943 1682.16,682.943 1682.72,682.943 1683.28,682.943 1683.84,682.943 1684.4,682.943 1684.95,682.943 1685.51,682.943 1686.07,682.943 1686.63,682.943 1687.19,682.943 1687.75,682.943 1688.31,682.943 1688.87,682.943 1689.43,682.943 1689.99,682.943 1690.55,682.943 1691.11,682.943 1691.67,682.943 1692.23,682.943 1692.78,682.943 1693.34,682.943 1693.9,682.943 1694.46,682.943 1695.02,682.943 1695.58,682.943 1696.14,682.943 1696.7,682.943 1697.26,682.943 1697.82,682.943 1698.38,682.943 1698.94,682.943 1699.5,682.943 1700.05,682.943 1700.61,682.943 1701.17,682.943 1701.73,682.943 1702.29,682.943 1702.85,682.943 1703.41,682.943 1703.97,682.943 1704.53,682.943 1705.09,682.943 1705.65,682.943 1706.21,682.943 1706.77,682.943 1707.32,682.943 1707.88,682.943 1708.44,682.943 1709,682.943 1709.56,682.943 1710.12,682.943 1710.68,682.943 1711.24,682.943 1711.8,682.943 1712.36,682.943 1712.92,682.943 1713.48,682.943 1714.04,682.943 1714.6,682.943 1715.15,682.943 1715.71,682.943 1716.27,682.943 1716.83,682.943 1717.39,682.943 1717.95,682.943 1718.51,682.943 1719.07,682.943 1719.63,682.943 1720.19,682.943 1720.75,682.943 1721.31,682.943 1721.87,682.943 1722.42,682.943 1722.98,682.943 1723.54,682.943 1724.1,682.943 1724.66,682.943 1725.22,682.943 1725.78,682.943 1726.34,682.943 1726.9,682.943 1727.46,682.943 1728.02,682.943 1728.58,682.943 1729.14,682.943 1729.69,682.943 1730.25,682.943 1730.81,682.943 1731.37,682.943 1731.93,682.943 1732.49,682.943 1733.05,682.943 1733.61,682.943 1734.17,682.943 1734.73,682.943 1735.29,682.943 1735.85,682.943 1736.41,682.943 1736.97,682.943 1737.52,682.943 1738.08,682.943 1738.64,682.943 1739.2,682.943 1739.76,682.943 1740.32,682.943 1740.88,682.943 1741.44,682.943 1742,682.943 1742.56,682.943 1743.12,682.943 1743.68,682.943 1744.24,682.943 1744.79,682.943 1745.35,682.943 1745.91,682.943 1746.47,682.943 1747.03,682.943 1747.59,682.943 1748.15,682.943 1748.71,682.943 1749.27,682.943 1749.83,682.943 1750.39,682.943 1750.95,682.943 1751.51,682.943 1752.06,682.943 1752.62,682.943 1753.18,682.943 1753.74,682.943 1754.3,682.943 1754.86,682.943 1755.42,682.943 1755.98,682.943 1756.54,682.943 1757.1,682.943 1757.66,682.943 1758.22,682.943 1758.78,682.943 1759.34,682.943 1759.89,682.943 1760.45,682.943 1761.01,682.943 1761.57,682.943 1762.13,682.943 1762.69,682.943 1763.25,682.943 1763.81,682.943 1764.37,682.943 1764.93,682.943 1765.49,682.943 1766.05,682.943 1766.61,682.943 1767.16,682.943 1767.72,682.943 1768.28,682.943 1768.84,682.943 1769.4,682.943 1769.96,682.943 1770.52,682.943 1771.08,682.943 1771.64,682.943 1772.2,682.943 1772.76,682.943 1773.32,682.943 1773.88,682.943 1774.43,682.943 1774.99,682.943 1775.55,682.943 1776.11,682.943 1776.67,682.943 1777.23,682.943 1777.79,682.943 1778.35,682.943 1778.91,682.943 1779.47,682.943 1780.03,682.943 1780.59,682.943 1781.15,682.943 1781.71,682.943 1782.26,682.943 1782.82,682.943 1783.38,682.943 1783.94,682.943 1784.5,682.943 1785.06,682.943 1785.62,682.943 1786.18,682.943 1786.74,682.943 1787.3,682.943 1787.86,682.943 1788.42,682.943 1788.98,682.943 1789.53,682.943 1790.09,682.943 1790.65,682.943 1791.21,682.943 1791.77,682.943 1792.33,682.943 1792.89,682.943 1793.45,682.943 1794.01,682.943 1794.57,682.943 1795.13,682.943 1795.69,682.943 1796.25,682.943 1796.8,682.943 1797.36,682.943 1797.92,682.943 1798.48,682.943 1799.04,682.943 1799.6,682.943 1800.16,682.943 1800.72,682.943 1801.28,682.943 1801.84,682.943 1802.4,682.943 1802.96,682.943 1803.52,682.943 1804.08,682.943 1804.63,682.943 1805.19,682.943 1805.75,682.943 1806.31,682.943 1806.87,682.943 1807.43,682.943 1807.99,682.943 1808.55,682.943 1809.11,682.943 1809.67,682.943 1810.23,682.943 1810.79,682.943 1811.35,682.943 1811.9,682.943 1812.46,682.943 1813.02,682.943 1813.58,682.943 1814.14,682.943 1814.7,682.943 1815.26,682.943 1815.82,682.943 1816.38,682.943 1816.94,682.943 1817.5,682.943 1818.06,682.943 1818.62,682.943 1819.18,682.943 1819.73,682.943 1820.29,682.943 1820.85,682.943 1821.41,682.943 1821.97,682.943 1822.53,682.943 1823.09,682.943 1823.65,682.943 1824.21,682.943 1824.77,682.943 1825.33,682.943 1825.89,682.943 1826.45,682.943 1827,682.943 1827.56,682.943 1828.12,682.943 1828.68,682.943 1829.24,682.943 1829.8,682.943 1830.36,682.943 1830.92,682.943 1831.48,682.943 1832.04,682.943 1832.6,682.943 1833.16,682.943 1833.72,682.943 1834.27,682.943 1834.83,682.943 1835.39,682.943 1835.95,682.943 1836.51,682.943 1837.07,682.943 1837.63,682.943 1838.19,682.943 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.024158745859645 ± 0.023139803882750443\nProjected Energy: -4.0118535541218625 ± (0.0035282082613692367, 0.003523866181555313)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.450761</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3776e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0629e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.087e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.322e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.685e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.355e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.3631242916133637\n -0.759019192277087\n  0.13584182219621788\n  0.15789998694608798\n  0.8767114411781431\n  1.5305929970973322\n  1.5835732611867357\n  3.0728703303258653\n  3.1256726539518436\n  4.86210722156217\n  6.260694850380594\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
