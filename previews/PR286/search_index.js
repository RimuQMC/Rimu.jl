var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21639556862066192 ± 0.0011954052267400764\n   G2(1) = 0.9165028075305587 ± 0.0005934882382092213\n   G2(2) = 0.9825086892304351 ± 0.00048573384493409314\n   G2(3) = 0.9855814378573504 ± 0.0007549859180276348\n   G2(4) = 0.9825086892304351 ± 0.00048573384493409314\n   G2(5) = 0.9165028075305587 ± 0.0005934882382092213\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.073785657430209 ± 0.12577773593270633\n   Replica 2: -4.043528177443374 ± 0.14377762905204078\n   Replica 3: -4.059348387313216 ± 0.1304086406738321\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip800\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip800)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip801\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip800)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip802\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.16 2211.02,1003.16 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.479 2211.02,745.479 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.8 2211.02,487.8 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.121 2211.02,230.121 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.16 423.181,1003.16 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.479 423.181,745.479 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.8 423.181,487.8 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.121 423.181,230.121 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M290.043 1016.5 L306.363 1016.5 L306.363 1020.44 L284.418 1020.44 L284.418 1016.5 Q287.08 1013.75 291.664 1009.12 Q296.27 1004.46 297.451 1003.12 Q299.696 1000.6 300.576 998.863 Q301.478 997.104 301.478 995.414 Q301.478 992.66 299.534 990.923 Q297.613 989.187 294.511 989.187 Q292.312 989.187 289.858 989.951 Q287.427 990.715 284.65 992.266 L284.65 987.544 Q287.474 986.41 289.927 985.831 Q292.381 985.252 294.418 985.252 Q299.789 985.252 302.983 987.937 Q306.177 990.622 306.177 995.113 Q306.177 997.243 305.367 999.164 Q304.58 1001.06 302.474 1003.65 Q301.895 1004.33 298.793 1007.54 Q295.691 1010.74 290.043 1016.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M316.224 985.877 L334.58 985.877 L334.58 989.812 L320.506 989.812 L320.506 998.284 Q321.524 997.937 322.543 997.775 Q323.562 997.59 324.58 997.59 Q330.367 997.59 333.747 1000.76 Q337.126 1003.93 337.126 1009.35 Q337.126 1014.93 333.654 1018.03 Q330.182 1021.11 323.862 1021.11 Q321.687 1021.11 319.418 1020.74 Q317.173 1020.37 314.765 1019.63 L314.765 1014.93 Q316.849 1016.06 319.071 1016.62 Q321.293 1017.17 323.77 1017.17 Q327.774 1017.17 330.112 1015.07 Q332.45 1012.96 332.45 1009.35 Q332.45 1005.74 330.112 1003.63 Q327.774 1001.53 323.77 1001.53 Q321.895 1001.53 320.02 1001.94 Q318.168 1002.36 316.224 1003.24 L316.224 985.877 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M356.339 988.956 Q352.728 988.956 350.899 992.521 Q349.094 996.062 349.094 1003.19 Q349.094 1010.3 350.899 1013.86 Q352.728 1017.4 356.339 1017.4 Q359.973 1017.4 361.779 1013.86 Q363.608 1010.3 363.608 1003.19 Q363.608 996.062 361.779 992.521 Q359.973 988.956 356.339 988.956 M356.339 985.252 Q362.149 985.252 365.205 989.859 Q368.284 994.442 368.284 1003.19 Q368.284 1011.92 365.205 1016.53 Q362.149 1021.11 356.339 1021.11 Q350.529 1021.11 347.45 1016.53 Q344.395 1011.92 344.395 1003.19 Q344.395 994.442 347.45 989.859 Q350.529 985.252 356.339 985.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M286.062 728.199 L304.418 728.199 L304.418 732.134 L290.344 732.134 L290.344 740.606 Q291.363 740.259 292.381 740.097 Q293.4 739.911 294.418 739.911 Q300.205 739.911 303.585 743.083 Q306.964 746.254 306.964 751.671 Q306.964 757.249 303.492 760.351 Q300.02 763.43 293.701 763.43 Q291.525 763.43 289.256 763.059 Q287.011 762.689 284.603 761.948 L284.603 757.249 Q286.687 758.384 288.909 758.939 Q291.131 759.495 293.608 759.495 Q297.613 759.495 299.951 757.388 Q302.288 755.282 302.288 751.671 Q302.288 748.06 299.951 745.953 Q297.613 743.847 293.608 743.847 Q291.733 743.847 289.858 744.263 Q288.006 744.68 286.062 745.56 L286.062 728.199 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M326.177 731.277 Q322.566 731.277 320.737 734.842 Q318.932 738.384 318.932 745.513 Q318.932 752.62 320.737 756.185 Q322.566 759.726 326.177 759.726 Q329.811 759.726 331.617 756.185 Q333.446 752.62 333.446 745.513 Q333.446 738.384 331.617 734.842 Q329.811 731.277 326.177 731.277 M326.177 727.574 Q331.987 727.574 335.043 732.18 Q338.122 736.763 338.122 745.513 Q338.122 754.24 335.043 758.847 Q331.987 763.43 326.177 763.43 Q320.367 763.43 317.288 758.847 Q314.233 754.24 314.233 745.513 Q314.233 736.763 317.288 732.18 Q320.367 727.574 326.177 727.574 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M356.339 731.277 Q352.728 731.277 350.899 734.842 Q349.094 738.384 349.094 745.513 Q349.094 752.62 350.899 756.185 Q352.728 759.726 356.339 759.726 Q359.973 759.726 361.779 756.185 Q363.608 752.62 363.608 745.513 Q363.608 738.384 361.779 734.842 Q359.973 731.277 356.339 731.277 M356.339 727.574 Q362.149 727.574 365.205 732.18 Q368.284 736.763 368.284 745.513 Q368.284 754.24 365.205 758.847 Q362.149 763.43 356.339 763.43 Q350.529 763.43 347.45 758.847 Q344.395 754.24 344.395 745.513 Q344.395 736.763 347.45 732.18 Q350.529 727.574 356.339 727.574 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M284.835 470.52 L307.057 470.52 L307.057 472.511 L294.511 505.08 L289.627 505.08 L301.432 474.455 L284.835 474.455 L284.835 470.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M316.224 470.52 L334.58 470.52 L334.58 474.455 L320.506 474.455 L320.506 482.927 Q321.524 482.58 322.543 482.418 Q323.562 482.233 324.58 482.233 Q330.367 482.233 333.747 485.404 Q337.126 488.575 337.126 493.992 Q337.126 499.571 333.654 502.673 Q330.182 505.751 323.862 505.751 Q321.687 505.751 319.418 505.381 Q317.173 505.011 314.765 504.27 L314.765 499.571 Q316.849 500.705 319.071 501.261 Q321.293 501.816 323.77 501.816 Q327.774 501.816 330.112 499.71 Q332.45 497.603 332.45 493.992 Q332.45 490.381 330.112 488.275 Q327.774 486.168 323.77 486.168 Q321.895 486.168 320.02 486.585 Q318.168 487.001 316.224 487.881 L316.224 470.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M356.339 473.599 Q352.728 473.599 350.899 477.163 Q349.094 480.705 349.094 487.835 Q349.094 494.941 350.899 498.506 Q352.728 502.048 356.339 502.048 Q359.973 502.048 361.779 498.506 Q363.608 494.941 363.608 487.835 Q363.608 480.705 361.779 477.163 Q359.973 473.599 356.339 473.599 M356.339 469.895 Q362.149 469.895 365.205 474.501 Q368.284 479.085 368.284 487.835 Q368.284 496.562 365.205 501.168 Q362.149 505.751 356.339 505.751 Q350.529 505.751 347.45 501.168 Q344.395 496.562 344.395 487.835 Q344.395 479.085 347.45 474.501 Q350.529 469.895 356.339 469.895 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M256.664 243.466 L264.303 243.466 L264.303 217.101 L255.992 218.767 L255.992 214.508 L264.256 212.841 L268.932 212.841 L268.932 243.466 L276.571 243.466 L276.571 247.401 L256.664 247.401 L256.664 243.466 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M296.015 215.92 Q292.404 215.92 290.576 219.485 Q288.77 223.027 288.77 230.156 Q288.77 237.263 290.576 240.827 Q292.404 244.369 296.015 244.369 Q299.65 244.369 301.455 240.827 Q303.284 237.263 303.284 230.156 Q303.284 223.027 301.455 219.485 Q299.65 215.92 296.015 215.92 M296.015 212.216 Q301.826 212.216 304.881 216.823 Q307.96 221.406 307.96 230.156 Q307.96 238.883 304.881 243.489 Q301.826 248.073 296.015 248.073 Q290.205 248.073 287.127 243.489 Q284.071 238.883 284.071 230.156 Q284.071 221.406 287.127 216.823 Q290.205 212.216 296.015 212.216 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M326.177 215.92 Q322.566 215.92 320.737 219.485 Q318.932 223.027 318.932 230.156 Q318.932 237.263 320.737 240.827 Q322.566 244.369 326.177 244.369 Q329.811 244.369 331.617 240.827 Q333.446 237.263 333.446 230.156 Q333.446 223.027 331.617 219.485 Q329.811 215.92 326.177 215.92 M326.177 212.216 Q331.987 212.216 335.043 216.823 Q338.122 221.406 338.122 230.156 Q338.122 238.883 335.043 243.489 Q331.987 248.073 326.177 248.073 Q320.367 248.073 317.288 243.489 Q314.233 238.883 314.233 230.156 Q314.233 221.406 317.288 216.823 Q320.367 212.216 326.177 212.216 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M356.339 215.92 Q352.728 215.92 350.899 219.485 Q349.094 223.027 349.094 230.156 Q349.094 237.263 350.899 240.827 Q352.728 244.369 356.339 244.369 Q359.973 244.369 361.779 240.827 Q363.608 237.263 363.608 230.156 Q363.608 223.027 361.779 219.485 Q359.973 215.92 356.339 215.92 M356.339 212.216 Q362.149 212.216 365.205 216.823 Q368.284 221.406 368.284 230.156 Q368.284 238.883 365.205 243.489 Q362.149 248.073 356.339 248.073 Q350.529 248.073 347.45 243.489 Q344.395 238.883 344.395 230.156 Q344.395 221.406 347.45 216.823 Q350.529 212.216 356.339 212.216 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip802)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.121 4017.76,230.121 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.13 457.691,1248.86 458.259,1248.55 458.828,1248.18 459.396,1247.72 459.964,1246.16 460.533,1245.59 461.101,1243.94 461.669,1243.28 462.238,1242.54 462.806,1241.69 463.375,1240.76 463.943,1238.72 464.511,1237.62 465.08,1236.41 465.648,1235.08 466.216,1233.65 466.785,1232.06 467.353,1230.39 467.921,1226.52 468.49,1224.63 469.058,1222.56 469.626,1220.38 470.195,1218.03 470.763,1215.5 471.331,1212.73 471.9,1209.86 472.468,1205.8 473.036,1201.47 473.605,1198.07 474.173,1194.42 474.741,1188.52 475.31,1183.48 475.878,1178.27 476.446,1173.8 477.015,1168.12 477.583,1163.26 478.152,1158.26 478.72,1150.92 479.288,1144.44 479.857,1135.6 480.425,1129.63 480.993,1123.48 481.562,1114.96 482.13,1107.28 482.698,1099.52 483.267,1091.49 483.835,1083.33 484.403,1073.9 484.972,1065.41 485.54,1053.48 486.108,1044.52 486.677,1036.52 487.245,1028.25 487.813,1019.87 488.382,1010.31 488.95,1001.67 489.518,992.993 490.087,980.813 490.655,970.72 491.224,961.581 491.792,952.403 492.36,939.923 492.929,929.665 493.497,918.234 494.065,907.909 494.634,897.501 495.202,887.082 495.77,876.607 496.339,867.134 496.907,855.632 497.475,846.151 498.044,834.583 498.612,823.97 499.18,812.494 499.749,801.023 500.317,791.722 500.885,781.137 501.454,771.75 502.022,760.283 502.59,748.053 503.159,736.951 503.727,728.019 504.295,716.987 504.864,707.192 505.432,697.541 506.001,684.937 506.569,675.608 507.137,667.229 507.706,658.836 508.274,648.562 508.842,637.527 509.411,627.577 509.979,618.853 510.547,609.156 511.116,598.682 511.684,586.179 512.252,576.283 512.821,566.668 513.389,559.305 513.957,553.222 514.526,545.952 515.094,538.878 515.662,530.784 516.231,524.871 516.799,517.119 517.367,512.63 517.936,502.835 518.504,497.316 519.072,490.085 519.641,482.954 520.209,475.169 520.778,471.421 521.346,468.794 521.914,464.012 522.483,457.136 523.051,452.686 523.619,448.287 524.188,443.89 524.756,439.52 525.324,434.193 525.893,428.776 526.461,421.468 527.029,416.554 527.598,412.769 528.166,407.989 528.734,404.2 529.303,399.517 529.871,394.068 530.439,388.57 531.008,385.34 531.576,380.123 532.144,376.233 532.713,368.288 533.281,365.735 533.85,364.38 534.418,359.9 534.986,355.278 535.555,353.128 536.123,348.761 536.691,342.542 537.26,341.872 537.828,340.165 538.396,336.208 538.965,332.584 539.533,330.115 540.101,328.583 540.67,323.964 541.238,322.747 541.806,319.481 542.375,316.313 542.943,311.301 543.511,311.808 544.08,310.896 544.648,309.015 545.216,309.21 545.785,305.278 546.353,305.385 546.921,303.48 547.49,300.699 548.058,299.029 548.627,295.286 549.195,294.686 549.763,292.27 550.332,293.013 550.9,293.758 551.468,293.318 552.037,291.54 552.605,288.739 553.173,287.174 553.742,284.548 554.31,286.167 554.878,284.732 555.447,283.047 556.015,282.599 556.583,283.269 557.152,282.85 557.72,280.263 558.288,279.902 558.857,278.436 559.425,275.911 559.993,275.773 560.562,275.426 561.13,276.068 561.698,276.707 562.267,276.208 562.835,274.555 563.404,274.208 563.972,273.562 564.54,273.187 565.109,271.617 565.677,270.234 566.245,268.875 566.814,266.653 567.382,263.27 567.95,261.333 568.519,261.166 569.087,261.13 569.655,262.269 570.224,263.294 570.792,261.183 571.36,257.994 571.929,255.804 572.497,256.006 573.065,256.163 573.634,257.264 574.202,257.536 574.77,256.469 575.339,255.554 575.907,256.858 576.476,254.819 577.044,253.738 577.612,252.926 578.181,251.204 578.749,250.344 579.317,250.906 579.886,252.235 580.454,253.645 581.022,254.76 581.591,253.648 582.159,254.744 582.727,255.754 583.296,256.798 583.864,257.557 584.432,256.113 585.001,255.97 585.569,254.446 586.137,253.151 586.706,253.04 587.274,253.933 587.842,253.865 588.411,255.897 588.979,254.367 589.547,252.922 590.116,252.714 590.684,251.428 591.253,252.382 591.821,253.104 592.389,253.012 592.958,251.836 593.526,249.608 594.094,249.421 594.663,247.315 595.231,244.28 595.799,243.53 596.368,242.702 596.936,243.929 597.504,243.193 598.073,244.291 598.641,243.327 599.209,244.624 599.778,242.529 600.346,245.777 600.914,246.729 601.483,246.603 602.051,245.494 602.619,244.452 603.188,244.401 603.756,245.427 604.325,245.458 604.893,248.554 605.461,250.249 606.03,249.766 606.598,247.205 607.166,244.864 607.735,243.533 608.303,241.551 608.871,241.621 609.44,241.473 610.008,239.452 610.576,239.823 611.145,238.998 611.713,241.223 612.281,240.207 612.85,242.161 613.418,241.104 613.986,243.225 614.555,243.303 615.123,242.103 615.691,241.176 616.26,241.104 616.828,241.034 617.396,241.152 617.965,241.272 618.533,240.24 619.102,240.384 619.67,239.285 620.238,239.352 620.807,239.481 621.375,239.516 621.943,239.772 622.512,240.819 623.08,238.689 623.648,237.969 624.217,237.155 624.785,238.495 625.353,238.437 625.922,237.566 626.49,238.707 627.058,236.461 627.627,236.667 628.195,237.89 628.763,240.213 629.332,240.119 629.9,239.994 630.468,237.61 631.037,238.707 631.605,239.866 632.173,240.848 632.742,239.764 633.31,239.614 633.879,240.475 634.447,238.036 635.015,237.121 635.584,236.061 636.152,236.275 636.72,235.189 637.289,236.325 637.857,238.3 638.425,240.524 638.994,240.159 639.562,239.911 640.13,239.713 640.699,239.453 641.267,239.223 641.835,237.981 642.404,238.009 642.972,237.012 643.54,234.943 644.109,236.235 644.677,236.321 645.245,235.434 645.814,235.351 646.382,235.348 646.951,234.304 647.519,236.449 648.087,237.66 648.656,236.333 649.224,237.59 649.792,237.401 650.361,236.381 650.929,236.484 651.497,235.463 652.066,234.491 652.634,236.445 653.202,236.473 653.771,234.567 654.339,235.821 654.907,237.018 655.476,237.78 656.044,238.577 656.612,237.253 657.181,239.084 657.749,237.707 658.317,236.438 658.886,233.139 659.454,232.242 660.022,232.522 660.591,232.711 661.159,232.657 661.728,233.636 662.296,233.694 662.864,234.967 663.433,233.899 664.001,230.852 664.569,233.08 665.138,233.231 665.706,231.287 666.274,230.325 666.843,232.708 667.411,233.089 667.979,233.289 668.548,233.341 669.116,236.542 669.684,237.396 670.253,236.198 670.821,234.978 671.389,234.065 671.958,234.045 672.526,234.039 673.094,234.064 673.663,233.109 674.231,233.14 674.799,232.311 675.368,232.62 675.936,235.907 676.505,234.642 677.073,234.816 677.641,234.659 678.21,234.532 678.778,234.352 679.346,233.368 679.915,235.405 680.483,233.255 681.051,233.407 681.62,231.466 682.188,229.734 682.756,228.681 683.325,227.934 683.893,228.169 684.461,226.477 685.03,227.006 685.598,231.847 686.166,229.003 686.735,230.245 687.303,229.741 687.871,230.183 688.44,230.596 689.008,230.873 689.577,232.009 690.145,232.13 690.713,231.045 691.282,230.512 691.85,230.803 692.418,231.064 692.987,230.345 693.555,228.459 694.123,230.805 694.692,232.031 695.26,233.372 695.828,232.385 696.397,232.638 696.965,232.873 697.533,231.025 698.102,231.588 698.67,233.091 699.238,231.447 699.807,231.646 700.375,232.031 700.943,233.149 701.512,232.206 702.08,232.416 702.648,232.624 703.217,232.652 703.785,231.699 704.354,231.83 704.922,231.181 705.49,229.391 706.059,232.059 706.627,231.432 707.195,227.845 707.764,227.212 708.332,226.691 708.9,228.077 709.469,225.369 710.037,224.123 710.605,224.01 711.174,225.842 711.742,225.351 712.31,229.142 712.879,233.913 713.447,233.117 714.015,234.348 714.584,233.68 715.152,232.857 715.72,234.311 716.289,235.463 716.857,237.643 717.425,236.412 717.994,238.519 718.562,238.07 719.131,234.888 719.699,233.654 720.267,230.599 720.836,233.074 721.404,233.129 721.972,231.244 722.541,231.544 723.109,232.795 723.677,231.88 724.246,232.085 724.814,232.3 725.382,233.32 725.951,233.42 726.519,233.705 727.087,234.722 727.656,234.879 728.224,232.852 728.792,235.211 729.361,235.11 729.929,235.124 730.497,232.936 731.066,233.038 731.634,232.986 732.203,231.119 732.771,232.23 733.339,232.554 733.908,232.748 734.476,231.637 735.044,232.876 735.613,231.869 736.181,231.899 736.749,230.94 737.318,234.342 737.886,236.36 738.454,237.208 739.023,239.12 739.591,238.97 740.159,236.404 740.728,236.186 741.296,234.896 741.864,234.928 742.433,235.723 743.001,234.445 743.569,235.205 744.138,237.163 744.706,234.67 745.274,231.424 745.843,231.328 746.411,232.467 746.98,231.525 747.548,231.714 748.116,231.883 748.685,231.843 749.253,231.83 749.821,230.931 750.39,230.804 750.958,228.843 751.526,230.011 752.095,231.12 752.663,228.982 753.231,228.294 753.8,229.747 754.368,228.902 754.936,230.33 755.505,230.326 756.073,231.591 756.641,232.713 757.21,233.748 757.778,234.909 758.346,232.524 758.915,232.358 759.483,232.257 760.052,233.391 760.62,234.273 761.188,233.998 761.757,234.062 762.325,233.666 762.893,233.45 763.462,231.366 764.03,228.259 764.598,227.592 765.167,228.02 765.735,228.674 766.303,226.838 766.872,229.411 767.44,229.914 768.008,231.076 768.577,232.32 769.145,233.365 769.713,231.484 770.282,231.807 770.85,233.009 771.418,232.041 771.987,231.998 772.555,233.113 773.123,233.032 773.692,234.05 774.26,232.965 774.829,234.086 775.397,234.13 775.965,233.822 776.534,232.66 777.102,232.671 777.67,233.569 778.239,232.495 778.807,232.389 779.375,231.196 779.944,232.188 780.512,232.239 781.08,230.163 781.649,226.019 782.217,227.27 782.785,228.654 783.354,227.827 783.922,230.395 784.49,230.69 785.059,230.955 785.627,231.026 786.195,231.07 786.764,231.006 787.332,232.382 787.9,232.648 788.469,232.925 789.037,233.003 789.606,232.928 790.174,232.865 790.742,236.976 791.311,234.632 791.879,233.36 792.447,234.351 793.016,234.405 793.584,235.382 794.152,235.163 794.721,232.972 795.289,232.934 795.857,233.677 796.426,234.52 796.994,234.511 797.562,234.437 798.131,234.27 798.699,235.124 799.267,237.827 799.836,234.192 800.404,232.747 800.972,232.708 801.541,230.592 802.109,230.651 802.678,231.759 803.246,231.491 803.814,231.433 804.383,232.253 804.951,231.964 805.519,231.87 806.088,231.63 806.656,234.595 807.224,233.159 807.793,231.885 808.361,230.865 808.929,230.784 809.498,229.524 810.066,229.257 810.634,230.439 811.203,230.575 811.771,229.507 812.339,229.785 812.908,229.756 813.476,229.642 814.044,230.844 814.613,230.017 815.181,229.707 815.749,229.751 816.318,227.665 816.886,226.807 817.455,228.199 818.023,229.523 818.591,230.554 819.16,231.551 819.728,230.479 820.296,230.542 820.865,229.598 821.433,228.728 822.001,228.017 822.57,230.239 823.138,230.331 823.706,230.677 824.275,230.689 824.843,230.862 825.411,233.101 825.98,232.329 826.548,232.382 827.116,235.388 827.685,235.948 828.253,235.589 828.821,233.12 829.39,234.02 829.958,233.579 830.526,233.47 831.095,233.054 831.663,234.851 832.232,233.569 832.8,234.348 833.368,234.981 833.937,232.607 834.505,233.437 835.073,233.143 835.642,235.016 836.21,234.601 836.778,235.237 837.347,235.743 837.915,236.241 838.483,236.932 839.052,237.195 839.62,235.551 840.188,235.177 840.757,233.756 841.325,233.493 841.893,230.984 842.462,229.821 843.03,228.821 843.598,228.903 844.167,226.76 844.735,226.911 845.304,227.118 845.872,230.39 846.44,231.472 847.009,230.271 847.577,230.345 848.145,230.472 848.714,231.323 849.282,232.175 849.85,231.097 850.419,233.247 850.987,230.844 851.555,231.689 852.124,231.7 852.692,230.52 853.26,231.451 853.829,230.341 854.397,229.335 854.965,230.328 855.534,229.063 856.102,229.154 856.67,229.183 857.239,228.469 857.807,227.523 858.375,227.703 858.944,226.621 859.512,226.89 860.081,228.23 860.649,226.312 861.217,229.56 861.786,229.573 862.354,230.671 862.922,229.692 863.491,230.727 864.059,230.61 864.627,230.556 865.196,229.666 865.764,228.695 866.332,225.639 866.901,224.846 867.469,221.891 868.037,222.641 868.606,222.088 869.174,221.818 869.742,221.416 870.311,225.197 870.879,224.616 871.447,226.208 872.016,226.588 872.584,225.781 873.152,226.227 873.721,226.717 874.289,226.937 874.858,227.487 875.426,227.644 875.994,226.321 876.563,228.704 877.131,231.058 877.699,231.217 878.268,234.119 878.836,234.123 879.404,233.811 879.973,234.763 880.541,234.646 881.109,232.359 881.678,232.386 882.246,231.489 882.814,229.398 883.383,230.634 883.951,230.713 884.519,232.841 885.088,232.433 885.656,234.329 886.224,233.125 886.793,234.004 887.361,231.911 887.93,231.887 888.498,230.738 889.066,228.839 889.635,231.171 890.203,230.974 890.771,228.88 891.34,229.072 891.908,229.19 892.476,229.227 893.045,229.181 893.613,229.36 894.181,228.329 894.75,228.565 895.318,230.032 895.886,229.175 896.455,228.275 897.023,226.307 897.591,226.659 898.16,228.188 898.728,228.427 899.296,227.581 899.865,228.86 900.433,230.163 901.001,229.348 901.57,228.747 902.138,229.808 902.707,229.984 903.275,230.112 903.843,229.057 904.412,232.255 904.98,230.048 905.548,228.999 906.117,229.17 906.685,230.463 907.253,229.639 907.822,228.003 908.39,228.275 908.958,227.361 909.527,228.824 910.095,229.984 910.663,230.154 911.232,230.456 911.8,229.466 912.368,228.692 912.937,228.881 913.505,231.035 914.073,229.138 914.642,230.572 915.21,229.675 915.779,228.803 916.347,228.106 916.915,228.334 917.484,228.539 918.052,231.948 918.62,233.016 919.189,231.887 919.757,232.917 920.325,232.655 920.894,232.477 921.462,233.089 922.03,234.047 922.599,234.849 923.167,234.557 923.735,237.394 924.304,236.978 924.872,237.488 925.44,237.181 926.009,238.859 926.577,242.543 927.145,241.835 927.714,241.083 928.282,240.559 928.85,240.728 929.419,238.101 929.987,239.586 930.556,239.077 931.124,238.462 931.692,238.881 932.261,238.218 932.829,236.466 933.397,235.732 933.966,234.11 934.534,233.805 935.102,233.43 935.671,233.313 936.239,233.899 936.807,232.584 937.376,233.595 937.944,233.247 938.512,232.818 939.081,232.448 939.649,232.334 940.217,233.151 940.786,231.847 941.354,230.435 941.922,230.392 942.491,230.198 943.059,231.096 943.627,231.864 944.196,233.665 944.764,231.301 945.333,231.424 945.901,232.166 946.469,229.817 947.038,231.633 947.606,230.379 948.174,230.173 948.743,230.896 949.311,230.748 949.879,230.556 950.448,230.435 951.016,231.248 951.584,228.846 952.153,228.772 952.721,228.595 953.289,227.495 953.858,227.517 954.426,226.678 954.994,226.044 955.563,224.298 956.131,223.463 956.699,223.861 957.268,221.112 957.836,221.737 958.405,224.249 958.973,225.669 959.541,225.036 960.11,226.501 960.678,226.593 961.246,225.798 961.815,228.039 962.383,230.033 962.951,231.015 963.52,228.934 964.088,228.872 964.656,228.956 965.225,229.086 965.793,230.025 966.361,230.19 966.93,230.262 967.498,230.423 968.066,230.559 968.635,231.798 969.203,234.983 969.771,235.637 970.34,236.414 970.908,236.002 971.476,235.505 972.045,233.246 972.613,232.829 973.182,232.465 973.75,233.391 974.318,234.042 974.887,233.489 975.455,233.028 976.023,232.787 976.592,229.428 977.16,228.355 977.728,228.33 978.297,228.408 978.865,226.362 979.433,227.677 980.002,227.698 980.57,225.921 981.138,227.4 981.707,226.286 982.275,224.482 982.843,225.984 983.412,225.303 983.98,225.717 984.548,226.973 985.117,227.317 985.685,227.654 986.253,227.916 986.822,226.905 987.39,227.08 987.959,228.268 988.527,228.286 989.095,227.435 989.664,226.464 990.232,227.788 990.8,228.108 991.369,227.032 991.937,226.005 992.505,226.281 993.074,226.641 993.642,225.668 994.21,228.161 994.779,227.195 995.347,227.578 995.915,225.892 996.484,226.338 997.052,225.812 997.62,228.399 998.189,229.867 998.757,229.143 999.325,229.374 999.894,230.66 1000.46,230.853 1001.03,228.781 1001.6,230.055 1002.17,226.973 1002.74,228.328 1003.3,228.598 1003.87,228.628 1004.44,230.778 1005.01,230.966 1005.58,233.284 1006.15,233.095 1006.71,232.873 1007.28,230.684 1007.85,230.681 1008.42,230.619 1008.99,229.542 1009.56,228.665 1010.12,229.855 1010.69,227.778 1011.26,228.07 1011.83,228.473 1012.4,230.766 1012.97,230.98 1013.53,230.996 1014.1,229.051 1014.67,228.196 1015.24,229.555 1015.81,229.664 1016.38,232.933 1016.94,231.908 1017.51,233.839 1018.08,232.767 1018.65,233.633 1019.22,235.499 1019.79,234.178 1020.35,234.957 1020.92,234.608 1021.49,232.351 1022.06,233.405 1022.63,233.158 1023.2,235.062 1023.76,233.532 1024.33,233.471 1024.9,235.17 1025.47,237.929 1026.04,238.306 1026.61,238.107 1027.17,238.615 1027.74,236.898 1028.31,237.51 1028.88,235.967 1029.45,236.42 1030.02,236.704 1030.58,235.041 1031.15,234.727 1031.72,235.434 1032.29,236.952 1032.86,238.359 1033.43,236.62 1033.99,234.155 1034.56,232.532 1035.13,234.425 1035.7,234.046 1036.27,231.677 1036.84,232.581 1037.4,230.21 1037.97,230.151 1038.54,230.19 1039.11,230.094 1039.68,231.031 1040.25,231.905 1040.81,232.669 1041.38,233.415 1041.95,233.139 1042.52,230.666 1043.09,230.524 1043.66,230.449 1044.22,231.26 1044.79,230.013 1045.36,226.707 1045.93,226.835 1046.5,225.796 1047.07,225.171 1047.63,226.438 1048.2,227.725 1048.77,226.615 1049.34,226.641 1049.91,225.833 1050.48,227.837 1051.05,228.931 1051.61,229.063 1052.18,229.026 1052.75,224.888 1053.32,225.343 1053.89,225.587 1054.46,227.825 1055.02,226.659 1055.59,227.923 1056.16,227.89 1056.73,226.962 1057.3,227.09 1057.87,230.438 1058.43,231.407 1059,230.362 1059.57,230.343 1060.14,231.592 1060.71,230.516 1061.28,232.486 1061.84,232.114 1062.41,230.915 1062.98,229.707 1063.55,230.775 1064.12,228.532 1064.69,229.819 1065.25,231.96 1065.82,232.78 1066.39,234.288 1066.96,233.006 1067.53,232.783 1068.1,231.425 1068.66,231.341 1069.23,232.154 1069.8,230.86 1070.37,231.641 1070.94,232.442 1071.51,232.016 1072.07,233.814 1072.64,233.574 1073.21,233.235 1073.78,230.687 1074.35,230.422 1074.92,230.269 1075.48,230.096 1076.05,230.122 1076.62,227.924 1077.19,231.178 1077.76,233.219 1078.33,232.913 1078.89,230.488 1079.46,228.281 1080.03,227.405 1080.6,227.383 1081.17,225.549 1081.74,222.974 1082.3,221.125 1082.87,223.84 1083.44,221.389 1084.01,222.101 1084.58,222.702 1085.15,221.887 1085.71,223.421 1086.28,223.693 1086.85,225.288 1087.42,227.753 1087.99,225.801 1088.56,226.304 1089.12,224.668 1089.69,224.034 1090.26,224.426 1090.83,220.765 1091.4,222.589 1091.97,225.144 1092.53,226.768 1093.1,228.112 1093.67,230.65 1094.24,230.58 1094.81,230.657 1095.38,230.871 1095.94,232.808 1096.51,231.586 1097.08,229.482 1097.65,228.712 1098.22,229.906 1098.79,232.028 1099.35,233.991 1099.92,230.762 1100.49,232.922 1101.06,233.547 1101.63,231.321 1102.2,232.163 1102.76,231.882 1103.33,230.874 1103.9,230.927 1104.47,231.824 1105.04,228.595 1105.61,231.864 1106.17,231.854 1106.74,231.449 1107.31,230.363 1107.88,231.564 1108.45,230.312 1109.02,230.25 1109.58,229.169 1110.15,229.445 1110.72,227.458 1111.29,227.378 1111.86,226.676 1112.43,227.214 1112.99,231.482 1113.56,231.284 1114.13,231.26 1114.7,231.221 1115.27,230.175 1115.84,229.238 1116.4,228.199 1116.97,230.647 1117.54,229.594 1118.11,229.72 1118.68,231.847 1119.25,231.652 1119.81,230.423 1120.38,229.568 1120.95,230.699 1121.52,231.895 1122.09,229.73 1122.66,228.872 1123.23,229.085 1123.79,229.208 1124.36,229.723 1124.93,230.822 1125.5,230.763 1126.07,230.626 1126.64,228.393 1127.2,228.728 1127.77,228.959 1128.34,228.847 1128.91,226.817 1129.48,227.304 1130.05,226.677 1130.61,226.059 1131.18,227.411 1131.75,228.708 1132.32,227.857 1132.89,227.25 1133.46,228.789 1134.02,228.071 1134.59,227.351 1135.16,226.617 1135.73,227.306 1136.3,228.749 1136.87,229.864 1137.43,234.103 1138,235.064 1138.57,235.693 1139.14,237.422 1139.71,236.054 1140.28,236.487 1140.84,234.966 1141.41,233.7 1141.98,234.379 1142.55,233.125 1143.12,231.91 1143.69,233.88 1144.25,233.8 1144.82,233.686 1145.39,233.272 1145.96,234.001 1146.53,233.557 1147.1,231.239 1147.66,232.277 1148.23,232.026 1148.8,231.925 1149.37,231.919 1149.94,232.07 1150.51,231.189 1151.07,230.916 1151.64,227.648 1152.21,227.989 1152.78,228.062 1153.35,227.206 1153.92,227.111 1154.48,225.36 1155.05,224.818 1155.62,225.1 1156.19,225.347 1156.76,224.815 1157.33,225.093 1157.89,221.349 1158.46,221.002 1159.03,222.647 1159.6,222.208 1160.17,221.799 1160.74,224.569 1161.3,226.308 1161.87,225.672 1162.44,226.924 1163.01,225.98 1163.58,226.304 1164.15,225.464 1164.71,224.666 1165.28,226.249 1165.85,226.867 1166.42,225.325 1166.99,227.611 1167.56,229.225 1168.12,231.411 1168.69,230.311 1169.26,230.55 1169.83,232 1170.4,229.961 1170.97,228.071 1171.53,227.404 1172.1,229.783 1172.67,230.879 1173.24,231.031 1173.81,229.968 1174.38,231.295 1174.94,232.475 1175.51,233.628 1176.08,233.572 1176.65,233.411 1177.22,232.521 1177.79,233.53 1178.35,231.462 1178.92,231.606 1179.49,232.476 1180.06,232.411 1180.63,233.41 1181.2,234.29 1181.76,234.376 1182.33,235.182 1182.9,234.038 1183.47,233.865 1184.04,231.507 1184.61,231.571 1185.17,230.532 1185.74,230.485 1186.31,231.739 1186.88,232.755 1187.45,232.761 1188.02,230.477 1188.58,228.362 1189.15,228.584 1189.72,227.668 1190.29,228.916 1190.86,231.244 1191.43,229.204 1192,230.372 1192.56,229.491 1193.13,229.355 1193.7,230.527 1194.27,230.523 1194.84,231.654 1195.41,232.559 1195.97,234.666 1196.54,234.493 1197.11,236.343 1197.68,236.904 1198.25,234.437 1198.82,235.107 1199.38,233.769 1199.95,232.573 1200.52,231.387 1201.09,230.998 1201.66,231.964 1202.23,234.003 1202.79,235.068 1203.36,235.886 1203.93,236.618 1204.5,235.098 1205.07,236 1205.64,236.494 1206.2,234.955 1206.77,234.643 1207.34,233.474 1207.91,236.41 1208.48,235.859 1209.05,236.508 1209.61,235.856 1210.18,237.463 1210.75,233.784 1211.32,233.341 1211.89,232.976 1212.46,231.572 1213.02,231.644 1213.59,231.536 1214.16,228.355 1214.73,227.703 1215.3,228.026 1215.87,225.957 1216.43,227.132 1217,231.388 1217.57,233.12 1218.14,233.752 1218.71,233.418 1219.28,233.029 1219.84,230.92 1220.41,231.826 1220.98,232.753 1221.55,232.187 1222.12,232.16 1222.69,234.02 1223.25,233.713 1223.82,234.527 1224.39,234.122 1224.96,235.907 1225.53,234.413 1226.1,234.74 1226.66,231.031 1227.23,228.726 1227.8,227.79 1228.37,227.781 1228.94,226.892 1229.51,227.048 1230.07,228.391 1230.64,229.406 1231.21,230.381 1231.78,231.293 1232.35,228.06 1232.92,226.97 1233.48,226.587 1234.05,224.707 1234.62,220.943 1235.19,221.605 1235.76,221.237 1236.33,226.831 1236.89,228.195 1237.46,226.261 1238.03,227.69 1238.6,225.632 1239.17,225.044 1239.74,225.49 1240.3,226.867 1240.87,227.058 1241.44,226.258 1242.01,228.556 1242.58,228.803 1243.15,228.642 1243.71,226.508 1244.28,226.742 1244.85,228.184 1245.42,228.55 1245.99,229.97 1246.56,226.781 1247.12,224.026 1247.69,225.686 1248.26,226.996 1248.83,226.515 1249.4,226.607 1249.97,229.032 1250.53,230.117 1251.1,230.269 1251.67,232.479 1252.24,233.436 1252.81,233.117 1253.38,232.929 1253.94,233.805 1254.51,232.594 1255.08,232.365 1255.65,232.095 1256.22,229.879 1256.79,231.589 1257.35,229.353 1257.92,229.322 1258.49,227.297 1259.06,229.54 1259.63,228.757 1260.2,227.891 1260.76,226.936 1261.33,227.168 1261.9,229.449 1262.47,229.425 1263.04,230.621 1263.61,228.061 1264.18,228.191 1264.74,227.435 1265.31,228.632 1265.88,231.907 1266.45,230.772 1267.02,230.788 1267.59,229.773 1268.15,228.726 1268.72,228.827 1269.29,227.72 1269.86,227.046 1270.43,229.559 1271,229.585 1271.56,230.567 1272.13,228.391 1272.7,229.619 1273.27,228.495 1273.84,230.753 1274.41,235.906 1274.97,236.686 1275.54,235.382 1276.11,234.986 1276.68,233.388 1277.25,232.064 1277.82,231.867 1278.38,229.739 1278.95,227.887 1279.52,229.055 1280.09,229.072 1280.66,229.178 1281.23,229.276 1281.79,228.313 1282.36,226.471 1282.93,225.742 1283.5,228.27 1284.07,227.441 1284.64,229.617 1285.2,229.75 1285.77,231.746 1286.34,231.905 1286.91,231.973 1287.48,234.718 1288.05,234.334 1288.61,234.081 1289.18,235.706 1289.75,235.541 1290.32,235.116 1290.89,234.947 1291.46,234.553 1292.02,234.128 1292.59,234.794 1293.16,232.544 1293.73,231.302 1294.3,230.943 1294.87,231.865 1295.43,231.659 1296,231.446 1296.57,230.142 1297.14,234.077 1297.71,232.565 1298.28,233.377 1298.84,235.044 1299.41,235.64 1299.98,236.025 1300.55,233.508 1301.12,233.28 1301.69,234.151 1302.25,231.879 1302.82,232.028 1303.39,229.807 1303.96,231.728 1304.53,232.441 1305.1,233.236 1305.66,234.96 1306.23,234.305 1306.8,231.852 1307.37,230.659 1307.94,230.552 1308.51,230.384 1309.07,228.335 1309.64,227.483 1310.21,228.74 1310.78,226.916 1311.35,229.206 1311.92,227.845 1312.48,226.99 1313.05,229.066 1313.62,228.878 1314.19,228.926 1314.76,227.679 1315.33,226.643 1315.89,226.873 1316.46,227.887 1317.03,227.891 1317.6,229.021 1318.17,227.062 1318.74,226.258 1319.3,223.42 1319.87,224.98 1320.44,225.31 1321.01,225.528 1321.58,228.023 1322.15,231.336 1322.71,232.194 1323.28,231.957 1323.85,231.708 1324.42,231.627 1324.99,233.755 1325.56,233.511 1326.12,232.416 1326.69,234.51 1327.26,234.191 1327.83,233.644 1328.4,233.268 1328.97,232.935 1329.53,232.598 1330.1,233.357 1330.67,232.124 1331.24,233.059 1331.81,230.842 1332.38,231.73 1332.94,231.589 1333.51,232.051 1334.08,231.963 1334.65,232.609 1335.22,231.211 1335.79,232.941 1336.36,231.493 1336.92,230.238 1337.49,231.064 1338.06,229.649 1338.63,230.766 1339.2,228.604 1339.77,226.464 1340.33,226.723 1340.9,225.934 1341.47,225.221 1342.04,227.457 1342.61,225.449 1343.18,226.51 1343.74,227.88 1344.31,228.939 1344.88,230.918 1345.45,231.89 1346.02,232.615 1346.59,230.148 1347.15,228.023 1347.72,228.058 1348.29,226.088 1348.86,229.465 1349.43,230.54 1350,229.382 1350.56,227.413 1351.13,225.426 1351.7,225.865 1352.27,226.066 1352.84,225.005 1353.41,225.287 1353.97,226.635 1354.54,226.959 1355.11,227.903 1355.68,229.135 1356.25,225.178 1356.82,225.513 1357.38,224.821 1357.95,227.462 1358.52,226.563 1359.09,229.913 1359.66,229.05 1360.23,228.245 1360.79,228.353 1361.36,228.495 1361.93,232.946 1362.5,231.734 1363.07,231.462 1363.64,233.503 1364.2,233.512 1364.77,232.397 1365.34,229.428 1365.91,230.333 1366.48,230.366 1367.05,232.45 1367.61,230.27 1368.18,232.338 1368.75,233.267 1369.32,230.98 1369.89,233.051 1370.46,230.88 1371.02,230.909 1371.59,230.991 1372.16,230.989 1372.73,229.86 1373.3,227.776 1373.87,228.889 1374.43,230.164 1375,231.101 1375.57,231.142 1376.14,230.143 1376.71,230.07 1377.28,231.23 1377.84,229.98 1378.41,230.053 1378.98,229.01 1379.55,229.29 1380.12,227.114 1380.69,227.127 1381.25,226.226 1381.82,227.683 1382.39,228.846 1382.96,228.899 1383.53,229.012 1384.1,231.169 1384.66,229.049 1385.23,229.054 1385.8,226.893 1386.37,227.141 1386.94,227.42 1387.51,227.706 1388.07,229.014 1388.64,230.153 1389.21,232.026 1389.78,234.063 1390.35,233.933 1390.92,233.518 1391.48,232.424 1392.05,234.341 1392.62,230.929 1393.19,230.971 1393.76,230.077 1394.33,230.185 1394.89,228.094 1395.46,230.247 1396.03,231.549 1396.6,231.443 1397.17,231.207 1397.74,228.025 1398.3,227.133 1398.87,226.073 1399.44,226.351 1400.01,228.544 1400.58,228.686 1401.15,229.99 1401.71,229.031 1402.28,229.132 1402.85,228.301 1403.42,227.355 1403.99,227.571 1404.56,225.598 1405.13,224.9 1405.69,226.495 1406.26,226.931 1406.83,227.342 1407.4,226.667 1407.97,227.99 1408.54,227.049 1409.1,227.332 1409.67,226.609 1410.24,224.728 1410.81,226.28 1411.38,226.702 1411.95,228.298 1412.51,228.404 1413.08,228.562 1413.65,229.843 1414.22,231.024 1414.79,231.06 1415.36,230.206 1415.92,227.217 1416.49,226.602 1417.06,227.918 1417.63,228.309 1418.2,226.529 1418.77,229.887 1419.33,231.947 1419.9,230.94 1420.47,233.146 1421.04,232.931 1421.61,230.465 1422.18,229.735 1422.74,228.72 1423.31,228.914 1423.88,231.136 1424.45,232.013 1425.02,230.894 1425.59,231.772 1426.15,231.775 1426.72,230.609 1427.29,229.595 1427.86,230.51 1428.43,230.556 1429,229.743 1429.56,229.703 1430.13,229.606 1430.7,228.671 1431.27,228.502 1431.84,227.622 1432.41,227.778 1432.97,227.18 1433.54,228.862 1434.11,229.998 1434.68,231.116 1435.25,232.106 1435.82,233.136 1436.38,232.962 1436.95,231.778 1437.52,231.656 1438.09,231.68 1438.66,232.529 1439.23,235.464 1439.79,233.042 1440.36,232.976 1440.93,230.657 1441.5,233 1442.07,235.74 1442.64,235.26 1443.2,233.92 1443.77,233.639 1444.34,234.511 1444.91,234.396 1445.48,234.023 1446.05,233.794 1446.61,232.773 1447.18,231.613 1447.75,231.271 1448.32,232.075 1448.89,236.1 1449.46,234.671 1450.02,233.301 1450.59,234.345 1451.16,233.031 1451.73,232.717 1452.3,232.69 1452.87,232.457 1453.43,232.356 1454,230.865 1454.57,230.677 1455.14,231.68 1455.71,231.516 1456.28,235.48 1456.84,231.952 1457.41,229.707 1457.98,228.842 1458.55,227.958 1459.12,226.157 1459.69,224.495 1460.25,223.966 1460.82,227.449 1461.39,226.274 1461.96,227.657 1462.53,228.679 1463.1,229.775 1463.66,230.826 1464.23,230.533 1464.8,229.482 1465.37,227.63 1465.94,227.782 1466.51,225.827 1467.07,227.053 1467.64,226.219 1468.21,227.642 1468.78,228.703 1469.35,228.884 1469.92,231.214 1470.48,231.092 1471.05,229.942 1471.62,231.248 1472.19,232.379 1472.76,233.381 1473.33,234.299 1473.89,235.134 1474.46,233.676 1475.03,234.244 1475.6,234.244 1476.17,231.832 1476.74,233.899 1477.31,232.653 1477.87,228.075 1478.44,228.207 1479.01,227.2 1479.58,228.573 1480.15,226.491 1480.72,226.637 1481.28,228.08 1481.85,227.062 1482.42,228.261 1482.99,227.193 1483.56,224.345 1484.13,225.954 1484.69,227.433 1485.26,227.468 1485.83,228.683 1486.4,228.844 1486.97,232.137 1487.54,231.06 1488.1,231.971 1488.67,230.708 1489.24,231.843 1489.81,231.724 1490.38,233.727 1490.95,233.615 1491.51,230.215 1492.08,229.349 1492.65,227.296 1493.22,226.411 1493.79,227.583 1494.36,225.793 1494.92,226.221 1495.49,226.516 1496.06,228.553 1496.63,228.677 1497.2,227.802 1497.77,229.189 1498.33,230.417 1498.9,230.389 1499.47,228.293 1500.04,224.63 1500.61,224.046 1501.18,226.553 1501.74,225.835 1502.31,225.25 1502.88,225.599 1503.45,224.848 1504.02,225.388 1504.59,226.752 1505.15,227.055 1505.72,225.175 1506.29,226.668 1506.86,228.087 1507.43,229.373 1508,229.437 1508.56,230.356 1509.13,231.411 1509.7,235.39 1510.27,236.214 1510.84,235.577 1511.41,233.206 1511.97,233.981 1512.54,233.797 1513.11,233.517 1513.68,233.297 1514.25,234.121 1514.82,233.973 1515.38,234.84 1515.95,232.512 1516.52,231.333 1517.09,231.13 1517.66,230.981 1518.23,230.933 1518.79,230.729 1519.36,231.642 1519.93,234.423 1520.5,232.913 1521.07,231.867 1521.64,231.853 1522.2,231.761 1522.77,230.511 1523.34,230.687 1523.91,230.493 1524.48,230.339 1525.05,230.378 1525.61,230.462 1526.18,230.581 1526.75,230.673 1527.32,229.69 1527.89,229.904 1528.46,230.085 1529.02,229.134 1529.59,227.978 1530.16,226.158 1530.73,225.384 1531.3,226.569 1531.87,224.871 1532.43,224.204 1533,225.78 1533.57,227.946 1534.14,226.133 1534.71,225.521 1535.28,227.129 1535.84,228.553 1536.41,228.793 1536.98,230.133 1537.55,232.198 1538.12,232.188 1538.69,233.805 1539.25,234.71 1539.82,234.606 1540.39,232.485 1540.96,233.329 1541.53,234.34 1542.1,234.119 1542.66,232.628 1543.23,233.262 1543.8,229.938 1544.37,230.091 1544.94,229.2 1545.51,232.451 1546.08,232.325 1546.64,232.056 1547.21,229.857 1547.78,231.044 1548.35,231.156 1548.92,232.247 1549.49,231.94 1550.05,232.875 1550.62,229.645 1551.19,228.574 1551.76,228.684 1552.33,231.779 1552.9,229.449 1553.46,228.534 1554.03,227.821 1554.6,224.85 1555.17,228.478 1555.74,229.703 1556.31,227.685 1556.87,230.047 1557.44,232.056 1558.01,232.087 1558.58,232.014 1559.15,234.101 1559.72,233.845 1560.28,232.673 1560.85,231.591 1561.42,233.527 1561.99,233.375 1562.56,235.146 1563.13,235.051 1563.69,234.617 1564.26,237.409 1564.83,234.938 1565.4,233.542 1565.97,232.375 1566.54,229.914 1567.1,229.887 1567.67,228.828 1568.24,227.813 1568.81,231.13 1569.38,233.078 1569.95,233.597 1570.51,233.208 1571.08,235.033 1571.65,235.719 1572.22,235.304 1572.79,233.743 1573.36,234.407 1573.92,236.087 1574.49,235.798 1575.06,235.426 1575.63,236.965 1576.2,237.339 1576.77,237.954 1577.33,236.373 1577.9,235.918 1578.47,235.309 1579.04,235.875 1579.61,234.294 1580.18,231.987 1580.74,228.745 1581.31,228.388 1581.88,226.339 1582.45,226.341 1583.02,226.336 1583.59,226.17 1584.15,225.374 1584.72,224.598 1585.29,224.755 1585.86,224.965 1586.43,223.369 1587,224.687 1587.56,224.087 1588.13,224.501 1588.7,222.882 1589.27,224.175 1589.84,223.433 1590.41,223.917 1590.97,225.562 1591.54,225.986 1592.11,226.103 1592.68,227.312 1593.25,228.618 1593.82,226.952 1594.38,227.957 1594.95,226.845 1595.52,225.947 1596.09,227.399 1596.66,226.721 1597.23,229.99 1597.79,231.075 1598.36,231.299 1598.93,231.306 1599.5,232.133 1600.07,233.19 1600.64,233.035 1601.2,233.056 1601.77,231.889 1602.34,229.854 1602.91,232.914 1603.48,234.651 1604.05,233.202 1604.61,233.908 1605.18,231.536 1605.75,231.413 1606.32,230.37 1606.89,231.511 1607.46,231.477 1608.02,229.136 1608.59,231.237 1609.16,233.226 1609.73,234.053 1610.3,233.569 1610.87,233.305 1611.43,234.285 1612,234.119 1612.57,233.671 1613.14,232.521 1613.71,233.446 1614.28,233.094 1614.84,232.642 1615.41,232.493 1615.98,232.228 1616.55,231.016 1617.12,227.029 1617.69,226.282 1618.26,225.43 1618.82,224.619 1619.39,226.927 1619.96,227.09 1620.53,226.301 1621.1,226.375 1621.67,226.718 1622.23,227.887 1622.8,227.034 1623.37,225.97 1623.94,221.063 1624.51,222.72 1625.08,223.306 1625.64,223.757 1626.21,224.133 1626.78,226.949 1627.35,228.246 1627.92,229.333 1628.49,229.524 1629.05,230.788 1629.62,230.364 1630.19,231.424 1630.76,231.208 1631.33,230.151 1631.9,231.157 1632.46,231.056 1633.03,228.634 1633.6,227.821 1634.17,229.155 1634.74,228.212 1635.31,226.272 1635.87,227.742 1636.44,227.782 1637.01,228.247 1637.58,226.408 1638.15,228.751 1638.72,228.851 1639.28,227.131 1639.85,226.258 1640.42,226.408 1640.99,227.822 1641.56,231.151 1642.13,232.165 1642.69,232.338 1643.26,232.179 1643.83,233.27 1644.4,233.277 1644.97,234.992 1645.54,236.833 1646.1,235.214 1646.67,233.954 1647.24,234.535 1647.81,235.118 1648.38,233.677 1648.95,233.561 1649.51,233.202 1650.08,233.062 1650.65,232.723 1651.22,232.562 1651.79,230.241 1652.36,230.228 1652.92,230.32 1653.49,228.291 1654.06,228.44 1654.63,228.257 1655.2,225.428 1655.77,225.748 1656.33,223.897 1656.9,223.532 1657.47,226.11 1658.04,228.528 1658.61,228.682 1659.18,228.658 1659.74,231.901 1660.31,232.944 1660.88,231.593 1661.45,230.542 1662.02,229.465 1662.59,229.614 1663.15,230.674 1663.72,231.852 1664.29,230.547 1664.86,230.534 1665.43,230.557 1666,229.649 1666.56,230.786 1667.13,227.759 1667.7,228.053 1668.27,229.058 1668.84,229.166 1669.41,229.329 1669.97,227.33 1670.54,226.424 1671.11,225.69 1671.68,225.888 1672.25,226.484 1672.82,226.809 1673.38,231.071 1673.95,231.187 1674.52,228.961 1675.09,228.03 1675.66,228.257 1676.23,228.391 1676.79,228.464 1677.36,226.552 1677.93,226.736 1678.5,225.941 1679.07,227.379 1679.64,229.722 1680.2,230.614 1680.77,231.736 1681.34,230.766 1681.91,231.612 1682.48,228.521 1683.05,230.76 1683.61,230.485 1684.18,229.342 1684.75,230.446 1685.32,232.542 1685.89,232.387 1686.46,237.243 1687.02,237.621 1687.59,237.196 1688.16,237.602 1688.73,237.046 1689.3,236.396 1689.87,231.635 1690.44,233.739 1691,235.589 1691.57,234.279 1692.14,235.82 1692.71,236.483 1693.28,236.876 1693.85,233.299 1694.41,231.988 1694.98,231.913 1695.55,232.747 1696.12,232.601 1696.69,231.595 1697.26,231.358 1697.82,232.238 1698.39,232.014 1698.96,230.682 1699.53,231.594 1700.1,231.432 1700.67,231.282 1701.23,231.182 1701.8,226.583 1702.37,227.561 1702.94,228.796 1703.51,225.771 1704.08,228.304 1704.64,227.338 1705.21,225.449 1705.78,224.751 1706.35,226.057 1706.92,225.377 1707.49,225.802 1708.05,227.167 1708.62,227.332 1709.19,227.354 1709.76,227.541 1710.33,226.589 1710.9,227.034 1711.46,228.243 1712.03,225.224 1712.6,225.645 1713.17,224.947 1713.74,225.574 1714.31,229.032 1714.87,229.15 1715.44,230.405 1716.01,230.563 1716.58,231.564 1717.15,230.605 1717.72,230.668 1718.28,230.608 1718.85,230.527 1719.42,228.51 1719.99,228.705 1720.56,227.727 1721.13,227.995 1721.69,227.493 1722.26,226.684 1722.83,225.86 1723.4,223.465 1723.97,225.186 1724.54,224.771 1725.1,226.316 1725.67,227.45 1726.24,227.439 1726.81,228.823 1727.38,229.073 1727.95,228.073 1728.51,229.276 1729.08,229.394 1729.65,229.657 1730.22,227.75 1730.79,227.808 1731.36,228.187 1731.92,229.364 1732.49,227.369 1733.06,224.461 1733.63,224.011 1734.2,223.276 1734.77,219.895 1735.33,220.639 1735.9,221.55 1736.47,220.299 1737.04,222.061 1737.61,226.007 1738.18,227.585 1738.74,228.961 1739.31,227.121 1739.88,229.715 1740.45,230.124 1741.02,232.633 1741.59,235.696 1742.15,234.418 1742.72,234.387 1743.29,236.436 1743.86,238.045 1744.43,235.415 1745,234.137 1745.56,234.052 1746.13,234.994 1746.7,235.998 1747.27,234.868 1747.84,234.859 1748.41,236.664 1748.97,236.163 1749.54,234.753 1750.11,235.798 1750.68,236.24 1751.25,233.824 1751.82,233.771 1752.38,233.549 1752.95,233.091 1753.52,233.1 1754.09,232.977 1754.66,234.86 1755.23,234.475 1755.79,233.083 1756.36,231.799 1756.93,234.921 1757.5,233.549 1758.07,234.538 1758.64,236.325 1759.21,237.033 1759.77,237.459 1760.34,235.982 1760.91,233.628 1761.48,234.387 1762.05,236.025 1762.62,237.453 1763.18,237.999 1763.75,235.549 1764.32,236.201 1764.89,235.753 1765.46,237.18 1766.03,233.334 1766.59,231.999 1767.16,233.702 1767.73,232.111 1768.3,232.961 1768.87,232.566 1769.44,231.363 1770,231.079 1770.57,229.798 1771.14,230.65 1771.71,234.642 1772.28,235.275 1772.85,235.061 1773.41,236.762 1773.98,235.132 1774.55,233.675 1775.12,234.535 1775.69,233.905 1776.26,231.607 1776.82,231.406 1777.39,225.04 1777.96,228.442 1778.53,228.461 1779.1,228.624 1779.67,229.539 1780.23,228.542 1780.8,229.649 1781.37,227.825 1781.94,226.937 1782.51,224.972 1783.08,226.192 1783.64,225.225 1784.21,226.532 1784.78,226.657 1785.35,228.045 1785.92,228.232 1786.49,228.508 1787.05,228.445 1787.62,228.442 1788.19,228.705 1788.76,229.84 1789.33,229.654 1789.9,231.398 1790.46,230.269 1791.03,231.218 1791.6,232.22 1792.17,232.492 1792.74,232.2 1793.31,231.826 1793.87,233.721 1794.44,232.185 1795.01,234.979 1795.58,232.483 1796.15,232.158 1796.72,231.709 1797.28,231.514 1797.85,234.571 1798.42,232.305 1798.99,232.047 1799.56,228.659 1800.13,230.932 1800.69,232.913 1801.26,232.678 1801.83,232.442 1802.4,232.101 1802.97,228.754 1803.54,230.829 1804.1,228.444 1804.67,228.297 1805.24,226.405 1805.81,226.549 1806.38,225.594 1806.95,226.737 1807.51,227.701 1808.08,226.695 1808.65,225.989 1809.22,225.053 1809.79,224.345 1810.36,225.709 1810.92,225.03 1811.49,226.389 1812.06,225.643 1812.63,224.925 1813.2,226.276 1813.77,226.536 1814.33,225.825 1814.9,224.039 1815.47,224.507 1816.04,224.852 1816.61,225 1817.18,226.471 1817.74,224.66 1818.31,223.045 1818.88,223.574 1819.45,222.761 1820.02,224.362 1820.59,226.975 1821.15,226.087 1821.72,229.366 1822.29,230.52 1822.86,232.681 1823.43,232.477 1824,233.219 1824.56,234.045 1825.13,236.835 1825.7,238.599 1826.27,235.955 1826.84,234.643 1827.41,233.468 1827.97,234.397 1828.54,233.002 1829.11,233.791 1829.68,235.498 1830.25,235.158 1830.82,233.581 1831.39,234.205 1831.95,236.996 1832.52,234.438 1833.09,234.075 1833.66,231.498 1834.23,230.44 1834.8,229.348 1835.36,229.205 1835.93,228.074 1836.5,228.032 1837.07,228.282 1837.64,228.302 1838.21,229.399 1838.77,227.382 1839.34,230.536 1839.91,230.535 1840.48,230.578 1841.05,229.594 1841.62,223.295 1842.18,225.942 1842.75,225.274 1843.32,227.757 1843.89,227.866 1844.46,226.731 1845.03,226.799 1845.59,225.955 1846.16,225.04 1846.73,226.426 1847.3,225.412 1847.87,227.731 1848.44,230.25 1849,230.385 1849.57,231.366 1850.14,232.302 1850.71,230.148 1851.28,230.199 1851.85,230.44 1852.41,229.286 1852.98,229.408 1853.55,230.551 1854.12,233.633 1854.69,233.553 1855.26,232.038 1855.82,234.032 1856.39,232.693 1856.96,234.509 1857.53,237.302 1858.1,234.624 1858.67,235.343 1859.23,234.893 1859.8,235.5 1860.37,233.912 1860.94,232.631 1861.51,232.374 1862.08,231.027 1862.64,232.058 1863.21,232.939 1863.78,234.584 1864.35,235.192 1864.92,234.729 1865.49,235.232 1866.05,235.801 1866.62,233.149 1867.19,232.723 1867.76,233.472 1868.33,231.275 1868.9,231.085 1869.46,231.799 1870.03,229.361 1870.6,230.48 1871.17,230.376 1871.74,230.057 1872.31,230.731 1872.87,230.532 1873.44,229.051 1874.01,227.951 1874.58,228.888 1875.15,228.735 1875.72,229.753 1876.28,226.394 1876.85,226.253 1877.42,225.125 1877.99,225.565 1878.56,223.794 1879.13,224.111 1879.69,224.548 1880.26,224.866 1880.83,228.077 1881.4,227.973 1881.97,226.878 1882.54,228.922 1883.1,226.789 1883.67,229.055 1884.24,227.181 1884.81,229.331 1885.38,228.274 1885.95,228.468 1886.51,228.557 1887.08,229.643 1887.65,230.713 1888.22,230.299 1888.79,232.15 1889.36,231.893 1889.92,231.88 1890.49,230.613 1891.06,230.575 1891.63,229.41 1892.2,229.477 1892.77,228.589 1893.33,230.73 1893.9,229.877 1894.47,230.109 1895.04,229.959 1895.61,229.737 1896.18,228.746 1896.74,228.745 1897.31,227.679 1897.88,226.948 1898.45,227.121 1899.02,225.23 1899.59,226.252 1900.16,226.467 1900.72,226.836 1901.29,227.279 1901.86,228.402 1902.43,230.657 1903,230.415 1903.57,229.49 1904.13,230.563 1904.7,230.559 1905.27,231.398 1905.84,231.239 1906.41,231.058 1906.98,232.118 1907.54,231.865 1908.11,229.035 1908.68,229.214 1909.25,227.357 1909.82,225.228 1910.39,227.754 1910.95,227.988 1911.52,227.421 1912.09,227.679 1912.66,228.042 1913.23,228.327 1913.8,227.332 1914.36,228.628 1914.93,228.717 1915.5,228.044 1916.07,228.334 1916.64,227.376 1917.21,226.245 1917.77,228.352 1918.34,225.602 1918.91,228.057 1919.48,226.218 1920.05,226.412 1920.62,227.667 1921.18,225.983 1921.75,225.492 1922.32,226.993 1922.89,225.224 1923.46,225.522 1924.03,225.991 1924.59,226.34 1925.16,226.825 1925.73,230.12 1926.3,230.176 1926.87,232.598 1927.44,230.441 1928,231.496 1928.57,232.618 1929.14,230.533 1929.71,230.678 1930.28,227.839 1930.85,228.2 1931.41,228.293 1931.98,228.362 1932.55,226.656 1933.12,225.947 1933.69,227.229 1934.26,227.682 1934.82,228.901 1935.39,226.96 1935.96,227.265 1936.53,227.481 1937.1,227.781 1937.67,228.119 1938.23,227.331 1938.8,227.82 1939.37,228.212 1939.94,227.537 1940.51,225.911 1941.08,226.359 1941.64,224.728 1942.21,226.312 1942.78,227.9 1943.35,227.239 1943.92,226.796 1944.49,229.263 1945.05,230.695 1945.62,233 1946.19,231.823 1946.76,231.864 1947.33,232.823 1947.9,231.586 1948.46,232.505 1949.03,232.377 1949.6,233.362 1950.17,232.4 1950.74,232.509 1951.31,232.625 1951.87,232.683 1952.44,232.498 1953.01,233.655 1953.58,233.488 1954.15,233.278 1954.72,232.054 1955.28,232.068 1955.85,233.021 1956.42,233.011 1956.99,234.124 1957.56,231.901 1958.13,230.661 1958.69,229.726 1959.26,229.761 1959.83,229.77 1960.4,229.816 1960.97,227.853 1961.54,226.16 1962.1,227.757 1962.67,228.965 1963.24,230.115 1963.81,230.238 1964.38,231.364 1964.95,231.451 1965.51,229.505 1966.08,229.59 1966.65,228.791 1967.22,229.905 1967.79,229.964 1968.36,230.94 1968.92,227.846 1969.49,229.065 1970.06,230.361 1970.63,231.395 1971.2,231.351 1971.77,232.364 1972.34,232.265 1972.9,230.258 1973.47,231.41 1974.04,232.411 1974.61,232.396 1975.18,232.56 1975.75,232.549 1976.31,231.781 1976.88,231.818 1977.45,231.983 1978.02,232.042 1978.59,233.101 1979.16,235.072 1979.72,234.516 1980.29,235.356 1980.86,235.296 1981.43,234.108 1982,232.581 1982.57,232.587 1983.13,235.569 1983.7,234.325 1984.27,234.011 1984.84,233.819 1985.41,233.646 1985.98,232.621 1986.54,232.594 1987.11,232.292 1987.68,233.072 1988.25,232.839 1988.82,234.779 1989.39,234.582 1989.95,233.23 1990.52,234.155 1991.09,232.893 1991.66,232.689 1992.23,233.535 1992.8,234.169 1993.36,234.926 1993.93,232.469 1994.5,233.441 1995.07,237.308 1995.64,238.715 1996.21,239.085 1996.77,238.384 1997.34,237.878 1997.91,237.322 1998.48,236.72 1999.05,236.215 1999.62,233.753 2000.18,232.442 2000.75,232.096 2001.32,232.888 2001.89,234.564 2002.46,234.162 2003.03,233.856 2003.59,231.477 2004.16,233.28 2004.73,232.82 2005.3,231.459 2005.87,228.128 2006.44,228.085 2007,228.086 2007.57,229.21 2008.14,227.144 2008.71,225.214 2009.28,225.532 2009.85,226.731 2010.41,228.79 2010.98,229.944 2011.55,227.76 2012.12,226.724 2012.69,227.907 2013.26,225.904 2013.82,225.04 2014.39,224.196 2014.96,225.665 2015.53,226.102 2016.1,226.277 2016.67,225.327 2017.23,223.613 2017.8,223.037 2018.37,222.714 2018.94,222.201 2019.51,223.884 2020.08,223.202 2020.64,224.736 2021.21,222.888 2021.78,223.279 2022.35,222.902 2022.92,221.497 2023.49,225.04 2024.05,225.458 2024.62,225.575 2025.19,222.822 2025.76,224.557 2026.33,224.077 2026.9,224.389 2027.46,222.901 2028.03,223.435 2028.6,222.938 2029.17,227.835 2029.74,228.25 2030.31,230.456 2030.87,231.591 2031.44,231.4 2032.01,230.412 2032.58,233.557 2033.15,231.398 2033.72,232.315 2034.28,232.301 2034.85,233.385 2035.42,231.119 2035.99,232.23 2036.56,234.167 2037.13,233.044 2037.69,231.922 2038.26,230.909 2038.83,231.978 2039.4,231.689 2039.97,230.343 2040.54,230.592 2041.11,230.724 2041.67,228.815 2042.24,229.051 2042.81,229.208 2043.38,230.562 2043.95,231.746 2044.52,232.691 2045.08,234.632 2045.65,236.155 2046.22,235.666 2046.79,236.21 2047.36,234.844 2047.93,234.566 2048.49,236.327 2049.06,236.032 2049.63,236.615 2050.2,235.957 2050.77,235.482 2051.34,235.067 2051.9,235.802 2052.47,238.419 2053.04,237.794 2053.61,236.364 2054.18,235.778 2054.75,235.217 2055.31,235.672 2055.88,236.288 2056.45,235.513 2057.02,235.033 2057.59,235.52 2058.16,234.017 2058.72,233.619 2059.29,232.251 2059.86,232.175 2060.43,230.85 2061,233.928 2061.57,234.435 2062.13,232.869 2062.7,233.558 2063.27,233.082 2063.84,232.429 2064.41,232.094 2064.98,231.876 2065.54,231.509 2066.11,232.39 2066.68,231.192 2067.25,230.87 2067.82,229.744 2068.39,227.537 2068.95,227.652 2069.52,227.869 2070.09,226.881 2070.66,226.126 2071.23,226.161 2071.8,226.446 2072.36,227.512 2072.93,227.361 2073.5,223.447 2074.07,223.799 2074.64,226.158 2075.21,227.44 2075.77,227.611 2076.34,227.758 2076.91,227.688 2077.48,227.481 2078.05,228.551 2078.62,230.544 2079.18,230.357 2079.75,231.418 2080.32,230.147 2080.89,227.996 2081.46,226.947 2082.03,226.944 2082.59,226.26 2083.16,227.553 2083.73,227.718 2084.3,226.792 2084.87,227.022 2085.44,226.135 2086,227.01 2086.57,228.154 2087.14,228.144 2087.71,228.143 2088.28,228.295 2088.85,229.618 2089.41,230.772 2089.98,230.471 2090.55,232.376 2091.12,234.108 2091.69,234.851 2092.26,234.243 2092.82,230.999 2093.39,231.915 2093.96,229.654 2094.53,231.927 2095.1,231.902 2095.67,231.856 2096.23,231.824 2096.8,231.767 2097.37,228.651 2097.94,226.812 2098.51,226.893 2099.08,228.105 2099.64,228.003 2100.21,226.995 2100.78,227.088 2101.35,227.256 2101.92,228.466 2102.49,227.57 2103.05,227.864 2103.62,228.111 2104.19,230.407 2104.76,231.292 2105.33,230.889 2105.9,228.59 2106.46,227.787 2107.03,228.957 2107.6,228.115 2108.17,229.245 2108.74,229.321 2109.31,225.07 2109.87,226.641 2110.44,229.062 2111.01,230.429 2111.58,230.222 2112.15,229.148 2112.72,228.544 2113.29,230.788 2113.85,230.857 2114.42,231.949 2114.99,232.98 2115.56,235.002 2116.13,234.622 2116.7,231.212 2117.26,232.427 2117.83,232.168 2118.4,232.97 2118.97,231.686 2119.54,230.524 2120.11,229.465 2120.67,229.252 2121.24,230.288 2121.81,228.041 2122.38,226.083 2122.95,225.236 2123.52,226.535 2124.08,226.481 2124.65,225.757 2125.22,226.026 2125.79,228.463 2126.36,231.527 2126.93,231.702 2127.49,231.65 2128.06,233.654 2128.63,232.343 2129.2,232.14 2129.77,231.914 2130.34,232.871 2130.9,231.563 2131.47,233.437 2132.04,235.135 2132.61,235.667 2133.18,234.128 2133.75,233.891 2134.31,234.779 2134.88,234.619 2135.45,233.189 2136.02,232.152 2136.59,230.959 2137.16,229.776 2137.72,228.607 2138.29,227.735 2138.86,225.921 2139.43,225.005 2140,224.241 2140.57,225.927 2141.13,229.267 2141.7,229.327 2142.27,230.358 2142.84,231.246 2143.41,230.161 2143.98,231.23 2144.54,231.166 2145.11,232.186 2145.68,229.973 2146.25,228.85 2146.82,227.087 2147.39,227.295 2147.95,226.493 2148.52,227.711 2149.09,227.826 2149.66,228.832 2150.23,232.123 2150.8,231.966 2151.36,231.835 2151.93,231.752 2152.5,230.564 2153.07,232.565 2153.64,232.088 2154.21,231.966 2154.77,233.973 2155.34,233.618 2155.91,232.061 2156.48,232.861 2157.05,231.435 2157.62,231.273 2158.18,232.958 2158.75,231.642 2159.32,230.453 2159.89,229.221 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.023\n  with uncertainty of ± 0.002095315376807151\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0138 ± (0.00325163, 0.00339282) (MC)\n  95% confidence interval: [-4.02059, -4.00759]) (MC)\n  linear error propagation: -4.01424 ± 0.00343201\n  |δ_y| = |0.00307883| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013795012376049, val_l = 0.0067988484645500336, val_u = 0.006208292425974982)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip830\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip830)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip831\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip830)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip832\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.23 2211.02,1147.23 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,986.556 2211.02,986.556 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,825.881 2211.02,825.881 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,665.206 2211.02,665.206 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,504.532 2211.02,504.532 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,343.857 2211.02,343.857 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.23 365.751,1147.23 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,986.556 365.751,986.556 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,825.881 365.751,825.881 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,665.206 365.751,665.206 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,504.532 365.751,504.532 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,343.857 365.751,343.857 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M298.909 1133.03 Q295.298 1133.03 293.469 1136.59 Q291.664 1140.14 291.664 1147.26 Q291.664 1154.37 293.469 1157.94 Q295.298 1161.48 298.909 1161.48 Q302.543 1161.48 304.349 1157.94 Q306.177 1154.37 306.177 1147.26 Q306.177 1140.14 304.349 1136.59 Q302.543 1133.03 298.909 1133.03 M298.909 1129.33 Q304.719 1129.33 307.775 1133.93 Q310.853 1138.51 310.853 1147.26 Q310.853 1155.99 307.775 1160.6 Q304.719 1165.18 298.909 1165.18 Q293.099 1165.18 290.02 1160.6 Q286.964 1155.99 286.964 1147.26 Q286.964 1138.51 290.02 1133.93 Q293.099 1129.33 298.909 1129.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M259.557 999.9 L267.196 999.9 L267.196 973.535 L258.886 975.202 L258.886 970.942 L267.15 969.276 L271.826 969.276 L271.826 999.9 L279.465 999.9 L279.465 1003.84 L259.557 1003.84 L259.557 999.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 972.354 Q295.298 972.354 293.469 975.919 Q291.664 979.461 291.664 986.59 Q291.664 993.697 293.469 997.262 Q295.298 1000.8 298.909 1000.8 Q302.543 1000.8 304.349 997.262 Q306.177 993.697 306.177 986.59 Q306.177 979.461 304.349 975.919 Q302.543 972.354 298.909 972.354 M298.909 968.651 Q304.719 968.651 307.775 973.257 Q310.853 977.84 310.853 986.59 Q310.853 995.317 307.775 999.924 Q304.719 1004.51 298.909 1004.51 Q293.099 1004.51 290.02 999.924 Q286.964 995.317 286.964 986.59 Q286.964 977.84 290.02 973.257 Q293.099 968.651 298.909 968.651 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M262.775 839.226 L279.094 839.226 L279.094 843.161 L257.15 843.161 L257.15 839.226 Q259.812 836.471 264.395 831.842 Q269.002 827.189 270.182 825.846 Q272.428 823.323 273.307 821.587 Q274.21 819.828 274.21 818.138 Q274.21 815.383 272.266 813.647 Q270.344 811.911 267.242 811.911 Q265.043 811.911 262.59 812.675 Q260.159 813.439 257.381 814.99 L257.381 810.268 Q260.205 809.133 262.659 808.555 Q265.113 807.976 267.15 807.976 Q272.52 807.976 275.715 810.661 Q278.909 813.346 278.909 817.837 Q278.909 819.967 278.099 821.888 Q277.312 823.786 275.205 826.379 Q274.627 827.05 271.525 830.268 Q268.423 833.462 262.775 839.226 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 811.68 Q295.298 811.68 293.469 815.245 Q291.664 818.786 291.664 825.916 Q291.664 833.022 293.469 836.587 Q295.298 840.129 298.909 840.129 Q302.543 840.129 304.349 836.587 Q306.177 833.022 306.177 825.916 Q306.177 818.786 304.349 815.245 Q302.543 811.68 298.909 811.68 M298.909 807.976 Q304.719 807.976 307.775 812.583 Q310.853 817.166 310.853 825.916 Q310.853 834.643 307.775 839.249 Q304.719 843.832 298.909 843.832 Q293.099 843.832 290.02 839.249 Q286.964 834.643 286.964 825.916 Q286.964 817.166 290.02 812.583 Q293.099 807.976 298.909 807.976 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M272.914 663.852 Q276.27 664.57 278.145 666.838 Q280.043 669.107 280.043 672.44 Q280.043 677.556 276.525 680.357 Q273.006 683.158 266.525 683.158 Q264.349 683.158 262.034 682.718 Q259.742 682.301 257.289 681.445 L257.289 676.931 Q259.233 678.065 261.548 678.644 Q263.863 679.223 266.386 679.223 Q270.784 679.223 273.076 677.487 Q275.39 675.75 275.39 672.44 Q275.39 669.385 273.238 667.672 Q271.108 665.936 267.289 665.936 L263.261 665.936 L263.261 662.093 L267.474 662.093 Q270.923 662.093 272.752 660.727 Q274.58 659.338 274.58 656.746 Q274.58 654.084 272.682 652.672 Q270.807 651.237 267.289 651.237 Q265.367 651.237 263.168 651.653 Q260.969 652.07 258.33 652.95 L258.33 648.783 Q260.992 648.042 263.307 647.672 Q265.645 647.301 267.705 647.301 Q273.029 647.301 276.131 649.732 Q279.233 652.139 279.233 656.26 Q279.233 659.13 277.59 661.121 Q275.946 663.088 272.914 663.852 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 651.005 Q295.298 651.005 293.469 654.57 Q291.664 658.112 291.664 665.241 Q291.664 672.348 293.469 675.912 Q295.298 679.454 298.909 679.454 Q302.543 679.454 304.349 675.912 Q306.177 672.348 306.177 665.241 Q306.177 658.112 304.349 654.57 Q302.543 651.005 298.909 651.005 M298.909 647.301 Q304.719 647.301 307.775 651.908 Q310.853 656.491 310.853 665.241 Q310.853 673.968 307.775 678.574 Q304.719 683.158 298.909 683.158 Q293.099 683.158 290.02 678.574 Q286.964 673.968 286.964 665.241 Q286.964 656.491 290.02 651.908 Q293.099 647.301 298.909 647.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M271.594 491.326 L259.789 509.775 L271.594 509.775 L271.594 491.326 M270.367 487.252 L276.247 487.252 L276.247 509.775 L281.177 509.775 L281.177 513.664 L276.247 513.664 L276.247 521.812 L271.594 521.812 L271.594 513.664 L255.992 513.664 L255.992 509.15 L270.367 487.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 490.331 Q295.298 490.331 293.469 493.895 Q291.664 497.437 291.664 504.567 Q291.664 511.673 293.469 515.238 Q295.298 518.78 298.909 518.78 Q302.543 518.78 304.349 515.238 Q306.177 511.673 306.177 504.567 Q306.177 497.437 304.349 493.895 Q302.543 490.331 298.909 490.331 M298.909 486.627 Q304.719 486.627 307.775 491.233 Q310.853 495.817 310.853 504.567 Q310.853 513.293 307.775 517.9 Q304.719 522.483 298.909 522.483 Q293.099 522.483 290.02 517.9 Q286.964 513.293 286.964 504.567 Q286.964 495.817 290.02 491.233 Q293.099 486.627 298.909 486.627 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M258.793 326.577 L277.15 326.577 L277.15 330.513 L263.076 330.513 L263.076 338.985 Q264.094 338.637 265.113 338.475 Q266.131 338.29 267.15 338.29 Q272.937 338.29 276.316 341.462 Q279.696 344.633 279.696 350.049 Q279.696 355.628 276.224 358.73 Q272.752 361.809 266.432 361.809 Q264.256 361.809 261.988 361.438 Q259.742 361.068 257.335 360.327 L257.335 355.628 Q259.418 356.762 261.641 357.318 Q263.863 357.874 266.34 357.874 Q270.344 357.874 272.682 355.767 Q275.02 353.661 275.02 350.049 Q275.02 346.438 272.682 344.332 Q270.344 342.225 266.34 342.225 Q264.465 342.225 262.59 342.642 Q260.738 343.059 258.793 343.938 L258.793 326.577 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 329.656 Q295.298 329.656 293.469 333.221 Q291.664 336.763 291.664 343.892 Q291.664 350.999 293.469 354.563 Q295.298 358.105 298.909 358.105 Q302.543 358.105 304.349 354.563 Q306.177 350.999 306.177 343.892 Q306.177 336.763 304.349 333.221 Q302.543 329.656 298.909 329.656 M298.909 325.952 Q304.719 325.952 307.775 330.559 Q310.853 335.142 310.853 343.892 Q310.853 352.619 307.775 357.225 Q304.719 361.809 298.909 361.809 Q293.099 361.809 290.02 357.225 Q286.964 352.619 286.964 343.892 Q286.964 335.142 290.02 330.559 Q293.099 325.952 298.909 325.952 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip832)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1028.84 400.199,920.077 400.786,942.72 401.372,843.171 401.958,757.898 402.545,677.677 403.131,602.823 403.718,536.234 404.304,571.245 404.891,511.802 405.477,538.581 406.063,482.818 406.65,432.399 407.236,388.487 407.823,347.643 408.409,373.742 408.995,338.65 409.582,307.516 410.168,280.831 410.755,256.813 411.341,237.783 411.927,219.895 412.514,286.063 413.1,269.15 413.687,255.768 414.273,243.983 414.86,234.528 415.446,227.988 416.032,225.551 416.619,222.746 417.205,246.016 417.792,269.837 418.378,269.581 418.964,271.645 419.551,312.766 420.137,332.896 420.724,351.696 421.31,355.966 421.896,375.297 422.483,380.331 423.069,385.217 423.656,416.592 424.242,434.083 424.829,474.045 425.415,480.922 426.001,487.983 426.588,515.078 427.174,532.078 427.761,547.72 428.347,563.791 428.933,579.078 429.52,601.695 430.106,616.017 430.693,650.945 431.279,665.222 431.865,672.687 432.452,680.964 433.038,689.084 433.625,702.717 434.211,710.843 434.798,718.516 435.384,742.178 435.97,755.1 436.557,763.175 437.143,770.991 437.73,791.979 438.316,803.234 438.902,818.539 439.489,829.153 440.075,839.707 440.662,849.97 441.248,860.132 441.835,866.695 442.421,879.708 443.007,886.031 443.594,898.697 444.18,908.243 444.767,920.174 445.353,931.894 445.939,937.399 446.526,946.418 447.112,952.165 447.699,963.384 448.285,976.466 448.871,986.601 449.458,991.369 450.044,1001.27 450.631,1008.24 451.217,1014.92 451.804,1028.4 452.39,1034.51 452.976,1038.59 453.563,1042.82 454.149,1051.18 454.736,1061.21 455.322,1069.05 455.908,1074.46 456.495,1081.95 457.081,1091.06 457.668,1104.21 458.254,1112.41 458.84,1120.18 459.427,1123.85 460.013,1125.28 460.6,1129.01 461.186,1132.51 461.773,1137.98 462.359,1139.69 462.945,1144.77 463.532,1144.27 464.118,1153.08 464.705,1154.7 465.291,1159.34 465.877,1163.94 466.464,1169.76 467.05,1169.02 467.637,1166.52 468.223,1167.64 468.809,1172.29 469.396,1173.14 469.982,1174 470.569,1174.96 471.155,1175.98 471.742,1178.62 472.328,1181.51 472.914,1187.47 473.501,1189.85 474.087,1190.58 474.674,1192.94 475.26,1193.88 475.846,1196.27 476.433,1199.92 477.019,1203.76 477.606,1204.31 478.192,1207.91 478.778,1209.64 479.365,1217.44 479.951,1217.48 480.538,1215.84 481.124,1218.79 481.711,1222.04 482.297,1221.82 482.883,1224.84 483.47,1230.61 484.056,1228.6 484.643,1228.08 485.229,1230.8 485.815,1233.13 486.402,1233.93 486.988,1233.46 487.575,1237.36 488.161,1236.61 488.748,1238.74 489.334,1240.81 489.92,1245.51 490.507,1242.7 491.093,1241.84 491.68,1242.33 492.266,1240.02 492.852,1243.37 493.439,1241.28 494.025,1241.94 494.612,1243.84 495.198,1244.3 495.784,1247.61 496.371,1246.75 496.957,1248.36 497.544,1245.75 498.13,1243.13 498.717,1242.09 499.303,1242.87 499.889,1245.07 500.476,1245.67 501.062,1247.74 501.649,1244.17 502.235,1244.66 502.821,1245.52 503.408,1244.77 503.994,1242.53 504.581,1241.73 505.167,1243.84 505.753,1243.04 506.34,1243.73 506.926,1245.86 507.513,1244.87 508.099,1244.17 508.686,1242.16 509.272,1240.14 509.858,1239.61 510.445,1240.64 511.031,1239.96 511.618,1239.7 512.204,1239.09 512.79,1240.08 513.377,1240.85 513.963,1241.63 514.55,1243.58 515.136,1247.1 515.722,1248.81 516.309,1248.23 516.895,1247.49 517.482,1245.22 518.068,1243.05 518.655,1244.98 519.241,1248.37 519.827,1250.53 520.414,1249.62 521,1248.76 521.587,1246.66 522.173,1245.62 522.759,1246.32 523.346,1246.85 523.932,1244.51 524.519,1246.49 525.105,1247.27 525.691,1247.74 526.278,1249.4 526.864,1249.98 527.451,1248.74 528.037,1246.49 528.624,1244.1 529.21,1242.06 529.796,1242.88 530.383,1240.86 530.969,1238.92 531.556,1236.91 532.142,1235.25 532.728,1236.44 533.315,1235.97 533.901,1237.3 534.488,1238.38 535.074,1237.94 535.661,1236.2 536.247,1235.69 536.833,1232.44 537.42,1233.78 538.006,1235.05 538.593,1234.75 539.179,1235.85 539.765,1234.07 540.352,1232.57 540.938,1232.11 541.525,1233.06 542.111,1235.41 542.697,1235.16 543.284,1237.4 543.87,1240.89 544.457,1241.5 545.043,1242.23 545.63,1240.33 546.216,1240.94 546.802,1239.19 547.389,1240.08 547.975,1238.08 548.562,1240.41 549.148,1235.91 549.734,1234.29 550.321,1234.03 550.907,1235.05 551.494,1236.01 552.08,1235.72 552.666,1234.03 553.253,1233.61 553.839,1229.22 554.426,1226.56 555.012,1226.68 555.599,1229.5 556.185,1232.1 556.771,1233.44 557.358,1235.66 557.944,1235.28 558.531,1235.18 559.117,1237.49 559.703,1236.78 560.29,1237.6 560.876,1234.52 561.463,1235.55 562.049,1232.78 562.635,1233.84 563.222,1230.83 563.808,1230.4 564.395,1231.62 564.981,1232.51 565.568,1232.33 566.154,1232.14 566.74,1231.71 567.327,1231.28 567.913,1232.33 568.5,1231.89 569.086,1233.05 569.672,1232.73 570.259,1232.33 570.845,1232.05 571.432,1231.49 572.018,1229.9 572.605,1232.37 573.191,1233.08 573.777,1233.93 574.364,1232.03 574.95,1231.9 575.537,1232.8 576.123,1231.16 576.709,1233.82 577.296,1233.4 577.882,1231.67 578.469,1228.49 579.055,1228.36 579.641,1228.27 580.228,1231.08 580.814,1229.49 581.401,1227.78 581.987,1226.28 582.574,1227.4 583.16,1227.35 583.746,1226.01 584.333,1228.88 584.919,1229.85 585.506,1231.03 586.092,1230.61 586.678,1231.85 587.265,1230.27 587.851,1227.58 588.438,1224.52 589.024,1224.73 589.61,1224.8 590.197,1224.81 590.783,1224.9 591.37,1224.96 591.956,1226.33 592.543,1226.09 593.129,1227.17 593.715,1229.65 594.302,1227.88 594.888,1227.61 595.475,1228.59 596.061,1228.57 596.647,1228.44 597.234,1229.64 597.82,1226.79 598.407,1225.09 598.993,1226.6 599.579,1224.83 600.166,1224.89 600.752,1226.01 601.339,1225.72 601.925,1226.87 602.512,1227.98 603.098,1225.37 603.684,1225.18 604.271,1227.45 604.857,1225.74 605.444,1224.07 606.03,1222.92 606.616,1221.7 607.203,1223.19 607.789,1220.66 608.376,1222.2 608.962,1223.64 609.548,1227.7 610.135,1228.76 610.721,1228.35 611.308,1228.05 611.894,1228.06 612.481,1226.75 613.067,1226.58 613.653,1224.87 614.24,1226.11 614.826,1229.9 615.413,1227.04 615.999,1226.78 616.585,1229.18 617.172,1230.37 617.758,1227.33 618.345,1226.78 618.931,1226.45 619.518,1226.31 620.104,1222.14 620.69,1220.88 621.277,1222.23 621.863,1223.64 622.45,1224.69 623.036,1224.61 623.622,1224.52 624.209,1224.39 624.795,1225.51 625.382,1225.4 625.968,1226.38 626.554,1225.93 627.141,1221.67 627.727,1223.15 628.314,1222.81 628.9,1222.89 629.487,1222.94 630.073,1223.06 630.659,1224.21 631.246,1221.53 631.832,1224.14 632.419,1223.87 633.005,1226.26 633.591,1228.43 634.178,1229.78 634.764,1230.77 635.351,1230.52 635.937,1232.72 636.523,1232.14 637.11,1226.06 637.696,1229.64 638.283,1228.09 638.869,1228.72 639.456,1228.17 640.042,1227.64 640.628,1227.28 641.215,1225.81 641.801,1225.61 642.388,1226.94 642.974,1227.6 643.56,1227.22 644.147,1226.87 644.733,1227.76 645.32,1230.15 645.906,1227.21 646.492,1225.63 647.079,1223.88 647.665,1225.05 648.252,1224.67 648.838,1224.31 649.425,1226.6 650.011,1225.86 650.597,1223.91 651.184,1225.93 651.77,1225.64 652.357,1225.11 652.943,1223.64 653.529,1224.77 654.116,1224.45 654.702,1224.12 655.289,1224.03 655.875,1225.18 656.462,1224.97 657.048,1225.75 657.634,1228.01 658.221,1224.63 658.807,1225.38 659.394,1229.91 659.98,1230.77 660.566,1231.5 661.153,1229.83 661.739,1233.31 662.326,1235.01 662.912,1235.3 663.498,1233.13 664.085,1233.86 664.671,1229.17 665.258,1223.12 665.844,1224.04 666.431,1222.39 667.017,1223.14 667.603,1224.1 668.19,1222.18 668.776,1220.6 669.363,1217.68 669.949,1219.06 670.535,1216.21 671.122,1216.57 671.708,1220.45 672.295,1221.9 672.881,1225.71 673.467,1222.54 674.054,1222.4 674.64,1224.73 675.227,1224.32 675.813,1222.69 676.4,1223.79 676.986,1223.48 677.572,1223.16 678.159,1221.8 678.745,1221.59 679.332,1221.15 679.918,1219.76 680.504,1219.45 681.091,1221.91 681.677,1218.83 682.264,1218.83 682.85,1218.69 683.436,1221.36 684.023,1221.16 684.609,1221.16 685.196,1223.46 685.782,1222.02 686.369,1221.56 686.955,1221.25 687.541,1222.6 688.128,1220.98 688.714,1222.2 689.301,1222.11 689.887,1223.29 690.473,1218.93 691.06,1216.25 691.646,1215.01 692.233,1212.38 692.819,1212.34 693.405,1215.41 693.992,1215.53 694.578,1217.03 695.165,1216.87 695.751,1215.73 696.338,1217.23 696.924,1216.15 697.51,1213.51 698.097,1216.53 698.683,1220.56 699.27,1220.65 699.856,1219.16 700.442,1220.31 701.029,1220.03 701.615,1219.77 702.202,1219.78 702.788,1219.76 703.375,1220.86 703.961,1221 704.547,1223.48 705.134,1222.02 705.72,1220.61 706.307,1223.31 706.893,1224.21 707.479,1222.41 708.066,1223.49 708.652,1221.71 709.239,1221.71 709.825,1220.09 710.411,1218.63 710.998,1217.24 711.584,1215.67 712.171,1218.59 712.757,1218.74 713.344,1218.82 713.93,1217.32 714.516,1216.11 715.103,1216.36 715.689,1216.18 716.276,1216.59 716.862,1216.77 717.448,1219.35 718.035,1223.27 718.621,1224.16 719.208,1223.68 719.794,1222.9 720.38,1225.27 720.967,1222.08 721.553,1221.46 722.14,1219.99 722.726,1218.38 723.313,1216.99 723.899,1219.31 724.485,1218.86 725.072,1217.29 725.658,1218.45 726.245,1218.46 726.831,1216.99 727.417,1217.02 728.004,1215.64 728.59,1216.93 729.177,1215.43 729.763,1215.27 730.349,1215.57 730.936,1216.96 731.522,1216.88 732.109,1215.67 732.695,1216.95 733.282,1217.03 733.868,1218.49 734.454,1217.2 735.041,1217.09 735.627,1219.68 736.214,1224.94 736.8,1223.45 737.386,1221.77 737.973,1222.85 738.559,1219.65 739.146,1219.27 739.732,1218.91 740.318,1218.8 740.905,1218.72 741.491,1218.78 742.078,1217.01 742.664,1216.61 743.251,1216.19 743.837,1216.03 744.423,1216.05 745.01,1216.06 745.596,1210.74 746.183,1213.56 746.769,1215.07 747.355,1213.73 747.942,1213.55 748.528,1212.2 749.115,1212.35 749.701,1215.02 750.288,1215 750.874,1213.98 751.46,1212.81 752.047,1212.71 752.633,1212.7 753.22,1212.8 753.806,1211.61 754.392,1208.03 754.979,1212.48 755.565,1214.23 756.152,1214.21 756.738,1216.84 757.324,1216.75 757.911,1215.33 758.497,1215.63 759.084,1215.67 759.67,1214.59 760.257,1214.91 760.843,1214.98 761.429,1215.24 762.016,1211.42 762.602,1213.14 763.189,1214.69 763.775,1215.95 764.361,1216.03 764.948,1217.62 765.534,1217.97 766.121,1216.49 766.707,1216.31 767.293,1217.66 767.88,1217.32 768.466,1217.36 769.053,1217.52 769.639,1216 770.226,1217.04 770.812,1217.43 771.398,1217.39 771.985,1220.05 772.571,1221.2 773.158,1219.51 773.744,1217.88 774.33,1216.58 774.917,1215.3 775.503,1216.63 776.09,1216.54 776.676,1217.73 777.262,1218.85 777.849,1219.79 778.435,1217.02 779.022,1216.9 779.608,1216.45 780.195,1216.42 780.781,1216.19 781.367,1213.32 781.954,1214.23 782.54,1214.1 783.127,1210.21 783.713,1209.36 784.299,1209.67 784.886,1212.69 785.472,1211.47 786.059,1211.93 786.645,1211.99 787.232,1212.43 787.818,1210.07 788.404,1211.58 788.991,1210.5 789.577,1209.59 790.164,1212.5 790.75,1211.38 791.336,1211.67 791.923,1209.2 792.509,1209.61 793.096,1208.69 793.682,1207.91 794.268,1207.13 794.855,1206.09 795.441,1205.59 796.028,1207.51 796.614,1207.86 797.201,1209.55 797.787,1209.79 798.373,1212.91 798.96,1214.36 799.546,1215.64 800.133,1215.57 800.719,1218.32 801.305,1218.21 801.892,1218.03 802.478,1213.95 803.065,1212.56 803.651,1214.06 804.237,1213.96 804.824,1213.79 805.41,1212.7 805.997,1211.59 806.583,1212.91 807.17,1210.14 807.756,1213.13 808.342,1212.03 808.929,1211.98 809.515,1213.44 810.102,1212.25 810.688,1213.63 811.274,1214.9 811.861,1213.66 812.447,1215.26 813.034,1215.17 813.62,1215.16 814.206,1216.09 814.793,1217.33 815.379,1217.17 815.966,1218.6 816.552,1218.35 817.139,1216.73 817.725,1219.21 818.311,1215.18 818.898,1215.18 819.484,1213.79 820.071,1215.03 820.657,1213.72 821.243,1213.85 821.83,1213.91 822.416,1215.03 823.003,1216.28 823.589,1220.19 824.175,1221.31 824.762,1225.17 825.348,1224.43 825.935,1225.31 826.521,1225.85 827.108,1226.57 827.694,1222 828.28,1222.86 828.867,1220.98 829.453,1220.6 830.04,1221.71 830.626,1221.25 831.212,1220.73 831.799,1220.53 832.385,1219.92 832.972,1219.78 833.558,1221.52 834.145,1218.59 834.731,1215.63 835.317,1215.41 835.904,1211.68 836.49,1211.58 837.077,1211.87 837.663,1210.57 838.249,1210.6 838.836,1213.41 839.422,1213.31 840.009,1214.4 840.595,1217.03 841.181,1215.47 841.768,1215.36 842.354,1212.63 842.941,1213.09 843.527,1210.61 844.114,1212.04 844.7,1210.85 845.286,1213.42 845.873,1213.4 846.459,1214.82 847.046,1217.22 847.632,1214.29 848.218,1214.51 848.805,1217.15 849.391,1216.94 849.978,1216.82 850.564,1216.79 851.15,1216.87 851.737,1216.67 852.323,1218 852.91,1217.74 853.496,1215.92 854.083,1217.01 854.669,1218.18 855.255,1220.72 855.842,1220.37 856.428,1218.51 857.015,1218.26 857.601,1219.38 858.187,1217.82 858.774,1216.19 859.36,1217.22 859.947,1218.01 860.533,1216.69 861.119,1216.48 861.706,1216.32 862.292,1217.66 862.879,1213.62 863.465,1216.37 864.052,1217.71 864.638,1217.52 865.224,1215.9 865.811,1216.94 866.397,1219.03 866.984,1218.74 867.57,1219.94 868.156,1218.15 868.743,1216.71 869.329,1216.5 869.916,1216.11 870.502,1217.36 871.089,1218.36 871.675,1218.16 872.261,1215.45 872.848,1217.84 873.434,1216.04 874.021,1217.17 874.607,1218.29 875.193,1219.21 875.78,1218.97 876.366,1218.76 876.953,1214.46 877.539,1213.05 878.125,1214.42 878.712,1213.06 879.298,1213.32 879.885,1213.49 880.471,1212.65 881.058,1211.35 881.644,1210.23 882.23,1210.48 882.817,1206.74 883.403,1207.1 883.99,1206.27 884.576,1206.48 885.162,1204.15 885.749,1199.2 886.335,1199.8 886.922,1200.47 887.508,1200.87 888.094,1200.39 888.681,1203.5 889.267,1201.39 889.854,1201.81 890.44,1202.37 891.027,1201.63 891.613,1202.26 892.199,1204.3 892.786,1205.08 893.372,1207.01 893.959,1207.3 894.545,1207.69 895.131,1207.75 895.718,1206.93 896.304,1208.51 896.891,1207.16 897.477,1207.52 898.063,1207.99 898.65,1208.39 899.236,1208.48 899.823,1207.38 900.409,1208.97 900.996,1210.72 901.582,1210.77 902.168,1211.01 902.755,1209.86 903.341,1208.86 903.928,1206.52 904.514,1209.45 905.1,1209.26 905.687,1208.28 906.273,1211.22 906.86,1208.92 907.446,1210.48 908.032,1210.73 908.619,1209.81 909.205,1209.98 909.792,1210.21 910.378,1210.35 910.965,1209.31 911.551,1212.34 912.137,1212.46 912.724,1212.72 913.31,1214.15 913.897,1214.19 914.483,1215.32 915.069,1216.21 915.656,1218.52 916.242,1219.72 916.829,1219.39 917.415,1223.01 918.002,1222.45 918.588,1219.48 919.174,1217.83 919.761,1218.74 920.347,1217.01 920.934,1216.99 921.52,1218.08 922.106,1215.35 922.693,1212.87 923.279,1211.62 923.866,1214.24 924.452,1214.35 925.038,1214.28 925.625,1214.14 926.211,1212.97 926.798,1212.77 927.384,1212.67 927.971,1212.46 928.557,1212.28 929.143,1210.7 929.73,1206.59 930.316,1205.63 930.903,1204.5 931.489,1204.87 932.075,1205.36 932.662,1208.11 933.248,1208.56 933.835,1208.96 934.421,1207.72 935.007,1206.81 935.594,1207.41 936.18,1207.92 936.767,1208.15 937.353,1212.36 937.94,1213.74 938.526,1213.82 939.112,1213.76 939.699,1216.4 940.285,1214.83 940.872,1214.86 941.458,1217.18 942.044,1215.41 942.631,1216.89 943.217,1219.27 943.804,1217.51 944.39,1218.47 944.976,1218.07 945.563,1216.58 946.149,1216.23 946.736,1215.87 947.322,1215.6 947.909,1216.94 948.495,1216.79 949.081,1215.36 949.668,1215.38 950.254,1216.51 950.841,1217.81 951.427,1216.22 952.013,1215.87 952.6,1217.29 953.186,1218.67 953.773,1218.42 954.359,1218.06 954.945,1219.38 955.532,1216.33 956.118,1217.6 956.705,1217.19 957.291,1219.39 957.878,1218.93 958.464,1219.69 959.05,1216.52 959.637,1214.7 960.223,1215.62 960.81,1215.35 961.396,1213.74 961.982,1213.48 962.569,1216.09 963.155,1214.51 963.742,1218.42 964.328,1216.78 964.915,1216.48 965.501,1216.48 966.087,1213.79 966.674,1213.53 967.26,1210.56 967.847,1210.72 968.433,1210.93 969.019,1213.65 969.606,1213.64 970.192,1213.7 970.779,1215.06 971.365,1216.19 971.951,1214.71 972.538,1217.36 973.124,1217.05 973.711,1216.58 974.297,1213.71 974.884,1213.42 975.47,1213.38 976.056,1215.83 976.643,1216.94 977.229,1215.27 977.816,1215.14 978.402,1210.99 978.988,1212.23 979.575,1209.72 980.161,1210.99 980.748,1209.82 981.334,1207.35 981.92,1208.91 982.507,1207.81 983.093,1208.13 983.68,1210.9 984.266,1209.5 984.853,1209.73 985.439,1207.23 986.025,1209.06 986.612,1209.05 987.198,1206.8 987.785,1203.14 988.371,1202.46 988.957,1202.51 989.544,1201.66 990.13,1203.65 990.717,1202.69 991.303,1204.48 991.889,1203.76 992.476,1203.24 993.062,1205.2 993.649,1205.48 994.235,1204.46 994.822,1202.38 995.408,1200.41 995.994,1202.43 996.581,1205.42 997.167,1207.39 997.754,1204.92 998.34,1205.29 998.926,1208.21 999.513,1207.02 1000.1,1209.98 1000.69,1210.06 1001.27,1210 1001.86,1210.13 1002.44,1208.93 1003.03,1207.8 1003.62,1206.78 1004.2,1205.76 1004.79,1206.03 1005.38,1209.11 1005.96,1209.28 1006.55,1209.36 1007.14,1208.32 1007.72,1209.88 1008.31,1214.08 1008.9,1214 1009.48,1215.4 1010.07,1216.3 1010.65,1214.82 1011.24,1213.28 1011.83,1214.75 1012.41,1214.8 1013,1215.91 1013.59,1213.48 1014.17,1212.15 1014.76,1212.01 1015.35,1212.08 1015.93,1217.36 1016.52,1216.91 1017.11,1216.72 1017.69,1213.99 1018.28,1215.53 1018.86,1214.01 1019.45,1214.11 1020.04,1215.34 1020.62,1215.26 1021.21,1211.08 1021.8,1209.84 1022.38,1211.14 1022.97,1211.16 1023.56,1209.56 1024.14,1210.9 1024.73,1208.38 1025.32,1208.79 1025.9,1210.27 1026.49,1211.79 1027.07,1210.44 1027.66,1213.27 1028.25,1211.68 1028.83,1208.96 1029.42,1207.87 1030.01,1205.88 1030.59,1207.41 1031.18,1207.62 1031.77,1209.29 1032.35,1209.36 1032.94,1208.29 1033.52,1209.89 1034.11,1208.88 1034.7,1207.82 1035.28,1208.3 1035.87,1205.96 1036.46,1206.18 1037.04,1206.52 1037.63,1209.69 1038.22,1210.02 1038.8,1210.2 1039.39,1210.42 1039.98,1210.39 1040.56,1213.18 1041.15,1209.1 1041.73,1206.47 1042.32,1206.78 1042.91,1209.8 1043.49,1212.6 1044.08,1213.76 1044.67,1213.85 1045.25,1216.25 1045.84,1219.62 1046.43,1222.13 1047.01,1218.92 1047.6,1222.17 1048.19,1221.49 1048.77,1220.93 1049.36,1222.15 1049.94,1220.41 1050.53,1220.24 1051.12,1218.38 1051.7,1215.37 1052.29,1217.91 1052.88,1217.38 1053.46,1219.55 1054.05,1220.48 1054.64,1220.14 1055.22,1224.9 1055.81,1222.83 1056.39,1219.79 1056.98,1217.86 1057.57,1216.24 1058.15,1213.06 1058.74,1213.14 1059.33,1213.03 1059.91,1212.74 1060.5,1210.25 1061.09,1211.74 1061.67,1214.39 1062.26,1215.38 1062.85,1213.9 1063.43,1211.2 1064.02,1208.65 1064.6,1212.67 1065.19,1209.9 1065.78,1209.03 1066.36,1211.79 1066.95,1210.68 1067.54,1210.99 1068.12,1212.23 1068.71,1212.14 1069.3,1210.98 1069.88,1215.05 1070.47,1210.93 1071.06,1210.9 1071.64,1211.37 1072.23,1212.72 1072.81,1211.18 1073.4,1212.74 1073.99,1212.81 1074.57,1214.19 1075.16,1213.86 1075.75,1216.4 1076.33,1216.57 1076.92,1217.53 1077.51,1216.93 1078.09,1211.58 1078.68,1211.79 1079.26,1211.8 1079.85,1211.82 1080.44,1213.12 1081.02,1214.31 1081.61,1215.65 1082.2,1212.59 1082.78,1213.92 1083.37,1213.77 1083.96,1211.07 1084.54,1211.28 1085.13,1212.8 1085.72,1213.88 1086.3,1212.46 1086.89,1210.92 1087.47,1213.63 1088.06,1214.73 1088.65,1214.49 1089.23,1214.36 1089.82,1213.73 1090.41,1212.34 1090.99,1212.4 1091.58,1212.56 1092.17,1215.38 1092.75,1215 1093.34,1214.74 1093.93,1214.91 1094.51,1217.52 1095.1,1216.99 1095.68,1217.85 1096.27,1218.72 1096.86,1217.11 1097.44,1215.53 1098.03,1216.65 1098.62,1217.47 1099.2,1215.59 1099.79,1216.54 1100.38,1217.5 1100.96,1218.5 1101.55,1217.71 1102.14,1215.95 1102.72,1214.57 1103.31,1209.17 1103.89,1207.85 1104.48,1206.92 1105.07,1204.57 1105.65,1206.13 1106.24,1205.43 1106.83,1207.22 1107.41,1208.71 1108,1207.76 1108.59,1209.25 1109.17,1210.73 1109.76,1208.17 1110.34,1208.18 1110.93,1208.23 1111.52,1208.67 1112.1,1207.66 1112.69,1208.13 1113.28,1211 1113.86,1209.65 1114.45,1209.92 1115.04,1210 1115.62,1209.96 1116.21,1209.72 1116.8,1210.8 1117.38,1211.12 1117.97,1215.25 1118.55,1214.88 1119.14,1214.84 1119.73,1215.98 1120.31,1216.17 1120.9,1218.46 1121.49,1219.27 1122.07,1219.04 1122.66,1218.86 1123.25,1219.65 1123.83,1219.43 1124.42,1224.28 1125.01,1224.94 1125.59,1223.09 1126.18,1223.83 1126.76,1224.54 1127.35,1221.25 1127.94,1219.19 1128.52,1220.09 1129.11,1218.61 1129.7,1219.89 1130.28,1219.58 1130.87,1220.74 1131.46,1221.86 1132.04,1220 1132.63,1219.31 1133.21,1221.34 1133.8,1218.56 1134.39,1216.58 1134.97,1213.82 1135.56,1215.19 1136.15,1214.88 1136.73,1213.02 1137.32,1215.57 1137.91,1217.98 1138.49,1218.87 1139.08,1215.92 1139.67,1214.53 1140.25,1214.32 1140.84,1215.65 1141.42,1213.97 1142.01,1212.43 1142.6,1210.9 1143.18,1210.89 1143.77,1211.01 1144.36,1212.06 1144.94,1210.71 1145.53,1213.26 1146.12,1213.05 1146.7,1211.9 1147.29,1211.93 1147.88,1210.59 1148.46,1209.39 1149.05,1209.17 1149.63,1208.04 1150.22,1209.37 1150.81,1209.5 1151.39,1212.41 1151.98,1212.29 1152.57,1213.58 1153.15,1213.63 1153.74,1212.02 1154.33,1210.69 1154.91,1210.62 1155.5,1213.46 1156.09,1216.14 1156.67,1215.9 1157.26,1217.1 1157.84,1215.58 1158.43,1212.65 1159.02,1215.21 1159.6,1213.75 1160.19,1214.87 1160.78,1215.05 1161.36,1213.58 1161.95,1213.58 1162.54,1212.13 1163.12,1210.94 1163.71,1208.19 1164.29,1208.29 1164.88,1205.82 1165.47,1204.95 1166.05,1207.93 1166.64,1206.97 1167.23,1208.55 1167.81,1209.99 1168.4,1211.44 1168.99,1211.9 1169.57,1210.65 1170.16,1208 1170.75,1206.54 1171.33,1205.37 1171.92,1204.29 1172.5,1206.07 1173.09,1204.8 1173.68,1204.02 1174.26,1205.83 1174.85,1206.1 1175.44,1207.48 1176.02,1203.65 1176.61,1204.2 1177.2,1203.22 1177.78,1203.9 1178.37,1201.7 1178.96,1206.22 1179.54,1206.69 1180.13,1207.08 1180.71,1208.79 1181.3,1208.67 1181.89,1208.77 1182.47,1212.78 1183.06,1213.65 1183.65,1213.3 1184.23,1215.97 1184.82,1214.59 1185.41,1209.25 1185.99,1207.01 1186.58,1206.13 1187.16,1206.47 1187.75,1206.88 1188.34,1209.5 1188.92,1208.32 1189.51,1207.1 1190.1,1207.75 1190.68,1207.74 1191.27,1205.31 1191.86,1205.61 1192.44,1204.48 1193.03,1204.89 1193.62,1202.51 1194.2,1204.27 1194.79,1203.74 1195.37,1208.36 1195.96,1211.27 1196.55,1212.49 1197.13,1212.56 1197.72,1213.75 1198.31,1213.63 1198.89,1212 1199.48,1210.76 1200.07,1209.53 1200.65,1208.37 1201.24,1212.45 1201.83,1213.88 1202.41,1214.45 1203,1216.92 1203.58,1221.81 1204.17,1221.2 1204.76,1221.87 1205.34,1215.02 1205.93,1213.37 1206.52,1215.87 1207.1,1214.16 1207.69,1216.83 1208.28,1217.68 1208.86,1217.24 1209.45,1215.61 1210.03,1215.45 1210.62,1216.54 1211.21,1213.72 1211.79,1213.45 1212.38,1213.69 1212.97,1216.43 1213.55,1216.23 1214.14,1214.48 1214.73,1214.06 1215.31,1212.3 1215.9,1216.35 1216.49,1219.92 1217.07,1217.97 1217.66,1216.42 1218.24,1217.11 1218.83,1217.08 1219.42,1214.09 1220,1212.74 1220.59,1212.55 1221.18,1209.73 1221.76,1208.45 1222.35,1208.77 1222.94,1208.94 1223.52,1207.75 1224.11,1209.21 1224.7,1209.44 1225.28,1209.72 1225.87,1212.49 1226.45,1210.32 1227.04,1213.13 1227.63,1213.19 1228.21,1215.78 1228.8,1213 1229.39,1214.01 1229.97,1215.15 1230.56,1216.42 1231.15,1216.2 1231.73,1213.38 1232.32,1213.43 1232.91,1211.92 1233.49,1215.16 1234.08,1215.05 1234.66,1216.06 1235.25,1214.6 1235.84,1210.47 1236.42,1211.88 1237.01,1211.84 1237.6,1213.11 1238.18,1214.45 1238.77,1214.36 1239.36,1215.8 1239.94,1216.71 1240.53,1213.6 1241.11,1213.58 1241.7,1212.34 1242.29,1215.1 1242.87,1213.58 1243.46,1215.02 1244.05,1212.19 1244.63,1205.6 1245.22,1204.46 1245.81,1205.96 1246.39,1206.34 1246.98,1208.26 1247.57,1209.86 1248.15,1210.06 1248.74,1212.73 1249.32,1215.09 1249.91,1213.66 1250.5,1213.67 1251.08,1213.56 1251.67,1213.46 1252.26,1214.7 1252.84,1217.09 1253.43,1218.1 1254.02,1215 1254.6,1216.1 1255.19,1213.41 1255.78,1213.25 1256.36,1210.72 1256.95,1210.48 1257.53,1210.34 1258.12,1206.79 1258.71,1207.17 1259.29,1207.39 1259.88,1205.21 1260.47,1205.28 1261.05,1205.69 1261.64,1205.78 1262.23,1206.17 1262.81,1206.6 1263.4,1205.65 1263.98,1208.4 1264.57,1209.92 1265.16,1210.35 1265.74,1209.16 1266.33,1209.38 1266.92,1209.61 1267.5,1211.24 1268.09,1206.22 1268.68,1208.05 1269.26,1206.95 1269.85,1204.74 1270.44,1203.86 1271.02,1203.23 1271.61,1206.3 1272.19,1206.5 1272.78,1205.31 1273.37,1208.11 1273.95,1207.88 1274.54,1210.66 1275.13,1208.22 1275.71,1207.27 1276.3,1206.2 1276.89,1203.92 1277.47,1204.63 1278.06,1207.66 1278.65,1209.13 1279.23,1209.26 1279.82,1209.46 1280.4,1212.06 1280.99,1213.19 1281.58,1211.65 1282.16,1214 1282.75,1211.18 1283.34,1212.93 1283.92,1214.07 1284.51,1211.51 1285.1,1211.78 1285.68,1211.75 1286.27,1213.36 1286.86,1214.74 1287.44,1214.53 1288.03,1213.32 1288.61,1213.38 1289.2,1212 1289.79,1214.51 1290.37,1215.61 1290.96,1219.29 1291.55,1217.49 1292.13,1217.2 1292.72,1217.04 1293.31,1213.99 1293.89,1209.83 1294.48,1208.71 1295.06,1208.96 1295.65,1209.23 1296.24,1209.29 1296.82,1206.54 1297.41,1206.76 1298,1208.07 1298.58,1205.35 1299.17,1205.64 1299.76,1206.24 1300.34,1206.63 1300.93,1206.98 1301.52,1207.34 1302.1,1206.31 1302.69,1207.8 1303.27,1206.56 1303.86,1209.31 1304.45,1208.16 1305.03,1208.3 1305.62,1207.67 1306.21,1207.74 1306.79,1206.87 1307.38,1208.59 1307.97,1206.36 1308.55,1208.13 1309.14,1209.69 1309.73,1208.64 1310.31,1210.42 1310.9,1209.01 1311.48,1211.74 1312.07,1214.49 1312.66,1214.26 1313.24,1215.34 1313.83,1216.35 1314.42,1213.64 1315,1216.25 1315.59,1215.02 1316.18,1213.37 1316.76,1212.08 1317.35,1209.6 1317.93,1208.34 1318.52,1207.37 1319.11,1210.45 1319.69,1213.15 1320.28,1213.16 1320.87,1215.71 1321.45,1211.52 1322.04,1210.17 1322.63,1211.63 1323.21,1214.15 1323.8,1216.74 1324.39,1216.3 1324.97,1216.15 1325.56,1217.59 1326.14,1217.36 1326.73,1215.78 1327.32,1215.45 1327.9,1214.33 1328.49,1212.82 1329.08,1217.87 1329.66,1217.57 1330.25,1218.56 1330.84,1215.34 1331.42,1216.55 1332.01,1212.38 1332.6,1213.49 1333.18,1214.54 1333.77,1214.45 1334.35,1214.31 1334.94,1208.68 1335.53,1210.16 1336.11,1210.47 1336.7,1207.83 1337.29,1207.73 1337.87,1209.07 1338.46,1212.79 1339.05,1211.66 1339.63,1211.61 1340.22,1208.95 1340.8,1211.67 1341.39,1209.03 1341.98,1207.79 1342.56,1210.63 1343.15,1207.97 1343.74,1210.66 1344.32,1210.61 1344.91,1210.48 1345.5,1210.46 1346.08,1211.88 1346.67,1214.53 1347.26,1213.18 1347.84,1211.59 1348.43,1210.39 1349.01,1210.32 1349.6,1211.56 1350.19,1211.66 1350.77,1210.18 1351.36,1211.74 1351.95,1211.65 1352.53,1212.98 1353.12,1212.65 1353.71,1215.44 1354.29,1215.5 1354.88,1216.71 1355.47,1214.96 1356.05,1213.55 1356.64,1213.51 1357.22,1213.4 1357.81,1210.68 1358.4,1213.35 1358.98,1213.37 1359.57,1216.14 1360.16,1215.91 1360.74,1215.63 1361.33,1215.33 1361.92,1213.73 1362.5,1212.31 1363.09,1209.93 1363.68,1207.28 1364.26,1207.35 1364.85,1207.78 1365.43,1209.09 1366.02,1206.59 1366.61,1210.83 1367.19,1210.76 1367.78,1211.88 1368.37,1211.74 1368.95,1214.4 1369.54,1211.71 1370.13,1210.05 1370.71,1210.15 1371.3,1210.42 1371.88,1214.44 1372.47,1215.62 1373.06,1217.04 1373.64,1216.79 1374.23,1214.1 1374.82,1213.96 1375.4,1212.34 1375.99,1213.56 1376.58,1213.46 1377.16,1214.54 1377.75,1215.78 1378.34,1215.58 1378.92,1218.14 1379.51,1219.14 1380.09,1217.25 1380.68,1216.79 1381.27,1216.34 1381.85,1217.27 1382.44,1215.68 1383.03,1216.92 1383.61,1216.64 1384.2,1217.63 1384.79,1220.1 1385.37,1218.27 1385.96,1217.83 1386.55,1215.89 1387.13,1215.8 1387.72,1215.64 1388.3,1214.05 1388.89,1212.56 1389.48,1212.49 1390.06,1213.55 1390.65,1217.35 1391.24,1218.2 1391.82,1216.62 1392.41,1216.17 1393,1218.48 1393.58,1214.3 1394.17,1211.69 1394.75,1212.92 1395.34,1210.09 1395.93,1210.29 1396.51,1213.36 1397.1,1214.28 1397.69,1215.58 1398.27,1215.37 1398.86,1212.57 1399.45,1211.43 1400.03,1212.81 1400.62,1211.67 1401.21,1211.63 1401.79,1213.07 1402.38,1214.35 1402.96,1213.2 1403.55,1213.13 1404.14,1214.15 1404.72,1214.21 1405.31,1214.35 1405.9,1215.55 1406.48,1215.8 1407.07,1216.96 1407.66,1216.82 1408.24,1217.64 1408.83,1215.58 1409.42,1214.16 1410,1212.74 1410.59,1211.46 1411.17,1210.09 1411.76,1210.24 1412.35,1211.68 1412.93,1211.79 1413.52,1211.73 1414.11,1210.6 1414.69,1206.8 1415.28,1209.76 1415.87,1209.77 1416.45,1212.65 1417.04,1209.65 1417.63,1206.08 1418.21,1206.55 1418.8,1208.14 1419.38,1208.4 1419.97,1207.2 1420.56,1207.24 1421.14,1207.61 1421.73,1207.8 1422.32,1209.01 1422.9,1210.42 1423.49,1210.82 1424.08,1209.77 1424.66,1204.58 1425.25,1206.26 1425.83,1207.89 1426.42,1206.48 1427.01,1208.05 1427.59,1208.38 1428.18,1208.35 1428.77,1208.58 1429.35,1208.66 1429.94,1210.5 1430.53,1210.72 1431.11,1209.43 1431.7,1209.6 1432.29,1204.5 1432.87,1208.87 1433.46,1211.69 1434.04,1212.8 1434.63,1213.95 1435.22,1216.29 1435.8,1218.49 1436.39,1219.3 1436.98,1215.04 1437.56,1216.6 1438.15,1214.94 1438.74,1213.7 1439.32,1212.35 1439.91,1211.02 1440.5,1211.37 1441.08,1212.7 1441.67,1215.07 1442.25,1214.94 1442.84,1217.47 1443.43,1216.03 1444.01,1217.16 1444.6,1215.45 1445.19,1214.17 1445.77,1213.97 1446.36,1211.04 1446.95,1211.17 1447.53,1212.61 1448.12,1210.95 1448.7,1209.48 1449.29,1208.15 1449.88,1206.89 1450.46,1205.72 1451.05,1207.46 1451.64,1206.65 1452.22,1206.54 1452.81,1209.52 1453.4,1206.84 1453.98,1208.33 1454.57,1214.09 1455.16,1213.98 1455.74,1215.3 1456.33,1213.63 1456.91,1216.31 1457.5,1216.22 1458.09,1214.48 1458.67,1215.82 1459.26,1214.37 1459.85,1215.77 1460.43,1219.45 1461.02,1217.56 1461.61,1215.79 1462.19,1215.81 1462.78,1214.34 1463.37,1214.17 1463.95,1210.01 1464.54,1211.33 1465.12,1210.15 1465.71,1211.71 1466.3,1210.25 1466.88,1210.36 1467.47,1207.76 1468.06,1207.82 1468.64,1212.06 1469.23,1213.16 1469.82,1215.79 1470.4,1216.98 1470.99,1215.59 1471.57,1217.92 1472.16,1217.48 1472.75,1217.21 1473.33,1214.71 1473.92,1214.59 1474.51,1215.74 1475.09,1214.04 1475.68,1212.5 1476.27,1212.53 1476.85,1215.18 1477.44,1219.87 1478.03,1220.75 1478.61,1217.72 1479.2,1218.72 1479.78,1219.57 1480.37,1219.25 1480.96,1220.31 1481.54,1219.76 1482.13,1218.15 1482.72,1217.85 1483.3,1220.31 1483.89,1218.54 1484.48,1216.83 1485.06,1215.24 1485.65,1215.18 1486.24,1214.03 1486.82,1212.68 1487.41,1207.57 1487.99,1206.38 1488.58,1207.05 1489.17,1209.94 1489.75,1208.87 1490.34,1209.01 1490.93,1209.28 1491.51,1209.47 1492.1,1208.34 1492.69,1208.43 1493.27,1207.23 1493.86,1210.08 1494.45,1211.52 1495.03,1211.75 1495.62,1211.92 1496.2,1211.96 1496.79,1212.2 1497.38,1211.02 1497.96,1207.43 1498.55,1209.25 1499.14,1210.52 1499.72,1210.49 1500.31,1210.56 1500.9,1212.11 1501.48,1211.88 1502.07,1212.11 1502.65,1212.3 1503.24,1212.25 1503.83,1212.13 1504.41,1211.97 1505,1211.84 1505.59,1213.08 1506.17,1212.82 1506.76,1212.59 1507.35,1213.8 1507.93,1215.3 1508.52,1217.66 1509.11,1218.74 1509.69,1217.35 1510.28,1219.59 1510.86,1220.57 1511.45,1218.72 1512.04,1216.08 1512.62,1218.44 1513.21,1219.31 1513.8,1217.39 1514.38,1215.65 1514.97,1215.39 1515.56,1213.72 1516.14,1211.09 1516.73,1211.05 1517.32,1208.93 1517.9,1207.69 1518.49,1207.7 1519.07,1210.3 1519.66,1209.16 1520.25,1207.79 1520.83,1207.97 1521.42,1209.77 1522.01,1208.9 1522.59,1213.06 1523.18,1212.87 1523.77,1214 1524.35,1209.89 1524.94,1209.99 1525.52,1210.28 1526.11,1213.03 1526.7,1211.52 1527.28,1211.36 1527.87,1209.94 1528.46,1210.28 1529.04,1209.04 1529.63,1213.09 1530.22,1214.46 1530.8,1214.36 1531.39,1210.46 1531.98,1213.38 1532.56,1214.56 1533.15,1215.51 1533.73,1219.33 1534.32,1214.86 1534.91,1213.34 1535.49,1215.92 1536.08,1212.98 1536.67,1210.42 1537.25,1210.33 1537.84,1210.38 1538.43,1207.67 1539.01,1207.9 1539.6,1209.3 1540.19,1210.61 1540.77,1208.11 1541.36,1208.22 1541.94,1205.87 1542.53,1205.87 1543.12,1206.3 1543.7,1202.62 1544.29,1205.6 1544.88,1207.26 1545.46,1208.66 1546.05,1211.74 1546.64,1211.78 1547.22,1213.13 1547.81,1214.45 1548.4,1210.29 1548.98,1207.79 1549.57,1207.05 1550.15,1207.46 1550.74,1205.05 1551.33,1204.05 1551.91,1204.44 1552.5,1206.31 1553.09,1205.37 1553.67,1203.11 1554.26,1203.33 1554.85,1203.67 1555.43,1201.57 1556.02,1200.92 1556.6,1199.95 1557.19,1201.77 1557.78,1202.2 1558.36,1202.83 1558.95,1201.98 1559.54,1203.86 1560.12,1206.7 1560.71,1210.78 1561.3,1211.26 1561.88,1213.91 1562.47,1214 1563.06,1214.1 1563.64,1214.4 1564.23,1215.51 1564.81,1216.61 1565.4,1216.55 1565.99,1216.42 1566.57,1218.56 1567.16,1217.06 1567.75,1217.96 1568.33,1217.58 1568.92,1219.77 1569.51,1218.32 1570.09,1219.4 1570.68,1218.96 1571.27,1217.03 1571.85,1216.61 1572.44,1216.56 1573.02,1215.13 1573.61,1213.54 1574.2,1215.69 1574.78,1214.5 1575.37,1215.96 1575.96,1217.18 1576.54,1215.44 1577.13,1216.37 1577.72,1212.3 1578.3,1210.93 1578.89,1210.62 1579.47,1210.58 1580.06,1209.5 1580.65,1208.1 1581.23,1208.22 1581.82,1208.12 1582.41,1209.53 1582.99,1212.08 1583.58,1208.19 1584.17,1205.9 1584.75,1207.64 1585.34,1206.66 1585.93,1209.59 1586.51,1209.71 1587.1,1211.01 1587.68,1209.55 1588.27,1209.56 1588.86,1212.5 1589.44,1209.86 1590.03,1207.29 1590.62,1206.16 1591.2,1206.68 1591.79,1206.93 1592.38,1205.6 1592.96,1205.71 1593.55,1206.18 1594.14,1207.56 1594.72,1206.32 1595.31,1206.68 1595.89,1207.19 1596.48,1207.31 1597.07,1207.59 1597.65,1209.08 1598.24,1214.13 1598.83,1215.15 1599.41,1216.33 1600,1217.47 1600.59,1214.68 1601.17,1214.55 1601.76,1215.63 1602.34,1215.63 1602.93,1215.29 1603.52,1213.89 1604.1,1215.03 1604.69,1216.46 1605.28,1222.76 1605.86,1220.9 1606.45,1220.34 1607.04,1219.94 1607.62,1219.62 1608.21,1216.2 1608.8,1214.64 1609.38,1213.3 1609.97,1213.08 1610.55,1211.49 1611.14,1212.01 1611.73,1210.65 1612.31,1210.9 1612.9,1212.21 1613.49,1210.93 1614.07,1211.04 1614.66,1214.09 1615.25,1215.16 1615.83,1213.53 1616.42,1214.75 1617.01,1217.26 1617.59,1215.49 1618.18,1215.5 1618.76,1214.96 1619.35,1217.34 1619.94,1214.46 1620.52,1214.37 1621.11,1216.59 1621.7,1217.77 1622.28,1217.67 1622.87,1215.97 1623.46,1211.8 1624.04,1210.48 1624.63,1210.21 1625.22,1210.36 1625.8,1208.91 1626.39,1208.83 1626.97,1206.56 1627.56,1204.08 1628.15,1205.98 1628.73,1207.47 1629.32,1206.63 1629.91,1205.77 1630.49,1207.49 1631.08,1207.55 1631.67,1207.92 1632.25,1208.02 1632.84,1208.38 1633.42,1208.52 1634.01,1211.42 1634.6,1211.43 1635.18,1211.31 1635.77,1213.88 1636.36,1213.74 1636.94,1214.01 1637.53,1217.65 1638.12,1217.36 1638.7,1219.81 1639.29,1220.43 1639.88,1217.33 1640.46,1214.36 1641.05,1214.2 1641.63,1214.27 1642.22,1210.18 1642.81,1208.81 1643.39,1210.46 1643.98,1211.76 1644.57,1213.12 1645.15,1212.95 1645.74,1211.61 1646.33,1210.1 1646.91,1211.72 1647.5,1211.72 1648.09,1211.68 1648.67,1212.83 1649.26,1211.39 1649.84,1215.22 1650.43,1214.91 1651.02,1213.68 1651.6,1213.57 1652.19,1213.39 1652.78,1215.95 1653.36,1217.17 1653.95,1218.19 1654.54,1218.05 1655.12,1217.4 1655.71,1217.08 1656.29,1211.74 1656.88,1211.57 1657.47,1214.38 1658.05,1215.59 1658.64,1215.35 1659.23,1215.23 1659.81,1215.18 1660.4,1217.65 1660.99,1217.5 1661.57,1218.59 1662.16,1216.87 1662.75,1213.97 1663.33,1212.84 1663.92,1211.4 1664.5,1212.6 1665.09,1211.5 1665.68,1215.4 1666.26,1212.59 1666.85,1212.92 1667.44,1214.37 1668.02,1212.98 1668.61,1210.31 1669.2,1210.44 1669.78,1204.18 1670.37,1203.52 1670.96,1203.88 1671.54,1203.18 1672.13,1203.7 1672.71,1204.36 1673.3,1210.28 1673.89,1207.56 1674.47,1205.11 1675.06,1206.65 1675.65,1204.57 1676.23,1203.58 1676.82,1202.92 1677.41,1207.32 1677.99,1208.92 1678.58,1208.96 1679.17,1207.86 1679.75,1207.98 1680.34,1209.2 1680.92,1209.46 1681.51,1208.31 1682.1,1208.54 1682.68,1210.19 1683.27,1209.02 1683.86,1209.19 1684.44,1209.35 1685.03,1209.44 1685.62,1215.26 1686.2,1214.11 1686.79,1212.6 1687.37,1216.47 1687.96,1213.37 1688.55,1214.64 1689.13,1217.1 1689.72,1218.1 1690.31,1216.58 1690.89,1217.55 1691.48,1217.13 1692.07,1215.5 1692.65,1215.37 1693.24,1215.41 1693.83,1215.24 1694.41,1216.51 1695,1216.04 1695.58,1214.58 1696.17,1218.45 1696.76,1218.04 1697.34,1219.04 1697.93,1218.37 1698.52,1214.1 1699.1,1213.98 1699.69,1212.41 1700.28,1212.2 1700.86,1210.91 1701.45,1212.1 1702.04,1212 1702.62,1212.07 1703.21,1212.16 1703.79,1214.71 1704.38,1214.5 1704.97,1215.78 1705.55,1215.5 1706.14,1216.19 1706.73,1217.28 1707.31,1218.41 1707.9,1221.55 1708.49,1219.54 1709.07,1220.19 1709.66,1218.36 1710.24,1217.02 1710.83,1217.1 1711.42,1215.41 1712,1215.12 1712.59,1216.42 1713.18,1214.94 1713.76,1214.81 1714.35,1214.5 1714.94,1216.93 1715.52,1216.92 1716.11,1216.49 1716.7,1215.05 1717.28,1217.6 1717.87,1221.35 1718.45,1222.06 1719.04,1223.14 1719.63,1227.58 1720.21,1226.89 1720.8,1225.98 1721.39,1227.77 1721.97,1225.79 1722.56,1221 1723.15,1219.1 1723.73,1217.42 1724.32,1219.79 1724.91,1216.57 1725.49,1216.06 1726.08,1212.86 1726.66,1208.89 1727.25,1210.38 1727.84,1210.31 1728.42,1207.59 1729.01,1205.37 1729.6,1208.54 1730.18,1210.04 1730.77,1210.05 1731.36,1208.74 1731.94,1207.34 1732.53,1208.64 1733.11,1208.53 1733.7,1206.1 1734.29,1206.58 1734.87,1208.23 1735.46,1206.78 1736.05,1206.07 1736.63,1209.01 1737.22,1208.98 1737.81,1209.17 1738.39,1209.67 1738.98,1209.59 1739.57,1209.67 1740.15,1207.19 1740.74,1207.57 1741.32,1209.24 1741.91,1210.8 1742.5,1206.77 1743.08,1208.4 1743.67,1207.06 1744.26,1204.66 1744.84,1203.6 1745.43,1202.88 1746.02,1204.59 1746.6,1207.45 1747.19,1206.39 1747.78,1204.19 1748.36,1202.22 1748.95,1201.33 1749.53,1204.27 1750.12,1203.3 1750.71,1203.72 1751.29,1201.76 1751.88,1206.5 1752.47,1208.12 1753.05,1205.9 1753.64,1207.84 1754.23,1206.71 1754.81,1207.14 1755.4,1208.61 1755.99,1208.94 1756.57,1210.55 1757.16,1209.47 1757.74,1204.37 1758.33,1203.45 1758.92,1203.59 1759.5,1201.29 1760.09,1203.21 1760.68,1204.95 1761.26,1203.76 1761.85,1204.45 1762.44,1207.29 1763.02,1207.51 1763.61,1215.56 1764.19,1211.37 1764.78,1211.39 1765.37,1211.23 1765.95,1210.1 1766.54,1211.38 1767.13,1210.01 1767.71,1212.34 1768.3,1213.53 1768.89,1216.1 1769.47,1214.68 1770.06,1216 1770.65,1214.47 1771.23,1214.4 1771.82,1212.72 1772.4,1212.54 1772.99,1212.23 1773.58,1212.35 1774.16,1212.4 1774.75,1212.11 1775.34,1210.7 1775.92,1210.94 1776.51,1208.74 1777.1,1210.14 1777.68,1208.93 1778.27,1207.63 1778.86,1207.23 1779.44,1207.54 1780.03,1207.96 1780.61,1205.51 1781.2,1207.38 1781.79,1203.76 1782.37,1206.82 1782.96,1207.18 1783.55,1207.7 1784.13,1207.91 1784.72,1203.97 1785.31,1206.75 1785.89,1207.03 1786.48,1211.29 1787.06,1208.44 1787.65,1205.89 1788.24,1206.12 1788.82,1206.36 1789.41,1206.74 1790,1210.95 1790.58,1208.34 1791.17,1211.36 1791.76,1211.58 1792.34,1214.03 1792.93,1213.94 1793.52,1215.24 1794.1,1213.9 1794.69,1212.76 1795.27,1214.1 1795.86,1215.08 1796.45,1216.37 1797.03,1217.39 1797.62,1215.81 1798.21,1216.78 1798.79,1215.18 1799.38,1216.22 1799.97,1217.24 1800.55,1215.66 1801.14,1215.43 1801.73,1216.42 1802.31,1218.78 1802.9,1218.34 1803.48,1218.05 1804.07,1217.99 1804.66,1216.25 1805.24,1218.64 1805.83,1220.82 1806.42,1220.32 1807,1221.51 1807.59,1219.67 1808.18,1216.51 1808.76,1217.71 1809.35,1213.65 1809.94,1212.2 1810.52,1209.44 1811.11,1209.63 1811.69,1208.63 1812.28,1207.5 1812.87,1203.83 1813.45,1201.4 1814.04,1204.58 1814.63,1206.11 1815.21,1207.5 1815.8,1206.23 1816.39,1207.9 1816.97,1206.82 1817.56,1204.55 1818.14,1204.85 1818.73,1206.74 1819.32,1205.85 1819.9,1202.18 1820.49,1205.28 1821.08,1205.64 1821.66,1208.83 1822.25,1210.14 1822.84,1211.52 1823.42,1211.72 1824.01,1213.18 1824.6,1213.28 1825.18,1213.02 1825.77,1213.04 1826.35,1211.69 1826.94,1214.27 1827.53,1210.33 1828.11,1210.32 1828.7,1210.26 1829.29,1211.5 1829.87,1219.5 1830.46,1216.32 1831.05,1217.27 1831.63,1214.24 1832.22,1214.16 1832.81,1215.66 1833.39,1215.65 1833.98,1216.81 1834.56,1218.07 1835.15,1216.44 1835.74,1217.82 1836.32,1214.99 1836.91,1211.85 1837.5,1211.68 1838.08,1210.42 1838.67,1209.2 1839.26,1211.89 1839.84,1211.82 1840.43,1211.51 1841.01,1212.97 1841.6,1212.84 1842.19,1211.4 1842.77,1207.46 1843.36,1207.48 1843.95,1209.32 1844.53,1206.73 1845.12,1208.34 1845.71,1205.96 1846.29,1202.28 1846.88,1205.52 1847.47,1204.49 1848.05,1204.94 1848.64,1204.04 1849.22,1205.94 1849.81,1207.48 1850.4,1207.74 1850.98,1209.4 1851.57,1208.07 1852.16,1206.89 1852.74,1204.72 1853.33,1203.84 1853.92,1204.3 1854.5,1203.54 1855.09,1202.69 1855.68,1205.93 1856.26,1206.4 1856.85,1205.38 1857.43,1208.1 1858.02,1208.31 1858.61,1207.38 1859.19,1210.44 1859.78,1209.03 1860.37,1209.16 1860.95,1209.56 1861.54,1208.7 1862.13,1208.94 1862.71,1210.81 1863.3,1212.24 1863.88,1211.1 1864.47,1211.32 1865.06,1210.07 1865.64,1214.34 1866.23,1214.61 1866.82,1216.14 1867.4,1215.7 1867.99,1218.06 1868.58,1217.81 1869.16,1217.41 1869.75,1217.15 1870.34,1213.21 1870.92,1213.39 1871.51,1214.83 1872.09,1212.32 1872.68,1215.06 1873.27,1212.26 1873.85,1214.67 1874.44,1212.01 1875.03,1213.37 1875.61,1213.17 1876.2,1213.1 1876.79,1211.76 1877.37,1210.41 1877.96,1210.92 1878.55,1208.56 1879.13,1208.84 1879.72,1208.81 1880.3,1210.38 1880.89,1210.42 1881.48,1211.89 1882.06,1211.82 1882.65,1212.96 1883.24,1210.28 1883.82,1211.35 1884.41,1211.06 1885,1211.25 1885.58,1211.54 1886.17,1212.81 1886.76,1212.84 1887.34,1214.23 1887.93,1215.22 1888.51,1215.08 1889.1,1217.55 1889.69,1216.38 1890.27,1216.2 1890.86,1215.82 1891.45,1215.34 1892.03,1213.99 1892.62,1211.17 1893.21,1211.46 1893.79,1212.63 1894.38,1211.28 1894.96,1211.27 1895.55,1210.2 1896.14,1210.37 1896.72,1210.57 1897.31,1209.2 1897.9,1209.47 1898.48,1213.03 1899.07,1212.82 1899.66,1215.21 1900.24,1217.97 1900.83,1214.89 1901.42,1214.66 1902,1215.43 1902.59,1215.17 1903.17,1214.77 1903.76,1214.46 1904.35,1215.76 1904.93,1214.19 1905.52,1214.11 1906.11,1215 1906.69,1214.69 1907.28,1215.95 1907.87,1217.45 1908.45,1214.87 1909.04,1218.41 1909.63,1215.4 1910.21,1217.79 1910.8,1217.64 1911.38,1216.14 1911.97,1218.34 1912.56,1219.06 1913.14,1217.27 1913.73,1219.59 1914.32,1219.34 1914.9,1218.86 1915.49,1218.52 1916.08,1218 1916.66,1213.9 1917.25,1213.83 1917.83,1210.74 1918.42,1213.42 1919.01,1212.07 1919.59,1210.61 1920.18,1213.2 1920.77,1213.01 1921.35,1216.6 1921.94,1216.2 1922.53,1216.13 1923.11,1216.09 1923.7,1218.3 1924.29,1219.28 1924.87,1217.76 1925.46,1217.26 1926.04,1215.77 1926.63,1218.27 1927.22,1217.96 1927.8,1217.75 1928.39,1217.44 1928.98,1217.07 1929.56,1218.12 1930.15,1217.57 1930.74,1217.13 1931.32,1218.03 1931.91,1220.16 1932.5,1219.7 1933.08,1221.85 1933.67,1219.98 1934.25,1218.06 1934.84,1218.96 1935.43,1219.59 1936.01,1216.54 1936.6,1214.74 1937.19,1211.79 1937.77,1213.22 1938.36,1213.12 1938.95,1211.86 1939.53,1213.37 1940.12,1212.16 1940.71,1212.26 1941.29,1210.95 1941.88,1212.1 1942.46,1211.9 1943.05,1211.69 1943.64,1211.56 1944.22,1211.73 1944.81,1210.19 1945.4,1210.32 1945.98,1210.5 1946.57,1211.99 1947.16,1211.92 1947.74,1210.65 1948.33,1210.6 1948.91,1209.1 1949.5,1211.84 1950.09,1213.37 1950.67,1214.55 1951.26,1214.51 1951.85,1214.51 1952.43,1214.46 1953.02,1216.96 1953.61,1219.17 1954.19,1217.24 1954.78,1215.77 1955.37,1214.33 1955.95,1214.18 1956.54,1212.74 1957.12,1212.6 1957.71,1215.04 1958.3,1214.95 1958.88,1215.98 1959.47,1214.59 1960.06,1214.52 1960.64,1213.29 1961.23,1217.2 1961.82,1215.71 1962.4,1214.09 1962.99,1212.76 1963.58,1212.79 1964.16,1211.47 1964.75,1211.54 1965.33,1214.04 1965.92,1212.57 1966.51,1211.26 1967.09,1211.22 1967.68,1210.96 1968.27,1210.91 1968.85,1211.83 1969.44,1211.74 1970.03,1211.49 1970.61,1211.37 1971.2,1209.97 1971.78,1207.38 1972.37,1207.96 1972.96,1206.78 1973.54,1206.73 1974.13,1208.11 1974.72,1209.96 1975.3,1209.89 1975.89,1206.02 1976.48,1207.48 1977.06,1207.77 1977.65,1207.92 1978.24,1208.05 1978.82,1209.27 1979.41,1209.24 1979.99,1209.57 1980.58,1208.52 1981.17,1208.74 1981.75,1206.2 1982.34,1206.33 1982.93,1207.95 1983.51,1206.69 1984.1,1208.2 1984.69,1208.39 1985.27,1207.24 1985.86,1206.35 1986.45,1205.28 1987.03,1208.3 1987.62,1207 1988.2,1201.97 1988.79,1199.99 1989.38,1199.3 1989.96,1199.97 1990.55,1200.42 1991.14,1200.93 1991.72,1201.52 1992.31,1202.01 1992.9,1205 1993.48,1206.58 1994.07,1206.96 1994.65,1205.91 1995.24,1203.7 1995.83,1204.1 1996.41,1204.39 1997,1207.33 1997.59,1205 1998.17,1205.5 1998.76,1207.17 1999.35,1211.37 1999.93,1211.48 2000.52,1211.53 2001.11,1210.15 2001.69,1212.8 2002.28,1215.32 2002.86,1215.04 2003.45,1213.63 2004.04,1211.1 2004.62,1209.67 2005.21,1212.45 2005.8,1213.82 2006.38,1212.41 2006.97,1215 2007.56,1216.2 2008.14,1217.39 2008.73,1215.68 2009.32,1215.24 2009.9,1215.12 2010.49,1216.42 2011.07,1218.7 2011.66,1219.59 2012.25,1220.18 2012.83,1221.01 2013.42,1219.08 2014.01,1220.1 2014.59,1218.33 2015.18,1220.8 2015.77,1220.49 2016.35,1221.13 2016.94,1223.08 2017.53,1218.82 2018.11,1218.42 2018.7,1218.39 2019.28,1221.98 2019.87,1219.97 2020.46,1220.72 2021.04,1220.47 2021.63,1222.5 2022.22,1222 2022.8,1222.79 2023.39,1216.77 2023.98,1216.3 2024.56,1213.54 2025.15,1212.09 2025.73,1212.3 2026.32,1213.52 2026.91,1209.51 2027.49,1212.18 2028.08,1210.98 2028.67,1210.94 2029.25,1209.5 2029.84,1212.31 2030.43,1210.87 2031.01,1208.34 2031.6,1209.68 2032.19,1211.03 2032.77,1212.28 2033.36,1210.9 2033.94,1211.22 2034.53,1212.89 2035.12,1212.57 2035.7,1212.39 2036.29,1214.8 2036.88,1214.54 2037.46,1214.36 2038.05,1212.67 2038.64,1211.15 2039.22,1209.9 2039.81,1207.36 2040.4,1205.3 2040.98,1205.77 2041.57,1204.94 2042.15,1206.54 2042.74,1206.77 2043.33,1204.41 2043.91,1204.63 2044.5,1203.74 2045.09,1204.42 2045.67,1204.88 2046.26,1205.27 2046.85,1204.21 2047.43,1200.72 2048.02,1201.31 2048.6,1202.95 2049.19,1203.54 2049.78,1204.12 2050.36,1203.41 2050.95,1202.48 2051.54,1203.32 2052.12,1203.8 2052.71,1203.05 2053.3,1204.84 2053.88,1205.25 2054.47,1206.91 2055.06,1206.95 2055.64,1208.59 2056.23,1204.65 2056.81,1203.9 2057.4,1205.8 2057.99,1204.85 2058.57,1205.37 2059.16,1206.13 2059.75,1206.5 2060.33,1206.73 2060.92,1207.15 2061.51,1205.99 2062.09,1207.46 2062.68,1207.85 2063.27,1209.26 2063.85,1212.07 2064.44,1211.99 2065.02,1211.78 2065.61,1213.09 2066.2,1214.12 2066.78,1214.18 2067.37,1213.92 2067.96,1212.66 2068.54,1212.91 2069.13,1217.94 2069.72,1217.66 2070.3,1214.83 2070.89,1213.3 2071.48,1213.15 2072.06,1213.03 2072.65,1213.18 2073.23,1213.5 2073.82,1212.21 2074.41,1209.71 2074.99,1209.94 2075.58,1208.58 2076.17,1210.17 2076.75,1212.9 2077.34,1214.28 2077.93,1214.37 2078.51,1215.31 2079.1,1213.77 2079.68,1213.62 2080.27,1214.86 2080.86,1214.65 2081.44,1215.85 2082.03,1214.84 2082.62,1213.47 2083.2,1213.53 2083.79,1213.58 2084.38,1213.44 2084.96,1211.8 2085.55,1210.35 2086.14,1210.71 2086.72,1208.28 2087.31,1206.01 2087.89,1204.96 2088.48,1205.62 2089.07,1209.66 2089.65,1208.47 2090.24,1211.3 2090.83,1208.42 2091.41,1208.4 2092,1208.42 2092.59,1208.42 2093.17,1208.45 2093.76,1212.37 2094.35,1214.74 2094.93,1214.72 2095.52,1213.26 2096.1,1213.44 2096.69,1214.77 2097.28,1214.73 2097.86,1214.6 2098.45,1213.13 2099.04,1214.31 2099.62,1214 2100.21,1213.74 2100.8,1210.88 2101.38,1209.74 2101.97,1210.23 2102.55,1213.13 2103.14,1214.19 2103.73,1212.76 2104.31,1213.86 2104.9,1212.47 2105.49,1212.4 2106.07,1217.81 2106.66,1215.95 2107.25,1212.96 2107.83,1211.25 2108.42,1211.5 2109.01,1212.87 2109.59,1213.66 2110.18,1210.84 2110.76,1210.74 2111.35,1209.33 2111.94,1207.97 2112.52,1205.32 2113.11,1205.68 2113.7,1209.92 2114.28,1208.34 2114.87,1208.62 2115.46,1207.54 2116.04,1209.11 2116.63,1210.55 2117.22,1211.89 2117.8,1212.17 2118.39,1210.88 2118.97,1213.73 2119.56,1216.26 2120.15,1217.44 2120.73,1215.91 2121.32,1216.07 2121.91,1217.08 2122.49,1216.85 2123.08,1213.86 2123.67,1210 2124.25,1209.74 2124.84,1209.77 2125.42,1207.18 2126.01,1208.76 2126.6,1208.96 2127.18,1209.2 2127.77,1207.94 2128.36,1209.53 2128.94,1207.11 2129.53,1204.86 2130.12,1204.05 2130.7,1205.88 2131.29,1206.08 2131.88,1204.85 2132.46,1204.94 2133.05,1206.66 2133.63,1207.9 2134.22,1209.37 2134.81,1210.85 2135.39,1212.35 2135.98,1213.49 2136.57,1215.85 2137.15,1217.12 2137.74,1218.21 2138.33,1216.22 2138.91,1212.09 2139.5,1212.03 2140.09,1210.74 2140.67,1209.61 2141.26,1210.96 2141.84,1209.6 2142.43,1209.65 2143.02,1208.33 2143.6,1211.09 2144.19,1212.52 2144.78,1214.79 2145.36,1214.61 2145.95,1215.69 2146.54,1214.24 2147.12,1214.15 2147.71,1212.93 2148.3,1208.78 2148.88,1208.93 2149.47,1209.05 2150.05,1209.11 2150.64,1210.58 2151.23,1208.02 2151.81,1208.57 2152.4,1208.68 2152.99,1206.07 2153.57,1206.43 2154.16,1208.32 2154.75,1207.26 2155.33,1209.01 2155.92,1209.18 2156.5,1207 2157.09,1208.61 2157.68,1210.09 2158.26,1211.64 \"/>\n<path clip-path=\"url(#clip832)\" d=\"M986.025 1212.27 L986.612 1212.27 L987.198 1212.27 L987.785 1212.27 L988.371 1212.27 L988.957 1212.27 L989.544 1212.27 L990.13 1212.27 L990.717 1212.27 L991.303 1212.27 L991.889 1212.27 L992.476 1212.27 L993.062 1212.27 L993.649 1212.27 L994.235 1212.27 L994.822 1212.27 L995.408 1212.27 L995.994 1212.27 L996.581 1212.27 L997.167 1212.27 L997.754 1212.27 L998.34 1212.27 L998.926 1212.27 L999.513 1212.27 L1000.1 1212.27 L1000.69 1212.27 L1001.27 1212.27 L1001.86 1212.27 L1002.44 1212.27 L1003.03 1212.27 L1003.62 1212.27 L1004.2 1212.27 L1004.79 1212.27 L1005.38 1212.27 L1005.96 1212.27 L1006.55 1212.27 L1007.14 1212.27 L1007.72 1212.27 L1008.31 1212.27 L1008.9 1212.27 L1009.48 1212.27 L1010.07 1212.27 L1010.65 1212.27 L1011.24 1212.27 L1011.83 1212.27 L1012.41 1212.27 L1013 1212.27 L1013.59 1212.27 L1014.17 1212.27 L1014.76 1212.27 L1015.35 1212.27 L1015.93 1212.27 L1016.52 1212.27 L1017.11 1212.27 L1017.69 1212.27 L1018.28 1212.27 L1018.86 1212.27 L1019.45 1212.27 L1020.04 1212.27 L1020.62 1212.27 L1021.21 1212.27 L1021.8 1212.27 L1022.38 1212.27 L1022.97 1212.27 L1023.56 1212.27 L1024.14 1212.27 L1024.73 1212.27 L1025.32 1212.27 L1025.9 1212.27 L1026.49 1212.27 L1027.07 1212.27 L1027.66 1212.27 L1028.25 1212.27 L1028.83 1212.27 L1029.42 1212.27 L1030.01 1212.27 L1030.59 1212.27 L1031.18 1212.27 L1031.77 1212.27 L1032.35 1212.27 L1032.94 1212.27 L1033.52 1212.27 L1034.11 1212.27 L1034.7 1212.27 L1035.28 1212.27 L1035.87 1212.27 L1036.46 1212.27 L1037.04 1212.27 L1037.63 1212.27 L1038.22 1212.27 L1038.8 1212.27 L1039.39 1212.27 L1039.98 1212.27 L1040.56 1212.27 L1041.15 1212.27 L1041.73 1212.27 L1042.32 1212.27 L1042.91 1212.27 L1043.49 1212.27 L1044.08 1212.27 L1044.67 1212.27 L1045.25 1212.27 L1045.84 1212.27 L1046.43 1212.27 L1047.01 1212.27 L1047.6 1212.27 L1048.19 1212.27 L1048.77 1212.27 L1049.36 1212.27 L1049.94 1212.27 L1050.53 1212.27 L1051.12 1212.27 L1051.7 1212.27 L1052.29 1212.27 L1052.88 1212.27 L1053.46 1212.27 L1054.05 1212.27 L1054.64 1212.27 L1055.22 1212.27 L1055.81 1212.27 L1056.39 1212.27 L1056.98 1212.27 L1057.57 1212.27 L1058.15 1212.27 L1058.74 1212.27 L1059.33 1212.27 L1059.91 1212.27 L1060.5 1212.27 L1061.09 1212.27 L1061.67 1212.27 L1062.26 1212.27 L1062.85 1212.27 L1063.43 1212.27 L1064.02 1212.27 L1064.6 1212.27 L1065.19 1212.27 L1065.78 1212.27 L1066.36 1212.27 L1066.95 1212.27 L1067.54 1212.27 L1068.12 1212.27 L1068.71 1212.27 L1069.3 1212.27 L1069.88 1212.27 L1070.47 1212.27 L1071.06 1212.27 L1071.64 1212.27 L1072.23 1212.27 L1072.81 1212.27 L1073.4 1212.27 L1073.99 1212.27 L1074.57 1212.27 L1075.16 1212.27 L1075.75 1212.27 L1076.33 1212.27 L1076.92 1212.27 L1077.51 1212.27 L1078.09 1212.27 L1078.68 1212.27 L1079.26 1212.27 L1079.85 1212.27 L1080.44 1212.27 L1081.02 1212.27 L1081.61 1212.27 L1082.2 1212.27 L1082.78 1212.27 L1083.37 1212.27 L1083.96 1212.27 L1084.54 1212.27 L1085.13 1212.27 L1085.72 1212.27 L1086.3 1212.27 L1086.89 1212.27 L1087.47 1212.27 L1088.06 1212.27 L1088.65 1212.27 L1089.23 1212.27 L1089.82 1212.27 L1090.41 1212.27 L1090.99 1212.27 L1091.58 1212.27 L1092.17 1212.27 L1092.75 1212.27 L1093.34 1212.27 L1093.93 1212.27 L1094.51 1212.27 L1095.1 1212.27 L1095.68 1212.27 L1096.27 1212.27 L1096.86 1212.27 L1097.44 1212.27 L1098.03 1212.27 L1098.62 1212.27 L1099.2 1212.27 L1099.79 1212.27 L1100.38 1212.27 L1100.96 1212.27 L1101.55 1212.27 L1102.14 1212.27 L1102.72 1212.27 L1103.31 1212.27 L1103.89 1212.27 L1104.48 1212.27 L1105.07 1212.27 L1105.65 1212.27 L1106.24 1212.27 L1106.83 1212.27 L1107.41 1212.27 L1108 1212.27 L1108.59 1212.27 L1109.17 1212.27 L1109.76 1212.27 L1110.34 1212.27 L1110.93 1212.27 L1111.52 1212.27 L1112.1 1212.27 L1112.69 1212.27 L1113.28 1212.27 L1113.86 1212.27 L1114.45 1212.27 L1115.04 1212.27 L1115.62 1212.27 L1116.21 1212.27 L1116.8 1212.27 L1117.38 1212.27 L1117.97 1212.27 L1118.55 1212.27 L1119.14 1212.27 L1119.73 1212.27 L1120.31 1212.27 L1120.9 1212.27 L1121.49 1212.27 L1122.07 1212.27 L1122.66 1212.27 L1123.25 1212.27 L1123.83 1212.27 L1124.42 1212.27 L1125.01 1212.27 L1125.59 1212.27 L1126.18 1212.27 L1126.76 1212.27 L1127.35 1212.27 L1127.94 1212.27 L1128.52 1212.27 L1129.11 1212.27 L1129.7 1212.27 L1130.28 1212.27 L1130.87 1212.27 L1131.46 1212.27 L1132.04 1212.27 L1132.63 1212.27 L1133.21 1212.27 L1133.8 1212.27 L1134.39 1212.27 L1134.97 1212.27 L1135.56 1212.27 L1136.15 1212.27 L1136.73 1212.27 L1137.32 1212.27 L1137.91 1212.27 L1138.49 1212.27 L1139.08 1212.27 L1139.67 1212.27 L1140.25 1212.27 L1140.84 1212.27 L1141.42 1212.27 L1142.01 1212.27 L1142.6 1212.27 L1143.18 1212.27 L1143.77 1212.27 L1144.36 1212.27 L1144.94 1212.27 L1145.53 1212.27 L1146.12 1212.27 L1146.7 1212.27 L1147.29 1212.27 L1147.88 1212.27 L1148.46 1212.27 L1149.05 1212.27 L1149.63 1212.27 L1150.22 1212.27 L1150.81 1212.27 L1151.39 1212.27 L1151.98 1212.27 L1152.57 1212.27 L1153.15 1212.27 L1153.74 1212.27 L1154.33 1212.27 L1154.91 1212.27 L1155.5 1212.27 L1156.09 1212.27 L1156.67 1212.27 L1157.26 1212.27 L1157.84 1212.27 L1158.43 1212.27 L1159.02 1212.27 L1159.6 1212.27 L1160.19 1212.27 L1160.78 1212.27 L1161.36 1212.27 L1161.95 1212.27 L1162.54 1212.27 L1163.12 1212.27 L1163.71 1212.27 L1164.29 1212.27 L1164.88 1212.27 L1165.47 1212.27 L1166.05 1212.27 L1166.64 1212.27 L1167.23 1212.27 L1167.81 1212.27 L1168.4 1212.27 L1168.99 1212.27 L1169.57 1212.27 L1170.16 1212.27 L1170.75 1212.27 L1171.33 1212.27 L1171.92 1212.27 L1172.5 1212.27 L1173.09 1212.27 L1173.68 1212.27 L1174.26 1212.27 L1174.85 1212.27 L1175.44 1212.27 L1176.02 1212.27 L1176.61 1212.27 L1177.2 1212.27 L1177.78 1212.27 L1178.37 1212.27 L1178.96 1212.27 L1179.54 1212.27 L1180.13 1212.27 L1180.71 1212.27 L1181.3 1212.27 L1181.89 1212.27 L1182.47 1212.27 L1183.06 1212.27 L1183.65 1212.27 L1184.23 1212.27 L1184.82 1212.27 L1185.41 1212.27 L1185.99 1212.27 L1186.58 1212.27 L1187.16 1212.27 L1187.75 1212.27 L1188.34 1212.27 L1188.92 1212.27 L1189.51 1212.27 L1190.1 1212.27 L1190.68 1212.27 L1191.27 1212.27 L1191.86 1212.27 L1192.44 1212.27 L1193.03 1212.27 L1193.62 1212.27 L1194.2 1212.27 L1194.79 1212.27 L1195.37 1212.27 L1195.96 1212.27 L1196.55 1212.27 L1197.13 1212.27 L1197.72 1212.27 L1198.31 1212.27 L1198.89 1212.27 L1199.48 1212.27 L1200.07 1212.27 L1200.65 1212.27 L1201.24 1212.27 L1201.83 1212.27 L1202.41 1212.27 L1203 1212.27 L1203.58 1212.27 L1204.17 1212.27 L1204.76 1212.27 L1205.34 1212.27 L1205.93 1212.27 L1206.52 1212.27 L1207.1 1212.27 L1207.69 1212.27 L1208.28 1212.27 L1208.86 1212.27 L1209.45 1212.27 L1210.03 1212.27 L1210.62 1212.27 L1211.21 1212.27 L1211.79 1212.27 L1212.38 1212.27 L1212.97 1212.27 L1213.55 1212.27 L1214.14 1212.27 L1214.73 1212.27 L1215.31 1212.27 L1215.9 1212.27 L1216.49 1212.27 L1217.07 1212.27 L1217.66 1212.27 L1218.24 1212.27 L1218.83 1212.27 L1219.42 1212.27 L1220 1212.27 L1220.59 1212.27 L1221.18 1212.27 L1221.76 1212.27 L1222.35 1212.27 L1222.94 1212.27 L1223.52 1212.27 L1224.11 1212.27 L1224.7 1212.27 L1225.28 1212.27 L1225.87 1212.27 L1226.45 1212.27 L1227.04 1212.27 L1227.63 1212.27 L1228.21 1212.27 L1228.8 1212.27 L1229.39 1212.27 L1229.97 1212.27 L1230.56 1212.27 L1231.15 1212.27 L1231.73 1212.27 L1232.32 1212.27 L1232.91 1212.27 L1233.49 1212.27 L1234.08 1212.27 L1234.66 1212.27 L1235.25 1212.27 L1235.84 1212.27 L1236.42 1212.27 L1237.01 1212.27 L1237.6 1212.27 L1238.18 1212.27 L1238.77 1212.27 L1239.36 1212.27 L1239.94 1212.27 L1240.53 1212.27 L1241.11 1212.27 L1241.7 1212.27 L1242.29 1212.27 L1242.87 1212.27 L1243.46 1212.27 L1244.05 1212.27 L1244.63 1212.27 L1245.22 1212.27 L1245.81 1212.27 L1246.39 1212.27 L1246.98 1212.27 L1247.57 1212.27 L1248.15 1212.27 L1248.74 1212.27 L1249.32 1212.27 L1249.91 1212.27 L1250.5 1212.27 L1251.08 1212.27 L1251.67 1212.27 L1252.26 1212.27 L1252.84 1212.27 L1253.43 1212.27 L1254.02 1212.27 L1254.6 1212.27 L1255.19 1212.27 L1255.78 1212.27 L1256.36 1212.27 L1256.95 1212.27 L1257.53 1212.27 L1258.12 1212.27 L1258.71 1212.27 L1259.29 1212.27 L1259.88 1212.27 L1260.47 1212.27 L1261.05 1212.27 L1261.64 1212.27 L1262.23 1212.27 L1262.81 1212.27 L1263.4 1212.27 L1263.98 1212.27 L1264.57 1212.27 L1265.16 1212.27 L1265.74 1212.27 L1266.33 1212.27 L1266.92 1212.27 L1267.5 1212.27 L1268.09 1212.27 L1268.68 1212.27 L1269.26 1212.27 L1269.85 1212.27 L1270.44 1212.27 L1271.02 1212.27 L1271.61 1212.27 L1272.19 1212.27 L1272.78 1212.27 L1273.37 1212.27 L1273.95 1212.27 L1274.54 1212.27 L1275.13 1212.27 L1275.71 1212.27 L1276.3 1212.27 L1276.89 1212.27 L1277.47 1212.27 L1278.06 1212.27 L1278.65 1212.27 L1279.23 1212.27 L1279.82 1212.27 L1280.4 1212.27 L1280.99 1212.27 L1281.58 1212.27 L1282.16 1212.27 L1282.75 1212.27 L1283.34 1212.27 L1283.92 1212.27 L1284.51 1212.27 L1285.1 1212.27 L1285.68 1212.27 L1286.27 1212.27 L1286.86 1212.27 L1287.44 1212.27 L1288.03 1212.27 L1288.61 1212.27 L1289.2 1212.27 L1289.79 1212.27 L1290.37 1212.27 L1290.96 1212.27 L1291.55 1212.27 L1292.13 1212.27 L1292.72 1212.27 L1293.31 1212.27 L1293.89 1212.27 L1294.48 1212.27 L1295.06 1212.27 L1295.65 1212.27 L1296.24 1212.27 L1296.82 1212.27 L1297.41 1212.27 L1298 1212.27 L1298.58 1212.27 L1299.17 1212.27 L1299.76 1212.27 L1300.34 1212.27 L1300.93 1212.27 L1301.52 1212.27 L1302.1 1212.27 L1302.69 1212.27 L1303.27 1212.27 L1303.86 1212.27 L1304.45 1212.27 L1305.03 1212.27 L1305.62 1212.27 L1306.21 1212.27 L1306.79 1212.27 L1307.38 1212.27 L1307.97 1212.27 L1308.55 1212.27 L1309.14 1212.27 L1309.73 1212.27 L1310.31 1212.27 L1310.9 1212.27 L1311.48 1212.27 L1312.07 1212.27 L1312.66 1212.27 L1313.24 1212.27 L1313.83 1212.27 L1314.42 1212.27 L1315 1212.27 L1315.59 1212.27 L1316.18 1212.27 L1316.76 1212.27 L1317.35 1212.27 L1317.93 1212.27 L1318.52 1212.27 L1319.11 1212.27 L1319.69 1212.27 L1320.28 1212.27 L1320.87 1212.27 L1321.45 1212.27 L1322.04 1212.27 L1322.63 1212.27 L1323.21 1212.27 L1323.8 1212.27 L1324.39 1212.27 L1324.97 1212.27 L1325.56 1212.27 L1326.14 1212.27 L1326.73 1212.27 L1327.32 1212.27 L1327.9 1212.27 L1328.49 1212.27 L1329.08 1212.27 L1329.66 1212.27 L1330.25 1212.27 L1330.84 1212.27 L1331.42 1212.27 L1332.01 1212.27 L1332.6 1212.27 L1333.18 1212.27 L1333.77 1212.27 L1334.35 1212.27 L1334.94 1212.27 L1335.53 1212.27 L1336.11 1212.27 L1336.7 1212.27 L1337.29 1212.27 L1337.87 1212.27 L1338.46 1212.27 L1339.05 1212.27 L1339.63 1212.27 L1340.22 1212.27 L1340.8 1212.27 L1341.39 1212.27 L1341.98 1212.27 L1342.56 1212.27 L1343.15 1212.27 L1343.74 1212.27 L1344.32 1212.27 L1344.91 1212.27 L1345.5 1212.27 L1346.08 1212.27 L1346.67 1212.27 L1347.26 1212.27 L1347.84 1212.27 L1348.43 1212.27 L1349.01 1212.27 L1349.6 1212.27 L1350.19 1212.27 L1350.77 1212.27 L1351.36 1212.27 L1351.95 1212.27 L1352.53 1212.27 L1353.12 1212.27 L1353.71 1212.27 L1354.29 1212.27 L1354.88 1212.27 L1355.47 1212.27 L1356.05 1212.27 L1356.64 1212.27 L1357.22 1212.27 L1357.81 1212.27 L1358.4 1212.27 L1358.98 1212.27 L1359.57 1212.27 L1360.16 1212.27 L1360.74 1212.27 L1361.33 1212.27 L1361.92 1212.27 L1362.5 1212.27 L1363.09 1212.27 L1363.68 1212.27 L1364.26 1212.27 L1364.85 1212.27 L1365.43 1212.27 L1366.02 1212.27 L1366.61 1212.27 L1367.19 1212.27 L1367.78 1212.27 L1368.37 1212.27 L1368.95 1212.27 L1369.54 1212.27 L1370.13 1212.27 L1370.71 1212.27 L1371.3 1212.27 L1371.88 1212.27 L1372.47 1212.27 L1373.06 1212.27 L1373.64 1212.27 L1374.23 1212.27 L1374.82 1212.27 L1375.4 1212.27 L1375.99 1212.27 L1376.58 1212.27 L1377.16 1212.27 L1377.75 1212.27 L1378.34 1212.27 L1378.92 1212.27 L1379.51 1212.27 L1380.09 1212.27 L1380.68 1212.27 L1381.27 1212.27 L1381.85 1212.27 L1382.44 1212.27 L1383.03 1212.27 L1383.61 1212.27 L1384.2 1212.27 L1384.79 1212.27 L1385.37 1212.27 L1385.96 1212.27 L1386.55 1212.27 L1387.13 1212.27 L1387.72 1212.27 L1388.3 1212.27 L1388.89 1212.27 L1389.48 1212.27 L1390.06 1212.27 L1390.65 1212.27 L1391.24 1212.27 L1391.82 1212.27 L1392.41 1212.27 L1393 1212.27 L1393.58 1212.27 L1394.17 1212.27 L1394.75 1212.27 L1395.34 1212.27 L1395.93 1212.27 L1396.51 1212.27 L1397.1 1212.27 L1397.69 1212.27 L1398.27 1212.27 L1398.86 1212.27 L1399.45 1212.27 L1400.03 1212.27 L1400.62 1212.27 L1401.21 1212.27 L1401.79 1212.27 L1402.38 1212.27 L1402.96 1212.27 L1403.55 1212.27 L1404.14 1212.27 L1404.72 1212.27 L1405.31 1212.27 L1405.9 1212.27 L1406.48 1212.27 L1407.07 1212.27 L1407.66 1212.27 L1408.24 1212.27 L1408.83 1212.27 L1409.42 1212.27 L1410 1212.27 L1410.59 1212.27 L1411.17 1212.27 L1411.76 1212.27 L1412.35 1212.27 L1412.93 1212.27 L1413.52 1212.27 L1414.11 1212.27 L1414.69 1212.27 L1415.28 1212.27 L1415.87 1212.27 L1416.45 1212.27 L1417.04 1212.27 L1417.63 1212.27 L1418.21 1212.27 L1418.8 1212.27 L1419.38 1212.27 L1419.97 1212.27 L1420.56 1212.27 L1421.14 1212.27 L1421.73 1212.27 L1422.32 1212.27 L1422.9 1212.27 L1423.49 1212.27 L1424.08 1212.27 L1424.66 1212.27 L1425.25 1212.27 L1425.83 1212.27 L1426.42 1212.27 L1427.01 1212.27 L1427.59 1212.27 L1428.18 1212.27 L1428.77 1212.27 L1429.35 1212.27 L1429.94 1212.27 L1430.53 1212.27 L1431.11 1212.27 L1431.7 1212.27 L1432.29 1212.27 L1432.87 1212.27 L1433.46 1212.27 L1434.04 1212.27 L1434.63 1212.27 L1435.22 1212.27 L1435.8 1212.27 L1436.39 1212.27 L1436.98 1212.27 L1437.56 1212.27 L1438.15 1212.27 L1438.74 1212.27 L1439.32 1212.27 L1439.91 1212.27 L1440.5 1212.27 L1441.08 1212.27 L1441.67 1212.27 L1442.25 1212.27 L1442.84 1212.27 L1443.43 1212.27 L1444.01 1212.27 L1444.6 1212.27 L1445.19 1212.27 L1445.77 1212.27 L1446.36 1212.27 L1446.95 1212.27 L1447.53 1212.27 L1448.12 1212.27 L1448.7 1212.27 L1449.29 1212.27 L1449.88 1212.27 L1450.46 1212.27 L1451.05 1212.27 L1451.64 1212.27 L1452.22 1212.27 L1452.81 1212.27 L1453.4 1212.27 L1453.98 1212.27 L1454.57 1212.27 L1455.16 1212.27 L1455.74 1212.27 L1456.33 1212.27 L1456.91 1212.27 L1457.5 1212.27 L1458.09 1212.27 L1458.67 1212.27 L1459.26 1212.27 L1459.85 1212.27 L1460.43 1212.27 L1461.02 1212.27 L1461.61 1212.27 L1462.19 1212.27 L1462.78 1212.27 L1463.37 1212.27 L1463.95 1212.27 L1464.54 1212.27 L1465.12 1212.27 L1465.71 1212.27 L1466.3 1212.27 L1466.88 1212.27 L1467.47 1212.27 L1468.06 1212.27 L1468.64 1212.27 L1469.23 1212.27 L1469.82 1212.27 L1470.4 1212.27 L1470.99 1212.27 L1471.57 1212.27 L1472.16 1212.27 L1472.75 1212.27 L1473.33 1212.27 L1473.92 1212.27 L1474.51 1212.27 L1475.09 1212.27 L1475.68 1212.27 L1476.27 1212.27 L1476.85 1212.27 L1477.44 1212.27 L1478.03 1212.27 L1478.61 1212.27 L1479.2 1212.27 L1479.78 1212.27 L1480.37 1212.27 L1480.96 1212.27 L1481.54 1212.27 L1482.13 1212.27 L1482.72 1212.27 L1483.3 1212.27 L1483.89 1212.27 L1484.48 1212.27 L1485.06 1212.27 L1485.65 1212.27 L1486.24 1212.27 L1486.82 1212.27 L1487.41 1212.27 L1487.99 1212.27 L1488.58 1212.27 L1489.17 1212.27 L1489.75 1212.27 L1490.34 1212.27 L1490.93 1212.27 L1491.51 1212.27 L1492.1 1212.27 L1492.69 1212.27 L1493.27 1212.27 L1493.86 1212.27 L1494.45 1212.27 L1495.03 1212.27 L1495.62 1212.27 L1496.2 1212.27 L1496.79 1212.27 L1497.38 1212.27 L1497.96 1212.27 L1498.55 1212.27 L1499.14 1212.27 L1499.72 1212.27 L1500.31 1212.27 L1500.9 1212.27 L1501.48 1212.27 L1502.07 1212.27 L1502.65 1212.27 L1503.24 1212.27 L1503.83 1212.27 L1504.41 1212.27 L1505 1212.27 L1505.59 1212.27 L1506.17 1212.27 L1506.76 1212.27 L1507.35 1212.27 L1507.93 1212.27 L1508.52 1212.27 L1509.11 1212.27 L1509.69 1212.27 L1510.28 1212.27 L1510.86 1212.27 L1511.45 1212.27 L1512.04 1212.27 L1512.62 1212.27 L1513.21 1212.27 L1513.8 1212.27 L1514.38 1212.27 L1514.97 1212.27 L1515.56 1212.27 L1516.14 1212.27 L1516.73 1212.27 L1517.32 1212.27 L1517.9 1212.27 L1518.49 1212.27 L1519.07 1212.27 L1519.66 1212.27 L1520.25 1212.27 L1520.83 1212.27 L1521.42 1212.27 L1522.01 1212.27 L1522.59 1212.27 L1523.18 1212.27 L1523.77 1212.27 L1524.35 1212.27 L1524.94 1212.27 L1525.52 1212.27 L1526.11 1212.27 L1526.7 1212.27 L1527.28 1212.27 L1527.87 1212.27 L1528.46 1212.27 L1529.04 1212.27 L1529.63 1212.27 L1530.22 1212.27 L1530.8 1212.27 L1531.39 1212.27 L1531.98 1212.27 L1532.56 1212.27 L1533.15 1212.27 L1533.73 1212.27 L1534.32 1212.27 L1534.91 1212.27 L1535.49 1212.27 L1536.08 1212.27 L1536.67 1212.27 L1537.25 1212.27 L1537.84 1212.27 L1538.43 1212.27 L1539.01 1212.27 L1539.6 1212.27 L1540.19 1212.27 L1540.77 1212.27 L1541.36 1212.27 L1541.94 1212.27 L1542.53 1212.27 L1543.12 1212.27 L1543.7 1212.27 L1544.29 1212.27 L1544.88 1212.27 L1545.46 1212.27 L1546.05 1212.27 L1546.64 1212.27 L1547.22 1212.27 L1547.81 1212.27 L1548.4 1212.27 L1548.98 1212.27 L1549.57 1212.27 L1550.15 1212.27 L1550.74 1212.27 L1551.33 1212.27 L1551.91 1212.27 L1552.5 1212.27 L1553.09 1212.27 L1553.67 1212.27 L1554.26 1212.27 L1554.85 1212.27 L1555.43 1212.27 L1556.02 1212.27 L1556.6 1212.27 L1557.19 1212.27 L1557.78 1212.27 L1558.36 1212.27 L1558.95 1212.27 L1559.54 1212.27 L1560.12 1212.27 L1560.71 1212.27 L1561.3 1212.27 L1561.88 1212.27 L1562.47 1212.27 L1563.06 1212.27 L1563.64 1212.27 L1564.23 1212.27 L1564.81 1212.27 L1565.4 1212.27 L1565.99 1212.27 L1566.57 1212.27 L1567.16 1212.27 L1567.75 1212.27 L1568.33 1212.27 L1568.92 1212.27 L1569.51 1212.27 L1570.09 1212.27 L1570.68 1212.27 L1571.27 1212.27 L1571.85 1212.27 L1572.44 1212.27 L1573.02 1212.27 L1573.61 1212.27 L1574.2 1212.27 L1574.78 1212.27 L1575.37 1212.27 L1575.96 1212.27 L1576.54 1212.27 L1577.13 1212.27 L1577.72 1212.27 L1578.3 1212.27 L1578.89 1212.27 L1579.47 1212.27 L1580.06 1212.27 L1580.65 1212.27 L1581.23 1212.27 L1581.82 1212.27 L1582.41 1212.27 L1582.99 1212.27 L1583.58 1212.27 L1584.17 1212.27 L1584.75 1212.27 L1585.34 1212.27 L1585.93 1212.27 L1586.51 1212.27 L1587.1 1212.27 L1587.68 1212.27 L1588.27 1212.27 L1588.86 1212.27 L1589.44 1212.27 L1590.03 1212.27 L1590.62 1212.27 L1591.2 1212.27 L1591.79 1212.27 L1592.38 1212.27 L1592.96 1212.27 L1593.55 1212.27 L1594.14 1212.27 L1594.72 1212.27 L1595.31 1212.27 L1595.89 1212.27 L1596.48 1212.27 L1597.07 1212.27 L1597.65 1212.27 L1598.24 1212.27 L1598.83 1212.27 L1599.41 1212.27 L1600 1212.27 L1600.59 1212.27 L1601.17 1212.27 L1601.76 1212.27 L1602.34 1212.27 L1602.93 1212.27 L1603.52 1212.27 L1604.1 1212.27 L1604.69 1212.27 L1605.28 1212.27 L1605.86 1212.27 L1606.45 1212.27 L1607.04 1212.27 L1607.62 1212.27 L1608.21 1212.27 L1608.8 1212.27 L1609.38 1212.27 L1609.97 1212.27 L1610.55 1212.27 L1611.14 1212.27 L1611.73 1212.27 L1612.31 1212.27 L1612.9 1212.27 L1613.49 1212.27 L1614.07 1212.27 L1614.66 1212.27 L1615.25 1212.27 L1615.83 1212.27 L1616.42 1212.27 L1617.01 1212.27 L1617.59 1212.27 L1618.18 1212.27 L1618.76 1212.27 L1619.35 1212.27 L1619.94 1212.27 L1620.52 1212.27 L1621.11 1212.27 L1621.7 1212.27 L1622.28 1212.27 L1622.87 1212.27 L1623.46 1212.27 L1624.04 1212.27 L1624.63 1212.27 L1625.22 1212.27 L1625.8 1212.27 L1626.39 1212.27 L1626.97 1212.27 L1627.56 1212.27 L1628.15 1212.27 L1628.73 1212.27 L1629.32 1212.27 L1629.91 1212.27 L1630.49 1212.27 L1631.08 1212.27 L1631.67 1212.27 L1632.25 1212.27 L1632.84 1212.27 L1633.42 1212.27 L1634.01 1212.27 L1634.6 1212.27 L1635.18 1212.27 L1635.77 1212.27 L1636.36 1212.27 L1636.94 1212.27 L1637.53 1212.27 L1638.12 1212.27 L1638.7 1212.27 L1639.29 1212.27 L1639.88 1212.27 L1640.46 1212.27 L1641.05 1212.27 L1641.63 1212.27 L1642.22 1212.27 L1642.81 1212.27 L1643.39 1212.27 L1643.98 1212.27 L1644.57 1212.27 L1645.15 1212.27 L1645.74 1212.27 L1646.33 1212.27 L1646.91 1212.27 L1647.5 1212.27 L1648.09 1212.27 L1648.67 1212.27 L1649.26 1212.27 L1649.84 1212.27 L1650.43 1212.27 L1651.02 1212.27 L1651.6 1212.27 L1652.19 1212.27 L1652.78 1212.27 L1653.36 1212.27 L1653.95 1212.27 L1654.54 1212.27 L1655.12 1212.27 L1655.71 1212.27 L1656.29 1212.27 L1656.88 1212.27 L1657.47 1212.27 L1658.05 1212.27 L1658.64 1212.27 L1659.23 1212.27 L1659.81 1212.27 L1660.4 1212.27 L1660.99 1212.27 L1661.57 1212.27 L1662.16 1212.27 L1662.75 1212.27 L1663.33 1212.27 L1663.92 1212.27 L1664.5 1212.27 L1665.09 1212.27 L1665.68 1212.27 L1666.26 1212.27 L1666.85 1212.27 L1667.44 1212.27 L1668.02 1212.27 L1668.61 1212.27 L1669.2 1212.27 L1669.78 1212.27 L1670.37 1212.27 L1670.96 1212.27 L1671.54 1212.27 L1672.13 1212.27 L1672.71 1212.27 L1673.3 1212.27 L1673.89 1212.27 L1674.47 1212.27 L1675.06 1212.27 L1675.65 1212.27 L1676.23 1212.27 L1676.82 1212.27 L1677.41 1212.27 L1677.99 1212.27 L1678.58 1212.27 L1679.17 1212.27 L1679.75 1212.27 L1680.34 1212.27 L1680.92 1212.27 L1681.51 1212.27 L1682.1 1212.27 L1682.68 1212.27 L1683.27 1212.27 L1683.86 1212.27 L1684.44 1212.27 L1685.03 1212.27 L1685.62 1212.27 L1686.2 1212.27 L1686.79 1212.27 L1687.37 1212.27 L1687.96 1212.27 L1688.55 1212.27 L1689.13 1212.27 L1689.72 1212.27 L1690.31 1212.27 L1690.89 1212.27 L1691.48 1212.27 L1692.07 1212.27 L1692.65 1212.27 L1693.24 1212.27 L1693.83 1212.27 L1694.41 1212.27 L1695 1212.27 L1695.58 1212.27 L1696.17 1212.27 L1696.76 1212.27 L1697.34 1212.27 L1697.93 1212.27 L1698.52 1212.27 L1699.1 1212.27 L1699.69 1212.27 L1700.28 1212.27 L1700.86 1212.27 L1701.45 1212.27 L1702.04 1212.27 L1702.62 1212.27 L1703.21 1212.27 L1703.79 1212.27 L1704.38 1212.27 L1704.97 1212.27 L1705.55 1212.27 L1706.14 1212.27 L1706.73 1212.27 L1707.31 1212.27 L1707.9 1212.27 L1708.49 1212.27 L1709.07 1212.27 L1709.66 1212.27 L1710.24 1212.27 L1710.83 1212.27 L1711.42 1212.27 L1712 1212.27 L1712.59 1212.27 L1713.18 1212.27 L1713.76 1212.27 L1714.35 1212.27 L1714.94 1212.27 L1715.52 1212.27 L1716.11 1212.27 L1716.7 1212.27 L1717.28 1212.27 L1717.87 1212.27 L1718.45 1212.27 L1719.04 1212.27 L1719.63 1212.27 L1720.21 1212.27 L1720.8 1212.27 L1721.39 1212.27 L1721.97 1212.27 L1722.56 1212.27 L1723.15 1212.27 L1723.73 1212.27 L1724.32 1212.27 L1724.91 1212.27 L1725.49 1212.27 L1726.08 1212.27 L1726.66 1212.27 L1727.25 1212.27 L1727.84 1212.27 L1728.42 1212.27 L1729.01 1212.27 L1729.6 1212.27 L1730.18 1212.27 L1730.77 1212.27 L1731.36 1212.27 L1731.94 1212.27 L1732.53 1212.27 L1733.11 1212.27 L1733.7 1212.27 L1734.29 1212.27 L1734.87 1212.27 L1735.46 1212.27 L1736.05 1212.27 L1736.63 1212.27 L1737.22 1212.27 L1737.81 1212.27 L1738.39 1212.27 L1738.98 1212.27 L1739.57 1212.27 L1740.15 1212.27 L1740.74 1212.27 L1741.32 1212.27 L1741.91 1212.27 L1742.5 1212.27 L1743.08 1212.27 L1743.67 1212.27 L1744.26 1212.27 L1744.84 1212.27 L1745.43 1212.27 L1746.02 1212.27 L1746.6 1212.27 L1747.19 1212.27 L1747.78 1212.27 L1748.36 1212.27 L1748.95 1212.27 L1749.53 1212.27 L1750.12 1212.27 L1750.71 1212.27 L1751.29 1212.27 L1751.88 1212.27 L1752.47 1212.27 L1753.05 1212.27 L1753.64 1212.27 L1754.23 1212.27 L1754.81 1212.27 L1755.4 1212.27 L1755.99 1212.27 L1756.57 1212.27 L1757.16 1212.27 L1757.74 1212.27 L1758.33 1212.27 L1758.92 1212.27 L1759.5 1212.27 L1760.09 1212.27 L1760.68 1212.27 L1761.26 1212.27 L1761.85 1212.27 L1762.44 1212.27 L1763.02 1212.27 L1763.61 1212.27 L1764.19 1212.27 L1764.78 1212.27 L1765.37 1212.27 L1765.95 1212.27 L1766.54 1212.27 L1767.13 1212.27 L1767.71 1212.27 L1768.3 1212.27 L1768.89 1212.27 L1769.47 1212.27 L1770.06 1212.27 L1770.65 1212.27 L1771.23 1212.27 L1771.82 1212.27 L1772.4 1212.27 L1772.99 1212.27 L1773.58 1212.27 L1774.16 1212.27 L1774.75 1212.27 L1775.34 1212.27 L1775.92 1212.27 L1776.51 1212.27 L1777.1 1212.27 L1777.68 1212.27 L1778.27 1212.27 L1778.86 1212.27 L1779.44 1212.27 L1780.03 1212.27 L1780.61 1212.27 L1781.2 1212.27 L1781.79 1212.27 L1782.37 1212.27 L1782.96 1212.27 L1783.55 1212.27 L1784.13 1212.27 L1784.72 1212.27 L1785.31 1212.27 L1785.89 1212.27 L1786.48 1212.27 L1787.06 1212.27 L1787.65 1212.27 L1788.24 1212.27 L1788.82 1212.27 L1789.41 1212.27 L1790 1212.27 L1790.58 1212.27 L1791.17 1212.27 L1791.76 1212.27 L1792.34 1212.27 L1792.93 1212.27 L1793.52 1212.27 L1794.1 1212.27 L1794.69 1212.27 L1795.27 1212.27 L1795.86 1212.27 L1796.45 1212.27 L1797.03 1212.27 L1797.62 1212.27 L1798.21 1212.27 L1798.79 1212.27 L1799.38 1212.27 L1799.97 1212.27 L1800.55 1212.27 L1801.14 1212.27 L1801.73 1212.27 L1802.31 1212.27 L1802.9 1212.27 L1803.48 1212.27 L1804.07 1212.27 L1804.66 1212.27 L1805.24 1212.27 L1805.83 1212.27 L1806.42 1212.27 L1807 1212.27 L1807.59 1212.27 L1808.18 1212.27 L1808.76 1212.27 L1809.35 1212.27 L1809.94 1212.27 L1810.52 1212.27 L1811.11 1212.27 L1811.69 1212.27 L1812.28 1212.27 L1812.87 1212.27 L1813.45 1212.27 L1814.04 1212.27 L1814.63 1212.27 L1815.21 1212.27 L1815.8 1212.27 L1816.39 1212.27 L1816.97 1212.27 L1817.56 1212.27 L1818.14 1212.27 L1818.73 1212.27 L1819.32 1212.27 L1819.9 1212.27 L1820.49 1212.27 L1821.08 1212.27 L1821.66 1212.27 L1822.25 1212.27 L1822.84 1212.27 L1823.42 1212.27 L1824.01 1212.27 L1824.6 1212.27 L1825.18 1212.27 L1825.77 1212.27 L1826.35 1212.27 L1826.94 1212.27 L1827.53 1212.27 L1828.11 1212.27 L1828.7 1212.27 L1829.29 1212.27 L1829.87 1212.27 L1830.46 1212.27 L1831.05 1212.27 L1831.63 1212.27 L1832.22 1212.27 L1832.81 1212.27 L1833.39 1212.27 L1833.98 1212.27 L1834.56 1212.27 L1835.15 1212.27 L1835.74 1212.27 L1836.32 1212.27 L1836.91 1212.27 L1837.5 1212.27 L1838.08 1212.27 L1838.67 1212.27 L1839.26 1212.27 L1839.84 1212.27 L1840.43 1212.27 L1841.01 1212.27 L1841.6 1212.27 L1842.19 1212.27 L1842.77 1212.27 L1843.36 1212.27 L1843.95 1212.27 L1844.53 1212.27 L1845.12 1212.27 L1845.71 1212.27 L1846.29 1212.27 L1846.88 1212.27 L1847.47 1212.27 L1848.05 1212.27 L1848.64 1212.27 L1849.22 1212.27 L1849.81 1212.27 L1850.4 1212.27 L1850.98 1212.27 L1851.57 1212.27 L1852.16 1212.27 L1852.74 1212.27 L1853.33 1212.27 L1853.92 1212.27 L1854.5 1212.27 L1855.09 1212.27 L1855.68 1212.27 L1856.26 1212.27 L1856.85 1212.27 L1857.43 1212.27 L1858.02 1212.27 L1858.61 1212.27 L1859.19 1212.27 L1859.78 1212.27 L1860.37 1212.27 L1860.95 1212.27 L1861.54 1212.27 L1862.13 1212.27 L1862.71 1212.27 L1863.3 1212.27 L1863.88 1212.27 L1864.47 1212.27 L1865.06 1212.27 L1865.64 1212.27 L1866.23 1212.27 L1866.82 1212.27 L1867.4 1212.27 L1867.99 1212.27 L1868.58 1212.27 L1869.16 1212.27 L1869.75 1212.27 L1870.34 1212.27 L1870.92 1212.27 L1871.51 1212.27 L1872.09 1212.27 L1872.68 1212.27 L1873.27 1212.27 L1873.85 1212.27 L1874.44 1212.27 L1875.03 1212.27 L1875.61 1212.27 L1876.2 1212.27 L1876.79 1212.27 L1877.37 1212.27 L1877.96 1212.27 L1878.55 1212.27 L1879.13 1212.27 L1879.72 1212.27 L1880.3 1212.27 L1880.89 1212.27 L1881.48 1212.27 L1882.06 1212.27 L1882.65 1212.27 L1883.24 1212.27 L1883.82 1212.27 L1884.41 1212.27 L1885 1212.27 L1885.58 1212.27 L1886.17 1212.27 L1886.76 1212.27 L1887.34 1212.27 L1887.93 1212.27 L1888.51 1212.27 L1889.1 1212.27 L1889.69 1212.27 L1890.27 1212.27 L1890.86 1212.27 L1891.45 1212.27 L1892.03 1212.27 L1892.62 1212.27 L1893.21 1212.27 L1893.79 1212.27 L1894.38 1212.27 L1894.96 1212.27 L1895.55 1212.27 L1896.14 1212.27 L1896.72 1212.27 L1897.31 1212.27 L1897.9 1212.27 L1898.48 1212.27 L1899.07 1212.27 L1899.66 1212.27 L1900.24 1212.27 L1900.83 1212.27 L1901.42 1212.27 L1902 1212.27 L1902.59 1212.27 L1903.17 1212.27 L1903.76 1212.27 L1904.35 1212.27 L1904.93 1212.27 L1905.52 1212.27 L1906.11 1212.27 L1906.69 1212.27 L1907.28 1212.27 L1907.87 1212.27 L1908.45 1212.27 L1909.04 1212.27 L1909.63 1212.27 L1910.21 1212.27 L1910.8 1212.27 L1911.38 1212.27 L1911.97 1212.27 L1912.56 1212.27 L1913.14 1212.27 L1913.73 1212.27 L1914.32 1212.27 L1914.9 1212.27 L1915.49 1212.27 L1916.08 1212.27 L1916.66 1212.27 L1917.25 1212.27 L1917.83 1212.27 L1918.42 1212.27 L1919.01 1212.27 L1919.59 1212.27 L1920.18 1212.27 L1920.77 1212.27 L1921.35 1212.27 L1921.94 1212.27 L1922.53 1212.27 L1923.11 1212.27 L1923.7 1212.27 L1924.29 1212.27 L1924.87 1212.27 L1925.46 1212.27 L1926.04 1212.27 L1926.63 1212.27 L1927.22 1212.27 L1927.8 1212.27 L1928.39 1212.27 L1928.98 1212.27 L1929.56 1212.27 L1930.15 1212.27 L1930.74 1212.27 L1931.32 1212.27 L1931.91 1212.27 L1932.5 1212.27 L1933.08 1212.27 L1933.67 1212.27 L1934.25 1212.27 L1934.84 1212.27 L1935.43 1212.27 L1936.01 1212.27 L1936.6 1212.27 L1937.19 1212.27 L1937.77 1212.27 L1938.36 1212.27 L1938.95 1212.27 L1939.53 1212.27 L1940.12 1212.27 L1940.71 1212.27 L1941.29 1212.27 L1941.88 1212.27 L1942.46 1212.27 L1943.05 1212.27 L1943.64 1212.27 L1944.22 1212.27 L1944.81 1212.27 L1945.4 1212.27 L1945.98 1212.27 L1946.57 1212.27 L1947.16 1212.27 L1947.74 1212.27 L1948.33 1212.27 L1948.91 1212.27 L1949.5 1212.27 L1950.09 1212.27 L1950.67 1212.27 L1951.26 1212.27 L1951.85 1212.27 L1952.43 1212.27 L1953.02 1212.27 L1953.61 1212.27 L1954.19 1212.27 L1954.78 1212.27 L1955.37 1212.27 L1955.95 1212.27 L1956.54 1212.27 L1957.12 1212.27 L1957.71 1212.27 L1958.3 1212.27 L1958.88 1212.27 L1959.47 1212.27 L1960.06 1212.27 L1960.64 1212.27 L1961.23 1212.27 L1961.82 1212.27 L1962.4 1212.27 L1962.99 1212.27 L1963.58 1212.27 L1964.16 1212.27 L1964.75 1212.27 L1965.33 1212.27 L1965.92 1212.27 L1966.51 1212.27 L1967.09 1212.27 L1967.68 1212.27 L1968.27 1212.27 L1968.85 1212.27 L1969.44 1212.27 L1970.03 1212.27 L1970.61 1212.27 L1971.2 1212.27 L1971.78 1212.27 L1972.37 1212.27 L1972.96 1212.27 L1973.54 1212.27 L1974.13 1212.27 L1974.72 1212.27 L1975.3 1212.27 L1975.89 1212.27 L1976.48 1212.27 L1977.06 1212.27 L1977.65 1212.27 L1978.24 1212.27 L1978.82 1212.27 L1979.41 1212.27 L1979.99 1212.27 L1980.58 1212.27 L1981.17 1212.27 L1981.75 1212.27 L1982.34 1212.27 L1982.93 1212.27 L1983.51 1212.27 L1984.1 1212.27 L1984.69 1212.27 L1985.27 1212.27 L1985.86 1212.27 L1986.45 1212.27 L1987.03 1212.27 L1987.62 1212.27 L1988.2 1212.27 L1988.79 1212.27 L1989.38 1212.27 L1989.96 1212.27 L1990.55 1212.27 L1991.14 1212.27 L1991.72 1212.27 L1992.31 1212.27 L1992.9 1212.27 L1993.48 1212.27 L1994.07 1212.27 L1994.65 1212.27 L1995.24 1212.27 L1995.83 1212.27 L1996.41 1212.27 L1997 1212.27 L1997.59 1212.27 L1998.17 1212.27 L1998.76 1212.27 L1999.35 1212.27 L1999.93 1212.27 L2000.52 1212.27 L2001.11 1212.27 L2001.69 1212.27 L2002.28 1212.27 L2002.86 1212.27 L2003.45 1212.27 L2004.04 1212.27 L2004.62 1212.27 L2005.21 1212.27 L2005.8 1212.27 L2006.38 1212.27 L2006.97 1212.27 L2007.56 1212.27 L2008.14 1212.27 L2008.73 1212.27 L2009.32 1212.27 L2009.9 1212.27 L2010.49 1212.27 L2011.07 1212.27 L2011.66 1212.27 L2012.25 1212.27 L2012.83 1212.27 L2013.42 1212.27 L2014.01 1212.27 L2014.59 1212.27 L2015.18 1212.27 L2015.77 1212.27 L2016.35 1212.27 L2016.94 1212.27 L2017.53 1212.27 L2018.11 1212.27 L2018.7 1212.27 L2019.28 1212.27 L2019.87 1212.27 L2020.46 1212.27 L2021.04 1212.27 L2021.63 1212.27 L2022.22 1212.27 L2022.8 1212.27 L2023.39 1212.27 L2023.98 1212.27 L2024.56 1212.27 L2025.15 1212.27 L2025.73 1212.27 L2026.32 1212.27 L2026.91 1212.27 L2027.49 1212.27 L2028.08 1212.27 L2028.67 1212.27 L2029.25 1212.27 L2029.84 1212.27 L2030.43 1212.27 L2031.01 1212.27 L2031.6 1212.27 L2032.19 1212.27 L2032.77 1212.27 L2033.36 1212.27 L2033.94 1212.27 L2034.53 1212.27 L2035.12 1212.27 L2035.7 1212.27 L2036.29 1212.27 L2036.88 1212.27 L2037.46 1212.27 L2038.05 1212.27 L2038.64 1212.27 L2039.22 1212.27 L2039.81 1212.27 L2040.4 1212.27 L2040.98 1212.27 L2041.57 1212.27 L2042.15 1212.27 L2042.74 1212.27 L2043.33 1212.27 L2043.91 1212.27 L2044.5 1212.27 L2045.09 1212.27 L2045.67 1212.27 L2046.26 1212.27 L2046.85 1212.27 L2047.43 1212.27 L2048.02 1212.27 L2048.6 1212.27 L2049.19 1212.27 L2049.78 1212.27 L2050.36 1212.27 L2050.95 1212.27 L2051.54 1212.27 L2052.12 1212.27 L2052.71 1212.27 L2053.3 1212.27 L2053.88 1212.27 L2054.47 1212.27 L2055.06 1212.27 L2055.64 1212.27 L2056.23 1212.27 L2056.81 1212.27 L2057.4 1212.27 L2057.99 1212.27 L2058.57 1212.27 L2059.16 1212.27 L2059.75 1212.27 L2060.33 1212.27 L2060.92 1212.27 L2061.51 1212.27 L2062.09 1212.27 L2062.68 1212.27 L2063.27 1212.27 L2063.85 1212.27 L2064.44 1212.27 L2065.02 1212.27 L2065.61 1212.27 L2066.2 1212.27 L2066.78 1212.27 L2067.37 1212.27 L2067.96 1212.27 L2068.54 1212.27 L2069.13 1212.27 L2069.72 1212.27 L2070.3 1212.27 L2070.89 1212.27 L2071.48 1212.27 L2072.06 1212.27 L2072.65 1212.27 L2073.23 1212.27 L2073.82 1212.27 L2074.41 1212.27 L2074.99 1212.27 L2075.58 1212.27 L2076.17 1212.27 L2076.75 1212.27 L2077.34 1212.27 L2077.93 1212.27 L2078.51 1212.27 L2079.1 1212.27 L2079.68 1212.27 L2080.27 1212.27 L2080.86 1212.27 L2081.44 1212.27 L2082.03 1212.27 L2082.62 1212.27 L2083.2 1212.27 L2083.79 1212.27 L2084.38 1212.27 L2084.96 1212.27 L2085.55 1212.27 L2086.14 1212.27 L2086.72 1212.27 L2087.31 1212.27 L2087.89 1212.27 L2088.48 1212.27 L2089.07 1212.27 L2089.65 1212.27 L2090.24 1212.27 L2090.83 1212.27 L2091.41 1212.27 L2092 1212.27 L2092.59 1212.27 L2093.17 1212.27 L2093.76 1212.27 L2094.35 1212.27 L2094.93 1212.27 L2095.52 1212.27 L2096.1 1212.27 L2096.69 1212.27 L2097.28 1212.27 L2097.86 1212.27 L2098.45 1212.27 L2099.04 1212.27 L2099.62 1212.27 L2100.21 1212.27 L2100.8 1212.27 L2101.38 1212.27 L2101.97 1212.27 L2102.55 1212.27 L2103.14 1212.27 L2103.73 1212.27 L2104.31 1212.27 L2104.9 1212.27 L2105.49 1212.27 L2106.07 1212.27 L2106.66 1212.27 L2107.25 1212.27 L2107.83 1212.27 L2108.42 1212.27 L2109.01 1212.27 L2109.59 1212.27 L2110.18 1212.27 L2110.76 1212.27 L2111.35 1212.27 L2111.94 1212.27 L2112.52 1212.27 L2113.11 1212.27 L2113.7 1212.27 L2114.28 1212.27 L2114.87 1212.27 L2115.46 1212.27 L2116.04 1212.27 L2116.63 1212.27 L2117.22 1212.27 L2117.8 1212.27 L2118.39 1212.27 L2118.97 1212.27 L2119.56 1212.27 L2120.15 1212.27 L2120.73 1212.27 L2121.32 1212.27 L2121.91 1212.27 L2122.49 1212.27 L2123.08 1212.27 L2123.67 1212.27 L2124.25 1212.27 L2124.84 1212.27 L2125.42 1212.27 L2126.01 1212.27 L2126.6 1212.27 L2127.18 1212.27 L2127.77 1212.27 L2128.36 1212.27 L2128.94 1212.27 L2129.53 1212.27 L2130.12 1212.27 L2130.7 1212.27 L2131.29 1212.27 L2131.88 1212.27 L2132.46 1212.27 L2133.05 1212.27 L2133.63 1212.27 L2134.22 1212.27 L2134.81 1212.27 L2135.39 1212.27 L2135.98 1212.27 L2136.57 1212.27 L2137.15 1212.27 L2137.74 1212.27 L2138.33 1212.27 L2138.91 1212.27 L2139.5 1212.27 L2140.09 1212.27 L2140.67 1212.27 L2141.26 1212.27 L2141.84 1212.27 L2142.43 1212.27 L2143.02 1212.27 L2143.6 1212.27 L2144.19 1212.27 L2144.78 1212.27 L2145.36 1212.27 L2145.95 1212.27 L2146.54 1212.27 L2147.12 1212.27 L2147.71 1212.27 L2148.3 1212.27 L2148.88 1212.27 L2149.47 1212.27 L2150.05 1212.27 L2150.64 1212.27 L2151.23 1212.27 L2151.81 1212.27 L2152.4 1212.27 L2152.99 1212.27 L2153.57 1212.27 L2154.16 1212.27 L2154.75 1212.27 L2155.33 1212.27 L2155.92 1212.27 L2156.5 1212.27 L2157.09 1212.27 L2157.68 1212.27 L2158.26 1212.27 L2158.26 1211.53 L2157.68 1211.53 L2157.09 1211.53 L2156.5 1211.53 L2155.92 1211.53 L2155.33 1211.53 L2154.75 1211.53 L2154.16 1211.53 L2153.57 1211.53 L2152.99 1211.53 L2152.4 1211.53 L2151.81 1211.53 L2151.23 1211.53 L2150.64 1211.53 L2150.05 1211.53 L2149.47 1211.53 L2148.88 1211.53 L2148.3 1211.53 L2147.71 1211.53 L2147.12 1211.53 L2146.54 1211.53 L2145.95 1211.53 L2145.36 1211.53 L2144.78 1211.53 L2144.19 1211.53 L2143.6 1211.53 L2143.02 1211.53 L2142.43 1211.53 L2141.84 1211.53 L2141.26 1211.53 L2140.67 1211.53 L2140.09 1211.53 L2139.5 1211.53 L2138.91 1211.53 L2138.33 1211.53 L2137.74 1211.53 L2137.15 1211.53 L2136.57 1211.53 L2135.98 1211.53 L2135.39 1211.53 L2134.81 1211.53 L2134.22 1211.53 L2133.63 1211.53 L2133.05 1211.53 L2132.46 1211.53 L2131.88 1211.53 L2131.29 1211.53 L2130.7 1211.53 L2130.12 1211.53 L2129.53 1211.53 L2128.94 1211.53 L2128.36 1211.53 L2127.77 1211.53 L2127.18 1211.53 L2126.6 1211.53 L2126.01 1211.53 L2125.42 1211.53 L2124.84 1211.53 L2124.25 1211.53 L2123.67 1211.53 L2123.08 1211.53 L2122.49 1211.53 L2121.91 1211.53 L2121.32 1211.53 L2120.73 1211.53 L2120.15 1211.53 L2119.56 1211.53 L2118.97 1211.53 L2118.39 1211.53 L2117.8 1211.53 L2117.22 1211.53 L2116.63 1211.53 L2116.04 1211.53 L2115.46 1211.53 L2114.87 1211.53 L2114.28 1211.53 L2113.7 1211.53 L2113.11 1211.53 L2112.52 1211.53 L2111.94 1211.53 L2111.35 1211.53 L2110.76 1211.53 L2110.18 1211.53 L2109.59 1211.53 L2109.01 1211.53 L2108.42 1211.53 L2107.83 1211.53 L2107.25 1211.53 L2106.66 1211.53 L2106.07 1211.53 L2105.49 1211.53 L2104.9 1211.53 L2104.31 1211.53 L2103.73 1211.53 L2103.14 1211.53 L2102.55 1211.53 L2101.97 1211.53 L2101.38 1211.53 L2100.8 1211.53 L2100.21 1211.53 L2099.62 1211.53 L2099.04 1211.53 L2098.45 1211.53 L2097.86 1211.53 L2097.28 1211.53 L2096.69 1211.53 L2096.1 1211.53 L2095.52 1211.53 L2094.93 1211.53 L2094.35 1211.53 L2093.76 1211.53 L2093.17 1211.53 L2092.59 1211.53 L2092 1211.53 L2091.41 1211.53 L2090.83 1211.53 L2090.24 1211.53 L2089.65 1211.53 L2089.07 1211.53 L2088.48 1211.53 L2087.89 1211.53 L2087.31 1211.53 L2086.72 1211.53 L2086.14 1211.53 L2085.55 1211.53 L2084.96 1211.53 L2084.38 1211.53 L2083.79 1211.53 L2083.2 1211.53 L2082.62 1211.53 L2082.03 1211.53 L2081.44 1211.53 L2080.86 1211.53 L2080.27 1211.53 L2079.68 1211.53 L2079.1 1211.53 L2078.51 1211.53 L2077.93 1211.53 L2077.34 1211.53 L2076.75 1211.53 L2076.17 1211.53 L2075.58 1211.53 L2074.99 1211.53 L2074.41 1211.53 L2073.82 1211.53 L2073.23 1211.53 L2072.65 1211.53 L2072.06 1211.53 L2071.48 1211.53 L2070.89 1211.53 L2070.3 1211.53 L2069.72 1211.53 L2069.13 1211.53 L2068.54 1211.53 L2067.96 1211.53 L2067.37 1211.53 L2066.78 1211.53 L2066.2 1211.53 L2065.61 1211.53 L2065.02 1211.53 L2064.44 1211.53 L2063.85 1211.53 L2063.27 1211.53 L2062.68 1211.53 L2062.09 1211.53 L2061.51 1211.53 L2060.92 1211.53 L2060.33 1211.53 L2059.75 1211.53 L2059.16 1211.53 L2058.57 1211.53 L2057.99 1211.53 L2057.4 1211.53 L2056.81 1211.53 L2056.23 1211.53 L2055.64 1211.53 L2055.06 1211.53 L2054.47 1211.53 L2053.88 1211.53 L2053.3 1211.53 L2052.71 1211.53 L2052.12 1211.53 L2051.54 1211.53 L2050.95 1211.53 L2050.36 1211.53 L2049.78 1211.53 L2049.19 1211.53 L2048.6 1211.53 L2048.02 1211.53 L2047.43 1211.53 L2046.85 1211.53 L2046.26 1211.53 L2045.67 1211.53 L2045.09 1211.53 L2044.5 1211.53 L2043.91 1211.53 L2043.33 1211.53 L2042.74 1211.53 L2042.15 1211.53 L2041.57 1211.53 L2040.98 1211.53 L2040.4 1211.53 L2039.81 1211.53 L2039.22 1211.53 L2038.64 1211.53 L2038.05 1211.53 L2037.46 1211.53 L2036.88 1211.53 L2036.29 1211.53 L2035.7 1211.53 L2035.12 1211.53 L2034.53 1211.53 L2033.94 1211.53 L2033.36 1211.53 L2032.77 1211.53 L2032.19 1211.53 L2031.6 1211.53 L2031.01 1211.53 L2030.43 1211.53 L2029.84 1211.53 L2029.25 1211.53 L2028.67 1211.53 L2028.08 1211.53 L2027.49 1211.53 L2026.91 1211.53 L2026.32 1211.53 L2025.73 1211.53 L2025.15 1211.53 L2024.56 1211.53 L2023.98 1211.53 L2023.39 1211.53 L2022.8 1211.53 L2022.22 1211.53 L2021.63 1211.53 L2021.04 1211.53 L2020.46 1211.53 L2019.87 1211.53 L2019.28 1211.53 L2018.7 1211.53 L2018.11 1211.53 L2017.53 1211.53 L2016.94 1211.53 L2016.35 1211.53 L2015.77 1211.53 L2015.18 1211.53 L2014.59 1211.53 L2014.01 1211.53 L2013.42 1211.53 L2012.83 1211.53 L2012.25 1211.53 L2011.66 1211.53 L2011.07 1211.53 L2010.49 1211.53 L2009.9 1211.53 L2009.32 1211.53 L2008.73 1211.53 L2008.14 1211.53 L2007.56 1211.53 L2006.97 1211.53 L2006.38 1211.53 L2005.8 1211.53 L2005.21 1211.53 L2004.62 1211.53 L2004.04 1211.53 L2003.45 1211.53 L2002.86 1211.53 L2002.28 1211.53 L2001.69 1211.53 L2001.11 1211.53 L2000.52 1211.53 L1999.93 1211.53 L1999.35 1211.53 L1998.76 1211.53 L1998.17 1211.53 L1997.59 1211.53 L1997 1211.53 L1996.41 1211.53 L1995.83 1211.53 L1995.24 1211.53 L1994.65 1211.53 L1994.07 1211.53 L1993.48 1211.53 L1992.9 1211.53 L1992.31 1211.53 L1991.72 1211.53 L1991.14 1211.53 L1990.55 1211.53 L1989.96 1211.53 L1989.38 1211.53 L1988.79 1211.53 L1988.2 1211.53 L1987.62 1211.53 L1987.03 1211.53 L1986.45 1211.53 L1985.86 1211.53 L1985.27 1211.53 L1984.69 1211.53 L1984.1 1211.53 L1983.51 1211.53 L1982.93 1211.53 L1982.34 1211.53 L1981.75 1211.53 L1981.17 1211.53 L1980.58 1211.53 L1979.99 1211.53 L1979.41 1211.53 L1978.82 1211.53 L1978.24 1211.53 L1977.65 1211.53 L1977.06 1211.53 L1976.48 1211.53 L1975.89 1211.53 L1975.3 1211.53 L1974.72 1211.53 L1974.13 1211.53 L1973.54 1211.53 L1972.96 1211.53 L1972.37 1211.53 L1971.78 1211.53 L1971.2 1211.53 L1970.61 1211.53 L1970.03 1211.53 L1969.44 1211.53 L1968.85 1211.53 L1968.27 1211.53 L1967.68 1211.53 L1967.09 1211.53 L1966.51 1211.53 L1965.92 1211.53 L1965.33 1211.53 L1964.75 1211.53 L1964.16 1211.53 L1963.58 1211.53 L1962.99 1211.53 L1962.4 1211.53 L1961.82 1211.53 L1961.23 1211.53 L1960.64 1211.53 L1960.06 1211.53 L1959.47 1211.53 L1958.88 1211.53 L1958.3 1211.53 L1957.71 1211.53 L1957.12 1211.53 L1956.54 1211.53 L1955.95 1211.53 L1955.37 1211.53 L1954.78 1211.53 L1954.19 1211.53 L1953.61 1211.53 L1953.02 1211.53 L1952.43 1211.53 L1951.85 1211.53 L1951.26 1211.53 L1950.67 1211.53 L1950.09 1211.53 L1949.5 1211.53 L1948.91 1211.53 L1948.33 1211.53 L1947.74 1211.53 L1947.16 1211.53 L1946.57 1211.53 L1945.98 1211.53 L1945.4 1211.53 L1944.81 1211.53 L1944.22 1211.53 L1943.64 1211.53 L1943.05 1211.53 L1942.46 1211.53 L1941.88 1211.53 L1941.29 1211.53 L1940.71 1211.53 L1940.12 1211.53 L1939.53 1211.53 L1938.95 1211.53 L1938.36 1211.53 L1937.77 1211.53 L1937.19 1211.53 L1936.6 1211.53 L1936.01 1211.53 L1935.43 1211.53 L1934.84 1211.53 L1934.25 1211.53 L1933.67 1211.53 L1933.08 1211.53 L1932.5 1211.53 L1931.91 1211.53 L1931.32 1211.53 L1930.74 1211.53 L1930.15 1211.53 L1929.56 1211.53 L1928.98 1211.53 L1928.39 1211.53 L1927.8 1211.53 L1927.22 1211.53 L1926.63 1211.53 L1926.04 1211.53 L1925.46 1211.53 L1924.87 1211.53 L1924.29 1211.53 L1923.7 1211.53 L1923.11 1211.53 L1922.53 1211.53 L1921.94 1211.53 L1921.35 1211.53 L1920.77 1211.53 L1920.18 1211.53 L1919.59 1211.53 L1919.01 1211.53 L1918.42 1211.53 L1917.83 1211.53 L1917.25 1211.53 L1916.66 1211.53 L1916.08 1211.53 L1915.49 1211.53 L1914.9 1211.53 L1914.32 1211.53 L1913.73 1211.53 L1913.14 1211.53 L1912.56 1211.53 L1911.97 1211.53 L1911.38 1211.53 L1910.8 1211.53 L1910.21 1211.53 L1909.63 1211.53 L1909.04 1211.53 L1908.45 1211.53 L1907.87 1211.53 L1907.28 1211.53 L1906.69 1211.53 L1906.11 1211.53 L1905.52 1211.53 L1904.93 1211.53 L1904.35 1211.53 L1903.76 1211.53 L1903.17 1211.53 L1902.59 1211.53 L1902 1211.53 L1901.42 1211.53 L1900.83 1211.53 L1900.24 1211.53 L1899.66 1211.53 L1899.07 1211.53 L1898.48 1211.53 L1897.9 1211.53 L1897.31 1211.53 L1896.72 1211.53 L1896.14 1211.53 L1895.55 1211.53 L1894.96 1211.53 L1894.38 1211.53 L1893.79 1211.53 L1893.21 1211.53 L1892.62 1211.53 L1892.03 1211.53 L1891.45 1211.53 L1890.86 1211.53 L1890.27 1211.53 L1889.69 1211.53 L1889.1 1211.53 L1888.51 1211.53 L1887.93 1211.53 L1887.34 1211.53 L1886.76 1211.53 L1886.17 1211.53 L1885.58 1211.53 L1885 1211.53 L1884.41 1211.53 L1883.82 1211.53 L1883.24 1211.53 L1882.65 1211.53 L1882.06 1211.53 L1881.48 1211.53 L1880.89 1211.53 L1880.3 1211.53 L1879.72 1211.53 L1879.13 1211.53 L1878.55 1211.53 L1877.96 1211.53 L1877.37 1211.53 L1876.79 1211.53 L1876.2 1211.53 L1875.61 1211.53 L1875.03 1211.53 L1874.44 1211.53 L1873.85 1211.53 L1873.27 1211.53 L1872.68 1211.53 L1872.09 1211.53 L1871.51 1211.53 L1870.92 1211.53 L1870.34 1211.53 L1869.75 1211.53 L1869.16 1211.53 L1868.58 1211.53 L1867.99 1211.53 L1867.4 1211.53 L1866.82 1211.53 L1866.23 1211.53 L1865.64 1211.53 L1865.06 1211.53 L1864.47 1211.53 L1863.88 1211.53 L1863.3 1211.53 L1862.71 1211.53 L1862.13 1211.53 L1861.54 1211.53 L1860.95 1211.53 L1860.37 1211.53 L1859.78 1211.53 L1859.19 1211.53 L1858.61 1211.53 L1858.02 1211.53 L1857.43 1211.53 L1856.85 1211.53 L1856.26 1211.53 L1855.68 1211.53 L1855.09 1211.53 L1854.5 1211.53 L1853.92 1211.53 L1853.33 1211.53 L1852.74 1211.53 L1852.16 1211.53 L1851.57 1211.53 L1850.98 1211.53 L1850.4 1211.53 L1849.81 1211.53 L1849.22 1211.53 L1848.64 1211.53 L1848.05 1211.53 L1847.47 1211.53 L1846.88 1211.53 L1846.29 1211.53 L1845.71 1211.53 L1845.12 1211.53 L1844.53 1211.53 L1843.95 1211.53 L1843.36 1211.53 L1842.77 1211.53 L1842.19 1211.53 L1841.6 1211.53 L1841.01 1211.53 L1840.43 1211.53 L1839.84 1211.53 L1839.26 1211.53 L1838.67 1211.53 L1838.08 1211.53 L1837.5 1211.53 L1836.91 1211.53 L1836.32 1211.53 L1835.74 1211.53 L1835.15 1211.53 L1834.56 1211.53 L1833.98 1211.53 L1833.39 1211.53 L1832.81 1211.53 L1832.22 1211.53 L1831.63 1211.53 L1831.05 1211.53 L1830.46 1211.53 L1829.87 1211.53 L1829.29 1211.53 L1828.7 1211.53 L1828.11 1211.53 L1827.53 1211.53 L1826.94 1211.53 L1826.35 1211.53 L1825.77 1211.53 L1825.18 1211.53 L1824.6 1211.53 L1824.01 1211.53 L1823.42 1211.53 L1822.84 1211.53 L1822.25 1211.53 L1821.66 1211.53 L1821.08 1211.53 L1820.49 1211.53 L1819.9 1211.53 L1819.32 1211.53 L1818.73 1211.53 L1818.14 1211.53 L1817.56 1211.53 L1816.97 1211.53 L1816.39 1211.53 L1815.8 1211.53 L1815.21 1211.53 L1814.63 1211.53 L1814.04 1211.53 L1813.45 1211.53 L1812.87 1211.53 L1812.28 1211.53 L1811.69 1211.53 L1811.11 1211.53 L1810.52 1211.53 L1809.94 1211.53 L1809.35 1211.53 L1808.76 1211.53 L1808.18 1211.53 L1807.59 1211.53 L1807 1211.53 L1806.42 1211.53 L1805.83 1211.53 L1805.24 1211.53 L1804.66 1211.53 L1804.07 1211.53 L1803.48 1211.53 L1802.9 1211.53 L1802.31 1211.53 L1801.73 1211.53 L1801.14 1211.53 L1800.55 1211.53 L1799.97 1211.53 L1799.38 1211.53 L1798.79 1211.53 L1798.21 1211.53 L1797.62 1211.53 L1797.03 1211.53 L1796.45 1211.53 L1795.86 1211.53 L1795.27 1211.53 L1794.69 1211.53 L1794.1 1211.53 L1793.52 1211.53 L1792.93 1211.53 L1792.34 1211.53 L1791.76 1211.53 L1791.17 1211.53 L1790.58 1211.53 L1790 1211.53 L1789.41 1211.53 L1788.82 1211.53 L1788.24 1211.53 L1787.65 1211.53 L1787.06 1211.53 L1786.48 1211.53 L1785.89 1211.53 L1785.31 1211.53 L1784.72 1211.53 L1784.13 1211.53 L1783.55 1211.53 L1782.96 1211.53 L1782.37 1211.53 L1781.79 1211.53 L1781.2 1211.53 L1780.61 1211.53 L1780.03 1211.53 L1779.44 1211.53 L1778.86 1211.53 L1778.27 1211.53 L1777.68 1211.53 L1777.1 1211.53 L1776.51 1211.53 L1775.92 1211.53 L1775.34 1211.53 L1774.75 1211.53 L1774.16 1211.53 L1773.58 1211.53 L1772.99 1211.53 L1772.4 1211.53 L1771.82 1211.53 L1771.23 1211.53 L1770.65 1211.53 L1770.06 1211.53 L1769.47 1211.53 L1768.89 1211.53 L1768.3 1211.53 L1767.71 1211.53 L1767.13 1211.53 L1766.54 1211.53 L1765.95 1211.53 L1765.37 1211.53 L1764.78 1211.53 L1764.19 1211.53 L1763.61 1211.53 L1763.02 1211.53 L1762.44 1211.53 L1761.85 1211.53 L1761.26 1211.53 L1760.68 1211.53 L1760.09 1211.53 L1759.5 1211.53 L1758.92 1211.53 L1758.33 1211.53 L1757.74 1211.53 L1757.16 1211.53 L1756.57 1211.53 L1755.99 1211.53 L1755.4 1211.53 L1754.81 1211.53 L1754.23 1211.53 L1753.64 1211.53 L1753.05 1211.53 L1752.47 1211.53 L1751.88 1211.53 L1751.29 1211.53 L1750.71 1211.53 L1750.12 1211.53 L1749.53 1211.53 L1748.95 1211.53 L1748.36 1211.53 L1747.78 1211.53 L1747.19 1211.53 L1746.6 1211.53 L1746.02 1211.53 L1745.43 1211.53 L1744.84 1211.53 L1744.26 1211.53 L1743.67 1211.53 L1743.08 1211.53 L1742.5 1211.53 L1741.91 1211.53 L1741.32 1211.53 L1740.74 1211.53 L1740.15 1211.53 L1739.57 1211.53 L1738.98 1211.53 L1738.39 1211.53 L1737.81 1211.53 L1737.22 1211.53 L1736.63 1211.53 L1736.05 1211.53 L1735.46 1211.53 L1734.87 1211.53 L1734.29 1211.53 L1733.7 1211.53 L1733.11 1211.53 L1732.53 1211.53 L1731.94 1211.53 L1731.36 1211.53 L1730.77 1211.53 L1730.18 1211.53 L1729.6 1211.53 L1729.01 1211.53 L1728.42 1211.53 L1727.84 1211.53 L1727.25 1211.53 L1726.66 1211.53 L1726.08 1211.53 L1725.49 1211.53 L1724.91 1211.53 L1724.32 1211.53 L1723.73 1211.53 L1723.15 1211.53 L1722.56 1211.53 L1721.97 1211.53 L1721.39 1211.53 L1720.8 1211.53 L1720.21 1211.53 L1719.63 1211.53 L1719.04 1211.53 L1718.45 1211.53 L1717.87 1211.53 L1717.28 1211.53 L1716.7 1211.53 L1716.11 1211.53 L1715.52 1211.53 L1714.94 1211.53 L1714.35 1211.53 L1713.76 1211.53 L1713.18 1211.53 L1712.59 1211.53 L1712 1211.53 L1711.42 1211.53 L1710.83 1211.53 L1710.24 1211.53 L1709.66 1211.53 L1709.07 1211.53 L1708.49 1211.53 L1707.9 1211.53 L1707.31 1211.53 L1706.73 1211.53 L1706.14 1211.53 L1705.55 1211.53 L1704.97 1211.53 L1704.38 1211.53 L1703.79 1211.53 L1703.21 1211.53 L1702.62 1211.53 L1702.04 1211.53 L1701.45 1211.53 L1700.86 1211.53 L1700.28 1211.53 L1699.69 1211.53 L1699.1 1211.53 L1698.52 1211.53 L1697.93 1211.53 L1697.34 1211.53 L1696.76 1211.53 L1696.17 1211.53 L1695.58 1211.53 L1695 1211.53 L1694.41 1211.53 L1693.83 1211.53 L1693.24 1211.53 L1692.65 1211.53 L1692.07 1211.53 L1691.48 1211.53 L1690.89 1211.53 L1690.31 1211.53 L1689.72 1211.53 L1689.13 1211.53 L1688.55 1211.53 L1687.96 1211.53 L1687.37 1211.53 L1686.79 1211.53 L1686.2 1211.53 L1685.62 1211.53 L1685.03 1211.53 L1684.44 1211.53 L1683.86 1211.53 L1683.27 1211.53 L1682.68 1211.53 L1682.1 1211.53 L1681.51 1211.53 L1680.92 1211.53 L1680.34 1211.53 L1679.75 1211.53 L1679.17 1211.53 L1678.58 1211.53 L1677.99 1211.53 L1677.41 1211.53 L1676.82 1211.53 L1676.23 1211.53 L1675.65 1211.53 L1675.06 1211.53 L1674.47 1211.53 L1673.89 1211.53 L1673.3 1211.53 L1672.71 1211.53 L1672.13 1211.53 L1671.54 1211.53 L1670.96 1211.53 L1670.37 1211.53 L1669.78 1211.53 L1669.2 1211.53 L1668.61 1211.53 L1668.02 1211.53 L1667.44 1211.53 L1666.85 1211.53 L1666.26 1211.53 L1665.68 1211.53 L1665.09 1211.53 L1664.5 1211.53 L1663.92 1211.53 L1663.33 1211.53 L1662.75 1211.53 L1662.16 1211.53 L1661.57 1211.53 L1660.99 1211.53 L1660.4 1211.53 L1659.81 1211.53 L1659.23 1211.53 L1658.64 1211.53 L1658.05 1211.53 L1657.47 1211.53 L1656.88 1211.53 L1656.29 1211.53 L1655.71 1211.53 L1655.12 1211.53 L1654.54 1211.53 L1653.95 1211.53 L1653.36 1211.53 L1652.78 1211.53 L1652.19 1211.53 L1651.6 1211.53 L1651.02 1211.53 L1650.43 1211.53 L1649.84 1211.53 L1649.26 1211.53 L1648.67 1211.53 L1648.09 1211.53 L1647.5 1211.53 L1646.91 1211.53 L1646.33 1211.53 L1645.74 1211.53 L1645.15 1211.53 L1644.57 1211.53 L1643.98 1211.53 L1643.39 1211.53 L1642.81 1211.53 L1642.22 1211.53 L1641.63 1211.53 L1641.05 1211.53 L1640.46 1211.53 L1639.88 1211.53 L1639.29 1211.53 L1638.7 1211.53 L1638.12 1211.53 L1637.53 1211.53 L1636.94 1211.53 L1636.36 1211.53 L1635.77 1211.53 L1635.18 1211.53 L1634.6 1211.53 L1634.01 1211.53 L1633.42 1211.53 L1632.84 1211.53 L1632.25 1211.53 L1631.67 1211.53 L1631.08 1211.53 L1630.49 1211.53 L1629.91 1211.53 L1629.32 1211.53 L1628.73 1211.53 L1628.15 1211.53 L1627.56 1211.53 L1626.97 1211.53 L1626.39 1211.53 L1625.8 1211.53 L1625.22 1211.53 L1624.63 1211.53 L1624.04 1211.53 L1623.46 1211.53 L1622.87 1211.53 L1622.28 1211.53 L1621.7 1211.53 L1621.11 1211.53 L1620.52 1211.53 L1619.94 1211.53 L1619.35 1211.53 L1618.76 1211.53 L1618.18 1211.53 L1617.59 1211.53 L1617.01 1211.53 L1616.42 1211.53 L1615.83 1211.53 L1615.25 1211.53 L1614.66 1211.53 L1614.07 1211.53 L1613.49 1211.53 L1612.9 1211.53 L1612.31 1211.53 L1611.73 1211.53 L1611.14 1211.53 L1610.55 1211.53 L1609.97 1211.53 L1609.38 1211.53 L1608.8 1211.53 L1608.21 1211.53 L1607.62 1211.53 L1607.04 1211.53 L1606.45 1211.53 L1605.86 1211.53 L1605.28 1211.53 L1604.69 1211.53 L1604.1 1211.53 L1603.52 1211.53 L1602.93 1211.53 L1602.34 1211.53 L1601.76 1211.53 L1601.17 1211.53 L1600.59 1211.53 L1600 1211.53 L1599.41 1211.53 L1598.83 1211.53 L1598.24 1211.53 L1597.65 1211.53 L1597.07 1211.53 L1596.48 1211.53 L1595.89 1211.53 L1595.31 1211.53 L1594.72 1211.53 L1594.14 1211.53 L1593.55 1211.53 L1592.96 1211.53 L1592.38 1211.53 L1591.79 1211.53 L1591.2 1211.53 L1590.62 1211.53 L1590.03 1211.53 L1589.44 1211.53 L1588.86 1211.53 L1588.27 1211.53 L1587.68 1211.53 L1587.1 1211.53 L1586.51 1211.53 L1585.93 1211.53 L1585.34 1211.53 L1584.75 1211.53 L1584.17 1211.53 L1583.58 1211.53 L1582.99 1211.53 L1582.41 1211.53 L1581.82 1211.53 L1581.23 1211.53 L1580.65 1211.53 L1580.06 1211.53 L1579.47 1211.53 L1578.89 1211.53 L1578.3 1211.53 L1577.72 1211.53 L1577.13 1211.53 L1576.54 1211.53 L1575.96 1211.53 L1575.37 1211.53 L1574.78 1211.53 L1574.2 1211.53 L1573.61 1211.53 L1573.02 1211.53 L1572.44 1211.53 L1571.85 1211.53 L1571.27 1211.53 L1570.68 1211.53 L1570.09 1211.53 L1569.51 1211.53 L1568.92 1211.53 L1568.33 1211.53 L1567.75 1211.53 L1567.16 1211.53 L1566.57 1211.53 L1565.99 1211.53 L1565.4 1211.53 L1564.81 1211.53 L1564.23 1211.53 L1563.64 1211.53 L1563.06 1211.53 L1562.47 1211.53 L1561.88 1211.53 L1561.3 1211.53 L1560.71 1211.53 L1560.12 1211.53 L1559.54 1211.53 L1558.95 1211.53 L1558.36 1211.53 L1557.78 1211.53 L1557.19 1211.53 L1556.6 1211.53 L1556.02 1211.53 L1555.43 1211.53 L1554.85 1211.53 L1554.26 1211.53 L1553.67 1211.53 L1553.09 1211.53 L1552.5 1211.53 L1551.91 1211.53 L1551.33 1211.53 L1550.74 1211.53 L1550.15 1211.53 L1549.57 1211.53 L1548.98 1211.53 L1548.4 1211.53 L1547.81 1211.53 L1547.22 1211.53 L1546.64 1211.53 L1546.05 1211.53 L1545.46 1211.53 L1544.88 1211.53 L1544.29 1211.53 L1543.7 1211.53 L1543.12 1211.53 L1542.53 1211.53 L1541.94 1211.53 L1541.36 1211.53 L1540.77 1211.53 L1540.19 1211.53 L1539.6 1211.53 L1539.01 1211.53 L1538.43 1211.53 L1537.84 1211.53 L1537.25 1211.53 L1536.67 1211.53 L1536.08 1211.53 L1535.49 1211.53 L1534.91 1211.53 L1534.32 1211.53 L1533.73 1211.53 L1533.15 1211.53 L1532.56 1211.53 L1531.98 1211.53 L1531.39 1211.53 L1530.8 1211.53 L1530.22 1211.53 L1529.63 1211.53 L1529.04 1211.53 L1528.46 1211.53 L1527.87 1211.53 L1527.28 1211.53 L1526.7 1211.53 L1526.11 1211.53 L1525.52 1211.53 L1524.94 1211.53 L1524.35 1211.53 L1523.77 1211.53 L1523.18 1211.53 L1522.59 1211.53 L1522.01 1211.53 L1521.42 1211.53 L1520.83 1211.53 L1520.25 1211.53 L1519.66 1211.53 L1519.07 1211.53 L1518.49 1211.53 L1517.9 1211.53 L1517.32 1211.53 L1516.73 1211.53 L1516.14 1211.53 L1515.56 1211.53 L1514.97 1211.53 L1514.38 1211.53 L1513.8 1211.53 L1513.21 1211.53 L1512.62 1211.53 L1512.04 1211.53 L1511.45 1211.53 L1510.86 1211.53 L1510.28 1211.53 L1509.69 1211.53 L1509.11 1211.53 L1508.52 1211.53 L1507.93 1211.53 L1507.35 1211.53 L1506.76 1211.53 L1506.17 1211.53 L1505.59 1211.53 L1505 1211.53 L1504.41 1211.53 L1503.83 1211.53 L1503.24 1211.53 L1502.65 1211.53 L1502.07 1211.53 L1501.48 1211.53 L1500.9 1211.53 L1500.31 1211.53 L1499.72 1211.53 L1499.14 1211.53 L1498.55 1211.53 L1497.96 1211.53 L1497.38 1211.53 L1496.79 1211.53 L1496.2 1211.53 L1495.62 1211.53 L1495.03 1211.53 L1494.45 1211.53 L1493.86 1211.53 L1493.27 1211.53 L1492.69 1211.53 L1492.1 1211.53 L1491.51 1211.53 L1490.93 1211.53 L1490.34 1211.53 L1489.75 1211.53 L1489.17 1211.53 L1488.58 1211.53 L1487.99 1211.53 L1487.41 1211.53 L1486.82 1211.53 L1486.24 1211.53 L1485.65 1211.53 L1485.06 1211.53 L1484.48 1211.53 L1483.89 1211.53 L1483.3 1211.53 L1482.72 1211.53 L1482.13 1211.53 L1481.54 1211.53 L1480.96 1211.53 L1480.37 1211.53 L1479.78 1211.53 L1479.2 1211.53 L1478.61 1211.53 L1478.03 1211.53 L1477.44 1211.53 L1476.85 1211.53 L1476.27 1211.53 L1475.68 1211.53 L1475.09 1211.53 L1474.51 1211.53 L1473.92 1211.53 L1473.33 1211.53 L1472.75 1211.53 L1472.16 1211.53 L1471.57 1211.53 L1470.99 1211.53 L1470.4 1211.53 L1469.82 1211.53 L1469.23 1211.53 L1468.64 1211.53 L1468.06 1211.53 L1467.47 1211.53 L1466.88 1211.53 L1466.3 1211.53 L1465.71 1211.53 L1465.12 1211.53 L1464.54 1211.53 L1463.95 1211.53 L1463.37 1211.53 L1462.78 1211.53 L1462.19 1211.53 L1461.61 1211.53 L1461.02 1211.53 L1460.43 1211.53 L1459.85 1211.53 L1459.26 1211.53 L1458.67 1211.53 L1458.09 1211.53 L1457.5 1211.53 L1456.91 1211.53 L1456.33 1211.53 L1455.74 1211.53 L1455.16 1211.53 L1454.57 1211.53 L1453.98 1211.53 L1453.4 1211.53 L1452.81 1211.53 L1452.22 1211.53 L1451.64 1211.53 L1451.05 1211.53 L1450.46 1211.53 L1449.88 1211.53 L1449.29 1211.53 L1448.7 1211.53 L1448.12 1211.53 L1447.53 1211.53 L1446.95 1211.53 L1446.36 1211.53 L1445.77 1211.53 L1445.19 1211.53 L1444.6 1211.53 L1444.01 1211.53 L1443.43 1211.53 L1442.84 1211.53 L1442.25 1211.53 L1441.67 1211.53 L1441.08 1211.53 L1440.5 1211.53 L1439.91 1211.53 L1439.32 1211.53 L1438.74 1211.53 L1438.15 1211.53 L1437.56 1211.53 L1436.98 1211.53 L1436.39 1211.53 L1435.8 1211.53 L1435.22 1211.53 L1434.63 1211.53 L1434.04 1211.53 L1433.46 1211.53 L1432.87 1211.53 L1432.29 1211.53 L1431.7 1211.53 L1431.11 1211.53 L1430.53 1211.53 L1429.94 1211.53 L1429.35 1211.53 L1428.77 1211.53 L1428.18 1211.53 L1427.59 1211.53 L1427.01 1211.53 L1426.42 1211.53 L1425.83 1211.53 L1425.25 1211.53 L1424.66 1211.53 L1424.08 1211.53 L1423.49 1211.53 L1422.9 1211.53 L1422.32 1211.53 L1421.73 1211.53 L1421.14 1211.53 L1420.56 1211.53 L1419.97 1211.53 L1419.38 1211.53 L1418.8 1211.53 L1418.21 1211.53 L1417.63 1211.53 L1417.04 1211.53 L1416.45 1211.53 L1415.87 1211.53 L1415.28 1211.53 L1414.69 1211.53 L1414.11 1211.53 L1413.52 1211.53 L1412.93 1211.53 L1412.35 1211.53 L1411.76 1211.53 L1411.17 1211.53 L1410.59 1211.53 L1410 1211.53 L1409.42 1211.53 L1408.83 1211.53 L1408.24 1211.53 L1407.66 1211.53 L1407.07 1211.53 L1406.48 1211.53 L1405.9 1211.53 L1405.31 1211.53 L1404.72 1211.53 L1404.14 1211.53 L1403.55 1211.53 L1402.96 1211.53 L1402.38 1211.53 L1401.79 1211.53 L1401.21 1211.53 L1400.62 1211.53 L1400.03 1211.53 L1399.45 1211.53 L1398.86 1211.53 L1398.27 1211.53 L1397.69 1211.53 L1397.1 1211.53 L1396.51 1211.53 L1395.93 1211.53 L1395.34 1211.53 L1394.75 1211.53 L1394.17 1211.53 L1393.58 1211.53 L1393 1211.53 L1392.41 1211.53 L1391.82 1211.53 L1391.24 1211.53 L1390.65 1211.53 L1390.06 1211.53 L1389.48 1211.53 L1388.89 1211.53 L1388.3 1211.53 L1387.72 1211.53 L1387.13 1211.53 L1386.55 1211.53 L1385.96 1211.53 L1385.37 1211.53 L1384.79 1211.53 L1384.2 1211.53 L1383.61 1211.53 L1383.03 1211.53 L1382.44 1211.53 L1381.85 1211.53 L1381.27 1211.53 L1380.68 1211.53 L1380.09 1211.53 L1379.51 1211.53 L1378.92 1211.53 L1378.34 1211.53 L1377.75 1211.53 L1377.16 1211.53 L1376.58 1211.53 L1375.99 1211.53 L1375.4 1211.53 L1374.82 1211.53 L1374.23 1211.53 L1373.64 1211.53 L1373.06 1211.53 L1372.47 1211.53 L1371.88 1211.53 L1371.3 1211.53 L1370.71 1211.53 L1370.13 1211.53 L1369.54 1211.53 L1368.95 1211.53 L1368.37 1211.53 L1367.78 1211.53 L1367.19 1211.53 L1366.61 1211.53 L1366.02 1211.53 L1365.43 1211.53 L1364.85 1211.53 L1364.26 1211.53 L1363.68 1211.53 L1363.09 1211.53 L1362.5 1211.53 L1361.92 1211.53 L1361.33 1211.53 L1360.74 1211.53 L1360.16 1211.53 L1359.57 1211.53 L1358.98 1211.53 L1358.4 1211.53 L1357.81 1211.53 L1357.22 1211.53 L1356.64 1211.53 L1356.05 1211.53 L1355.47 1211.53 L1354.88 1211.53 L1354.29 1211.53 L1353.71 1211.53 L1353.12 1211.53 L1352.53 1211.53 L1351.95 1211.53 L1351.36 1211.53 L1350.77 1211.53 L1350.19 1211.53 L1349.6 1211.53 L1349.01 1211.53 L1348.43 1211.53 L1347.84 1211.53 L1347.26 1211.53 L1346.67 1211.53 L1346.08 1211.53 L1345.5 1211.53 L1344.91 1211.53 L1344.32 1211.53 L1343.74 1211.53 L1343.15 1211.53 L1342.56 1211.53 L1341.98 1211.53 L1341.39 1211.53 L1340.8 1211.53 L1340.22 1211.53 L1339.63 1211.53 L1339.05 1211.53 L1338.46 1211.53 L1337.87 1211.53 L1337.29 1211.53 L1336.7 1211.53 L1336.11 1211.53 L1335.53 1211.53 L1334.94 1211.53 L1334.35 1211.53 L1333.77 1211.53 L1333.18 1211.53 L1332.6 1211.53 L1332.01 1211.53 L1331.42 1211.53 L1330.84 1211.53 L1330.25 1211.53 L1329.66 1211.53 L1329.08 1211.53 L1328.49 1211.53 L1327.9 1211.53 L1327.32 1211.53 L1326.73 1211.53 L1326.14 1211.53 L1325.56 1211.53 L1324.97 1211.53 L1324.39 1211.53 L1323.8 1211.53 L1323.21 1211.53 L1322.63 1211.53 L1322.04 1211.53 L1321.45 1211.53 L1320.87 1211.53 L1320.28 1211.53 L1319.69 1211.53 L1319.11 1211.53 L1318.52 1211.53 L1317.93 1211.53 L1317.35 1211.53 L1316.76 1211.53 L1316.18 1211.53 L1315.59 1211.53 L1315 1211.53 L1314.42 1211.53 L1313.83 1211.53 L1313.24 1211.53 L1312.66 1211.53 L1312.07 1211.53 L1311.48 1211.53 L1310.9 1211.53 L1310.31 1211.53 L1309.73 1211.53 L1309.14 1211.53 L1308.55 1211.53 L1307.97 1211.53 L1307.38 1211.53 L1306.79 1211.53 L1306.21 1211.53 L1305.62 1211.53 L1305.03 1211.53 L1304.45 1211.53 L1303.86 1211.53 L1303.27 1211.53 L1302.69 1211.53 L1302.1 1211.53 L1301.52 1211.53 L1300.93 1211.53 L1300.34 1211.53 L1299.76 1211.53 L1299.17 1211.53 L1298.58 1211.53 L1298 1211.53 L1297.41 1211.53 L1296.82 1211.53 L1296.24 1211.53 L1295.65 1211.53 L1295.06 1211.53 L1294.48 1211.53 L1293.89 1211.53 L1293.31 1211.53 L1292.72 1211.53 L1292.13 1211.53 L1291.55 1211.53 L1290.96 1211.53 L1290.37 1211.53 L1289.79 1211.53 L1289.2 1211.53 L1288.61 1211.53 L1288.03 1211.53 L1287.44 1211.53 L1286.86 1211.53 L1286.27 1211.53 L1285.68 1211.53 L1285.1 1211.53 L1284.51 1211.53 L1283.92 1211.53 L1283.34 1211.53 L1282.75 1211.53 L1282.16 1211.53 L1281.58 1211.53 L1280.99 1211.53 L1280.4 1211.53 L1279.82 1211.53 L1279.23 1211.53 L1278.65 1211.53 L1278.06 1211.53 L1277.47 1211.53 L1276.89 1211.53 L1276.3 1211.53 L1275.71 1211.53 L1275.13 1211.53 L1274.54 1211.53 L1273.95 1211.53 L1273.37 1211.53 L1272.78 1211.53 L1272.19 1211.53 L1271.61 1211.53 L1271.02 1211.53 L1270.44 1211.53 L1269.85 1211.53 L1269.26 1211.53 L1268.68 1211.53 L1268.09 1211.53 L1267.5 1211.53 L1266.92 1211.53 L1266.33 1211.53 L1265.74 1211.53 L1265.16 1211.53 L1264.57 1211.53 L1263.98 1211.53 L1263.4 1211.53 L1262.81 1211.53 L1262.23 1211.53 L1261.64 1211.53 L1261.05 1211.53 L1260.47 1211.53 L1259.88 1211.53 L1259.29 1211.53 L1258.71 1211.53 L1258.12 1211.53 L1257.53 1211.53 L1256.95 1211.53 L1256.36 1211.53 L1255.78 1211.53 L1255.19 1211.53 L1254.6 1211.53 L1254.02 1211.53 L1253.43 1211.53 L1252.84 1211.53 L1252.26 1211.53 L1251.67 1211.53 L1251.08 1211.53 L1250.5 1211.53 L1249.91 1211.53 L1249.32 1211.53 L1248.74 1211.53 L1248.15 1211.53 L1247.57 1211.53 L1246.98 1211.53 L1246.39 1211.53 L1245.81 1211.53 L1245.22 1211.53 L1244.63 1211.53 L1244.05 1211.53 L1243.46 1211.53 L1242.87 1211.53 L1242.29 1211.53 L1241.7 1211.53 L1241.11 1211.53 L1240.53 1211.53 L1239.94 1211.53 L1239.36 1211.53 L1238.77 1211.53 L1238.18 1211.53 L1237.6 1211.53 L1237.01 1211.53 L1236.42 1211.53 L1235.84 1211.53 L1235.25 1211.53 L1234.66 1211.53 L1234.08 1211.53 L1233.49 1211.53 L1232.91 1211.53 L1232.32 1211.53 L1231.73 1211.53 L1231.15 1211.53 L1230.56 1211.53 L1229.97 1211.53 L1229.39 1211.53 L1228.8 1211.53 L1228.21 1211.53 L1227.63 1211.53 L1227.04 1211.53 L1226.45 1211.53 L1225.87 1211.53 L1225.28 1211.53 L1224.7 1211.53 L1224.11 1211.53 L1223.52 1211.53 L1222.94 1211.53 L1222.35 1211.53 L1221.76 1211.53 L1221.18 1211.53 L1220.59 1211.53 L1220 1211.53 L1219.42 1211.53 L1218.83 1211.53 L1218.24 1211.53 L1217.66 1211.53 L1217.07 1211.53 L1216.49 1211.53 L1215.9 1211.53 L1215.31 1211.53 L1214.73 1211.53 L1214.14 1211.53 L1213.55 1211.53 L1212.97 1211.53 L1212.38 1211.53 L1211.79 1211.53 L1211.21 1211.53 L1210.62 1211.53 L1210.03 1211.53 L1209.45 1211.53 L1208.86 1211.53 L1208.28 1211.53 L1207.69 1211.53 L1207.1 1211.53 L1206.52 1211.53 L1205.93 1211.53 L1205.34 1211.53 L1204.76 1211.53 L1204.17 1211.53 L1203.58 1211.53 L1203 1211.53 L1202.41 1211.53 L1201.83 1211.53 L1201.24 1211.53 L1200.65 1211.53 L1200.07 1211.53 L1199.48 1211.53 L1198.89 1211.53 L1198.31 1211.53 L1197.72 1211.53 L1197.13 1211.53 L1196.55 1211.53 L1195.96 1211.53 L1195.37 1211.53 L1194.79 1211.53 L1194.2 1211.53 L1193.62 1211.53 L1193.03 1211.53 L1192.44 1211.53 L1191.86 1211.53 L1191.27 1211.53 L1190.68 1211.53 L1190.1 1211.53 L1189.51 1211.53 L1188.92 1211.53 L1188.34 1211.53 L1187.75 1211.53 L1187.16 1211.53 L1186.58 1211.53 L1185.99 1211.53 L1185.41 1211.53 L1184.82 1211.53 L1184.23 1211.53 L1183.65 1211.53 L1183.06 1211.53 L1182.47 1211.53 L1181.89 1211.53 L1181.3 1211.53 L1180.71 1211.53 L1180.13 1211.53 L1179.54 1211.53 L1178.96 1211.53 L1178.37 1211.53 L1177.78 1211.53 L1177.2 1211.53 L1176.61 1211.53 L1176.02 1211.53 L1175.44 1211.53 L1174.85 1211.53 L1174.26 1211.53 L1173.68 1211.53 L1173.09 1211.53 L1172.5 1211.53 L1171.92 1211.53 L1171.33 1211.53 L1170.75 1211.53 L1170.16 1211.53 L1169.57 1211.53 L1168.99 1211.53 L1168.4 1211.53 L1167.81 1211.53 L1167.23 1211.53 L1166.64 1211.53 L1166.05 1211.53 L1165.47 1211.53 L1164.88 1211.53 L1164.29 1211.53 L1163.71 1211.53 L1163.12 1211.53 L1162.54 1211.53 L1161.95 1211.53 L1161.36 1211.53 L1160.78 1211.53 L1160.19 1211.53 L1159.6 1211.53 L1159.02 1211.53 L1158.43 1211.53 L1157.84 1211.53 L1157.26 1211.53 L1156.67 1211.53 L1156.09 1211.53 L1155.5 1211.53 L1154.91 1211.53 L1154.33 1211.53 L1153.74 1211.53 L1153.15 1211.53 L1152.57 1211.53 L1151.98 1211.53 L1151.39 1211.53 L1150.81 1211.53 L1150.22 1211.53 L1149.63 1211.53 L1149.05 1211.53 L1148.46 1211.53 L1147.88 1211.53 L1147.29 1211.53 L1146.7 1211.53 L1146.12 1211.53 L1145.53 1211.53 L1144.94 1211.53 L1144.36 1211.53 L1143.77 1211.53 L1143.18 1211.53 L1142.6 1211.53 L1142.01 1211.53 L1141.42 1211.53 L1140.84 1211.53 L1140.25 1211.53 L1139.67 1211.53 L1139.08 1211.53 L1138.49 1211.53 L1137.91 1211.53 L1137.32 1211.53 L1136.73 1211.53 L1136.15 1211.53 L1135.56 1211.53 L1134.97 1211.53 L1134.39 1211.53 L1133.8 1211.53 L1133.21 1211.53 L1132.63 1211.53 L1132.04 1211.53 L1131.46 1211.53 L1130.87 1211.53 L1130.28 1211.53 L1129.7 1211.53 L1129.11 1211.53 L1128.52 1211.53 L1127.94 1211.53 L1127.35 1211.53 L1126.76 1211.53 L1126.18 1211.53 L1125.59 1211.53 L1125.01 1211.53 L1124.42 1211.53 L1123.83 1211.53 L1123.25 1211.53 L1122.66 1211.53 L1122.07 1211.53 L1121.49 1211.53 L1120.9 1211.53 L1120.31 1211.53 L1119.73 1211.53 L1119.14 1211.53 L1118.55 1211.53 L1117.97 1211.53 L1117.38 1211.53 L1116.8 1211.53 L1116.21 1211.53 L1115.62 1211.53 L1115.04 1211.53 L1114.45 1211.53 L1113.86 1211.53 L1113.28 1211.53 L1112.69 1211.53 L1112.1 1211.53 L1111.52 1211.53 L1110.93 1211.53 L1110.34 1211.53 L1109.76 1211.53 L1109.17 1211.53 L1108.59 1211.53 L1108 1211.53 L1107.41 1211.53 L1106.83 1211.53 L1106.24 1211.53 L1105.65 1211.53 L1105.07 1211.53 L1104.48 1211.53 L1103.89 1211.53 L1103.31 1211.53 L1102.72 1211.53 L1102.14 1211.53 L1101.55 1211.53 L1100.96 1211.53 L1100.38 1211.53 L1099.79 1211.53 L1099.2 1211.53 L1098.62 1211.53 L1098.03 1211.53 L1097.44 1211.53 L1096.86 1211.53 L1096.27 1211.53 L1095.68 1211.53 L1095.1 1211.53 L1094.51 1211.53 L1093.93 1211.53 L1093.34 1211.53 L1092.75 1211.53 L1092.17 1211.53 L1091.58 1211.53 L1090.99 1211.53 L1090.41 1211.53 L1089.82 1211.53 L1089.23 1211.53 L1088.65 1211.53 L1088.06 1211.53 L1087.47 1211.53 L1086.89 1211.53 L1086.3 1211.53 L1085.72 1211.53 L1085.13 1211.53 L1084.54 1211.53 L1083.96 1211.53 L1083.37 1211.53 L1082.78 1211.53 L1082.2 1211.53 L1081.61 1211.53 L1081.02 1211.53 L1080.44 1211.53 L1079.85 1211.53 L1079.26 1211.53 L1078.68 1211.53 L1078.09 1211.53 L1077.51 1211.53 L1076.92 1211.53 L1076.33 1211.53 L1075.75 1211.53 L1075.16 1211.53 L1074.57 1211.53 L1073.99 1211.53 L1073.4 1211.53 L1072.81 1211.53 L1072.23 1211.53 L1071.64 1211.53 L1071.06 1211.53 L1070.47 1211.53 L1069.88 1211.53 L1069.3 1211.53 L1068.71 1211.53 L1068.12 1211.53 L1067.54 1211.53 L1066.95 1211.53 L1066.36 1211.53 L1065.78 1211.53 L1065.19 1211.53 L1064.6 1211.53 L1064.02 1211.53 L1063.43 1211.53 L1062.85 1211.53 L1062.26 1211.53 L1061.67 1211.53 L1061.09 1211.53 L1060.5 1211.53 L1059.91 1211.53 L1059.33 1211.53 L1058.74 1211.53 L1058.15 1211.53 L1057.57 1211.53 L1056.98 1211.53 L1056.39 1211.53 L1055.81 1211.53 L1055.22 1211.53 L1054.64 1211.53 L1054.05 1211.53 L1053.46 1211.53 L1052.88 1211.53 L1052.29 1211.53 L1051.7 1211.53 L1051.12 1211.53 L1050.53 1211.53 L1049.94 1211.53 L1049.36 1211.53 L1048.77 1211.53 L1048.19 1211.53 L1047.6 1211.53 L1047.01 1211.53 L1046.43 1211.53 L1045.84 1211.53 L1045.25 1211.53 L1044.67 1211.53 L1044.08 1211.53 L1043.49 1211.53 L1042.91 1211.53 L1042.32 1211.53 L1041.73 1211.53 L1041.15 1211.53 L1040.56 1211.53 L1039.98 1211.53 L1039.39 1211.53 L1038.8 1211.53 L1038.22 1211.53 L1037.63 1211.53 L1037.04 1211.53 L1036.46 1211.53 L1035.87 1211.53 L1035.28 1211.53 L1034.7 1211.53 L1034.11 1211.53 L1033.52 1211.53 L1032.94 1211.53 L1032.35 1211.53 L1031.77 1211.53 L1031.18 1211.53 L1030.59 1211.53 L1030.01 1211.53 L1029.42 1211.53 L1028.83 1211.53 L1028.25 1211.53 L1027.66 1211.53 L1027.07 1211.53 L1026.49 1211.53 L1025.9 1211.53 L1025.32 1211.53 L1024.73 1211.53 L1024.14 1211.53 L1023.56 1211.53 L1022.97 1211.53 L1022.38 1211.53 L1021.8 1211.53 L1021.21 1211.53 L1020.62 1211.53 L1020.04 1211.53 L1019.45 1211.53 L1018.86 1211.53 L1018.28 1211.53 L1017.69 1211.53 L1017.11 1211.53 L1016.52 1211.53 L1015.93 1211.53 L1015.35 1211.53 L1014.76 1211.53 L1014.17 1211.53 L1013.59 1211.53 L1013 1211.53 L1012.41 1211.53 L1011.83 1211.53 L1011.24 1211.53 L1010.65 1211.53 L1010.07 1211.53 L1009.48 1211.53 L1008.9 1211.53 L1008.31 1211.53 L1007.72 1211.53 L1007.14 1211.53 L1006.55 1211.53 L1005.96 1211.53 L1005.38 1211.53 L1004.79 1211.53 L1004.2 1211.53 L1003.62 1211.53 L1003.03 1211.53 L1002.44 1211.53 L1001.86 1211.53 L1001.27 1211.53 L1000.69 1211.53 L1000.1 1211.53 L999.513 1211.53 L998.926 1211.53 L998.34 1211.53 L997.754 1211.53 L997.167 1211.53 L996.581 1211.53 L995.994 1211.53 L995.408 1211.53 L994.822 1211.53 L994.235 1211.53 L993.649 1211.53 L993.062 1211.53 L992.476 1211.53 L991.889 1211.53 L991.303 1211.53 L990.717 1211.53 L990.13 1211.53 L989.544 1211.53 L988.957 1211.53 L988.371 1211.53 L987.785 1211.53 L987.198 1211.53 L986.612 1211.53 L986.025 1211.53  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.9 986.612,1211.9 987.198,1211.9 987.785,1211.9 988.371,1211.9 988.957,1211.9 989.544,1211.9 990.13,1211.9 990.717,1211.9 991.303,1211.9 991.889,1211.9 992.476,1211.9 993.062,1211.9 993.649,1211.9 994.235,1211.9 994.822,1211.9 995.408,1211.9 995.994,1211.9 996.581,1211.9 997.167,1211.9 997.754,1211.9 998.34,1211.9 998.926,1211.9 999.513,1211.9 1000.1,1211.9 1000.69,1211.9 1001.27,1211.9 1001.86,1211.9 1002.44,1211.9 1003.03,1211.9 1003.62,1211.9 1004.2,1211.9 1004.79,1211.9 1005.38,1211.9 1005.96,1211.9 1006.55,1211.9 1007.14,1211.9 1007.72,1211.9 1008.31,1211.9 1008.9,1211.9 1009.48,1211.9 1010.07,1211.9 1010.65,1211.9 1011.24,1211.9 1011.83,1211.9 1012.41,1211.9 1013,1211.9 1013.59,1211.9 1014.17,1211.9 1014.76,1211.9 1015.35,1211.9 1015.93,1211.9 1016.52,1211.9 1017.11,1211.9 1017.69,1211.9 1018.28,1211.9 1018.86,1211.9 1019.45,1211.9 1020.04,1211.9 1020.62,1211.9 1021.21,1211.9 1021.8,1211.9 1022.38,1211.9 1022.97,1211.9 1023.56,1211.9 1024.14,1211.9 1024.73,1211.9 1025.32,1211.9 1025.9,1211.9 1026.49,1211.9 1027.07,1211.9 1027.66,1211.9 1028.25,1211.9 1028.83,1211.9 1029.42,1211.9 1030.01,1211.9 1030.59,1211.9 1031.18,1211.9 1031.77,1211.9 1032.35,1211.9 1032.94,1211.9 1033.52,1211.9 1034.11,1211.9 1034.7,1211.9 1035.28,1211.9 1035.87,1211.9 1036.46,1211.9 1037.04,1211.9 1037.63,1211.9 1038.22,1211.9 1038.8,1211.9 1039.39,1211.9 1039.98,1211.9 1040.56,1211.9 1041.15,1211.9 1041.73,1211.9 1042.32,1211.9 1042.91,1211.9 1043.49,1211.9 1044.08,1211.9 1044.67,1211.9 1045.25,1211.9 1045.84,1211.9 1046.43,1211.9 1047.01,1211.9 1047.6,1211.9 1048.19,1211.9 1048.77,1211.9 1049.36,1211.9 1049.94,1211.9 1050.53,1211.9 1051.12,1211.9 1051.7,1211.9 1052.29,1211.9 1052.88,1211.9 1053.46,1211.9 1054.05,1211.9 1054.64,1211.9 1055.22,1211.9 1055.81,1211.9 1056.39,1211.9 1056.98,1211.9 1057.57,1211.9 1058.15,1211.9 1058.74,1211.9 1059.33,1211.9 1059.91,1211.9 1060.5,1211.9 1061.09,1211.9 1061.67,1211.9 1062.26,1211.9 1062.85,1211.9 1063.43,1211.9 1064.02,1211.9 1064.6,1211.9 1065.19,1211.9 1065.78,1211.9 1066.36,1211.9 1066.95,1211.9 1067.54,1211.9 1068.12,1211.9 1068.71,1211.9 1069.3,1211.9 1069.88,1211.9 1070.47,1211.9 1071.06,1211.9 1071.64,1211.9 1072.23,1211.9 1072.81,1211.9 1073.4,1211.9 1073.99,1211.9 1074.57,1211.9 1075.16,1211.9 1075.75,1211.9 1076.33,1211.9 1076.92,1211.9 1077.51,1211.9 1078.09,1211.9 1078.68,1211.9 1079.26,1211.9 1079.85,1211.9 1080.44,1211.9 1081.02,1211.9 1081.61,1211.9 1082.2,1211.9 1082.78,1211.9 1083.37,1211.9 1083.96,1211.9 1084.54,1211.9 1085.13,1211.9 1085.72,1211.9 1086.3,1211.9 1086.89,1211.9 1087.47,1211.9 1088.06,1211.9 1088.65,1211.9 1089.23,1211.9 1089.82,1211.9 1090.41,1211.9 1090.99,1211.9 1091.58,1211.9 1092.17,1211.9 1092.75,1211.9 1093.34,1211.9 1093.93,1211.9 1094.51,1211.9 1095.1,1211.9 1095.68,1211.9 1096.27,1211.9 1096.86,1211.9 1097.44,1211.9 1098.03,1211.9 1098.62,1211.9 1099.2,1211.9 1099.79,1211.9 1100.38,1211.9 1100.96,1211.9 1101.55,1211.9 1102.14,1211.9 1102.72,1211.9 1103.31,1211.9 1103.89,1211.9 1104.48,1211.9 1105.07,1211.9 1105.65,1211.9 1106.24,1211.9 1106.83,1211.9 1107.41,1211.9 1108,1211.9 1108.59,1211.9 1109.17,1211.9 1109.76,1211.9 1110.34,1211.9 1110.93,1211.9 1111.52,1211.9 1112.1,1211.9 1112.69,1211.9 1113.28,1211.9 1113.86,1211.9 1114.45,1211.9 1115.04,1211.9 1115.62,1211.9 1116.21,1211.9 1116.8,1211.9 1117.38,1211.9 1117.97,1211.9 1118.55,1211.9 1119.14,1211.9 1119.73,1211.9 1120.31,1211.9 1120.9,1211.9 1121.49,1211.9 1122.07,1211.9 1122.66,1211.9 1123.25,1211.9 1123.83,1211.9 1124.42,1211.9 1125.01,1211.9 1125.59,1211.9 1126.18,1211.9 1126.76,1211.9 1127.35,1211.9 1127.94,1211.9 1128.52,1211.9 1129.11,1211.9 1129.7,1211.9 1130.28,1211.9 1130.87,1211.9 1131.46,1211.9 1132.04,1211.9 1132.63,1211.9 1133.21,1211.9 1133.8,1211.9 1134.39,1211.9 1134.97,1211.9 1135.56,1211.9 1136.15,1211.9 1136.73,1211.9 1137.32,1211.9 1137.91,1211.9 1138.49,1211.9 1139.08,1211.9 1139.67,1211.9 1140.25,1211.9 1140.84,1211.9 1141.42,1211.9 1142.01,1211.9 1142.6,1211.9 1143.18,1211.9 1143.77,1211.9 1144.36,1211.9 1144.94,1211.9 1145.53,1211.9 1146.12,1211.9 1146.7,1211.9 1147.29,1211.9 1147.88,1211.9 1148.46,1211.9 1149.05,1211.9 1149.63,1211.9 1150.22,1211.9 1150.81,1211.9 1151.39,1211.9 1151.98,1211.9 1152.57,1211.9 1153.15,1211.9 1153.74,1211.9 1154.33,1211.9 1154.91,1211.9 1155.5,1211.9 1156.09,1211.9 1156.67,1211.9 1157.26,1211.9 1157.84,1211.9 1158.43,1211.9 1159.02,1211.9 1159.6,1211.9 1160.19,1211.9 1160.78,1211.9 1161.36,1211.9 1161.95,1211.9 1162.54,1211.9 1163.12,1211.9 1163.71,1211.9 1164.29,1211.9 1164.88,1211.9 1165.47,1211.9 1166.05,1211.9 1166.64,1211.9 1167.23,1211.9 1167.81,1211.9 1168.4,1211.9 1168.99,1211.9 1169.57,1211.9 1170.16,1211.9 1170.75,1211.9 1171.33,1211.9 1171.92,1211.9 1172.5,1211.9 1173.09,1211.9 1173.68,1211.9 1174.26,1211.9 1174.85,1211.9 1175.44,1211.9 1176.02,1211.9 1176.61,1211.9 1177.2,1211.9 1177.78,1211.9 1178.37,1211.9 1178.96,1211.9 1179.54,1211.9 1180.13,1211.9 1180.71,1211.9 1181.3,1211.9 1181.89,1211.9 1182.47,1211.9 1183.06,1211.9 1183.65,1211.9 1184.23,1211.9 1184.82,1211.9 1185.41,1211.9 1185.99,1211.9 1186.58,1211.9 1187.16,1211.9 1187.75,1211.9 1188.34,1211.9 1188.92,1211.9 1189.51,1211.9 1190.1,1211.9 1190.68,1211.9 1191.27,1211.9 1191.86,1211.9 1192.44,1211.9 1193.03,1211.9 1193.62,1211.9 1194.2,1211.9 1194.79,1211.9 1195.37,1211.9 1195.96,1211.9 1196.55,1211.9 1197.13,1211.9 1197.72,1211.9 1198.31,1211.9 1198.89,1211.9 1199.48,1211.9 1200.07,1211.9 1200.65,1211.9 1201.24,1211.9 1201.83,1211.9 1202.41,1211.9 1203,1211.9 1203.58,1211.9 1204.17,1211.9 1204.76,1211.9 1205.34,1211.9 1205.93,1211.9 1206.52,1211.9 1207.1,1211.9 1207.69,1211.9 1208.28,1211.9 1208.86,1211.9 1209.45,1211.9 1210.03,1211.9 1210.62,1211.9 1211.21,1211.9 1211.79,1211.9 1212.38,1211.9 1212.97,1211.9 1213.55,1211.9 1214.14,1211.9 1214.73,1211.9 1215.31,1211.9 1215.9,1211.9 1216.49,1211.9 1217.07,1211.9 1217.66,1211.9 1218.24,1211.9 1218.83,1211.9 1219.42,1211.9 1220,1211.9 1220.59,1211.9 1221.18,1211.9 1221.76,1211.9 1222.35,1211.9 1222.94,1211.9 1223.52,1211.9 1224.11,1211.9 1224.7,1211.9 1225.28,1211.9 1225.87,1211.9 1226.45,1211.9 1227.04,1211.9 1227.63,1211.9 1228.21,1211.9 1228.8,1211.9 1229.39,1211.9 1229.97,1211.9 1230.56,1211.9 1231.15,1211.9 1231.73,1211.9 1232.32,1211.9 1232.91,1211.9 1233.49,1211.9 1234.08,1211.9 1234.66,1211.9 1235.25,1211.9 1235.84,1211.9 1236.42,1211.9 1237.01,1211.9 1237.6,1211.9 1238.18,1211.9 1238.77,1211.9 1239.36,1211.9 1239.94,1211.9 1240.53,1211.9 1241.11,1211.9 1241.7,1211.9 1242.29,1211.9 1242.87,1211.9 1243.46,1211.9 1244.05,1211.9 1244.63,1211.9 1245.22,1211.9 1245.81,1211.9 1246.39,1211.9 1246.98,1211.9 1247.57,1211.9 1248.15,1211.9 1248.74,1211.9 1249.32,1211.9 1249.91,1211.9 1250.5,1211.9 1251.08,1211.9 1251.67,1211.9 1252.26,1211.9 1252.84,1211.9 1253.43,1211.9 1254.02,1211.9 1254.6,1211.9 1255.19,1211.9 1255.78,1211.9 1256.36,1211.9 1256.95,1211.9 1257.53,1211.9 1258.12,1211.9 1258.71,1211.9 1259.29,1211.9 1259.88,1211.9 1260.47,1211.9 1261.05,1211.9 1261.64,1211.9 1262.23,1211.9 1262.81,1211.9 1263.4,1211.9 1263.98,1211.9 1264.57,1211.9 1265.16,1211.9 1265.74,1211.9 1266.33,1211.9 1266.92,1211.9 1267.5,1211.9 1268.09,1211.9 1268.68,1211.9 1269.26,1211.9 1269.85,1211.9 1270.44,1211.9 1271.02,1211.9 1271.61,1211.9 1272.19,1211.9 1272.78,1211.9 1273.37,1211.9 1273.95,1211.9 1274.54,1211.9 1275.13,1211.9 1275.71,1211.9 1276.3,1211.9 1276.89,1211.9 1277.47,1211.9 1278.06,1211.9 1278.65,1211.9 1279.23,1211.9 1279.82,1211.9 1280.4,1211.9 1280.99,1211.9 1281.58,1211.9 1282.16,1211.9 1282.75,1211.9 1283.34,1211.9 1283.92,1211.9 1284.51,1211.9 1285.1,1211.9 1285.68,1211.9 1286.27,1211.9 1286.86,1211.9 1287.44,1211.9 1288.03,1211.9 1288.61,1211.9 1289.2,1211.9 1289.79,1211.9 1290.37,1211.9 1290.96,1211.9 1291.55,1211.9 1292.13,1211.9 1292.72,1211.9 1293.31,1211.9 1293.89,1211.9 1294.48,1211.9 1295.06,1211.9 1295.65,1211.9 1296.24,1211.9 1296.82,1211.9 1297.41,1211.9 1298,1211.9 1298.58,1211.9 1299.17,1211.9 1299.76,1211.9 1300.34,1211.9 1300.93,1211.9 1301.52,1211.9 1302.1,1211.9 1302.69,1211.9 1303.27,1211.9 1303.86,1211.9 1304.45,1211.9 1305.03,1211.9 1305.62,1211.9 1306.21,1211.9 1306.79,1211.9 1307.38,1211.9 1307.97,1211.9 1308.55,1211.9 1309.14,1211.9 1309.73,1211.9 1310.31,1211.9 1310.9,1211.9 1311.48,1211.9 1312.07,1211.9 1312.66,1211.9 1313.24,1211.9 1313.83,1211.9 1314.42,1211.9 1315,1211.9 1315.59,1211.9 1316.18,1211.9 1316.76,1211.9 1317.35,1211.9 1317.93,1211.9 1318.52,1211.9 1319.11,1211.9 1319.69,1211.9 1320.28,1211.9 1320.87,1211.9 1321.45,1211.9 1322.04,1211.9 1322.63,1211.9 1323.21,1211.9 1323.8,1211.9 1324.39,1211.9 1324.97,1211.9 1325.56,1211.9 1326.14,1211.9 1326.73,1211.9 1327.32,1211.9 1327.9,1211.9 1328.49,1211.9 1329.08,1211.9 1329.66,1211.9 1330.25,1211.9 1330.84,1211.9 1331.42,1211.9 1332.01,1211.9 1332.6,1211.9 1333.18,1211.9 1333.77,1211.9 1334.35,1211.9 1334.94,1211.9 1335.53,1211.9 1336.11,1211.9 1336.7,1211.9 1337.29,1211.9 1337.87,1211.9 1338.46,1211.9 1339.05,1211.9 1339.63,1211.9 1340.22,1211.9 1340.8,1211.9 1341.39,1211.9 1341.98,1211.9 1342.56,1211.9 1343.15,1211.9 1343.74,1211.9 1344.32,1211.9 1344.91,1211.9 1345.5,1211.9 1346.08,1211.9 1346.67,1211.9 1347.26,1211.9 1347.84,1211.9 1348.43,1211.9 1349.01,1211.9 1349.6,1211.9 1350.19,1211.9 1350.77,1211.9 1351.36,1211.9 1351.95,1211.9 1352.53,1211.9 1353.12,1211.9 1353.71,1211.9 1354.29,1211.9 1354.88,1211.9 1355.47,1211.9 1356.05,1211.9 1356.64,1211.9 1357.22,1211.9 1357.81,1211.9 1358.4,1211.9 1358.98,1211.9 1359.57,1211.9 1360.16,1211.9 1360.74,1211.9 1361.33,1211.9 1361.92,1211.9 1362.5,1211.9 1363.09,1211.9 1363.68,1211.9 1364.26,1211.9 1364.85,1211.9 1365.43,1211.9 1366.02,1211.9 1366.61,1211.9 1367.19,1211.9 1367.78,1211.9 1368.37,1211.9 1368.95,1211.9 1369.54,1211.9 1370.13,1211.9 1370.71,1211.9 1371.3,1211.9 1371.88,1211.9 1372.47,1211.9 1373.06,1211.9 1373.64,1211.9 1374.23,1211.9 1374.82,1211.9 1375.4,1211.9 1375.99,1211.9 1376.58,1211.9 1377.16,1211.9 1377.75,1211.9 1378.34,1211.9 1378.92,1211.9 1379.51,1211.9 1380.09,1211.9 1380.68,1211.9 1381.27,1211.9 1381.85,1211.9 1382.44,1211.9 1383.03,1211.9 1383.61,1211.9 1384.2,1211.9 1384.79,1211.9 1385.37,1211.9 1385.96,1211.9 1386.55,1211.9 1387.13,1211.9 1387.72,1211.9 1388.3,1211.9 1388.89,1211.9 1389.48,1211.9 1390.06,1211.9 1390.65,1211.9 1391.24,1211.9 1391.82,1211.9 1392.41,1211.9 1393,1211.9 1393.58,1211.9 1394.17,1211.9 1394.75,1211.9 1395.34,1211.9 1395.93,1211.9 1396.51,1211.9 1397.1,1211.9 1397.69,1211.9 1398.27,1211.9 1398.86,1211.9 1399.45,1211.9 1400.03,1211.9 1400.62,1211.9 1401.21,1211.9 1401.79,1211.9 1402.38,1211.9 1402.96,1211.9 1403.55,1211.9 1404.14,1211.9 1404.72,1211.9 1405.31,1211.9 1405.9,1211.9 1406.48,1211.9 1407.07,1211.9 1407.66,1211.9 1408.24,1211.9 1408.83,1211.9 1409.42,1211.9 1410,1211.9 1410.59,1211.9 1411.17,1211.9 1411.76,1211.9 1412.35,1211.9 1412.93,1211.9 1413.52,1211.9 1414.11,1211.9 1414.69,1211.9 1415.28,1211.9 1415.87,1211.9 1416.45,1211.9 1417.04,1211.9 1417.63,1211.9 1418.21,1211.9 1418.8,1211.9 1419.38,1211.9 1419.97,1211.9 1420.56,1211.9 1421.14,1211.9 1421.73,1211.9 1422.32,1211.9 1422.9,1211.9 1423.49,1211.9 1424.08,1211.9 1424.66,1211.9 1425.25,1211.9 1425.83,1211.9 1426.42,1211.9 1427.01,1211.9 1427.59,1211.9 1428.18,1211.9 1428.77,1211.9 1429.35,1211.9 1429.94,1211.9 1430.53,1211.9 1431.11,1211.9 1431.7,1211.9 1432.29,1211.9 1432.87,1211.9 1433.46,1211.9 1434.04,1211.9 1434.63,1211.9 1435.22,1211.9 1435.8,1211.9 1436.39,1211.9 1436.98,1211.9 1437.56,1211.9 1438.15,1211.9 1438.74,1211.9 1439.32,1211.9 1439.91,1211.9 1440.5,1211.9 1441.08,1211.9 1441.67,1211.9 1442.25,1211.9 1442.84,1211.9 1443.43,1211.9 1444.01,1211.9 1444.6,1211.9 1445.19,1211.9 1445.77,1211.9 1446.36,1211.9 1446.95,1211.9 1447.53,1211.9 1448.12,1211.9 1448.7,1211.9 1449.29,1211.9 1449.88,1211.9 1450.46,1211.9 1451.05,1211.9 1451.64,1211.9 1452.22,1211.9 1452.81,1211.9 1453.4,1211.9 1453.98,1211.9 1454.57,1211.9 1455.16,1211.9 1455.74,1211.9 1456.33,1211.9 1456.91,1211.9 1457.5,1211.9 1458.09,1211.9 1458.67,1211.9 1459.26,1211.9 1459.85,1211.9 1460.43,1211.9 1461.02,1211.9 1461.61,1211.9 1462.19,1211.9 1462.78,1211.9 1463.37,1211.9 1463.95,1211.9 1464.54,1211.9 1465.12,1211.9 1465.71,1211.9 1466.3,1211.9 1466.88,1211.9 1467.47,1211.9 1468.06,1211.9 1468.64,1211.9 1469.23,1211.9 1469.82,1211.9 1470.4,1211.9 1470.99,1211.9 1471.57,1211.9 1472.16,1211.9 1472.75,1211.9 1473.33,1211.9 1473.92,1211.9 1474.51,1211.9 1475.09,1211.9 1475.68,1211.9 1476.27,1211.9 1476.85,1211.9 1477.44,1211.9 1478.03,1211.9 1478.61,1211.9 1479.2,1211.9 1479.78,1211.9 1480.37,1211.9 1480.96,1211.9 1481.54,1211.9 1482.13,1211.9 1482.72,1211.9 1483.3,1211.9 1483.89,1211.9 1484.48,1211.9 1485.06,1211.9 1485.65,1211.9 1486.24,1211.9 1486.82,1211.9 1487.41,1211.9 1487.99,1211.9 1488.58,1211.9 1489.17,1211.9 1489.75,1211.9 1490.34,1211.9 1490.93,1211.9 1491.51,1211.9 1492.1,1211.9 1492.69,1211.9 1493.27,1211.9 1493.86,1211.9 1494.45,1211.9 1495.03,1211.9 1495.62,1211.9 1496.2,1211.9 1496.79,1211.9 1497.38,1211.9 1497.96,1211.9 1498.55,1211.9 1499.14,1211.9 1499.72,1211.9 1500.31,1211.9 1500.9,1211.9 1501.48,1211.9 1502.07,1211.9 1502.65,1211.9 1503.24,1211.9 1503.83,1211.9 1504.41,1211.9 1505,1211.9 1505.59,1211.9 1506.17,1211.9 1506.76,1211.9 1507.35,1211.9 1507.93,1211.9 1508.52,1211.9 1509.11,1211.9 1509.69,1211.9 1510.28,1211.9 1510.86,1211.9 1511.45,1211.9 1512.04,1211.9 1512.62,1211.9 1513.21,1211.9 1513.8,1211.9 1514.38,1211.9 1514.97,1211.9 1515.56,1211.9 1516.14,1211.9 1516.73,1211.9 1517.32,1211.9 1517.9,1211.9 1518.49,1211.9 1519.07,1211.9 1519.66,1211.9 1520.25,1211.9 1520.83,1211.9 1521.42,1211.9 1522.01,1211.9 1522.59,1211.9 1523.18,1211.9 1523.77,1211.9 1524.35,1211.9 1524.94,1211.9 1525.52,1211.9 1526.11,1211.9 1526.7,1211.9 1527.28,1211.9 1527.87,1211.9 1528.46,1211.9 1529.04,1211.9 1529.63,1211.9 1530.22,1211.9 1530.8,1211.9 1531.39,1211.9 1531.98,1211.9 1532.56,1211.9 1533.15,1211.9 1533.73,1211.9 1534.32,1211.9 1534.91,1211.9 1535.49,1211.9 1536.08,1211.9 1536.67,1211.9 1537.25,1211.9 1537.84,1211.9 1538.43,1211.9 1539.01,1211.9 1539.6,1211.9 1540.19,1211.9 1540.77,1211.9 1541.36,1211.9 1541.94,1211.9 1542.53,1211.9 1543.12,1211.9 1543.7,1211.9 1544.29,1211.9 1544.88,1211.9 1545.46,1211.9 1546.05,1211.9 1546.64,1211.9 1547.22,1211.9 1547.81,1211.9 1548.4,1211.9 1548.98,1211.9 1549.57,1211.9 1550.15,1211.9 1550.74,1211.9 1551.33,1211.9 1551.91,1211.9 1552.5,1211.9 1553.09,1211.9 1553.67,1211.9 1554.26,1211.9 1554.85,1211.9 1555.43,1211.9 1556.02,1211.9 1556.6,1211.9 1557.19,1211.9 1557.78,1211.9 1558.36,1211.9 1558.95,1211.9 1559.54,1211.9 1560.12,1211.9 1560.71,1211.9 1561.3,1211.9 1561.88,1211.9 1562.47,1211.9 1563.06,1211.9 1563.64,1211.9 1564.23,1211.9 1564.81,1211.9 1565.4,1211.9 1565.99,1211.9 1566.57,1211.9 1567.16,1211.9 1567.75,1211.9 1568.33,1211.9 1568.92,1211.9 1569.51,1211.9 1570.09,1211.9 1570.68,1211.9 1571.27,1211.9 1571.85,1211.9 1572.44,1211.9 1573.02,1211.9 1573.61,1211.9 1574.2,1211.9 1574.78,1211.9 1575.37,1211.9 1575.96,1211.9 1576.54,1211.9 1577.13,1211.9 1577.72,1211.9 1578.3,1211.9 1578.89,1211.9 1579.47,1211.9 1580.06,1211.9 1580.65,1211.9 1581.23,1211.9 1581.82,1211.9 1582.41,1211.9 1582.99,1211.9 1583.58,1211.9 1584.17,1211.9 1584.75,1211.9 1585.34,1211.9 1585.93,1211.9 1586.51,1211.9 1587.1,1211.9 1587.68,1211.9 1588.27,1211.9 1588.86,1211.9 1589.44,1211.9 1590.03,1211.9 1590.62,1211.9 1591.2,1211.9 1591.79,1211.9 1592.38,1211.9 1592.96,1211.9 1593.55,1211.9 1594.14,1211.9 1594.72,1211.9 1595.31,1211.9 1595.89,1211.9 1596.48,1211.9 1597.07,1211.9 1597.65,1211.9 1598.24,1211.9 1598.83,1211.9 1599.41,1211.9 1600,1211.9 1600.59,1211.9 1601.17,1211.9 1601.76,1211.9 1602.34,1211.9 1602.93,1211.9 1603.52,1211.9 1604.1,1211.9 1604.69,1211.9 1605.28,1211.9 1605.86,1211.9 1606.45,1211.9 1607.04,1211.9 1607.62,1211.9 1608.21,1211.9 1608.8,1211.9 1609.38,1211.9 1609.97,1211.9 1610.55,1211.9 1611.14,1211.9 1611.73,1211.9 1612.31,1211.9 1612.9,1211.9 1613.49,1211.9 1614.07,1211.9 1614.66,1211.9 1615.25,1211.9 1615.83,1211.9 1616.42,1211.9 1617.01,1211.9 1617.59,1211.9 1618.18,1211.9 1618.76,1211.9 1619.35,1211.9 1619.94,1211.9 1620.52,1211.9 1621.11,1211.9 1621.7,1211.9 1622.28,1211.9 1622.87,1211.9 1623.46,1211.9 1624.04,1211.9 1624.63,1211.9 1625.22,1211.9 1625.8,1211.9 1626.39,1211.9 1626.97,1211.9 1627.56,1211.9 1628.15,1211.9 1628.73,1211.9 1629.32,1211.9 1629.91,1211.9 1630.49,1211.9 1631.08,1211.9 1631.67,1211.9 1632.25,1211.9 1632.84,1211.9 1633.42,1211.9 1634.01,1211.9 1634.6,1211.9 1635.18,1211.9 1635.77,1211.9 1636.36,1211.9 1636.94,1211.9 1637.53,1211.9 1638.12,1211.9 1638.7,1211.9 1639.29,1211.9 1639.88,1211.9 1640.46,1211.9 1641.05,1211.9 1641.63,1211.9 1642.22,1211.9 1642.81,1211.9 1643.39,1211.9 1643.98,1211.9 1644.57,1211.9 1645.15,1211.9 1645.74,1211.9 1646.33,1211.9 1646.91,1211.9 1647.5,1211.9 1648.09,1211.9 1648.67,1211.9 1649.26,1211.9 1649.84,1211.9 1650.43,1211.9 1651.02,1211.9 1651.6,1211.9 1652.19,1211.9 1652.78,1211.9 1653.36,1211.9 1653.95,1211.9 1654.54,1211.9 1655.12,1211.9 1655.71,1211.9 1656.29,1211.9 1656.88,1211.9 1657.47,1211.9 1658.05,1211.9 1658.64,1211.9 1659.23,1211.9 1659.81,1211.9 1660.4,1211.9 1660.99,1211.9 1661.57,1211.9 1662.16,1211.9 1662.75,1211.9 1663.33,1211.9 1663.92,1211.9 1664.5,1211.9 1665.09,1211.9 1665.68,1211.9 1666.26,1211.9 1666.85,1211.9 1667.44,1211.9 1668.02,1211.9 1668.61,1211.9 1669.2,1211.9 1669.78,1211.9 1670.37,1211.9 1670.96,1211.9 1671.54,1211.9 1672.13,1211.9 1672.71,1211.9 1673.3,1211.9 1673.89,1211.9 1674.47,1211.9 1675.06,1211.9 1675.65,1211.9 1676.23,1211.9 1676.82,1211.9 1677.41,1211.9 1677.99,1211.9 1678.58,1211.9 1679.17,1211.9 1679.75,1211.9 1680.34,1211.9 1680.92,1211.9 1681.51,1211.9 1682.1,1211.9 1682.68,1211.9 1683.27,1211.9 1683.86,1211.9 1684.44,1211.9 1685.03,1211.9 1685.62,1211.9 1686.2,1211.9 1686.79,1211.9 1687.37,1211.9 1687.96,1211.9 1688.55,1211.9 1689.13,1211.9 1689.72,1211.9 1690.31,1211.9 1690.89,1211.9 1691.48,1211.9 1692.07,1211.9 1692.65,1211.9 1693.24,1211.9 1693.83,1211.9 1694.41,1211.9 1695,1211.9 1695.58,1211.9 1696.17,1211.9 1696.76,1211.9 1697.34,1211.9 1697.93,1211.9 1698.52,1211.9 1699.1,1211.9 1699.69,1211.9 1700.28,1211.9 1700.86,1211.9 1701.45,1211.9 1702.04,1211.9 1702.62,1211.9 1703.21,1211.9 1703.79,1211.9 1704.38,1211.9 1704.97,1211.9 1705.55,1211.9 1706.14,1211.9 1706.73,1211.9 1707.31,1211.9 1707.9,1211.9 1708.49,1211.9 1709.07,1211.9 1709.66,1211.9 1710.24,1211.9 1710.83,1211.9 1711.42,1211.9 1712,1211.9 1712.59,1211.9 1713.18,1211.9 1713.76,1211.9 1714.35,1211.9 1714.94,1211.9 1715.52,1211.9 1716.11,1211.9 1716.7,1211.9 1717.28,1211.9 1717.87,1211.9 1718.45,1211.9 1719.04,1211.9 1719.63,1211.9 1720.21,1211.9 1720.8,1211.9 1721.39,1211.9 1721.97,1211.9 1722.56,1211.9 1723.15,1211.9 1723.73,1211.9 1724.32,1211.9 1724.91,1211.9 1725.49,1211.9 1726.08,1211.9 1726.66,1211.9 1727.25,1211.9 1727.84,1211.9 1728.42,1211.9 1729.01,1211.9 1729.6,1211.9 1730.18,1211.9 1730.77,1211.9 1731.36,1211.9 1731.94,1211.9 1732.53,1211.9 1733.11,1211.9 1733.7,1211.9 1734.29,1211.9 1734.87,1211.9 1735.46,1211.9 1736.05,1211.9 1736.63,1211.9 1737.22,1211.9 1737.81,1211.9 1738.39,1211.9 1738.98,1211.9 1739.57,1211.9 1740.15,1211.9 1740.74,1211.9 1741.32,1211.9 1741.91,1211.9 1742.5,1211.9 1743.08,1211.9 1743.67,1211.9 1744.26,1211.9 1744.84,1211.9 1745.43,1211.9 1746.02,1211.9 1746.6,1211.9 1747.19,1211.9 1747.78,1211.9 1748.36,1211.9 1748.95,1211.9 1749.53,1211.9 1750.12,1211.9 1750.71,1211.9 1751.29,1211.9 1751.88,1211.9 1752.47,1211.9 1753.05,1211.9 1753.64,1211.9 1754.23,1211.9 1754.81,1211.9 1755.4,1211.9 1755.99,1211.9 1756.57,1211.9 1757.16,1211.9 1757.74,1211.9 1758.33,1211.9 1758.92,1211.9 1759.5,1211.9 1760.09,1211.9 1760.68,1211.9 1761.26,1211.9 1761.85,1211.9 1762.44,1211.9 1763.02,1211.9 1763.61,1211.9 1764.19,1211.9 1764.78,1211.9 1765.37,1211.9 1765.95,1211.9 1766.54,1211.9 1767.13,1211.9 1767.71,1211.9 1768.3,1211.9 1768.89,1211.9 1769.47,1211.9 1770.06,1211.9 1770.65,1211.9 1771.23,1211.9 1771.82,1211.9 1772.4,1211.9 1772.99,1211.9 1773.58,1211.9 1774.16,1211.9 1774.75,1211.9 1775.34,1211.9 1775.92,1211.9 1776.51,1211.9 1777.1,1211.9 1777.68,1211.9 1778.27,1211.9 1778.86,1211.9 1779.44,1211.9 1780.03,1211.9 1780.61,1211.9 1781.2,1211.9 1781.79,1211.9 1782.37,1211.9 1782.96,1211.9 1783.55,1211.9 1784.13,1211.9 1784.72,1211.9 1785.31,1211.9 1785.89,1211.9 1786.48,1211.9 1787.06,1211.9 1787.65,1211.9 1788.24,1211.9 1788.82,1211.9 1789.41,1211.9 1790,1211.9 1790.58,1211.9 1791.17,1211.9 1791.76,1211.9 1792.34,1211.9 1792.93,1211.9 1793.52,1211.9 1794.1,1211.9 1794.69,1211.9 1795.27,1211.9 1795.86,1211.9 1796.45,1211.9 1797.03,1211.9 1797.62,1211.9 1798.21,1211.9 1798.79,1211.9 1799.38,1211.9 1799.97,1211.9 1800.55,1211.9 1801.14,1211.9 1801.73,1211.9 1802.31,1211.9 1802.9,1211.9 1803.48,1211.9 1804.07,1211.9 1804.66,1211.9 1805.24,1211.9 1805.83,1211.9 1806.42,1211.9 1807,1211.9 1807.59,1211.9 1808.18,1211.9 1808.76,1211.9 1809.35,1211.9 1809.94,1211.9 1810.52,1211.9 1811.11,1211.9 1811.69,1211.9 1812.28,1211.9 1812.87,1211.9 1813.45,1211.9 1814.04,1211.9 1814.63,1211.9 1815.21,1211.9 1815.8,1211.9 1816.39,1211.9 1816.97,1211.9 1817.56,1211.9 1818.14,1211.9 1818.73,1211.9 1819.32,1211.9 1819.9,1211.9 1820.49,1211.9 1821.08,1211.9 1821.66,1211.9 1822.25,1211.9 1822.84,1211.9 1823.42,1211.9 1824.01,1211.9 1824.6,1211.9 1825.18,1211.9 1825.77,1211.9 1826.35,1211.9 1826.94,1211.9 1827.53,1211.9 1828.11,1211.9 1828.7,1211.9 1829.29,1211.9 1829.87,1211.9 1830.46,1211.9 1831.05,1211.9 1831.63,1211.9 1832.22,1211.9 1832.81,1211.9 1833.39,1211.9 1833.98,1211.9 1834.56,1211.9 1835.15,1211.9 1835.74,1211.9 1836.32,1211.9 1836.91,1211.9 1837.5,1211.9 1838.08,1211.9 1838.67,1211.9 1839.26,1211.9 1839.84,1211.9 1840.43,1211.9 1841.01,1211.9 1841.6,1211.9 1842.19,1211.9 1842.77,1211.9 1843.36,1211.9 1843.95,1211.9 1844.53,1211.9 1845.12,1211.9 1845.71,1211.9 1846.29,1211.9 1846.88,1211.9 1847.47,1211.9 1848.05,1211.9 1848.64,1211.9 1849.22,1211.9 1849.81,1211.9 1850.4,1211.9 1850.98,1211.9 1851.57,1211.9 1852.16,1211.9 1852.74,1211.9 1853.33,1211.9 1853.92,1211.9 1854.5,1211.9 1855.09,1211.9 1855.68,1211.9 1856.26,1211.9 1856.85,1211.9 1857.43,1211.9 1858.02,1211.9 1858.61,1211.9 1859.19,1211.9 1859.78,1211.9 1860.37,1211.9 1860.95,1211.9 1861.54,1211.9 1862.13,1211.9 1862.71,1211.9 1863.3,1211.9 1863.88,1211.9 1864.47,1211.9 1865.06,1211.9 1865.64,1211.9 1866.23,1211.9 1866.82,1211.9 1867.4,1211.9 1867.99,1211.9 1868.58,1211.9 1869.16,1211.9 1869.75,1211.9 1870.34,1211.9 1870.92,1211.9 1871.51,1211.9 1872.09,1211.9 1872.68,1211.9 1873.27,1211.9 1873.85,1211.9 1874.44,1211.9 1875.03,1211.9 1875.61,1211.9 1876.2,1211.9 1876.79,1211.9 1877.37,1211.9 1877.96,1211.9 1878.55,1211.9 1879.13,1211.9 1879.72,1211.9 1880.3,1211.9 1880.89,1211.9 1881.48,1211.9 1882.06,1211.9 1882.65,1211.9 1883.24,1211.9 1883.82,1211.9 1884.41,1211.9 1885,1211.9 1885.58,1211.9 1886.17,1211.9 1886.76,1211.9 1887.34,1211.9 1887.93,1211.9 1888.51,1211.9 1889.1,1211.9 1889.69,1211.9 1890.27,1211.9 1890.86,1211.9 1891.45,1211.9 1892.03,1211.9 1892.62,1211.9 1893.21,1211.9 1893.79,1211.9 1894.38,1211.9 1894.96,1211.9 1895.55,1211.9 1896.14,1211.9 1896.72,1211.9 1897.31,1211.9 1897.9,1211.9 1898.48,1211.9 1899.07,1211.9 1899.66,1211.9 1900.24,1211.9 1900.83,1211.9 1901.42,1211.9 1902,1211.9 1902.59,1211.9 1903.17,1211.9 1903.76,1211.9 1904.35,1211.9 1904.93,1211.9 1905.52,1211.9 1906.11,1211.9 1906.69,1211.9 1907.28,1211.9 1907.87,1211.9 1908.45,1211.9 1909.04,1211.9 1909.63,1211.9 1910.21,1211.9 1910.8,1211.9 1911.38,1211.9 1911.97,1211.9 1912.56,1211.9 1913.14,1211.9 1913.73,1211.9 1914.32,1211.9 1914.9,1211.9 1915.49,1211.9 1916.08,1211.9 1916.66,1211.9 1917.25,1211.9 1917.83,1211.9 1918.42,1211.9 1919.01,1211.9 1919.59,1211.9 1920.18,1211.9 1920.77,1211.9 1921.35,1211.9 1921.94,1211.9 1922.53,1211.9 1923.11,1211.9 1923.7,1211.9 1924.29,1211.9 1924.87,1211.9 1925.46,1211.9 1926.04,1211.9 1926.63,1211.9 1927.22,1211.9 1927.8,1211.9 1928.39,1211.9 1928.98,1211.9 1929.56,1211.9 1930.15,1211.9 1930.74,1211.9 1931.32,1211.9 1931.91,1211.9 1932.5,1211.9 1933.08,1211.9 1933.67,1211.9 1934.25,1211.9 1934.84,1211.9 1935.43,1211.9 1936.01,1211.9 1936.6,1211.9 1937.19,1211.9 1937.77,1211.9 1938.36,1211.9 1938.95,1211.9 1939.53,1211.9 1940.12,1211.9 1940.71,1211.9 1941.29,1211.9 1941.88,1211.9 1942.46,1211.9 1943.05,1211.9 1943.64,1211.9 1944.22,1211.9 1944.81,1211.9 1945.4,1211.9 1945.98,1211.9 1946.57,1211.9 1947.16,1211.9 1947.74,1211.9 1948.33,1211.9 1948.91,1211.9 1949.5,1211.9 1950.09,1211.9 1950.67,1211.9 1951.26,1211.9 1951.85,1211.9 1952.43,1211.9 1953.02,1211.9 1953.61,1211.9 1954.19,1211.9 1954.78,1211.9 1955.37,1211.9 1955.95,1211.9 1956.54,1211.9 1957.12,1211.9 1957.71,1211.9 1958.3,1211.9 1958.88,1211.9 1959.47,1211.9 1960.06,1211.9 1960.64,1211.9 1961.23,1211.9 1961.82,1211.9 1962.4,1211.9 1962.99,1211.9 1963.58,1211.9 1964.16,1211.9 1964.75,1211.9 1965.33,1211.9 1965.92,1211.9 1966.51,1211.9 1967.09,1211.9 1967.68,1211.9 1968.27,1211.9 1968.85,1211.9 1969.44,1211.9 1970.03,1211.9 1970.61,1211.9 1971.2,1211.9 1971.78,1211.9 1972.37,1211.9 1972.96,1211.9 1973.54,1211.9 1974.13,1211.9 1974.72,1211.9 1975.3,1211.9 1975.89,1211.9 1976.48,1211.9 1977.06,1211.9 1977.65,1211.9 1978.24,1211.9 1978.82,1211.9 1979.41,1211.9 1979.99,1211.9 1980.58,1211.9 1981.17,1211.9 1981.75,1211.9 1982.34,1211.9 1982.93,1211.9 1983.51,1211.9 1984.1,1211.9 1984.69,1211.9 1985.27,1211.9 1985.86,1211.9 1986.45,1211.9 1987.03,1211.9 1987.62,1211.9 1988.2,1211.9 1988.79,1211.9 1989.38,1211.9 1989.96,1211.9 1990.55,1211.9 1991.14,1211.9 1991.72,1211.9 1992.31,1211.9 1992.9,1211.9 1993.48,1211.9 1994.07,1211.9 1994.65,1211.9 1995.24,1211.9 1995.83,1211.9 1996.41,1211.9 1997,1211.9 1997.59,1211.9 1998.17,1211.9 1998.76,1211.9 1999.35,1211.9 1999.93,1211.9 2000.52,1211.9 2001.11,1211.9 2001.69,1211.9 2002.28,1211.9 2002.86,1211.9 2003.45,1211.9 2004.04,1211.9 2004.62,1211.9 2005.21,1211.9 2005.8,1211.9 2006.38,1211.9 2006.97,1211.9 2007.56,1211.9 2008.14,1211.9 2008.73,1211.9 2009.32,1211.9 2009.9,1211.9 2010.49,1211.9 2011.07,1211.9 2011.66,1211.9 2012.25,1211.9 2012.83,1211.9 2013.42,1211.9 2014.01,1211.9 2014.59,1211.9 2015.18,1211.9 2015.77,1211.9 2016.35,1211.9 2016.94,1211.9 2017.53,1211.9 2018.11,1211.9 2018.7,1211.9 2019.28,1211.9 2019.87,1211.9 2020.46,1211.9 2021.04,1211.9 2021.63,1211.9 2022.22,1211.9 2022.8,1211.9 2023.39,1211.9 2023.98,1211.9 2024.56,1211.9 2025.15,1211.9 2025.73,1211.9 2026.32,1211.9 2026.91,1211.9 2027.49,1211.9 2028.08,1211.9 2028.67,1211.9 2029.25,1211.9 2029.84,1211.9 2030.43,1211.9 2031.01,1211.9 2031.6,1211.9 2032.19,1211.9 2032.77,1211.9 2033.36,1211.9 2033.94,1211.9 2034.53,1211.9 2035.12,1211.9 2035.7,1211.9 2036.29,1211.9 2036.88,1211.9 2037.46,1211.9 2038.05,1211.9 2038.64,1211.9 2039.22,1211.9 2039.81,1211.9 2040.4,1211.9 2040.98,1211.9 2041.57,1211.9 2042.15,1211.9 2042.74,1211.9 2043.33,1211.9 2043.91,1211.9 2044.5,1211.9 2045.09,1211.9 2045.67,1211.9 2046.26,1211.9 2046.85,1211.9 2047.43,1211.9 2048.02,1211.9 2048.6,1211.9 2049.19,1211.9 2049.78,1211.9 2050.36,1211.9 2050.95,1211.9 2051.54,1211.9 2052.12,1211.9 2052.71,1211.9 2053.3,1211.9 2053.88,1211.9 2054.47,1211.9 2055.06,1211.9 2055.64,1211.9 2056.23,1211.9 2056.81,1211.9 2057.4,1211.9 2057.99,1211.9 2058.57,1211.9 2059.16,1211.9 2059.75,1211.9 2060.33,1211.9 2060.92,1211.9 2061.51,1211.9 2062.09,1211.9 2062.68,1211.9 2063.27,1211.9 2063.85,1211.9 2064.44,1211.9 2065.02,1211.9 2065.61,1211.9 2066.2,1211.9 2066.78,1211.9 2067.37,1211.9 2067.96,1211.9 2068.54,1211.9 2069.13,1211.9 2069.72,1211.9 2070.3,1211.9 2070.89,1211.9 2071.48,1211.9 2072.06,1211.9 2072.65,1211.9 2073.23,1211.9 2073.82,1211.9 2074.41,1211.9 2074.99,1211.9 2075.58,1211.9 2076.17,1211.9 2076.75,1211.9 2077.34,1211.9 2077.93,1211.9 2078.51,1211.9 2079.1,1211.9 2079.68,1211.9 2080.27,1211.9 2080.86,1211.9 2081.44,1211.9 2082.03,1211.9 2082.62,1211.9 2083.2,1211.9 2083.79,1211.9 2084.38,1211.9 2084.96,1211.9 2085.55,1211.9 2086.14,1211.9 2086.72,1211.9 2087.31,1211.9 2087.89,1211.9 2088.48,1211.9 2089.07,1211.9 2089.65,1211.9 2090.24,1211.9 2090.83,1211.9 2091.41,1211.9 2092,1211.9 2092.59,1211.9 2093.17,1211.9 2093.76,1211.9 2094.35,1211.9 2094.93,1211.9 2095.52,1211.9 2096.1,1211.9 2096.69,1211.9 2097.28,1211.9 2097.86,1211.9 2098.45,1211.9 2099.04,1211.9 2099.62,1211.9 2100.21,1211.9 2100.8,1211.9 2101.38,1211.9 2101.97,1211.9 2102.55,1211.9 2103.14,1211.9 2103.73,1211.9 2104.31,1211.9 2104.9,1211.9 2105.49,1211.9 2106.07,1211.9 2106.66,1211.9 2107.25,1211.9 2107.83,1211.9 2108.42,1211.9 2109.01,1211.9 2109.59,1211.9 2110.18,1211.9 2110.76,1211.9 2111.35,1211.9 2111.94,1211.9 2112.52,1211.9 2113.11,1211.9 2113.7,1211.9 2114.28,1211.9 2114.87,1211.9 2115.46,1211.9 2116.04,1211.9 2116.63,1211.9 2117.22,1211.9 2117.8,1211.9 2118.39,1211.9 2118.97,1211.9 2119.56,1211.9 2120.15,1211.9 2120.73,1211.9 2121.32,1211.9 2121.91,1211.9 2122.49,1211.9 2123.08,1211.9 2123.67,1211.9 2124.25,1211.9 2124.84,1211.9 2125.42,1211.9 2126.01,1211.9 2126.6,1211.9 2127.18,1211.9 2127.77,1211.9 2128.36,1211.9 2128.94,1211.9 2129.53,1211.9 2130.12,1211.9 2130.7,1211.9 2131.29,1211.9 2131.88,1211.9 2132.46,1211.9 2133.05,1211.9 2133.63,1211.9 2134.22,1211.9 2134.81,1211.9 2135.39,1211.9 2135.98,1211.9 2136.57,1211.9 2137.15,1211.9 2137.74,1211.9 2138.33,1211.9 2138.91,1211.9 2139.5,1211.9 2140.09,1211.9 2140.67,1211.9 2141.26,1211.9 2141.84,1211.9 2142.43,1211.9 2143.02,1211.9 2143.6,1211.9 2144.19,1211.9 2144.78,1211.9 2145.36,1211.9 2145.95,1211.9 2146.54,1211.9 2147.12,1211.9 2147.71,1211.9 2148.3,1211.9 2148.88,1211.9 2149.47,1211.9 2150.05,1211.9 2150.64,1211.9 2151.23,1211.9 2151.81,1211.9 2152.4,1211.9 2152.99,1211.9 2153.57,1211.9 2154.16,1211.9 2154.75,1211.9 2155.33,1211.9 2155.92,1211.9 2156.5,1211.9 2157.09,1211.9 2157.68,1211.9 2158.26,1211.9 \"/>\n<path clip-path=\"url(#clip832)\" d=\"M986.025 1211.83 L986.612 1211.83 L987.198 1211.83 L987.785 1211.83 L988.371 1211.83 L988.957 1211.83 L989.544 1211.83 L990.13 1211.83 L990.717 1211.83 L991.303 1211.83 L991.889 1211.83 L992.476 1211.83 L993.062 1211.83 L993.649 1211.83 L994.235 1211.83 L994.822 1211.83 L995.408 1211.83 L995.994 1211.83 L996.581 1211.83 L997.167 1211.83 L997.754 1211.83 L998.34 1211.83 L998.926 1211.83 L999.513 1211.83 L1000.1 1211.83 L1000.69 1211.83 L1001.27 1211.83 L1001.86 1211.83 L1002.44 1211.83 L1003.03 1211.83 L1003.62 1211.83 L1004.2 1211.83 L1004.79 1211.83 L1005.38 1211.83 L1005.96 1211.83 L1006.55 1211.83 L1007.14 1211.83 L1007.72 1211.83 L1008.31 1211.83 L1008.9 1211.83 L1009.48 1211.83 L1010.07 1211.83 L1010.65 1211.83 L1011.24 1211.83 L1011.83 1211.83 L1012.41 1211.83 L1013 1211.83 L1013.59 1211.83 L1014.17 1211.83 L1014.76 1211.83 L1015.35 1211.83 L1015.93 1211.83 L1016.52 1211.83 L1017.11 1211.83 L1017.69 1211.83 L1018.28 1211.83 L1018.86 1211.83 L1019.45 1211.83 L1020.04 1211.83 L1020.62 1211.83 L1021.21 1211.83 L1021.8 1211.83 L1022.38 1211.83 L1022.97 1211.83 L1023.56 1211.83 L1024.14 1211.83 L1024.73 1211.83 L1025.32 1211.83 L1025.9 1211.83 L1026.49 1211.83 L1027.07 1211.83 L1027.66 1211.83 L1028.25 1211.83 L1028.83 1211.83 L1029.42 1211.83 L1030.01 1211.83 L1030.59 1211.83 L1031.18 1211.83 L1031.77 1211.83 L1032.35 1211.83 L1032.94 1211.83 L1033.52 1211.83 L1034.11 1211.83 L1034.7 1211.83 L1035.28 1211.83 L1035.87 1211.83 L1036.46 1211.83 L1037.04 1211.83 L1037.63 1211.83 L1038.22 1211.83 L1038.8 1211.83 L1039.39 1211.83 L1039.98 1211.83 L1040.56 1211.83 L1041.15 1211.83 L1041.73 1211.83 L1042.32 1211.83 L1042.91 1211.83 L1043.49 1211.83 L1044.08 1211.83 L1044.67 1211.83 L1045.25 1211.83 L1045.84 1211.83 L1046.43 1211.83 L1047.01 1211.83 L1047.6 1211.83 L1048.19 1211.83 L1048.77 1211.83 L1049.36 1211.83 L1049.94 1211.83 L1050.53 1211.83 L1051.12 1211.83 L1051.7 1211.83 L1052.29 1211.83 L1052.88 1211.83 L1053.46 1211.83 L1054.05 1211.83 L1054.64 1211.83 L1055.22 1211.83 L1055.81 1211.83 L1056.39 1211.83 L1056.98 1211.83 L1057.57 1211.83 L1058.15 1211.83 L1058.74 1211.83 L1059.33 1211.83 L1059.91 1211.83 L1060.5 1211.83 L1061.09 1211.83 L1061.67 1211.83 L1062.26 1211.83 L1062.85 1211.83 L1063.43 1211.83 L1064.02 1211.83 L1064.6 1211.83 L1065.19 1211.83 L1065.78 1211.83 L1066.36 1211.83 L1066.95 1211.83 L1067.54 1211.83 L1068.12 1211.83 L1068.71 1211.83 L1069.3 1211.83 L1069.88 1211.83 L1070.47 1211.83 L1071.06 1211.83 L1071.64 1211.83 L1072.23 1211.83 L1072.81 1211.83 L1073.4 1211.83 L1073.99 1211.83 L1074.57 1211.83 L1075.16 1211.83 L1075.75 1211.83 L1076.33 1211.83 L1076.92 1211.83 L1077.51 1211.83 L1078.09 1211.83 L1078.68 1211.83 L1079.26 1211.83 L1079.85 1211.83 L1080.44 1211.83 L1081.02 1211.83 L1081.61 1211.83 L1082.2 1211.83 L1082.78 1211.83 L1083.37 1211.83 L1083.96 1211.83 L1084.54 1211.83 L1085.13 1211.83 L1085.72 1211.83 L1086.3 1211.83 L1086.89 1211.83 L1087.47 1211.83 L1088.06 1211.83 L1088.65 1211.83 L1089.23 1211.83 L1089.82 1211.83 L1090.41 1211.83 L1090.99 1211.83 L1091.58 1211.83 L1092.17 1211.83 L1092.75 1211.83 L1093.34 1211.83 L1093.93 1211.83 L1094.51 1211.83 L1095.1 1211.83 L1095.68 1211.83 L1096.27 1211.83 L1096.86 1211.83 L1097.44 1211.83 L1098.03 1211.83 L1098.62 1211.83 L1099.2 1211.83 L1099.79 1211.83 L1100.38 1211.83 L1100.96 1211.83 L1101.55 1211.83 L1102.14 1211.83 L1102.72 1211.83 L1103.31 1211.83 L1103.89 1211.83 L1104.48 1211.83 L1105.07 1211.83 L1105.65 1211.83 L1106.24 1211.83 L1106.83 1211.83 L1107.41 1211.83 L1108 1211.83 L1108.59 1211.83 L1109.17 1211.83 L1109.76 1211.83 L1110.34 1211.83 L1110.93 1211.83 L1111.52 1211.83 L1112.1 1211.83 L1112.69 1211.83 L1113.28 1211.83 L1113.86 1211.83 L1114.45 1211.83 L1115.04 1211.83 L1115.62 1211.83 L1116.21 1211.83 L1116.8 1211.83 L1117.38 1211.83 L1117.97 1211.83 L1118.55 1211.83 L1119.14 1211.83 L1119.73 1211.83 L1120.31 1211.83 L1120.9 1211.83 L1121.49 1211.83 L1122.07 1211.83 L1122.66 1211.83 L1123.25 1211.83 L1123.83 1211.83 L1124.42 1211.83 L1125.01 1211.83 L1125.59 1211.83 L1126.18 1211.83 L1126.76 1211.83 L1127.35 1211.83 L1127.94 1211.83 L1128.52 1211.83 L1129.11 1211.83 L1129.7 1211.83 L1130.28 1211.83 L1130.87 1211.83 L1131.46 1211.83 L1132.04 1211.83 L1132.63 1211.83 L1133.21 1211.83 L1133.8 1211.83 L1134.39 1211.83 L1134.97 1211.83 L1135.56 1211.83 L1136.15 1211.83 L1136.73 1211.83 L1137.32 1211.83 L1137.91 1211.83 L1138.49 1211.83 L1139.08 1211.83 L1139.67 1211.83 L1140.25 1211.83 L1140.84 1211.83 L1141.42 1211.83 L1142.01 1211.83 L1142.6 1211.83 L1143.18 1211.83 L1143.77 1211.83 L1144.36 1211.83 L1144.94 1211.83 L1145.53 1211.83 L1146.12 1211.83 L1146.7 1211.83 L1147.29 1211.83 L1147.88 1211.83 L1148.46 1211.83 L1149.05 1211.83 L1149.63 1211.83 L1150.22 1211.83 L1150.81 1211.83 L1151.39 1211.83 L1151.98 1211.83 L1152.57 1211.83 L1153.15 1211.83 L1153.74 1211.83 L1154.33 1211.83 L1154.91 1211.83 L1155.5 1211.83 L1156.09 1211.83 L1156.67 1211.83 L1157.26 1211.83 L1157.84 1211.83 L1158.43 1211.83 L1159.02 1211.83 L1159.6 1211.83 L1160.19 1211.83 L1160.78 1211.83 L1161.36 1211.83 L1161.95 1211.83 L1162.54 1211.83 L1163.12 1211.83 L1163.71 1211.83 L1164.29 1211.83 L1164.88 1211.83 L1165.47 1211.83 L1166.05 1211.83 L1166.64 1211.83 L1167.23 1211.83 L1167.81 1211.83 L1168.4 1211.83 L1168.99 1211.83 L1169.57 1211.83 L1170.16 1211.83 L1170.75 1211.83 L1171.33 1211.83 L1171.92 1211.83 L1172.5 1211.83 L1173.09 1211.83 L1173.68 1211.83 L1174.26 1211.83 L1174.85 1211.83 L1175.44 1211.83 L1176.02 1211.83 L1176.61 1211.83 L1177.2 1211.83 L1177.78 1211.83 L1178.37 1211.83 L1178.96 1211.83 L1179.54 1211.83 L1180.13 1211.83 L1180.71 1211.83 L1181.3 1211.83 L1181.89 1211.83 L1182.47 1211.83 L1183.06 1211.83 L1183.65 1211.83 L1184.23 1211.83 L1184.82 1211.83 L1185.41 1211.83 L1185.99 1211.83 L1186.58 1211.83 L1187.16 1211.83 L1187.75 1211.83 L1188.34 1211.83 L1188.92 1211.83 L1189.51 1211.83 L1190.1 1211.83 L1190.68 1211.83 L1191.27 1211.83 L1191.86 1211.83 L1192.44 1211.83 L1193.03 1211.83 L1193.62 1211.83 L1194.2 1211.83 L1194.79 1211.83 L1195.37 1211.83 L1195.96 1211.83 L1196.55 1211.83 L1197.13 1211.83 L1197.72 1211.83 L1198.31 1211.83 L1198.89 1211.83 L1199.48 1211.83 L1200.07 1211.83 L1200.65 1211.83 L1201.24 1211.83 L1201.83 1211.83 L1202.41 1211.83 L1203 1211.83 L1203.58 1211.83 L1204.17 1211.83 L1204.76 1211.83 L1205.34 1211.83 L1205.93 1211.83 L1206.52 1211.83 L1207.1 1211.83 L1207.69 1211.83 L1208.28 1211.83 L1208.86 1211.83 L1209.45 1211.83 L1210.03 1211.83 L1210.62 1211.83 L1211.21 1211.83 L1211.79 1211.83 L1212.38 1211.83 L1212.97 1211.83 L1213.55 1211.83 L1214.14 1211.83 L1214.73 1211.83 L1215.31 1211.83 L1215.9 1211.83 L1216.49 1211.83 L1217.07 1211.83 L1217.66 1211.83 L1218.24 1211.83 L1218.83 1211.83 L1219.42 1211.83 L1220 1211.83 L1220.59 1211.83 L1221.18 1211.83 L1221.76 1211.83 L1222.35 1211.83 L1222.94 1211.83 L1223.52 1211.83 L1224.11 1211.83 L1224.7 1211.83 L1225.28 1211.83 L1225.87 1211.83 L1226.45 1211.83 L1227.04 1211.83 L1227.63 1211.83 L1228.21 1211.83 L1228.8 1211.83 L1229.39 1211.83 L1229.97 1211.83 L1230.56 1211.83 L1231.15 1211.83 L1231.73 1211.83 L1232.32 1211.83 L1232.91 1211.83 L1233.49 1211.83 L1234.08 1211.83 L1234.66 1211.83 L1235.25 1211.83 L1235.84 1211.83 L1236.42 1211.83 L1237.01 1211.83 L1237.6 1211.83 L1238.18 1211.83 L1238.77 1211.83 L1239.36 1211.83 L1239.94 1211.83 L1240.53 1211.83 L1241.11 1211.83 L1241.7 1211.83 L1242.29 1211.83 L1242.87 1211.83 L1243.46 1211.83 L1244.05 1211.83 L1244.63 1211.83 L1245.22 1211.83 L1245.81 1211.83 L1246.39 1211.83 L1246.98 1211.83 L1247.57 1211.83 L1248.15 1211.83 L1248.74 1211.83 L1249.32 1211.83 L1249.91 1211.83 L1250.5 1211.83 L1251.08 1211.83 L1251.67 1211.83 L1252.26 1211.83 L1252.84 1211.83 L1253.43 1211.83 L1254.02 1211.83 L1254.6 1211.83 L1255.19 1211.83 L1255.78 1211.83 L1256.36 1211.83 L1256.95 1211.83 L1257.53 1211.83 L1258.12 1211.83 L1258.71 1211.83 L1259.29 1211.83 L1259.88 1211.83 L1260.47 1211.83 L1261.05 1211.83 L1261.64 1211.83 L1262.23 1211.83 L1262.81 1211.83 L1263.4 1211.83 L1263.98 1211.83 L1264.57 1211.83 L1265.16 1211.83 L1265.74 1211.83 L1266.33 1211.83 L1266.92 1211.83 L1267.5 1211.83 L1268.09 1211.83 L1268.68 1211.83 L1269.26 1211.83 L1269.85 1211.83 L1270.44 1211.83 L1271.02 1211.83 L1271.61 1211.83 L1272.19 1211.83 L1272.78 1211.83 L1273.37 1211.83 L1273.95 1211.83 L1274.54 1211.83 L1275.13 1211.83 L1275.71 1211.83 L1276.3 1211.83 L1276.89 1211.83 L1277.47 1211.83 L1278.06 1211.83 L1278.65 1211.83 L1279.23 1211.83 L1279.82 1211.83 L1280.4 1211.83 L1280.99 1211.83 L1281.58 1211.83 L1282.16 1211.83 L1282.75 1211.83 L1283.34 1211.83 L1283.92 1211.83 L1284.51 1211.83 L1285.1 1211.83 L1285.68 1211.83 L1286.27 1211.83 L1286.86 1211.83 L1287.44 1211.83 L1288.03 1211.83 L1288.61 1211.83 L1289.2 1211.83 L1289.79 1211.83 L1290.37 1211.83 L1290.96 1211.83 L1291.55 1211.83 L1292.13 1211.83 L1292.72 1211.83 L1293.31 1211.83 L1293.89 1211.83 L1294.48 1211.83 L1295.06 1211.83 L1295.65 1211.83 L1296.24 1211.83 L1296.82 1211.83 L1297.41 1211.83 L1298 1211.83 L1298.58 1211.83 L1299.17 1211.83 L1299.76 1211.83 L1300.34 1211.83 L1300.93 1211.83 L1301.52 1211.83 L1302.1 1211.83 L1302.69 1211.83 L1303.27 1211.83 L1303.86 1211.83 L1304.45 1211.83 L1305.03 1211.83 L1305.62 1211.83 L1306.21 1211.83 L1306.79 1211.83 L1307.38 1211.83 L1307.97 1211.83 L1308.55 1211.83 L1309.14 1211.83 L1309.73 1211.83 L1310.31 1211.83 L1310.9 1211.83 L1311.48 1211.83 L1312.07 1211.83 L1312.66 1211.83 L1313.24 1211.83 L1313.83 1211.83 L1314.42 1211.83 L1315 1211.83 L1315.59 1211.83 L1316.18 1211.83 L1316.76 1211.83 L1317.35 1211.83 L1317.93 1211.83 L1318.52 1211.83 L1319.11 1211.83 L1319.69 1211.83 L1320.28 1211.83 L1320.87 1211.83 L1321.45 1211.83 L1322.04 1211.83 L1322.63 1211.83 L1323.21 1211.83 L1323.8 1211.83 L1324.39 1211.83 L1324.97 1211.83 L1325.56 1211.83 L1326.14 1211.83 L1326.73 1211.83 L1327.32 1211.83 L1327.9 1211.83 L1328.49 1211.83 L1329.08 1211.83 L1329.66 1211.83 L1330.25 1211.83 L1330.84 1211.83 L1331.42 1211.83 L1332.01 1211.83 L1332.6 1211.83 L1333.18 1211.83 L1333.77 1211.83 L1334.35 1211.83 L1334.94 1211.83 L1335.53 1211.83 L1336.11 1211.83 L1336.7 1211.83 L1337.29 1211.83 L1337.87 1211.83 L1338.46 1211.83 L1339.05 1211.83 L1339.63 1211.83 L1340.22 1211.83 L1340.8 1211.83 L1341.39 1211.83 L1341.98 1211.83 L1342.56 1211.83 L1343.15 1211.83 L1343.74 1211.83 L1344.32 1211.83 L1344.91 1211.83 L1345.5 1211.83 L1346.08 1211.83 L1346.67 1211.83 L1347.26 1211.83 L1347.84 1211.83 L1348.43 1211.83 L1349.01 1211.83 L1349.6 1211.83 L1350.19 1211.83 L1350.77 1211.83 L1351.36 1211.83 L1351.95 1211.83 L1352.53 1211.83 L1353.12 1211.83 L1353.71 1211.83 L1354.29 1211.83 L1354.88 1211.83 L1355.47 1211.83 L1356.05 1211.83 L1356.64 1211.83 L1357.22 1211.83 L1357.81 1211.83 L1358.4 1211.83 L1358.98 1211.83 L1359.57 1211.83 L1360.16 1211.83 L1360.74 1211.83 L1361.33 1211.83 L1361.92 1211.83 L1362.5 1211.83 L1363.09 1211.83 L1363.68 1211.83 L1364.26 1211.83 L1364.85 1211.83 L1365.43 1211.83 L1366.02 1211.83 L1366.61 1211.83 L1367.19 1211.83 L1367.78 1211.83 L1368.37 1211.83 L1368.95 1211.83 L1369.54 1211.83 L1370.13 1211.83 L1370.71 1211.83 L1371.3 1211.83 L1371.88 1211.83 L1372.47 1211.83 L1373.06 1211.83 L1373.64 1211.83 L1374.23 1211.83 L1374.82 1211.83 L1375.4 1211.83 L1375.99 1211.83 L1376.58 1211.83 L1377.16 1211.83 L1377.75 1211.83 L1378.34 1211.83 L1378.92 1211.83 L1379.51 1211.83 L1380.09 1211.83 L1380.68 1211.83 L1381.27 1211.83 L1381.85 1211.83 L1382.44 1211.83 L1383.03 1211.83 L1383.61 1211.83 L1384.2 1211.83 L1384.79 1211.83 L1385.37 1211.83 L1385.96 1211.83 L1386.55 1211.83 L1387.13 1211.83 L1387.72 1211.83 L1388.3 1211.83 L1388.89 1211.83 L1389.48 1211.83 L1390.06 1211.83 L1390.65 1211.83 L1391.24 1211.83 L1391.82 1211.83 L1392.41 1211.83 L1393 1211.83 L1393.58 1211.83 L1394.17 1211.83 L1394.75 1211.83 L1395.34 1211.83 L1395.93 1211.83 L1396.51 1211.83 L1397.1 1211.83 L1397.69 1211.83 L1398.27 1211.83 L1398.86 1211.83 L1399.45 1211.83 L1400.03 1211.83 L1400.62 1211.83 L1401.21 1211.83 L1401.79 1211.83 L1402.38 1211.83 L1402.96 1211.83 L1403.55 1211.83 L1404.14 1211.83 L1404.72 1211.83 L1405.31 1211.83 L1405.9 1211.83 L1406.48 1211.83 L1407.07 1211.83 L1407.66 1211.83 L1408.24 1211.83 L1408.83 1211.83 L1409.42 1211.83 L1410 1211.83 L1410.59 1211.83 L1411.17 1211.83 L1411.76 1211.83 L1412.35 1211.83 L1412.93 1211.83 L1413.52 1211.83 L1414.11 1211.83 L1414.69 1211.83 L1415.28 1211.83 L1415.87 1211.83 L1416.45 1211.83 L1417.04 1211.83 L1417.63 1211.83 L1418.21 1211.83 L1418.8 1211.83 L1419.38 1211.83 L1419.97 1211.83 L1420.56 1211.83 L1421.14 1211.83 L1421.73 1211.83 L1422.32 1211.83 L1422.9 1211.83 L1423.49 1211.83 L1424.08 1211.83 L1424.66 1211.83 L1425.25 1211.83 L1425.83 1211.83 L1426.42 1211.83 L1427.01 1211.83 L1427.59 1211.83 L1428.18 1211.83 L1428.77 1211.83 L1429.35 1211.83 L1429.94 1211.83 L1430.53 1211.83 L1431.11 1211.83 L1431.7 1211.83 L1432.29 1211.83 L1432.87 1211.83 L1433.46 1211.83 L1434.04 1211.83 L1434.63 1211.83 L1435.22 1211.83 L1435.8 1211.83 L1436.39 1211.83 L1436.98 1211.83 L1437.56 1211.83 L1438.15 1211.83 L1438.74 1211.83 L1439.32 1211.83 L1439.91 1211.83 L1440.5 1211.83 L1441.08 1211.83 L1441.67 1211.83 L1442.25 1211.83 L1442.84 1211.83 L1443.43 1211.83 L1444.01 1211.83 L1444.6 1211.83 L1445.19 1211.83 L1445.77 1211.83 L1446.36 1211.83 L1446.95 1211.83 L1447.53 1211.83 L1448.12 1211.83 L1448.7 1211.83 L1449.29 1211.83 L1449.88 1211.83 L1450.46 1211.83 L1451.05 1211.83 L1451.64 1211.83 L1452.22 1211.83 L1452.81 1211.83 L1453.4 1211.83 L1453.98 1211.83 L1454.57 1211.83 L1455.16 1211.83 L1455.74 1211.83 L1456.33 1211.83 L1456.91 1211.83 L1457.5 1211.83 L1458.09 1211.83 L1458.67 1211.83 L1459.26 1211.83 L1459.85 1211.83 L1460.43 1211.83 L1461.02 1211.83 L1461.61 1211.83 L1462.19 1211.83 L1462.78 1211.83 L1463.37 1211.83 L1463.95 1211.83 L1464.54 1211.83 L1465.12 1211.83 L1465.71 1211.83 L1466.3 1211.83 L1466.88 1211.83 L1467.47 1211.83 L1468.06 1211.83 L1468.64 1211.83 L1469.23 1211.83 L1469.82 1211.83 L1470.4 1211.83 L1470.99 1211.83 L1471.57 1211.83 L1472.16 1211.83 L1472.75 1211.83 L1473.33 1211.83 L1473.92 1211.83 L1474.51 1211.83 L1475.09 1211.83 L1475.68 1211.83 L1476.27 1211.83 L1476.85 1211.83 L1477.44 1211.83 L1478.03 1211.83 L1478.61 1211.83 L1479.2 1211.83 L1479.78 1211.83 L1480.37 1211.83 L1480.96 1211.83 L1481.54 1211.83 L1482.13 1211.83 L1482.72 1211.83 L1483.3 1211.83 L1483.89 1211.83 L1484.48 1211.83 L1485.06 1211.83 L1485.65 1211.83 L1486.24 1211.83 L1486.82 1211.83 L1487.41 1211.83 L1487.99 1211.83 L1488.58 1211.83 L1489.17 1211.83 L1489.75 1211.83 L1490.34 1211.83 L1490.93 1211.83 L1491.51 1211.83 L1492.1 1211.83 L1492.69 1211.83 L1493.27 1211.83 L1493.86 1211.83 L1494.45 1211.83 L1495.03 1211.83 L1495.62 1211.83 L1496.2 1211.83 L1496.79 1211.83 L1497.38 1211.83 L1497.96 1211.83 L1498.55 1211.83 L1499.14 1211.83 L1499.72 1211.83 L1500.31 1211.83 L1500.9 1211.83 L1501.48 1211.83 L1502.07 1211.83 L1502.65 1211.83 L1503.24 1211.83 L1503.83 1211.83 L1504.41 1211.83 L1505 1211.83 L1505.59 1211.83 L1506.17 1211.83 L1506.76 1211.83 L1507.35 1211.83 L1507.93 1211.83 L1508.52 1211.83 L1509.11 1211.83 L1509.69 1211.83 L1510.28 1211.83 L1510.86 1211.83 L1511.45 1211.83 L1512.04 1211.83 L1512.62 1211.83 L1513.21 1211.83 L1513.8 1211.83 L1514.38 1211.83 L1514.97 1211.83 L1515.56 1211.83 L1516.14 1211.83 L1516.73 1211.83 L1517.32 1211.83 L1517.9 1211.83 L1518.49 1211.83 L1519.07 1211.83 L1519.66 1211.83 L1520.25 1211.83 L1520.83 1211.83 L1521.42 1211.83 L1522.01 1211.83 L1522.59 1211.83 L1523.18 1211.83 L1523.77 1211.83 L1524.35 1211.83 L1524.94 1211.83 L1525.52 1211.83 L1526.11 1211.83 L1526.7 1211.83 L1527.28 1211.83 L1527.87 1211.83 L1528.46 1211.83 L1529.04 1211.83 L1529.63 1211.83 L1530.22 1211.83 L1530.8 1211.83 L1531.39 1211.83 L1531.98 1211.83 L1532.56 1211.83 L1533.15 1211.83 L1533.73 1211.83 L1534.32 1211.83 L1534.91 1211.83 L1535.49 1211.83 L1536.08 1211.83 L1536.67 1211.83 L1537.25 1211.83 L1537.84 1211.83 L1538.43 1211.83 L1539.01 1211.83 L1539.6 1211.83 L1540.19 1211.83 L1540.77 1211.83 L1541.36 1211.83 L1541.94 1211.83 L1542.53 1211.83 L1543.12 1211.83 L1543.7 1211.83 L1544.29 1211.83 L1544.88 1211.83 L1545.46 1211.83 L1546.05 1211.83 L1546.64 1211.83 L1547.22 1211.83 L1547.81 1211.83 L1548.4 1211.83 L1548.98 1211.83 L1549.57 1211.83 L1550.15 1211.83 L1550.74 1211.83 L1551.33 1211.83 L1551.91 1211.83 L1552.5 1211.83 L1553.09 1211.83 L1553.67 1211.83 L1554.26 1211.83 L1554.85 1211.83 L1555.43 1211.83 L1556.02 1211.83 L1556.6 1211.83 L1557.19 1211.83 L1557.78 1211.83 L1558.36 1211.83 L1558.95 1211.83 L1559.54 1211.83 L1560.12 1211.83 L1560.71 1211.83 L1561.3 1211.83 L1561.88 1211.83 L1562.47 1211.83 L1563.06 1211.83 L1563.64 1211.83 L1564.23 1211.83 L1564.81 1211.83 L1565.4 1211.83 L1565.99 1211.83 L1566.57 1211.83 L1567.16 1211.83 L1567.75 1211.83 L1568.33 1211.83 L1568.92 1211.83 L1569.51 1211.83 L1570.09 1211.83 L1570.68 1211.83 L1571.27 1211.83 L1571.85 1211.83 L1572.44 1211.83 L1573.02 1211.83 L1573.61 1211.83 L1574.2 1211.83 L1574.78 1211.83 L1575.37 1211.83 L1575.96 1211.83 L1576.54 1211.83 L1577.13 1211.83 L1577.72 1211.83 L1578.3 1211.83 L1578.89 1211.83 L1579.47 1211.83 L1580.06 1211.83 L1580.65 1211.83 L1581.23 1211.83 L1581.82 1211.83 L1582.41 1211.83 L1582.99 1211.83 L1583.58 1211.83 L1584.17 1211.83 L1584.75 1211.83 L1585.34 1211.83 L1585.93 1211.83 L1586.51 1211.83 L1587.1 1211.83 L1587.68 1211.83 L1588.27 1211.83 L1588.86 1211.83 L1589.44 1211.83 L1590.03 1211.83 L1590.62 1211.83 L1591.2 1211.83 L1591.79 1211.83 L1592.38 1211.83 L1592.96 1211.83 L1593.55 1211.83 L1594.14 1211.83 L1594.72 1211.83 L1595.31 1211.83 L1595.89 1211.83 L1596.48 1211.83 L1597.07 1211.83 L1597.65 1211.83 L1598.24 1211.83 L1598.83 1211.83 L1599.41 1211.83 L1600 1211.83 L1600.59 1211.83 L1601.17 1211.83 L1601.76 1211.83 L1602.34 1211.83 L1602.93 1211.83 L1603.52 1211.83 L1604.1 1211.83 L1604.69 1211.83 L1605.28 1211.83 L1605.86 1211.83 L1606.45 1211.83 L1607.04 1211.83 L1607.62 1211.83 L1608.21 1211.83 L1608.8 1211.83 L1609.38 1211.83 L1609.97 1211.83 L1610.55 1211.83 L1611.14 1211.83 L1611.73 1211.83 L1612.31 1211.83 L1612.9 1211.83 L1613.49 1211.83 L1614.07 1211.83 L1614.66 1211.83 L1615.25 1211.83 L1615.83 1211.83 L1616.42 1211.83 L1617.01 1211.83 L1617.59 1211.83 L1618.18 1211.83 L1618.76 1211.83 L1619.35 1211.83 L1619.94 1211.83 L1620.52 1211.83 L1621.11 1211.83 L1621.7 1211.83 L1622.28 1211.83 L1622.87 1211.83 L1623.46 1211.83 L1624.04 1211.83 L1624.63 1211.83 L1625.22 1211.83 L1625.8 1211.83 L1626.39 1211.83 L1626.97 1211.83 L1627.56 1211.83 L1628.15 1211.83 L1628.73 1211.83 L1629.32 1211.83 L1629.91 1211.83 L1630.49 1211.83 L1631.08 1211.83 L1631.67 1211.83 L1632.25 1211.83 L1632.84 1211.83 L1633.42 1211.83 L1634.01 1211.83 L1634.6 1211.83 L1635.18 1211.83 L1635.77 1211.83 L1636.36 1211.83 L1636.94 1211.83 L1637.53 1211.83 L1638.12 1211.83 L1638.7 1211.83 L1639.29 1211.83 L1639.88 1211.83 L1640.46 1211.83 L1641.05 1211.83 L1641.63 1211.83 L1642.22 1211.83 L1642.81 1211.83 L1643.39 1211.83 L1643.98 1211.83 L1644.57 1211.83 L1645.15 1211.83 L1645.74 1211.83 L1646.33 1211.83 L1646.91 1211.83 L1647.5 1211.83 L1648.09 1211.83 L1648.67 1211.83 L1649.26 1211.83 L1649.84 1211.83 L1650.43 1211.83 L1651.02 1211.83 L1651.6 1211.83 L1652.19 1211.83 L1652.78 1211.83 L1653.36 1211.83 L1653.95 1211.83 L1654.54 1211.83 L1655.12 1211.83 L1655.71 1211.83 L1656.29 1211.83 L1656.88 1211.83 L1657.47 1211.83 L1658.05 1211.83 L1658.64 1211.83 L1659.23 1211.83 L1659.81 1211.83 L1660.4 1211.83 L1660.99 1211.83 L1661.57 1211.83 L1662.16 1211.83 L1662.75 1211.83 L1663.33 1211.83 L1663.92 1211.83 L1664.5 1211.83 L1665.09 1211.83 L1665.68 1211.83 L1666.26 1211.83 L1666.85 1211.83 L1667.44 1211.83 L1668.02 1211.83 L1668.61 1211.83 L1669.2 1211.83 L1669.78 1211.83 L1670.37 1211.83 L1670.96 1211.83 L1671.54 1211.83 L1672.13 1211.83 L1672.71 1211.83 L1673.3 1211.83 L1673.89 1211.83 L1674.47 1211.83 L1675.06 1211.83 L1675.65 1211.83 L1676.23 1211.83 L1676.82 1211.83 L1677.41 1211.83 L1677.99 1211.83 L1678.58 1211.83 L1679.17 1211.83 L1679.75 1211.83 L1680.34 1211.83 L1680.92 1211.83 L1681.51 1211.83 L1682.1 1211.83 L1682.68 1211.83 L1683.27 1211.83 L1683.86 1211.83 L1684.44 1211.83 L1685.03 1211.83 L1685.62 1211.83 L1686.2 1211.83 L1686.79 1211.83 L1687.37 1211.83 L1687.96 1211.83 L1688.55 1211.83 L1689.13 1211.83 L1689.72 1211.83 L1690.31 1211.83 L1690.89 1211.83 L1691.48 1211.83 L1692.07 1211.83 L1692.65 1211.83 L1693.24 1211.83 L1693.83 1211.83 L1694.41 1211.83 L1695 1211.83 L1695.58 1211.83 L1696.17 1211.83 L1696.76 1211.83 L1697.34 1211.83 L1697.93 1211.83 L1698.52 1211.83 L1699.1 1211.83 L1699.69 1211.83 L1700.28 1211.83 L1700.86 1211.83 L1701.45 1211.83 L1702.04 1211.83 L1702.62 1211.83 L1703.21 1211.83 L1703.79 1211.83 L1704.38 1211.83 L1704.97 1211.83 L1705.55 1211.83 L1706.14 1211.83 L1706.73 1211.83 L1707.31 1211.83 L1707.9 1211.83 L1708.49 1211.83 L1709.07 1211.83 L1709.66 1211.83 L1710.24 1211.83 L1710.83 1211.83 L1711.42 1211.83 L1712 1211.83 L1712.59 1211.83 L1713.18 1211.83 L1713.76 1211.83 L1714.35 1211.83 L1714.94 1211.83 L1715.52 1211.83 L1716.11 1211.83 L1716.7 1211.83 L1717.28 1211.83 L1717.87 1211.83 L1718.45 1211.83 L1719.04 1211.83 L1719.63 1211.83 L1720.21 1211.83 L1720.8 1211.83 L1721.39 1211.83 L1721.97 1211.83 L1722.56 1211.83 L1723.15 1211.83 L1723.73 1211.83 L1724.32 1211.83 L1724.91 1211.83 L1725.49 1211.83 L1726.08 1211.83 L1726.66 1211.83 L1727.25 1211.83 L1727.84 1211.83 L1728.42 1211.83 L1729.01 1211.83 L1729.6 1211.83 L1730.18 1211.83 L1730.77 1211.83 L1731.36 1211.83 L1731.94 1211.83 L1732.53 1211.83 L1733.11 1211.83 L1733.7 1211.83 L1734.29 1211.83 L1734.87 1211.83 L1735.46 1211.83 L1736.05 1211.83 L1736.63 1211.83 L1737.22 1211.83 L1737.81 1211.83 L1738.39 1211.83 L1738.98 1211.83 L1739.57 1211.83 L1740.15 1211.83 L1740.74 1211.83 L1741.32 1211.83 L1741.91 1211.83 L1742.5 1211.83 L1743.08 1211.83 L1743.67 1211.83 L1744.26 1211.83 L1744.84 1211.83 L1745.43 1211.83 L1746.02 1211.83 L1746.6 1211.83 L1747.19 1211.83 L1747.78 1211.83 L1748.36 1211.83 L1748.95 1211.83 L1749.53 1211.83 L1750.12 1211.83 L1750.71 1211.83 L1751.29 1211.83 L1751.88 1211.83 L1752.47 1211.83 L1753.05 1211.83 L1753.64 1211.83 L1754.23 1211.83 L1754.81 1211.83 L1755.4 1211.83 L1755.99 1211.83 L1756.57 1211.83 L1757.16 1211.83 L1757.74 1211.83 L1758.33 1211.83 L1758.92 1211.83 L1759.5 1211.83 L1760.09 1211.83 L1760.68 1211.83 L1761.26 1211.83 L1761.85 1211.83 L1762.44 1211.83 L1763.02 1211.83 L1763.61 1211.83 L1764.19 1211.83 L1764.78 1211.83 L1765.37 1211.83 L1765.95 1211.83 L1766.54 1211.83 L1767.13 1211.83 L1767.71 1211.83 L1768.3 1211.83 L1768.89 1211.83 L1769.47 1211.83 L1770.06 1211.83 L1770.65 1211.83 L1771.23 1211.83 L1771.82 1211.83 L1772.4 1211.83 L1772.99 1211.83 L1773.58 1211.83 L1774.16 1211.83 L1774.75 1211.83 L1775.34 1211.83 L1775.92 1211.83 L1776.51 1211.83 L1777.1 1211.83 L1777.68 1211.83 L1778.27 1211.83 L1778.86 1211.83 L1779.44 1211.83 L1780.03 1211.83 L1780.61 1211.83 L1781.2 1211.83 L1781.79 1211.83 L1782.37 1211.83 L1782.96 1211.83 L1783.55 1211.83 L1784.13 1211.83 L1784.72 1211.83 L1785.31 1211.83 L1785.89 1211.83 L1786.48 1211.83 L1787.06 1211.83 L1787.65 1211.83 L1788.24 1211.83 L1788.82 1211.83 L1789.41 1211.83 L1790 1211.83 L1790.58 1211.83 L1791.17 1211.83 L1791.76 1211.83 L1792.34 1211.83 L1792.93 1211.83 L1793.52 1211.83 L1794.1 1211.83 L1794.69 1211.83 L1795.27 1211.83 L1795.86 1211.83 L1796.45 1211.83 L1797.03 1211.83 L1797.62 1211.83 L1798.21 1211.83 L1798.79 1211.83 L1799.38 1211.83 L1799.97 1211.83 L1800.55 1211.83 L1801.14 1211.83 L1801.73 1211.83 L1802.31 1211.83 L1802.9 1211.83 L1803.48 1211.83 L1804.07 1211.83 L1804.66 1211.83 L1805.24 1211.83 L1805.83 1211.83 L1806.42 1211.83 L1807 1211.83 L1807.59 1211.83 L1808.18 1211.83 L1808.76 1211.83 L1809.35 1211.83 L1809.94 1211.83 L1810.52 1211.83 L1811.11 1211.83 L1811.69 1211.83 L1812.28 1211.83 L1812.87 1211.83 L1813.45 1211.83 L1814.04 1211.83 L1814.63 1211.83 L1815.21 1211.83 L1815.8 1211.83 L1816.39 1211.83 L1816.97 1211.83 L1817.56 1211.83 L1818.14 1211.83 L1818.73 1211.83 L1819.32 1211.83 L1819.9 1211.83 L1820.49 1211.83 L1821.08 1211.83 L1821.66 1211.83 L1822.25 1211.83 L1822.84 1211.83 L1823.42 1211.83 L1824.01 1211.83 L1824.6 1211.83 L1825.18 1211.83 L1825.77 1211.83 L1826.35 1211.83 L1826.94 1211.83 L1827.53 1211.83 L1828.11 1211.83 L1828.7 1211.83 L1829.29 1211.83 L1829.87 1211.83 L1830.46 1211.83 L1831.05 1211.83 L1831.63 1211.83 L1832.22 1211.83 L1832.81 1211.83 L1833.39 1211.83 L1833.98 1211.83 L1834.56 1211.83 L1835.15 1211.83 L1835.74 1211.83 L1836.32 1211.83 L1836.91 1211.83 L1837.5 1211.83 L1838.08 1211.83 L1838.67 1211.83 L1839.26 1211.83 L1839.84 1211.83 L1840.43 1211.83 L1841.01 1211.83 L1841.6 1211.83 L1842.19 1211.83 L1842.77 1211.83 L1843.36 1211.83 L1843.95 1211.83 L1844.53 1211.83 L1845.12 1211.83 L1845.71 1211.83 L1846.29 1211.83 L1846.88 1211.83 L1847.47 1211.83 L1848.05 1211.83 L1848.64 1211.83 L1849.22 1211.83 L1849.81 1211.83 L1850.4 1211.83 L1850.98 1211.83 L1851.57 1211.83 L1852.16 1211.83 L1852.74 1211.83 L1853.33 1211.83 L1853.92 1211.83 L1854.5 1211.83 L1855.09 1211.83 L1855.68 1211.83 L1856.26 1211.83 L1856.85 1211.83 L1857.43 1211.83 L1858.02 1211.83 L1858.61 1211.83 L1859.19 1211.83 L1859.78 1211.83 L1860.37 1211.83 L1860.95 1211.83 L1861.54 1211.83 L1862.13 1211.83 L1862.71 1211.83 L1863.3 1211.83 L1863.88 1211.83 L1864.47 1211.83 L1865.06 1211.83 L1865.64 1211.83 L1866.23 1211.83 L1866.82 1211.83 L1867.4 1211.83 L1867.99 1211.83 L1868.58 1211.83 L1869.16 1211.83 L1869.75 1211.83 L1870.34 1211.83 L1870.92 1211.83 L1871.51 1211.83 L1872.09 1211.83 L1872.68 1211.83 L1873.27 1211.83 L1873.85 1211.83 L1874.44 1211.83 L1875.03 1211.83 L1875.61 1211.83 L1876.2 1211.83 L1876.79 1211.83 L1877.37 1211.83 L1877.96 1211.83 L1878.55 1211.83 L1879.13 1211.83 L1879.72 1211.83 L1880.3 1211.83 L1880.89 1211.83 L1881.48 1211.83 L1882.06 1211.83 L1882.65 1211.83 L1883.24 1211.83 L1883.82 1211.83 L1884.41 1211.83 L1885 1211.83 L1885.58 1211.83 L1886.17 1211.83 L1886.76 1211.83 L1887.34 1211.83 L1887.93 1211.83 L1888.51 1211.83 L1889.1 1211.83 L1889.69 1211.83 L1890.27 1211.83 L1890.86 1211.83 L1891.45 1211.83 L1892.03 1211.83 L1892.62 1211.83 L1893.21 1211.83 L1893.79 1211.83 L1894.38 1211.83 L1894.96 1211.83 L1895.55 1211.83 L1896.14 1211.83 L1896.72 1211.83 L1897.31 1211.83 L1897.9 1211.83 L1898.48 1211.83 L1899.07 1211.83 L1899.66 1211.83 L1900.24 1211.83 L1900.83 1211.83 L1901.42 1211.83 L1902 1211.83 L1902.59 1211.83 L1903.17 1211.83 L1903.76 1211.83 L1904.35 1211.83 L1904.93 1211.83 L1905.52 1211.83 L1906.11 1211.83 L1906.69 1211.83 L1907.28 1211.83 L1907.87 1211.83 L1908.45 1211.83 L1909.04 1211.83 L1909.63 1211.83 L1910.21 1211.83 L1910.8 1211.83 L1911.38 1211.83 L1911.97 1211.83 L1912.56 1211.83 L1913.14 1211.83 L1913.73 1211.83 L1914.32 1211.83 L1914.9 1211.83 L1915.49 1211.83 L1916.08 1211.83 L1916.66 1211.83 L1917.25 1211.83 L1917.83 1211.83 L1918.42 1211.83 L1919.01 1211.83 L1919.59 1211.83 L1920.18 1211.83 L1920.77 1211.83 L1921.35 1211.83 L1921.94 1211.83 L1922.53 1211.83 L1923.11 1211.83 L1923.7 1211.83 L1924.29 1211.83 L1924.87 1211.83 L1925.46 1211.83 L1926.04 1211.83 L1926.63 1211.83 L1927.22 1211.83 L1927.8 1211.83 L1928.39 1211.83 L1928.98 1211.83 L1929.56 1211.83 L1930.15 1211.83 L1930.74 1211.83 L1931.32 1211.83 L1931.91 1211.83 L1932.5 1211.83 L1933.08 1211.83 L1933.67 1211.83 L1934.25 1211.83 L1934.84 1211.83 L1935.43 1211.83 L1936.01 1211.83 L1936.6 1211.83 L1937.19 1211.83 L1937.77 1211.83 L1938.36 1211.83 L1938.95 1211.83 L1939.53 1211.83 L1940.12 1211.83 L1940.71 1211.83 L1941.29 1211.83 L1941.88 1211.83 L1942.46 1211.83 L1943.05 1211.83 L1943.64 1211.83 L1944.22 1211.83 L1944.81 1211.83 L1945.4 1211.83 L1945.98 1211.83 L1946.57 1211.83 L1947.16 1211.83 L1947.74 1211.83 L1948.33 1211.83 L1948.91 1211.83 L1949.5 1211.83 L1950.09 1211.83 L1950.67 1211.83 L1951.26 1211.83 L1951.85 1211.83 L1952.43 1211.83 L1953.02 1211.83 L1953.61 1211.83 L1954.19 1211.83 L1954.78 1211.83 L1955.37 1211.83 L1955.95 1211.83 L1956.54 1211.83 L1957.12 1211.83 L1957.71 1211.83 L1958.3 1211.83 L1958.88 1211.83 L1959.47 1211.83 L1960.06 1211.83 L1960.64 1211.83 L1961.23 1211.83 L1961.82 1211.83 L1962.4 1211.83 L1962.99 1211.83 L1963.58 1211.83 L1964.16 1211.83 L1964.75 1211.83 L1965.33 1211.83 L1965.92 1211.83 L1966.51 1211.83 L1967.09 1211.83 L1967.68 1211.83 L1968.27 1211.83 L1968.85 1211.83 L1969.44 1211.83 L1970.03 1211.83 L1970.61 1211.83 L1971.2 1211.83 L1971.78 1211.83 L1972.37 1211.83 L1972.96 1211.83 L1973.54 1211.83 L1974.13 1211.83 L1974.72 1211.83 L1975.3 1211.83 L1975.89 1211.83 L1976.48 1211.83 L1977.06 1211.83 L1977.65 1211.83 L1978.24 1211.83 L1978.82 1211.83 L1979.41 1211.83 L1979.99 1211.83 L1980.58 1211.83 L1981.17 1211.83 L1981.75 1211.83 L1982.34 1211.83 L1982.93 1211.83 L1983.51 1211.83 L1984.1 1211.83 L1984.69 1211.83 L1985.27 1211.83 L1985.86 1211.83 L1986.45 1211.83 L1987.03 1211.83 L1987.62 1211.83 L1988.2 1211.83 L1988.79 1211.83 L1989.38 1211.83 L1989.96 1211.83 L1990.55 1211.83 L1991.14 1211.83 L1991.72 1211.83 L1992.31 1211.83 L1992.9 1211.83 L1993.48 1211.83 L1994.07 1211.83 L1994.65 1211.83 L1995.24 1211.83 L1995.83 1211.83 L1996.41 1211.83 L1997 1211.83 L1997.59 1211.83 L1998.17 1211.83 L1998.76 1211.83 L1999.35 1211.83 L1999.93 1211.83 L2000.52 1211.83 L2001.11 1211.83 L2001.69 1211.83 L2002.28 1211.83 L2002.86 1211.83 L2003.45 1211.83 L2004.04 1211.83 L2004.62 1211.83 L2005.21 1211.83 L2005.8 1211.83 L2006.38 1211.83 L2006.97 1211.83 L2007.56 1211.83 L2008.14 1211.83 L2008.73 1211.83 L2009.32 1211.83 L2009.9 1211.83 L2010.49 1211.83 L2011.07 1211.83 L2011.66 1211.83 L2012.25 1211.83 L2012.83 1211.83 L2013.42 1211.83 L2014.01 1211.83 L2014.59 1211.83 L2015.18 1211.83 L2015.77 1211.83 L2016.35 1211.83 L2016.94 1211.83 L2017.53 1211.83 L2018.11 1211.83 L2018.7 1211.83 L2019.28 1211.83 L2019.87 1211.83 L2020.46 1211.83 L2021.04 1211.83 L2021.63 1211.83 L2022.22 1211.83 L2022.8 1211.83 L2023.39 1211.83 L2023.98 1211.83 L2024.56 1211.83 L2025.15 1211.83 L2025.73 1211.83 L2026.32 1211.83 L2026.91 1211.83 L2027.49 1211.83 L2028.08 1211.83 L2028.67 1211.83 L2029.25 1211.83 L2029.84 1211.83 L2030.43 1211.83 L2031.01 1211.83 L2031.6 1211.83 L2032.19 1211.83 L2032.77 1211.83 L2033.36 1211.83 L2033.94 1211.83 L2034.53 1211.83 L2035.12 1211.83 L2035.7 1211.83 L2036.29 1211.83 L2036.88 1211.83 L2037.46 1211.83 L2038.05 1211.83 L2038.64 1211.83 L2039.22 1211.83 L2039.81 1211.83 L2040.4 1211.83 L2040.98 1211.83 L2041.57 1211.83 L2042.15 1211.83 L2042.74 1211.83 L2043.33 1211.83 L2043.91 1211.83 L2044.5 1211.83 L2045.09 1211.83 L2045.67 1211.83 L2046.26 1211.83 L2046.85 1211.83 L2047.43 1211.83 L2048.02 1211.83 L2048.6 1211.83 L2049.19 1211.83 L2049.78 1211.83 L2050.36 1211.83 L2050.95 1211.83 L2051.54 1211.83 L2052.12 1211.83 L2052.71 1211.83 L2053.3 1211.83 L2053.88 1211.83 L2054.47 1211.83 L2055.06 1211.83 L2055.64 1211.83 L2056.23 1211.83 L2056.81 1211.83 L2057.4 1211.83 L2057.99 1211.83 L2058.57 1211.83 L2059.16 1211.83 L2059.75 1211.83 L2060.33 1211.83 L2060.92 1211.83 L2061.51 1211.83 L2062.09 1211.83 L2062.68 1211.83 L2063.27 1211.83 L2063.85 1211.83 L2064.44 1211.83 L2065.02 1211.83 L2065.61 1211.83 L2066.2 1211.83 L2066.78 1211.83 L2067.37 1211.83 L2067.96 1211.83 L2068.54 1211.83 L2069.13 1211.83 L2069.72 1211.83 L2070.3 1211.83 L2070.89 1211.83 L2071.48 1211.83 L2072.06 1211.83 L2072.65 1211.83 L2073.23 1211.83 L2073.82 1211.83 L2074.41 1211.83 L2074.99 1211.83 L2075.58 1211.83 L2076.17 1211.83 L2076.75 1211.83 L2077.34 1211.83 L2077.93 1211.83 L2078.51 1211.83 L2079.1 1211.83 L2079.68 1211.83 L2080.27 1211.83 L2080.86 1211.83 L2081.44 1211.83 L2082.03 1211.83 L2082.62 1211.83 L2083.2 1211.83 L2083.79 1211.83 L2084.38 1211.83 L2084.96 1211.83 L2085.55 1211.83 L2086.14 1211.83 L2086.72 1211.83 L2087.31 1211.83 L2087.89 1211.83 L2088.48 1211.83 L2089.07 1211.83 L2089.65 1211.83 L2090.24 1211.83 L2090.83 1211.83 L2091.41 1211.83 L2092 1211.83 L2092.59 1211.83 L2093.17 1211.83 L2093.76 1211.83 L2094.35 1211.83 L2094.93 1211.83 L2095.52 1211.83 L2096.1 1211.83 L2096.69 1211.83 L2097.28 1211.83 L2097.86 1211.83 L2098.45 1211.83 L2099.04 1211.83 L2099.62 1211.83 L2100.21 1211.83 L2100.8 1211.83 L2101.38 1211.83 L2101.97 1211.83 L2102.55 1211.83 L2103.14 1211.83 L2103.73 1211.83 L2104.31 1211.83 L2104.9 1211.83 L2105.49 1211.83 L2106.07 1211.83 L2106.66 1211.83 L2107.25 1211.83 L2107.83 1211.83 L2108.42 1211.83 L2109.01 1211.83 L2109.59 1211.83 L2110.18 1211.83 L2110.76 1211.83 L2111.35 1211.83 L2111.94 1211.83 L2112.52 1211.83 L2113.11 1211.83 L2113.7 1211.83 L2114.28 1211.83 L2114.87 1211.83 L2115.46 1211.83 L2116.04 1211.83 L2116.63 1211.83 L2117.22 1211.83 L2117.8 1211.83 L2118.39 1211.83 L2118.97 1211.83 L2119.56 1211.83 L2120.15 1211.83 L2120.73 1211.83 L2121.32 1211.83 L2121.91 1211.83 L2122.49 1211.83 L2123.08 1211.83 L2123.67 1211.83 L2124.25 1211.83 L2124.84 1211.83 L2125.42 1211.83 L2126.01 1211.83 L2126.6 1211.83 L2127.18 1211.83 L2127.77 1211.83 L2128.36 1211.83 L2128.94 1211.83 L2129.53 1211.83 L2130.12 1211.83 L2130.7 1211.83 L2131.29 1211.83 L2131.88 1211.83 L2132.46 1211.83 L2133.05 1211.83 L2133.63 1211.83 L2134.22 1211.83 L2134.81 1211.83 L2135.39 1211.83 L2135.98 1211.83 L2136.57 1211.83 L2137.15 1211.83 L2137.74 1211.83 L2138.33 1211.83 L2138.91 1211.83 L2139.5 1211.83 L2140.09 1211.83 L2140.67 1211.83 L2141.26 1211.83 L2141.84 1211.83 L2142.43 1211.83 L2143.02 1211.83 L2143.6 1211.83 L2144.19 1211.83 L2144.78 1211.83 L2145.36 1211.83 L2145.95 1211.83 L2146.54 1211.83 L2147.12 1211.83 L2147.71 1211.83 L2148.3 1211.83 L2148.88 1211.83 L2149.47 1211.83 L2150.05 1211.83 L2150.64 1211.83 L2151.23 1211.83 L2151.81 1211.83 L2152.4 1211.83 L2152.99 1211.83 L2153.57 1211.83 L2154.16 1211.83 L2154.75 1211.83 L2155.33 1211.83 L2155.92 1211.83 L2156.5 1211.83 L2157.09 1211.83 L2157.68 1211.83 L2158.26 1211.83 L2158.26 1211.62 L2157.68 1211.62 L2157.09 1211.62 L2156.5 1211.62 L2155.92 1211.62 L2155.33 1211.62 L2154.75 1211.62 L2154.16 1211.62 L2153.57 1211.62 L2152.99 1211.62 L2152.4 1211.62 L2151.81 1211.62 L2151.23 1211.62 L2150.64 1211.62 L2150.05 1211.62 L2149.47 1211.62 L2148.88 1211.62 L2148.3 1211.62 L2147.71 1211.62 L2147.12 1211.62 L2146.54 1211.62 L2145.95 1211.62 L2145.36 1211.62 L2144.78 1211.62 L2144.19 1211.62 L2143.6 1211.62 L2143.02 1211.62 L2142.43 1211.62 L2141.84 1211.62 L2141.26 1211.62 L2140.67 1211.62 L2140.09 1211.62 L2139.5 1211.62 L2138.91 1211.62 L2138.33 1211.62 L2137.74 1211.62 L2137.15 1211.62 L2136.57 1211.62 L2135.98 1211.62 L2135.39 1211.62 L2134.81 1211.62 L2134.22 1211.62 L2133.63 1211.62 L2133.05 1211.62 L2132.46 1211.62 L2131.88 1211.62 L2131.29 1211.62 L2130.7 1211.62 L2130.12 1211.62 L2129.53 1211.62 L2128.94 1211.62 L2128.36 1211.62 L2127.77 1211.62 L2127.18 1211.62 L2126.6 1211.62 L2126.01 1211.62 L2125.42 1211.62 L2124.84 1211.62 L2124.25 1211.62 L2123.67 1211.62 L2123.08 1211.62 L2122.49 1211.62 L2121.91 1211.62 L2121.32 1211.62 L2120.73 1211.62 L2120.15 1211.62 L2119.56 1211.62 L2118.97 1211.62 L2118.39 1211.62 L2117.8 1211.62 L2117.22 1211.62 L2116.63 1211.62 L2116.04 1211.62 L2115.46 1211.62 L2114.87 1211.62 L2114.28 1211.62 L2113.7 1211.62 L2113.11 1211.62 L2112.52 1211.62 L2111.94 1211.62 L2111.35 1211.62 L2110.76 1211.62 L2110.18 1211.62 L2109.59 1211.62 L2109.01 1211.62 L2108.42 1211.62 L2107.83 1211.62 L2107.25 1211.62 L2106.66 1211.62 L2106.07 1211.62 L2105.49 1211.62 L2104.9 1211.62 L2104.31 1211.62 L2103.73 1211.62 L2103.14 1211.62 L2102.55 1211.62 L2101.97 1211.62 L2101.38 1211.62 L2100.8 1211.62 L2100.21 1211.62 L2099.62 1211.62 L2099.04 1211.62 L2098.45 1211.62 L2097.86 1211.62 L2097.28 1211.62 L2096.69 1211.62 L2096.1 1211.62 L2095.52 1211.62 L2094.93 1211.62 L2094.35 1211.62 L2093.76 1211.62 L2093.17 1211.62 L2092.59 1211.62 L2092 1211.62 L2091.41 1211.62 L2090.83 1211.62 L2090.24 1211.62 L2089.65 1211.62 L2089.07 1211.62 L2088.48 1211.62 L2087.89 1211.62 L2087.31 1211.62 L2086.72 1211.62 L2086.14 1211.62 L2085.55 1211.62 L2084.96 1211.62 L2084.38 1211.62 L2083.79 1211.62 L2083.2 1211.62 L2082.62 1211.62 L2082.03 1211.62 L2081.44 1211.62 L2080.86 1211.62 L2080.27 1211.62 L2079.68 1211.62 L2079.1 1211.62 L2078.51 1211.62 L2077.93 1211.62 L2077.34 1211.62 L2076.75 1211.62 L2076.17 1211.62 L2075.58 1211.62 L2074.99 1211.62 L2074.41 1211.62 L2073.82 1211.62 L2073.23 1211.62 L2072.65 1211.62 L2072.06 1211.62 L2071.48 1211.62 L2070.89 1211.62 L2070.3 1211.62 L2069.72 1211.62 L2069.13 1211.62 L2068.54 1211.62 L2067.96 1211.62 L2067.37 1211.62 L2066.78 1211.62 L2066.2 1211.62 L2065.61 1211.62 L2065.02 1211.62 L2064.44 1211.62 L2063.85 1211.62 L2063.27 1211.62 L2062.68 1211.62 L2062.09 1211.62 L2061.51 1211.62 L2060.92 1211.62 L2060.33 1211.62 L2059.75 1211.62 L2059.16 1211.62 L2058.57 1211.62 L2057.99 1211.62 L2057.4 1211.62 L2056.81 1211.62 L2056.23 1211.62 L2055.64 1211.62 L2055.06 1211.62 L2054.47 1211.62 L2053.88 1211.62 L2053.3 1211.62 L2052.71 1211.62 L2052.12 1211.62 L2051.54 1211.62 L2050.95 1211.62 L2050.36 1211.62 L2049.78 1211.62 L2049.19 1211.62 L2048.6 1211.62 L2048.02 1211.62 L2047.43 1211.62 L2046.85 1211.62 L2046.26 1211.62 L2045.67 1211.62 L2045.09 1211.62 L2044.5 1211.62 L2043.91 1211.62 L2043.33 1211.62 L2042.74 1211.62 L2042.15 1211.62 L2041.57 1211.62 L2040.98 1211.62 L2040.4 1211.62 L2039.81 1211.62 L2039.22 1211.62 L2038.64 1211.62 L2038.05 1211.62 L2037.46 1211.62 L2036.88 1211.62 L2036.29 1211.62 L2035.7 1211.62 L2035.12 1211.62 L2034.53 1211.62 L2033.94 1211.62 L2033.36 1211.62 L2032.77 1211.62 L2032.19 1211.62 L2031.6 1211.62 L2031.01 1211.62 L2030.43 1211.62 L2029.84 1211.62 L2029.25 1211.62 L2028.67 1211.62 L2028.08 1211.62 L2027.49 1211.62 L2026.91 1211.62 L2026.32 1211.62 L2025.73 1211.62 L2025.15 1211.62 L2024.56 1211.62 L2023.98 1211.62 L2023.39 1211.62 L2022.8 1211.62 L2022.22 1211.62 L2021.63 1211.62 L2021.04 1211.62 L2020.46 1211.62 L2019.87 1211.62 L2019.28 1211.62 L2018.7 1211.62 L2018.11 1211.62 L2017.53 1211.62 L2016.94 1211.62 L2016.35 1211.62 L2015.77 1211.62 L2015.18 1211.62 L2014.59 1211.62 L2014.01 1211.62 L2013.42 1211.62 L2012.83 1211.62 L2012.25 1211.62 L2011.66 1211.62 L2011.07 1211.62 L2010.49 1211.62 L2009.9 1211.62 L2009.32 1211.62 L2008.73 1211.62 L2008.14 1211.62 L2007.56 1211.62 L2006.97 1211.62 L2006.38 1211.62 L2005.8 1211.62 L2005.21 1211.62 L2004.62 1211.62 L2004.04 1211.62 L2003.45 1211.62 L2002.86 1211.62 L2002.28 1211.62 L2001.69 1211.62 L2001.11 1211.62 L2000.52 1211.62 L1999.93 1211.62 L1999.35 1211.62 L1998.76 1211.62 L1998.17 1211.62 L1997.59 1211.62 L1997 1211.62 L1996.41 1211.62 L1995.83 1211.62 L1995.24 1211.62 L1994.65 1211.62 L1994.07 1211.62 L1993.48 1211.62 L1992.9 1211.62 L1992.31 1211.62 L1991.72 1211.62 L1991.14 1211.62 L1990.55 1211.62 L1989.96 1211.62 L1989.38 1211.62 L1988.79 1211.62 L1988.2 1211.62 L1987.62 1211.62 L1987.03 1211.62 L1986.45 1211.62 L1985.86 1211.62 L1985.27 1211.62 L1984.69 1211.62 L1984.1 1211.62 L1983.51 1211.62 L1982.93 1211.62 L1982.34 1211.62 L1981.75 1211.62 L1981.17 1211.62 L1980.58 1211.62 L1979.99 1211.62 L1979.41 1211.62 L1978.82 1211.62 L1978.24 1211.62 L1977.65 1211.62 L1977.06 1211.62 L1976.48 1211.62 L1975.89 1211.62 L1975.3 1211.62 L1974.72 1211.62 L1974.13 1211.62 L1973.54 1211.62 L1972.96 1211.62 L1972.37 1211.62 L1971.78 1211.62 L1971.2 1211.62 L1970.61 1211.62 L1970.03 1211.62 L1969.44 1211.62 L1968.85 1211.62 L1968.27 1211.62 L1967.68 1211.62 L1967.09 1211.62 L1966.51 1211.62 L1965.92 1211.62 L1965.33 1211.62 L1964.75 1211.62 L1964.16 1211.62 L1963.58 1211.62 L1962.99 1211.62 L1962.4 1211.62 L1961.82 1211.62 L1961.23 1211.62 L1960.64 1211.62 L1960.06 1211.62 L1959.47 1211.62 L1958.88 1211.62 L1958.3 1211.62 L1957.71 1211.62 L1957.12 1211.62 L1956.54 1211.62 L1955.95 1211.62 L1955.37 1211.62 L1954.78 1211.62 L1954.19 1211.62 L1953.61 1211.62 L1953.02 1211.62 L1952.43 1211.62 L1951.85 1211.62 L1951.26 1211.62 L1950.67 1211.62 L1950.09 1211.62 L1949.5 1211.62 L1948.91 1211.62 L1948.33 1211.62 L1947.74 1211.62 L1947.16 1211.62 L1946.57 1211.62 L1945.98 1211.62 L1945.4 1211.62 L1944.81 1211.62 L1944.22 1211.62 L1943.64 1211.62 L1943.05 1211.62 L1942.46 1211.62 L1941.88 1211.62 L1941.29 1211.62 L1940.71 1211.62 L1940.12 1211.62 L1939.53 1211.62 L1938.95 1211.62 L1938.36 1211.62 L1937.77 1211.62 L1937.19 1211.62 L1936.6 1211.62 L1936.01 1211.62 L1935.43 1211.62 L1934.84 1211.62 L1934.25 1211.62 L1933.67 1211.62 L1933.08 1211.62 L1932.5 1211.62 L1931.91 1211.62 L1931.32 1211.62 L1930.74 1211.62 L1930.15 1211.62 L1929.56 1211.62 L1928.98 1211.62 L1928.39 1211.62 L1927.8 1211.62 L1927.22 1211.62 L1926.63 1211.62 L1926.04 1211.62 L1925.46 1211.62 L1924.87 1211.62 L1924.29 1211.62 L1923.7 1211.62 L1923.11 1211.62 L1922.53 1211.62 L1921.94 1211.62 L1921.35 1211.62 L1920.77 1211.62 L1920.18 1211.62 L1919.59 1211.62 L1919.01 1211.62 L1918.42 1211.62 L1917.83 1211.62 L1917.25 1211.62 L1916.66 1211.62 L1916.08 1211.62 L1915.49 1211.62 L1914.9 1211.62 L1914.32 1211.62 L1913.73 1211.62 L1913.14 1211.62 L1912.56 1211.62 L1911.97 1211.62 L1911.38 1211.62 L1910.8 1211.62 L1910.21 1211.62 L1909.63 1211.62 L1909.04 1211.62 L1908.45 1211.62 L1907.87 1211.62 L1907.28 1211.62 L1906.69 1211.62 L1906.11 1211.62 L1905.52 1211.62 L1904.93 1211.62 L1904.35 1211.62 L1903.76 1211.62 L1903.17 1211.62 L1902.59 1211.62 L1902 1211.62 L1901.42 1211.62 L1900.83 1211.62 L1900.24 1211.62 L1899.66 1211.62 L1899.07 1211.62 L1898.48 1211.62 L1897.9 1211.62 L1897.31 1211.62 L1896.72 1211.62 L1896.14 1211.62 L1895.55 1211.62 L1894.96 1211.62 L1894.38 1211.62 L1893.79 1211.62 L1893.21 1211.62 L1892.62 1211.62 L1892.03 1211.62 L1891.45 1211.62 L1890.86 1211.62 L1890.27 1211.62 L1889.69 1211.62 L1889.1 1211.62 L1888.51 1211.62 L1887.93 1211.62 L1887.34 1211.62 L1886.76 1211.62 L1886.17 1211.62 L1885.58 1211.62 L1885 1211.62 L1884.41 1211.62 L1883.82 1211.62 L1883.24 1211.62 L1882.65 1211.62 L1882.06 1211.62 L1881.48 1211.62 L1880.89 1211.62 L1880.3 1211.62 L1879.72 1211.62 L1879.13 1211.62 L1878.55 1211.62 L1877.96 1211.62 L1877.37 1211.62 L1876.79 1211.62 L1876.2 1211.62 L1875.61 1211.62 L1875.03 1211.62 L1874.44 1211.62 L1873.85 1211.62 L1873.27 1211.62 L1872.68 1211.62 L1872.09 1211.62 L1871.51 1211.62 L1870.92 1211.62 L1870.34 1211.62 L1869.75 1211.62 L1869.16 1211.62 L1868.58 1211.62 L1867.99 1211.62 L1867.4 1211.62 L1866.82 1211.62 L1866.23 1211.62 L1865.64 1211.62 L1865.06 1211.62 L1864.47 1211.62 L1863.88 1211.62 L1863.3 1211.62 L1862.71 1211.62 L1862.13 1211.62 L1861.54 1211.62 L1860.95 1211.62 L1860.37 1211.62 L1859.78 1211.62 L1859.19 1211.62 L1858.61 1211.62 L1858.02 1211.62 L1857.43 1211.62 L1856.85 1211.62 L1856.26 1211.62 L1855.68 1211.62 L1855.09 1211.62 L1854.5 1211.62 L1853.92 1211.62 L1853.33 1211.62 L1852.74 1211.62 L1852.16 1211.62 L1851.57 1211.62 L1850.98 1211.62 L1850.4 1211.62 L1849.81 1211.62 L1849.22 1211.62 L1848.64 1211.62 L1848.05 1211.62 L1847.47 1211.62 L1846.88 1211.62 L1846.29 1211.62 L1845.71 1211.62 L1845.12 1211.62 L1844.53 1211.62 L1843.95 1211.62 L1843.36 1211.62 L1842.77 1211.62 L1842.19 1211.62 L1841.6 1211.62 L1841.01 1211.62 L1840.43 1211.62 L1839.84 1211.62 L1839.26 1211.62 L1838.67 1211.62 L1838.08 1211.62 L1837.5 1211.62 L1836.91 1211.62 L1836.32 1211.62 L1835.74 1211.62 L1835.15 1211.62 L1834.56 1211.62 L1833.98 1211.62 L1833.39 1211.62 L1832.81 1211.62 L1832.22 1211.62 L1831.63 1211.62 L1831.05 1211.62 L1830.46 1211.62 L1829.87 1211.62 L1829.29 1211.62 L1828.7 1211.62 L1828.11 1211.62 L1827.53 1211.62 L1826.94 1211.62 L1826.35 1211.62 L1825.77 1211.62 L1825.18 1211.62 L1824.6 1211.62 L1824.01 1211.62 L1823.42 1211.62 L1822.84 1211.62 L1822.25 1211.62 L1821.66 1211.62 L1821.08 1211.62 L1820.49 1211.62 L1819.9 1211.62 L1819.32 1211.62 L1818.73 1211.62 L1818.14 1211.62 L1817.56 1211.62 L1816.97 1211.62 L1816.39 1211.62 L1815.8 1211.62 L1815.21 1211.62 L1814.63 1211.62 L1814.04 1211.62 L1813.45 1211.62 L1812.87 1211.62 L1812.28 1211.62 L1811.69 1211.62 L1811.11 1211.62 L1810.52 1211.62 L1809.94 1211.62 L1809.35 1211.62 L1808.76 1211.62 L1808.18 1211.62 L1807.59 1211.62 L1807 1211.62 L1806.42 1211.62 L1805.83 1211.62 L1805.24 1211.62 L1804.66 1211.62 L1804.07 1211.62 L1803.48 1211.62 L1802.9 1211.62 L1802.31 1211.62 L1801.73 1211.62 L1801.14 1211.62 L1800.55 1211.62 L1799.97 1211.62 L1799.38 1211.62 L1798.79 1211.62 L1798.21 1211.62 L1797.62 1211.62 L1797.03 1211.62 L1796.45 1211.62 L1795.86 1211.62 L1795.27 1211.62 L1794.69 1211.62 L1794.1 1211.62 L1793.52 1211.62 L1792.93 1211.62 L1792.34 1211.62 L1791.76 1211.62 L1791.17 1211.62 L1790.58 1211.62 L1790 1211.62 L1789.41 1211.62 L1788.82 1211.62 L1788.24 1211.62 L1787.65 1211.62 L1787.06 1211.62 L1786.48 1211.62 L1785.89 1211.62 L1785.31 1211.62 L1784.72 1211.62 L1784.13 1211.62 L1783.55 1211.62 L1782.96 1211.62 L1782.37 1211.62 L1781.79 1211.62 L1781.2 1211.62 L1780.61 1211.62 L1780.03 1211.62 L1779.44 1211.62 L1778.86 1211.62 L1778.27 1211.62 L1777.68 1211.62 L1777.1 1211.62 L1776.51 1211.62 L1775.92 1211.62 L1775.34 1211.62 L1774.75 1211.62 L1774.16 1211.62 L1773.58 1211.62 L1772.99 1211.62 L1772.4 1211.62 L1771.82 1211.62 L1771.23 1211.62 L1770.65 1211.62 L1770.06 1211.62 L1769.47 1211.62 L1768.89 1211.62 L1768.3 1211.62 L1767.71 1211.62 L1767.13 1211.62 L1766.54 1211.62 L1765.95 1211.62 L1765.37 1211.62 L1764.78 1211.62 L1764.19 1211.62 L1763.61 1211.62 L1763.02 1211.62 L1762.44 1211.62 L1761.85 1211.62 L1761.26 1211.62 L1760.68 1211.62 L1760.09 1211.62 L1759.5 1211.62 L1758.92 1211.62 L1758.33 1211.62 L1757.74 1211.62 L1757.16 1211.62 L1756.57 1211.62 L1755.99 1211.62 L1755.4 1211.62 L1754.81 1211.62 L1754.23 1211.62 L1753.64 1211.62 L1753.05 1211.62 L1752.47 1211.62 L1751.88 1211.62 L1751.29 1211.62 L1750.71 1211.62 L1750.12 1211.62 L1749.53 1211.62 L1748.95 1211.62 L1748.36 1211.62 L1747.78 1211.62 L1747.19 1211.62 L1746.6 1211.62 L1746.02 1211.62 L1745.43 1211.62 L1744.84 1211.62 L1744.26 1211.62 L1743.67 1211.62 L1743.08 1211.62 L1742.5 1211.62 L1741.91 1211.62 L1741.32 1211.62 L1740.74 1211.62 L1740.15 1211.62 L1739.57 1211.62 L1738.98 1211.62 L1738.39 1211.62 L1737.81 1211.62 L1737.22 1211.62 L1736.63 1211.62 L1736.05 1211.62 L1735.46 1211.62 L1734.87 1211.62 L1734.29 1211.62 L1733.7 1211.62 L1733.11 1211.62 L1732.53 1211.62 L1731.94 1211.62 L1731.36 1211.62 L1730.77 1211.62 L1730.18 1211.62 L1729.6 1211.62 L1729.01 1211.62 L1728.42 1211.62 L1727.84 1211.62 L1727.25 1211.62 L1726.66 1211.62 L1726.08 1211.62 L1725.49 1211.62 L1724.91 1211.62 L1724.32 1211.62 L1723.73 1211.62 L1723.15 1211.62 L1722.56 1211.62 L1721.97 1211.62 L1721.39 1211.62 L1720.8 1211.62 L1720.21 1211.62 L1719.63 1211.62 L1719.04 1211.62 L1718.45 1211.62 L1717.87 1211.62 L1717.28 1211.62 L1716.7 1211.62 L1716.11 1211.62 L1715.52 1211.62 L1714.94 1211.62 L1714.35 1211.62 L1713.76 1211.62 L1713.18 1211.62 L1712.59 1211.62 L1712 1211.62 L1711.42 1211.62 L1710.83 1211.62 L1710.24 1211.62 L1709.66 1211.62 L1709.07 1211.62 L1708.49 1211.62 L1707.9 1211.62 L1707.31 1211.62 L1706.73 1211.62 L1706.14 1211.62 L1705.55 1211.62 L1704.97 1211.62 L1704.38 1211.62 L1703.79 1211.62 L1703.21 1211.62 L1702.62 1211.62 L1702.04 1211.62 L1701.45 1211.62 L1700.86 1211.62 L1700.28 1211.62 L1699.69 1211.62 L1699.1 1211.62 L1698.52 1211.62 L1697.93 1211.62 L1697.34 1211.62 L1696.76 1211.62 L1696.17 1211.62 L1695.58 1211.62 L1695 1211.62 L1694.41 1211.62 L1693.83 1211.62 L1693.24 1211.62 L1692.65 1211.62 L1692.07 1211.62 L1691.48 1211.62 L1690.89 1211.62 L1690.31 1211.62 L1689.72 1211.62 L1689.13 1211.62 L1688.55 1211.62 L1687.96 1211.62 L1687.37 1211.62 L1686.79 1211.62 L1686.2 1211.62 L1685.62 1211.62 L1685.03 1211.62 L1684.44 1211.62 L1683.86 1211.62 L1683.27 1211.62 L1682.68 1211.62 L1682.1 1211.62 L1681.51 1211.62 L1680.92 1211.62 L1680.34 1211.62 L1679.75 1211.62 L1679.17 1211.62 L1678.58 1211.62 L1677.99 1211.62 L1677.41 1211.62 L1676.82 1211.62 L1676.23 1211.62 L1675.65 1211.62 L1675.06 1211.62 L1674.47 1211.62 L1673.89 1211.62 L1673.3 1211.62 L1672.71 1211.62 L1672.13 1211.62 L1671.54 1211.62 L1670.96 1211.62 L1670.37 1211.62 L1669.78 1211.62 L1669.2 1211.62 L1668.61 1211.62 L1668.02 1211.62 L1667.44 1211.62 L1666.85 1211.62 L1666.26 1211.62 L1665.68 1211.62 L1665.09 1211.62 L1664.5 1211.62 L1663.92 1211.62 L1663.33 1211.62 L1662.75 1211.62 L1662.16 1211.62 L1661.57 1211.62 L1660.99 1211.62 L1660.4 1211.62 L1659.81 1211.62 L1659.23 1211.62 L1658.64 1211.62 L1658.05 1211.62 L1657.47 1211.62 L1656.88 1211.62 L1656.29 1211.62 L1655.71 1211.62 L1655.12 1211.62 L1654.54 1211.62 L1653.95 1211.62 L1653.36 1211.62 L1652.78 1211.62 L1652.19 1211.62 L1651.6 1211.62 L1651.02 1211.62 L1650.43 1211.62 L1649.84 1211.62 L1649.26 1211.62 L1648.67 1211.62 L1648.09 1211.62 L1647.5 1211.62 L1646.91 1211.62 L1646.33 1211.62 L1645.74 1211.62 L1645.15 1211.62 L1644.57 1211.62 L1643.98 1211.62 L1643.39 1211.62 L1642.81 1211.62 L1642.22 1211.62 L1641.63 1211.62 L1641.05 1211.62 L1640.46 1211.62 L1639.88 1211.62 L1639.29 1211.62 L1638.7 1211.62 L1638.12 1211.62 L1637.53 1211.62 L1636.94 1211.62 L1636.36 1211.62 L1635.77 1211.62 L1635.18 1211.62 L1634.6 1211.62 L1634.01 1211.62 L1633.42 1211.62 L1632.84 1211.62 L1632.25 1211.62 L1631.67 1211.62 L1631.08 1211.62 L1630.49 1211.62 L1629.91 1211.62 L1629.32 1211.62 L1628.73 1211.62 L1628.15 1211.62 L1627.56 1211.62 L1626.97 1211.62 L1626.39 1211.62 L1625.8 1211.62 L1625.22 1211.62 L1624.63 1211.62 L1624.04 1211.62 L1623.46 1211.62 L1622.87 1211.62 L1622.28 1211.62 L1621.7 1211.62 L1621.11 1211.62 L1620.52 1211.62 L1619.94 1211.62 L1619.35 1211.62 L1618.76 1211.62 L1618.18 1211.62 L1617.59 1211.62 L1617.01 1211.62 L1616.42 1211.62 L1615.83 1211.62 L1615.25 1211.62 L1614.66 1211.62 L1614.07 1211.62 L1613.49 1211.62 L1612.9 1211.62 L1612.31 1211.62 L1611.73 1211.62 L1611.14 1211.62 L1610.55 1211.62 L1609.97 1211.62 L1609.38 1211.62 L1608.8 1211.62 L1608.21 1211.62 L1607.62 1211.62 L1607.04 1211.62 L1606.45 1211.62 L1605.86 1211.62 L1605.28 1211.62 L1604.69 1211.62 L1604.1 1211.62 L1603.52 1211.62 L1602.93 1211.62 L1602.34 1211.62 L1601.76 1211.62 L1601.17 1211.62 L1600.59 1211.62 L1600 1211.62 L1599.41 1211.62 L1598.83 1211.62 L1598.24 1211.62 L1597.65 1211.62 L1597.07 1211.62 L1596.48 1211.62 L1595.89 1211.62 L1595.31 1211.62 L1594.72 1211.62 L1594.14 1211.62 L1593.55 1211.62 L1592.96 1211.62 L1592.38 1211.62 L1591.79 1211.62 L1591.2 1211.62 L1590.62 1211.62 L1590.03 1211.62 L1589.44 1211.62 L1588.86 1211.62 L1588.27 1211.62 L1587.68 1211.62 L1587.1 1211.62 L1586.51 1211.62 L1585.93 1211.62 L1585.34 1211.62 L1584.75 1211.62 L1584.17 1211.62 L1583.58 1211.62 L1582.99 1211.62 L1582.41 1211.62 L1581.82 1211.62 L1581.23 1211.62 L1580.65 1211.62 L1580.06 1211.62 L1579.47 1211.62 L1578.89 1211.62 L1578.3 1211.62 L1577.72 1211.62 L1577.13 1211.62 L1576.54 1211.62 L1575.96 1211.62 L1575.37 1211.62 L1574.78 1211.62 L1574.2 1211.62 L1573.61 1211.62 L1573.02 1211.62 L1572.44 1211.62 L1571.85 1211.62 L1571.27 1211.62 L1570.68 1211.62 L1570.09 1211.62 L1569.51 1211.62 L1568.92 1211.62 L1568.33 1211.62 L1567.75 1211.62 L1567.16 1211.62 L1566.57 1211.62 L1565.99 1211.62 L1565.4 1211.62 L1564.81 1211.62 L1564.23 1211.62 L1563.64 1211.62 L1563.06 1211.62 L1562.47 1211.62 L1561.88 1211.62 L1561.3 1211.62 L1560.71 1211.62 L1560.12 1211.62 L1559.54 1211.62 L1558.95 1211.62 L1558.36 1211.62 L1557.78 1211.62 L1557.19 1211.62 L1556.6 1211.62 L1556.02 1211.62 L1555.43 1211.62 L1554.85 1211.62 L1554.26 1211.62 L1553.67 1211.62 L1553.09 1211.62 L1552.5 1211.62 L1551.91 1211.62 L1551.33 1211.62 L1550.74 1211.62 L1550.15 1211.62 L1549.57 1211.62 L1548.98 1211.62 L1548.4 1211.62 L1547.81 1211.62 L1547.22 1211.62 L1546.64 1211.62 L1546.05 1211.62 L1545.46 1211.62 L1544.88 1211.62 L1544.29 1211.62 L1543.7 1211.62 L1543.12 1211.62 L1542.53 1211.62 L1541.94 1211.62 L1541.36 1211.62 L1540.77 1211.62 L1540.19 1211.62 L1539.6 1211.62 L1539.01 1211.62 L1538.43 1211.62 L1537.84 1211.62 L1537.25 1211.62 L1536.67 1211.62 L1536.08 1211.62 L1535.49 1211.62 L1534.91 1211.62 L1534.32 1211.62 L1533.73 1211.62 L1533.15 1211.62 L1532.56 1211.62 L1531.98 1211.62 L1531.39 1211.62 L1530.8 1211.62 L1530.22 1211.62 L1529.63 1211.62 L1529.04 1211.62 L1528.46 1211.62 L1527.87 1211.62 L1527.28 1211.62 L1526.7 1211.62 L1526.11 1211.62 L1525.52 1211.62 L1524.94 1211.62 L1524.35 1211.62 L1523.77 1211.62 L1523.18 1211.62 L1522.59 1211.62 L1522.01 1211.62 L1521.42 1211.62 L1520.83 1211.62 L1520.25 1211.62 L1519.66 1211.62 L1519.07 1211.62 L1518.49 1211.62 L1517.9 1211.62 L1517.32 1211.62 L1516.73 1211.62 L1516.14 1211.62 L1515.56 1211.62 L1514.97 1211.62 L1514.38 1211.62 L1513.8 1211.62 L1513.21 1211.62 L1512.62 1211.62 L1512.04 1211.62 L1511.45 1211.62 L1510.86 1211.62 L1510.28 1211.62 L1509.69 1211.62 L1509.11 1211.62 L1508.52 1211.62 L1507.93 1211.62 L1507.35 1211.62 L1506.76 1211.62 L1506.17 1211.62 L1505.59 1211.62 L1505 1211.62 L1504.41 1211.62 L1503.83 1211.62 L1503.24 1211.62 L1502.65 1211.62 L1502.07 1211.62 L1501.48 1211.62 L1500.9 1211.62 L1500.31 1211.62 L1499.72 1211.62 L1499.14 1211.62 L1498.55 1211.62 L1497.96 1211.62 L1497.38 1211.62 L1496.79 1211.62 L1496.2 1211.62 L1495.62 1211.62 L1495.03 1211.62 L1494.45 1211.62 L1493.86 1211.62 L1493.27 1211.62 L1492.69 1211.62 L1492.1 1211.62 L1491.51 1211.62 L1490.93 1211.62 L1490.34 1211.62 L1489.75 1211.62 L1489.17 1211.62 L1488.58 1211.62 L1487.99 1211.62 L1487.41 1211.62 L1486.82 1211.62 L1486.24 1211.62 L1485.65 1211.62 L1485.06 1211.62 L1484.48 1211.62 L1483.89 1211.62 L1483.3 1211.62 L1482.72 1211.62 L1482.13 1211.62 L1481.54 1211.62 L1480.96 1211.62 L1480.37 1211.62 L1479.78 1211.62 L1479.2 1211.62 L1478.61 1211.62 L1478.03 1211.62 L1477.44 1211.62 L1476.85 1211.62 L1476.27 1211.62 L1475.68 1211.62 L1475.09 1211.62 L1474.51 1211.62 L1473.92 1211.62 L1473.33 1211.62 L1472.75 1211.62 L1472.16 1211.62 L1471.57 1211.62 L1470.99 1211.62 L1470.4 1211.62 L1469.82 1211.62 L1469.23 1211.62 L1468.64 1211.62 L1468.06 1211.62 L1467.47 1211.62 L1466.88 1211.62 L1466.3 1211.62 L1465.71 1211.62 L1465.12 1211.62 L1464.54 1211.62 L1463.95 1211.62 L1463.37 1211.62 L1462.78 1211.62 L1462.19 1211.62 L1461.61 1211.62 L1461.02 1211.62 L1460.43 1211.62 L1459.85 1211.62 L1459.26 1211.62 L1458.67 1211.62 L1458.09 1211.62 L1457.5 1211.62 L1456.91 1211.62 L1456.33 1211.62 L1455.74 1211.62 L1455.16 1211.62 L1454.57 1211.62 L1453.98 1211.62 L1453.4 1211.62 L1452.81 1211.62 L1452.22 1211.62 L1451.64 1211.62 L1451.05 1211.62 L1450.46 1211.62 L1449.88 1211.62 L1449.29 1211.62 L1448.7 1211.62 L1448.12 1211.62 L1447.53 1211.62 L1446.95 1211.62 L1446.36 1211.62 L1445.77 1211.62 L1445.19 1211.62 L1444.6 1211.62 L1444.01 1211.62 L1443.43 1211.62 L1442.84 1211.62 L1442.25 1211.62 L1441.67 1211.62 L1441.08 1211.62 L1440.5 1211.62 L1439.91 1211.62 L1439.32 1211.62 L1438.74 1211.62 L1438.15 1211.62 L1437.56 1211.62 L1436.98 1211.62 L1436.39 1211.62 L1435.8 1211.62 L1435.22 1211.62 L1434.63 1211.62 L1434.04 1211.62 L1433.46 1211.62 L1432.87 1211.62 L1432.29 1211.62 L1431.7 1211.62 L1431.11 1211.62 L1430.53 1211.62 L1429.94 1211.62 L1429.35 1211.62 L1428.77 1211.62 L1428.18 1211.62 L1427.59 1211.62 L1427.01 1211.62 L1426.42 1211.62 L1425.83 1211.62 L1425.25 1211.62 L1424.66 1211.62 L1424.08 1211.62 L1423.49 1211.62 L1422.9 1211.62 L1422.32 1211.62 L1421.73 1211.62 L1421.14 1211.62 L1420.56 1211.62 L1419.97 1211.62 L1419.38 1211.62 L1418.8 1211.62 L1418.21 1211.62 L1417.63 1211.62 L1417.04 1211.62 L1416.45 1211.62 L1415.87 1211.62 L1415.28 1211.62 L1414.69 1211.62 L1414.11 1211.62 L1413.52 1211.62 L1412.93 1211.62 L1412.35 1211.62 L1411.76 1211.62 L1411.17 1211.62 L1410.59 1211.62 L1410 1211.62 L1409.42 1211.62 L1408.83 1211.62 L1408.24 1211.62 L1407.66 1211.62 L1407.07 1211.62 L1406.48 1211.62 L1405.9 1211.62 L1405.31 1211.62 L1404.72 1211.62 L1404.14 1211.62 L1403.55 1211.62 L1402.96 1211.62 L1402.38 1211.62 L1401.79 1211.62 L1401.21 1211.62 L1400.62 1211.62 L1400.03 1211.62 L1399.45 1211.62 L1398.86 1211.62 L1398.27 1211.62 L1397.69 1211.62 L1397.1 1211.62 L1396.51 1211.62 L1395.93 1211.62 L1395.34 1211.62 L1394.75 1211.62 L1394.17 1211.62 L1393.58 1211.62 L1393 1211.62 L1392.41 1211.62 L1391.82 1211.62 L1391.24 1211.62 L1390.65 1211.62 L1390.06 1211.62 L1389.48 1211.62 L1388.89 1211.62 L1388.3 1211.62 L1387.72 1211.62 L1387.13 1211.62 L1386.55 1211.62 L1385.96 1211.62 L1385.37 1211.62 L1384.79 1211.62 L1384.2 1211.62 L1383.61 1211.62 L1383.03 1211.62 L1382.44 1211.62 L1381.85 1211.62 L1381.27 1211.62 L1380.68 1211.62 L1380.09 1211.62 L1379.51 1211.62 L1378.92 1211.62 L1378.34 1211.62 L1377.75 1211.62 L1377.16 1211.62 L1376.58 1211.62 L1375.99 1211.62 L1375.4 1211.62 L1374.82 1211.62 L1374.23 1211.62 L1373.64 1211.62 L1373.06 1211.62 L1372.47 1211.62 L1371.88 1211.62 L1371.3 1211.62 L1370.71 1211.62 L1370.13 1211.62 L1369.54 1211.62 L1368.95 1211.62 L1368.37 1211.62 L1367.78 1211.62 L1367.19 1211.62 L1366.61 1211.62 L1366.02 1211.62 L1365.43 1211.62 L1364.85 1211.62 L1364.26 1211.62 L1363.68 1211.62 L1363.09 1211.62 L1362.5 1211.62 L1361.92 1211.62 L1361.33 1211.62 L1360.74 1211.62 L1360.16 1211.62 L1359.57 1211.62 L1358.98 1211.62 L1358.4 1211.62 L1357.81 1211.62 L1357.22 1211.62 L1356.64 1211.62 L1356.05 1211.62 L1355.47 1211.62 L1354.88 1211.62 L1354.29 1211.62 L1353.71 1211.62 L1353.12 1211.62 L1352.53 1211.62 L1351.95 1211.62 L1351.36 1211.62 L1350.77 1211.62 L1350.19 1211.62 L1349.6 1211.62 L1349.01 1211.62 L1348.43 1211.62 L1347.84 1211.62 L1347.26 1211.62 L1346.67 1211.62 L1346.08 1211.62 L1345.5 1211.62 L1344.91 1211.62 L1344.32 1211.62 L1343.74 1211.62 L1343.15 1211.62 L1342.56 1211.62 L1341.98 1211.62 L1341.39 1211.62 L1340.8 1211.62 L1340.22 1211.62 L1339.63 1211.62 L1339.05 1211.62 L1338.46 1211.62 L1337.87 1211.62 L1337.29 1211.62 L1336.7 1211.62 L1336.11 1211.62 L1335.53 1211.62 L1334.94 1211.62 L1334.35 1211.62 L1333.77 1211.62 L1333.18 1211.62 L1332.6 1211.62 L1332.01 1211.62 L1331.42 1211.62 L1330.84 1211.62 L1330.25 1211.62 L1329.66 1211.62 L1329.08 1211.62 L1328.49 1211.62 L1327.9 1211.62 L1327.32 1211.62 L1326.73 1211.62 L1326.14 1211.62 L1325.56 1211.62 L1324.97 1211.62 L1324.39 1211.62 L1323.8 1211.62 L1323.21 1211.62 L1322.63 1211.62 L1322.04 1211.62 L1321.45 1211.62 L1320.87 1211.62 L1320.28 1211.62 L1319.69 1211.62 L1319.11 1211.62 L1318.52 1211.62 L1317.93 1211.62 L1317.35 1211.62 L1316.76 1211.62 L1316.18 1211.62 L1315.59 1211.62 L1315 1211.62 L1314.42 1211.62 L1313.83 1211.62 L1313.24 1211.62 L1312.66 1211.62 L1312.07 1211.62 L1311.48 1211.62 L1310.9 1211.62 L1310.31 1211.62 L1309.73 1211.62 L1309.14 1211.62 L1308.55 1211.62 L1307.97 1211.62 L1307.38 1211.62 L1306.79 1211.62 L1306.21 1211.62 L1305.62 1211.62 L1305.03 1211.62 L1304.45 1211.62 L1303.86 1211.62 L1303.27 1211.62 L1302.69 1211.62 L1302.1 1211.62 L1301.52 1211.62 L1300.93 1211.62 L1300.34 1211.62 L1299.76 1211.62 L1299.17 1211.62 L1298.58 1211.62 L1298 1211.62 L1297.41 1211.62 L1296.82 1211.62 L1296.24 1211.62 L1295.65 1211.62 L1295.06 1211.62 L1294.48 1211.62 L1293.89 1211.62 L1293.31 1211.62 L1292.72 1211.62 L1292.13 1211.62 L1291.55 1211.62 L1290.96 1211.62 L1290.37 1211.62 L1289.79 1211.62 L1289.2 1211.62 L1288.61 1211.62 L1288.03 1211.62 L1287.44 1211.62 L1286.86 1211.62 L1286.27 1211.62 L1285.68 1211.62 L1285.1 1211.62 L1284.51 1211.62 L1283.92 1211.62 L1283.34 1211.62 L1282.75 1211.62 L1282.16 1211.62 L1281.58 1211.62 L1280.99 1211.62 L1280.4 1211.62 L1279.82 1211.62 L1279.23 1211.62 L1278.65 1211.62 L1278.06 1211.62 L1277.47 1211.62 L1276.89 1211.62 L1276.3 1211.62 L1275.71 1211.62 L1275.13 1211.62 L1274.54 1211.62 L1273.95 1211.62 L1273.37 1211.62 L1272.78 1211.62 L1272.19 1211.62 L1271.61 1211.62 L1271.02 1211.62 L1270.44 1211.62 L1269.85 1211.62 L1269.26 1211.62 L1268.68 1211.62 L1268.09 1211.62 L1267.5 1211.62 L1266.92 1211.62 L1266.33 1211.62 L1265.74 1211.62 L1265.16 1211.62 L1264.57 1211.62 L1263.98 1211.62 L1263.4 1211.62 L1262.81 1211.62 L1262.23 1211.62 L1261.64 1211.62 L1261.05 1211.62 L1260.47 1211.62 L1259.88 1211.62 L1259.29 1211.62 L1258.71 1211.62 L1258.12 1211.62 L1257.53 1211.62 L1256.95 1211.62 L1256.36 1211.62 L1255.78 1211.62 L1255.19 1211.62 L1254.6 1211.62 L1254.02 1211.62 L1253.43 1211.62 L1252.84 1211.62 L1252.26 1211.62 L1251.67 1211.62 L1251.08 1211.62 L1250.5 1211.62 L1249.91 1211.62 L1249.32 1211.62 L1248.74 1211.62 L1248.15 1211.62 L1247.57 1211.62 L1246.98 1211.62 L1246.39 1211.62 L1245.81 1211.62 L1245.22 1211.62 L1244.63 1211.62 L1244.05 1211.62 L1243.46 1211.62 L1242.87 1211.62 L1242.29 1211.62 L1241.7 1211.62 L1241.11 1211.62 L1240.53 1211.62 L1239.94 1211.62 L1239.36 1211.62 L1238.77 1211.62 L1238.18 1211.62 L1237.6 1211.62 L1237.01 1211.62 L1236.42 1211.62 L1235.84 1211.62 L1235.25 1211.62 L1234.66 1211.62 L1234.08 1211.62 L1233.49 1211.62 L1232.91 1211.62 L1232.32 1211.62 L1231.73 1211.62 L1231.15 1211.62 L1230.56 1211.62 L1229.97 1211.62 L1229.39 1211.62 L1228.8 1211.62 L1228.21 1211.62 L1227.63 1211.62 L1227.04 1211.62 L1226.45 1211.62 L1225.87 1211.62 L1225.28 1211.62 L1224.7 1211.62 L1224.11 1211.62 L1223.52 1211.62 L1222.94 1211.62 L1222.35 1211.62 L1221.76 1211.62 L1221.18 1211.62 L1220.59 1211.62 L1220 1211.62 L1219.42 1211.62 L1218.83 1211.62 L1218.24 1211.62 L1217.66 1211.62 L1217.07 1211.62 L1216.49 1211.62 L1215.9 1211.62 L1215.31 1211.62 L1214.73 1211.62 L1214.14 1211.62 L1213.55 1211.62 L1212.97 1211.62 L1212.38 1211.62 L1211.79 1211.62 L1211.21 1211.62 L1210.62 1211.62 L1210.03 1211.62 L1209.45 1211.62 L1208.86 1211.62 L1208.28 1211.62 L1207.69 1211.62 L1207.1 1211.62 L1206.52 1211.62 L1205.93 1211.62 L1205.34 1211.62 L1204.76 1211.62 L1204.17 1211.62 L1203.58 1211.62 L1203 1211.62 L1202.41 1211.62 L1201.83 1211.62 L1201.24 1211.62 L1200.65 1211.62 L1200.07 1211.62 L1199.48 1211.62 L1198.89 1211.62 L1198.31 1211.62 L1197.72 1211.62 L1197.13 1211.62 L1196.55 1211.62 L1195.96 1211.62 L1195.37 1211.62 L1194.79 1211.62 L1194.2 1211.62 L1193.62 1211.62 L1193.03 1211.62 L1192.44 1211.62 L1191.86 1211.62 L1191.27 1211.62 L1190.68 1211.62 L1190.1 1211.62 L1189.51 1211.62 L1188.92 1211.62 L1188.34 1211.62 L1187.75 1211.62 L1187.16 1211.62 L1186.58 1211.62 L1185.99 1211.62 L1185.41 1211.62 L1184.82 1211.62 L1184.23 1211.62 L1183.65 1211.62 L1183.06 1211.62 L1182.47 1211.62 L1181.89 1211.62 L1181.3 1211.62 L1180.71 1211.62 L1180.13 1211.62 L1179.54 1211.62 L1178.96 1211.62 L1178.37 1211.62 L1177.78 1211.62 L1177.2 1211.62 L1176.61 1211.62 L1176.02 1211.62 L1175.44 1211.62 L1174.85 1211.62 L1174.26 1211.62 L1173.68 1211.62 L1173.09 1211.62 L1172.5 1211.62 L1171.92 1211.62 L1171.33 1211.62 L1170.75 1211.62 L1170.16 1211.62 L1169.57 1211.62 L1168.99 1211.62 L1168.4 1211.62 L1167.81 1211.62 L1167.23 1211.62 L1166.64 1211.62 L1166.05 1211.62 L1165.47 1211.62 L1164.88 1211.62 L1164.29 1211.62 L1163.71 1211.62 L1163.12 1211.62 L1162.54 1211.62 L1161.95 1211.62 L1161.36 1211.62 L1160.78 1211.62 L1160.19 1211.62 L1159.6 1211.62 L1159.02 1211.62 L1158.43 1211.62 L1157.84 1211.62 L1157.26 1211.62 L1156.67 1211.62 L1156.09 1211.62 L1155.5 1211.62 L1154.91 1211.62 L1154.33 1211.62 L1153.74 1211.62 L1153.15 1211.62 L1152.57 1211.62 L1151.98 1211.62 L1151.39 1211.62 L1150.81 1211.62 L1150.22 1211.62 L1149.63 1211.62 L1149.05 1211.62 L1148.46 1211.62 L1147.88 1211.62 L1147.29 1211.62 L1146.7 1211.62 L1146.12 1211.62 L1145.53 1211.62 L1144.94 1211.62 L1144.36 1211.62 L1143.77 1211.62 L1143.18 1211.62 L1142.6 1211.62 L1142.01 1211.62 L1141.42 1211.62 L1140.84 1211.62 L1140.25 1211.62 L1139.67 1211.62 L1139.08 1211.62 L1138.49 1211.62 L1137.91 1211.62 L1137.32 1211.62 L1136.73 1211.62 L1136.15 1211.62 L1135.56 1211.62 L1134.97 1211.62 L1134.39 1211.62 L1133.8 1211.62 L1133.21 1211.62 L1132.63 1211.62 L1132.04 1211.62 L1131.46 1211.62 L1130.87 1211.62 L1130.28 1211.62 L1129.7 1211.62 L1129.11 1211.62 L1128.52 1211.62 L1127.94 1211.62 L1127.35 1211.62 L1126.76 1211.62 L1126.18 1211.62 L1125.59 1211.62 L1125.01 1211.62 L1124.42 1211.62 L1123.83 1211.62 L1123.25 1211.62 L1122.66 1211.62 L1122.07 1211.62 L1121.49 1211.62 L1120.9 1211.62 L1120.31 1211.62 L1119.73 1211.62 L1119.14 1211.62 L1118.55 1211.62 L1117.97 1211.62 L1117.38 1211.62 L1116.8 1211.62 L1116.21 1211.62 L1115.62 1211.62 L1115.04 1211.62 L1114.45 1211.62 L1113.86 1211.62 L1113.28 1211.62 L1112.69 1211.62 L1112.1 1211.62 L1111.52 1211.62 L1110.93 1211.62 L1110.34 1211.62 L1109.76 1211.62 L1109.17 1211.62 L1108.59 1211.62 L1108 1211.62 L1107.41 1211.62 L1106.83 1211.62 L1106.24 1211.62 L1105.65 1211.62 L1105.07 1211.62 L1104.48 1211.62 L1103.89 1211.62 L1103.31 1211.62 L1102.72 1211.62 L1102.14 1211.62 L1101.55 1211.62 L1100.96 1211.62 L1100.38 1211.62 L1099.79 1211.62 L1099.2 1211.62 L1098.62 1211.62 L1098.03 1211.62 L1097.44 1211.62 L1096.86 1211.62 L1096.27 1211.62 L1095.68 1211.62 L1095.1 1211.62 L1094.51 1211.62 L1093.93 1211.62 L1093.34 1211.62 L1092.75 1211.62 L1092.17 1211.62 L1091.58 1211.62 L1090.99 1211.62 L1090.41 1211.62 L1089.82 1211.62 L1089.23 1211.62 L1088.65 1211.62 L1088.06 1211.62 L1087.47 1211.62 L1086.89 1211.62 L1086.3 1211.62 L1085.72 1211.62 L1085.13 1211.62 L1084.54 1211.62 L1083.96 1211.62 L1083.37 1211.62 L1082.78 1211.62 L1082.2 1211.62 L1081.61 1211.62 L1081.02 1211.62 L1080.44 1211.62 L1079.85 1211.62 L1079.26 1211.62 L1078.68 1211.62 L1078.09 1211.62 L1077.51 1211.62 L1076.92 1211.62 L1076.33 1211.62 L1075.75 1211.62 L1075.16 1211.62 L1074.57 1211.62 L1073.99 1211.62 L1073.4 1211.62 L1072.81 1211.62 L1072.23 1211.62 L1071.64 1211.62 L1071.06 1211.62 L1070.47 1211.62 L1069.88 1211.62 L1069.3 1211.62 L1068.71 1211.62 L1068.12 1211.62 L1067.54 1211.62 L1066.95 1211.62 L1066.36 1211.62 L1065.78 1211.62 L1065.19 1211.62 L1064.6 1211.62 L1064.02 1211.62 L1063.43 1211.62 L1062.85 1211.62 L1062.26 1211.62 L1061.67 1211.62 L1061.09 1211.62 L1060.5 1211.62 L1059.91 1211.62 L1059.33 1211.62 L1058.74 1211.62 L1058.15 1211.62 L1057.57 1211.62 L1056.98 1211.62 L1056.39 1211.62 L1055.81 1211.62 L1055.22 1211.62 L1054.64 1211.62 L1054.05 1211.62 L1053.46 1211.62 L1052.88 1211.62 L1052.29 1211.62 L1051.7 1211.62 L1051.12 1211.62 L1050.53 1211.62 L1049.94 1211.62 L1049.36 1211.62 L1048.77 1211.62 L1048.19 1211.62 L1047.6 1211.62 L1047.01 1211.62 L1046.43 1211.62 L1045.84 1211.62 L1045.25 1211.62 L1044.67 1211.62 L1044.08 1211.62 L1043.49 1211.62 L1042.91 1211.62 L1042.32 1211.62 L1041.73 1211.62 L1041.15 1211.62 L1040.56 1211.62 L1039.98 1211.62 L1039.39 1211.62 L1038.8 1211.62 L1038.22 1211.62 L1037.63 1211.62 L1037.04 1211.62 L1036.46 1211.62 L1035.87 1211.62 L1035.28 1211.62 L1034.7 1211.62 L1034.11 1211.62 L1033.52 1211.62 L1032.94 1211.62 L1032.35 1211.62 L1031.77 1211.62 L1031.18 1211.62 L1030.59 1211.62 L1030.01 1211.62 L1029.42 1211.62 L1028.83 1211.62 L1028.25 1211.62 L1027.66 1211.62 L1027.07 1211.62 L1026.49 1211.62 L1025.9 1211.62 L1025.32 1211.62 L1024.73 1211.62 L1024.14 1211.62 L1023.56 1211.62 L1022.97 1211.62 L1022.38 1211.62 L1021.8 1211.62 L1021.21 1211.62 L1020.62 1211.62 L1020.04 1211.62 L1019.45 1211.62 L1018.86 1211.62 L1018.28 1211.62 L1017.69 1211.62 L1017.11 1211.62 L1016.52 1211.62 L1015.93 1211.62 L1015.35 1211.62 L1014.76 1211.62 L1014.17 1211.62 L1013.59 1211.62 L1013 1211.62 L1012.41 1211.62 L1011.83 1211.62 L1011.24 1211.62 L1010.65 1211.62 L1010.07 1211.62 L1009.48 1211.62 L1008.9 1211.62 L1008.31 1211.62 L1007.72 1211.62 L1007.14 1211.62 L1006.55 1211.62 L1005.96 1211.62 L1005.38 1211.62 L1004.79 1211.62 L1004.2 1211.62 L1003.62 1211.62 L1003.03 1211.62 L1002.44 1211.62 L1001.86 1211.62 L1001.27 1211.62 L1000.69 1211.62 L1000.1 1211.62 L999.513 1211.62 L998.926 1211.62 L998.34 1211.62 L997.754 1211.62 L997.167 1211.62 L996.581 1211.62 L995.994 1211.62 L995.408 1211.62 L994.822 1211.62 L994.235 1211.62 L993.649 1211.62 L993.062 1211.62 L992.476 1211.62 L991.889 1211.62 L991.303 1211.62 L990.717 1211.62 L990.13 1211.62 L989.544 1211.62 L988.957 1211.62 L988.371 1211.62 L987.785 1211.62 L987.198 1211.62 L986.612 1211.62 L986.025 1211.62  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.72 986.612,1211.72 987.198,1211.72 987.785,1211.72 988.371,1211.72 988.957,1211.72 989.544,1211.72 990.13,1211.72 990.717,1211.72 991.303,1211.72 991.889,1211.72 992.476,1211.72 993.062,1211.72 993.649,1211.72 994.235,1211.72 994.822,1211.72 995.408,1211.72 995.994,1211.72 996.581,1211.72 997.167,1211.72 997.754,1211.72 998.34,1211.72 998.926,1211.72 999.513,1211.72 1000.1,1211.72 1000.69,1211.72 1001.27,1211.72 1001.86,1211.72 1002.44,1211.72 1003.03,1211.72 1003.62,1211.72 1004.2,1211.72 1004.79,1211.72 1005.38,1211.72 1005.96,1211.72 1006.55,1211.72 1007.14,1211.72 1007.72,1211.72 1008.31,1211.72 1008.9,1211.72 1009.48,1211.72 1010.07,1211.72 1010.65,1211.72 1011.24,1211.72 1011.83,1211.72 1012.41,1211.72 1013,1211.72 1013.59,1211.72 1014.17,1211.72 1014.76,1211.72 1015.35,1211.72 1015.93,1211.72 1016.52,1211.72 1017.11,1211.72 1017.69,1211.72 1018.28,1211.72 1018.86,1211.72 1019.45,1211.72 1020.04,1211.72 1020.62,1211.72 1021.21,1211.72 1021.8,1211.72 1022.38,1211.72 1022.97,1211.72 1023.56,1211.72 1024.14,1211.72 1024.73,1211.72 1025.32,1211.72 1025.9,1211.72 1026.49,1211.72 1027.07,1211.72 1027.66,1211.72 1028.25,1211.72 1028.83,1211.72 1029.42,1211.72 1030.01,1211.72 1030.59,1211.72 1031.18,1211.72 1031.77,1211.72 1032.35,1211.72 1032.94,1211.72 1033.52,1211.72 1034.11,1211.72 1034.7,1211.72 1035.28,1211.72 1035.87,1211.72 1036.46,1211.72 1037.04,1211.72 1037.63,1211.72 1038.22,1211.72 1038.8,1211.72 1039.39,1211.72 1039.98,1211.72 1040.56,1211.72 1041.15,1211.72 1041.73,1211.72 1042.32,1211.72 1042.91,1211.72 1043.49,1211.72 1044.08,1211.72 1044.67,1211.72 1045.25,1211.72 1045.84,1211.72 1046.43,1211.72 1047.01,1211.72 1047.6,1211.72 1048.19,1211.72 1048.77,1211.72 1049.36,1211.72 1049.94,1211.72 1050.53,1211.72 1051.12,1211.72 1051.7,1211.72 1052.29,1211.72 1052.88,1211.72 1053.46,1211.72 1054.05,1211.72 1054.64,1211.72 1055.22,1211.72 1055.81,1211.72 1056.39,1211.72 1056.98,1211.72 1057.57,1211.72 1058.15,1211.72 1058.74,1211.72 1059.33,1211.72 1059.91,1211.72 1060.5,1211.72 1061.09,1211.72 1061.67,1211.72 1062.26,1211.72 1062.85,1211.72 1063.43,1211.72 1064.02,1211.72 1064.6,1211.72 1065.19,1211.72 1065.78,1211.72 1066.36,1211.72 1066.95,1211.72 1067.54,1211.72 1068.12,1211.72 1068.71,1211.72 1069.3,1211.72 1069.88,1211.72 1070.47,1211.72 1071.06,1211.72 1071.64,1211.72 1072.23,1211.72 1072.81,1211.72 1073.4,1211.72 1073.99,1211.72 1074.57,1211.72 1075.16,1211.72 1075.75,1211.72 1076.33,1211.72 1076.92,1211.72 1077.51,1211.72 1078.09,1211.72 1078.68,1211.72 1079.26,1211.72 1079.85,1211.72 1080.44,1211.72 1081.02,1211.72 1081.61,1211.72 1082.2,1211.72 1082.78,1211.72 1083.37,1211.72 1083.96,1211.72 1084.54,1211.72 1085.13,1211.72 1085.72,1211.72 1086.3,1211.72 1086.89,1211.72 1087.47,1211.72 1088.06,1211.72 1088.65,1211.72 1089.23,1211.72 1089.82,1211.72 1090.41,1211.72 1090.99,1211.72 1091.58,1211.72 1092.17,1211.72 1092.75,1211.72 1093.34,1211.72 1093.93,1211.72 1094.51,1211.72 1095.1,1211.72 1095.68,1211.72 1096.27,1211.72 1096.86,1211.72 1097.44,1211.72 1098.03,1211.72 1098.62,1211.72 1099.2,1211.72 1099.79,1211.72 1100.38,1211.72 1100.96,1211.72 1101.55,1211.72 1102.14,1211.72 1102.72,1211.72 1103.31,1211.72 1103.89,1211.72 1104.48,1211.72 1105.07,1211.72 1105.65,1211.72 1106.24,1211.72 1106.83,1211.72 1107.41,1211.72 1108,1211.72 1108.59,1211.72 1109.17,1211.72 1109.76,1211.72 1110.34,1211.72 1110.93,1211.72 1111.52,1211.72 1112.1,1211.72 1112.69,1211.72 1113.28,1211.72 1113.86,1211.72 1114.45,1211.72 1115.04,1211.72 1115.62,1211.72 1116.21,1211.72 1116.8,1211.72 1117.38,1211.72 1117.97,1211.72 1118.55,1211.72 1119.14,1211.72 1119.73,1211.72 1120.31,1211.72 1120.9,1211.72 1121.49,1211.72 1122.07,1211.72 1122.66,1211.72 1123.25,1211.72 1123.83,1211.72 1124.42,1211.72 1125.01,1211.72 1125.59,1211.72 1126.18,1211.72 1126.76,1211.72 1127.35,1211.72 1127.94,1211.72 1128.52,1211.72 1129.11,1211.72 1129.7,1211.72 1130.28,1211.72 1130.87,1211.72 1131.46,1211.72 1132.04,1211.72 1132.63,1211.72 1133.21,1211.72 1133.8,1211.72 1134.39,1211.72 1134.97,1211.72 1135.56,1211.72 1136.15,1211.72 1136.73,1211.72 1137.32,1211.72 1137.91,1211.72 1138.49,1211.72 1139.08,1211.72 1139.67,1211.72 1140.25,1211.72 1140.84,1211.72 1141.42,1211.72 1142.01,1211.72 1142.6,1211.72 1143.18,1211.72 1143.77,1211.72 1144.36,1211.72 1144.94,1211.72 1145.53,1211.72 1146.12,1211.72 1146.7,1211.72 1147.29,1211.72 1147.88,1211.72 1148.46,1211.72 1149.05,1211.72 1149.63,1211.72 1150.22,1211.72 1150.81,1211.72 1151.39,1211.72 1151.98,1211.72 1152.57,1211.72 1153.15,1211.72 1153.74,1211.72 1154.33,1211.72 1154.91,1211.72 1155.5,1211.72 1156.09,1211.72 1156.67,1211.72 1157.26,1211.72 1157.84,1211.72 1158.43,1211.72 1159.02,1211.72 1159.6,1211.72 1160.19,1211.72 1160.78,1211.72 1161.36,1211.72 1161.95,1211.72 1162.54,1211.72 1163.12,1211.72 1163.71,1211.72 1164.29,1211.72 1164.88,1211.72 1165.47,1211.72 1166.05,1211.72 1166.64,1211.72 1167.23,1211.72 1167.81,1211.72 1168.4,1211.72 1168.99,1211.72 1169.57,1211.72 1170.16,1211.72 1170.75,1211.72 1171.33,1211.72 1171.92,1211.72 1172.5,1211.72 1173.09,1211.72 1173.68,1211.72 1174.26,1211.72 1174.85,1211.72 1175.44,1211.72 1176.02,1211.72 1176.61,1211.72 1177.2,1211.72 1177.78,1211.72 1178.37,1211.72 1178.96,1211.72 1179.54,1211.72 1180.13,1211.72 1180.71,1211.72 1181.3,1211.72 1181.89,1211.72 1182.47,1211.72 1183.06,1211.72 1183.65,1211.72 1184.23,1211.72 1184.82,1211.72 1185.41,1211.72 1185.99,1211.72 1186.58,1211.72 1187.16,1211.72 1187.75,1211.72 1188.34,1211.72 1188.92,1211.72 1189.51,1211.72 1190.1,1211.72 1190.68,1211.72 1191.27,1211.72 1191.86,1211.72 1192.44,1211.72 1193.03,1211.72 1193.62,1211.72 1194.2,1211.72 1194.79,1211.72 1195.37,1211.72 1195.96,1211.72 1196.55,1211.72 1197.13,1211.72 1197.72,1211.72 1198.31,1211.72 1198.89,1211.72 1199.48,1211.72 1200.07,1211.72 1200.65,1211.72 1201.24,1211.72 1201.83,1211.72 1202.41,1211.72 1203,1211.72 1203.58,1211.72 1204.17,1211.72 1204.76,1211.72 1205.34,1211.72 1205.93,1211.72 1206.52,1211.72 1207.1,1211.72 1207.69,1211.72 1208.28,1211.72 1208.86,1211.72 1209.45,1211.72 1210.03,1211.72 1210.62,1211.72 1211.21,1211.72 1211.79,1211.72 1212.38,1211.72 1212.97,1211.72 1213.55,1211.72 1214.14,1211.72 1214.73,1211.72 1215.31,1211.72 1215.9,1211.72 1216.49,1211.72 1217.07,1211.72 1217.66,1211.72 1218.24,1211.72 1218.83,1211.72 1219.42,1211.72 1220,1211.72 1220.59,1211.72 1221.18,1211.72 1221.76,1211.72 1222.35,1211.72 1222.94,1211.72 1223.52,1211.72 1224.11,1211.72 1224.7,1211.72 1225.28,1211.72 1225.87,1211.72 1226.45,1211.72 1227.04,1211.72 1227.63,1211.72 1228.21,1211.72 1228.8,1211.72 1229.39,1211.72 1229.97,1211.72 1230.56,1211.72 1231.15,1211.72 1231.73,1211.72 1232.32,1211.72 1232.91,1211.72 1233.49,1211.72 1234.08,1211.72 1234.66,1211.72 1235.25,1211.72 1235.84,1211.72 1236.42,1211.72 1237.01,1211.72 1237.6,1211.72 1238.18,1211.72 1238.77,1211.72 1239.36,1211.72 1239.94,1211.72 1240.53,1211.72 1241.11,1211.72 1241.7,1211.72 1242.29,1211.72 1242.87,1211.72 1243.46,1211.72 1244.05,1211.72 1244.63,1211.72 1245.22,1211.72 1245.81,1211.72 1246.39,1211.72 1246.98,1211.72 1247.57,1211.72 1248.15,1211.72 1248.74,1211.72 1249.32,1211.72 1249.91,1211.72 1250.5,1211.72 1251.08,1211.72 1251.67,1211.72 1252.26,1211.72 1252.84,1211.72 1253.43,1211.72 1254.02,1211.72 1254.6,1211.72 1255.19,1211.72 1255.78,1211.72 1256.36,1211.72 1256.95,1211.72 1257.53,1211.72 1258.12,1211.72 1258.71,1211.72 1259.29,1211.72 1259.88,1211.72 1260.47,1211.72 1261.05,1211.72 1261.64,1211.72 1262.23,1211.72 1262.81,1211.72 1263.4,1211.72 1263.98,1211.72 1264.57,1211.72 1265.16,1211.72 1265.74,1211.72 1266.33,1211.72 1266.92,1211.72 1267.5,1211.72 1268.09,1211.72 1268.68,1211.72 1269.26,1211.72 1269.85,1211.72 1270.44,1211.72 1271.02,1211.72 1271.61,1211.72 1272.19,1211.72 1272.78,1211.72 1273.37,1211.72 1273.95,1211.72 1274.54,1211.72 1275.13,1211.72 1275.71,1211.72 1276.3,1211.72 1276.89,1211.72 1277.47,1211.72 1278.06,1211.72 1278.65,1211.72 1279.23,1211.72 1279.82,1211.72 1280.4,1211.72 1280.99,1211.72 1281.58,1211.72 1282.16,1211.72 1282.75,1211.72 1283.34,1211.72 1283.92,1211.72 1284.51,1211.72 1285.1,1211.72 1285.68,1211.72 1286.27,1211.72 1286.86,1211.72 1287.44,1211.72 1288.03,1211.72 1288.61,1211.72 1289.2,1211.72 1289.79,1211.72 1290.37,1211.72 1290.96,1211.72 1291.55,1211.72 1292.13,1211.72 1292.72,1211.72 1293.31,1211.72 1293.89,1211.72 1294.48,1211.72 1295.06,1211.72 1295.65,1211.72 1296.24,1211.72 1296.82,1211.72 1297.41,1211.72 1298,1211.72 1298.58,1211.72 1299.17,1211.72 1299.76,1211.72 1300.34,1211.72 1300.93,1211.72 1301.52,1211.72 1302.1,1211.72 1302.69,1211.72 1303.27,1211.72 1303.86,1211.72 1304.45,1211.72 1305.03,1211.72 1305.62,1211.72 1306.21,1211.72 1306.79,1211.72 1307.38,1211.72 1307.97,1211.72 1308.55,1211.72 1309.14,1211.72 1309.73,1211.72 1310.31,1211.72 1310.9,1211.72 1311.48,1211.72 1312.07,1211.72 1312.66,1211.72 1313.24,1211.72 1313.83,1211.72 1314.42,1211.72 1315,1211.72 1315.59,1211.72 1316.18,1211.72 1316.76,1211.72 1317.35,1211.72 1317.93,1211.72 1318.52,1211.72 1319.11,1211.72 1319.69,1211.72 1320.28,1211.72 1320.87,1211.72 1321.45,1211.72 1322.04,1211.72 1322.63,1211.72 1323.21,1211.72 1323.8,1211.72 1324.39,1211.72 1324.97,1211.72 1325.56,1211.72 1326.14,1211.72 1326.73,1211.72 1327.32,1211.72 1327.9,1211.72 1328.49,1211.72 1329.08,1211.72 1329.66,1211.72 1330.25,1211.72 1330.84,1211.72 1331.42,1211.72 1332.01,1211.72 1332.6,1211.72 1333.18,1211.72 1333.77,1211.72 1334.35,1211.72 1334.94,1211.72 1335.53,1211.72 1336.11,1211.72 1336.7,1211.72 1337.29,1211.72 1337.87,1211.72 1338.46,1211.72 1339.05,1211.72 1339.63,1211.72 1340.22,1211.72 1340.8,1211.72 1341.39,1211.72 1341.98,1211.72 1342.56,1211.72 1343.15,1211.72 1343.74,1211.72 1344.32,1211.72 1344.91,1211.72 1345.5,1211.72 1346.08,1211.72 1346.67,1211.72 1347.26,1211.72 1347.84,1211.72 1348.43,1211.72 1349.01,1211.72 1349.6,1211.72 1350.19,1211.72 1350.77,1211.72 1351.36,1211.72 1351.95,1211.72 1352.53,1211.72 1353.12,1211.72 1353.71,1211.72 1354.29,1211.72 1354.88,1211.72 1355.47,1211.72 1356.05,1211.72 1356.64,1211.72 1357.22,1211.72 1357.81,1211.72 1358.4,1211.72 1358.98,1211.72 1359.57,1211.72 1360.16,1211.72 1360.74,1211.72 1361.33,1211.72 1361.92,1211.72 1362.5,1211.72 1363.09,1211.72 1363.68,1211.72 1364.26,1211.72 1364.85,1211.72 1365.43,1211.72 1366.02,1211.72 1366.61,1211.72 1367.19,1211.72 1367.78,1211.72 1368.37,1211.72 1368.95,1211.72 1369.54,1211.72 1370.13,1211.72 1370.71,1211.72 1371.3,1211.72 1371.88,1211.72 1372.47,1211.72 1373.06,1211.72 1373.64,1211.72 1374.23,1211.72 1374.82,1211.72 1375.4,1211.72 1375.99,1211.72 1376.58,1211.72 1377.16,1211.72 1377.75,1211.72 1378.34,1211.72 1378.92,1211.72 1379.51,1211.72 1380.09,1211.72 1380.68,1211.72 1381.27,1211.72 1381.85,1211.72 1382.44,1211.72 1383.03,1211.72 1383.61,1211.72 1384.2,1211.72 1384.79,1211.72 1385.37,1211.72 1385.96,1211.72 1386.55,1211.72 1387.13,1211.72 1387.72,1211.72 1388.3,1211.72 1388.89,1211.72 1389.48,1211.72 1390.06,1211.72 1390.65,1211.72 1391.24,1211.72 1391.82,1211.72 1392.41,1211.72 1393,1211.72 1393.58,1211.72 1394.17,1211.72 1394.75,1211.72 1395.34,1211.72 1395.93,1211.72 1396.51,1211.72 1397.1,1211.72 1397.69,1211.72 1398.27,1211.72 1398.86,1211.72 1399.45,1211.72 1400.03,1211.72 1400.62,1211.72 1401.21,1211.72 1401.79,1211.72 1402.38,1211.72 1402.96,1211.72 1403.55,1211.72 1404.14,1211.72 1404.72,1211.72 1405.31,1211.72 1405.9,1211.72 1406.48,1211.72 1407.07,1211.72 1407.66,1211.72 1408.24,1211.72 1408.83,1211.72 1409.42,1211.72 1410,1211.72 1410.59,1211.72 1411.17,1211.72 1411.76,1211.72 1412.35,1211.72 1412.93,1211.72 1413.52,1211.72 1414.11,1211.72 1414.69,1211.72 1415.28,1211.72 1415.87,1211.72 1416.45,1211.72 1417.04,1211.72 1417.63,1211.72 1418.21,1211.72 1418.8,1211.72 1419.38,1211.72 1419.97,1211.72 1420.56,1211.72 1421.14,1211.72 1421.73,1211.72 1422.32,1211.72 1422.9,1211.72 1423.49,1211.72 1424.08,1211.72 1424.66,1211.72 1425.25,1211.72 1425.83,1211.72 1426.42,1211.72 1427.01,1211.72 1427.59,1211.72 1428.18,1211.72 1428.77,1211.72 1429.35,1211.72 1429.94,1211.72 1430.53,1211.72 1431.11,1211.72 1431.7,1211.72 1432.29,1211.72 1432.87,1211.72 1433.46,1211.72 1434.04,1211.72 1434.63,1211.72 1435.22,1211.72 1435.8,1211.72 1436.39,1211.72 1436.98,1211.72 1437.56,1211.72 1438.15,1211.72 1438.74,1211.72 1439.32,1211.72 1439.91,1211.72 1440.5,1211.72 1441.08,1211.72 1441.67,1211.72 1442.25,1211.72 1442.84,1211.72 1443.43,1211.72 1444.01,1211.72 1444.6,1211.72 1445.19,1211.72 1445.77,1211.72 1446.36,1211.72 1446.95,1211.72 1447.53,1211.72 1448.12,1211.72 1448.7,1211.72 1449.29,1211.72 1449.88,1211.72 1450.46,1211.72 1451.05,1211.72 1451.64,1211.72 1452.22,1211.72 1452.81,1211.72 1453.4,1211.72 1453.98,1211.72 1454.57,1211.72 1455.16,1211.72 1455.74,1211.72 1456.33,1211.72 1456.91,1211.72 1457.5,1211.72 1458.09,1211.72 1458.67,1211.72 1459.26,1211.72 1459.85,1211.72 1460.43,1211.72 1461.02,1211.72 1461.61,1211.72 1462.19,1211.72 1462.78,1211.72 1463.37,1211.72 1463.95,1211.72 1464.54,1211.72 1465.12,1211.72 1465.71,1211.72 1466.3,1211.72 1466.88,1211.72 1467.47,1211.72 1468.06,1211.72 1468.64,1211.72 1469.23,1211.72 1469.82,1211.72 1470.4,1211.72 1470.99,1211.72 1471.57,1211.72 1472.16,1211.72 1472.75,1211.72 1473.33,1211.72 1473.92,1211.72 1474.51,1211.72 1475.09,1211.72 1475.68,1211.72 1476.27,1211.72 1476.85,1211.72 1477.44,1211.72 1478.03,1211.72 1478.61,1211.72 1479.2,1211.72 1479.78,1211.72 1480.37,1211.72 1480.96,1211.72 1481.54,1211.72 1482.13,1211.72 1482.72,1211.72 1483.3,1211.72 1483.89,1211.72 1484.48,1211.72 1485.06,1211.72 1485.65,1211.72 1486.24,1211.72 1486.82,1211.72 1487.41,1211.72 1487.99,1211.72 1488.58,1211.72 1489.17,1211.72 1489.75,1211.72 1490.34,1211.72 1490.93,1211.72 1491.51,1211.72 1492.1,1211.72 1492.69,1211.72 1493.27,1211.72 1493.86,1211.72 1494.45,1211.72 1495.03,1211.72 1495.62,1211.72 1496.2,1211.72 1496.79,1211.72 1497.38,1211.72 1497.96,1211.72 1498.55,1211.72 1499.14,1211.72 1499.72,1211.72 1500.31,1211.72 1500.9,1211.72 1501.48,1211.72 1502.07,1211.72 1502.65,1211.72 1503.24,1211.72 1503.83,1211.72 1504.41,1211.72 1505,1211.72 1505.59,1211.72 1506.17,1211.72 1506.76,1211.72 1507.35,1211.72 1507.93,1211.72 1508.52,1211.72 1509.11,1211.72 1509.69,1211.72 1510.28,1211.72 1510.86,1211.72 1511.45,1211.72 1512.04,1211.72 1512.62,1211.72 1513.21,1211.72 1513.8,1211.72 1514.38,1211.72 1514.97,1211.72 1515.56,1211.72 1516.14,1211.72 1516.73,1211.72 1517.32,1211.72 1517.9,1211.72 1518.49,1211.72 1519.07,1211.72 1519.66,1211.72 1520.25,1211.72 1520.83,1211.72 1521.42,1211.72 1522.01,1211.72 1522.59,1211.72 1523.18,1211.72 1523.77,1211.72 1524.35,1211.72 1524.94,1211.72 1525.52,1211.72 1526.11,1211.72 1526.7,1211.72 1527.28,1211.72 1527.87,1211.72 1528.46,1211.72 1529.04,1211.72 1529.63,1211.72 1530.22,1211.72 1530.8,1211.72 1531.39,1211.72 1531.98,1211.72 1532.56,1211.72 1533.15,1211.72 1533.73,1211.72 1534.32,1211.72 1534.91,1211.72 1535.49,1211.72 1536.08,1211.72 1536.67,1211.72 1537.25,1211.72 1537.84,1211.72 1538.43,1211.72 1539.01,1211.72 1539.6,1211.72 1540.19,1211.72 1540.77,1211.72 1541.36,1211.72 1541.94,1211.72 1542.53,1211.72 1543.12,1211.72 1543.7,1211.72 1544.29,1211.72 1544.88,1211.72 1545.46,1211.72 1546.05,1211.72 1546.64,1211.72 1547.22,1211.72 1547.81,1211.72 1548.4,1211.72 1548.98,1211.72 1549.57,1211.72 1550.15,1211.72 1550.74,1211.72 1551.33,1211.72 1551.91,1211.72 1552.5,1211.72 1553.09,1211.72 1553.67,1211.72 1554.26,1211.72 1554.85,1211.72 1555.43,1211.72 1556.02,1211.72 1556.6,1211.72 1557.19,1211.72 1557.78,1211.72 1558.36,1211.72 1558.95,1211.72 1559.54,1211.72 1560.12,1211.72 1560.71,1211.72 1561.3,1211.72 1561.88,1211.72 1562.47,1211.72 1563.06,1211.72 1563.64,1211.72 1564.23,1211.72 1564.81,1211.72 1565.4,1211.72 1565.99,1211.72 1566.57,1211.72 1567.16,1211.72 1567.75,1211.72 1568.33,1211.72 1568.92,1211.72 1569.51,1211.72 1570.09,1211.72 1570.68,1211.72 1571.27,1211.72 1571.85,1211.72 1572.44,1211.72 1573.02,1211.72 1573.61,1211.72 1574.2,1211.72 1574.78,1211.72 1575.37,1211.72 1575.96,1211.72 1576.54,1211.72 1577.13,1211.72 1577.72,1211.72 1578.3,1211.72 1578.89,1211.72 1579.47,1211.72 1580.06,1211.72 1580.65,1211.72 1581.23,1211.72 1581.82,1211.72 1582.41,1211.72 1582.99,1211.72 1583.58,1211.72 1584.17,1211.72 1584.75,1211.72 1585.34,1211.72 1585.93,1211.72 1586.51,1211.72 1587.1,1211.72 1587.68,1211.72 1588.27,1211.72 1588.86,1211.72 1589.44,1211.72 1590.03,1211.72 1590.62,1211.72 1591.2,1211.72 1591.79,1211.72 1592.38,1211.72 1592.96,1211.72 1593.55,1211.72 1594.14,1211.72 1594.72,1211.72 1595.31,1211.72 1595.89,1211.72 1596.48,1211.72 1597.07,1211.72 1597.65,1211.72 1598.24,1211.72 1598.83,1211.72 1599.41,1211.72 1600,1211.72 1600.59,1211.72 1601.17,1211.72 1601.76,1211.72 1602.34,1211.72 1602.93,1211.72 1603.52,1211.72 1604.1,1211.72 1604.69,1211.72 1605.28,1211.72 1605.86,1211.72 1606.45,1211.72 1607.04,1211.72 1607.62,1211.72 1608.21,1211.72 1608.8,1211.72 1609.38,1211.72 1609.97,1211.72 1610.55,1211.72 1611.14,1211.72 1611.73,1211.72 1612.31,1211.72 1612.9,1211.72 1613.49,1211.72 1614.07,1211.72 1614.66,1211.72 1615.25,1211.72 1615.83,1211.72 1616.42,1211.72 1617.01,1211.72 1617.59,1211.72 1618.18,1211.72 1618.76,1211.72 1619.35,1211.72 1619.94,1211.72 1620.52,1211.72 1621.11,1211.72 1621.7,1211.72 1622.28,1211.72 1622.87,1211.72 1623.46,1211.72 1624.04,1211.72 1624.63,1211.72 1625.22,1211.72 1625.8,1211.72 1626.39,1211.72 1626.97,1211.72 1627.56,1211.72 1628.15,1211.72 1628.73,1211.72 1629.32,1211.72 1629.91,1211.72 1630.49,1211.72 1631.08,1211.72 1631.67,1211.72 1632.25,1211.72 1632.84,1211.72 1633.42,1211.72 1634.01,1211.72 1634.6,1211.72 1635.18,1211.72 1635.77,1211.72 1636.36,1211.72 1636.94,1211.72 1637.53,1211.72 1638.12,1211.72 1638.7,1211.72 1639.29,1211.72 1639.88,1211.72 1640.46,1211.72 1641.05,1211.72 1641.63,1211.72 1642.22,1211.72 1642.81,1211.72 1643.39,1211.72 1643.98,1211.72 1644.57,1211.72 1645.15,1211.72 1645.74,1211.72 1646.33,1211.72 1646.91,1211.72 1647.5,1211.72 1648.09,1211.72 1648.67,1211.72 1649.26,1211.72 1649.84,1211.72 1650.43,1211.72 1651.02,1211.72 1651.6,1211.72 1652.19,1211.72 1652.78,1211.72 1653.36,1211.72 1653.95,1211.72 1654.54,1211.72 1655.12,1211.72 1655.71,1211.72 1656.29,1211.72 1656.88,1211.72 1657.47,1211.72 1658.05,1211.72 1658.64,1211.72 1659.23,1211.72 1659.81,1211.72 1660.4,1211.72 1660.99,1211.72 1661.57,1211.72 1662.16,1211.72 1662.75,1211.72 1663.33,1211.72 1663.92,1211.72 1664.5,1211.72 1665.09,1211.72 1665.68,1211.72 1666.26,1211.72 1666.85,1211.72 1667.44,1211.72 1668.02,1211.72 1668.61,1211.72 1669.2,1211.72 1669.78,1211.72 1670.37,1211.72 1670.96,1211.72 1671.54,1211.72 1672.13,1211.72 1672.71,1211.72 1673.3,1211.72 1673.89,1211.72 1674.47,1211.72 1675.06,1211.72 1675.65,1211.72 1676.23,1211.72 1676.82,1211.72 1677.41,1211.72 1677.99,1211.72 1678.58,1211.72 1679.17,1211.72 1679.75,1211.72 1680.34,1211.72 1680.92,1211.72 1681.51,1211.72 1682.1,1211.72 1682.68,1211.72 1683.27,1211.72 1683.86,1211.72 1684.44,1211.72 1685.03,1211.72 1685.62,1211.72 1686.2,1211.72 1686.79,1211.72 1687.37,1211.72 1687.96,1211.72 1688.55,1211.72 1689.13,1211.72 1689.72,1211.72 1690.31,1211.72 1690.89,1211.72 1691.48,1211.72 1692.07,1211.72 1692.65,1211.72 1693.24,1211.72 1693.83,1211.72 1694.41,1211.72 1695,1211.72 1695.58,1211.72 1696.17,1211.72 1696.76,1211.72 1697.34,1211.72 1697.93,1211.72 1698.52,1211.72 1699.1,1211.72 1699.69,1211.72 1700.28,1211.72 1700.86,1211.72 1701.45,1211.72 1702.04,1211.72 1702.62,1211.72 1703.21,1211.72 1703.79,1211.72 1704.38,1211.72 1704.97,1211.72 1705.55,1211.72 1706.14,1211.72 1706.73,1211.72 1707.31,1211.72 1707.9,1211.72 1708.49,1211.72 1709.07,1211.72 1709.66,1211.72 1710.24,1211.72 1710.83,1211.72 1711.42,1211.72 1712,1211.72 1712.59,1211.72 1713.18,1211.72 1713.76,1211.72 1714.35,1211.72 1714.94,1211.72 1715.52,1211.72 1716.11,1211.72 1716.7,1211.72 1717.28,1211.72 1717.87,1211.72 1718.45,1211.72 1719.04,1211.72 1719.63,1211.72 1720.21,1211.72 1720.8,1211.72 1721.39,1211.72 1721.97,1211.72 1722.56,1211.72 1723.15,1211.72 1723.73,1211.72 1724.32,1211.72 1724.91,1211.72 1725.49,1211.72 1726.08,1211.72 1726.66,1211.72 1727.25,1211.72 1727.84,1211.72 1728.42,1211.72 1729.01,1211.72 1729.6,1211.72 1730.18,1211.72 1730.77,1211.72 1731.36,1211.72 1731.94,1211.72 1732.53,1211.72 1733.11,1211.72 1733.7,1211.72 1734.29,1211.72 1734.87,1211.72 1735.46,1211.72 1736.05,1211.72 1736.63,1211.72 1737.22,1211.72 1737.81,1211.72 1738.39,1211.72 1738.98,1211.72 1739.57,1211.72 1740.15,1211.72 1740.74,1211.72 1741.32,1211.72 1741.91,1211.72 1742.5,1211.72 1743.08,1211.72 1743.67,1211.72 1744.26,1211.72 1744.84,1211.72 1745.43,1211.72 1746.02,1211.72 1746.6,1211.72 1747.19,1211.72 1747.78,1211.72 1748.36,1211.72 1748.95,1211.72 1749.53,1211.72 1750.12,1211.72 1750.71,1211.72 1751.29,1211.72 1751.88,1211.72 1752.47,1211.72 1753.05,1211.72 1753.64,1211.72 1754.23,1211.72 1754.81,1211.72 1755.4,1211.72 1755.99,1211.72 1756.57,1211.72 1757.16,1211.72 1757.74,1211.72 1758.33,1211.72 1758.92,1211.72 1759.5,1211.72 1760.09,1211.72 1760.68,1211.72 1761.26,1211.72 1761.85,1211.72 1762.44,1211.72 1763.02,1211.72 1763.61,1211.72 1764.19,1211.72 1764.78,1211.72 1765.37,1211.72 1765.95,1211.72 1766.54,1211.72 1767.13,1211.72 1767.71,1211.72 1768.3,1211.72 1768.89,1211.72 1769.47,1211.72 1770.06,1211.72 1770.65,1211.72 1771.23,1211.72 1771.82,1211.72 1772.4,1211.72 1772.99,1211.72 1773.58,1211.72 1774.16,1211.72 1774.75,1211.72 1775.34,1211.72 1775.92,1211.72 1776.51,1211.72 1777.1,1211.72 1777.68,1211.72 1778.27,1211.72 1778.86,1211.72 1779.44,1211.72 1780.03,1211.72 1780.61,1211.72 1781.2,1211.72 1781.79,1211.72 1782.37,1211.72 1782.96,1211.72 1783.55,1211.72 1784.13,1211.72 1784.72,1211.72 1785.31,1211.72 1785.89,1211.72 1786.48,1211.72 1787.06,1211.72 1787.65,1211.72 1788.24,1211.72 1788.82,1211.72 1789.41,1211.72 1790,1211.72 1790.58,1211.72 1791.17,1211.72 1791.76,1211.72 1792.34,1211.72 1792.93,1211.72 1793.52,1211.72 1794.1,1211.72 1794.69,1211.72 1795.27,1211.72 1795.86,1211.72 1796.45,1211.72 1797.03,1211.72 1797.62,1211.72 1798.21,1211.72 1798.79,1211.72 1799.38,1211.72 1799.97,1211.72 1800.55,1211.72 1801.14,1211.72 1801.73,1211.72 1802.31,1211.72 1802.9,1211.72 1803.48,1211.72 1804.07,1211.72 1804.66,1211.72 1805.24,1211.72 1805.83,1211.72 1806.42,1211.72 1807,1211.72 1807.59,1211.72 1808.18,1211.72 1808.76,1211.72 1809.35,1211.72 1809.94,1211.72 1810.52,1211.72 1811.11,1211.72 1811.69,1211.72 1812.28,1211.72 1812.87,1211.72 1813.45,1211.72 1814.04,1211.72 1814.63,1211.72 1815.21,1211.72 1815.8,1211.72 1816.39,1211.72 1816.97,1211.72 1817.56,1211.72 1818.14,1211.72 1818.73,1211.72 1819.32,1211.72 1819.9,1211.72 1820.49,1211.72 1821.08,1211.72 1821.66,1211.72 1822.25,1211.72 1822.84,1211.72 1823.42,1211.72 1824.01,1211.72 1824.6,1211.72 1825.18,1211.72 1825.77,1211.72 1826.35,1211.72 1826.94,1211.72 1827.53,1211.72 1828.11,1211.72 1828.7,1211.72 1829.29,1211.72 1829.87,1211.72 1830.46,1211.72 1831.05,1211.72 1831.63,1211.72 1832.22,1211.72 1832.81,1211.72 1833.39,1211.72 1833.98,1211.72 1834.56,1211.72 1835.15,1211.72 1835.74,1211.72 1836.32,1211.72 1836.91,1211.72 1837.5,1211.72 1838.08,1211.72 1838.67,1211.72 1839.26,1211.72 1839.84,1211.72 1840.43,1211.72 1841.01,1211.72 1841.6,1211.72 1842.19,1211.72 1842.77,1211.72 1843.36,1211.72 1843.95,1211.72 1844.53,1211.72 1845.12,1211.72 1845.71,1211.72 1846.29,1211.72 1846.88,1211.72 1847.47,1211.72 1848.05,1211.72 1848.64,1211.72 1849.22,1211.72 1849.81,1211.72 1850.4,1211.72 1850.98,1211.72 1851.57,1211.72 1852.16,1211.72 1852.74,1211.72 1853.33,1211.72 1853.92,1211.72 1854.5,1211.72 1855.09,1211.72 1855.68,1211.72 1856.26,1211.72 1856.85,1211.72 1857.43,1211.72 1858.02,1211.72 1858.61,1211.72 1859.19,1211.72 1859.78,1211.72 1860.37,1211.72 1860.95,1211.72 1861.54,1211.72 1862.13,1211.72 1862.71,1211.72 1863.3,1211.72 1863.88,1211.72 1864.47,1211.72 1865.06,1211.72 1865.64,1211.72 1866.23,1211.72 1866.82,1211.72 1867.4,1211.72 1867.99,1211.72 1868.58,1211.72 1869.16,1211.72 1869.75,1211.72 1870.34,1211.72 1870.92,1211.72 1871.51,1211.72 1872.09,1211.72 1872.68,1211.72 1873.27,1211.72 1873.85,1211.72 1874.44,1211.72 1875.03,1211.72 1875.61,1211.72 1876.2,1211.72 1876.79,1211.72 1877.37,1211.72 1877.96,1211.72 1878.55,1211.72 1879.13,1211.72 1879.72,1211.72 1880.3,1211.72 1880.89,1211.72 1881.48,1211.72 1882.06,1211.72 1882.65,1211.72 1883.24,1211.72 1883.82,1211.72 1884.41,1211.72 1885,1211.72 1885.58,1211.72 1886.17,1211.72 1886.76,1211.72 1887.34,1211.72 1887.93,1211.72 1888.51,1211.72 1889.1,1211.72 1889.69,1211.72 1890.27,1211.72 1890.86,1211.72 1891.45,1211.72 1892.03,1211.72 1892.62,1211.72 1893.21,1211.72 1893.79,1211.72 1894.38,1211.72 1894.96,1211.72 1895.55,1211.72 1896.14,1211.72 1896.72,1211.72 1897.31,1211.72 1897.9,1211.72 1898.48,1211.72 1899.07,1211.72 1899.66,1211.72 1900.24,1211.72 1900.83,1211.72 1901.42,1211.72 1902,1211.72 1902.59,1211.72 1903.17,1211.72 1903.76,1211.72 1904.35,1211.72 1904.93,1211.72 1905.52,1211.72 1906.11,1211.72 1906.69,1211.72 1907.28,1211.72 1907.87,1211.72 1908.45,1211.72 1909.04,1211.72 1909.63,1211.72 1910.21,1211.72 1910.8,1211.72 1911.38,1211.72 1911.97,1211.72 1912.56,1211.72 1913.14,1211.72 1913.73,1211.72 1914.32,1211.72 1914.9,1211.72 1915.49,1211.72 1916.08,1211.72 1916.66,1211.72 1917.25,1211.72 1917.83,1211.72 1918.42,1211.72 1919.01,1211.72 1919.59,1211.72 1920.18,1211.72 1920.77,1211.72 1921.35,1211.72 1921.94,1211.72 1922.53,1211.72 1923.11,1211.72 1923.7,1211.72 1924.29,1211.72 1924.87,1211.72 1925.46,1211.72 1926.04,1211.72 1926.63,1211.72 1927.22,1211.72 1927.8,1211.72 1928.39,1211.72 1928.98,1211.72 1929.56,1211.72 1930.15,1211.72 1930.74,1211.72 1931.32,1211.72 1931.91,1211.72 1932.5,1211.72 1933.08,1211.72 1933.67,1211.72 1934.25,1211.72 1934.84,1211.72 1935.43,1211.72 1936.01,1211.72 1936.6,1211.72 1937.19,1211.72 1937.77,1211.72 1938.36,1211.72 1938.95,1211.72 1939.53,1211.72 1940.12,1211.72 1940.71,1211.72 1941.29,1211.72 1941.88,1211.72 1942.46,1211.72 1943.05,1211.72 1943.64,1211.72 1944.22,1211.72 1944.81,1211.72 1945.4,1211.72 1945.98,1211.72 1946.57,1211.72 1947.16,1211.72 1947.74,1211.72 1948.33,1211.72 1948.91,1211.72 1949.5,1211.72 1950.09,1211.72 1950.67,1211.72 1951.26,1211.72 1951.85,1211.72 1952.43,1211.72 1953.02,1211.72 1953.61,1211.72 1954.19,1211.72 1954.78,1211.72 1955.37,1211.72 1955.95,1211.72 1956.54,1211.72 1957.12,1211.72 1957.71,1211.72 1958.3,1211.72 1958.88,1211.72 1959.47,1211.72 1960.06,1211.72 1960.64,1211.72 1961.23,1211.72 1961.82,1211.72 1962.4,1211.72 1962.99,1211.72 1963.58,1211.72 1964.16,1211.72 1964.75,1211.72 1965.33,1211.72 1965.92,1211.72 1966.51,1211.72 1967.09,1211.72 1967.68,1211.72 1968.27,1211.72 1968.85,1211.72 1969.44,1211.72 1970.03,1211.72 1970.61,1211.72 1971.2,1211.72 1971.78,1211.72 1972.37,1211.72 1972.96,1211.72 1973.54,1211.72 1974.13,1211.72 1974.72,1211.72 1975.3,1211.72 1975.89,1211.72 1976.48,1211.72 1977.06,1211.72 1977.65,1211.72 1978.24,1211.72 1978.82,1211.72 1979.41,1211.72 1979.99,1211.72 1980.58,1211.72 1981.17,1211.72 1981.75,1211.72 1982.34,1211.72 1982.93,1211.72 1983.51,1211.72 1984.1,1211.72 1984.69,1211.72 1985.27,1211.72 1985.86,1211.72 1986.45,1211.72 1987.03,1211.72 1987.62,1211.72 1988.2,1211.72 1988.79,1211.72 1989.38,1211.72 1989.96,1211.72 1990.55,1211.72 1991.14,1211.72 1991.72,1211.72 1992.31,1211.72 1992.9,1211.72 1993.48,1211.72 1994.07,1211.72 1994.65,1211.72 1995.24,1211.72 1995.83,1211.72 1996.41,1211.72 1997,1211.72 1997.59,1211.72 1998.17,1211.72 1998.76,1211.72 1999.35,1211.72 1999.93,1211.72 2000.52,1211.72 2001.11,1211.72 2001.69,1211.72 2002.28,1211.72 2002.86,1211.72 2003.45,1211.72 2004.04,1211.72 2004.62,1211.72 2005.21,1211.72 2005.8,1211.72 2006.38,1211.72 2006.97,1211.72 2007.56,1211.72 2008.14,1211.72 2008.73,1211.72 2009.32,1211.72 2009.9,1211.72 2010.49,1211.72 2011.07,1211.72 2011.66,1211.72 2012.25,1211.72 2012.83,1211.72 2013.42,1211.72 2014.01,1211.72 2014.59,1211.72 2015.18,1211.72 2015.77,1211.72 2016.35,1211.72 2016.94,1211.72 2017.53,1211.72 2018.11,1211.72 2018.7,1211.72 2019.28,1211.72 2019.87,1211.72 2020.46,1211.72 2021.04,1211.72 2021.63,1211.72 2022.22,1211.72 2022.8,1211.72 2023.39,1211.72 2023.98,1211.72 2024.56,1211.72 2025.15,1211.72 2025.73,1211.72 2026.32,1211.72 2026.91,1211.72 2027.49,1211.72 2028.08,1211.72 2028.67,1211.72 2029.25,1211.72 2029.84,1211.72 2030.43,1211.72 2031.01,1211.72 2031.6,1211.72 2032.19,1211.72 2032.77,1211.72 2033.36,1211.72 2033.94,1211.72 2034.53,1211.72 2035.12,1211.72 2035.7,1211.72 2036.29,1211.72 2036.88,1211.72 2037.46,1211.72 2038.05,1211.72 2038.64,1211.72 2039.22,1211.72 2039.81,1211.72 2040.4,1211.72 2040.98,1211.72 2041.57,1211.72 2042.15,1211.72 2042.74,1211.72 2043.33,1211.72 2043.91,1211.72 2044.5,1211.72 2045.09,1211.72 2045.67,1211.72 2046.26,1211.72 2046.85,1211.72 2047.43,1211.72 2048.02,1211.72 2048.6,1211.72 2049.19,1211.72 2049.78,1211.72 2050.36,1211.72 2050.95,1211.72 2051.54,1211.72 2052.12,1211.72 2052.71,1211.72 2053.3,1211.72 2053.88,1211.72 2054.47,1211.72 2055.06,1211.72 2055.64,1211.72 2056.23,1211.72 2056.81,1211.72 2057.4,1211.72 2057.99,1211.72 2058.57,1211.72 2059.16,1211.72 2059.75,1211.72 2060.33,1211.72 2060.92,1211.72 2061.51,1211.72 2062.09,1211.72 2062.68,1211.72 2063.27,1211.72 2063.85,1211.72 2064.44,1211.72 2065.02,1211.72 2065.61,1211.72 2066.2,1211.72 2066.78,1211.72 2067.37,1211.72 2067.96,1211.72 2068.54,1211.72 2069.13,1211.72 2069.72,1211.72 2070.3,1211.72 2070.89,1211.72 2071.48,1211.72 2072.06,1211.72 2072.65,1211.72 2073.23,1211.72 2073.82,1211.72 2074.41,1211.72 2074.99,1211.72 2075.58,1211.72 2076.17,1211.72 2076.75,1211.72 2077.34,1211.72 2077.93,1211.72 2078.51,1211.72 2079.1,1211.72 2079.68,1211.72 2080.27,1211.72 2080.86,1211.72 2081.44,1211.72 2082.03,1211.72 2082.62,1211.72 2083.2,1211.72 2083.79,1211.72 2084.38,1211.72 2084.96,1211.72 2085.55,1211.72 2086.14,1211.72 2086.72,1211.72 2087.31,1211.72 2087.89,1211.72 2088.48,1211.72 2089.07,1211.72 2089.65,1211.72 2090.24,1211.72 2090.83,1211.72 2091.41,1211.72 2092,1211.72 2092.59,1211.72 2093.17,1211.72 2093.76,1211.72 2094.35,1211.72 2094.93,1211.72 2095.52,1211.72 2096.1,1211.72 2096.69,1211.72 2097.28,1211.72 2097.86,1211.72 2098.45,1211.72 2099.04,1211.72 2099.62,1211.72 2100.21,1211.72 2100.8,1211.72 2101.38,1211.72 2101.97,1211.72 2102.55,1211.72 2103.14,1211.72 2103.73,1211.72 2104.31,1211.72 2104.9,1211.72 2105.49,1211.72 2106.07,1211.72 2106.66,1211.72 2107.25,1211.72 2107.83,1211.72 2108.42,1211.72 2109.01,1211.72 2109.59,1211.72 2110.18,1211.72 2110.76,1211.72 2111.35,1211.72 2111.94,1211.72 2112.52,1211.72 2113.11,1211.72 2113.7,1211.72 2114.28,1211.72 2114.87,1211.72 2115.46,1211.72 2116.04,1211.72 2116.63,1211.72 2117.22,1211.72 2117.8,1211.72 2118.39,1211.72 2118.97,1211.72 2119.56,1211.72 2120.15,1211.72 2120.73,1211.72 2121.32,1211.72 2121.91,1211.72 2122.49,1211.72 2123.08,1211.72 2123.67,1211.72 2124.25,1211.72 2124.84,1211.72 2125.42,1211.72 2126.01,1211.72 2126.6,1211.72 2127.18,1211.72 2127.77,1211.72 2128.36,1211.72 2128.94,1211.72 2129.53,1211.72 2130.12,1211.72 2130.7,1211.72 2131.29,1211.72 2131.88,1211.72 2132.46,1211.72 2133.05,1211.72 2133.63,1211.72 2134.22,1211.72 2134.81,1211.72 2135.39,1211.72 2135.98,1211.72 2136.57,1211.72 2137.15,1211.72 2137.74,1211.72 2138.33,1211.72 2138.91,1211.72 2139.5,1211.72 2140.09,1211.72 2140.67,1211.72 2141.26,1211.72 2141.84,1211.72 2142.43,1211.72 2143.02,1211.72 2143.6,1211.72 2144.19,1211.72 2144.78,1211.72 2145.36,1211.72 2145.95,1211.72 2146.54,1211.72 2147.12,1211.72 2147.71,1211.72 2148.3,1211.72 2148.88,1211.72 2149.47,1211.72 2150.05,1211.72 2150.64,1211.72 2151.23,1211.72 2151.81,1211.72 2152.4,1211.72 2152.99,1211.72 2153.57,1211.72 2154.16,1211.72 2154.75,1211.72 2155.33,1211.72 2155.92,1211.72 2156.5,1211.72 2157.09,1211.72 2157.68,1211.72 2158.26,1211.72 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.1,1193.83 1399.49,899.083 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.17 985.439,1193.83 2158.26,1193.83 2158.26,1229.17 985.439,1229.17 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip833\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip833)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3872.82 163.232,-4926.99 163.792,-5918.7 164.351,-6844.08 164.91,-7667.27 165.469,-7234.45 166.029,-7969.31 166.588,-7638.26 167.147,-8327.61 167.706,-8950.91 168.266,-9493.76 168.825,-9998.69 169.384,-9676.04 169.943,-10109.9 170.503,-10494.8 171.062,-10824.6 171.621,-11121.6 172.18,-11356.8 172.74,-11578 173.299,-10760 173.858,-10969 174.417,-11134.5 174.977,-11280.2 175.536,-11397.1 176.095,-11477.9 176.655,-11508 177.214,-11542.7 177.773,-11255 178.332,-10960.6 178.892,-10963.7 179.451,-10938.2 180.01,-10429.9 180.569,-10181 181.129,-9948.59 181.688,-9895.8 182.247,-9656.83 182.806,-9594.59 183.366,-9534.2 183.925,-9146.32 184.484,-8930.1 185.043,-8436.07 185.603,-8351.06 186.162,-8263.77 186.721,-7928.81 187.28,-7718.65 187.84,-7525.28 188.399,-7326.6 188.958,-7137.62 189.517,-6858.02 190.077,-6680.97 190.636,-6249.17 191.195,-6072.68 191.754,-5980.4 192.314,-5878.07 192.873,-5777.69 193.432,-5609.16 193.991,-5508.7 194.551,-5413.83 195.11,-5121.32 195.669,-4961.57 196.228,-4861.75 196.788,-4765.13 197.347,-4505.66 197.906,-4366.53 198.465,-4177.32 199.025,-4046.12 199.584,-3915.64 200.143,-3788.76 200.702,-3663.14 201.262,-3582.01 201.821,-3421.13 202.38,-3342.96 202.939,-3186.38 203.499,-3068.38 204.058,-2920.88 204.617,-2775.99 205.176,-2707.93 205.736,-2596.44 206.295,-2525.39 206.854,-2386.7 207.413,-2224.98 207.973,-2099.69 208.532,-2040.74 209.091,-1918.29 209.65,-1832.17 210.21,-1749.56 210.769,-1582.92 211.328,-1507.46 211.887,-1456.93 212.447,-1404.72 213.006,-1301.34 213.565,-1177.32 214.124,-1080.49 214.684,-1013.53 215.243,-920.998 215.802,-808.282 216.361,-645.716 216.921,-544.381 217.48,-448.378 218.039,-402.975 218.598,-385.327 219.158,-339.188 219.717,-295.864 220.276,-228.31 220.835,-207.175 221.395,-144.402 221.954,-150.56 222.513,-41.5627 223.072,-21.6388 223.632,35.7647 224.191,92.6728 224.75,164.631 225.309,155.493 225.869,124.582 226.428,138.436 226.987,195.903 227.546,206.328 228.106,217 228.665,228.893 229.224,241.493 229.783,274.116 230.343,309.853 230.902,383.552 231.461,412.89 232.02,421.988 232.58,451.097 233.139,462.755 233.698,492.32 234.257,537.483 234.817,584.904 235.376,591.76 235.935,636.194 236.494,657.637 237.054,753.988 237.613,754.531 238.172,734.223 238.731,770.662 239.291,810.837 239.85,808.13 240.409,845.538 240.968,916.811 241.528,891.934 242.087,885.533 242.646,919.167 243.205,948.043 243.765,957.831 244.324,952.052 244.883,1000.25 245.442,990.956 246.002,1017.36 246.561,1042.99 247.12,1101.02 247.679,1066.3 248.239,1055.63 248.798,1061.75 249.357,1033.11 249.916,1074.58 250.476,1048.7 251.035,1056.89 251.594,1080.44 252.153,1086.06 252.713,1127.02 253.272,1116.34 253.831,1136.26 254.39,1104.05 254.95,1071.56 255.509,1058.69 256.068,1068.33 256.627,1095.58 257.187,1103.04 257.746,1128.6 258.305,1084.46 258.864,1090.55 259.424,1101.19 259.983,1091.87 260.542,1064.15 261.101,1054.27 261.661,1080.4 262.22,1070.52 262.779,1078.99 263.338,1105.35 263.898,1093.17 264.457,1084.47 265.016,1059.63 265.575,1034.61 266.135,1028.14 266.694,1040.78 267.253,1032.48 267.812,1029.19 268.372,1021.66 268.931,1033.84 269.49,1043.43 270.049,1053.05 270.609,1077.13 271.168,1120.71 271.727,1141.77 272.286,1134.71 272.846,1125.57 273.405,1097.39 273.964,1070.67 274.523,1094.53 275.083,1136.44 275.642,1163.07 276.201,1151.81 276.76,1141.18 277.32,1115.29 277.879,1102.41 278.438,1111.07 278.997,1117.6 279.557,1088.62 280.116,1113.15 280.675,1122.85 281.234,1128.55 281.794,1149.11 282.353,1156.34 282.912,1141.02 283.471,1113.21 284.031,1083.64 284.59,1058.35 285.149,1068.56 285.708,1043.58 286.268,1019.61 286.827,994.772 287.386,974.182 287.945,988.908 288.505,983.101 289.064,999.597 289.623,1012.85 290.182,1007.45 290.742,985.937 291.301,979.594 291.86,939.456 292.419,956.06 292.979,971.76 293.538,967.99 294.097,981.606 294.656,959.636 295.216,941.089 295.775,935.407 296.334,947.168 296.893,976.163 297.453,973.092 298.012,1000.8 298.571,1043.91 299.13,1051.47 299.69,1060.49 300.249,1037.05 300.808,1044.48 301.368,1022.93 301.927,1033.9 302.486,1009.12 303.045,1038.01 303.605,982.364 304.164,962.303 304.723,959.152 305.282,971.735 305.842,983.589 306.401,979.951 306.96,959.154 307.519,953.906 308.079,899.647 308.638,866.738 309.197,868.228 309.756,903.116 310.316,935.194 310.875,951.831 311.434,979.214 311.993,974.561 312.553,973.348 313.112,1001.93 313.671,993.15 314.23,1003.23 314.79,965.154 315.349,977.853 315.908,943.671 316.467,956.75 317.027,919.596 317.586,914.277 318.145,929.297 318.704,940.321 319.264,938.045 319.823,935.751 320.382,930.486 320.941,925.165 321.501,938.103 322.06,932.685 322.619,946.951 323.178,943.05 323.738,938.146 324.297,934.687 324.856,927.715 325.415,908.098 325.975,938.59 326.534,947.359 327.093,957.82 327.652,934.405 328.212,932.737 328.771,943.964 329.33,923.572 329.889,956.503 330.449,951.282 331.008,929.89 331.567,890.627 332.126,888.995 332.686,887.877 333.245,922.63 333.804,902.927 334.363,881.876 334.923,863.26 335.482,877.154 336.041,876.556 336.6,859.934 337.16,895.428 337.719,907.475 338.278,922.085 338.837,916.857 339.397,932.13 339.956,912.6 340.515,879.401 341.074,841.572 341.634,844.153 342.193,844.982 342.752,845.091 343.311,846.239 343.871,847.002 344.43,863.874 344.989,860.995 345.548,874.349 346.108,904.934 346.667,883.028 347.226,879.768 347.785,891.879 348.345,891.557 348.904,889.989 349.463,904.854 350.022,869.665 350.582,848.541 351.141,867.207 351.7,845.392 352.259,846.066 352.819,859.966 353.378,856.4 353.937,870.582 354.496,884.282 355.056,852.042 355.615,849.654 356.174,877.813 356.733,856.626 357.293,835.925 357.852,821.722 358.411,806.718 358.97,825.088 359.53,793.852 360.089,812.901 360.648,830.653 361.207,880.816 361.767,894.014 362.326,888.947 362.885,885.234 363.444,885.28 364.004,869.067 364.563,867.057 365.122,845.854 365.681,861.225 366.241,908.075 366.8,872.753 367.359,869.459 367.918,899.127 368.478,913.904 369.037,876.322 369.596,869.51 370.155,865.448 370.715,863.648 371.274,812.077 371.833,796.576 372.392,813.277 372.952,830.697 373.511,843.607 374.07,842.715 374.629,841.587 375.189,839.981 375.748,853.842 376.307,852.428 376.866,864.564 377.426,859.009 377.985,806.352 378.544,824.549 379.103,820.409 379.663,821.433 380.222,822.037 380.781,823.519 381.34,837.733 381.9,804.567 382.459,836.882 383.018,833.523 383.577,863.098 384.137,889.932 384.696,906.603 385.255,918.771 385.814,915.752 386.374,942.895 386.933,935.721 387.492,860.598 388.051,904.801 388.611,885.628 389.17,893.512 389.729,886.681 390.288,880.176 390.848,875.663 391.407,857.545 391.966,855.061 392.525,871.52 393.085,879.623 393.644,874.922 394.203,870.608 394.762,881.632 395.322,911.196 395.881,874.833 396.44,855.32 396.999,833.59 397.559,848.145 398.118,843.458 398.677,838.974 399.236,867.246 399.796,858.101 400.355,833.965 400.914,858.955 401.473,855.407 402.033,848.872 402.592,830.658 403.151,844.595 403.71,840.639 404.27,836.647 404.829,835.441 405.388,849.67 405.947,847.12 406.507,856.811 407.066,884.639 407.625,842.881 408.184,852.159 408.744,908.148 409.303,918.765 409.862,927.831 410.421,907.156 410.981,950.233 411.54,971.176 412.099,974.785 412.658,948.009 413.218,957.012 413.777,899.032 414.336,824.209 414.895,835.594 415.455,815.237 416.014,824.483 416.573,836.362 417.132,812.574 417.692,793.088 418.251,756.93 418.81,774.095 419.369,738.77 419.929,743.299 420.488,791.184 421.047,809.199 421.606,856.24 422.166,817.11 422.725,815.331 423.284,844.104 423.843,839.024 424.403,818.875 424.962,832.479 425.521,828.695 426.08,824.699 426.64,807.951 427.199,805.382 427.758,799.865 428.318,782.705 428.877,778.808 429.436,809.325 429.995,771.251 430.555,771.263 431.114,769.506 431.673,802.493 432.232,800.014 432.792,799.947 433.351,828.463 433.91,810.667 434.469,804.911 435.029,801.1 435.588,817.786 436.147,797.804 436.706,812.824 437.266,811.804 437.825,826.361 438.384,772.48 438.943,739.276 439.503,723.927 440.062,691.433 440.621,691.031 441.18,728.927 441.74,730.443 442.299,748.959 442.858,746.978 443.417,732.929 443.977,751.384 444.536,738.048 445.095,705.496 445.654,742.742 446.214,792.53 446.773,793.645 447.332,775.327 447.891,789.451 448.451,786.034 449.01,782.885 449.569,782.963 450.128,782.649 450.688,796.262 451.247,798.02 451.806,828.638 452.365,810.68 452.925,793.255 453.484,826.575 454.043,837.732 454.602,815.461 455.162,828.862 455.721,806.792 456.28,806.796 456.839,786.814 457.399,768.692 457.958,751.554 458.517,732.114 459.076,768.269 459.636,770.134 460.195,771.041 460.754,752.494 461.313,737.567 461.873,740.632 462.432,738.428 462.991,743.456 463.55,745.768 464.11,777.579 464.669,826.051 465.228,837.087 465.787,831.141 466.347,821.528 466.906,850.773 467.465,811.404 468.024,803.716 468.584,785.505 469.143,765.617 469.702,748.47 470.261,777.107 470.821,771.605 471.38,752.133 471.939,766.498 472.498,766.592 473.058,748.427 473.617,748.788 474.176,731.824 474.735,747.734 475.295,729.163 475.854,727.241 476.413,730.866 476.972,748.05 477.532,747.091 478.091,732.149 478.65,748.024 479.209,748.955 479.769,767.043 480.328,751.098 480.887,749.649 481.446,781.671 482.006,846.708 482.565,828.354 483.124,807.515 483.683,820.949 484.243,781.311 484.802,776.591 485.361,772.241 485.92,770.87 486.48,769.896 487.039,770.621 487.598,748.667 488.157,743.784 488.717,738.629 489.276,736.543 489.835,736.827 490.394,736.955 490.954,671.158 491.513,706.107 492.072,724.782 492.631,708.15 493.191,705.993 493.75,689.232 494.309,691.069 494.868,724.1 495.428,723.816 495.987,711.225 496.546,696.815 497.105,695.596 497.665,695.408 498.224,696.716 498.783,681.939 499.342,637.634 499.902,692.729 500.461,714.277 501.02,714.08 501.579,746.607 502.139,745.535 502.698,727.927 503.257,731.638 503.816,732.125 504.376,718.806 504.935,722.711 505.494,723.621 506.053,726.856 506.613,679.63 507.172,700.909 507.731,720.057 508.29,735.575 508.85,736.615 509.409,756.225 509.968,760.61 510.527,742.291 511.087,740.059 511.646,756.702 512.205,752.528 512.764,753.089 513.324,754.997 513.883,736.237 514.442,749.016 515.001,753.926 515.561,753.359 516.12,786.241 516.679,800.447 517.238,779.638 517.798,759.423 518.357,743.396 518.916,727.577 519.475,744.001 520.035,742.906 520.594,757.618 521.153,771.453 521.712,783.038 522.272,748.781 522.831,747.298 523.39,741.791 523.949,741.425 524.509,738.536 525.068,703.035 525.627,714.277 526.186,712.758 526.746,664.626 527.305,654.143 527.864,658.023 528.423,695.312 528.983,680.185 529.542,685.944 530.101,686.587 530.66,692.124 531.22,662.858 531.779,681.631 532.338,668.268 532.897,656.958 533.457,692.924 534.016,679.073 534.575,682.684 535.134,652.193 535.694,657.229 536.253,645.805 536.812,636.222 537.371,626.603 537.931,613.769 538.49,607.498 539.049,631.323 539.608,635.563 540.168,656.43 540.727,659.464 541.286,697.964 541.845,715.99 542.405,731.785 542.964,730.908 543.523,764.908 544.082,763.569 544.642,761.322 545.201,710.85 545.76,693.744 546.319,712.228 546.879,711.01 547.438,708.952 547.997,695.453 548.556,681.667 549.116,697.998 549.675,663.823 550.234,700.716 550.793,687.193 551.353,686.535 551.912,704.617 552.471,689.853 553.031,706.911 553.59,722.648 554.149,707.282 554.708,727.104 555.268,726.001 555.827,725.849 556.386,737.35 556.945,752.695 557.505,750.674 558.064,768.39 558.623,765.244 559.182,745.221 559.742,775.886 560.301,726.098 560.86,726.056 561.419,708.96 561.979,724.192 562.538,708.046 563.097,709.699 563.656,710.404 564.216,724.253 564.775,739.657 565.334,788.01 565.893,801.81 566.453,849.585 567.012,840.414 567.571,851.344 568.13,858.031 568.69,866.845 569.249,810.452 569.808,821.054 570.367,797.82 570.927,793.075 571.486,806.81 572.045,801.161 572.604,794.679 573.164,792.28 573.723,784.634 574.282,782.979 574.841,804.492 575.401,768.283 575.96,731.701 576.519,728.911 577.078,682.832 577.638,681.523 578.197,685.212 578.756,669.048 579.315,669.462 579.875,704.149 580.434,703.025 580.993,716.465 581.552,748.936 582.112,729.711 582.671,728.31 583.23,694.611 583.789,700.212 584.349,669.585 584.908,687.28 585.467,672.495 586.026,704.298 586.586,704.123 587.145,721.664 587.704,751.333 588.263,715.061 588.823,717.829 589.382,750.496 589.941,747.856 590.5,746.33 591.06,746.027 591.619,747.026 592.178,744.511 592.737,760.928 593.297,757.785 593.856,735.219 594.415,748.711 594.974,763.135 595.534,794.566 596.093,790.227 596.652,767.302 597.211,764.148 597.771,777.951 598.33,758.663 598.889,738.566 599.448,751.362 600.008,761.04 600.567,744.791 601.126,742.124 601.685,740.16 602.245,756.741 602.804,706.756 603.363,740.835 603.922,757.341 604.482,755.005 605.041,734.968 605.6,747.82 606.159,773.665 606.719,770.055 607.278,784.965 607.837,762.847 608.396,745.023 608.956,742.396 609.515,737.629 610.074,753.093 610.633,765.454 611.193,762.931 611.752,729.433 612.311,758.992 612.87,736.75 613.43,750.706 613.989,764.546 614.548,775.894 615.107,772.938 615.667,770.283 616.226,717.152 616.785,699.756 617.344,716.646 617.904,699.875 618.463,703.147 619.022,705.16 619.581,694.784 620.141,678.765 620.7,664.884 621.259,668.035 621.818,621.799 622.378,626.133 622.937,615.94 623.496,618.51 624.055,589.735 624.615,528.501 625.174,535.911 625.733,544.24 626.292,549.168 626.852,543.244 627.411,581.653 627.97,555.622 628.529,560.777 629.089,567.747 629.648,558.528 630.207,566.316 630.766,591.553 631.326,601.206 631.885,625.101 632.444,628.681 633.003,633.463 633.563,634.284 634.122,624.057 634.681,643.625 635.24,626.919 635.8,631.333 636.359,637.146 636.918,642.142 637.477,643.224 638.037,629.653 638.596,649.276 639.155,670.968 639.714,671.54 640.274,674.507 640.833,660.359 641.392,647.962 641.951,619.042 642.511,655.206 643.07,652.898 643.629,640.806 644.188,677.158 644.748,648.668 645.307,667.94 645.866,671.108 646.425,659.709 646.985,661.799 647.544,664.624 648.103,666.404 648.662,653.506 649.222,690.922 649.781,692.49 650.34,695.68 650.899,713.408 651.459,713.874 652.018,727.832 652.577,738.825 653.136,767.412 653.696,782.244 654.255,778.07 654.814,822.915 655.373,815.931 655.933,779.273 656.492,758.869 657.051,770.135 657.61,748.759 658.17,748.434 658.729,761.983 659.288,728.179 659.847,697.502 660.407,682.069 660.966,714.516 661.525,715.851 662.084,714.925 662.644,713.238 663.203,698.807 663.762,696.244 664.321,695.076 664.881,692.515 665.44,690.273 665.999,670.639 666.558,619.868 667.118,608.028 667.677,594.04 668.236,598.605 668.795,604.659 669.355,638.657 669.914,644.264 670.473,649.174 671.032,633.854 671.592,622.559 672.151,630.075 672.71,636.304 673.269,639.216 673.829,691.27 674.388,708.326 674.947,709.269 675.506,708.588 676.066,741.213 676.625,721.754 677.184,722.179 677.743,750.771 678.303,728.89 678.862,747.183 679.421,776.607 679.981,754.832 680.54,766.774 681.099,761.77 681.658,743.44 682.218,739.029 682.777,734.593 683.336,731.248 683.895,747.788 684.455,746.023 685.014,728.327 685.573,728.615 686.132,742.542 686.692,758.593 687.251,738.947 687.81,734.656 688.369,752.151 688.929,769.199 689.488,766.133 690.047,761.67 690.606,777.988 691.166,740.273 691.725,756.032 692.284,750.932 692.843,778.146 693.403,772.462 693.962,781.857 694.521,742.619 695.08,720.096 695.64,731.547 696.199,728.214 696.758,708.23 697.317,705.031 697.877,737.373 698.436,717.773 698.995,766.171 699.554,745.897 700.114,742.204 700.673,742.199 701.232,708.859 701.791,705.707 702.351,668.915 702.91,670.924 703.469,673.51 704.028,707.145 704.588,707.007 705.147,707.808 705.706,724.594 706.265,738.552 706.825,720.31 707.384,753.013 707.943,749.147 708.502,743.444 709.062,707.913 709.621,704.349 710.18,703.83 710.739,734.141 711.299,747.901 711.858,727.155 712.417,725.616 712.976,674.294 713.536,689.575 714.095,658.58 714.654,674.334 715.213,659.862 715.773,629.303 716.332,648.521 716.891,634.964 717.45,638.979 718.01,673.191 718.569,655.893 719.128,658.766 719.687,627.774 720.247,650.403 720.806,650.318 721.365,622.455 721.924,577.233 722.484,568.838 723.043,569.473 723.602,558.937 724.161,583.521 724.721,571.731 725.28,593.856 725.839,584.887 726.398,578.451 726.958,602.709 727.517,606.141 728.076,593.55 728.635,567.897 729.195,543.49 729.754,568.497 730.313,605.436 730.872,629.796 731.432,599.192 731.991,603.843 732.55,639.977 733.109,625.266 733.669,661.838 734.228,662.739 734.787,662.104 735.346,663.596 735.906,648.867 736.465,634.818 737.024,622.229 737.583,609.689 738.143,613.02 738.702,651.048 739.261,653.109 739.82,654.161 740.38,641.301 740.939,660.572 741.498,712.506 742.057,711.544 742.617,728.844 743.176,739.948 743.735,721.632 744.294,702.59 744.854,720.727 745.413,721.409 745.972,735.138 746.531,705.038 747.091,688.573 747.65,686.866 748.209,687.768 748.768,752.972 749.328,747.466 749.887,745.112 750.446,711.431 751.005,730.423 751.565,711.679 752.124,712.859 752.683,728.11 753.242,727.07 753.802,675.431 754.361,660.08 754.92,676.125 755.479,676.347 756.039,656.632 756.598,673.116 757.157,641.973 757.716,647.106 758.276,665.366 758.835,684.122 759.394,667.446 759.953,702.506 760.513,682.781 761.072,649.173 761.631,635.68 762.19,611.072 762.75,630.009 763.309,632.644 763.868,653.218 764.427,654.128 764.987,640.955 765.546,660.708 766.105,648.177 766.664,635.094 767.224,641.09 767.783,612.158 768.342,614.792 768.901,619.084 769.461,658.259 770.02,662.246 770.579,664.562 771.138,667.236 771.698,666.837 772.257,701.36 772.816,650.906 773.375,618.414 773.935,622.281 774.494,659.616 775.053,694.179 775.612,708.502 776.172,709.672 776.731,739.256 777.29,780.928 777.849,811.973 778.409,772.355 778.968,812.555 779.527,804.124 780.086,797.206 780.646,812.212 781.205,790.783 781.764,788.601 782.323,765.63 782.883,728.48 783.442,759.814 784.001,753.26 784.56,780.055 785.12,791.639 785.679,787.382 786.238,846.288 786.797,820.705 787.357,783.092 787.916,759.181 788.475,739.141 789.034,699.876 789.594,700.812 790.153,699.454 790.712,695.927 791.271,665.181 791.831,683.612 792.39,716.257 792.949,728.559 793.508,710.226 794.068,676.899 794.627,645.355 795.186,695.039 795.745,660.83 796.305,650.1 796.864,684.121 797.423,670.49 797.982,674.286 798.542,689.611 799.101,688.552 799.66,674.18 800.219,724.428 800.779,673.49 801.338,673.109 801.897,678.962 802.456,695.638 803.016,676.668 803.575,695.916 804.134,696.84 804.693,713.785 805.253,709.741 805.812,741.153 806.371,743.231 806.931,755.079 807.49,747.699 808.049,681.533 808.608,684.229 809.168,684.244 809.727,684.516 810.286,700.631 810.845,715.339 811.405,731.933 811.964,694.048 812.523,710.444 813.082,708.64 813.642,675.282 814.201,677.829 814.76,696.69 815.319,710.049 815.879,692.435 816.438,673.43 816.997,706.946 817.556,720.546 818.116,717.586 818.675,715.98 819.234,708.167 819.793,690.999 820.353,691.717 820.912,693.668 821.471,728.609 822.03,723.881 822.59,720.683 823.149,722.799 823.708,755.053 824.267,748.432 824.827,759.131 825.386,769.869 825.945,749.93 826.504,730.401 827.064,744.194 827.623,754.416 828.182,731.148 828.741,742.836 829.301,754.759 829.86,767.117 830.419,757.391 830.978,735.628 831.538,718.52 832.097,651.83 832.656,635.408 833.215,623.949 833.775,594.861 834.334,614.253 834.893,605.574 835.452,627.65 836.012,646.138 836.571,634.312 837.13,652.799 837.689,671.017 838.249,639.399 838.808,639.502 839.367,640.17 839.926,645.593 840.486,633.116 841.045,638.93 841.604,674.401 842.163,657.7 842.723,660.997 843.282,661.996 843.841,661.54 844.4,658.607 844.96,671.876 845.519,675.846 846.078,726.946 846.637,722.36 847.197,721.878 847.756,735.94 848.315,738.324 848.874,766.682 849.434,776.63 849.993,773.838 850.552,771.517 851.111,781.316 851.671,778.604 852.23,838.629 852.789,846.726 853.348,823.872 853.908,833.016 854.467,841.825 855.026,801.119 855.585,775.607 856.145,786.74 856.704,768.491 857.263,784.264 857.822,780.463 858.382,794.794 858.941,808.722 859.5,785.611 860.059,777.124 860.619,802.274 861.178,767.928 861.737,743.373 862.296,709.254 862.856,726.18 863.415,722.356 863.974,699.39 864.533,730.905 865.093,760.644 865.652,771.736 866.211,735.228 866.77,718.083 867.33,715.459 867.889,731.906 868.448,711.076 869.007,692.124 869.567,673.208 870.126,673.011 870.685,674.493 871.244,687.513 871.804,670.857 872.363,702.4 872.922,699.716 873.481,685.555 874.041,685.855 874.6,669.385 875.159,654.48 875.718,651.835 876.278,637.795 876.837,654.297 877.396,655.813 877.955,691.831 878.515,690.403 879.074,706.298 879.633,706.917 880.192,687.07 880.752,670.563 881.311,669.657 881.87,704.8 882.429,737.93 882.989,734.99 883.548,749.844 884.107,731.007 884.666,694.766 885.226,726.51 885.785,708.427 886.344,722.206 886.903,724.531 887.463,706.342 888.022,706.278 888.581,688.357 889.14,673.626 889.7,639.629 890.259,640.946 890.818,610.363 891.377,599.563 891.937,636.467 892.496,624.544 893.055,644.14 893.614,661.871 894.174,679.801 894.733,685.534 895.292,670.054 895.851,637.325 896.411,619.31 896.97,604.857 897.529,591.487 898.088,613.516 898.648,597.71 899.207,588.09 899.766,610.45 900.325,613.884 900.885,630.944 901.444,583.511 902.003,590.289 902.562,578.254 903.122,586.589 903.681,559.382 904.24,615.279 904.799,621.125 905.359,625.895 905.918,647.144 906.477,645.551 907.036,646.789 907.596,696.369 908.155,707.138 908.714,702.812 909.273,735.897 909.833,718.774 910.392,652.817 910.951,625.139 911.51,614.233 912.07,618.386 912.629,623.505 913.188,655.828 913.747,641.321 914.307,626.19 914.866,634.287 915.425,634.084 915.984,604.12 916.544,607.763 917.103,593.796 917.662,598.84 918.221,569.392 918.781,591.217 919.34,584.715 919.899,641.784 920.458,677.733 921.018,692.861 921.577,693.718 922.136,708.376 922.695,706.921 923.255,686.812 923.814,671.399 924.373,656.285 924.932,641.852 925.492,692.312 926.051,710.051 926.61,717.02 927.169,747.546 927.729,807.985 928.288,800.483 928.847,808.829 929.406,724.1 929.966,703.725 930.525,734.642 931.084,713.429 931.644,746.428 932.203,757.012 932.762,751.603 933.321,731.447 933.881,729.456 934.44,742.943 934.999,708.091 935.558,704.698 936.118,707.627 936.677,741.554 937.236,739.01 937.795,717.419 938.355,712.275 938.914,690.452 939.473,740.565 940.032,784.721 940.592,760.622 941.151,741.465 941.71,749.965 942.269,749.625 942.829,712.666 943.388,695.94 943.947,693.559 944.506,658.717 945.066,642.893 945.625,646.896 946.184,648.941 946.743,634.259 947.303,652.224 947.862,655.067 948.421,658.627 948.98,692.888 949.54,666.058 950.099,700.781 950.658,701.504 951.217,733.548 951.777,699.193 952.336,711.676 952.895,725.695 953.454,741.356 954.014,738.697 954.573,703.798 955.132,704.39 955.691,685.802 956.251,725.878 956.81,724.461 957.369,736.919 957.928,718.971 958.488,667.916 959.047,685.233 959.606,684.783 960.165,700.536 960.725,717.103 961.284,715.938 961.843,733.71 962.402,745.021 962.962,706.529 963.521,706.29 964.08,691.012 964.639,725.07 965.199,706.312 965.758,724.132 966.317,689.145 966.876,607.658 967.436,593.526 967.995,612.124 968.554,616.76 969.113,640.488 969.673,660.352 970.232,662.844 970.791,695.798 971.35,725.001 971.91,707.348 972.469,707.408 973.028,706.077 973.587,704.822 974.147,720.208 974.706,749.66 975.265,762.202 975.824,723.909 976.384,737.482 976.943,704.149 977.502,702.213 978.061,670.918 978.621,667.918 979.18,666.285 979.739,622.423 980.298,627.066 980.858,629.753 981.417,602.868 981.976,603.75 982.535,608.777 983.095,609.906 983.654,614.647 984.213,619.979 984.772,608.226 985.332,642.294 985.891,661.099 986.45,666.401 987.009,651.627 987.569,654.33 988.128,657.213 988.687,677.317 989.246,615.321 989.806,637.945 990.365,624.378 990.924,597.061 991.483,586.127 992.043,578.318 992.602,616.256 993.161,618.816 993.72,604.092 994.28,638.68 994.839,635.79 995.398,670.155 995.957,640.024 996.517,628.291 997.076,615.046 997.635,586.865 998.194,595.712 998.754,633.101 999.313,651.347 999.872,652.867 1000.43,655.373 1000.99,687.489 1001.55,701.419 1002.11,682.499 1002.67,711.544 1003.23,676.59 1003.79,698.24 1004.35,712.36 1004.91,680.744 1005.46,684.016 1006.02,683.642 1006.58,703.591 1007.14,720.586 1007.7,718.049 1008.26,703.145 1008.82,703.771 1009.38,686.715 1009.94,717.795 1010.5,731.352 1011.06,776.933 1011.62,754.597 1012.18,751.013 1012.73,749.09 1013.29,711.391 1013.85,659.971 1014.41,646.076 1014.97,649.178 1015.53,652.523 1016.09,653.306 1016.65,619.307 1017.21,622.035 1017.77,638.246 1018.33,604.504 1018.89,608.189 1019.45,615.558 1020.01,620.405 1020.56,624.683 1021.12,629.136 1021.68,616.396 1022.24,634.84 1022.8,619.477 1023.36,653.49 1023.92,639.301 1024.48,641.023 1025.04,633.296 1025.6,634.082 1026.16,623.329 1026.72,644.584 1027.28,616.997 1027.83,638.947 1028.39,658.267 1028.95,645.229 1029.51,667.194 1030.07,649.781 1030.63,683.556 1031.19,717.598 1031.75,714.673 1032.31,728.075 1032.87,740.522 1033.43,706.994 1033.99,739.291 1034.55,724.097 1035.1,703.735 1035.66,687.796 1036.22,657.054 1036.78,641.499 1037.34,629.533 1037.9,667.605 1038.46,700.979 1039.02,701.07 1039.58,732.594 1040.14,680.851 1040.7,664.156 1041.26,682.237 1041.82,713.37 1042.38,745.332 1042.93,739.904 1043.49,738.073 1044.05,755.923 1044.61,753.085 1045.17,733.461 1045.73,729.456 1046.29,715.618 1046.85,696.966 1047.41,759.314 1047.97,755.598 1048.53,767.838 1049.09,728.098 1049.65,743.021 1050.2,691.526 1050.76,705.146 1051.32,718.126 1051.88,716.999 1052.44,715.323 1053,645.788 1053.56,664.014 1054.12,667.808 1054.68,635.217 1055.24,634.033 1055.8,650.574 1056.36,696.582 1056.92,682.569 1057.48,681.994 1058.03,649.097 1058.59,682.701 1059.15,650.106 1059.71,634.771 1060.27,669.836 1060.83,636.943 1061.39,670.237 1061.95,669.549 1062.51,668.019 1063.07,667.785 1063.63,685.267 1064.19,718.084 1064.75,701.324 1065.3,681.666 1065.86,666.92 1066.42,665.977 1066.98,681.365 1067.54,682.514 1068.1,664.286 1068.66,683.61 1069.22,682.495 1069.78,698.913 1070.34,694.852 1070.9,729.262 1071.46,729.985 1072.02,745.025 1072.57,723.389 1073.13,705.889 1073.69,705.448 1074.25,704.044 1074.81,670.476 1075.37,703.478 1075.93,703.737 1076.49,737.974 1077.05,735.079 1077.61,731.629 1078.17,727.969 1078.73,708.181 1079.29,690.613 1079.85,661.136 1080.4,628.425 1080.96,629.259 1081.52,634.621 1082.08,650.827 1082.64,619.881 1083.2,672.359 1083.76,671.454 1084.32,685.247 1084.88,683.558 1085.44,716.402 1086,683.19 1086.56,662.66 1087.12,663.892 1087.67,667.2 1088.23,716.887 1088.79,731.525 1089.35,749.055 1089.91,745.934 1090.47,712.712 1091.03,710.956 1091.59,690.911 1092.15,706.029 1092.71,704.772 1093.27,718.133 1093.83,733.535 1094.39,730.994 1094.94,762.705 1095.5,775.022 1096.06,751.651 1096.62,745.927 1097.18,740.466 1097.74,751.909 1098.3,732.221 1098.86,747.637 1099.42,744.148 1099.98,756.348 1100.54,786.873 1101.1,764.241 1101.66,758.804 1102.22,734.822 1102.77,733.725 1103.33,731.766 1103.89,712.132 1104.45,693.637 1105.01,692.789 1105.57,705.934 1106.13,752.851 1106.69,763.377 1107.25,743.838 1107.81,738.378 1108.37,766.852 1108.93,715.243 1109.49,682.907 1110.04,698.193 1110.6,663.183 1111.16,665.643 1111.72,703.607 1112.28,714.987 1112.84,731.048 1113.4,728.442 1113.96,693.864 1114.52,679.743 1115.08,696.778 1115.64,682.72 1116.2,682.16 1116.76,700.003 1117.31,715.797 1117.87,701.583 1118.43,700.733 1118.99,713.379 1119.55,714.138 1120.11,715.79 1120.67,730.626 1121.23,733.726 1121.79,748.047 1122.35,746.371 1122.91,756.467 1123.47,730.975 1124.03,713.517 1124.59,695.958 1125.14,680.065 1125.7,663.216 1126.26,665.036 1126.82,682.812 1127.38,684.223 1127.94,683.375 1128.5,669.52 1129.06,622.435 1129.62,659.031 1130.18,659.162 1130.74,694.812 1131.3,657.738 1131.86,613.583 1132.41,619.443 1132.97,639.013 1133.53,642.269 1134.09,627.423 1134.65,627.883 1135.21,632.45 1135.77,634.857 1136.33,649.828 1136.89,667.288 1137.45,672.215 1138.01,659.194 1138.57,595.051 1139.13,615.79 1139.68,636.02 1140.24,618.553 1140.8,637.993 1141.36,642.031 1141.92,641.664 1142.48,644.549 1143.04,645.42 1143.6,668.197 1144.16,670.935 1144.72,654.972 1145.28,657.081 1145.84,594.098 1146.4,648.125 1146.96,682.886 1147.51,696.603 1148.07,710.875 1148.63,739.771 1149.19,767.007 1149.75,777.021 1150.31,724.362 1150.87,743.613 1151.43,723.106 1151.99,707.83 1152.55,691.053 1153.11,674.625 1153.67,679.022 1154.23,695.429 1154.78,724.7 1155.34,723.079 1155.9,754.448 1156.46,736.553 1157.02,750.568 1157.58,729.458 1158.14,713.572 1158.7,711.17 1159.26,674.91 1159.82,676.493 1160.38,694.287 1160.94,673.801 1161.5,655.635 1162.05,639.136 1162.61,623.638 1163.17,609.159 1163.73,630.637 1164.29,620.579 1164.85,619.297 1165.41,656.061 1165.97,622.94 1166.53,641.432 1167.09,712.655 1167.65,711.22 1168.21,727.608 1168.77,706.957 1169.33,740.096 1169.88,738.924 1170.44,717.368 1171,733.968 1171.56,716.096 1172.12,733.432 1172.68,778.926 1173.24,755.522 1173.8,733.62 1174.36,733.908 1174.92,715.642 1175.48,713.568 1176.04,662.149 1176.6,678.486 1177.15,663.854 1177.71,683.172 1178.27,665.129 1178.83,666.472 1179.39,634.399 1179.95,635.053 1180.51,687.528 1181.07,701.116 1181.63,733.581 1182.19,748.321 1182.75,731.09 1183.31,759.927 1183.87,754.548 1184.43,751.128 1184.98,720.285 1185.54,718.822 1186.1,733.005 1186.66,711.942 1187.22,692.922 1187.78,693.277 1188.34,726.133 1188.9,784.087 1189.46,794.917 1190.02,757.541 1190.58,769.88 1191.14,780.369 1191.7,776.395 1192.25,789.547 1192.81,782.722 1193.37,762.81 1193.93,759.097 1194.49,789.492 1195.05,767.623 1195.61,746.427 1196.17,726.858 1196.73,726.086 1197.29,711.852 1197.85,695.171 1198.41,632 1198.97,617.352 1199.52,625.547 1200.08,661.293 1200.64,648.111 1201.2,649.823 1201.76,653.108 1202.32,655.525 1202.88,641.549 1203.44,642.652 1204,627.763 1204.56,663.041 1205.12,680.871 1205.68,683.692 1206.24,685.734 1206.8,686.228 1207.35,689.186 1207.91,674.624 1208.47,630.291 1209.03,652.796 1209.59,668.414 1210.15,668.097 1210.71,669.009 1211.27,688.187 1211.83,685.303 1212.39,688.172 1212.95,690.485 1213.51,689.804 1214.07,688.403 1214.62,686.417 1215.18,684.829 1215.74,700.119 1216.3,696.886 1216.86,694.112 1217.42,709.067 1217.98,727.519 1218.54,756.73 1219.1,770.055 1219.66,752.96 1220.22,780.643 1220.78,792.691 1221.34,769.855 1221.89,737.232 1222.45,766.322 1223.01,777.133 1223.57,753.35 1224.13,731.931 1224.69,728.647 1225.25,707.994 1225.81,675.498 1226.37,675.004 1226.93,648.869 1227.49,633.44 1228.05,633.662 1228.61,665.754 1229.17,651.704 1229.72,634.758 1230.28,636.947 1230.84,659.233 1231.4,648.471 1231.96,699.845 1232.52,697.485 1233.08,711.503 1233.64,660.627 1234.2,661.902 1234.76,665.454 1235.32,699.475 1235.88,680.872 1236.44,678.834 1236.99,661.329 1237.55,665.51 1238.11,650.212 1238.67,700.209 1239.23,717.181 1239.79,715.939 1240.35,667.706 1240.91,703.844 1241.47,718.419 1242.03,730.102 1242.59,777.364 1243.15,722.12 1243.71,703.392 1244.26,735.204 1244.82,698.858 1245.38,667.262 1245.94,666.174 1246.5,666.721 1247.06,633.217 1247.62,636.03 1248.18,653.36 1248.74,669.621 1249.3,638.654 1249.86,640.008 1250.42,611.035 1250.98,610.981 1251.54,616.32 1252.09,570.776 1252.65,607.61 1253.21,628.149 1253.77,645.505 1254.33,683.538 1254.89,684.028 1255.45,700.747 1256.01,717.07 1256.57,665.661 1257.13,634.664 1257.69,625.559 1258.25,630.627 1258.81,600.858 1259.36,588.501 1259.92,593.327 1260.48,616.376 1261.04,604.773 1261.6,576.894 1262.16,579.626 1262.72,583.753 1263.28,557.772 1263.84,549.737 1264.4,537.759 1264.96,560.358 1265.52,565.626 1266.08,573.466 1266.63,562.914 1267.19,586.12 1267.75,621.207 1268.31,671.629 1268.87,677.664 1269.43,710.334 1269.99,711.454 1270.55,712.707 1271.11,716.464 1271.67,730.144 1272.23,743.75 1272.79,742.986 1273.35,741.354 1273.91,767.896 1274.46,749.372 1275.02,760.422 1275.58,755.809 1276.14,782.833 1276.7,764.85 1277.26,778.275 1277.82,772.766 1278.38,748.94 1278.94,743.706 1279.5,743.142 1280.06,725.441 1280.62,705.806 1281.18,732.403 1281.73,717.616 1282.29,735.721 1282.85,750.809 1283.41,729.341 1283.97,740.8 1284.53,690.538 1285.09,673.507 1285.65,669.69 1286.21,669.21 1286.77,655.818 1287.33,638.544 1287.89,640.036 1288.45,638.809 1289,656.293 1289.56,687.773 1290.12,639.671 1290.68,611.405 1291.24,632.863 1291.8,620.782 1292.36,657.003 1292.92,658.505 1293.48,674.524 1294.04,656.483 1294.6,656.588 1295.16,692.988 1295.72,660.255 1296.28,628.568 1296.83,614.569 1297.39,620.979 1297.95,624.091 1298.51,607.629 1299.07,608.978 1299.63,614.805 1300.19,631.85 1300.75,616.523 1301.31,621.041 1301.87,627.261 1302.43,628.823 1302.99,632.275 1303.55,650.709 1304.1,713.053 1304.66,725.725 1305.22,740.24 1305.78,754.38 1306.34,719.933 1306.9,718.353 1307.46,731.652 1308.02,731.667 1308.58,727.446 1309.14,710.167 1309.7,724.238 1310.26,741.864 1310.82,819.804 1311.38,796.737 1311.93,789.856 1312.49,784.907 1313.05,780.986 1313.61,738.734 1314.17,719.376 1314.73,702.873 1315.29,700.116 1315.85,680.433 1316.41,686.884 1316.97,670.132 1317.53,673.129 1318.09,689.425 1318.65,673.59 1319.2,674.864 1319.76,712.65 1320.32,725.863 1320.88,705.634 1321.44,720.732 1322,751.75 1322.56,729.884 1323.12,729.993 1323.68,723.417 1324.24,752.84 1324.8,717.216 1325.36,716.08 1325.92,743.461 1326.47,758.057 1327.03,756.904 1327.59,735.869 1328.15,684.264 1328.71,667.981 1329.27,664.616 1329.83,666.435 1330.39,648.602 1330.95,647.529 1331.51,619.481 1332.07,588.863 1332.63,612.383 1333.19,630.71 1333.75,620.35 1334.3,609.78 1334.86,630.987 1335.42,631.72 1335.98,636.324 1336.54,637.583 1337.1,642.019 1337.66,643.759 1338.22,679.538 1338.78,679.703 1339.34,678.231 1339.9,710.045 1340.46,708.275 1341.02,711.662 1341.57,756.591 1342.13,753.013 1342.69,783.324 1343.25,790.937 1343.81,752.641 1344.37,715.943 1344.93,714.025 1345.49,714.838 1346.05,664.296 1346.61,647.299 1347.17,667.712 1347.73,683.814 1348.29,700.607 1348.84,698.473 1349.4,681.961 1349.96,663.243 1350.52,683.257 1351.08,683.329 1351.64,682.829 1352.2,696.985 1352.76,679.237 1353.32,726.597 1353.88,722.717 1354.44,707.568 1355,706.21 1355.56,703.945 1356.12,735.563 1356.67,750.623 1357.23,763.252 1357.79,761.524 1358.35,753.488 1358.91,749.519 1359.47,683.584 1360.03,681.472 1360.59,716.141 1361.15,731.124 1361.71,728.206 1362.27,726.676 1362.83,726.056 1363.39,756.562 1363.94,754.77 1364.5,768.271 1365.06,747.029 1365.62,711.075 1366.18,697.172 1366.74,679.361 1367.3,694.136 1367.86,680.618 1368.42,728.759 1368.98,694.061 1369.54,698.185 1370.1,716.053 1370.66,698.925 1371.21,665.829 1371.77,667.52 1372.33,590.115 1372.89,581.93 1373.45,586.336 1374.01,577.713 1374.57,584.211 1375.13,592.345 1375.69,665.568 1376.25,631.917 1376.81,601.592 1377.37,620.59 1377.93,594.966 1378.49,582.71 1379.04,574.529 1379.6,628.963 1380.16,648.647 1380.72,649.249 1381.28,635.548 1381.84,637.039 1382.4,652.121 1382.96,655.4 1383.52,641.155 1384.08,644.039 1384.64,664.427 1385.2,649.889 1385.76,651.993 1386.31,653.955 1386.87,655.164 1387.43,727.068 1387.99,712.83 1388.55,694.227 1389.11,742.07 1389.67,703.698 1390.23,719.417 1390.79,749.877 1391.35,762.235 1391.91,743.448 1392.47,755.347 1393.03,750.149 1393.58,730.091 1394.14,728.408 1394.7,728.919 1395.26,726.849 1395.82,742.568 1396.38,736.668 1396.94,718.666 1397.5,766.562 1398.06,761.479 1398.62,773.769 1399.18,765.547 1399.74,712.722 1400.3,711.207 1400.86,691.781 1401.41,689.205 1401.97,673.307 1402.53,687.96 1403.09,686.82 1403.65,687.588 1404.21,688.727 1404.77,720.291 1405.33,717.732 1405.89,733.518 1406.45,730.055 1407.01,738.584 1407.57,752.077 1408.13,766.039 1408.68,804.814 1409.24,779.956 1409.8,787.961 1410.36,765.417 1410.92,748.807 1411.48,749.816 1412.04,728.909 1412.6,725.388 1413.16,741.411 1413.72,723.158 1414.28,721.552 1414.84,717.642 1415.4,747.742 1415.95,747.557 1416.51,742.319 1417.07,724.432 1417.63,755.985 1418.19,802.377 1418.75,811.148 1419.31,824.519 1419.87,879.347 1420.43,870.903 1420.99,859.617 1421.55,881.749 1422.11,857.288 1422.67,798.08 1423.23,774.601 1423.78,753.785 1424.34,783.015 1424.9,743.227 1425.46,736.922 1426.02,697.412 1426.58,648.278 1427.14,666.755 1427.7,665.909 1428.26,632.209 1428.82,604.777 1429.38,643.95 1429.94,662.506 1430.5,662.606 1431.05,646.511 1431.61,629.129 1432.17,645.185 1432.73,643.86 1433.29,613.845 1433.85,619.746 1434.41,640.176 1434.97,622.218 1435.53,613.479 1436.09,649.753 1436.65,649.458 1437.21,651.834 1437.77,657.995 1438.33,656.944 1438.88,657.953 1439.44,627.357 1440,631.97 1440.56,652.592 1441.12,671.911 1441.68,622.152 1442.24,642.32 1442.8,625.658 1443.36,596.053 1443.92,582.923 1444.48,574.031 1445.04,595.137 1445.6,630.511 1446.15,617.45 1446.71,590.246 1447.27,565.82 1447.83,554.905 1448.39,591.248 1448.95,579.254 1449.51,584.465 1450.07,560.137 1450.63,618.734 1451.19,638.786 1451.75,611.357 1452.31,635.342 1452.87,621.333 1453.42,626.684 1453.98,644.878 1454.54,648.965 1455.1,668.816 1455.66,655.521 1456.22,592.434 1456.78,581.035 1457.34,582.824 1457.9,554.4 1458.46,578.116 1459.02,599.581 1459.58,584.901 1460.14,593.487 1460.7,628.543 1461.25,631.251 1461.81,730.775 1462.37,679.021 1462.93,679.233 1463.49,677.197 1464.05,663.28 1464.61,679.114 1465.17,662.215 1465.73,691.011 1466.29,705.642 1466.85,737.4 1467.41,719.878 1467.97,736.222 1468.52,717.266 1469.08,716.408 1469.64,695.711 1470.2,693.42 1470.76,689.666 1471.32,691.154 1471.88,691.715 1472.44,688.099 1473,670.703 1473.56,673.714 1474.12,646.431 1474.68,663.801 1475.24,648.819 1475.79,632.696 1476.35,627.761 1476.91,631.63 1477.47,636.886 1478.03,606.49 1478.59,629.596 1479.15,584.867 1479.71,622.76 1480.27,627.15 1480.83,633.602 1481.39,636.176 1481.95,587.54 1482.51,621.915 1483.07,625.3 1483.62,677.99 1484.18,642.716 1484.74,611.252 1485.3,614.107 1485.86,617.033 1486.42,621.692 1486.98,673.734 1487.54,641.529 1488.1,678.805 1488.66,681.627 1489.22,711.857 1489.78,710.752 1490.34,726.809 1490.89,710.284 1491.45,696.214 1492.01,712.73 1492.57,724.847 1493.13,740.785 1493.69,753.413 1494.25,733.84 1494.81,745.835 1495.37,726.12 1495.93,738.946 1496.49,751.565 1497.05,732.011 1497.61,729.117 1498.16,741.357 1498.72,770.635 1499.28,765.181 1499.84,761.519 1500.4,760.813 1500.96,739.359 1501.52,768.841 1502.08,795.756 1502.64,789.661 1503.2,804.378 1503.76,781.618 1504.32,742.484 1504.88,757.359 1505.44,707.17 1505.99,689.25 1506.55,655.101 1507.11,657.517 1507.67,645.098 1508.23,631.1 1508.79,585.788 1509.35,555.764 1509.91,595.014 1510.47,613.95 1511.03,631.093 1511.59,615.407 1512.15,636.092 1512.71,622.755 1513.26,594.656 1513.82,598.377 1514.38,621.716 1514.94,610.8 1515.5,565.414 1516.06,603.739 1516.62,608.134 1517.18,647.538 1517.74,663.762 1518.3,680.831 1518.86,683.32 1519.42,701.36 1519.98,702.648 1520.53,699.373 1521.09,699.624 1521.65,682.96 1522.21,714.841 1522.77,666.15 1523.33,666.033 1523.89,665.233 1524.45,680.566 1525.01,779.432 1525.57,740.12 1526.13,751.863 1526.69,714.447 1527.25,713.463 1527.81,731.962 1528.36,731.929 1528.92,746.188 1529.48,761.791 1530.04,741.648 1530.6,758.67 1531.16,723.776 1531.72,684.937 1532.28,682.778 1532.84,667.255 1533.4,652.14 1533.96,685.373 1534.52,684.565 1535.08,680.748 1535.63,698.786 1536.19,697.128 1536.75,679.383 1537.31,630.681 1537.87,630.861 1538.43,653.689 1538.99,621.654 1539.55,641.575 1540.11,612.115 1540.67,566.595 1541.23,606.719 1541.79,593.97 1542.35,599.478 1542.9,588.403 1543.46,611.818 1544.02,630.852 1544.58,634.134 1545.14,654.661 1545.7,638.14 1546.26,623.657 1546.82,596.827 1547.38,585.838 1547.94,591.597 1548.5,582.219 1549.06,571.639 1549.62,611.763 1550.18,617.545 1550.73,604.928 1551.29,638.522 1551.85,641.161 1552.41,629.619 1552.97,667.453 1553.53,650.1 1554.09,651.619 1554.65,656.557 1555.21,645.977 1555.77,648.921 1556.33,672.073 1556.89,689.679 1557.45,675.642 1558,678.422 1558.56,662.851 1559.12,715.677 1559.68,719.04 1560.24,737.89 1560.8,732.544 1561.36,761.642 1561.92,758.63 1562.48,753.643 1563.04,750.384 1563.6,701.688 1564.16,703.946 1564.72,721.785 1565.28,690.709 1565.83,724.552 1566.39,690.024 1566.95,719.755 1567.51,686.916 1568.07,703.756 1568.63,701.277 1569.19,700.391 1569.75,683.813 1570.31,667.14 1570.87,673.469 1571.43,644.27 1571.99,647.69 1572.55,647.352 1573.1,666.761 1573.66,667.197 1574.22,685.375 1574.78,684.546 1575.34,698.694 1575.9,665.519 1576.46,678.746 1577.02,675.166 1577.58,677.529 1578.14,681.08 1578.7,696.77 1579.26,697.208 1579.82,714.363 1580.37,726.575 1580.93,724.836 1581.49,755.39 1582.05,740.895 1582.61,738.713 1583.17,734.055 1583.73,728.121 1584.29,711.38 1584.85,676.459 1585.41,680.104 1585.97,694.558 1586.53,677.884 1587.09,677.804 1587.65,664.473 1588.2,666.582 1588.76,669.085 1589.32,652.097 1589.88,655.464 1590.44,699.442 1591,696.968 1591.56,726.393 1592.12,760.608 1592.68,722.535 1593.24,719.593 1593.8,729.147 1594.36,725.93 1594.92,720.983 1595.47,717.147 1596.03,733.307 1596.59,713.834 1597.15,712.898 1597.71,723.9 1598.27,719.987 1598.83,735.57 1599.39,754.136 1599.95,722.29 1600.51,765.954 1601.07,728.851 1601.63,758.32 1602.19,756.491 1602.74,737.95 1603.3,765.102 1603.86,774.073 1604.42,751.979 1604.98,780.654 1605.54,777.493 1606.1,771.565 1606.66,767.365 1607.22,760.926 1607.78,710.208 1608.34,709.335 1608.9,671.178 1609.46,704.381 1610.02,687.678 1610.57,669.574 1611.13,701.649 1611.69,699.236 1612.25,743.672 1612.81,738.71 1613.37,737.843 1613.93,737.319 1614.49,764.624 1615.05,776.799 1615.61,757.986 1616.17,751.776 1616.73,733.39 1617.29,764.222 1617.84,760.418 1618.4,757.911 1618.96,754.023 1619.52,749.432 1620.08,762.408 1620.64,755.599 1621.2,750.159 1621.76,761.331 1622.32,787.621 1622.88,781.904 1623.44,808.59 1624,785.445 1624.56,761.717 1625.11,772.774 1625.67,780.602 1626.23,742.919 1626.79,720.665 1627.35,684.186 1627.91,701.848 1628.47,700.664 1629.03,685.014 1629.59,703.67 1630.15,688.74 1630.71,690.028 1631.27,673.794 1631.83,687.974 1632.39,685.547 1632.94,682.985 1633.5,681.302 1634.06,683.422 1634.62,664.446 1635.18,665.989 1635.74,668.257 1636.3,686.584 1636.86,685.763 1637.42,670.142 1637.98,669.401 1638.54,650.941 1639.1,684.772 1639.66,703.743 1640.21,718.28 1640.77,717.855 1641.33,717.815 1641.89,717.196 1642.45,748.12 1643.01,775.363 1643.57,751.557 1644.13,733.319 1644.69,715.596 1645.25,713.663 1645.81,695.91 1646.37,694.166 1646.93,724.36 1647.48,723.222 1648.04,735.926 1648.6,718.844 1649.16,717.981 1649.72,702.676 1650.28,751.04 1650.84,732.598 1651.4,712.553 1651.96,696.21 1652.52,696.511 1653.08,680.18 1653.64,681.048 1654.2,711.977 1654.76,693.802 1655.31,677.635 1655.87,677.173 1656.43,673.887 1656.99,673.298 1657.55,684.654 1658.11,683.557 1658.67,680.43 1659.23,678.929 1659.79,661.642 1660.35,629.607 1660.91,636.865 1661.47,622.229 1662.03,621.569 1662.58,638.724 1663.14,661.584 1663.7,660.74 1664.26,612.892 1664.82,630.863 1665.38,634.531 1665.94,636.353 1666.5,637.944 1667.06,653.022 1667.62,652.671 1668.18,656.668 1668.74,643.698 1669.3,646.475 1669.85,615.02 1670.41,616.678 1670.97,636.643 1671.53,621.085 1672.09,639.751 1672.65,642.11 1673.21,627.982 1673.77,616.919 1674.33,603.712 1674.89,640.997 1675.45,624.942 1676.01,562.804 1676.57,538.286 1677.13,529.745 1677.68,538.089 1678.24,543.554 1678.8,549.963 1679.36,557.27 1679.92,563.21 1680.48,600.235 1681.04,619.783 1681.6,624.516 1682.16,611.429 1682.72,584.126 1683.28,589.097 1683.84,592.673 1684.4,629.032 1684.95,600.19 1685.51,606.475 1686.07,627.081 1686.63,679.036 1687.19,680.32 1687.75,680.933 1688.31,663.921 1688.87,696.621 1689.43,727.774 1689.99,724.303 1690.55,706.932 1691.11,675.676 1691.67,657.958 1692.23,692.315 1692.78,709.288 1693.34,691.78 1693.9,723.852 1694.46,738.681 1695.02,753.439 1695.58,732.282 1696.14,726.812 1696.7,725.3 1697.26,741.361 1697.82,769.647 1698.38,780.646 1698.94,787.866 1699.5,798.154 1700.05,774.302 1700.61,786.87 1701.17,765.022 1701.73,795.561 1702.29,791.669 1702.85,799.658 1703.41,823.805 1703.97,771.108 1704.53,766.124 1705.09,765.729 1705.65,810.168 1706.21,785.307 1706.77,794.527 1707.32,791.505 1707.88,816.514 1708.44,810.402 1709,820.214 1709.56,745.771 1710.12,739.952 1710.68,705.868 1711.24,687.894 1711.8,690.463 1712.36,705.616 1712.92,655.967 1713.48,688.936 1714.04,674.104 1714.6,673.646 1715.15,655.882 1715.71,690.58 1716.27,672.774 1716.83,641.583 1717.39,658.042 1717.95,674.825 1718.51,690.223 1719.07,673.148 1719.63,677.118 1720.19,697.831 1720.75,693.837 1721.31,691.614 1721.87,721.436 1722.42,718.141 1722.98,716.005 1723.54,694.994 1724.1,676.223 1724.66,660.832 1725.22,629.41 1725.78,603.941 1726.34,609.81 1726.9,599.497 1727.46,619.21 1728.02,622.133 1728.58,592.919 1729.14,595.667 1729.69,584.627 1730.25,593.023 1730.81,598.737 1731.37,603.623 1731.93,590.491 1732.49,547.287 1733.05,554.631 1733.61,574.899 1734.17,582.24 1734.73,589.359 1735.29,580.582 1735.85,569.13 1736.41,579.473 1736.97,585.401 1737.52,576.172 1738.08,598.255 1738.64,603.338 1739.2,623.815 1739.76,624.367 1740.32,644.595 1740.88,595.863 1741.44,586.672 1742,610.063 1742.56,598.341 1743.12,604.782 1743.68,614.168 1744.24,618.734 1744.79,621.56 1745.35,626.804 1745.91,612.487 1746.47,630.666 1747.03,635.407 1747.59,652.884 1748.15,687.657 1748.71,686.644 1749.27,684 1749.83,700.186 1750.39,713.023 1750.95,713.698 1751.51,710.454 1752.06,694.875 1752.62,698.045 1753.18,760.162 1753.74,756.715 1754.3,721.736 1754.86,702.861 1755.42,701.007 1755.98,699.481 1756.54,701.297 1757.1,705.296 1757.66,689.323 1758.22,658.485 1758.78,661.293 1759.34,644.531 1759.89,664.119 1760.45,697.908 1761.01,715.016 1761.57,716.047 1762.13,727.73 1762.69,708.652 1763.25,706.856 1763.81,722.115 1764.37,719.547 1764.93,734.394 1765.49,721.906 1766.05,704.921 1766.61,705.677 1767.16,706.315 1767.72,704.529 1768.28,684.313 1768.84,666.323 1769.4,670.86 1769.96,640.751 1770.52,612.735 1771.08,599.767 1771.64,607.919 1772.2,657.78 1772.76,643.088 1773.32,678.106 1773.88,642.487 1774.43,642.32 1774.99,642.497 1775.55,642.461 1776.11,642.841 1776.67,691.337 1777.23,720.641 1777.79,720.39 1778.35,702.376 1778.91,704.59 1779.47,721.058 1780.03,720.554 1780.59,718.857 1781.15,700.756 1781.71,715.326 1782.26,711.497 1782.82,708.327 1783.38,672.864 1783.94,658.857 1784.5,664.832 1785.06,700.733 1785.62,713.805 1786.18,696.167 1786.74,709.746 1787.3,692.62 1787.86,691.686 1788.42,758.592 1788.98,735.554 1789.53,698.633 1790.09,677.476 1790.65,680.635 1791.21,697.474 1791.77,707.273 1792.33,672.484 1792.89,671.191 1793.45,653.769 1794.01,636.954 1794.57,604.165 1795.13,608.647 1795.69,661.026 1796.25,641.554 1796.8,644.931 1797.36,631.65 1797.92,651.008 1798.48,668.808 1799.04,685.348 1799.6,688.897 1800.16,672.866 1800.72,708.124 1801.28,739.456 1801.84,753.962 1802.4,735.132 1802.96,737.07 1803.52,749.543 1804.08,746.668 1804.63,709.714 1805.19,662.05 1805.75,658.863 1806.31,659.182 1806.87,627.134 1807.43,646.706 1807.99,649.226 1808.55,652.165 1809.11,636.526 1809.67,656.294 1810.23,626.307 1810.79,598.468 1811.35,588.519 1811.9,611.114 1812.46,613.614 1813.02,598.424 1813.58,599.513 1814.14,620.695 1814.7,636.099 1815.26,654.256 1815.82,672.601 1816.38,691.075 1816.94,705.231 1817.5,734.406 1818.06,750.026 1818.62,763.565 1819.18,738.985 1819.73,687.883 1820.29,687.197 1820.85,671.24 1821.41,657.185 1821.97,673.916 1822.53,657.087 1823.09,657.743 1823.65,641.362 1824.21,675.558 1824.77,693.25 1825.33,721.302 1825.89,718.987 1826.45,732.416 1827,714.437 1827.56,713.373 1828.12,698.296 1828.68,646.927 1829.24,648.776 1829.8,650.278 1830.36,651.056 1830.92,669.255 1831.48,637.609 1832.04,644.372 1832.6,645.675 1833.16,613.455 1833.72,617.882 1834.27,641.337 1834.83,628.136 1835.39,649.755 1835.95,651.911 1836.51,624.995 1837.07,644.861 1837.63,663.11 1838.19,682.372 \"/>\n<path clip-path=\"url(#clip833)\" d=\"M720.247 690.104 L720.806 690.104 L721.365 690.104 L721.924 690.104 L722.484 690.104 L723.043 690.104 L723.602 690.104 L724.161 690.104 L724.721 690.104 L725.28 690.104 L725.839 690.104 L726.398 690.104 L726.958 690.104 L727.517 690.104 L728.076 690.104 L728.635 690.104 L729.195 690.104 L729.754 690.104 L730.313 690.104 L730.872 690.104 L731.432 690.104 L731.991 690.104 L732.55 690.104 L733.109 690.104 L733.669 690.104 L734.228 690.104 L734.787 690.104 L735.346 690.104 L735.906 690.104 L736.465 690.104 L737.024 690.104 L737.583 690.104 L738.143 690.104 L738.702 690.104 L739.261 690.104 L739.82 690.104 L740.38 690.104 L740.939 690.104 L741.498 690.104 L742.057 690.104 L742.617 690.104 L743.176 690.104 L743.735 690.104 L744.294 690.104 L744.854 690.104 L745.413 690.104 L745.972 690.104 L746.531 690.104 L747.091 690.104 L747.65 690.104 L748.209 690.104 L748.768 690.104 L749.328 690.104 L749.887 690.104 L750.446 690.104 L751.005 690.104 L751.565 690.104 L752.124 690.104 L752.683 690.104 L753.242 690.104 L753.802 690.104 L754.361 690.104 L754.92 690.104 L755.479 690.104 L756.039 690.104 L756.598 690.104 L757.157 690.104 L757.716 690.104 L758.276 690.104 L758.835 690.104 L759.394 690.104 L759.953 690.104 L760.513 690.104 L761.072 690.104 L761.631 690.104 L762.19 690.104 L762.75 690.104 L763.309 690.104 L763.868 690.104 L764.427 690.104 L764.987 690.104 L765.546 690.104 L766.105 690.104 L766.664 690.104 L767.224 690.104 L767.783 690.104 L768.342 690.104 L768.901 690.104 L769.461 690.104 L770.02 690.104 L770.579 690.104 L771.138 690.104 L771.698 690.104 L772.257 690.104 L772.816 690.104 L773.375 690.104 L773.935 690.104 L774.494 690.104 L775.053 690.104 L775.612 690.104 L776.172 690.104 L776.731 690.104 L777.29 690.104 L777.849 690.104 L778.409 690.104 L778.968 690.104 L779.527 690.104 L780.086 690.104 L780.646 690.104 L781.205 690.104 L781.764 690.104 L782.323 690.104 L782.883 690.104 L783.442 690.104 L784.001 690.104 L784.56 690.104 L785.12 690.104 L785.679 690.104 L786.238 690.104 L786.797 690.104 L787.357 690.104 L787.916 690.104 L788.475 690.104 L789.034 690.104 L789.594 690.104 L790.153 690.104 L790.712 690.104 L791.271 690.104 L791.831 690.104 L792.39 690.104 L792.949 690.104 L793.508 690.104 L794.068 690.104 L794.627 690.104 L795.186 690.104 L795.745 690.104 L796.305 690.104 L796.864 690.104 L797.423 690.104 L797.982 690.104 L798.542 690.104 L799.101 690.104 L799.66 690.104 L800.219 690.104 L800.779 690.104 L801.338 690.104 L801.897 690.104 L802.456 690.104 L803.016 690.104 L803.575 690.104 L804.134 690.104 L804.693 690.104 L805.253 690.104 L805.812 690.104 L806.371 690.104 L806.931 690.104 L807.49 690.104 L808.049 690.104 L808.608 690.104 L809.168 690.104 L809.727 690.104 L810.286 690.104 L810.845 690.104 L811.405 690.104 L811.964 690.104 L812.523 690.104 L813.082 690.104 L813.642 690.104 L814.201 690.104 L814.76 690.104 L815.319 690.104 L815.879 690.104 L816.438 690.104 L816.997 690.104 L817.556 690.104 L818.116 690.104 L818.675 690.104 L819.234 690.104 L819.793 690.104 L820.353 690.104 L820.912 690.104 L821.471 690.104 L822.03 690.104 L822.59 690.104 L823.149 690.104 L823.708 690.104 L824.267 690.104 L824.827 690.104 L825.386 690.104 L825.945 690.104 L826.504 690.104 L827.064 690.104 L827.623 690.104 L828.182 690.104 L828.741 690.104 L829.301 690.104 L829.86 690.104 L830.419 690.104 L830.978 690.104 L831.538 690.104 L832.097 690.104 L832.656 690.104 L833.215 690.104 L833.775 690.104 L834.334 690.104 L834.893 690.104 L835.452 690.104 L836.012 690.104 L836.571 690.104 L837.13 690.104 L837.689 690.104 L838.249 690.104 L838.808 690.104 L839.367 690.104 L839.926 690.104 L840.486 690.104 L841.045 690.104 L841.604 690.104 L842.163 690.104 L842.723 690.104 L843.282 690.104 L843.841 690.104 L844.4 690.104 L844.96 690.104 L845.519 690.104 L846.078 690.104 L846.637 690.104 L847.197 690.104 L847.756 690.104 L848.315 690.104 L848.874 690.104 L849.434 690.104 L849.993 690.104 L850.552 690.104 L851.111 690.104 L851.671 690.104 L852.23 690.104 L852.789 690.104 L853.348 690.104 L853.908 690.104 L854.467 690.104 L855.026 690.104 L855.585 690.104 L856.145 690.104 L856.704 690.104 L857.263 690.104 L857.822 690.104 L858.382 690.104 L858.941 690.104 L859.5 690.104 L860.059 690.104 L860.619 690.104 L861.178 690.104 L861.737 690.104 L862.296 690.104 L862.856 690.104 L863.415 690.104 L863.974 690.104 L864.533 690.104 L865.093 690.104 L865.652 690.104 L866.211 690.104 L866.77 690.104 L867.33 690.104 L867.889 690.104 L868.448 690.104 L869.007 690.104 L869.567 690.104 L870.126 690.104 L870.685 690.104 L871.244 690.104 L871.804 690.104 L872.363 690.104 L872.922 690.104 L873.481 690.104 L874.041 690.104 L874.6 690.104 L875.159 690.104 L875.718 690.104 L876.278 690.104 L876.837 690.104 L877.396 690.104 L877.955 690.104 L878.515 690.104 L879.074 690.104 L879.633 690.104 L880.192 690.104 L880.752 690.104 L881.311 690.104 L881.87 690.104 L882.429 690.104 L882.989 690.104 L883.548 690.104 L884.107 690.104 L884.666 690.104 L885.226 690.104 L885.785 690.104 L886.344 690.104 L886.903 690.104 L887.463 690.104 L888.022 690.104 L888.581 690.104 L889.14 690.104 L889.7 690.104 L890.259 690.104 L890.818 690.104 L891.377 690.104 L891.937 690.104 L892.496 690.104 L893.055 690.104 L893.614 690.104 L894.174 690.104 L894.733 690.104 L895.292 690.104 L895.851 690.104 L896.411 690.104 L896.97 690.104 L897.529 690.104 L898.088 690.104 L898.648 690.104 L899.207 690.104 L899.766 690.104 L900.325 690.104 L900.885 690.104 L901.444 690.104 L902.003 690.104 L902.562 690.104 L903.122 690.104 L903.681 690.104 L904.24 690.104 L904.799 690.104 L905.359 690.104 L905.918 690.104 L906.477 690.104 L907.036 690.104 L907.596 690.104 L908.155 690.104 L908.714 690.104 L909.273 690.104 L909.833 690.104 L910.392 690.104 L910.951 690.104 L911.51 690.104 L912.07 690.104 L912.629 690.104 L913.188 690.104 L913.747 690.104 L914.307 690.104 L914.866 690.104 L915.425 690.104 L915.984 690.104 L916.544 690.104 L917.103 690.104 L917.662 690.104 L918.221 690.104 L918.781 690.104 L919.34 690.104 L919.899 690.104 L920.458 690.104 L921.018 690.104 L921.577 690.104 L922.136 690.104 L922.695 690.104 L923.255 690.104 L923.814 690.104 L924.373 690.104 L924.932 690.104 L925.492 690.104 L926.051 690.104 L926.61 690.104 L927.169 690.104 L927.729 690.104 L928.288 690.104 L928.847 690.104 L929.406 690.104 L929.966 690.104 L930.525 690.104 L931.084 690.104 L931.644 690.104 L932.203 690.104 L932.762 690.104 L933.321 690.104 L933.881 690.104 L934.44 690.104 L934.999 690.104 L935.558 690.104 L936.118 690.104 L936.677 690.104 L937.236 690.104 L937.795 690.104 L938.355 690.104 L938.914 690.104 L939.473 690.104 L940.032 690.104 L940.592 690.104 L941.151 690.104 L941.71 690.104 L942.269 690.104 L942.829 690.104 L943.388 690.104 L943.947 690.104 L944.506 690.104 L945.066 690.104 L945.625 690.104 L946.184 690.104 L946.743 690.104 L947.303 690.104 L947.862 690.104 L948.421 690.104 L948.98 690.104 L949.54 690.104 L950.099 690.104 L950.658 690.104 L951.217 690.104 L951.777 690.104 L952.336 690.104 L952.895 690.104 L953.454 690.104 L954.014 690.104 L954.573 690.104 L955.132 690.104 L955.691 690.104 L956.251 690.104 L956.81 690.104 L957.369 690.104 L957.928 690.104 L958.488 690.104 L959.047 690.104 L959.606 690.104 L960.165 690.104 L960.725 690.104 L961.284 690.104 L961.843 690.104 L962.402 690.104 L962.962 690.104 L963.521 690.104 L964.08 690.104 L964.639 690.104 L965.199 690.104 L965.758 690.104 L966.317 690.104 L966.876 690.104 L967.436 690.104 L967.995 690.104 L968.554 690.104 L969.113 690.104 L969.673 690.104 L970.232 690.104 L970.791 690.104 L971.35 690.104 L971.91 690.104 L972.469 690.104 L973.028 690.104 L973.587 690.104 L974.147 690.104 L974.706 690.104 L975.265 690.104 L975.824 690.104 L976.384 690.104 L976.943 690.104 L977.502 690.104 L978.061 690.104 L978.621 690.104 L979.18 690.104 L979.739 690.104 L980.298 690.104 L980.858 690.104 L981.417 690.104 L981.976 690.104 L982.535 690.104 L983.095 690.104 L983.654 690.104 L984.213 690.104 L984.772 690.104 L985.332 690.104 L985.891 690.104 L986.45 690.104 L987.009 690.104 L987.569 690.104 L988.128 690.104 L988.687 690.104 L989.246 690.104 L989.806 690.104 L990.365 690.104 L990.924 690.104 L991.483 690.104 L992.043 690.104 L992.602 690.104 L993.161 690.104 L993.72 690.104 L994.28 690.104 L994.839 690.104 L995.398 690.104 L995.957 690.104 L996.517 690.104 L997.076 690.104 L997.635 690.104 L998.194 690.104 L998.754 690.104 L999.313 690.104 L999.872 690.104 L1000.43 690.104 L1000.99 690.104 L1001.55 690.104 L1002.11 690.104 L1002.67 690.104 L1003.23 690.104 L1003.79 690.104 L1004.35 690.104 L1004.91 690.104 L1005.46 690.104 L1006.02 690.104 L1006.58 690.104 L1007.14 690.104 L1007.7 690.104 L1008.26 690.104 L1008.82 690.104 L1009.38 690.104 L1009.94 690.104 L1010.5 690.104 L1011.06 690.104 L1011.62 690.104 L1012.18 690.104 L1012.73 690.104 L1013.29 690.104 L1013.85 690.104 L1014.41 690.104 L1014.97 690.104 L1015.53 690.104 L1016.09 690.104 L1016.65 690.104 L1017.21 690.104 L1017.77 690.104 L1018.33 690.104 L1018.89 690.104 L1019.45 690.104 L1020.01 690.104 L1020.56 690.104 L1021.12 690.104 L1021.68 690.104 L1022.24 690.104 L1022.8 690.104 L1023.36 690.104 L1023.92 690.104 L1024.48 690.104 L1025.04 690.104 L1025.6 690.104 L1026.16 690.104 L1026.72 690.104 L1027.28 690.104 L1027.83 690.104 L1028.39 690.104 L1028.95 690.104 L1029.51 690.104 L1030.07 690.104 L1030.63 690.104 L1031.19 690.104 L1031.75 690.104 L1032.31 690.104 L1032.87 690.104 L1033.43 690.104 L1033.99 690.104 L1034.55 690.104 L1035.1 690.104 L1035.66 690.104 L1036.22 690.104 L1036.78 690.104 L1037.34 690.104 L1037.9 690.104 L1038.46 690.104 L1039.02 690.104 L1039.58 690.104 L1040.14 690.104 L1040.7 690.104 L1041.26 690.104 L1041.82 690.104 L1042.38 690.104 L1042.93 690.104 L1043.49 690.104 L1044.05 690.104 L1044.61 690.104 L1045.17 690.104 L1045.73 690.104 L1046.29 690.104 L1046.85 690.104 L1047.41 690.104 L1047.97 690.104 L1048.53 690.104 L1049.09 690.104 L1049.65 690.104 L1050.2 690.104 L1050.76 690.104 L1051.32 690.104 L1051.88 690.104 L1052.44 690.104 L1053 690.104 L1053.56 690.104 L1054.12 690.104 L1054.68 690.104 L1055.24 690.104 L1055.8 690.104 L1056.36 690.104 L1056.92 690.104 L1057.48 690.104 L1058.03 690.104 L1058.59 690.104 L1059.15 690.104 L1059.71 690.104 L1060.27 690.104 L1060.83 690.104 L1061.39 690.104 L1061.95 690.104 L1062.51 690.104 L1063.07 690.104 L1063.63 690.104 L1064.19 690.104 L1064.75 690.104 L1065.3 690.104 L1065.86 690.104 L1066.42 690.104 L1066.98 690.104 L1067.54 690.104 L1068.1 690.104 L1068.66 690.104 L1069.22 690.104 L1069.78 690.104 L1070.34 690.104 L1070.9 690.104 L1071.46 690.104 L1072.02 690.104 L1072.57 690.104 L1073.13 690.104 L1073.69 690.104 L1074.25 690.104 L1074.81 690.104 L1075.37 690.104 L1075.93 690.104 L1076.49 690.104 L1077.05 690.104 L1077.61 690.104 L1078.17 690.104 L1078.73 690.104 L1079.29 690.104 L1079.85 690.104 L1080.4 690.104 L1080.96 690.104 L1081.52 690.104 L1082.08 690.104 L1082.64 690.104 L1083.2 690.104 L1083.76 690.104 L1084.32 690.104 L1084.88 690.104 L1085.44 690.104 L1086 690.104 L1086.56 690.104 L1087.12 690.104 L1087.67 690.104 L1088.23 690.104 L1088.79 690.104 L1089.35 690.104 L1089.91 690.104 L1090.47 690.104 L1091.03 690.104 L1091.59 690.104 L1092.15 690.104 L1092.71 690.104 L1093.27 690.104 L1093.83 690.104 L1094.39 690.104 L1094.94 690.104 L1095.5 690.104 L1096.06 690.104 L1096.62 690.104 L1097.18 690.104 L1097.74 690.104 L1098.3 690.104 L1098.86 690.104 L1099.42 690.104 L1099.98 690.104 L1100.54 690.104 L1101.1 690.104 L1101.66 690.104 L1102.22 690.104 L1102.77 690.104 L1103.33 690.104 L1103.89 690.104 L1104.45 690.104 L1105.01 690.104 L1105.57 690.104 L1106.13 690.104 L1106.69 690.104 L1107.25 690.104 L1107.81 690.104 L1108.37 690.104 L1108.93 690.104 L1109.49 690.104 L1110.04 690.104 L1110.6 690.104 L1111.16 690.104 L1111.72 690.104 L1112.28 690.104 L1112.84 690.104 L1113.4 690.104 L1113.96 690.104 L1114.52 690.104 L1115.08 690.104 L1115.64 690.104 L1116.2 690.104 L1116.76 690.104 L1117.31 690.104 L1117.87 690.104 L1118.43 690.104 L1118.99 690.104 L1119.55 690.104 L1120.11 690.104 L1120.67 690.104 L1121.23 690.104 L1121.79 690.104 L1122.35 690.104 L1122.91 690.104 L1123.47 690.104 L1124.03 690.104 L1124.59 690.104 L1125.14 690.104 L1125.7 690.104 L1126.26 690.104 L1126.82 690.104 L1127.38 690.104 L1127.94 690.104 L1128.5 690.104 L1129.06 690.104 L1129.62 690.104 L1130.18 690.104 L1130.74 690.104 L1131.3 690.104 L1131.86 690.104 L1132.41 690.104 L1132.97 690.104 L1133.53 690.104 L1134.09 690.104 L1134.65 690.104 L1135.21 690.104 L1135.77 690.104 L1136.33 690.104 L1136.89 690.104 L1137.45 690.104 L1138.01 690.104 L1138.57 690.104 L1139.13 690.104 L1139.68 690.104 L1140.24 690.104 L1140.8 690.104 L1141.36 690.104 L1141.92 690.104 L1142.48 690.104 L1143.04 690.104 L1143.6 690.104 L1144.16 690.104 L1144.72 690.104 L1145.28 690.104 L1145.84 690.104 L1146.4 690.104 L1146.96 690.104 L1147.51 690.104 L1148.07 690.104 L1148.63 690.104 L1149.19 690.104 L1149.75 690.104 L1150.31 690.104 L1150.87 690.104 L1151.43 690.104 L1151.99 690.104 L1152.55 690.104 L1153.11 690.104 L1153.67 690.104 L1154.23 690.104 L1154.78 690.104 L1155.34 690.104 L1155.9 690.104 L1156.46 690.104 L1157.02 690.104 L1157.58 690.104 L1158.14 690.104 L1158.7 690.104 L1159.26 690.104 L1159.82 690.104 L1160.38 690.104 L1160.94 690.104 L1161.5 690.104 L1162.05 690.104 L1162.61 690.104 L1163.17 690.104 L1163.73 690.104 L1164.29 690.104 L1164.85 690.104 L1165.41 690.104 L1165.97 690.104 L1166.53 690.104 L1167.09 690.104 L1167.65 690.104 L1168.21 690.104 L1168.77 690.104 L1169.33 690.104 L1169.88 690.104 L1170.44 690.104 L1171 690.104 L1171.56 690.104 L1172.12 690.104 L1172.68 690.104 L1173.24 690.104 L1173.8 690.104 L1174.36 690.104 L1174.92 690.104 L1175.48 690.104 L1176.04 690.104 L1176.6 690.104 L1177.15 690.104 L1177.71 690.104 L1178.27 690.104 L1178.83 690.104 L1179.39 690.104 L1179.95 690.104 L1180.51 690.104 L1181.07 690.104 L1181.63 690.104 L1182.19 690.104 L1182.75 690.104 L1183.31 690.104 L1183.87 690.104 L1184.43 690.104 L1184.98 690.104 L1185.54 690.104 L1186.1 690.104 L1186.66 690.104 L1187.22 690.104 L1187.78 690.104 L1188.34 690.104 L1188.9 690.104 L1189.46 690.104 L1190.02 690.104 L1190.58 690.104 L1191.14 690.104 L1191.7 690.104 L1192.25 690.104 L1192.81 690.104 L1193.37 690.104 L1193.93 690.104 L1194.49 690.104 L1195.05 690.104 L1195.61 690.104 L1196.17 690.104 L1196.73 690.104 L1197.29 690.104 L1197.85 690.104 L1198.41 690.104 L1198.97 690.104 L1199.52 690.104 L1200.08 690.104 L1200.64 690.104 L1201.2 690.104 L1201.76 690.104 L1202.32 690.104 L1202.88 690.104 L1203.44 690.104 L1204 690.104 L1204.56 690.104 L1205.12 690.104 L1205.68 690.104 L1206.24 690.104 L1206.8 690.104 L1207.35 690.104 L1207.91 690.104 L1208.47 690.104 L1209.03 690.104 L1209.59 690.104 L1210.15 690.104 L1210.71 690.104 L1211.27 690.104 L1211.83 690.104 L1212.39 690.104 L1212.95 690.104 L1213.51 690.104 L1214.07 690.104 L1214.62 690.104 L1215.18 690.104 L1215.74 690.104 L1216.3 690.104 L1216.86 690.104 L1217.42 690.104 L1217.98 690.104 L1218.54 690.104 L1219.1 690.104 L1219.66 690.104 L1220.22 690.104 L1220.78 690.104 L1221.34 690.104 L1221.89 690.104 L1222.45 690.104 L1223.01 690.104 L1223.57 690.104 L1224.13 690.104 L1224.69 690.104 L1225.25 690.104 L1225.81 690.104 L1226.37 690.104 L1226.93 690.104 L1227.49 690.104 L1228.05 690.104 L1228.61 690.104 L1229.17 690.104 L1229.72 690.104 L1230.28 690.104 L1230.84 690.104 L1231.4 690.104 L1231.96 690.104 L1232.52 690.104 L1233.08 690.104 L1233.64 690.104 L1234.2 690.104 L1234.76 690.104 L1235.32 690.104 L1235.88 690.104 L1236.44 690.104 L1236.99 690.104 L1237.55 690.104 L1238.11 690.104 L1238.67 690.104 L1239.23 690.104 L1239.79 690.104 L1240.35 690.104 L1240.91 690.104 L1241.47 690.104 L1242.03 690.104 L1242.59 690.104 L1243.15 690.104 L1243.71 690.104 L1244.26 690.104 L1244.82 690.104 L1245.38 690.104 L1245.94 690.104 L1246.5 690.104 L1247.06 690.104 L1247.62 690.104 L1248.18 690.104 L1248.74 690.104 L1249.3 690.104 L1249.86 690.104 L1250.42 690.104 L1250.98 690.104 L1251.54 690.104 L1252.09 690.104 L1252.65 690.104 L1253.21 690.104 L1253.77 690.104 L1254.33 690.104 L1254.89 690.104 L1255.45 690.104 L1256.01 690.104 L1256.57 690.104 L1257.13 690.104 L1257.69 690.104 L1258.25 690.104 L1258.81 690.104 L1259.36 690.104 L1259.92 690.104 L1260.48 690.104 L1261.04 690.104 L1261.6 690.104 L1262.16 690.104 L1262.72 690.104 L1263.28 690.104 L1263.84 690.104 L1264.4 690.104 L1264.96 690.104 L1265.52 690.104 L1266.08 690.104 L1266.63 690.104 L1267.19 690.104 L1267.75 690.104 L1268.31 690.104 L1268.87 690.104 L1269.43 690.104 L1269.99 690.104 L1270.55 690.104 L1271.11 690.104 L1271.67 690.104 L1272.23 690.104 L1272.79 690.104 L1273.35 690.104 L1273.91 690.104 L1274.46 690.104 L1275.02 690.104 L1275.58 690.104 L1276.14 690.104 L1276.7 690.104 L1277.26 690.104 L1277.82 690.104 L1278.38 690.104 L1278.94 690.104 L1279.5 690.104 L1280.06 690.104 L1280.62 690.104 L1281.18 690.104 L1281.73 690.104 L1282.29 690.104 L1282.85 690.104 L1283.41 690.104 L1283.97 690.104 L1284.53 690.104 L1285.09 690.104 L1285.65 690.104 L1286.21 690.104 L1286.77 690.104 L1287.33 690.104 L1287.89 690.104 L1288.45 690.104 L1289 690.104 L1289.56 690.104 L1290.12 690.104 L1290.68 690.104 L1291.24 690.104 L1291.8 690.104 L1292.36 690.104 L1292.92 690.104 L1293.48 690.104 L1294.04 690.104 L1294.6 690.104 L1295.16 690.104 L1295.72 690.104 L1296.28 690.104 L1296.83 690.104 L1297.39 690.104 L1297.95 690.104 L1298.51 690.104 L1299.07 690.104 L1299.63 690.104 L1300.19 690.104 L1300.75 690.104 L1301.31 690.104 L1301.87 690.104 L1302.43 690.104 L1302.99 690.104 L1303.55 690.104 L1304.1 690.104 L1304.66 690.104 L1305.22 690.104 L1305.78 690.104 L1306.34 690.104 L1306.9 690.104 L1307.46 690.104 L1308.02 690.104 L1308.58 690.104 L1309.14 690.104 L1309.7 690.104 L1310.26 690.104 L1310.82 690.104 L1311.38 690.104 L1311.93 690.104 L1312.49 690.104 L1313.05 690.104 L1313.61 690.104 L1314.17 690.104 L1314.73 690.104 L1315.29 690.104 L1315.85 690.104 L1316.41 690.104 L1316.97 690.104 L1317.53 690.104 L1318.09 690.104 L1318.65 690.104 L1319.2 690.104 L1319.76 690.104 L1320.32 690.104 L1320.88 690.104 L1321.44 690.104 L1322 690.104 L1322.56 690.104 L1323.12 690.104 L1323.68 690.104 L1324.24 690.104 L1324.8 690.104 L1325.36 690.104 L1325.92 690.104 L1326.47 690.104 L1327.03 690.104 L1327.59 690.104 L1328.15 690.104 L1328.71 690.104 L1329.27 690.104 L1329.83 690.104 L1330.39 690.104 L1330.95 690.104 L1331.51 690.104 L1332.07 690.104 L1332.63 690.104 L1333.19 690.104 L1333.75 690.104 L1334.3 690.104 L1334.86 690.104 L1335.42 690.104 L1335.98 690.104 L1336.54 690.104 L1337.1 690.104 L1337.66 690.104 L1338.22 690.104 L1338.78 690.104 L1339.34 690.104 L1339.9 690.104 L1340.46 690.104 L1341.02 690.104 L1341.57 690.104 L1342.13 690.104 L1342.69 690.104 L1343.25 690.104 L1343.81 690.104 L1344.37 690.104 L1344.93 690.104 L1345.49 690.104 L1346.05 690.104 L1346.61 690.104 L1347.17 690.104 L1347.73 690.104 L1348.29 690.104 L1348.84 690.104 L1349.4 690.104 L1349.96 690.104 L1350.52 690.104 L1351.08 690.104 L1351.64 690.104 L1352.2 690.104 L1352.76 690.104 L1353.32 690.104 L1353.88 690.104 L1354.44 690.104 L1355 690.104 L1355.56 690.104 L1356.12 690.104 L1356.67 690.104 L1357.23 690.104 L1357.79 690.104 L1358.35 690.104 L1358.91 690.104 L1359.47 690.104 L1360.03 690.104 L1360.59 690.104 L1361.15 690.104 L1361.71 690.104 L1362.27 690.104 L1362.83 690.104 L1363.39 690.104 L1363.94 690.104 L1364.5 690.104 L1365.06 690.104 L1365.62 690.104 L1366.18 690.104 L1366.74 690.104 L1367.3 690.104 L1367.86 690.104 L1368.42 690.104 L1368.98 690.104 L1369.54 690.104 L1370.1 690.104 L1370.66 690.104 L1371.21 690.104 L1371.77 690.104 L1372.33 690.104 L1372.89 690.104 L1373.45 690.104 L1374.01 690.104 L1374.57 690.104 L1375.13 690.104 L1375.69 690.104 L1376.25 690.104 L1376.81 690.104 L1377.37 690.104 L1377.93 690.104 L1378.49 690.104 L1379.04 690.104 L1379.6 690.104 L1380.16 690.104 L1380.72 690.104 L1381.28 690.104 L1381.84 690.104 L1382.4 690.104 L1382.96 690.104 L1383.52 690.104 L1384.08 690.104 L1384.64 690.104 L1385.2 690.104 L1385.76 690.104 L1386.31 690.104 L1386.87 690.104 L1387.43 690.104 L1387.99 690.104 L1388.55 690.104 L1389.11 690.104 L1389.67 690.104 L1390.23 690.104 L1390.79 690.104 L1391.35 690.104 L1391.91 690.104 L1392.47 690.104 L1393.03 690.104 L1393.58 690.104 L1394.14 690.104 L1394.7 690.104 L1395.26 690.104 L1395.82 690.104 L1396.38 690.104 L1396.94 690.104 L1397.5 690.104 L1398.06 690.104 L1398.62 690.104 L1399.18 690.104 L1399.74 690.104 L1400.3 690.104 L1400.86 690.104 L1401.41 690.104 L1401.97 690.104 L1402.53 690.104 L1403.09 690.104 L1403.65 690.104 L1404.21 690.104 L1404.77 690.104 L1405.33 690.104 L1405.89 690.104 L1406.45 690.104 L1407.01 690.104 L1407.57 690.104 L1408.13 690.104 L1408.68 690.104 L1409.24 690.104 L1409.8 690.104 L1410.36 690.104 L1410.92 690.104 L1411.48 690.104 L1412.04 690.104 L1412.6 690.104 L1413.16 690.104 L1413.72 690.104 L1414.28 690.104 L1414.84 690.104 L1415.4 690.104 L1415.95 690.104 L1416.51 690.104 L1417.07 690.104 L1417.63 690.104 L1418.19 690.104 L1418.75 690.104 L1419.31 690.104 L1419.87 690.104 L1420.43 690.104 L1420.99 690.104 L1421.55 690.104 L1422.11 690.104 L1422.67 690.104 L1423.23 690.104 L1423.78 690.104 L1424.34 690.104 L1424.9 690.104 L1425.46 690.104 L1426.02 690.104 L1426.58 690.104 L1427.14 690.104 L1427.7 690.104 L1428.26 690.104 L1428.82 690.104 L1429.38 690.104 L1429.94 690.104 L1430.5 690.104 L1431.05 690.104 L1431.61 690.104 L1432.17 690.104 L1432.73 690.104 L1433.29 690.104 L1433.85 690.104 L1434.41 690.104 L1434.97 690.104 L1435.53 690.104 L1436.09 690.104 L1436.65 690.104 L1437.21 690.104 L1437.77 690.104 L1438.33 690.104 L1438.88 690.104 L1439.44 690.104 L1440 690.104 L1440.56 690.104 L1441.12 690.104 L1441.68 690.104 L1442.24 690.104 L1442.8 690.104 L1443.36 690.104 L1443.92 690.104 L1444.48 690.104 L1445.04 690.104 L1445.6 690.104 L1446.15 690.104 L1446.71 690.104 L1447.27 690.104 L1447.83 690.104 L1448.39 690.104 L1448.95 690.104 L1449.51 690.104 L1450.07 690.104 L1450.63 690.104 L1451.19 690.104 L1451.75 690.104 L1452.31 690.104 L1452.87 690.104 L1453.42 690.104 L1453.98 690.104 L1454.54 690.104 L1455.1 690.104 L1455.66 690.104 L1456.22 690.104 L1456.78 690.104 L1457.34 690.104 L1457.9 690.104 L1458.46 690.104 L1459.02 690.104 L1459.58 690.104 L1460.14 690.104 L1460.7 690.104 L1461.25 690.104 L1461.81 690.104 L1462.37 690.104 L1462.93 690.104 L1463.49 690.104 L1464.05 690.104 L1464.61 690.104 L1465.17 690.104 L1465.73 690.104 L1466.29 690.104 L1466.85 690.104 L1467.41 690.104 L1467.97 690.104 L1468.52 690.104 L1469.08 690.104 L1469.64 690.104 L1470.2 690.104 L1470.76 690.104 L1471.32 690.104 L1471.88 690.104 L1472.44 690.104 L1473 690.104 L1473.56 690.104 L1474.12 690.104 L1474.68 690.104 L1475.24 690.104 L1475.79 690.104 L1476.35 690.104 L1476.91 690.104 L1477.47 690.104 L1478.03 690.104 L1478.59 690.104 L1479.15 690.104 L1479.71 690.104 L1480.27 690.104 L1480.83 690.104 L1481.39 690.104 L1481.95 690.104 L1482.51 690.104 L1483.07 690.104 L1483.62 690.104 L1484.18 690.104 L1484.74 690.104 L1485.3 690.104 L1485.86 690.104 L1486.42 690.104 L1486.98 690.104 L1487.54 690.104 L1488.1 690.104 L1488.66 690.104 L1489.22 690.104 L1489.78 690.104 L1490.34 690.104 L1490.89 690.104 L1491.45 690.104 L1492.01 690.104 L1492.57 690.104 L1493.13 690.104 L1493.69 690.104 L1494.25 690.104 L1494.81 690.104 L1495.37 690.104 L1495.93 690.104 L1496.49 690.104 L1497.05 690.104 L1497.61 690.104 L1498.16 690.104 L1498.72 690.104 L1499.28 690.104 L1499.84 690.104 L1500.4 690.104 L1500.96 690.104 L1501.52 690.104 L1502.08 690.104 L1502.64 690.104 L1503.2 690.104 L1503.76 690.104 L1504.32 690.104 L1504.88 690.104 L1505.44 690.104 L1505.99 690.104 L1506.55 690.104 L1507.11 690.104 L1507.67 690.104 L1508.23 690.104 L1508.79 690.104 L1509.35 690.104 L1509.91 690.104 L1510.47 690.104 L1511.03 690.104 L1511.59 690.104 L1512.15 690.104 L1512.71 690.104 L1513.26 690.104 L1513.82 690.104 L1514.38 690.104 L1514.94 690.104 L1515.5 690.104 L1516.06 690.104 L1516.62 690.104 L1517.18 690.104 L1517.74 690.104 L1518.3 690.104 L1518.86 690.104 L1519.42 690.104 L1519.98 690.104 L1520.53 690.104 L1521.09 690.104 L1521.65 690.104 L1522.21 690.104 L1522.77 690.104 L1523.33 690.104 L1523.89 690.104 L1524.45 690.104 L1525.01 690.104 L1525.57 690.104 L1526.13 690.104 L1526.69 690.104 L1527.25 690.104 L1527.81 690.104 L1528.36 690.104 L1528.92 690.104 L1529.48 690.104 L1530.04 690.104 L1530.6 690.104 L1531.16 690.104 L1531.72 690.104 L1532.28 690.104 L1532.84 690.104 L1533.4 690.104 L1533.96 690.104 L1534.52 690.104 L1535.08 690.104 L1535.63 690.104 L1536.19 690.104 L1536.75 690.104 L1537.31 690.104 L1537.87 690.104 L1538.43 690.104 L1538.99 690.104 L1539.55 690.104 L1540.11 690.104 L1540.67 690.104 L1541.23 690.104 L1541.79 690.104 L1542.35 690.104 L1542.9 690.104 L1543.46 690.104 L1544.02 690.104 L1544.58 690.104 L1545.14 690.104 L1545.7 690.104 L1546.26 690.104 L1546.82 690.104 L1547.38 690.104 L1547.94 690.104 L1548.5 690.104 L1549.06 690.104 L1549.62 690.104 L1550.18 690.104 L1550.73 690.104 L1551.29 690.104 L1551.85 690.104 L1552.41 690.104 L1552.97 690.104 L1553.53 690.104 L1554.09 690.104 L1554.65 690.104 L1555.21 690.104 L1555.77 690.104 L1556.33 690.104 L1556.89 690.104 L1557.45 690.104 L1558 690.104 L1558.56 690.104 L1559.12 690.104 L1559.68 690.104 L1560.24 690.104 L1560.8 690.104 L1561.36 690.104 L1561.92 690.104 L1562.48 690.104 L1563.04 690.104 L1563.6 690.104 L1564.16 690.104 L1564.72 690.104 L1565.28 690.104 L1565.83 690.104 L1566.39 690.104 L1566.95 690.104 L1567.51 690.104 L1568.07 690.104 L1568.63 690.104 L1569.19 690.104 L1569.75 690.104 L1570.31 690.104 L1570.87 690.104 L1571.43 690.104 L1571.99 690.104 L1572.55 690.104 L1573.1 690.104 L1573.66 690.104 L1574.22 690.104 L1574.78 690.104 L1575.34 690.104 L1575.9 690.104 L1576.46 690.104 L1577.02 690.104 L1577.58 690.104 L1578.14 690.104 L1578.7 690.104 L1579.26 690.104 L1579.82 690.104 L1580.37 690.104 L1580.93 690.104 L1581.49 690.104 L1582.05 690.104 L1582.61 690.104 L1583.17 690.104 L1583.73 690.104 L1584.29 690.104 L1584.85 690.104 L1585.41 690.104 L1585.97 690.104 L1586.53 690.104 L1587.09 690.104 L1587.65 690.104 L1588.2 690.104 L1588.76 690.104 L1589.32 690.104 L1589.88 690.104 L1590.44 690.104 L1591 690.104 L1591.56 690.104 L1592.12 690.104 L1592.68 690.104 L1593.24 690.104 L1593.8 690.104 L1594.36 690.104 L1594.92 690.104 L1595.47 690.104 L1596.03 690.104 L1596.59 690.104 L1597.15 690.104 L1597.71 690.104 L1598.27 690.104 L1598.83 690.104 L1599.39 690.104 L1599.95 690.104 L1600.51 690.104 L1601.07 690.104 L1601.63 690.104 L1602.19 690.104 L1602.74 690.104 L1603.3 690.104 L1603.86 690.104 L1604.42 690.104 L1604.98 690.104 L1605.54 690.104 L1606.1 690.104 L1606.66 690.104 L1607.22 690.104 L1607.78 690.104 L1608.34 690.104 L1608.9 690.104 L1609.46 690.104 L1610.02 690.104 L1610.57 690.104 L1611.13 690.104 L1611.69 690.104 L1612.25 690.104 L1612.81 690.104 L1613.37 690.104 L1613.93 690.104 L1614.49 690.104 L1615.05 690.104 L1615.61 690.104 L1616.17 690.104 L1616.73 690.104 L1617.29 690.104 L1617.84 690.104 L1618.4 690.104 L1618.96 690.104 L1619.52 690.104 L1620.08 690.104 L1620.64 690.104 L1621.2 690.104 L1621.76 690.104 L1622.32 690.104 L1622.88 690.104 L1623.44 690.104 L1624 690.104 L1624.56 690.104 L1625.11 690.104 L1625.67 690.104 L1626.23 690.104 L1626.79 690.104 L1627.35 690.104 L1627.91 690.104 L1628.47 690.104 L1629.03 690.104 L1629.59 690.104 L1630.15 690.104 L1630.71 690.104 L1631.27 690.104 L1631.83 690.104 L1632.39 690.104 L1632.94 690.104 L1633.5 690.104 L1634.06 690.104 L1634.62 690.104 L1635.18 690.104 L1635.74 690.104 L1636.3 690.104 L1636.86 690.104 L1637.42 690.104 L1637.98 690.104 L1638.54 690.104 L1639.1 690.104 L1639.66 690.104 L1640.21 690.104 L1640.77 690.104 L1641.33 690.104 L1641.89 690.104 L1642.45 690.104 L1643.01 690.104 L1643.57 690.104 L1644.13 690.104 L1644.69 690.104 L1645.25 690.104 L1645.81 690.104 L1646.37 690.104 L1646.93 690.104 L1647.48 690.104 L1648.04 690.104 L1648.6 690.104 L1649.16 690.104 L1649.72 690.104 L1650.28 690.104 L1650.84 690.104 L1651.4 690.104 L1651.96 690.104 L1652.52 690.104 L1653.08 690.104 L1653.64 690.104 L1654.2 690.104 L1654.76 690.104 L1655.31 690.104 L1655.87 690.104 L1656.43 690.104 L1656.99 690.104 L1657.55 690.104 L1658.11 690.104 L1658.67 690.104 L1659.23 690.104 L1659.79 690.104 L1660.35 690.104 L1660.91 690.104 L1661.47 690.104 L1662.03 690.104 L1662.58 690.104 L1663.14 690.104 L1663.7 690.104 L1664.26 690.104 L1664.82 690.104 L1665.38 690.104 L1665.94 690.104 L1666.5 690.104 L1667.06 690.104 L1667.62 690.104 L1668.18 690.104 L1668.74 690.104 L1669.3 690.104 L1669.85 690.104 L1670.41 690.104 L1670.97 690.104 L1671.53 690.104 L1672.09 690.104 L1672.65 690.104 L1673.21 690.104 L1673.77 690.104 L1674.33 690.104 L1674.89 690.104 L1675.45 690.104 L1676.01 690.104 L1676.57 690.104 L1677.13 690.104 L1677.68 690.104 L1678.24 690.104 L1678.8 690.104 L1679.36 690.104 L1679.92 690.104 L1680.48 690.104 L1681.04 690.104 L1681.6 690.104 L1682.16 690.104 L1682.72 690.104 L1683.28 690.104 L1683.84 690.104 L1684.4 690.104 L1684.95 690.104 L1685.51 690.104 L1686.07 690.104 L1686.63 690.104 L1687.19 690.104 L1687.75 690.104 L1688.31 690.104 L1688.87 690.104 L1689.43 690.104 L1689.99 690.104 L1690.55 690.104 L1691.11 690.104 L1691.67 690.104 L1692.23 690.104 L1692.78 690.104 L1693.34 690.104 L1693.9 690.104 L1694.46 690.104 L1695.02 690.104 L1695.58 690.104 L1696.14 690.104 L1696.7 690.104 L1697.26 690.104 L1697.82 690.104 L1698.38 690.104 L1698.94 690.104 L1699.5 690.104 L1700.05 690.104 L1700.61 690.104 L1701.17 690.104 L1701.73 690.104 L1702.29 690.104 L1702.85 690.104 L1703.41 690.104 L1703.97 690.104 L1704.53 690.104 L1705.09 690.104 L1705.65 690.104 L1706.21 690.104 L1706.77 690.104 L1707.32 690.104 L1707.88 690.104 L1708.44 690.104 L1709 690.104 L1709.56 690.104 L1710.12 690.104 L1710.68 690.104 L1711.24 690.104 L1711.8 690.104 L1712.36 690.104 L1712.92 690.104 L1713.48 690.104 L1714.04 690.104 L1714.6 690.104 L1715.15 690.104 L1715.71 690.104 L1716.27 690.104 L1716.83 690.104 L1717.39 690.104 L1717.95 690.104 L1718.51 690.104 L1719.07 690.104 L1719.63 690.104 L1720.19 690.104 L1720.75 690.104 L1721.31 690.104 L1721.87 690.104 L1722.42 690.104 L1722.98 690.104 L1723.54 690.104 L1724.1 690.104 L1724.66 690.104 L1725.22 690.104 L1725.78 690.104 L1726.34 690.104 L1726.9 690.104 L1727.46 690.104 L1728.02 690.104 L1728.58 690.104 L1729.14 690.104 L1729.69 690.104 L1730.25 690.104 L1730.81 690.104 L1731.37 690.104 L1731.93 690.104 L1732.49 690.104 L1733.05 690.104 L1733.61 690.104 L1734.17 690.104 L1734.73 690.104 L1735.29 690.104 L1735.85 690.104 L1736.41 690.104 L1736.97 690.104 L1737.52 690.104 L1738.08 690.104 L1738.64 690.104 L1739.2 690.104 L1739.76 690.104 L1740.32 690.104 L1740.88 690.104 L1741.44 690.104 L1742 690.104 L1742.56 690.104 L1743.12 690.104 L1743.68 690.104 L1744.24 690.104 L1744.79 690.104 L1745.35 690.104 L1745.91 690.104 L1746.47 690.104 L1747.03 690.104 L1747.59 690.104 L1748.15 690.104 L1748.71 690.104 L1749.27 690.104 L1749.83 690.104 L1750.39 690.104 L1750.95 690.104 L1751.51 690.104 L1752.06 690.104 L1752.62 690.104 L1753.18 690.104 L1753.74 690.104 L1754.3 690.104 L1754.86 690.104 L1755.42 690.104 L1755.98 690.104 L1756.54 690.104 L1757.1 690.104 L1757.66 690.104 L1758.22 690.104 L1758.78 690.104 L1759.34 690.104 L1759.89 690.104 L1760.45 690.104 L1761.01 690.104 L1761.57 690.104 L1762.13 690.104 L1762.69 690.104 L1763.25 690.104 L1763.81 690.104 L1764.37 690.104 L1764.93 690.104 L1765.49 690.104 L1766.05 690.104 L1766.61 690.104 L1767.16 690.104 L1767.72 690.104 L1768.28 690.104 L1768.84 690.104 L1769.4 690.104 L1769.96 690.104 L1770.52 690.104 L1771.08 690.104 L1771.64 690.104 L1772.2 690.104 L1772.76 690.104 L1773.32 690.104 L1773.88 690.104 L1774.43 690.104 L1774.99 690.104 L1775.55 690.104 L1776.11 690.104 L1776.67 690.104 L1777.23 690.104 L1777.79 690.104 L1778.35 690.104 L1778.91 690.104 L1779.47 690.104 L1780.03 690.104 L1780.59 690.104 L1781.15 690.104 L1781.71 690.104 L1782.26 690.104 L1782.82 690.104 L1783.38 690.104 L1783.94 690.104 L1784.5 690.104 L1785.06 690.104 L1785.62 690.104 L1786.18 690.104 L1786.74 690.104 L1787.3 690.104 L1787.86 690.104 L1788.42 690.104 L1788.98 690.104 L1789.53 690.104 L1790.09 690.104 L1790.65 690.104 L1791.21 690.104 L1791.77 690.104 L1792.33 690.104 L1792.89 690.104 L1793.45 690.104 L1794.01 690.104 L1794.57 690.104 L1795.13 690.104 L1795.69 690.104 L1796.25 690.104 L1796.8 690.104 L1797.36 690.104 L1797.92 690.104 L1798.48 690.104 L1799.04 690.104 L1799.6 690.104 L1800.16 690.104 L1800.72 690.104 L1801.28 690.104 L1801.84 690.104 L1802.4 690.104 L1802.96 690.104 L1803.52 690.104 L1804.08 690.104 L1804.63 690.104 L1805.19 690.104 L1805.75 690.104 L1806.31 690.104 L1806.87 690.104 L1807.43 690.104 L1807.99 690.104 L1808.55 690.104 L1809.11 690.104 L1809.67 690.104 L1810.23 690.104 L1810.79 690.104 L1811.35 690.104 L1811.9 690.104 L1812.46 690.104 L1813.02 690.104 L1813.58 690.104 L1814.14 690.104 L1814.7 690.104 L1815.26 690.104 L1815.82 690.104 L1816.38 690.104 L1816.94 690.104 L1817.5 690.104 L1818.06 690.104 L1818.62 690.104 L1819.18 690.104 L1819.73 690.104 L1820.29 690.104 L1820.85 690.104 L1821.41 690.104 L1821.97 690.104 L1822.53 690.104 L1823.09 690.104 L1823.65 690.104 L1824.21 690.104 L1824.77 690.104 L1825.33 690.104 L1825.89 690.104 L1826.45 690.104 L1827 690.104 L1827.56 690.104 L1828.12 690.104 L1828.68 690.104 L1829.24 690.104 L1829.8 690.104 L1830.36 690.104 L1830.92 690.104 L1831.48 690.104 L1832.04 690.104 L1832.6 690.104 L1833.16 690.104 L1833.72 690.104 L1834.27 690.104 L1834.83 690.104 L1835.39 690.104 L1835.95 690.104 L1836.51 690.104 L1837.07 690.104 L1837.63 690.104 L1838.19 690.104 L1838.19 680.91 L1837.63 680.91 L1837.07 680.91 L1836.51 680.91 L1835.95 680.91 L1835.39 680.91 L1834.83 680.91 L1834.27 680.91 L1833.72 680.91 L1833.16 680.91 L1832.6 680.91 L1832.04 680.91 L1831.48 680.91 L1830.92 680.91 L1830.36 680.91 L1829.8 680.91 L1829.24 680.91 L1828.68 680.91 L1828.12 680.91 L1827.56 680.91 L1827 680.91 L1826.45 680.91 L1825.89 680.91 L1825.33 680.91 L1824.77 680.91 L1824.21 680.91 L1823.65 680.91 L1823.09 680.91 L1822.53 680.91 L1821.97 680.91 L1821.41 680.91 L1820.85 680.91 L1820.29 680.91 L1819.73 680.91 L1819.18 680.91 L1818.62 680.91 L1818.06 680.91 L1817.5 680.91 L1816.94 680.91 L1816.38 680.91 L1815.82 680.91 L1815.26 680.91 L1814.7 680.91 L1814.14 680.91 L1813.58 680.91 L1813.02 680.91 L1812.46 680.91 L1811.9 680.91 L1811.35 680.91 L1810.79 680.91 L1810.23 680.91 L1809.67 680.91 L1809.11 680.91 L1808.55 680.91 L1807.99 680.91 L1807.43 680.91 L1806.87 680.91 L1806.31 680.91 L1805.75 680.91 L1805.19 680.91 L1804.63 680.91 L1804.08 680.91 L1803.52 680.91 L1802.96 680.91 L1802.4 680.91 L1801.84 680.91 L1801.28 680.91 L1800.72 680.91 L1800.16 680.91 L1799.6 680.91 L1799.04 680.91 L1798.48 680.91 L1797.92 680.91 L1797.36 680.91 L1796.8 680.91 L1796.25 680.91 L1795.69 680.91 L1795.13 680.91 L1794.57 680.91 L1794.01 680.91 L1793.45 680.91 L1792.89 680.91 L1792.33 680.91 L1791.77 680.91 L1791.21 680.91 L1790.65 680.91 L1790.09 680.91 L1789.53 680.91 L1788.98 680.91 L1788.42 680.91 L1787.86 680.91 L1787.3 680.91 L1786.74 680.91 L1786.18 680.91 L1785.62 680.91 L1785.06 680.91 L1784.5 680.91 L1783.94 680.91 L1783.38 680.91 L1782.82 680.91 L1782.26 680.91 L1781.71 680.91 L1781.15 680.91 L1780.59 680.91 L1780.03 680.91 L1779.47 680.91 L1778.91 680.91 L1778.35 680.91 L1777.79 680.91 L1777.23 680.91 L1776.67 680.91 L1776.11 680.91 L1775.55 680.91 L1774.99 680.91 L1774.43 680.91 L1773.88 680.91 L1773.32 680.91 L1772.76 680.91 L1772.2 680.91 L1771.64 680.91 L1771.08 680.91 L1770.52 680.91 L1769.96 680.91 L1769.4 680.91 L1768.84 680.91 L1768.28 680.91 L1767.72 680.91 L1767.16 680.91 L1766.61 680.91 L1766.05 680.91 L1765.49 680.91 L1764.93 680.91 L1764.37 680.91 L1763.81 680.91 L1763.25 680.91 L1762.69 680.91 L1762.13 680.91 L1761.57 680.91 L1761.01 680.91 L1760.45 680.91 L1759.89 680.91 L1759.34 680.91 L1758.78 680.91 L1758.22 680.91 L1757.66 680.91 L1757.1 680.91 L1756.54 680.91 L1755.98 680.91 L1755.42 680.91 L1754.86 680.91 L1754.3 680.91 L1753.74 680.91 L1753.18 680.91 L1752.62 680.91 L1752.06 680.91 L1751.51 680.91 L1750.95 680.91 L1750.39 680.91 L1749.83 680.91 L1749.27 680.91 L1748.71 680.91 L1748.15 680.91 L1747.59 680.91 L1747.03 680.91 L1746.47 680.91 L1745.91 680.91 L1745.35 680.91 L1744.79 680.91 L1744.24 680.91 L1743.68 680.91 L1743.12 680.91 L1742.56 680.91 L1742 680.91 L1741.44 680.91 L1740.88 680.91 L1740.32 680.91 L1739.76 680.91 L1739.2 680.91 L1738.64 680.91 L1738.08 680.91 L1737.52 680.91 L1736.97 680.91 L1736.41 680.91 L1735.85 680.91 L1735.29 680.91 L1734.73 680.91 L1734.17 680.91 L1733.61 680.91 L1733.05 680.91 L1732.49 680.91 L1731.93 680.91 L1731.37 680.91 L1730.81 680.91 L1730.25 680.91 L1729.69 680.91 L1729.14 680.91 L1728.58 680.91 L1728.02 680.91 L1727.46 680.91 L1726.9 680.91 L1726.34 680.91 L1725.78 680.91 L1725.22 680.91 L1724.66 680.91 L1724.1 680.91 L1723.54 680.91 L1722.98 680.91 L1722.42 680.91 L1721.87 680.91 L1721.31 680.91 L1720.75 680.91 L1720.19 680.91 L1719.63 680.91 L1719.07 680.91 L1718.51 680.91 L1717.95 680.91 L1717.39 680.91 L1716.83 680.91 L1716.27 680.91 L1715.71 680.91 L1715.15 680.91 L1714.6 680.91 L1714.04 680.91 L1713.48 680.91 L1712.92 680.91 L1712.36 680.91 L1711.8 680.91 L1711.24 680.91 L1710.68 680.91 L1710.12 680.91 L1709.56 680.91 L1709 680.91 L1708.44 680.91 L1707.88 680.91 L1707.32 680.91 L1706.77 680.91 L1706.21 680.91 L1705.65 680.91 L1705.09 680.91 L1704.53 680.91 L1703.97 680.91 L1703.41 680.91 L1702.85 680.91 L1702.29 680.91 L1701.73 680.91 L1701.17 680.91 L1700.61 680.91 L1700.05 680.91 L1699.5 680.91 L1698.94 680.91 L1698.38 680.91 L1697.82 680.91 L1697.26 680.91 L1696.7 680.91 L1696.14 680.91 L1695.58 680.91 L1695.02 680.91 L1694.46 680.91 L1693.9 680.91 L1693.34 680.91 L1692.78 680.91 L1692.23 680.91 L1691.67 680.91 L1691.11 680.91 L1690.55 680.91 L1689.99 680.91 L1689.43 680.91 L1688.87 680.91 L1688.31 680.91 L1687.75 680.91 L1687.19 680.91 L1686.63 680.91 L1686.07 680.91 L1685.51 680.91 L1684.95 680.91 L1684.4 680.91 L1683.84 680.91 L1683.28 680.91 L1682.72 680.91 L1682.16 680.91 L1681.6 680.91 L1681.04 680.91 L1680.48 680.91 L1679.92 680.91 L1679.36 680.91 L1678.8 680.91 L1678.24 680.91 L1677.68 680.91 L1677.13 680.91 L1676.57 680.91 L1676.01 680.91 L1675.45 680.91 L1674.89 680.91 L1674.33 680.91 L1673.77 680.91 L1673.21 680.91 L1672.65 680.91 L1672.09 680.91 L1671.53 680.91 L1670.97 680.91 L1670.41 680.91 L1669.85 680.91 L1669.3 680.91 L1668.74 680.91 L1668.18 680.91 L1667.62 680.91 L1667.06 680.91 L1666.5 680.91 L1665.94 680.91 L1665.38 680.91 L1664.82 680.91 L1664.26 680.91 L1663.7 680.91 L1663.14 680.91 L1662.58 680.91 L1662.03 680.91 L1661.47 680.91 L1660.91 680.91 L1660.35 680.91 L1659.79 680.91 L1659.23 680.91 L1658.67 680.91 L1658.11 680.91 L1657.55 680.91 L1656.99 680.91 L1656.43 680.91 L1655.87 680.91 L1655.31 680.91 L1654.76 680.91 L1654.2 680.91 L1653.64 680.91 L1653.08 680.91 L1652.52 680.91 L1651.96 680.91 L1651.4 680.91 L1650.84 680.91 L1650.28 680.91 L1649.72 680.91 L1649.16 680.91 L1648.6 680.91 L1648.04 680.91 L1647.48 680.91 L1646.93 680.91 L1646.37 680.91 L1645.81 680.91 L1645.25 680.91 L1644.69 680.91 L1644.13 680.91 L1643.57 680.91 L1643.01 680.91 L1642.45 680.91 L1641.89 680.91 L1641.33 680.91 L1640.77 680.91 L1640.21 680.91 L1639.66 680.91 L1639.1 680.91 L1638.54 680.91 L1637.98 680.91 L1637.42 680.91 L1636.86 680.91 L1636.3 680.91 L1635.74 680.91 L1635.18 680.91 L1634.62 680.91 L1634.06 680.91 L1633.5 680.91 L1632.94 680.91 L1632.39 680.91 L1631.83 680.91 L1631.27 680.91 L1630.71 680.91 L1630.15 680.91 L1629.59 680.91 L1629.03 680.91 L1628.47 680.91 L1627.91 680.91 L1627.35 680.91 L1626.79 680.91 L1626.23 680.91 L1625.67 680.91 L1625.11 680.91 L1624.56 680.91 L1624 680.91 L1623.44 680.91 L1622.88 680.91 L1622.32 680.91 L1621.76 680.91 L1621.2 680.91 L1620.64 680.91 L1620.08 680.91 L1619.52 680.91 L1618.96 680.91 L1618.4 680.91 L1617.84 680.91 L1617.29 680.91 L1616.73 680.91 L1616.17 680.91 L1615.61 680.91 L1615.05 680.91 L1614.49 680.91 L1613.93 680.91 L1613.37 680.91 L1612.81 680.91 L1612.25 680.91 L1611.69 680.91 L1611.13 680.91 L1610.57 680.91 L1610.02 680.91 L1609.46 680.91 L1608.9 680.91 L1608.34 680.91 L1607.78 680.91 L1607.22 680.91 L1606.66 680.91 L1606.1 680.91 L1605.54 680.91 L1604.98 680.91 L1604.42 680.91 L1603.86 680.91 L1603.3 680.91 L1602.74 680.91 L1602.19 680.91 L1601.63 680.91 L1601.07 680.91 L1600.51 680.91 L1599.95 680.91 L1599.39 680.91 L1598.83 680.91 L1598.27 680.91 L1597.71 680.91 L1597.15 680.91 L1596.59 680.91 L1596.03 680.91 L1595.47 680.91 L1594.92 680.91 L1594.36 680.91 L1593.8 680.91 L1593.24 680.91 L1592.68 680.91 L1592.12 680.91 L1591.56 680.91 L1591 680.91 L1590.44 680.91 L1589.88 680.91 L1589.32 680.91 L1588.76 680.91 L1588.2 680.91 L1587.65 680.91 L1587.09 680.91 L1586.53 680.91 L1585.97 680.91 L1585.41 680.91 L1584.85 680.91 L1584.29 680.91 L1583.73 680.91 L1583.17 680.91 L1582.61 680.91 L1582.05 680.91 L1581.49 680.91 L1580.93 680.91 L1580.37 680.91 L1579.82 680.91 L1579.26 680.91 L1578.7 680.91 L1578.14 680.91 L1577.58 680.91 L1577.02 680.91 L1576.46 680.91 L1575.9 680.91 L1575.34 680.91 L1574.78 680.91 L1574.22 680.91 L1573.66 680.91 L1573.1 680.91 L1572.55 680.91 L1571.99 680.91 L1571.43 680.91 L1570.87 680.91 L1570.31 680.91 L1569.75 680.91 L1569.19 680.91 L1568.63 680.91 L1568.07 680.91 L1567.51 680.91 L1566.95 680.91 L1566.39 680.91 L1565.83 680.91 L1565.28 680.91 L1564.72 680.91 L1564.16 680.91 L1563.6 680.91 L1563.04 680.91 L1562.48 680.91 L1561.92 680.91 L1561.36 680.91 L1560.8 680.91 L1560.24 680.91 L1559.68 680.91 L1559.12 680.91 L1558.56 680.91 L1558 680.91 L1557.45 680.91 L1556.89 680.91 L1556.33 680.91 L1555.77 680.91 L1555.21 680.91 L1554.65 680.91 L1554.09 680.91 L1553.53 680.91 L1552.97 680.91 L1552.41 680.91 L1551.85 680.91 L1551.29 680.91 L1550.73 680.91 L1550.18 680.91 L1549.62 680.91 L1549.06 680.91 L1548.5 680.91 L1547.94 680.91 L1547.38 680.91 L1546.82 680.91 L1546.26 680.91 L1545.7 680.91 L1545.14 680.91 L1544.58 680.91 L1544.02 680.91 L1543.46 680.91 L1542.9 680.91 L1542.35 680.91 L1541.79 680.91 L1541.23 680.91 L1540.67 680.91 L1540.11 680.91 L1539.55 680.91 L1538.99 680.91 L1538.43 680.91 L1537.87 680.91 L1537.31 680.91 L1536.75 680.91 L1536.19 680.91 L1535.63 680.91 L1535.08 680.91 L1534.52 680.91 L1533.96 680.91 L1533.4 680.91 L1532.84 680.91 L1532.28 680.91 L1531.72 680.91 L1531.16 680.91 L1530.6 680.91 L1530.04 680.91 L1529.48 680.91 L1528.92 680.91 L1528.36 680.91 L1527.81 680.91 L1527.25 680.91 L1526.69 680.91 L1526.13 680.91 L1525.57 680.91 L1525.01 680.91 L1524.45 680.91 L1523.89 680.91 L1523.33 680.91 L1522.77 680.91 L1522.21 680.91 L1521.65 680.91 L1521.09 680.91 L1520.53 680.91 L1519.98 680.91 L1519.42 680.91 L1518.86 680.91 L1518.3 680.91 L1517.74 680.91 L1517.18 680.91 L1516.62 680.91 L1516.06 680.91 L1515.5 680.91 L1514.94 680.91 L1514.38 680.91 L1513.82 680.91 L1513.26 680.91 L1512.71 680.91 L1512.15 680.91 L1511.59 680.91 L1511.03 680.91 L1510.47 680.91 L1509.91 680.91 L1509.35 680.91 L1508.79 680.91 L1508.23 680.91 L1507.67 680.91 L1507.11 680.91 L1506.55 680.91 L1505.99 680.91 L1505.44 680.91 L1504.88 680.91 L1504.32 680.91 L1503.76 680.91 L1503.2 680.91 L1502.64 680.91 L1502.08 680.91 L1501.52 680.91 L1500.96 680.91 L1500.4 680.91 L1499.84 680.91 L1499.28 680.91 L1498.72 680.91 L1498.16 680.91 L1497.61 680.91 L1497.05 680.91 L1496.49 680.91 L1495.93 680.91 L1495.37 680.91 L1494.81 680.91 L1494.25 680.91 L1493.69 680.91 L1493.13 680.91 L1492.57 680.91 L1492.01 680.91 L1491.45 680.91 L1490.89 680.91 L1490.34 680.91 L1489.78 680.91 L1489.22 680.91 L1488.66 680.91 L1488.1 680.91 L1487.54 680.91 L1486.98 680.91 L1486.42 680.91 L1485.86 680.91 L1485.3 680.91 L1484.74 680.91 L1484.18 680.91 L1483.62 680.91 L1483.07 680.91 L1482.51 680.91 L1481.95 680.91 L1481.39 680.91 L1480.83 680.91 L1480.27 680.91 L1479.71 680.91 L1479.15 680.91 L1478.59 680.91 L1478.03 680.91 L1477.47 680.91 L1476.91 680.91 L1476.35 680.91 L1475.79 680.91 L1475.24 680.91 L1474.68 680.91 L1474.12 680.91 L1473.56 680.91 L1473 680.91 L1472.44 680.91 L1471.88 680.91 L1471.32 680.91 L1470.76 680.91 L1470.2 680.91 L1469.64 680.91 L1469.08 680.91 L1468.52 680.91 L1467.97 680.91 L1467.41 680.91 L1466.85 680.91 L1466.29 680.91 L1465.73 680.91 L1465.17 680.91 L1464.61 680.91 L1464.05 680.91 L1463.49 680.91 L1462.93 680.91 L1462.37 680.91 L1461.81 680.91 L1461.25 680.91 L1460.7 680.91 L1460.14 680.91 L1459.58 680.91 L1459.02 680.91 L1458.46 680.91 L1457.9 680.91 L1457.34 680.91 L1456.78 680.91 L1456.22 680.91 L1455.66 680.91 L1455.1 680.91 L1454.54 680.91 L1453.98 680.91 L1453.42 680.91 L1452.87 680.91 L1452.31 680.91 L1451.75 680.91 L1451.19 680.91 L1450.63 680.91 L1450.07 680.91 L1449.51 680.91 L1448.95 680.91 L1448.39 680.91 L1447.83 680.91 L1447.27 680.91 L1446.71 680.91 L1446.15 680.91 L1445.6 680.91 L1445.04 680.91 L1444.48 680.91 L1443.92 680.91 L1443.36 680.91 L1442.8 680.91 L1442.24 680.91 L1441.68 680.91 L1441.12 680.91 L1440.56 680.91 L1440 680.91 L1439.44 680.91 L1438.88 680.91 L1438.33 680.91 L1437.77 680.91 L1437.21 680.91 L1436.65 680.91 L1436.09 680.91 L1435.53 680.91 L1434.97 680.91 L1434.41 680.91 L1433.85 680.91 L1433.29 680.91 L1432.73 680.91 L1432.17 680.91 L1431.61 680.91 L1431.05 680.91 L1430.5 680.91 L1429.94 680.91 L1429.38 680.91 L1428.82 680.91 L1428.26 680.91 L1427.7 680.91 L1427.14 680.91 L1426.58 680.91 L1426.02 680.91 L1425.46 680.91 L1424.9 680.91 L1424.34 680.91 L1423.78 680.91 L1423.23 680.91 L1422.67 680.91 L1422.11 680.91 L1421.55 680.91 L1420.99 680.91 L1420.43 680.91 L1419.87 680.91 L1419.31 680.91 L1418.75 680.91 L1418.19 680.91 L1417.63 680.91 L1417.07 680.91 L1416.51 680.91 L1415.95 680.91 L1415.4 680.91 L1414.84 680.91 L1414.28 680.91 L1413.72 680.91 L1413.16 680.91 L1412.6 680.91 L1412.04 680.91 L1411.48 680.91 L1410.92 680.91 L1410.36 680.91 L1409.8 680.91 L1409.24 680.91 L1408.68 680.91 L1408.13 680.91 L1407.57 680.91 L1407.01 680.91 L1406.45 680.91 L1405.89 680.91 L1405.33 680.91 L1404.77 680.91 L1404.21 680.91 L1403.65 680.91 L1403.09 680.91 L1402.53 680.91 L1401.97 680.91 L1401.41 680.91 L1400.86 680.91 L1400.3 680.91 L1399.74 680.91 L1399.18 680.91 L1398.62 680.91 L1398.06 680.91 L1397.5 680.91 L1396.94 680.91 L1396.38 680.91 L1395.82 680.91 L1395.26 680.91 L1394.7 680.91 L1394.14 680.91 L1393.58 680.91 L1393.03 680.91 L1392.47 680.91 L1391.91 680.91 L1391.35 680.91 L1390.79 680.91 L1390.23 680.91 L1389.67 680.91 L1389.11 680.91 L1388.55 680.91 L1387.99 680.91 L1387.43 680.91 L1386.87 680.91 L1386.31 680.91 L1385.76 680.91 L1385.2 680.91 L1384.64 680.91 L1384.08 680.91 L1383.52 680.91 L1382.96 680.91 L1382.4 680.91 L1381.84 680.91 L1381.28 680.91 L1380.72 680.91 L1380.16 680.91 L1379.6 680.91 L1379.04 680.91 L1378.49 680.91 L1377.93 680.91 L1377.37 680.91 L1376.81 680.91 L1376.25 680.91 L1375.69 680.91 L1375.13 680.91 L1374.57 680.91 L1374.01 680.91 L1373.45 680.91 L1372.89 680.91 L1372.33 680.91 L1371.77 680.91 L1371.21 680.91 L1370.66 680.91 L1370.1 680.91 L1369.54 680.91 L1368.98 680.91 L1368.42 680.91 L1367.86 680.91 L1367.3 680.91 L1366.74 680.91 L1366.18 680.91 L1365.62 680.91 L1365.06 680.91 L1364.5 680.91 L1363.94 680.91 L1363.39 680.91 L1362.83 680.91 L1362.27 680.91 L1361.71 680.91 L1361.15 680.91 L1360.59 680.91 L1360.03 680.91 L1359.47 680.91 L1358.91 680.91 L1358.35 680.91 L1357.79 680.91 L1357.23 680.91 L1356.67 680.91 L1356.12 680.91 L1355.56 680.91 L1355 680.91 L1354.44 680.91 L1353.88 680.91 L1353.32 680.91 L1352.76 680.91 L1352.2 680.91 L1351.64 680.91 L1351.08 680.91 L1350.52 680.91 L1349.96 680.91 L1349.4 680.91 L1348.84 680.91 L1348.29 680.91 L1347.73 680.91 L1347.17 680.91 L1346.61 680.91 L1346.05 680.91 L1345.49 680.91 L1344.93 680.91 L1344.37 680.91 L1343.81 680.91 L1343.25 680.91 L1342.69 680.91 L1342.13 680.91 L1341.57 680.91 L1341.02 680.91 L1340.46 680.91 L1339.9 680.91 L1339.34 680.91 L1338.78 680.91 L1338.22 680.91 L1337.66 680.91 L1337.1 680.91 L1336.54 680.91 L1335.98 680.91 L1335.42 680.91 L1334.86 680.91 L1334.3 680.91 L1333.75 680.91 L1333.19 680.91 L1332.63 680.91 L1332.07 680.91 L1331.51 680.91 L1330.95 680.91 L1330.39 680.91 L1329.83 680.91 L1329.27 680.91 L1328.71 680.91 L1328.15 680.91 L1327.59 680.91 L1327.03 680.91 L1326.47 680.91 L1325.92 680.91 L1325.36 680.91 L1324.8 680.91 L1324.24 680.91 L1323.68 680.91 L1323.12 680.91 L1322.56 680.91 L1322 680.91 L1321.44 680.91 L1320.88 680.91 L1320.32 680.91 L1319.76 680.91 L1319.2 680.91 L1318.65 680.91 L1318.09 680.91 L1317.53 680.91 L1316.97 680.91 L1316.41 680.91 L1315.85 680.91 L1315.29 680.91 L1314.73 680.91 L1314.17 680.91 L1313.61 680.91 L1313.05 680.91 L1312.49 680.91 L1311.93 680.91 L1311.38 680.91 L1310.82 680.91 L1310.26 680.91 L1309.7 680.91 L1309.14 680.91 L1308.58 680.91 L1308.02 680.91 L1307.46 680.91 L1306.9 680.91 L1306.34 680.91 L1305.78 680.91 L1305.22 680.91 L1304.66 680.91 L1304.1 680.91 L1303.55 680.91 L1302.99 680.91 L1302.43 680.91 L1301.87 680.91 L1301.31 680.91 L1300.75 680.91 L1300.19 680.91 L1299.63 680.91 L1299.07 680.91 L1298.51 680.91 L1297.95 680.91 L1297.39 680.91 L1296.83 680.91 L1296.28 680.91 L1295.72 680.91 L1295.16 680.91 L1294.6 680.91 L1294.04 680.91 L1293.48 680.91 L1292.92 680.91 L1292.36 680.91 L1291.8 680.91 L1291.24 680.91 L1290.68 680.91 L1290.12 680.91 L1289.56 680.91 L1289 680.91 L1288.45 680.91 L1287.89 680.91 L1287.33 680.91 L1286.77 680.91 L1286.21 680.91 L1285.65 680.91 L1285.09 680.91 L1284.53 680.91 L1283.97 680.91 L1283.41 680.91 L1282.85 680.91 L1282.29 680.91 L1281.73 680.91 L1281.18 680.91 L1280.62 680.91 L1280.06 680.91 L1279.5 680.91 L1278.94 680.91 L1278.38 680.91 L1277.82 680.91 L1277.26 680.91 L1276.7 680.91 L1276.14 680.91 L1275.58 680.91 L1275.02 680.91 L1274.46 680.91 L1273.91 680.91 L1273.35 680.91 L1272.79 680.91 L1272.23 680.91 L1271.67 680.91 L1271.11 680.91 L1270.55 680.91 L1269.99 680.91 L1269.43 680.91 L1268.87 680.91 L1268.31 680.91 L1267.75 680.91 L1267.19 680.91 L1266.63 680.91 L1266.08 680.91 L1265.52 680.91 L1264.96 680.91 L1264.4 680.91 L1263.84 680.91 L1263.28 680.91 L1262.72 680.91 L1262.16 680.91 L1261.6 680.91 L1261.04 680.91 L1260.48 680.91 L1259.92 680.91 L1259.36 680.91 L1258.81 680.91 L1258.25 680.91 L1257.69 680.91 L1257.13 680.91 L1256.57 680.91 L1256.01 680.91 L1255.45 680.91 L1254.89 680.91 L1254.33 680.91 L1253.77 680.91 L1253.21 680.91 L1252.65 680.91 L1252.09 680.91 L1251.54 680.91 L1250.98 680.91 L1250.42 680.91 L1249.86 680.91 L1249.3 680.91 L1248.74 680.91 L1248.18 680.91 L1247.62 680.91 L1247.06 680.91 L1246.5 680.91 L1245.94 680.91 L1245.38 680.91 L1244.82 680.91 L1244.26 680.91 L1243.71 680.91 L1243.15 680.91 L1242.59 680.91 L1242.03 680.91 L1241.47 680.91 L1240.91 680.91 L1240.35 680.91 L1239.79 680.91 L1239.23 680.91 L1238.67 680.91 L1238.11 680.91 L1237.55 680.91 L1236.99 680.91 L1236.44 680.91 L1235.88 680.91 L1235.32 680.91 L1234.76 680.91 L1234.2 680.91 L1233.64 680.91 L1233.08 680.91 L1232.52 680.91 L1231.96 680.91 L1231.4 680.91 L1230.84 680.91 L1230.28 680.91 L1229.72 680.91 L1229.17 680.91 L1228.61 680.91 L1228.05 680.91 L1227.49 680.91 L1226.93 680.91 L1226.37 680.91 L1225.81 680.91 L1225.25 680.91 L1224.69 680.91 L1224.13 680.91 L1223.57 680.91 L1223.01 680.91 L1222.45 680.91 L1221.89 680.91 L1221.34 680.91 L1220.78 680.91 L1220.22 680.91 L1219.66 680.91 L1219.1 680.91 L1218.54 680.91 L1217.98 680.91 L1217.42 680.91 L1216.86 680.91 L1216.3 680.91 L1215.74 680.91 L1215.18 680.91 L1214.62 680.91 L1214.07 680.91 L1213.51 680.91 L1212.95 680.91 L1212.39 680.91 L1211.83 680.91 L1211.27 680.91 L1210.71 680.91 L1210.15 680.91 L1209.59 680.91 L1209.03 680.91 L1208.47 680.91 L1207.91 680.91 L1207.35 680.91 L1206.8 680.91 L1206.24 680.91 L1205.68 680.91 L1205.12 680.91 L1204.56 680.91 L1204 680.91 L1203.44 680.91 L1202.88 680.91 L1202.32 680.91 L1201.76 680.91 L1201.2 680.91 L1200.64 680.91 L1200.08 680.91 L1199.52 680.91 L1198.97 680.91 L1198.41 680.91 L1197.85 680.91 L1197.29 680.91 L1196.73 680.91 L1196.17 680.91 L1195.61 680.91 L1195.05 680.91 L1194.49 680.91 L1193.93 680.91 L1193.37 680.91 L1192.81 680.91 L1192.25 680.91 L1191.7 680.91 L1191.14 680.91 L1190.58 680.91 L1190.02 680.91 L1189.46 680.91 L1188.9 680.91 L1188.34 680.91 L1187.78 680.91 L1187.22 680.91 L1186.66 680.91 L1186.1 680.91 L1185.54 680.91 L1184.98 680.91 L1184.43 680.91 L1183.87 680.91 L1183.31 680.91 L1182.75 680.91 L1182.19 680.91 L1181.63 680.91 L1181.07 680.91 L1180.51 680.91 L1179.95 680.91 L1179.39 680.91 L1178.83 680.91 L1178.27 680.91 L1177.71 680.91 L1177.15 680.91 L1176.6 680.91 L1176.04 680.91 L1175.48 680.91 L1174.92 680.91 L1174.36 680.91 L1173.8 680.91 L1173.24 680.91 L1172.68 680.91 L1172.12 680.91 L1171.56 680.91 L1171 680.91 L1170.44 680.91 L1169.88 680.91 L1169.33 680.91 L1168.77 680.91 L1168.21 680.91 L1167.65 680.91 L1167.09 680.91 L1166.53 680.91 L1165.97 680.91 L1165.41 680.91 L1164.85 680.91 L1164.29 680.91 L1163.73 680.91 L1163.17 680.91 L1162.61 680.91 L1162.05 680.91 L1161.5 680.91 L1160.94 680.91 L1160.38 680.91 L1159.82 680.91 L1159.26 680.91 L1158.7 680.91 L1158.14 680.91 L1157.58 680.91 L1157.02 680.91 L1156.46 680.91 L1155.9 680.91 L1155.34 680.91 L1154.78 680.91 L1154.23 680.91 L1153.67 680.91 L1153.11 680.91 L1152.55 680.91 L1151.99 680.91 L1151.43 680.91 L1150.87 680.91 L1150.31 680.91 L1149.75 680.91 L1149.19 680.91 L1148.63 680.91 L1148.07 680.91 L1147.51 680.91 L1146.96 680.91 L1146.4 680.91 L1145.84 680.91 L1145.28 680.91 L1144.72 680.91 L1144.16 680.91 L1143.6 680.91 L1143.04 680.91 L1142.48 680.91 L1141.92 680.91 L1141.36 680.91 L1140.8 680.91 L1140.24 680.91 L1139.68 680.91 L1139.13 680.91 L1138.57 680.91 L1138.01 680.91 L1137.45 680.91 L1136.89 680.91 L1136.33 680.91 L1135.77 680.91 L1135.21 680.91 L1134.65 680.91 L1134.09 680.91 L1133.53 680.91 L1132.97 680.91 L1132.41 680.91 L1131.86 680.91 L1131.3 680.91 L1130.74 680.91 L1130.18 680.91 L1129.62 680.91 L1129.06 680.91 L1128.5 680.91 L1127.94 680.91 L1127.38 680.91 L1126.82 680.91 L1126.26 680.91 L1125.7 680.91 L1125.14 680.91 L1124.59 680.91 L1124.03 680.91 L1123.47 680.91 L1122.91 680.91 L1122.35 680.91 L1121.79 680.91 L1121.23 680.91 L1120.67 680.91 L1120.11 680.91 L1119.55 680.91 L1118.99 680.91 L1118.43 680.91 L1117.87 680.91 L1117.31 680.91 L1116.76 680.91 L1116.2 680.91 L1115.64 680.91 L1115.08 680.91 L1114.52 680.91 L1113.96 680.91 L1113.4 680.91 L1112.84 680.91 L1112.28 680.91 L1111.72 680.91 L1111.16 680.91 L1110.6 680.91 L1110.04 680.91 L1109.49 680.91 L1108.93 680.91 L1108.37 680.91 L1107.81 680.91 L1107.25 680.91 L1106.69 680.91 L1106.13 680.91 L1105.57 680.91 L1105.01 680.91 L1104.45 680.91 L1103.89 680.91 L1103.33 680.91 L1102.77 680.91 L1102.22 680.91 L1101.66 680.91 L1101.1 680.91 L1100.54 680.91 L1099.98 680.91 L1099.42 680.91 L1098.86 680.91 L1098.3 680.91 L1097.74 680.91 L1097.18 680.91 L1096.62 680.91 L1096.06 680.91 L1095.5 680.91 L1094.94 680.91 L1094.39 680.91 L1093.83 680.91 L1093.27 680.91 L1092.71 680.91 L1092.15 680.91 L1091.59 680.91 L1091.03 680.91 L1090.47 680.91 L1089.91 680.91 L1089.35 680.91 L1088.79 680.91 L1088.23 680.91 L1087.67 680.91 L1087.12 680.91 L1086.56 680.91 L1086 680.91 L1085.44 680.91 L1084.88 680.91 L1084.32 680.91 L1083.76 680.91 L1083.2 680.91 L1082.64 680.91 L1082.08 680.91 L1081.52 680.91 L1080.96 680.91 L1080.4 680.91 L1079.85 680.91 L1079.29 680.91 L1078.73 680.91 L1078.17 680.91 L1077.61 680.91 L1077.05 680.91 L1076.49 680.91 L1075.93 680.91 L1075.37 680.91 L1074.81 680.91 L1074.25 680.91 L1073.69 680.91 L1073.13 680.91 L1072.57 680.91 L1072.02 680.91 L1071.46 680.91 L1070.9 680.91 L1070.34 680.91 L1069.78 680.91 L1069.22 680.91 L1068.66 680.91 L1068.1 680.91 L1067.54 680.91 L1066.98 680.91 L1066.42 680.91 L1065.86 680.91 L1065.3 680.91 L1064.75 680.91 L1064.19 680.91 L1063.63 680.91 L1063.07 680.91 L1062.51 680.91 L1061.95 680.91 L1061.39 680.91 L1060.83 680.91 L1060.27 680.91 L1059.71 680.91 L1059.15 680.91 L1058.59 680.91 L1058.03 680.91 L1057.48 680.91 L1056.92 680.91 L1056.36 680.91 L1055.8 680.91 L1055.24 680.91 L1054.68 680.91 L1054.12 680.91 L1053.56 680.91 L1053 680.91 L1052.44 680.91 L1051.88 680.91 L1051.32 680.91 L1050.76 680.91 L1050.2 680.91 L1049.65 680.91 L1049.09 680.91 L1048.53 680.91 L1047.97 680.91 L1047.41 680.91 L1046.85 680.91 L1046.29 680.91 L1045.73 680.91 L1045.17 680.91 L1044.61 680.91 L1044.05 680.91 L1043.49 680.91 L1042.93 680.91 L1042.38 680.91 L1041.82 680.91 L1041.26 680.91 L1040.7 680.91 L1040.14 680.91 L1039.58 680.91 L1039.02 680.91 L1038.46 680.91 L1037.9 680.91 L1037.34 680.91 L1036.78 680.91 L1036.22 680.91 L1035.66 680.91 L1035.1 680.91 L1034.55 680.91 L1033.99 680.91 L1033.43 680.91 L1032.87 680.91 L1032.31 680.91 L1031.75 680.91 L1031.19 680.91 L1030.63 680.91 L1030.07 680.91 L1029.51 680.91 L1028.95 680.91 L1028.39 680.91 L1027.83 680.91 L1027.28 680.91 L1026.72 680.91 L1026.16 680.91 L1025.6 680.91 L1025.04 680.91 L1024.48 680.91 L1023.92 680.91 L1023.36 680.91 L1022.8 680.91 L1022.24 680.91 L1021.68 680.91 L1021.12 680.91 L1020.56 680.91 L1020.01 680.91 L1019.45 680.91 L1018.89 680.91 L1018.33 680.91 L1017.77 680.91 L1017.21 680.91 L1016.65 680.91 L1016.09 680.91 L1015.53 680.91 L1014.97 680.91 L1014.41 680.91 L1013.85 680.91 L1013.29 680.91 L1012.73 680.91 L1012.18 680.91 L1011.62 680.91 L1011.06 680.91 L1010.5 680.91 L1009.94 680.91 L1009.38 680.91 L1008.82 680.91 L1008.26 680.91 L1007.7 680.91 L1007.14 680.91 L1006.58 680.91 L1006.02 680.91 L1005.46 680.91 L1004.91 680.91 L1004.35 680.91 L1003.79 680.91 L1003.23 680.91 L1002.67 680.91 L1002.11 680.91 L1001.55 680.91 L1000.99 680.91 L1000.43 680.91 L999.872 680.91 L999.313 680.91 L998.754 680.91 L998.194 680.91 L997.635 680.91 L997.076 680.91 L996.517 680.91 L995.957 680.91 L995.398 680.91 L994.839 680.91 L994.28 680.91 L993.72 680.91 L993.161 680.91 L992.602 680.91 L992.043 680.91 L991.483 680.91 L990.924 680.91 L990.365 680.91 L989.806 680.91 L989.246 680.91 L988.687 680.91 L988.128 680.91 L987.569 680.91 L987.009 680.91 L986.45 680.91 L985.891 680.91 L985.332 680.91 L984.772 680.91 L984.213 680.91 L983.654 680.91 L983.095 680.91 L982.535 680.91 L981.976 680.91 L981.417 680.91 L980.858 680.91 L980.298 680.91 L979.739 680.91 L979.18 680.91 L978.621 680.91 L978.061 680.91 L977.502 680.91 L976.943 680.91 L976.384 680.91 L975.824 680.91 L975.265 680.91 L974.706 680.91 L974.147 680.91 L973.587 680.91 L973.028 680.91 L972.469 680.91 L971.91 680.91 L971.35 680.91 L970.791 680.91 L970.232 680.91 L969.673 680.91 L969.113 680.91 L968.554 680.91 L967.995 680.91 L967.436 680.91 L966.876 680.91 L966.317 680.91 L965.758 680.91 L965.199 680.91 L964.639 680.91 L964.08 680.91 L963.521 680.91 L962.962 680.91 L962.402 680.91 L961.843 680.91 L961.284 680.91 L960.725 680.91 L960.165 680.91 L959.606 680.91 L959.047 680.91 L958.488 680.91 L957.928 680.91 L957.369 680.91 L956.81 680.91 L956.251 680.91 L955.691 680.91 L955.132 680.91 L954.573 680.91 L954.014 680.91 L953.454 680.91 L952.895 680.91 L952.336 680.91 L951.777 680.91 L951.217 680.91 L950.658 680.91 L950.099 680.91 L949.54 680.91 L948.98 680.91 L948.421 680.91 L947.862 680.91 L947.303 680.91 L946.743 680.91 L946.184 680.91 L945.625 680.91 L945.066 680.91 L944.506 680.91 L943.947 680.91 L943.388 680.91 L942.829 680.91 L942.269 680.91 L941.71 680.91 L941.151 680.91 L940.592 680.91 L940.032 680.91 L939.473 680.91 L938.914 680.91 L938.355 680.91 L937.795 680.91 L937.236 680.91 L936.677 680.91 L936.118 680.91 L935.558 680.91 L934.999 680.91 L934.44 680.91 L933.881 680.91 L933.321 680.91 L932.762 680.91 L932.203 680.91 L931.644 680.91 L931.084 680.91 L930.525 680.91 L929.966 680.91 L929.406 680.91 L928.847 680.91 L928.288 680.91 L927.729 680.91 L927.169 680.91 L926.61 680.91 L926.051 680.91 L925.492 680.91 L924.932 680.91 L924.373 680.91 L923.814 680.91 L923.255 680.91 L922.695 680.91 L922.136 680.91 L921.577 680.91 L921.018 680.91 L920.458 680.91 L919.899 680.91 L919.34 680.91 L918.781 680.91 L918.221 680.91 L917.662 680.91 L917.103 680.91 L916.544 680.91 L915.984 680.91 L915.425 680.91 L914.866 680.91 L914.307 680.91 L913.747 680.91 L913.188 680.91 L912.629 680.91 L912.07 680.91 L911.51 680.91 L910.951 680.91 L910.392 680.91 L909.833 680.91 L909.273 680.91 L908.714 680.91 L908.155 680.91 L907.596 680.91 L907.036 680.91 L906.477 680.91 L905.918 680.91 L905.359 680.91 L904.799 680.91 L904.24 680.91 L903.681 680.91 L903.122 680.91 L902.562 680.91 L902.003 680.91 L901.444 680.91 L900.885 680.91 L900.325 680.91 L899.766 680.91 L899.207 680.91 L898.648 680.91 L898.088 680.91 L897.529 680.91 L896.97 680.91 L896.411 680.91 L895.851 680.91 L895.292 680.91 L894.733 680.91 L894.174 680.91 L893.614 680.91 L893.055 680.91 L892.496 680.91 L891.937 680.91 L891.377 680.91 L890.818 680.91 L890.259 680.91 L889.7 680.91 L889.14 680.91 L888.581 680.91 L888.022 680.91 L887.463 680.91 L886.903 680.91 L886.344 680.91 L885.785 680.91 L885.226 680.91 L884.666 680.91 L884.107 680.91 L883.548 680.91 L882.989 680.91 L882.429 680.91 L881.87 680.91 L881.311 680.91 L880.752 680.91 L880.192 680.91 L879.633 680.91 L879.074 680.91 L878.515 680.91 L877.955 680.91 L877.396 680.91 L876.837 680.91 L876.278 680.91 L875.718 680.91 L875.159 680.91 L874.6 680.91 L874.041 680.91 L873.481 680.91 L872.922 680.91 L872.363 680.91 L871.804 680.91 L871.244 680.91 L870.685 680.91 L870.126 680.91 L869.567 680.91 L869.007 680.91 L868.448 680.91 L867.889 680.91 L867.33 680.91 L866.77 680.91 L866.211 680.91 L865.652 680.91 L865.093 680.91 L864.533 680.91 L863.974 680.91 L863.415 680.91 L862.856 680.91 L862.296 680.91 L861.737 680.91 L861.178 680.91 L860.619 680.91 L860.059 680.91 L859.5 680.91 L858.941 680.91 L858.382 680.91 L857.822 680.91 L857.263 680.91 L856.704 680.91 L856.145 680.91 L855.585 680.91 L855.026 680.91 L854.467 680.91 L853.908 680.91 L853.348 680.91 L852.789 680.91 L852.23 680.91 L851.671 680.91 L851.111 680.91 L850.552 680.91 L849.993 680.91 L849.434 680.91 L848.874 680.91 L848.315 680.91 L847.756 680.91 L847.197 680.91 L846.637 680.91 L846.078 680.91 L845.519 680.91 L844.96 680.91 L844.4 680.91 L843.841 680.91 L843.282 680.91 L842.723 680.91 L842.163 680.91 L841.604 680.91 L841.045 680.91 L840.486 680.91 L839.926 680.91 L839.367 680.91 L838.808 680.91 L838.249 680.91 L837.689 680.91 L837.13 680.91 L836.571 680.91 L836.012 680.91 L835.452 680.91 L834.893 680.91 L834.334 680.91 L833.775 680.91 L833.215 680.91 L832.656 680.91 L832.097 680.91 L831.538 680.91 L830.978 680.91 L830.419 680.91 L829.86 680.91 L829.301 680.91 L828.741 680.91 L828.182 680.91 L827.623 680.91 L827.064 680.91 L826.504 680.91 L825.945 680.91 L825.386 680.91 L824.827 680.91 L824.267 680.91 L823.708 680.91 L823.149 680.91 L822.59 680.91 L822.03 680.91 L821.471 680.91 L820.912 680.91 L820.353 680.91 L819.793 680.91 L819.234 680.91 L818.675 680.91 L818.116 680.91 L817.556 680.91 L816.997 680.91 L816.438 680.91 L815.879 680.91 L815.319 680.91 L814.76 680.91 L814.201 680.91 L813.642 680.91 L813.082 680.91 L812.523 680.91 L811.964 680.91 L811.405 680.91 L810.845 680.91 L810.286 680.91 L809.727 680.91 L809.168 680.91 L808.608 680.91 L808.049 680.91 L807.49 680.91 L806.931 680.91 L806.371 680.91 L805.812 680.91 L805.253 680.91 L804.693 680.91 L804.134 680.91 L803.575 680.91 L803.016 680.91 L802.456 680.91 L801.897 680.91 L801.338 680.91 L800.779 680.91 L800.219 680.91 L799.66 680.91 L799.101 680.91 L798.542 680.91 L797.982 680.91 L797.423 680.91 L796.864 680.91 L796.305 680.91 L795.745 680.91 L795.186 680.91 L794.627 680.91 L794.068 680.91 L793.508 680.91 L792.949 680.91 L792.39 680.91 L791.831 680.91 L791.271 680.91 L790.712 680.91 L790.153 680.91 L789.594 680.91 L789.034 680.91 L788.475 680.91 L787.916 680.91 L787.357 680.91 L786.797 680.91 L786.238 680.91 L785.679 680.91 L785.12 680.91 L784.56 680.91 L784.001 680.91 L783.442 680.91 L782.883 680.91 L782.323 680.91 L781.764 680.91 L781.205 680.91 L780.646 680.91 L780.086 680.91 L779.527 680.91 L778.968 680.91 L778.409 680.91 L777.849 680.91 L777.29 680.91 L776.731 680.91 L776.172 680.91 L775.612 680.91 L775.053 680.91 L774.494 680.91 L773.935 680.91 L773.375 680.91 L772.816 680.91 L772.257 680.91 L771.698 680.91 L771.138 680.91 L770.579 680.91 L770.02 680.91 L769.461 680.91 L768.901 680.91 L768.342 680.91 L767.783 680.91 L767.224 680.91 L766.664 680.91 L766.105 680.91 L765.546 680.91 L764.987 680.91 L764.427 680.91 L763.868 680.91 L763.309 680.91 L762.75 680.91 L762.19 680.91 L761.631 680.91 L761.072 680.91 L760.513 680.91 L759.953 680.91 L759.394 680.91 L758.835 680.91 L758.276 680.91 L757.716 680.91 L757.157 680.91 L756.598 680.91 L756.039 680.91 L755.479 680.91 L754.92 680.91 L754.361 680.91 L753.802 680.91 L753.242 680.91 L752.683 680.91 L752.124 680.91 L751.565 680.91 L751.005 680.91 L750.446 680.91 L749.887 680.91 L749.328 680.91 L748.768 680.91 L748.209 680.91 L747.65 680.91 L747.091 680.91 L746.531 680.91 L745.972 680.91 L745.413 680.91 L744.854 680.91 L744.294 680.91 L743.735 680.91 L743.176 680.91 L742.617 680.91 L742.057 680.91 L741.498 680.91 L740.939 680.91 L740.38 680.91 L739.82 680.91 L739.261 680.91 L738.702 680.91 L738.143 680.91 L737.583 680.91 L737.024 680.91 L736.465 680.91 L735.906 680.91 L735.346 680.91 L734.787 680.91 L734.228 680.91 L733.669 680.91 L733.109 680.91 L732.55 680.91 L731.991 680.91 L731.432 680.91 L730.872 680.91 L730.313 680.91 L729.754 680.91 L729.195 680.91 L728.635 680.91 L728.076 680.91 L727.517 680.91 L726.958 680.91 L726.398 680.91 L725.839 680.91 L725.28 680.91 L724.721 680.91 L724.161 680.91 L723.602 680.91 L723.043 680.91 L722.484 680.91 L721.924 680.91 L721.365 680.91 L720.806 680.91 L720.247 680.91  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.507 720.806,685.507 721.365,685.507 721.924,685.507 722.484,685.507 723.043,685.507 723.602,685.507 724.161,685.507 724.721,685.507 725.28,685.507 725.839,685.507 726.398,685.507 726.958,685.507 727.517,685.507 728.076,685.507 728.635,685.507 729.195,685.507 729.754,685.507 730.313,685.507 730.872,685.507 731.432,685.507 731.991,685.507 732.55,685.507 733.109,685.507 733.669,685.507 734.228,685.507 734.787,685.507 735.346,685.507 735.906,685.507 736.465,685.507 737.024,685.507 737.583,685.507 738.143,685.507 738.702,685.507 739.261,685.507 739.82,685.507 740.38,685.507 740.939,685.507 741.498,685.507 742.057,685.507 742.617,685.507 743.176,685.507 743.735,685.507 744.294,685.507 744.854,685.507 745.413,685.507 745.972,685.507 746.531,685.507 747.091,685.507 747.65,685.507 748.209,685.507 748.768,685.507 749.328,685.507 749.887,685.507 750.446,685.507 751.005,685.507 751.565,685.507 752.124,685.507 752.683,685.507 753.242,685.507 753.802,685.507 754.361,685.507 754.92,685.507 755.479,685.507 756.039,685.507 756.598,685.507 757.157,685.507 757.716,685.507 758.276,685.507 758.835,685.507 759.394,685.507 759.953,685.507 760.513,685.507 761.072,685.507 761.631,685.507 762.19,685.507 762.75,685.507 763.309,685.507 763.868,685.507 764.427,685.507 764.987,685.507 765.546,685.507 766.105,685.507 766.664,685.507 767.224,685.507 767.783,685.507 768.342,685.507 768.901,685.507 769.461,685.507 770.02,685.507 770.579,685.507 771.138,685.507 771.698,685.507 772.257,685.507 772.816,685.507 773.375,685.507 773.935,685.507 774.494,685.507 775.053,685.507 775.612,685.507 776.172,685.507 776.731,685.507 777.29,685.507 777.849,685.507 778.409,685.507 778.968,685.507 779.527,685.507 780.086,685.507 780.646,685.507 781.205,685.507 781.764,685.507 782.323,685.507 782.883,685.507 783.442,685.507 784.001,685.507 784.56,685.507 785.12,685.507 785.679,685.507 786.238,685.507 786.797,685.507 787.357,685.507 787.916,685.507 788.475,685.507 789.034,685.507 789.594,685.507 790.153,685.507 790.712,685.507 791.271,685.507 791.831,685.507 792.39,685.507 792.949,685.507 793.508,685.507 794.068,685.507 794.627,685.507 795.186,685.507 795.745,685.507 796.305,685.507 796.864,685.507 797.423,685.507 797.982,685.507 798.542,685.507 799.101,685.507 799.66,685.507 800.219,685.507 800.779,685.507 801.338,685.507 801.897,685.507 802.456,685.507 803.016,685.507 803.575,685.507 804.134,685.507 804.693,685.507 805.253,685.507 805.812,685.507 806.371,685.507 806.931,685.507 807.49,685.507 808.049,685.507 808.608,685.507 809.168,685.507 809.727,685.507 810.286,685.507 810.845,685.507 811.405,685.507 811.964,685.507 812.523,685.507 813.082,685.507 813.642,685.507 814.201,685.507 814.76,685.507 815.319,685.507 815.879,685.507 816.438,685.507 816.997,685.507 817.556,685.507 818.116,685.507 818.675,685.507 819.234,685.507 819.793,685.507 820.353,685.507 820.912,685.507 821.471,685.507 822.03,685.507 822.59,685.507 823.149,685.507 823.708,685.507 824.267,685.507 824.827,685.507 825.386,685.507 825.945,685.507 826.504,685.507 827.064,685.507 827.623,685.507 828.182,685.507 828.741,685.507 829.301,685.507 829.86,685.507 830.419,685.507 830.978,685.507 831.538,685.507 832.097,685.507 832.656,685.507 833.215,685.507 833.775,685.507 834.334,685.507 834.893,685.507 835.452,685.507 836.012,685.507 836.571,685.507 837.13,685.507 837.689,685.507 838.249,685.507 838.808,685.507 839.367,685.507 839.926,685.507 840.486,685.507 841.045,685.507 841.604,685.507 842.163,685.507 842.723,685.507 843.282,685.507 843.841,685.507 844.4,685.507 844.96,685.507 845.519,685.507 846.078,685.507 846.637,685.507 847.197,685.507 847.756,685.507 848.315,685.507 848.874,685.507 849.434,685.507 849.993,685.507 850.552,685.507 851.111,685.507 851.671,685.507 852.23,685.507 852.789,685.507 853.348,685.507 853.908,685.507 854.467,685.507 855.026,685.507 855.585,685.507 856.145,685.507 856.704,685.507 857.263,685.507 857.822,685.507 858.382,685.507 858.941,685.507 859.5,685.507 860.059,685.507 860.619,685.507 861.178,685.507 861.737,685.507 862.296,685.507 862.856,685.507 863.415,685.507 863.974,685.507 864.533,685.507 865.093,685.507 865.652,685.507 866.211,685.507 866.77,685.507 867.33,685.507 867.889,685.507 868.448,685.507 869.007,685.507 869.567,685.507 870.126,685.507 870.685,685.507 871.244,685.507 871.804,685.507 872.363,685.507 872.922,685.507 873.481,685.507 874.041,685.507 874.6,685.507 875.159,685.507 875.718,685.507 876.278,685.507 876.837,685.507 877.396,685.507 877.955,685.507 878.515,685.507 879.074,685.507 879.633,685.507 880.192,685.507 880.752,685.507 881.311,685.507 881.87,685.507 882.429,685.507 882.989,685.507 883.548,685.507 884.107,685.507 884.666,685.507 885.226,685.507 885.785,685.507 886.344,685.507 886.903,685.507 887.463,685.507 888.022,685.507 888.581,685.507 889.14,685.507 889.7,685.507 890.259,685.507 890.818,685.507 891.377,685.507 891.937,685.507 892.496,685.507 893.055,685.507 893.614,685.507 894.174,685.507 894.733,685.507 895.292,685.507 895.851,685.507 896.411,685.507 896.97,685.507 897.529,685.507 898.088,685.507 898.648,685.507 899.207,685.507 899.766,685.507 900.325,685.507 900.885,685.507 901.444,685.507 902.003,685.507 902.562,685.507 903.122,685.507 903.681,685.507 904.24,685.507 904.799,685.507 905.359,685.507 905.918,685.507 906.477,685.507 907.036,685.507 907.596,685.507 908.155,685.507 908.714,685.507 909.273,685.507 909.833,685.507 910.392,685.507 910.951,685.507 911.51,685.507 912.07,685.507 912.629,685.507 913.188,685.507 913.747,685.507 914.307,685.507 914.866,685.507 915.425,685.507 915.984,685.507 916.544,685.507 917.103,685.507 917.662,685.507 918.221,685.507 918.781,685.507 919.34,685.507 919.899,685.507 920.458,685.507 921.018,685.507 921.577,685.507 922.136,685.507 922.695,685.507 923.255,685.507 923.814,685.507 924.373,685.507 924.932,685.507 925.492,685.507 926.051,685.507 926.61,685.507 927.169,685.507 927.729,685.507 928.288,685.507 928.847,685.507 929.406,685.507 929.966,685.507 930.525,685.507 931.084,685.507 931.644,685.507 932.203,685.507 932.762,685.507 933.321,685.507 933.881,685.507 934.44,685.507 934.999,685.507 935.558,685.507 936.118,685.507 936.677,685.507 937.236,685.507 937.795,685.507 938.355,685.507 938.914,685.507 939.473,685.507 940.032,685.507 940.592,685.507 941.151,685.507 941.71,685.507 942.269,685.507 942.829,685.507 943.388,685.507 943.947,685.507 944.506,685.507 945.066,685.507 945.625,685.507 946.184,685.507 946.743,685.507 947.303,685.507 947.862,685.507 948.421,685.507 948.98,685.507 949.54,685.507 950.099,685.507 950.658,685.507 951.217,685.507 951.777,685.507 952.336,685.507 952.895,685.507 953.454,685.507 954.014,685.507 954.573,685.507 955.132,685.507 955.691,685.507 956.251,685.507 956.81,685.507 957.369,685.507 957.928,685.507 958.488,685.507 959.047,685.507 959.606,685.507 960.165,685.507 960.725,685.507 961.284,685.507 961.843,685.507 962.402,685.507 962.962,685.507 963.521,685.507 964.08,685.507 964.639,685.507 965.199,685.507 965.758,685.507 966.317,685.507 966.876,685.507 967.436,685.507 967.995,685.507 968.554,685.507 969.113,685.507 969.673,685.507 970.232,685.507 970.791,685.507 971.35,685.507 971.91,685.507 972.469,685.507 973.028,685.507 973.587,685.507 974.147,685.507 974.706,685.507 975.265,685.507 975.824,685.507 976.384,685.507 976.943,685.507 977.502,685.507 978.061,685.507 978.621,685.507 979.18,685.507 979.739,685.507 980.298,685.507 980.858,685.507 981.417,685.507 981.976,685.507 982.535,685.507 983.095,685.507 983.654,685.507 984.213,685.507 984.772,685.507 985.332,685.507 985.891,685.507 986.45,685.507 987.009,685.507 987.569,685.507 988.128,685.507 988.687,685.507 989.246,685.507 989.806,685.507 990.365,685.507 990.924,685.507 991.483,685.507 992.043,685.507 992.602,685.507 993.161,685.507 993.72,685.507 994.28,685.507 994.839,685.507 995.398,685.507 995.957,685.507 996.517,685.507 997.076,685.507 997.635,685.507 998.194,685.507 998.754,685.507 999.313,685.507 999.872,685.507 1000.43,685.507 1000.99,685.507 1001.55,685.507 1002.11,685.507 1002.67,685.507 1003.23,685.507 1003.79,685.507 1004.35,685.507 1004.91,685.507 1005.46,685.507 1006.02,685.507 1006.58,685.507 1007.14,685.507 1007.7,685.507 1008.26,685.507 1008.82,685.507 1009.38,685.507 1009.94,685.507 1010.5,685.507 1011.06,685.507 1011.62,685.507 1012.18,685.507 1012.73,685.507 1013.29,685.507 1013.85,685.507 1014.41,685.507 1014.97,685.507 1015.53,685.507 1016.09,685.507 1016.65,685.507 1017.21,685.507 1017.77,685.507 1018.33,685.507 1018.89,685.507 1019.45,685.507 1020.01,685.507 1020.56,685.507 1021.12,685.507 1021.68,685.507 1022.24,685.507 1022.8,685.507 1023.36,685.507 1023.92,685.507 1024.48,685.507 1025.04,685.507 1025.6,685.507 1026.16,685.507 1026.72,685.507 1027.28,685.507 1027.83,685.507 1028.39,685.507 1028.95,685.507 1029.51,685.507 1030.07,685.507 1030.63,685.507 1031.19,685.507 1031.75,685.507 1032.31,685.507 1032.87,685.507 1033.43,685.507 1033.99,685.507 1034.55,685.507 1035.1,685.507 1035.66,685.507 1036.22,685.507 1036.78,685.507 1037.34,685.507 1037.9,685.507 1038.46,685.507 1039.02,685.507 1039.58,685.507 1040.14,685.507 1040.7,685.507 1041.26,685.507 1041.82,685.507 1042.38,685.507 1042.93,685.507 1043.49,685.507 1044.05,685.507 1044.61,685.507 1045.17,685.507 1045.73,685.507 1046.29,685.507 1046.85,685.507 1047.41,685.507 1047.97,685.507 1048.53,685.507 1049.09,685.507 1049.65,685.507 1050.2,685.507 1050.76,685.507 1051.32,685.507 1051.88,685.507 1052.44,685.507 1053,685.507 1053.56,685.507 1054.12,685.507 1054.68,685.507 1055.24,685.507 1055.8,685.507 1056.36,685.507 1056.92,685.507 1057.48,685.507 1058.03,685.507 1058.59,685.507 1059.15,685.507 1059.71,685.507 1060.27,685.507 1060.83,685.507 1061.39,685.507 1061.95,685.507 1062.51,685.507 1063.07,685.507 1063.63,685.507 1064.19,685.507 1064.75,685.507 1065.3,685.507 1065.86,685.507 1066.42,685.507 1066.98,685.507 1067.54,685.507 1068.1,685.507 1068.66,685.507 1069.22,685.507 1069.78,685.507 1070.34,685.507 1070.9,685.507 1071.46,685.507 1072.02,685.507 1072.57,685.507 1073.13,685.507 1073.69,685.507 1074.25,685.507 1074.81,685.507 1075.37,685.507 1075.93,685.507 1076.49,685.507 1077.05,685.507 1077.61,685.507 1078.17,685.507 1078.73,685.507 1079.29,685.507 1079.85,685.507 1080.4,685.507 1080.96,685.507 1081.52,685.507 1082.08,685.507 1082.64,685.507 1083.2,685.507 1083.76,685.507 1084.32,685.507 1084.88,685.507 1085.44,685.507 1086,685.507 1086.56,685.507 1087.12,685.507 1087.67,685.507 1088.23,685.507 1088.79,685.507 1089.35,685.507 1089.91,685.507 1090.47,685.507 1091.03,685.507 1091.59,685.507 1092.15,685.507 1092.71,685.507 1093.27,685.507 1093.83,685.507 1094.39,685.507 1094.94,685.507 1095.5,685.507 1096.06,685.507 1096.62,685.507 1097.18,685.507 1097.74,685.507 1098.3,685.507 1098.86,685.507 1099.42,685.507 1099.98,685.507 1100.54,685.507 1101.1,685.507 1101.66,685.507 1102.22,685.507 1102.77,685.507 1103.33,685.507 1103.89,685.507 1104.45,685.507 1105.01,685.507 1105.57,685.507 1106.13,685.507 1106.69,685.507 1107.25,685.507 1107.81,685.507 1108.37,685.507 1108.93,685.507 1109.49,685.507 1110.04,685.507 1110.6,685.507 1111.16,685.507 1111.72,685.507 1112.28,685.507 1112.84,685.507 1113.4,685.507 1113.96,685.507 1114.52,685.507 1115.08,685.507 1115.64,685.507 1116.2,685.507 1116.76,685.507 1117.31,685.507 1117.87,685.507 1118.43,685.507 1118.99,685.507 1119.55,685.507 1120.11,685.507 1120.67,685.507 1121.23,685.507 1121.79,685.507 1122.35,685.507 1122.91,685.507 1123.47,685.507 1124.03,685.507 1124.59,685.507 1125.14,685.507 1125.7,685.507 1126.26,685.507 1126.82,685.507 1127.38,685.507 1127.94,685.507 1128.5,685.507 1129.06,685.507 1129.62,685.507 1130.18,685.507 1130.74,685.507 1131.3,685.507 1131.86,685.507 1132.41,685.507 1132.97,685.507 1133.53,685.507 1134.09,685.507 1134.65,685.507 1135.21,685.507 1135.77,685.507 1136.33,685.507 1136.89,685.507 1137.45,685.507 1138.01,685.507 1138.57,685.507 1139.13,685.507 1139.68,685.507 1140.24,685.507 1140.8,685.507 1141.36,685.507 1141.92,685.507 1142.48,685.507 1143.04,685.507 1143.6,685.507 1144.16,685.507 1144.72,685.507 1145.28,685.507 1145.84,685.507 1146.4,685.507 1146.96,685.507 1147.51,685.507 1148.07,685.507 1148.63,685.507 1149.19,685.507 1149.75,685.507 1150.31,685.507 1150.87,685.507 1151.43,685.507 1151.99,685.507 1152.55,685.507 1153.11,685.507 1153.67,685.507 1154.23,685.507 1154.78,685.507 1155.34,685.507 1155.9,685.507 1156.46,685.507 1157.02,685.507 1157.58,685.507 1158.14,685.507 1158.7,685.507 1159.26,685.507 1159.82,685.507 1160.38,685.507 1160.94,685.507 1161.5,685.507 1162.05,685.507 1162.61,685.507 1163.17,685.507 1163.73,685.507 1164.29,685.507 1164.85,685.507 1165.41,685.507 1165.97,685.507 1166.53,685.507 1167.09,685.507 1167.65,685.507 1168.21,685.507 1168.77,685.507 1169.33,685.507 1169.88,685.507 1170.44,685.507 1171,685.507 1171.56,685.507 1172.12,685.507 1172.68,685.507 1173.24,685.507 1173.8,685.507 1174.36,685.507 1174.92,685.507 1175.48,685.507 1176.04,685.507 1176.6,685.507 1177.15,685.507 1177.71,685.507 1178.27,685.507 1178.83,685.507 1179.39,685.507 1179.95,685.507 1180.51,685.507 1181.07,685.507 1181.63,685.507 1182.19,685.507 1182.75,685.507 1183.31,685.507 1183.87,685.507 1184.43,685.507 1184.98,685.507 1185.54,685.507 1186.1,685.507 1186.66,685.507 1187.22,685.507 1187.78,685.507 1188.34,685.507 1188.9,685.507 1189.46,685.507 1190.02,685.507 1190.58,685.507 1191.14,685.507 1191.7,685.507 1192.25,685.507 1192.81,685.507 1193.37,685.507 1193.93,685.507 1194.49,685.507 1195.05,685.507 1195.61,685.507 1196.17,685.507 1196.73,685.507 1197.29,685.507 1197.85,685.507 1198.41,685.507 1198.97,685.507 1199.52,685.507 1200.08,685.507 1200.64,685.507 1201.2,685.507 1201.76,685.507 1202.32,685.507 1202.88,685.507 1203.44,685.507 1204,685.507 1204.56,685.507 1205.12,685.507 1205.68,685.507 1206.24,685.507 1206.8,685.507 1207.35,685.507 1207.91,685.507 1208.47,685.507 1209.03,685.507 1209.59,685.507 1210.15,685.507 1210.71,685.507 1211.27,685.507 1211.83,685.507 1212.39,685.507 1212.95,685.507 1213.51,685.507 1214.07,685.507 1214.62,685.507 1215.18,685.507 1215.74,685.507 1216.3,685.507 1216.86,685.507 1217.42,685.507 1217.98,685.507 1218.54,685.507 1219.1,685.507 1219.66,685.507 1220.22,685.507 1220.78,685.507 1221.34,685.507 1221.89,685.507 1222.45,685.507 1223.01,685.507 1223.57,685.507 1224.13,685.507 1224.69,685.507 1225.25,685.507 1225.81,685.507 1226.37,685.507 1226.93,685.507 1227.49,685.507 1228.05,685.507 1228.61,685.507 1229.17,685.507 1229.72,685.507 1230.28,685.507 1230.84,685.507 1231.4,685.507 1231.96,685.507 1232.52,685.507 1233.08,685.507 1233.64,685.507 1234.2,685.507 1234.76,685.507 1235.32,685.507 1235.88,685.507 1236.44,685.507 1236.99,685.507 1237.55,685.507 1238.11,685.507 1238.67,685.507 1239.23,685.507 1239.79,685.507 1240.35,685.507 1240.91,685.507 1241.47,685.507 1242.03,685.507 1242.59,685.507 1243.15,685.507 1243.71,685.507 1244.26,685.507 1244.82,685.507 1245.38,685.507 1245.94,685.507 1246.5,685.507 1247.06,685.507 1247.62,685.507 1248.18,685.507 1248.74,685.507 1249.3,685.507 1249.86,685.507 1250.42,685.507 1250.98,685.507 1251.54,685.507 1252.09,685.507 1252.65,685.507 1253.21,685.507 1253.77,685.507 1254.33,685.507 1254.89,685.507 1255.45,685.507 1256.01,685.507 1256.57,685.507 1257.13,685.507 1257.69,685.507 1258.25,685.507 1258.81,685.507 1259.36,685.507 1259.92,685.507 1260.48,685.507 1261.04,685.507 1261.6,685.507 1262.16,685.507 1262.72,685.507 1263.28,685.507 1263.84,685.507 1264.4,685.507 1264.96,685.507 1265.52,685.507 1266.08,685.507 1266.63,685.507 1267.19,685.507 1267.75,685.507 1268.31,685.507 1268.87,685.507 1269.43,685.507 1269.99,685.507 1270.55,685.507 1271.11,685.507 1271.67,685.507 1272.23,685.507 1272.79,685.507 1273.35,685.507 1273.91,685.507 1274.46,685.507 1275.02,685.507 1275.58,685.507 1276.14,685.507 1276.7,685.507 1277.26,685.507 1277.82,685.507 1278.38,685.507 1278.94,685.507 1279.5,685.507 1280.06,685.507 1280.62,685.507 1281.18,685.507 1281.73,685.507 1282.29,685.507 1282.85,685.507 1283.41,685.507 1283.97,685.507 1284.53,685.507 1285.09,685.507 1285.65,685.507 1286.21,685.507 1286.77,685.507 1287.33,685.507 1287.89,685.507 1288.45,685.507 1289,685.507 1289.56,685.507 1290.12,685.507 1290.68,685.507 1291.24,685.507 1291.8,685.507 1292.36,685.507 1292.92,685.507 1293.48,685.507 1294.04,685.507 1294.6,685.507 1295.16,685.507 1295.72,685.507 1296.28,685.507 1296.83,685.507 1297.39,685.507 1297.95,685.507 1298.51,685.507 1299.07,685.507 1299.63,685.507 1300.19,685.507 1300.75,685.507 1301.31,685.507 1301.87,685.507 1302.43,685.507 1302.99,685.507 1303.55,685.507 1304.1,685.507 1304.66,685.507 1305.22,685.507 1305.78,685.507 1306.34,685.507 1306.9,685.507 1307.46,685.507 1308.02,685.507 1308.58,685.507 1309.14,685.507 1309.7,685.507 1310.26,685.507 1310.82,685.507 1311.38,685.507 1311.93,685.507 1312.49,685.507 1313.05,685.507 1313.61,685.507 1314.17,685.507 1314.73,685.507 1315.29,685.507 1315.85,685.507 1316.41,685.507 1316.97,685.507 1317.53,685.507 1318.09,685.507 1318.65,685.507 1319.2,685.507 1319.76,685.507 1320.32,685.507 1320.88,685.507 1321.44,685.507 1322,685.507 1322.56,685.507 1323.12,685.507 1323.68,685.507 1324.24,685.507 1324.8,685.507 1325.36,685.507 1325.92,685.507 1326.47,685.507 1327.03,685.507 1327.59,685.507 1328.15,685.507 1328.71,685.507 1329.27,685.507 1329.83,685.507 1330.39,685.507 1330.95,685.507 1331.51,685.507 1332.07,685.507 1332.63,685.507 1333.19,685.507 1333.75,685.507 1334.3,685.507 1334.86,685.507 1335.42,685.507 1335.98,685.507 1336.54,685.507 1337.1,685.507 1337.66,685.507 1338.22,685.507 1338.78,685.507 1339.34,685.507 1339.9,685.507 1340.46,685.507 1341.02,685.507 1341.57,685.507 1342.13,685.507 1342.69,685.507 1343.25,685.507 1343.81,685.507 1344.37,685.507 1344.93,685.507 1345.49,685.507 1346.05,685.507 1346.61,685.507 1347.17,685.507 1347.73,685.507 1348.29,685.507 1348.84,685.507 1349.4,685.507 1349.96,685.507 1350.52,685.507 1351.08,685.507 1351.64,685.507 1352.2,685.507 1352.76,685.507 1353.32,685.507 1353.88,685.507 1354.44,685.507 1355,685.507 1355.56,685.507 1356.12,685.507 1356.67,685.507 1357.23,685.507 1357.79,685.507 1358.35,685.507 1358.91,685.507 1359.47,685.507 1360.03,685.507 1360.59,685.507 1361.15,685.507 1361.71,685.507 1362.27,685.507 1362.83,685.507 1363.39,685.507 1363.94,685.507 1364.5,685.507 1365.06,685.507 1365.62,685.507 1366.18,685.507 1366.74,685.507 1367.3,685.507 1367.86,685.507 1368.42,685.507 1368.98,685.507 1369.54,685.507 1370.1,685.507 1370.66,685.507 1371.21,685.507 1371.77,685.507 1372.33,685.507 1372.89,685.507 1373.45,685.507 1374.01,685.507 1374.57,685.507 1375.13,685.507 1375.69,685.507 1376.25,685.507 1376.81,685.507 1377.37,685.507 1377.93,685.507 1378.49,685.507 1379.04,685.507 1379.6,685.507 1380.16,685.507 1380.72,685.507 1381.28,685.507 1381.84,685.507 1382.4,685.507 1382.96,685.507 1383.52,685.507 1384.08,685.507 1384.64,685.507 1385.2,685.507 1385.76,685.507 1386.31,685.507 1386.87,685.507 1387.43,685.507 1387.99,685.507 1388.55,685.507 1389.11,685.507 1389.67,685.507 1390.23,685.507 1390.79,685.507 1391.35,685.507 1391.91,685.507 1392.47,685.507 1393.03,685.507 1393.58,685.507 1394.14,685.507 1394.7,685.507 1395.26,685.507 1395.82,685.507 1396.38,685.507 1396.94,685.507 1397.5,685.507 1398.06,685.507 1398.62,685.507 1399.18,685.507 1399.74,685.507 1400.3,685.507 1400.86,685.507 1401.41,685.507 1401.97,685.507 1402.53,685.507 1403.09,685.507 1403.65,685.507 1404.21,685.507 1404.77,685.507 1405.33,685.507 1405.89,685.507 1406.45,685.507 1407.01,685.507 1407.57,685.507 1408.13,685.507 1408.68,685.507 1409.24,685.507 1409.8,685.507 1410.36,685.507 1410.92,685.507 1411.48,685.507 1412.04,685.507 1412.6,685.507 1413.16,685.507 1413.72,685.507 1414.28,685.507 1414.84,685.507 1415.4,685.507 1415.95,685.507 1416.51,685.507 1417.07,685.507 1417.63,685.507 1418.19,685.507 1418.75,685.507 1419.31,685.507 1419.87,685.507 1420.43,685.507 1420.99,685.507 1421.55,685.507 1422.11,685.507 1422.67,685.507 1423.23,685.507 1423.78,685.507 1424.34,685.507 1424.9,685.507 1425.46,685.507 1426.02,685.507 1426.58,685.507 1427.14,685.507 1427.7,685.507 1428.26,685.507 1428.82,685.507 1429.38,685.507 1429.94,685.507 1430.5,685.507 1431.05,685.507 1431.61,685.507 1432.17,685.507 1432.73,685.507 1433.29,685.507 1433.85,685.507 1434.41,685.507 1434.97,685.507 1435.53,685.507 1436.09,685.507 1436.65,685.507 1437.21,685.507 1437.77,685.507 1438.33,685.507 1438.88,685.507 1439.44,685.507 1440,685.507 1440.56,685.507 1441.12,685.507 1441.68,685.507 1442.24,685.507 1442.8,685.507 1443.36,685.507 1443.92,685.507 1444.48,685.507 1445.04,685.507 1445.6,685.507 1446.15,685.507 1446.71,685.507 1447.27,685.507 1447.83,685.507 1448.39,685.507 1448.95,685.507 1449.51,685.507 1450.07,685.507 1450.63,685.507 1451.19,685.507 1451.75,685.507 1452.31,685.507 1452.87,685.507 1453.42,685.507 1453.98,685.507 1454.54,685.507 1455.1,685.507 1455.66,685.507 1456.22,685.507 1456.78,685.507 1457.34,685.507 1457.9,685.507 1458.46,685.507 1459.02,685.507 1459.58,685.507 1460.14,685.507 1460.7,685.507 1461.25,685.507 1461.81,685.507 1462.37,685.507 1462.93,685.507 1463.49,685.507 1464.05,685.507 1464.61,685.507 1465.17,685.507 1465.73,685.507 1466.29,685.507 1466.85,685.507 1467.41,685.507 1467.97,685.507 1468.52,685.507 1469.08,685.507 1469.64,685.507 1470.2,685.507 1470.76,685.507 1471.32,685.507 1471.88,685.507 1472.44,685.507 1473,685.507 1473.56,685.507 1474.12,685.507 1474.68,685.507 1475.24,685.507 1475.79,685.507 1476.35,685.507 1476.91,685.507 1477.47,685.507 1478.03,685.507 1478.59,685.507 1479.15,685.507 1479.71,685.507 1480.27,685.507 1480.83,685.507 1481.39,685.507 1481.95,685.507 1482.51,685.507 1483.07,685.507 1483.62,685.507 1484.18,685.507 1484.74,685.507 1485.3,685.507 1485.86,685.507 1486.42,685.507 1486.98,685.507 1487.54,685.507 1488.1,685.507 1488.66,685.507 1489.22,685.507 1489.78,685.507 1490.34,685.507 1490.89,685.507 1491.45,685.507 1492.01,685.507 1492.57,685.507 1493.13,685.507 1493.69,685.507 1494.25,685.507 1494.81,685.507 1495.37,685.507 1495.93,685.507 1496.49,685.507 1497.05,685.507 1497.61,685.507 1498.16,685.507 1498.72,685.507 1499.28,685.507 1499.84,685.507 1500.4,685.507 1500.96,685.507 1501.52,685.507 1502.08,685.507 1502.64,685.507 1503.2,685.507 1503.76,685.507 1504.32,685.507 1504.88,685.507 1505.44,685.507 1505.99,685.507 1506.55,685.507 1507.11,685.507 1507.67,685.507 1508.23,685.507 1508.79,685.507 1509.35,685.507 1509.91,685.507 1510.47,685.507 1511.03,685.507 1511.59,685.507 1512.15,685.507 1512.71,685.507 1513.26,685.507 1513.82,685.507 1514.38,685.507 1514.94,685.507 1515.5,685.507 1516.06,685.507 1516.62,685.507 1517.18,685.507 1517.74,685.507 1518.3,685.507 1518.86,685.507 1519.42,685.507 1519.98,685.507 1520.53,685.507 1521.09,685.507 1521.65,685.507 1522.21,685.507 1522.77,685.507 1523.33,685.507 1523.89,685.507 1524.45,685.507 1525.01,685.507 1525.57,685.507 1526.13,685.507 1526.69,685.507 1527.25,685.507 1527.81,685.507 1528.36,685.507 1528.92,685.507 1529.48,685.507 1530.04,685.507 1530.6,685.507 1531.16,685.507 1531.72,685.507 1532.28,685.507 1532.84,685.507 1533.4,685.507 1533.96,685.507 1534.52,685.507 1535.08,685.507 1535.63,685.507 1536.19,685.507 1536.75,685.507 1537.31,685.507 1537.87,685.507 1538.43,685.507 1538.99,685.507 1539.55,685.507 1540.11,685.507 1540.67,685.507 1541.23,685.507 1541.79,685.507 1542.35,685.507 1542.9,685.507 1543.46,685.507 1544.02,685.507 1544.58,685.507 1545.14,685.507 1545.7,685.507 1546.26,685.507 1546.82,685.507 1547.38,685.507 1547.94,685.507 1548.5,685.507 1549.06,685.507 1549.62,685.507 1550.18,685.507 1550.73,685.507 1551.29,685.507 1551.85,685.507 1552.41,685.507 1552.97,685.507 1553.53,685.507 1554.09,685.507 1554.65,685.507 1555.21,685.507 1555.77,685.507 1556.33,685.507 1556.89,685.507 1557.45,685.507 1558,685.507 1558.56,685.507 1559.12,685.507 1559.68,685.507 1560.24,685.507 1560.8,685.507 1561.36,685.507 1561.92,685.507 1562.48,685.507 1563.04,685.507 1563.6,685.507 1564.16,685.507 1564.72,685.507 1565.28,685.507 1565.83,685.507 1566.39,685.507 1566.95,685.507 1567.51,685.507 1568.07,685.507 1568.63,685.507 1569.19,685.507 1569.75,685.507 1570.31,685.507 1570.87,685.507 1571.43,685.507 1571.99,685.507 1572.55,685.507 1573.1,685.507 1573.66,685.507 1574.22,685.507 1574.78,685.507 1575.34,685.507 1575.9,685.507 1576.46,685.507 1577.02,685.507 1577.58,685.507 1578.14,685.507 1578.7,685.507 1579.26,685.507 1579.82,685.507 1580.37,685.507 1580.93,685.507 1581.49,685.507 1582.05,685.507 1582.61,685.507 1583.17,685.507 1583.73,685.507 1584.29,685.507 1584.85,685.507 1585.41,685.507 1585.97,685.507 1586.53,685.507 1587.09,685.507 1587.65,685.507 1588.2,685.507 1588.76,685.507 1589.32,685.507 1589.88,685.507 1590.44,685.507 1591,685.507 1591.56,685.507 1592.12,685.507 1592.68,685.507 1593.24,685.507 1593.8,685.507 1594.36,685.507 1594.92,685.507 1595.47,685.507 1596.03,685.507 1596.59,685.507 1597.15,685.507 1597.71,685.507 1598.27,685.507 1598.83,685.507 1599.39,685.507 1599.95,685.507 1600.51,685.507 1601.07,685.507 1601.63,685.507 1602.19,685.507 1602.74,685.507 1603.3,685.507 1603.86,685.507 1604.42,685.507 1604.98,685.507 1605.54,685.507 1606.1,685.507 1606.66,685.507 1607.22,685.507 1607.78,685.507 1608.34,685.507 1608.9,685.507 1609.46,685.507 1610.02,685.507 1610.57,685.507 1611.13,685.507 1611.69,685.507 1612.25,685.507 1612.81,685.507 1613.37,685.507 1613.93,685.507 1614.49,685.507 1615.05,685.507 1615.61,685.507 1616.17,685.507 1616.73,685.507 1617.29,685.507 1617.84,685.507 1618.4,685.507 1618.96,685.507 1619.52,685.507 1620.08,685.507 1620.64,685.507 1621.2,685.507 1621.76,685.507 1622.32,685.507 1622.88,685.507 1623.44,685.507 1624,685.507 1624.56,685.507 1625.11,685.507 1625.67,685.507 1626.23,685.507 1626.79,685.507 1627.35,685.507 1627.91,685.507 1628.47,685.507 1629.03,685.507 1629.59,685.507 1630.15,685.507 1630.71,685.507 1631.27,685.507 1631.83,685.507 1632.39,685.507 1632.94,685.507 1633.5,685.507 1634.06,685.507 1634.62,685.507 1635.18,685.507 1635.74,685.507 1636.3,685.507 1636.86,685.507 1637.42,685.507 1637.98,685.507 1638.54,685.507 1639.1,685.507 1639.66,685.507 1640.21,685.507 1640.77,685.507 1641.33,685.507 1641.89,685.507 1642.45,685.507 1643.01,685.507 1643.57,685.507 1644.13,685.507 1644.69,685.507 1645.25,685.507 1645.81,685.507 1646.37,685.507 1646.93,685.507 1647.48,685.507 1648.04,685.507 1648.6,685.507 1649.16,685.507 1649.72,685.507 1650.28,685.507 1650.84,685.507 1651.4,685.507 1651.96,685.507 1652.52,685.507 1653.08,685.507 1653.64,685.507 1654.2,685.507 1654.76,685.507 1655.31,685.507 1655.87,685.507 1656.43,685.507 1656.99,685.507 1657.55,685.507 1658.11,685.507 1658.67,685.507 1659.23,685.507 1659.79,685.507 1660.35,685.507 1660.91,685.507 1661.47,685.507 1662.03,685.507 1662.58,685.507 1663.14,685.507 1663.7,685.507 1664.26,685.507 1664.82,685.507 1665.38,685.507 1665.94,685.507 1666.5,685.507 1667.06,685.507 1667.62,685.507 1668.18,685.507 1668.74,685.507 1669.3,685.507 1669.85,685.507 1670.41,685.507 1670.97,685.507 1671.53,685.507 1672.09,685.507 1672.65,685.507 1673.21,685.507 1673.77,685.507 1674.33,685.507 1674.89,685.507 1675.45,685.507 1676.01,685.507 1676.57,685.507 1677.13,685.507 1677.68,685.507 1678.24,685.507 1678.8,685.507 1679.36,685.507 1679.92,685.507 1680.48,685.507 1681.04,685.507 1681.6,685.507 1682.16,685.507 1682.72,685.507 1683.28,685.507 1683.84,685.507 1684.4,685.507 1684.95,685.507 1685.51,685.507 1686.07,685.507 1686.63,685.507 1687.19,685.507 1687.75,685.507 1688.31,685.507 1688.87,685.507 1689.43,685.507 1689.99,685.507 1690.55,685.507 1691.11,685.507 1691.67,685.507 1692.23,685.507 1692.78,685.507 1693.34,685.507 1693.9,685.507 1694.46,685.507 1695.02,685.507 1695.58,685.507 1696.14,685.507 1696.7,685.507 1697.26,685.507 1697.82,685.507 1698.38,685.507 1698.94,685.507 1699.5,685.507 1700.05,685.507 1700.61,685.507 1701.17,685.507 1701.73,685.507 1702.29,685.507 1702.85,685.507 1703.41,685.507 1703.97,685.507 1704.53,685.507 1705.09,685.507 1705.65,685.507 1706.21,685.507 1706.77,685.507 1707.32,685.507 1707.88,685.507 1708.44,685.507 1709,685.507 1709.56,685.507 1710.12,685.507 1710.68,685.507 1711.24,685.507 1711.8,685.507 1712.36,685.507 1712.92,685.507 1713.48,685.507 1714.04,685.507 1714.6,685.507 1715.15,685.507 1715.71,685.507 1716.27,685.507 1716.83,685.507 1717.39,685.507 1717.95,685.507 1718.51,685.507 1719.07,685.507 1719.63,685.507 1720.19,685.507 1720.75,685.507 1721.31,685.507 1721.87,685.507 1722.42,685.507 1722.98,685.507 1723.54,685.507 1724.1,685.507 1724.66,685.507 1725.22,685.507 1725.78,685.507 1726.34,685.507 1726.9,685.507 1727.46,685.507 1728.02,685.507 1728.58,685.507 1729.14,685.507 1729.69,685.507 1730.25,685.507 1730.81,685.507 1731.37,685.507 1731.93,685.507 1732.49,685.507 1733.05,685.507 1733.61,685.507 1734.17,685.507 1734.73,685.507 1735.29,685.507 1735.85,685.507 1736.41,685.507 1736.97,685.507 1737.52,685.507 1738.08,685.507 1738.64,685.507 1739.2,685.507 1739.76,685.507 1740.32,685.507 1740.88,685.507 1741.44,685.507 1742,685.507 1742.56,685.507 1743.12,685.507 1743.68,685.507 1744.24,685.507 1744.79,685.507 1745.35,685.507 1745.91,685.507 1746.47,685.507 1747.03,685.507 1747.59,685.507 1748.15,685.507 1748.71,685.507 1749.27,685.507 1749.83,685.507 1750.39,685.507 1750.95,685.507 1751.51,685.507 1752.06,685.507 1752.62,685.507 1753.18,685.507 1753.74,685.507 1754.3,685.507 1754.86,685.507 1755.42,685.507 1755.98,685.507 1756.54,685.507 1757.1,685.507 1757.66,685.507 1758.22,685.507 1758.78,685.507 1759.34,685.507 1759.89,685.507 1760.45,685.507 1761.01,685.507 1761.57,685.507 1762.13,685.507 1762.69,685.507 1763.25,685.507 1763.81,685.507 1764.37,685.507 1764.93,685.507 1765.49,685.507 1766.05,685.507 1766.61,685.507 1767.16,685.507 1767.72,685.507 1768.28,685.507 1768.84,685.507 1769.4,685.507 1769.96,685.507 1770.52,685.507 1771.08,685.507 1771.64,685.507 1772.2,685.507 1772.76,685.507 1773.32,685.507 1773.88,685.507 1774.43,685.507 1774.99,685.507 1775.55,685.507 1776.11,685.507 1776.67,685.507 1777.23,685.507 1777.79,685.507 1778.35,685.507 1778.91,685.507 1779.47,685.507 1780.03,685.507 1780.59,685.507 1781.15,685.507 1781.71,685.507 1782.26,685.507 1782.82,685.507 1783.38,685.507 1783.94,685.507 1784.5,685.507 1785.06,685.507 1785.62,685.507 1786.18,685.507 1786.74,685.507 1787.3,685.507 1787.86,685.507 1788.42,685.507 1788.98,685.507 1789.53,685.507 1790.09,685.507 1790.65,685.507 1791.21,685.507 1791.77,685.507 1792.33,685.507 1792.89,685.507 1793.45,685.507 1794.01,685.507 1794.57,685.507 1795.13,685.507 1795.69,685.507 1796.25,685.507 1796.8,685.507 1797.36,685.507 1797.92,685.507 1798.48,685.507 1799.04,685.507 1799.6,685.507 1800.16,685.507 1800.72,685.507 1801.28,685.507 1801.84,685.507 1802.4,685.507 1802.96,685.507 1803.52,685.507 1804.08,685.507 1804.63,685.507 1805.19,685.507 1805.75,685.507 1806.31,685.507 1806.87,685.507 1807.43,685.507 1807.99,685.507 1808.55,685.507 1809.11,685.507 1809.67,685.507 1810.23,685.507 1810.79,685.507 1811.35,685.507 1811.9,685.507 1812.46,685.507 1813.02,685.507 1813.58,685.507 1814.14,685.507 1814.7,685.507 1815.26,685.507 1815.82,685.507 1816.38,685.507 1816.94,685.507 1817.5,685.507 1818.06,685.507 1818.62,685.507 1819.18,685.507 1819.73,685.507 1820.29,685.507 1820.85,685.507 1821.41,685.507 1821.97,685.507 1822.53,685.507 1823.09,685.507 1823.65,685.507 1824.21,685.507 1824.77,685.507 1825.33,685.507 1825.89,685.507 1826.45,685.507 1827,685.507 1827.56,685.507 1828.12,685.507 1828.68,685.507 1829.24,685.507 1829.8,685.507 1830.36,685.507 1830.92,685.507 1831.48,685.507 1832.04,685.507 1832.6,685.507 1833.16,685.507 1833.72,685.507 1834.27,685.507 1834.83,685.507 1835.39,685.507 1835.95,685.507 1836.51,685.507 1837.07,685.507 1837.63,685.507 1838.19,685.507 \"/>\n<path clip-path=\"url(#clip833)\" d=\"M720.247 684.679 L720.806 684.679 L721.365 684.679 L721.924 684.679 L722.484 684.679 L723.043 684.679 L723.602 684.679 L724.161 684.679 L724.721 684.679 L725.28 684.679 L725.839 684.679 L726.398 684.679 L726.958 684.679 L727.517 684.679 L728.076 684.679 L728.635 684.679 L729.195 684.679 L729.754 684.679 L730.313 684.679 L730.872 684.679 L731.432 684.679 L731.991 684.679 L732.55 684.679 L733.109 684.679 L733.669 684.679 L734.228 684.679 L734.787 684.679 L735.346 684.679 L735.906 684.679 L736.465 684.679 L737.024 684.679 L737.583 684.679 L738.143 684.679 L738.702 684.679 L739.261 684.679 L739.82 684.679 L740.38 684.679 L740.939 684.679 L741.498 684.679 L742.057 684.679 L742.617 684.679 L743.176 684.679 L743.735 684.679 L744.294 684.679 L744.854 684.679 L745.413 684.679 L745.972 684.679 L746.531 684.679 L747.091 684.679 L747.65 684.679 L748.209 684.679 L748.768 684.679 L749.328 684.679 L749.887 684.679 L750.446 684.679 L751.005 684.679 L751.565 684.679 L752.124 684.679 L752.683 684.679 L753.242 684.679 L753.802 684.679 L754.361 684.679 L754.92 684.679 L755.479 684.679 L756.039 684.679 L756.598 684.679 L757.157 684.679 L757.716 684.679 L758.276 684.679 L758.835 684.679 L759.394 684.679 L759.953 684.679 L760.513 684.679 L761.072 684.679 L761.631 684.679 L762.19 684.679 L762.75 684.679 L763.309 684.679 L763.868 684.679 L764.427 684.679 L764.987 684.679 L765.546 684.679 L766.105 684.679 L766.664 684.679 L767.224 684.679 L767.783 684.679 L768.342 684.679 L768.901 684.679 L769.461 684.679 L770.02 684.679 L770.579 684.679 L771.138 684.679 L771.698 684.679 L772.257 684.679 L772.816 684.679 L773.375 684.679 L773.935 684.679 L774.494 684.679 L775.053 684.679 L775.612 684.679 L776.172 684.679 L776.731 684.679 L777.29 684.679 L777.849 684.679 L778.409 684.679 L778.968 684.679 L779.527 684.679 L780.086 684.679 L780.646 684.679 L781.205 684.679 L781.764 684.679 L782.323 684.679 L782.883 684.679 L783.442 684.679 L784.001 684.679 L784.56 684.679 L785.12 684.679 L785.679 684.679 L786.238 684.679 L786.797 684.679 L787.357 684.679 L787.916 684.679 L788.475 684.679 L789.034 684.679 L789.594 684.679 L790.153 684.679 L790.712 684.679 L791.271 684.679 L791.831 684.679 L792.39 684.679 L792.949 684.679 L793.508 684.679 L794.068 684.679 L794.627 684.679 L795.186 684.679 L795.745 684.679 L796.305 684.679 L796.864 684.679 L797.423 684.679 L797.982 684.679 L798.542 684.679 L799.101 684.679 L799.66 684.679 L800.219 684.679 L800.779 684.679 L801.338 684.679 L801.897 684.679 L802.456 684.679 L803.016 684.679 L803.575 684.679 L804.134 684.679 L804.693 684.679 L805.253 684.679 L805.812 684.679 L806.371 684.679 L806.931 684.679 L807.49 684.679 L808.049 684.679 L808.608 684.679 L809.168 684.679 L809.727 684.679 L810.286 684.679 L810.845 684.679 L811.405 684.679 L811.964 684.679 L812.523 684.679 L813.082 684.679 L813.642 684.679 L814.201 684.679 L814.76 684.679 L815.319 684.679 L815.879 684.679 L816.438 684.679 L816.997 684.679 L817.556 684.679 L818.116 684.679 L818.675 684.679 L819.234 684.679 L819.793 684.679 L820.353 684.679 L820.912 684.679 L821.471 684.679 L822.03 684.679 L822.59 684.679 L823.149 684.679 L823.708 684.679 L824.267 684.679 L824.827 684.679 L825.386 684.679 L825.945 684.679 L826.504 684.679 L827.064 684.679 L827.623 684.679 L828.182 684.679 L828.741 684.679 L829.301 684.679 L829.86 684.679 L830.419 684.679 L830.978 684.679 L831.538 684.679 L832.097 684.679 L832.656 684.679 L833.215 684.679 L833.775 684.679 L834.334 684.679 L834.893 684.679 L835.452 684.679 L836.012 684.679 L836.571 684.679 L837.13 684.679 L837.689 684.679 L838.249 684.679 L838.808 684.679 L839.367 684.679 L839.926 684.679 L840.486 684.679 L841.045 684.679 L841.604 684.679 L842.163 684.679 L842.723 684.679 L843.282 684.679 L843.841 684.679 L844.4 684.679 L844.96 684.679 L845.519 684.679 L846.078 684.679 L846.637 684.679 L847.197 684.679 L847.756 684.679 L848.315 684.679 L848.874 684.679 L849.434 684.679 L849.993 684.679 L850.552 684.679 L851.111 684.679 L851.671 684.679 L852.23 684.679 L852.789 684.679 L853.348 684.679 L853.908 684.679 L854.467 684.679 L855.026 684.679 L855.585 684.679 L856.145 684.679 L856.704 684.679 L857.263 684.679 L857.822 684.679 L858.382 684.679 L858.941 684.679 L859.5 684.679 L860.059 684.679 L860.619 684.679 L861.178 684.679 L861.737 684.679 L862.296 684.679 L862.856 684.679 L863.415 684.679 L863.974 684.679 L864.533 684.679 L865.093 684.679 L865.652 684.679 L866.211 684.679 L866.77 684.679 L867.33 684.679 L867.889 684.679 L868.448 684.679 L869.007 684.679 L869.567 684.679 L870.126 684.679 L870.685 684.679 L871.244 684.679 L871.804 684.679 L872.363 684.679 L872.922 684.679 L873.481 684.679 L874.041 684.679 L874.6 684.679 L875.159 684.679 L875.718 684.679 L876.278 684.679 L876.837 684.679 L877.396 684.679 L877.955 684.679 L878.515 684.679 L879.074 684.679 L879.633 684.679 L880.192 684.679 L880.752 684.679 L881.311 684.679 L881.87 684.679 L882.429 684.679 L882.989 684.679 L883.548 684.679 L884.107 684.679 L884.666 684.679 L885.226 684.679 L885.785 684.679 L886.344 684.679 L886.903 684.679 L887.463 684.679 L888.022 684.679 L888.581 684.679 L889.14 684.679 L889.7 684.679 L890.259 684.679 L890.818 684.679 L891.377 684.679 L891.937 684.679 L892.496 684.679 L893.055 684.679 L893.614 684.679 L894.174 684.679 L894.733 684.679 L895.292 684.679 L895.851 684.679 L896.411 684.679 L896.97 684.679 L897.529 684.679 L898.088 684.679 L898.648 684.679 L899.207 684.679 L899.766 684.679 L900.325 684.679 L900.885 684.679 L901.444 684.679 L902.003 684.679 L902.562 684.679 L903.122 684.679 L903.681 684.679 L904.24 684.679 L904.799 684.679 L905.359 684.679 L905.918 684.679 L906.477 684.679 L907.036 684.679 L907.596 684.679 L908.155 684.679 L908.714 684.679 L909.273 684.679 L909.833 684.679 L910.392 684.679 L910.951 684.679 L911.51 684.679 L912.07 684.679 L912.629 684.679 L913.188 684.679 L913.747 684.679 L914.307 684.679 L914.866 684.679 L915.425 684.679 L915.984 684.679 L916.544 684.679 L917.103 684.679 L917.662 684.679 L918.221 684.679 L918.781 684.679 L919.34 684.679 L919.899 684.679 L920.458 684.679 L921.018 684.679 L921.577 684.679 L922.136 684.679 L922.695 684.679 L923.255 684.679 L923.814 684.679 L924.373 684.679 L924.932 684.679 L925.492 684.679 L926.051 684.679 L926.61 684.679 L927.169 684.679 L927.729 684.679 L928.288 684.679 L928.847 684.679 L929.406 684.679 L929.966 684.679 L930.525 684.679 L931.084 684.679 L931.644 684.679 L932.203 684.679 L932.762 684.679 L933.321 684.679 L933.881 684.679 L934.44 684.679 L934.999 684.679 L935.558 684.679 L936.118 684.679 L936.677 684.679 L937.236 684.679 L937.795 684.679 L938.355 684.679 L938.914 684.679 L939.473 684.679 L940.032 684.679 L940.592 684.679 L941.151 684.679 L941.71 684.679 L942.269 684.679 L942.829 684.679 L943.388 684.679 L943.947 684.679 L944.506 684.679 L945.066 684.679 L945.625 684.679 L946.184 684.679 L946.743 684.679 L947.303 684.679 L947.862 684.679 L948.421 684.679 L948.98 684.679 L949.54 684.679 L950.099 684.679 L950.658 684.679 L951.217 684.679 L951.777 684.679 L952.336 684.679 L952.895 684.679 L953.454 684.679 L954.014 684.679 L954.573 684.679 L955.132 684.679 L955.691 684.679 L956.251 684.679 L956.81 684.679 L957.369 684.679 L957.928 684.679 L958.488 684.679 L959.047 684.679 L959.606 684.679 L960.165 684.679 L960.725 684.679 L961.284 684.679 L961.843 684.679 L962.402 684.679 L962.962 684.679 L963.521 684.679 L964.08 684.679 L964.639 684.679 L965.199 684.679 L965.758 684.679 L966.317 684.679 L966.876 684.679 L967.436 684.679 L967.995 684.679 L968.554 684.679 L969.113 684.679 L969.673 684.679 L970.232 684.679 L970.791 684.679 L971.35 684.679 L971.91 684.679 L972.469 684.679 L973.028 684.679 L973.587 684.679 L974.147 684.679 L974.706 684.679 L975.265 684.679 L975.824 684.679 L976.384 684.679 L976.943 684.679 L977.502 684.679 L978.061 684.679 L978.621 684.679 L979.18 684.679 L979.739 684.679 L980.298 684.679 L980.858 684.679 L981.417 684.679 L981.976 684.679 L982.535 684.679 L983.095 684.679 L983.654 684.679 L984.213 684.679 L984.772 684.679 L985.332 684.679 L985.891 684.679 L986.45 684.679 L987.009 684.679 L987.569 684.679 L988.128 684.679 L988.687 684.679 L989.246 684.679 L989.806 684.679 L990.365 684.679 L990.924 684.679 L991.483 684.679 L992.043 684.679 L992.602 684.679 L993.161 684.679 L993.72 684.679 L994.28 684.679 L994.839 684.679 L995.398 684.679 L995.957 684.679 L996.517 684.679 L997.076 684.679 L997.635 684.679 L998.194 684.679 L998.754 684.679 L999.313 684.679 L999.872 684.679 L1000.43 684.679 L1000.99 684.679 L1001.55 684.679 L1002.11 684.679 L1002.67 684.679 L1003.23 684.679 L1003.79 684.679 L1004.35 684.679 L1004.91 684.679 L1005.46 684.679 L1006.02 684.679 L1006.58 684.679 L1007.14 684.679 L1007.7 684.679 L1008.26 684.679 L1008.82 684.679 L1009.38 684.679 L1009.94 684.679 L1010.5 684.679 L1011.06 684.679 L1011.62 684.679 L1012.18 684.679 L1012.73 684.679 L1013.29 684.679 L1013.85 684.679 L1014.41 684.679 L1014.97 684.679 L1015.53 684.679 L1016.09 684.679 L1016.65 684.679 L1017.21 684.679 L1017.77 684.679 L1018.33 684.679 L1018.89 684.679 L1019.45 684.679 L1020.01 684.679 L1020.56 684.679 L1021.12 684.679 L1021.68 684.679 L1022.24 684.679 L1022.8 684.679 L1023.36 684.679 L1023.92 684.679 L1024.48 684.679 L1025.04 684.679 L1025.6 684.679 L1026.16 684.679 L1026.72 684.679 L1027.28 684.679 L1027.83 684.679 L1028.39 684.679 L1028.95 684.679 L1029.51 684.679 L1030.07 684.679 L1030.63 684.679 L1031.19 684.679 L1031.75 684.679 L1032.31 684.679 L1032.87 684.679 L1033.43 684.679 L1033.99 684.679 L1034.55 684.679 L1035.1 684.679 L1035.66 684.679 L1036.22 684.679 L1036.78 684.679 L1037.34 684.679 L1037.9 684.679 L1038.46 684.679 L1039.02 684.679 L1039.58 684.679 L1040.14 684.679 L1040.7 684.679 L1041.26 684.679 L1041.82 684.679 L1042.38 684.679 L1042.93 684.679 L1043.49 684.679 L1044.05 684.679 L1044.61 684.679 L1045.17 684.679 L1045.73 684.679 L1046.29 684.679 L1046.85 684.679 L1047.41 684.679 L1047.97 684.679 L1048.53 684.679 L1049.09 684.679 L1049.65 684.679 L1050.2 684.679 L1050.76 684.679 L1051.32 684.679 L1051.88 684.679 L1052.44 684.679 L1053 684.679 L1053.56 684.679 L1054.12 684.679 L1054.68 684.679 L1055.24 684.679 L1055.8 684.679 L1056.36 684.679 L1056.92 684.679 L1057.48 684.679 L1058.03 684.679 L1058.59 684.679 L1059.15 684.679 L1059.71 684.679 L1060.27 684.679 L1060.83 684.679 L1061.39 684.679 L1061.95 684.679 L1062.51 684.679 L1063.07 684.679 L1063.63 684.679 L1064.19 684.679 L1064.75 684.679 L1065.3 684.679 L1065.86 684.679 L1066.42 684.679 L1066.98 684.679 L1067.54 684.679 L1068.1 684.679 L1068.66 684.679 L1069.22 684.679 L1069.78 684.679 L1070.34 684.679 L1070.9 684.679 L1071.46 684.679 L1072.02 684.679 L1072.57 684.679 L1073.13 684.679 L1073.69 684.679 L1074.25 684.679 L1074.81 684.679 L1075.37 684.679 L1075.93 684.679 L1076.49 684.679 L1077.05 684.679 L1077.61 684.679 L1078.17 684.679 L1078.73 684.679 L1079.29 684.679 L1079.85 684.679 L1080.4 684.679 L1080.96 684.679 L1081.52 684.679 L1082.08 684.679 L1082.64 684.679 L1083.2 684.679 L1083.76 684.679 L1084.32 684.679 L1084.88 684.679 L1085.44 684.679 L1086 684.679 L1086.56 684.679 L1087.12 684.679 L1087.67 684.679 L1088.23 684.679 L1088.79 684.679 L1089.35 684.679 L1089.91 684.679 L1090.47 684.679 L1091.03 684.679 L1091.59 684.679 L1092.15 684.679 L1092.71 684.679 L1093.27 684.679 L1093.83 684.679 L1094.39 684.679 L1094.94 684.679 L1095.5 684.679 L1096.06 684.679 L1096.62 684.679 L1097.18 684.679 L1097.74 684.679 L1098.3 684.679 L1098.86 684.679 L1099.42 684.679 L1099.98 684.679 L1100.54 684.679 L1101.1 684.679 L1101.66 684.679 L1102.22 684.679 L1102.77 684.679 L1103.33 684.679 L1103.89 684.679 L1104.45 684.679 L1105.01 684.679 L1105.57 684.679 L1106.13 684.679 L1106.69 684.679 L1107.25 684.679 L1107.81 684.679 L1108.37 684.679 L1108.93 684.679 L1109.49 684.679 L1110.04 684.679 L1110.6 684.679 L1111.16 684.679 L1111.72 684.679 L1112.28 684.679 L1112.84 684.679 L1113.4 684.679 L1113.96 684.679 L1114.52 684.679 L1115.08 684.679 L1115.64 684.679 L1116.2 684.679 L1116.76 684.679 L1117.31 684.679 L1117.87 684.679 L1118.43 684.679 L1118.99 684.679 L1119.55 684.679 L1120.11 684.679 L1120.67 684.679 L1121.23 684.679 L1121.79 684.679 L1122.35 684.679 L1122.91 684.679 L1123.47 684.679 L1124.03 684.679 L1124.59 684.679 L1125.14 684.679 L1125.7 684.679 L1126.26 684.679 L1126.82 684.679 L1127.38 684.679 L1127.94 684.679 L1128.5 684.679 L1129.06 684.679 L1129.62 684.679 L1130.18 684.679 L1130.74 684.679 L1131.3 684.679 L1131.86 684.679 L1132.41 684.679 L1132.97 684.679 L1133.53 684.679 L1134.09 684.679 L1134.65 684.679 L1135.21 684.679 L1135.77 684.679 L1136.33 684.679 L1136.89 684.679 L1137.45 684.679 L1138.01 684.679 L1138.57 684.679 L1139.13 684.679 L1139.68 684.679 L1140.24 684.679 L1140.8 684.679 L1141.36 684.679 L1141.92 684.679 L1142.48 684.679 L1143.04 684.679 L1143.6 684.679 L1144.16 684.679 L1144.72 684.679 L1145.28 684.679 L1145.84 684.679 L1146.4 684.679 L1146.96 684.679 L1147.51 684.679 L1148.07 684.679 L1148.63 684.679 L1149.19 684.679 L1149.75 684.679 L1150.31 684.679 L1150.87 684.679 L1151.43 684.679 L1151.99 684.679 L1152.55 684.679 L1153.11 684.679 L1153.67 684.679 L1154.23 684.679 L1154.78 684.679 L1155.34 684.679 L1155.9 684.679 L1156.46 684.679 L1157.02 684.679 L1157.58 684.679 L1158.14 684.679 L1158.7 684.679 L1159.26 684.679 L1159.82 684.679 L1160.38 684.679 L1160.94 684.679 L1161.5 684.679 L1162.05 684.679 L1162.61 684.679 L1163.17 684.679 L1163.73 684.679 L1164.29 684.679 L1164.85 684.679 L1165.41 684.679 L1165.97 684.679 L1166.53 684.679 L1167.09 684.679 L1167.65 684.679 L1168.21 684.679 L1168.77 684.679 L1169.33 684.679 L1169.88 684.679 L1170.44 684.679 L1171 684.679 L1171.56 684.679 L1172.12 684.679 L1172.68 684.679 L1173.24 684.679 L1173.8 684.679 L1174.36 684.679 L1174.92 684.679 L1175.48 684.679 L1176.04 684.679 L1176.6 684.679 L1177.15 684.679 L1177.71 684.679 L1178.27 684.679 L1178.83 684.679 L1179.39 684.679 L1179.95 684.679 L1180.51 684.679 L1181.07 684.679 L1181.63 684.679 L1182.19 684.679 L1182.75 684.679 L1183.31 684.679 L1183.87 684.679 L1184.43 684.679 L1184.98 684.679 L1185.54 684.679 L1186.1 684.679 L1186.66 684.679 L1187.22 684.679 L1187.78 684.679 L1188.34 684.679 L1188.9 684.679 L1189.46 684.679 L1190.02 684.679 L1190.58 684.679 L1191.14 684.679 L1191.7 684.679 L1192.25 684.679 L1192.81 684.679 L1193.37 684.679 L1193.93 684.679 L1194.49 684.679 L1195.05 684.679 L1195.61 684.679 L1196.17 684.679 L1196.73 684.679 L1197.29 684.679 L1197.85 684.679 L1198.41 684.679 L1198.97 684.679 L1199.52 684.679 L1200.08 684.679 L1200.64 684.679 L1201.2 684.679 L1201.76 684.679 L1202.32 684.679 L1202.88 684.679 L1203.44 684.679 L1204 684.679 L1204.56 684.679 L1205.12 684.679 L1205.68 684.679 L1206.24 684.679 L1206.8 684.679 L1207.35 684.679 L1207.91 684.679 L1208.47 684.679 L1209.03 684.679 L1209.59 684.679 L1210.15 684.679 L1210.71 684.679 L1211.27 684.679 L1211.83 684.679 L1212.39 684.679 L1212.95 684.679 L1213.51 684.679 L1214.07 684.679 L1214.62 684.679 L1215.18 684.679 L1215.74 684.679 L1216.3 684.679 L1216.86 684.679 L1217.42 684.679 L1217.98 684.679 L1218.54 684.679 L1219.1 684.679 L1219.66 684.679 L1220.22 684.679 L1220.78 684.679 L1221.34 684.679 L1221.89 684.679 L1222.45 684.679 L1223.01 684.679 L1223.57 684.679 L1224.13 684.679 L1224.69 684.679 L1225.25 684.679 L1225.81 684.679 L1226.37 684.679 L1226.93 684.679 L1227.49 684.679 L1228.05 684.679 L1228.61 684.679 L1229.17 684.679 L1229.72 684.679 L1230.28 684.679 L1230.84 684.679 L1231.4 684.679 L1231.96 684.679 L1232.52 684.679 L1233.08 684.679 L1233.64 684.679 L1234.2 684.679 L1234.76 684.679 L1235.32 684.679 L1235.88 684.679 L1236.44 684.679 L1236.99 684.679 L1237.55 684.679 L1238.11 684.679 L1238.67 684.679 L1239.23 684.679 L1239.79 684.679 L1240.35 684.679 L1240.91 684.679 L1241.47 684.679 L1242.03 684.679 L1242.59 684.679 L1243.15 684.679 L1243.71 684.679 L1244.26 684.679 L1244.82 684.679 L1245.38 684.679 L1245.94 684.679 L1246.5 684.679 L1247.06 684.679 L1247.62 684.679 L1248.18 684.679 L1248.74 684.679 L1249.3 684.679 L1249.86 684.679 L1250.42 684.679 L1250.98 684.679 L1251.54 684.679 L1252.09 684.679 L1252.65 684.679 L1253.21 684.679 L1253.77 684.679 L1254.33 684.679 L1254.89 684.679 L1255.45 684.679 L1256.01 684.679 L1256.57 684.679 L1257.13 684.679 L1257.69 684.679 L1258.25 684.679 L1258.81 684.679 L1259.36 684.679 L1259.92 684.679 L1260.48 684.679 L1261.04 684.679 L1261.6 684.679 L1262.16 684.679 L1262.72 684.679 L1263.28 684.679 L1263.84 684.679 L1264.4 684.679 L1264.96 684.679 L1265.52 684.679 L1266.08 684.679 L1266.63 684.679 L1267.19 684.679 L1267.75 684.679 L1268.31 684.679 L1268.87 684.679 L1269.43 684.679 L1269.99 684.679 L1270.55 684.679 L1271.11 684.679 L1271.67 684.679 L1272.23 684.679 L1272.79 684.679 L1273.35 684.679 L1273.91 684.679 L1274.46 684.679 L1275.02 684.679 L1275.58 684.679 L1276.14 684.679 L1276.7 684.679 L1277.26 684.679 L1277.82 684.679 L1278.38 684.679 L1278.94 684.679 L1279.5 684.679 L1280.06 684.679 L1280.62 684.679 L1281.18 684.679 L1281.73 684.679 L1282.29 684.679 L1282.85 684.679 L1283.41 684.679 L1283.97 684.679 L1284.53 684.679 L1285.09 684.679 L1285.65 684.679 L1286.21 684.679 L1286.77 684.679 L1287.33 684.679 L1287.89 684.679 L1288.45 684.679 L1289 684.679 L1289.56 684.679 L1290.12 684.679 L1290.68 684.679 L1291.24 684.679 L1291.8 684.679 L1292.36 684.679 L1292.92 684.679 L1293.48 684.679 L1294.04 684.679 L1294.6 684.679 L1295.16 684.679 L1295.72 684.679 L1296.28 684.679 L1296.83 684.679 L1297.39 684.679 L1297.95 684.679 L1298.51 684.679 L1299.07 684.679 L1299.63 684.679 L1300.19 684.679 L1300.75 684.679 L1301.31 684.679 L1301.87 684.679 L1302.43 684.679 L1302.99 684.679 L1303.55 684.679 L1304.1 684.679 L1304.66 684.679 L1305.22 684.679 L1305.78 684.679 L1306.34 684.679 L1306.9 684.679 L1307.46 684.679 L1308.02 684.679 L1308.58 684.679 L1309.14 684.679 L1309.7 684.679 L1310.26 684.679 L1310.82 684.679 L1311.38 684.679 L1311.93 684.679 L1312.49 684.679 L1313.05 684.679 L1313.61 684.679 L1314.17 684.679 L1314.73 684.679 L1315.29 684.679 L1315.85 684.679 L1316.41 684.679 L1316.97 684.679 L1317.53 684.679 L1318.09 684.679 L1318.65 684.679 L1319.2 684.679 L1319.76 684.679 L1320.32 684.679 L1320.88 684.679 L1321.44 684.679 L1322 684.679 L1322.56 684.679 L1323.12 684.679 L1323.68 684.679 L1324.24 684.679 L1324.8 684.679 L1325.36 684.679 L1325.92 684.679 L1326.47 684.679 L1327.03 684.679 L1327.59 684.679 L1328.15 684.679 L1328.71 684.679 L1329.27 684.679 L1329.83 684.679 L1330.39 684.679 L1330.95 684.679 L1331.51 684.679 L1332.07 684.679 L1332.63 684.679 L1333.19 684.679 L1333.75 684.679 L1334.3 684.679 L1334.86 684.679 L1335.42 684.679 L1335.98 684.679 L1336.54 684.679 L1337.1 684.679 L1337.66 684.679 L1338.22 684.679 L1338.78 684.679 L1339.34 684.679 L1339.9 684.679 L1340.46 684.679 L1341.02 684.679 L1341.57 684.679 L1342.13 684.679 L1342.69 684.679 L1343.25 684.679 L1343.81 684.679 L1344.37 684.679 L1344.93 684.679 L1345.49 684.679 L1346.05 684.679 L1346.61 684.679 L1347.17 684.679 L1347.73 684.679 L1348.29 684.679 L1348.84 684.679 L1349.4 684.679 L1349.96 684.679 L1350.52 684.679 L1351.08 684.679 L1351.64 684.679 L1352.2 684.679 L1352.76 684.679 L1353.32 684.679 L1353.88 684.679 L1354.44 684.679 L1355 684.679 L1355.56 684.679 L1356.12 684.679 L1356.67 684.679 L1357.23 684.679 L1357.79 684.679 L1358.35 684.679 L1358.91 684.679 L1359.47 684.679 L1360.03 684.679 L1360.59 684.679 L1361.15 684.679 L1361.71 684.679 L1362.27 684.679 L1362.83 684.679 L1363.39 684.679 L1363.94 684.679 L1364.5 684.679 L1365.06 684.679 L1365.62 684.679 L1366.18 684.679 L1366.74 684.679 L1367.3 684.679 L1367.86 684.679 L1368.42 684.679 L1368.98 684.679 L1369.54 684.679 L1370.1 684.679 L1370.66 684.679 L1371.21 684.679 L1371.77 684.679 L1372.33 684.679 L1372.89 684.679 L1373.45 684.679 L1374.01 684.679 L1374.57 684.679 L1375.13 684.679 L1375.69 684.679 L1376.25 684.679 L1376.81 684.679 L1377.37 684.679 L1377.93 684.679 L1378.49 684.679 L1379.04 684.679 L1379.6 684.679 L1380.16 684.679 L1380.72 684.679 L1381.28 684.679 L1381.84 684.679 L1382.4 684.679 L1382.96 684.679 L1383.52 684.679 L1384.08 684.679 L1384.64 684.679 L1385.2 684.679 L1385.76 684.679 L1386.31 684.679 L1386.87 684.679 L1387.43 684.679 L1387.99 684.679 L1388.55 684.679 L1389.11 684.679 L1389.67 684.679 L1390.23 684.679 L1390.79 684.679 L1391.35 684.679 L1391.91 684.679 L1392.47 684.679 L1393.03 684.679 L1393.58 684.679 L1394.14 684.679 L1394.7 684.679 L1395.26 684.679 L1395.82 684.679 L1396.38 684.679 L1396.94 684.679 L1397.5 684.679 L1398.06 684.679 L1398.62 684.679 L1399.18 684.679 L1399.74 684.679 L1400.3 684.679 L1400.86 684.679 L1401.41 684.679 L1401.97 684.679 L1402.53 684.679 L1403.09 684.679 L1403.65 684.679 L1404.21 684.679 L1404.77 684.679 L1405.33 684.679 L1405.89 684.679 L1406.45 684.679 L1407.01 684.679 L1407.57 684.679 L1408.13 684.679 L1408.68 684.679 L1409.24 684.679 L1409.8 684.679 L1410.36 684.679 L1410.92 684.679 L1411.48 684.679 L1412.04 684.679 L1412.6 684.679 L1413.16 684.679 L1413.72 684.679 L1414.28 684.679 L1414.84 684.679 L1415.4 684.679 L1415.95 684.679 L1416.51 684.679 L1417.07 684.679 L1417.63 684.679 L1418.19 684.679 L1418.75 684.679 L1419.31 684.679 L1419.87 684.679 L1420.43 684.679 L1420.99 684.679 L1421.55 684.679 L1422.11 684.679 L1422.67 684.679 L1423.23 684.679 L1423.78 684.679 L1424.34 684.679 L1424.9 684.679 L1425.46 684.679 L1426.02 684.679 L1426.58 684.679 L1427.14 684.679 L1427.7 684.679 L1428.26 684.679 L1428.82 684.679 L1429.38 684.679 L1429.94 684.679 L1430.5 684.679 L1431.05 684.679 L1431.61 684.679 L1432.17 684.679 L1432.73 684.679 L1433.29 684.679 L1433.85 684.679 L1434.41 684.679 L1434.97 684.679 L1435.53 684.679 L1436.09 684.679 L1436.65 684.679 L1437.21 684.679 L1437.77 684.679 L1438.33 684.679 L1438.88 684.679 L1439.44 684.679 L1440 684.679 L1440.56 684.679 L1441.12 684.679 L1441.68 684.679 L1442.24 684.679 L1442.8 684.679 L1443.36 684.679 L1443.92 684.679 L1444.48 684.679 L1445.04 684.679 L1445.6 684.679 L1446.15 684.679 L1446.71 684.679 L1447.27 684.679 L1447.83 684.679 L1448.39 684.679 L1448.95 684.679 L1449.51 684.679 L1450.07 684.679 L1450.63 684.679 L1451.19 684.679 L1451.75 684.679 L1452.31 684.679 L1452.87 684.679 L1453.42 684.679 L1453.98 684.679 L1454.54 684.679 L1455.1 684.679 L1455.66 684.679 L1456.22 684.679 L1456.78 684.679 L1457.34 684.679 L1457.9 684.679 L1458.46 684.679 L1459.02 684.679 L1459.58 684.679 L1460.14 684.679 L1460.7 684.679 L1461.25 684.679 L1461.81 684.679 L1462.37 684.679 L1462.93 684.679 L1463.49 684.679 L1464.05 684.679 L1464.61 684.679 L1465.17 684.679 L1465.73 684.679 L1466.29 684.679 L1466.85 684.679 L1467.41 684.679 L1467.97 684.679 L1468.52 684.679 L1469.08 684.679 L1469.64 684.679 L1470.2 684.679 L1470.76 684.679 L1471.32 684.679 L1471.88 684.679 L1472.44 684.679 L1473 684.679 L1473.56 684.679 L1474.12 684.679 L1474.68 684.679 L1475.24 684.679 L1475.79 684.679 L1476.35 684.679 L1476.91 684.679 L1477.47 684.679 L1478.03 684.679 L1478.59 684.679 L1479.15 684.679 L1479.71 684.679 L1480.27 684.679 L1480.83 684.679 L1481.39 684.679 L1481.95 684.679 L1482.51 684.679 L1483.07 684.679 L1483.62 684.679 L1484.18 684.679 L1484.74 684.679 L1485.3 684.679 L1485.86 684.679 L1486.42 684.679 L1486.98 684.679 L1487.54 684.679 L1488.1 684.679 L1488.66 684.679 L1489.22 684.679 L1489.78 684.679 L1490.34 684.679 L1490.89 684.679 L1491.45 684.679 L1492.01 684.679 L1492.57 684.679 L1493.13 684.679 L1493.69 684.679 L1494.25 684.679 L1494.81 684.679 L1495.37 684.679 L1495.93 684.679 L1496.49 684.679 L1497.05 684.679 L1497.61 684.679 L1498.16 684.679 L1498.72 684.679 L1499.28 684.679 L1499.84 684.679 L1500.4 684.679 L1500.96 684.679 L1501.52 684.679 L1502.08 684.679 L1502.64 684.679 L1503.2 684.679 L1503.76 684.679 L1504.32 684.679 L1504.88 684.679 L1505.44 684.679 L1505.99 684.679 L1506.55 684.679 L1507.11 684.679 L1507.67 684.679 L1508.23 684.679 L1508.79 684.679 L1509.35 684.679 L1509.91 684.679 L1510.47 684.679 L1511.03 684.679 L1511.59 684.679 L1512.15 684.679 L1512.71 684.679 L1513.26 684.679 L1513.82 684.679 L1514.38 684.679 L1514.94 684.679 L1515.5 684.679 L1516.06 684.679 L1516.62 684.679 L1517.18 684.679 L1517.74 684.679 L1518.3 684.679 L1518.86 684.679 L1519.42 684.679 L1519.98 684.679 L1520.53 684.679 L1521.09 684.679 L1521.65 684.679 L1522.21 684.679 L1522.77 684.679 L1523.33 684.679 L1523.89 684.679 L1524.45 684.679 L1525.01 684.679 L1525.57 684.679 L1526.13 684.679 L1526.69 684.679 L1527.25 684.679 L1527.81 684.679 L1528.36 684.679 L1528.92 684.679 L1529.48 684.679 L1530.04 684.679 L1530.6 684.679 L1531.16 684.679 L1531.72 684.679 L1532.28 684.679 L1532.84 684.679 L1533.4 684.679 L1533.96 684.679 L1534.52 684.679 L1535.08 684.679 L1535.63 684.679 L1536.19 684.679 L1536.75 684.679 L1537.31 684.679 L1537.87 684.679 L1538.43 684.679 L1538.99 684.679 L1539.55 684.679 L1540.11 684.679 L1540.67 684.679 L1541.23 684.679 L1541.79 684.679 L1542.35 684.679 L1542.9 684.679 L1543.46 684.679 L1544.02 684.679 L1544.58 684.679 L1545.14 684.679 L1545.7 684.679 L1546.26 684.679 L1546.82 684.679 L1547.38 684.679 L1547.94 684.679 L1548.5 684.679 L1549.06 684.679 L1549.62 684.679 L1550.18 684.679 L1550.73 684.679 L1551.29 684.679 L1551.85 684.679 L1552.41 684.679 L1552.97 684.679 L1553.53 684.679 L1554.09 684.679 L1554.65 684.679 L1555.21 684.679 L1555.77 684.679 L1556.33 684.679 L1556.89 684.679 L1557.45 684.679 L1558 684.679 L1558.56 684.679 L1559.12 684.679 L1559.68 684.679 L1560.24 684.679 L1560.8 684.679 L1561.36 684.679 L1561.92 684.679 L1562.48 684.679 L1563.04 684.679 L1563.6 684.679 L1564.16 684.679 L1564.72 684.679 L1565.28 684.679 L1565.83 684.679 L1566.39 684.679 L1566.95 684.679 L1567.51 684.679 L1568.07 684.679 L1568.63 684.679 L1569.19 684.679 L1569.75 684.679 L1570.31 684.679 L1570.87 684.679 L1571.43 684.679 L1571.99 684.679 L1572.55 684.679 L1573.1 684.679 L1573.66 684.679 L1574.22 684.679 L1574.78 684.679 L1575.34 684.679 L1575.9 684.679 L1576.46 684.679 L1577.02 684.679 L1577.58 684.679 L1578.14 684.679 L1578.7 684.679 L1579.26 684.679 L1579.82 684.679 L1580.37 684.679 L1580.93 684.679 L1581.49 684.679 L1582.05 684.679 L1582.61 684.679 L1583.17 684.679 L1583.73 684.679 L1584.29 684.679 L1584.85 684.679 L1585.41 684.679 L1585.97 684.679 L1586.53 684.679 L1587.09 684.679 L1587.65 684.679 L1588.2 684.679 L1588.76 684.679 L1589.32 684.679 L1589.88 684.679 L1590.44 684.679 L1591 684.679 L1591.56 684.679 L1592.12 684.679 L1592.68 684.679 L1593.24 684.679 L1593.8 684.679 L1594.36 684.679 L1594.92 684.679 L1595.47 684.679 L1596.03 684.679 L1596.59 684.679 L1597.15 684.679 L1597.71 684.679 L1598.27 684.679 L1598.83 684.679 L1599.39 684.679 L1599.95 684.679 L1600.51 684.679 L1601.07 684.679 L1601.63 684.679 L1602.19 684.679 L1602.74 684.679 L1603.3 684.679 L1603.86 684.679 L1604.42 684.679 L1604.98 684.679 L1605.54 684.679 L1606.1 684.679 L1606.66 684.679 L1607.22 684.679 L1607.78 684.679 L1608.34 684.679 L1608.9 684.679 L1609.46 684.679 L1610.02 684.679 L1610.57 684.679 L1611.13 684.679 L1611.69 684.679 L1612.25 684.679 L1612.81 684.679 L1613.37 684.679 L1613.93 684.679 L1614.49 684.679 L1615.05 684.679 L1615.61 684.679 L1616.17 684.679 L1616.73 684.679 L1617.29 684.679 L1617.84 684.679 L1618.4 684.679 L1618.96 684.679 L1619.52 684.679 L1620.08 684.679 L1620.64 684.679 L1621.2 684.679 L1621.76 684.679 L1622.32 684.679 L1622.88 684.679 L1623.44 684.679 L1624 684.679 L1624.56 684.679 L1625.11 684.679 L1625.67 684.679 L1626.23 684.679 L1626.79 684.679 L1627.35 684.679 L1627.91 684.679 L1628.47 684.679 L1629.03 684.679 L1629.59 684.679 L1630.15 684.679 L1630.71 684.679 L1631.27 684.679 L1631.83 684.679 L1632.39 684.679 L1632.94 684.679 L1633.5 684.679 L1634.06 684.679 L1634.62 684.679 L1635.18 684.679 L1635.74 684.679 L1636.3 684.679 L1636.86 684.679 L1637.42 684.679 L1637.98 684.679 L1638.54 684.679 L1639.1 684.679 L1639.66 684.679 L1640.21 684.679 L1640.77 684.679 L1641.33 684.679 L1641.89 684.679 L1642.45 684.679 L1643.01 684.679 L1643.57 684.679 L1644.13 684.679 L1644.69 684.679 L1645.25 684.679 L1645.81 684.679 L1646.37 684.679 L1646.93 684.679 L1647.48 684.679 L1648.04 684.679 L1648.6 684.679 L1649.16 684.679 L1649.72 684.679 L1650.28 684.679 L1650.84 684.679 L1651.4 684.679 L1651.96 684.679 L1652.52 684.679 L1653.08 684.679 L1653.64 684.679 L1654.2 684.679 L1654.76 684.679 L1655.31 684.679 L1655.87 684.679 L1656.43 684.679 L1656.99 684.679 L1657.55 684.679 L1658.11 684.679 L1658.67 684.679 L1659.23 684.679 L1659.79 684.679 L1660.35 684.679 L1660.91 684.679 L1661.47 684.679 L1662.03 684.679 L1662.58 684.679 L1663.14 684.679 L1663.7 684.679 L1664.26 684.679 L1664.82 684.679 L1665.38 684.679 L1665.94 684.679 L1666.5 684.679 L1667.06 684.679 L1667.62 684.679 L1668.18 684.679 L1668.74 684.679 L1669.3 684.679 L1669.85 684.679 L1670.41 684.679 L1670.97 684.679 L1671.53 684.679 L1672.09 684.679 L1672.65 684.679 L1673.21 684.679 L1673.77 684.679 L1674.33 684.679 L1674.89 684.679 L1675.45 684.679 L1676.01 684.679 L1676.57 684.679 L1677.13 684.679 L1677.68 684.679 L1678.24 684.679 L1678.8 684.679 L1679.36 684.679 L1679.92 684.679 L1680.48 684.679 L1681.04 684.679 L1681.6 684.679 L1682.16 684.679 L1682.72 684.679 L1683.28 684.679 L1683.84 684.679 L1684.4 684.679 L1684.95 684.679 L1685.51 684.679 L1686.07 684.679 L1686.63 684.679 L1687.19 684.679 L1687.75 684.679 L1688.31 684.679 L1688.87 684.679 L1689.43 684.679 L1689.99 684.679 L1690.55 684.679 L1691.11 684.679 L1691.67 684.679 L1692.23 684.679 L1692.78 684.679 L1693.34 684.679 L1693.9 684.679 L1694.46 684.679 L1695.02 684.679 L1695.58 684.679 L1696.14 684.679 L1696.7 684.679 L1697.26 684.679 L1697.82 684.679 L1698.38 684.679 L1698.94 684.679 L1699.5 684.679 L1700.05 684.679 L1700.61 684.679 L1701.17 684.679 L1701.73 684.679 L1702.29 684.679 L1702.85 684.679 L1703.41 684.679 L1703.97 684.679 L1704.53 684.679 L1705.09 684.679 L1705.65 684.679 L1706.21 684.679 L1706.77 684.679 L1707.32 684.679 L1707.88 684.679 L1708.44 684.679 L1709 684.679 L1709.56 684.679 L1710.12 684.679 L1710.68 684.679 L1711.24 684.679 L1711.8 684.679 L1712.36 684.679 L1712.92 684.679 L1713.48 684.679 L1714.04 684.679 L1714.6 684.679 L1715.15 684.679 L1715.71 684.679 L1716.27 684.679 L1716.83 684.679 L1717.39 684.679 L1717.95 684.679 L1718.51 684.679 L1719.07 684.679 L1719.63 684.679 L1720.19 684.679 L1720.75 684.679 L1721.31 684.679 L1721.87 684.679 L1722.42 684.679 L1722.98 684.679 L1723.54 684.679 L1724.1 684.679 L1724.66 684.679 L1725.22 684.679 L1725.78 684.679 L1726.34 684.679 L1726.9 684.679 L1727.46 684.679 L1728.02 684.679 L1728.58 684.679 L1729.14 684.679 L1729.69 684.679 L1730.25 684.679 L1730.81 684.679 L1731.37 684.679 L1731.93 684.679 L1732.49 684.679 L1733.05 684.679 L1733.61 684.679 L1734.17 684.679 L1734.73 684.679 L1735.29 684.679 L1735.85 684.679 L1736.41 684.679 L1736.97 684.679 L1737.52 684.679 L1738.08 684.679 L1738.64 684.679 L1739.2 684.679 L1739.76 684.679 L1740.32 684.679 L1740.88 684.679 L1741.44 684.679 L1742 684.679 L1742.56 684.679 L1743.12 684.679 L1743.68 684.679 L1744.24 684.679 L1744.79 684.679 L1745.35 684.679 L1745.91 684.679 L1746.47 684.679 L1747.03 684.679 L1747.59 684.679 L1748.15 684.679 L1748.71 684.679 L1749.27 684.679 L1749.83 684.679 L1750.39 684.679 L1750.95 684.679 L1751.51 684.679 L1752.06 684.679 L1752.62 684.679 L1753.18 684.679 L1753.74 684.679 L1754.3 684.679 L1754.86 684.679 L1755.42 684.679 L1755.98 684.679 L1756.54 684.679 L1757.1 684.679 L1757.66 684.679 L1758.22 684.679 L1758.78 684.679 L1759.34 684.679 L1759.89 684.679 L1760.45 684.679 L1761.01 684.679 L1761.57 684.679 L1762.13 684.679 L1762.69 684.679 L1763.25 684.679 L1763.81 684.679 L1764.37 684.679 L1764.93 684.679 L1765.49 684.679 L1766.05 684.679 L1766.61 684.679 L1767.16 684.679 L1767.72 684.679 L1768.28 684.679 L1768.84 684.679 L1769.4 684.679 L1769.96 684.679 L1770.52 684.679 L1771.08 684.679 L1771.64 684.679 L1772.2 684.679 L1772.76 684.679 L1773.32 684.679 L1773.88 684.679 L1774.43 684.679 L1774.99 684.679 L1775.55 684.679 L1776.11 684.679 L1776.67 684.679 L1777.23 684.679 L1777.79 684.679 L1778.35 684.679 L1778.91 684.679 L1779.47 684.679 L1780.03 684.679 L1780.59 684.679 L1781.15 684.679 L1781.71 684.679 L1782.26 684.679 L1782.82 684.679 L1783.38 684.679 L1783.94 684.679 L1784.5 684.679 L1785.06 684.679 L1785.62 684.679 L1786.18 684.679 L1786.74 684.679 L1787.3 684.679 L1787.86 684.679 L1788.42 684.679 L1788.98 684.679 L1789.53 684.679 L1790.09 684.679 L1790.65 684.679 L1791.21 684.679 L1791.77 684.679 L1792.33 684.679 L1792.89 684.679 L1793.45 684.679 L1794.01 684.679 L1794.57 684.679 L1795.13 684.679 L1795.69 684.679 L1796.25 684.679 L1796.8 684.679 L1797.36 684.679 L1797.92 684.679 L1798.48 684.679 L1799.04 684.679 L1799.6 684.679 L1800.16 684.679 L1800.72 684.679 L1801.28 684.679 L1801.84 684.679 L1802.4 684.679 L1802.96 684.679 L1803.52 684.679 L1804.08 684.679 L1804.63 684.679 L1805.19 684.679 L1805.75 684.679 L1806.31 684.679 L1806.87 684.679 L1807.43 684.679 L1807.99 684.679 L1808.55 684.679 L1809.11 684.679 L1809.67 684.679 L1810.23 684.679 L1810.79 684.679 L1811.35 684.679 L1811.9 684.679 L1812.46 684.679 L1813.02 684.679 L1813.58 684.679 L1814.14 684.679 L1814.7 684.679 L1815.26 684.679 L1815.82 684.679 L1816.38 684.679 L1816.94 684.679 L1817.5 684.679 L1818.06 684.679 L1818.62 684.679 L1819.18 684.679 L1819.73 684.679 L1820.29 684.679 L1820.85 684.679 L1821.41 684.679 L1821.97 684.679 L1822.53 684.679 L1823.09 684.679 L1823.65 684.679 L1824.21 684.679 L1824.77 684.679 L1825.33 684.679 L1825.89 684.679 L1826.45 684.679 L1827 684.679 L1827.56 684.679 L1828.12 684.679 L1828.68 684.679 L1829.24 684.679 L1829.8 684.679 L1830.36 684.679 L1830.92 684.679 L1831.48 684.679 L1832.04 684.679 L1832.6 684.679 L1833.16 684.679 L1833.72 684.679 L1834.27 684.679 L1834.83 684.679 L1835.39 684.679 L1835.95 684.679 L1836.51 684.679 L1837.07 684.679 L1837.63 684.679 L1838.19 684.679 L1838.19 682.095 L1837.63 682.095 L1837.07 682.095 L1836.51 682.095 L1835.95 682.095 L1835.39 682.095 L1834.83 682.095 L1834.27 682.095 L1833.72 682.095 L1833.16 682.095 L1832.6 682.095 L1832.04 682.095 L1831.48 682.095 L1830.92 682.095 L1830.36 682.095 L1829.8 682.095 L1829.24 682.095 L1828.68 682.095 L1828.12 682.095 L1827.56 682.095 L1827 682.095 L1826.45 682.095 L1825.89 682.095 L1825.33 682.095 L1824.77 682.095 L1824.21 682.095 L1823.65 682.095 L1823.09 682.095 L1822.53 682.095 L1821.97 682.095 L1821.41 682.095 L1820.85 682.095 L1820.29 682.095 L1819.73 682.095 L1819.18 682.095 L1818.62 682.095 L1818.06 682.095 L1817.5 682.095 L1816.94 682.095 L1816.38 682.095 L1815.82 682.095 L1815.26 682.095 L1814.7 682.095 L1814.14 682.095 L1813.58 682.095 L1813.02 682.095 L1812.46 682.095 L1811.9 682.095 L1811.35 682.095 L1810.79 682.095 L1810.23 682.095 L1809.67 682.095 L1809.11 682.095 L1808.55 682.095 L1807.99 682.095 L1807.43 682.095 L1806.87 682.095 L1806.31 682.095 L1805.75 682.095 L1805.19 682.095 L1804.63 682.095 L1804.08 682.095 L1803.52 682.095 L1802.96 682.095 L1802.4 682.095 L1801.84 682.095 L1801.28 682.095 L1800.72 682.095 L1800.16 682.095 L1799.6 682.095 L1799.04 682.095 L1798.48 682.095 L1797.92 682.095 L1797.36 682.095 L1796.8 682.095 L1796.25 682.095 L1795.69 682.095 L1795.13 682.095 L1794.57 682.095 L1794.01 682.095 L1793.45 682.095 L1792.89 682.095 L1792.33 682.095 L1791.77 682.095 L1791.21 682.095 L1790.65 682.095 L1790.09 682.095 L1789.53 682.095 L1788.98 682.095 L1788.42 682.095 L1787.86 682.095 L1787.3 682.095 L1786.74 682.095 L1786.18 682.095 L1785.62 682.095 L1785.06 682.095 L1784.5 682.095 L1783.94 682.095 L1783.38 682.095 L1782.82 682.095 L1782.26 682.095 L1781.71 682.095 L1781.15 682.095 L1780.59 682.095 L1780.03 682.095 L1779.47 682.095 L1778.91 682.095 L1778.35 682.095 L1777.79 682.095 L1777.23 682.095 L1776.67 682.095 L1776.11 682.095 L1775.55 682.095 L1774.99 682.095 L1774.43 682.095 L1773.88 682.095 L1773.32 682.095 L1772.76 682.095 L1772.2 682.095 L1771.64 682.095 L1771.08 682.095 L1770.52 682.095 L1769.96 682.095 L1769.4 682.095 L1768.84 682.095 L1768.28 682.095 L1767.72 682.095 L1767.16 682.095 L1766.61 682.095 L1766.05 682.095 L1765.49 682.095 L1764.93 682.095 L1764.37 682.095 L1763.81 682.095 L1763.25 682.095 L1762.69 682.095 L1762.13 682.095 L1761.57 682.095 L1761.01 682.095 L1760.45 682.095 L1759.89 682.095 L1759.34 682.095 L1758.78 682.095 L1758.22 682.095 L1757.66 682.095 L1757.1 682.095 L1756.54 682.095 L1755.98 682.095 L1755.42 682.095 L1754.86 682.095 L1754.3 682.095 L1753.74 682.095 L1753.18 682.095 L1752.62 682.095 L1752.06 682.095 L1751.51 682.095 L1750.95 682.095 L1750.39 682.095 L1749.83 682.095 L1749.27 682.095 L1748.71 682.095 L1748.15 682.095 L1747.59 682.095 L1747.03 682.095 L1746.47 682.095 L1745.91 682.095 L1745.35 682.095 L1744.79 682.095 L1744.24 682.095 L1743.68 682.095 L1743.12 682.095 L1742.56 682.095 L1742 682.095 L1741.44 682.095 L1740.88 682.095 L1740.32 682.095 L1739.76 682.095 L1739.2 682.095 L1738.64 682.095 L1738.08 682.095 L1737.52 682.095 L1736.97 682.095 L1736.41 682.095 L1735.85 682.095 L1735.29 682.095 L1734.73 682.095 L1734.17 682.095 L1733.61 682.095 L1733.05 682.095 L1732.49 682.095 L1731.93 682.095 L1731.37 682.095 L1730.81 682.095 L1730.25 682.095 L1729.69 682.095 L1729.14 682.095 L1728.58 682.095 L1728.02 682.095 L1727.46 682.095 L1726.9 682.095 L1726.34 682.095 L1725.78 682.095 L1725.22 682.095 L1724.66 682.095 L1724.1 682.095 L1723.54 682.095 L1722.98 682.095 L1722.42 682.095 L1721.87 682.095 L1721.31 682.095 L1720.75 682.095 L1720.19 682.095 L1719.63 682.095 L1719.07 682.095 L1718.51 682.095 L1717.95 682.095 L1717.39 682.095 L1716.83 682.095 L1716.27 682.095 L1715.71 682.095 L1715.15 682.095 L1714.6 682.095 L1714.04 682.095 L1713.48 682.095 L1712.92 682.095 L1712.36 682.095 L1711.8 682.095 L1711.24 682.095 L1710.68 682.095 L1710.12 682.095 L1709.56 682.095 L1709 682.095 L1708.44 682.095 L1707.88 682.095 L1707.32 682.095 L1706.77 682.095 L1706.21 682.095 L1705.65 682.095 L1705.09 682.095 L1704.53 682.095 L1703.97 682.095 L1703.41 682.095 L1702.85 682.095 L1702.29 682.095 L1701.73 682.095 L1701.17 682.095 L1700.61 682.095 L1700.05 682.095 L1699.5 682.095 L1698.94 682.095 L1698.38 682.095 L1697.82 682.095 L1697.26 682.095 L1696.7 682.095 L1696.14 682.095 L1695.58 682.095 L1695.02 682.095 L1694.46 682.095 L1693.9 682.095 L1693.34 682.095 L1692.78 682.095 L1692.23 682.095 L1691.67 682.095 L1691.11 682.095 L1690.55 682.095 L1689.99 682.095 L1689.43 682.095 L1688.87 682.095 L1688.31 682.095 L1687.75 682.095 L1687.19 682.095 L1686.63 682.095 L1686.07 682.095 L1685.51 682.095 L1684.95 682.095 L1684.4 682.095 L1683.84 682.095 L1683.28 682.095 L1682.72 682.095 L1682.16 682.095 L1681.6 682.095 L1681.04 682.095 L1680.48 682.095 L1679.92 682.095 L1679.36 682.095 L1678.8 682.095 L1678.24 682.095 L1677.68 682.095 L1677.13 682.095 L1676.57 682.095 L1676.01 682.095 L1675.45 682.095 L1674.89 682.095 L1674.33 682.095 L1673.77 682.095 L1673.21 682.095 L1672.65 682.095 L1672.09 682.095 L1671.53 682.095 L1670.97 682.095 L1670.41 682.095 L1669.85 682.095 L1669.3 682.095 L1668.74 682.095 L1668.18 682.095 L1667.62 682.095 L1667.06 682.095 L1666.5 682.095 L1665.94 682.095 L1665.38 682.095 L1664.82 682.095 L1664.26 682.095 L1663.7 682.095 L1663.14 682.095 L1662.58 682.095 L1662.03 682.095 L1661.47 682.095 L1660.91 682.095 L1660.35 682.095 L1659.79 682.095 L1659.23 682.095 L1658.67 682.095 L1658.11 682.095 L1657.55 682.095 L1656.99 682.095 L1656.43 682.095 L1655.87 682.095 L1655.31 682.095 L1654.76 682.095 L1654.2 682.095 L1653.64 682.095 L1653.08 682.095 L1652.52 682.095 L1651.96 682.095 L1651.4 682.095 L1650.84 682.095 L1650.28 682.095 L1649.72 682.095 L1649.16 682.095 L1648.6 682.095 L1648.04 682.095 L1647.48 682.095 L1646.93 682.095 L1646.37 682.095 L1645.81 682.095 L1645.25 682.095 L1644.69 682.095 L1644.13 682.095 L1643.57 682.095 L1643.01 682.095 L1642.45 682.095 L1641.89 682.095 L1641.33 682.095 L1640.77 682.095 L1640.21 682.095 L1639.66 682.095 L1639.1 682.095 L1638.54 682.095 L1637.98 682.095 L1637.42 682.095 L1636.86 682.095 L1636.3 682.095 L1635.74 682.095 L1635.18 682.095 L1634.62 682.095 L1634.06 682.095 L1633.5 682.095 L1632.94 682.095 L1632.39 682.095 L1631.83 682.095 L1631.27 682.095 L1630.71 682.095 L1630.15 682.095 L1629.59 682.095 L1629.03 682.095 L1628.47 682.095 L1627.91 682.095 L1627.35 682.095 L1626.79 682.095 L1626.23 682.095 L1625.67 682.095 L1625.11 682.095 L1624.56 682.095 L1624 682.095 L1623.44 682.095 L1622.88 682.095 L1622.32 682.095 L1621.76 682.095 L1621.2 682.095 L1620.64 682.095 L1620.08 682.095 L1619.52 682.095 L1618.96 682.095 L1618.4 682.095 L1617.84 682.095 L1617.29 682.095 L1616.73 682.095 L1616.17 682.095 L1615.61 682.095 L1615.05 682.095 L1614.49 682.095 L1613.93 682.095 L1613.37 682.095 L1612.81 682.095 L1612.25 682.095 L1611.69 682.095 L1611.13 682.095 L1610.57 682.095 L1610.02 682.095 L1609.46 682.095 L1608.9 682.095 L1608.34 682.095 L1607.78 682.095 L1607.22 682.095 L1606.66 682.095 L1606.1 682.095 L1605.54 682.095 L1604.98 682.095 L1604.42 682.095 L1603.86 682.095 L1603.3 682.095 L1602.74 682.095 L1602.19 682.095 L1601.63 682.095 L1601.07 682.095 L1600.51 682.095 L1599.95 682.095 L1599.39 682.095 L1598.83 682.095 L1598.27 682.095 L1597.71 682.095 L1597.15 682.095 L1596.59 682.095 L1596.03 682.095 L1595.47 682.095 L1594.92 682.095 L1594.36 682.095 L1593.8 682.095 L1593.24 682.095 L1592.68 682.095 L1592.12 682.095 L1591.56 682.095 L1591 682.095 L1590.44 682.095 L1589.88 682.095 L1589.32 682.095 L1588.76 682.095 L1588.2 682.095 L1587.65 682.095 L1587.09 682.095 L1586.53 682.095 L1585.97 682.095 L1585.41 682.095 L1584.85 682.095 L1584.29 682.095 L1583.73 682.095 L1583.17 682.095 L1582.61 682.095 L1582.05 682.095 L1581.49 682.095 L1580.93 682.095 L1580.37 682.095 L1579.82 682.095 L1579.26 682.095 L1578.7 682.095 L1578.14 682.095 L1577.58 682.095 L1577.02 682.095 L1576.46 682.095 L1575.9 682.095 L1575.34 682.095 L1574.78 682.095 L1574.22 682.095 L1573.66 682.095 L1573.1 682.095 L1572.55 682.095 L1571.99 682.095 L1571.43 682.095 L1570.87 682.095 L1570.31 682.095 L1569.75 682.095 L1569.19 682.095 L1568.63 682.095 L1568.07 682.095 L1567.51 682.095 L1566.95 682.095 L1566.39 682.095 L1565.83 682.095 L1565.28 682.095 L1564.72 682.095 L1564.16 682.095 L1563.6 682.095 L1563.04 682.095 L1562.48 682.095 L1561.92 682.095 L1561.36 682.095 L1560.8 682.095 L1560.24 682.095 L1559.68 682.095 L1559.12 682.095 L1558.56 682.095 L1558 682.095 L1557.45 682.095 L1556.89 682.095 L1556.33 682.095 L1555.77 682.095 L1555.21 682.095 L1554.65 682.095 L1554.09 682.095 L1553.53 682.095 L1552.97 682.095 L1552.41 682.095 L1551.85 682.095 L1551.29 682.095 L1550.73 682.095 L1550.18 682.095 L1549.62 682.095 L1549.06 682.095 L1548.5 682.095 L1547.94 682.095 L1547.38 682.095 L1546.82 682.095 L1546.26 682.095 L1545.7 682.095 L1545.14 682.095 L1544.58 682.095 L1544.02 682.095 L1543.46 682.095 L1542.9 682.095 L1542.35 682.095 L1541.79 682.095 L1541.23 682.095 L1540.67 682.095 L1540.11 682.095 L1539.55 682.095 L1538.99 682.095 L1538.43 682.095 L1537.87 682.095 L1537.31 682.095 L1536.75 682.095 L1536.19 682.095 L1535.63 682.095 L1535.08 682.095 L1534.52 682.095 L1533.96 682.095 L1533.4 682.095 L1532.84 682.095 L1532.28 682.095 L1531.72 682.095 L1531.16 682.095 L1530.6 682.095 L1530.04 682.095 L1529.48 682.095 L1528.92 682.095 L1528.36 682.095 L1527.81 682.095 L1527.25 682.095 L1526.69 682.095 L1526.13 682.095 L1525.57 682.095 L1525.01 682.095 L1524.45 682.095 L1523.89 682.095 L1523.33 682.095 L1522.77 682.095 L1522.21 682.095 L1521.65 682.095 L1521.09 682.095 L1520.53 682.095 L1519.98 682.095 L1519.42 682.095 L1518.86 682.095 L1518.3 682.095 L1517.74 682.095 L1517.18 682.095 L1516.62 682.095 L1516.06 682.095 L1515.5 682.095 L1514.94 682.095 L1514.38 682.095 L1513.82 682.095 L1513.26 682.095 L1512.71 682.095 L1512.15 682.095 L1511.59 682.095 L1511.03 682.095 L1510.47 682.095 L1509.91 682.095 L1509.35 682.095 L1508.79 682.095 L1508.23 682.095 L1507.67 682.095 L1507.11 682.095 L1506.55 682.095 L1505.99 682.095 L1505.44 682.095 L1504.88 682.095 L1504.32 682.095 L1503.76 682.095 L1503.2 682.095 L1502.64 682.095 L1502.08 682.095 L1501.52 682.095 L1500.96 682.095 L1500.4 682.095 L1499.84 682.095 L1499.28 682.095 L1498.72 682.095 L1498.16 682.095 L1497.61 682.095 L1497.05 682.095 L1496.49 682.095 L1495.93 682.095 L1495.37 682.095 L1494.81 682.095 L1494.25 682.095 L1493.69 682.095 L1493.13 682.095 L1492.57 682.095 L1492.01 682.095 L1491.45 682.095 L1490.89 682.095 L1490.34 682.095 L1489.78 682.095 L1489.22 682.095 L1488.66 682.095 L1488.1 682.095 L1487.54 682.095 L1486.98 682.095 L1486.42 682.095 L1485.86 682.095 L1485.3 682.095 L1484.74 682.095 L1484.18 682.095 L1483.62 682.095 L1483.07 682.095 L1482.51 682.095 L1481.95 682.095 L1481.39 682.095 L1480.83 682.095 L1480.27 682.095 L1479.71 682.095 L1479.15 682.095 L1478.59 682.095 L1478.03 682.095 L1477.47 682.095 L1476.91 682.095 L1476.35 682.095 L1475.79 682.095 L1475.24 682.095 L1474.68 682.095 L1474.12 682.095 L1473.56 682.095 L1473 682.095 L1472.44 682.095 L1471.88 682.095 L1471.32 682.095 L1470.76 682.095 L1470.2 682.095 L1469.64 682.095 L1469.08 682.095 L1468.52 682.095 L1467.97 682.095 L1467.41 682.095 L1466.85 682.095 L1466.29 682.095 L1465.73 682.095 L1465.17 682.095 L1464.61 682.095 L1464.05 682.095 L1463.49 682.095 L1462.93 682.095 L1462.37 682.095 L1461.81 682.095 L1461.25 682.095 L1460.7 682.095 L1460.14 682.095 L1459.58 682.095 L1459.02 682.095 L1458.46 682.095 L1457.9 682.095 L1457.34 682.095 L1456.78 682.095 L1456.22 682.095 L1455.66 682.095 L1455.1 682.095 L1454.54 682.095 L1453.98 682.095 L1453.42 682.095 L1452.87 682.095 L1452.31 682.095 L1451.75 682.095 L1451.19 682.095 L1450.63 682.095 L1450.07 682.095 L1449.51 682.095 L1448.95 682.095 L1448.39 682.095 L1447.83 682.095 L1447.27 682.095 L1446.71 682.095 L1446.15 682.095 L1445.6 682.095 L1445.04 682.095 L1444.48 682.095 L1443.92 682.095 L1443.36 682.095 L1442.8 682.095 L1442.24 682.095 L1441.68 682.095 L1441.12 682.095 L1440.56 682.095 L1440 682.095 L1439.44 682.095 L1438.88 682.095 L1438.33 682.095 L1437.77 682.095 L1437.21 682.095 L1436.65 682.095 L1436.09 682.095 L1435.53 682.095 L1434.97 682.095 L1434.41 682.095 L1433.85 682.095 L1433.29 682.095 L1432.73 682.095 L1432.17 682.095 L1431.61 682.095 L1431.05 682.095 L1430.5 682.095 L1429.94 682.095 L1429.38 682.095 L1428.82 682.095 L1428.26 682.095 L1427.7 682.095 L1427.14 682.095 L1426.58 682.095 L1426.02 682.095 L1425.46 682.095 L1424.9 682.095 L1424.34 682.095 L1423.78 682.095 L1423.23 682.095 L1422.67 682.095 L1422.11 682.095 L1421.55 682.095 L1420.99 682.095 L1420.43 682.095 L1419.87 682.095 L1419.31 682.095 L1418.75 682.095 L1418.19 682.095 L1417.63 682.095 L1417.07 682.095 L1416.51 682.095 L1415.95 682.095 L1415.4 682.095 L1414.84 682.095 L1414.28 682.095 L1413.72 682.095 L1413.16 682.095 L1412.6 682.095 L1412.04 682.095 L1411.48 682.095 L1410.92 682.095 L1410.36 682.095 L1409.8 682.095 L1409.24 682.095 L1408.68 682.095 L1408.13 682.095 L1407.57 682.095 L1407.01 682.095 L1406.45 682.095 L1405.89 682.095 L1405.33 682.095 L1404.77 682.095 L1404.21 682.095 L1403.65 682.095 L1403.09 682.095 L1402.53 682.095 L1401.97 682.095 L1401.41 682.095 L1400.86 682.095 L1400.3 682.095 L1399.74 682.095 L1399.18 682.095 L1398.62 682.095 L1398.06 682.095 L1397.5 682.095 L1396.94 682.095 L1396.38 682.095 L1395.82 682.095 L1395.26 682.095 L1394.7 682.095 L1394.14 682.095 L1393.58 682.095 L1393.03 682.095 L1392.47 682.095 L1391.91 682.095 L1391.35 682.095 L1390.79 682.095 L1390.23 682.095 L1389.67 682.095 L1389.11 682.095 L1388.55 682.095 L1387.99 682.095 L1387.43 682.095 L1386.87 682.095 L1386.31 682.095 L1385.76 682.095 L1385.2 682.095 L1384.64 682.095 L1384.08 682.095 L1383.52 682.095 L1382.96 682.095 L1382.4 682.095 L1381.84 682.095 L1381.28 682.095 L1380.72 682.095 L1380.16 682.095 L1379.6 682.095 L1379.04 682.095 L1378.49 682.095 L1377.93 682.095 L1377.37 682.095 L1376.81 682.095 L1376.25 682.095 L1375.69 682.095 L1375.13 682.095 L1374.57 682.095 L1374.01 682.095 L1373.45 682.095 L1372.89 682.095 L1372.33 682.095 L1371.77 682.095 L1371.21 682.095 L1370.66 682.095 L1370.1 682.095 L1369.54 682.095 L1368.98 682.095 L1368.42 682.095 L1367.86 682.095 L1367.3 682.095 L1366.74 682.095 L1366.18 682.095 L1365.62 682.095 L1365.06 682.095 L1364.5 682.095 L1363.94 682.095 L1363.39 682.095 L1362.83 682.095 L1362.27 682.095 L1361.71 682.095 L1361.15 682.095 L1360.59 682.095 L1360.03 682.095 L1359.47 682.095 L1358.91 682.095 L1358.35 682.095 L1357.79 682.095 L1357.23 682.095 L1356.67 682.095 L1356.12 682.095 L1355.56 682.095 L1355 682.095 L1354.44 682.095 L1353.88 682.095 L1353.32 682.095 L1352.76 682.095 L1352.2 682.095 L1351.64 682.095 L1351.08 682.095 L1350.52 682.095 L1349.96 682.095 L1349.4 682.095 L1348.84 682.095 L1348.29 682.095 L1347.73 682.095 L1347.17 682.095 L1346.61 682.095 L1346.05 682.095 L1345.49 682.095 L1344.93 682.095 L1344.37 682.095 L1343.81 682.095 L1343.25 682.095 L1342.69 682.095 L1342.13 682.095 L1341.57 682.095 L1341.02 682.095 L1340.46 682.095 L1339.9 682.095 L1339.34 682.095 L1338.78 682.095 L1338.22 682.095 L1337.66 682.095 L1337.1 682.095 L1336.54 682.095 L1335.98 682.095 L1335.42 682.095 L1334.86 682.095 L1334.3 682.095 L1333.75 682.095 L1333.19 682.095 L1332.63 682.095 L1332.07 682.095 L1331.51 682.095 L1330.95 682.095 L1330.39 682.095 L1329.83 682.095 L1329.27 682.095 L1328.71 682.095 L1328.15 682.095 L1327.59 682.095 L1327.03 682.095 L1326.47 682.095 L1325.92 682.095 L1325.36 682.095 L1324.8 682.095 L1324.24 682.095 L1323.68 682.095 L1323.12 682.095 L1322.56 682.095 L1322 682.095 L1321.44 682.095 L1320.88 682.095 L1320.32 682.095 L1319.76 682.095 L1319.2 682.095 L1318.65 682.095 L1318.09 682.095 L1317.53 682.095 L1316.97 682.095 L1316.41 682.095 L1315.85 682.095 L1315.29 682.095 L1314.73 682.095 L1314.17 682.095 L1313.61 682.095 L1313.05 682.095 L1312.49 682.095 L1311.93 682.095 L1311.38 682.095 L1310.82 682.095 L1310.26 682.095 L1309.7 682.095 L1309.14 682.095 L1308.58 682.095 L1308.02 682.095 L1307.46 682.095 L1306.9 682.095 L1306.34 682.095 L1305.78 682.095 L1305.22 682.095 L1304.66 682.095 L1304.1 682.095 L1303.55 682.095 L1302.99 682.095 L1302.43 682.095 L1301.87 682.095 L1301.31 682.095 L1300.75 682.095 L1300.19 682.095 L1299.63 682.095 L1299.07 682.095 L1298.51 682.095 L1297.95 682.095 L1297.39 682.095 L1296.83 682.095 L1296.28 682.095 L1295.72 682.095 L1295.16 682.095 L1294.6 682.095 L1294.04 682.095 L1293.48 682.095 L1292.92 682.095 L1292.36 682.095 L1291.8 682.095 L1291.24 682.095 L1290.68 682.095 L1290.12 682.095 L1289.56 682.095 L1289 682.095 L1288.45 682.095 L1287.89 682.095 L1287.33 682.095 L1286.77 682.095 L1286.21 682.095 L1285.65 682.095 L1285.09 682.095 L1284.53 682.095 L1283.97 682.095 L1283.41 682.095 L1282.85 682.095 L1282.29 682.095 L1281.73 682.095 L1281.18 682.095 L1280.62 682.095 L1280.06 682.095 L1279.5 682.095 L1278.94 682.095 L1278.38 682.095 L1277.82 682.095 L1277.26 682.095 L1276.7 682.095 L1276.14 682.095 L1275.58 682.095 L1275.02 682.095 L1274.46 682.095 L1273.91 682.095 L1273.35 682.095 L1272.79 682.095 L1272.23 682.095 L1271.67 682.095 L1271.11 682.095 L1270.55 682.095 L1269.99 682.095 L1269.43 682.095 L1268.87 682.095 L1268.31 682.095 L1267.75 682.095 L1267.19 682.095 L1266.63 682.095 L1266.08 682.095 L1265.52 682.095 L1264.96 682.095 L1264.4 682.095 L1263.84 682.095 L1263.28 682.095 L1262.72 682.095 L1262.16 682.095 L1261.6 682.095 L1261.04 682.095 L1260.48 682.095 L1259.92 682.095 L1259.36 682.095 L1258.81 682.095 L1258.25 682.095 L1257.69 682.095 L1257.13 682.095 L1256.57 682.095 L1256.01 682.095 L1255.45 682.095 L1254.89 682.095 L1254.33 682.095 L1253.77 682.095 L1253.21 682.095 L1252.65 682.095 L1252.09 682.095 L1251.54 682.095 L1250.98 682.095 L1250.42 682.095 L1249.86 682.095 L1249.3 682.095 L1248.74 682.095 L1248.18 682.095 L1247.62 682.095 L1247.06 682.095 L1246.5 682.095 L1245.94 682.095 L1245.38 682.095 L1244.82 682.095 L1244.26 682.095 L1243.71 682.095 L1243.15 682.095 L1242.59 682.095 L1242.03 682.095 L1241.47 682.095 L1240.91 682.095 L1240.35 682.095 L1239.79 682.095 L1239.23 682.095 L1238.67 682.095 L1238.11 682.095 L1237.55 682.095 L1236.99 682.095 L1236.44 682.095 L1235.88 682.095 L1235.32 682.095 L1234.76 682.095 L1234.2 682.095 L1233.64 682.095 L1233.08 682.095 L1232.52 682.095 L1231.96 682.095 L1231.4 682.095 L1230.84 682.095 L1230.28 682.095 L1229.72 682.095 L1229.17 682.095 L1228.61 682.095 L1228.05 682.095 L1227.49 682.095 L1226.93 682.095 L1226.37 682.095 L1225.81 682.095 L1225.25 682.095 L1224.69 682.095 L1224.13 682.095 L1223.57 682.095 L1223.01 682.095 L1222.45 682.095 L1221.89 682.095 L1221.34 682.095 L1220.78 682.095 L1220.22 682.095 L1219.66 682.095 L1219.1 682.095 L1218.54 682.095 L1217.98 682.095 L1217.42 682.095 L1216.86 682.095 L1216.3 682.095 L1215.74 682.095 L1215.18 682.095 L1214.62 682.095 L1214.07 682.095 L1213.51 682.095 L1212.95 682.095 L1212.39 682.095 L1211.83 682.095 L1211.27 682.095 L1210.71 682.095 L1210.15 682.095 L1209.59 682.095 L1209.03 682.095 L1208.47 682.095 L1207.91 682.095 L1207.35 682.095 L1206.8 682.095 L1206.24 682.095 L1205.68 682.095 L1205.12 682.095 L1204.56 682.095 L1204 682.095 L1203.44 682.095 L1202.88 682.095 L1202.32 682.095 L1201.76 682.095 L1201.2 682.095 L1200.64 682.095 L1200.08 682.095 L1199.52 682.095 L1198.97 682.095 L1198.41 682.095 L1197.85 682.095 L1197.29 682.095 L1196.73 682.095 L1196.17 682.095 L1195.61 682.095 L1195.05 682.095 L1194.49 682.095 L1193.93 682.095 L1193.37 682.095 L1192.81 682.095 L1192.25 682.095 L1191.7 682.095 L1191.14 682.095 L1190.58 682.095 L1190.02 682.095 L1189.46 682.095 L1188.9 682.095 L1188.34 682.095 L1187.78 682.095 L1187.22 682.095 L1186.66 682.095 L1186.1 682.095 L1185.54 682.095 L1184.98 682.095 L1184.43 682.095 L1183.87 682.095 L1183.31 682.095 L1182.75 682.095 L1182.19 682.095 L1181.63 682.095 L1181.07 682.095 L1180.51 682.095 L1179.95 682.095 L1179.39 682.095 L1178.83 682.095 L1178.27 682.095 L1177.71 682.095 L1177.15 682.095 L1176.6 682.095 L1176.04 682.095 L1175.48 682.095 L1174.92 682.095 L1174.36 682.095 L1173.8 682.095 L1173.24 682.095 L1172.68 682.095 L1172.12 682.095 L1171.56 682.095 L1171 682.095 L1170.44 682.095 L1169.88 682.095 L1169.33 682.095 L1168.77 682.095 L1168.21 682.095 L1167.65 682.095 L1167.09 682.095 L1166.53 682.095 L1165.97 682.095 L1165.41 682.095 L1164.85 682.095 L1164.29 682.095 L1163.73 682.095 L1163.17 682.095 L1162.61 682.095 L1162.05 682.095 L1161.5 682.095 L1160.94 682.095 L1160.38 682.095 L1159.82 682.095 L1159.26 682.095 L1158.7 682.095 L1158.14 682.095 L1157.58 682.095 L1157.02 682.095 L1156.46 682.095 L1155.9 682.095 L1155.34 682.095 L1154.78 682.095 L1154.23 682.095 L1153.67 682.095 L1153.11 682.095 L1152.55 682.095 L1151.99 682.095 L1151.43 682.095 L1150.87 682.095 L1150.31 682.095 L1149.75 682.095 L1149.19 682.095 L1148.63 682.095 L1148.07 682.095 L1147.51 682.095 L1146.96 682.095 L1146.4 682.095 L1145.84 682.095 L1145.28 682.095 L1144.72 682.095 L1144.16 682.095 L1143.6 682.095 L1143.04 682.095 L1142.48 682.095 L1141.92 682.095 L1141.36 682.095 L1140.8 682.095 L1140.24 682.095 L1139.68 682.095 L1139.13 682.095 L1138.57 682.095 L1138.01 682.095 L1137.45 682.095 L1136.89 682.095 L1136.33 682.095 L1135.77 682.095 L1135.21 682.095 L1134.65 682.095 L1134.09 682.095 L1133.53 682.095 L1132.97 682.095 L1132.41 682.095 L1131.86 682.095 L1131.3 682.095 L1130.74 682.095 L1130.18 682.095 L1129.62 682.095 L1129.06 682.095 L1128.5 682.095 L1127.94 682.095 L1127.38 682.095 L1126.82 682.095 L1126.26 682.095 L1125.7 682.095 L1125.14 682.095 L1124.59 682.095 L1124.03 682.095 L1123.47 682.095 L1122.91 682.095 L1122.35 682.095 L1121.79 682.095 L1121.23 682.095 L1120.67 682.095 L1120.11 682.095 L1119.55 682.095 L1118.99 682.095 L1118.43 682.095 L1117.87 682.095 L1117.31 682.095 L1116.76 682.095 L1116.2 682.095 L1115.64 682.095 L1115.08 682.095 L1114.52 682.095 L1113.96 682.095 L1113.4 682.095 L1112.84 682.095 L1112.28 682.095 L1111.72 682.095 L1111.16 682.095 L1110.6 682.095 L1110.04 682.095 L1109.49 682.095 L1108.93 682.095 L1108.37 682.095 L1107.81 682.095 L1107.25 682.095 L1106.69 682.095 L1106.13 682.095 L1105.57 682.095 L1105.01 682.095 L1104.45 682.095 L1103.89 682.095 L1103.33 682.095 L1102.77 682.095 L1102.22 682.095 L1101.66 682.095 L1101.1 682.095 L1100.54 682.095 L1099.98 682.095 L1099.42 682.095 L1098.86 682.095 L1098.3 682.095 L1097.74 682.095 L1097.18 682.095 L1096.62 682.095 L1096.06 682.095 L1095.5 682.095 L1094.94 682.095 L1094.39 682.095 L1093.83 682.095 L1093.27 682.095 L1092.71 682.095 L1092.15 682.095 L1091.59 682.095 L1091.03 682.095 L1090.47 682.095 L1089.91 682.095 L1089.35 682.095 L1088.79 682.095 L1088.23 682.095 L1087.67 682.095 L1087.12 682.095 L1086.56 682.095 L1086 682.095 L1085.44 682.095 L1084.88 682.095 L1084.32 682.095 L1083.76 682.095 L1083.2 682.095 L1082.64 682.095 L1082.08 682.095 L1081.52 682.095 L1080.96 682.095 L1080.4 682.095 L1079.85 682.095 L1079.29 682.095 L1078.73 682.095 L1078.17 682.095 L1077.61 682.095 L1077.05 682.095 L1076.49 682.095 L1075.93 682.095 L1075.37 682.095 L1074.81 682.095 L1074.25 682.095 L1073.69 682.095 L1073.13 682.095 L1072.57 682.095 L1072.02 682.095 L1071.46 682.095 L1070.9 682.095 L1070.34 682.095 L1069.78 682.095 L1069.22 682.095 L1068.66 682.095 L1068.1 682.095 L1067.54 682.095 L1066.98 682.095 L1066.42 682.095 L1065.86 682.095 L1065.3 682.095 L1064.75 682.095 L1064.19 682.095 L1063.63 682.095 L1063.07 682.095 L1062.51 682.095 L1061.95 682.095 L1061.39 682.095 L1060.83 682.095 L1060.27 682.095 L1059.71 682.095 L1059.15 682.095 L1058.59 682.095 L1058.03 682.095 L1057.48 682.095 L1056.92 682.095 L1056.36 682.095 L1055.8 682.095 L1055.24 682.095 L1054.68 682.095 L1054.12 682.095 L1053.56 682.095 L1053 682.095 L1052.44 682.095 L1051.88 682.095 L1051.32 682.095 L1050.76 682.095 L1050.2 682.095 L1049.65 682.095 L1049.09 682.095 L1048.53 682.095 L1047.97 682.095 L1047.41 682.095 L1046.85 682.095 L1046.29 682.095 L1045.73 682.095 L1045.17 682.095 L1044.61 682.095 L1044.05 682.095 L1043.49 682.095 L1042.93 682.095 L1042.38 682.095 L1041.82 682.095 L1041.26 682.095 L1040.7 682.095 L1040.14 682.095 L1039.58 682.095 L1039.02 682.095 L1038.46 682.095 L1037.9 682.095 L1037.34 682.095 L1036.78 682.095 L1036.22 682.095 L1035.66 682.095 L1035.1 682.095 L1034.55 682.095 L1033.99 682.095 L1033.43 682.095 L1032.87 682.095 L1032.31 682.095 L1031.75 682.095 L1031.19 682.095 L1030.63 682.095 L1030.07 682.095 L1029.51 682.095 L1028.95 682.095 L1028.39 682.095 L1027.83 682.095 L1027.28 682.095 L1026.72 682.095 L1026.16 682.095 L1025.6 682.095 L1025.04 682.095 L1024.48 682.095 L1023.92 682.095 L1023.36 682.095 L1022.8 682.095 L1022.24 682.095 L1021.68 682.095 L1021.12 682.095 L1020.56 682.095 L1020.01 682.095 L1019.45 682.095 L1018.89 682.095 L1018.33 682.095 L1017.77 682.095 L1017.21 682.095 L1016.65 682.095 L1016.09 682.095 L1015.53 682.095 L1014.97 682.095 L1014.41 682.095 L1013.85 682.095 L1013.29 682.095 L1012.73 682.095 L1012.18 682.095 L1011.62 682.095 L1011.06 682.095 L1010.5 682.095 L1009.94 682.095 L1009.38 682.095 L1008.82 682.095 L1008.26 682.095 L1007.7 682.095 L1007.14 682.095 L1006.58 682.095 L1006.02 682.095 L1005.46 682.095 L1004.91 682.095 L1004.35 682.095 L1003.79 682.095 L1003.23 682.095 L1002.67 682.095 L1002.11 682.095 L1001.55 682.095 L1000.99 682.095 L1000.43 682.095 L999.872 682.095 L999.313 682.095 L998.754 682.095 L998.194 682.095 L997.635 682.095 L997.076 682.095 L996.517 682.095 L995.957 682.095 L995.398 682.095 L994.839 682.095 L994.28 682.095 L993.72 682.095 L993.161 682.095 L992.602 682.095 L992.043 682.095 L991.483 682.095 L990.924 682.095 L990.365 682.095 L989.806 682.095 L989.246 682.095 L988.687 682.095 L988.128 682.095 L987.569 682.095 L987.009 682.095 L986.45 682.095 L985.891 682.095 L985.332 682.095 L984.772 682.095 L984.213 682.095 L983.654 682.095 L983.095 682.095 L982.535 682.095 L981.976 682.095 L981.417 682.095 L980.858 682.095 L980.298 682.095 L979.739 682.095 L979.18 682.095 L978.621 682.095 L978.061 682.095 L977.502 682.095 L976.943 682.095 L976.384 682.095 L975.824 682.095 L975.265 682.095 L974.706 682.095 L974.147 682.095 L973.587 682.095 L973.028 682.095 L972.469 682.095 L971.91 682.095 L971.35 682.095 L970.791 682.095 L970.232 682.095 L969.673 682.095 L969.113 682.095 L968.554 682.095 L967.995 682.095 L967.436 682.095 L966.876 682.095 L966.317 682.095 L965.758 682.095 L965.199 682.095 L964.639 682.095 L964.08 682.095 L963.521 682.095 L962.962 682.095 L962.402 682.095 L961.843 682.095 L961.284 682.095 L960.725 682.095 L960.165 682.095 L959.606 682.095 L959.047 682.095 L958.488 682.095 L957.928 682.095 L957.369 682.095 L956.81 682.095 L956.251 682.095 L955.691 682.095 L955.132 682.095 L954.573 682.095 L954.014 682.095 L953.454 682.095 L952.895 682.095 L952.336 682.095 L951.777 682.095 L951.217 682.095 L950.658 682.095 L950.099 682.095 L949.54 682.095 L948.98 682.095 L948.421 682.095 L947.862 682.095 L947.303 682.095 L946.743 682.095 L946.184 682.095 L945.625 682.095 L945.066 682.095 L944.506 682.095 L943.947 682.095 L943.388 682.095 L942.829 682.095 L942.269 682.095 L941.71 682.095 L941.151 682.095 L940.592 682.095 L940.032 682.095 L939.473 682.095 L938.914 682.095 L938.355 682.095 L937.795 682.095 L937.236 682.095 L936.677 682.095 L936.118 682.095 L935.558 682.095 L934.999 682.095 L934.44 682.095 L933.881 682.095 L933.321 682.095 L932.762 682.095 L932.203 682.095 L931.644 682.095 L931.084 682.095 L930.525 682.095 L929.966 682.095 L929.406 682.095 L928.847 682.095 L928.288 682.095 L927.729 682.095 L927.169 682.095 L926.61 682.095 L926.051 682.095 L925.492 682.095 L924.932 682.095 L924.373 682.095 L923.814 682.095 L923.255 682.095 L922.695 682.095 L922.136 682.095 L921.577 682.095 L921.018 682.095 L920.458 682.095 L919.899 682.095 L919.34 682.095 L918.781 682.095 L918.221 682.095 L917.662 682.095 L917.103 682.095 L916.544 682.095 L915.984 682.095 L915.425 682.095 L914.866 682.095 L914.307 682.095 L913.747 682.095 L913.188 682.095 L912.629 682.095 L912.07 682.095 L911.51 682.095 L910.951 682.095 L910.392 682.095 L909.833 682.095 L909.273 682.095 L908.714 682.095 L908.155 682.095 L907.596 682.095 L907.036 682.095 L906.477 682.095 L905.918 682.095 L905.359 682.095 L904.799 682.095 L904.24 682.095 L903.681 682.095 L903.122 682.095 L902.562 682.095 L902.003 682.095 L901.444 682.095 L900.885 682.095 L900.325 682.095 L899.766 682.095 L899.207 682.095 L898.648 682.095 L898.088 682.095 L897.529 682.095 L896.97 682.095 L896.411 682.095 L895.851 682.095 L895.292 682.095 L894.733 682.095 L894.174 682.095 L893.614 682.095 L893.055 682.095 L892.496 682.095 L891.937 682.095 L891.377 682.095 L890.818 682.095 L890.259 682.095 L889.7 682.095 L889.14 682.095 L888.581 682.095 L888.022 682.095 L887.463 682.095 L886.903 682.095 L886.344 682.095 L885.785 682.095 L885.226 682.095 L884.666 682.095 L884.107 682.095 L883.548 682.095 L882.989 682.095 L882.429 682.095 L881.87 682.095 L881.311 682.095 L880.752 682.095 L880.192 682.095 L879.633 682.095 L879.074 682.095 L878.515 682.095 L877.955 682.095 L877.396 682.095 L876.837 682.095 L876.278 682.095 L875.718 682.095 L875.159 682.095 L874.6 682.095 L874.041 682.095 L873.481 682.095 L872.922 682.095 L872.363 682.095 L871.804 682.095 L871.244 682.095 L870.685 682.095 L870.126 682.095 L869.567 682.095 L869.007 682.095 L868.448 682.095 L867.889 682.095 L867.33 682.095 L866.77 682.095 L866.211 682.095 L865.652 682.095 L865.093 682.095 L864.533 682.095 L863.974 682.095 L863.415 682.095 L862.856 682.095 L862.296 682.095 L861.737 682.095 L861.178 682.095 L860.619 682.095 L860.059 682.095 L859.5 682.095 L858.941 682.095 L858.382 682.095 L857.822 682.095 L857.263 682.095 L856.704 682.095 L856.145 682.095 L855.585 682.095 L855.026 682.095 L854.467 682.095 L853.908 682.095 L853.348 682.095 L852.789 682.095 L852.23 682.095 L851.671 682.095 L851.111 682.095 L850.552 682.095 L849.993 682.095 L849.434 682.095 L848.874 682.095 L848.315 682.095 L847.756 682.095 L847.197 682.095 L846.637 682.095 L846.078 682.095 L845.519 682.095 L844.96 682.095 L844.4 682.095 L843.841 682.095 L843.282 682.095 L842.723 682.095 L842.163 682.095 L841.604 682.095 L841.045 682.095 L840.486 682.095 L839.926 682.095 L839.367 682.095 L838.808 682.095 L838.249 682.095 L837.689 682.095 L837.13 682.095 L836.571 682.095 L836.012 682.095 L835.452 682.095 L834.893 682.095 L834.334 682.095 L833.775 682.095 L833.215 682.095 L832.656 682.095 L832.097 682.095 L831.538 682.095 L830.978 682.095 L830.419 682.095 L829.86 682.095 L829.301 682.095 L828.741 682.095 L828.182 682.095 L827.623 682.095 L827.064 682.095 L826.504 682.095 L825.945 682.095 L825.386 682.095 L824.827 682.095 L824.267 682.095 L823.708 682.095 L823.149 682.095 L822.59 682.095 L822.03 682.095 L821.471 682.095 L820.912 682.095 L820.353 682.095 L819.793 682.095 L819.234 682.095 L818.675 682.095 L818.116 682.095 L817.556 682.095 L816.997 682.095 L816.438 682.095 L815.879 682.095 L815.319 682.095 L814.76 682.095 L814.201 682.095 L813.642 682.095 L813.082 682.095 L812.523 682.095 L811.964 682.095 L811.405 682.095 L810.845 682.095 L810.286 682.095 L809.727 682.095 L809.168 682.095 L808.608 682.095 L808.049 682.095 L807.49 682.095 L806.931 682.095 L806.371 682.095 L805.812 682.095 L805.253 682.095 L804.693 682.095 L804.134 682.095 L803.575 682.095 L803.016 682.095 L802.456 682.095 L801.897 682.095 L801.338 682.095 L800.779 682.095 L800.219 682.095 L799.66 682.095 L799.101 682.095 L798.542 682.095 L797.982 682.095 L797.423 682.095 L796.864 682.095 L796.305 682.095 L795.745 682.095 L795.186 682.095 L794.627 682.095 L794.068 682.095 L793.508 682.095 L792.949 682.095 L792.39 682.095 L791.831 682.095 L791.271 682.095 L790.712 682.095 L790.153 682.095 L789.594 682.095 L789.034 682.095 L788.475 682.095 L787.916 682.095 L787.357 682.095 L786.797 682.095 L786.238 682.095 L785.679 682.095 L785.12 682.095 L784.56 682.095 L784.001 682.095 L783.442 682.095 L782.883 682.095 L782.323 682.095 L781.764 682.095 L781.205 682.095 L780.646 682.095 L780.086 682.095 L779.527 682.095 L778.968 682.095 L778.409 682.095 L777.849 682.095 L777.29 682.095 L776.731 682.095 L776.172 682.095 L775.612 682.095 L775.053 682.095 L774.494 682.095 L773.935 682.095 L773.375 682.095 L772.816 682.095 L772.257 682.095 L771.698 682.095 L771.138 682.095 L770.579 682.095 L770.02 682.095 L769.461 682.095 L768.901 682.095 L768.342 682.095 L767.783 682.095 L767.224 682.095 L766.664 682.095 L766.105 682.095 L765.546 682.095 L764.987 682.095 L764.427 682.095 L763.868 682.095 L763.309 682.095 L762.75 682.095 L762.19 682.095 L761.631 682.095 L761.072 682.095 L760.513 682.095 L759.953 682.095 L759.394 682.095 L758.835 682.095 L758.276 682.095 L757.716 682.095 L757.157 682.095 L756.598 682.095 L756.039 682.095 L755.479 682.095 L754.92 682.095 L754.361 682.095 L753.802 682.095 L753.242 682.095 L752.683 682.095 L752.124 682.095 L751.565 682.095 L751.005 682.095 L750.446 682.095 L749.887 682.095 L749.328 682.095 L748.768 682.095 L748.209 682.095 L747.65 682.095 L747.091 682.095 L746.531 682.095 L745.972 682.095 L745.413 682.095 L744.854 682.095 L744.294 682.095 L743.735 682.095 L743.176 682.095 L742.617 682.095 L742.057 682.095 L741.498 682.095 L740.939 682.095 L740.38 682.095 L739.82 682.095 L739.261 682.095 L738.702 682.095 L738.143 682.095 L737.583 682.095 L737.024 682.095 L736.465 682.095 L735.906 682.095 L735.346 682.095 L734.787 682.095 L734.228 682.095 L733.669 682.095 L733.109 682.095 L732.55 682.095 L731.991 682.095 L731.432 682.095 L730.872 682.095 L730.313 682.095 L729.754 682.095 L729.195 682.095 L728.635 682.095 L728.076 682.095 L727.517 682.095 L726.958 682.095 L726.398 682.095 L725.839 682.095 L725.28 682.095 L724.721 682.095 L724.161 682.095 L723.602 682.095 L723.043 682.095 L722.484 682.095 L721.924 682.095 L721.365 682.095 L720.806 682.095 L720.247 682.095  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.329 720.806,683.329 721.365,683.329 721.924,683.329 722.484,683.329 723.043,683.329 723.602,683.329 724.161,683.329 724.721,683.329 725.28,683.329 725.839,683.329 726.398,683.329 726.958,683.329 727.517,683.329 728.076,683.329 728.635,683.329 729.195,683.329 729.754,683.329 730.313,683.329 730.872,683.329 731.432,683.329 731.991,683.329 732.55,683.329 733.109,683.329 733.669,683.329 734.228,683.329 734.787,683.329 735.346,683.329 735.906,683.329 736.465,683.329 737.024,683.329 737.583,683.329 738.143,683.329 738.702,683.329 739.261,683.329 739.82,683.329 740.38,683.329 740.939,683.329 741.498,683.329 742.057,683.329 742.617,683.329 743.176,683.329 743.735,683.329 744.294,683.329 744.854,683.329 745.413,683.329 745.972,683.329 746.531,683.329 747.091,683.329 747.65,683.329 748.209,683.329 748.768,683.329 749.328,683.329 749.887,683.329 750.446,683.329 751.005,683.329 751.565,683.329 752.124,683.329 752.683,683.329 753.242,683.329 753.802,683.329 754.361,683.329 754.92,683.329 755.479,683.329 756.039,683.329 756.598,683.329 757.157,683.329 757.716,683.329 758.276,683.329 758.835,683.329 759.394,683.329 759.953,683.329 760.513,683.329 761.072,683.329 761.631,683.329 762.19,683.329 762.75,683.329 763.309,683.329 763.868,683.329 764.427,683.329 764.987,683.329 765.546,683.329 766.105,683.329 766.664,683.329 767.224,683.329 767.783,683.329 768.342,683.329 768.901,683.329 769.461,683.329 770.02,683.329 770.579,683.329 771.138,683.329 771.698,683.329 772.257,683.329 772.816,683.329 773.375,683.329 773.935,683.329 774.494,683.329 775.053,683.329 775.612,683.329 776.172,683.329 776.731,683.329 777.29,683.329 777.849,683.329 778.409,683.329 778.968,683.329 779.527,683.329 780.086,683.329 780.646,683.329 781.205,683.329 781.764,683.329 782.323,683.329 782.883,683.329 783.442,683.329 784.001,683.329 784.56,683.329 785.12,683.329 785.679,683.329 786.238,683.329 786.797,683.329 787.357,683.329 787.916,683.329 788.475,683.329 789.034,683.329 789.594,683.329 790.153,683.329 790.712,683.329 791.271,683.329 791.831,683.329 792.39,683.329 792.949,683.329 793.508,683.329 794.068,683.329 794.627,683.329 795.186,683.329 795.745,683.329 796.305,683.329 796.864,683.329 797.423,683.329 797.982,683.329 798.542,683.329 799.101,683.329 799.66,683.329 800.219,683.329 800.779,683.329 801.338,683.329 801.897,683.329 802.456,683.329 803.016,683.329 803.575,683.329 804.134,683.329 804.693,683.329 805.253,683.329 805.812,683.329 806.371,683.329 806.931,683.329 807.49,683.329 808.049,683.329 808.608,683.329 809.168,683.329 809.727,683.329 810.286,683.329 810.845,683.329 811.405,683.329 811.964,683.329 812.523,683.329 813.082,683.329 813.642,683.329 814.201,683.329 814.76,683.329 815.319,683.329 815.879,683.329 816.438,683.329 816.997,683.329 817.556,683.329 818.116,683.329 818.675,683.329 819.234,683.329 819.793,683.329 820.353,683.329 820.912,683.329 821.471,683.329 822.03,683.329 822.59,683.329 823.149,683.329 823.708,683.329 824.267,683.329 824.827,683.329 825.386,683.329 825.945,683.329 826.504,683.329 827.064,683.329 827.623,683.329 828.182,683.329 828.741,683.329 829.301,683.329 829.86,683.329 830.419,683.329 830.978,683.329 831.538,683.329 832.097,683.329 832.656,683.329 833.215,683.329 833.775,683.329 834.334,683.329 834.893,683.329 835.452,683.329 836.012,683.329 836.571,683.329 837.13,683.329 837.689,683.329 838.249,683.329 838.808,683.329 839.367,683.329 839.926,683.329 840.486,683.329 841.045,683.329 841.604,683.329 842.163,683.329 842.723,683.329 843.282,683.329 843.841,683.329 844.4,683.329 844.96,683.329 845.519,683.329 846.078,683.329 846.637,683.329 847.197,683.329 847.756,683.329 848.315,683.329 848.874,683.329 849.434,683.329 849.993,683.329 850.552,683.329 851.111,683.329 851.671,683.329 852.23,683.329 852.789,683.329 853.348,683.329 853.908,683.329 854.467,683.329 855.026,683.329 855.585,683.329 856.145,683.329 856.704,683.329 857.263,683.329 857.822,683.329 858.382,683.329 858.941,683.329 859.5,683.329 860.059,683.329 860.619,683.329 861.178,683.329 861.737,683.329 862.296,683.329 862.856,683.329 863.415,683.329 863.974,683.329 864.533,683.329 865.093,683.329 865.652,683.329 866.211,683.329 866.77,683.329 867.33,683.329 867.889,683.329 868.448,683.329 869.007,683.329 869.567,683.329 870.126,683.329 870.685,683.329 871.244,683.329 871.804,683.329 872.363,683.329 872.922,683.329 873.481,683.329 874.041,683.329 874.6,683.329 875.159,683.329 875.718,683.329 876.278,683.329 876.837,683.329 877.396,683.329 877.955,683.329 878.515,683.329 879.074,683.329 879.633,683.329 880.192,683.329 880.752,683.329 881.311,683.329 881.87,683.329 882.429,683.329 882.989,683.329 883.548,683.329 884.107,683.329 884.666,683.329 885.226,683.329 885.785,683.329 886.344,683.329 886.903,683.329 887.463,683.329 888.022,683.329 888.581,683.329 889.14,683.329 889.7,683.329 890.259,683.329 890.818,683.329 891.377,683.329 891.937,683.329 892.496,683.329 893.055,683.329 893.614,683.329 894.174,683.329 894.733,683.329 895.292,683.329 895.851,683.329 896.411,683.329 896.97,683.329 897.529,683.329 898.088,683.329 898.648,683.329 899.207,683.329 899.766,683.329 900.325,683.329 900.885,683.329 901.444,683.329 902.003,683.329 902.562,683.329 903.122,683.329 903.681,683.329 904.24,683.329 904.799,683.329 905.359,683.329 905.918,683.329 906.477,683.329 907.036,683.329 907.596,683.329 908.155,683.329 908.714,683.329 909.273,683.329 909.833,683.329 910.392,683.329 910.951,683.329 911.51,683.329 912.07,683.329 912.629,683.329 913.188,683.329 913.747,683.329 914.307,683.329 914.866,683.329 915.425,683.329 915.984,683.329 916.544,683.329 917.103,683.329 917.662,683.329 918.221,683.329 918.781,683.329 919.34,683.329 919.899,683.329 920.458,683.329 921.018,683.329 921.577,683.329 922.136,683.329 922.695,683.329 923.255,683.329 923.814,683.329 924.373,683.329 924.932,683.329 925.492,683.329 926.051,683.329 926.61,683.329 927.169,683.329 927.729,683.329 928.288,683.329 928.847,683.329 929.406,683.329 929.966,683.329 930.525,683.329 931.084,683.329 931.644,683.329 932.203,683.329 932.762,683.329 933.321,683.329 933.881,683.329 934.44,683.329 934.999,683.329 935.558,683.329 936.118,683.329 936.677,683.329 937.236,683.329 937.795,683.329 938.355,683.329 938.914,683.329 939.473,683.329 940.032,683.329 940.592,683.329 941.151,683.329 941.71,683.329 942.269,683.329 942.829,683.329 943.388,683.329 943.947,683.329 944.506,683.329 945.066,683.329 945.625,683.329 946.184,683.329 946.743,683.329 947.303,683.329 947.862,683.329 948.421,683.329 948.98,683.329 949.54,683.329 950.099,683.329 950.658,683.329 951.217,683.329 951.777,683.329 952.336,683.329 952.895,683.329 953.454,683.329 954.014,683.329 954.573,683.329 955.132,683.329 955.691,683.329 956.251,683.329 956.81,683.329 957.369,683.329 957.928,683.329 958.488,683.329 959.047,683.329 959.606,683.329 960.165,683.329 960.725,683.329 961.284,683.329 961.843,683.329 962.402,683.329 962.962,683.329 963.521,683.329 964.08,683.329 964.639,683.329 965.199,683.329 965.758,683.329 966.317,683.329 966.876,683.329 967.436,683.329 967.995,683.329 968.554,683.329 969.113,683.329 969.673,683.329 970.232,683.329 970.791,683.329 971.35,683.329 971.91,683.329 972.469,683.329 973.028,683.329 973.587,683.329 974.147,683.329 974.706,683.329 975.265,683.329 975.824,683.329 976.384,683.329 976.943,683.329 977.502,683.329 978.061,683.329 978.621,683.329 979.18,683.329 979.739,683.329 980.298,683.329 980.858,683.329 981.417,683.329 981.976,683.329 982.535,683.329 983.095,683.329 983.654,683.329 984.213,683.329 984.772,683.329 985.332,683.329 985.891,683.329 986.45,683.329 987.009,683.329 987.569,683.329 988.128,683.329 988.687,683.329 989.246,683.329 989.806,683.329 990.365,683.329 990.924,683.329 991.483,683.329 992.043,683.329 992.602,683.329 993.161,683.329 993.72,683.329 994.28,683.329 994.839,683.329 995.398,683.329 995.957,683.329 996.517,683.329 997.076,683.329 997.635,683.329 998.194,683.329 998.754,683.329 999.313,683.329 999.872,683.329 1000.43,683.329 1000.99,683.329 1001.55,683.329 1002.11,683.329 1002.67,683.329 1003.23,683.329 1003.79,683.329 1004.35,683.329 1004.91,683.329 1005.46,683.329 1006.02,683.329 1006.58,683.329 1007.14,683.329 1007.7,683.329 1008.26,683.329 1008.82,683.329 1009.38,683.329 1009.94,683.329 1010.5,683.329 1011.06,683.329 1011.62,683.329 1012.18,683.329 1012.73,683.329 1013.29,683.329 1013.85,683.329 1014.41,683.329 1014.97,683.329 1015.53,683.329 1016.09,683.329 1016.65,683.329 1017.21,683.329 1017.77,683.329 1018.33,683.329 1018.89,683.329 1019.45,683.329 1020.01,683.329 1020.56,683.329 1021.12,683.329 1021.68,683.329 1022.24,683.329 1022.8,683.329 1023.36,683.329 1023.92,683.329 1024.48,683.329 1025.04,683.329 1025.6,683.329 1026.16,683.329 1026.72,683.329 1027.28,683.329 1027.83,683.329 1028.39,683.329 1028.95,683.329 1029.51,683.329 1030.07,683.329 1030.63,683.329 1031.19,683.329 1031.75,683.329 1032.31,683.329 1032.87,683.329 1033.43,683.329 1033.99,683.329 1034.55,683.329 1035.1,683.329 1035.66,683.329 1036.22,683.329 1036.78,683.329 1037.34,683.329 1037.9,683.329 1038.46,683.329 1039.02,683.329 1039.58,683.329 1040.14,683.329 1040.7,683.329 1041.26,683.329 1041.82,683.329 1042.38,683.329 1042.93,683.329 1043.49,683.329 1044.05,683.329 1044.61,683.329 1045.17,683.329 1045.73,683.329 1046.29,683.329 1046.85,683.329 1047.41,683.329 1047.97,683.329 1048.53,683.329 1049.09,683.329 1049.65,683.329 1050.2,683.329 1050.76,683.329 1051.32,683.329 1051.88,683.329 1052.44,683.329 1053,683.329 1053.56,683.329 1054.12,683.329 1054.68,683.329 1055.24,683.329 1055.8,683.329 1056.36,683.329 1056.92,683.329 1057.48,683.329 1058.03,683.329 1058.59,683.329 1059.15,683.329 1059.71,683.329 1060.27,683.329 1060.83,683.329 1061.39,683.329 1061.95,683.329 1062.51,683.329 1063.07,683.329 1063.63,683.329 1064.19,683.329 1064.75,683.329 1065.3,683.329 1065.86,683.329 1066.42,683.329 1066.98,683.329 1067.54,683.329 1068.1,683.329 1068.66,683.329 1069.22,683.329 1069.78,683.329 1070.34,683.329 1070.9,683.329 1071.46,683.329 1072.02,683.329 1072.57,683.329 1073.13,683.329 1073.69,683.329 1074.25,683.329 1074.81,683.329 1075.37,683.329 1075.93,683.329 1076.49,683.329 1077.05,683.329 1077.61,683.329 1078.17,683.329 1078.73,683.329 1079.29,683.329 1079.85,683.329 1080.4,683.329 1080.96,683.329 1081.52,683.329 1082.08,683.329 1082.64,683.329 1083.2,683.329 1083.76,683.329 1084.32,683.329 1084.88,683.329 1085.44,683.329 1086,683.329 1086.56,683.329 1087.12,683.329 1087.67,683.329 1088.23,683.329 1088.79,683.329 1089.35,683.329 1089.91,683.329 1090.47,683.329 1091.03,683.329 1091.59,683.329 1092.15,683.329 1092.71,683.329 1093.27,683.329 1093.83,683.329 1094.39,683.329 1094.94,683.329 1095.5,683.329 1096.06,683.329 1096.62,683.329 1097.18,683.329 1097.74,683.329 1098.3,683.329 1098.86,683.329 1099.42,683.329 1099.98,683.329 1100.54,683.329 1101.1,683.329 1101.66,683.329 1102.22,683.329 1102.77,683.329 1103.33,683.329 1103.89,683.329 1104.45,683.329 1105.01,683.329 1105.57,683.329 1106.13,683.329 1106.69,683.329 1107.25,683.329 1107.81,683.329 1108.37,683.329 1108.93,683.329 1109.49,683.329 1110.04,683.329 1110.6,683.329 1111.16,683.329 1111.72,683.329 1112.28,683.329 1112.84,683.329 1113.4,683.329 1113.96,683.329 1114.52,683.329 1115.08,683.329 1115.64,683.329 1116.2,683.329 1116.76,683.329 1117.31,683.329 1117.87,683.329 1118.43,683.329 1118.99,683.329 1119.55,683.329 1120.11,683.329 1120.67,683.329 1121.23,683.329 1121.79,683.329 1122.35,683.329 1122.91,683.329 1123.47,683.329 1124.03,683.329 1124.59,683.329 1125.14,683.329 1125.7,683.329 1126.26,683.329 1126.82,683.329 1127.38,683.329 1127.94,683.329 1128.5,683.329 1129.06,683.329 1129.62,683.329 1130.18,683.329 1130.74,683.329 1131.3,683.329 1131.86,683.329 1132.41,683.329 1132.97,683.329 1133.53,683.329 1134.09,683.329 1134.65,683.329 1135.21,683.329 1135.77,683.329 1136.33,683.329 1136.89,683.329 1137.45,683.329 1138.01,683.329 1138.57,683.329 1139.13,683.329 1139.68,683.329 1140.24,683.329 1140.8,683.329 1141.36,683.329 1141.92,683.329 1142.48,683.329 1143.04,683.329 1143.6,683.329 1144.16,683.329 1144.72,683.329 1145.28,683.329 1145.84,683.329 1146.4,683.329 1146.96,683.329 1147.51,683.329 1148.07,683.329 1148.63,683.329 1149.19,683.329 1149.75,683.329 1150.31,683.329 1150.87,683.329 1151.43,683.329 1151.99,683.329 1152.55,683.329 1153.11,683.329 1153.67,683.329 1154.23,683.329 1154.78,683.329 1155.34,683.329 1155.9,683.329 1156.46,683.329 1157.02,683.329 1157.58,683.329 1158.14,683.329 1158.7,683.329 1159.26,683.329 1159.82,683.329 1160.38,683.329 1160.94,683.329 1161.5,683.329 1162.05,683.329 1162.61,683.329 1163.17,683.329 1163.73,683.329 1164.29,683.329 1164.85,683.329 1165.41,683.329 1165.97,683.329 1166.53,683.329 1167.09,683.329 1167.65,683.329 1168.21,683.329 1168.77,683.329 1169.33,683.329 1169.88,683.329 1170.44,683.329 1171,683.329 1171.56,683.329 1172.12,683.329 1172.68,683.329 1173.24,683.329 1173.8,683.329 1174.36,683.329 1174.92,683.329 1175.48,683.329 1176.04,683.329 1176.6,683.329 1177.15,683.329 1177.71,683.329 1178.27,683.329 1178.83,683.329 1179.39,683.329 1179.95,683.329 1180.51,683.329 1181.07,683.329 1181.63,683.329 1182.19,683.329 1182.75,683.329 1183.31,683.329 1183.87,683.329 1184.43,683.329 1184.98,683.329 1185.54,683.329 1186.1,683.329 1186.66,683.329 1187.22,683.329 1187.78,683.329 1188.34,683.329 1188.9,683.329 1189.46,683.329 1190.02,683.329 1190.58,683.329 1191.14,683.329 1191.7,683.329 1192.25,683.329 1192.81,683.329 1193.37,683.329 1193.93,683.329 1194.49,683.329 1195.05,683.329 1195.61,683.329 1196.17,683.329 1196.73,683.329 1197.29,683.329 1197.85,683.329 1198.41,683.329 1198.97,683.329 1199.52,683.329 1200.08,683.329 1200.64,683.329 1201.2,683.329 1201.76,683.329 1202.32,683.329 1202.88,683.329 1203.44,683.329 1204,683.329 1204.56,683.329 1205.12,683.329 1205.68,683.329 1206.24,683.329 1206.8,683.329 1207.35,683.329 1207.91,683.329 1208.47,683.329 1209.03,683.329 1209.59,683.329 1210.15,683.329 1210.71,683.329 1211.27,683.329 1211.83,683.329 1212.39,683.329 1212.95,683.329 1213.51,683.329 1214.07,683.329 1214.62,683.329 1215.18,683.329 1215.74,683.329 1216.3,683.329 1216.86,683.329 1217.42,683.329 1217.98,683.329 1218.54,683.329 1219.1,683.329 1219.66,683.329 1220.22,683.329 1220.78,683.329 1221.34,683.329 1221.89,683.329 1222.45,683.329 1223.01,683.329 1223.57,683.329 1224.13,683.329 1224.69,683.329 1225.25,683.329 1225.81,683.329 1226.37,683.329 1226.93,683.329 1227.49,683.329 1228.05,683.329 1228.61,683.329 1229.17,683.329 1229.72,683.329 1230.28,683.329 1230.84,683.329 1231.4,683.329 1231.96,683.329 1232.52,683.329 1233.08,683.329 1233.64,683.329 1234.2,683.329 1234.76,683.329 1235.32,683.329 1235.88,683.329 1236.44,683.329 1236.99,683.329 1237.55,683.329 1238.11,683.329 1238.67,683.329 1239.23,683.329 1239.79,683.329 1240.35,683.329 1240.91,683.329 1241.47,683.329 1242.03,683.329 1242.59,683.329 1243.15,683.329 1243.71,683.329 1244.26,683.329 1244.82,683.329 1245.38,683.329 1245.94,683.329 1246.5,683.329 1247.06,683.329 1247.62,683.329 1248.18,683.329 1248.74,683.329 1249.3,683.329 1249.86,683.329 1250.42,683.329 1250.98,683.329 1251.54,683.329 1252.09,683.329 1252.65,683.329 1253.21,683.329 1253.77,683.329 1254.33,683.329 1254.89,683.329 1255.45,683.329 1256.01,683.329 1256.57,683.329 1257.13,683.329 1257.69,683.329 1258.25,683.329 1258.81,683.329 1259.36,683.329 1259.92,683.329 1260.48,683.329 1261.04,683.329 1261.6,683.329 1262.16,683.329 1262.72,683.329 1263.28,683.329 1263.84,683.329 1264.4,683.329 1264.96,683.329 1265.52,683.329 1266.08,683.329 1266.63,683.329 1267.19,683.329 1267.75,683.329 1268.31,683.329 1268.87,683.329 1269.43,683.329 1269.99,683.329 1270.55,683.329 1271.11,683.329 1271.67,683.329 1272.23,683.329 1272.79,683.329 1273.35,683.329 1273.91,683.329 1274.46,683.329 1275.02,683.329 1275.58,683.329 1276.14,683.329 1276.7,683.329 1277.26,683.329 1277.82,683.329 1278.38,683.329 1278.94,683.329 1279.5,683.329 1280.06,683.329 1280.62,683.329 1281.18,683.329 1281.73,683.329 1282.29,683.329 1282.85,683.329 1283.41,683.329 1283.97,683.329 1284.53,683.329 1285.09,683.329 1285.65,683.329 1286.21,683.329 1286.77,683.329 1287.33,683.329 1287.89,683.329 1288.45,683.329 1289,683.329 1289.56,683.329 1290.12,683.329 1290.68,683.329 1291.24,683.329 1291.8,683.329 1292.36,683.329 1292.92,683.329 1293.48,683.329 1294.04,683.329 1294.6,683.329 1295.16,683.329 1295.72,683.329 1296.28,683.329 1296.83,683.329 1297.39,683.329 1297.95,683.329 1298.51,683.329 1299.07,683.329 1299.63,683.329 1300.19,683.329 1300.75,683.329 1301.31,683.329 1301.87,683.329 1302.43,683.329 1302.99,683.329 1303.55,683.329 1304.1,683.329 1304.66,683.329 1305.22,683.329 1305.78,683.329 1306.34,683.329 1306.9,683.329 1307.46,683.329 1308.02,683.329 1308.58,683.329 1309.14,683.329 1309.7,683.329 1310.26,683.329 1310.82,683.329 1311.38,683.329 1311.93,683.329 1312.49,683.329 1313.05,683.329 1313.61,683.329 1314.17,683.329 1314.73,683.329 1315.29,683.329 1315.85,683.329 1316.41,683.329 1316.97,683.329 1317.53,683.329 1318.09,683.329 1318.65,683.329 1319.2,683.329 1319.76,683.329 1320.32,683.329 1320.88,683.329 1321.44,683.329 1322,683.329 1322.56,683.329 1323.12,683.329 1323.68,683.329 1324.24,683.329 1324.8,683.329 1325.36,683.329 1325.92,683.329 1326.47,683.329 1327.03,683.329 1327.59,683.329 1328.15,683.329 1328.71,683.329 1329.27,683.329 1329.83,683.329 1330.39,683.329 1330.95,683.329 1331.51,683.329 1332.07,683.329 1332.63,683.329 1333.19,683.329 1333.75,683.329 1334.3,683.329 1334.86,683.329 1335.42,683.329 1335.98,683.329 1336.54,683.329 1337.1,683.329 1337.66,683.329 1338.22,683.329 1338.78,683.329 1339.34,683.329 1339.9,683.329 1340.46,683.329 1341.02,683.329 1341.57,683.329 1342.13,683.329 1342.69,683.329 1343.25,683.329 1343.81,683.329 1344.37,683.329 1344.93,683.329 1345.49,683.329 1346.05,683.329 1346.61,683.329 1347.17,683.329 1347.73,683.329 1348.29,683.329 1348.84,683.329 1349.4,683.329 1349.96,683.329 1350.52,683.329 1351.08,683.329 1351.64,683.329 1352.2,683.329 1352.76,683.329 1353.32,683.329 1353.88,683.329 1354.44,683.329 1355,683.329 1355.56,683.329 1356.12,683.329 1356.67,683.329 1357.23,683.329 1357.79,683.329 1358.35,683.329 1358.91,683.329 1359.47,683.329 1360.03,683.329 1360.59,683.329 1361.15,683.329 1361.71,683.329 1362.27,683.329 1362.83,683.329 1363.39,683.329 1363.94,683.329 1364.5,683.329 1365.06,683.329 1365.62,683.329 1366.18,683.329 1366.74,683.329 1367.3,683.329 1367.86,683.329 1368.42,683.329 1368.98,683.329 1369.54,683.329 1370.1,683.329 1370.66,683.329 1371.21,683.329 1371.77,683.329 1372.33,683.329 1372.89,683.329 1373.45,683.329 1374.01,683.329 1374.57,683.329 1375.13,683.329 1375.69,683.329 1376.25,683.329 1376.81,683.329 1377.37,683.329 1377.93,683.329 1378.49,683.329 1379.04,683.329 1379.6,683.329 1380.16,683.329 1380.72,683.329 1381.28,683.329 1381.84,683.329 1382.4,683.329 1382.96,683.329 1383.52,683.329 1384.08,683.329 1384.64,683.329 1385.2,683.329 1385.76,683.329 1386.31,683.329 1386.87,683.329 1387.43,683.329 1387.99,683.329 1388.55,683.329 1389.11,683.329 1389.67,683.329 1390.23,683.329 1390.79,683.329 1391.35,683.329 1391.91,683.329 1392.47,683.329 1393.03,683.329 1393.58,683.329 1394.14,683.329 1394.7,683.329 1395.26,683.329 1395.82,683.329 1396.38,683.329 1396.94,683.329 1397.5,683.329 1398.06,683.329 1398.62,683.329 1399.18,683.329 1399.74,683.329 1400.3,683.329 1400.86,683.329 1401.41,683.329 1401.97,683.329 1402.53,683.329 1403.09,683.329 1403.65,683.329 1404.21,683.329 1404.77,683.329 1405.33,683.329 1405.89,683.329 1406.45,683.329 1407.01,683.329 1407.57,683.329 1408.13,683.329 1408.68,683.329 1409.24,683.329 1409.8,683.329 1410.36,683.329 1410.92,683.329 1411.48,683.329 1412.04,683.329 1412.6,683.329 1413.16,683.329 1413.72,683.329 1414.28,683.329 1414.84,683.329 1415.4,683.329 1415.95,683.329 1416.51,683.329 1417.07,683.329 1417.63,683.329 1418.19,683.329 1418.75,683.329 1419.31,683.329 1419.87,683.329 1420.43,683.329 1420.99,683.329 1421.55,683.329 1422.11,683.329 1422.67,683.329 1423.23,683.329 1423.78,683.329 1424.34,683.329 1424.9,683.329 1425.46,683.329 1426.02,683.329 1426.58,683.329 1427.14,683.329 1427.7,683.329 1428.26,683.329 1428.82,683.329 1429.38,683.329 1429.94,683.329 1430.5,683.329 1431.05,683.329 1431.61,683.329 1432.17,683.329 1432.73,683.329 1433.29,683.329 1433.85,683.329 1434.41,683.329 1434.97,683.329 1435.53,683.329 1436.09,683.329 1436.65,683.329 1437.21,683.329 1437.77,683.329 1438.33,683.329 1438.88,683.329 1439.44,683.329 1440,683.329 1440.56,683.329 1441.12,683.329 1441.68,683.329 1442.24,683.329 1442.8,683.329 1443.36,683.329 1443.92,683.329 1444.48,683.329 1445.04,683.329 1445.6,683.329 1446.15,683.329 1446.71,683.329 1447.27,683.329 1447.83,683.329 1448.39,683.329 1448.95,683.329 1449.51,683.329 1450.07,683.329 1450.63,683.329 1451.19,683.329 1451.75,683.329 1452.31,683.329 1452.87,683.329 1453.42,683.329 1453.98,683.329 1454.54,683.329 1455.1,683.329 1455.66,683.329 1456.22,683.329 1456.78,683.329 1457.34,683.329 1457.9,683.329 1458.46,683.329 1459.02,683.329 1459.58,683.329 1460.14,683.329 1460.7,683.329 1461.25,683.329 1461.81,683.329 1462.37,683.329 1462.93,683.329 1463.49,683.329 1464.05,683.329 1464.61,683.329 1465.17,683.329 1465.73,683.329 1466.29,683.329 1466.85,683.329 1467.41,683.329 1467.97,683.329 1468.52,683.329 1469.08,683.329 1469.64,683.329 1470.2,683.329 1470.76,683.329 1471.32,683.329 1471.88,683.329 1472.44,683.329 1473,683.329 1473.56,683.329 1474.12,683.329 1474.68,683.329 1475.24,683.329 1475.79,683.329 1476.35,683.329 1476.91,683.329 1477.47,683.329 1478.03,683.329 1478.59,683.329 1479.15,683.329 1479.71,683.329 1480.27,683.329 1480.83,683.329 1481.39,683.329 1481.95,683.329 1482.51,683.329 1483.07,683.329 1483.62,683.329 1484.18,683.329 1484.74,683.329 1485.3,683.329 1485.86,683.329 1486.42,683.329 1486.98,683.329 1487.54,683.329 1488.1,683.329 1488.66,683.329 1489.22,683.329 1489.78,683.329 1490.34,683.329 1490.89,683.329 1491.45,683.329 1492.01,683.329 1492.57,683.329 1493.13,683.329 1493.69,683.329 1494.25,683.329 1494.81,683.329 1495.37,683.329 1495.93,683.329 1496.49,683.329 1497.05,683.329 1497.61,683.329 1498.16,683.329 1498.72,683.329 1499.28,683.329 1499.84,683.329 1500.4,683.329 1500.96,683.329 1501.52,683.329 1502.08,683.329 1502.64,683.329 1503.2,683.329 1503.76,683.329 1504.32,683.329 1504.88,683.329 1505.44,683.329 1505.99,683.329 1506.55,683.329 1507.11,683.329 1507.67,683.329 1508.23,683.329 1508.79,683.329 1509.35,683.329 1509.91,683.329 1510.47,683.329 1511.03,683.329 1511.59,683.329 1512.15,683.329 1512.71,683.329 1513.26,683.329 1513.82,683.329 1514.38,683.329 1514.94,683.329 1515.5,683.329 1516.06,683.329 1516.62,683.329 1517.18,683.329 1517.74,683.329 1518.3,683.329 1518.86,683.329 1519.42,683.329 1519.98,683.329 1520.53,683.329 1521.09,683.329 1521.65,683.329 1522.21,683.329 1522.77,683.329 1523.33,683.329 1523.89,683.329 1524.45,683.329 1525.01,683.329 1525.57,683.329 1526.13,683.329 1526.69,683.329 1527.25,683.329 1527.81,683.329 1528.36,683.329 1528.92,683.329 1529.48,683.329 1530.04,683.329 1530.6,683.329 1531.16,683.329 1531.72,683.329 1532.28,683.329 1532.84,683.329 1533.4,683.329 1533.96,683.329 1534.52,683.329 1535.08,683.329 1535.63,683.329 1536.19,683.329 1536.75,683.329 1537.31,683.329 1537.87,683.329 1538.43,683.329 1538.99,683.329 1539.55,683.329 1540.11,683.329 1540.67,683.329 1541.23,683.329 1541.79,683.329 1542.35,683.329 1542.9,683.329 1543.46,683.329 1544.02,683.329 1544.58,683.329 1545.14,683.329 1545.7,683.329 1546.26,683.329 1546.82,683.329 1547.38,683.329 1547.94,683.329 1548.5,683.329 1549.06,683.329 1549.62,683.329 1550.18,683.329 1550.73,683.329 1551.29,683.329 1551.85,683.329 1552.41,683.329 1552.97,683.329 1553.53,683.329 1554.09,683.329 1554.65,683.329 1555.21,683.329 1555.77,683.329 1556.33,683.329 1556.89,683.329 1557.45,683.329 1558,683.329 1558.56,683.329 1559.12,683.329 1559.68,683.329 1560.24,683.329 1560.8,683.329 1561.36,683.329 1561.92,683.329 1562.48,683.329 1563.04,683.329 1563.6,683.329 1564.16,683.329 1564.72,683.329 1565.28,683.329 1565.83,683.329 1566.39,683.329 1566.95,683.329 1567.51,683.329 1568.07,683.329 1568.63,683.329 1569.19,683.329 1569.75,683.329 1570.31,683.329 1570.87,683.329 1571.43,683.329 1571.99,683.329 1572.55,683.329 1573.1,683.329 1573.66,683.329 1574.22,683.329 1574.78,683.329 1575.34,683.329 1575.9,683.329 1576.46,683.329 1577.02,683.329 1577.58,683.329 1578.14,683.329 1578.7,683.329 1579.26,683.329 1579.82,683.329 1580.37,683.329 1580.93,683.329 1581.49,683.329 1582.05,683.329 1582.61,683.329 1583.17,683.329 1583.73,683.329 1584.29,683.329 1584.85,683.329 1585.41,683.329 1585.97,683.329 1586.53,683.329 1587.09,683.329 1587.65,683.329 1588.2,683.329 1588.76,683.329 1589.32,683.329 1589.88,683.329 1590.44,683.329 1591,683.329 1591.56,683.329 1592.12,683.329 1592.68,683.329 1593.24,683.329 1593.8,683.329 1594.36,683.329 1594.92,683.329 1595.47,683.329 1596.03,683.329 1596.59,683.329 1597.15,683.329 1597.71,683.329 1598.27,683.329 1598.83,683.329 1599.39,683.329 1599.95,683.329 1600.51,683.329 1601.07,683.329 1601.63,683.329 1602.19,683.329 1602.74,683.329 1603.3,683.329 1603.86,683.329 1604.42,683.329 1604.98,683.329 1605.54,683.329 1606.1,683.329 1606.66,683.329 1607.22,683.329 1607.78,683.329 1608.34,683.329 1608.9,683.329 1609.46,683.329 1610.02,683.329 1610.57,683.329 1611.13,683.329 1611.69,683.329 1612.25,683.329 1612.81,683.329 1613.37,683.329 1613.93,683.329 1614.49,683.329 1615.05,683.329 1615.61,683.329 1616.17,683.329 1616.73,683.329 1617.29,683.329 1617.84,683.329 1618.4,683.329 1618.96,683.329 1619.52,683.329 1620.08,683.329 1620.64,683.329 1621.2,683.329 1621.76,683.329 1622.32,683.329 1622.88,683.329 1623.44,683.329 1624,683.329 1624.56,683.329 1625.11,683.329 1625.67,683.329 1626.23,683.329 1626.79,683.329 1627.35,683.329 1627.91,683.329 1628.47,683.329 1629.03,683.329 1629.59,683.329 1630.15,683.329 1630.71,683.329 1631.27,683.329 1631.83,683.329 1632.39,683.329 1632.94,683.329 1633.5,683.329 1634.06,683.329 1634.62,683.329 1635.18,683.329 1635.74,683.329 1636.3,683.329 1636.86,683.329 1637.42,683.329 1637.98,683.329 1638.54,683.329 1639.1,683.329 1639.66,683.329 1640.21,683.329 1640.77,683.329 1641.33,683.329 1641.89,683.329 1642.45,683.329 1643.01,683.329 1643.57,683.329 1644.13,683.329 1644.69,683.329 1645.25,683.329 1645.81,683.329 1646.37,683.329 1646.93,683.329 1647.48,683.329 1648.04,683.329 1648.6,683.329 1649.16,683.329 1649.72,683.329 1650.28,683.329 1650.84,683.329 1651.4,683.329 1651.96,683.329 1652.52,683.329 1653.08,683.329 1653.64,683.329 1654.2,683.329 1654.76,683.329 1655.31,683.329 1655.87,683.329 1656.43,683.329 1656.99,683.329 1657.55,683.329 1658.11,683.329 1658.67,683.329 1659.23,683.329 1659.79,683.329 1660.35,683.329 1660.91,683.329 1661.47,683.329 1662.03,683.329 1662.58,683.329 1663.14,683.329 1663.7,683.329 1664.26,683.329 1664.82,683.329 1665.38,683.329 1665.94,683.329 1666.5,683.329 1667.06,683.329 1667.62,683.329 1668.18,683.329 1668.74,683.329 1669.3,683.329 1669.85,683.329 1670.41,683.329 1670.97,683.329 1671.53,683.329 1672.09,683.329 1672.65,683.329 1673.21,683.329 1673.77,683.329 1674.33,683.329 1674.89,683.329 1675.45,683.329 1676.01,683.329 1676.57,683.329 1677.13,683.329 1677.68,683.329 1678.24,683.329 1678.8,683.329 1679.36,683.329 1679.92,683.329 1680.48,683.329 1681.04,683.329 1681.6,683.329 1682.16,683.329 1682.72,683.329 1683.28,683.329 1683.84,683.329 1684.4,683.329 1684.95,683.329 1685.51,683.329 1686.07,683.329 1686.63,683.329 1687.19,683.329 1687.75,683.329 1688.31,683.329 1688.87,683.329 1689.43,683.329 1689.99,683.329 1690.55,683.329 1691.11,683.329 1691.67,683.329 1692.23,683.329 1692.78,683.329 1693.34,683.329 1693.9,683.329 1694.46,683.329 1695.02,683.329 1695.58,683.329 1696.14,683.329 1696.7,683.329 1697.26,683.329 1697.82,683.329 1698.38,683.329 1698.94,683.329 1699.5,683.329 1700.05,683.329 1700.61,683.329 1701.17,683.329 1701.73,683.329 1702.29,683.329 1702.85,683.329 1703.41,683.329 1703.97,683.329 1704.53,683.329 1705.09,683.329 1705.65,683.329 1706.21,683.329 1706.77,683.329 1707.32,683.329 1707.88,683.329 1708.44,683.329 1709,683.329 1709.56,683.329 1710.12,683.329 1710.68,683.329 1711.24,683.329 1711.8,683.329 1712.36,683.329 1712.92,683.329 1713.48,683.329 1714.04,683.329 1714.6,683.329 1715.15,683.329 1715.71,683.329 1716.27,683.329 1716.83,683.329 1717.39,683.329 1717.95,683.329 1718.51,683.329 1719.07,683.329 1719.63,683.329 1720.19,683.329 1720.75,683.329 1721.31,683.329 1721.87,683.329 1722.42,683.329 1722.98,683.329 1723.54,683.329 1724.1,683.329 1724.66,683.329 1725.22,683.329 1725.78,683.329 1726.34,683.329 1726.9,683.329 1727.46,683.329 1728.02,683.329 1728.58,683.329 1729.14,683.329 1729.69,683.329 1730.25,683.329 1730.81,683.329 1731.37,683.329 1731.93,683.329 1732.49,683.329 1733.05,683.329 1733.61,683.329 1734.17,683.329 1734.73,683.329 1735.29,683.329 1735.85,683.329 1736.41,683.329 1736.97,683.329 1737.52,683.329 1738.08,683.329 1738.64,683.329 1739.2,683.329 1739.76,683.329 1740.32,683.329 1740.88,683.329 1741.44,683.329 1742,683.329 1742.56,683.329 1743.12,683.329 1743.68,683.329 1744.24,683.329 1744.79,683.329 1745.35,683.329 1745.91,683.329 1746.47,683.329 1747.03,683.329 1747.59,683.329 1748.15,683.329 1748.71,683.329 1749.27,683.329 1749.83,683.329 1750.39,683.329 1750.95,683.329 1751.51,683.329 1752.06,683.329 1752.62,683.329 1753.18,683.329 1753.74,683.329 1754.3,683.329 1754.86,683.329 1755.42,683.329 1755.98,683.329 1756.54,683.329 1757.1,683.329 1757.66,683.329 1758.22,683.329 1758.78,683.329 1759.34,683.329 1759.89,683.329 1760.45,683.329 1761.01,683.329 1761.57,683.329 1762.13,683.329 1762.69,683.329 1763.25,683.329 1763.81,683.329 1764.37,683.329 1764.93,683.329 1765.49,683.329 1766.05,683.329 1766.61,683.329 1767.16,683.329 1767.72,683.329 1768.28,683.329 1768.84,683.329 1769.4,683.329 1769.96,683.329 1770.52,683.329 1771.08,683.329 1771.64,683.329 1772.2,683.329 1772.76,683.329 1773.32,683.329 1773.88,683.329 1774.43,683.329 1774.99,683.329 1775.55,683.329 1776.11,683.329 1776.67,683.329 1777.23,683.329 1777.79,683.329 1778.35,683.329 1778.91,683.329 1779.47,683.329 1780.03,683.329 1780.59,683.329 1781.15,683.329 1781.71,683.329 1782.26,683.329 1782.82,683.329 1783.38,683.329 1783.94,683.329 1784.5,683.329 1785.06,683.329 1785.62,683.329 1786.18,683.329 1786.74,683.329 1787.3,683.329 1787.86,683.329 1788.42,683.329 1788.98,683.329 1789.53,683.329 1790.09,683.329 1790.65,683.329 1791.21,683.329 1791.77,683.329 1792.33,683.329 1792.89,683.329 1793.45,683.329 1794.01,683.329 1794.57,683.329 1795.13,683.329 1795.69,683.329 1796.25,683.329 1796.8,683.329 1797.36,683.329 1797.92,683.329 1798.48,683.329 1799.04,683.329 1799.6,683.329 1800.16,683.329 1800.72,683.329 1801.28,683.329 1801.84,683.329 1802.4,683.329 1802.96,683.329 1803.52,683.329 1804.08,683.329 1804.63,683.329 1805.19,683.329 1805.75,683.329 1806.31,683.329 1806.87,683.329 1807.43,683.329 1807.99,683.329 1808.55,683.329 1809.11,683.329 1809.67,683.329 1810.23,683.329 1810.79,683.329 1811.35,683.329 1811.9,683.329 1812.46,683.329 1813.02,683.329 1813.58,683.329 1814.14,683.329 1814.7,683.329 1815.26,683.329 1815.82,683.329 1816.38,683.329 1816.94,683.329 1817.5,683.329 1818.06,683.329 1818.62,683.329 1819.18,683.329 1819.73,683.329 1820.29,683.329 1820.85,683.329 1821.41,683.329 1821.97,683.329 1822.53,683.329 1823.09,683.329 1823.65,683.329 1824.21,683.329 1824.77,683.329 1825.33,683.329 1825.89,683.329 1826.45,683.329 1827,683.329 1827.56,683.329 1828.12,683.329 1828.68,683.329 1829.24,683.329 1829.8,683.329 1830.36,683.329 1830.92,683.329 1831.48,683.329 1832.04,683.329 1832.6,683.329 1833.16,683.329 1833.72,683.329 1834.27,683.329 1834.83,683.329 1835.39,683.329 1835.95,683.329 1836.51,683.329 1837.07,683.329 1837.63,683.329 1838.19,683.329 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.024764720604521 ± 0.02314351478169874\nProjected Energy: -4.013795012376049 ± (0.0067988484645500336, 0.006208292425974982)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.488034</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5098e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2493e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.638e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.343e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.615e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.716e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133672\n -0.7590191922770888\n  0.13584182219621432\n  0.1578999869460862\n  0.8767114411781289\n  1.530592997097333\n  1.583573261186733\n  3.072870330325868\n  3.1256726539518374\n  4.862107221562171\n  6.260694850380595\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
