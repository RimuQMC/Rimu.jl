var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21726562308758549 ± 0.0019790095376117744\n   G2(1) = 0.9157544095170114 ± 0.0006246882427193384\n   G2(2) = 0.9814520950821127 ± 0.0009177164757347726\n   G2(3) = 0.9883213677141666 ± 0.001172062325650411\n   G2(4) = 0.9814520950821127 ± 0.0009177164757347726\n   G2(5) = 0.9157544095170114 ± 0.0006246882427193384\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9975890868354167 ± 0.14105071592882024\n   Replica 2: -4.026506924084718 ± 0.13010824983126026\n   Replica 3: -4.1199997872626595 ± 0.14351482669453608\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip340\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip340)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip341\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip340)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip342\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.85 2211.02,1260.85 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.84 2211.02,1002.84 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,744.833 2211.02,744.833 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,486.825 2211.02,486.825 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,228.817 2211.02,228.817 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.85 423.181,1260.85 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.84 423.181,1002.84 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,744.833 423.181,744.833 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,486.825 423.181,486.825 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,228.817 423.181,228.817 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M356.339 1246.65 Q352.728 1246.65 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.99 350.899 1271.55 Q352.728 1275.1 356.339 1275.1 Q359.973 1275.1 361.779 1271.55 Q363.608 1267.99 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.65 356.339 1246.65 M356.339 1242.94 Q362.149 1242.94 365.205 1247.55 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.61 365.205 1274.22 Q362.149 1278.8 356.339 1278.8 Q350.529 1278.8 347.45 1274.22 Q344.395 1269.61 344.395 1260.88 Q344.395 1252.13 347.45 1247.55 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M290.043 1016.19 L306.363 1016.19 L306.363 1020.12 L284.418 1020.12 L284.418 1016.19 Q287.08 1013.43 291.664 1008.8 Q296.27 1004.15 297.451 1002.81 Q299.696 1000.28 300.576 998.547 Q301.478 996.788 301.478 995.098 Q301.478 992.343 299.534 990.607 Q297.613 988.871 294.511 988.871 Q292.312 988.871 289.858 989.635 Q287.427 990.399 284.65 991.95 L284.65 987.228 Q287.474 986.093 289.927 985.515 Q292.381 984.936 294.418 984.936 Q299.789 984.936 302.983 987.621 Q306.177 990.306 306.177 994.797 Q306.177 996.927 305.367 998.848 Q304.58 1000.75 302.474 1003.34 Q301.895 1004.01 298.793 1007.23 Q295.691 1010.42 290.043 1016.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M316.224 985.561 L334.58 985.561 L334.58 989.496 L320.506 989.496 L320.506 997.968 Q321.524 997.621 322.543 997.459 Q323.562 997.274 324.58 997.274 Q330.367 997.274 333.747 1000.45 Q337.126 1003.62 337.126 1009.03 Q337.126 1014.61 333.654 1017.71 Q330.182 1020.79 323.862 1020.79 Q321.687 1020.79 319.418 1020.42 Q317.173 1020.05 314.765 1019.31 L314.765 1014.61 Q316.849 1015.75 319.071 1016.3 Q321.293 1016.86 323.77 1016.86 Q327.774 1016.86 330.112 1014.75 Q332.45 1012.64 332.45 1009.03 Q332.45 1005.42 330.112 1003.32 Q327.774 1001.21 323.77 1001.21 Q321.895 1001.21 320.02 1001.63 Q318.168 1002.04 316.224 1002.92 L316.224 985.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M356.339 988.64 Q352.728 988.64 350.899 992.204 Q349.094 995.746 349.094 1002.88 Q349.094 1009.98 350.899 1013.55 Q352.728 1017.09 356.339 1017.09 Q359.973 1017.09 361.779 1013.55 Q363.608 1009.98 363.608 1002.88 Q363.608 995.746 361.779 992.204 Q359.973 988.64 356.339 988.64 M356.339 984.936 Q362.149 984.936 365.205 989.542 Q368.284 994.126 368.284 1002.88 Q368.284 1011.6 365.205 1016.21 Q362.149 1020.79 356.339 1020.79 Q350.529 1020.79 347.45 1016.21 Q344.395 1011.6 344.395 1002.88 Q344.395 994.126 347.45 989.542 Q350.529 984.936 356.339 984.936 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M286.062 727.553 L304.418 727.553 L304.418 731.488 L290.344 731.488 L290.344 739.96 Q291.363 739.613 292.381 739.451 Q293.4 739.266 294.418 739.266 Q300.205 739.266 303.585 742.437 Q306.964 745.609 306.964 751.025 Q306.964 756.604 303.492 759.706 Q300.02 762.784 293.701 762.784 Q291.525 762.784 289.256 762.414 Q287.011 762.044 284.603 761.303 L284.603 756.604 Q286.687 757.738 288.909 758.294 Q291.131 758.849 293.608 758.849 Q297.613 758.849 299.951 756.743 Q302.288 754.636 302.288 751.025 Q302.288 747.414 299.951 745.308 Q297.613 743.201 293.608 743.201 Q291.733 743.201 289.858 743.618 Q288.006 744.034 286.062 744.914 L286.062 727.553 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M326.177 730.632 Q322.566 730.632 320.737 734.197 Q318.932 737.738 318.932 744.868 Q318.932 751.974 320.737 755.539 Q322.566 759.081 326.177 759.081 Q329.811 759.081 331.617 755.539 Q333.446 751.974 333.446 744.868 Q333.446 737.738 331.617 734.197 Q329.811 730.632 326.177 730.632 M326.177 726.928 Q331.987 726.928 335.043 731.535 Q338.122 736.118 338.122 744.868 Q338.122 753.595 335.043 758.201 Q331.987 762.784 326.177 762.784 Q320.367 762.784 317.288 758.201 Q314.233 753.595 314.233 744.868 Q314.233 736.118 317.288 731.535 Q320.367 726.928 326.177 726.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M356.339 730.632 Q352.728 730.632 350.899 734.197 Q349.094 737.738 349.094 744.868 Q349.094 751.974 350.899 755.539 Q352.728 759.081 356.339 759.081 Q359.973 759.081 361.779 755.539 Q363.608 751.974 363.608 744.868 Q363.608 737.738 361.779 734.197 Q359.973 730.632 356.339 730.632 M356.339 726.928 Q362.149 726.928 365.205 731.535 Q368.284 736.118 368.284 744.868 Q368.284 753.595 365.205 758.201 Q362.149 762.784 356.339 762.784 Q350.529 762.784 347.45 758.201 Q344.395 753.595 344.395 744.868 Q344.395 736.118 347.45 731.535 Q350.529 726.928 356.339 726.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M284.835 469.545 L307.057 469.545 L307.057 471.536 L294.511 504.105 L289.627 504.105 L301.432 473.48 L284.835 473.48 L284.835 469.545 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M316.224 469.545 L334.58 469.545 L334.58 473.48 L320.506 473.48 L320.506 481.953 Q321.524 481.605 322.543 481.443 Q323.562 481.258 324.58 481.258 Q330.367 481.258 333.747 484.429 Q337.126 487.601 337.126 493.017 Q337.126 498.596 333.654 501.698 Q330.182 504.776 323.862 504.776 Q321.687 504.776 319.418 504.406 Q317.173 504.036 314.765 503.295 L314.765 498.596 Q316.849 499.73 319.071 500.286 Q321.293 500.841 323.77 500.841 Q327.774 500.841 330.112 498.735 Q332.45 496.628 332.45 493.017 Q332.45 489.406 330.112 487.3 Q327.774 485.193 323.77 485.193 Q321.895 485.193 320.02 485.61 Q318.168 486.027 316.224 486.906 L316.224 469.545 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M356.339 472.624 Q352.728 472.624 350.899 476.189 Q349.094 479.73 349.094 486.86 Q349.094 493.966 350.899 497.531 Q352.728 501.073 356.339 501.073 Q359.973 501.073 361.779 497.531 Q363.608 493.966 363.608 486.86 Q363.608 479.73 361.779 476.189 Q359.973 472.624 356.339 472.624 M356.339 468.92 Q362.149 468.92 365.205 473.527 Q368.284 478.11 368.284 486.86 Q368.284 495.587 365.205 500.193 Q362.149 504.776 356.339 504.776 Q350.529 504.776 347.45 500.193 Q344.395 495.587 344.395 486.86 Q344.395 478.11 347.45 473.527 Q350.529 468.92 356.339 468.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M256.664 242.162 L264.303 242.162 L264.303 215.797 L255.992 217.463 L255.992 213.204 L264.256 211.537 L268.932 211.537 L268.932 242.162 L276.571 242.162 L276.571 246.097 L256.664 246.097 L256.664 242.162 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M296.015 214.616 Q292.404 214.616 290.576 218.181 Q288.77 221.722 288.77 228.852 Q288.77 235.958 290.576 239.523 Q292.404 243.065 296.015 243.065 Q299.65 243.065 301.455 239.523 Q303.284 235.958 303.284 228.852 Q303.284 221.722 301.455 218.181 Q299.65 214.616 296.015 214.616 M296.015 210.912 Q301.826 210.912 304.881 215.519 Q307.96 220.102 307.96 228.852 Q307.96 237.579 304.881 242.185 Q301.826 246.769 296.015 246.769 Q290.205 246.769 287.127 242.185 Q284.071 237.579 284.071 228.852 Q284.071 220.102 287.127 215.519 Q290.205 210.912 296.015 210.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M326.177 214.616 Q322.566 214.616 320.737 218.181 Q318.932 221.722 318.932 228.852 Q318.932 235.958 320.737 239.523 Q322.566 243.065 326.177 243.065 Q329.811 243.065 331.617 239.523 Q333.446 235.958 333.446 228.852 Q333.446 221.722 331.617 218.181 Q329.811 214.616 326.177 214.616 M326.177 210.912 Q331.987 210.912 335.043 215.519 Q338.122 220.102 338.122 228.852 Q338.122 237.579 335.043 242.185 Q331.987 246.769 326.177 246.769 Q320.367 246.769 317.288 242.185 Q314.233 237.579 314.233 228.852 Q314.233 220.102 317.288 215.519 Q320.367 210.912 326.177 210.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M356.339 214.616 Q352.728 214.616 350.899 218.181 Q349.094 221.722 349.094 228.852 Q349.094 235.958 350.899 239.523 Q352.728 243.065 356.339 243.065 Q359.973 243.065 361.779 239.523 Q363.608 235.958 363.608 228.852 Q363.608 221.722 361.779 218.181 Q359.973 214.616 356.339 214.616 M356.339 210.912 Q362.149 210.912 365.205 215.519 Q368.284 220.102 368.284 228.852 Q368.284 237.579 365.205 242.185 Q362.149 246.769 356.339 246.769 Q350.529 246.769 347.45 242.185 Q344.395 237.579 344.395 228.852 Q344.395 220.102 347.45 215.519 Q350.529 210.912 356.339 210.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip342)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,228.817 4017.76,228.817 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.74 461.669,1245.98 462.238,1245.14 462.806,1244.22 463.375,1243.21 463.943,1242.1 464.511,1240.9 465.08,1238.56 465.648,1237.14 466.216,1235.6 466.785,1233.93 467.353,1232.14 467.921,1230.22 468.49,1228.15 469.058,1223.86 469.626,1221.47 470.195,1217.89 470.763,1214.11 471.331,1211.18 471.9,1207.01 472.468,1202.64 473.036,1198.04 473.605,1193.19 474.173,1188.08 474.741,1183.73 475.31,1178.2 475.878,1173.4 476.446,1168.41 477.015,1162.15 477.583,1156.66 478.152,1150.86 478.72,1144.87 479.288,1138.69 479.857,1132.25 480.425,1124.55 480.993,1117.78 481.562,1107.64 482.13,1099.51 482.698,1092.26 483.267,1083.67 483.835,1076 484.403,1067.08 484.972,1058.04 485.54,1046.85 486.108,1037.55 486.677,1028.12 487.245,1019.78 487.813,1010.17 488.382,1000.17 488.95,988.052 489.518,978.965 490.087,967.79 490.655,957.539 491.224,948.356 491.792,938.92 492.36,927.546 492.929,917.136 493.497,905.628 494.065,894.094 494.634,881.513 495.202,868.994 495.77,858.719 496.339,849.412 496.907,839.085 497.475,829.799 498.044,820.562 498.612,809.139 499.18,797.791 499.749,783.609 500.317,772.587 500.885,762.695 501.454,753.949 502.022,741.127 502.59,731.54 503.159,719.957 503.727,709.632 504.295,700.452 504.864,691.088 505.432,684.045 506.001,673.801 506.569,663.789 507.137,652.894 507.706,644.189 508.274,633.476 508.842,623.077 509.411,615.825 509.979,608.706 510.547,599.557 511.116,592.557 511.684,582.726 512.252,575.965 512.821,567.291 513.389,559.953 513.957,554.669 514.526,546.42 515.094,540.215 515.662,533.18 516.231,526.305 516.799,520.389 517.367,515.617 517.936,510.628 518.504,504.823 519.072,498.156 519.641,492.414 520.209,486.921 520.778,480.37 521.346,475.005 521.914,466.639 522.483,461.66 523.051,453.613 523.619,449.009 524.188,445.281 524.756,437.675 525.324,431.488 525.893,426.482 526.461,421.449 527.029,418.596 527.598,412.686 528.166,410.839 528.734,407.81 529.303,404.872 529.871,400.779 530.439,392.6 531.008,388.946 531.576,383.502 532.144,378.906 532.713,374.659 533.281,370.385 533.85,367.494 534.418,363.529 534.986,360.586 535.555,357.828 536.123,354.959 536.691,352.26 537.26,349.435 537.828,345.759 538.396,340.023 538.965,336.829 539.533,332.754 540.101,330.6 540.67,326.672 541.238,324.849 541.806,321.997 542.375,319.41 542.943,317.803 543.511,315.079 544.08,311.534 544.648,307.386 545.216,302.206 545.785,299.505 546.353,297.721 546.921,296.012 547.49,294.228 548.058,292.827 548.627,290.465 549.195,289.186 549.763,287.814 550.332,286.539 550.9,283.364 551.468,283.222 552.037,283.21 552.605,282.785 553.173,281.462 553.742,283.24 554.31,282.837 554.878,280.449 555.447,281.094 556.015,281.626 556.583,281.101 557.152,277.473 557.72,274.041 558.288,270.934 558.857,272.211 559.425,273.148 559.993,269.722 560.562,269.476 561.13,268.312 561.698,268.344 562.267,270.1 562.835,267.977 563.404,267.881 563.972,267.65 564.54,267.578 565.109,267.505 565.677,266.259 566.245,265.858 566.814,265.405 567.382,265.078 567.95,266.024 568.519,264.568 569.087,263.348 569.655,262.164 570.224,259.869 570.792,259.861 571.36,258.945 571.929,257.983 572.497,259.254 573.065,258.304 573.634,258.392 574.202,256.544 574.77,255.647 575.339,255.755 575.907,254.777 576.476,254.857 577.044,254.064 577.612,255.23 578.181,255.376 578.749,251.171 579.317,251.624 579.886,249.758 580.454,248.009 581.022,247.26 581.591,247.959 582.159,249.396 582.727,249.906 583.296,250.324 583.864,251.503 584.432,251.452 585.001,250.288 585.569,250.513 586.137,250.653 586.706,250.707 587.274,250.064 587.842,248.157 588.411,249.428 588.979,248.545 589.547,247.409 590.116,246.656 590.684,247.789 591.253,246.911 591.821,246.028 592.389,245.192 592.958,244.572 593.526,244.795 594.094,245.123 594.663,244.302 595.231,244.442 595.799,246.696 596.368,245.722 596.936,244.756 597.504,244.954 598.073,244.239 598.641,243.186 599.209,241.455 599.778,241.555 600.346,241.868 600.914,240.272 601.483,241.729 602.051,242.226 602.619,240.756 603.188,243.135 603.756,243.293 604.325,243.474 604.893,245.614 605.461,246.71 606.03,246.767 606.598,246.545 607.166,247.211 607.735,247.823 608.303,247.458 608.871,247.23 609.44,246.897 610.008,246.605 610.576,246.282 611.145,247.256 611.713,245.95 612.281,248.859 612.85,248.541 613.418,249.188 613.986,247.81 614.555,247.291 615.123,245.873 615.691,245.529 616.26,243.112 616.828,243.027 617.396,243.923 617.965,243.725 618.533,243.478 619.102,243.2 619.67,240.72 620.238,240.802 620.807,240.737 621.375,238.565 621.943,237.621 622.512,236.889 623.08,234.866 623.648,234.416 624.217,233.78 624.785,232.205 625.353,232.699 625.922,231.286 626.49,232.028 627.058,229.35 627.627,232.127 628.195,231.393 628.763,232.82 629.332,237.379 629.9,238.481 630.468,240.838 631.037,238.8 631.605,239.842 632.173,238.828 632.742,238.033 633.31,238.059 633.879,237.172 634.447,238.348 635.015,238.331 635.584,239.538 636.152,238.528 636.72,237.569 637.289,237.618 637.857,235.68 638.425,237.946 638.994,237.036 639.562,237.128 640.13,237.129 640.699,238.126 641.267,240.451 641.835,242.464 642.404,242.114 642.972,242.921 643.54,242.472 644.109,241.88 644.677,238.341 645.245,238.213 645.814,237.257 646.382,237.959 646.951,236.832 647.519,235.722 648.087,235.786 648.656,235.998 649.224,235.939 649.792,235.851 650.361,235.902 650.929,235.911 651.497,236.754 652.066,234.834 652.634,233.655 653.202,231.657 653.771,231.876 654.339,231.061 654.907,229.283 655.476,228.701 656.044,227.928 656.612,228.428 657.181,226.895 657.749,228.458 658.317,228.941 658.886,229.432 659.454,225.765 660.022,226.522 660.591,229.175 661.159,229.606 661.728,230.215 662.296,229.768 662.864,229.021 663.433,228.383 664.001,228.844 664.569,230.211 665.138,229.657 665.706,230.219 666.274,230.699 666.843,229.959 667.411,229.42 667.979,228.667 668.548,226.059 669.116,227.822 669.684,228.505 670.253,232.317 670.821,232.654 671.389,234.946 671.958,233.187 672.526,234.315 673.094,235.555 673.663,237.527 674.231,237.33 674.799,238.239 675.368,238.285 675.936,238.052 676.505,238.84 677.073,237.491 677.641,236.234 678.21,236.082 678.778,234.771 679.346,233.545 679.915,231.657 680.483,228.703 681.051,228.162 681.62,227.482 682.188,228.104 682.756,227.712 683.325,228.187 683.893,230.987 684.461,230.148 685.03,229.446 685.598,229.798 686.166,229.096 686.735,230.741 687.303,230.059 687.871,229.542 688.44,228.871 689.008,230.349 689.577,229.688 690.145,230.023 690.713,230.309 691.282,228.842 691.85,230.229 692.418,229.411 692.987,230.939 693.555,231.205 694.123,229.359 694.692,230.937 695.26,232.387 695.828,231.642 696.397,230.836 696.965,234.144 697.533,236.628 698.102,236.638 698.67,235.331 699.238,235.095 699.807,233.105 700.375,232.169 700.943,231.414 701.512,234.783 702.08,234.944 702.648,236.12 703.217,233.928 703.785,232.984 704.354,233.244 704.922,234.441 705.49,234.376 706.059,232.341 706.627,231.459 707.195,232.836 707.764,233.985 708.332,232.004 708.9,231.093 709.469,230.433 710.037,231.929 710.605,231.237 711.174,231.482 711.742,234.745 712.31,233.67 712.879,232.74 713.447,230.659 714.015,229.933 714.584,230.135 715.152,231.222 715.72,229.249 716.289,229.703 716.857,230.206 717.425,228.511 717.994,229.736 718.562,230.066 719.131,229.353 719.699,229.689 720.267,228.897 720.836,230.381 721.404,231.751 721.972,230.117 722.541,229.55 723.109,231.887 723.677,233.206 724.246,235.085 724.814,232.861 725.382,233.012 725.951,232.062 726.519,231.197 727.087,229.055 727.656,228.335 728.224,228.435 728.792,229.765 729.361,230.002 729.929,231.153 730.497,231.273 731.066,233.422 731.634,234.197 732.203,234.385 732.771,232.035 733.339,232.036 733.908,232.255 734.476,231.376 735.044,233.625 735.613,233.641 736.181,232.449 736.749,232.677 737.318,232.869 737.886,233.854 738.454,232.701 739.023,233.733 739.591,233.666 740.159,233.74 740.728,233.763 741.296,234.724 741.864,234.627 742.433,235.487 743.001,236.353 743.569,238.208 744.138,238.95 744.706,238.497 745.274,238.162 745.843,238.722 746.411,239.126 746.98,238.78 747.548,237.366 748.116,234.931 748.685,234.749 749.253,233.444 749.821,233.484 750.39,232.404 750.958,231.119 751.526,230.964 752.095,233.046 752.663,232.86 753.231,232.769 753.8,231.615 754.368,230.433 754.936,227.561 755.505,229.978 756.073,234.129 756.641,234.875 757.21,233.586 757.778,232.393 758.346,230.424 758.915,229.295 759.483,229.07 760.052,228.241 760.62,228.382 761.188,229.601 761.757,228.737 762.325,228.969 762.893,227.013 763.462,227.469 764.03,227.826 764.598,227.034 765.167,226.299 765.735,229.641 766.303,228.424 766.872,228.772 767.44,230.867 768.008,233.038 768.577,231.923 769.145,231.748 769.713,233.93 770.282,234.606 770.85,234.423 771.418,234.084 771.987,234.051 772.555,235.883 773.123,235.435 773.692,234.987 774.26,234.547 774.829,232.297 775.397,231.052 775.965,229.971 776.534,230.042 777.102,230.172 777.67,228.974 778.239,228.013 778.807,227.233 779.375,229.338 779.944,229.628 780.512,230.642 781.08,230.546 781.649,233.647 782.217,234.495 782.785,231.855 783.354,230.68 783.922,228.394 784.49,228.38 785.059,229.553 785.627,229.504 786.195,229.747 786.764,229.692 787.332,228.869 787.9,227.159 788.469,228.374 789.037,228.516 789.606,228.748 790.174,231.106 790.742,231.165 791.311,232.224 791.879,232.282 792.447,233.092 793.016,232.773 793.584,232.539 794.152,232.15 794.721,231.947 795.289,231.849 795.857,231.821 796.426,230.58 796.994,229.54 797.562,231.811 798.131,230.52 798.699,229.453 799.267,229.569 799.836,229.516 800.404,230.468 800.972,230.513 801.541,229.474 802.109,231.53 802.678,232.35 803.246,231.149 803.814,233.295 804.383,233.004 804.951,233.818 805.519,232.367 806.088,231.019 806.656,230.912 807.224,228.756 807.793,231.695 808.361,232.401 808.929,229.882 809.498,227.759 810.066,226.7 810.634,225.757 811.203,224.987 811.771,226.339 812.339,226.507 812.908,225.757 813.476,224.836 814.044,225.159 814.613,223.413 815.181,222.847 815.749,223.144 816.318,222.624 816.886,223.235 817.455,223.769 818.023,225.049 818.591,225.456 819.16,226.703 819.728,226.033 820.296,227.378 820.865,224.559 821.433,222.738 822.001,223.186 822.57,224.628 823.138,225.081 823.706,224.468 824.275,226.004 824.843,227.368 825.411,227.638 825.98,229.02 826.548,230.333 827.116,232.491 827.685,232.45 828.253,231.232 828.821,232.092 829.39,232.99 829.958,231.972 830.526,230.64 831.095,228.576 831.663,229.906 832.232,228.909 832.8,226.71 833.368,227.049 833.937,228.096 834.505,230.542 835.073,229.426 835.642,229.673 836.21,228.607 836.778,228.708 837.347,228.86 837.915,229.033 838.483,227.043 839.052,228.26 839.62,226.228 840.188,226.398 840.757,226.766 841.325,227.097 841.893,227.235 842.462,228.509 843.03,234.03 843.598,235.047 844.167,234.935 844.735,236.798 845.304,237.503 845.872,237.131 846.44,240.876 847.009,239.271 847.577,237.657 848.145,237.092 848.714,234.479 849.282,232.879 849.85,232.556 850.419,231.082 850.987,229.803 851.555,228.666 852.124,229.531 852.692,228.402 853.26,228.409 853.829,229.504 854.397,230.67 854.965,233.576 855.534,234.494 856.102,232.131 856.67,232.051 857.239,231.758 857.807,231.719 858.375,231.585 858.944,231.299 859.512,230.104 860.081,230.083 860.649,230.968 861.217,231.911 861.786,230.68 862.354,227.566 862.922,227.551 863.491,226.689 864.059,227.718 864.627,227.694 865.196,229.018 865.764,229.139 866.332,228.158 866.901,229.292 867.469,229.496 868.037,229.558 868.606,229.685 869.174,229.659 869.742,229.857 870.311,230.178 870.879,229.932 871.447,228.864 872.016,227.893 872.584,227.976 873.152,225.983 873.721,227.06 874.289,225.177 874.858,226.654 875.426,228.779 875.994,228.641 876.563,227.501 877.131,228.704 877.699,228.831 878.268,228.8 878.836,228.886 879.404,228.157 879.973,227.036 880.541,227.127 881.109,225.123 881.678,225.438 882.246,226.667 882.814,226.932 883.383,230.003 883.951,231.144 884.519,230.005 885.088,229.966 885.656,230.793 886.224,228.527 886.793,226.869 887.361,229.009 887.93,229.937 888.498,230.982 889.066,229.923 889.635,229.138 890.203,231.234 890.771,230.125 891.34,230.005 891.908,228.703 892.476,229.746 893.045,227.661 893.613,228.796 894.181,228.723 894.75,225.587 895.318,226.721 895.886,224.805 896.455,226.301 897.023,226.306 897.591,227.442 898.16,225.61 898.728,226.804 899.296,227.309 899.865,229.484 900.433,230.442 901.001,230.479 901.57,230.567 902.138,228.546 902.707,229.88 903.275,228.933 903.843,226.947 904.412,228.355 904.98,228.309 905.548,230.349 906.117,231.503 906.685,232.277 907.253,232.059 907.822,228.784 908.39,227.698 908.958,226.085 909.527,225.456 910.095,225.873 910.663,228.032 911.232,227.951 911.8,227.104 912.368,228.102 912.937,227.404 913.505,224.674 914.073,224.078 914.642,223.673 915.21,224.324 915.779,223.737 916.347,225.505 916.915,226.901 917.484,229.16 918.052,230.255 918.62,228.383 919.189,229.548 919.757,229.721 920.325,229.788 920.894,231.143 921.462,232.274 922.03,233.233 922.599,232.083 923.167,232.859 923.735,236.005 924.304,236.95 924.872,237.417 925.44,237.025 926.009,236.324 926.577,237.815 927.145,238.18 927.714,237.522 928.282,236.857 928.85,235.361 929.419,234.018 929.987,233.651 930.556,234.314 931.124,234.134 931.692,235.803 932.261,235.348 932.829,236.141 933.397,234.574 933.966,234.183 934.534,233.675 935.102,232.522 935.671,233.275 936.239,233.856 936.807,233.459 937.376,231.988 937.944,231.447 938.512,233.025 939.081,233.698 939.649,234.173 940.217,232.907 940.786,233.555 941.354,234.12 941.922,233.601 942.491,231.937 943.059,230.568 943.627,229.149 944.196,228.841 944.764,231.948 945.333,231.489 945.901,230.18 946.469,226.807 947.038,227.923 947.606,228.928 948.174,232.017 948.743,228.706 949.311,226.58 949.879,226.758 950.448,225.757 951.016,224.68 951.584,223.741 952.153,225.114 952.721,225.468 953.289,225.431 953.858,225.631 954.426,223.705 954.994,222.821 955.563,223.129 956.131,223.365 956.699,222.752 957.268,224.626 957.836,226.007 958.405,225.203 958.973,226.344 959.541,227.435 960.11,226.516 960.678,224.544 961.246,223.919 961.815,223.463 962.383,224.721 962.951,223.803 963.52,221.911 964.088,223.461 964.656,223.877 965.225,224.243 965.793,226.711 966.361,227.042 966.93,227.27 967.498,229.695 968.066,228.799 968.635,228.873 969.203,225.95 969.771,225.965 970.34,224.463 970.908,227.093 971.476,226.391 972.045,226.689 972.613,225.876 973.182,226.604 973.75,225.764 974.318,225.123 974.887,227.623 975.455,228.677 976.023,227.685 976.592,231.142 977.16,231.023 977.728,228.831 978.297,226.689 978.865,226.892 979.433,228.192 980.002,227.115 980.57,228.317 981.138,228.458 981.707,231.535 982.275,231.485 982.843,231.276 983.412,233.188 983.98,233.949 984.548,232.536 985.117,232.35 985.685,231.083 986.253,233.161 986.822,234.995 987.39,235.849 987.959,236.185 988.527,234.589 989.095,231.245 989.664,230.316 990.232,232.402 990.8,232.046 991.369,228.558 991.937,228.708 992.505,228.774 993.074,228.867 993.642,228.924 994.21,225.703 994.779,223.825 995.347,222.866 995.915,223.369 996.484,225.954 997.052,225.131 997.62,224.573 998.189,226.141 998.757,227.487 999.325,229.839 999.894,224.462 1000.46,224.703 1001.03,226.84 1001.6,230.092 1002.17,229.842 1002.74,232.01 1003.3,231.962 1003.87,231.617 1004.44,232.496 1005.01,231.161 1005.58,231.356 1006.15,232.208 1006.71,232.063 1007.28,230.924 1007.85,231.628 1008.42,232.544 1008.99,233.426 1009.56,233.011 1010.12,234.699 1010.69,233.191 1011.26,232.785 1011.83,229.257 1012.4,228.11 1012.97,229.176 1013.53,231.372 1014.1,231.353 1014.67,232.062 1015.24,232.894 1015.81,231.591 1016.38,230.358 1016.94,229.083 1017.51,228.069 1018.08,228.089 1018.65,229.39 1019.22,226.363 1019.79,226.415 1020.35,227.605 1020.92,228.679 1021.49,229.56 1022.06,230.189 1022.63,229.985 1023.2,227.922 1023.76,229.063 1024.33,225.051 1024.9,225.271 1025.47,226.569 1026.04,225.712 1026.61,229.917 1027.17,230.936 1027.74,229.882 1028.31,230.937 1028.88,231.492 1029.45,230.301 1030.02,229.072 1030.58,231.134 1031.15,230.867 1031.72,231.731 1032.29,232.538 1032.86,230.399 1033.43,229.036 1033.99,227.009 1034.56,228.508 1035.13,227.519 1035.7,226.649 1036.27,225.747 1036.84,225.839 1037.4,227.056 1037.97,227.262 1038.54,226.195 1039.11,225.418 1039.68,225.607 1040.25,225.792 1040.81,226.066 1041.38,225.494 1041.95,226.782 1042.52,224.781 1043.09,225.079 1043.66,227.308 1044.22,227.551 1044.79,223.726 1045.36,223.246 1045.93,221.472 1046.5,221.95 1047.07,221.632 1047.63,224.096 1048.2,225.406 1048.77,224.801 1049.34,224.362 1049.91,225.659 1050.48,226.958 1051.05,231.186 1051.61,231.258 1052.18,232.116 1052.75,231.999 1053.32,232.865 1053.89,231.339 1054.46,232.342 1055.02,232.102 1055.59,230.88 1056.16,232.876 1056.73,233.813 1057.3,234.462 1057.87,233.271 1058.43,232.924 1059,237.743 1059.57,237.92 1060.14,240.399 1060.71,240.696 1061.28,237.903 1061.84,238.476 1062.41,237.69 1062.98,237.03 1063.55,238.344 1064.12,237.684 1064.69,237.092 1065.25,236.464 1065.82,234.698 1066.39,233.044 1066.96,232.627 1067.53,231.223 1068.1,231.045 1068.66,230.892 1069.23,230.745 1069.8,230.559 1070.37,230.315 1070.94,231.082 1071.51,228.683 1072.07,228.575 1072.64,228.399 1073.21,229.296 1073.78,228.096 1074.35,226.036 1074.92,226.385 1075.48,228.385 1076.05,228.378 1076.62,229.186 1077.19,229.014 1077.76,230.225 1078.33,230.943 1078.89,232.691 1079.46,234.406 1080.03,230.898 1080.6,231.786 1081.17,229.53 1081.74,229.621 1082.3,228.553 1082.87,227.568 1083.44,227.649 1084.01,227.703 1084.58,227.608 1085.15,227.476 1085.71,226.529 1086.28,226.711 1086.85,226.742 1087.42,224.758 1087.99,223.79 1088.56,223.923 1089.12,224.123 1089.69,224.391 1090.26,222.626 1090.83,225.104 1091.4,224.252 1091.97,225.675 1092.53,225.877 1093.1,225.064 1093.67,227.342 1094.24,225.289 1094.81,226.536 1095.38,226.585 1095.94,223.708 1096.51,223.092 1097.08,222.745 1097.65,222.291 1098.22,221.799 1098.79,221.37 1099.35,222.917 1099.92,223.726 1100.49,223.19 1101.06,224.649 1101.63,227.061 1102.2,226.041 1102.76,226.27 1103.33,227.536 1103.9,228.613 1104.47,228.696 1105.04,229.722 1105.61,230.822 1106.17,232.663 1106.74,230.42 1107.31,228.308 1107.88,227.27 1108.45,224.114 1109.02,224.471 1109.58,224.823 1110.15,225.169 1110.72,224.488 1111.29,224.777 1111.86,223.104 1112.43,221.443 1112.99,221.079 1113.56,225.832 1114.13,227.228 1114.7,227.211 1115.27,228.451 1115.84,228.594 1116.4,228.868 1116.97,229.964 1117.54,228.992 1118.11,229.01 1118.68,232.341 1119.25,232.105 1119.81,232.16 1120.38,235.197 1120.95,235.845 1121.52,235.352 1122.09,233.964 1122.66,232.761 1123.23,234.355 1123.79,234.836 1124.36,235.535 1124.93,235.021 1125.5,232.538 1126.07,232.233 1126.64,231.056 1127.2,229.691 1127.77,229.507 1128.34,229.576 1128.91,228.409 1129.48,229.659 1130.05,229.533 1130.61,230.446 1131.18,229.445 1131.75,229.386 1132.32,229.5 1132.89,228.531 1133.46,229.746 1134.02,228.874 1134.59,230.669 1135.16,230.41 1135.73,231.27 1136.3,232.282 1136.87,230.07 1137.43,229.908 1138,228.741 1138.57,228.607 1139.14,227.784 1139.71,227.913 1140.28,227.84 1140.84,226.676 1141.41,225.703 1141.98,225.677 1142.55,227.146 1143.12,226.303 1143.69,226.547 1144.25,223.016 1144.82,223.429 1145.39,223.877 1145.96,226.423 1146.53,227.68 1147.1,225.862 1147.66,223.905 1148.23,224.437 1148.8,224.952 1149.37,225.473 1149.94,224.849 1150.51,226.133 1151.07,225.404 1151.64,226.833 1152.21,229.032 1152.78,229.339 1153.35,228.444 1153.92,228.624 1154.48,229.806 1155.05,228.642 1155.62,229.607 1156.19,229.389 1156.76,229.49 1157.33,229.573 1157.89,228.8 1158.46,228.906 1159.03,232.1 1159.6,231.137 1160.17,232.176 1160.74,233.116 1161.3,234.872 1161.87,232.676 1162.44,234.491 1163.01,234.202 1163.58,235.908 1164.15,235.413 1164.71,234.939 1165.28,233.688 1165.85,232.313 1166.42,233.387 1166.99,233.224 1167.56,230.99 1168.12,229.771 1168.69,231.73 1169.26,232.51 1169.83,232.172 1170.4,230.978 1170.97,232.957 1171.53,230.729 1172.1,227.563 1172.67,225.525 1173.24,225.598 1173.81,227.703 1174.38,224.675 1174.94,224.776 1175.51,226.03 1176.08,224.068 1176.65,224.544 1177.22,226.83 1177.79,225.812 1178.35,222.96 1178.92,225.593 1179.49,225.816 1180.06,226.081 1180.63,226.304 1181.2,226.407 1181.76,227.725 1182.33,228.674 1182.9,228.754 1183.47,228.976 1184.04,229.888 1184.61,228.07 1185.17,228.154 1185.74,228.134 1186.31,226.313 1186.88,226.455 1187.45,228.499 1188.02,226.454 1188.58,226.582 1189.15,225.57 1189.72,228.896 1190.29,229.191 1190.86,226.953 1191.43,228.084 1192,227.211 1192.56,228.268 1193.13,227.598 1193.7,227.865 1194.27,227.966 1194.84,227.907 1195.41,226.791 1195.97,226.933 1196.54,225.894 1197.11,226.221 1197.68,226.858 1198.25,227.073 1198.82,227.217 1199.38,226.202 1199.95,225.333 1200.52,226.446 1201.09,229.015 1201.66,230.413 1202.23,231.304 1202.79,231.291 1203.36,231.301 1203.93,232.022 1204.5,233.021 1205.07,231.727 1205.64,232.653 1206.2,233.386 1206.77,234.178 1207.34,231.813 1207.91,231.653 1208.48,231.385 1209.05,232.419 1209.61,232.372 1210.18,231.106 1210.75,232.132 1211.32,229.75 1211.89,230.432 1212.46,230.47 1213.02,230.53 1213.59,225.173 1214.16,225.439 1214.73,224.661 1215.3,226.101 1215.87,228.213 1216.43,228.246 1217,229.552 1217.57,228.656 1218.14,225.641 1218.71,225.87 1219.28,227.074 1219.84,230.401 1220.41,229.252 1220.98,230.285 1221.55,231.237 1222.12,232.303 1222.69,232.037 1223.25,231.744 1223.82,234.526 1224.39,234.231 1224.96,233.948 1225.53,234.606 1226.1,235.348 1226.66,236.017 1227.23,237.612 1227.8,236.891 1228.37,236.507 1228.94,235.828 1229.51,232.977 1230.07,230.492 1230.64,229.101 1231.21,228.022 1231.78,230.13 1232.35,231.887 1232.92,229.725 1233.48,228.671 1234.05,229.581 1234.62,230.074 1235.19,230.997 1235.76,229.827 1236.33,229.401 1236.89,227.399 1237.46,226.325 1238.03,227.452 1238.6,228.529 1239.17,227.402 1239.74,228.552 1240.3,226.579 1240.87,226.462 1241.44,226.842 1242.01,223.862 1242.58,226.156 1243.15,226.475 1243.71,226.638 1244.28,227.952 1244.85,227.107 1245.42,227.21 1245.99,226.166 1246.56,228.519 1247.12,229.876 1247.69,230.811 1248.26,231.462 1248.83,230.162 1249.4,228.176 1249.97,228.279 1250.53,227.115 1251.1,224.742 1251.67,227.075 1252.24,227.887 1252.81,226.768 1253.38,228.637 1253.94,227.622 1254.51,227.583 1255.08,226.56 1255.65,225.779 1256.22,226.063 1256.79,226.31 1257.35,227.566 1257.92,227.615 1258.49,229.593 1259.06,229.352 1259.63,229.128 1260.2,226.941 1260.76,226.94 1261.33,229.177 1261.9,229.23 1262.47,229.249 1263.04,231.319 1263.61,231.233 1264.18,230.071 1264.74,228.962 1265.31,229.092 1265.88,228.994 1266.45,228.058 1267.02,225.101 1267.59,226.95 1268.15,226.917 1268.72,226.961 1269.29,229.184 1269.86,231.218 1270.43,230.913 1271,229.763 1271.56,229.547 1272.13,230.442 1272.7,230.253 1273.27,227.945 1273.84,228.08 1274.41,228.138 1274.97,227.035 1275.54,228.185 1276.11,228.309 1276.68,227.299 1277.25,225.326 1277.82,226.61 1278.38,225.764 1278.95,223.942 1279.52,223.123 1280.09,223.594 1280.66,225.946 1281.23,227.151 1281.79,229.229 1282.36,230.264 1282.93,230.185 1283.5,231.303 1284.07,232.151 1284.64,233.069 1285.2,231.671 1285.77,232.583 1286.34,231.358 1286.91,228.232 1287.48,228.163 1288.05,228.257 1288.61,229.308 1289.18,229.123 1289.75,228.166 1290.32,226.221 1290.89,227.29 1291.46,225.345 1292.02,226.553 1292.59,226.702 1293.16,226.757 1293.73,225.694 1294.3,226.143 1294.87,229.41 1295.43,228.247 1296,227.165 1296.57,225.41 1297.14,226.552 1297.71,225.941 1298.28,226.142 1298.84,226.524 1299.41,227.548 1299.98,226.585 1300.55,226.813 1301.12,226.158 1301.69,227.439 1302.25,228.662 1302.82,231.887 1303.39,230.857 1303.96,230.792 1304.53,233.874 1305.1,233.552 1305.66,233.223 1306.23,232.952 1306.8,233.619 1307.37,233.082 1307.94,235.961 1308.51,234.305 1309.07,233.056 1309.64,231.903 1310.21,233.886 1310.78,234.584 1311.35,235.876 1311.92,235.119 1312.48,236.841 1313.05,235.069 1313.62,235.549 1314.19,235.205 1314.76,233.428 1315.33,231.055 1315.89,232.949 1316.46,232.464 1317.03,231.127 1317.6,230.789 1318.17,228.343 1318.74,229.565 1319.3,230.391 1319.87,232.36 1320.44,231.83 1321.01,232.504 1321.58,230.077 1322.15,230.964 1322.71,230.738 1323.28,229.187 1323.85,228.116 1324.42,227.037 1324.99,227.088 1325.56,226.894 1326.12,227.059 1326.69,225.996 1327.26,224.834 1327.83,226.017 1328.4,228.275 1328.97,229.186 1329.53,231.014 1330.1,229.651 1330.67,230.63 1331.24,227.612 1331.81,227.578 1332.38,228.652 1332.94,225.492 1333.51,226.742 1334.08,228.09 1334.65,229.057 1335.22,226.858 1335.79,226.765 1336.36,226.721 1336.92,225.724 1337.49,224.673 1338.06,221.654 1338.63,223.052 1339.2,223.22 1339.77,223.529 1340.33,225.036 1340.9,225.416 1341.47,228.717 1342.04,228.743 1342.61,229.714 1343.18,230.569 1343.74,232.307 1344.31,233.008 1344.88,231.662 1345.45,232.539 1346.02,232.322 1346.59,232.109 1347.15,231.884 1347.72,231.763 1348.29,230.472 1348.86,230.199 1349.43,230.001 1350,229.705 1350.56,230.531 1351.13,231.391 1351.7,231.176 1352.27,230.802 1352.84,231.777 1353.41,231.468 1353.97,231.532 1354.54,228.478 1355.11,230.35 1355.68,230.247 1356.25,229.161 1356.82,230.118 1357.38,230.016 1357.95,228.608 1358.52,228.414 1359.09,228.216 1359.66,227.002 1360.23,225.942 1360.79,222.938 1361.36,223.287 1361.93,220.591 1362.5,221.03 1363.07,221.415 1363.64,219.895 1364.2,221.615 1364.77,225.072 1365.34,225.228 1365.91,223.452 1366.48,223.885 1367.05,224.192 1367.61,223.356 1368.18,225.799 1368.75,225.84 1369.32,225.196 1369.89,224.529 1370.46,225.911 1371.02,225.003 1371.59,222.337 1372.16,222.764 1372.73,223.22 1373.3,224.59 1373.87,225.044 1374.43,228.466 1375,227.58 1375.57,227.618 1376.14,228.903 1376.71,227.771 1377.28,228.105 1377.84,232.514 1378.41,234.28 1378.98,232.935 1379.55,233.689 1380.12,236.551 1380.69,234.998 1381.25,236.812 1381.82,236.271 1382.39,236.745 1382.96,237.093 1383.53,237.581 1384.1,235.831 1384.66,230.984 1385.23,230.746 1385.8,229.69 1386.37,230.489 1386.94,229.339 1387.51,228.996 1388.07,231.025 1388.64,229.702 1389.21,231.46 1389.78,230.08 1390.35,229.032 1390.92,227.741 1391.48,225.809 1392.05,227.132 1392.62,227.079 1393.19,228.264 1393.76,229.361 1394.33,229.216 1394.89,230.177 1395.46,229.226 1396.03,229.213 1396.6,228.901 1397.17,229.869 1397.74,230.748 1398.3,229.51 1398.87,229.589 1399.44,229.253 1400.01,227.197 1400.58,227.176 1401.15,225.365 1401.71,225.59 1402.28,225.834 1402.85,225.065 1403.42,225.286 1403.99,225.572 1404.56,225.803 1405.13,226.975 1405.69,228.881 1406.26,228.969 1406.83,229.876 1407.4,230.71 1407.97,230.64 1408.54,227.613 1409.1,227.671 1409.67,228.757 1410.24,226.793 1410.81,224.959 1411.38,224.275 1411.95,223.521 1412.51,225.005 1413.08,226.128 1413.65,227.375 1414.22,227.547 1414.79,226.697 1415.36,228.188 1415.92,225.156 1416.49,224.605 1417.06,227.22 1417.63,229.525 1418.2,232.449 1418.77,235.106 1419.33,233.816 1419.9,234.379 1420.47,234.038 1421.04,232.661 1421.61,232.577 1422.18,232.385 1422.74,234.337 1423.31,233.832 1423.88,232.558 1424.45,233.36 1425.02,232.19 1425.59,231.993 1426.15,230.821 1426.72,230.824 1427.29,229.612 1427.86,233.432 1428.43,233.106 1429,231.731 1429.56,232.511 1430.13,230.033 1430.7,229.982 1431.27,230.97 1431.84,231.949 1432.41,230.689 1432.97,230.166 1433.54,231.023 1434.11,230.963 1434.68,230.799 1435.25,230.564 1435.82,228.408 1436.38,227.27 1436.95,227.291 1437.52,223.136 1438.09,224.792 1438.66,222.882 1439.23,222.32 1439.79,223.861 1440.36,224.094 1440.93,224.376 1441.5,226.006 1442.07,226.144 1442.64,223.117 1443.2,226.465 1443.77,226.623 1444.34,225.792 1444.91,227.058 1445.48,227.3 1446.05,225.268 1446.61,225.548 1447.18,226.961 1447.75,225.081 1448.32,225.381 1448.89,225.88 1449.46,226.986 1450.02,226.939 1450.59,223.749 1451.16,222.021 1451.73,222.173 1452.3,223.71 1452.87,222.043 1453.43,223.68 1454,223.143 1454.57,222.621 1455.14,223.027 1455.71,221.645 1456.28,221.124 1456.84,220.758 1457.41,224.405 1457.98,225.79 1458.55,224.023 1459.12,223.448 1459.69,226.109 1460.25,226.412 1460.82,226.822 1461.39,226.923 1461.96,223.065 1462.53,224.555 1463.1,224.088 1463.66,223.643 1464.23,224.955 1464.8,223.308 1465.37,224.659 1465.94,228.055 1466.51,226.561 1467.07,224.913 1467.64,226.3 1468.21,226.539 1468.78,226.899 1469.35,226.15 1469.92,227.43 1470.48,229.54 1471.05,229.797 1471.62,227.779 1472.19,228.947 1472.76,230.111 1473.33,232.172 1473.89,232.111 1474.46,232.04 1475.03,234.897 1475.6,234.529 1476.17,233.226 1476.74,233.105 1477.31,233.84 1477.87,234.674 1478.44,232.043 1479.01,235.252 1479.58,233.918 1480.15,233.569 1480.72,234.496 1481.28,233.147 1481.85,234.975 1482.42,235.496 1482.99,235.018 1483.56,233.689 1484.13,235.416 1484.69,236.284 1485.26,235.625 1485.83,235.38 1486.4,235.118 1486.97,232.459 1487.54,232.235 1488.1,232.829 1488.67,234.686 1489.24,234.328 1489.81,234.93 1490.38,234.431 1490.95,234.467 1491.51,234.079 1492.08,230.591 1492.65,231.485 1493.22,230.341 1493.79,230.092 1494.36,230.095 1494.92,229.038 1495.49,229.165 1496.06,229.297 1496.63,232.168 1497.2,230.916 1497.77,231.631 1498.33,231.267 1498.9,230.977 1499.47,228.785 1500.04,228.778 1500.61,229.598 1501.18,229.621 1501.74,229.457 1502.31,227.422 1502.88,227.314 1503.45,223.08 1504.02,222.616 1504.59,224.157 1505.15,224.619 1505.72,225.588 1506.29,226.883 1506.86,226.178 1507.43,228.305 1508,228.264 1508.56,226.034 1509.13,224.094 1509.7,223.136 1510.27,225.596 1510.84,222.704 1511.41,221.04 1511.97,220.576 1512.54,221.15 1513.11,223.869 1513.68,223.293 1514.25,224.999 1514.82,225.298 1515.38,224.485 1515.95,226.056 1516.52,227.241 1517.09,228.386 1517.66,228.515 1518.23,226.724 1518.79,227.028 1519.36,230.18 1519.93,231.41 1520.5,234.244 1521.07,235.971 1521.64,232.56 1522.2,231.187 1522.77,228.765 1523.34,227.513 1523.91,227.627 1524.48,228.873 1525.05,227.763 1525.61,227.634 1526.18,226.726 1526.75,226.885 1527.32,228.119 1527.89,229.237 1528.46,230.26 1529.02,230.168 1529.59,231.147 1530.16,231.262 1530.73,233.19 1531.3,233.835 1531.87,233.509 1532.43,232.059 1533,231.825 1533.57,232.651 1534.14,231.538 1534.71,230.299 1535.28,229.106 1535.84,230.866 1536.41,228.505 1536.98,226.628 1537.55,226.905 1538.12,225.295 1538.69,226.755 1539.25,224.809 1539.82,225.226 1540.39,226.528 1540.96,228.686 1541.53,228.81 1542.1,227.75 1542.66,227.113 1543.23,227.252 1543.8,228.94 1544.37,229.21 1544.94,230.45 1545.51,230.348 1546.08,230.244 1546.64,228.952 1547.21,229.083 1547.78,230.096 1548.35,230.948 1548.92,228.521 1549.49,227.649 1550.05,228.852 1550.62,229.889 1551.19,232.649 1551.76,232.198 1552.33,231.967 1552.9,231.737 1553.46,229.617 1554.03,229.491 1554.6,231.401 1555.17,231.173 1555.74,230.061 1556.31,229.781 1556.87,230.756 1557.44,230.507 1558.01,234.491 1558.58,234.316 1559.15,234.863 1559.72,234.348 1560.28,235.074 1560.85,233.414 1561.42,233.229 1561.99,232.997 1562.56,232.609 1563.13,232.309 1563.69,230.096 1564.26,229.835 1564.83,228.676 1565.4,229.515 1565.97,227.414 1566.54,227.359 1567.1,228.56 1567.67,228.849 1568.24,227.666 1568.81,229.663 1569.38,228.443 1569.95,227.514 1570.51,227.943 1571.08,227.092 1571.65,226.04 1572.22,226.267 1572.79,227.303 1573.36,226.452 1573.92,226.684 1574.49,225.582 1575.06,223.536 1575.63,222.665 1576.2,225.228 1576.77,224.389 1577.33,222.574 1577.9,222.955 1578.47,224.354 1579.04,222.629 1579.61,223.126 1580.18,224.488 1580.74,224.853 1581.31,228.44 1581.88,228.663 1582.45,229.765 1583.02,229.838 1583.59,228.858 1584.15,227.71 1584.72,228.027 1585.29,228.157 1585.86,229.285 1586.43,229.083 1587,230.19 1587.56,230.055 1588.13,231.996 1588.7,232.572 1589.27,231.108 1589.84,229.13 1590.41,227.976 1590.97,228.923 1591.54,229.848 1592.11,228.619 1592.68,229.47 1593.25,230.647 1593.82,232.434 1594.38,232.21 1594.95,231.972 1595.52,231.759 1596.09,233.395 1596.66,232.127 1597.23,232.03 1597.79,231.807 1598.36,231.617 1598.93,231.37 1599.5,229.05 1600.07,229.183 1600.64,230.199 1601.2,230.207 1601.77,228.993 1602.34,228.706 1602.91,228.871 1603.48,230.955 1604.05,228.721 1604.61,228.653 1605.18,229.733 1605.75,230.834 1606.32,230.703 1606.89,230.674 1607.46,229.653 1608.02,228.752 1608.59,228.949 1609.16,228.952 1609.73,227.906 1610.3,227.951 1610.87,229.049 1611.43,229.091 1612,228.192 1612.57,230.66 1613.14,228.424 1613.71,227.235 1614.28,226.101 1614.84,227.08 1615.41,228.173 1615.98,230.152 1616.55,230.069 1617.12,228.917 1617.69,227.769 1618.26,226.926 1618.82,227.11 1619.39,227.454 1619.96,225.313 1620.53,224.613 1621.1,225.903 1621.67,226.12 1622.23,227.379 1622.8,229.581 1623.37,231.585 1623.94,230.528 1624.51,230.23 1625.08,230.145 1625.64,230.152 1626.21,230.953 1626.78,229.778 1627.35,229.626 1627.92,230.585 1628.49,230.574 1629.05,230.341 1629.62,231.172 1630.19,231.065 1630.76,234.089 1631.33,233.504 1631.9,233.318 1632.46,234.163 1633.03,232.963 1633.6,233.595 1634.17,232.181 1634.74,231.992 1635.31,232.85 1635.87,232.621 1636.44,234.149 1637.01,233.641 1637.58,234.039 1638.15,234.423 1638.72,233.973 1639.28,235.642 1639.85,234.867 1640.42,232.183 1640.99,231.066 1641.56,231.674 1642.13,231.426 1642.69,229.97 1643.26,227.873 1643.83,227.697 1644.4,225.464 1644.97,227.552 1645.54,227.395 1646.1,228.56 1646.67,227.587 1647.24,226.547 1647.81,227.752 1648.38,225.735 1648.95,227.891 1649.51,226.755 1650.08,225.862 1650.65,227.993 1651.22,227.993 1651.79,227.938 1652.36,228.937 1652.92,228.537 1653.49,228.58 1654.06,228.547 1654.63,225.495 1655.2,225.529 1655.77,223.71 1656.33,225.983 1656.9,226.14 1657.47,226.171 1658.04,226.356 1658.61,226.502 1659.18,227.683 1659.74,227.547 1660.31,226.423 1660.88,226.65 1661.45,224.628 1662.02,222.751 1662.59,225.159 1663.15,224.402 1663.72,224.991 1664.29,220.959 1664.86,220.337 1665.43,221.806 1666,222.256 1666.56,223.749 1667.13,224.107 1667.7,224.517 1668.27,227.975 1668.84,228.001 1669.41,228.131 1669.97,228.197 1670.54,229.373 1671.11,228.44 1671.68,230.477 1672.25,231.58 1672.82,230.478 1673.38,228.251 1673.95,227.1 1674.52,226.239 1675.09,228.458 1675.66,227.25 1676.23,226.398 1676.79,226.614 1677.36,226.965 1677.93,226.969 1678.5,227.089 1679.07,226.158 1679.64,225.299 1680.2,223.528 1680.77,226.069 1681.34,227.258 1681.91,227.52 1682.48,228.93 1683.05,228.878 1683.61,227.967 1684.18,227 1684.75,225.155 1685.32,223.317 1685.89,222.743 1686.46,225.406 1687.02,226.58 1687.59,226.724 1688.16,226.012 1688.73,226.42 1689.3,229.561 1689.87,230.812 1690.44,232.628 1691,232.368 1691.57,231.261 1692.14,231.253 1692.71,229.972 1693.28,229.94 1693.85,227.82 1694.41,224.828 1694.98,225.337 1695.55,226.686 1696.12,227.932 1696.69,228.193 1697.26,227.228 1697.82,228.536 1698.39,227.706 1698.96,226.841 1699.53,225.076 1700.1,224.202 1700.67,224.625 1701.23,224.977 1701.8,226.364 1702.37,227.684 1702.94,229.973 1703.51,229.913 1704.08,229.984 1704.64,229.919 1705.21,228.881 1705.78,230.002 1706.35,230.959 1706.92,232.096 1707.49,232.809 1708.05,232.308 1708.62,233.347 1709.19,233.984 1709.76,232.634 1710.33,232.157 1710.9,231.998 1711.46,232.682 1712.03,234.24 1712.6,234.843 1713.17,237.606 1713.74,236.895 1714.31,235.41 1714.87,235.07 1715.44,231.653 1716.01,228.396 1716.58,228.288 1717.15,228.556 1717.72,229.771 1718.28,229.585 1718.85,229.626 1719.42,229.35 1719.99,229.271 1720.56,230.265 1721.13,233.198 1721.69,232.776 1722.26,233.32 1722.83,233.135 1723.4,233.846 1723.97,233.532 1724.54,233.074 1725.1,231.683 1725.67,230.108 1726.24,229.739 1726.81,226.682 1727.38,227.755 1727.95,230.777 1728.51,230.877 1729.08,232.714 1729.65,232.602 1730.22,233.339 1730.79,232.624 1731.36,231.432 1731.92,231.043 1732.49,229.722 1733.06,227.311 1733.63,227.342 1734.2,226.354 1734.77,227.46 1735.33,226.476 1735.9,227.516 1736.47,224.498 1737.04,223.834 1737.61,223.363 1738.18,224.786 1738.74,226.387 1739.31,225.549 1739.88,226.775 1740.45,228.123 1741.02,229.331 1741.59,228.306 1742.15,230.197 1742.72,231.064 1743.29,228.787 1743.86,227.819 1744.43,228.889 1745,228.875 1745.56,228.943 1746.13,227.935 1746.7,227.942 1747.27,226.926 1747.84,227.271 1748.41,226.25 1748.97,225.564 1749.54,225.872 1750.11,226.086 1750.68,228.352 1751.25,228.578 1751.82,227.531 1752.38,227.523 1752.95,226.591 1753.52,224.682 1754.09,225.3 1754.66,225.354 1755.23,222.61 1755.79,221.967 1756.36,224.617 1756.93,225.031 1757.5,227.27 1758.07,227.389 1758.64,227.629 1759.21,226.789 1759.77,226.96 1760.34,225.193 1760.91,224.409 1761.48,227.974 1762.05,227.042 1762.62,228.297 1763.18,228.319 1763.75,229.696 1764.32,229.55 1764.89,228.476 1765.46,227.683 1766.03,229.291 1766.59,229.349 1767.16,229.449 1767.73,232.699 1768.3,232.596 1768.87,230.305 1769.44,231.186 1770,230.053 1770.57,231.785 1771.14,232.631 1771.71,231.362 1772.28,227.988 1772.85,229.22 1773.41,229.076 1773.98,230.09 1774.55,231.141 1775.12,228.129 1775.69,227.137 1776.26,225.063 1776.82,226.32 1777.39,226.594 1777.96,226.887 1778.53,226.971 1779.1,229.159 1779.67,230.171 1780.23,227.953 1780.8,228.016 1781.37,228.099 1781.94,227.048 1782.51,228.073 1783.08,227.189 1783.64,227.163 1784.21,228.375 1784.78,230.458 1785.35,231.652 1785.92,229.463 1786.49,229.519 1787.05,230.493 1787.62,232.311 1788.19,233.224 1788.76,233.054 1789.33,229.488 1789.9,233.612 1790.46,235.374 1791.03,233.632 1791.6,234.28 1792.17,232.841 1792.74,233.648 1793.31,230.31 1793.87,230.989 1794.44,228.746 1795.01,229.777 1795.58,233.82 1796.15,234.504 1796.72,233.173 1797.28,232.796 1797.85,231.598 1798.42,231.312 1798.99,232.029 1799.56,229.436 1800.13,227.353 1800.69,227.25 1801.26,228.282 1801.83,227.124 1802.4,225.283 1802.97,225.542 1803.54,225.796 1804.1,223.829 1804.67,226.112 1805.24,229.173 1805.81,228.06 1806.38,227.149 1806.95,226.086 1807.51,226.156 1808.08,226.218 1808.65,228.564 1809.22,229.607 1809.79,230.725 1810.36,229.345 1810.92,228.33 1811.49,230.541 1812.06,230.412 1812.63,227.019 1813.2,227.062 1813.77,224.009 1814.33,225.59 1814.9,223.063 1815.47,225.678 1816.04,227.023 1816.61,226.118 1817.18,226.589 1817.74,225.566 1818.31,224.839 1818.88,224.164 1819.45,224.391 1820.02,223.841 1820.59,222.955 1821.15,223.335 1821.72,223.612 1822.29,223.97 1822.86,226.423 1823.43,226.804 1824,224.005 1824.56,225.364 1825.13,227.857 1825.7,227.984 1826.27,228.127 1826.84,231.213 1827.41,231.176 1827.97,229.114 1828.54,231.073 1829.11,230.932 1829.68,231.756 1830.25,230.587 1830.82,228.271 1831.39,227.182 1831.95,229.475 1832.52,229.548 1833.09,232.607 1833.66,230.505 1834.23,229.691 1834.8,230.529 1835.36,230.614 1835.93,229.552 1836.5,232.472 1837.07,234.182 1837.64,232.848 1838.21,232.724 1838.77,230.395 1839.34,229.236 1839.91,229.253 1840.48,229.011 1841.05,232.043 1841.62,231.717 1842.18,233.467 1842.75,234.205 1843.32,231.623 1843.89,233.655 1844.46,232.422 1845.03,232.145 1845.59,232.836 1846.16,232.596 1846.73,230.469 1847.3,228.252 1847.87,228.153 1848.44,232.64 1849,233.366 1849.57,230.975 1850.14,228.649 1850.71,228.688 1851.28,228.435 1851.85,226.464 1852.41,230.797 1852.98,230.795 1853.55,230.59 1854.12,229.297 1854.69,226.211 1855.26,225.218 1855.82,227.414 1856.39,225.508 1856.96,226.919 1857.53,228.007 1858.1,229.179 1858.67,230.158 1859.23,230.985 1859.8,233.002 1860.37,230.684 1860.94,231.642 1861.51,233.496 1862.08,230.96 1862.64,230.74 1863.21,230.666 1863.78,232.552 1864.35,233.272 1864.92,229.711 1865.49,227.584 1866.05,227.593 1866.62,228.695 1867.19,227.552 1867.76,228.708 1868.33,227.813 1868.9,228.88 1869.46,228.791 1870.03,226.476 1870.6,224.564 1871.17,224.913 1871.74,226.91 1872.31,227.936 1872.87,226.103 1873.44,228.447 1874.01,227.435 1874.58,226.329 1875.15,226.363 1875.72,227.634 1876.28,227.015 1876.85,223.931 1877.42,225.393 1877.99,223.818 1878.56,224.284 1879.13,225.641 1879.69,224.851 1880.26,226.061 1880.83,226.496 1881.4,224.442 1881.97,224.666 1882.54,225.158 1883.1,224.27 1883.67,224.682 1884.24,224.94 1884.81,226.417 1885.38,227.441 1885.95,228.704 1886.51,229.936 1887.08,227.868 1887.65,227.927 1888.22,226.831 1888.79,228.022 1889.36,227.032 1889.92,224.019 1890.49,226.419 1891.06,226.581 1891.63,225.616 1892.2,223.787 1892.77,224.305 1893.33,225.836 1893.9,223.157 1894.47,226.938 1895.04,227.237 1895.61,227.37 1896.18,224.522 1896.74,226.141 1897.31,226.655 1897.88,227.993 1898.45,228.153 1899.02,229.145 1899.59,230.089 1900.16,232.238 1900.72,232.24 1901.29,233.167 1901.86,233.93 1902.43,233.72 1903,231.166 1903.57,230.093 1904.13,229.819 1904.7,229.687 1905.27,232.036 1905.84,233.103 1906.41,232.97 1906.98,232.681 1907.54,233.347 1908.11,234.062 1908.68,235.515 1909.25,233.903 1909.82,233.504 1910.39,232.995 1910.95,232.532 1911.52,233.197 1912.09,231.939 1912.66,231.483 1913.23,232.253 1913.8,229.968 1914.36,230.991 1914.93,230.619 1915.5,230.502 1916.07,230.405 1916.64,229.319 1917.21,230.364 1917.77,233.102 1918.34,232.836 1918.91,231.802 1919.48,232.576 1920.05,234.146 1920.62,234.605 1921.18,233.246 1921.75,231.709 1922.32,230.55 1922.89,229.262 1923.46,227.078 1924.03,229.253 1924.59,228.302 1925.16,229.424 1925.73,229.392 1926.3,230.281 1926.87,227.868 1927.44,229.113 1928,228.926 1928.57,227.654 1929.14,227.69 1929.71,227.539 1930.28,226.541 1930.85,224.589 1931.41,223.694 1931.98,220.973 1932.55,223.402 1933.12,221.666 1933.69,222.155 1934.26,221.542 1934.82,222.054 1935.39,220.141 1935.96,223.754 1936.53,224.226 1937.1,224.576 1937.67,223.065 1938.23,224.534 1938.8,224.908 1939.37,224.419 1939.94,224.895 1940.51,225.319 1941.08,225.608 1941.64,228.149 1942.21,228.142 1942.78,229.637 1943.35,229.63 1943.92,227.699 1944.49,229.078 1945.05,230.228 1945.62,229.255 1946.19,230.272 1946.76,231.287 1947.33,230.03 1947.9,233.311 1948.46,231.173 1949.03,236.333 1949.6,236.011 1950.17,234.311 1950.74,237.079 1951.31,236.509 1951.87,238.279 1952.44,238.576 1953.01,239.62 1953.58,236.789 1954.15,235.225 1954.72,233.7 1955.28,233.292 1955.85,232.936 1956.42,232.807 1956.99,231.187 1957.56,230.703 1958.13,229.546 1958.69,229.166 1959.26,229.007 1959.83,227.8 1960.4,228.81 1960.97,226.753 1961.54,228.748 1962.1,227.818 1962.67,227.975 1963.24,227.894 1963.81,225.788 1964.38,229.156 1964.95,227.087 1965.51,227.254 1966.08,227.4 1966.65,229.709 1967.22,230.604 1967.79,231.488 1968.36,232.359 1968.92,232.01 1969.49,231.703 1970.06,231.614 1970.63,231.294 1971.2,231.079 1971.77,230.124 1972.34,231.968 1972.9,231.576 1973.47,232.337 1974.04,231.82 1974.61,230.417 1975.18,231.353 1975.75,230.926 1976.31,231.682 1976.88,230.467 1977.45,230.304 1978.02,225.104 1978.59,224.16 1979.16,223.317 1979.72,223.626 1980.29,221.89 1980.86,222.418 1981.43,222.798 1982,222.028 1982.57,226.493 1983.13,227.66 1983.7,228.713 1984.27,225.554 1984.84,224.783 1985.41,225.064 1985.98,225.282 1986.54,225.258 1987.11,225.463 1987.68,224.547 1988.25,226.705 1988.82,226.902 1989.39,225.988 1989.95,226.267 1990.52,226.094 1991.09,223.113 1991.66,224.545 1992.23,224.874 1992.8,224.079 1993.36,225.626 1993.93,227.024 1994.5,223.972 1995.07,223.066 1995.64,224.498 1996.21,225.821 1996.77,226.153 1997.34,227.426 1997.91,228.724 1998.48,228.822 1999.05,228.029 1999.62,228.208 2000.18,228.228 2000.75,227.3 2001.32,223.419 2001.89,224.097 2002.46,223.447 2003.03,225.857 2003.59,225.171 2004.16,224.28 2004.73,224.663 2005.3,226.131 2005.87,226.525 2006.44,227.786 2007,229.918 2007.57,228.917 2008.14,229.256 2008.71,231.323 2009.28,234.274 2009.85,234.944 2010.41,234.428 2010.98,235.214 2011.55,234.986 2012.12,235.664 2012.69,235.356 2013.26,235.052 2013.82,235.796 2014.39,236.224 2014.96,235.931 2015.53,234.487 2016.1,234.109 2016.67,233.647 2017.23,233.249 2017.8,233.053 2018.37,231.853 2018.94,230.649 2019.51,231.516 2020.08,234.233 2020.64,234.702 2021.21,232.79 2021.78,233.404 2022.35,232.048 2022.92,233.748 2023.49,234.507 2024.05,236.063 2024.62,235.211 2025.19,235.681 2025.76,233.89 2026.33,233.416 2026.9,232.032 2027.46,231.463 2028.03,231.204 2028.6,228.671 2029.17,230.624 2029.74,231.357 2030.31,231.038 2030.87,231.759 2031.44,231.315 2032.01,230.744 2032.58,229.55 2033.15,229.552 2033.72,227.134 2034.28,227.134 2034.85,225.142 2035.42,224.147 2035.99,224.236 2036.56,224.434 2037.13,222.526 2037.69,223.072 2038.26,222.481 2038.83,223.835 2039.4,225.245 2039.97,224.418 2040.54,226.866 2041.11,228.926 2041.67,228.051 2042.24,232.313 2042.81,229.906 2043.38,229.856 2043.95,229.866 2044.52,227.505 2045.08,228.492 2045.65,229.434 2046.22,228.299 2046.79,227.209 2047.36,228.434 2047.93,229.412 2048.49,228.323 2049.06,228.229 2049.63,228.305 2050.2,228.146 2050.77,228.438 2051.34,226.252 2051.9,221.457 2052.47,221.076 2053.04,220.604 2053.61,221.229 2054.18,221.57 2054.75,221.218 2055.31,221.974 2055.88,222.531 2056.45,223.916 2057.02,224.357 2057.59,224.991 2058.16,225.418 2058.72,224.648 2059.29,226.984 2059.86,226.119 2060.43,228.45 2061,229.612 2061.57,229.668 2062.13,228.598 2062.7,227.455 2063.27,228.775 2063.84,231.86 2064.41,230.773 2064.98,230.623 2065.54,229.439 2066.11,229.458 2066.68,228.464 2067.25,229.42 2067.82,228.196 2068.39,228.389 2068.95,228.595 2069.52,227.836 2070.09,228.01 2070.66,225.239 2071.23,225.6 2071.8,224.79 2072.36,223.082 2072.93,225.873 2073.5,228.332 2074.07,228.497 2074.64,226.355 2075.21,225.724 2075.77,225.171 2076.34,226.197 2076.91,224.565 2077.48,225.788 2078.05,226.339 2078.62,226.533 2079.18,227.824 2079.75,226.712 2080.32,225.005 2080.89,225.367 2081.46,222.493 2082.03,223.874 2082.59,223.421 2083.16,222.575 2083.73,222.059 2084.3,225.66 2084.87,226.172 2085.44,226.441 2086,226.856 2086.57,227.878 2087.14,227.114 2087.71,229.298 2088.28,229.429 2088.85,229.548 2089.41,232.571 2089.98,235.582 2090.55,236.084 2091.12,235.476 2091.69,235.224 2092.26,236.118 2092.82,236.749 2093.39,234.25 2093.96,234.757 2094.53,233.562 2095.1,232.192 2095.67,229.942 2096.23,230.007 2096.8,230.036 2097.37,229.924 2097.94,231.08 2098.51,230.903 2099.08,229.814 2099.64,228.79 2100.21,225.654 2100.78,224.964 2101.35,223.176 2101.92,224.463 2102.49,224.141 2103.05,224.706 2103.62,227.02 2104.19,226.191 2104.76,230.597 2105.33,229.634 2105.9,230.65 2106.46,230.701 2107.03,233.546 2107.6,234.302 2108.17,234.969 2108.74,233.431 2109.31,232.856 2109.87,232.51 2110.44,232.094 2111.01,228.87 2111.58,230.715 2112.15,229.671 2112.72,232.86 2113.29,232.62 2113.85,231.154 2114.42,227.919 2114.99,227.951 2115.56,225.971 2116.13,227.219 2116.7,226.422 2117.26,225.591 2117.83,226.739 2118.4,225.908 2118.97,225.335 2119.54,224.693 2120.11,225.219 2120.67,224.717 2121.24,226.973 2121.81,230.175 2122.38,230.073 2122.95,229.807 2123.52,229.677 2124.08,229.638 2124.65,227.648 2125.22,229.848 2125.79,231.943 2126.36,232.99 2126.93,232.685 2127.49,233.557 2128.06,233.157 2128.63,234.862 2129.2,234.297 2129.77,233.926 2130.34,232.628 2130.9,232.362 2131.47,231.315 2132.04,232.211 2132.61,229.872 2133.18,227.726 2133.75,227.839 2134.31,228.722 2134.88,229.761 2135.45,228.581 2136.02,228.582 2136.59,228.595 2137.16,227.759 2137.72,228.829 2138.29,227.652 2138.86,226.611 2139.43,225.566 2140,225.895 2140.57,225.007 2141.13,225.28 2141.7,224.349 2142.27,223.502 2142.84,223.771 2143.41,224.055 2143.98,224.351 2144.54,225.797 2145.11,225.886 2145.68,229.327 2146.25,228.259 2146.82,227.369 2147.39,227.569 2147.95,227.623 2148.52,227.055 2149.09,226.075 2149.66,227.297 2150.23,230.524 2150.8,231.636 2151.36,231.398 2151.93,232.271 2152.5,228.861 2153.07,229.816 2153.64,230.897 2154.21,228.683 2154.77,230.747 2155.34,228.791 2155.91,228.835 2156.48,227.741 2157.05,226.705 2157.62,228.73 2158.18,231.028 2158.75,233.738 2159.32,235.553 2159.89,233.122 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip340)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.033 ± 0.021\n  with uncertainty of ± 0.0019414761049729606\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01331 ± (0.00200681, 0.00206268) (MC)\n  95% confidence interval: [-4.01732, -4.00934]) (MC)\n  linear error propagation: -4.01354 ± 0.00204434\n  |δ_y| = |0.00139252| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013308704439, val_l = 0.004013716660637989, val_u = 0.0039728836277932444)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip370\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip371\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip372\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1154.77 2211.02,1154.77 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1014.82 2211.02,1014.82 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,874.865 2211.02,874.865 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,734.914 2211.02,734.914 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,594.963 2211.02,594.963 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,455.011 2211.02,455.011 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,315.06 2211.02,315.06 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1154.77 365.751,1154.77 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1014.82 365.751,1014.82 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,874.865 365.751,874.865 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,734.914 365.751,734.914 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,594.963 365.751,594.963 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,455.011 365.751,455.011 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,315.06 365.751,315.06 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M298.909 1140.57 Q295.298 1140.57 293.469 1144.13 Q291.664 1147.67 291.664 1154.8 Q291.664 1161.91 293.469 1165.47 Q295.298 1169.01 298.909 1169.01 Q302.543 1169.01 304.349 1165.47 Q306.177 1161.91 306.177 1154.8 Q306.177 1147.67 304.349 1144.13 Q302.543 1140.57 298.909 1140.57 M298.909 1136.86 Q304.719 1136.86 307.775 1141.47 Q310.853 1146.05 310.853 1154.8 Q310.853 1163.53 307.775 1168.13 Q304.719 1172.72 298.909 1172.72 Q293.099 1172.72 290.02 1168.13 Q286.964 1163.53 286.964 1154.8 Q286.964 1146.05 290.02 1141.47 Q293.099 1136.86 298.909 1136.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M259.557 1028.16 L267.196 1028.16 L267.196 1001.8 L258.886 1003.46 L258.886 999.203 L267.15 997.536 L271.826 997.536 L271.826 1028.16 L279.465 1028.16 L279.465 1032.1 L259.557 1032.1 L259.557 1028.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 1000.61 Q295.298 1000.61 293.469 1004.18 Q291.664 1007.72 291.664 1014.85 Q291.664 1021.96 293.469 1025.52 Q295.298 1029.06 298.909 1029.06 Q302.543 1029.06 304.349 1025.52 Q306.177 1021.96 306.177 1014.85 Q306.177 1007.72 304.349 1004.18 Q302.543 1000.61 298.909 1000.61 M298.909 996.911 Q304.719 996.911 307.775 1001.52 Q310.853 1006.1 310.853 1014.85 Q310.853 1023.58 307.775 1028.18 Q304.719 1032.77 298.909 1032.77 Q293.099 1032.77 290.02 1028.18 Q286.964 1023.58 286.964 1014.85 Q286.964 1006.1 290.02 1001.52 Q293.099 996.911 298.909 996.911 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M262.775 888.21 L279.094 888.21 L279.094 892.145 L257.15 892.145 L257.15 888.21 Q259.812 885.455 264.395 880.825 Q269.002 876.173 270.182 874.83 Q272.428 872.307 273.307 870.571 Q274.21 868.812 274.21 867.122 Q274.21 864.367 272.266 862.631 Q270.344 860.895 267.242 860.895 Q265.043 860.895 262.59 861.659 Q260.159 862.423 257.381 863.974 L257.381 859.251 Q260.205 858.117 262.659 857.538 Q265.113 856.96 267.15 856.96 Q272.52 856.96 275.715 859.645 Q278.909 862.33 278.909 866.821 Q278.909 868.95 278.099 870.872 Q277.312 872.77 275.205 875.362 Q274.627 876.034 271.525 879.251 Q268.423 882.446 262.775 888.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 860.663 Q295.298 860.663 293.469 864.228 Q291.664 867.77 291.664 874.899 Q291.664 882.006 293.469 885.571 Q295.298 889.112 298.909 889.112 Q302.543 889.112 304.349 885.571 Q306.177 882.006 306.177 874.899 Q306.177 867.77 304.349 864.228 Q302.543 860.663 298.909 860.663 M298.909 856.96 Q304.719 856.96 307.775 861.566 Q310.853 866.15 310.853 874.899 Q310.853 883.626 307.775 888.233 Q304.719 892.816 298.909 892.816 Q293.099 892.816 290.02 888.233 Q286.964 883.626 286.964 874.899 Q286.964 866.15 290.02 861.566 Q293.099 856.96 298.909 856.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M272.914 733.56 Q276.27 734.277 278.145 736.546 Q280.043 738.814 280.043 742.147 Q280.043 747.263 276.525 750.064 Q273.006 752.865 266.525 752.865 Q264.349 752.865 262.034 752.425 Q259.742 752.008 257.289 751.152 L257.289 746.638 Q259.233 747.772 261.548 748.351 Q263.863 748.93 266.386 748.93 Q270.784 748.93 273.076 747.194 Q275.39 745.458 275.39 742.147 Q275.39 739.092 273.238 737.379 Q271.108 735.643 267.289 735.643 L263.261 735.643 L263.261 731.8 L267.474 731.8 Q270.923 731.8 272.752 730.435 Q274.58 729.046 274.58 726.453 Q274.58 723.791 272.682 722.379 Q270.807 720.944 267.289 720.944 Q265.367 720.944 263.168 721.361 Q260.969 721.777 258.33 722.657 L258.33 718.49 Q260.992 717.749 263.307 717.379 Q265.645 717.009 267.705 717.009 Q273.029 717.009 276.131 719.439 Q279.233 721.847 279.233 725.967 Q279.233 728.837 277.59 730.828 Q275.946 732.796 272.914 733.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 720.712 Q295.298 720.712 293.469 724.277 Q291.664 727.819 291.664 734.948 Q291.664 742.055 293.469 745.62 Q295.298 749.161 298.909 749.161 Q302.543 749.161 304.349 745.62 Q306.177 742.055 306.177 734.948 Q306.177 727.819 304.349 724.277 Q302.543 720.712 298.909 720.712 M298.909 717.009 Q304.719 717.009 307.775 721.615 Q310.853 726.198 310.853 734.948 Q310.853 743.675 307.775 748.282 Q304.719 752.865 298.909 752.865 Q293.099 752.865 290.02 748.282 Q286.964 743.675 286.964 734.948 Q286.964 726.198 290.02 721.615 Q293.099 717.009 298.909 717.009 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M271.594 581.757 L259.789 600.206 L271.594 600.206 L271.594 581.757 M270.367 577.683 L276.247 577.683 L276.247 600.206 L281.177 600.206 L281.177 604.094 L276.247 604.094 L276.247 612.243 L271.594 612.243 L271.594 604.094 L255.992 604.094 L255.992 599.581 L270.367 577.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 580.761 Q295.298 580.761 293.469 584.326 Q291.664 587.868 291.664 594.997 Q291.664 602.104 293.469 605.669 Q295.298 609.21 298.909 609.21 Q302.543 609.21 304.349 605.669 Q306.177 602.104 306.177 594.997 Q306.177 587.868 304.349 584.326 Q302.543 580.761 298.909 580.761 M298.909 577.058 Q304.719 577.058 307.775 581.664 Q310.853 586.247 310.853 594.997 Q310.853 603.724 307.775 608.331 Q304.719 612.914 298.909 612.914 Q293.099 612.914 290.02 608.331 Q286.964 603.724 286.964 594.997 Q286.964 586.247 290.02 581.664 Q293.099 577.058 298.909 577.058 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M258.793 437.731 L277.15 437.731 L277.15 441.667 L263.076 441.667 L263.076 450.139 Q264.094 449.792 265.113 449.63 Q266.131 449.444 267.15 449.444 Q272.937 449.444 276.316 452.616 Q279.696 455.787 279.696 461.204 Q279.696 466.782 276.224 469.884 Q272.752 472.963 266.432 472.963 Q264.256 472.963 261.988 472.592 Q259.742 472.222 257.335 471.481 L257.335 466.782 Q259.418 467.917 261.641 468.472 Q263.863 469.028 266.34 469.028 Q270.344 469.028 272.682 466.921 Q275.02 464.815 275.02 461.204 Q275.02 457.592 272.682 455.486 Q270.344 453.38 266.34 453.38 Q264.465 453.38 262.59 453.796 Q260.738 454.213 258.793 455.093 L258.793 437.731 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 440.81 Q295.298 440.81 293.469 444.375 Q291.664 447.917 291.664 455.046 Q291.664 462.153 293.469 465.717 Q295.298 469.259 298.909 469.259 Q302.543 469.259 304.349 465.717 Q306.177 462.153 306.177 455.046 Q306.177 447.917 304.349 444.375 Q302.543 440.81 298.909 440.81 M298.909 437.106 Q304.719 437.106 307.775 441.713 Q310.853 446.296 310.853 455.046 Q310.853 463.773 307.775 468.379 Q304.719 472.963 298.909 472.963 Q293.099 472.963 290.02 468.379 Q286.964 463.773 286.964 455.046 Q286.964 446.296 290.02 441.713 Q293.099 437.106 298.909 437.106 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M269.326 313.197 Q266.178 313.197 264.326 315.35 Q262.497 317.503 262.497 321.253 Q262.497 324.979 264.326 327.155 Q266.178 329.308 269.326 329.308 Q272.474 329.308 274.303 327.155 Q276.154 324.979 276.154 321.253 Q276.154 317.503 274.303 315.35 Q272.474 313.197 269.326 313.197 M278.608 298.544 L278.608 302.804 Q276.849 301.97 275.043 301.53 Q273.261 301.091 271.502 301.091 Q266.872 301.091 264.418 304.216 Q261.988 307.341 261.641 313.66 Q263.006 311.646 265.066 310.581 Q267.127 309.493 269.603 309.493 Q274.812 309.493 277.821 312.665 Q280.853 315.813 280.853 321.253 Q280.853 326.577 277.705 329.794 Q274.557 333.012 269.326 333.012 Q263.33 333.012 260.159 328.428 Q256.988 323.822 256.988 315.095 Q256.988 306.901 260.877 302.04 Q264.766 297.155 271.316 297.155 Q273.076 297.155 274.858 297.503 Q276.664 297.85 278.608 298.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 300.859 Q295.298 300.859 293.469 304.424 Q291.664 307.966 291.664 315.095 Q291.664 322.202 293.469 325.766 Q295.298 329.308 298.909 329.308 Q302.543 329.308 304.349 325.766 Q306.177 322.202 306.177 315.095 Q306.177 307.966 304.349 304.424 Q302.543 300.859 298.909 300.859 M298.909 297.155 Q304.719 297.155 307.775 301.762 Q310.853 306.345 310.853 315.095 Q310.853 323.822 307.775 328.428 Q304.719 333.012 298.909 333.012 Q293.099 333.012 290.02 328.428 Q286.964 323.822 286.964 315.095 Q286.964 306.345 290.02 301.762 Q293.099 297.155 298.909 297.155 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip372)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1051.65 400.199,956.911 400.786,869.988 401.372,790.351 401.958,717.517 402.545,651.036 403.131,590.493 403.718,535.5 404.304,485.698 404.891,440.75 405.477,400.343 406.063,364.183 406.65,331.995 407.236,303.52 407.823,278.518 408.409,256.759 408.995,238.03 409.582,276.266 410.168,261.065 410.755,248.407 411.341,238.12 411.927,230.04 412.514,224.014 413.1,219.895 413.687,283.13 414.273,280.382 414.86,306.546 415.446,331.55 416.032,331.709 416.619,355.938 417.205,378.796 417.792,401.372 418.378,423.676 418.964,445.662 419.551,452.603 420.137,473.719 420.724,481.545 421.31,489.646 421.896,510.543 422.483,519.808 423.069,530.239 423.656,540.739 424.242,551.073 424.829,561.953 425.415,581.686 426.001,591.76 426.588,625.673 427.174,642.033 427.761,650.688 428.347,666.863 428.933,675.788 429.52,691.107 430.106,705.75 430.693,730.613 431.279,743.977 431.865,756.949 432.452,763.812 433.038,775.876 433.625,788.835 434.211,809.934 434.798,817.559 435.384,832.896 435.97,843.971 436.557,850.615 437.143,857.834 437.73,871.4 438.316,881.213 438.902,894.203 439.489,906.812 440.075,922.166 440.662,936.835 441.248,944.708 441.835,949.734 442.421,957.449 443.007,962.283 443.594,966.947 444.18,977.123 444.767,986.956 445.353,1003.46 445.939,1012.27 446.526,1018.41 447.112,1021.98 447.699,1034.59 448.285,1040.1 448.871,1049.87 449.458,1057 450.044,1061.81 450.631,1067.07 451.217,1067.79 451.804,1074.87 452.39,1081.55 452.976,1089.95 453.563,1094.33 454.149,1102.47 454.736,1110.1 455.322,1112.23 455.908,1114.25 456.495,1119.88 457.081,1121.93 457.668,1128.88 458.254,1130.81 458.84,1136 459.427,1139.12 460.013,1139.03 460.6,1143.8 461.186,1145.44 461.773,1148.49 462.359,1151.4 462.945,1152.95 463.532,1152.85 464.118,1153.18 464.705,1154.84 465.291,1157.9 465.877,1159.69 466.464,1161.22 467.05,1164.4 467.637,1165.97 468.223,1171.96 468.809,1173.24 469.396,1178.95 469.982,1179.94 470.569,1179.8 471.155,1185.13 471.742,1188.62 472.328,1190.6 472.914,1192.7 473.501,1191.95 474.087,1195.39 474.674,1193.48 475.26,1193.2 475.846,1192.86 476.433,1194.12 477.019,1200.84 477.606,1201.77 478.192,1205.1 478.778,1207.43 479.365,1209.4 479.951,1211.48 480.538,1211.88 481.124,1213.71 481.711,1214.32 482.297,1214.75 482.883,1215.38 483.47,1215.86 484.056,1216.55 484.643,1218.37 485.229,1222.81 485.815,1224.21 486.402,1226.76 486.988,1227.03 487.575,1229.52 488.161,1229.51 488.748,1230.8 489.334,1231.82 489.92,1231.72 490.507,1232.99 491.093,1235.31 491.68,1238.42 492.266,1242.83 492.852,1244.39 493.439,1244.92 494.025,1245.4 494.612,1246 495.198,1246.19 495.784,1247.54 496.371,1247.66 496.957,1247.92 497.544,1248.1 498.13,1250.53 498.717,1249.48 499.303,1248.28 499.889,1247.56 500.476,1247.9 501.062,1244.66 501.649,1243.91 502.235,1245.5 502.821,1243.59 503.408,1241.81 503.994,1241.25 504.581,1244.3 505.167,1247.2 505.753,1249.79 506.34,1247.38 506.926,1245.34 507.513,1248.31 508.099,1247.68 508.686,1248.12 509.272,1247.21 509.858,1244.32 510.445,1245.85 511.031,1245.09 511.618,1244.49 512.204,1243.72 512.79,1242.94 513.377,1243.52 513.963,1243.15 514.55,1242.85 515.136,1242.42 515.722,1240.53 516.309,1241.38 516.895,1241.99 517.482,1242.58 518.068,1244.47 518.655,1243.79 519.241,1244.16 519.827,1244.59 520.414,1242.5 521,1242.91 521.587,1242.16 522.173,1243.61 522.759,1244.02 523.346,1243.31 523.932,1243.83 524.519,1243.17 525.105,1243.49 525.691,1241.62 526.278,1240.87 526.864,1245.05 527.451,1244.05 528.037,1245.66 528.624,1247.17 529.21,1247.6 529.796,1246.41 530.383,1244.37 530.969,1243.34 531.556,1242.4 532.142,1240.6 532.728,1240.16 533.315,1240.98 533.901,1240.25 534.488,1239.62 535.074,1239.08 535.661,1239.33 536.247,1241.01 536.833,1239.15 537.42,1239.7 538.006,1240.55 538.593,1240.99 539.179,1239.32 539.765,1239.9 540.352,1240.49 540.938,1241.06 541.525,1241.4 542.111,1240.8 542.697,1240.08 543.284,1240.65 543.87,1240.15 544.457,1237.28 545.043,1237.98 545.63,1238.7 546.216,1238.13 546.802,1238.58 547.389,1239.42 547.975,1241.05 548.562,1240.66 549.148,1240.03 549.734,1241.54 550.321,1239.65 550.907,1238.82 551.494,1240.17 552.08,1237.24 552.666,1236.75 553.253,1236.23 553.839,1233.51 554.426,1231.91 555.012,1231.45 555.599,1231.31 556.185,1230.17 556.771,1229.08 557.358,1229.07 557.944,1228.92 558.531,1228.89 559.117,1228.83 559.703,1228.8 560.29,1227.32 560.876,1228.39 561.463,1224.74 562.049,1224.66 562.635,1223.49 563.222,1224.6 563.808,1224.77 564.395,1225.96 564.981,1225.98 565.568,1228.33 566.154,1228.11 566.74,1226.79 567.327,1226.69 567.913,1226.64 568.5,1226.63 569.086,1229.09 569.672,1228.74 570.259,1228.55 570.845,1230.72 571.432,1231.56 572.018,1232.19 572.605,1234.27 573.191,1234.64 573.777,1235.22 574.364,1236.86 574.95,1236.24 575.537,1237.72 576.123,1236.85 576.709,1239.75 577.296,1236.66 577.882,1237.4 578.469,1235.76 579.055,1230.6 579.641,1229.18 580.228,1226.33 580.814,1228.35 581.401,1226.97 581.987,1227.86 582.574,1228.53 583.16,1228.3 583.746,1229.09 584.333,1227.59 584.919,1227.41 585.506,1225.85 586.092,1226.74 586.678,1227.6 587.265,1227.36 587.851,1229.33 588.438,1226.65 589.024,1227.47 589.61,1227.19 590.197,1227 590.783,1225.71 591.37,1222.91 591.956,1220.4 592.543,1220.49 593.129,1219.3 593.715,1219.49 594.302,1219.86 594.888,1223.53 595.475,1223.47 596.061,1224.33 596.647,1223.36 597.234,1224.42 597.82,1225.48 598.407,1225.26 598.993,1224.88 599.579,1224.78 600.166,1224.73 600.752,1224.52 601.339,1224.35 601.925,1223.26 602.512,1225.23 603.098,1226.41 603.684,1228.52 604.271,1228.21 604.857,1229.05 605.444,1230.97 606.03,1231.61 606.616,1232.47 607.203,1231.93 607.789,1233.63 608.376,1231.95 608.962,1231.42 609.548,1230.88 610.135,1234.92 610.721,1234.15 611.308,1231.26 611.894,1230.78 612.481,1230.09 613.067,1230.55 613.653,1231.36 614.24,1232.06 614.826,1231.56 615.413,1230.04 615.999,1230.63 616.585,1229.99 617.172,1229.42 617.758,1230.2 618.345,1230.78 618.931,1231.6 619.518,1234.48 620.104,1232.59 620.69,1231.86 621.277,1227.64 621.863,1227.19 622.45,1224.56 623.036,1226.38 623.622,1225.03 624.209,1223.53 624.795,1221.19 625.382,1221.22 625.968,1220.02 626.554,1219.76 627.141,1219.82 627.727,1218.73 628.314,1220.02 628.9,1221.24 629.487,1221.24 630.073,1222.55 630.659,1223.78 631.246,1225.77 631.832,1228.98 632.419,1229.58 633.005,1230.35 633.591,1229.69 634.178,1230.14 634.764,1229.64 635.351,1226.55 635.937,1227.44 636.523,1228.18 637.11,1227.78 637.696,1228.54 638.283,1226.71 638.869,1227.42 639.456,1227.97 640.042,1228.7 640.628,1227.06 641.215,1227.76 641.801,1227.37 642.388,1227.02 642.974,1228.62 643.56,1227.08 644.147,1227.96 644.733,1226.25 645.32,1225.91 645.906,1227.9 646.492,1226.14 647.079,1224.49 647.665,1225.24 648.252,1226.07 648.838,1222.35 649.425,1219.47 650.011,1219.29 650.597,1220.57 651.184,1220.69 651.77,1222.77 652.357,1223.72 652.943,1224.48 653.529,1220.68 654.116,1220.37 654.702,1218.93 655.289,1221.21 655.875,1222.15 656.462,1221.77 657.048,1220.34 657.634,1220.29 658.221,1222.43 658.807,1223.34 659.394,1221.75 659.98,1220.39 660.566,1222.48 661.153,1223.42 661.739,1224.1 662.326,1222.4 662.912,1223.1 663.498,1222.78 664.085,1219.1 664.671,1220.16 665.258,1221.09 665.844,1223.32 666.431,1224.08 667.017,1223.83 667.603,1222.6 668.19,1224.73 668.776,1224.22 669.363,1223.64 669.949,1225.49 670.535,1224.14 671.122,1223.76 671.708,1224.52 672.295,1224.13 672.881,1224.99 673.467,1223.35 674.054,1221.79 674.64,1223.54 675.227,1224.14 675.813,1221.53 676.4,1220 676.986,1217.82 677.572,1220.15 678.159,1219.9 678.745,1220.86 679.332,1221.75 679.918,1224.07 680.504,1224.87 681.091,1224.76 681.677,1223.3 682.264,1223.02 682.85,1221.72 683.436,1221.53 684.023,1219.09 684.609,1218.13 685.196,1217.8 685.782,1220.3 686.369,1220.22 686.955,1219.91 687.541,1220.81 688.128,1218.26 688.714,1218.14 689.301,1219.36 689.887,1219.02 690.473,1218.73 691.06,1217.54 691.646,1218.72 692.233,1217.48 692.819,1217.45 693.405,1217.26 693.992,1217.13 694.578,1215.96 695.165,1215.93 695.751,1214.85 696.338,1213.74 696.924,1211.51 697.51,1210.47 698.097,1210.76 698.683,1210.92 699.27,1210.09 699.856,1209.43 700.442,1209.59 701.029,1210.95 701.615,1213.48 702.202,1213.54 702.788,1214.87 703.375,1214.72 703.961,1215.82 704.547,1217.17 705.134,1217.29 705.72,1214.93 706.307,1215.05 706.893,1215.06 707.479,1216.26 708.066,1217.51 708.652,1220.65 709.239,1218 709.825,1213.37 710.411,1212.42 710.998,1213.73 711.584,1214.95 712.171,1217.05 712.757,1218.27 713.344,1218.51 713.93,1219.42 714.516,1219.28 715.103,1217.94 715.689,1218.88 716.276,1218.62 716.862,1220.78 717.448,1220.32 718.035,1219.95 718.621,1220.85 719.208,1221.7 719.794,1218.06 720.38,1219.39 720.967,1219.01 721.553,1216.69 722.14,1214.24 722.726,1215.38 723.313,1215.51 723.899,1213.02 724.485,1212.16 725.072,1212.24 725.658,1212.49 726.245,1212.41 726.831,1210.26 727.417,1210.61 728.004,1210.96 728.59,1211.32 729.177,1213.69 729.763,1215 730.349,1216.15 730.936,1216.04 731.522,1215.87 732.109,1217.17 732.695,1218.23 733.282,1219.11 733.868,1216.82 734.454,1216.48 735.041,1215.34 735.627,1215.41 736.214,1211.93 736.8,1210.88 737.386,1213.69 737.973,1214.93 738.559,1217.42 739.146,1217.45 739.732,1216.16 740.318,1216.19 740.905,1215.91 741.491,1215.95 742.078,1216.84 742.664,1218.73 743.251,1217.43 743.837,1217.28 744.423,1217.03 745.01,1214.42 745.596,1214.3 746.183,1213.08 746.769,1212.94 747.355,1211.96 747.942,1212.22 748.528,1212.4 749.115,1212.75 749.701,1212.9 750.288,1212.94 750.874,1212.91 751.46,1214.22 752.047,1215.33 752.633,1212.8 753.22,1214.17 753.806,1215.31 754.392,1215.17 754.979,1215.21 755.565,1214.14 756.152,1214.06 756.738,1215.17 757.324,1212.88 757.911,1211.91 758.497,1213.16 759.084,1210.73 759.67,1210.96 760.257,1209.96 760.843,1211.46 761.429,1212.88 762.016,1212.95 762.602,1215.3 763.189,1212.04 763.775,1211.2 764.361,1213.91 764.948,1216.24 765.534,1217.43 766.121,1218.52 766.707,1219.43 767.293,1218.02 767.88,1217.89 768.466,1218.77 769.053,1219.85 769.639,1219.58 770.226,1221.59 770.812,1222.33 771.398,1222.13 771.985,1222.82 772.571,1222.28 773.158,1221.82 773.744,1220.52 774.33,1220.15 774.917,1218.84 775.503,1219.63 776.09,1218.21 776.676,1221.35 777.262,1223.44 777.849,1223.08 778.435,1221.62 779.022,1221.21 779.608,1221.97 780.195,1220.37 780.781,1218.92 781.367,1218.65 781.954,1217.15 782.54,1215.69 783.127,1213.27 783.713,1213.23 784.299,1214.5 784.886,1213.5 785.472,1212.43 786.059,1213.47 786.645,1214.88 787.232,1217.12 787.818,1215.66 788.404,1216.74 788.991,1219.16 789.577,1218.84 790.164,1217.72 790.75,1215.02 791.336,1216.22 791.923,1215.94 792.509,1217.1 793.096,1216.99 793.682,1216.83 794.268,1216.63 794.855,1218.83 795.441,1217.52 796.028,1219.78 796.614,1219.65 797.201,1219.29 797.787,1218.97 798.373,1218.86 798.96,1217.48 799.546,1211.37 800.133,1210.12 800.719,1210.11 801.305,1207.9 801.892,1206.94 802.478,1207.17 803.065,1202.8 803.651,1204.33 804.237,1205.91 804.824,1206.35 805.41,1209.08 805.997,1210.73 806.583,1211 807.17,1212.56 807.756,1213.93 808.342,1215.16 808.929,1214.21 809.515,1215.44 810.102,1215.44 810.688,1214.24 811.274,1212.93 811.861,1209.67 812.447,1208.54 813.034,1211.05 813.62,1211.06 814.206,1211.32 814.793,1211.3 815.379,1211.38 815.966,1211.64 816.552,1212.91 817.139,1212.91 817.725,1211.9 818.311,1210.81 818.898,1212.1 819.484,1215.51 820.071,1215.55 820.657,1216.53 821.243,1215.44 821.83,1215.49 822.416,1214.05 823.003,1213.91 823.589,1214.99 824.175,1213.75 824.762,1213.52 825.348,1213.43 825.935,1213.28 826.521,1213.29 827.108,1213.05 827.694,1212.67 828.28,1212.91 828.867,1214.07 829.453,1215.14 830.04,1215.07 830.626,1217.29 831.212,1216.16 831.799,1218.28 832.385,1216.73 832.972,1214.43 833.558,1214.58 834.145,1215.85 834.731,1214.54 835.317,1214.41 835.904,1214.44 836.49,1214.35 837.077,1215.15 837.663,1216.4 838.249,1216.34 838.836,1218.59 839.422,1218.32 840.009,1217.04 840.595,1216.79 841.181,1213.44 841.768,1212.15 842.354,1213.36 842.941,1213.38 843.527,1212.44 844.114,1214.9 844.7,1216.74 845.286,1214.42 845.873,1213.39 846.459,1212.2 847.046,1213.33 847.632,1214.17 848.218,1211.85 848.805,1213.02 849.391,1213.13 849.978,1214.54 850.564,1213.39 851.15,1215.68 851.737,1214.45 852.323,1214.53 852.91,1217.99 853.496,1216.81 854.083,1218.97 854.669,1217.41 855.255,1217.46 855.842,1216.26 856.428,1218.31 857.015,1217.06 857.601,1216.55 858.187,1214.18 858.774,1213.1 859.36,1213.02 859.947,1212.89 860.533,1215.09 861.119,1213.62 861.706,1214.64 862.292,1216.84 862.879,1215.32 863.465,1215.38 864.052,1213.13 864.638,1211.82 865.224,1210.9 865.811,1211.07 866.397,1214.63 866.984,1215.83 867.57,1217.64 868.156,1218.39 868.743,1218 869.329,1215.68 869.916,1215.79 870.502,1216.74 871.089,1215.68 871.675,1216.47 872.261,1219.51 872.848,1220.26 873.434,1220.8 874.021,1220.2 874.607,1220.94 875.193,1219.1 875.78,1217.63 876.366,1215.18 876.953,1213.96 877.539,1216 878.125,1214.72 878.712,1214.51 879.298,1214.42 879.885,1212.9 880.471,1211.59 881.058,1210.45 881.644,1211.63 882.23,1210.7 882.817,1207.11 883.403,1205.9 883.99,1205.2 884.576,1205.45 885.162,1206.05 885.749,1204.23 886.335,1203.62 886.922,1204.16 887.508,1204.71 888.094,1206.2 888.681,1207.55 889.267,1207.85 889.854,1207 890.44,1207.08 891.027,1205.11 891.613,1205.47 892.199,1204.44 892.786,1206.03 893.372,1206.34 893.959,1206.78 894.545,1207.96 895.131,1207.04 895.718,1206.3 896.304,1206.63 896.891,1208.16 897.477,1208.7 898.063,1206.89 898.65,1206.05 899.236,1205.41 899.823,1206.7 900.409,1205.89 900.996,1205.16 901.582,1205.63 902.168,1207.37 902.755,1208.82 903.341,1210.35 903.928,1210.69 904.514,1207.24 905.1,1207.68 905.687,1209.08 906.273,1212.78 906.86,1211.59 907.446,1210.5 908.032,1207.07 908.619,1210.67 909.205,1213.02 909.792,1212.88 910.378,1214.02 910.965,1215.28 911.551,1216.4 912.137,1215 912.724,1214.69 913.31,1214.8 913.897,1214.66 914.483,1216.85 915.069,1217.93 915.656,1217.72 916.242,1217.59 916.829,1218.38 917.415,1216.45 918.002,1215.01 918.588,1215.96 919.174,1214.78 919.761,1213.63 920.347,1214.68 920.934,1216.9 921.52,1217.68 922.106,1218.29 922.693,1217.02 923.279,1218.12 923.866,1220.31 924.452,1218.75 925.038,1218.41 925.625,1218.12 926.211,1215.49 926.798,1215.17 927.384,1214.96 927.971,1212.31 928.557,1213.28 929.143,1213.2 929.73,1216.43 930.316,1216.48 930.903,1218.19 931.489,1215.39 932.075,1216.2 932.662,1215.92 933.248,1216.87 933.835,1216.13 934.421,1217.1 935.007,1217.87 935.594,1215.19 936.18,1214.05 936.767,1215.16 937.353,1211.35 937.94,1211.43 938.526,1213.81 939.112,1216.18 939.699,1216 940.285,1214.61 940.872,1215.81 941.458,1214.52 942.044,1214.38 942.631,1210.97 943.217,1210.97 943.804,1211.14 944.39,1208.97 944.976,1208.03 945.563,1209.49 946.149,1209.61 946.736,1210.94 947.322,1208.58 947.909,1206.45 948.495,1205.37 949.081,1204.84 949.668,1206.45 950.254,1210.04 950.841,1211.02 951.427,1208.67 952.013,1208.99 952.6,1212.79 953.186,1212.63 953.773,1212.56 954.359,1212.45 954.945,1212.39 955.532,1215.95 956.118,1218.08 956.705,1219.25 957.291,1218.82 957.878,1216.09 958.464,1217.06 959.05,1217.76 959.637,1216.12 960.223,1214.69 960.81,1212.12 961.396,1218.04 961.982,1217.86 962.569,1215.6 963.155,1212.04 963.742,1212.29 964.328,1209.86 964.915,1209.85 965.501,1210.16 966.087,1209.13 966.674,1210.53 967.26,1210.26 967.847,1209.26 968.433,1209.35 969.019,1210.54 969.606,1209.71 970.192,1208.64 970.779,1207.58 971.365,1207.94 971.951,1205.97 972.538,1207.52 973.124,1207.87 973.711,1211.7 974.297,1212.96 974.884,1211.79 975.47,1209.35 976.056,1209.32 976.643,1208.48 977.229,1207.48 977.816,1208.84 978.402,1210.15 978.988,1211.53 979.575,1212.64 980.161,1212.64 980.748,1211.21 981.334,1214.55 981.92,1214.54 982.507,1213.28 983.093,1212.12 983.68,1211.15 984.266,1210.43 984.853,1210.63 985.439,1212.89 986.025,1211.64 986.612,1216.07 987.198,1215.91 987.785,1214.55 988.371,1215.55 988.957,1210.97 989.544,1209.81 990.13,1210.94 990.717,1209.74 991.303,1209.08 991.889,1210.35 992.476,1211.67 993.062,1209.38 993.649,1209.63 994.235,1208.63 994.822,1207.67 995.408,1209.96 995.994,1211.44 996.581,1213.67 997.167,1212.05 997.754,1213.15 998.34,1214.14 998.926,1215.19 999.513,1215.15 1000.1,1213.87 1000.69,1213.68 1001.27,1214.89 1001.86,1215.81 1002.44,1215.67 1003.03,1215.54 1003.62,1215.3 1004.2,1215.99 1004.79,1214.64 1005.38,1216.9 1005.96,1216.65 1006.55,1214.28 1007.14,1214.04 1007.72,1218.29 1008.31,1218.92 1008.9,1221 1009.48,1220.63 1010.07,1221.13 1010.65,1218.57 1011.24,1217.23 1011.83,1217.97 1012.41,1218.54 1013,1217.21 1013.59,1215.84 1014.17,1211.2 1014.76,1211.07 1015.35,1210.07 1015.93,1210.13 1016.52,1209.09 1017.11,1210.7 1017.69,1209.53 1018.28,1209.72 1018.86,1211.01 1019.45,1208.75 1020.04,1207.62 1020.62,1206.79 1021.21,1207.99 1021.8,1208.28 1022.38,1202.82 1022.97,1202.43 1023.56,1199.46 1024.14,1198.88 1024.73,1201.74 1025.32,1200.9 1025.9,1201.57 1026.49,1202.11 1027.07,1200.47 1027.66,1200.99 1028.25,1201.46 1028.83,1201.98 1029.42,1203.78 1030.01,1205.49 1030.59,1205.87 1031.18,1207.34 1031.77,1207.49 1032.35,1207.61 1032.94,1207.72 1033.52,1207.89 1034.11,1208.12 1034.7,1207.24 1035.28,1209.85 1035.87,1209.97 1036.46,1210.17 1037.04,1209.19 1037.63,1210.5 1038.22,1212.79 1038.8,1212.47 1039.39,1210.31 1039.98,1210.33 1040.56,1209.44 1041.15,1209.63 1041.73,1208.28 1042.32,1207.46 1042.91,1205.47 1043.49,1203.48 1044.08,1207.25 1044.67,1206.22 1045.25,1208.66 1045.84,1208.54 1046.43,1209.71 1047.01,1210.8 1047.6,1210.74 1048.19,1210.71 1048.77,1210.83 1049.36,1211.01 1049.94,1212.08 1050.53,1211.93 1051.12,1211.94 1051.7,1214.18 1052.29,1215.33 1052.88,1215.29 1053.46,1215.18 1054.05,1214.99 1054.64,1217.02 1055.22,1214.43 1055.81,1215.45 1056.39,1213.98 1056.98,1213.82 1057.57,1214.78 1058.15,1212.35 1058.74,1214.65 1059.33,1213.35 1059.91,1213.34 1060.5,1216.57 1061.09,1217.35 1061.67,1217.86 1062.26,1218.49 1062.85,1219.17 1063.43,1219.8 1064.02,1218.26 1064.6,1217.49 1065.19,1218.19 1065.78,1216.71 1066.36,1214.14 1066.95,1215.3 1067.54,1215.11 1068.12,1213.77 1068.71,1212.6 1069.3,1212.52 1069.88,1211.38 1070.47,1210.14 1071.06,1208.06 1071.64,1210.46 1072.23,1212.77 1072.81,1213.92 1073.4,1217.44 1073.99,1217.15 1074.57,1216.85 1075.16,1216.56 1075.75,1217.39 1076.33,1217.16 1076.92,1219.09 1077.51,1221.04 1078.09,1221.6 1078.68,1216.54 1079.26,1215.06 1079.85,1215.12 1080.44,1213.78 1081.02,1213.63 1081.61,1213.33 1082.2,1212.12 1082.78,1213.17 1083.37,1213.14 1083.96,1209.45 1084.54,1209.63 1085.13,1209.5 1085.72,1206.05 1086.3,1205.19 1086.89,1205.59 1087.47,1206.99 1088.06,1208.21 1088.65,1206.36 1089.23,1205.7 1089.82,1204.79 1090.41,1205.22 1090.99,1207.84 1091.58,1208.1 1092.17,1209.33 1092.75,1210.8 1093.34,1210.98 1093.93,1210.89 1094.51,1212.17 1095.1,1210.79 1095.68,1210.91 1096.27,1209.88 1096.86,1210.96 1097.44,1211.01 1098.03,1210.87 1098.62,1211.93 1099.2,1210.59 1099.79,1211.54 1100.38,1209.55 1100.96,1209.79 1101.55,1208.8 1102.14,1207.63 1102.72,1210.01 1103.31,1210.16 1103.89,1211.43 1104.48,1211.58 1105.07,1212.49 1105.65,1212.37 1106.24,1212.47 1106.83,1213.78 1107.41,1214.9 1108,1215 1108.59,1213.44 1109.17,1214.41 1109.76,1214.19 1110.34,1218.14 1110.93,1217.81 1111.52,1217.43 1112.1,1214.73 1112.69,1213.39 1113.28,1215.42 1113.86,1217.65 1114.45,1217.17 1115.04,1216.69 1115.62,1216.2 1116.21,1216.96 1116.8,1215.63 1117.38,1216.5 1117.97,1214.99 1118.55,1212.6 1119.14,1212.26 1119.73,1213.24 1120.31,1213.05 1120.9,1211.74 1121.49,1213.01 1122.07,1211.95 1122.66,1212.17 1123.25,1212.05 1123.83,1211.94 1124.42,1212.78 1125.01,1212.66 1125.59,1209.12 1126.18,1210.12 1126.76,1208.91 1127.35,1207.8 1127.94,1205.75 1128.52,1208.06 1129.11,1205.96 1129.7,1206.16 1130.28,1204.14 1130.87,1204.54 1131.46,1204.92 1132.04,1206.18 1132.63,1207.6 1133.21,1206.33 1133.8,1206.41 1134.39,1208.8 1134.97,1210.1 1135.56,1207.91 1136.15,1206.98 1136.73,1207.28 1137.32,1208.53 1137.91,1206.28 1138.49,1208.67 1139.08,1212.13 1139.67,1214.41 1140.25,1214.4 1140.84,1212.14 1141.42,1215.51 1142.01,1215.49 1142.6,1214.19 1143.18,1216.42 1143.77,1215.99 1144.36,1213.56 1144.94,1214.73 1145.53,1217.94 1146.12,1215.17 1146.7,1214.99 1147.29,1214.76 1147.88,1214.58 1148.46,1214.52 1149.05,1213.11 1149.63,1212.09 1150.22,1212 1150.81,1211.76 1151.39,1210.74 1151.98,1212.73 1152.57,1212.66 1153.15,1212.69 1153.74,1214.72 1154.33,1214.62 1154.91,1212.41 1155.5,1214.68 1156.09,1214.59 1156.67,1215.75 1157.26,1212.15 1157.84,1211.82 1158.43,1214.28 1159.02,1213.08 1159.6,1214.06 1160.19,1212.92 1160.78,1213.67 1161.36,1213.41 1161.95,1213.31 1162.54,1213.4 1163.12,1214.65 1163.71,1214.54 1164.29,1215.73 1164.88,1215.43 1165.47,1214.78 1166.05,1214.59 1166.64,1214.47 1167.23,1215.62 1167.81,1216.64 1168.4,1215.48 1168.99,1212.7 1169.57,1211.14 1170.16,1210.12 1170.75,1210.08 1171.33,1210.02 1171.92,1209.16 1172.5,1207.98 1173.09,1209.33 1173.68,1208.24 1174.26,1207.34 1174.85,1206.36 1175.44,1208.87 1176.02,1208.98 1176.61,1209.22 1177.2,1208.02 1177.78,1207.99 1178.37,1209.32 1178.96,1208.13 1179.54,1210.7 1180.13,1209.92 1180.71,1209.85 1181.3,1209.74 1181.89,1215.63 1182.47,1215.41 1183.06,1216.34 1183.65,1214.85 1184.23,1212.57 1184.82,1212.55 1185.41,1211.12 1185.99,1212.09 1186.58,1215.43 1187.16,1215.24 1187.75,1213.98 1188.34,1210.33 1188.92,1211.57 1189.51,1210.42 1190.1,1209.33 1190.68,1208.09 1191.27,1208.31 1191.86,1208.57 1192.44,1205.41 1193.03,1205.62 1193.62,1205.82 1194.2,1204.97 1194.79,1204.02 1195.37,1203.13 1195.96,1201.2 1196.55,1201.81 1197.13,1202.06 1197.72,1202.65 1198.31,1205.67 1198.89,1208.34 1199.48,1209.84 1200.07,1211.03 1200.65,1208.71 1201.24,1206.74 1201.83,1209.07 1202.41,1210.21 1203,1209.21 1203.58,1208.65 1204.17,1207.6 1204.76,1208.85 1205.34,1209.3 1205.93,1211.5 1206.52,1212.72 1207.1,1211.52 1207.69,1210.36 1208.28,1211.62 1208.86,1210.37 1209.45,1212.56 1210.03,1212.74 1210.62,1212.37 1211.21,1215.7 1211.79,1213.28 1212.38,1212.98 1212.97,1212.85 1213.55,1211.45 1214.14,1212.4 1214.73,1212.33 1215.31,1213.51 1215.9,1210.97 1216.49,1209.48 1217.07,1208.42 1217.66,1207.65 1218.24,1209.03 1218.83,1211.2 1219.42,1211.1 1220,1212.4 1220.59,1215.06 1221.18,1212.57 1221.76,1211.71 1222.35,1212.97 1222.94,1210.95 1223.52,1212.07 1224.11,1212.14 1224.7,1213.3 1225.28,1214.21 1225.87,1213.96 1226.45,1213.75 1227.04,1212.42 1227.63,1212.39 1228.21,1210.23 1228.8,1210.48 1229.39,1210.71 1229.97,1213.13 1230.56,1213.17 1231.15,1210.73 1231.73,1210.67 1232.32,1210.64 1232.91,1208.33 1233.49,1208.37 1234.08,1209.61 1234.66,1210.81 1235.25,1210.66 1235.84,1210.77 1236.42,1211.8 1237.01,1215.08 1237.6,1213.12 1238.18,1213.2 1238.77,1213.19 1239.36,1210.77 1239.94,1208.51 1240.53,1208.8 1241.11,1210.03 1241.7,1210.24 1242.29,1209.24 1242.87,1209.41 1243.46,1211.93 1244.05,1211.8 1244.63,1211.76 1245.22,1212.99 1245.81,1211.76 1246.39,1211.63 1246.98,1212.76 1247.57,1214.97 1248.15,1213.63 1248.74,1214.61 1249.32,1216.69 1249.91,1217.69 1250.5,1217.3 1251.08,1214.82 1251.67,1213.55 1252.26,1211.29 1252.84,1210.13 1253.43,1210.19 1254.02,1208.92 1254.6,1207.93 1255.19,1206.83 1255.78,1208.29 1256.36,1207.22 1256.95,1208.5 1257.53,1211.9 1258.12,1211.99 1258.71,1211.9 1259.29,1210.75 1259.88,1210.95 1260.47,1212 1261.05,1214.16 1261.64,1213.04 1262.23,1215.22 1262.81,1213.96 1263.4,1213.84 1263.98,1213.83 1264.57,1215.05 1265.16,1214.62 1265.74,1211.07 1266.33,1212.34 1266.92,1213.55 1267.5,1215.52 1268.09,1214.34 1268.68,1215.06 1269.26,1214.9 1269.85,1214.54 1270.44,1213.45 1271.02,1214.55 1271.61,1214.34 1272.19,1215.11 1272.78,1213.75 1273.37,1212.43 1273.95,1208.86 1274.54,1209.94 1275.13,1209.96 1275.71,1206.5 1276.3,1206.75 1276.89,1207.01 1277.47,1207.21 1278.06,1206.38 1278.65,1206.87 1279.23,1203.58 1279.82,1205.27 1280.4,1206.54 1280.99,1207.72 1281.58,1205.45 1282.16,1204.57 1282.75,1203 1283.34,1203.69 1283.92,1201.64 1284.51,1203.44 1285.1,1202.77 1285.68,1203 1286.27,1204.84 1286.86,1207.37 1287.44,1205.22 1288.03,1205.67 1288.61,1207.08 1289.2,1207.4 1289.79,1210.07 1290.37,1208.73 1290.96,1207.8 1291.55,1205.58 1292.13,1206.09 1292.72,1205.27 1293.31,1207.89 1293.89,1206.88 1294.48,1207.08 1295.06,1208.76 1295.65,1209.93 1296.24,1211.14 1296.82,1211.12 1297.41,1211.37 1298,1211.23 1298.58,1212.45 1299.17,1213.79 1299.76,1212.57 1300.34,1210.14 1300.93,1209.14 1301.52,1207.11 1302.1,1208.57 1302.69,1207.47 1303.27,1210.77 1303.86,1210.83 1304.45,1209.67 1305.03,1213.17 1305.62,1211.86 1306.21,1210.41 1306.79,1209.36 1307.38,1211.79 1307.97,1211.93 1308.55,1212.02 1309.14,1213.17 1309.73,1214.39 1310.31,1217.81 1310.9,1216.42 1311.48,1216.36 1312.07,1216.15 1312.66,1214.6 1313.24,1214.26 1313.83,1210.69 1314.42,1210.66 1315,1209.59 1315.59,1208.62 1316.18,1206.66 1316.76,1205.8 1317.35,1207.21 1317.93,1206.17 1318.52,1206.33 1319.11,1206.49 1319.69,1206.67 1320.28,1206.74 1320.87,1208.1 1321.45,1208.37 1322.04,1208.56 1322.63,1208.86 1323.21,1207.93 1323.8,1206.94 1324.39,1207.12 1324.97,1207.48 1325.56,1206.36 1326.14,1206.64 1326.73,1206.51 1327.32,1209.83 1327.9,1207.77 1328.49,1207.85 1329.08,1209.02 1329.66,1207.95 1330.25,1208.04 1330.84,1209.57 1331.42,1209.79 1332.01,1210.02 1332.6,1211.37 1333.18,1212.58 1333.77,1215.95 1334.35,1215.7 1334.94,1218.78 1335.53,1218.48 1336.11,1218.22 1336.7,1220.05 1337.29,1218.35 1337.87,1214.71 1338.46,1214.62 1339.05,1216.65 1339.63,1216.29 1340.22,1216.06 1340.8,1217.08 1341.39,1214.5 1341.98,1214.52 1342.56,1215.3 1343.15,1216.11 1343.74,1214.68 1344.32,1215.75 1344.91,1218.76 1345.5,1218.43 1346.08,1218.06 1346.67,1216.68 1347.26,1216.27 1347.84,1212.57 1348.43,1213.56 1349.01,1213.54 1349.6,1212.15 1350.19,1213.4 1350.77,1213.05 1351.36,1208.18 1351.95,1206.14 1352.53,1207.51 1353.12,1206.59 1353.71,1203.29 1354.29,1204.85 1354.88,1202.7 1355.47,1203.13 1356.05,1202.44 1356.64,1201.88 1357.22,1201.15 1357.81,1202.91 1358.4,1208.15 1358.98,1208.36 1359.57,1209.49 1360.16,1208.59 1360.74,1209.83 1361.33,1210.19 1361.92,1207.94 1362.5,1209.36 1363.09,1207.39 1363.68,1208.86 1364.26,1210 1364.85,1211.42 1365.43,1213.58 1366.02,1212.18 1366.61,1212.28 1367.19,1211.01 1367.78,1209.8 1368.37,1209.95 1368.95,1208.88 1369.54,1209.9 1370.13,1209.91 1370.71,1210.25 1371.3,1209.17 1371.88,1208.17 1372.47,1209.51 1373.06,1209.4 1373.64,1209.76 1374.23,1212.02 1374.82,1212.08 1375.4,1214.12 1375.99,1213.94 1376.58,1213.74 1377.16,1214.65 1377.75,1214.49 1378.34,1214.25 1378.92,1214.07 1379.51,1212.84 1380.09,1210.77 1380.68,1210.67 1381.27,1209.67 1381.85,1208.72 1382.44,1208.76 1383.03,1212.07 1383.61,1212.03 1384.2,1210.85 1384.79,1213.03 1385.37,1215.09 1385.96,1215.93 1386.55,1216.86 1387.13,1215.34 1387.72,1214.18 1388.3,1212.86 1388.89,1212.7 1389.48,1213.67 1390.06,1212.07 1390.65,1215.43 1391.24,1216.12 1391.82,1213.32 1392.41,1210.81 1393,1207.55 1393.58,1204.52 1394.17,1205.82 1394.75,1205.08 1395.34,1205.34 1395.93,1206.76 1396.51,1206.77 1397.1,1206.9 1397.69,1204.65 1398.27,1205.09 1398.86,1206.4 1399.45,1205.43 1400.03,1206.63 1400.62,1206.77 1401.21,1208 1401.79,1207.96 1402.38,1209.26 1402.96,1205 1403.55,1205.26 1404.14,1206.7 1404.72,1205.77 1405.31,1208.44 1405.9,1208.47 1406.48,1207.35 1407.07,1206.21 1407.66,1207.54 1408.24,1208.08 1408.83,1207.1 1409.42,1207.12 1410,1207.26 1410.59,1207.47 1411.17,1209.82 1411.76,1211.09 1412.35,1211.1 1412.93,1215.72 1413.52,1214.01 1414.11,1216.2 1414.69,1216.95 1415.28,1215.4 1415.87,1215.25 1416.45,1215.04 1417.04,1213.34 1417.63,1213.25 1418.21,1216.64 1418.8,1213.07 1419.38,1212.95 1419.97,1213.91 1420.56,1212.58 1421.14,1212.35 1421.73,1214.63 1422.32,1214.4 1422.9,1212.91 1423.49,1215.02 1424.08,1214.77 1424.66,1214.3 1425.25,1213.14 1425.83,1213.23 1426.42,1216.79 1427.01,1218.8 1427.59,1218.78 1428.18,1217.23 1428.77,1219.18 1429.35,1217.52 1429.94,1218.23 1430.53,1218.92 1431.11,1218.61 1431.7,1220.25 1432.29,1220.98 1432.87,1221.55 1433.46,1217.71 1434.04,1216.28 1434.63,1218.3 1435.22,1219.03 1435.8,1216.22 1436.39,1215.94 1436.98,1215.54 1437.56,1215.47 1438.15,1219.77 1438.74,1218.25 1439.32,1218.86 1439.91,1219.45 1440.5,1218.11 1441.08,1220.01 1441.67,1218.64 1442.25,1214.98 1442.84,1216.65 1443.43,1218.52 1444.01,1217.07 1444.6,1216.86 1445.19,1216.52 1445.77,1217.38 1446.36,1216.03 1446.95,1213.73 1447.53,1213.42 1448.12,1215.64 1448.7,1214.37 1449.29,1213.08 1449.88,1210.76 1450.46,1210.76 1451.05,1210.76 1451.64,1207.52 1452.22,1207.8 1452.81,1209.12 1453.4,1209.16 1453.98,1208.25 1454.57,1207.21 1455.16,1210.01 1455.74,1206.37 1456.33,1207.71 1456.91,1207.99 1457.5,1206.86 1458.09,1208.23 1458.67,1206.11 1459.26,1205.39 1459.85,1205.78 1460.43,1207.12 1461.02,1205.1 1461.61,1203.98 1462.19,1204.56 1462.78,1204.68 1463.37,1204.83 1463.95,1207.65 1464.54,1207.82 1465.12,1207.08 1465.71,1204.93 1466.3,1205.2 1466.88,1204.41 1467.47,1204.84 1468.06,1204.67 1468.64,1204.98 1469.23,1208.74 1469.82,1207.71 1470.4,1208.92 1470.99,1209.16 1471.57,1209.13 1472.16,1210.28 1472.75,1210.13 1473.33,1209.98 1473.92,1206.78 1474.51,1208.1 1475.09,1207.26 1475.68,1207.6 1476.27,1207.87 1476.85,1210.25 1477.44,1210.26 1478.03,1209.36 1478.61,1209.31 1479.2,1209.48 1479.78,1211.71 1480.37,1211.86 1480.96,1216.57 1481.54,1217.2 1482.13,1215.64 1482.72,1215.23 1483.3,1214.25 1483.89,1212.89 1484.48,1213.71 1485.06,1211.42 1485.65,1211.48 1486.24,1213.95 1486.82,1216.15 1487.41,1217.31 1487.99,1214.72 1488.58,1217.98 1489.17,1219.94 1489.75,1220.62 1490.34,1220.16 1490.93,1217.34 1491.51,1218.08 1492.1,1216.32 1492.69,1216.07 1493.27,1217.05 1493.86,1215.41 1494.45,1214.16 1495.03,1212.93 1495.62,1212.79 1496.2,1214.78 1496.79,1214.49 1497.38,1211.04 1497.96,1209.65 1498.55,1206.44 1499.14,1204.4 1499.72,1208.04 1500.31,1209.48 1500.9,1212.11 1501.48,1213.5 1502.07,1213.4 1502.65,1212.05 1503.24,1213.28 1503.83,1213.44 1504.41,1214.47 1505,1214.34 1505.59,1213.02 1506.17,1211.8 1506.76,1210.65 1507.35,1210.73 1507.93,1209.61 1508.52,1209.43 1509.11,1207.24 1509.69,1206.43 1510.28,1206.68 1510.86,1208.19 1511.45,1208.38 1512.04,1207.4 1512.62,1208.55 1513.21,1209.86 1513.8,1211.15 1514.38,1209.2 1514.97,1211.77 1515.56,1213.85 1516.14,1213.59 1516.73,1215.41 1517.32,1213.87 1517.9,1216.06 1518.49,1215.69 1519.07,1214.33 1519.66,1212 1520.25,1211.86 1520.83,1213.03 1521.42,1213.76 1522.01,1213.65 1522.59,1211.81 1523.18,1211.51 1523.77,1210.13 1524.35,1210.21 1524.94,1210.29 1525.52,1211.69 1526.11,1211.54 1526.7,1210.41 1527.28,1209.44 1527.87,1212.08 1528.46,1213.05 1529.04,1211.75 1529.63,1210.6 1530.22,1207.51 1530.8,1207.93 1531.39,1208.12 1531.98,1208.3 1532.56,1210.59 1533.15,1210.71 1533.73,1208.58 1534.32,1208.78 1534.91,1209.96 1535.49,1210.24 1536.08,1209.14 1536.67,1209.37 1537.25,1204.91 1537.84,1204.98 1538.43,1204.26 1539.01,1204.7 1539.6,1203.77 1540.19,1205.48 1540.77,1205.58 1541.36,1205.75 1541.94,1206.09 1542.53,1206.34 1543.12,1208.72 1543.7,1208.98 1544.29,1210.24 1544.88,1209.31 1545.46,1211.62 1546.05,1211.71 1546.64,1210.42 1547.22,1210.1 1547.81,1211.41 1548.4,1209.23 1548.98,1210.56 1549.57,1211.59 1550.15,1211.15 1550.74,1212.11 1551.33,1213.31 1551.91,1213.11 1552.5,1212.03 1553.09,1213 1553.67,1212.79 1554.26,1214.06 1554.85,1216.38 1555.43,1217.45 1556.02,1214.76 1556.6,1215.77 1557.19,1217.86 1557.78,1217.58 1558.36,1216.16 1558.95,1218.16 1559.54,1217.75 1560.12,1216.37 1560.71,1216.06 1561.3,1212.19 1561.88,1211.95 1562.47,1210.73 1563.06,1210.63 1563.64,1211.69 1564.23,1212.96 1564.81,1212.63 1565.4,1212.51 1565.99,1211.27 1566.57,1211.49 1567.16,1210.26 1567.75,1210.38 1568.33,1208.2 1568.92,1207.49 1569.51,1209.03 1570.09,1211.17 1570.68,1212.44 1571.27,1211.41 1571.85,1210.39 1572.44,1211.72 1573.02,1210.79 1573.61,1209.47 1574.2,1207.45 1574.78,1207.62 1575.37,1207.81 1575.96,1207.98 1576.54,1206.09 1577.13,1207.4 1577.72,1207.44 1578.3,1207.62 1578.89,1207.76 1579.47,1207.98 1580.06,1210.49 1580.65,1210.34 1581.23,1209.21 1581.82,1209.17 1582.41,1210.48 1582.99,1210.79 1583.58,1210.61 1584.17,1208.31 1584.75,1210.73 1585.34,1210.81 1585.93,1209.62 1586.51,1208.38 1587.1,1208.48 1587.68,1208.47 1588.27,1209.56 1588.86,1210.54 1589.44,1210.32 1590.03,1210.32 1590.62,1211.47 1591.2,1211.44 1591.79,1210.25 1592.38,1210.19 1592.96,1211.18 1593.55,1208.46 1594.14,1210.9 1594.72,1212.22 1595.31,1213.51 1595.89,1212.49 1596.48,1211.32 1597.07,1209.14 1597.65,1209.2 1598.24,1210.45 1598.83,1211.72 1599.41,1212.67 1600,1212.51 1600.59,1212.17 1601.17,1214.56 1601.76,1215.41 1602.34,1214.08 1602.93,1213.9 1603.52,1212.57 1604.1,1210.17 1604.69,1207.93 1605.28,1209.04 1605.86,1209.33 1606.45,1209.4 1607.04,1209.36 1607.62,1208.44 1608.21,1209.7 1608.8,1209.85 1609.38,1208.77 1609.97,1208.74 1610.55,1208.96 1611.14,1208 1611.73,1208.07 1612.31,1204.67 1612.9,1205.2 1613.49,1205.31 1614.07,1204.27 1614.66,1205.49 1615.25,1204.69 1615.83,1206.16 1616.42,1206.3 1617.01,1205.28 1617.59,1205.44 1618.18,1203.66 1618.76,1204.11 1619.35,1203.56 1619.94,1203.02 1620.52,1203.4 1621.11,1201.43 1621.7,1202.15 1622.28,1205 1622.87,1206.16 1623.46,1205.44 1624.04,1205.65 1624.63,1207.21 1625.22,1209.51 1625.8,1209.72 1626.39,1212.21 1626.97,1209.98 1627.56,1210.18 1628.15,1208.92 1628.73,1210 1629.32,1211.18 1629.91,1209.9 1630.49,1212.15 1631.08,1209.83 1631.67,1211.11 1632.25,1212.14 1632.84,1209.85 1633.42,1209.87 1634.01,1209.95 1634.6,1208.86 1635.18,1209.3 1635.77,1209.26 1636.36,1209.3 1636.94,1212.68 1637.53,1212.71 1638.12,1214.79 1638.7,1212.39 1639.29,1212.28 1639.88,1212.31 1640.46,1212.16 1641.05,1212.05 1641.63,1210.8 1642.22,1210.97 1642.81,1212.24 1643.39,1212.04 1643.98,1214.32 1644.57,1216.48 1645.15,1213.96 1645.74,1214.87 1646.33,1214.32 1646.91,1218.84 1647.5,1219.69 1648.09,1218.26 1648.67,1217.91 1649.26,1216.41 1649.84,1216.13 1650.43,1215.78 1651.02,1212.05 1651.6,1212.04 1652.19,1211.92 1652.78,1211.86 1653.36,1210.57 1653.95,1211.59 1654.54,1209.35 1655.12,1208.09 1655.71,1209.25 1656.29,1211.68 1656.88,1212.96 1657.47,1213.95 1658.05,1211.56 1658.64,1212.9 1659.23,1213.87 1659.81,1213.69 1660.4,1213.35 1660.99,1213.38 1661.57,1213.29 1662.16,1214.36 1662.75,1215.36 1663.33,1217.39 1663.92,1214.7 1664.5,1213.45 1665.09,1213.19 1665.68,1211.66 1666.26,1211.72 1666.85,1212.72 1667.44,1213.81 1668.02,1215.89 1668.61,1217.99 1669.2,1218.74 1669.78,1215.94 1670.37,1214.72 1670.96,1214.61 1671.54,1215.44 1672.13,1215.05 1672.71,1211.63 1673.3,1210.23 1673.89,1208.17 1674.47,1208.37 1675.06,1209.52 1675.65,1209.48 1676.23,1210.85 1676.82,1210.86 1677.41,1213.18 1677.99,1216.5 1678.58,1216.03 1679.17,1214.62 1679.75,1213.29 1680.34,1213.02 1680.92,1214.1 1681.51,1212.68 1682.1,1213.61 1682.68,1214.59 1683.27,1216.58 1683.86,1217.62 1684.44,1217.26 1685.03,1216.96 1685.62,1215.51 1686.2,1214.11 1686.79,1211.6 1687.37,1211.64 1687.96,1211.54 1688.55,1211.58 1689.13,1212.71 1689.72,1211.47 1690.31,1210.38 1690.89,1209.07 1691.48,1208.21 1692.07,1208.68 1692.65,1207.45 1693.24,1206.64 1693.83,1208.03 1694.41,1208.48 1695,1208.58 1695.58,1207.75 1696.17,1205.94 1696.76,1205.15 1697.34,1201.94 1697.93,1202.54 1698.52,1204.02 1699.1,1204.25 1699.69,1207.92 1700.28,1211.46 1700.86,1211.59 1701.45,1211.31 1702.04,1209.97 1702.62,1210.15 1703.21,1210.09 1703.79,1210.38 1704.38,1210.45 1704.97,1209.34 1705.55,1206.06 1706.14,1206.43 1706.73,1205.74 1707.31,1205.85 1707.9,1204.96 1708.49,1205.2 1709.07,1205.61 1709.66,1207.06 1710.24,1208.75 1710.83,1209.13 1711.42,1212.49 1712,1211.35 1712.59,1208.02 1713.18,1207.87 1713.76,1205.79 1714.35,1205.83 1714.94,1204.93 1715.52,1205.62 1716.11,1206.86 1716.7,1207.24 1717.28,1208.65 1717.87,1211.3 1718.45,1211.3 1719.04,1212.42 1719.63,1211.25 1720.21,1212.37 1720.8,1211.27 1721.39,1214.63 1721.97,1215.46 1722.56,1216.08 1723.15,1214.63 1723.73,1212.96 1724.32,1213.93 1724.91,1212.65 1725.49,1211.2 1726.08,1209.88 1726.66,1211.01 1727.25,1208.92 1727.84,1207.93 1728.42,1210.41 1729.01,1211.48 1729.6,1210.32 1730.18,1210.33 1730.77,1210.25 1731.36,1211.37 1731.94,1211.38 1732.53,1212.52 1733.11,1212.18 1733.7,1213.34 1734.29,1214.15 1734.87,1213.88 1735.46,1213.71 1736.05,1211.27 1736.63,1211.03 1737.22,1212.19 1737.81,1212.23 1738.39,1213.28 1738.98,1215.44 1739.57,1214.85 1740.15,1214.86 1740.74,1217.96 1741.32,1218.8 1741.91,1216.03 1742.5,1215.67 1743.08,1213.28 1743.67,1213.18 1744.26,1212.95 1744.84,1213.9 1745.43,1213.75 1746.02,1215.74 1746.6,1216.69 1747.19,1212.85 1747.78,1213.9 1748.36,1212.55 1748.95,1212.53 1749.53,1211.02 1750.12,1211.16 1750.71,1212.34 1751.29,1213.22 1751.88,1211.47 1752.47,1211.39 1753.05,1211.27 1753.64,1207.65 1754.23,1207.68 1754.81,1210.14 1755.4,1209.13 1755.99,1210.34 1756.57,1208.39 1757.16,1207.39 1757.74,1208.71 1758.33,1212.39 1758.92,1211.05 1759.5,1211.2 1760.09,1210.07 1760.68,1208.88 1761.26,1212.16 1761.85,1213.27 1762.44,1215.6 1763.02,1214.29 1763.61,1214.05 1764.19,1213.77 1764.78,1213.72 1765.37,1211.34 1765.95,1210.21 1766.54,1212.64 1767.13,1212.59 1767.71,1212.51 1768.3,1213.69 1768.89,1212.6 1769.47,1213.59 1770.06,1213.65 1770.65,1212.35 1771.23,1210.05 1771.82,1208.69 1772.4,1211.06 1772.99,1210.98 1773.58,1209.89 1774.16,1207.83 1774.75,1206.74 1775.34,1206.84 1775.92,1210.7 1776.51,1206.11 1777.1,1204.04 1777.68,1205.84 1778.27,1205.01 1778.86,1206.5 1779.44,1205.51 1780.03,1209.11 1780.61,1208.33 1781.2,1210.76 1781.79,1209.62 1782.37,1205.12 1782.96,1204.25 1783.55,1205.6 1784.13,1205.93 1784.72,1207.17 1785.31,1207.43 1785.89,1206.58 1786.48,1209.38 1787.06,1211.67 1787.65,1211.82 1788.24,1210.71 1788.82,1212 1789.41,1214.07 1790,1213.86 1790.58,1213.65 1791.17,1215.89 1791.76,1213.48 1792.34,1210.15 1792.93,1211.38 1793.52,1212.4 1794.1,1213.61 1794.69,1213.59 1795.27,1213.58 1795.86,1211.05 1796.45,1209.9 1797.03,1208.64 1797.62,1210.13 1798.21,1211.24 1798.79,1208.8 1799.38,1208.91 1799.97,1212.63 1800.55,1212.62 1801.14,1216.02 1801.73,1214.39 1802.31,1217.24 1802.9,1214.48 1803.48,1213.07 1804.07,1214.1 1804.66,1213.64 1805.24,1214.82 1805.83,1215.69 1806.42,1216.52 1807,1216.37 1807.59,1217.08 1808.18,1218.16 1808.76,1217.87 1809.35,1217.68 1809.94,1217.4 1810.52,1214.8 1811.11,1214.43 1811.69,1217.56 1812.28,1216.17 1812.87,1213.49 1813.45,1213.37 1814.04,1213.23 1814.63,1209.83 1815.21,1209.82 1815.8,1212.05 1816.39,1209.87 1816.97,1209.98 1817.56,1209.02 1818.14,1210.25 1818.73,1212.78 1819.32,1213.99 1819.9,1211.49 1820.49,1211.4 1821.08,1207.99 1821.66,1210.24 1822.25,1211.11 1822.84,1210.16 1823.42,1210.03 1824.01,1211.16 1824.6,1207.91 1825.18,1205.93 1825.77,1207.3 1826.35,1207.35 1826.94,1209.85 1827.53,1211.09 1828.11,1211.07 1828.7,1211.32 1829.29,1207.96 1829.87,1208.25 1830.46,1206.25 1831.05,1205.32 1831.63,1208.08 1832.22,1205.76 1832.81,1207.02 1833.39,1207.25 1833.98,1206.41 1834.56,1206.59 1835.15,1208.87 1835.74,1211.29 1836.32,1211.41 1836.91,1206.45 1837.5,1205.56 1838.08,1208.12 1838.67,1210.65 1839.26,1210.61 1839.84,1210.89 1840.43,1213.08 1841.01,1208.33 1841.6,1208.29 1842.19,1208.48 1842.77,1209.87 1843.36,1213.27 1843.95,1214.42 1844.53,1212.08 1845.12,1214.21 1845.71,1212.73 1846.29,1211.56 1846.88,1210.29 1847.47,1209.19 1848.05,1208.25 1848.64,1205.96 1849.22,1208.44 1849.81,1207.34 1850.4,1205.22 1850.98,1207.93 1851.57,1208.13 1852.16,1208.17 1852.74,1206.04 1853.33,1205.16 1853.92,1209.01 1854.5,1211.35 1855.09,1211.36 1855.68,1210.17 1856.26,1211.44 1856.85,1210.19 1857.43,1211.18 1858.02,1210.02 1858.61,1210.12 1859.19,1212.68 1859.78,1214.84 1860.37,1214.54 1860.95,1212.42 1861.54,1211.33 1862.13,1213.38 1862.71,1210.84 1863.3,1211.97 1863.88,1213.22 1864.47,1213.24 1865.06,1211.89 1865.64,1212.6 1866.23,1216.04 1866.82,1214.53 1867.4,1216.34 1867.99,1215.94 1868.58,1214.54 1869.16,1215.48 1869.75,1214.23 1870.34,1213.81 1870.92,1216.13 1871.51,1215.97 1872.09,1215.52 1872.68,1216.58 1873.27,1216.22 1873.85,1216.03 1874.44,1214.48 1875.03,1213.41 1875.61,1212.04 1876.2,1210.68 1876.79,1212.94 1877.37,1212.9 1877.96,1214.13 1878.55,1212.85 1879.13,1213.96 1879.72,1217.33 1880.3,1214.78 1880.89,1214.66 1881.48,1215.77 1882.06,1217.86 1882.65,1217.39 1883.24,1215.81 1883.82,1218.82 1884.41,1214.77 1885,1214.49 1885.58,1214.37 1886.17,1217.55 1886.76,1215.85 1887.34,1215.35 1887.93,1213.91 1888.51,1213.75 1889.1,1212.67 1889.69,1211.62 1890.27,1209.21 1890.86,1209.13 1891.45,1208.03 1892.03,1207.08 1892.62,1207.21 1893.21,1209.94 1893.79,1211.07 1894.38,1211.35 1894.96,1211.47 1895.55,1208.85 1896.14,1207.6 1896.72,1207.65 1897.31,1207.88 1897.9,1207.06 1898.48,1206.16 1899.07,1204.43 1899.66,1206.08 1900.24,1206.41 1900.83,1206.88 1901.42,1207.3 1902,1206.48 1902.59,1207.78 1903.17,1208.22 1903.76,1207.31 1904.35,1209.77 1904.93,1208.61 1905.52,1208.98 1906.11,1209.07 1906.69,1209.14 1907.28,1210.31 1907.87,1209.14 1908.45,1206.07 1909.04,1206.27 1909.63,1207.33 1910.21,1206.4 1910.8,1204.58 1911.38,1203.95 1911.97,1205.34 1912.56,1206.95 1913.14,1208.17 1913.73,1209.56 1914.32,1211.96 1914.9,1209.6 1915.49,1210.64 1916.08,1209.41 1916.66,1209.43 1917.25,1208.43 1917.83,1211.07 1918.42,1209.72 1919.01,1209.92 1919.59,1211.32 1920.18,1211.31 1920.77,1211.5 1921.35,1212.63 1921.94,1214.83 1922.53,1215.91 1923.11,1219.01 1923.7,1216.51 1924.29,1218.54 1924.87,1218.15 1925.46,1218.97 1926.04,1218.57 1926.63,1220.81 1927.22,1217.03 1927.8,1216.62 1928.39,1216.33 1928.98,1218.09 1929.56,1216.6 1930.15,1216.28 1930.74,1216.9 1931.32,1216.47 1931.91,1216.09 1932.5,1215.85 1933.08,1213.11 1933.67,1213.13 1934.25,1211.49 1934.84,1211.48 1935.43,1213.6 1936.01,1212.1 1936.6,1210.82 1937.19,1211.87 1937.77,1210.73 1938.36,1209.57 1938.95,1210.91 1939.53,1207.25 1940.12,1209.52 1940.71,1203.73 1941.29,1203.93 1941.88,1205.66 1942.46,1202.46 1943.05,1202.92 1943.64,1200.78 1944.22,1200.24 1944.81,1198.86 1945.4,1201.78 1945.98,1203.35 1946.57,1204.91 1947.16,1205.26 1947.74,1205.55 1948.33,1205.61 1948.91,1207.32 1949.5,1207.81 1950.09,1209.05 1950.67,1209.45 1951.26,1209.62 1951.85,1210.95 1952.43,1209.86 1953.02,1212.13 1953.61,1209.97 1954.19,1211 1954.78,1210.85 1955.37,1210.96 1955.95,1213.3 1956.54,1209.65 1957.12,1211.93 1957.71,1211.78 1958.3,1211.65 1958.88,1209.13 1959.47,1208.12 1960.06,1207.1 1960.64,1206.07 1961.23,1206.38 1961.82,1206.65 1962.4,1206.69 1962.99,1206.98 1963.58,1207.17 1964.16,1208.18 1964.75,1206.11 1965.33,1206.47 1965.92,1205.57 1966.51,1206.06 1967.09,1207.56 1967.68,1206.48 1968.27,1206.9 1968.85,1206.02 1969.44,1207.3 1970.03,1207.45 1970.61,1213.16 1971.2,1214.28 1971.78,1215.31 1972.37,1215.09 1972.96,1217.11 1973.54,1216.68 1974.13,1216.4 1974.72,1217.38 1975.3,1212.61 1975.89,1211.37 1976.48,1210.23 1977.06,1213.72 1977.65,1214.64 1978.24,1214.42 1978.82,1214.26 1979.41,1214.36 1979.99,1214.22 1980.58,1215.3 1981.17,1213.01 1981.75,1212.84 1982.34,1213.89 1982.93,1213.64 1983.51,1213.89 1984.1,1217.23 1984.69,1215.78 1985.27,1215.51 1985.86,1216.47 1986.45,1214.87 1987.03,1213.39 1987.62,1216.8 1988.2,1217.9 1988.79,1216.45 1989.38,1215.08 1989.96,1214.78 1990.55,1213.43 1991.14,1212.03 1991.72,1211.92 1992.31,1212.8 1992.9,1212.62 1993.48,1212.61 1994.07,1213.65 1994.65,1217.96 1995.24,1217.33 1995.83,1218.15 1996.41,1215.61 1997,1216.43 1997.59,1217.49 1998.17,1217.17 1998.76,1215.64 1999.35,1215.26 1999.93,1213.92 2000.52,1211.58 2001.11,1212.67 2001.69,1212.29 2002.28,1209.99 2002.86,1206.66 2003.45,1205.79 2004.04,1206.23 2004.62,1205.24 2005.21,1205.35 2005.8,1204.46 2006.38,1204.66 2006.97,1204.85 2007.56,1203.89 2008.14,1203.26 2008.73,1203.42 2009.32,1204.88 2009.9,1205.17 2010.49,1205.57 2011.07,1205.91 2011.66,1206.03 2012.25,1207.27 2012.83,1208.54 2013.42,1207.54 2014.01,1204.46 2014.59,1203.82 2015.18,1205.82 2015.77,1205.05 2016.35,1206.46 2016.94,1204.5 2017.53,1203.55 2018.11,1201.69 2018.7,1202.48 2019.28,1201.82 2019.87,1203.66 2020.46,1204.08 2021.04,1205.52 2021.63,1206.08 2022.22,1206.31 2022.8,1209.06 2023.39,1206.9 2023.98,1206.05 2024.56,1206.35 2025.15,1205.5 2025.73,1205.93 2026.32,1206.51 2026.91,1207.79 2027.49,1207.77 2028.08,1210.43 2028.67,1210.47 2029.25,1212.7 2029.84,1213.88 2030.43,1213.88 2031.01,1213.76 2031.6,1215.96 2032.19,1215.49 2032.77,1216.27 2033.36,1214.92 2033.94,1213.47 2034.53,1214.46 2035.12,1211.85 2035.7,1209.62 2036.29,1210.58 2036.88,1205.88 2037.46,1208.47 2038.05,1208.5 2038.64,1208.47 2039.22,1211.06 2039.81,1210 2040.4,1208.96 2040.98,1210.2 2041.57,1211.42 2042.15,1210.1 2042.74,1209.03 2043.33,1210.22 2043.91,1210.33 2044.5,1210.26 2045.09,1210.45 2045.67,1210.14 2046.26,1212.56 2046.85,1217.9 2047.43,1218.48 2048.02,1219.16 2048.6,1218.65 2049.19,1218.44 2049.78,1218.99 2050.36,1218.32 2050.95,1217.86 2051.54,1216.47 2052.12,1216.09 2052.71,1215.49 2053.3,1215.1 2053.88,1216.02 2054.47,1213.53 2055.06,1214.53 2055.64,1212.01 2056.23,1210.73 2056.81,1210.65 2057.4,1211.82 2057.99,1213.09 2058.57,1211.66 2059.16,1208.24 2059.75,1209.38 2060.33,1209.5 2060.92,1210.78 2061.51,1210.74 2062.09,1211.83 2062.68,1210.78 2063.27,1212.12 2063.85,1211.92 2064.44,1211.7 2065.02,1212.54 2065.61,1212.37 2066.2,1215.45 2066.78,1215.13 2067.37,1216.09 2067.96,1218.06 2068.54,1215.11 2069.13,1212.46 2069.72,1212.29 2070.3,1214.66 2070.89,1215.41 2071.48,1216.09 2072.06,1215.03 2072.65,1216.89 2073.23,1215.63 2073.82,1215.09 2074.41,1214.93 2074.99,1213.55 2075.58,1214.8 2076.17,1216.73 2076.75,1216.42 2077.34,1219.66 2077.93,1218.27 2078.51,1218.88 2079.1,1219.93 2079.68,1220.63 2080.27,1216.81 2080.86,1216.31 2081.44,1216.07 2082.03,1215.67 2082.62,1214.58 2083.2,1215.44 2083.79,1213.07 2084.38,1212.91 2084.96,1212.77 2085.55,1209.4 2086.14,1205.97 2086.72,1205.26 2087.31,1205.78 2087.89,1205.92 2088.48,1204.78 2089.07,1203.92 2089.65,1206.53 2090.24,1205.85 2090.83,1207.05 2091.41,1208.46 2092,1210.89 2092.59,1210.79 2093.17,1210.73 2093.76,1210.83 2094.35,1209.52 2094.93,1209.67 2095.52,1210.83 2096.1,1211.94 2096.69,1215.41 2097.28,1216.24 2097.86,1218.29 2098.45,1217 2099.04,1217.45 2099.62,1216.93 2100.21,1214.46 2100.8,1215.42 2101.38,1210.6 2101.97,1211.63 2102.55,1210.48 2103.14,1210.39 2103.73,1207.19 2104.31,1206.24 2104.9,1205.38 2105.49,1206.96 2106.07,1207.5 2106.66,1207.8 2107.25,1208.18 2107.83,1211.68 2108.42,1209.63 2109.01,1210.75 2109.59,1207.19 2110.18,1207.37 2110.76,1208.92 2111.35,1212.45 2111.94,1212.43 2112.52,1214.64 2113.11,1213.32 2113.7,1214.24 2114.28,1215.21 2114.87,1214.01 2115.46,1214.97 2116.04,1215.67 2116.63,1216.45 2117.22,1215.96 2117.8,1216.59 2118.39,1214.19 2118.97,1210.69 2119.56,1210.77 2120.15,1211.04 2120.73,1211.16 2121.32,1211.19 2121.91,1213.37 2122.49,1210.96 2123.08,1208.62 2123.67,1207.39 2124.25,1207.63 2124.84,1206.58 2125.42,1206.92 2126.01,1204.93 2126.6,1205.43 2127.18,1205.72 2127.77,1207.05 2128.36,1207.27 2128.94,1208.35 2129.53,1207.3 2130.12,1209.82 2130.7,1212.17 2131.29,1212.07 2131.88,1211.12 2132.46,1209.97 2133.05,1211.26 2133.63,1211.26 2134.22,1211.25 2134.81,1212.18 2135.39,1211.02 2135.98,1212.32 2136.57,1213.5 2137.15,1214.7 2137.74,1214.4 2138.33,1215.45 2138.91,1215.23 2139.5,1216.33 2140.09,1217.36 2140.67,1217.18 2141.26,1216.98 2141.84,1216.75 2142.43,1215.26 2143.02,1215.22 2143.6,1211.48 2144.19,1212.65 2144.78,1213.65 2145.36,1213.46 2145.95,1213.43 2146.54,1214.08 2147.12,1215.2 2147.71,1213.91 2148.3,1210.37 2148.88,1209.1 2149.47,1209.3 2150.05,1208.28 2150.64,1211.99 2151.23,1210.93 2151.81,1209.71 2152.4,1212.11 2152.99,1209.83 2153.57,1211.96 2154.16,1211.91 2154.75,1213.12 2155.33,1214.29 2155.92,1212.09 2156.5,1209.55 2157.09,1206.49 2157.68,1204.36 2158.26,1206.92 \"/>\n<path clip-path=\"url(#clip372)\" d=\"M986.025 1211.51 L986.612 1211.51 L987.198 1211.51 L987.785 1211.51 L988.371 1211.51 L988.957 1211.51 L989.544 1211.51 L990.13 1211.51 L990.717 1211.51 L991.303 1211.51 L991.889 1211.51 L992.476 1211.51 L993.062 1211.51 L993.649 1211.51 L994.235 1211.51 L994.822 1211.51 L995.408 1211.51 L995.994 1211.51 L996.581 1211.51 L997.167 1211.51 L997.754 1211.51 L998.34 1211.51 L998.926 1211.51 L999.513 1211.51 L1000.1 1211.51 L1000.69 1211.51 L1001.27 1211.51 L1001.86 1211.51 L1002.44 1211.51 L1003.03 1211.51 L1003.62 1211.51 L1004.2 1211.51 L1004.79 1211.51 L1005.38 1211.51 L1005.96 1211.51 L1006.55 1211.51 L1007.14 1211.51 L1007.72 1211.51 L1008.31 1211.51 L1008.9 1211.51 L1009.48 1211.51 L1010.07 1211.51 L1010.65 1211.51 L1011.24 1211.51 L1011.83 1211.51 L1012.41 1211.51 L1013 1211.51 L1013.59 1211.51 L1014.17 1211.51 L1014.76 1211.51 L1015.35 1211.51 L1015.93 1211.51 L1016.52 1211.51 L1017.11 1211.51 L1017.69 1211.51 L1018.28 1211.51 L1018.86 1211.51 L1019.45 1211.51 L1020.04 1211.51 L1020.62 1211.51 L1021.21 1211.51 L1021.8 1211.51 L1022.38 1211.51 L1022.97 1211.51 L1023.56 1211.51 L1024.14 1211.51 L1024.73 1211.51 L1025.32 1211.51 L1025.9 1211.51 L1026.49 1211.51 L1027.07 1211.51 L1027.66 1211.51 L1028.25 1211.51 L1028.83 1211.51 L1029.42 1211.51 L1030.01 1211.51 L1030.59 1211.51 L1031.18 1211.51 L1031.77 1211.51 L1032.35 1211.51 L1032.94 1211.51 L1033.52 1211.51 L1034.11 1211.51 L1034.7 1211.51 L1035.28 1211.51 L1035.87 1211.51 L1036.46 1211.51 L1037.04 1211.51 L1037.63 1211.51 L1038.22 1211.51 L1038.8 1211.51 L1039.39 1211.51 L1039.98 1211.51 L1040.56 1211.51 L1041.15 1211.51 L1041.73 1211.51 L1042.32 1211.51 L1042.91 1211.51 L1043.49 1211.51 L1044.08 1211.51 L1044.67 1211.51 L1045.25 1211.51 L1045.84 1211.51 L1046.43 1211.51 L1047.01 1211.51 L1047.6 1211.51 L1048.19 1211.51 L1048.77 1211.51 L1049.36 1211.51 L1049.94 1211.51 L1050.53 1211.51 L1051.12 1211.51 L1051.7 1211.51 L1052.29 1211.51 L1052.88 1211.51 L1053.46 1211.51 L1054.05 1211.51 L1054.64 1211.51 L1055.22 1211.51 L1055.81 1211.51 L1056.39 1211.51 L1056.98 1211.51 L1057.57 1211.51 L1058.15 1211.51 L1058.74 1211.51 L1059.33 1211.51 L1059.91 1211.51 L1060.5 1211.51 L1061.09 1211.51 L1061.67 1211.51 L1062.26 1211.51 L1062.85 1211.51 L1063.43 1211.51 L1064.02 1211.51 L1064.6 1211.51 L1065.19 1211.51 L1065.78 1211.51 L1066.36 1211.51 L1066.95 1211.51 L1067.54 1211.51 L1068.12 1211.51 L1068.71 1211.51 L1069.3 1211.51 L1069.88 1211.51 L1070.47 1211.51 L1071.06 1211.51 L1071.64 1211.51 L1072.23 1211.51 L1072.81 1211.51 L1073.4 1211.51 L1073.99 1211.51 L1074.57 1211.51 L1075.16 1211.51 L1075.75 1211.51 L1076.33 1211.51 L1076.92 1211.51 L1077.51 1211.51 L1078.09 1211.51 L1078.68 1211.51 L1079.26 1211.51 L1079.85 1211.51 L1080.44 1211.51 L1081.02 1211.51 L1081.61 1211.51 L1082.2 1211.51 L1082.78 1211.51 L1083.37 1211.51 L1083.96 1211.51 L1084.54 1211.51 L1085.13 1211.51 L1085.72 1211.51 L1086.3 1211.51 L1086.89 1211.51 L1087.47 1211.51 L1088.06 1211.51 L1088.65 1211.51 L1089.23 1211.51 L1089.82 1211.51 L1090.41 1211.51 L1090.99 1211.51 L1091.58 1211.51 L1092.17 1211.51 L1092.75 1211.51 L1093.34 1211.51 L1093.93 1211.51 L1094.51 1211.51 L1095.1 1211.51 L1095.68 1211.51 L1096.27 1211.51 L1096.86 1211.51 L1097.44 1211.51 L1098.03 1211.51 L1098.62 1211.51 L1099.2 1211.51 L1099.79 1211.51 L1100.38 1211.51 L1100.96 1211.51 L1101.55 1211.51 L1102.14 1211.51 L1102.72 1211.51 L1103.31 1211.51 L1103.89 1211.51 L1104.48 1211.51 L1105.07 1211.51 L1105.65 1211.51 L1106.24 1211.51 L1106.83 1211.51 L1107.41 1211.51 L1108 1211.51 L1108.59 1211.51 L1109.17 1211.51 L1109.76 1211.51 L1110.34 1211.51 L1110.93 1211.51 L1111.52 1211.51 L1112.1 1211.51 L1112.69 1211.51 L1113.28 1211.51 L1113.86 1211.51 L1114.45 1211.51 L1115.04 1211.51 L1115.62 1211.51 L1116.21 1211.51 L1116.8 1211.51 L1117.38 1211.51 L1117.97 1211.51 L1118.55 1211.51 L1119.14 1211.51 L1119.73 1211.51 L1120.31 1211.51 L1120.9 1211.51 L1121.49 1211.51 L1122.07 1211.51 L1122.66 1211.51 L1123.25 1211.51 L1123.83 1211.51 L1124.42 1211.51 L1125.01 1211.51 L1125.59 1211.51 L1126.18 1211.51 L1126.76 1211.51 L1127.35 1211.51 L1127.94 1211.51 L1128.52 1211.51 L1129.11 1211.51 L1129.7 1211.51 L1130.28 1211.51 L1130.87 1211.51 L1131.46 1211.51 L1132.04 1211.51 L1132.63 1211.51 L1133.21 1211.51 L1133.8 1211.51 L1134.39 1211.51 L1134.97 1211.51 L1135.56 1211.51 L1136.15 1211.51 L1136.73 1211.51 L1137.32 1211.51 L1137.91 1211.51 L1138.49 1211.51 L1139.08 1211.51 L1139.67 1211.51 L1140.25 1211.51 L1140.84 1211.51 L1141.42 1211.51 L1142.01 1211.51 L1142.6 1211.51 L1143.18 1211.51 L1143.77 1211.51 L1144.36 1211.51 L1144.94 1211.51 L1145.53 1211.51 L1146.12 1211.51 L1146.7 1211.51 L1147.29 1211.51 L1147.88 1211.51 L1148.46 1211.51 L1149.05 1211.51 L1149.63 1211.51 L1150.22 1211.51 L1150.81 1211.51 L1151.39 1211.51 L1151.98 1211.51 L1152.57 1211.51 L1153.15 1211.51 L1153.74 1211.51 L1154.33 1211.51 L1154.91 1211.51 L1155.5 1211.51 L1156.09 1211.51 L1156.67 1211.51 L1157.26 1211.51 L1157.84 1211.51 L1158.43 1211.51 L1159.02 1211.51 L1159.6 1211.51 L1160.19 1211.51 L1160.78 1211.51 L1161.36 1211.51 L1161.95 1211.51 L1162.54 1211.51 L1163.12 1211.51 L1163.71 1211.51 L1164.29 1211.51 L1164.88 1211.51 L1165.47 1211.51 L1166.05 1211.51 L1166.64 1211.51 L1167.23 1211.51 L1167.81 1211.51 L1168.4 1211.51 L1168.99 1211.51 L1169.57 1211.51 L1170.16 1211.51 L1170.75 1211.51 L1171.33 1211.51 L1171.92 1211.51 L1172.5 1211.51 L1173.09 1211.51 L1173.68 1211.51 L1174.26 1211.51 L1174.85 1211.51 L1175.44 1211.51 L1176.02 1211.51 L1176.61 1211.51 L1177.2 1211.51 L1177.78 1211.51 L1178.37 1211.51 L1178.96 1211.51 L1179.54 1211.51 L1180.13 1211.51 L1180.71 1211.51 L1181.3 1211.51 L1181.89 1211.51 L1182.47 1211.51 L1183.06 1211.51 L1183.65 1211.51 L1184.23 1211.51 L1184.82 1211.51 L1185.41 1211.51 L1185.99 1211.51 L1186.58 1211.51 L1187.16 1211.51 L1187.75 1211.51 L1188.34 1211.51 L1188.92 1211.51 L1189.51 1211.51 L1190.1 1211.51 L1190.68 1211.51 L1191.27 1211.51 L1191.86 1211.51 L1192.44 1211.51 L1193.03 1211.51 L1193.62 1211.51 L1194.2 1211.51 L1194.79 1211.51 L1195.37 1211.51 L1195.96 1211.51 L1196.55 1211.51 L1197.13 1211.51 L1197.72 1211.51 L1198.31 1211.51 L1198.89 1211.51 L1199.48 1211.51 L1200.07 1211.51 L1200.65 1211.51 L1201.24 1211.51 L1201.83 1211.51 L1202.41 1211.51 L1203 1211.51 L1203.58 1211.51 L1204.17 1211.51 L1204.76 1211.51 L1205.34 1211.51 L1205.93 1211.51 L1206.52 1211.51 L1207.1 1211.51 L1207.69 1211.51 L1208.28 1211.51 L1208.86 1211.51 L1209.45 1211.51 L1210.03 1211.51 L1210.62 1211.51 L1211.21 1211.51 L1211.79 1211.51 L1212.38 1211.51 L1212.97 1211.51 L1213.55 1211.51 L1214.14 1211.51 L1214.73 1211.51 L1215.31 1211.51 L1215.9 1211.51 L1216.49 1211.51 L1217.07 1211.51 L1217.66 1211.51 L1218.24 1211.51 L1218.83 1211.51 L1219.42 1211.51 L1220 1211.51 L1220.59 1211.51 L1221.18 1211.51 L1221.76 1211.51 L1222.35 1211.51 L1222.94 1211.51 L1223.52 1211.51 L1224.11 1211.51 L1224.7 1211.51 L1225.28 1211.51 L1225.87 1211.51 L1226.45 1211.51 L1227.04 1211.51 L1227.63 1211.51 L1228.21 1211.51 L1228.8 1211.51 L1229.39 1211.51 L1229.97 1211.51 L1230.56 1211.51 L1231.15 1211.51 L1231.73 1211.51 L1232.32 1211.51 L1232.91 1211.51 L1233.49 1211.51 L1234.08 1211.51 L1234.66 1211.51 L1235.25 1211.51 L1235.84 1211.51 L1236.42 1211.51 L1237.01 1211.51 L1237.6 1211.51 L1238.18 1211.51 L1238.77 1211.51 L1239.36 1211.51 L1239.94 1211.51 L1240.53 1211.51 L1241.11 1211.51 L1241.7 1211.51 L1242.29 1211.51 L1242.87 1211.51 L1243.46 1211.51 L1244.05 1211.51 L1244.63 1211.51 L1245.22 1211.51 L1245.81 1211.51 L1246.39 1211.51 L1246.98 1211.51 L1247.57 1211.51 L1248.15 1211.51 L1248.74 1211.51 L1249.32 1211.51 L1249.91 1211.51 L1250.5 1211.51 L1251.08 1211.51 L1251.67 1211.51 L1252.26 1211.51 L1252.84 1211.51 L1253.43 1211.51 L1254.02 1211.51 L1254.6 1211.51 L1255.19 1211.51 L1255.78 1211.51 L1256.36 1211.51 L1256.95 1211.51 L1257.53 1211.51 L1258.12 1211.51 L1258.71 1211.51 L1259.29 1211.51 L1259.88 1211.51 L1260.47 1211.51 L1261.05 1211.51 L1261.64 1211.51 L1262.23 1211.51 L1262.81 1211.51 L1263.4 1211.51 L1263.98 1211.51 L1264.57 1211.51 L1265.16 1211.51 L1265.74 1211.51 L1266.33 1211.51 L1266.92 1211.51 L1267.5 1211.51 L1268.09 1211.51 L1268.68 1211.51 L1269.26 1211.51 L1269.85 1211.51 L1270.44 1211.51 L1271.02 1211.51 L1271.61 1211.51 L1272.19 1211.51 L1272.78 1211.51 L1273.37 1211.51 L1273.95 1211.51 L1274.54 1211.51 L1275.13 1211.51 L1275.71 1211.51 L1276.3 1211.51 L1276.89 1211.51 L1277.47 1211.51 L1278.06 1211.51 L1278.65 1211.51 L1279.23 1211.51 L1279.82 1211.51 L1280.4 1211.51 L1280.99 1211.51 L1281.58 1211.51 L1282.16 1211.51 L1282.75 1211.51 L1283.34 1211.51 L1283.92 1211.51 L1284.51 1211.51 L1285.1 1211.51 L1285.68 1211.51 L1286.27 1211.51 L1286.86 1211.51 L1287.44 1211.51 L1288.03 1211.51 L1288.61 1211.51 L1289.2 1211.51 L1289.79 1211.51 L1290.37 1211.51 L1290.96 1211.51 L1291.55 1211.51 L1292.13 1211.51 L1292.72 1211.51 L1293.31 1211.51 L1293.89 1211.51 L1294.48 1211.51 L1295.06 1211.51 L1295.65 1211.51 L1296.24 1211.51 L1296.82 1211.51 L1297.41 1211.51 L1298 1211.51 L1298.58 1211.51 L1299.17 1211.51 L1299.76 1211.51 L1300.34 1211.51 L1300.93 1211.51 L1301.52 1211.51 L1302.1 1211.51 L1302.69 1211.51 L1303.27 1211.51 L1303.86 1211.51 L1304.45 1211.51 L1305.03 1211.51 L1305.62 1211.51 L1306.21 1211.51 L1306.79 1211.51 L1307.38 1211.51 L1307.97 1211.51 L1308.55 1211.51 L1309.14 1211.51 L1309.73 1211.51 L1310.31 1211.51 L1310.9 1211.51 L1311.48 1211.51 L1312.07 1211.51 L1312.66 1211.51 L1313.24 1211.51 L1313.83 1211.51 L1314.42 1211.51 L1315 1211.51 L1315.59 1211.51 L1316.18 1211.51 L1316.76 1211.51 L1317.35 1211.51 L1317.93 1211.51 L1318.52 1211.51 L1319.11 1211.51 L1319.69 1211.51 L1320.28 1211.51 L1320.87 1211.51 L1321.45 1211.51 L1322.04 1211.51 L1322.63 1211.51 L1323.21 1211.51 L1323.8 1211.51 L1324.39 1211.51 L1324.97 1211.51 L1325.56 1211.51 L1326.14 1211.51 L1326.73 1211.51 L1327.32 1211.51 L1327.9 1211.51 L1328.49 1211.51 L1329.08 1211.51 L1329.66 1211.51 L1330.25 1211.51 L1330.84 1211.51 L1331.42 1211.51 L1332.01 1211.51 L1332.6 1211.51 L1333.18 1211.51 L1333.77 1211.51 L1334.35 1211.51 L1334.94 1211.51 L1335.53 1211.51 L1336.11 1211.51 L1336.7 1211.51 L1337.29 1211.51 L1337.87 1211.51 L1338.46 1211.51 L1339.05 1211.51 L1339.63 1211.51 L1340.22 1211.51 L1340.8 1211.51 L1341.39 1211.51 L1341.98 1211.51 L1342.56 1211.51 L1343.15 1211.51 L1343.74 1211.51 L1344.32 1211.51 L1344.91 1211.51 L1345.5 1211.51 L1346.08 1211.51 L1346.67 1211.51 L1347.26 1211.51 L1347.84 1211.51 L1348.43 1211.51 L1349.01 1211.51 L1349.6 1211.51 L1350.19 1211.51 L1350.77 1211.51 L1351.36 1211.51 L1351.95 1211.51 L1352.53 1211.51 L1353.12 1211.51 L1353.71 1211.51 L1354.29 1211.51 L1354.88 1211.51 L1355.47 1211.51 L1356.05 1211.51 L1356.64 1211.51 L1357.22 1211.51 L1357.81 1211.51 L1358.4 1211.51 L1358.98 1211.51 L1359.57 1211.51 L1360.16 1211.51 L1360.74 1211.51 L1361.33 1211.51 L1361.92 1211.51 L1362.5 1211.51 L1363.09 1211.51 L1363.68 1211.51 L1364.26 1211.51 L1364.85 1211.51 L1365.43 1211.51 L1366.02 1211.51 L1366.61 1211.51 L1367.19 1211.51 L1367.78 1211.51 L1368.37 1211.51 L1368.95 1211.51 L1369.54 1211.51 L1370.13 1211.51 L1370.71 1211.51 L1371.3 1211.51 L1371.88 1211.51 L1372.47 1211.51 L1373.06 1211.51 L1373.64 1211.51 L1374.23 1211.51 L1374.82 1211.51 L1375.4 1211.51 L1375.99 1211.51 L1376.58 1211.51 L1377.16 1211.51 L1377.75 1211.51 L1378.34 1211.51 L1378.92 1211.51 L1379.51 1211.51 L1380.09 1211.51 L1380.68 1211.51 L1381.27 1211.51 L1381.85 1211.51 L1382.44 1211.51 L1383.03 1211.51 L1383.61 1211.51 L1384.2 1211.51 L1384.79 1211.51 L1385.37 1211.51 L1385.96 1211.51 L1386.55 1211.51 L1387.13 1211.51 L1387.72 1211.51 L1388.3 1211.51 L1388.89 1211.51 L1389.48 1211.51 L1390.06 1211.51 L1390.65 1211.51 L1391.24 1211.51 L1391.82 1211.51 L1392.41 1211.51 L1393 1211.51 L1393.58 1211.51 L1394.17 1211.51 L1394.75 1211.51 L1395.34 1211.51 L1395.93 1211.51 L1396.51 1211.51 L1397.1 1211.51 L1397.69 1211.51 L1398.27 1211.51 L1398.86 1211.51 L1399.45 1211.51 L1400.03 1211.51 L1400.62 1211.51 L1401.21 1211.51 L1401.79 1211.51 L1402.38 1211.51 L1402.96 1211.51 L1403.55 1211.51 L1404.14 1211.51 L1404.72 1211.51 L1405.31 1211.51 L1405.9 1211.51 L1406.48 1211.51 L1407.07 1211.51 L1407.66 1211.51 L1408.24 1211.51 L1408.83 1211.51 L1409.42 1211.51 L1410 1211.51 L1410.59 1211.51 L1411.17 1211.51 L1411.76 1211.51 L1412.35 1211.51 L1412.93 1211.51 L1413.52 1211.51 L1414.11 1211.51 L1414.69 1211.51 L1415.28 1211.51 L1415.87 1211.51 L1416.45 1211.51 L1417.04 1211.51 L1417.63 1211.51 L1418.21 1211.51 L1418.8 1211.51 L1419.38 1211.51 L1419.97 1211.51 L1420.56 1211.51 L1421.14 1211.51 L1421.73 1211.51 L1422.32 1211.51 L1422.9 1211.51 L1423.49 1211.51 L1424.08 1211.51 L1424.66 1211.51 L1425.25 1211.51 L1425.83 1211.51 L1426.42 1211.51 L1427.01 1211.51 L1427.59 1211.51 L1428.18 1211.51 L1428.77 1211.51 L1429.35 1211.51 L1429.94 1211.51 L1430.53 1211.51 L1431.11 1211.51 L1431.7 1211.51 L1432.29 1211.51 L1432.87 1211.51 L1433.46 1211.51 L1434.04 1211.51 L1434.63 1211.51 L1435.22 1211.51 L1435.8 1211.51 L1436.39 1211.51 L1436.98 1211.51 L1437.56 1211.51 L1438.15 1211.51 L1438.74 1211.51 L1439.32 1211.51 L1439.91 1211.51 L1440.5 1211.51 L1441.08 1211.51 L1441.67 1211.51 L1442.25 1211.51 L1442.84 1211.51 L1443.43 1211.51 L1444.01 1211.51 L1444.6 1211.51 L1445.19 1211.51 L1445.77 1211.51 L1446.36 1211.51 L1446.95 1211.51 L1447.53 1211.51 L1448.12 1211.51 L1448.7 1211.51 L1449.29 1211.51 L1449.88 1211.51 L1450.46 1211.51 L1451.05 1211.51 L1451.64 1211.51 L1452.22 1211.51 L1452.81 1211.51 L1453.4 1211.51 L1453.98 1211.51 L1454.57 1211.51 L1455.16 1211.51 L1455.74 1211.51 L1456.33 1211.51 L1456.91 1211.51 L1457.5 1211.51 L1458.09 1211.51 L1458.67 1211.51 L1459.26 1211.51 L1459.85 1211.51 L1460.43 1211.51 L1461.02 1211.51 L1461.61 1211.51 L1462.19 1211.51 L1462.78 1211.51 L1463.37 1211.51 L1463.95 1211.51 L1464.54 1211.51 L1465.12 1211.51 L1465.71 1211.51 L1466.3 1211.51 L1466.88 1211.51 L1467.47 1211.51 L1468.06 1211.51 L1468.64 1211.51 L1469.23 1211.51 L1469.82 1211.51 L1470.4 1211.51 L1470.99 1211.51 L1471.57 1211.51 L1472.16 1211.51 L1472.75 1211.51 L1473.33 1211.51 L1473.92 1211.51 L1474.51 1211.51 L1475.09 1211.51 L1475.68 1211.51 L1476.27 1211.51 L1476.85 1211.51 L1477.44 1211.51 L1478.03 1211.51 L1478.61 1211.51 L1479.2 1211.51 L1479.78 1211.51 L1480.37 1211.51 L1480.96 1211.51 L1481.54 1211.51 L1482.13 1211.51 L1482.72 1211.51 L1483.3 1211.51 L1483.89 1211.51 L1484.48 1211.51 L1485.06 1211.51 L1485.65 1211.51 L1486.24 1211.51 L1486.82 1211.51 L1487.41 1211.51 L1487.99 1211.51 L1488.58 1211.51 L1489.17 1211.51 L1489.75 1211.51 L1490.34 1211.51 L1490.93 1211.51 L1491.51 1211.51 L1492.1 1211.51 L1492.69 1211.51 L1493.27 1211.51 L1493.86 1211.51 L1494.45 1211.51 L1495.03 1211.51 L1495.62 1211.51 L1496.2 1211.51 L1496.79 1211.51 L1497.38 1211.51 L1497.96 1211.51 L1498.55 1211.51 L1499.14 1211.51 L1499.72 1211.51 L1500.31 1211.51 L1500.9 1211.51 L1501.48 1211.51 L1502.07 1211.51 L1502.65 1211.51 L1503.24 1211.51 L1503.83 1211.51 L1504.41 1211.51 L1505 1211.51 L1505.59 1211.51 L1506.17 1211.51 L1506.76 1211.51 L1507.35 1211.51 L1507.93 1211.51 L1508.52 1211.51 L1509.11 1211.51 L1509.69 1211.51 L1510.28 1211.51 L1510.86 1211.51 L1511.45 1211.51 L1512.04 1211.51 L1512.62 1211.51 L1513.21 1211.51 L1513.8 1211.51 L1514.38 1211.51 L1514.97 1211.51 L1515.56 1211.51 L1516.14 1211.51 L1516.73 1211.51 L1517.32 1211.51 L1517.9 1211.51 L1518.49 1211.51 L1519.07 1211.51 L1519.66 1211.51 L1520.25 1211.51 L1520.83 1211.51 L1521.42 1211.51 L1522.01 1211.51 L1522.59 1211.51 L1523.18 1211.51 L1523.77 1211.51 L1524.35 1211.51 L1524.94 1211.51 L1525.52 1211.51 L1526.11 1211.51 L1526.7 1211.51 L1527.28 1211.51 L1527.87 1211.51 L1528.46 1211.51 L1529.04 1211.51 L1529.63 1211.51 L1530.22 1211.51 L1530.8 1211.51 L1531.39 1211.51 L1531.98 1211.51 L1532.56 1211.51 L1533.15 1211.51 L1533.73 1211.51 L1534.32 1211.51 L1534.91 1211.51 L1535.49 1211.51 L1536.08 1211.51 L1536.67 1211.51 L1537.25 1211.51 L1537.84 1211.51 L1538.43 1211.51 L1539.01 1211.51 L1539.6 1211.51 L1540.19 1211.51 L1540.77 1211.51 L1541.36 1211.51 L1541.94 1211.51 L1542.53 1211.51 L1543.12 1211.51 L1543.7 1211.51 L1544.29 1211.51 L1544.88 1211.51 L1545.46 1211.51 L1546.05 1211.51 L1546.64 1211.51 L1547.22 1211.51 L1547.81 1211.51 L1548.4 1211.51 L1548.98 1211.51 L1549.57 1211.51 L1550.15 1211.51 L1550.74 1211.51 L1551.33 1211.51 L1551.91 1211.51 L1552.5 1211.51 L1553.09 1211.51 L1553.67 1211.51 L1554.26 1211.51 L1554.85 1211.51 L1555.43 1211.51 L1556.02 1211.51 L1556.6 1211.51 L1557.19 1211.51 L1557.78 1211.51 L1558.36 1211.51 L1558.95 1211.51 L1559.54 1211.51 L1560.12 1211.51 L1560.71 1211.51 L1561.3 1211.51 L1561.88 1211.51 L1562.47 1211.51 L1563.06 1211.51 L1563.64 1211.51 L1564.23 1211.51 L1564.81 1211.51 L1565.4 1211.51 L1565.99 1211.51 L1566.57 1211.51 L1567.16 1211.51 L1567.75 1211.51 L1568.33 1211.51 L1568.92 1211.51 L1569.51 1211.51 L1570.09 1211.51 L1570.68 1211.51 L1571.27 1211.51 L1571.85 1211.51 L1572.44 1211.51 L1573.02 1211.51 L1573.61 1211.51 L1574.2 1211.51 L1574.78 1211.51 L1575.37 1211.51 L1575.96 1211.51 L1576.54 1211.51 L1577.13 1211.51 L1577.72 1211.51 L1578.3 1211.51 L1578.89 1211.51 L1579.47 1211.51 L1580.06 1211.51 L1580.65 1211.51 L1581.23 1211.51 L1581.82 1211.51 L1582.41 1211.51 L1582.99 1211.51 L1583.58 1211.51 L1584.17 1211.51 L1584.75 1211.51 L1585.34 1211.51 L1585.93 1211.51 L1586.51 1211.51 L1587.1 1211.51 L1587.68 1211.51 L1588.27 1211.51 L1588.86 1211.51 L1589.44 1211.51 L1590.03 1211.51 L1590.62 1211.51 L1591.2 1211.51 L1591.79 1211.51 L1592.38 1211.51 L1592.96 1211.51 L1593.55 1211.51 L1594.14 1211.51 L1594.72 1211.51 L1595.31 1211.51 L1595.89 1211.51 L1596.48 1211.51 L1597.07 1211.51 L1597.65 1211.51 L1598.24 1211.51 L1598.83 1211.51 L1599.41 1211.51 L1600 1211.51 L1600.59 1211.51 L1601.17 1211.51 L1601.76 1211.51 L1602.34 1211.51 L1602.93 1211.51 L1603.52 1211.51 L1604.1 1211.51 L1604.69 1211.51 L1605.28 1211.51 L1605.86 1211.51 L1606.45 1211.51 L1607.04 1211.51 L1607.62 1211.51 L1608.21 1211.51 L1608.8 1211.51 L1609.38 1211.51 L1609.97 1211.51 L1610.55 1211.51 L1611.14 1211.51 L1611.73 1211.51 L1612.31 1211.51 L1612.9 1211.51 L1613.49 1211.51 L1614.07 1211.51 L1614.66 1211.51 L1615.25 1211.51 L1615.83 1211.51 L1616.42 1211.51 L1617.01 1211.51 L1617.59 1211.51 L1618.18 1211.51 L1618.76 1211.51 L1619.35 1211.51 L1619.94 1211.51 L1620.52 1211.51 L1621.11 1211.51 L1621.7 1211.51 L1622.28 1211.51 L1622.87 1211.51 L1623.46 1211.51 L1624.04 1211.51 L1624.63 1211.51 L1625.22 1211.51 L1625.8 1211.51 L1626.39 1211.51 L1626.97 1211.51 L1627.56 1211.51 L1628.15 1211.51 L1628.73 1211.51 L1629.32 1211.51 L1629.91 1211.51 L1630.49 1211.51 L1631.08 1211.51 L1631.67 1211.51 L1632.25 1211.51 L1632.84 1211.51 L1633.42 1211.51 L1634.01 1211.51 L1634.6 1211.51 L1635.18 1211.51 L1635.77 1211.51 L1636.36 1211.51 L1636.94 1211.51 L1637.53 1211.51 L1638.12 1211.51 L1638.7 1211.51 L1639.29 1211.51 L1639.88 1211.51 L1640.46 1211.51 L1641.05 1211.51 L1641.63 1211.51 L1642.22 1211.51 L1642.81 1211.51 L1643.39 1211.51 L1643.98 1211.51 L1644.57 1211.51 L1645.15 1211.51 L1645.74 1211.51 L1646.33 1211.51 L1646.91 1211.51 L1647.5 1211.51 L1648.09 1211.51 L1648.67 1211.51 L1649.26 1211.51 L1649.84 1211.51 L1650.43 1211.51 L1651.02 1211.51 L1651.6 1211.51 L1652.19 1211.51 L1652.78 1211.51 L1653.36 1211.51 L1653.95 1211.51 L1654.54 1211.51 L1655.12 1211.51 L1655.71 1211.51 L1656.29 1211.51 L1656.88 1211.51 L1657.47 1211.51 L1658.05 1211.51 L1658.64 1211.51 L1659.23 1211.51 L1659.81 1211.51 L1660.4 1211.51 L1660.99 1211.51 L1661.57 1211.51 L1662.16 1211.51 L1662.75 1211.51 L1663.33 1211.51 L1663.92 1211.51 L1664.5 1211.51 L1665.09 1211.51 L1665.68 1211.51 L1666.26 1211.51 L1666.85 1211.51 L1667.44 1211.51 L1668.02 1211.51 L1668.61 1211.51 L1669.2 1211.51 L1669.78 1211.51 L1670.37 1211.51 L1670.96 1211.51 L1671.54 1211.51 L1672.13 1211.51 L1672.71 1211.51 L1673.3 1211.51 L1673.89 1211.51 L1674.47 1211.51 L1675.06 1211.51 L1675.65 1211.51 L1676.23 1211.51 L1676.82 1211.51 L1677.41 1211.51 L1677.99 1211.51 L1678.58 1211.51 L1679.17 1211.51 L1679.75 1211.51 L1680.34 1211.51 L1680.92 1211.51 L1681.51 1211.51 L1682.1 1211.51 L1682.68 1211.51 L1683.27 1211.51 L1683.86 1211.51 L1684.44 1211.51 L1685.03 1211.51 L1685.62 1211.51 L1686.2 1211.51 L1686.79 1211.51 L1687.37 1211.51 L1687.96 1211.51 L1688.55 1211.51 L1689.13 1211.51 L1689.72 1211.51 L1690.31 1211.51 L1690.89 1211.51 L1691.48 1211.51 L1692.07 1211.51 L1692.65 1211.51 L1693.24 1211.51 L1693.83 1211.51 L1694.41 1211.51 L1695 1211.51 L1695.58 1211.51 L1696.17 1211.51 L1696.76 1211.51 L1697.34 1211.51 L1697.93 1211.51 L1698.52 1211.51 L1699.1 1211.51 L1699.69 1211.51 L1700.28 1211.51 L1700.86 1211.51 L1701.45 1211.51 L1702.04 1211.51 L1702.62 1211.51 L1703.21 1211.51 L1703.79 1211.51 L1704.38 1211.51 L1704.97 1211.51 L1705.55 1211.51 L1706.14 1211.51 L1706.73 1211.51 L1707.31 1211.51 L1707.9 1211.51 L1708.49 1211.51 L1709.07 1211.51 L1709.66 1211.51 L1710.24 1211.51 L1710.83 1211.51 L1711.42 1211.51 L1712 1211.51 L1712.59 1211.51 L1713.18 1211.51 L1713.76 1211.51 L1714.35 1211.51 L1714.94 1211.51 L1715.52 1211.51 L1716.11 1211.51 L1716.7 1211.51 L1717.28 1211.51 L1717.87 1211.51 L1718.45 1211.51 L1719.04 1211.51 L1719.63 1211.51 L1720.21 1211.51 L1720.8 1211.51 L1721.39 1211.51 L1721.97 1211.51 L1722.56 1211.51 L1723.15 1211.51 L1723.73 1211.51 L1724.32 1211.51 L1724.91 1211.51 L1725.49 1211.51 L1726.08 1211.51 L1726.66 1211.51 L1727.25 1211.51 L1727.84 1211.51 L1728.42 1211.51 L1729.01 1211.51 L1729.6 1211.51 L1730.18 1211.51 L1730.77 1211.51 L1731.36 1211.51 L1731.94 1211.51 L1732.53 1211.51 L1733.11 1211.51 L1733.7 1211.51 L1734.29 1211.51 L1734.87 1211.51 L1735.46 1211.51 L1736.05 1211.51 L1736.63 1211.51 L1737.22 1211.51 L1737.81 1211.51 L1738.39 1211.51 L1738.98 1211.51 L1739.57 1211.51 L1740.15 1211.51 L1740.74 1211.51 L1741.32 1211.51 L1741.91 1211.51 L1742.5 1211.51 L1743.08 1211.51 L1743.67 1211.51 L1744.26 1211.51 L1744.84 1211.51 L1745.43 1211.51 L1746.02 1211.51 L1746.6 1211.51 L1747.19 1211.51 L1747.78 1211.51 L1748.36 1211.51 L1748.95 1211.51 L1749.53 1211.51 L1750.12 1211.51 L1750.71 1211.51 L1751.29 1211.51 L1751.88 1211.51 L1752.47 1211.51 L1753.05 1211.51 L1753.64 1211.51 L1754.23 1211.51 L1754.81 1211.51 L1755.4 1211.51 L1755.99 1211.51 L1756.57 1211.51 L1757.16 1211.51 L1757.74 1211.51 L1758.33 1211.51 L1758.92 1211.51 L1759.5 1211.51 L1760.09 1211.51 L1760.68 1211.51 L1761.26 1211.51 L1761.85 1211.51 L1762.44 1211.51 L1763.02 1211.51 L1763.61 1211.51 L1764.19 1211.51 L1764.78 1211.51 L1765.37 1211.51 L1765.95 1211.51 L1766.54 1211.51 L1767.13 1211.51 L1767.71 1211.51 L1768.3 1211.51 L1768.89 1211.51 L1769.47 1211.51 L1770.06 1211.51 L1770.65 1211.51 L1771.23 1211.51 L1771.82 1211.51 L1772.4 1211.51 L1772.99 1211.51 L1773.58 1211.51 L1774.16 1211.51 L1774.75 1211.51 L1775.34 1211.51 L1775.92 1211.51 L1776.51 1211.51 L1777.1 1211.51 L1777.68 1211.51 L1778.27 1211.51 L1778.86 1211.51 L1779.44 1211.51 L1780.03 1211.51 L1780.61 1211.51 L1781.2 1211.51 L1781.79 1211.51 L1782.37 1211.51 L1782.96 1211.51 L1783.55 1211.51 L1784.13 1211.51 L1784.72 1211.51 L1785.31 1211.51 L1785.89 1211.51 L1786.48 1211.51 L1787.06 1211.51 L1787.65 1211.51 L1788.24 1211.51 L1788.82 1211.51 L1789.41 1211.51 L1790 1211.51 L1790.58 1211.51 L1791.17 1211.51 L1791.76 1211.51 L1792.34 1211.51 L1792.93 1211.51 L1793.52 1211.51 L1794.1 1211.51 L1794.69 1211.51 L1795.27 1211.51 L1795.86 1211.51 L1796.45 1211.51 L1797.03 1211.51 L1797.62 1211.51 L1798.21 1211.51 L1798.79 1211.51 L1799.38 1211.51 L1799.97 1211.51 L1800.55 1211.51 L1801.14 1211.51 L1801.73 1211.51 L1802.31 1211.51 L1802.9 1211.51 L1803.48 1211.51 L1804.07 1211.51 L1804.66 1211.51 L1805.24 1211.51 L1805.83 1211.51 L1806.42 1211.51 L1807 1211.51 L1807.59 1211.51 L1808.18 1211.51 L1808.76 1211.51 L1809.35 1211.51 L1809.94 1211.51 L1810.52 1211.51 L1811.11 1211.51 L1811.69 1211.51 L1812.28 1211.51 L1812.87 1211.51 L1813.45 1211.51 L1814.04 1211.51 L1814.63 1211.51 L1815.21 1211.51 L1815.8 1211.51 L1816.39 1211.51 L1816.97 1211.51 L1817.56 1211.51 L1818.14 1211.51 L1818.73 1211.51 L1819.32 1211.51 L1819.9 1211.51 L1820.49 1211.51 L1821.08 1211.51 L1821.66 1211.51 L1822.25 1211.51 L1822.84 1211.51 L1823.42 1211.51 L1824.01 1211.51 L1824.6 1211.51 L1825.18 1211.51 L1825.77 1211.51 L1826.35 1211.51 L1826.94 1211.51 L1827.53 1211.51 L1828.11 1211.51 L1828.7 1211.51 L1829.29 1211.51 L1829.87 1211.51 L1830.46 1211.51 L1831.05 1211.51 L1831.63 1211.51 L1832.22 1211.51 L1832.81 1211.51 L1833.39 1211.51 L1833.98 1211.51 L1834.56 1211.51 L1835.15 1211.51 L1835.74 1211.51 L1836.32 1211.51 L1836.91 1211.51 L1837.5 1211.51 L1838.08 1211.51 L1838.67 1211.51 L1839.26 1211.51 L1839.84 1211.51 L1840.43 1211.51 L1841.01 1211.51 L1841.6 1211.51 L1842.19 1211.51 L1842.77 1211.51 L1843.36 1211.51 L1843.95 1211.51 L1844.53 1211.51 L1845.12 1211.51 L1845.71 1211.51 L1846.29 1211.51 L1846.88 1211.51 L1847.47 1211.51 L1848.05 1211.51 L1848.64 1211.51 L1849.22 1211.51 L1849.81 1211.51 L1850.4 1211.51 L1850.98 1211.51 L1851.57 1211.51 L1852.16 1211.51 L1852.74 1211.51 L1853.33 1211.51 L1853.92 1211.51 L1854.5 1211.51 L1855.09 1211.51 L1855.68 1211.51 L1856.26 1211.51 L1856.85 1211.51 L1857.43 1211.51 L1858.02 1211.51 L1858.61 1211.51 L1859.19 1211.51 L1859.78 1211.51 L1860.37 1211.51 L1860.95 1211.51 L1861.54 1211.51 L1862.13 1211.51 L1862.71 1211.51 L1863.3 1211.51 L1863.88 1211.51 L1864.47 1211.51 L1865.06 1211.51 L1865.64 1211.51 L1866.23 1211.51 L1866.82 1211.51 L1867.4 1211.51 L1867.99 1211.51 L1868.58 1211.51 L1869.16 1211.51 L1869.75 1211.51 L1870.34 1211.51 L1870.92 1211.51 L1871.51 1211.51 L1872.09 1211.51 L1872.68 1211.51 L1873.27 1211.51 L1873.85 1211.51 L1874.44 1211.51 L1875.03 1211.51 L1875.61 1211.51 L1876.2 1211.51 L1876.79 1211.51 L1877.37 1211.51 L1877.96 1211.51 L1878.55 1211.51 L1879.13 1211.51 L1879.72 1211.51 L1880.3 1211.51 L1880.89 1211.51 L1881.48 1211.51 L1882.06 1211.51 L1882.65 1211.51 L1883.24 1211.51 L1883.82 1211.51 L1884.41 1211.51 L1885 1211.51 L1885.58 1211.51 L1886.17 1211.51 L1886.76 1211.51 L1887.34 1211.51 L1887.93 1211.51 L1888.51 1211.51 L1889.1 1211.51 L1889.69 1211.51 L1890.27 1211.51 L1890.86 1211.51 L1891.45 1211.51 L1892.03 1211.51 L1892.62 1211.51 L1893.21 1211.51 L1893.79 1211.51 L1894.38 1211.51 L1894.96 1211.51 L1895.55 1211.51 L1896.14 1211.51 L1896.72 1211.51 L1897.31 1211.51 L1897.9 1211.51 L1898.48 1211.51 L1899.07 1211.51 L1899.66 1211.51 L1900.24 1211.51 L1900.83 1211.51 L1901.42 1211.51 L1902 1211.51 L1902.59 1211.51 L1903.17 1211.51 L1903.76 1211.51 L1904.35 1211.51 L1904.93 1211.51 L1905.52 1211.51 L1906.11 1211.51 L1906.69 1211.51 L1907.28 1211.51 L1907.87 1211.51 L1908.45 1211.51 L1909.04 1211.51 L1909.63 1211.51 L1910.21 1211.51 L1910.8 1211.51 L1911.38 1211.51 L1911.97 1211.51 L1912.56 1211.51 L1913.14 1211.51 L1913.73 1211.51 L1914.32 1211.51 L1914.9 1211.51 L1915.49 1211.51 L1916.08 1211.51 L1916.66 1211.51 L1917.25 1211.51 L1917.83 1211.51 L1918.42 1211.51 L1919.01 1211.51 L1919.59 1211.51 L1920.18 1211.51 L1920.77 1211.51 L1921.35 1211.51 L1921.94 1211.51 L1922.53 1211.51 L1923.11 1211.51 L1923.7 1211.51 L1924.29 1211.51 L1924.87 1211.51 L1925.46 1211.51 L1926.04 1211.51 L1926.63 1211.51 L1927.22 1211.51 L1927.8 1211.51 L1928.39 1211.51 L1928.98 1211.51 L1929.56 1211.51 L1930.15 1211.51 L1930.74 1211.51 L1931.32 1211.51 L1931.91 1211.51 L1932.5 1211.51 L1933.08 1211.51 L1933.67 1211.51 L1934.25 1211.51 L1934.84 1211.51 L1935.43 1211.51 L1936.01 1211.51 L1936.6 1211.51 L1937.19 1211.51 L1937.77 1211.51 L1938.36 1211.51 L1938.95 1211.51 L1939.53 1211.51 L1940.12 1211.51 L1940.71 1211.51 L1941.29 1211.51 L1941.88 1211.51 L1942.46 1211.51 L1943.05 1211.51 L1943.64 1211.51 L1944.22 1211.51 L1944.81 1211.51 L1945.4 1211.51 L1945.98 1211.51 L1946.57 1211.51 L1947.16 1211.51 L1947.74 1211.51 L1948.33 1211.51 L1948.91 1211.51 L1949.5 1211.51 L1950.09 1211.51 L1950.67 1211.51 L1951.26 1211.51 L1951.85 1211.51 L1952.43 1211.51 L1953.02 1211.51 L1953.61 1211.51 L1954.19 1211.51 L1954.78 1211.51 L1955.37 1211.51 L1955.95 1211.51 L1956.54 1211.51 L1957.12 1211.51 L1957.71 1211.51 L1958.3 1211.51 L1958.88 1211.51 L1959.47 1211.51 L1960.06 1211.51 L1960.64 1211.51 L1961.23 1211.51 L1961.82 1211.51 L1962.4 1211.51 L1962.99 1211.51 L1963.58 1211.51 L1964.16 1211.51 L1964.75 1211.51 L1965.33 1211.51 L1965.92 1211.51 L1966.51 1211.51 L1967.09 1211.51 L1967.68 1211.51 L1968.27 1211.51 L1968.85 1211.51 L1969.44 1211.51 L1970.03 1211.51 L1970.61 1211.51 L1971.2 1211.51 L1971.78 1211.51 L1972.37 1211.51 L1972.96 1211.51 L1973.54 1211.51 L1974.13 1211.51 L1974.72 1211.51 L1975.3 1211.51 L1975.89 1211.51 L1976.48 1211.51 L1977.06 1211.51 L1977.65 1211.51 L1978.24 1211.51 L1978.82 1211.51 L1979.41 1211.51 L1979.99 1211.51 L1980.58 1211.51 L1981.17 1211.51 L1981.75 1211.51 L1982.34 1211.51 L1982.93 1211.51 L1983.51 1211.51 L1984.1 1211.51 L1984.69 1211.51 L1985.27 1211.51 L1985.86 1211.51 L1986.45 1211.51 L1987.03 1211.51 L1987.62 1211.51 L1988.2 1211.51 L1988.79 1211.51 L1989.38 1211.51 L1989.96 1211.51 L1990.55 1211.51 L1991.14 1211.51 L1991.72 1211.51 L1992.31 1211.51 L1992.9 1211.51 L1993.48 1211.51 L1994.07 1211.51 L1994.65 1211.51 L1995.24 1211.51 L1995.83 1211.51 L1996.41 1211.51 L1997 1211.51 L1997.59 1211.51 L1998.17 1211.51 L1998.76 1211.51 L1999.35 1211.51 L1999.93 1211.51 L2000.52 1211.51 L2001.11 1211.51 L2001.69 1211.51 L2002.28 1211.51 L2002.86 1211.51 L2003.45 1211.51 L2004.04 1211.51 L2004.62 1211.51 L2005.21 1211.51 L2005.8 1211.51 L2006.38 1211.51 L2006.97 1211.51 L2007.56 1211.51 L2008.14 1211.51 L2008.73 1211.51 L2009.32 1211.51 L2009.9 1211.51 L2010.49 1211.51 L2011.07 1211.51 L2011.66 1211.51 L2012.25 1211.51 L2012.83 1211.51 L2013.42 1211.51 L2014.01 1211.51 L2014.59 1211.51 L2015.18 1211.51 L2015.77 1211.51 L2016.35 1211.51 L2016.94 1211.51 L2017.53 1211.51 L2018.11 1211.51 L2018.7 1211.51 L2019.28 1211.51 L2019.87 1211.51 L2020.46 1211.51 L2021.04 1211.51 L2021.63 1211.51 L2022.22 1211.51 L2022.8 1211.51 L2023.39 1211.51 L2023.98 1211.51 L2024.56 1211.51 L2025.15 1211.51 L2025.73 1211.51 L2026.32 1211.51 L2026.91 1211.51 L2027.49 1211.51 L2028.08 1211.51 L2028.67 1211.51 L2029.25 1211.51 L2029.84 1211.51 L2030.43 1211.51 L2031.01 1211.51 L2031.6 1211.51 L2032.19 1211.51 L2032.77 1211.51 L2033.36 1211.51 L2033.94 1211.51 L2034.53 1211.51 L2035.12 1211.51 L2035.7 1211.51 L2036.29 1211.51 L2036.88 1211.51 L2037.46 1211.51 L2038.05 1211.51 L2038.64 1211.51 L2039.22 1211.51 L2039.81 1211.51 L2040.4 1211.51 L2040.98 1211.51 L2041.57 1211.51 L2042.15 1211.51 L2042.74 1211.51 L2043.33 1211.51 L2043.91 1211.51 L2044.5 1211.51 L2045.09 1211.51 L2045.67 1211.51 L2046.26 1211.51 L2046.85 1211.51 L2047.43 1211.51 L2048.02 1211.51 L2048.6 1211.51 L2049.19 1211.51 L2049.78 1211.51 L2050.36 1211.51 L2050.95 1211.51 L2051.54 1211.51 L2052.12 1211.51 L2052.71 1211.51 L2053.3 1211.51 L2053.88 1211.51 L2054.47 1211.51 L2055.06 1211.51 L2055.64 1211.51 L2056.23 1211.51 L2056.81 1211.51 L2057.4 1211.51 L2057.99 1211.51 L2058.57 1211.51 L2059.16 1211.51 L2059.75 1211.51 L2060.33 1211.51 L2060.92 1211.51 L2061.51 1211.51 L2062.09 1211.51 L2062.68 1211.51 L2063.27 1211.51 L2063.85 1211.51 L2064.44 1211.51 L2065.02 1211.51 L2065.61 1211.51 L2066.2 1211.51 L2066.78 1211.51 L2067.37 1211.51 L2067.96 1211.51 L2068.54 1211.51 L2069.13 1211.51 L2069.72 1211.51 L2070.3 1211.51 L2070.89 1211.51 L2071.48 1211.51 L2072.06 1211.51 L2072.65 1211.51 L2073.23 1211.51 L2073.82 1211.51 L2074.41 1211.51 L2074.99 1211.51 L2075.58 1211.51 L2076.17 1211.51 L2076.75 1211.51 L2077.34 1211.51 L2077.93 1211.51 L2078.51 1211.51 L2079.1 1211.51 L2079.68 1211.51 L2080.27 1211.51 L2080.86 1211.51 L2081.44 1211.51 L2082.03 1211.51 L2082.62 1211.51 L2083.2 1211.51 L2083.79 1211.51 L2084.38 1211.51 L2084.96 1211.51 L2085.55 1211.51 L2086.14 1211.51 L2086.72 1211.51 L2087.31 1211.51 L2087.89 1211.51 L2088.48 1211.51 L2089.07 1211.51 L2089.65 1211.51 L2090.24 1211.51 L2090.83 1211.51 L2091.41 1211.51 L2092 1211.51 L2092.59 1211.51 L2093.17 1211.51 L2093.76 1211.51 L2094.35 1211.51 L2094.93 1211.51 L2095.52 1211.51 L2096.1 1211.51 L2096.69 1211.51 L2097.28 1211.51 L2097.86 1211.51 L2098.45 1211.51 L2099.04 1211.51 L2099.62 1211.51 L2100.21 1211.51 L2100.8 1211.51 L2101.38 1211.51 L2101.97 1211.51 L2102.55 1211.51 L2103.14 1211.51 L2103.73 1211.51 L2104.31 1211.51 L2104.9 1211.51 L2105.49 1211.51 L2106.07 1211.51 L2106.66 1211.51 L2107.25 1211.51 L2107.83 1211.51 L2108.42 1211.51 L2109.01 1211.51 L2109.59 1211.51 L2110.18 1211.51 L2110.76 1211.51 L2111.35 1211.51 L2111.94 1211.51 L2112.52 1211.51 L2113.11 1211.51 L2113.7 1211.51 L2114.28 1211.51 L2114.87 1211.51 L2115.46 1211.51 L2116.04 1211.51 L2116.63 1211.51 L2117.22 1211.51 L2117.8 1211.51 L2118.39 1211.51 L2118.97 1211.51 L2119.56 1211.51 L2120.15 1211.51 L2120.73 1211.51 L2121.32 1211.51 L2121.91 1211.51 L2122.49 1211.51 L2123.08 1211.51 L2123.67 1211.51 L2124.25 1211.51 L2124.84 1211.51 L2125.42 1211.51 L2126.01 1211.51 L2126.6 1211.51 L2127.18 1211.51 L2127.77 1211.51 L2128.36 1211.51 L2128.94 1211.51 L2129.53 1211.51 L2130.12 1211.51 L2130.7 1211.51 L2131.29 1211.51 L2131.88 1211.51 L2132.46 1211.51 L2133.05 1211.51 L2133.63 1211.51 L2134.22 1211.51 L2134.81 1211.51 L2135.39 1211.51 L2135.98 1211.51 L2136.57 1211.51 L2137.15 1211.51 L2137.74 1211.51 L2138.33 1211.51 L2138.91 1211.51 L2139.5 1211.51 L2140.09 1211.51 L2140.67 1211.51 L2141.26 1211.51 L2141.84 1211.51 L2142.43 1211.51 L2143.02 1211.51 L2143.6 1211.51 L2144.19 1211.51 L2144.78 1211.51 L2145.36 1211.51 L2145.95 1211.51 L2146.54 1211.51 L2147.12 1211.51 L2147.71 1211.51 L2148.3 1211.51 L2148.88 1211.51 L2149.47 1211.51 L2150.05 1211.51 L2150.64 1211.51 L2151.23 1211.51 L2151.81 1211.51 L2152.4 1211.51 L2152.99 1211.51 L2153.57 1211.51 L2154.16 1211.51 L2154.75 1211.51 L2155.33 1211.51 L2155.92 1211.51 L2156.5 1211.51 L2157.09 1211.51 L2157.68 1211.51 L2158.26 1211.51 L2158.26 1210.91 L2157.68 1210.91 L2157.09 1210.91 L2156.5 1210.91 L2155.92 1210.91 L2155.33 1210.91 L2154.75 1210.91 L2154.16 1210.91 L2153.57 1210.91 L2152.99 1210.91 L2152.4 1210.91 L2151.81 1210.91 L2151.23 1210.91 L2150.64 1210.91 L2150.05 1210.91 L2149.47 1210.91 L2148.88 1210.91 L2148.3 1210.91 L2147.71 1210.91 L2147.12 1210.91 L2146.54 1210.91 L2145.95 1210.91 L2145.36 1210.91 L2144.78 1210.91 L2144.19 1210.91 L2143.6 1210.91 L2143.02 1210.91 L2142.43 1210.91 L2141.84 1210.91 L2141.26 1210.91 L2140.67 1210.91 L2140.09 1210.91 L2139.5 1210.91 L2138.91 1210.91 L2138.33 1210.91 L2137.74 1210.91 L2137.15 1210.91 L2136.57 1210.91 L2135.98 1210.91 L2135.39 1210.91 L2134.81 1210.91 L2134.22 1210.91 L2133.63 1210.91 L2133.05 1210.91 L2132.46 1210.91 L2131.88 1210.91 L2131.29 1210.91 L2130.7 1210.91 L2130.12 1210.91 L2129.53 1210.91 L2128.94 1210.91 L2128.36 1210.91 L2127.77 1210.91 L2127.18 1210.91 L2126.6 1210.91 L2126.01 1210.91 L2125.42 1210.91 L2124.84 1210.91 L2124.25 1210.91 L2123.67 1210.91 L2123.08 1210.91 L2122.49 1210.91 L2121.91 1210.91 L2121.32 1210.91 L2120.73 1210.91 L2120.15 1210.91 L2119.56 1210.91 L2118.97 1210.91 L2118.39 1210.91 L2117.8 1210.91 L2117.22 1210.91 L2116.63 1210.91 L2116.04 1210.91 L2115.46 1210.91 L2114.87 1210.91 L2114.28 1210.91 L2113.7 1210.91 L2113.11 1210.91 L2112.52 1210.91 L2111.94 1210.91 L2111.35 1210.91 L2110.76 1210.91 L2110.18 1210.91 L2109.59 1210.91 L2109.01 1210.91 L2108.42 1210.91 L2107.83 1210.91 L2107.25 1210.91 L2106.66 1210.91 L2106.07 1210.91 L2105.49 1210.91 L2104.9 1210.91 L2104.31 1210.91 L2103.73 1210.91 L2103.14 1210.91 L2102.55 1210.91 L2101.97 1210.91 L2101.38 1210.91 L2100.8 1210.91 L2100.21 1210.91 L2099.62 1210.91 L2099.04 1210.91 L2098.45 1210.91 L2097.86 1210.91 L2097.28 1210.91 L2096.69 1210.91 L2096.1 1210.91 L2095.52 1210.91 L2094.93 1210.91 L2094.35 1210.91 L2093.76 1210.91 L2093.17 1210.91 L2092.59 1210.91 L2092 1210.91 L2091.41 1210.91 L2090.83 1210.91 L2090.24 1210.91 L2089.65 1210.91 L2089.07 1210.91 L2088.48 1210.91 L2087.89 1210.91 L2087.31 1210.91 L2086.72 1210.91 L2086.14 1210.91 L2085.55 1210.91 L2084.96 1210.91 L2084.38 1210.91 L2083.79 1210.91 L2083.2 1210.91 L2082.62 1210.91 L2082.03 1210.91 L2081.44 1210.91 L2080.86 1210.91 L2080.27 1210.91 L2079.68 1210.91 L2079.1 1210.91 L2078.51 1210.91 L2077.93 1210.91 L2077.34 1210.91 L2076.75 1210.91 L2076.17 1210.91 L2075.58 1210.91 L2074.99 1210.91 L2074.41 1210.91 L2073.82 1210.91 L2073.23 1210.91 L2072.65 1210.91 L2072.06 1210.91 L2071.48 1210.91 L2070.89 1210.91 L2070.3 1210.91 L2069.72 1210.91 L2069.13 1210.91 L2068.54 1210.91 L2067.96 1210.91 L2067.37 1210.91 L2066.78 1210.91 L2066.2 1210.91 L2065.61 1210.91 L2065.02 1210.91 L2064.44 1210.91 L2063.85 1210.91 L2063.27 1210.91 L2062.68 1210.91 L2062.09 1210.91 L2061.51 1210.91 L2060.92 1210.91 L2060.33 1210.91 L2059.75 1210.91 L2059.16 1210.91 L2058.57 1210.91 L2057.99 1210.91 L2057.4 1210.91 L2056.81 1210.91 L2056.23 1210.91 L2055.64 1210.91 L2055.06 1210.91 L2054.47 1210.91 L2053.88 1210.91 L2053.3 1210.91 L2052.71 1210.91 L2052.12 1210.91 L2051.54 1210.91 L2050.95 1210.91 L2050.36 1210.91 L2049.78 1210.91 L2049.19 1210.91 L2048.6 1210.91 L2048.02 1210.91 L2047.43 1210.91 L2046.85 1210.91 L2046.26 1210.91 L2045.67 1210.91 L2045.09 1210.91 L2044.5 1210.91 L2043.91 1210.91 L2043.33 1210.91 L2042.74 1210.91 L2042.15 1210.91 L2041.57 1210.91 L2040.98 1210.91 L2040.4 1210.91 L2039.81 1210.91 L2039.22 1210.91 L2038.64 1210.91 L2038.05 1210.91 L2037.46 1210.91 L2036.88 1210.91 L2036.29 1210.91 L2035.7 1210.91 L2035.12 1210.91 L2034.53 1210.91 L2033.94 1210.91 L2033.36 1210.91 L2032.77 1210.91 L2032.19 1210.91 L2031.6 1210.91 L2031.01 1210.91 L2030.43 1210.91 L2029.84 1210.91 L2029.25 1210.91 L2028.67 1210.91 L2028.08 1210.91 L2027.49 1210.91 L2026.91 1210.91 L2026.32 1210.91 L2025.73 1210.91 L2025.15 1210.91 L2024.56 1210.91 L2023.98 1210.91 L2023.39 1210.91 L2022.8 1210.91 L2022.22 1210.91 L2021.63 1210.91 L2021.04 1210.91 L2020.46 1210.91 L2019.87 1210.91 L2019.28 1210.91 L2018.7 1210.91 L2018.11 1210.91 L2017.53 1210.91 L2016.94 1210.91 L2016.35 1210.91 L2015.77 1210.91 L2015.18 1210.91 L2014.59 1210.91 L2014.01 1210.91 L2013.42 1210.91 L2012.83 1210.91 L2012.25 1210.91 L2011.66 1210.91 L2011.07 1210.91 L2010.49 1210.91 L2009.9 1210.91 L2009.32 1210.91 L2008.73 1210.91 L2008.14 1210.91 L2007.56 1210.91 L2006.97 1210.91 L2006.38 1210.91 L2005.8 1210.91 L2005.21 1210.91 L2004.62 1210.91 L2004.04 1210.91 L2003.45 1210.91 L2002.86 1210.91 L2002.28 1210.91 L2001.69 1210.91 L2001.11 1210.91 L2000.52 1210.91 L1999.93 1210.91 L1999.35 1210.91 L1998.76 1210.91 L1998.17 1210.91 L1997.59 1210.91 L1997 1210.91 L1996.41 1210.91 L1995.83 1210.91 L1995.24 1210.91 L1994.65 1210.91 L1994.07 1210.91 L1993.48 1210.91 L1992.9 1210.91 L1992.31 1210.91 L1991.72 1210.91 L1991.14 1210.91 L1990.55 1210.91 L1989.96 1210.91 L1989.38 1210.91 L1988.79 1210.91 L1988.2 1210.91 L1987.62 1210.91 L1987.03 1210.91 L1986.45 1210.91 L1985.86 1210.91 L1985.27 1210.91 L1984.69 1210.91 L1984.1 1210.91 L1983.51 1210.91 L1982.93 1210.91 L1982.34 1210.91 L1981.75 1210.91 L1981.17 1210.91 L1980.58 1210.91 L1979.99 1210.91 L1979.41 1210.91 L1978.82 1210.91 L1978.24 1210.91 L1977.65 1210.91 L1977.06 1210.91 L1976.48 1210.91 L1975.89 1210.91 L1975.3 1210.91 L1974.72 1210.91 L1974.13 1210.91 L1973.54 1210.91 L1972.96 1210.91 L1972.37 1210.91 L1971.78 1210.91 L1971.2 1210.91 L1970.61 1210.91 L1970.03 1210.91 L1969.44 1210.91 L1968.85 1210.91 L1968.27 1210.91 L1967.68 1210.91 L1967.09 1210.91 L1966.51 1210.91 L1965.92 1210.91 L1965.33 1210.91 L1964.75 1210.91 L1964.16 1210.91 L1963.58 1210.91 L1962.99 1210.91 L1962.4 1210.91 L1961.82 1210.91 L1961.23 1210.91 L1960.64 1210.91 L1960.06 1210.91 L1959.47 1210.91 L1958.88 1210.91 L1958.3 1210.91 L1957.71 1210.91 L1957.12 1210.91 L1956.54 1210.91 L1955.95 1210.91 L1955.37 1210.91 L1954.78 1210.91 L1954.19 1210.91 L1953.61 1210.91 L1953.02 1210.91 L1952.43 1210.91 L1951.85 1210.91 L1951.26 1210.91 L1950.67 1210.91 L1950.09 1210.91 L1949.5 1210.91 L1948.91 1210.91 L1948.33 1210.91 L1947.74 1210.91 L1947.16 1210.91 L1946.57 1210.91 L1945.98 1210.91 L1945.4 1210.91 L1944.81 1210.91 L1944.22 1210.91 L1943.64 1210.91 L1943.05 1210.91 L1942.46 1210.91 L1941.88 1210.91 L1941.29 1210.91 L1940.71 1210.91 L1940.12 1210.91 L1939.53 1210.91 L1938.95 1210.91 L1938.36 1210.91 L1937.77 1210.91 L1937.19 1210.91 L1936.6 1210.91 L1936.01 1210.91 L1935.43 1210.91 L1934.84 1210.91 L1934.25 1210.91 L1933.67 1210.91 L1933.08 1210.91 L1932.5 1210.91 L1931.91 1210.91 L1931.32 1210.91 L1930.74 1210.91 L1930.15 1210.91 L1929.56 1210.91 L1928.98 1210.91 L1928.39 1210.91 L1927.8 1210.91 L1927.22 1210.91 L1926.63 1210.91 L1926.04 1210.91 L1925.46 1210.91 L1924.87 1210.91 L1924.29 1210.91 L1923.7 1210.91 L1923.11 1210.91 L1922.53 1210.91 L1921.94 1210.91 L1921.35 1210.91 L1920.77 1210.91 L1920.18 1210.91 L1919.59 1210.91 L1919.01 1210.91 L1918.42 1210.91 L1917.83 1210.91 L1917.25 1210.91 L1916.66 1210.91 L1916.08 1210.91 L1915.49 1210.91 L1914.9 1210.91 L1914.32 1210.91 L1913.73 1210.91 L1913.14 1210.91 L1912.56 1210.91 L1911.97 1210.91 L1911.38 1210.91 L1910.8 1210.91 L1910.21 1210.91 L1909.63 1210.91 L1909.04 1210.91 L1908.45 1210.91 L1907.87 1210.91 L1907.28 1210.91 L1906.69 1210.91 L1906.11 1210.91 L1905.52 1210.91 L1904.93 1210.91 L1904.35 1210.91 L1903.76 1210.91 L1903.17 1210.91 L1902.59 1210.91 L1902 1210.91 L1901.42 1210.91 L1900.83 1210.91 L1900.24 1210.91 L1899.66 1210.91 L1899.07 1210.91 L1898.48 1210.91 L1897.9 1210.91 L1897.31 1210.91 L1896.72 1210.91 L1896.14 1210.91 L1895.55 1210.91 L1894.96 1210.91 L1894.38 1210.91 L1893.79 1210.91 L1893.21 1210.91 L1892.62 1210.91 L1892.03 1210.91 L1891.45 1210.91 L1890.86 1210.91 L1890.27 1210.91 L1889.69 1210.91 L1889.1 1210.91 L1888.51 1210.91 L1887.93 1210.91 L1887.34 1210.91 L1886.76 1210.91 L1886.17 1210.91 L1885.58 1210.91 L1885 1210.91 L1884.41 1210.91 L1883.82 1210.91 L1883.24 1210.91 L1882.65 1210.91 L1882.06 1210.91 L1881.48 1210.91 L1880.89 1210.91 L1880.3 1210.91 L1879.72 1210.91 L1879.13 1210.91 L1878.55 1210.91 L1877.96 1210.91 L1877.37 1210.91 L1876.79 1210.91 L1876.2 1210.91 L1875.61 1210.91 L1875.03 1210.91 L1874.44 1210.91 L1873.85 1210.91 L1873.27 1210.91 L1872.68 1210.91 L1872.09 1210.91 L1871.51 1210.91 L1870.92 1210.91 L1870.34 1210.91 L1869.75 1210.91 L1869.16 1210.91 L1868.58 1210.91 L1867.99 1210.91 L1867.4 1210.91 L1866.82 1210.91 L1866.23 1210.91 L1865.64 1210.91 L1865.06 1210.91 L1864.47 1210.91 L1863.88 1210.91 L1863.3 1210.91 L1862.71 1210.91 L1862.13 1210.91 L1861.54 1210.91 L1860.95 1210.91 L1860.37 1210.91 L1859.78 1210.91 L1859.19 1210.91 L1858.61 1210.91 L1858.02 1210.91 L1857.43 1210.91 L1856.85 1210.91 L1856.26 1210.91 L1855.68 1210.91 L1855.09 1210.91 L1854.5 1210.91 L1853.92 1210.91 L1853.33 1210.91 L1852.74 1210.91 L1852.16 1210.91 L1851.57 1210.91 L1850.98 1210.91 L1850.4 1210.91 L1849.81 1210.91 L1849.22 1210.91 L1848.64 1210.91 L1848.05 1210.91 L1847.47 1210.91 L1846.88 1210.91 L1846.29 1210.91 L1845.71 1210.91 L1845.12 1210.91 L1844.53 1210.91 L1843.95 1210.91 L1843.36 1210.91 L1842.77 1210.91 L1842.19 1210.91 L1841.6 1210.91 L1841.01 1210.91 L1840.43 1210.91 L1839.84 1210.91 L1839.26 1210.91 L1838.67 1210.91 L1838.08 1210.91 L1837.5 1210.91 L1836.91 1210.91 L1836.32 1210.91 L1835.74 1210.91 L1835.15 1210.91 L1834.56 1210.91 L1833.98 1210.91 L1833.39 1210.91 L1832.81 1210.91 L1832.22 1210.91 L1831.63 1210.91 L1831.05 1210.91 L1830.46 1210.91 L1829.87 1210.91 L1829.29 1210.91 L1828.7 1210.91 L1828.11 1210.91 L1827.53 1210.91 L1826.94 1210.91 L1826.35 1210.91 L1825.77 1210.91 L1825.18 1210.91 L1824.6 1210.91 L1824.01 1210.91 L1823.42 1210.91 L1822.84 1210.91 L1822.25 1210.91 L1821.66 1210.91 L1821.08 1210.91 L1820.49 1210.91 L1819.9 1210.91 L1819.32 1210.91 L1818.73 1210.91 L1818.14 1210.91 L1817.56 1210.91 L1816.97 1210.91 L1816.39 1210.91 L1815.8 1210.91 L1815.21 1210.91 L1814.63 1210.91 L1814.04 1210.91 L1813.45 1210.91 L1812.87 1210.91 L1812.28 1210.91 L1811.69 1210.91 L1811.11 1210.91 L1810.52 1210.91 L1809.94 1210.91 L1809.35 1210.91 L1808.76 1210.91 L1808.18 1210.91 L1807.59 1210.91 L1807 1210.91 L1806.42 1210.91 L1805.83 1210.91 L1805.24 1210.91 L1804.66 1210.91 L1804.07 1210.91 L1803.48 1210.91 L1802.9 1210.91 L1802.31 1210.91 L1801.73 1210.91 L1801.14 1210.91 L1800.55 1210.91 L1799.97 1210.91 L1799.38 1210.91 L1798.79 1210.91 L1798.21 1210.91 L1797.62 1210.91 L1797.03 1210.91 L1796.45 1210.91 L1795.86 1210.91 L1795.27 1210.91 L1794.69 1210.91 L1794.1 1210.91 L1793.52 1210.91 L1792.93 1210.91 L1792.34 1210.91 L1791.76 1210.91 L1791.17 1210.91 L1790.58 1210.91 L1790 1210.91 L1789.41 1210.91 L1788.82 1210.91 L1788.24 1210.91 L1787.65 1210.91 L1787.06 1210.91 L1786.48 1210.91 L1785.89 1210.91 L1785.31 1210.91 L1784.72 1210.91 L1784.13 1210.91 L1783.55 1210.91 L1782.96 1210.91 L1782.37 1210.91 L1781.79 1210.91 L1781.2 1210.91 L1780.61 1210.91 L1780.03 1210.91 L1779.44 1210.91 L1778.86 1210.91 L1778.27 1210.91 L1777.68 1210.91 L1777.1 1210.91 L1776.51 1210.91 L1775.92 1210.91 L1775.34 1210.91 L1774.75 1210.91 L1774.16 1210.91 L1773.58 1210.91 L1772.99 1210.91 L1772.4 1210.91 L1771.82 1210.91 L1771.23 1210.91 L1770.65 1210.91 L1770.06 1210.91 L1769.47 1210.91 L1768.89 1210.91 L1768.3 1210.91 L1767.71 1210.91 L1767.13 1210.91 L1766.54 1210.91 L1765.95 1210.91 L1765.37 1210.91 L1764.78 1210.91 L1764.19 1210.91 L1763.61 1210.91 L1763.02 1210.91 L1762.44 1210.91 L1761.85 1210.91 L1761.26 1210.91 L1760.68 1210.91 L1760.09 1210.91 L1759.5 1210.91 L1758.92 1210.91 L1758.33 1210.91 L1757.74 1210.91 L1757.16 1210.91 L1756.57 1210.91 L1755.99 1210.91 L1755.4 1210.91 L1754.81 1210.91 L1754.23 1210.91 L1753.64 1210.91 L1753.05 1210.91 L1752.47 1210.91 L1751.88 1210.91 L1751.29 1210.91 L1750.71 1210.91 L1750.12 1210.91 L1749.53 1210.91 L1748.95 1210.91 L1748.36 1210.91 L1747.78 1210.91 L1747.19 1210.91 L1746.6 1210.91 L1746.02 1210.91 L1745.43 1210.91 L1744.84 1210.91 L1744.26 1210.91 L1743.67 1210.91 L1743.08 1210.91 L1742.5 1210.91 L1741.91 1210.91 L1741.32 1210.91 L1740.74 1210.91 L1740.15 1210.91 L1739.57 1210.91 L1738.98 1210.91 L1738.39 1210.91 L1737.81 1210.91 L1737.22 1210.91 L1736.63 1210.91 L1736.05 1210.91 L1735.46 1210.91 L1734.87 1210.91 L1734.29 1210.91 L1733.7 1210.91 L1733.11 1210.91 L1732.53 1210.91 L1731.94 1210.91 L1731.36 1210.91 L1730.77 1210.91 L1730.18 1210.91 L1729.6 1210.91 L1729.01 1210.91 L1728.42 1210.91 L1727.84 1210.91 L1727.25 1210.91 L1726.66 1210.91 L1726.08 1210.91 L1725.49 1210.91 L1724.91 1210.91 L1724.32 1210.91 L1723.73 1210.91 L1723.15 1210.91 L1722.56 1210.91 L1721.97 1210.91 L1721.39 1210.91 L1720.8 1210.91 L1720.21 1210.91 L1719.63 1210.91 L1719.04 1210.91 L1718.45 1210.91 L1717.87 1210.91 L1717.28 1210.91 L1716.7 1210.91 L1716.11 1210.91 L1715.52 1210.91 L1714.94 1210.91 L1714.35 1210.91 L1713.76 1210.91 L1713.18 1210.91 L1712.59 1210.91 L1712 1210.91 L1711.42 1210.91 L1710.83 1210.91 L1710.24 1210.91 L1709.66 1210.91 L1709.07 1210.91 L1708.49 1210.91 L1707.9 1210.91 L1707.31 1210.91 L1706.73 1210.91 L1706.14 1210.91 L1705.55 1210.91 L1704.97 1210.91 L1704.38 1210.91 L1703.79 1210.91 L1703.21 1210.91 L1702.62 1210.91 L1702.04 1210.91 L1701.45 1210.91 L1700.86 1210.91 L1700.28 1210.91 L1699.69 1210.91 L1699.1 1210.91 L1698.52 1210.91 L1697.93 1210.91 L1697.34 1210.91 L1696.76 1210.91 L1696.17 1210.91 L1695.58 1210.91 L1695 1210.91 L1694.41 1210.91 L1693.83 1210.91 L1693.24 1210.91 L1692.65 1210.91 L1692.07 1210.91 L1691.48 1210.91 L1690.89 1210.91 L1690.31 1210.91 L1689.72 1210.91 L1689.13 1210.91 L1688.55 1210.91 L1687.96 1210.91 L1687.37 1210.91 L1686.79 1210.91 L1686.2 1210.91 L1685.62 1210.91 L1685.03 1210.91 L1684.44 1210.91 L1683.86 1210.91 L1683.27 1210.91 L1682.68 1210.91 L1682.1 1210.91 L1681.51 1210.91 L1680.92 1210.91 L1680.34 1210.91 L1679.75 1210.91 L1679.17 1210.91 L1678.58 1210.91 L1677.99 1210.91 L1677.41 1210.91 L1676.82 1210.91 L1676.23 1210.91 L1675.65 1210.91 L1675.06 1210.91 L1674.47 1210.91 L1673.89 1210.91 L1673.3 1210.91 L1672.71 1210.91 L1672.13 1210.91 L1671.54 1210.91 L1670.96 1210.91 L1670.37 1210.91 L1669.78 1210.91 L1669.2 1210.91 L1668.61 1210.91 L1668.02 1210.91 L1667.44 1210.91 L1666.85 1210.91 L1666.26 1210.91 L1665.68 1210.91 L1665.09 1210.91 L1664.5 1210.91 L1663.92 1210.91 L1663.33 1210.91 L1662.75 1210.91 L1662.16 1210.91 L1661.57 1210.91 L1660.99 1210.91 L1660.4 1210.91 L1659.81 1210.91 L1659.23 1210.91 L1658.64 1210.91 L1658.05 1210.91 L1657.47 1210.91 L1656.88 1210.91 L1656.29 1210.91 L1655.71 1210.91 L1655.12 1210.91 L1654.54 1210.91 L1653.95 1210.91 L1653.36 1210.91 L1652.78 1210.91 L1652.19 1210.91 L1651.6 1210.91 L1651.02 1210.91 L1650.43 1210.91 L1649.84 1210.91 L1649.26 1210.91 L1648.67 1210.91 L1648.09 1210.91 L1647.5 1210.91 L1646.91 1210.91 L1646.33 1210.91 L1645.74 1210.91 L1645.15 1210.91 L1644.57 1210.91 L1643.98 1210.91 L1643.39 1210.91 L1642.81 1210.91 L1642.22 1210.91 L1641.63 1210.91 L1641.05 1210.91 L1640.46 1210.91 L1639.88 1210.91 L1639.29 1210.91 L1638.7 1210.91 L1638.12 1210.91 L1637.53 1210.91 L1636.94 1210.91 L1636.36 1210.91 L1635.77 1210.91 L1635.18 1210.91 L1634.6 1210.91 L1634.01 1210.91 L1633.42 1210.91 L1632.84 1210.91 L1632.25 1210.91 L1631.67 1210.91 L1631.08 1210.91 L1630.49 1210.91 L1629.91 1210.91 L1629.32 1210.91 L1628.73 1210.91 L1628.15 1210.91 L1627.56 1210.91 L1626.97 1210.91 L1626.39 1210.91 L1625.8 1210.91 L1625.22 1210.91 L1624.63 1210.91 L1624.04 1210.91 L1623.46 1210.91 L1622.87 1210.91 L1622.28 1210.91 L1621.7 1210.91 L1621.11 1210.91 L1620.52 1210.91 L1619.94 1210.91 L1619.35 1210.91 L1618.76 1210.91 L1618.18 1210.91 L1617.59 1210.91 L1617.01 1210.91 L1616.42 1210.91 L1615.83 1210.91 L1615.25 1210.91 L1614.66 1210.91 L1614.07 1210.91 L1613.49 1210.91 L1612.9 1210.91 L1612.31 1210.91 L1611.73 1210.91 L1611.14 1210.91 L1610.55 1210.91 L1609.97 1210.91 L1609.38 1210.91 L1608.8 1210.91 L1608.21 1210.91 L1607.62 1210.91 L1607.04 1210.91 L1606.45 1210.91 L1605.86 1210.91 L1605.28 1210.91 L1604.69 1210.91 L1604.1 1210.91 L1603.52 1210.91 L1602.93 1210.91 L1602.34 1210.91 L1601.76 1210.91 L1601.17 1210.91 L1600.59 1210.91 L1600 1210.91 L1599.41 1210.91 L1598.83 1210.91 L1598.24 1210.91 L1597.65 1210.91 L1597.07 1210.91 L1596.48 1210.91 L1595.89 1210.91 L1595.31 1210.91 L1594.72 1210.91 L1594.14 1210.91 L1593.55 1210.91 L1592.96 1210.91 L1592.38 1210.91 L1591.79 1210.91 L1591.2 1210.91 L1590.62 1210.91 L1590.03 1210.91 L1589.44 1210.91 L1588.86 1210.91 L1588.27 1210.91 L1587.68 1210.91 L1587.1 1210.91 L1586.51 1210.91 L1585.93 1210.91 L1585.34 1210.91 L1584.75 1210.91 L1584.17 1210.91 L1583.58 1210.91 L1582.99 1210.91 L1582.41 1210.91 L1581.82 1210.91 L1581.23 1210.91 L1580.65 1210.91 L1580.06 1210.91 L1579.47 1210.91 L1578.89 1210.91 L1578.3 1210.91 L1577.72 1210.91 L1577.13 1210.91 L1576.54 1210.91 L1575.96 1210.91 L1575.37 1210.91 L1574.78 1210.91 L1574.2 1210.91 L1573.61 1210.91 L1573.02 1210.91 L1572.44 1210.91 L1571.85 1210.91 L1571.27 1210.91 L1570.68 1210.91 L1570.09 1210.91 L1569.51 1210.91 L1568.92 1210.91 L1568.33 1210.91 L1567.75 1210.91 L1567.16 1210.91 L1566.57 1210.91 L1565.99 1210.91 L1565.4 1210.91 L1564.81 1210.91 L1564.23 1210.91 L1563.64 1210.91 L1563.06 1210.91 L1562.47 1210.91 L1561.88 1210.91 L1561.3 1210.91 L1560.71 1210.91 L1560.12 1210.91 L1559.54 1210.91 L1558.95 1210.91 L1558.36 1210.91 L1557.78 1210.91 L1557.19 1210.91 L1556.6 1210.91 L1556.02 1210.91 L1555.43 1210.91 L1554.85 1210.91 L1554.26 1210.91 L1553.67 1210.91 L1553.09 1210.91 L1552.5 1210.91 L1551.91 1210.91 L1551.33 1210.91 L1550.74 1210.91 L1550.15 1210.91 L1549.57 1210.91 L1548.98 1210.91 L1548.4 1210.91 L1547.81 1210.91 L1547.22 1210.91 L1546.64 1210.91 L1546.05 1210.91 L1545.46 1210.91 L1544.88 1210.91 L1544.29 1210.91 L1543.7 1210.91 L1543.12 1210.91 L1542.53 1210.91 L1541.94 1210.91 L1541.36 1210.91 L1540.77 1210.91 L1540.19 1210.91 L1539.6 1210.91 L1539.01 1210.91 L1538.43 1210.91 L1537.84 1210.91 L1537.25 1210.91 L1536.67 1210.91 L1536.08 1210.91 L1535.49 1210.91 L1534.91 1210.91 L1534.32 1210.91 L1533.73 1210.91 L1533.15 1210.91 L1532.56 1210.91 L1531.98 1210.91 L1531.39 1210.91 L1530.8 1210.91 L1530.22 1210.91 L1529.63 1210.91 L1529.04 1210.91 L1528.46 1210.91 L1527.87 1210.91 L1527.28 1210.91 L1526.7 1210.91 L1526.11 1210.91 L1525.52 1210.91 L1524.94 1210.91 L1524.35 1210.91 L1523.77 1210.91 L1523.18 1210.91 L1522.59 1210.91 L1522.01 1210.91 L1521.42 1210.91 L1520.83 1210.91 L1520.25 1210.91 L1519.66 1210.91 L1519.07 1210.91 L1518.49 1210.91 L1517.9 1210.91 L1517.32 1210.91 L1516.73 1210.91 L1516.14 1210.91 L1515.56 1210.91 L1514.97 1210.91 L1514.38 1210.91 L1513.8 1210.91 L1513.21 1210.91 L1512.62 1210.91 L1512.04 1210.91 L1511.45 1210.91 L1510.86 1210.91 L1510.28 1210.91 L1509.69 1210.91 L1509.11 1210.91 L1508.52 1210.91 L1507.93 1210.91 L1507.35 1210.91 L1506.76 1210.91 L1506.17 1210.91 L1505.59 1210.91 L1505 1210.91 L1504.41 1210.91 L1503.83 1210.91 L1503.24 1210.91 L1502.65 1210.91 L1502.07 1210.91 L1501.48 1210.91 L1500.9 1210.91 L1500.31 1210.91 L1499.72 1210.91 L1499.14 1210.91 L1498.55 1210.91 L1497.96 1210.91 L1497.38 1210.91 L1496.79 1210.91 L1496.2 1210.91 L1495.62 1210.91 L1495.03 1210.91 L1494.45 1210.91 L1493.86 1210.91 L1493.27 1210.91 L1492.69 1210.91 L1492.1 1210.91 L1491.51 1210.91 L1490.93 1210.91 L1490.34 1210.91 L1489.75 1210.91 L1489.17 1210.91 L1488.58 1210.91 L1487.99 1210.91 L1487.41 1210.91 L1486.82 1210.91 L1486.24 1210.91 L1485.65 1210.91 L1485.06 1210.91 L1484.48 1210.91 L1483.89 1210.91 L1483.3 1210.91 L1482.72 1210.91 L1482.13 1210.91 L1481.54 1210.91 L1480.96 1210.91 L1480.37 1210.91 L1479.78 1210.91 L1479.2 1210.91 L1478.61 1210.91 L1478.03 1210.91 L1477.44 1210.91 L1476.85 1210.91 L1476.27 1210.91 L1475.68 1210.91 L1475.09 1210.91 L1474.51 1210.91 L1473.92 1210.91 L1473.33 1210.91 L1472.75 1210.91 L1472.16 1210.91 L1471.57 1210.91 L1470.99 1210.91 L1470.4 1210.91 L1469.82 1210.91 L1469.23 1210.91 L1468.64 1210.91 L1468.06 1210.91 L1467.47 1210.91 L1466.88 1210.91 L1466.3 1210.91 L1465.71 1210.91 L1465.12 1210.91 L1464.54 1210.91 L1463.95 1210.91 L1463.37 1210.91 L1462.78 1210.91 L1462.19 1210.91 L1461.61 1210.91 L1461.02 1210.91 L1460.43 1210.91 L1459.85 1210.91 L1459.26 1210.91 L1458.67 1210.91 L1458.09 1210.91 L1457.5 1210.91 L1456.91 1210.91 L1456.33 1210.91 L1455.74 1210.91 L1455.16 1210.91 L1454.57 1210.91 L1453.98 1210.91 L1453.4 1210.91 L1452.81 1210.91 L1452.22 1210.91 L1451.64 1210.91 L1451.05 1210.91 L1450.46 1210.91 L1449.88 1210.91 L1449.29 1210.91 L1448.7 1210.91 L1448.12 1210.91 L1447.53 1210.91 L1446.95 1210.91 L1446.36 1210.91 L1445.77 1210.91 L1445.19 1210.91 L1444.6 1210.91 L1444.01 1210.91 L1443.43 1210.91 L1442.84 1210.91 L1442.25 1210.91 L1441.67 1210.91 L1441.08 1210.91 L1440.5 1210.91 L1439.91 1210.91 L1439.32 1210.91 L1438.74 1210.91 L1438.15 1210.91 L1437.56 1210.91 L1436.98 1210.91 L1436.39 1210.91 L1435.8 1210.91 L1435.22 1210.91 L1434.63 1210.91 L1434.04 1210.91 L1433.46 1210.91 L1432.87 1210.91 L1432.29 1210.91 L1431.7 1210.91 L1431.11 1210.91 L1430.53 1210.91 L1429.94 1210.91 L1429.35 1210.91 L1428.77 1210.91 L1428.18 1210.91 L1427.59 1210.91 L1427.01 1210.91 L1426.42 1210.91 L1425.83 1210.91 L1425.25 1210.91 L1424.66 1210.91 L1424.08 1210.91 L1423.49 1210.91 L1422.9 1210.91 L1422.32 1210.91 L1421.73 1210.91 L1421.14 1210.91 L1420.56 1210.91 L1419.97 1210.91 L1419.38 1210.91 L1418.8 1210.91 L1418.21 1210.91 L1417.63 1210.91 L1417.04 1210.91 L1416.45 1210.91 L1415.87 1210.91 L1415.28 1210.91 L1414.69 1210.91 L1414.11 1210.91 L1413.52 1210.91 L1412.93 1210.91 L1412.35 1210.91 L1411.76 1210.91 L1411.17 1210.91 L1410.59 1210.91 L1410 1210.91 L1409.42 1210.91 L1408.83 1210.91 L1408.24 1210.91 L1407.66 1210.91 L1407.07 1210.91 L1406.48 1210.91 L1405.9 1210.91 L1405.31 1210.91 L1404.72 1210.91 L1404.14 1210.91 L1403.55 1210.91 L1402.96 1210.91 L1402.38 1210.91 L1401.79 1210.91 L1401.21 1210.91 L1400.62 1210.91 L1400.03 1210.91 L1399.45 1210.91 L1398.86 1210.91 L1398.27 1210.91 L1397.69 1210.91 L1397.1 1210.91 L1396.51 1210.91 L1395.93 1210.91 L1395.34 1210.91 L1394.75 1210.91 L1394.17 1210.91 L1393.58 1210.91 L1393 1210.91 L1392.41 1210.91 L1391.82 1210.91 L1391.24 1210.91 L1390.65 1210.91 L1390.06 1210.91 L1389.48 1210.91 L1388.89 1210.91 L1388.3 1210.91 L1387.72 1210.91 L1387.13 1210.91 L1386.55 1210.91 L1385.96 1210.91 L1385.37 1210.91 L1384.79 1210.91 L1384.2 1210.91 L1383.61 1210.91 L1383.03 1210.91 L1382.44 1210.91 L1381.85 1210.91 L1381.27 1210.91 L1380.68 1210.91 L1380.09 1210.91 L1379.51 1210.91 L1378.92 1210.91 L1378.34 1210.91 L1377.75 1210.91 L1377.16 1210.91 L1376.58 1210.91 L1375.99 1210.91 L1375.4 1210.91 L1374.82 1210.91 L1374.23 1210.91 L1373.64 1210.91 L1373.06 1210.91 L1372.47 1210.91 L1371.88 1210.91 L1371.3 1210.91 L1370.71 1210.91 L1370.13 1210.91 L1369.54 1210.91 L1368.95 1210.91 L1368.37 1210.91 L1367.78 1210.91 L1367.19 1210.91 L1366.61 1210.91 L1366.02 1210.91 L1365.43 1210.91 L1364.85 1210.91 L1364.26 1210.91 L1363.68 1210.91 L1363.09 1210.91 L1362.5 1210.91 L1361.92 1210.91 L1361.33 1210.91 L1360.74 1210.91 L1360.16 1210.91 L1359.57 1210.91 L1358.98 1210.91 L1358.4 1210.91 L1357.81 1210.91 L1357.22 1210.91 L1356.64 1210.91 L1356.05 1210.91 L1355.47 1210.91 L1354.88 1210.91 L1354.29 1210.91 L1353.71 1210.91 L1353.12 1210.91 L1352.53 1210.91 L1351.95 1210.91 L1351.36 1210.91 L1350.77 1210.91 L1350.19 1210.91 L1349.6 1210.91 L1349.01 1210.91 L1348.43 1210.91 L1347.84 1210.91 L1347.26 1210.91 L1346.67 1210.91 L1346.08 1210.91 L1345.5 1210.91 L1344.91 1210.91 L1344.32 1210.91 L1343.74 1210.91 L1343.15 1210.91 L1342.56 1210.91 L1341.98 1210.91 L1341.39 1210.91 L1340.8 1210.91 L1340.22 1210.91 L1339.63 1210.91 L1339.05 1210.91 L1338.46 1210.91 L1337.87 1210.91 L1337.29 1210.91 L1336.7 1210.91 L1336.11 1210.91 L1335.53 1210.91 L1334.94 1210.91 L1334.35 1210.91 L1333.77 1210.91 L1333.18 1210.91 L1332.6 1210.91 L1332.01 1210.91 L1331.42 1210.91 L1330.84 1210.91 L1330.25 1210.91 L1329.66 1210.91 L1329.08 1210.91 L1328.49 1210.91 L1327.9 1210.91 L1327.32 1210.91 L1326.73 1210.91 L1326.14 1210.91 L1325.56 1210.91 L1324.97 1210.91 L1324.39 1210.91 L1323.8 1210.91 L1323.21 1210.91 L1322.63 1210.91 L1322.04 1210.91 L1321.45 1210.91 L1320.87 1210.91 L1320.28 1210.91 L1319.69 1210.91 L1319.11 1210.91 L1318.52 1210.91 L1317.93 1210.91 L1317.35 1210.91 L1316.76 1210.91 L1316.18 1210.91 L1315.59 1210.91 L1315 1210.91 L1314.42 1210.91 L1313.83 1210.91 L1313.24 1210.91 L1312.66 1210.91 L1312.07 1210.91 L1311.48 1210.91 L1310.9 1210.91 L1310.31 1210.91 L1309.73 1210.91 L1309.14 1210.91 L1308.55 1210.91 L1307.97 1210.91 L1307.38 1210.91 L1306.79 1210.91 L1306.21 1210.91 L1305.62 1210.91 L1305.03 1210.91 L1304.45 1210.91 L1303.86 1210.91 L1303.27 1210.91 L1302.69 1210.91 L1302.1 1210.91 L1301.52 1210.91 L1300.93 1210.91 L1300.34 1210.91 L1299.76 1210.91 L1299.17 1210.91 L1298.58 1210.91 L1298 1210.91 L1297.41 1210.91 L1296.82 1210.91 L1296.24 1210.91 L1295.65 1210.91 L1295.06 1210.91 L1294.48 1210.91 L1293.89 1210.91 L1293.31 1210.91 L1292.72 1210.91 L1292.13 1210.91 L1291.55 1210.91 L1290.96 1210.91 L1290.37 1210.91 L1289.79 1210.91 L1289.2 1210.91 L1288.61 1210.91 L1288.03 1210.91 L1287.44 1210.91 L1286.86 1210.91 L1286.27 1210.91 L1285.68 1210.91 L1285.1 1210.91 L1284.51 1210.91 L1283.92 1210.91 L1283.34 1210.91 L1282.75 1210.91 L1282.16 1210.91 L1281.58 1210.91 L1280.99 1210.91 L1280.4 1210.91 L1279.82 1210.91 L1279.23 1210.91 L1278.65 1210.91 L1278.06 1210.91 L1277.47 1210.91 L1276.89 1210.91 L1276.3 1210.91 L1275.71 1210.91 L1275.13 1210.91 L1274.54 1210.91 L1273.95 1210.91 L1273.37 1210.91 L1272.78 1210.91 L1272.19 1210.91 L1271.61 1210.91 L1271.02 1210.91 L1270.44 1210.91 L1269.85 1210.91 L1269.26 1210.91 L1268.68 1210.91 L1268.09 1210.91 L1267.5 1210.91 L1266.92 1210.91 L1266.33 1210.91 L1265.74 1210.91 L1265.16 1210.91 L1264.57 1210.91 L1263.98 1210.91 L1263.4 1210.91 L1262.81 1210.91 L1262.23 1210.91 L1261.64 1210.91 L1261.05 1210.91 L1260.47 1210.91 L1259.88 1210.91 L1259.29 1210.91 L1258.71 1210.91 L1258.12 1210.91 L1257.53 1210.91 L1256.95 1210.91 L1256.36 1210.91 L1255.78 1210.91 L1255.19 1210.91 L1254.6 1210.91 L1254.02 1210.91 L1253.43 1210.91 L1252.84 1210.91 L1252.26 1210.91 L1251.67 1210.91 L1251.08 1210.91 L1250.5 1210.91 L1249.91 1210.91 L1249.32 1210.91 L1248.74 1210.91 L1248.15 1210.91 L1247.57 1210.91 L1246.98 1210.91 L1246.39 1210.91 L1245.81 1210.91 L1245.22 1210.91 L1244.63 1210.91 L1244.05 1210.91 L1243.46 1210.91 L1242.87 1210.91 L1242.29 1210.91 L1241.7 1210.91 L1241.11 1210.91 L1240.53 1210.91 L1239.94 1210.91 L1239.36 1210.91 L1238.77 1210.91 L1238.18 1210.91 L1237.6 1210.91 L1237.01 1210.91 L1236.42 1210.91 L1235.84 1210.91 L1235.25 1210.91 L1234.66 1210.91 L1234.08 1210.91 L1233.49 1210.91 L1232.91 1210.91 L1232.32 1210.91 L1231.73 1210.91 L1231.15 1210.91 L1230.56 1210.91 L1229.97 1210.91 L1229.39 1210.91 L1228.8 1210.91 L1228.21 1210.91 L1227.63 1210.91 L1227.04 1210.91 L1226.45 1210.91 L1225.87 1210.91 L1225.28 1210.91 L1224.7 1210.91 L1224.11 1210.91 L1223.52 1210.91 L1222.94 1210.91 L1222.35 1210.91 L1221.76 1210.91 L1221.18 1210.91 L1220.59 1210.91 L1220 1210.91 L1219.42 1210.91 L1218.83 1210.91 L1218.24 1210.91 L1217.66 1210.91 L1217.07 1210.91 L1216.49 1210.91 L1215.9 1210.91 L1215.31 1210.91 L1214.73 1210.91 L1214.14 1210.91 L1213.55 1210.91 L1212.97 1210.91 L1212.38 1210.91 L1211.79 1210.91 L1211.21 1210.91 L1210.62 1210.91 L1210.03 1210.91 L1209.45 1210.91 L1208.86 1210.91 L1208.28 1210.91 L1207.69 1210.91 L1207.1 1210.91 L1206.52 1210.91 L1205.93 1210.91 L1205.34 1210.91 L1204.76 1210.91 L1204.17 1210.91 L1203.58 1210.91 L1203 1210.91 L1202.41 1210.91 L1201.83 1210.91 L1201.24 1210.91 L1200.65 1210.91 L1200.07 1210.91 L1199.48 1210.91 L1198.89 1210.91 L1198.31 1210.91 L1197.72 1210.91 L1197.13 1210.91 L1196.55 1210.91 L1195.96 1210.91 L1195.37 1210.91 L1194.79 1210.91 L1194.2 1210.91 L1193.62 1210.91 L1193.03 1210.91 L1192.44 1210.91 L1191.86 1210.91 L1191.27 1210.91 L1190.68 1210.91 L1190.1 1210.91 L1189.51 1210.91 L1188.92 1210.91 L1188.34 1210.91 L1187.75 1210.91 L1187.16 1210.91 L1186.58 1210.91 L1185.99 1210.91 L1185.41 1210.91 L1184.82 1210.91 L1184.23 1210.91 L1183.65 1210.91 L1183.06 1210.91 L1182.47 1210.91 L1181.89 1210.91 L1181.3 1210.91 L1180.71 1210.91 L1180.13 1210.91 L1179.54 1210.91 L1178.96 1210.91 L1178.37 1210.91 L1177.78 1210.91 L1177.2 1210.91 L1176.61 1210.91 L1176.02 1210.91 L1175.44 1210.91 L1174.85 1210.91 L1174.26 1210.91 L1173.68 1210.91 L1173.09 1210.91 L1172.5 1210.91 L1171.92 1210.91 L1171.33 1210.91 L1170.75 1210.91 L1170.16 1210.91 L1169.57 1210.91 L1168.99 1210.91 L1168.4 1210.91 L1167.81 1210.91 L1167.23 1210.91 L1166.64 1210.91 L1166.05 1210.91 L1165.47 1210.91 L1164.88 1210.91 L1164.29 1210.91 L1163.71 1210.91 L1163.12 1210.91 L1162.54 1210.91 L1161.95 1210.91 L1161.36 1210.91 L1160.78 1210.91 L1160.19 1210.91 L1159.6 1210.91 L1159.02 1210.91 L1158.43 1210.91 L1157.84 1210.91 L1157.26 1210.91 L1156.67 1210.91 L1156.09 1210.91 L1155.5 1210.91 L1154.91 1210.91 L1154.33 1210.91 L1153.74 1210.91 L1153.15 1210.91 L1152.57 1210.91 L1151.98 1210.91 L1151.39 1210.91 L1150.81 1210.91 L1150.22 1210.91 L1149.63 1210.91 L1149.05 1210.91 L1148.46 1210.91 L1147.88 1210.91 L1147.29 1210.91 L1146.7 1210.91 L1146.12 1210.91 L1145.53 1210.91 L1144.94 1210.91 L1144.36 1210.91 L1143.77 1210.91 L1143.18 1210.91 L1142.6 1210.91 L1142.01 1210.91 L1141.42 1210.91 L1140.84 1210.91 L1140.25 1210.91 L1139.67 1210.91 L1139.08 1210.91 L1138.49 1210.91 L1137.91 1210.91 L1137.32 1210.91 L1136.73 1210.91 L1136.15 1210.91 L1135.56 1210.91 L1134.97 1210.91 L1134.39 1210.91 L1133.8 1210.91 L1133.21 1210.91 L1132.63 1210.91 L1132.04 1210.91 L1131.46 1210.91 L1130.87 1210.91 L1130.28 1210.91 L1129.7 1210.91 L1129.11 1210.91 L1128.52 1210.91 L1127.94 1210.91 L1127.35 1210.91 L1126.76 1210.91 L1126.18 1210.91 L1125.59 1210.91 L1125.01 1210.91 L1124.42 1210.91 L1123.83 1210.91 L1123.25 1210.91 L1122.66 1210.91 L1122.07 1210.91 L1121.49 1210.91 L1120.9 1210.91 L1120.31 1210.91 L1119.73 1210.91 L1119.14 1210.91 L1118.55 1210.91 L1117.97 1210.91 L1117.38 1210.91 L1116.8 1210.91 L1116.21 1210.91 L1115.62 1210.91 L1115.04 1210.91 L1114.45 1210.91 L1113.86 1210.91 L1113.28 1210.91 L1112.69 1210.91 L1112.1 1210.91 L1111.52 1210.91 L1110.93 1210.91 L1110.34 1210.91 L1109.76 1210.91 L1109.17 1210.91 L1108.59 1210.91 L1108 1210.91 L1107.41 1210.91 L1106.83 1210.91 L1106.24 1210.91 L1105.65 1210.91 L1105.07 1210.91 L1104.48 1210.91 L1103.89 1210.91 L1103.31 1210.91 L1102.72 1210.91 L1102.14 1210.91 L1101.55 1210.91 L1100.96 1210.91 L1100.38 1210.91 L1099.79 1210.91 L1099.2 1210.91 L1098.62 1210.91 L1098.03 1210.91 L1097.44 1210.91 L1096.86 1210.91 L1096.27 1210.91 L1095.68 1210.91 L1095.1 1210.91 L1094.51 1210.91 L1093.93 1210.91 L1093.34 1210.91 L1092.75 1210.91 L1092.17 1210.91 L1091.58 1210.91 L1090.99 1210.91 L1090.41 1210.91 L1089.82 1210.91 L1089.23 1210.91 L1088.65 1210.91 L1088.06 1210.91 L1087.47 1210.91 L1086.89 1210.91 L1086.3 1210.91 L1085.72 1210.91 L1085.13 1210.91 L1084.54 1210.91 L1083.96 1210.91 L1083.37 1210.91 L1082.78 1210.91 L1082.2 1210.91 L1081.61 1210.91 L1081.02 1210.91 L1080.44 1210.91 L1079.85 1210.91 L1079.26 1210.91 L1078.68 1210.91 L1078.09 1210.91 L1077.51 1210.91 L1076.92 1210.91 L1076.33 1210.91 L1075.75 1210.91 L1075.16 1210.91 L1074.57 1210.91 L1073.99 1210.91 L1073.4 1210.91 L1072.81 1210.91 L1072.23 1210.91 L1071.64 1210.91 L1071.06 1210.91 L1070.47 1210.91 L1069.88 1210.91 L1069.3 1210.91 L1068.71 1210.91 L1068.12 1210.91 L1067.54 1210.91 L1066.95 1210.91 L1066.36 1210.91 L1065.78 1210.91 L1065.19 1210.91 L1064.6 1210.91 L1064.02 1210.91 L1063.43 1210.91 L1062.85 1210.91 L1062.26 1210.91 L1061.67 1210.91 L1061.09 1210.91 L1060.5 1210.91 L1059.91 1210.91 L1059.33 1210.91 L1058.74 1210.91 L1058.15 1210.91 L1057.57 1210.91 L1056.98 1210.91 L1056.39 1210.91 L1055.81 1210.91 L1055.22 1210.91 L1054.64 1210.91 L1054.05 1210.91 L1053.46 1210.91 L1052.88 1210.91 L1052.29 1210.91 L1051.7 1210.91 L1051.12 1210.91 L1050.53 1210.91 L1049.94 1210.91 L1049.36 1210.91 L1048.77 1210.91 L1048.19 1210.91 L1047.6 1210.91 L1047.01 1210.91 L1046.43 1210.91 L1045.84 1210.91 L1045.25 1210.91 L1044.67 1210.91 L1044.08 1210.91 L1043.49 1210.91 L1042.91 1210.91 L1042.32 1210.91 L1041.73 1210.91 L1041.15 1210.91 L1040.56 1210.91 L1039.98 1210.91 L1039.39 1210.91 L1038.8 1210.91 L1038.22 1210.91 L1037.63 1210.91 L1037.04 1210.91 L1036.46 1210.91 L1035.87 1210.91 L1035.28 1210.91 L1034.7 1210.91 L1034.11 1210.91 L1033.52 1210.91 L1032.94 1210.91 L1032.35 1210.91 L1031.77 1210.91 L1031.18 1210.91 L1030.59 1210.91 L1030.01 1210.91 L1029.42 1210.91 L1028.83 1210.91 L1028.25 1210.91 L1027.66 1210.91 L1027.07 1210.91 L1026.49 1210.91 L1025.9 1210.91 L1025.32 1210.91 L1024.73 1210.91 L1024.14 1210.91 L1023.56 1210.91 L1022.97 1210.91 L1022.38 1210.91 L1021.8 1210.91 L1021.21 1210.91 L1020.62 1210.91 L1020.04 1210.91 L1019.45 1210.91 L1018.86 1210.91 L1018.28 1210.91 L1017.69 1210.91 L1017.11 1210.91 L1016.52 1210.91 L1015.93 1210.91 L1015.35 1210.91 L1014.76 1210.91 L1014.17 1210.91 L1013.59 1210.91 L1013 1210.91 L1012.41 1210.91 L1011.83 1210.91 L1011.24 1210.91 L1010.65 1210.91 L1010.07 1210.91 L1009.48 1210.91 L1008.9 1210.91 L1008.31 1210.91 L1007.72 1210.91 L1007.14 1210.91 L1006.55 1210.91 L1005.96 1210.91 L1005.38 1210.91 L1004.79 1210.91 L1004.2 1210.91 L1003.62 1210.91 L1003.03 1210.91 L1002.44 1210.91 L1001.86 1210.91 L1001.27 1210.91 L1000.69 1210.91 L1000.1 1210.91 L999.513 1210.91 L998.926 1210.91 L998.34 1210.91 L997.754 1210.91 L997.167 1210.91 L996.581 1210.91 L995.994 1210.91 L995.408 1210.91 L994.822 1210.91 L994.235 1210.91 L993.649 1210.91 L993.062 1210.91 L992.476 1210.91 L991.889 1210.91 L991.303 1210.91 L990.717 1210.91 L990.13 1210.91 L989.544 1210.91 L988.957 1210.91 L988.371 1210.91 L987.785 1210.91 L987.198 1210.91 L986.612 1210.91 L986.025 1210.91  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.21 986.612,1211.21 987.198,1211.21 987.785,1211.21 988.371,1211.21 988.957,1211.21 989.544,1211.21 990.13,1211.21 990.717,1211.21 991.303,1211.21 991.889,1211.21 992.476,1211.21 993.062,1211.21 993.649,1211.21 994.235,1211.21 994.822,1211.21 995.408,1211.21 995.994,1211.21 996.581,1211.21 997.167,1211.21 997.754,1211.21 998.34,1211.21 998.926,1211.21 999.513,1211.21 1000.1,1211.21 1000.69,1211.21 1001.27,1211.21 1001.86,1211.21 1002.44,1211.21 1003.03,1211.21 1003.62,1211.21 1004.2,1211.21 1004.79,1211.21 1005.38,1211.21 1005.96,1211.21 1006.55,1211.21 1007.14,1211.21 1007.72,1211.21 1008.31,1211.21 1008.9,1211.21 1009.48,1211.21 1010.07,1211.21 1010.65,1211.21 1011.24,1211.21 1011.83,1211.21 1012.41,1211.21 1013,1211.21 1013.59,1211.21 1014.17,1211.21 1014.76,1211.21 1015.35,1211.21 1015.93,1211.21 1016.52,1211.21 1017.11,1211.21 1017.69,1211.21 1018.28,1211.21 1018.86,1211.21 1019.45,1211.21 1020.04,1211.21 1020.62,1211.21 1021.21,1211.21 1021.8,1211.21 1022.38,1211.21 1022.97,1211.21 1023.56,1211.21 1024.14,1211.21 1024.73,1211.21 1025.32,1211.21 1025.9,1211.21 1026.49,1211.21 1027.07,1211.21 1027.66,1211.21 1028.25,1211.21 1028.83,1211.21 1029.42,1211.21 1030.01,1211.21 1030.59,1211.21 1031.18,1211.21 1031.77,1211.21 1032.35,1211.21 1032.94,1211.21 1033.52,1211.21 1034.11,1211.21 1034.7,1211.21 1035.28,1211.21 1035.87,1211.21 1036.46,1211.21 1037.04,1211.21 1037.63,1211.21 1038.22,1211.21 1038.8,1211.21 1039.39,1211.21 1039.98,1211.21 1040.56,1211.21 1041.15,1211.21 1041.73,1211.21 1042.32,1211.21 1042.91,1211.21 1043.49,1211.21 1044.08,1211.21 1044.67,1211.21 1045.25,1211.21 1045.84,1211.21 1046.43,1211.21 1047.01,1211.21 1047.6,1211.21 1048.19,1211.21 1048.77,1211.21 1049.36,1211.21 1049.94,1211.21 1050.53,1211.21 1051.12,1211.21 1051.7,1211.21 1052.29,1211.21 1052.88,1211.21 1053.46,1211.21 1054.05,1211.21 1054.64,1211.21 1055.22,1211.21 1055.81,1211.21 1056.39,1211.21 1056.98,1211.21 1057.57,1211.21 1058.15,1211.21 1058.74,1211.21 1059.33,1211.21 1059.91,1211.21 1060.5,1211.21 1061.09,1211.21 1061.67,1211.21 1062.26,1211.21 1062.85,1211.21 1063.43,1211.21 1064.02,1211.21 1064.6,1211.21 1065.19,1211.21 1065.78,1211.21 1066.36,1211.21 1066.95,1211.21 1067.54,1211.21 1068.12,1211.21 1068.71,1211.21 1069.3,1211.21 1069.88,1211.21 1070.47,1211.21 1071.06,1211.21 1071.64,1211.21 1072.23,1211.21 1072.81,1211.21 1073.4,1211.21 1073.99,1211.21 1074.57,1211.21 1075.16,1211.21 1075.75,1211.21 1076.33,1211.21 1076.92,1211.21 1077.51,1211.21 1078.09,1211.21 1078.68,1211.21 1079.26,1211.21 1079.85,1211.21 1080.44,1211.21 1081.02,1211.21 1081.61,1211.21 1082.2,1211.21 1082.78,1211.21 1083.37,1211.21 1083.96,1211.21 1084.54,1211.21 1085.13,1211.21 1085.72,1211.21 1086.3,1211.21 1086.89,1211.21 1087.47,1211.21 1088.06,1211.21 1088.65,1211.21 1089.23,1211.21 1089.82,1211.21 1090.41,1211.21 1090.99,1211.21 1091.58,1211.21 1092.17,1211.21 1092.75,1211.21 1093.34,1211.21 1093.93,1211.21 1094.51,1211.21 1095.1,1211.21 1095.68,1211.21 1096.27,1211.21 1096.86,1211.21 1097.44,1211.21 1098.03,1211.21 1098.62,1211.21 1099.2,1211.21 1099.79,1211.21 1100.38,1211.21 1100.96,1211.21 1101.55,1211.21 1102.14,1211.21 1102.72,1211.21 1103.31,1211.21 1103.89,1211.21 1104.48,1211.21 1105.07,1211.21 1105.65,1211.21 1106.24,1211.21 1106.83,1211.21 1107.41,1211.21 1108,1211.21 1108.59,1211.21 1109.17,1211.21 1109.76,1211.21 1110.34,1211.21 1110.93,1211.21 1111.52,1211.21 1112.1,1211.21 1112.69,1211.21 1113.28,1211.21 1113.86,1211.21 1114.45,1211.21 1115.04,1211.21 1115.62,1211.21 1116.21,1211.21 1116.8,1211.21 1117.38,1211.21 1117.97,1211.21 1118.55,1211.21 1119.14,1211.21 1119.73,1211.21 1120.31,1211.21 1120.9,1211.21 1121.49,1211.21 1122.07,1211.21 1122.66,1211.21 1123.25,1211.21 1123.83,1211.21 1124.42,1211.21 1125.01,1211.21 1125.59,1211.21 1126.18,1211.21 1126.76,1211.21 1127.35,1211.21 1127.94,1211.21 1128.52,1211.21 1129.11,1211.21 1129.7,1211.21 1130.28,1211.21 1130.87,1211.21 1131.46,1211.21 1132.04,1211.21 1132.63,1211.21 1133.21,1211.21 1133.8,1211.21 1134.39,1211.21 1134.97,1211.21 1135.56,1211.21 1136.15,1211.21 1136.73,1211.21 1137.32,1211.21 1137.91,1211.21 1138.49,1211.21 1139.08,1211.21 1139.67,1211.21 1140.25,1211.21 1140.84,1211.21 1141.42,1211.21 1142.01,1211.21 1142.6,1211.21 1143.18,1211.21 1143.77,1211.21 1144.36,1211.21 1144.94,1211.21 1145.53,1211.21 1146.12,1211.21 1146.7,1211.21 1147.29,1211.21 1147.88,1211.21 1148.46,1211.21 1149.05,1211.21 1149.63,1211.21 1150.22,1211.21 1150.81,1211.21 1151.39,1211.21 1151.98,1211.21 1152.57,1211.21 1153.15,1211.21 1153.74,1211.21 1154.33,1211.21 1154.91,1211.21 1155.5,1211.21 1156.09,1211.21 1156.67,1211.21 1157.26,1211.21 1157.84,1211.21 1158.43,1211.21 1159.02,1211.21 1159.6,1211.21 1160.19,1211.21 1160.78,1211.21 1161.36,1211.21 1161.95,1211.21 1162.54,1211.21 1163.12,1211.21 1163.71,1211.21 1164.29,1211.21 1164.88,1211.21 1165.47,1211.21 1166.05,1211.21 1166.64,1211.21 1167.23,1211.21 1167.81,1211.21 1168.4,1211.21 1168.99,1211.21 1169.57,1211.21 1170.16,1211.21 1170.75,1211.21 1171.33,1211.21 1171.92,1211.21 1172.5,1211.21 1173.09,1211.21 1173.68,1211.21 1174.26,1211.21 1174.85,1211.21 1175.44,1211.21 1176.02,1211.21 1176.61,1211.21 1177.2,1211.21 1177.78,1211.21 1178.37,1211.21 1178.96,1211.21 1179.54,1211.21 1180.13,1211.21 1180.71,1211.21 1181.3,1211.21 1181.89,1211.21 1182.47,1211.21 1183.06,1211.21 1183.65,1211.21 1184.23,1211.21 1184.82,1211.21 1185.41,1211.21 1185.99,1211.21 1186.58,1211.21 1187.16,1211.21 1187.75,1211.21 1188.34,1211.21 1188.92,1211.21 1189.51,1211.21 1190.1,1211.21 1190.68,1211.21 1191.27,1211.21 1191.86,1211.21 1192.44,1211.21 1193.03,1211.21 1193.62,1211.21 1194.2,1211.21 1194.79,1211.21 1195.37,1211.21 1195.96,1211.21 1196.55,1211.21 1197.13,1211.21 1197.72,1211.21 1198.31,1211.21 1198.89,1211.21 1199.48,1211.21 1200.07,1211.21 1200.65,1211.21 1201.24,1211.21 1201.83,1211.21 1202.41,1211.21 1203,1211.21 1203.58,1211.21 1204.17,1211.21 1204.76,1211.21 1205.34,1211.21 1205.93,1211.21 1206.52,1211.21 1207.1,1211.21 1207.69,1211.21 1208.28,1211.21 1208.86,1211.21 1209.45,1211.21 1210.03,1211.21 1210.62,1211.21 1211.21,1211.21 1211.79,1211.21 1212.38,1211.21 1212.97,1211.21 1213.55,1211.21 1214.14,1211.21 1214.73,1211.21 1215.31,1211.21 1215.9,1211.21 1216.49,1211.21 1217.07,1211.21 1217.66,1211.21 1218.24,1211.21 1218.83,1211.21 1219.42,1211.21 1220,1211.21 1220.59,1211.21 1221.18,1211.21 1221.76,1211.21 1222.35,1211.21 1222.94,1211.21 1223.52,1211.21 1224.11,1211.21 1224.7,1211.21 1225.28,1211.21 1225.87,1211.21 1226.45,1211.21 1227.04,1211.21 1227.63,1211.21 1228.21,1211.21 1228.8,1211.21 1229.39,1211.21 1229.97,1211.21 1230.56,1211.21 1231.15,1211.21 1231.73,1211.21 1232.32,1211.21 1232.91,1211.21 1233.49,1211.21 1234.08,1211.21 1234.66,1211.21 1235.25,1211.21 1235.84,1211.21 1236.42,1211.21 1237.01,1211.21 1237.6,1211.21 1238.18,1211.21 1238.77,1211.21 1239.36,1211.21 1239.94,1211.21 1240.53,1211.21 1241.11,1211.21 1241.7,1211.21 1242.29,1211.21 1242.87,1211.21 1243.46,1211.21 1244.05,1211.21 1244.63,1211.21 1245.22,1211.21 1245.81,1211.21 1246.39,1211.21 1246.98,1211.21 1247.57,1211.21 1248.15,1211.21 1248.74,1211.21 1249.32,1211.21 1249.91,1211.21 1250.5,1211.21 1251.08,1211.21 1251.67,1211.21 1252.26,1211.21 1252.84,1211.21 1253.43,1211.21 1254.02,1211.21 1254.6,1211.21 1255.19,1211.21 1255.78,1211.21 1256.36,1211.21 1256.95,1211.21 1257.53,1211.21 1258.12,1211.21 1258.71,1211.21 1259.29,1211.21 1259.88,1211.21 1260.47,1211.21 1261.05,1211.21 1261.64,1211.21 1262.23,1211.21 1262.81,1211.21 1263.4,1211.21 1263.98,1211.21 1264.57,1211.21 1265.16,1211.21 1265.74,1211.21 1266.33,1211.21 1266.92,1211.21 1267.5,1211.21 1268.09,1211.21 1268.68,1211.21 1269.26,1211.21 1269.85,1211.21 1270.44,1211.21 1271.02,1211.21 1271.61,1211.21 1272.19,1211.21 1272.78,1211.21 1273.37,1211.21 1273.95,1211.21 1274.54,1211.21 1275.13,1211.21 1275.71,1211.21 1276.3,1211.21 1276.89,1211.21 1277.47,1211.21 1278.06,1211.21 1278.65,1211.21 1279.23,1211.21 1279.82,1211.21 1280.4,1211.21 1280.99,1211.21 1281.58,1211.21 1282.16,1211.21 1282.75,1211.21 1283.34,1211.21 1283.92,1211.21 1284.51,1211.21 1285.1,1211.21 1285.68,1211.21 1286.27,1211.21 1286.86,1211.21 1287.44,1211.21 1288.03,1211.21 1288.61,1211.21 1289.2,1211.21 1289.79,1211.21 1290.37,1211.21 1290.96,1211.21 1291.55,1211.21 1292.13,1211.21 1292.72,1211.21 1293.31,1211.21 1293.89,1211.21 1294.48,1211.21 1295.06,1211.21 1295.65,1211.21 1296.24,1211.21 1296.82,1211.21 1297.41,1211.21 1298,1211.21 1298.58,1211.21 1299.17,1211.21 1299.76,1211.21 1300.34,1211.21 1300.93,1211.21 1301.52,1211.21 1302.1,1211.21 1302.69,1211.21 1303.27,1211.21 1303.86,1211.21 1304.45,1211.21 1305.03,1211.21 1305.62,1211.21 1306.21,1211.21 1306.79,1211.21 1307.38,1211.21 1307.97,1211.21 1308.55,1211.21 1309.14,1211.21 1309.73,1211.21 1310.31,1211.21 1310.9,1211.21 1311.48,1211.21 1312.07,1211.21 1312.66,1211.21 1313.24,1211.21 1313.83,1211.21 1314.42,1211.21 1315,1211.21 1315.59,1211.21 1316.18,1211.21 1316.76,1211.21 1317.35,1211.21 1317.93,1211.21 1318.52,1211.21 1319.11,1211.21 1319.69,1211.21 1320.28,1211.21 1320.87,1211.21 1321.45,1211.21 1322.04,1211.21 1322.63,1211.21 1323.21,1211.21 1323.8,1211.21 1324.39,1211.21 1324.97,1211.21 1325.56,1211.21 1326.14,1211.21 1326.73,1211.21 1327.32,1211.21 1327.9,1211.21 1328.49,1211.21 1329.08,1211.21 1329.66,1211.21 1330.25,1211.21 1330.84,1211.21 1331.42,1211.21 1332.01,1211.21 1332.6,1211.21 1333.18,1211.21 1333.77,1211.21 1334.35,1211.21 1334.94,1211.21 1335.53,1211.21 1336.11,1211.21 1336.7,1211.21 1337.29,1211.21 1337.87,1211.21 1338.46,1211.21 1339.05,1211.21 1339.63,1211.21 1340.22,1211.21 1340.8,1211.21 1341.39,1211.21 1341.98,1211.21 1342.56,1211.21 1343.15,1211.21 1343.74,1211.21 1344.32,1211.21 1344.91,1211.21 1345.5,1211.21 1346.08,1211.21 1346.67,1211.21 1347.26,1211.21 1347.84,1211.21 1348.43,1211.21 1349.01,1211.21 1349.6,1211.21 1350.19,1211.21 1350.77,1211.21 1351.36,1211.21 1351.95,1211.21 1352.53,1211.21 1353.12,1211.21 1353.71,1211.21 1354.29,1211.21 1354.88,1211.21 1355.47,1211.21 1356.05,1211.21 1356.64,1211.21 1357.22,1211.21 1357.81,1211.21 1358.4,1211.21 1358.98,1211.21 1359.57,1211.21 1360.16,1211.21 1360.74,1211.21 1361.33,1211.21 1361.92,1211.21 1362.5,1211.21 1363.09,1211.21 1363.68,1211.21 1364.26,1211.21 1364.85,1211.21 1365.43,1211.21 1366.02,1211.21 1366.61,1211.21 1367.19,1211.21 1367.78,1211.21 1368.37,1211.21 1368.95,1211.21 1369.54,1211.21 1370.13,1211.21 1370.71,1211.21 1371.3,1211.21 1371.88,1211.21 1372.47,1211.21 1373.06,1211.21 1373.64,1211.21 1374.23,1211.21 1374.82,1211.21 1375.4,1211.21 1375.99,1211.21 1376.58,1211.21 1377.16,1211.21 1377.75,1211.21 1378.34,1211.21 1378.92,1211.21 1379.51,1211.21 1380.09,1211.21 1380.68,1211.21 1381.27,1211.21 1381.85,1211.21 1382.44,1211.21 1383.03,1211.21 1383.61,1211.21 1384.2,1211.21 1384.79,1211.21 1385.37,1211.21 1385.96,1211.21 1386.55,1211.21 1387.13,1211.21 1387.72,1211.21 1388.3,1211.21 1388.89,1211.21 1389.48,1211.21 1390.06,1211.21 1390.65,1211.21 1391.24,1211.21 1391.82,1211.21 1392.41,1211.21 1393,1211.21 1393.58,1211.21 1394.17,1211.21 1394.75,1211.21 1395.34,1211.21 1395.93,1211.21 1396.51,1211.21 1397.1,1211.21 1397.69,1211.21 1398.27,1211.21 1398.86,1211.21 1399.45,1211.21 1400.03,1211.21 1400.62,1211.21 1401.21,1211.21 1401.79,1211.21 1402.38,1211.21 1402.96,1211.21 1403.55,1211.21 1404.14,1211.21 1404.72,1211.21 1405.31,1211.21 1405.9,1211.21 1406.48,1211.21 1407.07,1211.21 1407.66,1211.21 1408.24,1211.21 1408.83,1211.21 1409.42,1211.21 1410,1211.21 1410.59,1211.21 1411.17,1211.21 1411.76,1211.21 1412.35,1211.21 1412.93,1211.21 1413.52,1211.21 1414.11,1211.21 1414.69,1211.21 1415.28,1211.21 1415.87,1211.21 1416.45,1211.21 1417.04,1211.21 1417.63,1211.21 1418.21,1211.21 1418.8,1211.21 1419.38,1211.21 1419.97,1211.21 1420.56,1211.21 1421.14,1211.21 1421.73,1211.21 1422.32,1211.21 1422.9,1211.21 1423.49,1211.21 1424.08,1211.21 1424.66,1211.21 1425.25,1211.21 1425.83,1211.21 1426.42,1211.21 1427.01,1211.21 1427.59,1211.21 1428.18,1211.21 1428.77,1211.21 1429.35,1211.21 1429.94,1211.21 1430.53,1211.21 1431.11,1211.21 1431.7,1211.21 1432.29,1211.21 1432.87,1211.21 1433.46,1211.21 1434.04,1211.21 1434.63,1211.21 1435.22,1211.21 1435.8,1211.21 1436.39,1211.21 1436.98,1211.21 1437.56,1211.21 1438.15,1211.21 1438.74,1211.21 1439.32,1211.21 1439.91,1211.21 1440.5,1211.21 1441.08,1211.21 1441.67,1211.21 1442.25,1211.21 1442.84,1211.21 1443.43,1211.21 1444.01,1211.21 1444.6,1211.21 1445.19,1211.21 1445.77,1211.21 1446.36,1211.21 1446.95,1211.21 1447.53,1211.21 1448.12,1211.21 1448.7,1211.21 1449.29,1211.21 1449.88,1211.21 1450.46,1211.21 1451.05,1211.21 1451.64,1211.21 1452.22,1211.21 1452.81,1211.21 1453.4,1211.21 1453.98,1211.21 1454.57,1211.21 1455.16,1211.21 1455.74,1211.21 1456.33,1211.21 1456.91,1211.21 1457.5,1211.21 1458.09,1211.21 1458.67,1211.21 1459.26,1211.21 1459.85,1211.21 1460.43,1211.21 1461.02,1211.21 1461.61,1211.21 1462.19,1211.21 1462.78,1211.21 1463.37,1211.21 1463.95,1211.21 1464.54,1211.21 1465.12,1211.21 1465.71,1211.21 1466.3,1211.21 1466.88,1211.21 1467.47,1211.21 1468.06,1211.21 1468.64,1211.21 1469.23,1211.21 1469.82,1211.21 1470.4,1211.21 1470.99,1211.21 1471.57,1211.21 1472.16,1211.21 1472.75,1211.21 1473.33,1211.21 1473.92,1211.21 1474.51,1211.21 1475.09,1211.21 1475.68,1211.21 1476.27,1211.21 1476.85,1211.21 1477.44,1211.21 1478.03,1211.21 1478.61,1211.21 1479.2,1211.21 1479.78,1211.21 1480.37,1211.21 1480.96,1211.21 1481.54,1211.21 1482.13,1211.21 1482.72,1211.21 1483.3,1211.21 1483.89,1211.21 1484.48,1211.21 1485.06,1211.21 1485.65,1211.21 1486.24,1211.21 1486.82,1211.21 1487.41,1211.21 1487.99,1211.21 1488.58,1211.21 1489.17,1211.21 1489.75,1211.21 1490.34,1211.21 1490.93,1211.21 1491.51,1211.21 1492.1,1211.21 1492.69,1211.21 1493.27,1211.21 1493.86,1211.21 1494.45,1211.21 1495.03,1211.21 1495.62,1211.21 1496.2,1211.21 1496.79,1211.21 1497.38,1211.21 1497.96,1211.21 1498.55,1211.21 1499.14,1211.21 1499.72,1211.21 1500.31,1211.21 1500.9,1211.21 1501.48,1211.21 1502.07,1211.21 1502.65,1211.21 1503.24,1211.21 1503.83,1211.21 1504.41,1211.21 1505,1211.21 1505.59,1211.21 1506.17,1211.21 1506.76,1211.21 1507.35,1211.21 1507.93,1211.21 1508.52,1211.21 1509.11,1211.21 1509.69,1211.21 1510.28,1211.21 1510.86,1211.21 1511.45,1211.21 1512.04,1211.21 1512.62,1211.21 1513.21,1211.21 1513.8,1211.21 1514.38,1211.21 1514.97,1211.21 1515.56,1211.21 1516.14,1211.21 1516.73,1211.21 1517.32,1211.21 1517.9,1211.21 1518.49,1211.21 1519.07,1211.21 1519.66,1211.21 1520.25,1211.21 1520.83,1211.21 1521.42,1211.21 1522.01,1211.21 1522.59,1211.21 1523.18,1211.21 1523.77,1211.21 1524.35,1211.21 1524.94,1211.21 1525.52,1211.21 1526.11,1211.21 1526.7,1211.21 1527.28,1211.21 1527.87,1211.21 1528.46,1211.21 1529.04,1211.21 1529.63,1211.21 1530.22,1211.21 1530.8,1211.21 1531.39,1211.21 1531.98,1211.21 1532.56,1211.21 1533.15,1211.21 1533.73,1211.21 1534.32,1211.21 1534.91,1211.21 1535.49,1211.21 1536.08,1211.21 1536.67,1211.21 1537.25,1211.21 1537.84,1211.21 1538.43,1211.21 1539.01,1211.21 1539.6,1211.21 1540.19,1211.21 1540.77,1211.21 1541.36,1211.21 1541.94,1211.21 1542.53,1211.21 1543.12,1211.21 1543.7,1211.21 1544.29,1211.21 1544.88,1211.21 1545.46,1211.21 1546.05,1211.21 1546.64,1211.21 1547.22,1211.21 1547.81,1211.21 1548.4,1211.21 1548.98,1211.21 1549.57,1211.21 1550.15,1211.21 1550.74,1211.21 1551.33,1211.21 1551.91,1211.21 1552.5,1211.21 1553.09,1211.21 1553.67,1211.21 1554.26,1211.21 1554.85,1211.21 1555.43,1211.21 1556.02,1211.21 1556.6,1211.21 1557.19,1211.21 1557.78,1211.21 1558.36,1211.21 1558.95,1211.21 1559.54,1211.21 1560.12,1211.21 1560.71,1211.21 1561.3,1211.21 1561.88,1211.21 1562.47,1211.21 1563.06,1211.21 1563.64,1211.21 1564.23,1211.21 1564.81,1211.21 1565.4,1211.21 1565.99,1211.21 1566.57,1211.21 1567.16,1211.21 1567.75,1211.21 1568.33,1211.21 1568.92,1211.21 1569.51,1211.21 1570.09,1211.21 1570.68,1211.21 1571.27,1211.21 1571.85,1211.21 1572.44,1211.21 1573.02,1211.21 1573.61,1211.21 1574.2,1211.21 1574.78,1211.21 1575.37,1211.21 1575.96,1211.21 1576.54,1211.21 1577.13,1211.21 1577.72,1211.21 1578.3,1211.21 1578.89,1211.21 1579.47,1211.21 1580.06,1211.21 1580.65,1211.21 1581.23,1211.21 1581.82,1211.21 1582.41,1211.21 1582.99,1211.21 1583.58,1211.21 1584.17,1211.21 1584.75,1211.21 1585.34,1211.21 1585.93,1211.21 1586.51,1211.21 1587.1,1211.21 1587.68,1211.21 1588.27,1211.21 1588.86,1211.21 1589.44,1211.21 1590.03,1211.21 1590.62,1211.21 1591.2,1211.21 1591.79,1211.21 1592.38,1211.21 1592.96,1211.21 1593.55,1211.21 1594.14,1211.21 1594.72,1211.21 1595.31,1211.21 1595.89,1211.21 1596.48,1211.21 1597.07,1211.21 1597.65,1211.21 1598.24,1211.21 1598.83,1211.21 1599.41,1211.21 1600,1211.21 1600.59,1211.21 1601.17,1211.21 1601.76,1211.21 1602.34,1211.21 1602.93,1211.21 1603.52,1211.21 1604.1,1211.21 1604.69,1211.21 1605.28,1211.21 1605.86,1211.21 1606.45,1211.21 1607.04,1211.21 1607.62,1211.21 1608.21,1211.21 1608.8,1211.21 1609.38,1211.21 1609.97,1211.21 1610.55,1211.21 1611.14,1211.21 1611.73,1211.21 1612.31,1211.21 1612.9,1211.21 1613.49,1211.21 1614.07,1211.21 1614.66,1211.21 1615.25,1211.21 1615.83,1211.21 1616.42,1211.21 1617.01,1211.21 1617.59,1211.21 1618.18,1211.21 1618.76,1211.21 1619.35,1211.21 1619.94,1211.21 1620.52,1211.21 1621.11,1211.21 1621.7,1211.21 1622.28,1211.21 1622.87,1211.21 1623.46,1211.21 1624.04,1211.21 1624.63,1211.21 1625.22,1211.21 1625.8,1211.21 1626.39,1211.21 1626.97,1211.21 1627.56,1211.21 1628.15,1211.21 1628.73,1211.21 1629.32,1211.21 1629.91,1211.21 1630.49,1211.21 1631.08,1211.21 1631.67,1211.21 1632.25,1211.21 1632.84,1211.21 1633.42,1211.21 1634.01,1211.21 1634.6,1211.21 1635.18,1211.21 1635.77,1211.21 1636.36,1211.21 1636.94,1211.21 1637.53,1211.21 1638.12,1211.21 1638.7,1211.21 1639.29,1211.21 1639.88,1211.21 1640.46,1211.21 1641.05,1211.21 1641.63,1211.21 1642.22,1211.21 1642.81,1211.21 1643.39,1211.21 1643.98,1211.21 1644.57,1211.21 1645.15,1211.21 1645.74,1211.21 1646.33,1211.21 1646.91,1211.21 1647.5,1211.21 1648.09,1211.21 1648.67,1211.21 1649.26,1211.21 1649.84,1211.21 1650.43,1211.21 1651.02,1211.21 1651.6,1211.21 1652.19,1211.21 1652.78,1211.21 1653.36,1211.21 1653.95,1211.21 1654.54,1211.21 1655.12,1211.21 1655.71,1211.21 1656.29,1211.21 1656.88,1211.21 1657.47,1211.21 1658.05,1211.21 1658.64,1211.21 1659.23,1211.21 1659.81,1211.21 1660.4,1211.21 1660.99,1211.21 1661.57,1211.21 1662.16,1211.21 1662.75,1211.21 1663.33,1211.21 1663.92,1211.21 1664.5,1211.21 1665.09,1211.21 1665.68,1211.21 1666.26,1211.21 1666.85,1211.21 1667.44,1211.21 1668.02,1211.21 1668.61,1211.21 1669.2,1211.21 1669.78,1211.21 1670.37,1211.21 1670.96,1211.21 1671.54,1211.21 1672.13,1211.21 1672.71,1211.21 1673.3,1211.21 1673.89,1211.21 1674.47,1211.21 1675.06,1211.21 1675.65,1211.21 1676.23,1211.21 1676.82,1211.21 1677.41,1211.21 1677.99,1211.21 1678.58,1211.21 1679.17,1211.21 1679.75,1211.21 1680.34,1211.21 1680.92,1211.21 1681.51,1211.21 1682.1,1211.21 1682.68,1211.21 1683.27,1211.21 1683.86,1211.21 1684.44,1211.21 1685.03,1211.21 1685.62,1211.21 1686.2,1211.21 1686.79,1211.21 1687.37,1211.21 1687.96,1211.21 1688.55,1211.21 1689.13,1211.21 1689.72,1211.21 1690.31,1211.21 1690.89,1211.21 1691.48,1211.21 1692.07,1211.21 1692.65,1211.21 1693.24,1211.21 1693.83,1211.21 1694.41,1211.21 1695,1211.21 1695.58,1211.21 1696.17,1211.21 1696.76,1211.21 1697.34,1211.21 1697.93,1211.21 1698.52,1211.21 1699.1,1211.21 1699.69,1211.21 1700.28,1211.21 1700.86,1211.21 1701.45,1211.21 1702.04,1211.21 1702.62,1211.21 1703.21,1211.21 1703.79,1211.21 1704.38,1211.21 1704.97,1211.21 1705.55,1211.21 1706.14,1211.21 1706.73,1211.21 1707.31,1211.21 1707.9,1211.21 1708.49,1211.21 1709.07,1211.21 1709.66,1211.21 1710.24,1211.21 1710.83,1211.21 1711.42,1211.21 1712,1211.21 1712.59,1211.21 1713.18,1211.21 1713.76,1211.21 1714.35,1211.21 1714.94,1211.21 1715.52,1211.21 1716.11,1211.21 1716.7,1211.21 1717.28,1211.21 1717.87,1211.21 1718.45,1211.21 1719.04,1211.21 1719.63,1211.21 1720.21,1211.21 1720.8,1211.21 1721.39,1211.21 1721.97,1211.21 1722.56,1211.21 1723.15,1211.21 1723.73,1211.21 1724.32,1211.21 1724.91,1211.21 1725.49,1211.21 1726.08,1211.21 1726.66,1211.21 1727.25,1211.21 1727.84,1211.21 1728.42,1211.21 1729.01,1211.21 1729.6,1211.21 1730.18,1211.21 1730.77,1211.21 1731.36,1211.21 1731.94,1211.21 1732.53,1211.21 1733.11,1211.21 1733.7,1211.21 1734.29,1211.21 1734.87,1211.21 1735.46,1211.21 1736.05,1211.21 1736.63,1211.21 1737.22,1211.21 1737.81,1211.21 1738.39,1211.21 1738.98,1211.21 1739.57,1211.21 1740.15,1211.21 1740.74,1211.21 1741.32,1211.21 1741.91,1211.21 1742.5,1211.21 1743.08,1211.21 1743.67,1211.21 1744.26,1211.21 1744.84,1211.21 1745.43,1211.21 1746.02,1211.21 1746.6,1211.21 1747.19,1211.21 1747.78,1211.21 1748.36,1211.21 1748.95,1211.21 1749.53,1211.21 1750.12,1211.21 1750.71,1211.21 1751.29,1211.21 1751.88,1211.21 1752.47,1211.21 1753.05,1211.21 1753.64,1211.21 1754.23,1211.21 1754.81,1211.21 1755.4,1211.21 1755.99,1211.21 1756.57,1211.21 1757.16,1211.21 1757.74,1211.21 1758.33,1211.21 1758.92,1211.21 1759.5,1211.21 1760.09,1211.21 1760.68,1211.21 1761.26,1211.21 1761.85,1211.21 1762.44,1211.21 1763.02,1211.21 1763.61,1211.21 1764.19,1211.21 1764.78,1211.21 1765.37,1211.21 1765.95,1211.21 1766.54,1211.21 1767.13,1211.21 1767.71,1211.21 1768.3,1211.21 1768.89,1211.21 1769.47,1211.21 1770.06,1211.21 1770.65,1211.21 1771.23,1211.21 1771.82,1211.21 1772.4,1211.21 1772.99,1211.21 1773.58,1211.21 1774.16,1211.21 1774.75,1211.21 1775.34,1211.21 1775.92,1211.21 1776.51,1211.21 1777.1,1211.21 1777.68,1211.21 1778.27,1211.21 1778.86,1211.21 1779.44,1211.21 1780.03,1211.21 1780.61,1211.21 1781.2,1211.21 1781.79,1211.21 1782.37,1211.21 1782.96,1211.21 1783.55,1211.21 1784.13,1211.21 1784.72,1211.21 1785.31,1211.21 1785.89,1211.21 1786.48,1211.21 1787.06,1211.21 1787.65,1211.21 1788.24,1211.21 1788.82,1211.21 1789.41,1211.21 1790,1211.21 1790.58,1211.21 1791.17,1211.21 1791.76,1211.21 1792.34,1211.21 1792.93,1211.21 1793.52,1211.21 1794.1,1211.21 1794.69,1211.21 1795.27,1211.21 1795.86,1211.21 1796.45,1211.21 1797.03,1211.21 1797.62,1211.21 1798.21,1211.21 1798.79,1211.21 1799.38,1211.21 1799.97,1211.21 1800.55,1211.21 1801.14,1211.21 1801.73,1211.21 1802.31,1211.21 1802.9,1211.21 1803.48,1211.21 1804.07,1211.21 1804.66,1211.21 1805.24,1211.21 1805.83,1211.21 1806.42,1211.21 1807,1211.21 1807.59,1211.21 1808.18,1211.21 1808.76,1211.21 1809.35,1211.21 1809.94,1211.21 1810.52,1211.21 1811.11,1211.21 1811.69,1211.21 1812.28,1211.21 1812.87,1211.21 1813.45,1211.21 1814.04,1211.21 1814.63,1211.21 1815.21,1211.21 1815.8,1211.21 1816.39,1211.21 1816.97,1211.21 1817.56,1211.21 1818.14,1211.21 1818.73,1211.21 1819.32,1211.21 1819.9,1211.21 1820.49,1211.21 1821.08,1211.21 1821.66,1211.21 1822.25,1211.21 1822.84,1211.21 1823.42,1211.21 1824.01,1211.21 1824.6,1211.21 1825.18,1211.21 1825.77,1211.21 1826.35,1211.21 1826.94,1211.21 1827.53,1211.21 1828.11,1211.21 1828.7,1211.21 1829.29,1211.21 1829.87,1211.21 1830.46,1211.21 1831.05,1211.21 1831.63,1211.21 1832.22,1211.21 1832.81,1211.21 1833.39,1211.21 1833.98,1211.21 1834.56,1211.21 1835.15,1211.21 1835.74,1211.21 1836.32,1211.21 1836.91,1211.21 1837.5,1211.21 1838.08,1211.21 1838.67,1211.21 1839.26,1211.21 1839.84,1211.21 1840.43,1211.21 1841.01,1211.21 1841.6,1211.21 1842.19,1211.21 1842.77,1211.21 1843.36,1211.21 1843.95,1211.21 1844.53,1211.21 1845.12,1211.21 1845.71,1211.21 1846.29,1211.21 1846.88,1211.21 1847.47,1211.21 1848.05,1211.21 1848.64,1211.21 1849.22,1211.21 1849.81,1211.21 1850.4,1211.21 1850.98,1211.21 1851.57,1211.21 1852.16,1211.21 1852.74,1211.21 1853.33,1211.21 1853.92,1211.21 1854.5,1211.21 1855.09,1211.21 1855.68,1211.21 1856.26,1211.21 1856.85,1211.21 1857.43,1211.21 1858.02,1211.21 1858.61,1211.21 1859.19,1211.21 1859.78,1211.21 1860.37,1211.21 1860.95,1211.21 1861.54,1211.21 1862.13,1211.21 1862.71,1211.21 1863.3,1211.21 1863.88,1211.21 1864.47,1211.21 1865.06,1211.21 1865.64,1211.21 1866.23,1211.21 1866.82,1211.21 1867.4,1211.21 1867.99,1211.21 1868.58,1211.21 1869.16,1211.21 1869.75,1211.21 1870.34,1211.21 1870.92,1211.21 1871.51,1211.21 1872.09,1211.21 1872.68,1211.21 1873.27,1211.21 1873.85,1211.21 1874.44,1211.21 1875.03,1211.21 1875.61,1211.21 1876.2,1211.21 1876.79,1211.21 1877.37,1211.21 1877.96,1211.21 1878.55,1211.21 1879.13,1211.21 1879.72,1211.21 1880.3,1211.21 1880.89,1211.21 1881.48,1211.21 1882.06,1211.21 1882.65,1211.21 1883.24,1211.21 1883.82,1211.21 1884.41,1211.21 1885,1211.21 1885.58,1211.21 1886.17,1211.21 1886.76,1211.21 1887.34,1211.21 1887.93,1211.21 1888.51,1211.21 1889.1,1211.21 1889.69,1211.21 1890.27,1211.21 1890.86,1211.21 1891.45,1211.21 1892.03,1211.21 1892.62,1211.21 1893.21,1211.21 1893.79,1211.21 1894.38,1211.21 1894.96,1211.21 1895.55,1211.21 1896.14,1211.21 1896.72,1211.21 1897.31,1211.21 1897.9,1211.21 1898.48,1211.21 1899.07,1211.21 1899.66,1211.21 1900.24,1211.21 1900.83,1211.21 1901.42,1211.21 1902,1211.21 1902.59,1211.21 1903.17,1211.21 1903.76,1211.21 1904.35,1211.21 1904.93,1211.21 1905.52,1211.21 1906.11,1211.21 1906.69,1211.21 1907.28,1211.21 1907.87,1211.21 1908.45,1211.21 1909.04,1211.21 1909.63,1211.21 1910.21,1211.21 1910.8,1211.21 1911.38,1211.21 1911.97,1211.21 1912.56,1211.21 1913.14,1211.21 1913.73,1211.21 1914.32,1211.21 1914.9,1211.21 1915.49,1211.21 1916.08,1211.21 1916.66,1211.21 1917.25,1211.21 1917.83,1211.21 1918.42,1211.21 1919.01,1211.21 1919.59,1211.21 1920.18,1211.21 1920.77,1211.21 1921.35,1211.21 1921.94,1211.21 1922.53,1211.21 1923.11,1211.21 1923.7,1211.21 1924.29,1211.21 1924.87,1211.21 1925.46,1211.21 1926.04,1211.21 1926.63,1211.21 1927.22,1211.21 1927.8,1211.21 1928.39,1211.21 1928.98,1211.21 1929.56,1211.21 1930.15,1211.21 1930.74,1211.21 1931.32,1211.21 1931.91,1211.21 1932.5,1211.21 1933.08,1211.21 1933.67,1211.21 1934.25,1211.21 1934.84,1211.21 1935.43,1211.21 1936.01,1211.21 1936.6,1211.21 1937.19,1211.21 1937.77,1211.21 1938.36,1211.21 1938.95,1211.21 1939.53,1211.21 1940.12,1211.21 1940.71,1211.21 1941.29,1211.21 1941.88,1211.21 1942.46,1211.21 1943.05,1211.21 1943.64,1211.21 1944.22,1211.21 1944.81,1211.21 1945.4,1211.21 1945.98,1211.21 1946.57,1211.21 1947.16,1211.21 1947.74,1211.21 1948.33,1211.21 1948.91,1211.21 1949.5,1211.21 1950.09,1211.21 1950.67,1211.21 1951.26,1211.21 1951.85,1211.21 1952.43,1211.21 1953.02,1211.21 1953.61,1211.21 1954.19,1211.21 1954.78,1211.21 1955.37,1211.21 1955.95,1211.21 1956.54,1211.21 1957.12,1211.21 1957.71,1211.21 1958.3,1211.21 1958.88,1211.21 1959.47,1211.21 1960.06,1211.21 1960.64,1211.21 1961.23,1211.21 1961.82,1211.21 1962.4,1211.21 1962.99,1211.21 1963.58,1211.21 1964.16,1211.21 1964.75,1211.21 1965.33,1211.21 1965.92,1211.21 1966.51,1211.21 1967.09,1211.21 1967.68,1211.21 1968.27,1211.21 1968.85,1211.21 1969.44,1211.21 1970.03,1211.21 1970.61,1211.21 1971.2,1211.21 1971.78,1211.21 1972.37,1211.21 1972.96,1211.21 1973.54,1211.21 1974.13,1211.21 1974.72,1211.21 1975.3,1211.21 1975.89,1211.21 1976.48,1211.21 1977.06,1211.21 1977.65,1211.21 1978.24,1211.21 1978.82,1211.21 1979.41,1211.21 1979.99,1211.21 1980.58,1211.21 1981.17,1211.21 1981.75,1211.21 1982.34,1211.21 1982.93,1211.21 1983.51,1211.21 1984.1,1211.21 1984.69,1211.21 1985.27,1211.21 1985.86,1211.21 1986.45,1211.21 1987.03,1211.21 1987.62,1211.21 1988.2,1211.21 1988.79,1211.21 1989.38,1211.21 1989.96,1211.21 1990.55,1211.21 1991.14,1211.21 1991.72,1211.21 1992.31,1211.21 1992.9,1211.21 1993.48,1211.21 1994.07,1211.21 1994.65,1211.21 1995.24,1211.21 1995.83,1211.21 1996.41,1211.21 1997,1211.21 1997.59,1211.21 1998.17,1211.21 1998.76,1211.21 1999.35,1211.21 1999.93,1211.21 2000.52,1211.21 2001.11,1211.21 2001.69,1211.21 2002.28,1211.21 2002.86,1211.21 2003.45,1211.21 2004.04,1211.21 2004.62,1211.21 2005.21,1211.21 2005.8,1211.21 2006.38,1211.21 2006.97,1211.21 2007.56,1211.21 2008.14,1211.21 2008.73,1211.21 2009.32,1211.21 2009.9,1211.21 2010.49,1211.21 2011.07,1211.21 2011.66,1211.21 2012.25,1211.21 2012.83,1211.21 2013.42,1211.21 2014.01,1211.21 2014.59,1211.21 2015.18,1211.21 2015.77,1211.21 2016.35,1211.21 2016.94,1211.21 2017.53,1211.21 2018.11,1211.21 2018.7,1211.21 2019.28,1211.21 2019.87,1211.21 2020.46,1211.21 2021.04,1211.21 2021.63,1211.21 2022.22,1211.21 2022.8,1211.21 2023.39,1211.21 2023.98,1211.21 2024.56,1211.21 2025.15,1211.21 2025.73,1211.21 2026.32,1211.21 2026.91,1211.21 2027.49,1211.21 2028.08,1211.21 2028.67,1211.21 2029.25,1211.21 2029.84,1211.21 2030.43,1211.21 2031.01,1211.21 2031.6,1211.21 2032.19,1211.21 2032.77,1211.21 2033.36,1211.21 2033.94,1211.21 2034.53,1211.21 2035.12,1211.21 2035.7,1211.21 2036.29,1211.21 2036.88,1211.21 2037.46,1211.21 2038.05,1211.21 2038.64,1211.21 2039.22,1211.21 2039.81,1211.21 2040.4,1211.21 2040.98,1211.21 2041.57,1211.21 2042.15,1211.21 2042.74,1211.21 2043.33,1211.21 2043.91,1211.21 2044.5,1211.21 2045.09,1211.21 2045.67,1211.21 2046.26,1211.21 2046.85,1211.21 2047.43,1211.21 2048.02,1211.21 2048.6,1211.21 2049.19,1211.21 2049.78,1211.21 2050.36,1211.21 2050.95,1211.21 2051.54,1211.21 2052.12,1211.21 2052.71,1211.21 2053.3,1211.21 2053.88,1211.21 2054.47,1211.21 2055.06,1211.21 2055.64,1211.21 2056.23,1211.21 2056.81,1211.21 2057.4,1211.21 2057.99,1211.21 2058.57,1211.21 2059.16,1211.21 2059.75,1211.21 2060.33,1211.21 2060.92,1211.21 2061.51,1211.21 2062.09,1211.21 2062.68,1211.21 2063.27,1211.21 2063.85,1211.21 2064.44,1211.21 2065.02,1211.21 2065.61,1211.21 2066.2,1211.21 2066.78,1211.21 2067.37,1211.21 2067.96,1211.21 2068.54,1211.21 2069.13,1211.21 2069.72,1211.21 2070.3,1211.21 2070.89,1211.21 2071.48,1211.21 2072.06,1211.21 2072.65,1211.21 2073.23,1211.21 2073.82,1211.21 2074.41,1211.21 2074.99,1211.21 2075.58,1211.21 2076.17,1211.21 2076.75,1211.21 2077.34,1211.21 2077.93,1211.21 2078.51,1211.21 2079.1,1211.21 2079.68,1211.21 2080.27,1211.21 2080.86,1211.21 2081.44,1211.21 2082.03,1211.21 2082.62,1211.21 2083.2,1211.21 2083.79,1211.21 2084.38,1211.21 2084.96,1211.21 2085.55,1211.21 2086.14,1211.21 2086.72,1211.21 2087.31,1211.21 2087.89,1211.21 2088.48,1211.21 2089.07,1211.21 2089.65,1211.21 2090.24,1211.21 2090.83,1211.21 2091.41,1211.21 2092,1211.21 2092.59,1211.21 2093.17,1211.21 2093.76,1211.21 2094.35,1211.21 2094.93,1211.21 2095.52,1211.21 2096.1,1211.21 2096.69,1211.21 2097.28,1211.21 2097.86,1211.21 2098.45,1211.21 2099.04,1211.21 2099.62,1211.21 2100.21,1211.21 2100.8,1211.21 2101.38,1211.21 2101.97,1211.21 2102.55,1211.21 2103.14,1211.21 2103.73,1211.21 2104.31,1211.21 2104.9,1211.21 2105.49,1211.21 2106.07,1211.21 2106.66,1211.21 2107.25,1211.21 2107.83,1211.21 2108.42,1211.21 2109.01,1211.21 2109.59,1211.21 2110.18,1211.21 2110.76,1211.21 2111.35,1211.21 2111.94,1211.21 2112.52,1211.21 2113.11,1211.21 2113.7,1211.21 2114.28,1211.21 2114.87,1211.21 2115.46,1211.21 2116.04,1211.21 2116.63,1211.21 2117.22,1211.21 2117.8,1211.21 2118.39,1211.21 2118.97,1211.21 2119.56,1211.21 2120.15,1211.21 2120.73,1211.21 2121.32,1211.21 2121.91,1211.21 2122.49,1211.21 2123.08,1211.21 2123.67,1211.21 2124.25,1211.21 2124.84,1211.21 2125.42,1211.21 2126.01,1211.21 2126.6,1211.21 2127.18,1211.21 2127.77,1211.21 2128.36,1211.21 2128.94,1211.21 2129.53,1211.21 2130.12,1211.21 2130.7,1211.21 2131.29,1211.21 2131.88,1211.21 2132.46,1211.21 2133.05,1211.21 2133.63,1211.21 2134.22,1211.21 2134.81,1211.21 2135.39,1211.21 2135.98,1211.21 2136.57,1211.21 2137.15,1211.21 2137.74,1211.21 2138.33,1211.21 2138.91,1211.21 2139.5,1211.21 2140.09,1211.21 2140.67,1211.21 2141.26,1211.21 2141.84,1211.21 2142.43,1211.21 2143.02,1211.21 2143.6,1211.21 2144.19,1211.21 2144.78,1211.21 2145.36,1211.21 2145.95,1211.21 2146.54,1211.21 2147.12,1211.21 2147.71,1211.21 2148.3,1211.21 2148.88,1211.21 2149.47,1211.21 2150.05,1211.21 2150.64,1211.21 2151.23,1211.21 2151.81,1211.21 2152.4,1211.21 2152.99,1211.21 2153.57,1211.21 2154.16,1211.21 2154.75,1211.21 2155.33,1211.21 2155.92,1211.21 2156.5,1211.21 2157.09,1211.21 2157.68,1211.21 2158.26,1211.21 \"/>\n<path clip-path=\"url(#clip372)\" d=\"M986.025 1210.99 L986.612 1210.99 L987.198 1210.99 L987.785 1210.99 L988.371 1210.99 L988.957 1210.99 L989.544 1210.99 L990.13 1210.99 L990.717 1210.99 L991.303 1210.99 L991.889 1210.99 L992.476 1210.99 L993.062 1210.99 L993.649 1210.99 L994.235 1210.99 L994.822 1210.99 L995.408 1210.99 L995.994 1210.99 L996.581 1210.99 L997.167 1210.99 L997.754 1210.99 L998.34 1210.99 L998.926 1210.99 L999.513 1210.99 L1000.1 1210.99 L1000.69 1210.99 L1001.27 1210.99 L1001.86 1210.99 L1002.44 1210.99 L1003.03 1210.99 L1003.62 1210.99 L1004.2 1210.99 L1004.79 1210.99 L1005.38 1210.99 L1005.96 1210.99 L1006.55 1210.99 L1007.14 1210.99 L1007.72 1210.99 L1008.31 1210.99 L1008.9 1210.99 L1009.48 1210.99 L1010.07 1210.99 L1010.65 1210.99 L1011.24 1210.99 L1011.83 1210.99 L1012.41 1210.99 L1013 1210.99 L1013.59 1210.99 L1014.17 1210.99 L1014.76 1210.99 L1015.35 1210.99 L1015.93 1210.99 L1016.52 1210.99 L1017.11 1210.99 L1017.69 1210.99 L1018.28 1210.99 L1018.86 1210.99 L1019.45 1210.99 L1020.04 1210.99 L1020.62 1210.99 L1021.21 1210.99 L1021.8 1210.99 L1022.38 1210.99 L1022.97 1210.99 L1023.56 1210.99 L1024.14 1210.99 L1024.73 1210.99 L1025.32 1210.99 L1025.9 1210.99 L1026.49 1210.99 L1027.07 1210.99 L1027.66 1210.99 L1028.25 1210.99 L1028.83 1210.99 L1029.42 1210.99 L1030.01 1210.99 L1030.59 1210.99 L1031.18 1210.99 L1031.77 1210.99 L1032.35 1210.99 L1032.94 1210.99 L1033.52 1210.99 L1034.11 1210.99 L1034.7 1210.99 L1035.28 1210.99 L1035.87 1210.99 L1036.46 1210.99 L1037.04 1210.99 L1037.63 1210.99 L1038.22 1210.99 L1038.8 1210.99 L1039.39 1210.99 L1039.98 1210.99 L1040.56 1210.99 L1041.15 1210.99 L1041.73 1210.99 L1042.32 1210.99 L1042.91 1210.99 L1043.49 1210.99 L1044.08 1210.99 L1044.67 1210.99 L1045.25 1210.99 L1045.84 1210.99 L1046.43 1210.99 L1047.01 1210.99 L1047.6 1210.99 L1048.19 1210.99 L1048.77 1210.99 L1049.36 1210.99 L1049.94 1210.99 L1050.53 1210.99 L1051.12 1210.99 L1051.7 1210.99 L1052.29 1210.99 L1052.88 1210.99 L1053.46 1210.99 L1054.05 1210.99 L1054.64 1210.99 L1055.22 1210.99 L1055.81 1210.99 L1056.39 1210.99 L1056.98 1210.99 L1057.57 1210.99 L1058.15 1210.99 L1058.74 1210.99 L1059.33 1210.99 L1059.91 1210.99 L1060.5 1210.99 L1061.09 1210.99 L1061.67 1210.99 L1062.26 1210.99 L1062.85 1210.99 L1063.43 1210.99 L1064.02 1210.99 L1064.6 1210.99 L1065.19 1210.99 L1065.78 1210.99 L1066.36 1210.99 L1066.95 1210.99 L1067.54 1210.99 L1068.12 1210.99 L1068.71 1210.99 L1069.3 1210.99 L1069.88 1210.99 L1070.47 1210.99 L1071.06 1210.99 L1071.64 1210.99 L1072.23 1210.99 L1072.81 1210.99 L1073.4 1210.99 L1073.99 1210.99 L1074.57 1210.99 L1075.16 1210.99 L1075.75 1210.99 L1076.33 1210.99 L1076.92 1210.99 L1077.51 1210.99 L1078.09 1210.99 L1078.68 1210.99 L1079.26 1210.99 L1079.85 1210.99 L1080.44 1210.99 L1081.02 1210.99 L1081.61 1210.99 L1082.2 1210.99 L1082.78 1210.99 L1083.37 1210.99 L1083.96 1210.99 L1084.54 1210.99 L1085.13 1210.99 L1085.72 1210.99 L1086.3 1210.99 L1086.89 1210.99 L1087.47 1210.99 L1088.06 1210.99 L1088.65 1210.99 L1089.23 1210.99 L1089.82 1210.99 L1090.41 1210.99 L1090.99 1210.99 L1091.58 1210.99 L1092.17 1210.99 L1092.75 1210.99 L1093.34 1210.99 L1093.93 1210.99 L1094.51 1210.99 L1095.1 1210.99 L1095.68 1210.99 L1096.27 1210.99 L1096.86 1210.99 L1097.44 1210.99 L1098.03 1210.99 L1098.62 1210.99 L1099.2 1210.99 L1099.79 1210.99 L1100.38 1210.99 L1100.96 1210.99 L1101.55 1210.99 L1102.14 1210.99 L1102.72 1210.99 L1103.31 1210.99 L1103.89 1210.99 L1104.48 1210.99 L1105.07 1210.99 L1105.65 1210.99 L1106.24 1210.99 L1106.83 1210.99 L1107.41 1210.99 L1108 1210.99 L1108.59 1210.99 L1109.17 1210.99 L1109.76 1210.99 L1110.34 1210.99 L1110.93 1210.99 L1111.52 1210.99 L1112.1 1210.99 L1112.69 1210.99 L1113.28 1210.99 L1113.86 1210.99 L1114.45 1210.99 L1115.04 1210.99 L1115.62 1210.99 L1116.21 1210.99 L1116.8 1210.99 L1117.38 1210.99 L1117.97 1210.99 L1118.55 1210.99 L1119.14 1210.99 L1119.73 1210.99 L1120.31 1210.99 L1120.9 1210.99 L1121.49 1210.99 L1122.07 1210.99 L1122.66 1210.99 L1123.25 1210.99 L1123.83 1210.99 L1124.42 1210.99 L1125.01 1210.99 L1125.59 1210.99 L1126.18 1210.99 L1126.76 1210.99 L1127.35 1210.99 L1127.94 1210.99 L1128.52 1210.99 L1129.11 1210.99 L1129.7 1210.99 L1130.28 1210.99 L1130.87 1210.99 L1131.46 1210.99 L1132.04 1210.99 L1132.63 1210.99 L1133.21 1210.99 L1133.8 1210.99 L1134.39 1210.99 L1134.97 1210.99 L1135.56 1210.99 L1136.15 1210.99 L1136.73 1210.99 L1137.32 1210.99 L1137.91 1210.99 L1138.49 1210.99 L1139.08 1210.99 L1139.67 1210.99 L1140.25 1210.99 L1140.84 1210.99 L1141.42 1210.99 L1142.01 1210.99 L1142.6 1210.99 L1143.18 1210.99 L1143.77 1210.99 L1144.36 1210.99 L1144.94 1210.99 L1145.53 1210.99 L1146.12 1210.99 L1146.7 1210.99 L1147.29 1210.99 L1147.88 1210.99 L1148.46 1210.99 L1149.05 1210.99 L1149.63 1210.99 L1150.22 1210.99 L1150.81 1210.99 L1151.39 1210.99 L1151.98 1210.99 L1152.57 1210.99 L1153.15 1210.99 L1153.74 1210.99 L1154.33 1210.99 L1154.91 1210.99 L1155.5 1210.99 L1156.09 1210.99 L1156.67 1210.99 L1157.26 1210.99 L1157.84 1210.99 L1158.43 1210.99 L1159.02 1210.99 L1159.6 1210.99 L1160.19 1210.99 L1160.78 1210.99 L1161.36 1210.99 L1161.95 1210.99 L1162.54 1210.99 L1163.12 1210.99 L1163.71 1210.99 L1164.29 1210.99 L1164.88 1210.99 L1165.47 1210.99 L1166.05 1210.99 L1166.64 1210.99 L1167.23 1210.99 L1167.81 1210.99 L1168.4 1210.99 L1168.99 1210.99 L1169.57 1210.99 L1170.16 1210.99 L1170.75 1210.99 L1171.33 1210.99 L1171.92 1210.99 L1172.5 1210.99 L1173.09 1210.99 L1173.68 1210.99 L1174.26 1210.99 L1174.85 1210.99 L1175.44 1210.99 L1176.02 1210.99 L1176.61 1210.99 L1177.2 1210.99 L1177.78 1210.99 L1178.37 1210.99 L1178.96 1210.99 L1179.54 1210.99 L1180.13 1210.99 L1180.71 1210.99 L1181.3 1210.99 L1181.89 1210.99 L1182.47 1210.99 L1183.06 1210.99 L1183.65 1210.99 L1184.23 1210.99 L1184.82 1210.99 L1185.41 1210.99 L1185.99 1210.99 L1186.58 1210.99 L1187.16 1210.99 L1187.75 1210.99 L1188.34 1210.99 L1188.92 1210.99 L1189.51 1210.99 L1190.1 1210.99 L1190.68 1210.99 L1191.27 1210.99 L1191.86 1210.99 L1192.44 1210.99 L1193.03 1210.99 L1193.62 1210.99 L1194.2 1210.99 L1194.79 1210.99 L1195.37 1210.99 L1195.96 1210.99 L1196.55 1210.99 L1197.13 1210.99 L1197.72 1210.99 L1198.31 1210.99 L1198.89 1210.99 L1199.48 1210.99 L1200.07 1210.99 L1200.65 1210.99 L1201.24 1210.99 L1201.83 1210.99 L1202.41 1210.99 L1203 1210.99 L1203.58 1210.99 L1204.17 1210.99 L1204.76 1210.99 L1205.34 1210.99 L1205.93 1210.99 L1206.52 1210.99 L1207.1 1210.99 L1207.69 1210.99 L1208.28 1210.99 L1208.86 1210.99 L1209.45 1210.99 L1210.03 1210.99 L1210.62 1210.99 L1211.21 1210.99 L1211.79 1210.99 L1212.38 1210.99 L1212.97 1210.99 L1213.55 1210.99 L1214.14 1210.99 L1214.73 1210.99 L1215.31 1210.99 L1215.9 1210.99 L1216.49 1210.99 L1217.07 1210.99 L1217.66 1210.99 L1218.24 1210.99 L1218.83 1210.99 L1219.42 1210.99 L1220 1210.99 L1220.59 1210.99 L1221.18 1210.99 L1221.76 1210.99 L1222.35 1210.99 L1222.94 1210.99 L1223.52 1210.99 L1224.11 1210.99 L1224.7 1210.99 L1225.28 1210.99 L1225.87 1210.99 L1226.45 1210.99 L1227.04 1210.99 L1227.63 1210.99 L1228.21 1210.99 L1228.8 1210.99 L1229.39 1210.99 L1229.97 1210.99 L1230.56 1210.99 L1231.15 1210.99 L1231.73 1210.99 L1232.32 1210.99 L1232.91 1210.99 L1233.49 1210.99 L1234.08 1210.99 L1234.66 1210.99 L1235.25 1210.99 L1235.84 1210.99 L1236.42 1210.99 L1237.01 1210.99 L1237.6 1210.99 L1238.18 1210.99 L1238.77 1210.99 L1239.36 1210.99 L1239.94 1210.99 L1240.53 1210.99 L1241.11 1210.99 L1241.7 1210.99 L1242.29 1210.99 L1242.87 1210.99 L1243.46 1210.99 L1244.05 1210.99 L1244.63 1210.99 L1245.22 1210.99 L1245.81 1210.99 L1246.39 1210.99 L1246.98 1210.99 L1247.57 1210.99 L1248.15 1210.99 L1248.74 1210.99 L1249.32 1210.99 L1249.91 1210.99 L1250.5 1210.99 L1251.08 1210.99 L1251.67 1210.99 L1252.26 1210.99 L1252.84 1210.99 L1253.43 1210.99 L1254.02 1210.99 L1254.6 1210.99 L1255.19 1210.99 L1255.78 1210.99 L1256.36 1210.99 L1256.95 1210.99 L1257.53 1210.99 L1258.12 1210.99 L1258.71 1210.99 L1259.29 1210.99 L1259.88 1210.99 L1260.47 1210.99 L1261.05 1210.99 L1261.64 1210.99 L1262.23 1210.99 L1262.81 1210.99 L1263.4 1210.99 L1263.98 1210.99 L1264.57 1210.99 L1265.16 1210.99 L1265.74 1210.99 L1266.33 1210.99 L1266.92 1210.99 L1267.5 1210.99 L1268.09 1210.99 L1268.68 1210.99 L1269.26 1210.99 L1269.85 1210.99 L1270.44 1210.99 L1271.02 1210.99 L1271.61 1210.99 L1272.19 1210.99 L1272.78 1210.99 L1273.37 1210.99 L1273.95 1210.99 L1274.54 1210.99 L1275.13 1210.99 L1275.71 1210.99 L1276.3 1210.99 L1276.89 1210.99 L1277.47 1210.99 L1278.06 1210.99 L1278.65 1210.99 L1279.23 1210.99 L1279.82 1210.99 L1280.4 1210.99 L1280.99 1210.99 L1281.58 1210.99 L1282.16 1210.99 L1282.75 1210.99 L1283.34 1210.99 L1283.92 1210.99 L1284.51 1210.99 L1285.1 1210.99 L1285.68 1210.99 L1286.27 1210.99 L1286.86 1210.99 L1287.44 1210.99 L1288.03 1210.99 L1288.61 1210.99 L1289.2 1210.99 L1289.79 1210.99 L1290.37 1210.99 L1290.96 1210.99 L1291.55 1210.99 L1292.13 1210.99 L1292.72 1210.99 L1293.31 1210.99 L1293.89 1210.99 L1294.48 1210.99 L1295.06 1210.99 L1295.65 1210.99 L1296.24 1210.99 L1296.82 1210.99 L1297.41 1210.99 L1298 1210.99 L1298.58 1210.99 L1299.17 1210.99 L1299.76 1210.99 L1300.34 1210.99 L1300.93 1210.99 L1301.52 1210.99 L1302.1 1210.99 L1302.69 1210.99 L1303.27 1210.99 L1303.86 1210.99 L1304.45 1210.99 L1305.03 1210.99 L1305.62 1210.99 L1306.21 1210.99 L1306.79 1210.99 L1307.38 1210.99 L1307.97 1210.99 L1308.55 1210.99 L1309.14 1210.99 L1309.73 1210.99 L1310.31 1210.99 L1310.9 1210.99 L1311.48 1210.99 L1312.07 1210.99 L1312.66 1210.99 L1313.24 1210.99 L1313.83 1210.99 L1314.42 1210.99 L1315 1210.99 L1315.59 1210.99 L1316.18 1210.99 L1316.76 1210.99 L1317.35 1210.99 L1317.93 1210.99 L1318.52 1210.99 L1319.11 1210.99 L1319.69 1210.99 L1320.28 1210.99 L1320.87 1210.99 L1321.45 1210.99 L1322.04 1210.99 L1322.63 1210.99 L1323.21 1210.99 L1323.8 1210.99 L1324.39 1210.99 L1324.97 1210.99 L1325.56 1210.99 L1326.14 1210.99 L1326.73 1210.99 L1327.32 1210.99 L1327.9 1210.99 L1328.49 1210.99 L1329.08 1210.99 L1329.66 1210.99 L1330.25 1210.99 L1330.84 1210.99 L1331.42 1210.99 L1332.01 1210.99 L1332.6 1210.99 L1333.18 1210.99 L1333.77 1210.99 L1334.35 1210.99 L1334.94 1210.99 L1335.53 1210.99 L1336.11 1210.99 L1336.7 1210.99 L1337.29 1210.99 L1337.87 1210.99 L1338.46 1210.99 L1339.05 1210.99 L1339.63 1210.99 L1340.22 1210.99 L1340.8 1210.99 L1341.39 1210.99 L1341.98 1210.99 L1342.56 1210.99 L1343.15 1210.99 L1343.74 1210.99 L1344.32 1210.99 L1344.91 1210.99 L1345.5 1210.99 L1346.08 1210.99 L1346.67 1210.99 L1347.26 1210.99 L1347.84 1210.99 L1348.43 1210.99 L1349.01 1210.99 L1349.6 1210.99 L1350.19 1210.99 L1350.77 1210.99 L1351.36 1210.99 L1351.95 1210.99 L1352.53 1210.99 L1353.12 1210.99 L1353.71 1210.99 L1354.29 1210.99 L1354.88 1210.99 L1355.47 1210.99 L1356.05 1210.99 L1356.64 1210.99 L1357.22 1210.99 L1357.81 1210.99 L1358.4 1210.99 L1358.98 1210.99 L1359.57 1210.99 L1360.16 1210.99 L1360.74 1210.99 L1361.33 1210.99 L1361.92 1210.99 L1362.5 1210.99 L1363.09 1210.99 L1363.68 1210.99 L1364.26 1210.99 L1364.85 1210.99 L1365.43 1210.99 L1366.02 1210.99 L1366.61 1210.99 L1367.19 1210.99 L1367.78 1210.99 L1368.37 1210.99 L1368.95 1210.99 L1369.54 1210.99 L1370.13 1210.99 L1370.71 1210.99 L1371.3 1210.99 L1371.88 1210.99 L1372.47 1210.99 L1373.06 1210.99 L1373.64 1210.99 L1374.23 1210.99 L1374.82 1210.99 L1375.4 1210.99 L1375.99 1210.99 L1376.58 1210.99 L1377.16 1210.99 L1377.75 1210.99 L1378.34 1210.99 L1378.92 1210.99 L1379.51 1210.99 L1380.09 1210.99 L1380.68 1210.99 L1381.27 1210.99 L1381.85 1210.99 L1382.44 1210.99 L1383.03 1210.99 L1383.61 1210.99 L1384.2 1210.99 L1384.79 1210.99 L1385.37 1210.99 L1385.96 1210.99 L1386.55 1210.99 L1387.13 1210.99 L1387.72 1210.99 L1388.3 1210.99 L1388.89 1210.99 L1389.48 1210.99 L1390.06 1210.99 L1390.65 1210.99 L1391.24 1210.99 L1391.82 1210.99 L1392.41 1210.99 L1393 1210.99 L1393.58 1210.99 L1394.17 1210.99 L1394.75 1210.99 L1395.34 1210.99 L1395.93 1210.99 L1396.51 1210.99 L1397.1 1210.99 L1397.69 1210.99 L1398.27 1210.99 L1398.86 1210.99 L1399.45 1210.99 L1400.03 1210.99 L1400.62 1210.99 L1401.21 1210.99 L1401.79 1210.99 L1402.38 1210.99 L1402.96 1210.99 L1403.55 1210.99 L1404.14 1210.99 L1404.72 1210.99 L1405.31 1210.99 L1405.9 1210.99 L1406.48 1210.99 L1407.07 1210.99 L1407.66 1210.99 L1408.24 1210.99 L1408.83 1210.99 L1409.42 1210.99 L1410 1210.99 L1410.59 1210.99 L1411.17 1210.99 L1411.76 1210.99 L1412.35 1210.99 L1412.93 1210.99 L1413.52 1210.99 L1414.11 1210.99 L1414.69 1210.99 L1415.28 1210.99 L1415.87 1210.99 L1416.45 1210.99 L1417.04 1210.99 L1417.63 1210.99 L1418.21 1210.99 L1418.8 1210.99 L1419.38 1210.99 L1419.97 1210.99 L1420.56 1210.99 L1421.14 1210.99 L1421.73 1210.99 L1422.32 1210.99 L1422.9 1210.99 L1423.49 1210.99 L1424.08 1210.99 L1424.66 1210.99 L1425.25 1210.99 L1425.83 1210.99 L1426.42 1210.99 L1427.01 1210.99 L1427.59 1210.99 L1428.18 1210.99 L1428.77 1210.99 L1429.35 1210.99 L1429.94 1210.99 L1430.53 1210.99 L1431.11 1210.99 L1431.7 1210.99 L1432.29 1210.99 L1432.87 1210.99 L1433.46 1210.99 L1434.04 1210.99 L1434.63 1210.99 L1435.22 1210.99 L1435.8 1210.99 L1436.39 1210.99 L1436.98 1210.99 L1437.56 1210.99 L1438.15 1210.99 L1438.74 1210.99 L1439.32 1210.99 L1439.91 1210.99 L1440.5 1210.99 L1441.08 1210.99 L1441.67 1210.99 L1442.25 1210.99 L1442.84 1210.99 L1443.43 1210.99 L1444.01 1210.99 L1444.6 1210.99 L1445.19 1210.99 L1445.77 1210.99 L1446.36 1210.99 L1446.95 1210.99 L1447.53 1210.99 L1448.12 1210.99 L1448.7 1210.99 L1449.29 1210.99 L1449.88 1210.99 L1450.46 1210.99 L1451.05 1210.99 L1451.64 1210.99 L1452.22 1210.99 L1452.81 1210.99 L1453.4 1210.99 L1453.98 1210.99 L1454.57 1210.99 L1455.16 1210.99 L1455.74 1210.99 L1456.33 1210.99 L1456.91 1210.99 L1457.5 1210.99 L1458.09 1210.99 L1458.67 1210.99 L1459.26 1210.99 L1459.85 1210.99 L1460.43 1210.99 L1461.02 1210.99 L1461.61 1210.99 L1462.19 1210.99 L1462.78 1210.99 L1463.37 1210.99 L1463.95 1210.99 L1464.54 1210.99 L1465.12 1210.99 L1465.71 1210.99 L1466.3 1210.99 L1466.88 1210.99 L1467.47 1210.99 L1468.06 1210.99 L1468.64 1210.99 L1469.23 1210.99 L1469.82 1210.99 L1470.4 1210.99 L1470.99 1210.99 L1471.57 1210.99 L1472.16 1210.99 L1472.75 1210.99 L1473.33 1210.99 L1473.92 1210.99 L1474.51 1210.99 L1475.09 1210.99 L1475.68 1210.99 L1476.27 1210.99 L1476.85 1210.99 L1477.44 1210.99 L1478.03 1210.99 L1478.61 1210.99 L1479.2 1210.99 L1479.78 1210.99 L1480.37 1210.99 L1480.96 1210.99 L1481.54 1210.99 L1482.13 1210.99 L1482.72 1210.99 L1483.3 1210.99 L1483.89 1210.99 L1484.48 1210.99 L1485.06 1210.99 L1485.65 1210.99 L1486.24 1210.99 L1486.82 1210.99 L1487.41 1210.99 L1487.99 1210.99 L1488.58 1210.99 L1489.17 1210.99 L1489.75 1210.99 L1490.34 1210.99 L1490.93 1210.99 L1491.51 1210.99 L1492.1 1210.99 L1492.69 1210.99 L1493.27 1210.99 L1493.86 1210.99 L1494.45 1210.99 L1495.03 1210.99 L1495.62 1210.99 L1496.2 1210.99 L1496.79 1210.99 L1497.38 1210.99 L1497.96 1210.99 L1498.55 1210.99 L1499.14 1210.99 L1499.72 1210.99 L1500.31 1210.99 L1500.9 1210.99 L1501.48 1210.99 L1502.07 1210.99 L1502.65 1210.99 L1503.24 1210.99 L1503.83 1210.99 L1504.41 1210.99 L1505 1210.99 L1505.59 1210.99 L1506.17 1210.99 L1506.76 1210.99 L1507.35 1210.99 L1507.93 1210.99 L1508.52 1210.99 L1509.11 1210.99 L1509.69 1210.99 L1510.28 1210.99 L1510.86 1210.99 L1511.45 1210.99 L1512.04 1210.99 L1512.62 1210.99 L1513.21 1210.99 L1513.8 1210.99 L1514.38 1210.99 L1514.97 1210.99 L1515.56 1210.99 L1516.14 1210.99 L1516.73 1210.99 L1517.32 1210.99 L1517.9 1210.99 L1518.49 1210.99 L1519.07 1210.99 L1519.66 1210.99 L1520.25 1210.99 L1520.83 1210.99 L1521.42 1210.99 L1522.01 1210.99 L1522.59 1210.99 L1523.18 1210.99 L1523.77 1210.99 L1524.35 1210.99 L1524.94 1210.99 L1525.52 1210.99 L1526.11 1210.99 L1526.7 1210.99 L1527.28 1210.99 L1527.87 1210.99 L1528.46 1210.99 L1529.04 1210.99 L1529.63 1210.99 L1530.22 1210.99 L1530.8 1210.99 L1531.39 1210.99 L1531.98 1210.99 L1532.56 1210.99 L1533.15 1210.99 L1533.73 1210.99 L1534.32 1210.99 L1534.91 1210.99 L1535.49 1210.99 L1536.08 1210.99 L1536.67 1210.99 L1537.25 1210.99 L1537.84 1210.99 L1538.43 1210.99 L1539.01 1210.99 L1539.6 1210.99 L1540.19 1210.99 L1540.77 1210.99 L1541.36 1210.99 L1541.94 1210.99 L1542.53 1210.99 L1543.12 1210.99 L1543.7 1210.99 L1544.29 1210.99 L1544.88 1210.99 L1545.46 1210.99 L1546.05 1210.99 L1546.64 1210.99 L1547.22 1210.99 L1547.81 1210.99 L1548.4 1210.99 L1548.98 1210.99 L1549.57 1210.99 L1550.15 1210.99 L1550.74 1210.99 L1551.33 1210.99 L1551.91 1210.99 L1552.5 1210.99 L1553.09 1210.99 L1553.67 1210.99 L1554.26 1210.99 L1554.85 1210.99 L1555.43 1210.99 L1556.02 1210.99 L1556.6 1210.99 L1557.19 1210.99 L1557.78 1210.99 L1558.36 1210.99 L1558.95 1210.99 L1559.54 1210.99 L1560.12 1210.99 L1560.71 1210.99 L1561.3 1210.99 L1561.88 1210.99 L1562.47 1210.99 L1563.06 1210.99 L1563.64 1210.99 L1564.23 1210.99 L1564.81 1210.99 L1565.4 1210.99 L1565.99 1210.99 L1566.57 1210.99 L1567.16 1210.99 L1567.75 1210.99 L1568.33 1210.99 L1568.92 1210.99 L1569.51 1210.99 L1570.09 1210.99 L1570.68 1210.99 L1571.27 1210.99 L1571.85 1210.99 L1572.44 1210.99 L1573.02 1210.99 L1573.61 1210.99 L1574.2 1210.99 L1574.78 1210.99 L1575.37 1210.99 L1575.96 1210.99 L1576.54 1210.99 L1577.13 1210.99 L1577.72 1210.99 L1578.3 1210.99 L1578.89 1210.99 L1579.47 1210.99 L1580.06 1210.99 L1580.65 1210.99 L1581.23 1210.99 L1581.82 1210.99 L1582.41 1210.99 L1582.99 1210.99 L1583.58 1210.99 L1584.17 1210.99 L1584.75 1210.99 L1585.34 1210.99 L1585.93 1210.99 L1586.51 1210.99 L1587.1 1210.99 L1587.68 1210.99 L1588.27 1210.99 L1588.86 1210.99 L1589.44 1210.99 L1590.03 1210.99 L1590.62 1210.99 L1591.2 1210.99 L1591.79 1210.99 L1592.38 1210.99 L1592.96 1210.99 L1593.55 1210.99 L1594.14 1210.99 L1594.72 1210.99 L1595.31 1210.99 L1595.89 1210.99 L1596.48 1210.99 L1597.07 1210.99 L1597.65 1210.99 L1598.24 1210.99 L1598.83 1210.99 L1599.41 1210.99 L1600 1210.99 L1600.59 1210.99 L1601.17 1210.99 L1601.76 1210.99 L1602.34 1210.99 L1602.93 1210.99 L1603.52 1210.99 L1604.1 1210.99 L1604.69 1210.99 L1605.28 1210.99 L1605.86 1210.99 L1606.45 1210.99 L1607.04 1210.99 L1607.62 1210.99 L1608.21 1210.99 L1608.8 1210.99 L1609.38 1210.99 L1609.97 1210.99 L1610.55 1210.99 L1611.14 1210.99 L1611.73 1210.99 L1612.31 1210.99 L1612.9 1210.99 L1613.49 1210.99 L1614.07 1210.99 L1614.66 1210.99 L1615.25 1210.99 L1615.83 1210.99 L1616.42 1210.99 L1617.01 1210.99 L1617.59 1210.99 L1618.18 1210.99 L1618.76 1210.99 L1619.35 1210.99 L1619.94 1210.99 L1620.52 1210.99 L1621.11 1210.99 L1621.7 1210.99 L1622.28 1210.99 L1622.87 1210.99 L1623.46 1210.99 L1624.04 1210.99 L1624.63 1210.99 L1625.22 1210.99 L1625.8 1210.99 L1626.39 1210.99 L1626.97 1210.99 L1627.56 1210.99 L1628.15 1210.99 L1628.73 1210.99 L1629.32 1210.99 L1629.91 1210.99 L1630.49 1210.99 L1631.08 1210.99 L1631.67 1210.99 L1632.25 1210.99 L1632.84 1210.99 L1633.42 1210.99 L1634.01 1210.99 L1634.6 1210.99 L1635.18 1210.99 L1635.77 1210.99 L1636.36 1210.99 L1636.94 1210.99 L1637.53 1210.99 L1638.12 1210.99 L1638.7 1210.99 L1639.29 1210.99 L1639.88 1210.99 L1640.46 1210.99 L1641.05 1210.99 L1641.63 1210.99 L1642.22 1210.99 L1642.81 1210.99 L1643.39 1210.99 L1643.98 1210.99 L1644.57 1210.99 L1645.15 1210.99 L1645.74 1210.99 L1646.33 1210.99 L1646.91 1210.99 L1647.5 1210.99 L1648.09 1210.99 L1648.67 1210.99 L1649.26 1210.99 L1649.84 1210.99 L1650.43 1210.99 L1651.02 1210.99 L1651.6 1210.99 L1652.19 1210.99 L1652.78 1210.99 L1653.36 1210.99 L1653.95 1210.99 L1654.54 1210.99 L1655.12 1210.99 L1655.71 1210.99 L1656.29 1210.99 L1656.88 1210.99 L1657.47 1210.99 L1658.05 1210.99 L1658.64 1210.99 L1659.23 1210.99 L1659.81 1210.99 L1660.4 1210.99 L1660.99 1210.99 L1661.57 1210.99 L1662.16 1210.99 L1662.75 1210.99 L1663.33 1210.99 L1663.92 1210.99 L1664.5 1210.99 L1665.09 1210.99 L1665.68 1210.99 L1666.26 1210.99 L1666.85 1210.99 L1667.44 1210.99 L1668.02 1210.99 L1668.61 1210.99 L1669.2 1210.99 L1669.78 1210.99 L1670.37 1210.99 L1670.96 1210.99 L1671.54 1210.99 L1672.13 1210.99 L1672.71 1210.99 L1673.3 1210.99 L1673.89 1210.99 L1674.47 1210.99 L1675.06 1210.99 L1675.65 1210.99 L1676.23 1210.99 L1676.82 1210.99 L1677.41 1210.99 L1677.99 1210.99 L1678.58 1210.99 L1679.17 1210.99 L1679.75 1210.99 L1680.34 1210.99 L1680.92 1210.99 L1681.51 1210.99 L1682.1 1210.99 L1682.68 1210.99 L1683.27 1210.99 L1683.86 1210.99 L1684.44 1210.99 L1685.03 1210.99 L1685.62 1210.99 L1686.2 1210.99 L1686.79 1210.99 L1687.37 1210.99 L1687.96 1210.99 L1688.55 1210.99 L1689.13 1210.99 L1689.72 1210.99 L1690.31 1210.99 L1690.89 1210.99 L1691.48 1210.99 L1692.07 1210.99 L1692.65 1210.99 L1693.24 1210.99 L1693.83 1210.99 L1694.41 1210.99 L1695 1210.99 L1695.58 1210.99 L1696.17 1210.99 L1696.76 1210.99 L1697.34 1210.99 L1697.93 1210.99 L1698.52 1210.99 L1699.1 1210.99 L1699.69 1210.99 L1700.28 1210.99 L1700.86 1210.99 L1701.45 1210.99 L1702.04 1210.99 L1702.62 1210.99 L1703.21 1210.99 L1703.79 1210.99 L1704.38 1210.99 L1704.97 1210.99 L1705.55 1210.99 L1706.14 1210.99 L1706.73 1210.99 L1707.31 1210.99 L1707.9 1210.99 L1708.49 1210.99 L1709.07 1210.99 L1709.66 1210.99 L1710.24 1210.99 L1710.83 1210.99 L1711.42 1210.99 L1712 1210.99 L1712.59 1210.99 L1713.18 1210.99 L1713.76 1210.99 L1714.35 1210.99 L1714.94 1210.99 L1715.52 1210.99 L1716.11 1210.99 L1716.7 1210.99 L1717.28 1210.99 L1717.87 1210.99 L1718.45 1210.99 L1719.04 1210.99 L1719.63 1210.99 L1720.21 1210.99 L1720.8 1210.99 L1721.39 1210.99 L1721.97 1210.99 L1722.56 1210.99 L1723.15 1210.99 L1723.73 1210.99 L1724.32 1210.99 L1724.91 1210.99 L1725.49 1210.99 L1726.08 1210.99 L1726.66 1210.99 L1727.25 1210.99 L1727.84 1210.99 L1728.42 1210.99 L1729.01 1210.99 L1729.6 1210.99 L1730.18 1210.99 L1730.77 1210.99 L1731.36 1210.99 L1731.94 1210.99 L1732.53 1210.99 L1733.11 1210.99 L1733.7 1210.99 L1734.29 1210.99 L1734.87 1210.99 L1735.46 1210.99 L1736.05 1210.99 L1736.63 1210.99 L1737.22 1210.99 L1737.81 1210.99 L1738.39 1210.99 L1738.98 1210.99 L1739.57 1210.99 L1740.15 1210.99 L1740.74 1210.99 L1741.32 1210.99 L1741.91 1210.99 L1742.5 1210.99 L1743.08 1210.99 L1743.67 1210.99 L1744.26 1210.99 L1744.84 1210.99 L1745.43 1210.99 L1746.02 1210.99 L1746.6 1210.99 L1747.19 1210.99 L1747.78 1210.99 L1748.36 1210.99 L1748.95 1210.99 L1749.53 1210.99 L1750.12 1210.99 L1750.71 1210.99 L1751.29 1210.99 L1751.88 1210.99 L1752.47 1210.99 L1753.05 1210.99 L1753.64 1210.99 L1754.23 1210.99 L1754.81 1210.99 L1755.4 1210.99 L1755.99 1210.99 L1756.57 1210.99 L1757.16 1210.99 L1757.74 1210.99 L1758.33 1210.99 L1758.92 1210.99 L1759.5 1210.99 L1760.09 1210.99 L1760.68 1210.99 L1761.26 1210.99 L1761.85 1210.99 L1762.44 1210.99 L1763.02 1210.99 L1763.61 1210.99 L1764.19 1210.99 L1764.78 1210.99 L1765.37 1210.99 L1765.95 1210.99 L1766.54 1210.99 L1767.13 1210.99 L1767.71 1210.99 L1768.3 1210.99 L1768.89 1210.99 L1769.47 1210.99 L1770.06 1210.99 L1770.65 1210.99 L1771.23 1210.99 L1771.82 1210.99 L1772.4 1210.99 L1772.99 1210.99 L1773.58 1210.99 L1774.16 1210.99 L1774.75 1210.99 L1775.34 1210.99 L1775.92 1210.99 L1776.51 1210.99 L1777.1 1210.99 L1777.68 1210.99 L1778.27 1210.99 L1778.86 1210.99 L1779.44 1210.99 L1780.03 1210.99 L1780.61 1210.99 L1781.2 1210.99 L1781.79 1210.99 L1782.37 1210.99 L1782.96 1210.99 L1783.55 1210.99 L1784.13 1210.99 L1784.72 1210.99 L1785.31 1210.99 L1785.89 1210.99 L1786.48 1210.99 L1787.06 1210.99 L1787.65 1210.99 L1788.24 1210.99 L1788.82 1210.99 L1789.41 1210.99 L1790 1210.99 L1790.58 1210.99 L1791.17 1210.99 L1791.76 1210.99 L1792.34 1210.99 L1792.93 1210.99 L1793.52 1210.99 L1794.1 1210.99 L1794.69 1210.99 L1795.27 1210.99 L1795.86 1210.99 L1796.45 1210.99 L1797.03 1210.99 L1797.62 1210.99 L1798.21 1210.99 L1798.79 1210.99 L1799.38 1210.99 L1799.97 1210.99 L1800.55 1210.99 L1801.14 1210.99 L1801.73 1210.99 L1802.31 1210.99 L1802.9 1210.99 L1803.48 1210.99 L1804.07 1210.99 L1804.66 1210.99 L1805.24 1210.99 L1805.83 1210.99 L1806.42 1210.99 L1807 1210.99 L1807.59 1210.99 L1808.18 1210.99 L1808.76 1210.99 L1809.35 1210.99 L1809.94 1210.99 L1810.52 1210.99 L1811.11 1210.99 L1811.69 1210.99 L1812.28 1210.99 L1812.87 1210.99 L1813.45 1210.99 L1814.04 1210.99 L1814.63 1210.99 L1815.21 1210.99 L1815.8 1210.99 L1816.39 1210.99 L1816.97 1210.99 L1817.56 1210.99 L1818.14 1210.99 L1818.73 1210.99 L1819.32 1210.99 L1819.9 1210.99 L1820.49 1210.99 L1821.08 1210.99 L1821.66 1210.99 L1822.25 1210.99 L1822.84 1210.99 L1823.42 1210.99 L1824.01 1210.99 L1824.6 1210.99 L1825.18 1210.99 L1825.77 1210.99 L1826.35 1210.99 L1826.94 1210.99 L1827.53 1210.99 L1828.11 1210.99 L1828.7 1210.99 L1829.29 1210.99 L1829.87 1210.99 L1830.46 1210.99 L1831.05 1210.99 L1831.63 1210.99 L1832.22 1210.99 L1832.81 1210.99 L1833.39 1210.99 L1833.98 1210.99 L1834.56 1210.99 L1835.15 1210.99 L1835.74 1210.99 L1836.32 1210.99 L1836.91 1210.99 L1837.5 1210.99 L1838.08 1210.99 L1838.67 1210.99 L1839.26 1210.99 L1839.84 1210.99 L1840.43 1210.99 L1841.01 1210.99 L1841.6 1210.99 L1842.19 1210.99 L1842.77 1210.99 L1843.36 1210.99 L1843.95 1210.99 L1844.53 1210.99 L1845.12 1210.99 L1845.71 1210.99 L1846.29 1210.99 L1846.88 1210.99 L1847.47 1210.99 L1848.05 1210.99 L1848.64 1210.99 L1849.22 1210.99 L1849.81 1210.99 L1850.4 1210.99 L1850.98 1210.99 L1851.57 1210.99 L1852.16 1210.99 L1852.74 1210.99 L1853.33 1210.99 L1853.92 1210.99 L1854.5 1210.99 L1855.09 1210.99 L1855.68 1210.99 L1856.26 1210.99 L1856.85 1210.99 L1857.43 1210.99 L1858.02 1210.99 L1858.61 1210.99 L1859.19 1210.99 L1859.78 1210.99 L1860.37 1210.99 L1860.95 1210.99 L1861.54 1210.99 L1862.13 1210.99 L1862.71 1210.99 L1863.3 1210.99 L1863.88 1210.99 L1864.47 1210.99 L1865.06 1210.99 L1865.64 1210.99 L1866.23 1210.99 L1866.82 1210.99 L1867.4 1210.99 L1867.99 1210.99 L1868.58 1210.99 L1869.16 1210.99 L1869.75 1210.99 L1870.34 1210.99 L1870.92 1210.99 L1871.51 1210.99 L1872.09 1210.99 L1872.68 1210.99 L1873.27 1210.99 L1873.85 1210.99 L1874.44 1210.99 L1875.03 1210.99 L1875.61 1210.99 L1876.2 1210.99 L1876.79 1210.99 L1877.37 1210.99 L1877.96 1210.99 L1878.55 1210.99 L1879.13 1210.99 L1879.72 1210.99 L1880.3 1210.99 L1880.89 1210.99 L1881.48 1210.99 L1882.06 1210.99 L1882.65 1210.99 L1883.24 1210.99 L1883.82 1210.99 L1884.41 1210.99 L1885 1210.99 L1885.58 1210.99 L1886.17 1210.99 L1886.76 1210.99 L1887.34 1210.99 L1887.93 1210.99 L1888.51 1210.99 L1889.1 1210.99 L1889.69 1210.99 L1890.27 1210.99 L1890.86 1210.99 L1891.45 1210.99 L1892.03 1210.99 L1892.62 1210.99 L1893.21 1210.99 L1893.79 1210.99 L1894.38 1210.99 L1894.96 1210.99 L1895.55 1210.99 L1896.14 1210.99 L1896.72 1210.99 L1897.31 1210.99 L1897.9 1210.99 L1898.48 1210.99 L1899.07 1210.99 L1899.66 1210.99 L1900.24 1210.99 L1900.83 1210.99 L1901.42 1210.99 L1902 1210.99 L1902.59 1210.99 L1903.17 1210.99 L1903.76 1210.99 L1904.35 1210.99 L1904.93 1210.99 L1905.52 1210.99 L1906.11 1210.99 L1906.69 1210.99 L1907.28 1210.99 L1907.87 1210.99 L1908.45 1210.99 L1909.04 1210.99 L1909.63 1210.99 L1910.21 1210.99 L1910.8 1210.99 L1911.38 1210.99 L1911.97 1210.99 L1912.56 1210.99 L1913.14 1210.99 L1913.73 1210.99 L1914.32 1210.99 L1914.9 1210.99 L1915.49 1210.99 L1916.08 1210.99 L1916.66 1210.99 L1917.25 1210.99 L1917.83 1210.99 L1918.42 1210.99 L1919.01 1210.99 L1919.59 1210.99 L1920.18 1210.99 L1920.77 1210.99 L1921.35 1210.99 L1921.94 1210.99 L1922.53 1210.99 L1923.11 1210.99 L1923.7 1210.99 L1924.29 1210.99 L1924.87 1210.99 L1925.46 1210.99 L1926.04 1210.99 L1926.63 1210.99 L1927.22 1210.99 L1927.8 1210.99 L1928.39 1210.99 L1928.98 1210.99 L1929.56 1210.99 L1930.15 1210.99 L1930.74 1210.99 L1931.32 1210.99 L1931.91 1210.99 L1932.5 1210.99 L1933.08 1210.99 L1933.67 1210.99 L1934.25 1210.99 L1934.84 1210.99 L1935.43 1210.99 L1936.01 1210.99 L1936.6 1210.99 L1937.19 1210.99 L1937.77 1210.99 L1938.36 1210.99 L1938.95 1210.99 L1939.53 1210.99 L1940.12 1210.99 L1940.71 1210.99 L1941.29 1210.99 L1941.88 1210.99 L1942.46 1210.99 L1943.05 1210.99 L1943.64 1210.99 L1944.22 1210.99 L1944.81 1210.99 L1945.4 1210.99 L1945.98 1210.99 L1946.57 1210.99 L1947.16 1210.99 L1947.74 1210.99 L1948.33 1210.99 L1948.91 1210.99 L1949.5 1210.99 L1950.09 1210.99 L1950.67 1210.99 L1951.26 1210.99 L1951.85 1210.99 L1952.43 1210.99 L1953.02 1210.99 L1953.61 1210.99 L1954.19 1210.99 L1954.78 1210.99 L1955.37 1210.99 L1955.95 1210.99 L1956.54 1210.99 L1957.12 1210.99 L1957.71 1210.99 L1958.3 1210.99 L1958.88 1210.99 L1959.47 1210.99 L1960.06 1210.99 L1960.64 1210.99 L1961.23 1210.99 L1961.82 1210.99 L1962.4 1210.99 L1962.99 1210.99 L1963.58 1210.99 L1964.16 1210.99 L1964.75 1210.99 L1965.33 1210.99 L1965.92 1210.99 L1966.51 1210.99 L1967.09 1210.99 L1967.68 1210.99 L1968.27 1210.99 L1968.85 1210.99 L1969.44 1210.99 L1970.03 1210.99 L1970.61 1210.99 L1971.2 1210.99 L1971.78 1210.99 L1972.37 1210.99 L1972.96 1210.99 L1973.54 1210.99 L1974.13 1210.99 L1974.72 1210.99 L1975.3 1210.99 L1975.89 1210.99 L1976.48 1210.99 L1977.06 1210.99 L1977.65 1210.99 L1978.24 1210.99 L1978.82 1210.99 L1979.41 1210.99 L1979.99 1210.99 L1980.58 1210.99 L1981.17 1210.99 L1981.75 1210.99 L1982.34 1210.99 L1982.93 1210.99 L1983.51 1210.99 L1984.1 1210.99 L1984.69 1210.99 L1985.27 1210.99 L1985.86 1210.99 L1986.45 1210.99 L1987.03 1210.99 L1987.62 1210.99 L1988.2 1210.99 L1988.79 1210.99 L1989.38 1210.99 L1989.96 1210.99 L1990.55 1210.99 L1991.14 1210.99 L1991.72 1210.99 L1992.31 1210.99 L1992.9 1210.99 L1993.48 1210.99 L1994.07 1210.99 L1994.65 1210.99 L1995.24 1210.99 L1995.83 1210.99 L1996.41 1210.99 L1997 1210.99 L1997.59 1210.99 L1998.17 1210.99 L1998.76 1210.99 L1999.35 1210.99 L1999.93 1210.99 L2000.52 1210.99 L2001.11 1210.99 L2001.69 1210.99 L2002.28 1210.99 L2002.86 1210.99 L2003.45 1210.99 L2004.04 1210.99 L2004.62 1210.99 L2005.21 1210.99 L2005.8 1210.99 L2006.38 1210.99 L2006.97 1210.99 L2007.56 1210.99 L2008.14 1210.99 L2008.73 1210.99 L2009.32 1210.99 L2009.9 1210.99 L2010.49 1210.99 L2011.07 1210.99 L2011.66 1210.99 L2012.25 1210.99 L2012.83 1210.99 L2013.42 1210.99 L2014.01 1210.99 L2014.59 1210.99 L2015.18 1210.99 L2015.77 1210.99 L2016.35 1210.99 L2016.94 1210.99 L2017.53 1210.99 L2018.11 1210.99 L2018.7 1210.99 L2019.28 1210.99 L2019.87 1210.99 L2020.46 1210.99 L2021.04 1210.99 L2021.63 1210.99 L2022.22 1210.99 L2022.8 1210.99 L2023.39 1210.99 L2023.98 1210.99 L2024.56 1210.99 L2025.15 1210.99 L2025.73 1210.99 L2026.32 1210.99 L2026.91 1210.99 L2027.49 1210.99 L2028.08 1210.99 L2028.67 1210.99 L2029.25 1210.99 L2029.84 1210.99 L2030.43 1210.99 L2031.01 1210.99 L2031.6 1210.99 L2032.19 1210.99 L2032.77 1210.99 L2033.36 1210.99 L2033.94 1210.99 L2034.53 1210.99 L2035.12 1210.99 L2035.7 1210.99 L2036.29 1210.99 L2036.88 1210.99 L2037.46 1210.99 L2038.05 1210.99 L2038.64 1210.99 L2039.22 1210.99 L2039.81 1210.99 L2040.4 1210.99 L2040.98 1210.99 L2041.57 1210.99 L2042.15 1210.99 L2042.74 1210.99 L2043.33 1210.99 L2043.91 1210.99 L2044.5 1210.99 L2045.09 1210.99 L2045.67 1210.99 L2046.26 1210.99 L2046.85 1210.99 L2047.43 1210.99 L2048.02 1210.99 L2048.6 1210.99 L2049.19 1210.99 L2049.78 1210.99 L2050.36 1210.99 L2050.95 1210.99 L2051.54 1210.99 L2052.12 1210.99 L2052.71 1210.99 L2053.3 1210.99 L2053.88 1210.99 L2054.47 1210.99 L2055.06 1210.99 L2055.64 1210.99 L2056.23 1210.99 L2056.81 1210.99 L2057.4 1210.99 L2057.99 1210.99 L2058.57 1210.99 L2059.16 1210.99 L2059.75 1210.99 L2060.33 1210.99 L2060.92 1210.99 L2061.51 1210.99 L2062.09 1210.99 L2062.68 1210.99 L2063.27 1210.99 L2063.85 1210.99 L2064.44 1210.99 L2065.02 1210.99 L2065.61 1210.99 L2066.2 1210.99 L2066.78 1210.99 L2067.37 1210.99 L2067.96 1210.99 L2068.54 1210.99 L2069.13 1210.99 L2069.72 1210.99 L2070.3 1210.99 L2070.89 1210.99 L2071.48 1210.99 L2072.06 1210.99 L2072.65 1210.99 L2073.23 1210.99 L2073.82 1210.99 L2074.41 1210.99 L2074.99 1210.99 L2075.58 1210.99 L2076.17 1210.99 L2076.75 1210.99 L2077.34 1210.99 L2077.93 1210.99 L2078.51 1210.99 L2079.1 1210.99 L2079.68 1210.99 L2080.27 1210.99 L2080.86 1210.99 L2081.44 1210.99 L2082.03 1210.99 L2082.62 1210.99 L2083.2 1210.99 L2083.79 1210.99 L2084.38 1210.99 L2084.96 1210.99 L2085.55 1210.99 L2086.14 1210.99 L2086.72 1210.99 L2087.31 1210.99 L2087.89 1210.99 L2088.48 1210.99 L2089.07 1210.99 L2089.65 1210.99 L2090.24 1210.99 L2090.83 1210.99 L2091.41 1210.99 L2092 1210.99 L2092.59 1210.99 L2093.17 1210.99 L2093.76 1210.99 L2094.35 1210.99 L2094.93 1210.99 L2095.52 1210.99 L2096.1 1210.99 L2096.69 1210.99 L2097.28 1210.99 L2097.86 1210.99 L2098.45 1210.99 L2099.04 1210.99 L2099.62 1210.99 L2100.21 1210.99 L2100.8 1210.99 L2101.38 1210.99 L2101.97 1210.99 L2102.55 1210.99 L2103.14 1210.99 L2103.73 1210.99 L2104.31 1210.99 L2104.9 1210.99 L2105.49 1210.99 L2106.07 1210.99 L2106.66 1210.99 L2107.25 1210.99 L2107.83 1210.99 L2108.42 1210.99 L2109.01 1210.99 L2109.59 1210.99 L2110.18 1210.99 L2110.76 1210.99 L2111.35 1210.99 L2111.94 1210.99 L2112.52 1210.99 L2113.11 1210.99 L2113.7 1210.99 L2114.28 1210.99 L2114.87 1210.99 L2115.46 1210.99 L2116.04 1210.99 L2116.63 1210.99 L2117.22 1210.99 L2117.8 1210.99 L2118.39 1210.99 L2118.97 1210.99 L2119.56 1210.99 L2120.15 1210.99 L2120.73 1210.99 L2121.32 1210.99 L2121.91 1210.99 L2122.49 1210.99 L2123.08 1210.99 L2123.67 1210.99 L2124.25 1210.99 L2124.84 1210.99 L2125.42 1210.99 L2126.01 1210.99 L2126.6 1210.99 L2127.18 1210.99 L2127.77 1210.99 L2128.36 1210.99 L2128.94 1210.99 L2129.53 1210.99 L2130.12 1210.99 L2130.7 1210.99 L2131.29 1210.99 L2131.88 1210.99 L2132.46 1210.99 L2133.05 1210.99 L2133.63 1210.99 L2134.22 1210.99 L2134.81 1210.99 L2135.39 1210.99 L2135.98 1210.99 L2136.57 1210.99 L2137.15 1210.99 L2137.74 1210.99 L2138.33 1210.99 L2138.91 1210.99 L2139.5 1210.99 L2140.09 1210.99 L2140.67 1210.99 L2141.26 1210.99 L2141.84 1210.99 L2142.43 1210.99 L2143.02 1210.99 L2143.6 1210.99 L2144.19 1210.99 L2144.78 1210.99 L2145.36 1210.99 L2145.95 1210.99 L2146.54 1210.99 L2147.12 1210.99 L2147.71 1210.99 L2148.3 1210.99 L2148.88 1210.99 L2149.47 1210.99 L2150.05 1210.99 L2150.64 1210.99 L2151.23 1210.99 L2151.81 1210.99 L2152.4 1210.99 L2152.99 1210.99 L2153.57 1210.99 L2154.16 1210.99 L2154.75 1210.99 L2155.33 1210.99 L2155.92 1210.99 L2156.5 1210.99 L2157.09 1210.99 L2157.68 1210.99 L2158.26 1210.99 L2158.26 1210.88 L2157.68 1210.88 L2157.09 1210.88 L2156.5 1210.88 L2155.92 1210.88 L2155.33 1210.88 L2154.75 1210.88 L2154.16 1210.88 L2153.57 1210.88 L2152.99 1210.88 L2152.4 1210.88 L2151.81 1210.88 L2151.23 1210.88 L2150.64 1210.88 L2150.05 1210.88 L2149.47 1210.88 L2148.88 1210.88 L2148.3 1210.88 L2147.71 1210.88 L2147.12 1210.88 L2146.54 1210.88 L2145.95 1210.88 L2145.36 1210.88 L2144.78 1210.88 L2144.19 1210.88 L2143.6 1210.88 L2143.02 1210.88 L2142.43 1210.88 L2141.84 1210.88 L2141.26 1210.88 L2140.67 1210.88 L2140.09 1210.88 L2139.5 1210.88 L2138.91 1210.88 L2138.33 1210.88 L2137.74 1210.88 L2137.15 1210.88 L2136.57 1210.88 L2135.98 1210.88 L2135.39 1210.88 L2134.81 1210.88 L2134.22 1210.88 L2133.63 1210.88 L2133.05 1210.88 L2132.46 1210.88 L2131.88 1210.88 L2131.29 1210.88 L2130.7 1210.88 L2130.12 1210.88 L2129.53 1210.88 L2128.94 1210.88 L2128.36 1210.88 L2127.77 1210.88 L2127.18 1210.88 L2126.6 1210.88 L2126.01 1210.88 L2125.42 1210.88 L2124.84 1210.88 L2124.25 1210.88 L2123.67 1210.88 L2123.08 1210.88 L2122.49 1210.88 L2121.91 1210.88 L2121.32 1210.88 L2120.73 1210.88 L2120.15 1210.88 L2119.56 1210.88 L2118.97 1210.88 L2118.39 1210.88 L2117.8 1210.88 L2117.22 1210.88 L2116.63 1210.88 L2116.04 1210.88 L2115.46 1210.88 L2114.87 1210.88 L2114.28 1210.88 L2113.7 1210.88 L2113.11 1210.88 L2112.52 1210.88 L2111.94 1210.88 L2111.35 1210.88 L2110.76 1210.88 L2110.18 1210.88 L2109.59 1210.88 L2109.01 1210.88 L2108.42 1210.88 L2107.83 1210.88 L2107.25 1210.88 L2106.66 1210.88 L2106.07 1210.88 L2105.49 1210.88 L2104.9 1210.88 L2104.31 1210.88 L2103.73 1210.88 L2103.14 1210.88 L2102.55 1210.88 L2101.97 1210.88 L2101.38 1210.88 L2100.8 1210.88 L2100.21 1210.88 L2099.62 1210.88 L2099.04 1210.88 L2098.45 1210.88 L2097.86 1210.88 L2097.28 1210.88 L2096.69 1210.88 L2096.1 1210.88 L2095.52 1210.88 L2094.93 1210.88 L2094.35 1210.88 L2093.76 1210.88 L2093.17 1210.88 L2092.59 1210.88 L2092 1210.88 L2091.41 1210.88 L2090.83 1210.88 L2090.24 1210.88 L2089.65 1210.88 L2089.07 1210.88 L2088.48 1210.88 L2087.89 1210.88 L2087.31 1210.88 L2086.72 1210.88 L2086.14 1210.88 L2085.55 1210.88 L2084.96 1210.88 L2084.38 1210.88 L2083.79 1210.88 L2083.2 1210.88 L2082.62 1210.88 L2082.03 1210.88 L2081.44 1210.88 L2080.86 1210.88 L2080.27 1210.88 L2079.68 1210.88 L2079.1 1210.88 L2078.51 1210.88 L2077.93 1210.88 L2077.34 1210.88 L2076.75 1210.88 L2076.17 1210.88 L2075.58 1210.88 L2074.99 1210.88 L2074.41 1210.88 L2073.82 1210.88 L2073.23 1210.88 L2072.65 1210.88 L2072.06 1210.88 L2071.48 1210.88 L2070.89 1210.88 L2070.3 1210.88 L2069.72 1210.88 L2069.13 1210.88 L2068.54 1210.88 L2067.96 1210.88 L2067.37 1210.88 L2066.78 1210.88 L2066.2 1210.88 L2065.61 1210.88 L2065.02 1210.88 L2064.44 1210.88 L2063.85 1210.88 L2063.27 1210.88 L2062.68 1210.88 L2062.09 1210.88 L2061.51 1210.88 L2060.92 1210.88 L2060.33 1210.88 L2059.75 1210.88 L2059.16 1210.88 L2058.57 1210.88 L2057.99 1210.88 L2057.4 1210.88 L2056.81 1210.88 L2056.23 1210.88 L2055.64 1210.88 L2055.06 1210.88 L2054.47 1210.88 L2053.88 1210.88 L2053.3 1210.88 L2052.71 1210.88 L2052.12 1210.88 L2051.54 1210.88 L2050.95 1210.88 L2050.36 1210.88 L2049.78 1210.88 L2049.19 1210.88 L2048.6 1210.88 L2048.02 1210.88 L2047.43 1210.88 L2046.85 1210.88 L2046.26 1210.88 L2045.67 1210.88 L2045.09 1210.88 L2044.5 1210.88 L2043.91 1210.88 L2043.33 1210.88 L2042.74 1210.88 L2042.15 1210.88 L2041.57 1210.88 L2040.98 1210.88 L2040.4 1210.88 L2039.81 1210.88 L2039.22 1210.88 L2038.64 1210.88 L2038.05 1210.88 L2037.46 1210.88 L2036.88 1210.88 L2036.29 1210.88 L2035.7 1210.88 L2035.12 1210.88 L2034.53 1210.88 L2033.94 1210.88 L2033.36 1210.88 L2032.77 1210.88 L2032.19 1210.88 L2031.6 1210.88 L2031.01 1210.88 L2030.43 1210.88 L2029.84 1210.88 L2029.25 1210.88 L2028.67 1210.88 L2028.08 1210.88 L2027.49 1210.88 L2026.91 1210.88 L2026.32 1210.88 L2025.73 1210.88 L2025.15 1210.88 L2024.56 1210.88 L2023.98 1210.88 L2023.39 1210.88 L2022.8 1210.88 L2022.22 1210.88 L2021.63 1210.88 L2021.04 1210.88 L2020.46 1210.88 L2019.87 1210.88 L2019.28 1210.88 L2018.7 1210.88 L2018.11 1210.88 L2017.53 1210.88 L2016.94 1210.88 L2016.35 1210.88 L2015.77 1210.88 L2015.18 1210.88 L2014.59 1210.88 L2014.01 1210.88 L2013.42 1210.88 L2012.83 1210.88 L2012.25 1210.88 L2011.66 1210.88 L2011.07 1210.88 L2010.49 1210.88 L2009.9 1210.88 L2009.32 1210.88 L2008.73 1210.88 L2008.14 1210.88 L2007.56 1210.88 L2006.97 1210.88 L2006.38 1210.88 L2005.8 1210.88 L2005.21 1210.88 L2004.62 1210.88 L2004.04 1210.88 L2003.45 1210.88 L2002.86 1210.88 L2002.28 1210.88 L2001.69 1210.88 L2001.11 1210.88 L2000.52 1210.88 L1999.93 1210.88 L1999.35 1210.88 L1998.76 1210.88 L1998.17 1210.88 L1997.59 1210.88 L1997 1210.88 L1996.41 1210.88 L1995.83 1210.88 L1995.24 1210.88 L1994.65 1210.88 L1994.07 1210.88 L1993.48 1210.88 L1992.9 1210.88 L1992.31 1210.88 L1991.72 1210.88 L1991.14 1210.88 L1990.55 1210.88 L1989.96 1210.88 L1989.38 1210.88 L1988.79 1210.88 L1988.2 1210.88 L1987.62 1210.88 L1987.03 1210.88 L1986.45 1210.88 L1985.86 1210.88 L1985.27 1210.88 L1984.69 1210.88 L1984.1 1210.88 L1983.51 1210.88 L1982.93 1210.88 L1982.34 1210.88 L1981.75 1210.88 L1981.17 1210.88 L1980.58 1210.88 L1979.99 1210.88 L1979.41 1210.88 L1978.82 1210.88 L1978.24 1210.88 L1977.65 1210.88 L1977.06 1210.88 L1976.48 1210.88 L1975.89 1210.88 L1975.3 1210.88 L1974.72 1210.88 L1974.13 1210.88 L1973.54 1210.88 L1972.96 1210.88 L1972.37 1210.88 L1971.78 1210.88 L1971.2 1210.88 L1970.61 1210.88 L1970.03 1210.88 L1969.44 1210.88 L1968.85 1210.88 L1968.27 1210.88 L1967.68 1210.88 L1967.09 1210.88 L1966.51 1210.88 L1965.92 1210.88 L1965.33 1210.88 L1964.75 1210.88 L1964.16 1210.88 L1963.58 1210.88 L1962.99 1210.88 L1962.4 1210.88 L1961.82 1210.88 L1961.23 1210.88 L1960.64 1210.88 L1960.06 1210.88 L1959.47 1210.88 L1958.88 1210.88 L1958.3 1210.88 L1957.71 1210.88 L1957.12 1210.88 L1956.54 1210.88 L1955.95 1210.88 L1955.37 1210.88 L1954.78 1210.88 L1954.19 1210.88 L1953.61 1210.88 L1953.02 1210.88 L1952.43 1210.88 L1951.85 1210.88 L1951.26 1210.88 L1950.67 1210.88 L1950.09 1210.88 L1949.5 1210.88 L1948.91 1210.88 L1948.33 1210.88 L1947.74 1210.88 L1947.16 1210.88 L1946.57 1210.88 L1945.98 1210.88 L1945.4 1210.88 L1944.81 1210.88 L1944.22 1210.88 L1943.64 1210.88 L1943.05 1210.88 L1942.46 1210.88 L1941.88 1210.88 L1941.29 1210.88 L1940.71 1210.88 L1940.12 1210.88 L1939.53 1210.88 L1938.95 1210.88 L1938.36 1210.88 L1937.77 1210.88 L1937.19 1210.88 L1936.6 1210.88 L1936.01 1210.88 L1935.43 1210.88 L1934.84 1210.88 L1934.25 1210.88 L1933.67 1210.88 L1933.08 1210.88 L1932.5 1210.88 L1931.91 1210.88 L1931.32 1210.88 L1930.74 1210.88 L1930.15 1210.88 L1929.56 1210.88 L1928.98 1210.88 L1928.39 1210.88 L1927.8 1210.88 L1927.22 1210.88 L1926.63 1210.88 L1926.04 1210.88 L1925.46 1210.88 L1924.87 1210.88 L1924.29 1210.88 L1923.7 1210.88 L1923.11 1210.88 L1922.53 1210.88 L1921.94 1210.88 L1921.35 1210.88 L1920.77 1210.88 L1920.18 1210.88 L1919.59 1210.88 L1919.01 1210.88 L1918.42 1210.88 L1917.83 1210.88 L1917.25 1210.88 L1916.66 1210.88 L1916.08 1210.88 L1915.49 1210.88 L1914.9 1210.88 L1914.32 1210.88 L1913.73 1210.88 L1913.14 1210.88 L1912.56 1210.88 L1911.97 1210.88 L1911.38 1210.88 L1910.8 1210.88 L1910.21 1210.88 L1909.63 1210.88 L1909.04 1210.88 L1908.45 1210.88 L1907.87 1210.88 L1907.28 1210.88 L1906.69 1210.88 L1906.11 1210.88 L1905.52 1210.88 L1904.93 1210.88 L1904.35 1210.88 L1903.76 1210.88 L1903.17 1210.88 L1902.59 1210.88 L1902 1210.88 L1901.42 1210.88 L1900.83 1210.88 L1900.24 1210.88 L1899.66 1210.88 L1899.07 1210.88 L1898.48 1210.88 L1897.9 1210.88 L1897.31 1210.88 L1896.72 1210.88 L1896.14 1210.88 L1895.55 1210.88 L1894.96 1210.88 L1894.38 1210.88 L1893.79 1210.88 L1893.21 1210.88 L1892.62 1210.88 L1892.03 1210.88 L1891.45 1210.88 L1890.86 1210.88 L1890.27 1210.88 L1889.69 1210.88 L1889.1 1210.88 L1888.51 1210.88 L1887.93 1210.88 L1887.34 1210.88 L1886.76 1210.88 L1886.17 1210.88 L1885.58 1210.88 L1885 1210.88 L1884.41 1210.88 L1883.82 1210.88 L1883.24 1210.88 L1882.65 1210.88 L1882.06 1210.88 L1881.48 1210.88 L1880.89 1210.88 L1880.3 1210.88 L1879.72 1210.88 L1879.13 1210.88 L1878.55 1210.88 L1877.96 1210.88 L1877.37 1210.88 L1876.79 1210.88 L1876.2 1210.88 L1875.61 1210.88 L1875.03 1210.88 L1874.44 1210.88 L1873.85 1210.88 L1873.27 1210.88 L1872.68 1210.88 L1872.09 1210.88 L1871.51 1210.88 L1870.92 1210.88 L1870.34 1210.88 L1869.75 1210.88 L1869.16 1210.88 L1868.58 1210.88 L1867.99 1210.88 L1867.4 1210.88 L1866.82 1210.88 L1866.23 1210.88 L1865.64 1210.88 L1865.06 1210.88 L1864.47 1210.88 L1863.88 1210.88 L1863.3 1210.88 L1862.71 1210.88 L1862.13 1210.88 L1861.54 1210.88 L1860.95 1210.88 L1860.37 1210.88 L1859.78 1210.88 L1859.19 1210.88 L1858.61 1210.88 L1858.02 1210.88 L1857.43 1210.88 L1856.85 1210.88 L1856.26 1210.88 L1855.68 1210.88 L1855.09 1210.88 L1854.5 1210.88 L1853.92 1210.88 L1853.33 1210.88 L1852.74 1210.88 L1852.16 1210.88 L1851.57 1210.88 L1850.98 1210.88 L1850.4 1210.88 L1849.81 1210.88 L1849.22 1210.88 L1848.64 1210.88 L1848.05 1210.88 L1847.47 1210.88 L1846.88 1210.88 L1846.29 1210.88 L1845.71 1210.88 L1845.12 1210.88 L1844.53 1210.88 L1843.95 1210.88 L1843.36 1210.88 L1842.77 1210.88 L1842.19 1210.88 L1841.6 1210.88 L1841.01 1210.88 L1840.43 1210.88 L1839.84 1210.88 L1839.26 1210.88 L1838.67 1210.88 L1838.08 1210.88 L1837.5 1210.88 L1836.91 1210.88 L1836.32 1210.88 L1835.74 1210.88 L1835.15 1210.88 L1834.56 1210.88 L1833.98 1210.88 L1833.39 1210.88 L1832.81 1210.88 L1832.22 1210.88 L1831.63 1210.88 L1831.05 1210.88 L1830.46 1210.88 L1829.87 1210.88 L1829.29 1210.88 L1828.7 1210.88 L1828.11 1210.88 L1827.53 1210.88 L1826.94 1210.88 L1826.35 1210.88 L1825.77 1210.88 L1825.18 1210.88 L1824.6 1210.88 L1824.01 1210.88 L1823.42 1210.88 L1822.84 1210.88 L1822.25 1210.88 L1821.66 1210.88 L1821.08 1210.88 L1820.49 1210.88 L1819.9 1210.88 L1819.32 1210.88 L1818.73 1210.88 L1818.14 1210.88 L1817.56 1210.88 L1816.97 1210.88 L1816.39 1210.88 L1815.8 1210.88 L1815.21 1210.88 L1814.63 1210.88 L1814.04 1210.88 L1813.45 1210.88 L1812.87 1210.88 L1812.28 1210.88 L1811.69 1210.88 L1811.11 1210.88 L1810.52 1210.88 L1809.94 1210.88 L1809.35 1210.88 L1808.76 1210.88 L1808.18 1210.88 L1807.59 1210.88 L1807 1210.88 L1806.42 1210.88 L1805.83 1210.88 L1805.24 1210.88 L1804.66 1210.88 L1804.07 1210.88 L1803.48 1210.88 L1802.9 1210.88 L1802.31 1210.88 L1801.73 1210.88 L1801.14 1210.88 L1800.55 1210.88 L1799.97 1210.88 L1799.38 1210.88 L1798.79 1210.88 L1798.21 1210.88 L1797.62 1210.88 L1797.03 1210.88 L1796.45 1210.88 L1795.86 1210.88 L1795.27 1210.88 L1794.69 1210.88 L1794.1 1210.88 L1793.52 1210.88 L1792.93 1210.88 L1792.34 1210.88 L1791.76 1210.88 L1791.17 1210.88 L1790.58 1210.88 L1790 1210.88 L1789.41 1210.88 L1788.82 1210.88 L1788.24 1210.88 L1787.65 1210.88 L1787.06 1210.88 L1786.48 1210.88 L1785.89 1210.88 L1785.31 1210.88 L1784.72 1210.88 L1784.13 1210.88 L1783.55 1210.88 L1782.96 1210.88 L1782.37 1210.88 L1781.79 1210.88 L1781.2 1210.88 L1780.61 1210.88 L1780.03 1210.88 L1779.44 1210.88 L1778.86 1210.88 L1778.27 1210.88 L1777.68 1210.88 L1777.1 1210.88 L1776.51 1210.88 L1775.92 1210.88 L1775.34 1210.88 L1774.75 1210.88 L1774.16 1210.88 L1773.58 1210.88 L1772.99 1210.88 L1772.4 1210.88 L1771.82 1210.88 L1771.23 1210.88 L1770.65 1210.88 L1770.06 1210.88 L1769.47 1210.88 L1768.89 1210.88 L1768.3 1210.88 L1767.71 1210.88 L1767.13 1210.88 L1766.54 1210.88 L1765.95 1210.88 L1765.37 1210.88 L1764.78 1210.88 L1764.19 1210.88 L1763.61 1210.88 L1763.02 1210.88 L1762.44 1210.88 L1761.85 1210.88 L1761.26 1210.88 L1760.68 1210.88 L1760.09 1210.88 L1759.5 1210.88 L1758.92 1210.88 L1758.33 1210.88 L1757.74 1210.88 L1757.16 1210.88 L1756.57 1210.88 L1755.99 1210.88 L1755.4 1210.88 L1754.81 1210.88 L1754.23 1210.88 L1753.64 1210.88 L1753.05 1210.88 L1752.47 1210.88 L1751.88 1210.88 L1751.29 1210.88 L1750.71 1210.88 L1750.12 1210.88 L1749.53 1210.88 L1748.95 1210.88 L1748.36 1210.88 L1747.78 1210.88 L1747.19 1210.88 L1746.6 1210.88 L1746.02 1210.88 L1745.43 1210.88 L1744.84 1210.88 L1744.26 1210.88 L1743.67 1210.88 L1743.08 1210.88 L1742.5 1210.88 L1741.91 1210.88 L1741.32 1210.88 L1740.74 1210.88 L1740.15 1210.88 L1739.57 1210.88 L1738.98 1210.88 L1738.39 1210.88 L1737.81 1210.88 L1737.22 1210.88 L1736.63 1210.88 L1736.05 1210.88 L1735.46 1210.88 L1734.87 1210.88 L1734.29 1210.88 L1733.7 1210.88 L1733.11 1210.88 L1732.53 1210.88 L1731.94 1210.88 L1731.36 1210.88 L1730.77 1210.88 L1730.18 1210.88 L1729.6 1210.88 L1729.01 1210.88 L1728.42 1210.88 L1727.84 1210.88 L1727.25 1210.88 L1726.66 1210.88 L1726.08 1210.88 L1725.49 1210.88 L1724.91 1210.88 L1724.32 1210.88 L1723.73 1210.88 L1723.15 1210.88 L1722.56 1210.88 L1721.97 1210.88 L1721.39 1210.88 L1720.8 1210.88 L1720.21 1210.88 L1719.63 1210.88 L1719.04 1210.88 L1718.45 1210.88 L1717.87 1210.88 L1717.28 1210.88 L1716.7 1210.88 L1716.11 1210.88 L1715.52 1210.88 L1714.94 1210.88 L1714.35 1210.88 L1713.76 1210.88 L1713.18 1210.88 L1712.59 1210.88 L1712 1210.88 L1711.42 1210.88 L1710.83 1210.88 L1710.24 1210.88 L1709.66 1210.88 L1709.07 1210.88 L1708.49 1210.88 L1707.9 1210.88 L1707.31 1210.88 L1706.73 1210.88 L1706.14 1210.88 L1705.55 1210.88 L1704.97 1210.88 L1704.38 1210.88 L1703.79 1210.88 L1703.21 1210.88 L1702.62 1210.88 L1702.04 1210.88 L1701.45 1210.88 L1700.86 1210.88 L1700.28 1210.88 L1699.69 1210.88 L1699.1 1210.88 L1698.52 1210.88 L1697.93 1210.88 L1697.34 1210.88 L1696.76 1210.88 L1696.17 1210.88 L1695.58 1210.88 L1695 1210.88 L1694.41 1210.88 L1693.83 1210.88 L1693.24 1210.88 L1692.65 1210.88 L1692.07 1210.88 L1691.48 1210.88 L1690.89 1210.88 L1690.31 1210.88 L1689.72 1210.88 L1689.13 1210.88 L1688.55 1210.88 L1687.96 1210.88 L1687.37 1210.88 L1686.79 1210.88 L1686.2 1210.88 L1685.62 1210.88 L1685.03 1210.88 L1684.44 1210.88 L1683.86 1210.88 L1683.27 1210.88 L1682.68 1210.88 L1682.1 1210.88 L1681.51 1210.88 L1680.92 1210.88 L1680.34 1210.88 L1679.75 1210.88 L1679.17 1210.88 L1678.58 1210.88 L1677.99 1210.88 L1677.41 1210.88 L1676.82 1210.88 L1676.23 1210.88 L1675.65 1210.88 L1675.06 1210.88 L1674.47 1210.88 L1673.89 1210.88 L1673.3 1210.88 L1672.71 1210.88 L1672.13 1210.88 L1671.54 1210.88 L1670.96 1210.88 L1670.37 1210.88 L1669.78 1210.88 L1669.2 1210.88 L1668.61 1210.88 L1668.02 1210.88 L1667.44 1210.88 L1666.85 1210.88 L1666.26 1210.88 L1665.68 1210.88 L1665.09 1210.88 L1664.5 1210.88 L1663.92 1210.88 L1663.33 1210.88 L1662.75 1210.88 L1662.16 1210.88 L1661.57 1210.88 L1660.99 1210.88 L1660.4 1210.88 L1659.81 1210.88 L1659.23 1210.88 L1658.64 1210.88 L1658.05 1210.88 L1657.47 1210.88 L1656.88 1210.88 L1656.29 1210.88 L1655.71 1210.88 L1655.12 1210.88 L1654.54 1210.88 L1653.95 1210.88 L1653.36 1210.88 L1652.78 1210.88 L1652.19 1210.88 L1651.6 1210.88 L1651.02 1210.88 L1650.43 1210.88 L1649.84 1210.88 L1649.26 1210.88 L1648.67 1210.88 L1648.09 1210.88 L1647.5 1210.88 L1646.91 1210.88 L1646.33 1210.88 L1645.74 1210.88 L1645.15 1210.88 L1644.57 1210.88 L1643.98 1210.88 L1643.39 1210.88 L1642.81 1210.88 L1642.22 1210.88 L1641.63 1210.88 L1641.05 1210.88 L1640.46 1210.88 L1639.88 1210.88 L1639.29 1210.88 L1638.7 1210.88 L1638.12 1210.88 L1637.53 1210.88 L1636.94 1210.88 L1636.36 1210.88 L1635.77 1210.88 L1635.18 1210.88 L1634.6 1210.88 L1634.01 1210.88 L1633.42 1210.88 L1632.84 1210.88 L1632.25 1210.88 L1631.67 1210.88 L1631.08 1210.88 L1630.49 1210.88 L1629.91 1210.88 L1629.32 1210.88 L1628.73 1210.88 L1628.15 1210.88 L1627.56 1210.88 L1626.97 1210.88 L1626.39 1210.88 L1625.8 1210.88 L1625.22 1210.88 L1624.63 1210.88 L1624.04 1210.88 L1623.46 1210.88 L1622.87 1210.88 L1622.28 1210.88 L1621.7 1210.88 L1621.11 1210.88 L1620.52 1210.88 L1619.94 1210.88 L1619.35 1210.88 L1618.76 1210.88 L1618.18 1210.88 L1617.59 1210.88 L1617.01 1210.88 L1616.42 1210.88 L1615.83 1210.88 L1615.25 1210.88 L1614.66 1210.88 L1614.07 1210.88 L1613.49 1210.88 L1612.9 1210.88 L1612.31 1210.88 L1611.73 1210.88 L1611.14 1210.88 L1610.55 1210.88 L1609.97 1210.88 L1609.38 1210.88 L1608.8 1210.88 L1608.21 1210.88 L1607.62 1210.88 L1607.04 1210.88 L1606.45 1210.88 L1605.86 1210.88 L1605.28 1210.88 L1604.69 1210.88 L1604.1 1210.88 L1603.52 1210.88 L1602.93 1210.88 L1602.34 1210.88 L1601.76 1210.88 L1601.17 1210.88 L1600.59 1210.88 L1600 1210.88 L1599.41 1210.88 L1598.83 1210.88 L1598.24 1210.88 L1597.65 1210.88 L1597.07 1210.88 L1596.48 1210.88 L1595.89 1210.88 L1595.31 1210.88 L1594.72 1210.88 L1594.14 1210.88 L1593.55 1210.88 L1592.96 1210.88 L1592.38 1210.88 L1591.79 1210.88 L1591.2 1210.88 L1590.62 1210.88 L1590.03 1210.88 L1589.44 1210.88 L1588.86 1210.88 L1588.27 1210.88 L1587.68 1210.88 L1587.1 1210.88 L1586.51 1210.88 L1585.93 1210.88 L1585.34 1210.88 L1584.75 1210.88 L1584.17 1210.88 L1583.58 1210.88 L1582.99 1210.88 L1582.41 1210.88 L1581.82 1210.88 L1581.23 1210.88 L1580.65 1210.88 L1580.06 1210.88 L1579.47 1210.88 L1578.89 1210.88 L1578.3 1210.88 L1577.72 1210.88 L1577.13 1210.88 L1576.54 1210.88 L1575.96 1210.88 L1575.37 1210.88 L1574.78 1210.88 L1574.2 1210.88 L1573.61 1210.88 L1573.02 1210.88 L1572.44 1210.88 L1571.85 1210.88 L1571.27 1210.88 L1570.68 1210.88 L1570.09 1210.88 L1569.51 1210.88 L1568.92 1210.88 L1568.33 1210.88 L1567.75 1210.88 L1567.16 1210.88 L1566.57 1210.88 L1565.99 1210.88 L1565.4 1210.88 L1564.81 1210.88 L1564.23 1210.88 L1563.64 1210.88 L1563.06 1210.88 L1562.47 1210.88 L1561.88 1210.88 L1561.3 1210.88 L1560.71 1210.88 L1560.12 1210.88 L1559.54 1210.88 L1558.95 1210.88 L1558.36 1210.88 L1557.78 1210.88 L1557.19 1210.88 L1556.6 1210.88 L1556.02 1210.88 L1555.43 1210.88 L1554.85 1210.88 L1554.26 1210.88 L1553.67 1210.88 L1553.09 1210.88 L1552.5 1210.88 L1551.91 1210.88 L1551.33 1210.88 L1550.74 1210.88 L1550.15 1210.88 L1549.57 1210.88 L1548.98 1210.88 L1548.4 1210.88 L1547.81 1210.88 L1547.22 1210.88 L1546.64 1210.88 L1546.05 1210.88 L1545.46 1210.88 L1544.88 1210.88 L1544.29 1210.88 L1543.7 1210.88 L1543.12 1210.88 L1542.53 1210.88 L1541.94 1210.88 L1541.36 1210.88 L1540.77 1210.88 L1540.19 1210.88 L1539.6 1210.88 L1539.01 1210.88 L1538.43 1210.88 L1537.84 1210.88 L1537.25 1210.88 L1536.67 1210.88 L1536.08 1210.88 L1535.49 1210.88 L1534.91 1210.88 L1534.32 1210.88 L1533.73 1210.88 L1533.15 1210.88 L1532.56 1210.88 L1531.98 1210.88 L1531.39 1210.88 L1530.8 1210.88 L1530.22 1210.88 L1529.63 1210.88 L1529.04 1210.88 L1528.46 1210.88 L1527.87 1210.88 L1527.28 1210.88 L1526.7 1210.88 L1526.11 1210.88 L1525.52 1210.88 L1524.94 1210.88 L1524.35 1210.88 L1523.77 1210.88 L1523.18 1210.88 L1522.59 1210.88 L1522.01 1210.88 L1521.42 1210.88 L1520.83 1210.88 L1520.25 1210.88 L1519.66 1210.88 L1519.07 1210.88 L1518.49 1210.88 L1517.9 1210.88 L1517.32 1210.88 L1516.73 1210.88 L1516.14 1210.88 L1515.56 1210.88 L1514.97 1210.88 L1514.38 1210.88 L1513.8 1210.88 L1513.21 1210.88 L1512.62 1210.88 L1512.04 1210.88 L1511.45 1210.88 L1510.86 1210.88 L1510.28 1210.88 L1509.69 1210.88 L1509.11 1210.88 L1508.52 1210.88 L1507.93 1210.88 L1507.35 1210.88 L1506.76 1210.88 L1506.17 1210.88 L1505.59 1210.88 L1505 1210.88 L1504.41 1210.88 L1503.83 1210.88 L1503.24 1210.88 L1502.65 1210.88 L1502.07 1210.88 L1501.48 1210.88 L1500.9 1210.88 L1500.31 1210.88 L1499.72 1210.88 L1499.14 1210.88 L1498.55 1210.88 L1497.96 1210.88 L1497.38 1210.88 L1496.79 1210.88 L1496.2 1210.88 L1495.62 1210.88 L1495.03 1210.88 L1494.45 1210.88 L1493.86 1210.88 L1493.27 1210.88 L1492.69 1210.88 L1492.1 1210.88 L1491.51 1210.88 L1490.93 1210.88 L1490.34 1210.88 L1489.75 1210.88 L1489.17 1210.88 L1488.58 1210.88 L1487.99 1210.88 L1487.41 1210.88 L1486.82 1210.88 L1486.24 1210.88 L1485.65 1210.88 L1485.06 1210.88 L1484.48 1210.88 L1483.89 1210.88 L1483.3 1210.88 L1482.72 1210.88 L1482.13 1210.88 L1481.54 1210.88 L1480.96 1210.88 L1480.37 1210.88 L1479.78 1210.88 L1479.2 1210.88 L1478.61 1210.88 L1478.03 1210.88 L1477.44 1210.88 L1476.85 1210.88 L1476.27 1210.88 L1475.68 1210.88 L1475.09 1210.88 L1474.51 1210.88 L1473.92 1210.88 L1473.33 1210.88 L1472.75 1210.88 L1472.16 1210.88 L1471.57 1210.88 L1470.99 1210.88 L1470.4 1210.88 L1469.82 1210.88 L1469.23 1210.88 L1468.64 1210.88 L1468.06 1210.88 L1467.47 1210.88 L1466.88 1210.88 L1466.3 1210.88 L1465.71 1210.88 L1465.12 1210.88 L1464.54 1210.88 L1463.95 1210.88 L1463.37 1210.88 L1462.78 1210.88 L1462.19 1210.88 L1461.61 1210.88 L1461.02 1210.88 L1460.43 1210.88 L1459.85 1210.88 L1459.26 1210.88 L1458.67 1210.88 L1458.09 1210.88 L1457.5 1210.88 L1456.91 1210.88 L1456.33 1210.88 L1455.74 1210.88 L1455.16 1210.88 L1454.57 1210.88 L1453.98 1210.88 L1453.4 1210.88 L1452.81 1210.88 L1452.22 1210.88 L1451.64 1210.88 L1451.05 1210.88 L1450.46 1210.88 L1449.88 1210.88 L1449.29 1210.88 L1448.7 1210.88 L1448.12 1210.88 L1447.53 1210.88 L1446.95 1210.88 L1446.36 1210.88 L1445.77 1210.88 L1445.19 1210.88 L1444.6 1210.88 L1444.01 1210.88 L1443.43 1210.88 L1442.84 1210.88 L1442.25 1210.88 L1441.67 1210.88 L1441.08 1210.88 L1440.5 1210.88 L1439.91 1210.88 L1439.32 1210.88 L1438.74 1210.88 L1438.15 1210.88 L1437.56 1210.88 L1436.98 1210.88 L1436.39 1210.88 L1435.8 1210.88 L1435.22 1210.88 L1434.63 1210.88 L1434.04 1210.88 L1433.46 1210.88 L1432.87 1210.88 L1432.29 1210.88 L1431.7 1210.88 L1431.11 1210.88 L1430.53 1210.88 L1429.94 1210.88 L1429.35 1210.88 L1428.77 1210.88 L1428.18 1210.88 L1427.59 1210.88 L1427.01 1210.88 L1426.42 1210.88 L1425.83 1210.88 L1425.25 1210.88 L1424.66 1210.88 L1424.08 1210.88 L1423.49 1210.88 L1422.9 1210.88 L1422.32 1210.88 L1421.73 1210.88 L1421.14 1210.88 L1420.56 1210.88 L1419.97 1210.88 L1419.38 1210.88 L1418.8 1210.88 L1418.21 1210.88 L1417.63 1210.88 L1417.04 1210.88 L1416.45 1210.88 L1415.87 1210.88 L1415.28 1210.88 L1414.69 1210.88 L1414.11 1210.88 L1413.52 1210.88 L1412.93 1210.88 L1412.35 1210.88 L1411.76 1210.88 L1411.17 1210.88 L1410.59 1210.88 L1410 1210.88 L1409.42 1210.88 L1408.83 1210.88 L1408.24 1210.88 L1407.66 1210.88 L1407.07 1210.88 L1406.48 1210.88 L1405.9 1210.88 L1405.31 1210.88 L1404.72 1210.88 L1404.14 1210.88 L1403.55 1210.88 L1402.96 1210.88 L1402.38 1210.88 L1401.79 1210.88 L1401.21 1210.88 L1400.62 1210.88 L1400.03 1210.88 L1399.45 1210.88 L1398.86 1210.88 L1398.27 1210.88 L1397.69 1210.88 L1397.1 1210.88 L1396.51 1210.88 L1395.93 1210.88 L1395.34 1210.88 L1394.75 1210.88 L1394.17 1210.88 L1393.58 1210.88 L1393 1210.88 L1392.41 1210.88 L1391.82 1210.88 L1391.24 1210.88 L1390.65 1210.88 L1390.06 1210.88 L1389.48 1210.88 L1388.89 1210.88 L1388.3 1210.88 L1387.72 1210.88 L1387.13 1210.88 L1386.55 1210.88 L1385.96 1210.88 L1385.37 1210.88 L1384.79 1210.88 L1384.2 1210.88 L1383.61 1210.88 L1383.03 1210.88 L1382.44 1210.88 L1381.85 1210.88 L1381.27 1210.88 L1380.68 1210.88 L1380.09 1210.88 L1379.51 1210.88 L1378.92 1210.88 L1378.34 1210.88 L1377.75 1210.88 L1377.16 1210.88 L1376.58 1210.88 L1375.99 1210.88 L1375.4 1210.88 L1374.82 1210.88 L1374.23 1210.88 L1373.64 1210.88 L1373.06 1210.88 L1372.47 1210.88 L1371.88 1210.88 L1371.3 1210.88 L1370.71 1210.88 L1370.13 1210.88 L1369.54 1210.88 L1368.95 1210.88 L1368.37 1210.88 L1367.78 1210.88 L1367.19 1210.88 L1366.61 1210.88 L1366.02 1210.88 L1365.43 1210.88 L1364.85 1210.88 L1364.26 1210.88 L1363.68 1210.88 L1363.09 1210.88 L1362.5 1210.88 L1361.92 1210.88 L1361.33 1210.88 L1360.74 1210.88 L1360.16 1210.88 L1359.57 1210.88 L1358.98 1210.88 L1358.4 1210.88 L1357.81 1210.88 L1357.22 1210.88 L1356.64 1210.88 L1356.05 1210.88 L1355.47 1210.88 L1354.88 1210.88 L1354.29 1210.88 L1353.71 1210.88 L1353.12 1210.88 L1352.53 1210.88 L1351.95 1210.88 L1351.36 1210.88 L1350.77 1210.88 L1350.19 1210.88 L1349.6 1210.88 L1349.01 1210.88 L1348.43 1210.88 L1347.84 1210.88 L1347.26 1210.88 L1346.67 1210.88 L1346.08 1210.88 L1345.5 1210.88 L1344.91 1210.88 L1344.32 1210.88 L1343.74 1210.88 L1343.15 1210.88 L1342.56 1210.88 L1341.98 1210.88 L1341.39 1210.88 L1340.8 1210.88 L1340.22 1210.88 L1339.63 1210.88 L1339.05 1210.88 L1338.46 1210.88 L1337.87 1210.88 L1337.29 1210.88 L1336.7 1210.88 L1336.11 1210.88 L1335.53 1210.88 L1334.94 1210.88 L1334.35 1210.88 L1333.77 1210.88 L1333.18 1210.88 L1332.6 1210.88 L1332.01 1210.88 L1331.42 1210.88 L1330.84 1210.88 L1330.25 1210.88 L1329.66 1210.88 L1329.08 1210.88 L1328.49 1210.88 L1327.9 1210.88 L1327.32 1210.88 L1326.73 1210.88 L1326.14 1210.88 L1325.56 1210.88 L1324.97 1210.88 L1324.39 1210.88 L1323.8 1210.88 L1323.21 1210.88 L1322.63 1210.88 L1322.04 1210.88 L1321.45 1210.88 L1320.87 1210.88 L1320.28 1210.88 L1319.69 1210.88 L1319.11 1210.88 L1318.52 1210.88 L1317.93 1210.88 L1317.35 1210.88 L1316.76 1210.88 L1316.18 1210.88 L1315.59 1210.88 L1315 1210.88 L1314.42 1210.88 L1313.83 1210.88 L1313.24 1210.88 L1312.66 1210.88 L1312.07 1210.88 L1311.48 1210.88 L1310.9 1210.88 L1310.31 1210.88 L1309.73 1210.88 L1309.14 1210.88 L1308.55 1210.88 L1307.97 1210.88 L1307.38 1210.88 L1306.79 1210.88 L1306.21 1210.88 L1305.62 1210.88 L1305.03 1210.88 L1304.45 1210.88 L1303.86 1210.88 L1303.27 1210.88 L1302.69 1210.88 L1302.1 1210.88 L1301.52 1210.88 L1300.93 1210.88 L1300.34 1210.88 L1299.76 1210.88 L1299.17 1210.88 L1298.58 1210.88 L1298 1210.88 L1297.41 1210.88 L1296.82 1210.88 L1296.24 1210.88 L1295.65 1210.88 L1295.06 1210.88 L1294.48 1210.88 L1293.89 1210.88 L1293.31 1210.88 L1292.72 1210.88 L1292.13 1210.88 L1291.55 1210.88 L1290.96 1210.88 L1290.37 1210.88 L1289.79 1210.88 L1289.2 1210.88 L1288.61 1210.88 L1288.03 1210.88 L1287.44 1210.88 L1286.86 1210.88 L1286.27 1210.88 L1285.68 1210.88 L1285.1 1210.88 L1284.51 1210.88 L1283.92 1210.88 L1283.34 1210.88 L1282.75 1210.88 L1282.16 1210.88 L1281.58 1210.88 L1280.99 1210.88 L1280.4 1210.88 L1279.82 1210.88 L1279.23 1210.88 L1278.65 1210.88 L1278.06 1210.88 L1277.47 1210.88 L1276.89 1210.88 L1276.3 1210.88 L1275.71 1210.88 L1275.13 1210.88 L1274.54 1210.88 L1273.95 1210.88 L1273.37 1210.88 L1272.78 1210.88 L1272.19 1210.88 L1271.61 1210.88 L1271.02 1210.88 L1270.44 1210.88 L1269.85 1210.88 L1269.26 1210.88 L1268.68 1210.88 L1268.09 1210.88 L1267.5 1210.88 L1266.92 1210.88 L1266.33 1210.88 L1265.74 1210.88 L1265.16 1210.88 L1264.57 1210.88 L1263.98 1210.88 L1263.4 1210.88 L1262.81 1210.88 L1262.23 1210.88 L1261.64 1210.88 L1261.05 1210.88 L1260.47 1210.88 L1259.88 1210.88 L1259.29 1210.88 L1258.71 1210.88 L1258.12 1210.88 L1257.53 1210.88 L1256.95 1210.88 L1256.36 1210.88 L1255.78 1210.88 L1255.19 1210.88 L1254.6 1210.88 L1254.02 1210.88 L1253.43 1210.88 L1252.84 1210.88 L1252.26 1210.88 L1251.67 1210.88 L1251.08 1210.88 L1250.5 1210.88 L1249.91 1210.88 L1249.32 1210.88 L1248.74 1210.88 L1248.15 1210.88 L1247.57 1210.88 L1246.98 1210.88 L1246.39 1210.88 L1245.81 1210.88 L1245.22 1210.88 L1244.63 1210.88 L1244.05 1210.88 L1243.46 1210.88 L1242.87 1210.88 L1242.29 1210.88 L1241.7 1210.88 L1241.11 1210.88 L1240.53 1210.88 L1239.94 1210.88 L1239.36 1210.88 L1238.77 1210.88 L1238.18 1210.88 L1237.6 1210.88 L1237.01 1210.88 L1236.42 1210.88 L1235.84 1210.88 L1235.25 1210.88 L1234.66 1210.88 L1234.08 1210.88 L1233.49 1210.88 L1232.91 1210.88 L1232.32 1210.88 L1231.73 1210.88 L1231.15 1210.88 L1230.56 1210.88 L1229.97 1210.88 L1229.39 1210.88 L1228.8 1210.88 L1228.21 1210.88 L1227.63 1210.88 L1227.04 1210.88 L1226.45 1210.88 L1225.87 1210.88 L1225.28 1210.88 L1224.7 1210.88 L1224.11 1210.88 L1223.52 1210.88 L1222.94 1210.88 L1222.35 1210.88 L1221.76 1210.88 L1221.18 1210.88 L1220.59 1210.88 L1220 1210.88 L1219.42 1210.88 L1218.83 1210.88 L1218.24 1210.88 L1217.66 1210.88 L1217.07 1210.88 L1216.49 1210.88 L1215.9 1210.88 L1215.31 1210.88 L1214.73 1210.88 L1214.14 1210.88 L1213.55 1210.88 L1212.97 1210.88 L1212.38 1210.88 L1211.79 1210.88 L1211.21 1210.88 L1210.62 1210.88 L1210.03 1210.88 L1209.45 1210.88 L1208.86 1210.88 L1208.28 1210.88 L1207.69 1210.88 L1207.1 1210.88 L1206.52 1210.88 L1205.93 1210.88 L1205.34 1210.88 L1204.76 1210.88 L1204.17 1210.88 L1203.58 1210.88 L1203 1210.88 L1202.41 1210.88 L1201.83 1210.88 L1201.24 1210.88 L1200.65 1210.88 L1200.07 1210.88 L1199.48 1210.88 L1198.89 1210.88 L1198.31 1210.88 L1197.72 1210.88 L1197.13 1210.88 L1196.55 1210.88 L1195.96 1210.88 L1195.37 1210.88 L1194.79 1210.88 L1194.2 1210.88 L1193.62 1210.88 L1193.03 1210.88 L1192.44 1210.88 L1191.86 1210.88 L1191.27 1210.88 L1190.68 1210.88 L1190.1 1210.88 L1189.51 1210.88 L1188.92 1210.88 L1188.34 1210.88 L1187.75 1210.88 L1187.16 1210.88 L1186.58 1210.88 L1185.99 1210.88 L1185.41 1210.88 L1184.82 1210.88 L1184.23 1210.88 L1183.65 1210.88 L1183.06 1210.88 L1182.47 1210.88 L1181.89 1210.88 L1181.3 1210.88 L1180.71 1210.88 L1180.13 1210.88 L1179.54 1210.88 L1178.96 1210.88 L1178.37 1210.88 L1177.78 1210.88 L1177.2 1210.88 L1176.61 1210.88 L1176.02 1210.88 L1175.44 1210.88 L1174.85 1210.88 L1174.26 1210.88 L1173.68 1210.88 L1173.09 1210.88 L1172.5 1210.88 L1171.92 1210.88 L1171.33 1210.88 L1170.75 1210.88 L1170.16 1210.88 L1169.57 1210.88 L1168.99 1210.88 L1168.4 1210.88 L1167.81 1210.88 L1167.23 1210.88 L1166.64 1210.88 L1166.05 1210.88 L1165.47 1210.88 L1164.88 1210.88 L1164.29 1210.88 L1163.71 1210.88 L1163.12 1210.88 L1162.54 1210.88 L1161.95 1210.88 L1161.36 1210.88 L1160.78 1210.88 L1160.19 1210.88 L1159.6 1210.88 L1159.02 1210.88 L1158.43 1210.88 L1157.84 1210.88 L1157.26 1210.88 L1156.67 1210.88 L1156.09 1210.88 L1155.5 1210.88 L1154.91 1210.88 L1154.33 1210.88 L1153.74 1210.88 L1153.15 1210.88 L1152.57 1210.88 L1151.98 1210.88 L1151.39 1210.88 L1150.81 1210.88 L1150.22 1210.88 L1149.63 1210.88 L1149.05 1210.88 L1148.46 1210.88 L1147.88 1210.88 L1147.29 1210.88 L1146.7 1210.88 L1146.12 1210.88 L1145.53 1210.88 L1144.94 1210.88 L1144.36 1210.88 L1143.77 1210.88 L1143.18 1210.88 L1142.6 1210.88 L1142.01 1210.88 L1141.42 1210.88 L1140.84 1210.88 L1140.25 1210.88 L1139.67 1210.88 L1139.08 1210.88 L1138.49 1210.88 L1137.91 1210.88 L1137.32 1210.88 L1136.73 1210.88 L1136.15 1210.88 L1135.56 1210.88 L1134.97 1210.88 L1134.39 1210.88 L1133.8 1210.88 L1133.21 1210.88 L1132.63 1210.88 L1132.04 1210.88 L1131.46 1210.88 L1130.87 1210.88 L1130.28 1210.88 L1129.7 1210.88 L1129.11 1210.88 L1128.52 1210.88 L1127.94 1210.88 L1127.35 1210.88 L1126.76 1210.88 L1126.18 1210.88 L1125.59 1210.88 L1125.01 1210.88 L1124.42 1210.88 L1123.83 1210.88 L1123.25 1210.88 L1122.66 1210.88 L1122.07 1210.88 L1121.49 1210.88 L1120.9 1210.88 L1120.31 1210.88 L1119.73 1210.88 L1119.14 1210.88 L1118.55 1210.88 L1117.97 1210.88 L1117.38 1210.88 L1116.8 1210.88 L1116.21 1210.88 L1115.62 1210.88 L1115.04 1210.88 L1114.45 1210.88 L1113.86 1210.88 L1113.28 1210.88 L1112.69 1210.88 L1112.1 1210.88 L1111.52 1210.88 L1110.93 1210.88 L1110.34 1210.88 L1109.76 1210.88 L1109.17 1210.88 L1108.59 1210.88 L1108 1210.88 L1107.41 1210.88 L1106.83 1210.88 L1106.24 1210.88 L1105.65 1210.88 L1105.07 1210.88 L1104.48 1210.88 L1103.89 1210.88 L1103.31 1210.88 L1102.72 1210.88 L1102.14 1210.88 L1101.55 1210.88 L1100.96 1210.88 L1100.38 1210.88 L1099.79 1210.88 L1099.2 1210.88 L1098.62 1210.88 L1098.03 1210.88 L1097.44 1210.88 L1096.86 1210.88 L1096.27 1210.88 L1095.68 1210.88 L1095.1 1210.88 L1094.51 1210.88 L1093.93 1210.88 L1093.34 1210.88 L1092.75 1210.88 L1092.17 1210.88 L1091.58 1210.88 L1090.99 1210.88 L1090.41 1210.88 L1089.82 1210.88 L1089.23 1210.88 L1088.65 1210.88 L1088.06 1210.88 L1087.47 1210.88 L1086.89 1210.88 L1086.3 1210.88 L1085.72 1210.88 L1085.13 1210.88 L1084.54 1210.88 L1083.96 1210.88 L1083.37 1210.88 L1082.78 1210.88 L1082.2 1210.88 L1081.61 1210.88 L1081.02 1210.88 L1080.44 1210.88 L1079.85 1210.88 L1079.26 1210.88 L1078.68 1210.88 L1078.09 1210.88 L1077.51 1210.88 L1076.92 1210.88 L1076.33 1210.88 L1075.75 1210.88 L1075.16 1210.88 L1074.57 1210.88 L1073.99 1210.88 L1073.4 1210.88 L1072.81 1210.88 L1072.23 1210.88 L1071.64 1210.88 L1071.06 1210.88 L1070.47 1210.88 L1069.88 1210.88 L1069.3 1210.88 L1068.71 1210.88 L1068.12 1210.88 L1067.54 1210.88 L1066.95 1210.88 L1066.36 1210.88 L1065.78 1210.88 L1065.19 1210.88 L1064.6 1210.88 L1064.02 1210.88 L1063.43 1210.88 L1062.85 1210.88 L1062.26 1210.88 L1061.67 1210.88 L1061.09 1210.88 L1060.5 1210.88 L1059.91 1210.88 L1059.33 1210.88 L1058.74 1210.88 L1058.15 1210.88 L1057.57 1210.88 L1056.98 1210.88 L1056.39 1210.88 L1055.81 1210.88 L1055.22 1210.88 L1054.64 1210.88 L1054.05 1210.88 L1053.46 1210.88 L1052.88 1210.88 L1052.29 1210.88 L1051.7 1210.88 L1051.12 1210.88 L1050.53 1210.88 L1049.94 1210.88 L1049.36 1210.88 L1048.77 1210.88 L1048.19 1210.88 L1047.6 1210.88 L1047.01 1210.88 L1046.43 1210.88 L1045.84 1210.88 L1045.25 1210.88 L1044.67 1210.88 L1044.08 1210.88 L1043.49 1210.88 L1042.91 1210.88 L1042.32 1210.88 L1041.73 1210.88 L1041.15 1210.88 L1040.56 1210.88 L1039.98 1210.88 L1039.39 1210.88 L1038.8 1210.88 L1038.22 1210.88 L1037.63 1210.88 L1037.04 1210.88 L1036.46 1210.88 L1035.87 1210.88 L1035.28 1210.88 L1034.7 1210.88 L1034.11 1210.88 L1033.52 1210.88 L1032.94 1210.88 L1032.35 1210.88 L1031.77 1210.88 L1031.18 1210.88 L1030.59 1210.88 L1030.01 1210.88 L1029.42 1210.88 L1028.83 1210.88 L1028.25 1210.88 L1027.66 1210.88 L1027.07 1210.88 L1026.49 1210.88 L1025.9 1210.88 L1025.32 1210.88 L1024.73 1210.88 L1024.14 1210.88 L1023.56 1210.88 L1022.97 1210.88 L1022.38 1210.88 L1021.8 1210.88 L1021.21 1210.88 L1020.62 1210.88 L1020.04 1210.88 L1019.45 1210.88 L1018.86 1210.88 L1018.28 1210.88 L1017.69 1210.88 L1017.11 1210.88 L1016.52 1210.88 L1015.93 1210.88 L1015.35 1210.88 L1014.76 1210.88 L1014.17 1210.88 L1013.59 1210.88 L1013 1210.88 L1012.41 1210.88 L1011.83 1210.88 L1011.24 1210.88 L1010.65 1210.88 L1010.07 1210.88 L1009.48 1210.88 L1008.9 1210.88 L1008.31 1210.88 L1007.72 1210.88 L1007.14 1210.88 L1006.55 1210.88 L1005.96 1210.88 L1005.38 1210.88 L1004.79 1210.88 L1004.2 1210.88 L1003.62 1210.88 L1003.03 1210.88 L1002.44 1210.88 L1001.86 1210.88 L1001.27 1210.88 L1000.69 1210.88 L1000.1 1210.88 L999.513 1210.88 L998.926 1210.88 L998.34 1210.88 L997.754 1210.88 L997.167 1210.88 L996.581 1210.88 L995.994 1210.88 L995.408 1210.88 L994.822 1210.88 L994.235 1210.88 L993.649 1210.88 L993.062 1210.88 L992.476 1210.88 L991.889 1210.88 L991.303 1210.88 L990.717 1210.88 L990.13 1210.88 L989.544 1210.88 L988.957 1210.88 L988.371 1210.88 L987.785 1210.88 L987.198 1210.88 L986.612 1210.88 L986.025 1210.88  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.93 986.612,1210.93 987.198,1210.93 987.785,1210.93 988.371,1210.93 988.957,1210.93 989.544,1210.93 990.13,1210.93 990.717,1210.93 991.303,1210.93 991.889,1210.93 992.476,1210.93 993.062,1210.93 993.649,1210.93 994.235,1210.93 994.822,1210.93 995.408,1210.93 995.994,1210.93 996.581,1210.93 997.167,1210.93 997.754,1210.93 998.34,1210.93 998.926,1210.93 999.513,1210.93 1000.1,1210.93 1000.69,1210.93 1001.27,1210.93 1001.86,1210.93 1002.44,1210.93 1003.03,1210.93 1003.62,1210.93 1004.2,1210.93 1004.79,1210.93 1005.38,1210.93 1005.96,1210.93 1006.55,1210.93 1007.14,1210.93 1007.72,1210.93 1008.31,1210.93 1008.9,1210.93 1009.48,1210.93 1010.07,1210.93 1010.65,1210.93 1011.24,1210.93 1011.83,1210.93 1012.41,1210.93 1013,1210.93 1013.59,1210.93 1014.17,1210.93 1014.76,1210.93 1015.35,1210.93 1015.93,1210.93 1016.52,1210.93 1017.11,1210.93 1017.69,1210.93 1018.28,1210.93 1018.86,1210.93 1019.45,1210.93 1020.04,1210.93 1020.62,1210.93 1021.21,1210.93 1021.8,1210.93 1022.38,1210.93 1022.97,1210.93 1023.56,1210.93 1024.14,1210.93 1024.73,1210.93 1025.32,1210.93 1025.9,1210.93 1026.49,1210.93 1027.07,1210.93 1027.66,1210.93 1028.25,1210.93 1028.83,1210.93 1029.42,1210.93 1030.01,1210.93 1030.59,1210.93 1031.18,1210.93 1031.77,1210.93 1032.35,1210.93 1032.94,1210.93 1033.52,1210.93 1034.11,1210.93 1034.7,1210.93 1035.28,1210.93 1035.87,1210.93 1036.46,1210.93 1037.04,1210.93 1037.63,1210.93 1038.22,1210.93 1038.8,1210.93 1039.39,1210.93 1039.98,1210.93 1040.56,1210.93 1041.15,1210.93 1041.73,1210.93 1042.32,1210.93 1042.91,1210.93 1043.49,1210.93 1044.08,1210.93 1044.67,1210.93 1045.25,1210.93 1045.84,1210.93 1046.43,1210.93 1047.01,1210.93 1047.6,1210.93 1048.19,1210.93 1048.77,1210.93 1049.36,1210.93 1049.94,1210.93 1050.53,1210.93 1051.12,1210.93 1051.7,1210.93 1052.29,1210.93 1052.88,1210.93 1053.46,1210.93 1054.05,1210.93 1054.64,1210.93 1055.22,1210.93 1055.81,1210.93 1056.39,1210.93 1056.98,1210.93 1057.57,1210.93 1058.15,1210.93 1058.74,1210.93 1059.33,1210.93 1059.91,1210.93 1060.5,1210.93 1061.09,1210.93 1061.67,1210.93 1062.26,1210.93 1062.85,1210.93 1063.43,1210.93 1064.02,1210.93 1064.6,1210.93 1065.19,1210.93 1065.78,1210.93 1066.36,1210.93 1066.95,1210.93 1067.54,1210.93 1068.12,1210.93 1068.71,1210.93 1069.3,1210.93 1069.88,1210.93 1070.47,1210.93 1071.06,1210.93 1071.64,1210.93 1072.23,1210.93 1072.81,1210.93 1073.4,1210.93 1073.99,1210.93 1074.57,1210.93 1075.16,1210.93 1075.75,1210.93 1076.33,1210.93 1076.92,1210.93 1077.51,1210.93 1078.09,1210.93 1078.68,1210.93 1079.26,1210.93 1079.85,1210.93 1080.44,1210.93 1081.02,1210.93 1081.61,1210.93 1082.2,1210.93 1082.78,1210.93 1083.37,1210.93 1083.96,1210.93 1084.54,1210.93 1085.13,1210.93 1085.72,1210.93 1086.3,1210.93 1086.89,1210.93 1087.47,1210.93 1088.06,1210.93 1088.65,1210.93 1089.23,1210.93 1089.82,1210.93 1090.41,1210.93 1090.99,1210.93 1091.58,1210.93 1092.17,1210.93 1092.75,1210.93 1093.34,1210.93 1093.93,1210.93 1094.51,1210.93 1095.1,1210.93 1095.68,1210.93 1096.27,1210.93 1096.86,1210.93 1097.44,1210.93 1098.03,1210.93 1098.62,1210.93 1099.2,1210.93 1099.79,1210.93 1100.38,1210.93 1100.96,1210.93 1101.55,1210.93 1102.14,1210.93 1102.72,1210.93 1103.31,1210.93 1103.89,1210.93 1104.48,1210.93 1105.07,1210.93 1105.65,1210.93 1106.24,1210.93 1106.83,1210.93 1107.41,1210.93 1108,1210.93 1108.59,1210.93 1109.17,1210.93 1109.76,1210.93 1110.34,1210.93 1110.93,1210.93 1111.52,1210.93 1112.1,1210.93 1112.69,1210.93 1113.28,1210.93 1113.86,1210.93 1114.45,1210.93 1115.04,1210.93 1115.62,1210.93 1116.21,1210.93 1116.8,1210.93 1117.38,1210.93 1117.97,1210.93 1118.55,1210.93 1119.14,1210.93 1119.73,1210.93 1120.31,1210.93 1120.9,1210.93 1121.49,1210.93 1122.07,1210.93 1122.66,1210.93 1123.25,1210.93 1123.83,1210.93 1124.42,1210.93 1125.01,1210.93 1125.59,1210.93 1126.18,1210.93 1126.76,1210.93 1127.35,1210.93 1127.94,1210.93 1128.52,1210.93 1129.11,1210.93 1129.7,1210.93 1130.28,1210.93 1130.87,1210.93 1131.46,1210.93 1132.04,1210.93 1132.63,1210.93 1133.21,1210.93 1133.8,1210.93 1134.39,1210.93 1134.97,1210.93 1135.56,1210.93 1136.15,1210.93 1136.73,1210.93 1137.32,1210.93 1137.91,1210.93 1138.49,1210.93 1139.08,1210.93 1139.67,1210.93 1140.25,1210.93 1140.84,1210.93 1141.42,1210.93 1142.01,1210.93 1142.6,1210.93 1143.18,1210.93 1143.77,1210.93 1144.36,1210.93 1144.94,1210.93 1145.53,1210.93 1146.12,1210.93 1146.7,1210.93 1147.29,1210.93 1147.88,1210.93 1148.46,1210.93 1149.05,1210.93 1149.63,1210.93 1150.22,1210.93 1150.81,1210.93 1151.39,1210.93 1151.98,1210.93 1152.57,1210.93 1153.15,1210.93 1153.74,1210.93 1154.33,1210.93 1154.91,1210.93 1155.5,1210.93 1156.09,1210.93 1156.67,1210.93 1157.26,1210.93 1157.84,1210.93 1158.43,1210.93 1159.02,1210.93 1159.6,1210.93 1160.19,1210.93 1160.78,1210.93 1161.36,1210.93 1161.95,1210.93 1162.54,1210.93 1163.12,1210.93 1163.71,1210.93 1164.29,1210.93 1164.88,1210.93 1165.47,1210.93 1166.05,1210.93 1166.64,1210.93 1167.23,1210.93 1167.81,1210.93 1168.4,1210.93 1168.99,1210.93 1169.57,1210.93 1170.16,1210.93 1170.75,1210.93 1171.33,1210.93 1171.92,1210.93 1172.5,1210.93 1173.09,1210.93 1173.68,1210.93 1174.26,1210.93 1174.85,1210.93 1175.44,1210.93 1176.02,1210.93 1176.61,1210.93 1177.2,1210.93 1177.78,1210.93 1178.37,1210.93 1178.96,1210.93 1179.54,1210.93 1180.13,1210.93 1180.71,1210.93 1181.3,1210.93 1181.89,1210.93 1182.47,1210.93 1183.06,1210.93 1183.65,1210.93 1184.23,1210.93 1184.82,1210.93 1185.41,1210.93 1185.99,1210.93 1186.58,1210.93 1187.16,1210.93 1187.75,1210.93 1188.34,1210.93 1188.92,1210.93 1189.51,1210.93 1190.1,1210.93 1190.68,1210.93 1191.27,1210.93 1191.86,1210.93 1192.44,1210.93 1193.03,1210.93 1193.62,1210.93 1194.2,1210.93 1194.79,1210.93 1195.37,1210.93 1195.96,1210.93 1196.55,1210.93 1197.13,1210.93 1197.72,1210.93 1198.31,1210.93 1198.89,1210.93 1199.48,1210.93 1200.07,1210.93 1200.65,1210.93 1201.24,1210.93 1201.83,1210.93 1202.41,1210.93 1203,1210.93 1203.58,1210.93 1204.17,1210.93 1204.76,1210.93 1205.34,1210.93 1205.93,1210.93 1206.52,1210.93 1207.1,1210.93 1207.69,1210.93 1208.28,1210.93 1208.86,1210.93 1209.45,1210.93 1210.03,1210.93 1210.62,1210.93 1211.21,1210.93 1211.79,1210.93 1212.38,1210.93 1212.97,1210.93 1213.55,1210.93 1214.14,1210.93 1214.73,1210.93 1215.31,1210.93 1215.9,1210.93 1216.49,1210.93 1217.07,1210.93 1217.66,1210.93 1218.24,1210.93 1218.83,1210.93 1219.42,1210.93 1220,1210.93 1220.59,1210.93 1221.18,1210.93 1221.76,1210.93 1222.35,1210.93 1222.94,1210.93 1223.52,1210.93 1224.11,1210.93 1224.7,1210.93 1225.28,1210.93 1225.87,1210.93 1226.45,1210.93 1227.04,1210.93 1227.63,1210.93 1228.21,1210.93 1228.8,1210.93 1229.39,1210.93 1229.97,1210.93 1230.56,1210.93 1231.15,1210.93 1231.73,1210.93 1232.32,1210.93 1232.91,1210.93 1233.49,1210.93 1234.08,1210.93 1234.66,1210.93 1235.25,1210.93 1235.84,1210.93 1236.42,1210.93 1237.01,1210.93 1237.6,1210.93 1238.18,1210.93 1238.77,1210.93 1239.36,1210.93 1239.94,1210.93 1240.53,1210.93 1241.11,1210.93 1241.7,1210.93 1242.29,1210.93 1242.87,1210.93 1243.46,1210.93 1244.05,1210.93 1244.63,1210.93 1245.22,1210.93 1245.81,1210.93 1246.39,1210.93 1246.98,1210.93 1247.57,1210.93 1248.15,1210.93 1248.74,1210.93 1249.32,1210.93 1249.91,1210.93 1250.5,1210.93 1251.08,1210.93 1251.67,1210.93 1252.26,1210.93 1252.84,1210.93 1253.43,1210.93 1254.02,1210.93 1254.6,1210.93 1255.19,1210.93 1255.78,1210.93 1256.36,1210.93 1256.95,1210.93 1257.53,1210.93 1258.12,1210.93 1258.71,1210.93 1259.29,1210.93 1259.88,1210.93 1260.47,1210.93 1261.05,1210.93 1261.64,1210.93 1262.23,1210.93 1262.81,1210.93 1263.4,1210.93 1263.98,1210.93 1264.57,1210.93 1265.16,1210.93 1265.74,1210.93 1266.33,1210.93 1266.92,1210.93 1267.5,1210.93 1268.09,1210.93 1268.68,1210.93 1269.26,1210.93 1269.85,1210.93 1270.44,1210.93 1271.02,1210.93 1271.61,1210.93 1272.19,1210.93 1272.78,1210.93 1273.37,1210.93 1273.95,1210.93 1274.54,1210.93 1275.13,1210.93 1275.71,1210.93 1276.3,1210.93 1276.89,1210.93 1277.47,1210.93 1278.06,1210.93 1278.65,1210.93 1279.23,1210.93 1279.82,1210.93 1280.4,1210.93 1280.99,1210.93 1281.58,1210.93 1282.16,1210.93 1282.75,1210.93 1283.34,1210.93 1283.92,1210.93 1284.51,1210.93 1285.1,1210.93 1285.68,1210.93 1286.27,1210.93 1286.86,1210.93 1287.44,1210.93 1288.03,1210.93 1288.61,1210.93 1289.2,1210.93 1289.79,1210.93 1290.37,1210.93 1290.96,1210.93 1291.55,1210.93 1292.13,1210.93 1292.72,1210.93 1293.31,1210.93 1293.89,1210.93 1294.48,1210.93 1295.06,1210.93 1295.65,1210.93 1296.24,1210.93 1296.82,1210.93 1297.41,1210.93 1298,1210.93 1298.58,1210.93 1299.17,1210.93 1299.76,1210.93 1300.34,1210.93 1300.93,1210.93 1301.52,1210.93 1302.1,1210.93 1302.69,1210.93 1303.27,1210.93 1303.86,1210.93 1304.45,1210.93 1305.03,1210.93 1305.62,1210.93 1306.21,1210.93 1306.79,1210.93 1307.38,1210.93 1307.97,1210.93 1308.55,1210.93 1309.14,1210.93 1309.73,1210.93 1310.31,1210.93 1310.9,1210.93 1311.48,1210.93 1312.07,1210.93 1312.66,1210.93 1313.24,1210.93 1313.83,1210.93 1314.42,1210.93 1315,1210.93 1315.59,1210.93 1316.18,1210.93 1316.76,1210.93 1317.35,1210.93 1317.93,1210.93 1318.52,1210.93 1319.11,1210.93 1319.69,1210.93 1320.28,1210.93 1320.87,1210.93 1321.45,1210.93 1322.04,1210.93 1322.63,1210.93 1323.21,1210.93 1323.8,1210.93 1324.39,1210.93 1324.97,1210.93 1325.56,1210.93 1326.14,1210.93 1326.73,1210.93 1327.32,1210.93 1327.9,1210.93 1328.49,1210.93 1329.08,1210.93 1329.66,1210.93 1330.25,1210.93 1330.84,1210.93 1331.42,1210.93 1332.01,1210.93 1332.6,1210.93 1333.18,1210.93 1333.77,1210.93 1334.35,1210.93 1334.94,1210.93 1335.53,1210.93 1336.11,1210.93 1336.7,1210.93 1337.29,1210.93 1337.87,1210.93 1338.46,1210.93 1339.05,1210.93 1339.63,1210.93 1340.22,1210.93 1340.8,1210.93 1341.39,1210.93 1341.98,1210.93 1342.56,1210.93 1343.15,1210.93 1343.74,1210.93 1344.32,1210.93 1344.91,1210.93 1345.5,1210.93 1346.08,1210.93 1346.67,1210.93 1347.26,1210.93 1347.84,1210.93 1348.43,1210.93 1349.01,1210.93 1349.6,1210.93 1350.19,1210.93 1350.77,1210.93 1351.36,1210.93 1351.95,1210.93 1352.53,1210.93 1353.12,1210.93 1353.71,1210.93 1354.29,1210.93 1354.88,1210.93 1355.47,1210.93 1356.05,1210.93 1356.64,1210.93 1357.22,1210.93 1357.81,1210.93 1358.4,1210.93 1358.98,1210.93 1359.57,1210.93 1360.16,1210.93 1360.74,1210.93 1361.33,1210.93 1361.92,1210.93 1362.5,1210.93 1363.09,1210.93 1363.68,1210.93 1364.26,1210.93 1364.85,1210.93 1365.43,1210.93 1366.02,1210.93 1366.61,1210.93 1367.19,1210.93 1367.78,1210.93 1368.37,1210.93 1368.95,1210.93 1369.54,1210.93 1370.13,1210.93 1370.71,1210.93 1371.3,1210.93 1371.88,1210.93 1372.47,1210.93 1373.06,1210.93 1373.64,1210.93 1374.23,1210.93 1374.82,1210.93 1375.4,1210.93 1375.99,1210.93 1376.58,1210.93 1377.16,1210.93 1377.75,1210.93 1378.34,1210.93 1378.92,1210.93 1379.51,1210.93 1380.09,1210.93 1380.68,1210.93 1381.27,1210.93 1381.85,1210.93 1382.44,1210.93 1383.03,1210.93 1383.61,1210.93 1384.2,1210.93 1384.79,1210.93 1385.37,1210.93 1385.96,1210.93 1386.55,1210.93 1387.13,1210.93 1387.72,1210.93 1388.3,1210.93 1388.89,1210.93 1389.48,1210.93 1390.06,1210.93 1390.65,1210.93 1391.24,1210.93 1391.82,1210.93 1392.41,1210.93 1393,1210.93 1393.58,1210.93 1394.17,1210.93 1394.75,1210.93 1395.34,1210.93 1395.93,1210.93 1396.51,1210.93 1397.1,1210.93 1397.69,1210.93 1398.27,1210.93 1398.86,1210.93 1399.45,1210.93 1400.03,1210.93 1400.62,1210.93 1401.21,1210.93 1401.79,1210.93 1402.38,1210.93 1402.96,1210.93 1403.55,1210.93 1404.14,1210.93 1404.72,1210.93 1405.31,1210.93 1405.9,1210.93 1406.48,1210.93 1407.07,1210.93 1407.66,1210.93 1408.24,1210.93 1408.83,1210.93 1409.42,1210.93 1410,1210.93 1410.59,1210.93 1411.17,1210.93 1411.76,1210.93 1412.35,1210.93 1412.93,1210.93 1413.52,1210.93 1414.11,1210.93 1414.69,1210.93 1415.28,1210.93 1415.87,1210.93 1416.45,1210.93 1417.04,1210.93 1417.63,1210.93 1418.21,1210.93 1418.8,1210.93 1419.38,1210.93 1419.97,1210.93 1420.56,1210.93 1421.14,1210.93 1421.73,1210.93 1422.32,1210.93 1422.9,1210.93 1423.49,1210.93 1424.08,1210.93 1424.66,1210.93 1425.25,1210.93 1425.83,1210.93 1426.42,1210.93 1427.01,1210.93 1427.59,1210.93 1428.18,1210.93 1428.77,1210.93 1429.35,1210.93 1429.94,1210.93 1430.53,1210.93 1431.11,1210.93 1431.7,1210.93 1432.29,1210.93 1432.87,1210.93 1433.46,1210.93 1434.04,1210.93 1434.63,1210.93 1435.22,1210.93 1435.8,1210.93 1436.39,1210.93 1436.98,1210.93 1437.56,1210.93 1438.15,1210.93 1438.74,1210.93 1439.32,1210.93 1439.91,1210.93 1440.5,1210.93 1441.08,1210.93 1441.67,1210.93 1442.25,1210.93 1442.84,1210.93 1443.43,1210.93 1444.01,1210.93 1444.6,1210.93 1445.19,1210.93 1445.77,1210.93 1446.36,1210.93 1446.95,1210.93 1447.53,1210.93 1448.12,1210.93 1448.7,1210.93 1449.29,1210.93 1449.88,1210.93 1450.46,1210.93 1451.05,1210.93 1451.64,1210.93 1452.22,1210.93 1452.81,1210.93 1453.4,1210.93 1453.98,1210.93 1454.57,1210.93 1455.16,1210.93 1455.74,1210.93 1456.33,1210.93 1456.91,1210.93 1457.5,1210.93 1458.09,1210.93 1458.67,1210.93 1459.26,1210.93 1459.85,1210.93 1460.43,1210.93 1461.02,1210.93 1461.61,1210.93 1462.19,1210.93 1462.78,1210.93 1463.37,1210.93 1463.95,1210.93 1464.54,1210.93 1465.12,1210.93 1465.71,1210.93 1466.3,1210.93 1466.88,1210.93 1467.47,1210.93 1468.06,1210.93 1468.64,1210.93 1469.23,1210.93 1469.82,1210.93 1470.4,1210.93 1470.99,1210.93 1471.57,1210.93 1472.16,1210.93 1472.75,1210.93 1473.33,1210.93 1473.92,1210.93 1474.51,1210.93 1475.09,1210.93 1475.68,1210.93 1476.27,1210.93 1476.85,1210.93 1477.44,1210.93 1478.03,1210.93 1478.61,1210.93 1479.2,1210.93 1479.78,1210.93 1480.37,1210.93 1480.96,1210.93 1481.54,1210.93 1482.13,1210.93 1482.72,1210.93 1483.3,1210.93 1483.89,1210.93 1484.48,1210.93 1485.06,1210.93 1485.65,1210.93 1486.24,1210.93 1486.82,1210.93 1487.41,1210.93 1487.99,1210.93 1488.58,1210.93 1489.17,1210.93 1489.75,1210.93 1490.34,1210.93 1490.93,1210.93 1491.51,1210.93 1492.1,1210.93 1492.69,1210.93 1493.27,1210.93 1493.86,1210.93 1494.45,1210.93 1495.03,1210.93 1495.62,1210.93 1496.2,1210.93 1496.79,1210.93 1497.38,1210.93 1497.96,1210.93 1498.55,1210.93 1499.14,1210.93 1499.72,1210.93 1500.31,1210.93 1500.9,1210.93 1501.48,1210.93 1502.07,1210.93 1502.65,1210.93 1503.24,1210.93 1503.83,1210.93 1504.41,1210.93 1505,1210.93 1505.59,1210.93 1506.17,1210.93 1506.76,1210.93 1507.35,1210.93 1507.93,1210.93 1508.52,1210.93 1509.11,1210.93 1509.69,1210.93 1510.28,1210.93 1510.86,1210.93 1511.45,1210.93 1512.04,1210.93 1512.62,1210.93 1513.21,1210.93 1513.8,1210.93 1514.38,1210.93 1514.97,1210.93 1515.56,1210.93 1516.14,1210.93 1516.73,1210.93 1517.32,1210.93 1517.9,1210.93 1518.49,1210.93 1519.07,1210.93 1519.66,1210.93 1520.25,1210.93 1520.83,1210.93 1521.42,1210.93 1522.01,1210.93 1522.59,1210.93 1523.18,1210.93 1523.77,1210.93 1524.35,1210.93 1524.94,1210.93 1525.52,1210.93 1526.11,1210.93 1526.7,1210.93 1527.28,1210.93 1527.87,1210.93 1528.46,1210.93 1529.04,1210.93 1529.63,1210.93 1530.22,1210.93 1530.8,1210.93 1531.39,1210.93 1531.98,1210.93 1532.56,1210.93 1533.15,1210.93 1533.73,1210.93 1534.32,1210.93 1534.91,1210.93 1535.49,1210.93 1536.08,1210.93 1536.67,1210.93 1537.25,1210.93 1537.84,1210.93 1538.43,1210.93 1539.01,1210.93 1539.6,1210.93 1540.19,1210.93 1540.77,1210.93 1541.36,1210.93 1541.94,1210.93 1542.53,1210.93 1543.12,1210.93 1543.7,1210.93 1544.29,1210.93 1544.88,1210.93 1545.46,1210.93 1546.05,1210.93 1546.64,1210.93 1547.22,1210.93 1547.81,1210.93 1548.4,1210.93 1548.98,1210.93 1549.57,1210.93 1550.15,1210.93 1550.74,1210.93 1551.33,1210.93 1551.91,1210.93 1552.5,1210.93 1553.09,1210.93 1553.67,1210.93 1554.26,1210.93 1554.85,1210.93 1555.43,1210.93 1556.02,1210.93 1556.6,1210.93 1557.19,1210.93 1557.78,1210.93 1558.36,1210.93 1558.95,1210.93 1559.54,1210.93 1560.12,1210.93 1560.71,1210.93 1561.3,1210.93 1561.88,1210.93 1562.47,1210.93 1563.06,1210.93 1563.64,1210.93 1564.23,1210.93 1564.81,1210.93 1565.4,1210.93 1565.99,1210.93 1566.57,1210.93 1567.16,1210.93 1567.75,1210.93 1568.33,1210.93 1568.92,1210.93 1569.51,1210.93 1570.09,1210.93 1570.68,1210.93 1571.27,1210.93 1571.85,1210.93 1572.44,1210.93 1573.02,1210.93 1573.61,1210.93 1574.2,1210.93 1574.78,1210.93 1575.37,1210.93 1575.96,1210.93 1576.54,1210.93 1577.13,1210.93 1577.72,1210.93 1578.3,1210.93 1578.89,1210.93 1579.47,1210.93 1580.06,1210.93 1580.65,1210.93 1581.23,1210.93 1581.82,1210.93 1582.41,1210.93 1582.99,1210.93 1583.58,1210.93 1584.17,1210.93 1584.75,1210.93 1585.34,1210.93 1585.93,1210.93 1586.51,1210.93 1587.1,1210.93 1587.68,1210.93 1588.27,1210.93 1588.86,1210.93 1589.44,1210.93 1590.03,1210.93 1590.62,1210.93 1591.2,1210.93 1591.79,1210.93 1592.38,1210.93 1592.96,1210.93 1593.55,1210.93 1594.14,1210.93 1594.72,1210.93 1595.31,1210.93 1595.89,1210.93 1596.48,1210.93 1597.07,1210.93 1597.65,1210.93 1598.24,1210.93 1598.83,1210.93 1599.41,1210.93 1600,1210.93 1600.59,1210.93 1601.17,1210.93 1601.76,1210.93 1602.34,1210.93 1602.93,1210.93 1603.52,1210.93 1604.1,1210.93 1604.69,1210.93 1605.28,1210.93 1605.86,1210.93 1606.45,1210.93 1607.04,1210.93 1607.62,1210.93 1608.21,1210.93 1608.8,1210.93 1609.38,1210.93 1609.97,1210.93 1610.55,1210.93 1611.14,1210.93 1611.73,1210.93 1612.31,1210.93 1612.9,1210.93 1613.49,1210.93 1614.07,1210.93 1614.66,1210.93 1615.25,1210.93 1615.83,1210.93 1616.42,1210.93 1617.01,1210.93 1617.59,1210.93 1618.18,1210.93 1618.76,1210.93 1619.35,1210.93 1619.94,1210.93 1620.52,1210.93 1621.11,1210.93 1621.7,1210.93 1622.28,1210.93 1622.87,1210.93 1623.46,1210.93 1624.04,1210.93 1624.63,1210.93 1625.22,1210.93 1625.8,1210.93 1626.39,1210.93 1626.97,1210.93 1627.56,1210.93 1628.15,1210.93 1628.73,1210.93 1629.32,1210.93 1629.91,1210.93 1630.49,1210.93 1631.08,1210.93 1631.67,1210.93 1632.25,1210.93 1632.84,1210.93 1633.42,1210.93 1634.01,1210.93 1634.6,1210.93 1635.18,1210.93 1635.77,1210.93 1636.36,1210.93 1636.94,1210.93 1637.53,1210.93 1638.12,1210.93 1638.7,1210.93 1639.29,1210.93 1639.88,1210.93 1640.46,1210.93 1641.05,1210.93 1641.63,1210.93 1642.22,1210.93 1642.81,1210.93 1643.39,1210.93 1643.98,1210.93 1644.57,1210.93 1645.15,1210.93 1645.74,1210.93 1646.33,1210.93 1646.91,1210.93 1647.5,1210.93 1648.09,1210.93 1648.67,1210.93 1649.26,1210.93 1649.84,1210.93 1650.43,1210.93 1651.02,1210.93 1651.6,1210.93 1652.19,1210.93 1652.78,1210.93 1653.36,1210.93 1653.95,1210.93 1654.54,1210.93 1655.12,1210.93 1655.71,1210.93 1656.29,1210.93 1656.88,1210.93 1657.47,1210.93 1658.05,1210.93 1658.64,1210.93 1659.23,1210.93 1659.81,1210.93 1660.4,1210.93 1660.99,1210.93 1661.57,1210.93 1662.16,1210.93 1662.75,1210.93 1663.33,1210.93 1663.92,1210.93 1664.5,1210.93 1665.09,1210.93 1665.68,1210.93 1666.26,1210.93 1666.85,1210.93 1667.44,1210.93 1668.02,1210.93 1668.61,1210.93 1669.2,1210.93 1669.78,1210.93 1670.37,1210.93 1670.96,1210.93 1671.54,1210.93 1672.13,1210.93 1672.71,1210.93 1673.3,1210.93 1673.89,1210.93 1674.47,1210.93 1675.06,1210.93 1675.65,1210.93 1676.23,1210.93 1676.82,1210.93 1677.41,1210.93 1677.99,1210.93 1678.58,1210.93 1679.17,1210.93 1679.75,1210.93 1680.34,1210.93 1680.92,1210.93 1681.51,1210.93 1682.1,1210.93 1682.68,1210.93 1683.27,1210.93 1683.86,1210.93 1684.44,1210.93 1685.03,1210.93 1685.62,1210.93 1686.2,1210.93 1686.79,1210.93 1687.37,1210.93 1687.96,1210.93 1688.55,1210.93 1689.13,1210.93 1689.72,1210.93 1690.31,1210.93 1690.89,1210.93 1691.48,1210.93 1692.07,1210.93 1692.65,1210.93 1693.24,1210.93 1693.83,1210.93 1694.41,1210.93 1695,1210.93 1695.58,1210.93 1696.17,1210.93 1696.76,1210.93 1697.34,1210.93 1697.93,1210.93 1698.52,1210.93 1699.1,1210.93 1699.69,1210.93 1700.28,1210.93 1700.86,1210.93 1701.45,1210.93 1702.04,1210.93 1702.62,1210.93 1703.21,1210.93 1703.79,1210.93 1704.38,1210.93 1704.97,1210.93 1705.55,1210.93 1706.14,1210.93 1706.73,1210.93 1707.31,1210.93 1707.9,1210.93 1708.49,1210.93 1709.07,1210.93 1709.66,1210.93 1710.24,1210.93 1710.83,1210.93 1711.42,1210.93 1712,1210.93 1712.59,1210.93 1713.18,1210.93 1713.76,1210.93 1714.35,1210.93 1714.94,1210.93 1715.52,1210.93 1716.11,1210.93 1716.7,1210.93 1717.28,1210.93 1717.87,1210.93 1718.45,1210.93 1719.04,1210.93 1719.63,1210.93 1720.21,1210.93 1720.8,1210.93 1721.39,1210.93 1721.97,1210.93 1722.56,1210.93 1723.15,1210.93 1723.73,1210.93 1724.32,1210.93 1724.91,1210.93 1725.49,1210.93 1726.08,1210.93 1726.66,1210.93 1727.25,1210.93 1727.84,1210.93 1728.42,1210.93 1729.01,1210.93 1729.6,1210.93 1730.18,1210.93 1730.77,1210.93 1731.36,1210.93 1731.94,1210.93 1732.53,1210.93 1733.11,1210.93 1733.7,1210.93 1734.29,1210.93 1734.87,1210.93 1735.46,1210.93 1736.05,1210.93 1736.63,1210.93 1737.22,1210.93 1737.81,1210.93 1738.39,1210.93 1738.98,1210.93 1739.57,1210.93 1740.15,1210.93 1740.74,1210.93 1741.32,1210.93 1741.91,1210.93 1742.5,1210.93 1743.08,1210.93 1743.67,1210.93 1744.26,1210.93 1744.84,1210.93 1745.43,1210.93 1746.02,1210.93 1746.6,1210.93 1747.19,1210.93 1747.78,1210.93 1748.36,1210.93 1748.95,1210.93 1749.53,1210.93 1750.12,1210.93 1750.71,1210.93 1751.29,1210.93 1751.88,1210.93 1752.47,1210.93 1753.05,1210.93 1753.64,1210.93 1754.23,1210.93 1754.81,1210.93 1755.4,1210.93 1755.99,1210.93 1756.57,1210.93 1757.16,1210.93 1757.74,1210.93 1758.33,1210.93 1758.92,1210.93 1759.5,1210.93 1760.09,1210.93 1760.68,1210.93 1761.26,1210.93 1761.85,1210.93 1762.44,1210.93 1763.02,1210.93 1763.61,1210.93 1764.19,1210.93 1764.78,1210.93 1765.37,1210.93 1765.95,1210.93 1766.54,1210.93 1767.13,1210.93 1767.71,1210.93 1768.3,1210.93 1768.89,1210.93 1769.47,1210.93 1770.06,1210.93 1770.65,1210.93 1771.23,1210.93 1771.82,1210.93 1772.4,1210.93 1772.99,1210.93 1773.58,1210.93 1774.16,1210.93 1774.75,1210.93 1775.34,1210.93 1775.92,1210.93 1776.51,1210.93 1777.1,1210.93 1777.68,1210.93 1778.27,1210.93 1778.86,1210.93 1779.44,1210.93 1780.03,1210.93 1780.61,1210.93 1781.2,1210.93 1781.79,1210.93 1782.37,1210.93 1782.96,1210.93 1783.55,1210.93 1784.13,1210.93 1784.72,1210.93 1785.31,1210.93 1785.89,1210.93 1786.48,1210.93 1787.06,1210.93 1787.65,1210.93 1788.24,1210.93 1788.82,1210.93 1789.41,1210.93 1790,1210.93 1790.58,1210.93 1791.17,1210.93 1791.76,1210.93 1792.34,1210.93 1792.93,1210.93 1793.52,1210.93 1794.1,1210.93 1794.69,1210.93 1795.27,1210.93 1795.86,1210.93 1796.45,1210.93 1797.03,1210.93 1797.62,1210.93 1798.21,1210.93 1798.79,1210.93 1799.38,1210.93 1799.97,1210.93 1800.55,1210.93 1801.14,1210.93 1801.73,1210.93 1802.31,1210.93 1802.9,1210.93 1803.48,1210.93 1804.07,1210.93 1804.66,1210.93 1805.24,1210.93 1805.83,1210.93 1806.42,1210.93 1807,1210.93 1807.59,1210.93 1808.18,1210.93 1808.76,1210.93 1809.35,1210.93 1809.94,1210.93 1810.52,1210.93 1811.11,1210.93 1811.69,1210.93 1812.28,1210.93 1812.87,1210.93 1813.45,1210.93 1814.04,1210.93 1814.63,1210.93 1815.21,1210.93 1815.8,1210.93 1816.39,1210.93 1816.97,1210.93 1817.56,1210.93 1818.14,1210.93 1818.73,1210.93 1819.32,1210.93 1819.9,1210.93 1820.49,1210.93 1821.08,1210.93 1821.66,1210.93 1822.25,1210.93 1822.84,1210.93 1823.42,1210.93 1824.01,1210.93 1824.6,1210.93 1825.18,1210.93 1825.77,1210.93 1826.35,1210.93 1826.94,1210.93 1827.53,1210.93 1828.11,1210.93 1828.7,1210.93 1829.29,1210.93 1829.87,1210.93 1830.46,1210.93 1831.05,1210.93 1831.63,1210.93 1832.22,1210.93 1832.81,1210.93 1833.39,1210.93 1833.98,1210.93 1834.56,1210.93 1835.15,1210.93 1835.74,1210.93 1836.32,1210.93 1836.91,1210.93 1837.5,1210.93 1838.08,1210.93 1838.67,1210.93 1839.26,1210.93 1839.84,1210.93 1840.43,1210.93 1841.01,1210.93 1841.6,1210.93 1842.19,1210.93 1842.77,1210.93 1843.36,1210.93 1843.95,1210.93 1844.53,1210.93 1845.12,1210.93 1845.71,1210.93 1846.29,1210.93 1846.88,1210.93 1847.47,1210.93 1848.05,1210.93 1848.64,1210.93 1849.22,1210.93 1849.81,1210.93 1850.4,1210.93 1850.98,1210.93 1851.57,1210.93 1852.16,1210.93 1852.74,1210.93 1853.33,1210.93 1853.92,1210.93 1854.5,1210.93 1855.09,1210.93 1855.68,1210.93 1856.26,1210.93 1856.85,1210.93 1857.43,1210.93 1858.02,1210.93 1858.61,1210.93 1859.19,1210.93 1859.78,1210.93 1860.37,1210.93 1860.95,1210.93 1861.54,1210.93 1862.13,1210.93 1862.71,1210.93 1863.3,1210.93 1863.88,1210.93 1864.47,1210.93 1865.06,1210.93 1865.64,1210.93 1866.23,1210.93 1866.82,1210.93 1867.4,1210.93 1867.99,1210.93 1868.58,1210.93 1869.16,1210.93 1869.75,1210.93 1870.34,1210.93 1870.92,1210.93 1871.51,1210.93 1872.09,1210.93 1872.68,1210.93 1873.27,1210.93 1873.85,1210.93 1874.44,1210.93 1875.03,1210.93 1875.61,1210.93 1876.2,1210.93 1876.79,1210.93 1877.37,1210.93 1877.96,1210.93 1878.55,1210.93 1879.13,1210.93 1879.72,1210.93 1880.3,1210.93 1880.89,1210.93 1881.48,1210.93 1882.06,1210.93 1882.65,1210.93 1883.24,1210.93 1883.82,1210.93 1884.41,1210.93 1885,1210.93 1885.58,1210.93 1886.17,1210.93 1886.76,1210.93 1887.34,1210.93 1887.93,1210.93 1888.51,1210.93 1889.1,1210.93 1889.69,1210.93 1890.27,1210.93 1890.86,1210.93 1891.45,1210.93 1892.03,1210.93 1892.62,1210.93 1893.21,1210.93 1893.79,1210.93 1894.38,1210.93 1894.96,1210.93 1895.55,1210.93 1896.14,1210.93 1896.72,1210.93 1897.31,1210.93 1897.9,1210.93 1898.48,1210.93 1899.07,1210.93 1899.66,1210.93 1900.24,1210.93 1900.83,1210.93 1901.42,1210.93 1902,1210.93 1902.59,1210.93 1903.17,1210.93 1903.76,1210.93 1904.35,1210.93 1904.93,1210.93 1905.52,1210.93 1906.11,1210.93 1906.69,1210.93 1907.28,1210.93 1907.87,1210.93 1908.45,1210.93 1909.04,1210.93 1909.63,1210.93 1910.21,1210.93 1910.8,1210.93 1911.38,1210.93 1911.97,1210.93 1912.56,1210.93 1913.14,1210.93 1913.73,1210.93 1914.32,1210.93 1914.9,1210.93 1915.49,1210.93 1916.08,1210.93 1916.66,1210.93 1917.25,1210.93 1917.83,1210.93 1918.42,1210.93 1919.01,1210.93 1919.59,1210.93 1920.18,1210.93 1920.77,1210.93 1921.35,1210.93 1921.94,1210.93 1922.53,1210.93 1923.11,1210.93 1923.7,1210.93 1924.29,1210.93 1924.87,1210.93 1925.46,1210.93 1926.04,1210.93 1926.63,1210.93 1927.22,1210.93 1927.8,1210.93 1928.39,1210.93 1928.98,1210.93 1929.56,1210.93 1930.15,1210.93 1930.74,1210.93 1931.32,1210.93 1931.91,1210.93 1932.5,1210.93 1933.08,1210.93 1933.67,1210.93 1934.25,1210.93 1934.84,1210.93 1935.43,1210.93 1936.01,1210.93 1936.6,1210.93 1937.19,1210.93 1937.77,1210.93 1938.36,1210.93 1938.95,1210.93 1939.53,1210.93 1940.12,1210.93 1940.71,1210.93 1941.29,1210.93 1941.88,1210.93 1942.46,1210.93 1943.05,1210.93 1943.64,1210.93 1944.22,1210.93 1944.81,1210.93 1945.4,1210.93 1945.98,1210.93 1946.57,1210.93 1947.16,1210.93 1947.74,1210.93 1948.33,1210.93 1948.91,1210.93 1949.5,1210.93 1950.09,1210.93 1950.67,1210.93 1951.26,1210.93 1951.85,1210.93 1952.43,1210.93 1953.02,1210.93 1953.61,1210.93 1954.19,1210.93 1954.78,1210.93 1955.37,1210.93 1955.95,1210.93 1956.54,1210.93 1957.12,1210.93 1957.71,1210.93 1958.3,1210.93 1958.88,1210.93 1959.47,1210.93 1960.06,1210.93 1960.64,1210.93 1961.23,1210.93 1961.82,1210.93 1962.4,1210.93 1962.99,1210.93 1963.58,1210.93 1964.16,1210.93 1964.75,1210.93 1965.33,1210.93 1965.92,1210.93 1966.51,1210.93 1967.09,1210.93 1967.68,1210.93 1968.27,1210.93 1968.85,1210.93 1969.44,1210.93 1970.03,1210.93 1970.61,1210.93 1971.2,1210.93 1971.78,1210.93 1972.37,1210.93 1972.96,1210.93 1973.54,1210.93 1974.13,1210.93 1974.72,1210.93 1975.3,1210.93 1975.89,1210.93 1976.48,1210.93 1977.06,1210.93 1977.65,1210.93 1978.24,1210.93 1978.82,1210.93 1979.41,1210.93 1979.99,1210.93 1980.58,1210.93 1981.17,1210.93 1981.75,1210.93 1982.34,1210.93 1982.93,1210.93 1983.51,1210.93 1984.1,1210.93 1984.69,1210.93 1985.27,1210.93 1985.86,1210.93 1986.45,1210.93 1987.03,1210.93 1987.62,1210.93 1988.2,1210.93 1988.79,1210.93 1989.38,1210.93 1989.96,1210.93 1990.55,1210.93 1991.14,1210.93 1991.72,1210.93 1992.31,1210.93 1992.9,1210.93 1993.48,1210.93 1994.07,1210.93 1994.65,1210.93 1995.24,1210.93 1995.83,1210.93 1996.41,1210.93 1997,1210.93 1997.59,1210.93 1998.17,1210.93 1998.76,1210.93 1999.35,1210.93 1999.93,1210.93 2000.52,1210.93 2001.11,1210.93 2001.69,1210.93 2002.28,1210.93 2002.86,1210.93 2003.45,1210.93 2004.04,1210.93 2004.62,1210.93 2005.21,1210.93 2005.8,1210.93 2006.38,1210.93 2006.97,1210.93 2007.56,1210.93 2008.14,1210.93 2008.73,1210.93 2009.32,1210.93 2009.9,1210.93 2010.49,1210.93 2011.07,1210.93 2011.66,1210.93 2012.25,1210.93 2012.83,1210.93 2013.42,1210.93 2014.01,1210.93 2014.59,1210.93 2015.18,1210.93 2015.77,1210.93 2016.35,1210.93 2016.94,1210.93 2017.53,1210.93 2018.11,1210.93 2018.7,1210.93 2019.28,1210.93 2019.87,1210.93 2020.46,1210.93 2021.04,1210.93 2021.63,1210.93 2022.22,1210.93 2022.8,1210.93 2023.39,1210.93 2023.98,1210.93 2024.56,1210.93 2025.15,1210.93 2025.73,1210.93 2026.32,1210.93 2026.91,1210.93 2027.49,1210.93 2028.08,1210.93 2028.67,1210.93 2029.25,1210.93 2029.84,1210.93 2030.43,1210.93 2031.01,1210.93 2031.6,1210.93 2032.19,1210.93 2032.77,1210.93 2033.36,1210.93 2033.94,1210.93 2034.53,1210.93 2035.12,1210.93 2035.7,1210.93 2036.29,1210.93 2036.88,1210.93 2037.46,1210.93 2038.05,1210.93 2038.64,1210.93 2039.22,1210.93 2039.81,1210.93 2040.4,1210.93 2040.98,1210.93 2041.57,1210.93 2042.15,1210.93 2042.74,1210.93 2043.33,1210.93 2043.91,1210.93 2044.5,1210.93 2045.09,1210.93 2045.67,1210.93 2046.26,1210.93 2046.85,1210.93 2047.43,1210.93 2048.02,1210.93 2048.6,1210.93 2049.19,1210.93 2049.78,1210.93 2050.36,1210.93 2050.95,1210.93 2051.54,1210.93 2052.12,1210.93 2052.71,1210.93 2053.3,1210.93 2053.88,1210.93 2054.47,1210.93 2055.06,1210.93 2055.64,1210.93 2056.23,1210.93 2056.81,1210.93 2057.4,1210.93 2057.99,1210.93 2058.57,1210.93 2059.16,1210.93 2059.75,1210.93 2060.33,1210.93 2060.92,1210.93 2061.51,1210.93 2062.09,1210.93 2062.68,1210.93 2063.27,1210.93 2063.85,1210.93 2064.44,1210.93 2065.02,1210.93 2065.61,1210.93 2066.2,1210.93 2066.78,1210.93 2067.37,1210.93 2067.96,1210.93 2068.54,1210.93 2069.13,1210.93 2069.72,1210.93 2070.3,1210.93 2070.89,1210.93 2071.48,1210.93 2072.06,1210.93 2072.65,1210.93 2073.23,1210.93 2073.82,1210.93 2074.41,1210.93 2074.99,1210.93 2075.58,1210.93 2076.17,1210.93 2076.75,1210.93 2077.34,1210.93 2077.93,1210.93 2078.51,1210.93 2079.1,1210.93 2079.68,1210.93 2080.27,1210.93 2080.86,1210.93 2081.44,1210.93 2082.03,1210.93 2082.62,1210.93 2083.2,1210.93 2083.79,1210.93 2084.38,1210.93 2084.96,1210.93 2085.55,1210.93 2086.14,1210.93 2086.72,1210.93 2087.31,1210.93 2087.89,1210.93 2088.48,1210.93 2089.07,1210.93 2089.65,1210.93 2090.24,1210.93 2090.83,1210.93 2091.41,1210.93 2092,1210.93 2092.59,1210.93 2093.17,1210.93 2093.76,1210.93 2094.35,1210.93 2094.93,1210.93 2095.52,1210.93 2096.1,1210.93 2096.69,1210.93 2097.28,1210.93 2097.86,1210.93 2098.45,1210.93 2099.04,1210.93 2099.62,1210.93 2100.21,1210.93 2100.8,1210.93 2101.38,1210.93 2101.97,1210.93 2102.55,1210.93 2103.14,1210.93 2103.73,1210.93 2104.31,1210.93 2104.9,1210.93 2105.49,1210.93 2106.07,1210.93 2106.66,1210.93 2107.25,1210.93 2107.83,1210.93 2108.42,1210.93 2109.01,1210.93 2109.59,1210.93 2110.18,1210.93 2110.76,1210.93 2111.35,1210.93 2111.94,1210.93 2112.52,1210.93 2113.11,1210.93 2113.7,1210.93 2114.28,1210.93 2114.87,1210.93 2115.46,1210.93 2116.04,1210.93 2116.63,1210.93 2117.22,1210.93 2117.8,1210.93 2118.39,1210.93 2118.97,1210.93 2119.56,1210.93 2120.15,1210.93 2120.73,1210.93 2121.32,1210.93 2121.91,1210.93 2122.49,1210.93 2123.08,1210.93 2123.67,1210.93 2124.25,1210.93 2124.84,1210.93 2125.42,1210.93 2126.01,1210.93 2126.6,1210.93 2127.18,1210.93 2127.77,1210.93 2128.36,1210.93 2128.94,1210.93 2129.53,1210.93 2130.12,1210.93 2130.7,1210.93 2131.29,1210.93 2131.88,1210.93 2132.46,1210.93 2133.05,1210.93 2133.63,1210.93 2134.22,1210.93 2134.81,1210.93 2135.39,1210.93 2135.98,1210.93 2136.57,1210.93 2137.15,1210.93 2137.74,1210.93 2138.33,1210.93 2138.91,1210.93 2139.5,1210.93 2140.09,1210.93 2140.67,1210.93 2141.26,1210.93 2141.84,1210.93 2142.43,1210.93 2143.02,1210.93 2143.6,1210.93 2144.19,1210.93 2144.78,1210.93 2145.36,1210.93 2145.95,1210.93 2146.54,1210.93 2147.12,1210.93 2147.71,1210.93 2148.3,1210.93 2148.88,1210.93 2149.47,1210.93 2150.05,1210.93 2150.64,1210.93 2151.23,1210.93 2151.81,1210.93 2152.4,1210.93 2152.99,1210.93 2153.57,1210.93 2154.16,1210.93 2154.75,1210.93 2155.33,1210.93 2155.92,1210.93 2156.5,1210.93 2157.09,1210.93 2157.68,1210.93 2158.26,1210.93 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.35,1195.35 1399.66,899.083 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.14 985.439,1195.35 2158.26,1195.35 2158.26,1226.14 985.439,1226.14 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip373\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip373)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-12195.6 168.825,-12550.4 169.384,-12859.3 169.943,-13125.1 170.503,-12582.4 171.062,-12798.2 171.621,-12977.8 172.18,-13123.8 172.74,-13238.5 173.299,-13324 173.858,-13382.5 174.417,-12485 174.977,-12524 175.536,-12152.6 176.095,-11797.8 176.655,-11795.5 177.214,-11451.6 177.773,-11127.2 178.332,-10806.8 178.892,-10490.2 179.451,-10178.2 180.01,-10079.7 180.569,-9779.98 181.129,-9668.91 181.688,-9553.92 182.247,-9257.34 182.806,-9125.85 183.366,-8977.8 183.925,-8828.77 184.484,-8682.1 185.043,-8527.69 185.603,-8247.62 186.162,-8104.63 186.721,-7623.32 187.28,-7391.12 187.84,-7268.28 188.399,-7038.71 188.958,-6912.04 189.517,-6694.61 190.077,-6486.78 190.636,-6133.91 191.195,-5944.23 191.754,-5760.13 192.314,-5662.71 192.873,-5491.5 193.432,-5307.57 193.991,-5008.12 194.551,-4899.89 195.11,-4682.21 195.669,-4525.03 196.228,-4430.74 196.788,-4328.28 197.347,-4135.74 197.906,-3996.46 198.465,-3812.09 199.025,-3633.13 199.584,-3415.22 200.143,-3207.03 200.702,-3095.28 201.262,-3023.95 201.821,-2914.45 202.38,-2845.85 202.939,-2779.64 203.499,-2635.21 204.058,-2495.66 204.617,-2261.38 205.176,-2136.43 205.736,-2049.2 206.295,-1998.58 206.854,-1819.66 207.413,-1741.41 207.973,-1602.75 208.532,-1501.6 209.091,-1433.2 209.65,-1358.65 210.21,-1348.33 210.769,-1247.89 211.328,-1153.11 211.887,-1033.94 212.447,-971.674 213.006,-856.175 213.565,-747.905 214.124,-717.608 214.684,-689.059 215.243,-609.135 215.802,-579.918 216.361,-481.336 216.921,-453.991 217.48,-380.331 218.039,-336.048 218.598,-337.29 219.158,-269.628 219.717,-246.369 220.276,-203.041 220.835,-161.678 221.395,-139.735 221.954,-141.13 222.513,-136.446 223.072,-112.882 223.632,-69.4703 224.191,-44.0217 224.75,-22.297 225.309,22.8499 225.869,45.088 226.428,130.127 226.987,148.182 227.546,229.29 228.106,243.407 228.665,241.385 229.224,317.047 229.783,366.547 230.343,394.602 230.902,424.508 231.461,413.838 232.02,462.607 232.58,435.498 233.139,431.494 233.698,426.682 234.257,444.56 234.817,540.032 235.376,553.192 235.935,600.491 236.494,633.562 237.054,661.476 237.613,691.04 238.172,696.696 238.731,722.614 239.291,731.233 239.85,737.4 240.409,746.374 240.968,753.153 241.528,762.992 242.087,788.73 242.646,851.782 243.205,871.677 243.765,907.863 244.324,911.712 244.883,947.003 245.442,946.948 246.002,965.211 246.561,979.737 247.12,978.186 247.679,996.284 248.239,1029.19 248.798,1073.3 249.357,1135.95 249.916,1158.11 250.476,1165.61 251.035,1172.38 251.594,1180.92 252.153,1183.6 252.713,1202.75 253.272,1204.52 253.831,1208.23 254.39,1210.75 254.95,1245.2 255.509,1230.29 256.068,1213.28 256.627,1203.12 257.187,1207.96 257.746,1161.86 258.305,1151.33 258.864,1173.76 259.424,1146.79 259.983,1121.46 260.542,1113.46 261.101,1156.85 261.661,1197.97 262.22,1234.68 262.779,1200.51 263.338,1171.49 263.898,1213.66 264.457,1204.83 265.016,1211.08 265.575,1198.16 266.135,1157.04 266.694,1178.76 267.253,1168.04 267.812,1159.55 268.372,1148.53 268.931,1137.55 269.49,1145.73 270.049,1140.51 270.609,1136.28 271.168,1130.12 271.727,1103.36 272.286,1115.4 272.846,1124.03 273.405,1132.44 273.964,1159.2 274.523,1149.63 275.083,1154.75 275.642,1160.88 276.201,1131.21 276.76,1137.06 277.32,1126.43 277.879,1147.05 278.438,1152.86 278.997,1142.75 279.557,1150.1 280.116,1140.72 280.675,1145.37 281.234,1118.71 281.794,1108.13 282.353,1167.48 282.912,1153.25 283.471,1176.09 284.031,1197.58 284.59,1203.6 285.149,1186.69 285.708,1157.73 286.268,1143.16 286.827,1129.88 287.386,1104.26 287.945,1098.03 288.505,1109.65 289.064,1099.36 289.623,1090.37 290.182,1082.7 290.742,1086.21 291.301,1110.14 291.86,1083.77 292.419,1091.52 292.979,1103.56 293.538,1109.81 294.097,1086.15 294.656,1094.3 295.216,1102.79 295.775,1110.79 296.334,1115.59 296.893,1107.15 297.453,1096.96 298.012,1104.99 298.571,1097.96 299.13,1057.12 299.69,1067.14 300.249,1077.29 300.808,1069.19 301.368,1075.59 301.927,1087.58 302.486,1110.67 303.045,1105.17 303.605,1096.25 304.164,1117.56 304.723,1090.86 305.282,1078.95 305.842,1098.17 306.401,1056.63 306.96,1049.68 307.519,1042.31 308.079,1003.62 308.638,980.899 309.197,974.432 309.756,972.406 310.316,956.25 310.875,940.744 311.434,940.68 311.993,938.538 312.553,938.142 313.112,937.196 313.671,936.824 314.23,915.837 314.79,930.974 315.349,879.135 315.908,877.983 316.467,861.5 317.027,877.224 317.586,879.618 318.145,896.54 318.704,896.736 319.264,930.078 319.823,927.012 320.382,908.321 320.941,906.796 321.501,906.113 322.06,905.986 322.619,940.982 323.178,935.984 323.738,933.312 324.297,964.091 324.856,976.036 325.415,984.91 325.975,1014.4 326.534,1019.63 327.093,1027.95 327.652,1051.26 328.212,1042.42 328.771,1063.48 329.33,1051.04 329.889,1092.19 330.449,1048.32 331.008,1058.86 331.567,1035.58 332.126,962.318 332.686,942.208 333.245,901.806 333.804,930.43 334.363,910.808 334.923,923.485 335.482,932.986 336.041,929.734 336.6,940.914 337.16,919.702 337.719,917.027 338.278,894.942 338.837,907.64 339.397,919.839 339.956,916.345 340.515,944.305 341.074,906.318 341.634,917.906 342.193,913.911 342.752,911.313 343.311,892.951 343.871,853.185 344.43,817.578 344.989,818.914 345.548,801.948 346.108,804.729 346.667,809.909 347.226,862.067 347.785,861.151 348.345,873.386 348.904,859.658 349.463,874.671 350.022,889.747 350.582,886.602 351.141,881.102 351.7,879.809 352.259,879.009 352.819,876.034 353.378,873.689 353.937,858.168 354.496,886.073 355.056,902.824 355.615,932.835 356.174,928.502 356.733,940.393 357.293,967.671 357.852,976.669 358.411,988.839 358.97,981.269 359.53,1005.42 360.089,981.503 360.648,974.034 361.207,966.28 361.767,1023.61 362.326,1012.7 362.885,971.772 363.444,964.882 364.004,955.07 364.563,961.67 365.122,973.105 365.681,983.072 366.241,975.955 366.8,954.477 367.359,962.747 367.918,953.654 368.478,945.672 369.037,956.734 369.596,964.849 370.155,976.488 370.715,1017.44 371.274,990.653 371.833,980.247 372.392,920.375 372.952,913.986 373.511,876.632 374.07,902.507 374.629,883.352 375.189,862.073 375.748,828.779 376.307,829.212 376.866,812.174 377.426,808.533 377.985,809.298 378.544,793.953 379.103,812.219 379.663,829.444 380.222,829.545 380.781,848.031 381.34,865.539 381.9,893.847 382.459,939.429 383.018,947.946 383.577,958.831 384.137,949.475 384.696,955.848 385.255,948.726 385.814,904.919 386.374,917.454 386.933,928.069 387.492,922.342 388.051,933.074 388.611,907.127 389.17,917.27 389.729,925.001 390.288,935.327 390.848,912.081 391.407,922.005 391.966,916.469 392.525,911.599 393.085,934.191 393.644,912.388 394.203,924.815 394.762,900.605 395.322,895.763 395.881,924.064 396.44,899.075 396.999,875.584 397.559,886.218 398.118,898.035 398.677,845.28 399.236,804.371 399.796,801.803 400.355,820.046 400.914,821.767 401.473,851.239 402.033,864.671 402.592,875.533 403.151,821.597 403.71,817.222 404.27,796.739 404.829,829.108 405.388,842.43 405.947,837.04 406.507,816.783 407.066,816.077 407.625,846.462 408.184,859.271 408.744,836.757 409.303,817.392 409.862,847.039 410.421,860.399 410.981,870.073 411.54,846.027 412.099,855.965 412.658,851.365 413.218,799.076 413.777,814.216 414.336,827.398 414.895,858.965 415.455,869.802 416.014,866.293 416.573,848.78 417.132,879.071 417.692,871.798 418.251,863.619 418.81,889.826 419.369,870.678 419.929,865.207 420.488,876.028 421.047,870.587 421.606,882.751 422.166,859.408 422.725,837.358 423.284,862.173 423.843,870.677 424.403,833.689 424.962,811.958 425.521,780.934 426.08,814.105 426.64,810.479 427.199,824.15 427.758,836.778 428.318,869.723 428.877,880.963 429.436,879.535 429.995,858.758 430.555,854.749 431.114,836.266 431.673,833.668 432.232,799.032 432.792,785.386 433.351,780.748 433.91,816.107 434.469,815.087 435.029,810.646 435.588,823.442 436.147,787.2 436.706,785.461 437.266,802.773 437.825,798.054 438.384,793.831 438.943,777.055 439.503,793.678 440.062,776.211 440.621,775.751 441.18,773.081 441.74,771.207 442.299,754.503 442.858,754.208 443.417,738.822 443.977,723.065 444.536,691.367 445.095,676.699 445.654,680.748 446.214,683.063 446.773,671.296 447.332,661.822 447.891,664.118 448.451,683.436 449.01,719.316 449.569,720.295 450.128,739.076 450.688,737.003 451.247,752.596 451.806,771.735 452.365,773.462 452.925,740.001 453.484,741.63 454.043,741.82 454.602,758.784 455.162,776.528 455.721,821.143 456.28,783.561 456.839,717.81 457.399,704.393 457.958,722.866 458.517,740.205 459.076,770.106 459.636,787.368 460.195,790.749 460.754,803.694 461.313,801.654 461.873,782.637 462.432,795.98 462.991,792.348 463.55,822.998 464.11,816.406 464.669,811.226 465.228,823.948 465.787,836.017 466.347,784.346 466.906,803.207 467.465,797.875 468.024,764.947 468.584,730.109 469.143,746.393 469.702,748.179 470.261,712.876 470.821,700.62 471.38,701.722 471.939,705.356 472.498,704.251 473.058,673.683 473.617,678.586 474.176,683.62 474.735,688.663 475.295,722.388 475.854,740.926 476.413,757.242 476.972,755.776 477.532,753.353 478.091,771.755 478.65,786.8 479.209,799.287 479.769,766.73 480.328,762.002 480.887,745.808 481.446,746.755 482.006,697.364 482.565,682.497 483.124,722.373 483.683,739.945 484.243,775.299 484.802,775.647 485.361,757.353 485.92,757.889 486.48,753.867 487.039,754.451 487.598,767.097 488.157,793.925 488.717,775.376 489.276,773.273 489.835,769.725 490.394,732.684 490.954,731.05 491.513,713.64 492.072,711.684 492.631,697.831 493.191,701.552 493.75,704.018 494.309,709.006 494.868,711.177 495.428,711.741 495.987,711.261 496.546,729.87 497.105,745.674 497.665,709.724 498.224,729.125 498.783,745.371 499.342,743.351 499.902,743.954 500.461,728.766 501.02,727.552 501.579,743.359 502.139,710.822 502.698,697.064 503.257,714.892 503.816,680.359 504.376,683.568 504.935,669.44 505.494,690.768 506.053,710.901 506.613,711.909 507.172,745.162 507.731,698.952 508.29,686.953 508.85,725.494 509.409,758.51 509.968,775.439 510.527,790.873 511.087,803.865 511.646,783.873 512.205,782 512.764,794.46 513.324,809.812 513.883,805.975 514.442,834.413 515.001,844.913 515.561,842.111 516.12,851.97 516.679,844.32 517.238,837.705 517.798,819.233 518.357,814.026 518.916,795.513 519.475,806.674 520.035,786.45 520.594,831.032 521.153,860.804 521.712,855.674 522.272,834.86 522.831,829.071 523.39,839.804 523.949,817.093 524.509,796.582 525.068,792.796 525.627,771.464 526.186,750.771 526.746,716.321 527.305,715.837 527.864,733.903 528.423,719.613 528.983,704.439 529.542,719.204 530.101,739.198 530.66,771.077 531.22,750.26 531.779,765.585 532.338,800.057 532.897,795.39 533.457,779.513 534.016,741.297 534.575,758.317 535.134,754.252 535.694,770.738 536.253,769.213 536.812,766.864 537.371,764.121 537.931,795.295 538.49,776.751 539.049,808.782 539.608,806.912 540.168,801.9 540.727,797.338 541.286,795.701 541.845,776.197 542.405,689.369 542.964,671.705 543.523,671.551 544.082,640.202 544.642,626.576 545.201,629.77 545.76,567.806 546.319,589.559 546.879,611.908 547.438,618.112 547.997,656.881 548.556,680.384 549.116,684.217 549.675,706.284 550.234,725.702 550.793,743.26 551.353,729.715 551.912,747.224 552.471,747.25 553.031,730.182 553.59,711.637 554.149,665.277 554.708,649.308 555.268,684.836 555.827,685.074 556.386,688.691 556.945,688.399 557.505,689.62 558.064,693.258 558.623,711.303 559.182,711.239 559.742,696.927 560.301,681.411 560.86,699.838 561.419,748.191 561.979,748.804 562.538,762.713 563.097,747.224 563.656,747.936 564.216,727.5 564.775,725.538 565.334,740.843 565.893,723.235 566.453,719.883 567.012,718.71 567.571,716.482 568.13,716.619 568.69,713.252 569.249,707.877 569.808,711.327 570.367,727.765 570.927,742.994 571.486,741.977 572.045,773.482 572.604,757.478 573.164,787.524 573.723,765.51 574.282,732.835 574.841,735.01 575.401,752.954 575.96,734.478 576.519,732.528 577.078,733.003 577.638,731.66 578.197,743.081 578.756,760.868 579.315,759.997 579.875,791.899 580.434,788.113 580.993,769.904 581.552,766.408 582.112,718.767 582.671,700.449 583.23,717.651 583.789,717.903 584.349,704.548 584.908,739.55 585.467,765.646 586.026,732.663 586.586,718.025 587.145,701.245 587.704,717.239 588.263,729.225 588.823,696.168 589.382,712.88 589.941,714.353 590.5,734.455 591.06,718.103 591.619,750.562 592.178,733.094 592.737,734.247 593.297,783.453 593.856,766.675 594.415,797.329 594.974,775.132 595.534,775.838 596.093,758.796 596.652,787.932 597.211,770.209 597.771,762.919 598.33,729.239 598.889,713.96 599.448,712.888 600.008,710.982 600.567,742.218 601.126,721.334 601.685,735.892 602.245,767.012 602.804,745.512 603.363,746.369 603.922,714.475 604.482,695.844 605.041,682.821 605.6,685.19 606.159,735.699 606.719,752.75 607.278,778.385 607.837,789.084 608.396,783.583 608.956,750.646 609.515,752.156 610.074,765.709 610.633,750.57 611.193,761.751 611.752,804.946 612.311,815.539 612.87,823.316 613.43,814.721 613.989,825.292 614.548,799.193 615.107,778.336 615.667,743.474 616.226,726.155 616.785,755.127 617.344,736.96 617.904,734.03 618.463,732.687 619.022,711.08 619.581,692.541 620.141,676.358 620.7,693.122 621.259,679.895 621.818,628.967 622.378,611.796 622.937,601.879 623.496,605.433 624.055,613.978 624.615,588.067 625.174,579.486 625.733,587.027 626.292,594.864 626.852,616.037 627.411,635.222 627.97,639.416 628.529,627.461 629.089,628.608 629.648,600.59 630.207,605.627 630.766,591.067 631.326,613.572 631.885,617.977 632.444,624.335 633.003,641.023 633.563,628.004 634.122,617.459 634.681,622.163 635.24,643.921 635.8,651.464 636.359,625.787 636.918,613.882 637.477,604.873 638.037,623.196 638.596,611.711 639.155,601.326 639.714,607.887 640.274,632.641 640.833,653.225 641.392,674.998 641.951,679.74 642.511,630.858 643.07,637.118 643.629,656.903 644.188,709.429 644.748,692.553 645.307,677.052 645.866,628.415 646.425,679.519 646.985,712.897 647.544,710.789 648.103,727.106 648.662,744.905 649.222,760.858 649.781,740.947 650.34,736.542 650.899,738.151 651.459,736.067 652.018,767.172 652.577,782.552 653.136,779.586 653.696,777.637 654.255,788.884 654.814,761.465 655.373,741.14 655.933,754.591 656.492,737.831 657.051,721.49 657.61,736.335 658.17,767.903 658.729,778.994 659.288,787.622 659.847,769.605 660.407,785.213 660.966,816.291 661.525,794.223 662.084,789.363 662.644,785.157 663.203,747.929 663.762,743.393 664.321,740.36 664.881,702.76 665.44,716.57 665.999,715.408 666.558,761.244 667.118,761.884 667.677,786.274 668.236,746.43 668.795,757.954 669.355,754.029 669.914,767.423 670.473,756.933 671.032,770.768 671.592,781.739 672.151,743.71 672.71,727.527 673.269,743.146 673.829,689.163 674.388,690.323 674.947,724.107 675.506,757.709 676.066,755.181 676.625,735.382 677.184,752.467 677.743,734.135 678.303,732.082 678.862,683.813 679.421,683.755 679.981,686.229 680.54,655.335 681.099,641.988 681.658,662.681 682.218,664.469 682.777,683.336 683.336,649.892 683.895,619.601 684.455,604.199 685.014,596.711 685.573,619.66 686.132,670.606 686.692,684.477 687.251,651.165 687.81,655.68 688.369,709.543 688.929,707.261 689.488,706.264 690.047,704.809 690.606,703.895 691.166,754.387 691.725,784.715 692.284,801.24 692.843,795.209 693.403,756.448 693.962,770.204 694.521,780.073 695.08,756.831 695.64,736.559 696.199,700.034 696.758,784.037 697.317,781.602 697.877,749.399 698.436,698.957 698.995,702.485 699.554,668.063 700.114,667.82 700.673,672.291 701.232,657.581 701.791,677.473 702.351,673.674 702.91,659.482 703.469,660.716 704.028,677.656 704.588,665.925 705.147,650.615 705.706,635.564 706.265,640.68 706.825,612.748 707.384,634.742 707.943,639.793 708.502,694.096 709.062,711.96 709.621,695.453 710.18,660.798 710.739,660.308 711.299,648.361 711.858,634.249 712.417,653.515 712.976,672.064 713.536,691.631 714.095,707.474 714.654,707.389 715.213,687.194 715.773,734.513 716.332,734.448 716.891,716.535 717.45,700.04 718.01,686.254 718.569,676.124 719.128,678.919 719.687,710.954 720.247,693.325 720.806,756.143 721.365,753.859 721.924,734.617 722.484,748.737 723.043,683.726 723.602,667.35 724.161,683.284 724.721,666.361 725.28,656.97 725.839,674.891 726.398,693.739 726.958,661.242 727.517,664.725 728.076,650.49 728.635,636.878 729.195,669.407 729.754,690.351 730.313,722.097 730.872,699.139 731.432,714.74 731.991,728.781 732.55,743.591 733.109,743.089 733.669,724.931 734.228,722.24 734.787,739.452 735.346,752.421 735.906,750.507 736.465,748.605 737.024,745.235 737.583,755.046 738.143,735.88 738.702,767.855 739.261,764.427 739.82,730.662 740.38,727.311 740.939,787.593 741.498,796.649 742.057,826.05 742.617,820.842 743.176,827.91 743.735,791.649 744.294,772.611 744.854,783.123 745.413,791.223 745.972,772.293 746.531,752.921 747.091,687.072 747.65,685.198 748.209,670.942 748.768,671.771 749.328,657.128 749.887,679.926 750.446,663.356 751.005,666.044 751.565,684.283 752.124,652.197 752.683,636.172 753.242,624.383 753.802,641.432 754.361,645.528 754.92,568.096 755.479,562.536 756.039,520.386 756.598,512.086 757.157,552.72 757.716,540.835 758.276,550.295 758.835,558.002 759.394,534.652 759.953,542.166 760.513,548.796 761.072,556.183 761.631,581.724 762.19,606.018 762.75,611.296 763.309,632.232 763.868,634.295 764.427,636.017 764.987,637.687 765.546,640.019 766.105,643.318 766.664,630.783 767.224,667.805 767.783,669.545 768.342,672.381 768.901,658.424 769.461,677.121 770.02,709.644 770.579,705.033 771.138,674.408 771.698,674.653 772.257,662.095 772.816,664.69 773.375,645.589 773.935,633.867 774.494,605.679 775.053,577.425 775.612,631.003 776.172,616.381 776.731,650.955 777.29,649.306 777.849,665.835 778.409,681.375 778.968,680.485 779.527,679.995 780.086,681.83 780.646,684.268 781.205,699.538 781.764,697.381 782.323,697.555 782.883,729.249 783.442,745.635 784.001,745.098 784.56,743.481 785.12,740.733 785.679,769.665 786.238,732.838 786.797,747.309 787.357,726.441 787.916,724.252 788.475,737.871 789.034,703.345 789.594,735.969 790.153,717.527 790.712,717.456 791.271,763.159 791.831,774.355 792.39,781.532 792.949,790.481 793.508,800.162 794.068,809.006 794.627,787.155 795.186,776.33 795.745,786.274 796.305,765.197 796.864,728.705 797.423,745.22 797.982,742.487 798.542,723.421 799.101,706.919 799.66,705.682 800.219,689.592 800.779,672.011 801.338,642.397 801.897,676.536 802.456,709.235 803.016,725.671 803.575,775.568 804.134,771.424 804.693,767.262 805.253,763.08 805.812,774.84 806.371,771.652 806.931,799.058 807.49,826.731 808.049,834.666 808.608,762.772 809.168,741.827 809.727,742.581 810.286,723.609 810.845,721.483 811.405,717.243 811.964,700.002 812.523,714.933 813.082,714.599 813.642,662.125 814.201,664.761 814.76,662.879 815.319,613.925 815.879,601.714 816.438,607.336 816.997,627.241 817.556,644.622 818.116,618.257 818.675,608.944 819.234,596.041 819.793,602.092 820.353,639.363 820.912,643.016 821.471,660.501 822.03,681.285 822.59,683.909 823.149,682.605 823.708,700.709 824.267,681.194 824.827,682.922 825.386,668.337 825.945,683.572 826.504,684.314 827.064,682.339 827.623,697.349 828.182,678.36 828.741,691.773 829.301,663.534 829.86,667.037 830.419,653.02 830.978,636.316 831.538,670.073 832.097,672.228 832.656,690.234 833.215,692.362 833.775,705.34 834.334,703.645 834.893,705.064 835.452,723.613 836.012,739.517 836.571,740.875 837.13,718.834 837.689,732.555 838.249,729.504 838.808,785.446 839.367,780.78 839.926,775.432 840.486,737.111 841.045,718.133 841.604,746.973 842.163,778.5 842.723,771.702 843.282,764.981 843.841,758.026 844.4,768.815 844.96,749.934 845.519,762.181 846.078,740.834 846.637,706.941 847.197,702.049 847.756,715.948 848.315,713.239 848.874,694.733 849.434,712.712 849.993,697.608 850.552,700.78 851.111,699.02 851.671,697.516 852.23,709.419 852.789,707.765 853.348,657.488 853.908,671.648 854.467,654.569 855.026,638.719 855.585,609.666 856.145,642.461 856.704,612.623 857.263,615.432 857.822,586.819 858.382,592.449 858.941,597.911 859.5,615.765 860.059,635.952 860.619,617.935 861.178,619.099 861.737,652.943 862.296,671.434 862.856,640.323 863.415,627.134 863.974,631.322 864.533,649.084 865.093,617.241 865.652,651.059 866.211,700.219 866.77,732.533 867.33,732.402 867.889,700.401 868.448,748.177 869.007,747.871 869.567,729.482 870.126,761.051 870.685,755.063 871.244,720.578 871.804,737.136 872.363,782.673 872.922,743.301 873.481,740.787 874.041,737.57 874.6,734.914 875.159,734.081 875.718,714.147 876.278,699.594 876.837,698.375 877.396,694.919 877.955,680.527 878.515,708.762 879.074,707.673 879.633,708.184 880.192,736.949 880.752,735.497 881.311,704.165 881.87,736.335 882.429,735.065 882.989,751.604 883.548,700.435 884.107,695.785 884.666,730.795 885.226,713.625 885.785,727.552 886.344,711.45 886.903,722.139 887.463,718.322 888.022,717.03 888.581,718.227 889.14,736.011 889.7,734.402 890.259,751.267 890.818,747.042 891.377,737.848 891.937,735.08 892.496,733.358 893.055,749.761 893.614,764.185 894.174,747.822 894.733,708.237 895.292,686.21 895.851,671.7 896.411,671.141 896.97,670.207 897.529,658.1 898.088,641.355 898.648,660.462 899.207,644.973 899.766,632.223 900.325,618.322 900.885,653.962 901.444,655.558 902.003,658.903 902.562,641.816 903.122,641.45 903.681,660.291 904.24,643.43 904.799,679.891 905.359,668.877 905.918,667.788 906.477,666.327 907.036,749.858 907.596,746.82 908.155,760.026 908.714,738.768 909.273,706.481 909.833,706.158 910.392,685.82 910.951,699.66 911.51,746.991 912.07,744.385 912.629,726.413 913.188,674.704 913.747,692.282 914.307,675.904 914.866,660.483 915.425,642.938 915.984,646.057 916.544,649.68 917.103,604.902 917.662,607.805 918.221,610.602 918.781,598.627 919.34,585.105 919.899,572.516 920.458,545.048 921.018,553.74 921.577,557.318 922.136,565.685 922.695,608.538 923.255,646.39 923.814,667.738 924.373,684.606 924.932,651.725 925.492,623.671 926.051,656.751 926.61,673.032 927.169,658.778 927.729,650.796 928.288,635.882 928.847,653.611 929.406,659.994 929.966,691.246 930.525,708.525 931.084,691.618 931.644,675.135 932.203,692.909 932.762,675.3 933.321,706.328 933.881,708.859 934.44,703.621 934.999,750.881 935.558,716.498 936.118,712.326 936.677,710.497 937.236,690.552 937.795,704.073 938.355,702.991 938.914,719.838 939.473,683.758 940.032,662.531 940.592,647.499 941.151,636.637 941.71,656.282 942.269,687.064 942.829,685.648 943.388,704.074 943.947,741.754 944.506,706.469 945.066,694.27 945.625,712.106 946.184,683.417 946.743,699.408 947.303,700.381 947.862,716.798 948.421,729.735 948.98,726.22 949.54,723.191 950.099,704.273 950.658,703.887 951.217,673.211 951.777,676.748 952.336,680.111 952.895,714.34 953.454,714.923 954.014,680.395 954.573,679.459 955.132,679.03 955.691,646.331 956.251,646.915 956.81,664.452 957.369,681.508 957.928,679.415 958.488,680.871 959.047,695.516 959.606,742.082 960.165,714.259 960.725,715.363 961.284,715.246 961.843,680.941 962.402,648.843 962.962,652.895 963.521,670.341 964.08,673.439 964.639,659.149 965.199,661.623 965.758,697.439 966.317,695.587 966.876,694.905 967.436,712.414 967.995,694.914 968.554,693.163 969.113,709.175 969.673,740.55 970.232,721.516 970.791,735.438 971.35,764.885 971.91,779.178 972.469,773.57 973.028,738.376 973.587,720.384 974.147,688.274 974.706,671.876 975.265,672.674 975.824,654.674 976.384,640.543 976.943,625.043 977.502,645.77 978.061,630.51 978.621,648.647 979.18,697.01 979.739,698.272 980.298,696.996 980.858,680.674 981.417,683.414 981.976,698.353 982.535,729.062 983.095,713.091 983.654,744.041 984.213,726.19 984.772,724.547 985.332,724.346 985.891,741.629 986.45,735.556 987.009,685.112 987.569,703.204 988.128,720.356 988.687,748.351 989.246,731.522 989.806,741.785 990.365,739.523 990.924,734.358 991.483,719.003 992.043,734.504 992.602,731.618 993.161,742.486 993.72,723.237 994.28,704.465 994.839,653.794 995.398,669.063 995.957,669.45 996.517,620.28 997.076,623.794 997.635,627.52 998.194,630.445 998.754,618.64 999.313,625.627 999.872,578.851 1000.43,602.805 1000.99,620.826 1001.55,637.681 1002.11,605.473 1002.67,592.89 1003.23,570.688 1003.79,580.471 1004.35,551.287 1004.91,576.84 1005.46,567.309 1006.02,570.67 1006.58,596.757 1007.14,632.722 1007.7,602.205 1008.26,608.571 1008.82,628.51 1009.38,633.109 1009.94,670.953 1010.5,651.898 1011.06,638.686 1011.62,607.193 1012.18,614.458 1012.73,602.904 1013.29,639.983 1013.85,625.629 1014.41,628.529 1014.97,652.317 1015.53,669.03 1016.09,686.171 1016.65,685.919 1017.21,689.483 1017.77,687.492 1018.33,704.697 1018.89,723.748 1019.45,706.452 1020.01,671.911 1020.56,657.773 1021.12,628.921 1021.68,649.668 1022.24,634.027 1022.8,680.877 1023.36,681.782 1023.92,665.31 1024.48,714.901 1025.04,696.341 1025.6,675.843 1026.16,660.889 1026.72,695.317 1027.28,697.373 1027.83,698.691 1028.39,714.964 1028.95,732.356 1029.51,780.785 1030.07,761.169 1030.63,760.308 1031.19,757.201 1031.75,735.259 1032.31,730.487 1032.87,679.77 1033.43,679.396 1033.99,664.157 1034.55,650.442 1035.1,622.533 1035.66,610.407 1036.22,630.322 1036.78,615.625 1037.34,617.901 1037.9,620.185 1038.46,622.703 1039.02,623.668 1039.58,643.081 1040.14,646.868 1040.7,649.546 1041.26,653.843 1041.82,640.583 1042.38,626.512 1042.93,629.098 1043.49,634.266 1044.05,618.301 1044.61,622.251 1045.17,620.438 1045.73,667.614 1046.29,638.308 1046.85,639.456 1047.41,656.081 1047.97,640.936 1048.53,642.138 1049.09,663.889 1049.65,666.999 1050.2,670.239 1050.76,689.465 1051.32,706.621 1051.88,754.495 1052.44,750.846 1053,794.606 1053.56,790.29 1054.12,786.67 1054.68,812.625 1055.24,788.556 1055.8,736.759 1056.36,735.483 1056.92,764.351 1057.48,759.237 1058.03,755.949 1058.59,770.432 1059.15,733.899 1059.71,734.195 1060.27,745.19 1060.83,756.735 1061.39,736.416 1061.95,751.523 1062.51,794.362 1063.07,789.688 1063.63,784.432 1064.19,764.734 1064.75,758.935 1065.3,706.451 1065.86,720.471 1066.42,720.246 1066.98,700.445 1067.54,718.185 1068.1,713.272 1068.66,644.153 1069.22,615.155 1069.78,634.683 1070.34,621.52 1070.9,574.785 1071.46,596.949 1072.02,566.364 1072.57,572.452 1073.13,562.647 1073.69,554.683 1074.25,544.398 1074.81,569.392 1075.37,643.681 1075.93,646.761 1076.49,662.764 1077.05,649.935 1077.61,667.509 1078.17,672.734 1078.73,640.777 1079.29,660.901 1079.85,632.972 1080.4,653.871 1080.96,669.95 1081.52,690.15 1082.08,720.763 1082.64,700.963 1083.2,702.304 1083.76,684.251 1084.32,667.203 1084.88,669.301 1085.44,654.077 1086,668.613 1086.56,668.687 1087.12,673.467 1087.67,658.224 1088.23,644.076 1088.79,662.962 1089.35,661.492 1089.91,666.539 1090.47,698.682 1091.03,699.507 1091.59,728.39 1092.15,725.926 1092.71,723.092 1093.27,736.045 1093.83,733.748 1094.39,730.356 1094.94,727.734 1095.5,710.294 1096.06,680.953 1096.62,679.557 1097.18,665.259 1097.74,651.812 1098.3,652.323 1098.86,699.32 1099.42,698.787 1099.98,682.091 1100.54,712.915 1101.1,742.26 1101.66,754.148 1102.22,767.334 1102.77,745.76 1103.33,729.351 1103.89,710.627 1104.45,708.369 1105.01,722.095 1105.57,699.364 1106.13,747.068 1106.69,756.812 1107.25,717.158 1107.81,681.464 1108.37,635.228 1108.93,592.184 1109.49,610.599 1110.04,600.183 1110.6,603.847 1111.16,623.949 1111.72,624.096 1112.28,625.953 1112.84,594.066 1113.4,600.33 1113.96,618.871 1114.52,605.072 1115.08,622.125 1115.64,624.176 1116.2,641.657 1116.76,640.984 1117.31,659.428 1117.87,599.042 1118.43,602.749 1118.99,623.1 1119.55,609.909 1120.11,647.782 1120.67,648.216 1121.23,632.313 1121.79,616.234 1122.35,635.097 1122.91,642.76 1123.47,628.855 1124.03,629.124 1124.59,631.033 1125.14,634.129 1125.7,667.471 1126.26,685.446 1126.82,685.594 1127.38,751.102 1127.94,726.961 1128.5,758.038 1129.06,768.647 1129.62,746.575 1130.18,744.445 1130.74,741.494 1131.3,717.351 1131.86,716.045 1132.41,764.219 1132.97,713.596 1133.53,711.833 1134.09,725.526 1134.65,706.628 1135.21,703.365 1135.77,735.675 1136.33,732.387 1136.89,711.246 1137.45,741.27 1138.01,737.728 1138.57,730.958 1139.13,714.543 1139.68,715.833 1140.24,766.35 1140.8,794.881 1141.36,794.597 1141.92,772.645 1142.48,800.24 1143.04,776.751 1143.6,786.73 1144.16,796.62 1144.72,792.187 1145.28,815.522 1145.84,825.858 1146.4,833.924 1146.96,779.454 1147.51,759.137 1148.07,787.719 1148.63,798.169 1149.19,758.198 1149.75,754.287 1150.31,748.59 1150.87,747.623 1151.43,808.581 1151.99,787.053 1152.55,795.668 1153.11,804.075 1153.67,785.148 1154.23,812.085 1154.78,792.658 1155.34,740.729 1155.9,764.387 1156.46,790.901 1157.02,770.381 1157.58,767.409 1158.14,762.461 1158.7,774.795 1159.26,755.547 1159.82,722.857 1160.38,718.58 1160.94,749.984 1161.5,731.961 1162.05,713.625 1162.61,680.787 1163.17,680.718 1163.73,680.822 1164.29,634.743 1164.85,638.69 1165.41,657.486 1165.97,658.041 1166.53,645.123 1167.09,630.401 1167.65,670.092 1168.21,618.469 1168.77,637.544 1169.33,641.471 1169.88,625.38 1170.44,644.905 1171,614.721 1171.56,604.586 1172.12,610.07 1172.68,629.144 1173.24,600.367 1173.8,584.6 1174.36,592.718 1174.92,594.487 1175.48,596.593 1176.04,636.609 1176.6,639.02 1177.15,628.6 1177.71,598.057 1178.27,601.898 1178.83,590.691 1179.39,596.687 1179.95,594.388 1180.51,598.769 1181.07,652.11 1181.63,637.499 1182.19,654.678 1182.75,658.119 1183.31,657.68 1183.87,673.901 1184.43,671.84 1184.98,669.656 1185.54,624.34 1186.1,643.02 1186.66,631.106 1187.22,635.971 1187.78,639.789 1188.34,673.583 1188.9,673.695 1189.46,660.828 1190.02,660.224 1190.58,662.559 1191.14,694.314 1191.7,696.427 1192.25,763.164 1192.81,772.173 1193.37,749.99 1193.93,744.208 1194.49,730.321 1195.05,711.035 1195.61,722.668 1196.17,690.132 1196.73,690.929 1197.29,726.066 1197.85,757.288 1198.41,773.714 1198.97,736.984 1199.52,783.188 1200.08,811.028 1200.64,820.643 1201.2,814.228 1201.76,774.128 1202.32,784.649 1202.88,759.681 1203.44,756.178 1204,769.98 1204.56,746.722 1205.12,728.992 1205.68,711.507 1206.24,709.614 1206.8,737.81 1207.35,733.683 1207.91,684.751 1208.47,664.979 1209.03,619.493 1209.59,590.524 1210.15,642.163 1210.71,662.646 1211.27,699.996 1211.83,719.666 1212.39,718.27 1212.95,699.076 1213.51,716.484 1214.07,718.833 1214.62,733.443 1215.18,731.585 1215.74,712.833 1216.3,695.48 1216.86,679.269 1217.42,680.283 1217.98,664.459 1218.54,661.934 1219.1,630.795 1219.66,619.269 1220.22,622.867 1220.78,644.281 1221.34,646.962 1221.89,633.029 1222.45,649.383 1223.01,668.04 1223.57,686.337 1224.13,658.568 1224.69,695.045 1225.25,724.595 1225.81,720.919 1226.37,746.729 1226.93,724.948 1227.49,756.055 1228.05,750.751 1228.61,731.468 1229.17,698.329 1229.72,696.413 1230.28,713.052 1230.84,723.376 1231.4,721.723 1231.96,695.705 1232.52,691.431 1233.08,671.821 1233.64,672.912 1234.2,674.075 1234.76,693.942 1235.32,691.856 1235.88,675.844 1236.44,662.047 1236.99,699.546 1237.55,713.312 1238.11,694.797 1238.67,678.488 1239.23,634.706 1239.79,640.642 1240.35,643.228 1240.91,645.888 1241.47,678.338 1242.03,680.079 1242.59,649.817 1243.15,652.611 1243.71,669.389 1244.26,673.408 1244.82,657.765 1245.38,661.086 1245.94,597.772 1246.5,598.783 1247.06,588.457 1247.62,594.72 1248.18,581.541 1248.74,605.814 1249.3,607.318 1249.86,609.611 1250.42,614.44 1250.98,617.995 1251.54,651.758 1252.09,655.468 1252.65,673.36 1253.21,660.231 1253.77,692.999 1254.33,694.286 1254.89,675.889 1255.45,671.433 1256.01,689.993 1256.57,658.984 1257.13,677.89 1257.69,692.591 1258.25,686.256 1258.81,699.882 1259.36,716.889 1259.92,714.19 1260.48,698.741 1261.04,712.544 1261.6,709.642 1262.16,727.553 1262.72,760.544 1263.28,775.773 1263.84,737.598 1264.4,751.824 1264.96,781.543 1265.52,777.521 1266.08,757.457 1266.63,785.774 1267.19,779.913 1267.75,760.376 1268.31,756.005 1268.87,700.997 1269.43,697.621 1269.99,680.358 1270.55,678.908 1271.11,693.988 1271.67,712.006 1272.23,707.365 1272.79,705.575 1273.35,688.06 1273.91,691.094 1274.46,673.612 1275.02,675.306 1275.58,644.379 1276.14,634.327 1276.7,656.23 1277.26,686.628 1277.82,704.641 1278.38,690.038 1278.94,675.463 1279.5,694.462 1280.06,681.15 1280.62,662.448 1281.18,633.737 1281.73,636.157 1282.29,638.86 1282.85,641.247 1283.41,614.55 1283.97,633.124 1284.53,633.625 1285.09,636.153 1285.65,638.23 1286.21,641.257 1286.77,676.944 1287.33,674.794 1287.89,658.707 1288.45,658.158 1289,676.813 1289.56,681.256 1290.12,678.698 1290.68,645.926 1291.24,680.376 1291.8,681.482 1292.36,664.556 1292.92,646.963 1293.48,648.405 1294.04,648.279 1294.6,663.767 1295.16,677.66 1295.72,674.585 1296.28,674.502 1296.83,690.883 1297.39,690.459 1297.95,673.477 1298.51,672.748 1299.07,686.783 1299.63,648.186 1300.19,682.771 1300.75,701.54 1301.31,719.801 1301.87,705.301 1302.43,688.68 1302.99,657.784 1303.55,658.679 1304.1,676.407 1304.66,694.39 1305.22,707.935 1305.78,705.631 1306.34,700.765 1306.9,734.736 1307.46,746.763 1308.02,727.865 1308.58,725.36 1309.14,706.461 1309.7,672.329 1310.26,640.567 1310.82,656.354 1311.38,660.503 1311.93,661.408 1312.49,660.891 1313.05,647.879 1313.61,665.703 1314.17,667.789 1314.73,652.467 1315.29,652.095 1315.85,655.218 1316.41,641.664 1316.97,642.623 1317.53,594.278 1318.09,601.88 1318.65,603.358 1319.2,588.646 1319.76,605.925 1320.32,594.669 1320.88,615.499 1321.44,617.431 1322,602.936 1322.56,605.296 1323.12,580.013 1323.68,586.4 1324.24,578.626 1324.8,570.956 1325.36,576.316 1325.92,548.357 1326.47,558.509 1327.03,598.987 1327.59,615.533 1328.15,605.265 1328.71,608.3 1329.27,630.398 1329.83,662.976 1330.39,666.034 1330.95,701.377 1331.51,669.687 1332.07,672.527 1332.63,654.692 1333.19,670.033 1333.75,686.717 1334.3,668.531 1334.86,700.469 1335.42,667.629 1335.98,685.73 1336.54,700.351 1337.1,667.857 1337.66,668.108 1338.22,669.221 1338.78,653.814 1339.34,660.049 1339.9,659.457 1340.46,660.059 1341.02,707.991 1341.57,708.471 1342.13,737.944 1342.69,703.954 1343.25,702.363 1343.81,702.698 1344.37,700.607 1344.93,699.084 1345.49,681.285 1346.05,683.763 1346.61,701.778 1347.17,698.951 1347.73,731.28 1348.29,761.903 1348.84,726.115 1349.4,739.086 1349.96,731.226 1350.52,795.376 1351.08,807.478 1351.64,787.182 1352.2,782.301 1352.76,761.011 1353.32,756.97 1353.88,752.008 1354.44,699.143 1355,698.996 1355.56,697.22 1356.12,696.39 1356.67,678.106 1357.23,692.597 1357.79,660.7 1358.35,642.821 1358.91,659.312 1359.47,693.808 1360.03,712.035 1360.59,726.053 1361.15,692.055 1361.71,711.111 1362.27,724.949 1362.83,722.316 1363.39,717.485 1363.94,718 1364.5,716.688 1365.06,731.807 1365.62,746.068 1366.18,774.845 1366.74,736.716 1367.3,718.935 1367.86,715.304 1368.42,693.575 1368.98,694.357 1369.54,708.642 1370.1,724.065 1370.66,753.529 1371.21,783.384 1371.77,794.035 1372.33,754.275 1372.89,736.933 1373.45,735.374 1374.01,747.169 1374.57,741.642 1375.13,693.077 1375.69,673.181 1376.25,643.966 1376.81,646.883 1377.37,663.236 1377.93,662.602 1378.49,682.007 1379.04,682.148 1379.6,715.101 1380.16,762.283 1380.72,755.551 1381.28,735.495 1381.84,716.606 1382.4,712.777 1382.96,728.118 1383.52,708.085 1384.08,721.188 1384.64,735.102 1385.2,763.349 1385.76,778.176 1386.31,772.971 1386.87,768.761 1387.43,748.216 1387.99,728.279 1388.55,692.676 1389.11,693.267 1389.67,691.803 1390.23,692.474 1390.79,708.446 1391.35,690.81 1391.91,675.383 1392.47,656.825 1393.03,644.582 1393.58,651.242 1394.14,633.786 1394.7,622.334 1395.26,642.041 1395.82,648.371 1396.38,649.85 1396.94,638.088 1397.5,612.318 1398.06,601.127 1398.62,555.556 1399.18,564.092 1399.74,585.086 1400.3,588.414 1400.86,640.399 1401.41,690.734 1401.97,692.555 1402.53,688.505 1403.09,669.51 1403.65,672.139 1404.21,671.247 1404.77,675.346 1405.33,676.416 1405.89,660.657 1406.45,614.012 1407.01,619.312 1407.57,609.515 1408.13,611.037 1408.68,598.487 1409.24,601.897 1409.8,607.667 1410.36,628.265 1410.92,652.171 1411.48,657.582 1412.04,705.274 1412.6,689.1 1413.16,641.948 1413.72,639.778 1414.28,610.199 1414.84,610.774 1415.4,597.975 1415.95,607.86 1416.51,625.471 1417.07,630.785 1417.63,650.878 1418.19,688.454 1418.75,688.432 1419.31,704.373 1419.87,687.782 1420.43,703.629 1420.99,688.054 1421.55,735.713 1422.11,747.427 1422.67,756.314 1423.23,735.742 1423.78,711.924 1424.34,725.791 1424.9,707.59 1425.46,687.073 1426.02,668.328 1426.58,684.262 1427.14,654.709 1427.7,640.645 1428.26,675.751 1428.82,690.954 1429.38,674.456 1429.94,674.659 1430.5,673.579 1431.05,689.357 1431.61,689.52 1432.17,705.727 1432.73,700.898 1433.29,717.372 1433.85,728.91 1434.41,725.087 1434.97,722.649 1435.53,687.958 1436.09,684.539 1436.65,701.048 1437.21,701.578 1437.77,716.588 1438.33,747.161 1438.88,738.755 1439.44,738.986 1440,782.951 1440.56,794.9 1441.12,755.599 1441.68,750.406 1442.24,716.503 1442.8,715.112 1443.36,711.781 1443.92,725.328 1444.48,723.269 1445.04,751.513 1445.6,764.889 1446.15,710.397 1446.71,725.276 1447.27,706.136 1447.83,705.953 1448.39,684.485 1448.95,686.497 1449.51,703.147 1450.07,715.695 1450.63,690.806 1451.19,689.75 1451.75,688.003 1452.31,636.652 1452.87,637.09 1453.42,671.991 1453.98,657.676 1454.54,674.766 1455.1,647.126 1455.66,632.887 1456.22,651.697 1456.78,703.943 1457.34,684.865 1457.9,686.996 1458.46,670.986 1459.02,654.053 1459.58,700.671 1460.14,716.453 1460.7,749.456 1461.25,730.934 1461.81,727.407 1462.37,723.489 1462.93,722.775 1463.49,689.009 1464.05,672.987 1464.61,707.416 1465.17,706.691 1465.73,705.638 1466.29,722.338 1466.85,706.817 1467.41,720.909 1467.97,721.819 1468.52,703.315 1469.08,670.708 1469.64,651.417 1470.2,684.983 1470.76,683.897 1471.32,668.366 1471.88,639.232 1472.44,623.749 1473,625.073 1473.56,679.903 1474.12,614.753 1474.68,585.459 1475.24,610.945 1475.79,599.224 1476.35,620.239 1476.91,606.279 1477.47,657.369 1478.03,646.227 1478.59,680.815 1479.15,664.646 1479.71,600.659 1480.27,588.324 1480.83,607.57 1481.39,612.166 1481.95,629.823 1482.51,633.464 1483.07,621.405 1483.62,661.222 1484.18,693.718 1484.74,695.792 1485.3,680.075 1485.86,698.411 1486.42,727.773 1486.98,724.803 1487.54,721.831 1488.1,753.532 1488.66,719.353 1489.22,672.155 1489.78,689.531 1490.34,704.054 1490.89,721.232 1491.45,720.974 1492.01,720.818 1492.57,684.828 1493.13,668.509 1493.69,650.694 1494.25,671.804 1494.81,687.576 1495.37,652.98 1495.93,654.485 1496.49,707.28 1497.05,707.153 1497.61,755.484 1498.16,732.225 1498.72,772.746 1499.28,733.61 1499.84,713.502 1500.4,728.241 1500.96,721.688 1501.52,738.407 1502.08,750.785 1502.64,762.551 1503.2,760.44 1503.76,770.401 1504.32,785.764 1504.88,781.639 1505.44,778.992 1505.99,775 1506.55,738.088 1507.11,732.856 1507.67,777.285 1508.23,757.514 1508.79,719.507 1509.35,717.803 1509.91,715.811 1510.47,667.529 1511.03,667.361 1511.59,699.068 1512.15,668.164 1512.71,669.691 1513.26,656.076 1513.82,673.571 1514.38,709.415 1514.94,726.667 1515.5,691.167 1516.06,689.832 1516.62,641.453 1517.18,673.378 1517.74,685.668 1518.3,672.219 1518.86,670.353 1519.42,686.502 1519.98,640.309 1520.53,612.219 1521.09,631.602 1521.65,632.311 1522.21,667.788 1522.77,685.517 1523.33,685.128 1523.89,688.786 1524.45,641.032 1525.01,645.178 1525.57,616.691 1526.13,603.619 1526.69,642.666 1527.25,609.76 1527.81,627.721 1528.36,630.971 1528.92,619.043 1529.48,621.601 1530.04,653.919 1530.6,688.248 1531.16,689.972 1531.72,619.598 1532.28,606.977 1532.84,643.239 1533.4,679.146 1533.96,678.578 1534.52,682.599 1535.08,713.628 1535.63,646.314 1536.19,645.733 1536.75,648.352 1537.31,668.128 1537.87,716.398 1538.43,732.751 1538.99,699.45 1539.55,729.744 1540.11,708.658 1540.67,692.183 1541.23,674.027 1541.79,658.527 1542.35,645.111 1542.9,612.672 1543.46,647.888 1544.02,632.224 1544.58,602.136 1545.14,640.658 1545.7,643.451 1546.26,644.032 1546.82,613.749 1547.38,601.248 1547.94,655.95 1548.5,689.075 1549.06,689.314 1549.62,672.395 1550.18,690.373 1550.73,672.617 1551.29,686.702 1551.85,670.261 1552.41,671.635 1552.97,707.955 1553.53,738.615 1554.09,734.456 1554.65,704.379 1555.21,688.876 1555.77,717.886 1556.33,681.965 1556.89,697.962 1557.45,715.724 1558,715.956 1558.56,696.777 1559.12,706.85 1559.68,755.69 1560.24,734.32 1560.8,759.999 1561.36,754.252 1561.92,734.419 1562.48,747.751 1563.04,730.043 1563.6,724.071 1564.16,756.931 1564.72,754.774 1565.28,748.359 1565.83,763.376 1566.39,758.318 1566.95,755.56 1567.51,733.619 1568.07,718.309 1568.63,698.916 1569.19,679.593 1569.75,711.72 1570.31,711.089 1570.87,728.554 1571.43,710.486 1571.99,726.254 1572.55,773.974 1573.1,737.887 1573.66,736.085 1574.22,751.894 1574.78,781.486 1575.34,774.936 1575.9,752.372 1576.46,795.175 1577.02,737.749 1577.58,733.641 1578.14,732.041 1578.7,777.1 1579.26,753.075 1579.82,745.848 1580.37,725.523 1580.93,723.273 1581.49,707.894 1582.05,692.961 1582.61,658.743 1583.17,657.658 1583.73,641.983 1584.29,628.596 1584.85,630.331 1585.41,669.083 1585.97,685.231 1586.53,689.146 1587.09,690.911 1587.65,653.675 1588.2,635.873 1588.76,636.646 1589.32,639.924 1589.88,628.218 1590.44,615.537 1591,590.973 1591.56,614.372 1592.12,619.087 1592.68,625.676 1593.24,631.689 1593.8,620.055 1594.36,638.525 1594.92,644.749 1595.47,631.804 1596.03,666.704 1596.59,650.259 1597.15,655.44 1597.71,656.725 1598.27,657.734 1598.83,674.312 1599.39,657.736 1599.95,614.133 1600.51,617.005 1601.07,632.058 1601.63,618.947 1602.19,593.015 1602.74,584.129 1603.3,603.789 1603.86,626.645 1604.42,643.998 1604.98,663.722 1605.54,697.858 1606.1,664.259 1606.66,679.054 1607.22,661.599 1607.78,661.914 1608.34,647.759 1608.9,685.206 1609.46,665.964 1610.02,668.808 1610.57,688.739 1611.13,688.525 1611.69,691.238 1612.25,707.28 1612.81,738.552 1613.37,753.836 1613.93,797.873 1614.49,762.382 1615.05,791.146 1615.61,785.715 1616.17,797.32 1616.73,791.561 1617.29,823.46 1617.84,769.746 1618.4,763.932 1618.96,759.874 1619.52,784.788 1620.08,763.592 1620.64,759.057 1621.2,767.912 1621.76,761.824 1622.32,756.391 1622.88,752.939 1623.44,714.097 1624,714.407 1624.56,691.142 1625.11,690.994 1625.67,721.059 1626.23,699.762 1626.79,681.605 1627.35,696.461 1627.91,680.344 1628.47,663.92 1629.03,682.939 1629.59,630.891 1630.15,663.191 1630.71,581.045 1631.27,583.819 1631.83,608.454 1632.39,562.993 1632.94,569.463 1633.5,539.055 1634.06,531.409 1634.62,511.83 1635.18,553.367 1635.74,575.634 1636.3,597.738 1636.86,602.67 1637.42,606.892 1637.98,607.654 1638.54,631.944 1639.1,638.831 1639.66,656.457 1640.21,662.199 1640.77,664.589 1641.33,683.474 1641.89,667.933 1642.45,700.207 1643.01,669.544 1643.57,684.171 1644.13,682.008 1644.69,683.537 1645.25,716.839 1645.81,664.943 1646.37,697.303 1646.93,695.222 1647.48,693.41 1648.04,657.593 1648.6,643.251 1649.16,628.781 1649.72,614.232 1650.28,618.652 1650.84,622.503 1651.4,623.009 1651.96,627.189 1652.52,629.805 1653.08,644.137 1653.64,614.703 1654.2,619.911 1654.76,607.071 1655.31,614.125 1655.87,635.287 1656.43,620.058 1656.99,626.011 1657.55,613.456 1658.11,631.687 1658.67,633.754 1659.23,714.87 1659.79,730.776 1660.35,745.39 1660.91,742.242 1661.47,770.948 1662.03,764.832 1662.58,760.87 1663.14,774.738 1663.7,706.999 1664.26,689.413 1664.82,673.239 1665.38,722.806 1665.94,735.876 1666.5,732.728 1667.06,730.463 1667.62,731.923 1668.18,729.806 1668.74,745.175 1669.3,712.697 1669.85,710.259 1670.41,725.172 1670.97,721.678 1671.53,725.168 1672.09,772.637 1672.65,751.999 1673.21,748.17 1673.77,761.813 1674.33,739.071 1674.89,718.151 1675.45,766.469 1676.01,782.128 1676.57,761.503 1677.13,742.135 1677.68,737.844 1678.24,718.721 1678.8,698.771 1679.36,697.267 1679.92,709.712 1680.48,707.145 1681.04,707.019 1681.6,721.764 1682.16,782.981 1682.72,774.034 1683.28,785.645 1683.84,749.597 1684.4,761.255 1684.95,776.302 1685.51,771.718 1686.07,750.006 1686.63,744.665 1687.19,725.594 1687.75,692.425 1688.31,707.812 1688.87,702.466 1689.43,669.811 1689.99,622.525 1690.55,610.25 1691.11,616.505 1691.67,602.364 1692.23,603.983 1692.78,591.366 1693.34,594.126 1693.9,596.91 1694.46,583.225 1695.02,574.3 1695.58,576.639 1696.14,597.266 1696.7,601.474 1697.26,607.129 1697.82,611.927 1698.38,613.641 1698.94,631.257 1699.5,649.27 1700.05,635.053 1700.61,591.383 1701.17,582.313 1701.73,610.658 1702.29,599.757 1702.85,619.723 1703.41,591.917 1703.97,578.416 1704.53,552.062 1705.09,563.291 1705.65,553.884 1706.21,580.059 1706.77,585.979 1707.32,606.366 1707.88,614.341 1708.44,617.605 1709,656.702 1709.56,626.048 1710.12,613.946 1710.68,618.193 1711.24,606.145 1711.8,612.24 1712.36,620.455 1712.92,638.635 1713.48,638.383 1714.04,676.109 1714.6,676.631 1715.15,708.35 1715.71,725.04 1716.27,725.091 1716.83,723.396 1717.39,754.553 1717.95,747.957 1718.51,758.954 1719.07,739.75 1719.63,719.224 1720.19,733.261 1720.75,696.295 1721.31,664.557 1721.87,678.27 1722.42,611.484 1722.98,648.291 1723.54,648.739 1724.1,648.26 1724.66,685.015 1725.22,669.931 1725.78,655.237 1726.34,672.869 1726.9,690.129 1727.46,671.401 1728.02,656.156 1728.58,673.082 1729.14,674.711 1729.69,673.7 1730.25,676.358 1730.81,671.977 1731.37,706.376 1731.93,782.116 1732.49,790.311 1733.05,800.035 1733.61,792.813 1734.17,789.827 1734.73,797.543 1735.29,788.081 1735.85,781.483 1736.41,761.786 1736.97,756.395 1737.52,747.854 1738.08,742.345 1738.64,755.443 1739.2,720.14 1739.76,734.252 1740.32,698.524 1740.88,680.388 1741.44,679.268 1742,695.822 1742.56,713.818 1743.12,693.527 1743.68,645.012 1744.24,661.196 1744.79,662.943 1745.35,681.009 1745.91,680.515 1746.47,695.93 1747.03,681.024 1747.59,700.055 1748.15,697.225 1748.71,694.126 1749.27,706.102 1749.83,703.679 1750.39,747.358 1750.95,742.802 1751.51,756.459 1752.06,784.398 1752.62,742.515 1753.18,704.863 1753.74,702.417 1754.3,736.115 1754.86,746.753 1755.42,756.363 1755.98,741.416 1756.54,767.778 1757.1,749.943 1757.66,742.237 1758.22,739.968 1758.78,720.426 1759.34,738.173 1759.89,765.545 1760.45,761.055 1761.01,807.04 1761.57,787.4 1762.13,796.004 1762.69,810.868 1763.25,820.851 1763.81,766.635 1764.37,759.592 1764.93,756.182 1765.49,750.413 1766.05,734.981 1766.61,747.254 1767.16,713.5 1767.72,711.297 1768.28,709.246 1768.84,661.428 1769.4,612.742 1769.96,602.713 1770.52,610.08 1771.08,612.006 1771.64,595.902 1772.2,583.661 1772.76,620.704 1773.32,611.018 1773.88,628.062 1774.43,648.193 1774.99,682.57 1775.55,681.199 1776.11,680.371 1776.67,681.762 1777.23,663.234 1777.79,665.324 1778.35,681.81 1778.91,697.585 1779.47,746.78 1780.03,758.552 1780.59,787.686 1781.15,769.302 1781.71,775.673 1782.26,768.275 1782.82,733.306 1783.38,746.846 1783.94,678.483 1784.5,693.075 1785.06,676.845 1785.62,675.482 1786.18,630.073 1786.74,616.678 1787.3,604.46 1787.86,626.846 1788.42,634.489 1788.98,638.695 1789.53,644.106 1790.09,693.813 1790.65,664.799 1791.21,680.621 1791.77,630.153 1792.33,632.702 1792.89,654.621 1793.45,704.738 1794.01,704.508 1794.57,735.826 1795.13,717.141 1795.69,730.124 1796.25,743.877 1796.8,726.88 1797.36,740.548 1797.92,750.412 1798.48,761.525 1799.04,754.564 1799.6,763.526 1800.16,729.454 1800.72,679.743 1801.28,680.923 1801.84,684.726 1802.4,686.47 1802.96,686.805 1803.52,717.808 1804.08,683.615 1804.63,650.337 1805.19,632.87 1805.75,636.389 1806.31,621.443 1806.87,626.293 1807.43,598.032 1807.99,605.097 1808.55,609.261 1809.11,628.161 1809.67,631.17 1810.23,646.576 1810.79,631.69 1811.35,667.461 1811.9,700.825 1812.46,699.39 1813.02,685.837 1813.58,669.54 1814.14,687.794 1814.7,687.846 1815.26,687.708 1815.82,700.902 1816.38,684.432 1816.94,702.908 1817.5,719.592 1818.06,736.634 1818.62,732.486 1819.18,747.287 1819.73,744.186 1820.29,759.834 1820.85,774.437 1821.41,771.87 1821.97,768.984 1822.53,765.826 1823.09,744.565 1823.65,744.094 1824.21,691.029 1824.77,707.645 1825.33,721.782 1825.89,719.083 1826.45,718.62 1827,727.903 1827.56,743.788 1828.12,725.48 1828.68,675.265 1829.24,657.237 1829.8,660.111 1830.36,645.577 1830.92,698.157 1831.48,683.139 1832.04,665.817 1832.6,699.987 1833.16,667.578 1833.72,697.732 1834.27,697.048 1834.83,714.215 1835.39,730.801 1835.95,699.672 1836.51,663.578 1837.07,620.192 1837.63,590.002 1838.19,626.304 \"/>\n<path clip-path=\"url(#clip373)\" d=\"M720.247 691.352 L720.806 691.352 L721.365 691.352 L721.924 691.352 L722.484 691.352 L723.043 691.352 L723.602 691.352 L724.161 691.352 L724.721 691.352 L725.28 691.352 L725.839 691.352 L726.398 691.352 L726.958 691.352 L727.517 691.352 L728.076 691.352 L728.635 691.352 L729.195 691.352 L729.754 691.352 L730.313 691.352 L730.872 691.352 L731.432 691.352 L731.991 691.352 L732.55 691.352 L733.109 691.352 L733.669 691.352 L734.228 691.352 L734.787 691.352 L735.346 691.352 L735.906 691.352 L736.465 691.352 L737.024 691.352 L737.583 691.352 L738.143 691.352 L738.702 691.352 L739.261 691.352 L739.82 691.352 L740.38 691.352 L740.939 691.352 L741.498 691.352 L742.057 691.352 L742.617 691.352 L743.176 691.352 L743.735 691.352 L744.294 691.352 L744.854 691.352 L745.413 691.352 L745.972 691.352 L746.531 691.352 L747.091 691.352 L747.65 691.352 L748.209 691.352 L748.768 691.352 L749.328 691.352 L749.887 691.352 L750.446 691.352 L751.005 691.352 L751.565 691.352 L752.124 691.352 L752.683 691.352 L753.242 691.352 L753.802 691.352 L754.361 691.352 L754.92 691.352 L755.479 691.352 L756.039 691.352 L756.598 691.352 L757.157 691.352 L757.716 691.352 L758.276 691.352 L758.835 691.352 L759.394 691.352 L759.953 691.352 L760.513 691.352 L761.072 691.352 L761.631 691.352 L762.19 691.352 L762.75 691.352 L763.309 691.352 L763.868 691.352 L764.427 691.352 L764.987 691.352 L765.546 691.352 L766.105 691.352 L766.664 691.352 L767.224 691.352 L767.783 691.352 L768.342 691.352 L768.901 691.352 L769.461 691.352 L770.02 691.352 L770.579 691.352 L771.138 691.352 L771.698 691.352 L772.257 691.352 L772.816 691.352 L773.375 691.352 L773.935 691.352 L774.494 691.352 L775.053 691.352 L775.612 691.352 L776.172 691.352 L776.731 691.352 L777.29 691.352 L777.849 691.352 L778.409 691.352 L778.968 691.352 L779.527 691.352 L780.086 691.352 L780.646 691.352 L781.205 691.352 L781.764 691.352 L782.323 691.352 L782.883 691.352 L783.442 691.352 L784.001 691.352 L784.56 691.352 L785.12 691.352 L785.679 691.352 L786.238 691.352 L786.797 691.352 L787.357 691.352 L787.916 691.352 L788.475 691.352 L789.034 691.352 L789.594 691.352 L790.153 691.352 L790.712 691.352 L791.271 691.352 L791.831 691.352 L792.39 691.352 L792.949 691.352 L793.508 691.352 L794.068 691.352 L794.627 691.352 L795.186 691.352 L795.745 691.352 L796.305 691.352 L796.864 691.352 L797.423 691.352 L797.982 691.352 L798.542 691.352 L799.101 691.352 L799.66 691.352 L800.219 691.352 L800.779 691.352 L801.338 691.352 L801.897 691.352 L802.456 691.352 L803.016 691.352 L803.575 691.352 L804.134 691.352 L804.693 691.352 L805.253 691.352 L805.812 691.352 L806.371 691.352 L806.931 691.352 L807.49 691.352 L808.049 691.352 L808.608 691.352 L809.168 691.352 L809.727 691.352 L810.286 691.352 L810.845 691.352 L811.405 691.352 L811.964 691.352 L812.523 691.352 L813.082 691.352 L813.642 691.352 L814.201 691.352 L814.76 691.352 L815.319 691.352 L815.879 691.352 L816.438 691.352 L816.997 691.352 L817.556 691.352 L818.116 691.352 L818.675 691.352 L819.234 691.352 L819.793 691.352 L820.353 691.352 L820.912 691.352 L821.471 691.352 L822.03 691.352 L822.59 691.352 L823.149 691.352 L823.708 691.352 L824.267 691.352 L824.827 691.352 L825.386 691.352 L825.945 691.352 L826.504 691.352 L827.064 691.352 L827.623 691.352 L828.182 691.352 L828.741 691.352 L829.301 691.352 L829.86 691.352 L830.419 691.352 L830.978 691.352 L831.538 691.352 L832.097 691.352 L832.656 691.352 L833.215 691.352 L833.775 691.352 L834.334 691.352 L834.893 691.352 L835.452 691.352 L836.012 691.352 L836.571 691.352 L837.13 691.352 L837.689 691.352 L838.249 691.352 L838.808 691.352 L839.367 691.352 L839.926 691.352 L840.486 691.352 L841.045 691.352 L841.604 691.352 L842.163 691.352 L842.723 691.352 L843.282 691.352 L843.841 691.352 L844.4 691.352 L844.96 691.352 L845.519 691.352 L846.078 691.352 L846.637 691.352 L847.197 691.352 L847.756 691.352 L848.315 691.352 L848.874 691.352 L849.434 691.352 L849.993 691.352 L850.552 691.352 L851.111 691.352 L851.671 691.352 L852.23 691.352 L852.789 691.352 L853.348 691.352 L853.908 691.352 L854.467 691.352 L855.026 691.352 L855.585 691.352 L856.145 691.352 L856.704 691.352 L857.263 691.352 L857.822 691.352 L858.382 691.352 L858.941 691.352 L859.5 691.352 L860.059 691.352 L860.619 691.352 L861.178 691.352 L861.737 691.352 L862.296 691.352 L862.856 691.352 L863.415 691.352 L863.974 691.352 L864.533 691.352 L865.093 691.352 L865.652 691.352 L866.211 691.352 L866.77 691.352 L867.33 691.352 L867.889 691.352 L868.448 691.352 L869.007 691.352 L869.567 691.352 L870.126 691.352 L870.685 691.352 L871.244 691.352 L871.804 691.352 L872.363 691.352 L872.922 691.352 L873.481 691.352 L874.041 691.352 L874.6 691.352 L875.159 691.352 L875.718 691.352 L876.278 691.352 L876.837 691.352 L877.396 691.352 L877.955 691.352 L878.515 691.352 L879.074 691.352 L879.633 691.352 L880.192 691.352 L880.752 691.352 L881.311 691.352 L881.87 691.352 L882.429 691.352 L882.989 691.352 L883.548 691.352 L884.107 691.352 L884.666 691.352 L885.226 691.352 L885.785 691.352 L886.344 691.352 L886.903 691.352 L887.463 691.352 L888.022 691.352 L888.581 691.352 L889.14 691.352 L889.7 691.352 L890.259 691.352 L890.818 691.352 L891.377 691.352 L891.937 691.352 L892.496 691.352 L893.055 691.352 L893.614 691.352 L894.174 691.352 L894.733 691.352 L895.292 691.352 L895.851 691.352 L896.411 691.352 L896.97 691.352 L897.529 691.352 L898.088 691.352 L898.648 691.352 L899.207 691.352 L899.766 691.352 L900.325 691.352 L900.885 691.352 L901.444 691.352 L902.003 691.352 L902.562 691.352 L903.122 691.352 L903.681 691.352 L904.24 691.352 L904.799 691.352 L905.359 691.352 L905.918 691.352 L906.477 691.352 L907.036 691.352 L907.596 691.352 L908.155 691.352 L908.714 691.352 L909.273 691.352 L909.833 691.352 L910.392 691.352 L910.951 691.352 L911.51 691.352 L912.07 691.352 L912.629 691.352 L913.188 691.352 L913.747 691.352 L914.307 691.352 L914.866 691.352 L915.425 691.352 L915.984 691.352 L916.544 691.352 L917.103 691.352 L917.662 691.352 L918.221 691.352 L918.781 691.352 L919.34 691.352 L919.899 691.352 L920.458 691.352 L921.018 691.352 L921.577 691.352 L922.136 691.352 L922.695 691.352 L923.255 691.352 L923.814 691.352 L924.373 691.352 L924.932 691.352 L925.492 691.352 L926.051 691.352 L926.61 691.352 L927.169 691.352 L927.729 691.352 L928.288 691.352 L928.847 691.352 L929.406 691.352 L929.966 691.352 L930.525 691.352 L931.084 691.352 L931.644 691.352 L932.203 691.352 L932.762 691.352 L933.321 691.352 L933.881 691.352 L934.44 691.352 L934.999 691.352 L935.558 691.352 L936.118 691.352 L936.677 691.352 L937.236 691.352 L937.795 691.352 L938.355 691.352 L938.914 691.352 L939.473 691.352 L940.032 691.352 L940.592 691.352 L941.151 691.352 L941.71 691.352 L942.269 691.352 L942.829 691.352 L943.388 691.352 L943.947 691.352 L944.506 691.352 L945.066 691.352 L945.625 691.352 L946.184 691.352 L946.743 691.352 L947.303 691.352 L947.862 691.352 L948.421 691.352 L948.98 691.352 L949.54 691.352 L950.099 691.352 L950.658 691.352 L951.217 691.352 L951.777 691.352 L952.336 691.352 L952.895 691.352 L953.454 691.352 L954.014 691.352 L954.573 691.352 L955.132 691.352 L955.691 691.352 L956.251 691.352 L956.81 691.352 L957.369 691.352 L957.928 691.352 L958.488 691.352 L959.047 691.352 L959.606 691.352 L960.165 691.352 L960.725 691.352 L961.284 691.352 L961.843 691.352 L962.402 691.352 L962.962 691.352 L963.521 691.352 L964.08 691.352 L964.639 691.352 L965.199 691.352 L965.758 691.352 L966.317 691.352 L966.876 691.352 L967.436 691.352 L967.995 691.352 L968.554 691.352 L969.113 691.352 L969.673 691.352 L970.232 691.352 L970.791 691.352 L971.35 691.352 L971.91 691.352 L972.469 691.352 L973.028 691.352 L973.587 691.352 L974.147 691.352 L974.706 691.352 L975.265 691.352 L975.824 691.352 L976.384 691.352 L976.943 691.352 L977.502 691.352 L978.061 691.352 L978.621 691.352 L979.18 691.352 L979.739 691.352 L980.298 691.352 L980.858 691.352 L981.417 691.352 L981.976 691.352 L982.535 691.352 L983.095 691.352 L983.654 691.352 L984.213 691.352 L984.772 691.352 L985.332 691.352 L985.891 691.352 L986.45 691.352 L987.009 691.352 L987.569 691.352 L988.128 691.352 L988.687 691.352 L989.246 691.352 L989.806 691.352 L990.365 691.352 L990.924 691.352 L991.483 691.352 L992.043 691.352 L992.602 691.352 L993.161 691.352 L993.72 691.352 L994.28 691.352 L994.839 691.352 L995.398 691.352 L995.957 691.352 L996.517 691.352 L997.076 691.352 L997.635 691.352 L998.194 691.352 L998.754 691.352 L999.313 691.352 L999.872 691.352 L1000.43 691.352 L1000.99 691.352 L1001.55 691.352 L1002.11 691.352 L1002.67 691.352 L1003.23 691.352 L1003.79 691.352 L1004.35 691.352 L1004.91 691.352 L1005.46 691.352 L1006.02 691.352 L1006.58 691.352 L1007.14 691.352 L1007.7 691.352 L1008.26 691.352 L1008.82 691.352 L1009.38 691.352 L1009.94 691.352 L1010.5 691.352 L1011.06 691.352 L1011.62 691.352 L1012.18 691.352 L1012.73 691.352 L1013.29 691.352 L1013.85 691.352 L1014.41 691.352 L1014.97 691.352 L1015.53 691.352 L1016.09 691.352 L1016.65 691.352 L1017.21 691.352 L1017.77 691.352 L1018.33 691.352 L1018.89 691.352 L1019.45 691.352 L1020.01 691.352 L1020.56 691.352 L1021.12 691.352 L1021.68 691.352 L1022.24 691.352 L1022.8 691.352 L1023.36 691.352 L1023.92 691.352 L1024.48 691.352 L1025.04 691.352 L1025.6 691.352 L1026.16 691.352 L1026.72 691.352 L1027.28 691.352 L1027.83 691.352 L1028.39 691.352 L1028.95 691.352 L1029.51 691.352 L1030.07 691.352 L1030.63 691.352 L1031.19 691.352 L1031.75 691.352 L1032.31 691.352 L1032.87 691.352 L1033.43 691.352 L1033.99 691.352 L1034.55 691.352 L1035.1 691.352 L1035.66 691.352 L1036.22 691.352 L1036.78 691.352 L1037.34 691.352 L1037.9 691.352 L1038.46 691.352 L1039.02 691.352 L1039.58 691.352 L1040.14 691.352 L1040.7 691.352 L1041.26 691.352 L1041.82 691.352 L1042.38 691.352 L1042.93 691.352 L1043.49 691.352 L1044.05 691.352 L1044.61 691.352 L1045.17 691.352 L1045.73 691.352 L1046.29 691.352 L1046.85 691.352 L1047.41 691.352 L1047.97 691.352 L1048.53 691.352 L1049.09 691.352 L1049.65 691.352 L1050.2 691.352 L1050.76 691.352 L1051.32 691.352 L1051.88 691.352 L1052.44 691.352 L1053 691.352 L1053.56 691.352 L1054.12 691.352 L1054.68 691.352 L1055.24 691.352 L1055.8 691.352 L1056.36 691.352 L1056.92 691.352 L1057.48 691.352 L1058.03 691.352 L1058.59 691.352 L1059.15 691.352 L1059.71 691.352 L1060.27 691.352 L1060.83 691.352 L1061.39 691.352 L1061.95 691.352 L1062.51 691.352 L1063.07 691.352 L1063.63 691.352 L1064.19 691.352 L1064.75 691.352 L1065.3 691.352 L1065.86 691.352 L1066.42 691.352 L1066.98 691.352 L1067.54 691.352 L1068.1 691.352 L1068.66 691.352 L1069.22 691.352 L1069.78 691.352 L1070.34 691.352 L1070.9 691.352 L1071.46 691.352 L1072.02 691.352 L1072.57 691.352 L1073.13 691.352 L1073.69 691.352 L1074.25 691.352 L1074.81 691.352 L1075.37 691.352 L1075.93 691.352 L1076.49 691.352 L1077.05 691.352 L1077.61 691.352 L1078.17 691.352 L1078.73 691.352 L1079.29 691.352 L1079.85 691.352 L1080.4 691.352 L1080.96 691.352 L1081.52 691.352 L1082.08 691.352 L1082.64 691.352 L1083.2 691.352 L1083.76 691.352 L1084.32 691.352 L1084.88 691.352 L1085.44 691.352 L1086 691.352 L1086.56 691.352 L1087.12 691.352 L1087.67 691.352 L1088.23 691.352 L1088.79 691.352 L1089.35 691.352 L1089.91 691.352 L1090.47 691.352 L1091.03 691.352 L1091.59 691.352 L1092.15 691.352 L1092.71 691.352 L1093.27 691.352 L1093.83 691.352 L1094.39 691.352 L1094.94 691.352 L1095.5 691.352 L1096.06 691.352 L1096.62 691.352 L1097.18 691.352 L1097.74 691.352 L1098.3 691.352 L1098.86 691.352 L1099.42 691.352 L1099.98 691.352 L1100.54 691.352 L1101.1 691.352 L1101.66 691.352 L1102.22 691.352 L1102.77 691.352 L1103.33 691.352 L1103.89 691.352 L1104.45 691.352 L1105.01 691.352 L1105.57 691.352 L1106.13 691.352 L1106.69 691.352 L1107.25 691.352 L1107.81 691.352 L1108.37 691.352 L1108.93 691.352 L1109.49 691.352 L1110.04 691.352 L1110.6 691.352 L1111.16 691.352 L1111.72 691.352 L1112.28 691.352 L1112.84 691.352 L1113.4 691.352 L1113.96 691.352 L1114.52 691.352 L1115.08 691.352 L1115.64 691.352 L1116.2 691.352 L1116.76 691.352 L1117.31 691.352 L1117.87 691.352 L1118.43 691.352 L1118.99 691.352 L1119.55 691.352 L1120.11 691.352 L1120.67 691.352 L1121.23 691.352 L1121.79 691.352 L1122.35 691.352 L1122.91 691.352 L1123.47 691.352 L1124.03 691.352 L1124.59 691.352 L1125.14 691.352 L1125.7 691.352 L1126.26 691.352 L1126.82 691.352 L1127.38 691.352 L1127.94 691.352 L1128.5 691.352 L1129.06 691.352 L1129.62 691.352 L1130.18 691.352 L1130.74 691.352 L1131.3 691.352 L1131.86 691.352 L1132.41 691.352 L1132.97 691.352 L1133.53 691.352 L1134.09 691.352 L1134.65 691.352 L1135.21 691.352 L1135.77 691.352 L1136.33 691.352 L1136.89 691.352 L1137.45 691.352 L1138.01 691.352 L1138.57 691.352 L1139.13 691.352 L1139.68 691.352 L1140.24 691.352 L1140.8 691.352 L1141.36 691.352 L1141.92 691.352 L1142.48 691.352 L1143.04 691.352 L1143.6 691.352 L1144.16 691.352 L1144.72 691.352 L1145.28 691.352 L1145.84 691.352 L1146.4 691.352 L1146.96 691.352 L1147.51 691.352 L1148.07 691.352 L1148.63 691.352 L1149.19 691.352 L1149.75 691.352 L1150.31 691.352 L1150.87 691.352 L1151.43 691.352 L1151.99 691.352 L1152.55 691.352 L1153.11 691.352 L1153.67 691.352 L1154.23 691.352 L1154.78 691.352 L1155.34 691.352 L1155.9 691.352 L1156.46 691.352 L1157.02 691.352 L1157.58 691.352 L1158.14 691.352 L1158.7 691.352 L1159.26 691.352 L1159.82 691.352 L1160.38 691.352 L1160.94 691.352 L1161.5 691.352 L1162.05 691.352 L1162.61 691.352 L1163.17 691.352 L1163.73 691.352 L1164.29 691.352 L1164.85 691.352 L1165.41 691.352 L1165.97 691.352 L1166.53 691.352 L1167.09 691.352 L1167.65 691.352 L1168.21 691.352 L1168.77 691.352 L1169.33 691.352 L1169.88 691.352 L1170.44 691.352 L1171 691.352 L1171.56 691.352 L1172.12 691.352 L1172.68 691.352 L1173.24 691.352 L1173.8 691.352 L1174.36 691.352 L1174.92 691.352 L1175.48 691.352 L1176.04 691.352 L1176.6 691.352 L1177.15 691.352 L1177.71 691.352 L1178.27 691.352 L1178.83 691.352 L1179.39 691.352 L1179.95 691.352 L1180.51 691.352 L1181.07 691.352 L1181.63 691.352 L1182.19 691.352 L1182.75 691.352 L1183.31 691.352 L1183.87 691.352 L1184.43 691.352 L1184.98 691.352 L1185.54 691.352 L1186.1 691.352 L1186.66 691.352 L1187.22 691.352 L1187.78 691.352 L1188.34 691.352 L1188.9 691.352 L1189.46 691.352 L1190.02 691.352 L1190.58 691.352 L1191.14 691.352 L1191.7 691.352 L1192.25 691.352 L1192.81 691.352 L1193.37 691.352 L1193.93 691.352 L1194.49 691.352 L1195.05 691.352 L1195.61 691.352 L1196.17 691.352 L1196.73 691.352 L1197.29 691.352 L1197.85 691.352 L1198.41 691.352 L1198.97 691.352 L1199.52 691.352 L1200.08 691.352 L1200.64 691.352 L1201.2 691.352 L1201.76 691.352 L1202.32 691.352 L1202.88 691.352 L1203.44 691.352 L1204 691.352 L1204.56 691.352 L1205.12 691.352 L1205.68 691.352 L1206.24 691.352 L1206.8 691.352 L1207.35 691.352 L1207.91 691.352 L1208.47 691.352 L1209.03 691.352 L1209.59 691.352 L1210.15 691.352 L1210.71 691.352 L1211.27 691.352 L1211.83 691.352 L1212.39 691.352 L1212.95 691.352 L1213.51 691.352 L1214.07 691.352 L1214.62 691.352 L1215.18 691.352 L1215.74 691.352 L1216.3 691.352 L1216.86 691.352 L1217.42 691.352 L1217.98 691.352 L1218.54 691.352 L1219.1 691.352 L1219.66 691.352 L1220.22 691.352 L1220.78 691.352 L1221.34 691.352 L1221.89 691.352 L1222.45 691.352 L1223.01 691.352 L1223.57 691.352 L1224.13 691.352 L1224.69 691.352 L1225.25 691.352 L1225.81 691.352 L1226.37 691.352 L1226.93 691.352 L1227.49 691.352 L1228.05 691.352 L1228.61 691.352 L1229.17 691.352 L1229.72 691.352 L1230.28 691.352 L1230.84 691.352 L1231.4 691.352 L1231.96 691.352 L1232.52 691.352 L1233.08 691.352 L1233.64 691.352 L1234.2 691.352 L1234.76 691.352 L1235.32 691.352 L1235.88 691.352 L1236.44 691.352 L1236.99 691.352 L1237.55 691.352 L1238.11 691.352 L1238.67 691.352 L1239.23 691.352 L1239.79 691.352 L1240.35 691.352 L1240.91 691.352 L1241.47 691.352 L1242.03 691.352 L1242.59 691.352 L1243.15 691.352 L1243.71 691.352 L1244.26 691.352 L1244.82 691.352 L1245.38 691.352 L1245.94 691.352 L1246.5 691.352 L1247.06 691.352 L1247.62 691.352 L1248.18 691.352 L1248.74 691.352 L1249.3 691.352 L1249.86 691.352 L1250.42 691.352 L1250.98 691.352 L1251.54 691.352 L1252.09 691.352 L1252.65 691.352 L1253.21 691.352 L1253.77 691.352 L1254.33 691.352 L1254.89 691.352 L1255.45 691.352 L1256.01 691.352 L1256.57 691.352 L1257.13 691.352 L1257.69 691.352 L1258.25 691.352 L1258.81 691.352 L1259.36 691.352 L1259.92 691.352 L1260.48 691.352 L1261.04 691.352 L1261.6 691.352 L1262.16 691.352 L1262.72 691.352 L1263.28 691.352 L1263.84 691.352 L1264.4 691.352 L1264.96 691.352 L1265.52 691.352 L1266.08 691.352 L1266.63 691.352 L1267.19 691.352 L1267.75 691.352 L1268.31 691.352 L1268.87 691.352 L1269.43 691.352 L1269.99 691.352 L1270.55 691.352 L1271.11 691.352 L1271.67 691.352 L1272.23 691.352 L1272.79 691.352 L1273.35 691.352 L1273.91 691.352 L1274.46 691.352 L1275.02 691.352 L1275.58 691.352 L1276.14 691.352 L1276.7 691.352 L1277.26 691.352 L1277.82 691.352 L1278.38 691.352 L1278.94 691.352 L1279.5 691.352 L1280.06 691.352 L1280.62 691.352 L1281.18 691.352 L1281.73 691.352 L1282.29 691.352 L1282.85 691.352 L1283.41 691.352 L1283.97 691.352 L1284.53 691.352 L1285.09 691.352 L1285.65 691.352 L1286.21 691.352 L1286.77 691.352 L1287.33 691.352 L1287.89 691.352 L1288.45 691.352 L1289 691.352 L1289.56 691.352 L1290.12 691.352 L1290.68 691.352 L1291.24 691.352 L1291.8 691.352 L1292.36 691.352 L1292.92 691.352 L1293.48 691.352 L1294.04 691.352 L1294.6 691.352 L1295.16 691.352 L1295.72 691.352 L1296.28 691.352 L1296.83 691.352 L1297.39 691.352 L1297.95 691.352 L1298.51 691.352 L1299.07 691.352 L1299.63 691.352 L1300.19 691.352 L1300.75 691.352 L1301.31 691.352 L1301.87 691.352 L1302.43 691.352 L1302.99 691.352 L1303.55 691.352 L1304.1 691.352 L1304.66 691.352 L1305.22 691.352 L1305.78 691.352 L1306.34 691.352 L1306.9 691.352 L1307.46 691.352 L1308.02 691.352 L1308.58 691.352 L1309.14 691.352 L1309.7 691.352 L1310.26 691.352 L1310.82 691.352 L1311.38 691.352 L1311.93 691.352 L1312.49 691.352 L1313.05 691.352 L1313.61 691.352 L1314.17 691.352 L1314.73 691.352 L1315.29 691.352 L1315.85 691.352 L1316.41 691.352 L1316.97 691.352 L1317.53 691.352 L1318.09 691.352 L1318.65 691.352 L1319.2 691.352 L1319.76 691.352 L1320.32 691.352 L1320.88 691.352 L1321.44 691.352 L1322 691.352 L1322.56 691.352 L1323.12 691.352 L1323.68 691.352 L1324.24 691.352 L1324.8 691.352 L1325.36 691.352 L1325.92 691.352 L1326.47 691.352 L1327.03 691.352 L1327.59 691.352 L1328.15 691.352 L1328.71 691.352 L1329.27 691.352 L1329.83 691.352 L1330.39 691.352 L1330.95 691.352 L1331.51 691.352 L1332.07 691.352 L1332.63 691.352 L1333.19 691.352 L1333.75 691.352 L1334.3 691.352 L1334.86 691.352 L1335.42 691.352 L1335.98 691.352 L1336.54 691.352 L1337.1 691.352 L1337.66 691.352 L1338.22 691.352 L1338.78 691.352 L1339.34 691.352 L1339.9 691.352 L1340.46 691.352 L1341.02 691.352 L1341.57 691.352 L1342.13 691.352 L1342.69 691.352 L1343.25 691.352 L1343.81 691.352 L1344.37 691.352 L1344.93 691.352 L1345.49 691.352 L1346.05 691.352 L1346.61 691.352 L1347.17 691.352 L1347.73 691.352 L1348.29 691.352 L1348.84 691.352 L1349.4 691.352 L1349.96 691.352 L1350.52 691.352 L1351.08 691.352 L1351.64 691.352 L1352.2 691.352 L1352.76 691.352 L1353.32 691.352 L1353.88 691.352 L1354.44 691.352 L1355 691.352 L1355.56 691.352 L1356.12 691.352 L1356.67 691.352 L1357.23 691.352 L1357.79 691.352 L1358.35 691.352 L1358.91 691.352 L1359.47 691.352 L1360.03 691.352 L1360.59 691.352 L1361.15 691.352 L1361.71 691.352 L1362.27 691.352 L1362.83 691.352 L1363.39 691.352 L1363.94 691.352 L1364.5 691.352 L1365.06 691.352 L1365.62 691.352 L1366.18 691.352 L1366.74 691.352 L1367.3 691.352 L1367.86 691.352 L1368.42 691.352 L1368.98 691.352 L1369.54 691.352 L1370.1 691.352 L1370.66 691.352 L1371.21 691.352 L1371.77 691.352 L1372.33 691.352 L1372.89 691.352 L1373.45 691.352 L1374.01 691.352 L1374.57 691.352 L1375.13 691.352 L1375.69 691.352 L1376.25 691.352 L1376.81 691.352 L1377.37 691.352 L1377.93 691.352 L1378.49 691.352 L1379.04 691.352 L1379.6 691.352 L1380.16 691.352 L1380.72 691.352 L1381.28 691.352 L1381.84 691.352 L1382.4 691.352 L1382.96 691.352 L1383.52 691.352 L1384.08 691.352 L1384.64 691.352 L1385.2 691.352 L1385.76 691.352 L1386.31 691.352 L1386.87 691.352 L1387.43 691.352 L1387.99 691.352 L1388.55 691.352 L1389.11 691.352 L1389.67 691.352 L1390.23 691.352 L1390.79 691.352 L1391.35 691.352 L1391.91 691.352 L1392.47 691.352 L1393.03 691.352 L1393.58 691.352 L1394.14 691.352 L1394.7 691.352 L1395.26 691.352 L1395.82 691.352 L1396.38 691.352 L1396.94 691.352 L1397.5 691.352 L1398.06 691.352 L1398.62 691.352 L1399.18 691.352 L1399.74 691.352 L1400.3 691.352 L1400.86 691.352 L1401.41 691.352 L1401.97 691.352 L1402.53 691.352 L1403.09 691.352 L1403.65 691.352 L1404.21 691.352 L1404.77 691.352 L1405.33 691.352 L1405.89 691.352 L1406.45 691.352 L1407.01 691.352 L1407.57 691.352 L1408.13 691.352 L1408.68 691.352 L1409.24 691.352 L1409.8 691.352 L1410.36 691.352 L1410.92 691.352 L1411.48 691.352 L1412.04 691.352 L1412.6 691.352 L1413.16 691.352 L1413.72 691.352 L1414.28 691.352 L1414.84 691.352 L1415.4 691.352 L1415.95 691.352 L1416.51 691.352 L1417.07 691.352 L1417.63 691.352 L1418.19 691.352 L1418.75 691.352 L1419.31 691.352 L1419.87 691.352 L1420.43 691.352 L1420.99 691.352 L1421.55 691.352 L1422.11 691.352 L1422.67 691.352 L1423.23 691.352 L1423.78 691.352 L1424.34 691.352 L1424.9 691.352 L1425.46 691.352 L1426.02 691.352 L1426.58 691.352 L1427.14 691.352 L1427.7 691.352 L1428.26 691.352 L1428.82 691.352 L1429.38 691.352 L1429.94 691.352 L1430.5 691.352 L1431.05 691.352 L1431.61 691.352 L1432.17 691.352 L1432.73 691.352 L1433.29 691.352 L1433.85 691.352 L1434.41 691.352 L1434.97 691.352 L1435.53 691.352 L1436.09 691.352 L1436.65 691.352 L1437.21 691.352 L1437.77 691.352 L1438.33 691.352 L1438.88 691.352 L1439.44 691.352 L1440 691.352 L1440.56 691.352 L1441.12 691.352 L1441.68 691.352 L1442.24 691.352 L1442.8 691.352 L1443.36 691.352 L1443.92 691.352 L1444.48 691.352 L1445.04 691.352 L1445.6 691.352 L1446.15 691.352 L1446.71 691.352 L1447.27 691.352 L1447.83 691.352 L1448.39 691.352 L1448.95 691.352 L1449.51 691.352 L1450.07 691.352 L1450.63 691.352 L1451.19 691.352 L1451.75 691.352 L1452.31 691.352 L1452.87 691.352 L1453.42 691.352 L1453.98 691.352 L1454.54 691.352 L1455.1 691.352 L1455.66 691.352 L1456.22 691.352 L1456.78 691.352 L1457.34 691.352 L1457.9 691.352 L1458.46 691.352 L1459.02 691.352 L1459.58 691.352 L1460.14 691.352 L1460.7 691.352 L1461.25 691.352 L1461.81 691.352 L1462.37 691.352 L1462.93 691.352 L1463.49 691.352 L1464.05 691.352 L1464.61 691.352 L1465.17 691.352 L1465.73 691.352 L1466.29 691.352 L1466.85 691.352 L1467.41 691.352 L1467.97 691.352 L1468.52 691.352 L1469.08 691.352 L1469.64 691.352 L1470.2 691.352 L1470.76 691.352 L1471.32 691.352 L1471.88 691.352 L1472.44 691.352 L1473 691.352 L1473.56 691.352 L1474.12 691.352 L1474.68 691.352 L1475.24 691.352 L1475.79 691.352 L1476.35 691.352 L1476.91 691.352 L1477.47 691.352 L1478.03 691.352 L1478.59 691.352 L1479.15 691.352 L1479.71 691.352 L1480.27 691.352 L1480.83 691.352 L1481.39 691.352 L1481.95 691.352 L1482.51 691.352 L1483.07 691.352 L1483.62 691.352 L1484.18 691.352 L1484.74 691.352 L1485.3 691.352 L1485.86 691.352 L1486.42 691.352 L1486.98 691.352 L1487.54 691.352 L1488.1 691.352 L1488.66 691.352 L1489.22 691.352 L1489.78 691.352 L1490.34 691.352 L1490.89 691.352 L1491.45 691.352 L1492.01 691.352 L1492.57 691.352 L1493.13 691.352 L1493.69 691.352 L1494.25 691.352 L1494.81 691.352 L1495.37 691.352 L1495.93 691.352 L1496.49 691.352 L1497.05 691.352 L1497.61 691.352 L1498.16 691.352 L1498.72 691.352 L1499.28 691.352 L1499.84 691.352 L1500.4 691.352 L1500.96 691.352 L1501.52 691.352 L1502.08 691.352 L1502.64 691.352 L1503.2 691.352 L1503.76 691.352 L1504.32 691.352 L1504.88 691.352 L1505.44 691.352 L1505.99 691.352 L1506.55 691.352 L1507.11 691.352 L1507.67 691.352 L1508.23 691.352 L1508.79 691.352 L1509.35 691.352 L1509.91 691.352 L1510.47 691.352 L1511.03 691.352 L1511.59 691.352 L1512.15 691.352 L1512.71 691.352 L1513.26 691.352 L1513.82 691.352 L1514.38 691.352 L1514.94 691.352 L1515.5 691.352 L1516.06 691.352 L1516.62 691.352 L1517.18 691.352 L1517.74 691.352 L1518.3 691.352 L1518.86 691.352 L1519.42 691.352 L1519.98 691.352 L1520.53 691.352 L1521.09 691.352 L1521.65 691.352 L1522.21 691.352 L1522.77 691.352 L1523.33 691.352 L1523.89 691.352 L1524.45 691.352 L1525.01 691.352 L1525.57 691.352 L1526.13 691.352 L1526.69 691.352 L1527.25 691.352 L1527.81 691.352 L1528.36 691.352 L1528.92 691.352 L1529.48 691.352 L1530.04 691.352 L1530.6 691.352 L1531.16 691.352 L1531.72 691.352 L1532.28 691.352 L1532.84 691.352 L1533.4 691.352 L1533.96 691.352 L1534.52 691.352 L1535.08 691.352 L1535.63 691.352 L1536.19 691.352 L1536.75 691.352 L1537.31 691.352 L1537.87 691.352 L1538.43 691.352 L1538.99 691.352 L1539.55 691.352 L1540.11 691.352 L1540.67 691.352 L1541.23 691.352 L1541.79 691.352 L1542.35 691.352 L1542.9 691.352 L1543.46 691.352 L1544.02 691.352 L1544.58 691.352 L1545.14 691.352 L1545.7 691.352 L1546.26 691.352 L1546.82 691.352 L1547.38 691.352 L1547.94 691.352 L1548.5 691.352 L1549.06 691.352 L1549.62 691.352 L1550.18 691.352 L1550.73 691.352 L1551.29 691.352 L1551.85 691.352 L1552.41 691.352 L1552.97 691.352 L1553.53 691.352 L1554.09 691.352 L1554.65 691.352 L1555.21 691.352 L1555.77 691.352 L1556.33 691.352 L1556.89 691.352 L1557.45 691.352 L1558 691.352 L1558.56 691.352 L1559.12 691.352 L1559.68 691.352 L1560.24 691.352 L1560.8 691.352 L1561.36 691.352 L1561.92 691.352 L1562.48 691.352 L1563.04 691.352 L1563.6 691.352 L1564.16 691.352 L1564.72 691.352 L1565.28 691.352 L1565.83 691.352 L1566.39 691.352 L1566.95 691.352 L1567.51 691.352 L1568.07 691.352 L1568.63 691.352 L1569.19 691.352 L1569.75 691.352 L1570.31 691.352 L1570.87 691.352 L1571.43 691.352 L1571.99 691.352 L1572.55 691.352 L1573.1 691.352 L1573.66 691.352 L1574.22 691.352 L1574.78 691.352 L1575.34 691.352 L1575.9 691.352 L1576.46 691.352 L1577.02 691.352 L1577.58 691.352 L1578.14 691.352 L1578.7 691.352 L1579.26 691.352 L1579.82 691.352 L1580.37 691.352 L1580.93 691.352 L1581.49 691.352 L1582.05 691.352 L1582.61 691.352 L1583.17 691.352 L1583.73 691.352 L1584.29 691.352 L1584.85 691.352 L1585.41 691.352 L1585.97 691.352 L1586.53 691.352 L1587.09 691.352 L1587.65 691.352 L1588.2 691.352 L1588.76 691.352 L1589.32 691.352 L1589.88 691.352 L1590.44 691.352 L1591 691.352 L1591.56 691.352 L1592.12 691.352 L1592.68 691.352 L1593.24 691.352 L1593.8 691.352 L1594.36 691.352 L1594.92 691.352 L1595.47 691.352 L1596.03 691.352 L1596.59 691.352 L1597.15 691.352 L1597.71 691.352 L1598.27 691.352 L1598.83 691.352 L1599.39 691.352 L1599.95 691.352 L1600.51 691.352 L1601.07 691.352 L1601.63 691.352 L1602.19 691.352 L1602.74 691.352 L1603.3 691.352 L1603.86 691.352 L1604.42 691.352 L1604.98 691.352 L1605.54 691.352 L1606.1 691.352 L1606.66 691.352 L1607.22 691.352 L1607.78 691.352 L1608.34 691.352 L1608.9 691.352 L1609.46 691.352 L1610.02 691.352 L1610.57 691.352 L1611.13 691.352 L1611.69 691.352 L1612.25 691.352 L1612.81 691.352 L1613.37 691.352 L1613.93 691.352 L1614.49 691.352 L1615.05 691.352 L1615.61 691.352 L1616.17 691.352 L1616.73 691.352 L1617.29 691.352 L1617.84 691.352 L1618.4 691.352 L1618.96 691.352 L1619.52 691.352 L1620.08 691.352 L1620.64 691.352 L1621.2 691.352 L1621.76 691.352 L1622.32 691.352 L1622.88 691.352 L1623.44 691.352 L1624 691.352 L1624.56 691.352 L1625.11 691.352 L1625.67 691.352 L1626.23 691.352 L1626.79 691.352 L1627.35 691.352 L1627.91 691.352 L1628.47 691.352 L1629.03 691.352 L1629.59 691.352 L1630.15 691.352 L1630.71 691.352 L1631.27 691.352 L1631.83 691.352 L1632.39 691.352 L1632.94 691.352 L1633.5 691.352 L1634.06 691.352 L1634.62 691.352 L1635.18 691.352 L1635.74 691.352 L1636.3 691.352 L1636.86 691.352 L1637.42 691.352 L1637.98 691.352 L1638.54 691.352 L1639.1 691.352 L1639.66 691.352 L1640.21 691.352 L1640.77 691.352 L1641.33 691.352 L1641.89 691.352 L1642.45 691.352 L1643.01 691.352 L1643.57 691.352 L1644.13 691.352 L1644.69 691.352 L1645.25 691.352 L1645.81 691.352 L1646.37 691.352 L1646.93 691.352 L1647.48 691.352 L1648.04 691.352 L1648.6 691.352 L1649.16 691.352 L1649.72 691.352 L1650.28 691.352 L1650.84 691.352 L1651.4 691.352 L1651.96 691.352 L1652.52 691.352 L1653.08 691.352 L1653.64 691.352 L1654.2 691.352 L1654.76 691.352 L1655.31 691.352 L1655.87 691.352 L1656.43 691.352 L1656.99 691.352 L1657.55 691.352 L1658.11 691.352 L1658.67 691.352 L1659.23 691.352 L1659.79 691.352 L1660.35 691.352 L1660.91 691.352 L1661.47 691.352 L1662.03 691.352 L1662.58 691.352 L1663.14 691.352 L1663.7 691.352 L1664.26 691.352 L1664.82 691.352 L1665.38 691.352 L1665.94 691.352 L1666.5 691.352 L1667.06 691.352 L1667.62 691.352 L1668.18 691.352 L1668.74 691.352 L1669.3 691.352 L1669.85 691.352 L1670.41 691.352 L1670.97 691.352 L1671.53 691.352 L1672.09 691.352 L1672.65 691.352 L1673.21 691.352 L1673.77 691.352 L1674.33 691.352 L1674.89 691.352 L1675.45 691.352 L1676.01 691.352 L1676.57 691.352 L1677.13 691.352 L1677.68 691.352 L1678.24 691.352 L1678.8 691.352 L1679.36 691.352 L1679.92 691.352 L1680.48 691.352 L1681.04 691.352 L1681.6 691.352 L1682.16 691.352 L1682.72 691.352 L1683.28 691.352 L1683.84 691.352 L1684.4 691.352 L1684.95 691.352 L1685.51 691.352 L1686.07 691.352 L1686.63 691.352 L1687.19 691.352 L1687.75 691.352 L1688.31 691.352 L1688.87 691.352 L1689.43 691.352 L1689.99 691.352 L1690.55 691.352 L1691.11 691.352 L1691.67 691.352 L1692.23 691.352 L1692.78 691.352 L1693.34 691.352 L1693.9 691.352 L1694.46 691.352 L1695.02 691.352 L1695.58 691.352 L1696.14 691.352 L1696.7 691.352 L1697.26 691.352 L1697.82 691.352 L1698.38 691.352 L1698.94 691.352 L1699.5 691.352 L1700.05 691.352 L1700.61 691.352 L1701.17 691.352 L1701.73 691.352 L1702.29 691.352 L1702.85 691.352 L1703.41 691.352 L1703.97 691.352 L1704.53 691.352 L1705.09 691.352 L1705.65 691.352 L1706.21 691.352 L1706.77 691.352 L1707.32 691.352 L1707.88 691.352 L1708.44 691.352 L1709 691.352 L1709.56 691.352 L1710.12 691.352 L1710.68 691.352 L1711.24 691.352 L1711.8 691.352 L1712.36 691.352 L1712.92 691.352 L1713.48 691.352 L1714.04 691.352 L1714.6 691.352 L1715.15 691.352 L1715.71 691.352 L1716.27 691.352 L1716.83 691.352 L1717.39 691.352 L1717.95 691.352 L1718.51 691.352 L1719.07 691.352 L1719.63 691.352 L1720.19 691.352 L1720.75 691.352 L1721.31 691.352 L1721.87 691.352 L1722.42 691.352 L1722.98 691.352 L1723.54 691.352 L1724.1 691.352 L1724.66 691.352 L1725.22 691.352 L1725.78 691.352 L1726.34 691.352 L1726.9 691.352 L1727.46 691.352 L1728.02 691.352 L1728.58 691.352 L1729.14 691.352 L1729.69 691.352 L1730.25 691.352 L1730.81 691.352 L1731.37 691.352 L1731.93 691.352 L1732.49 691.352 L1733.05 691.352 L1733.61 691.352 L1734.17 691.352 L1734.73 691.352 L1735.29 691.352 L1735.85 691.352 L1736.41 691.352 L1736.97 691.352 L1737.52 691.352 L1738.08 691.352 L1738.64 691.352 L1739.2 691.352 L1739.76 691.352 L1740.32 691.352 L1740.88 691.352 L1741.44 691.352 L1742 691.352 L1742.56 691.352 L1743.12 691.352 L1743.68 691.352 L1744.24 691.352 L1744.79 691.352 L1745.35 691.352 L1745.91 691.352 L1746.47 691.352 L1747.03 691.352 L1747.59 691.352 L1748.15 691.352 L1748.71 691.352 L1749.27 691.352 L1749.83 691.352 L1750.39 691.352 L1750.95 691.352 L1751.51 691.352 L1752.06 691.352 L1752.62 691.352 L1753.18 691.352 L1753.74 691.352 L1754.3 691.352 L1754.86 691.352 L1755.42 691.352 L1755.98 691.352 L1756.54 691.352 L1757.1 691.352 L1757.66 691.352 L1758.22 691.352 L1758.78 691.352 L1759.34 691.352 L1759.89 691.352 L1760.45 691.352 L1761.01 691.352 L1761.57 691.352 L1762.13 691.352 L1762.69 691.352 L1763.25 691.352 L1763.81 691.352 L1764.37 691.352 L1764.93 691.352 L1765.49 691.352 L1766.05 691.352 L1766.61 691.352 L1767.16 691.352 L1767.72 691.352 L1768.28 691.352 L1768.84 691.352 L1769.4 691.352 L1769.96 691.352 L1770.52 691.352 L1771.08 691.352 L1771.64 691.352 L1772.2 691.352 L1772.76 691.352 L1773.32 691.352 L1773.88 691.352 L1774.43 691.352 L1774.99 691.352 L1775.55 691.352 L1776.11 691.352 L1776.67 691.352 L1777.23 691.352 L1777.79 691.352 L1778.35 691.352 L1778.91 691.352 L1779.47 691.352 L1780.03 691.352 L1780.59 691.352 L1781.15 691.352 L1781.71 691.352 L1782.26 691.352 L1782.82 691.352 L1783.38 691.352 L1783.94 691.352 L1784.5 691.352 L1785.06 691.352 L1785.62 691.352 L1786.18 691.352 L1786.74 691.352 L1787.3 691.352 L1787.86 691.352 L1788.42 691.352 L1788.98 691.352 L1789.53 691.352 L1790.09 691.352 L1790.65 691.352 L1791.21 691.352 L1791.77 691.352 L1792.33 691.352 L1792.89 691.352 L1793.45 691.352 L1794.01 691.352 L1794.57 691.352 L1795.13 691.352 L1795.69 691.352 L1796.25 691.352 L1796.8 691.352 L1797.36 691.352 L1797.92 691.352 L1798.48 691.352 L1799.04 691.352 L1799.6 691.352 L1800.16 691.352 L1800.72 691.352 L1801.28 691.352 L1801.84 691.352 L1802.4 691.352 L1802.96 691.352 L1803.52 691.352 L1804.08 691.352 L1804.63 691.352 L1805.19 691.352 L1805.75 691.352 L1806.31 691.352 L1806.87 691.352 L1807.43 691.352 L1807.99 691.352 L1808.55 691.352 L1809.11 691.352 L1809.67 691.352 L1810.23 691.352 L1810.79 691.352 L1811.35 691.352 L1811.9 691.352 L1812.46 691.352 L1813.02 691.352 L1813.58 691.352 L1814.14 691.352 L1814.7 691.352 L1815.26 691.352 L1815.82 691.352 L1816.38 691.352 L1816.94 691.352 L1817.5 691.352 L1818.06 691.352 L1818.62 691.352 L1819.18 691.352 L1819.73 691.352 L1820.29 691.352 L1820.85 691.352 L1821.41 691.352 L1821.97 691.352 L1822.53 691.352 L1823.09 691.352 L1823.65 691.352 L1824.21 691.352 L1824.77 691.352 L1825.33 691.352 L1825.89 691.352 L1826.45 691.352 L1827 691.352 L1827.56 691.352 L1828.12 691.352 L1828.68 691.352 L1829.24 691.352 L1829.8 691.352 L1830.36 691.352 L1830.92 691.352 L1831.48 691.352 L1832.04 691.352 L1832.6 691.352 L1833.16 691.352 L1833.72 691.352 L1834.27 691.352 L1834.83 691.352 L1835.39 691.352 L1835.95 691.352 L1836.51 691.352 L1837.07 691.352 L1837.63 691.352 L1838.19 691.352 L1838.19 682.833 L1837.63 682.833 L1837.07 682.833 L1836.51 682.833 L1835.95 682.833 L1835.39 682.833 L1834.83 682.833 L1834.27 682.833 L1833.72 682.833 L1833.16 682.833 L1832.6 682.833 L1832.04 682.833 L1831.48 682.833 L1830.92 682.833 L1830.36 682.833 L1829.8 682.833 L1829.24 682.833 L1828.68 682.833 L1828.12 682.833 L1827.56 682.833 L1827 682.833 L1826.45 682.833 L1825.89 682.833 L1825.33 682.833 L1824.77 682.833 L1824.21 682.833 L1823.65 682.833 L1823.09 682.833 L1822.53 682.833 L1821.97 682.833 L1821.41 682.833 L1820.85 682.833 L1820.29 682.833 L1819.73 682.833 L1819.18 682.833 L1818.62 682.833 L1818.06 682.833 L1817.5 682.833 L1816.94 682.833 L1816.38 682.833 L1815.82 682.833 L1815.26 682.833 L1814.7 682.833 L1814.14 682.833 L1813.58 682.833 L1813.02 682.833 L1812.46 682.833 L1811.9 682.833 L1811.35 682.833 L1810.79 682.833 L1810.23 682.833 L1809.67 682.833 L1809.11 682.833 L1808.55 682.833 L1807.99 682.833 L1807.43 682.833 L1806.87 682.833 L1806.31 682.833 L1805.75 682.833 L1805.19 682.833 L1804.63 682.833 L1804.08 682.833 L1803.52 682.833 L1802.96 682.833 L1802.4 682.833 L1801.84 682.833 L1801.28 682.833 L1800.72 682.833 L1800.16 682.833 L1799.6 682.833 L1799.04 682.833 L1798.48 682.833 L1797.92 682.833 L1797.36 682.833 L1796.8 682.833 L1796.25 682.833 L1795.69 682.833 L1795.13 682.833 L1794.57 682.833 L1794.01 682.833 L1793.45 682.833 L1792.89 682.833 L1792.33 682.833 L1791.77 682.833 L1791.21 682.833 L1790.65 682.833 L1790.09 682.833 L1789.53 682.833 L1788.98 682.833 L1788.42 682.833 L1787.86 682.833 L1787.3 682.833 L1786.74 682.833 L1786.18 682.833 L1785.62 682.833 L1785.06 682.833 L1784.5 682.833 L1783.94 682.833 L1783.38 682.833 L1782.82 682.833 L1782.26 682.833 L1781.71 682.833 L1781.15 682.833 L1780.59 682.833 L1780.03 682.833 L1779.47 682.833 L1778.91 682.833 L1778.35 682.833 L1777.79 682.833 L1777.23 682.833 L1776.67 682.833 L1776.11 682.833 L1775.55 682.833 L1774.99 682.833 L1774.43 682.833 L1773.88 682.833 L1773.32 682.833 L1772.76 682.833 L1772.2 682.833 L1771.64 682.833 L1771.08 682.833 L1770.52 682.833 L1769.96 682.833 L1769.4 682.833 L1768.84 682.833 L1768.28 682.833 L1767.72 682.833 L1767.16 682.833 L1766.61 682.833 L1766.05 682.833 L1765.49 682.833 L1764.93 682.833 L1764.37 682.833 L1763.81 682.833 L1763.25 682.833 L1762.69 682.833 L1762.13 682.833 L1761.57 682.833 L1761.01 682.833 L1760.45 682.833 L1759.89 682.833 L1759.34 682.833 L1758.78 682.833 L1758.22 682.833 L1757.66 682.833 L1757.1 682.833 L1756.54 682.833 L1755.98 682.833 L1755.42 682.833 L1754.86 682.833 L1754.3 682.833 L1753.74 682.833 L1753.18 682.833 L1752.62 682.833 L1752.06 682.833 L1751.51 682.833 L1750.95 682.833 L1750.39 682.833 L1749.83 682.833 L1749.27 682.833 L1748.71 682.833 L1748.15 682.833 L1747.59 682.833 L1747.03 682.833 L1746.47 682.833 L1745.91 682.833 L1745.35 682.833 L1744.79 682.833 L1744.24 682.833 L1743.68 682.833 L1743.12 682.833 L1742.56 682.833 L1742 682.833 L1741.44 682.833 L1740.88 682.833 L1740.32 682.833 L1739.76 682.833 L1739.2 682.833 L1738.64 682.833 L1738.08 682.833 L1737.52 682.833 L1736.97 682.833 L1736.41 682.833 L1735.85 682.833 L1735.29 682.833 L1734.73 682.833 L1734.17 682.833 L1733.61 682.833 L1733.05 682.833 L1732.49 682.833 L1731.93 682.833 L1731.37 682.833 L1730.81 682.833 L1730.25 682.833 L1729.69 682.833 L1729.14 682.833 L1728.58 682.833 L1728.02 682.833 L1727.46 682.833 L1726.9 682.833 L1726.34 682.833 L1725.78 682.833 L1725.22 682.833 L1724.66 682.833 L1724.1 682.833 L1723.54 682.833 L1722.98 682.833 L1722.42 682.833 L1721.87 682.833 L1721.31 682.833 L1720.75 682.833 L1720.19 682.833 L1719.63 682.833 L1719.07 682.833 L1718.51 682.833 L1717.95 682.833 L1717.39 682.833 L1716.83 682.833 L1716.27 682.833 L1715.71 682.833 L1715.15 682.833 L1714.6 682.833 L1714.04 682.833 L1713.48 682.833 L1712.92 682.833 L1712.36 682.833 L1711.8 682.833 L1711.24 682.833 L1710.68 682.833 L1710.12 682.833 L1709.56 682.833 L1709 682.833 L1708.44 682.833 L1707.88 682.833 L1707.32 682.833 L1706.77 682.833 L1706.21 682.833 L1705.65 682.833 L1705.09 682.833 L1704.53 682.833 L1703.97 682.833 L1703.41 682.833 L1702.85 682.833 L1702.29 682.833 L1701.73 682.833 L1701.17 682.833 L1700.61 682.833 L1700.05 682.833 L1699.5 682.833 L1698.94 682.833 L1698.38 682.833 L1697.82 682.833 L1697.26 682.833 L1696.7 682.833 L1696.14 682.833 L1695.58 682.833 L1695.02 682.833 L1694.46 682.833 L1693.9 682.833 L1693.34 682.833 L1692.78 682.833 L1692.23 682.833 L1691.67 682.833 L1691.11 682.833 L1690.55 682.833 L1689.99 682.833 L1689.43 682.833 L1688.87 682.833 L1688.31 682.833 L1687.75 682.833 L1687.19 682.833 L1686.63 682.833 L1686.07 682.833 L1685.51 682.833 L1684.95 682.833 L1684.4 682.833 L1683.84 682.833 L1683.28 682.833 L1682.72 682.833 L1682.16 682.833 L1681.6 682.833 L1681.04 682.833 L1680.48 682.833 L1679.92 682.833 L1679.36 682.833 L1678.8 682.833 L1678.24 682.833 L1677.68 682.833 L1677.13 682.833 L1676.57 682.833 L1676.01 682.833 L1675.45 682.833 L1674.89 682.833 L1674.33 682.833 L1673.77 682.833 L1673.21 682.833 L1672.65 682.833 L1672.09 682.833 L1671.53 682.833 L1670.97 682.833 L1670.41 682.833 L1669.85 682.833 L1669.3 682.833 L1668.74 682.833 L1668.18 682.833 L1667.62 682.833 L1667.06 682.833 L1666.5 682.833 L1665.94 682.833 L1665.38 682.833 L1664.82 682.833 L1664.26 682.833 L1663.7 682.833 L1663.14 682.833 L1662.58 682.833 L1662.03 682.833 L1661.47 682.833 L1660.91 682.833 L1660.35 682.833 L1659.79 682.833 L1659.23 682.833 L1658.67 682.833 L1658.11 682.833 L1657.55 682.833 L1656.99 682.833 L1656.43 682.833 L1655.87 682.833 L1655.31 682.833 L1654.76 682.833 L1654.2 682.833 L1653.64 682.833 L1653.08 682.833 L1652.52 682.833 L1651.96 682.833 L1651.4 682.833 L1650.84 682.833 L1650.28 682.833 L1649.72 682.833 L1649.16 682.833 L1648.6 682.833 L1648.04 682.833 L1647.48 682.833 L1646.93 682.833 L1646.37 682.833 L1645.81 682.833 L1645.25 682.833 L1644.69 682.833 L1644.13 682.833 L1643.57 682.833 L1643.01 682.833 L1642.45 682.833 L1641.89 682.833 L1641.33 682.833 L1640.77 682.833 L1640.21 682.833 L1639.66 682.833 L1639.1 682.833 L1638.54 682.833 L1637.98 682.833 L1637.42 682.833 L1636.86 682.833 L1636.3 682.833 L1635.74 682.833 L1635.18 682.833 L1634.62 682.833 L1634.06 682.833 L1633.5 682.833 L1632.94 682.833 L1632.39 682.833 L1631.83 682.833 L1631.27 682.833 L1630.71 682.833 L1630.15 682.833 L1629.59 682.833 L1629.03 682.833 L1628.47 682.833 L1627.91 682.833 L1627.35 682.833 L1626.79 682.833 L1626.23 682.833 L1625.67 682.833 L1625.11 682.833 L1624.56 682.833 L1624 682.833 L1623.44 682.833 L1622.88 682.833 L1622.32 682.833 L1621.76 682.833 L1621.2 682.833 L1620.64 682.833 L1620.08 682.833 L1619.52 682.833 L1618.96 682.833 L1618.4 682.833 L1617.84 682.833 L1617.29 682.833 L1616.73 682.833 L1616.17 682.833 L1615.61 682.833 L1615.05 682.833 L1614.49 682.833 L1613.93 682.833 L1613.37 682.833 L1612.81 682.833 L1612.25 682.833 L1611.69 682.833 L1611.13 682.833 L1610.57 682.833 L1610.02 682.833 L1609.46 682.833 L1608.9 682.833 L1608.34 682.833 L1607.78 682.833 L1607.22 682.833 L1606.66 682.833 L1606.1 682.833 L1605.54 682.833 L1604.98 682.833 L1604.42 682.833 L1603.86 682.833 L1603.3 682.833 L1602.74 682.833 L1602.19 682.833 L1601.63 682.833 L1601.07 682.833 L1600.51 682.833 L1599.95 682.833 L1599.39 682.833 L1598.83 682.833 L1598.27 682.833 L1597.71 682.833 L1597.15 682.833 L1596.59 682.833 L1596.03 682.833 L1595.47 682.833 L1594.92 682.833 L1594.36 682.833 L1593.8 682.833 L1593.24 682.833 L1592.68 682.833 L1592.12 682.833 L1591.56 682.833 L1591 682.833 L1590.44 682.833 L1589.88 682.833 L1589.32 682.833 L1588.76 682.833 L1588.2 682.833 L1587.65 682.833 L1587.09 682.833 L1586.53 682.833 L1585.97 682.833 L1585.41 682.833 L1584.85 682.833 L1584.29 682.833 L1583.73 682.833 L1583.17 682.833 L1582.61 682.833 L1582.05 682.833 L1581.49 682.833 L1580.93 682.833 L1580.37 682.833 L1579.82 682.833 L1579.26 682.833 L1578.7 682.833 L1578.14 682.833 L1577.58 682.833 L1577.02 682.833 L1576.46 682.833 L1575.9 682.833 L1575.34 682.833 L1574.78 682.833 L1574.22 682.833 L1573.66 682.833 L1573.1 682.833 L1572.55 682.833 L1571.99 682.833 L1571.43 682.833 L1570.87 682.833 L1570.31 682.833 L1569.75 682.833 L1569.19 682.833 L1568.63 682.833 L1568.07 682.833 L1567.51 682.833 L1566.95 682.833 L1566.39 682.833 L1565.83 682.833 L1565.28 682.833 L1564.72 682.833 L1564.16 682.833 L1563.6 682.833 L1563.04 682.833 L1562.48 682.833 L1561.92 682.833 L1561.36 682.833 L1560.8 682.833 L1560.24 682.833 L1559.68 682.833 L1559.12 682.833 L1558.56 682.833 L1558 682.833 L1557.45 682.833 L1556.89 682.833 L1556.33 682.833 L1555.77 682.833 L1555.21 682.833 L1554.65 682.833 L1554.09 682.833 L1553.53 682.833 L1552.97 682.833 L1552.41 682.833 L1551.85 682.833 L1551.29 682.833 L1550.73 682.833 L1550.18 682.833 L1549.62 682.833 L1549.06 682.833 L1548.5 682.833 L1547.94 682.833 L1547.38 682.833 L1546.82 682.833 L1546.26 682.833 L1545.7 682.833 L1545.14 682.833 L1544.58 682.833 L1544.02 682.833 L1543.46 682.833 L1542.9 682.833 L1542.35 682.833 L1541.79 682.833 L1541.23 682.833 L1540.67 682.833 L1540.11 682.833 L1539.55 682.833 L1538.99 682.833 L1538.43 682.833 L1537.87 682.833 L1537.31 682.833 L1536.75 682.833 L1536.19 682.833 L1535.63 682.833 L1535.08 682.833 L1534.52 682.833 L1533.96 682.833 L1533.4 682.833 L1532.84 682.833 L1532.28 682.833 L1531.72 682.833 L1531.16 682.833 L1530.6 682.833 L1530.04 682.833 L1529.48 682.833 L1528.92 682.833 L1528.36 682.833 L1527.81 682.833 L1527.25 682.833 L1526.69 682.833 L1526.13 682.833 L1525.57 682.833 L1525.01 682.833 L1524.45 682.833 L1523.89 682.833 L1523.33 682.833 L1522.77 682.833 L1522.21 682.833 L1521.65 682.833 L1521.09 682.833 L1520.53 682.833 L1519.98 682.833 L1519.42 682.833 L1518.86 682.833 L1518.3 682.833 L1517.74 682.833 L1517.18 682.833 L1516.62 682.833 L1516.06 682.833 L1515.5 682.833 L1514.94 682.833 L1514.38 682.833 L1513.82 682.833 L1513.26 682.833 L1512.71 682.833 L1512.15 682.833 L1511.59 682.833 L1511.03 682.833 L1510.47 682.833 L1509.91 682.833 L1509.35 682.833 L1508.79 682.833 L1508.23 682.833 L1507.67 682.833 L1507.11 682.833 L1506.55 682.833 L1505.99 682.833 L1505.44 682.833 L1504.88 682.833 L1504.32 682.833 L1503.76 682.833 L1503.2 682.833 L1502.64 682.833 L1502.08 682.833 L1501.52 682.833 L1500.96 682.833 L1500.4 682.833 L1499.84 682.833 L1499.28 682.833 L1498.72 682.833 L1498.16 682.833 L1497.61 682.833 L1497.05 682.833 L1496.49 682.833 L1495.93 682.833 L1495.37 682.833 L1494.81 682.833 L1494.25 682.833 L1493.69 682.833 L1493.13 682.833 L1492.57 682.833 L1492.01 682.833 L1491.45 682.833 L1490.89 682.833 L1490.34 682.833 L1489.78 682.833 L1489.22 682.833 L1488.66 682.833 L1488.1 682.833 L1487.54 682.833 L1486.98 682.833 L1486.42 682.833 L1485.86 682.833 L1485.3 682.833 L1484.74 682.833 L1484.18 682.833 L1483.62 682.833 L1483.07 682.833 L1482.51 682.833 L1481.95 682.833 L1481.39 682.833 L1480.83 682.833 L1480.27 682.833 L1479.71 682.833 L1479.15 682.833 L1478.59 682.833 L1478.03 682.833 L1477.47 682.833 L1476.91 682.833 L1476.35 682.833 L1475.79 682.833 L1475.24 682.833 L1474.68 682.833 L1474.12 682.833 L1473.56 682.833 L1473 682.833 L1472.44 682.833 L1471.88 682.833 L1471.32 682.833 L1470.76 682.833 L1470.2 682.833 L1469.64 682.833 L1469.08 682.833 L1468.52 682.833 L1467.97 682.833 L1467.41 682.833 L1466.85 682.833 L1466.29 682.833 L1465.73 682.833 L1465.17 682.833 L1464.61 682.833 L1464.05 682.833 L1463.49 682.833 L1462.93 682.833 L1462.37 682.833 L1461.81 682.833 L1461.25 682.833 L1460.7 682.833 L1460.14 682.833 L1459.58 682.833 L1459.02 682.833 L1458.46 682.833 L1457.9 682.833 L1457.34 682.833 L1456.78 682.833 L1456.22 682.833 L1455.66 682.833 L1455.1 682.833 L1454.54 682.833 L1453.98 682.833 L1453.42 682.833 L1452.87 682.833 L1452.31 682.833 L1451.75 682.833 L1451.19 682.833 L1450.63 682.833 L1450.07 682.833 L1449.51 682.833 L1448.95 682.833 L1448.39 682.833 L1447.83 682.833 L1447.27 682.833 L1446.71 682.833 L1446.15 682.833 L1445.6 682.833 L1445.04 682.833 L1444.48 682.833 L1443.92 682.833 L1443.36 682.833 L1442.8 682.833 L1442.24 682.833 L1441.68 682.833 L1441.12 682.833 L1440.56 682.833 L1440 682.833 L1439.44 682.833 L1438.88 682.833 L1438.33 682.833 L1437.77 682.833 L1437.21 682.833 L1436.65 682.833 L1436.09 682.833 L1435.53 682.833 L1434.97 682.833 L1434.41 682.833 L1433.85 682.833 L1433.29 682.833 L1432.73 682.833 L1432.17 682.833 L1431.61 682.833 L1431.05 682.833 L1430.5 682.833 L1429.94 682.833 L1429.38 682.833 L1428.82 682.833 L1428.26 682.833 L1427.7 682.833 L1427.14 682.833 L1426.58 682.833 L1426.02 682.833 L1425.46 682.833 L1424.9 682.833 L1424.34 682.833 L1423.78 682.833 L1423.23 682.833 L1422.67 682.833 L1422.11 682.833 L1421.55 682.833 L1420.99 682.833 L1420.43 682.833 L1419.87 682.833 L1419.31 682.833 L1418.75 682.833 L1418.19 682.833 L1417.63 682.833 L1417.07 682.833 L1416.51 682.833 L1415.95 682.833 L1415.4 682.833 L1414.84 682.833 L1414.28 682.833 L1413.72 682.833 L1413.16 682.833 L1412.6 682.833 L1412.04 682.833 L1411.48 682.833 L1410.92 682.833 L1410.36 682.833 L1409.8 682.833 L1409.24 682.833 L1408.68 682.833 L1408.13 682.833 L1407.57 682.833 L1407.01 682.833 L1406.45 682.833 L1405.89 682.833 L1405.33 682.833 L1404.77 682.833 L1404.21 682.833 L1403.65 682.833 L1403.09 682.833 L1402.53 682.833 L1401.97 682.833 L1401.41 682.833 L1400.86 682.833 L1400.3 682.833 L1399.74 682.833 L1399.18 682.833 L1398.62 682.833 L1398.06 682.833 L1397.5 682.833 L1396.94 682.833 L1396.38 682.833 L1395.82 682.833 L1395.26 682.833 L1394.7 682.833 L1394.14 682.833 L1393.58 682.833 L1393.03 682.833 L1392.47 682.833 L1391.91 682.833 L1391.35 682.833 L1390.79 682.833 L1390.23 682.833 L1389.67 682.833 L1389.11 682.833 L1388.55 682.833 L1387.99 682.833 L1387.43 682.833 L1386.87 682.833 L1386.31 682.833 L1385.76 682.833 L1385.2 682.833 L1384.64 682.833 L1384.08 682.833 L1383.52 682.833 L1382.96 682.833 L1382.4 682.833 L1381.84 682.833 L1381.28 682.833 L1380.72 682.833 L1380.16 682.833 L1379.6 682.833 L1379.04 682.833 L1378.49 682.833 L1377.93 682.833 L1377.37 682.833 L1376.81 682.833 L1376.25 682.833 L1375.69 682.833 L1375.13 682.833 L1374.57 682.833 L1374.01 682.833 L1373.45 682.833 L1372.89 682.833 L1372.33 682.833 L1371.77 682.833 L1371.21 682.833 L1370.66 682.833 L1370.1 682.833 L1369.54 682.833 L1368.98 682.833 L1368.42 682.833 L1367.86 682.833 L1367.3 682.833 L1366.74 682.833 L1366.18 682.833 L1365.62 682.833 L1365.06 682.833 L1364.5 682.833 L1363.94 682.833 L1363.39 682.833 L1362.83 682.833 L1362.27 682.833 L1361.71 682.833 L1361.15 682.833 L1360.59 682.833 L1360.03 682.833 L1359.47 682.833 L1358.91 682.833 L1358.35 682.833 L1357.79 682.833 L1357.23 682.833 L1356.67 682.833 L1356.12 682.833 L1355.56 682.833 L1355 682.833 L1354.44 682.833 L1353.88 682.833 L1353.32 682.833 L1352.76 682.833 L1352.2 682.833 L1351.64 682.833 L1351.08 682.833 L1350.52 682.833 L1349.96 682.833 L1349.4 682.833 L1348.84 682.833 L1348.29 682.833 L1347.73 682.833 L1347.17 682.833 L1346.61 682.833 L1346.05 682.833 L1345.49 682.833 L1344.93 682.833 L1344.37 682.833 L1343.81 682.833 L1343.25 682.833 L1342.69 682.833 L1342.13 682.833 L1341.57 682.833 L1341.02 682.833 L1340.46 682.833 L1339.9 682.833 L1339.34 682.833 L1338.78 682.833 L1338.22 682.833 L1337.66 682.833 L1337.1 682.833 L1336.54 682.833 L1335.98 682.833 L1335.42 682.833 L1334.86 682.833 L1334.3 682.833 L1333.75 682.833 L1333.19 682.833 L1332.63 682.833 L1332.07 682.833 L1331.51 682.833 L1330.95 682.833 L1330.39 682.833 L1329.83 682.833 L1329.27 682.833 L1328.71 682.833 L1328.15 682.833 L1327.59 682.833 L1327.03 682.833 L1326.47 682.833 L1325.92 682.833 L1325.36 682.833 L1324.8 682.833 L1324.24 682.833 L1323.68 682.833 L1323.12 682.833 L1322.56 682.833 L1322 682.833 L1321.44 682.833 L1320.88 682.833 L1320.32 682.833 L1319.76 682.833 L1319.2 682.833 L1318.65 682.833 L1318.09 682.833 L1317.53 682.833 L1316.97 682.833 L1316.41 682.833 L1315.85 682.833 L1315.29 682.833 L1314.73 682.833 L1314.17 682.833 L1313.61 682.833 L1313.05 682.833 L1312.49 682.833 L1311.93 682.833 L1311.38 682.833 L1310.82 682.833 L1310.26 682.833 L1309.7 682.833 L1309.14 682.833 L1308.58 682.833 L1308.02 682.833 L1307.46 682.833 L1306.9 682.833 L1306.34 682.833 L1305.78 682.833 L1305.22 682.833 L1304.66 682.833 L1304.1 682.833 L1303.55 682.833 L1302.99 682.833 L1302.43 682.833 L1301.87 682.833 L1301.31 682.833 L1300.75 682.833 L1300.19 682.833 L1299.63 682.833 L1299.07 682.833 L1298.51 682.833 L1297.95 682.833 L1297.39 682.833 L1296.83 682.833 L1296.28 682.833 L1295.72 682.833 L1295.16 682.833 L1294.6 682.833 L1294.04 682.833 L1293.48 682.833 L1292.92 682.833 L1292.36 682.833 L1291.8 682.833 L1291.24 682.833 L1290.68 682.833 L1290.12 682.833 L1289.56 682.833 L1289 682.833 L1288.45 682.833 L1287.89 682.833 L1287.33 682.833 L1286.77 682.833 L1286.21 682.833 L1285.65 682.833 L1285.09 682.833 L1284.53 682.833 L1283.97 682.833 L1283.41 682.833 L1282.85 682.833 L1282.29 682.833 L1281.73 682.833 L1281.18 682.833 L1280.62 682.833 L1280.06 682.833 L1279.5 682.833 L1278.94 682.833 L1278.38 682.833 L1277.82 682.833 L1277.26 682.833 L1276.7 682.833 L1276.14 682.833 L1275.58 682.833 L1275.02 682.833 L1274.46 682.833 L1273.91 682.833 L1273.35 682.833 L1272.79 682.833 L1272.23 682.833 L1271.67 682.833 L1271.11 682.833 L1270.55 682.833 L1269.99 682.833 L1269.43 682.833 L1268.87 682.833 L1268.31 682.833 L1267.75 682.833 L1267.19 682.833 L1266.63 682.833 L1266.08 682.833 L1265.52 682.833 L1264.96 682.833 L1264.4 682.833 L1263.84 682.833 L1263.28 682.833 L1262.72 682.833 L1262.16 682.833 L1261.6 682.833 L1261.04 682.833 L1260.48 682.833 L1259.92 682.833 L1259.36 682.833 L1258.81 682.833 L1258.25 682.833 L1257.69 682.833 L1257.13 682.833 L1256.57 682.833 L1256.01 682.833 L1255.45 682.833 L1254.89 682.833 L1254.33 682.833 L1253.77 682.833 L1253.21 682.833 L1252.65 682.833 L1252.09 682.833 L1251.54 682.833 L1250.98 682.833 L1250.42 682.833 L1249.86 682.833 L1249.3 682.833 L1248.74 682.833 L1248.18 682.833 L1247.62 682.833 L1247.06 682.833 L1246.5 682.833 L1245.94 682.833 L1245.38 682.833 L1244.82 682.833 L1244.26 682.833 L1243.71 682.833 L1243.15 682.833 L1242.59 682.833 L1242.03 682.833 L1241.47 682.833 L1240.91 682.833 L1240.35 682.833 L1239.79 682.833 L1239.23 682.833 L1238.67 682.833 L1238.11 682.833 L1237.55 682.833 L1236.99 682.833 L1236.44 682.833 L1235.88 682.833 L1235.32 682.833 L1234.76 682.833 L1234.2 682.833 L1233.64 682.833 L1233.08 682.833 L1232.52 682.833 L1231.96 682.833 L1231.4 682.833 L1230.84 682.833 L1230.28 682.833 L1229.72 682.833 L1229.17 682.833 L1228.61 682.833 L1228.05 682.833 L1227.49 682.833 L1226.93 682.833 L1226.37 682.833 L1225.81 682.833 L1225.25 682.833 L1224.69 682.833 L1224.13 682.833 L1223.57 682.833 L1223.01 682.833 L1222.45 682.833 L1221.89 682.833 L1221.34 682.833 L1220.78 682.833 L1220.22 682.833 L1219.66 682.833 L1219.1 682.833 L1218.54 682.833 L1217.98 682.833 L1217.42 682.833 L1216.86 682.833 L1216.3 682.833 L1215.74 682.833 L1215.18 682.833 L1214.62 682.833 L1214.07 682.833 L1213.51 682.833 L1212.95 682.833 L1212.39 682.833 L1211.83 682.833 L1211.27 682.833 L1210.71 682.833 L1210.15 682.833 L1209.59 682.833 L1209.03 682.833 L1208.47 682.833 L1207.91 682.833 L1207.35 682.833 L1206.8 682.833 L1206.24 682.833 L1205.68 682.833 L1205.12 682.833 L1204.56 682.833 L1204 682.833 L1203.44 682.833 L1202.88 682.833 L1202.32 682.833 L1201.76 682.833 L1201.2 682.833 L1200.64 682.833 L1200.08 682.833 L1199.52 682.833 L1198.97 682.833 L1198.41 682.833 L1197.85 682.833 L1197.29 682.833 L1196.73 682.833 L1196.17 682.833 L1195.61 682.833 L1195.05 682.833 L1194.49 682.833 L1193.93 682.833 L1193.37 682.833 L1192.81 682.833 L1192.25 682.833 L1191.7 682.833 L1191.14 682.833 L1190.58 682.833 L1190.02 682.833 L1189.46 682.833 L1188.9 682.833 L1188.34 682.833 L1187.78 682.833 L1187.22 682.833 L1186.66 682.833 L1186.1 682.833 L1185.54 682.833 L1184.98 682.833 L1184.43 682.833 L1183.87 682.833 L1183.31 682.833 L1182.75 682.833 L1182.19 682.833 L1181.63 682.833 L1181.07 682.833 L1180.51 682.833 L1179.95 682.833 L1179.39 682.833 L1178.83 682.833 L1178.27 682.833 L1177.71 682.833 L1177.15 682.833 L1176.6 682.833 L1176.04 682.833 L1175.48 682.833 L1174.92 682.833 L1174.36 682.833 L1173.8 682.833 L1173.24 682.833 L1172.68 682.833 L1172.12 682.833 L1171.56 682.833 L1171 682.833 L1170.44 682.833 L1169.88 682.833 L1169.33 682.833 L1168.77 682.833 L1168.21 682.833 L1167.65 682.833 L1167.09 682.833 L1166.53 682.833 L1165.97 682.833 L1165.41 682.833 L1164.85 682.833 L1164.29 682.833 L1163.73 682.833 L1163.17 682.833 L1162.61 682.833 L1162.05 682.833 L1161.5 682.833 L1160.94 682.833 L1160.38 682.833 L1159.82 682.833 L1159.26 682.833 L1158.7 682.833 L1158.14 682.833 L1157.58 682.833 L1157.02 682.833 L1156.46 682.833 L1155.9 682.833 L1155.34 682.833 L1154.78 682.833 L1154.23 682.833 L1153.67 682.833 L1153.11 682.833 L1152.55 682.833 L1151.99 682.833 L1151.43 682.833 L1150.87 682.833 L1150.31 682.833 L1149.75 682.833 L1149.19 682.833 L1148.63 682.833 L1148.07 682.833 L1147.51 682.833 L1146.96 682.833 L1146.4 682.833 L1145.84 682.833 L1145.28 682.833 L1144.72 682.833 L1144.16 682.833 L1143.6 682.833 L1143.04 682.833 L1142.48 682.833 L1141.92 682.833 L1141.36 682.833 L1140.8 682.833 L1140.24 682.833 L1139.68 682.833 L1139.13 682.833 L1138.57 682.833 L1138.01 682.833 L1137.45 682.833 L1136.89 682.833 L1136.33 682.833 L1135.77 682.833 L1135.21 682.833 L1134.65 682.833 L1134.09 682.833 L1133.53 682.833 L1132.97 682.833 L1132.41 682.833 L1131.86 682.833 L1131.3 682.833 L1130.74 682.833 L1130.18 682.833 L1129.62 682.833 L1129.06 682.833 L1128.5 682.833 L1127.94 682.833 L1127.38 682.833 L1126.82 682.833 L1126.26 682.833 L1125.7 682.833 L1125.14 682.833 L1124.59 682.833 L1124.03 682.833 L1123.47 682.833 L1122.91 682.833 L1122.35 682.833 L1121.79 682.833 L1121.23 682.833 L1120.67 682.833 L1120.11 682.833 L1119.55 682.833 L1118.99 682.833 L1118.43 682.833 L1117.87 682.833 L1117.31 682.833 L1116.76 682.833 L1116.2 682.833 L1115.64 682.833 L1115.08 682.833 L1114.52 682.833 L1113.96 682.833 L1113.4 682.833 L1112.84 682.833 L1112.28 682.833 L1111.72 682.833 L1111.16 682.833 L1110.6 682.833 L1110.04 682.833 L1109.49 682.833 L1108.93 682.833 L1108.37 682.833 L1107.81 682.833 L1107.25 682.833 L1106.69 682.833 L1106.13 682.833 L1105.57 682.833 L1105.01 682.833 L1104.45 682.833 L1103.89 682.833 L1103.33 682.833 L1102.77 682.833 L1102.22 682.833 L1101.66 682.833 L1101.1 682.833 L1100.54 682.833 L1099.98 682.833 L1099.42 682.833 L1098.86 682.833 L1098.3 682.833 L1097.74 682.833 L1097.18 682.833 L1096.62 682.833 L1096.06 682.833 L1095.5 682.833 L1094.94 682.833 L1094.39 682.833 L1093.83 682.833 L1093.27 682.833 L1092.71 682.833 L1092.15 682.833 L1091.59 682.833 L1091.03 682.833 L1090.47 682.833 L1089.91 682.833 L1089.35 682.833 L1088.79 682.833 L1088.23 682.833 L1087.67 682.833 L1087.12 682.833 L1086.56 682.833 L1086 682.833 L1085.44 682.833 L1084.88 682.833 L1084.32 682.833 L1083.76 682.833 L1083.2 682.833 L1082.64 682.833 L1082.08 682.833 L1081.52 682.833 L1080.96 682.833 L1080.4 682.833 L1079.85 682.833 L1079.29 682.833 L1078.73 682.833 L1078.17 682.833 L1077.61 682.833 L1077.05 682.833 L1076.49 682.833 L1075.93 682.833 L1075.37 682.833 L1074.81 682.833 L1074.25 682.833 L1073.69 682.833 L1073.13 682.833 L1072.57 682.833 L1072.02 682.833 L1071.46 682.833 L1070.9 682.833 L1070.34 682.833 L1069.78 682.833 L1069.22 682.833 L1068.66 682.833 L1068.1 682.833 L1067.54 682.833 L1066.98 682.833 L1066.42 682.833 L1065.86 682.833 L1065.3 682.833 L1064.75 682.833 L1064.19 682.833 L1063.63 682.833 L1063.07 682.833 L1062.51 682.833 L1061.95 682.833 L1061.39 682.833 L1060.83 682.833 L1060.27 682.833 L1059.71 682.833 L1059.15 682.833 L1058.59 682.833 L1058.03 682.833 L1057.48 682.833 L1056.92 682.833 L1056.36 682.833 L1055.8 682.833 L1055.24 682.833 L1054.68 682.833 L1054.12 682.833 L1053.56 682.833 L1053 682.833 L1052.44 682.833 L1051.88 682.833 L1051.32 682.833 L1050.76 682.833 L1050.2 682.833 L1049.65 682.833 L1049.09 682.833 L1048.53 682.833 L1047.97 682.833 L1047.41 682.833 L1046.85 682.833 L1046.29 682.833 L1045.73 682.833 L1045.17 682.833 L1044.61 682.833 L1044.05 682.833 L1043.49 682.833 L1042.93 682.833 L1042.38 682.833 L1041.82 682.833 L1041.26 682.833 L1040.7 682.833 L1040.14 682.833 L1039.58 682.833 L1039.02 682.833 L1038.46 682.833 L1037.9 682.833 L1037.34 682.833 L1036.78 682.833 L1036.22 682.833 L1035.66 682.833 L1035.1 682.833 L1034.55 682.833 L1033.99 682.833 L1033.43 682.833 L1032.87 682.833 L1032.31 682.833 L1031.75 682.833 L1031.19 682.833 L1030.63 682.833 L1030.07 682.833 L1029.51 682.833 L1028.95 682.833 L1028.39 682.833 L1027.83 682.833 L1027.28 682.833 L1026.72 682.833 L1026.16 682.833 L1025.6 682.833 L1025.04 682.833 L1024.48 682.833 L1023.92 682.833 L1023.36 682.833 L1022.8 682.833 L1022.24 682.833 L1021.68 682.833 L1021.12 682.833 L1020.56 682.833 L1020.01 682.833 L1019.45 682.833 L1018.89 682.833 L1018.33 682.833 L1017.77 682.833 L1017.21 682.833 L1016.65 682.833 L1016.09 682.833 L1015.53 682.833 L1014.97 682.833 L1014.41 682.833 L1013.85 682.833 L1013.29 682.833 L1012.73 682.833 L1012.18 682.833 L1011.62 682.833 L1011.06 682.833 L1010.5 682.833 L1009.94 682.833 L1009.38 682.833 L1008.82 682.833 L1008.26 682.833 L1007.7 682.833 L1007.14 682.833 L1006.58 682.833 L1006.02 682.833 L1005.46 682.833 L1004.91 682.833 L1004.35 682.833 L1003.79 682.833 L1003.23 682.833 L1002.67 682.833 L1002.11 682.833 L1001.55 682.833 L1000.99 682.833 L1000.43 682.833 L999.872 682.833 L999.313 682.833 L998.754 682.833 L998.194 682.833 L997.635 682.833 L997.076 682.833 L996.517 682.833 L995.957 682.833 L995.398 682.833 L994.839 682.833 L994.28 682.833 L993.72 682.833 L993.161 682.833 L992.602 682.833 L992.043 682.833 L991.483 682.833 L990.924 682.833 L990.365 682.833 L989.806 682.833 L989.246 682.833 L988.687 682.833 L988.128 682.833 L987.569 682.833 L987.009 682.833 L986.45 682.833 L985.891 682.833 L985.332 682.833 L984.772 682.833 L984.213 682.833 L983.654 682.833 L983.095 682.833 L982.535 682.833 L981.976 682.833 L981.417 682.833 L980.858 682.833 L980.298 682.833 L979.739 682.833 L979.18 682.833 L978.621 682.833 L978.061 682.833 L977.502 682.833 L976.943 682.833 L976.384 682.833 L975.824 682.833 L975.265 682.833 L974.706 682.833 L974.147 682.833 L973.587 682.833 L973.028 682.833 L972.469 682.833 L971.91 682.833 L971.35 682.833 L970.791 682.833 L970.232 682.833 L969.673 682.833 L969.113 682.833 L968.554 682.833 L967.995 682.833 L967.436 682.833 L966.876 682.833 L966.317 682.833 L965.758 682.833 L965.199 682.833 L964.639 682.833 L964.08 682.833 L963.521 682.833 L962.962 682.833 L962.402 682.833 L961.843 682.833 L961.284 682.833 L960.725 682.833 L960.165 682.833 L959.606 682.833 L959.047 682.833 L958.488 682.833 L957.928 682.833 L957.369 682.833 L956.81 682.833 L956.251 682.833 L955.691 682.833 L955.132 682.833 L954.573 682.833 L954.014 682.833 L953.454 682.833 L952.895 682.833 L952.336 682.833 L951.777 682.833 L951.217 682.833 L950.658 682.833 L950.099 682.833 L949.54 682.833 L948.98 682.833 L948.421 682.833 L947.862 682.833 L947.303 682.833 L946.743 682.833 L946.184 682.833 L945.625 682.833 L945.066 682.833 L944.506 682.833 L943.947 682.833 L943.388 682.833 L942.829 682.833 L942.269 682.833 L941.71 682.833 L941.151 682.833 L940.592 682.833 L940.032 682.833 L939.473 682.833 L938.914 682.833 L938.355 682.833 L937.795 682.833 L937.236 682.833 L936.677 682.833 L936.118 682.833 L935.558 682.833 L934.999 682.833 L934.44 682.833 L933.881 682.833 L933.321 682.833 L932.762 682.833 L932.203 682.833 L931.644 682.833 L931.084 682.833 L930.525 682.833 L929.966 682.833 L929.406 682.833 L928.847 682.833 L928.288 682.833 L927.729 682.833 L927.169 682.833 L926.61 682.833 L926.051 682.833 L925.492 682.833 L924.932 682.833 L924.373 682.833 L923.814 682.833 L923.255 682.833 L922.695 682.833 L922.136 682.833 L921.577 682.833 L921.018 682.833 L920.458 682.833 L919.899 682.833 L919.34 682.833 L918.781 682.833 L918.221 682.833 L917.662 682.833 L917.103 682.833 L916.544 682.833 L915.984 682.833 L915.425 682.833 L914.866 682.833 L914.307 682.833 L913.747 682.833 L913.188 682.833 L912.629 682.833 L912.07 682.833 L911.51 682.833 L910.951 682.833 L910.392 682.833 L909.833 682.833 L909.273 682.833 L908.714 682.833 L908.155 682.833 L907.596 682.833 L907.036 682.833 L906.477 682.833 L905.918 682.833 L905.359 682.833 L904.799 682.833 L904.24 682.833 L903.681 682.833 L903.122 682.833 L902.562 682.833 L902.003 682.833 L901.444 682.833 L900.885 682.833 L900.325 682.833 L899.766 682.833 L899.207 682.833 L898.648 682.833 L898.088 682.833 L897.529 682.833 L896.97 682.833 L896.411 682.833 L895.851 682.833 L895.292 682.833 L894.733 682.833 L894.174 682.833 L893.614 682.833 L893.055 682.833 L892.496 682.833 L891.937 682.833 L891.377 682.833 L890.818 682.833 L890.259 682.833 L889.7 682.833 L889.14 682.833 L888.581 682.833 L888.022 682.833 L887.463 682.833 L886.903 682.833 L886.344 682.833 L885.785 682.833 L885.226 682.833 L884.666 682.833 L884.107 682.833 L883.548 682.833 L882.989 682.833 L882.429 682.833 L881.87 682.833 L881.311 682.833 L880.752 682.833 L880.192 682.833 L879.633 682.833 L879.074 682.833 L878.515 682.833 L877.955 682.833 L877.396 682.833 L876.837 682.833 L876.278 682.833 L875.718 682.833 L875.159 682.833 L874.6 682.833 L874.041 682.833 L873.481 682.833 L872.922 682.833 L872.363 682.833 L871.804 682.833 L871.244 682.833 L870.685 682.833 L870.126 682.833 L869.567 682.833 L869.007 682.833 L868.448 682.833 L867.889 682.833 L867.33 682.833 L866.77 682.833 L866.211 682.833 L865.652 682.833 L865.093 682.833 L864.533 682.833 L863.974 682.833 L863.415 682.833 L862.856 682.833 L862.296 682.833 L861.737 682.833 L861.178 682.833 L860.619 682.833 L860.059 682.833 L859.5 682.833 L858.941 682.833 L858.382 682.833 L857.822 682.833 L857.263 682.833 L856.704 682.833 L856.145 682.833 L855.585 682.833 L855.026 682.833 L854.467 682.833 L853.908 682.833 L853.348 682.833 L852.789 682.833 L852.23 682.833 L851.671 682.833 L851.111 682.833 L850.552 682.833 L849.993 682.833 L849.434 682.833 L848.874 682.833 L848.315 682.833 L847.756 682.833 L847.197 682.833 L846.637 682.833 L846.078 682.833 L845.519 682.833 L844.96 682.833 L844.4 682.833 L843.841 682.833 L843.282 682.833 L842.723 682.833 L842.163 682.833 L841.604 682.833 L841.045 682.833 L840.486 682.833 L839.926 682.833 L839.367 682.833 L838.808 682.833 L838.249 682.833 L837.689 682.833 L837.13 682.833 L836.571 682.833 L836.012 682.833 L835.452 682.833 L834.893 682.833 L834.334 682.833 L833.775 682.833 L833.215 682.833 L832.656 682.833 L832.097 682.833 L831.538 682.833 L830.978 682.833 L830.419 682.833 L829.86 682.833 L829.301 682.833 L828.741 682.833 L828.182 682.833 L827.623 682.833 L827.064 682.833 L826.504 682.833 L825.945 682.833 L825.386 682.833 L824.827 682.833 L824.267 682.833 L823.708 682.833 L823.149 682.833 L822.59 682.833 L822.03 682.833 L821.471 682.833 L820.912 682.833 L820.353 682.833 L819.793 682.833 L819.234 682.833 L818.675 682.833 L818.116 682.833 L817.556 682.833 L816.997 682.833 L816.438 682.833 L815.879 682.833 L815.319 682.833 L814.76 682.833 L814.201 682.833 L813.642 682.833 L813.082 682.833 L812.523 682.833 L811.964 682.833 L811.405 682.833 L810.845 682.833 L810.286 682.833 L809.727 682.833 L809.168 682.833 L808.608 682.833 L808.049 682.833 L807.49 682.833 L806.931 682.833 L806.371 682.833 L805.812 682.833 L805.253 682.833 L804.693 682.833 L804.134 682.833 L803.575 682.833 L803.016 682.833 L802.456 682.833 L801.897 682.833 L801.338 682.833 L800.779 682.833 L800.219 682.833 L799.66 682.833 L799.101 682.833 L798.542 682.833 L797.982 682.833 L797.423 682.833 L796.864 682.833 L796.305 682.833 L795.745 682.833 L795.186 682.833 L794.627 682.833 L794.068 682.833 L793.508 682.833 L792.949 682.833 L792.39 682.833 L791.831 682.833 L791.271 682.833 L790.712 682.833 L790.153 682.833 L789.594 682.833 L789.034 682.833 L788.475 682.833 L787.916 682.833 L787.357 682.833 L786.797 682.833 L786.238 682.833 L785.679 682.833 L785.12 682.833 L784.56 682.833 L784.001 682.833 L783.442 682.833 L782.883 682.833 L782.323 682.833 L781.764 682.833 L781.205 682.833 L780.646 682.833 L780.086 682.833 L779.527 682.833 L778.968 682.833 L778.409 682.833 L777.849 682.833 L777.29 682.833 L776.731 682.833 L776.172 682.833 L775.612 682.833 L775.053 682.833 L774.494 682.833 L773.935 682.833 L773.375 682.833 L772.816 682.833 L772.257 682.833 L771.698 682.833 L771.138 682.833 L770.579 682.833 L770.02 682.833 L769.461 682.833 L768.901 682.833 L768.342 682.833 L767.783 682.833 L767.224 682.833 L766.664 682.833 L766.105 682.833 L765.546 682.833 L764.987 682.833 L764.427 682.833 L763.868 682.833 L763.309 682.833 L762.75 682.833 L762.19 682.833 L761.631 682.833 L761.072 682.833 L760.513 682.833 L759.953 682.833 L759.394 682.833 L758.835 682.833 L758.276 682.833 L757.716 682.833 L757.157 682.833 L756.598 682.833 L756.039 682.833 L755.479 682.833 L754.92 682.833 L754.361 682.833 L753.802 682.833 L753.242 682.833 L752.683 682.833 L752.124 682.833 L751.565 682.833 L751.005 682.833 L750.446 682.833 L749.887 682.833 L749.328 682.833 L748.768 682.833 L748.209 682.833 L747.65 682.833 L747.091 682.833 L746.531 682.833 L745.972 682.833 L745.413 682.833 L744.854 682.833 L744.294 682.833 L743.735 682.833 L743.176 682.833 L742.617 682.833 L742.057 682.833 L741.498 682.833 L740.939 682.833 L740.38 682.833 L739.82 682.833 L739.261 682.833 L738.702 682.833 L738.143 682.833 L737.583 682.833 L737.024 682.833 L736.465 682.833 L735.906 682.833 L735.346 682.833 L734.787 682.833 L734.228 682.833 L733.669 682.833 L733.109 682.833 L732.55 682.833 L731.991 682.833 L731.432 682.833 L730.872 682.833 L730.313 682.833 L729.754 682.833 L729.195 682.833 L728.635 682.833 L728.076 682.833 L727.517 682.833 L726.958 682.833 L726.398 682.833 L725.839 682.833 L725.28 682.833 L724.721 682.833 L724.161 682.833 L723.602 682.833 L723.043 682.833 L722.484 682.833 L721.924 682.833 L721.365 682.833 L720.806 682.833 L720.247 682.833  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.092 720.806,687.092 721.365,687.092 721.924,687.092 722.484,687.092 723.043,687.092 723.602,687.092 724.161,687.092 724.721,687.092 725.28,687.092 725.839,687.092 726.398,687.092 726.958,687.092 727.517,687.092 728.076,687.092 728.635,687.092 729.195,687.092 729.754,687.092 730.313,687.092 730.872,687.092 731.432,687.092 731.991,687.092 732.55,687.092 733.109,687.092 733.669,687.092 734.228,687.092 734.787,687.092 735.346,687.092 735.906,687.092 736.465,687.092 737.024,687.092 737.583,687.092 738.143,687.092 738.702,687.092 739.261,687.092 739.82,687.092 740.38,687.092 740.939,687.092 741.498,687.092 742.057,687.092 742.617,687.092 743.176,687.092 743.735,687.092 744.294,687.092 744.854,687.092 745.413,687.092 745.972,687.092 746.531,687.092 747.091,687.092 747.65,687.092 748.209,687.092 748.768,687.092 749.328,687.092 749.887,687.092 750.446,687.092 751.005,687.092 751.565,687.092 752.124,687.092 752.683,687.092 753.242,687.092 753.802,687.092 754.361,687.092 754.92,687.092 755.479,687.092 756.039,687.092 756.598,687.092 757.157,687.092 757.716,687.092 758.276,687.092 758.835,687.092 759.394,687.092 759.953,687.092 760.513,687.092 761.072,687.092 761.631,687.092 762.19,687.092 762.75,687.092 763.309,687.092 763.868,687.092 764.427,687.092 764.987,687.092 765.546,687.092 766.105,687.092 766.664,687.092 767.224,687.092 767.783,687.092 768.342,687.092 768.901,687.092 769.461,687.092 770.02,687.092 770.579,687.092 771.138,687.092 771.698,687.092 772.257,687.092 772.816,687.092 773.375,687.092 773.935,687.092 774.494,687.092 775.053,687.092 775.612,687.092 776.172,687.092 776.731,687.092 777.29,687.092 777.849,687.092 778.409,687.092 778.968,687.092 779.527,687.092 780.086,687.092 780.646,687.092 781.205,687.092 781.764,687.092 782.323,687.092 782.883,687.092 783.442,687.092 784.001,687.092 784.56,687.092 785.12,687.092 785.679,687.092 786.238,687.092 786.797,687.092 787.357,687.092 787.916,687.092 788.475,687.092 789.034,687.092 789.594,687.092 790.153,687.092 790.712,687.092 791.271,687.092 791.831,687.092 792.39,687.092 792.949,687.092 793.508,687.092 794.068,687.092 794.627,687.092 795.186,687.092 795.745,687.092 796.305,687.092 796.864,687.092 797.423,687.092 797.982,687.092 798.542,687.092 799.101,687.092 799.66,687.092 800.219,687.092 800.779,687.092 801.338,687.092 801.897,687.092 802.456,687.092 803.016,687.092 803.575,687.092 804.134,687.092 804.693,687.092 805.253,687.092 805.812,687.092 806.371,687.092 806.931,687.092 807.49,687.092 808.049,687.092 808.608,687.092 809.168,687.092 809.727,687.092 810.286,687.092 810.845,687.092 811.405,687.092 811.964,687.092 812.523,687.092 813.082,687.092 813.642,687.092 814.201,687.092 814.76,687.092 815.319,687.092 815.879,687.092 816.438,687.092 816.997,687.092 817.556,687.092 818.116,687.092 818.675,687.092 819.234,687.092 819.793,687.092 820.353,687.092 820.912,687.092 821.471,687.092 822.03,687.092 822.59,687.092 823.149,687.092 823.708,687.092 824.267,687.092 824.827,687.092 825.386,687.092 825.945,687.092 826.504,687.092 827.064,687.092 827.623,687.092 828.182,687.092 828.741,687.092 829.301,687.092 829.86,687.092 830.419,687.092 830.978,687.092 831.538,687.092 832.097,687.092 832.656,687.092 833.215,687.092 833.775,687.092 834.334,687.092 834.893,687.092 835.452,687.092 836.012,687.092 836.571,687.092 837.13,687.092 837.689,687.092 838.249,687.092 838.808,687.092 839.367,687.092 839.926,687.092 840.486,687.092 841.045,687.092 841.604,687.092 842.163,687.092 842.723,687.092 843.282,687.092 843.841,687.092 844.4,687.092 844.96,687.092 845.519,687.092 846.078,687.092 846.637,687.092 847.197,687.092 847.756,687.092 848.315,687.092 848.874,687.092 849.434,687.092 849.993,687.092 850.552,687.092 851.111,687.092 851.671,687.092 852.23,687.092 852.789,687.092 853.348,687.092 853.908,687.092 854.467,687.092 855.026,687.092 855.585,687.092 856.145,687.092 856.704,687.092 857.263,687.092 857.822,687.092 858.382,687.092 858.941,687.092 859.5,687.092 860.059,687.092 860.619,687.092 861.178,687.092 861.737,687.092 862.296,687.092 862.856,687.092 863.415,687.092 863.974,687.092 864.533,687.092 865.093,687.092 865.652,687.092 866.211,687.092 866.77,687.092 867.33,687.092 867.889,687.092 868.448,687.092 869.007,687.092 869.567,687.092 870.126,687.092 870.685,687.092 871.244,687.092 871.804,687.092 872.363,687.092 872.922,687.092 873.481,687.092 874.041,687.092 874.6,687.092 875.159,687.092 875.718,687.092 876.278,687.092 876.837,687.092 877.396,687.092 877.955,687.092 878.515,687.092 879.074,687.092 879.633,687.092 880.192,687.092 880.752,687.092 881.311,687.092 881.87,687.092 882.429,687.092 882.989,687.092 883.548,687.092 884.107,687.092 884.666,687.092 885.226,687.092 885.785,687.092 886.344,687.092 886.903,687.092 887.463,687.092 888.022,687.092 888.581,687.092 889.14,687.092 889.7,687.092 890.259,687.092 890.818,687.092 891.377,687.092 891.937,687.092 892.496,687.092 893.055,687.092 893.614,687.092 894.174,687.092 894.733,687.092 895.292,687.092 895.851,687.092 896.411,687.092 896.97,687.092 897.529,687.092 898.088,687.092 898.648,687.092 899.207,687.092 899.766,687.092 900.325,687.092 900.885,687.092 901.444,687.092 902.003,687.092 902.562,687.092 903.122,687.092 903.681,687.092 904.24,687.092 904.799,687.092 905.359,687.092 905.918,687.092 906.477,687.092 907.036,687.092 907.596,687.092 908.155,687.092 908.714,687.092 909.273,687.092 909.833,687.092 910.392,687.092 910.951,687.092 911.51,687.092 912.07,687.092 912.629,687.092 913.188,687.092 913.747,687.092 914.307,687.092 914.866,687.092 915.425,687.092 915.984,687.092 916.544,687.092 917.103,687.092 917.662,687.092 918.221,687.092 918.781,687.092 919.34,687.092 919.899,687.092 920.458,687.092 921.018,687.092 921.577,687.092 922.136,687.092 922.695,687.092 923.255,687.092 923.814,687.092 924.373,687.092 924.932,687.092 925.492,687.092 926.051,687.092 926.61,687.092 927.169,687.092 927.729,687.092 928.288,687.092 928.847,687.092 929.406,687.092 929.966,687.092 930.525,687.092 931.084,687.092 931.644,687.092 932.203,687.092 932.762,687.092 933.321,687.092 933.881,687.092 934.44,687.092 934.999,687.092 935.558,687.092 936.118,687.092 936.677,687.092 937.236,687.092 937.795,687.092 938.355,687.092 938.914,687.092 939.473,687.092 940.032,687.092 940.592,687.092 941.151,687.092 941.71,687.092 942.269,687.092 942.829,687.092 943.388,687.092 943.947,687.092 944.506,687.092 945.066,687.092 945.625,687.092 946.184,687.092 946.743,687.092 947.303,687.092 947.862,687.092 948.421,687.092 948.98,687.092 949.54,687.092 950.099,687.092 950.658,687.092 951.217,687.092 951.777,687.092 952.336,687.092 952.895,687.092 953.454,687.092 954.014,687.092 954.573,687.092 955.132,687.092 955.691,687.092 956.251,687.092 956.81,687.092 957.369,687.092 957.928,687.092 958.488,687.092 959.047,687.092 959.606,687.092 960.165,687.092 960.725,687.092 961.284,687.092 961.843,687.092 962.402,687.092 962.962,687.092 963.521,687.092 964.08,687.092 964.639,687.092 965.199,687.092 965.758,687.092 966.317,687.092 966.876,687.092 967.436,687.092 967.995,687.092 968.554,687.092 969.113,687.092 969.673,687.092 970.232,687.092 970.791,687.092 971.35,687.092 971.91,687.092 972.469,687.092 973.028,687.092 973.587,687.092 974.147,687.092 974.706,687.092 975.265,687.092 975.824,687.092 976.384,687.092 976.943,687.092 977.502,687.092 978.061,687.092 978.621,687.092 979.18,687.092 979.739,687.092 980.298,687.092 980.858,687.092 981.417,687.092 981.976,687.092 982.535,687.092 983.095,687.092 983.654,687.092 984.213,687.092 984.772,687.092 985.332,687.092 985.891,687.092 986.45,687.092 987.009,687.092 987.569,687.092 988.128,687.092 988.687,687.092 989.246,687.092 989.806,687.092 990.365,687.092 990.924,687.092 991.483,687.092 992.043,687.092 992.602,687.092 993.161,687.092 993.72,687.092 994.28,687.092 994.839,687.092 995.398,687.092 995.957,687.092 996.517,687.092 997.076,687.092 997.635,687.092 998.194,687.092 998.754,687.092 999.313,687.092 999.872,687.092 1000.43,687.092 1000.99,687.092 1001.55,687.092 1002.11,687.092 1002.67,687.092 1003.23,687.092 1003.79,687.092 1004.35,687.092 1004.91,687.092 1005.46,687.092 1006.02,687.092 1006.58,687.092 1007.14,687.092 1007.7,687.092 1008.26,687.092 1008.82,687.092 1009.38,687.092 1009.94,687.092 1010.5,687.092 1011.06,687.092 1011.62,687.092 1012.18,687.092 1012.73,687.092 1013.29,687.092 1013.85,687.092 1014.41,687.092 1014.97,687.092 1015.53,687.092 1016.09,687.092 1016.65,687.092 1017.21,687.092 1017.77,687.092 1018.33,687.092 1018.89,687.092 1019.45,687.092 1020.01,687.092 1020.56,687.092 1021.12,687.092 1021.68,687.092 1022.24,687.092 1022.8,687.092 1023.36,687.092 1023.92,687.092 1024.48,687.092 1025.04,687.092 1025.6,687.092 1026.16,687.092 1026.72,687.092 1027.28,687.092 1027.83,687.092 1028.39,687.092 1028.95,687.092 1029.51,687.092 1030.07,687.092 1030.63,687.092 1031.19,687.092 1031.75,687.092 1032.31,687.092 1032.87,687.092 1033.43,687.092 1033.99,687.092 1034.55,687.092 1035.1,687.092 1035.66,687.092 1036.22,687.092 1036.78,687.092 1037.34,687.092 1037.9,687.092 1038.46,687.092 1039.02,687.092 1039.58,687.092 1040.14,687.092 1040.7,687.092 1041.26,687.092 1041.82,687.092 1042.38,687.092 1042.93,687.092 1043.49,687.092 1044.05,687.092 1044.61,687.092 1045.17,687.092 1045.73,687.092 1046.29,687.092 1046.85,687.092 1047.41,687.092 1047.97,687.092 1048.53,687.092 1049.09,687.092 1049.65,687.092 1050.2,687.092 1050.76,687.092 1051.32,687.092 1051.88,687.092 1052.44,687.092 1053,687.092 1053.56,687.092 1054.12,687.092 1054.68,687.092 1055.24,687.092 1055.8,687.092 1056.36,687.092 1056.92,687.092 1057.48,687.092 1058.03,687.092 1058.59,687.092 1059.15,687.092 1059.71,687.092 1060.27,687.092 1060.83,687.092 1061.39,687.092 1061.95,687.092 1062.51,687.092 1063.07,687.092 1063.63,687.092 1064.19,687.092 1064.75,687.092 1065.3,687.092 1065.86,687.092 1066.42,687.092 1066.98,687.092 1067.54,687.092 1068.1,687.092 1068.66,687.092 1069.22,687.092 1069.78,687.092 1070.34,687.092 1070.9,687.092 1071.46,687.092 1072.02,687.092 1072.57,687.092 1073.13,687.092 1073.69,687.092 1074.25,687.092 1074.81,687.092 1075.37,687.092 1075.93,687.092 1076.49,687.092 1077.05,687.092 1077.61,687.092 1078.17,687.092 1078.73,687.092 1079.29,687.092 1079.85,687.092 1080.4,687.092 1080.96,687.092 1081.52,687.092 1082.08,687.092 1082.64,687.092 1083.2,687.092 1083.76,687.092 1084.32,687.092 1084.88,687.092 1085.44,687.092 1086,687.092 1086.56,687.092 1087.12,687.092 1087.67,687.092 1088.23,687.092 1088.79,687.092 1089.35,687.092 1089.91,687.092 1090.47,687.092 1091.03,687.092 1091.59,687.092 1092.15,687.092 1092.71,687.092 1093.27,687.092 1093.83,687.092 1094.39,687.092 1094.94,687.092 1095.5,687.092 1096.06,687.092 1096.62,687.092 1097.18,687.092 1097.74,687.092 1098.3,687.092 1098.86,687.092 1099.42,687.092 1099.98,687.092 1100.54,687.092 1101.1,687.092 1101.66,687.092 1102.22,687.092 1102.77,687.092 1103.33,687.092 1103.89,687.092 1104.45,687.092 1105.01,687.092 1105.57,687.092 1106.13,687.092 1106.69,687.092 1107.25,687.092 1107.81,687.092 1108.37,687.092 1108.93,687.092 1109.49,687.092 1110.04,687.092 1110.6,687.092 1111.16,687.092 1111.72,687.092 1112.28,687.092 1112.84,687.092 1113.4,687.092 1113.96,687.092 1114.52,687.092 1115.08,687.092 1115.64,687.092 1116.2,687.092 1116.76,687.092 1117.31,687.092 1117.87,687.092 1118.43,687.092 1118.99,687.092 1119.55,687.092 1120.11,687.092 1120.67,687.092 1121.23,687.092 1121.79,687.092 1122.35,687.092 1122.91,687.092 1123.47,687.092 1124.03,687.092 1124.59,687.092 1125.14,687.092 1125.7,687.092 1126.26,687.092 1126.82,687.092 1127.38,687.092 1127.94,687.092 1128.5,687.092 1129.06,687.092 1129.62,687.092 1130.18,687.092 1130.74,687.092 1131.3,687.092 1131.86,687.092 1132.41,687.092 1132.97,687.092 1133.53,687.092 1134.09,687.092 1134.65,687.092 1135.21,687.092 1135.77,687.092 1136.33,687.092 1136.89,687.092 1137.45,687.092 1138.01,687.092 1138.57,687.092 1139.13,687.092 1139.68,687.092 1140.24,687.092 1140.8,687.092 1141.36,687.092 1141.92,687.092 1142.48,687.092 1143.04,687.092 1143.6,687.092 1144.16,687.092 1144.72,687.092 1145.28,687.092 1145.84,687.092 1146.4,687.092 1146.96,687.092 1147.51,687.092 1148.07,687.092 1148.63,687.092 1149.19,687.092 1149.75,687.092 1150.31,687.092 1150.87,687.092 1151.43,687.092 1151.99,687.092 1152.55,687.092 1153.11,687.092 1153.67,687.092 1154.23,687.092 1154.78,687.092 1155.34,687.092 1155.9,687.092 1156.46,687.092 1157.02,687.092 1157.58,687.092 1158.14,687.092 1158.7,687.092 1159.26,687.092 1159.82,687.092 1160.38,687.092 1160.94,687.092 1161.5,687.092 1162.05,687.092 1162.61,687.092 1163.17,687.092 1163.73,687.092 1164.29,687.092 1164.85,687.092 1165.41,687.092 1165.97,687.092 1166.53,687.092 1167.09,687.092 1167.65,687.092 1168.21,687.092 1168.77,687.092 1169.33,687.092 1169.88,687.092 1170.44,687.092 1171,687.092 1171.56,687.092 1172.12,687.092 1172.68,687.092 1173.24,687.092 1173.8,687.092 1174.36,687.092 1174.92,687.092 1175.48,687.092 1176.04,687.092 1176.6,687.092 1177.15,687.092 1177.71,687.092 1178.27,687.092 1178.83,687.092 1179.39,687.092 1179.95,687.092 1180.51,687.092 1181.07,687.092 1181.63,687.092 1182.19,687.092 1182.75,687.092 1183.31,687.092 1183.87,687.092 1184.43,687.092 1184.98,687.092 1185.54,687.092 1186.1,687.092 1186.66,687.092 1187.22,687.092 1187.78,687.092 1188.34,687.092 1188.9,687.092 1189.46,687.092 1190.02,687.092 1190.58,687.092 1191.14,687.092 1191.7,687.092 1192.25,687.092 1192.81,687.092 1193.37,687.092 1193.93,687.092 1194.49,687.092 1195.05,687.092 1195.61,687.092 1196.17,687.092 1196.73,687.092 1197.29,687.092 1197.85,687.092 1198.41,687.092 1198.97,687.092 1199.52,687.092 1200.08,687.092 1200.64,687.092 1201.2,687.092 1201.76,687.092 1202.32,687.092 1202.88,687.092 1203.44,687.092 1204,687.092 1204.56,687.092 1205.12,687.092 1205.68,687.092 1206.24,687.092 1206.8,687.092 1207.35,687.092 1207.91,687.092 1208.47,687.092 1209.03,687.092 1209.59,687.092 1210.15,687.092 1210.71,687.092 1211.27,687.092 1211.83,687.092 1212.39,687.092 1212.95,687.092 1213.51,687.092 1214.07,687.092 1214.62,687.092 1215.18,687.092 1215.74,687.092 1216.3,687.092 1216.86,687.092 1217.42,687.092 1217.98,687.092 1218.54,687.092 1219.1,687.092 1219.66,687.092 1220.22,687.092 1220.78,687.092 1221.34,687.092 1221.89,687.092 1222.45,687.092 1223.01,687.092 1223.57,687.092 1224.13,687.092 1224.69,687.092 1225.25,687.092 1225.81,687.092 1226.37,687.092 1226.93,687.092 1227.49,687.092 1228.05,687.092 1228.61,687.092 1229.17,687.092 1229.72,687.092 1230.28,687.092 1230.84,687.092 1231.4,687.092 1231.96,687.092 1232.52,687.092 1233.08,687.092 1233.64,687.092 1234.2,687.092 1234.76,687.092 1235.32,687.092 1235.88,687.092 1236.44,687.092 1236.99,687.092 1237.55,687.092 1238.11,687.092 1238.67,687.092 1239.23,687.092 1239.79,687.092 1240.35,687.092 1240.91,687.092 1241.47,687.092 1242.03,687.092 1242.59,687.092 1243.15,687.092 1243.71,687.092 1244.26,687.092 1244.82,687.092 1245.38,687.092 1245.94,687.092 1246.5,687.092 1247.06,687.092 1247.62,687.092 1248.18,687.092 1248.74,687.092 1249.3,687.092 1249.86,687.092 1250.42,687.092 1250.98,687.092 1251.54,687.092 1252.09,687.092 1252.65,687.092 1253.21,687.092 1253.77,687.092 1254.33,687.092 1254.89,687.092 1255.45,687.092 1256.01,687.092 1256.57,687.092 1257.13,687.092 1257.69,687.092 1258.25,687.092 1258.81,687.092 1259.36,687.092 1259.92,687.092 1260.48,687.092 1261.04,687.092 1261.6,687.092 1262.16,687.092 1262.72,687.092 1263.28,687.092 1263.84,687.092 1264.4,687.092 1264.96,687.092 1265.52,687.092 1266.08,687.092 1266.63,687.092 1267.19,687.092 1267.75,687.092 1268.31,687.092 1268.87,687.092 1269.43,687.092 1269.99,687.092 1270.55,687.092 1271.11,687.092 1271.67,687.092 1272.23,687.092 1272.79,687.092 1273.35,687.092 1273.91,687.092 1274.46,687.092 1275.02,687.092 1275.58,687.092 1276.14,687.092 1276.7,687.092 1277.26,687.092 1277.82,687.092 1278.38,687.092 1278.94,687.092 1279.5,687.092 1280.06,687.092 1280.62,687.092 1281.18,687.092 1281.73,687.092 1282.29,687.092 1282.85,687.092 1283.41,687.092 1283.97,687.092 1284.53,687.092 1285.09,687.092 1285.65,687.092 1286.21,687.092 1286.77,687.092 1287.33,687.092 1287.89,687.092 1288.45,687.092 1289,687.092 1289.56,687.092 1290.12,687.092 1290.68,687.092 1291.24,687.092 1291.8,687.092 1292.36,687.092 1292.92,687.092 1293.48,687.092 1294.04,687.092 1294.6,687.092 1295.16,687.092 1295.72,687.092 1296.28,687.092 1296.83,687.092 1297.39,687.092 1297.95,687.092 1298.51,687.092 1299.07,687.092 1299.63,687.092 1300.19,687.092 1300.75,687.092 1301.31,687.092 1301.87,687.092 1302.43,687.092 1302.99,687.092 1303.55,687.092 1304.1,687.092 1304.66,687.092 1305.22,687.092 1305.78,687.092 1306.34,687.092 1306.9,687.092 1307.46,687.092 1308.02,687.092 1308.58,687.092 1309.14,687.092 1309.7,687.092 1310.26,687.092 1310.82,687.092 1311.38,687.092 1311.93,687.092 1312.49,687.092 1313.05,687.092 1313.61,687.092 1314.17,687.092 1314.73,687.092 1315.29,687.092 1315.85,687.092 1316.41,687.092 1316.97,687.092 1317.53,687.092 1318.09,687.092 1318.65,687.092 1319.2,687.092 1319.76,687.092 1320.32,687.092 1320.88,687.092 1321.44,687.092 1322,687.092 1322.56,687.092 1323.12,687.092 1323.68,687.092 1324.24,687.092 1324.8,687.092 1325.36,687.092 1325.92,687.092 1326.47,687.092 1327.03,687.092 1327.59,687.092 1328.15,687.092 1328.71,687.092 1329.27,687.092 1329.83,687.092 1330.39,687.092 1330.95,687.092 1331.51,687.092 1332.07,687.092 1332.63,687.092 1333.19,687.092 1333.75,687.092 1334.3,687.092 1334.86,687.092 1335.42,687.092 1335.98,687.092 1336.54,687.092 1337.1,687.092 1337.66,687.092 1338.22,687.092 1338.78,687.092 1339.34,687.092 1339.9,687.092 1340.46,687.092 1341.02,687.092 1341.57,687.092 1342.13,687.092 1342.69,687.092 1343.25,687.092 1343.81,687.092 1344.37,687.092 1344.93,687.092 1345.49,687.092 1346.05,687.092 1346.61,687.092 1347.17,687.092 1347.73,687.092 1348.29,687.092 1348.84,687.092 1349.4,687.092 1349.96,687.092 1350.52,687.092 1351.08,687.092 1351.64,687.092 1352.2,687.092 1352.76,687.092 1353.32,687.092 1353.88,687.092 1354.44,687.092 1355,687.092 1355.56,687.092 1356.12,687.092 1356.67,687.092 1357.23,687.092 1357.79,687.092 1358.35,687.092 1358.91,687.092 1359.47,687.092 1360.03,687.092 1360.59,687.092 1361.15,687.092 1361.71,687.092 1362.27,687.092 1362.83,687.092 1363.39,687.092 1363.94,687.092 1364.5,687.092 1365.06,687.092 1365.62,687.092 1366.18,687.092 1366.74,687.092 1367.3,687.092 1367.86,687.092 1368.42,687.092 1368.98,687.092 1369.54,687.092 1370.1,687.092 1370.66,687.092 1371.21,687.092 1371.77,687.092 1372.33,687.092 1372.89,687.092 1373.45,687.092 1374.01,687.092 1374.57,687.092 1375.13,687.092 1375.69,687.092 1376.25,687.092 1376.81,687.092 1377.37,687.092 1377.93,687.092 1378.49,687.092 1379.04,687.092 1379.6,687.092 1380.16,687.092 1380.72,687.092 1381.28,687.092 1381.84,687.092 1382.4,687.092 1382.96,687.092 1383.52,687.092 1384.08,687.092 1384.64,687.092 1385.2,687.092 1385.76,687.092 1386.31,687.092 1386.87,687.092 1387.43,687.092 1387.99,687.092 1388.55,687.092 1389.11,687.092 1389.67,687.092 1390.23,687.092 1390.79,687.092 1391.35,687.092 1391.91,687.092 1392.47,687.092 1393.03,687.092 1393.58,687.092 1394.14,687.092 1394.7,687.092 1395.26,687.092 1395.82,687.092 1396.38,687.092 1396.94,687.092 1397.5,687.092 1398.06,687.092 1398.62,687.092 1399.18,687.092 1399.74,687.092 1400.3,687.092 1400.86,687.092 1401.41,687.092 1401.97,687.092 1402.53,687.092 1403.09,687.092 1403.65,687.092 1404.21,687.092 1404.77,687.092 1405.33,687.092 1405.89,687.092 1406.45,687.092 1407.01,687.092 1407.57,687.092 1408.13,687.092 1408.68,687.092 1409.24,687.092 1409.8,687.092 1410.36,687.092 1410.92,687.092 1411.48,687.092 1412.04,687.092 1412.6,687.092 1413.16,687.092 1413.72,687.092 1414.28,687.092 1414.84,687.092 1415.4,687.092 1415.95,687.092 1416.51,687.092 1417.07,687.092 1417.63,687.092 1418.19,687.092 1418.75,687.092 1419.31,687.092 1419.87,687.092 1420.43,687.092 1420.99,687.092 1421.55,687.092 1422.11,687.092 1422.67,687.092 1423.23,687.092 1423.78,687.092 1424.34,687.092 1424.9,687.092 1425.46,687.092 1426.02,687.092 1426.58,687.092 1427.14,687.092 1427.7,687.092 1428.26,687.092 1428.82,687.092 1429.38,687.092 1429.94,687.092 1430.5,687.092 1431.05,687.092 1431.61,687.092 1432.17,687.092 1432.73,687.092 1433.29,687.092 1433.85,687.092 1434.41,687.092 1434.97,687.092 1435.53,687.092 1436.09,687.092 1436.65,687.092 1437.21,687.092 1437.77,687.092 1438.33,687.092 1438.88,687.092 1439.44,687.092 1440,687.092 1440.56,687.092 1441.12,687.092 1441.68,687.092 1442.24,687.092 1442.8,687.092 1443.36,687.092 1443.92,687.092 1444.48,687.092 1445.04,687.092 1445.6,687.092 1446.15,687.092 1446.71,687.092 1447.27,687.092 1447.83,687.092 1448.39,687.092 1448.95,687.092 1449.51,687.092 1450.07,687.092 1450.63,687.092 1451.19,687.092 1451.75,687.092 1452.31,687.092 1452.87,687.092 1453.42,687.092 1453.98,687.092 1454.54,687.092 1455.1,687.092 1455.66,687.092 1456.22,687.092 1456.78,687.092 1457.34,687.092 1457.9,687.092 1458.46,687.092 1459.02,687.092 1459.58,687.092 1460.14,687.092 1460.7,687.092 1461.25,687.092 1461.81,687.092 1462.37,687.092 1462.93,687.092 1463.49,687.092 1464.05,687.092 1464.61,687.092 1465.17,687.092 1465.73,687.092 1466.29,687.092 1466.85,687.092 1467.41,687.092 1467.97,687.092 1468.52,687.092 1469.08,687.092 1469.64,687.092 1470.2,687.092 1470.76,687.092 1471.32,687.092 1471.88,687.092 1472.44,687.092 1473,687.092 1473.56,687.092 1474.12,687.092 1474.68,687.092 1475.24,687.092 1475.79,687.092 1476.35,687.092 1476.91,687.092 1477.47,687.092 1478.03,687.092 1478.59,687.092 1479.15,687.092 1479.71,687.092 1480.27,687.092 1480.83,687.092 1481.39,687.092 1481.95,687.092 1482.51,687.092 1483.07,687.092 1483.62,687.092 1484.18,687.092 1484.74,687.092 1485.3,687.092 1485.86,687.092 1486.42,687.092 1486.98,687.092 1487.54,687.092 1488.1,687.092 1488.66,687.092 1489.22,687.092 1489.78,687.092 1490.34,687.092 1490.89,687.092 1491.45,687.092 1492.01,687.092 1492.57,687.092 1493.13,687.092 1493.69,687.092 1494.25,687.092 1494.81,687.092 1495.37,687.092 1495.93,687.092 1496.49,687.092 1497.05,687.092 1497.61,687.092 1498.16,687.092 1498.72,687.092 1499.28,687.092 1499.84,687.092 1500.4,687.092 1500.96,687.092 1501.52,687.092 1502.08,687.092 1502.64,687.092 1503.2,687.092 1503.76,687.092 1504.32,687.092 1504.88,687.092 1505.44,687.092 1505.99,687.092 1506.55,687.092 1507.11,687.092 1507.67,687.092 1508.23,687.092 1508.79,687.092 1509.35,687.092 1509.91,687.092 1510.47,687.092 1511.03,687.092 1511.59,687.092 1512.15,687.092 1512.71,687.092 1513.26,687.092 1513.82,687.092 1514.38,687.092 1514.94,687.092 1515.5,687.092 1516.06,687.092 1516.62,687.092 1517.18,687.092 1517.74,687.092 1518.3,687.092 1518.86,687.092 1519.42,687.092 1519.98,687.092 1520.53,687.092 1521.09,687.092 1521.65,687.092 1522.21,687.092 1522.77,687.092 1523.33,687.092 1523.89,687.092 1524.45,687.092 1525.01,687.092 1525.57,687.092 1526.13,687.092 1526.69,687.092 1527.25,687.092 1527.81,687.092 1528.36,687.092 1528.92,687.092 1529.48,687.092 1530.04,687.092 1530.6,687.092 1531.16,687.092 1531.72,687.092 1532.28,687.092 1532.84,687.092 1533.4,687.092 1533.96,687.092 1534.52,687.092 1535.08,687.092 1535.63,687.092 1536.19,687.092 1536.75,687.092 1537.31,687.092 1537.87,687.092 1538.43,687.092 1538.99,687.092 1539.55,687.092 1540.11,687.092 1540.67,687.092 1541.23,687.092 1541.79,687.092 1542.35,687.092 1542.9,687.092 1543.46,687.092 1544.02,687.092 1544.58,687.092 1545.14,687.092 1545.7,687.092 1546.26,687.092 1546.82,687.092 1547.38,687.092 1547.94,687.092 1548.5,687.092 1549.06,687.092 1549.62,687.092 1550.18,687.092 1550.73,687.092 1551.29,687.092 1551.85,687.092 1552.41,687.092 1552.97,687.092 1553.53,687.092 1554.09,687.092 1554.65,687.092 1555.21,687.092 1555.77,687.092 1556.33,687.092 1556.89,687.092 1557.45,687.092 1558,687.092 1558.56,687.092 1559.12,687.092 1559.68,687.092 1560.24,687.092 1560.8,687.092 1561.36,687.092 1561.92,687.092 1562.48,687.092 1563.04,687.092 1563.6,687.092 1564.16,687.092 1564.72,687.092 1565.28,687.092 1565.83,687.092 1566.39,687.092 1566.95,687.092 1567.51,687.092 1568.07,687.092 1568.63,687.092 1569.19,687.092 1569.75,687.092 1570.31,687.092 1570.87,687.092 1571.43,687.092 1571.99,687.092 1572.55,687.092 1573.1,687.092 1573.66,687.092 1574.22,687.092 1574.78,687.092 1575.34,687.092 1575.9,687.092 1576.46,687.092 1577.02,687.092 1577.58,687.092 1578.14,687.092 1578.7,687.092 1579.26,687.092 1579.82,687.092 1580.37,687.092 1580.93,687.092 1581.49,687.092 1582.05,687.092 1582.61,687.092 1583.17,687.092 1583.73,687.092 1584.29,687.092 1584.85,687.092 1585.41,687.092 1585.97,687.092 1586.53,687.092 1587.09,687.092 1587.65,687.092 1588.2,687.092 1588.76,687.092 1589.32,687.092 1589.88,687.092 1590.44,687.092 1591,687.092 1591.56,687.092 1592.12,687.092 1592.68,687.092 1593.24,687.092 1593.8,687.092 1594.36,687.092 1594.92,687.092 1595.47,687.092 1596.03,687.092 1596.59,687.092 1597.15,687.092 1597.71,687.092 1598.27,687.092 1598.83,687.092 1599.39,687.092 1599.95,687.092 1600.51,687.092 1601.07,687.092 1601.63,687.092 1602.19,687.092 1602.74,687.092 1603.3,687.092 1603.86,687.092 1604.42,687.092 1604.98,687.092 1605.54,687.092 1606.1,687.092 1606.66,687.092 1607.22,687.092 1607.78,687.092 1608.34,687.092 1608.9,687.092 1609.46,687.092 1610.02,687.092 1610.57,687.092 1611.13,687.092 1611.69,687.092 1612.25,687.092 1612.81,687.092 1613.37,687.092 1613.93,687.092 1614.49,687.092 1615.05,687.092 1615.61,687.092 1616.17,687.092 1616.73,687.092 1617.29,687.092 1617.84,687.092 1618.4,687.092 1618.96,687.092 1619.52,687.092 1620.08,687.092 1620.64,687.092 1621.2,687.092 1621.76,687.092 1622.32,687.092 1622.88,687.092 1623.44,687.092 1624,687.092 1624.56,687.092 1625.11,687.092 1625.67,687.092 1626.23,687.092 1626.79,687.092 1627.35,687.092 1627.91,687.092 1628.47,687.092 1629.03,687.092 1629.59,687.092 1630.15,687.092 1630.71,687.092 1631.27,687.092 1631.83,687.092 1632.39,687.092 1632.94,687.092 1633.5,687.092 1634.06,687.092 1634.62,687.092 1635.18,687.092 1635.74,687.092 1636.3,687.092 1636.86,687.092 1637.42,687.092 1637.98,687.092 1638.54,687.092 1639.1,687.092 1639.66,687.092 1640.21,687.092 1640.77,687.092 1641.33,687.092 1641.89,687.092 1642.45,687.092 1643.01,687.092 1643.57,687.092 1644.13,687.092 1644.69,687.092 1645.25,687.092 1645.81,687.092 1646.37,687.092 1646.93,687.092 1647.48,687.092 1648.04,687.092 1648.6,687.092 1649.16,687.092 1649.72,687.092 1650.28,687.092 1650.84,687.092 1651.4,687.092 1651.96,687.092 1652.52,687.092 1653.08,687.092 1653.64,687.092 1654.2,687.092 1654.76,687.092 1655.31,687.092 1655.87,687.092 1656.43,687.092 1656.99,687.092 1657.55,687.092 1658.11,687.092 1658.67,687.092 1659.23,687.092 1659.79,687.092 1660.35,687.092 1660.91,687.092 1661.47,687.092 1662.03,687.092 1662.58,687.092 1663.14,687.092 1663.7,687.092 1664.26,687.092 1664.82,687.092 1665.38,687.092 1665.94,687.092 1666.5,687.092 1667.06,687.092 1667.62,687.092 1668.18,687.092 1668.74,687.092 1669.3,687.092 1669.85,687.092 1670.41,687.092 1670.97,687.092 1671.53,687.092 1672.09,687.092 1672.65,687.092 1673.21,687.092 1673.77,687.092 1674.33,687.092 1674.89,687.092 1675.45,687.092 1676.01,687.092 1676.57,687.092 1677.13,687.092 1677.68,687.092 1678.24,687.092 1678.8,687.092 1679.36,687.092 1679.92,687.092 1680.48,687.092 1681.04,687.092 1681.6,687.092 1682.16,687.092 1682.72,687.092 1683.28,687.092 1683.84,687.092 1684.4,687.092 1684.95,687.092 1685.51,687.092 1686.07,687.092 1686.63,687.092 1687.19,687.092 1687.75,687.092 1688.31,687.092 1688.87,687.092 1689.43,687.092 1689.99,687.092 1690.55,687.092 1691.11,687.092 1691.67,687.092 1692.23,687.092 1692.78,687.092 1693.34,687.092 1693.9,687.092 1694.46,687.092 1695.02,687.092 1695.58,687.092 1696.14,687.092 1696.7,687.092 1697.26,687.092 1697.82,687.092 1698.38,687.092 1698.94,687.092 1699.5,687.092 1700.05,687.092 1700.61,687.092 1701.17,687.092 1701.73,687.092 1702.29,687.092 1702.85,687.092 1703.41,687.092 1703.97,687.092 1704.53,687.092 1705.09,687.092 1705.65,687.092 1706.21,687.092 1706.77,687.092 1707.32,687.092 1707.88,687.092 1708.44,687.092 1709,687.092 1709.56,687.092 1710.12,687.092 1710.68,687.092 1711.24,687.092 1711.8,687.092 1712.36,687.092 1712.92,687.092 1713.48,687.092 1714.04,687.092 1714.6,687.092 1715.15,687.092 1715.71,687.092 1716.27,687.092 1716.83,687.092 1717.39,687.092 1717.95,687.092 1718.51,687.092 1719.07,687.092 1719.63,687.092 1720.19,687.092 1720.75,687.092 1721.31,687.092 1721.87,687.092 1722.42,687.092 1722.98,687.092 1723.54,687.092 1724.1,687.092 1724.66,687.092 1725.22,687.092 1725.78,687.092 1726.34,687.092 1726.9,687.092 1727.46,687.092 1728.02,687.092 1728.58,687.092 1729.14,687.092 1729.69,687.092 1730.25,687.092 1730.81,687.092 1731.37,687.092 1731.93,687.092 1732.49,687.092 1733.05,687.092 1733.61,687.092 1734.17,687.092 1734.73,687.092 1735.29,687.092 1735.85,687.092 1736.41,687.092 1736.97,687.092 1737.52,687.092 1738.08,687.092 1738.64,687.092 1739.2,687.092 1739.76,687.092 1740.32,687.092 1740.88,687.092 1741.44,687.092 1742,687.092 1742.56,687.092 1743.12,687.092 1743.68,687.092 1744.24,687.092 1744.79,687.092 1745.35,687.092 1745.91,687.092 1746.47,687.092 1747.03,687.092 1747.59,687.092 1748.15,687.092 1748.71,687.092 1749.27,687.092 1749.83,687.092 1750.39,687.092 1750.95,687.092 1751.51,687.092 1752.06,687.092 1752.62,687.092 1753.18,687.092 1753.74,687.092 1754.3,687.092 1754.86,687.092 1755.42,687.092 1755.98,687.092 1756.54,687.092 1757.1,687.092 1757.66,687.092 1758.22,687.092 1758.78,687.092 1759.34,687.092 1759.89,687.092 1760.45,687.092 1761.01,687.092 1761.57,687.092 1762.13,687.092 1762.69,687.092 1763.25,687.092 1763.81,687.092 1764.37,687.092 1764.93,687.092 1765.49,687.092 1766.05,687.092 1766.61,687.092 1767.16,687.092 1767.72,687.092 1768.28,687.092 1768.84,687.092 1769.4,687.092 1769.96,687.092 1770.52,687.092 1771.08,687.092 1771.64,687.092 1772.2,687.092 1772.76,687.092 1773.32,687.092 1773.88,687.092 1774.43,687.092 1774.99,687.092 1775.55,687.092 1776.11,687.092 1776.67,687.092 1777.23,687.092 1777.79,687.092 1778.35,687.092 1778.91,687.092 1779.47,687.092 1780.03,687.092 1780.59,687.092 1781.15,687.092 1781.71,687.092 1782.26,687.092 1782.82,687.092 1783.38,687.092 1783.94,687.092 1784.5,687.092 1785.06,687.092 1785.62,687.092 1786.18,687.092 1786.74,687.092 1787.3,687.092 1787.86,687.092 1788.42,687.092 1788.98,687.092 1789.53,687.092 1790.09,687.092 1790.65,687.092 1791.21,687.092 1791.77,687.092 1792.33,687.092 1792.89,687.092 1793.45,687.092 1794.01,687.092 1794.57,687.092 1795.13,687.092 1795.69,687.092 1796.25,687.092 1796.8,687.092 1797.36,687.092 1797.92,687.092 1798.48,687.092 1799.04,687.092 1799.6,687.092 1800.16,687.092 1800.72,687.092 1801.28,687.092 1801.84,687.092 1802.4,687.092 1802.96,687.092 1803.52,687.092 1804.08,687.092 1804.63,687.092 1805.19,687.092 1805.75,687.092 1806.31,687.092 1806.87,687.092 1807.43,687.092 1807.99,687.092 1808.55,687.092 1809.11,687.092 1809.67,687.092 1810.23,687.092 1810.79,687.092 1811.35,687.092 1811.9,687.092 1812.46,687.092 1813.02,687.092 1813.58,687.092 1814.14,687.092 1814.7,687.092 1815.26,687.092 1815.82,687.092 1816.38,687.092 1816.94,687.092 1817.5,687.092 1818.06,687.092 1818.62,687.092 1819.18,687.092 1819.73,687.092 1820.29,687.092 1820.85,687.092 1821.41,687.092 1821.97,687.092 1822.53,687.092 1823.09,687.092 1823.65,687.092 1824.21,687.092 1824.77,687.092 1825.33,687.092 1825.89,687.092 1826.45,687.092 1827,687.092 1827.56,687.092 1828.12,687.092 1828.68,687.092 1829.24,687.092 1829.8,687.092 1830.36,687.092 1830.92,687.092 1831.48,687.092 1832.04,687.092 1832.6,687.092 1833.16,687.092 1833.72,687.092 1834.27,687.092 1834.83,687.092 1835.39,687.092 1835.95,687.092 1836.51,687.092 1837.07,687.092 1837.63,687.092 1838.19,687.092 \"/>\n<path clip-path=\"url(#clip373)\" d=\"M720.247 684.029 L720.806 684.029 L721.365 684.029 L721.924 684.029 L722.484 684.029 L723.043 684.029 L723.602 684.029 L724.161 684.029 L724.721 684.029 L725.28 684.029 L725.839 684.029 L726.398 684.029 L726.958 684.029 L727.517 684.029 L728.076 684.029 L728.635 684.029 L729.195 684.029 L729.754 684.029 L730.313 684.029 L730.872 684.029 L731.432 684.029 L731.991 684.029 L732.55 684.029 L733.109 684.029 L733.669 684.029 L734.228 684.029 L734.787 684.029 L735.346 684.029 L735.906 684.029 L736.465 684.029 L737.024 684.029 L737.583 684.029 L738.143 684.029 L738.702 684.029 L739.261 684.029 L739.82 684.029 L740.38 684.029 L740.939 684.029 L741.498 684.029 L742.057 684.029 L742.617 684.029 L743.176 684.029 L743.735 684.029 L744.294 684.029 L744.854 684.029 L745.413 684.029 L745.972 684.029 L746.531 684.029 L747.091 684.029 L747.65 684.029 L748.209 684.029 L748.768 684.029 L749.328 684.029 L749.887 684.029 L750.446 684.029 L751.005 684.029 L751.565 684.029 L752.124 684.029 L752.683 684.029 L753.242 684.029 L753.802 684.029 L754.361 684.029 L754.92 684.029 L755.479 684.029 L756.039 684.029 L756.598 684.029 L757.157 684.029 L757.716 684.029 L758.276 684.029 L758.835 684.029 L759.394 684.029 L759.953 684.029 L760.513 684.029 L761.072 684.029 L761.631 684.029 L762.19 684.029 L762.75 684.029 L763.309 684.029 L763.868 684.029 L764.427 684.029 L764.987 684.029 L765.546 684.029 L766.105 684.029 L766.664 684.029 L767.224 684.029 L767.783 684.029 L768.342 684.029 L768.901 684.029 L769.461 684.029 L770.02 684.029 L770.579 684.029 L771.138 684.029 L771.698 684.029 L772.257 684.029 L772.816 684.029 L773.375 684.029 L773.935 684.029 L774.494 684.029 L775.053 684.029 L775.612 684.029 L776.172 684.029 L776.731 684.029 L777.29 684.029 L777.849 684.029 L778.409 684.029 L778.968 684.029 L779.527 684.029 L780.086 684.029 L780.646 684.029 L781.205 684.029 L781.764 684.029 L782.323 684.029 L782.883 684.029 L783.442 684.029 L784.001 684.029 L784.56 684.029 L785.12 684.029 L785.679 684.029 L786.238 684.029 L786.797 684.029 L787.357 684.029 L787.916 684.029 L788.475 684.029 L789.034 684.029 L789.594 684.029 L790.153 684.029 L790.712 684.029 L791.271 684.029 L791.831 684.029 L792.39 684.029 L792.949 684.029 L793.508 684.029 L794.068 684.029 L794.627 684.029 L795.186 684.029 L795.745 684.029 L796.305 684.029 L796.864 684.029 L797.423 684.029 L797.982 684.029 L798.542 684.029 L799.101 684.029 L799.66 684.029 L800.219 684.029 L800.779 684.029 L801.338 684.029 L801.897 684.029 L802.456 684.029 L803.016 684.029 L803.575 684.029 L804.134 684.029 L804.693 684.029 L805.253 684.029 L805.812 684.029 L806.371 684.029 L806.931 684.029 L807.49 684.029 L808.049 684.029 L808.608 684.029 L809.168 684.029 L809.727 684.029 L810.286 684.029 L810.845 684.029 L811.405 684.029 L811.964 684.029 L812.523 684.029 L813.082 684.029 L813.642 684.029 L814.201 684.029 L814.76 684.029 L815.319 684.029 L815.879 684.029 L816.438 684.029 L816.997 684.029 L817.556 684.029 L818.116 684.029 L818.675 684.029 L819.234 684.029 L819.793 684.029 L820.353 684.029 L820.912 684.029 L821.471 684.029 L822.03 684.029 L822.59 684.029 L823.149 684.029 L823.708 684.029 L824.267 684.029 L824.827 684.029 L825.386 684.029 L825.945 684.029 L826.504 684.029 L827.064 684.029 L827.623 684.029 L828.182 684.029 L828.741 684.029 L829.301 684.029 L829.86 684.029 L830.419 684.029 L830.978 684.029 L831.538 684.029 L832.097 684.029 L832.656 684.029 L833.215 684.029 L833.775 684.029 L834.334 684.029 L834.893 684.029 L835.452 684.029 L836.012 684.029 L836.571 684.029 L837.13 684.029 L837.689 684.029 L838.249 684.029 L838.808 684.029 L839.367 684.029 L839.926 684.029 L840.486 684.029 L841.045 684.029 L841.604 684.029 L842.163 684.029 L842.723 684.029 L843.282 684.029 L843.841 684.029 L844.4 684.029 L844.96 684.029 L845.519 684.029 L846.078 684.029 L846.637 684.029 L847.197 684.029 L847.756 684.029 L848.315 684.029 L848.874 684.029 L849.434 684.029 L849.993 684.029 L850.552 684.029 L851.111 684.029 L851.671 684.029 L852.23 684.029 L852.789 684.029 L853.348 684.029 L853.908 684.029 L854.467 684.029 L855.026 684.029 L855.585 684.029 L856.145 684.029 L856.704 684.029 L857.263 684.029 L857.822 684.029 L858.382 684.029 L858.941 684.029 L859.5 684.029 L860.059 684.029 L860.619 684.029 L861.178 684.029 L861.737 684.029 L862.296 684.029 L862.856 684.029 L863.415 684.029 L863.974 684.029 L864.533 684.029 L865.093 684.029 L865.652 684.029 L866.211 684.029 L866.77 684.029 L867.33 684.029 L867.889 684.029 L868.448 684.029 L869.007 684.029 L869.567 684.029 L870.126 684.029 L870.685 684.029 L871.244 684.029 L871.804 684.029 L872.363 684.029 L872.922 684.029 L873.481 684.029 L874.041 684.029 L874.6 684.029 L875.159 684.029 L875.718 684.029 L876.278 684.029 L876.837 684.029 L877.396 684.029 L877.955 684.029 L878.515 684.029 L879.074 684.029 L879.633 684.029 L880.192 684.029 L880.752 684.029 L881.311 684.029 L881.87 684.029 L882.429 684.029 L882.989 684.029 L883.548 684.029 L884.107 684.029 L884.666 684.029 L885.226 684.029 L885.785 684.029 L886.344 684.029 L886.903 684.029 L887.463 684.029 L888.022 684.029 L888.581 684.029 L889.14 684.029 L889.7 684.029 L890.259 684.029 L890.818 684.029 L891.377 684.029 L891.937 684.029 L892.496 684.029 L893.055 684.029 L893.614 684.029 L894.174 684.029 L894.733 684.029 L895.292 684.029 L895.851 684.029 L896.411 684.029 L896.97 684.029 L897.529 684.029 L898.088 684.029 L898.648 684.029 L899.207 684.029 L899.766 684.029 L900.325 684.029 L900.885 684.029 L901.444 684.029 L902.003 684.029 L902.562 684.029 L903.122 684.029 L903.681 684.029 L904.24 684.029 L904.799 684.029 L905.359 684.029 L905.918 684.029 L906.477 684.029 L907.036 684.029 L907.596 684.029 L908.155 684.029 L908.714 684.029 L909.273 684.029 L909.833 684.029 L910.392 684.029 L910.951 684.029 L911.51 684.029 L912.07 684.029 L912.629 684.029 L913.188 684.029 L913.747 684.029 L914.307 684.029 L914.866 684.029 L915.425 684.029 L915.984 684.029 L916.544 684.029 L917.103 684.029 L917.662 684.029 L918.221 684.029 L918.781 684.029 L919.34 684.029 L919.899 684.029 L920.458 684.029 L921.018 684.029 L921.577 684.029 L922.136 684.029 L922.695 684.029 L923.255 684.029 L923.814 684.029 L924.373 684.029 L924.932 684.029 L925.492 684.029 L926.051 684.029 L926.61 684.029 L927.169 684.029 L927.729 684.029 L928.288 684.029 L928.847 684.029 L929.406 684.029 L929.966 684.029 L930.525 684.029 L931.084 684.029 L931.644 684.029 L932.203 684.029 L932.762 684.029 L933.321 684.029 L933.881 684.029 L934.44 684.029 L934.999 684.029 L935.558 684.029 L936.118 684.029 L936.677 684.029 L937.236 684.029 L937.795 684.029 L938.355 684.029 L938.914 684.029 L939.473 684.029 L940.032 684.029 L940.592 684.029 L941.151 684.029 L941.71 684.029 L942.269 684.029 L942.829 684.029 L943.388 684.029 L943.947 684.029 L944.506 684.029 L945.066 684.029 L945.625 684.029 L946.184 684.029 L946.743 684.029 L947.303 684.029 L947.862 684.029 L948.421 684.029 L948.98 684.029 L949.54 684.029 L950.099 684.029 L950.658 684.029 L951.217 684.029 L951.777 684.029 L952.336 684.029 L952.895 684.029 L953.454 684.029 L954.014 684.029 L954.573 684.029 L955.132 684.029 L955.691 684.029 L956.251 684.029 L956.81 684.029 L957.369 684.029 L957.928 684.029 L958.488 684.029 L959.047 684.029 L959.606 684.029 L960.165 684.029 L960.725 684.029 L961.284 684.029 L961.843 684.029 L962.402 684.029 L962.962 684.029 L963.521 684.029 L964.08 684.029 L964.639 684.029 L965.199 684.029 L965.758 684.029 L966.317 684.029 L966.876 684.029 L967.436 684.029 L967.995 684.029 L968.554 684.029 L969.113 684.029 L969.673 684.029 L970.232 684.029 L970.791 684.029 L971.35 684.029 L971.91 684.029 L972.469 684.029 L973.028 684.029 L973.587 684.029 L974.147 684.029 L974.706 684.029 L975.265 684.029 L975.824 684.029 L976.384 684.029 L976.943 684.029 L977.502 684.029 L978.061 684.029 L978.621 684.029 L979.18 684.029 L979.739 684.029 L980.298 684.029 L980.858 684.029 L981.417 684.029 L981.976 684.029 L982.535 684.029 L983.095 684.029 L983.654 684.029 L984.213 684.029 L984.772 684.029 L985.332 684.029 L985.891 684.029 L986.45 684.029 L987.009 684.029 L987.569 684.029 L988.128 684.029 L988.687 684.029 L989.246 684.029 L989.806 684.029 L990.365 684.029 L990.924 684.029 L991.483 684.029 L992.043 684.029 L992.602 684.029 L993.161 684.029 L993.72 684.029 L994.28 684.029 L994.839 684.029 L995.398 684.029 L995.957 684.029 L996.517 684.029 L997.076 684.029 L997.635 684.029 L998.194 684.029 L998.754 684.029 L999.313 684.029 L999.872 684.029 L1000.43 684.029 L1000.99 684.029 L1001.55 684.029 L1002.11 684.029 L1002.67 684.029 L1003.23 684.029 L1003.79 684.029 L1004.35 684.029 L1004.91 684.029 L1005.46 684.029 L1006.02 684.029 L1006.58 684.029 L1007.14 684.029 L1007.7 684.029 L1008.26 684.029 L1008.82 684.029 L1009.38 684.029 L1009.94 684.029 L1010.5 684.029 L1011.06 684.029 L1011.62 684.029 L1012.18 684.029 L1012.73 684.029 L1013.29 684.029 L1013.85 684.029 L1014.41 684.029 L1014.97 684.029 L1015.53 684.029 L1016.09 684.029 L1016.65 684.029 L1017.21 684.029 L1017.77 684.029 L1018.33 684.029 L1018.89 684.029 L1019.45 684.029 L1020.01 684.029 L1020.56 684.029 L1021.12 684.029 L1021.68 684.029 L1022.24 684.029 L1022.8 684.029 L1023.36 684.029 L1023.92 684.029 L1024.48 684.029 L1025.04 684.029 L1025.6 684.029 L1026.16 684.029 L1026.72 684.029 L1027.28 684.029 L1027.83 684.029 L1028.39 684.029 L1028.95 684.029 L1029.51 684.029 L1030.07 684.029 L1030.63 684.029 L1031.19 684.029 L1031.75 684.029 L1032.31 684.029 L1032.87 684.029 L1033.43 684.029 L1033.99 684.029 L1034.55 684.029 L1035.1 684.029 L1035.66 684.029 L1036.22 684.029 L1036.78 684.029 L1037.34 684.029 L1037.9 684.029 L1038.46 684.029 L1039.02 684.029 L1039.58 684.029 L1040.14 684.029 L1040.7 684.029 L1041.26 684.029 L1041.82 684.029 L1042.38 684.029 L1042.93 684.029 L1043.49 684.029 L1044.05 684.029 L1044.61 684.029 L1045.17 684.029 L1045.73 684.029 L1046.29 684.029 L1046.85 684.029 L1047.41 684.029 L1047.97 684.029 L1048.53 684.029 L1049.09 684.029 L1049.65 684.029 L1050.2 684.029 L1050.76 684.029 L1051.32 684.029 L1051.88 684.029 L1052.44 684.029 L1053 684.029 L1053.56 684.029 L1054.12 684.029 L1054.68 684.029 L1055.24 684.029 L1055.8 684.029 L1056.36 684.029 L1056.92 684.029 L1057.48 684.029 L1058.03 684.029 L1058.59 684.029 L1059.15 684.029 L1059.71 684.029 L1060.27 684.029 L1060.83 684.029 L1061.39 684.029 L1061.95 684.029 L1062.51 684.029 L1063.07 684.029 L1063.63 684.029 L1064.19 684.029 L1064.75 684.029 L1065.3 684.029 L1065.86 684.029 L1066.42 684.029 L1066.98 684.029 L1067.54 684.029 L1068.1 684.029 L1068.66 684.029 L1069.22 684.029 L1069.78 684.029 L1070.34 684.029 L1070.9 684.029 L1071.46 684.029 L1072.02 684.029 L1072.57 684.029 L1073.13 684.029 L1073.69 684.029 L1074.25 684.029 L1074.81 684.029 L1075.37 684.029 L1075.93 684.029 L1076.49 684.029 L1077.05 684.029 L1077.61 684.029 L1078.17 684.029 L1078.73 684.029 L1079.29 684.029 L1079.85 684.029 L1080.4 684.029 L1080.96 684.029 L1081.52 684.029 L1082.08 684.029 L1082.64 684.029 L1083.2 684.029 L1083.76 684.029 L1084.32 684.029 L1084.88 684.029 L1085.44 684.029 L1086 684.029 L1086.56 684.029 L1087.12 684.029 L1087.67 684.029 L1088.23 684.029 L1088.79 684.029 L1089.35 684.029 L1089.91 684.029 L1090.47 684.029 L1091.03 684.029 L1091.59 684.029 L1092.15 684.029 L1092.71 684.029 L1093.27 684.029 L1093.83 684.029 L1094.39 684.029 L1094.94 684.029 L1095.5 684.029 L1096.06 684.029 L1096.62 684.029 L1097.18 684.029 L1097.74 684.029 L1098.3 684.029 L1098.86 684.029 L1099.42 684.029 L1099.98 684.029 L1100.54 684.029 L1101.1 684.029 L1101.66 684.029 L1102.22 684.029 L1102.77 684.029 L1103.33 684.029 L1103.89 684.029 L1104.45 684.029 L1105.01 684.029 L1105.57 684.029 L1106.13 684.029 L1106.69 684.029 L1107.25 684.029 L1107.81 684.029 L1108.37 684.029 L1108.93 684.029 L1109.49 684.029 L1110.04 684.029 L1110.6 684.029 L1111.16 684.029 L1111.72 684.029 L1112.28 684.029 L1112.84 684.029 L1113.4 684.029 L1113.96 684.029 L1114.52 684.029 L1115.08 684.029 L1115.64 684.029 L1116.2 684.029 L1116.76 684.029 L1117.31 684.029 L1117.87 684.029 L1118.43 684.029 L1118.99 684.029 L1119.55 684.029 L1120.11 684.029 L1120.67 684.029 L1121.23 684.029 L1121.79 684.029 L1122.35 684.029 L1122.91 684.029 L1123.47 684.029 L1124.03 684.029 L1124.59 684.029 L1125.14 684.029 L1125.7 684.029 L1126.26 684.029 L1126.82 684.029 L1127.38 684.029 L1127.94 684.029 L1128.5 684.029 L1129.06 684.029 L1129.62 684.029 L1130.18 684.029 L1130.74 684.029 L1131.3 684.029 L1131.86 684.029 L1132.41 684.029 L1132.97 684.029 L1133.53 684.029 L1134.09 684.029 L1134.65 684.029 L1135.21 684.029 L1135.77 684.029 L1136.33 684.029 L1136.89 684.029 L1137.45 684.029 L1138.01 684.029 L1138.57 684.029 L1139.13 684.029 L1139.68 684.029 L1140.24 684.029 L1140.8 684.029 L1141.36 684.029 L1141.92 684.029 L1142.48 684.029 L1143.04 684.029 L1143.6 684.029 L1144.16 684.029 L1144.72 684.029 L1145.28 684.029 L1145.84 684.029 L1146.4 684.029 L1146.96 684.029 L1147.51 684.029 L1148.07 684.029 L1148.63 684.029 L1149.19 684.029 L1149.75 684.029 L1150.31 684.029 L1150.87 684.029 L1151.43 684.029 L1151.99 684.029 L1152.55 684.029 L1153.11 684.029 L1153.67 684.029 L1154.23 684.029 L1154.78 684.029 L1155.34 684.029 L1155.9 684.029 L1156.46 684.029 L1157.02 684.029 L1157.58 684.029 L1158.14 684.029 L1158.7 684.029 L1159.26 684.029 L1159.82 684.029 L1160.38 684.029 L1160.94 684.029 L1161.5 684.029 L1162.05 684.029 L1162.61 684.029 L1163.17 684.029 L1163.73 684.029 L1164.29 684.029 L1164.85 684.029 L1165.41 684.029 L1165.97 684.029 L1166.53 684.029 L1167.09 684.029 L1167.65 684.029 L1168.21 684.029 L1168.77 684.029 L1169.33 684.029 L1169.88 684.029 L1170.44 684.029 L1171 684.029 L1171.56 684.029 L1172.12 684.029 L1172.68 684.029 L1173.24 684.029 L1173.8 684.029 L1174.36 684.029 L1174.92 684.029 L1175.48 684.029 L1176.04 684.029 L1176.6 684.029 L1177.15 684.029 L1177.71 684.029 L1178.27 684.029 L1178.83 684.029 L1179.39 684.029 L1179.95 684.029 L1180.51 684.029 L1181.07 684.029 L1181.63 684.029 L1182.19 684.029 L1182.75 684.029 L1183.31 684.029 L1183.87 684.029 L1184.43 684.029 L1184.98 684.029 L1185.54 684.029 L1186.1 684.029 L1186.66 684.029 L1187.22 684.029 L1187.78 684.029 L1188.34 684.029 L1188.9 684.029 L1189.46 684.029 L1190.02 684.029 L1190.58 684.029 L1191.14 684.029 L1191.7 684.029 L1192.25 684.029 L1192.81 684.029 L1193.37 684.029 L1193.93 684.029 L1194.49 684.029 L1195.05 684.029 L1195.61 684.029 L1196.17 684.029 L1196.73 684.029 L1197.29 684.029 L1197.85 684.029 L1198.41 684.029 L1198.97 684.029 L1199.52 684.029 L1200.08 684.029 L1200.64 684.029 L1201.2 684.029 L1201.76 684.029 L1202.32 684.029 L1202.88 684.029 L1203.44 684.029 L1204 684.029 L1204.56 684.029 L1205.12 684.029 L1205.68 684.029 L1206.24 684.029 L1206.8 684.029 L1207.35 684.029 L1207.91 684.029 L1208.47 684.029 L1209.03 684.029 L1209.59 684.029 L1210.15 684.029 L1210.71 684.029 L1211.27 684.029 L1211.83 684.029 L1212.39 684.029 L1212.95 684.029 L1213.51 684.029 L1214.07 684.029 L1214.62 684.029 L1215.18 684.029 L1215.74 684.029 L1216.3 684.029 L1216.86 684.029 L1217.42 684.029 L1217.98 684.029 L1218.54 684.029 L1219.1 684.029 L1219.66 684.029 L1220.22 684.029 L1220.78 684.029 L1221.34 684.029 L1221.89 684.029 L1222.45 684.029 L1223.01 684.029 L1223.57 684.029 L1224.13 684.029 L1224.69 684.029 L1225.25 684.029 L1225.81 684.029 L1226.37 684.029 L1226.93 684.029 L1227.49 684.029 L1228.05 684.029 L1228.61 684.029 L1229.17 684.029 L1229.72 684.029 L1230.28 684.029 L1230.84 684.029 L1231.4 684.029 L1231.96 684.029 L1232.52 684.029 L1233.08 684.029 L1233.64 684.029 L1234.2 684.029 L1234.76 684.029 L1235.32 684.029 L1235.88 684.029 L1236.44 684.029 L1236.99 684.029 L1237.55 684.029 L1238.11 684.029 L1238.67 684.029 L1239.23 684.029 L1239.79 684.029 L1240.35 684.029 L1240.91 684.029 L1241.47 684.029 L1242.03 684.029 L1242.59 684.029 L1243.15 684.029 L1243.71 684.029 L1244.26 684.029 L1244.82 684.029 L1245.38 684.029 L1245.94 684.029 L1246.5 684.029 L1247.06 684.029 L1247.62 684.029 L1248.18 684.029 L1248.74 684.029 L1249.3 684.029 L1249.86 684.029 L1250.42 684.029 L1250.98 684.029 L1251.54 684.029 L1252.09 684.029 L1252.65 684.029 L1253.21 684.029 L1253.77 684.029 L1254.33 684.029 L1254.89 684.029 L1255.45 684.029 L1256.01 684.029 L1256.57 684.029 L1257.13 684.029 L1257.69 684.029 L1258.25 684.029 L1258.81 684.029 L1259.36 684.029 L1259.92 684.029 L1260.48 684.029 L1261.04 684.029 L1261.6 684.029 L1262.16 684.029 L1262.72 684.029 L1263.28 684.029 L1263.84 684.029 L1264.4 684.029 L1264.96 684.029 L1265.52 684.029 L1266.08 684.029 L1266.63 684.029 L1267.19 684.029 L1267.75 684.029 L1268.31 684.029 L1268.87 684.029 L1269.43 684.029 L1269.99 684.029 L1270.55 684.029 L1271.11 684.029 L1271.67 684.029 L1272.23 684.029 L1272.79 684.029 L1273.35 684.029 L1273.91 684.029 L1274.46 684.029 L1275.02 684.029 L1275.58 684.029 L1276.14 684.029 L1276.7 684.029 L1277.26 684.029 L1277.82 684.029 L1278.38 684.029 L1278.94 684.029 L1279.5 684.029 L1280.06 684.029 L1280.62 684.029 L1281.18 684.029 L1281.73 684.029 L1282.29 684.029 L1282.85 684.029 L1283.41 684.029 L1283.97 684.029 L1284.53 684.029 L1285.09 684.029 L1285.65 684.029 L1286.21 684.029 L1286.77 684.029 L1287.33 684.029 L1287.89 684.029 L1288.45 684.029 L1289 684.029 L1289.56 684.029 L1290.12 684.029 L1290.68 684.029 L1291.24 684.029 L1291.8 684.029 L1292.36 684.029 L1292.92 684.029 L1293.48 684.029 L1294.04 684.029 L1294.6 684.029 L1295.16 684.029 L1295.72 684.029 L1296.28 684.029 L1296.83 684.029 L1297.39 684.029 L1297.95 684.029 L1298.51 684.029 L1299.07 684.029 L1299.63 684.029 L1300.19 684.029 L1300.75 684.029 L1301.31 684.029 L1301.87 684.029 L1302.43 684.029 L1302.99 684.029 L1303.55 684.029 L1304.1 684.029 L1304.66 684.029 L1305.22 684.029 L1305.78 684.029 L1306.34 684.029 L1306.9 684.029 L1307.46 684.029 L1308.02 684.029 L1308.58 684.029 L1309.14 684.029 L1309.7 684.029 L1310.26 684.029 L1310.82 684.029 L1311.38 684.029 L1311.93 684.029 L1312.49 684.029 L1313.05 684.029 L1313.61 684.029 L1314.17 684.029 L1314.73 684.029 L1315.29 684.029 L1315.85 684.029 L1316.41 684.029 L1316.97 684.029 L1317.53 684.029 L1318.09 684.029 L1318.65 684.029 L1319.2 684.029 L1319.76 684.029 L1320.32 684.029 L1320.88 684.029 L1321.44 684.029 L1322 684.029 L1322.56 684.029 L1323.12 684.029 L1323.68 684.029 L1324.24 684.029 L1324.8 684.029 L1325.36 684.029 L1325.92 684.029 L1326.47 684.029 L1327.03 684.029 L1327.59 684.029 L1328.15 684.029 L1328.71 684.029 L1329.27 684.029 L1329.83 684.029 L1330.39 684.029 L1330.95 684.029 L1331.51 684.029 L1332.07 684.029 L1332.63 684.029 L1333.19 684.029 L1333.75 684.029 L1334.3 684.029 L1334.86 684.029 L1335.42 684.029 L1335.98 684.029 L1336.54 684.029 L1337.1 684.029 L1337.66 684.029 L1338.22 684.029 L1338.78 684.029 L1339.34 684.029 L1339.9 684.029 L1340.46 684.029 L1341.02 684.029 L1341.57 684.029 L1342.13 684.029 L1342.69 684.029 L1343.25 684.029 L1343.81 684.029 L1344.37 684.029 L1344.93 684.029 L1345.49 684.029 L1346.05 684.029 L1346.61 684.029 L1347.17 684.029 L1347.73 684.029 L1348.29 684.029 L1348.84 684.029 L1349.4 684.029 L1349.96 684.029 L1350.52 684.029 L1351.08 684.029 L1351.64 684.029 L1352.2 684.029 L1352.76 684.029 L1353.32 684.029 L1353.88 684.029 L1354.44 684.029 L1355 684.029 L1355.56 684.029 L1356.12 684.029 L1356.67 684.029 L1357.23 684.029 L1357.79 684.029 L1358.35 684.029 L1358.91 684.029 L1359.47 684.029 L1360.03 684.029 L1360.59 684.029 L1361.15 684.029 L1361.71 684.029 L1362.27 684.029 L1362.83 684.029 L1363.39 684.029 L1363.94 684.029 L1364.5 684.029 L1365.06 684.029 L1365.62 684.029 L1366.18 684.029 L1366.74 684.029 L1367.3 684.029 L1367.86 684.029 L1368.42 684.029 L1368.98 684.029 L1369.54 684.029 L1370.1 684.029 L1370.66 684.029 L1371.21 684.029 L1371.77 684.029 L1372.33 684.029 L1372.89 684.029 L1373.45 684.029 L1374.01 684.029 L1374.57 684.029 L1375.13 684.029 L1375.69 684.029 L1376.25 684.029 L1376.81 684.029 L1377.37 684.029 L1377.93 684.029 L1378.49 684.029 L1379.04 684.029 L1379.6 684.029 L1380.16 684.029 L1380.72 684.029 L1381.28 684.029 L1381.84 684.029 L1382.4 684.029 L1382.96 684.029 L1383.52 684.029 L1384.08 684.029 L1384.64 684.029 L1385.2 684.029 L1385.76 684.029 L1386.31 684.029 L1386.87 684.029 L1387.43 684.029 L1387.99 684.029 L1388.55 684.029 L1389.11 684.029 L1389.67 684.029 L1390.23 684.029 L1390.79 684.029 L1391.35 684.029 L1391.91 684.029 L1392.47 684.029 L1393.03 684.029 L1393.58 684.029 L1394.14 684.029 L1394.7 684.029 L1395.26 684.029 L1395.82 684.029 L1396.38 684.029 L1396.94 684.029 L1397.5 684.029 L1398.06 684.029 L1398.62 684.029 L1399.18 684.029 L1399.74 684.029 L1400.3 684.029 L1400.86 684.029 L1401.41 684.029 L1401.97 684.029 L1402.53 684.029 L1403.09 684.029 L1403.65 684.029 L1404.21 684.029 L1404.77 684.029 L1405.33 684.029 L1405.89 684.029 L1406.45 684.029 L1407.01 684.029 L1407.57 684.029 L1408.13 684.029 L1408.68 684.029 L1409.24 684.029 L1409.8 684.029 L1410.36 684.029 L1410.92 684.029 L1411.48 684.029 L1412.04 684.029 L1412.6 684.029 L1413.16 684.029 L1413.72 684.029 L1414.28 684.029 L1414.84 684.029 L1415.4 684.029 L1415.95 684.029 L1416.51 684.029 L1417.07 684.029 L1417.63 684.029 L1418.19 684.029 L1418.75 684.029 L1419.31 684.029 L1419.87 684.029 L1420.43 684.029 L1420.99 684.029 L1421.55 684.029 L1422.11 684.029 L1422.67 684.029 L1423.23 684.029 L1423.78 684.029 L1424.34 684.029 L1424.9 684.029 L1425.46 684.029 L1426.02 684.029 L1426.58 684.029 L1427.14 684.029 L1427.7 684.029 L1428.26 684.029 L1428.82 684.029 L1429.38 684.029 L1429.94 684.029 L1430.5 684.029 L1431.05 684.029 L1431.61 684.029 L1432.17 684.029 L1432.73 684.029 L1433.29 684.029 L1433.85 684.029 L1434.41 684.029 L1434.97 684.029 L1435.53 684.029 L1436.09 684.029 L1436.65 684.029 L1437.21 684.029 L1437.77 684.029 L1438.33 684.029 L1438.88 684.029 L1439.44 684.029 L1440 684.029 L1440.56 684.029 L1441.12 684.029 L1441.68 684.029 L1442.24 684.029 L1442.8 684.029 L1443.36 684.029 L1443.92 684.029 L1444.48 684.029 L1445.04 684.029 L1445.6 684.029 L1446.15 684.029 L1446.71 684.029 L1447.27 684.029 L1447.83 684.029 L1448.39 684.029 L1448.95 684.029 L1449.51 684.029 L1450.07 684.029 L1450.63 684.029 L1451.19 684.029 L1451.75 684.029 L1452.31 684.029 L1452.87 684.029 L1453.42 684.029 L1453.98 684.029 L1454.54 684.029 L1455.1 684.029 L1455.66 684.029 L1456.22 684.029 L1456.78 684.029 L1457.34 684.029 L1457.9 684.029 L1458.46 684.029 L1459.02 684.029 L1459.58 684.029 L1460.14 684.029 L1460.7 684.029 L1461.25 684.029 L1461.81 684.029 L1462.37 684.029 L1462.93 684.029 L1463.49 684.029 L1464.05 684.029 L1464.61 684.029 L1465.17 684.029 L1465.73 684.029 L1466.29 684.029 L1466.85 684.029 L1467.41 684.029 L1467.97 684.029 L1468.52 684.029 L1469.08 684.029 L1469.64 684.029 L1470.2 684.029 L1470.76 684.029 L1471.32 684.029 L1471.88 684.029 L1472.44 684.029 L1473 684.029 L1473.56 684.029 L1474.12 684.029 L1474.68 684.029 L1475.24 684.029 L1475.79 684.029 L1476.35 684.029 L1476.91 684.029 L1477.47 684.029 L1478.03 684.029 L1478.59 684.029 L1479.15 684.029 L1479.71 684.029 L1480.27 684.029 L1480.83 684.029 L1481.39 684.029 L1481.95 684.029 L1482.51 684.029 L1483.07 684.029 L1483.62 684.029 L1484.18 684.029 L1484.74 684.029 L1485.3 684.029 L1485.86 684.029 L1486.42 684.029 L1486.98 684.029 L1487.54 684.029 L1488.1 684.029 L1488.66 684.029 L1489.22 684.029 L1489.78 684.029 L1490.34 684.029 L1490.89 684.029 L1491.45 684.029 L1492.01 684.029 L1492.57 684.029 L1493.13 684.029 L1493.69 684.029 L1494.25 684.029 L1494.81 684.029 L1495.37 684.029 L1495.93 684.029 L1496.49 684.029 L1497.05 684.029 L1497.61 684.029 L1498.16 684.029 L1498.72 684.029 L1499.28 684.029 L1499.84 684.029 L1500.4 684.029 L1500.96 684.029 L1501.52 684.029 L1502.08 684.029 L1502.64 684.029 L1503.2 684.029 L1503.76 684.029 L1504.32 684.029 L1504.88 684.029 L1505.44 684.029 L1505.99 684.029 L1506.55 684.029 L1507.11 684.029 L1507.67 684.029 L1508.23 684.029 L1508.79 684.029 L1509.35 684.029 L1509.91 684.029 L1510.47 684.029 L1511.03 684.029 L1511.59 684.029 L1512.15 684.029 L1512.71 684.029 L1513.26 684.029 L1513.82 684.029 L1514.38 684.029 L1514.94 684.029 L1515.5 684.029 L1516.06 684.029 L1516.62 684.029 L1517.18 684.029 L1517.74 684.029 L1518.3 684.029 L1518.86 684.029 L1519.42 684.029 L1519.98 684.029 L1520.53 684.029 L1521.09 684.029 L1521.65 684.029 L1522.21 684.029 L1522.77 684.029 L1523.33 684.029 L1523.89 684.029 L1524.45 684.029 L1525.01 684.029 L1525.57 684.029 L1526.13 684.029 L1526.69 684.029 L1527.25 684.029 L1527.81 684.029 L1528.36 684.029 L1528.92 684.029 L1529.48 684.029 L1530.04 684.029 L1530.6 684.029 L1531.16 684.029 L1531.72 684.029 L1532.28 684.029 L1532.84 684.029 L1533.4 684.029 L1533.96 684.029 L1534.52 684.029 L1535.08 684.029 L1535.63 684.029 L1536.19 684.029 L1536.75 684.029 L1537.31 684.029 L1537.87 684.029 L1538.43 684.029 L1538.99 684.029 L1539.55 684.029 L1540.11 684.029 L1540.67 684.029 L1541.23 684.029 L1541.79 684.029 L1542.35 684.029 L1542.9 684.029 L1543.46 684.029 L1544.02 684.029 L1544.58 684.029 L1545.14 684.029 L1545.7 684.029 L1546.26 684.029 L1546.82 684.029 L1547.38 684.029 L1547.94 684.029 L1548.5 684.029 L1549.06 684.029 L1549.62 684.029 L1550.18 684.029 L1550.73 684.029 L1551.29 684.029 L1551.85 684.029 L1552.41 684.029 L1552.97 684.029 L1553.53 684.029 L1554.09 684.029 L1554.65 684.029 L1555.21 684.029 L1555.77 684.029 L1556.33 684.029 L1556.89 684.029 L1557.45 684.029 L1558 684.029 L1558.56 684.029 L1559.12 684.029 L1559.68 684.029 L1560.24 684.029 L1560.8 684.029 L1561.36 684.029 L1561.92 684.029 L1562.48 684.029 L1563.04 684.029 L1563.6 684.029 L1564.16 684.029 L1564.72 684.029 L1565.28 684.029 L1565.83 684.029 L1566.39 684.029 L1566.95 684.029 L1567.51 684.029 L1568.07 684.029 L1568.63 684.029 L1569.19 684.029 L1569.75 684.029 L1570.31 684.029 L1570.87 684.029 L1571.43 684.029 L1571.99 684.029 L1572.55 684.029 L1573.1 684.029 L1573.66 684.029 L1574.22 684.029 L1574.78 684.029 L1575.34 684.029 L1575.9 684.029 L1576.46 684.029 L1577.02 684.029 L1577.58 684.029 L1578.14 684.029 L1578.7 684.029 L1579.26 684.029 L1579.82 684.029 L1580.37 684.029 L1580.93 684.029 L1581.49 684.029 L1582.05 684.029 L1582.61 684.029 L1583.17 684.029 L1583.73 684.029 L1584.29 684.029 L1584.85 684.029 L1585.41 684.029 L1585.97 684.029 L1586.53 684.029 L1587.09 684.029 L1587.65 684.029 L1588.2 684.029 L1588.76 684.029 L1589.32 684.029 L1589.88 684.029 L1590.44 684.029 L1591 684.029 L1591.56 684.029 L1592.12 684.029 L1592.68 684.029 L1593.24 684.029 L1593.8 684.029 L1594.36 684.029 L1594.92 684.029 L1595.47 684.029 L1596.03 684.029 L1596.59 684.029 L1597.15 684.029 L1597.71 684.029 L1598.27 684.029 L1598.83 684.029 L1599.39 684.029 L1599.95 684.029 L1600.51 684.029 L1601.07 684.029 L1601.63 684.029 L1602.19 684.029 L1602.74 684.029 L1603.3 684.029 L1603.86 684.029 L1604.42 684.029 L1604.98 684.029 L1605.54 684.029 L1606.1 684.029 L1606.66 684.029 L1607.22 684.029 L1607.78 684.029 L1608.34 684.029 L1608.9 684.029 L1609.46 684.029 L1610.02 684.029 L1610.57 684.029 L1611.13 684.029 L1611.69 684.029 L1612.25 684.029 L1612.81 684.029 L1613.37 684.029 L1613.93 684.029 L1614.49 684.029 L1615.05 684.029 L1615.61 684.029 L1616.17 684.029 L1616.73 684.029 L1617.29 684.029 L1617.84 684.029 L1618.4 684.029 L1618.96 684.029 L1619.52 684.029 L1620.08 684.029 L1620.64 684.029 L1621.2 684.029 L1621.76 684.029 L1622.32 684.029 L1622.88 684.029 L1623.44 684.029 L1624 684.029 L1624.56 684.029 L1625.11 684.029 L1625.67 684.029 L1626.23 684.029 L1626.79 684.029 L1627.35 684.029 L1627.91 684.029 L1628.47 684.029 L1629.03 684.029 L1629.59 684.029 L1630.15 684.029 L1630.71 684.029 L1631.27 684.029 L1631.83 684.029 L1632.39 684.029 L1632.94 684.029 L1633.5 684.029 L1634.06 684.029 L1634.62 684.029 L1635.18 684.029 L1635.74 684.029 L1636.3 684.029 L1636.86 684.029 L1637.42 684.029 L1637.98 684.029 L1638.54 684.029 L1639.1 684.029 L1639.66 684.029 L1640.21 684.029 L1640.77 684.029 L1641.33 684.029 L1641.89 684.029 L1642.45 684.029 L1643.01 684.029 L1643.57 684.029 L1644.13 684.029 L1644.69 684.029 L1645.25 684.029 L1645.81 684.029 L1646.37 684.029 L1646.93 684.029 L1647.48 684.029 L1648.04 684.029 L1648.6 684.029 L1649.16 684.029 L1649.72 684.029 L1650.28 684.029 L1650.84 684.029 L1651.4 684.029 L1651.96 684.029 L1652.52 684.029 L1653.08 684.029 L1653.64 684.029 L1654.2 684.029 L1654.76 684.029 L1655.31 684.029 L1655.87 684.029 L1656.43 684.029 L1656.99 684.029 L1657.55 684.029 L1658.11 684.029 L1658.67 684.029 L1659.23 684.029 L1659.79 684.029 L1660.35 684.029 L1660.91 684.029 L1661.47 684.029 L1662.03 684.029 L1662.58 684.029 L1663.14 684.029 L1663.7 684.029 L1664.26 684.029 L1664.82 684.029 L1665.38 684.029 L1665.94 684.029 L1666.5 684.029 L1667.06 684.029 L1667.62 684.029 L1668.18 684.029 L1668.74 684.029 L1669.3 684.029 L1669.85 684.029 L1670.41 684.029 L1670.97 684.029 L1671.53 684.029 L1672.09 684.029 L1672.65 684.029 L1673.21 684.029 L1673.77 684.029 L1674.33 684.029 L1674.89 684.029 L1675.45 684.029 L1676.01 684.029 L1676.57 684.029 L1677.13 684.029 L1677.68 684.029 L1678.24 684.029 L1678.8 684.029 L1679.36 684.029 L1679.92 684.029 L1680.48 684.029 L1681.04 684.029 L1681.6 684.029 L1682.16 684.029 L1682.72 684.029 L1683.28 684.029 L1683.84 684.029 L1684.4 684.029 L1684.95 684.029 L1685.51 684.029 L1686.07 684.029 L1686.63 684.029 L1687.19 684.029 L1687.75 684.029 L1688.31 684.029 L1688.87 684.029 L1689.43 684.029 L1689.99 684.029 L1690.55 684.029 L1691.11 684.029 L1691.67 684.029 L1692.23 684.029 L1692.78 684.029 L1693.34 684.029 L1693.9 684.029 L1694.46 684.029 L1695.02 684.029 L1695.58 684.029 L1696.14 684.029 L1696.7 684.029 L1697.26 684.029 L1697.82 684.029 L1698.38 684.029 L1698.94 684.029 L1699.5 684.029 L1700.05 684.029 L1700.61 684.029 L1701.17 684.029 L1701.73 684.029 L1702.29 684.029 L1702.85 684.029 L1703.41 684.029 L1703.97 684.029 L1704.53 684.029 L1705.09 684.029 L1705.65 684.029 L1706.21 684.029 L1706.77 684.029 L1707.32 684.029 L1707.88 684.029 L1708.44 684.029 L1709 684.029 L1709.56 684.029 L1710.12 684.029 L1710.68 684.029 L1711.24 684.029 L1711.8 684.029 L1712.36 684.029 L1712.92 684.029 L1713.48 684.029 L1714.04 684.029 L1714.6 684.029 L1715.15 684.029 L1715.71 684.029 L1716.27 684.029 L1716.83 684.029 L1717.39 684.029 L1717.95 684.029 L1718.51 684.029 L1719.07 684.029 L1719.63 684.029 L1720.19 684.029 L1720.75 684.029 L1721.31 684.029 L1721.87 684.029 L1722.42 684.029 L1722.98 684.029 L1723.54 684.029 L1724.1 684.029 L1724.66 684.029 L1725.22 684.029 L1725.78 684.029 L1726.34 684.029 L1726.9 684.029 L1727.46 684.029 L1728.02 684.029 L1728.58 684.029 L1729.14 684.029 L1729.69 684.029 L1730.25 684.029 L1730.81 684.029 L1731.37 684.029 L1731.93 684.029 L1732.49 684.029 L1733.05 684.029 L1733.61 684.029 L1734.17 684.029 L1734.73 684.029 L1735.29 684.029 L1735.85 684.029 L1736.41 684.029 L1736.97 684.029 L1737.52 684.029 L1738.08 684.029 L1738.64 684.029 L1739.2 684.029 L1739.76 684.029 L1740.32 684.029 L1740.88 684.029 L1741.44 684.029 L1742 684.029 L1742.56 684.029 L1743.12 684.029 L1743.68 684.029 L1744.24 684.029 L1744.79 684.029 L1745.35 684.029 L1745.91 684.029 L1746.47 684.029 L1747.03 684.029 L1747.59 684.029 L1748.15 684.029 L1748.71 684.029 L1749.27 684.029 L1749.83 684.029 L1750.39 684.029 L1750.95 684.029 L1751.51 684.029 L1752.06 684.029 L1752.62 684.029 L1753.18 684.029 L1753.74 684.029 L1754.3 684.029 L1754.86 684.029 L1755.42 684.029 L1755.98 684.029 L1756.54 684.029 L1757.1 684.029 L1757.66 684.029 L1758.22 684.029 L1758.78 684.029 L1759.34 684.029 L1759.89 684.029 L1760.45 684.029 L1761.01 684.029 L1761.57 684.029 L1762.13 684.029 L1762.69 684.029 L1763.25 684.029 L1763.81 684.029 L1764.37 684.029 L1764.93 684.029 L1765.49 684.029 L1766.05 684.029 L1766.61 684.029 L1767.16 684.029 L1767.72 684.029 L1768.28 684.029 L1768.84 684.029 L1769.4 684.029 L1769.96 684.029 L1770.52 684.029 L1771.08 684.029 L1771.64 684.029 L1772.2 684.029 L1772.76 684.029 L1773.32 684.029 L1773.88 684.029 L1774.43 684.029 L1774.99 684.029 L1775.55 684.029 L1776.11 684.029 L1776.67 684.029 L1777.23 684.029 L1777.79 684.029 L1778.35 684.029 L1778.91 684.029 L1779.47 684.029 L1780.03 684.029 L1780.59 684.029 L1781.15 684.029 L1781.71 684.029 L1782.26 684.029 L1782.82 684.029 L1783.38 684.029 L1783.94 684.029 L1784.5 684.029 L1785.06 684.029 L1785.62 684.029 L1786.18 684.029 L1786.74 684.029 L1787.3 684.029 L1787.86 684.029 L1788.42 684.029 L1788.98 684.029 L1789.53 684.029 L1790.09 684.029 L1790.65 684.029 L1791.21 684.029 L1791.77 684.029 L1792.33 684.029 L1792.89 684.029 L1793.45 684.029 L1794.01 684.029 L1794.57 684.029 L1795.13 684.029 L1795.69 684.029 L1796.25 684.029 L1796.8 684.029 L1797.36 684.029 L1797.92 684.029 L1798.48 684.029 L1799.04 684.029 L1799.6 684.029 L1800.16 684.029 L1800.72 684.029 L1801.28 684.029 L1801.84 684.029 L1802.4 684.029 L1802.96 684.029 L1803.52 684.029 L1804.08 684.029 L1804.63 684.029 L1805.19 684.029 L1805.75 684.029 L1806.31 684.029 L1806.87 684.029 L1807.43 684.029 L1807.99 684.029 L1808.55 684.029 L1809.11 684.029 L1809.67 684.029 L1810.23 684.029 L1810.79 684.029 L1811.35 684.029 L1811.9 684.029 L1812.46 684.029 L1813.02 684.029 L1813.58 684.029 L1814.14 684.029 L1814.7 684.029 L1815.26 684.029 L1815.82 684.029 L1816.38 684.029 L1816.94 684.029 L1817.5 684.029 L1818.06 684.029 L1818.62 684.029 L1819.18 684.029 L1819.73 684.029 L1820.29 684.029 L1820.85 684.029 L1821.41 684.029 L1821.97 684.029 L1822.53 684.029 L1823.09 684.029 L1823.65 684.029 L1824.21 684.029 L1824.77 684.029 L1825.33 684.029 L1825.89 684.029 L1826.45 684.029 L1827 684.029 L1827.56 684.029 L1828.12 684.029 L1828.68 684.029 L1829.24 684.029 L1829.8 684.029 L1830.36 684.029 L1830.92 684.029 L1831.48 684.029 L1832.04 684.029 L1832.6 684.029 L1833.16 684.029 L1833.72 684.029 L1834.27 684.029 L1834.83 684.029 L1835.39 684.029 L1835.95 684.029 L1836.51 684.029 L1837.07 684.029 L1837.63 684.029 L1838.19 684.029 L1838.19 682.443 L1837.63 682.443 L1837.07 682.443 L1836.51 682.443 L1835.95 682.443 L1835.39 682.443 L1834.83 682.443 L1834.27 682.443 L1833.72 682.443 L1833.16 682.443 L1832.6 682.443 L1832.04 682.443 L1831.48 682.443 L1830.92 682.443 L1830.36 682.443 L1829.8 682.443 L1829.24 682.443 L1828.68 682.443 L1828.12 682.443 L1827.56 682.443 L1827 682.443 L1826.45 682.443 L1825.89 682.443 L1825.33 682.443 L1824.77 682.443 L1824.21 682.443 L1823.65 682.443 L1823.09 682.443 L1822.53 682.443 L1821.97 682.443 L1821.41 682.443 L1820.85 682.443 L1820.29 682.443 L1819.73 682.443 L1819.18 682.443 L1818.62 682.443 L1818.06 682.443 L1817.5 682.443 L1816.94 682.443 L1816.38 682.443 L1815.82 682.443 L1815.26 682.443 L1814.7 682.443 L1814.14 682.443 L1813.58 682.443 L1813.02 682.443 L1812.46 682.443 L1811.9 682.443 L1811.35 682.443 L1810.79 682.443 L1810.23 682.443 L1809.67 682.443 L1809.11 682.443 L1808.55 682.443 L1807.99 682.443 L1807.43 682.443 L1806.87 682.443 L1806.31 682.443 L1805.75 682.443 L1805.19 682.443 L1804.63 682.443 L1804.08 682.443 L1803.52 682.443 L1802.96 682.443 L1802.4 682.443 L1801.84 682.443 L1801.28 682.443 L1800.72 682.443 L1800.16 682.443 L1799.6 682.443 L1799.04 682.443 L1798.48 682.443 L1797.92 682.443 L1797.36 682.443 L1796.8 682.443 L1796.25 682.443 L1795.69 682.443 L1795.13 682.443 L1794.57 682.443 L1794.01 682.443 L1793.45 682.443 L1792.89 682.443 L1792.33 682.443 L1791.77 682.443 L1791.21 682.443 L1790.65 682.443 L1790.09 682.443 L1789.53 682.443 L1788.98 682.443 L1788.42 682.443 L1787.86 682.443 L1787.3 682.443 L1786.74 682.443 L1786.18 682.443 L1785.62 682.443 L1785.06 682.443 L1784.5 682.443 L1783.94 682.443 L1783.38 682.443 L1782.82 682.443 L1782.26 682.443 L1781.71 682.443 L1781.15 682.443 L1780.59 682.443 L1780.03 682.443 L1779.47 682.443 L1778.91 682.443 L1778.35 682.443 L1777.79 682.443 L1777.23 682.443 L1776.67 682.443 L1776.11 682.443 L1775.55 682.443 L1774.99 682.443 L1774.43 682.443 L1773.88 682.443 L1773.32 682.443 L1772.76 682.443 L1772.2 682.443 L1771.64 682.443 L1771.08 682.443 L1770.52 682.443 L1769.96 682.443 L1769.4 682.443 L1768.84 682.443 L1768.28 682.443 L1767.72 682.443 L1767.16 682.443 L1766.61 682.443 L1766.05 682.443 L1765.49 682.443 L1764.93 682.443 L1764.37 682.443 L1763.81 682.443 L1763.25 682.443 L1762.69 682.443 L1762.13 682.443 L1761.57 682.443 L1761.01 682.443 L1760.45 682.443 L1759.89 682.443 L1759.34 682.443 L1758.78 682.443 L1758.22 682.443 L1757.66 682.443 L1757.1 682.443 L1756.54 682.443 L1755.98 682.443 L1755.42 682.443 L1754.86 682.443 L1754.3 682.443 L1753.74 682.443 L1753.18 682.443 L1752.62 682.443 L1752.06 682.443 L1751.51 682.443 L1750.95 682.443 L1750.39 682.443 L1749.83 682.443 L1749.27 682.443 L1748.71 682.443 L1748.15 682.443 L1747.59 682.443 L1747.03 682.443 L1746.47 682.443 L1745.91 682.443 L1745.35 682.443 L1744.79 682.443 L1744.24 682.443 L1743.68 682.443 L1743.12 682.443 L1742.56 682.443 L1742 682.443 L1741.44 682.443 L1740.88 682.443 L1740.32 682.443 L1739.76 682.443 L1739.2 682.443 L1738.64 682.443 L1738.08 682.443 L1737.52 682.443 L1736.97 682.443 L1736.41 682.443 L1735.85 682.443 L1735.29 682.443 L1734.73 682.443 L1734.17 682.443 L1733.61 682.443 L1733.05 682.443 L1732.49 682.443 L1731.93 682.443 L1731.37 682.443 L1730.81 682.443 L1730.25 682.443 L1729.69 682.443 L1729.14 682.443 L1728.58 682.443 L1728.02 682.443 L1727.46 682.443 L1726.9 682.443 L1726.34 682.443 L1725.78 682.443 L1725.22 682.443 L1724.66 682.443 L1724.1 682.443 L1723.54 682.443 L1722.98 682.443 L1722.42 682.443 L1721.87 682.443 L1721.31 682.443 L1720.75 682.443 L1720.19 682.443 L1719.63 682.443 L1719.07 682.443 L1718.51 682.443 L1717.95 682.443 L1717.39 682.443 L1716.83 682.443 L1716.27 682.443 L1715.71 682.443 L1715.15 682.443 L1714.6 682.443 L1714.04 682.443 L1713.48 682.443 L1712.92 682.443 L1712.36 682.443 L1711.8 682.443 L1711.24 682.443 L1710.68 682.443 L1710.12 682.443 L1709.56 682.443 L1709 682.443 L1708.44 682.443 L1707.88 682.443 L1707.32 682.443 L1706.77 682.443 L1706.21 682.443 L1705.65 682.443 L1705.09 682.443 L1704.53 682.443 L1703.97 682.443 L1703.41 682.443 L1702.85 682.443 L1702.29 682.443 L1701.73 682.443 L1701.17 682.443 L1700.61 682.443 L1700.05 682.443 L1699.5 682.443 L1698.94 682.443 L1698.38 682.443 L1697.82 682.443 L1697.26 682.443 L1696.7 682.443 L1696.14 682.443 L1695.58 682.443 L1695.02 682.443 L1694.46 682.443 L1693.9 682.443 L1693.34 682.443 L1692.78 682.443 L1692.23 682.443 L1691.67 682.443 L1691.11 682.443 L1690.55 682.443 L1689.99 682.443 L1689.43 682.443 L1688.87 682.443 L1688.31 682.443 L1687.75 682.443 L1687.19 682.443 L1686.63 682.443 L1686.07 682.443 L1685.51 682.443 L1684.95 682.443 L1684.4 682.443 L1683.84 682.443 L1683.28 682.443 L1682.72 682.443 L1682.16 682.443 L1681.6 682.443 L1681.04 682.443 L1680.48 682.443 L1679.92 682.443 L1679.36 682.443 L1678.8 682.443 L1678.24 682.443 L1677.68 682.443 L1677.13 682.443 L1676.57 682.443 L1676.01 682.443 L1675.45 682.443 L1674.89 682.443 L1674.33 682.443 L1673.77 682.443 L1673.21 682.443 L1672.65 682.443 L1672.09 682.443 L1671.53 682.443 L1670.97 682.443 L1670.41 682.443 L1669.85 682.443 L1669.3 682.443 L1668.74 682.443 L1668.18 682.443 L1667.62 682.443 L1667.06 682.443 L1666.5 682.443 L1665.94 682.443 L1665.38 682.443 L1664.82 682.443 L1664.26 682.443 L1663.7 682.443 L1663.14 682.443 L1662.58 682.443 L1662.03 682.443 L1661.47 682.443 L1660.91 682.443 L1660.35 682.443 L1659.79 682.443 L1659.23 682.443 L1658.67 682.443 L1658.11 682.443 L1657.55 682.443 L1656.99 682.443 L1656.43 682.443 L1655.87 682.443 L1655.31 682.443 L1654.76 682.443 L1654.2 682.443 L1653.64 682.443 L1653.08 682.443 L1652.52 682.443 L1651.96 682.443 L1651.4 682.443 L1650.84 682.443 L1650.28 682.443 L1649.72 682.443 L1649.16 682.443 L1648.6 682.443 L1648.04 682.443 L1647.48 682.443 L1646.93 682.443 L1646.37 682.443 L1645.81 682.443 L1645.25 682.443 L1644.69 682.443 L1644.13 682.443 L1643.57 682.443 L1643.01 682.443 L1642.45 682.443 L1641.89 682.443 L1641.33 682.443 L1640.77 682.443 L1640.21 682.443 L1639.66 682.443 L1639.1 682.443 L1638.54 682.443 L1637.98 682.443 L1637.42 682.443 L1636.86 682.443 L1636.3 682.443 L1635.74 682.443 L1635.18 682.443 L1634.62 682.443 L1634.06 682.443 L1633.5 682.443 L1632.94 682.443 L1632.39 682.443 L1631.83 682.443 L1631.27 682.443 L1630.71 682.443 L1630.15 682.443 L1629.59 682.443 L1629.03 682.443 L1628.47 682.443 L1627.91 682.443 L1627.35 682.443 L1626.79 682.443 L1626.23 682.443 L1625.67 682.443 L1625.11 682.443 L1624.56 682.443 L1624 682.443 L1623.44 682.443 L1622.88 682.443 L1622.32 682.443 L1621.76 682.443 L1621.2 682.443 L1620.64 682.443 L1620.08 682.443 L1619.52 682.443 L1618.96 682.443 L1618.4 682.443 L1617.84 682.443 L1617.29 682.443 L1616.73 682.443 L1616.17 682.443 L1615.61 682.443 L1615.05 682.443 L1614.49 682.443 L1613.93 682.443 L1613.37 682.443 L1612.81 682.443 L1612.25 682.443 L1611.69 682.443 L1611.13 682.443 L1610.57 682.443 L1610.02 682.443 L1609.46 682.443 L1608.9 682.443 L1608.34 682.443 L1607.78 682.443 L1607.22 682.443 L1606.66 682.443 L1606.1 682.443 L1605.54 682.443 L1604.98 682.443 L1604.42 682.443 L1603.86 682.443 L1603.3 682.443 L1602.74 682.443 L1602.19 682.443 L1601.63 682.443 L1601.07 682.443 L1600.51 682.443 L1599.95 682.443 L1599.39 682.443 L1598.83 682.443 L1598.27 682.443 L1597.71 682.443 L1597.15 682.443 L1596.59 682.443 L1596.03 682.443 L1595.47 682.443 L1594.92 682.443 L1594.36 682.443 L1593.8 682.443 L1593.24 682.443 L1592.68 682.443 L1592.12 682.443 L1591.56 682.443 L1591 682.443 L1590.44 682.443 L1589.88 682.443 L1589.32 682.443 L1588.76 682.443 L1588.2 682.443 L1587.65 682.443 L1587.09 682.443 L1586.53 682.443 L1585.97 682.443 L1585.41 682.443 L1584.85 682.443 L1584.29 682.443 L1583.73 682.443 L1583.17 682.443 L1582.61 682.443 L1582.05 682.443 L1581.49 682.443 L1580.93 682.443 L1580.37 682.443 L1579.82 682.443 L1579.26 682.443 L1578.7 682.443 L1578.14 682.443 L1577.58 682.443 L1577.02 682.443 L1576.46 682.443 L1575.9 682.443 L1575.34 682.443 L1574.78 682.443 L1574.22 682.443 L1573.66 682.443 L1573.1 682.443 L1572.55 682.443 L1571.99 682.443 L1571.43 682.443 L1570.87 682.443 L1570.31 682.443 L1569.75 682.443 L1569.19 682.443 L1568.63 682.443 L1568.07 682.443 L1567.51 682.443 L1566.95 682.443 L1566.39 682.443 L1565.83 682.443 L1565.28 682.443 L1564.72 682.443 L1564.16 682.443 L1563.6 682.443 L1563.04 682.443 L1562.48 682.443 L1561.92 682.443 L1561.36 682.443 L1560.8 682.443 L1560.24 682.443 L1559.68 682.443 L1559.12 682.443 L1558.56 682.443 L1558 682.443 L1557.45 682.443 L1556.89 682.443 L1556.33 682.443 L1555.77 682.443 L1555.21 682.443 L1554.65 682.443 L1554.09 682.443 L1553.53 682.443 L1552.97 682.443 L1552.41 682.443 L1551.85 682.443 L1551.29 682.443 L1550.73 682.443 L1550.18 682.443 L1549.62 682.443 L1549.06 682.443 L1548.5 682.443 L1547.94 682.443 L1547.38 682.443 L1546.82 682.443 L1546.26 682.443 L1545.7 682.443 L1545.14 682.443 L1544.58 682.443 L1544.02 682.443 L1543.46 682.443 L1542.9 682.443 L1542.35 682.443 L1541.79 682.443 L1541.23 682.443 L1540.67 682.443 L1540.11 682.443 L1539.55 682.443 L1538.99 682.443 L1538.43 682.443 L1537.87 682.443 L1537.31 682.443 L1536.75 682.443 L1536.19 682.443 L1535.63 682.443 L1535.08 682.443 L1534.52 682.443 L1533.96 682.443 L1533.4 682.443 L1532.84 682.443 L1532.28 682.443 L1531.72 682.443 L1531.16 682.443 L1530.6 682.443 L1530.04 682.443 L1529.48 682.443 L1528.92 682.443 L1528.36 682.443 L1527.81 682.443 L1527.25 682.443 L1526.69 682.443 L1526.13 682.443 L1525.57 682.443 L1525.01 682.443 L1524.45 682.443 L1523.89 682.443 L1523.33 682.443 L1522.77 682.443 L1522.21 682.443 L1521.65 682.443 L1521.09 682.443 L1520.53 682.443 L1519.98 682.443 L1519.42 682.443 L1518.86 682.443 L1518.3 682.443 L1517.74 682.443 L1517.18 682.443 L1516.62 682.443 L1516.06 682.443 L1515.5 682.443 L1514.94 682.443 L1514.38 682.443 L1513.82 682.443 L1513.26 682.443 L1512.71 682.443 L1512.15 682.443 L1511.59 682.443 L1511.03 682.443 L1510.47 682.443 L1509.91 682.443 L1509.35 682.443 L1508.79 682.443 L1508.23 682.443 L1507.67 682.443 L1507.11 682.443 L1506.55 682.443 L1505.99 682.443 L1505.44 682.443 L1504.88 682.443 L1504.32 682.443 L1503.76 682.443 L1503.2 682.443 L1502.64 682.443 L1502.08 682.443 L1501.52 682.443 L1500.96 682.443 L1500.4 682.443 L1499.84 682.443 L1499.28 682.443 L1498.72 682.443 L1498.16 682.443 L1497.61 682.443 L1497.05 682.443 L1496.49 682.443 L1495.93 682.443 L1495.37 682.443 L1494.81 682.443 L1494.25 682.443 L1493.69 682.443 L1493.13 682.443 L1492.57 682.443 L1492.01 682.443 L1491.45 682.443 L1490.89 682.443 L1490.34 682.443 L1489.78 682.443 L1489.22 682.443 L1488.66 682.443 L1488.1 682.443 L1487.54 682.443 L1486.98 682.443 L1486.42 682.443 L1485.86 682.443 L1485.3 682.443 L1484.74 682.443 L1484.18 682.443 L1483.62 682.443 L1483.07 682.443 L1482.51 682.443 L1481.95 682.443 L1481.39 682.443 L1480.83 682.443 L1480.27 682.443 L1479.71 682.443 L1479.15 682.443 L1478.59 682.443 L1478.03 682.443 L1477.47 682.443 L1476.91 682.443 L1476.35 682.443 L1475.79 682.443 L1475.24 682.443 L1474.68 682.443 L1474.12 682.443 L1473.56 682.443 L1473 682.443 L1472.44 682.443 L1471.88 682.443 L1471.32 682.443 L1470.76 682.443 L1470.2 682.443 L1469.64 682.443 L1469.08 682.443 L1468.52 682.443 L1467.97 682.443 L1467.41 682.443 L1466.85 682.443 L1466.29 682.443 L1465.73 682.443 L1465.17 682.443 L1464.61 682.443 L1464.05 682.443 L1463.49 682.443 L1462.93 682.443 L1462.37 682.443 L1461.81 682.443 L1461.25 682.443 L1460.7 682.443 L1460.14 682.443 L1459.58 682.443 L1459.02 682.443 L1458.46 682.443 L1457.9 682.443 L1457.34 682.443 L1456.78 682.443 L1456.22 682.443 L1455.66 682.443 L1455.1 682.443 L1454.54 682.443 L1453.98 682.443 L1453.42 682.443 L1452.87 682.443 L1452.31 682.443 L1451.75 682.443 L1451.19 682.443 L1450.63 682.443 L1450.07 682.443 L1449.51 682.443 L1448.95 682.443 L1448.39 682.443 L1447.83 682.443 L1447.27 682.443 L1446.71 682.443 L1446.15 682.443 L1445.6 682.443 L1445.04 682.443 L1444.48 682.443 L1443.92 682.443 L1443.36 682.443 L1442.8 682.443 L1442.24 682.443 L1441.68 682.443 L1441.12 682.443 L1440.56 682.443 L1440 682.443 L1439.44 682.443 L1438.88 682.443 L1438.33 682.443 L1437.77 682.443 L1437.21 682.443 L1436.65 682.443 L1436.09 682.443 L1435.53 682.443 L1434.97 682.443 L1434.41 682.443 L1433.85 682.443 L1433.29 682.443 L1432.73 682.443 L1432.17 682.443 L1431.61 682.443 L1431.05 682.443 L1430.5 682.443 L1429.94 682.443 L1429.38 682.443 L1428.82 682.443 L1428.26 682.443 L1427.7 682.443 L1427.14 682.443 L1426.58 682.443 L1426.02 682.443 L1425.46 682.443 L1424.9 682.443 L1424.34 682.443 L1423.78 682.443 L1423.23 682.443 L1422.67 682.443 L1422.11 682.443 L1421.55 682.443 L1420.99 682.443 L1420.43 682.443 L1419.87 682.443 L1419.31 682.443 L1418.75 682.443 L1418.19 682.443 L1417.63 682.443 L1417.07 682.443 L1416.51 682.443 L1415.95 682.443 L1415.4 682.443 L1414.84 682.443 L1414.28 682.443 L1413.72 682.443 L1413.16 682.443 L1412.6 682.443 L1412.04 682.443 L1411.48 682.443 L1410.92 682.443 L1410.36 682.443 L1409.8 682.443 L1409.24 682.443 L1408.68 682.443 L1408.13 682.443 L1407.57 682.443 L1407.01 682.443 L1406.45 682.443 L1405.89 682.443 L1405.33 682.443 L1404.77 682.443 L1404.21 682.443 L1403.65 682.443 L1403.09 682.443 L1402.53 682.443 L1401.97 682.443 L1401.41 682.443 L1400.86 682.443 L1400.3 682.443 L1399.74 682.443 L1399.18 682.443 L1398.62 682.443 L1398.06 682.443 L1397.5 682.443 L1396.94 682.443 L1396.38 682.443 L1395.82 682.443 L1395.26 682.443 L1394.7 682.443 L1394.14 682.443 L1393.58 682.443 L1393.03 682.443 L1392.47 682.443 L1391.91 682.443 L1391.35 682.443 L1390.79 682.443 L1390.23 682.443 L1389.67 682.443 L1389.11 682.443 L1388.55 682.443 L1387.99 682.443 L1387.43 682.443 L1386.87 682.443 L1386.31 682.443 L1385.76 682.443 L1385.2 682.443 L1384.64 682.443 L1384.08 682.443 L1383.52 682.443 L1382.96 682.443 L1382.4 682.443 L1381.84 682.443 L1381.28 682.443 L1380.72 682.443 L1380.16 682.443 L1379.6 682.443 L1379.04 682.443 L1378.49 682.443 L1377.93 682.443 L1377.37 682.443 L1376.81 682.443 L1376.25 682.443 L1375.69 682.443 L1375.13 682.443 L1374.57 682.443 L1374.01 682.443 L1373.45 682.443 L1372.89 682.443 L1372.33 682.443 L1371.77 682.443 L1371.21 682.443 L1370.66 682.443 L1370.1 682.443 L1369.54 682.443 L1368.98 682.443 L1368.42 682.443 L1367.86 682.443 L1367.3 682.443 L1366.74 682.443 L1366.18 682.443 L1365.62 682.443 L1365.06 682.443 L1364.5 682.443 L1363.94 682.443 L1363.39 682.443 L1362.83 682.443 L1362.27 682.443 L1361.71 682.443 L1361.15 682.443 L1360.59 682.443 L1360.03 682.443 L1359.47 682.443 L1358.91 682.443 L1358.35 682.443 L1357.79 682.443 L1357.23 682.443 L1356.67 682.443 L1356.12 682.443 L1355.56 682.443 L1355 682.443 L1354.44 682.443 L1353.88 682.443 L1353.32 682.443 L1352.76 682.443 L1352.2 682.443 L1351.64 682.443 L1351.08 682.443 L1350.52 682.443 L1349.96 682.443 L1349.4 682.443 L1348.84 682.443 L1348.29 682.443 L1347.73 682.443 L1347.17 682.443 L1346.61 682.443 L1346.05 682.443 L1345.49 682.443 L1344.93 682.443 L1344.37 682.443 L1343.81 682.443 L1343.25 682.443 L1342.69 682.443 L1342.13 682.443 L1341.57 682.443 L1341.02 682.443 L1340.46 682.443 L1339.9 682.443 L1339.34 682.443 L1338.78 682.443 L1338.22 682.443 L1337.66 682.443 L1337.1 682.443 L1336.54 682.443 L1335.98 682.443 L1335.42 682.443 L1334.86 682.443 L1334.3 682.443 L1333.75 682.443 L1333.19 682.443 L1332.63 682.443 L1332.07 682.443 L1331.51 682.443 L1330.95 682.443 L1330.39 682.443 L1329.83 682.443 L1329.27 682.443 L1328.71 682.443 L1328.15 682.443 L1327.59 682.443 L1327.03 682.443 L1326.47 682.443 L1325.92 682.443 L1325.36 682.443 L1324.8 682.443 L1324.24 682.443 L1323.68 682.443 L1323.12 682.443 L1322.56 682.443 L1322 682.443 L1321.44 682.443 L1320.88 682.443 L1320.32 682.443 L1319.76 682.443 L1319.2 682.443 L1318.65 682.443 L1318.09 682.443 L1317.53 682.443 L1316.97 682.443 L1316.41 682.443 L1315.85 682.443 L1315.29 682.443 L1314.73 682.443 L1314.17 682.443 L1313.61 682.443 L1313.05 682.443 L1312.49 682.443 L1311.93 682.443 L1311.38 682.443 L1310.82 682.443 L1310.26 682.443 L1309.7 682.443 L1309.14 682.443 L1308.58 682.443 L1308.02 682.443 L1307.46 682.443 L1306.9 682.443 L1306.34 682.443 L1305.78 682.443 L1305.22 682.443 L1304.66 682.443 L1304.1 682.443 L1303.55 682.443 L1302.99 682.443 L1302.43 682.443 L1301.87 682.443 L1301.31 682.443 L1300.75 682.443 L1300.19 682.443 L1299.63 682.443 L1299.07 682.443 L1298.51 682.443 L1297.95 682.443 L1297.39 682.443 L1296.83 682.443 L1296.28 682.443 L1295.72 682.443 L1295.16 682.443 L1294.6 682.443 L1294.04 682.443 L1293.48 682.443 L1292.92 682.443 L1292.36 682.443 L1291.8 682.443 L1291.24 682.443 L1290.68 682.443 L1290.12 682.443 L1289.56 682.443 L1289 682.443 L1288.45 682.443 L1287.89 682.443 L1287.33 682.443 L1286.77 682.443 L1286.21 682.443 L1285.65 682.443 L1285.09 682.443 L1284.53 682.443 L1283.97 682.443 L1283.41 682.443 L1282.85 682.443 L1282.29 682.443 L1281.73 682.443 L1281.18 682.443 L1280.62 682.443 L1280.06 682.443 L1279.5 682.443 L1278.94 682.443 L1278.38 682.443 L1277.82 682.443 L1277.26 682.443 L1276.7 682.443 L1276.14 682.443 L1275.58 682.443 L1275.02 682.443 L1274.46 682.443 L1273.91 682.443 L1273.35 682.443 L1272.79 682.443 L1272.23 682.443 L1271.67 682.443 L1271.11 682.443 L1270.55 682.443 L1269.99 682.443 L1269.43 682.443 L1268.87 682.443 L1268.31 682.443 L1267.75 682.443 L1267.19 682.443 L1266.63 682.443 L1266.08 682.443 L1265.52 682.443 L1264.96 682.443 L1264.4 682.443 L1263.84 682.443 L1263.28 682.443 L1262.72 682.443 L1262.16 682.443 L1261.6 682.443 L1261.04 682.443 L1260.48 682.443 L1259.92 682.443 L1259.36 682.443 L1258.81 682.443 L1258.25 682.443 L1257.69 682.443 L1257.13 682.443 L1256.57 682.443 L1256.01 682.443 L1255.45 682.443 L1254.89 682.443 L1254.33 682.443 L1253.77 682.443 L1253.21 682.443 L1252.65 682.443 L1252.09 682.443 L1251.54 682.443 L1250.98 682.443 L1250.42 682.443 L1249.86 682.443 L1249.3 682.443 L1248.74 682.443 L1248.18 682.443 L1247.62 682.443 L1247.06 682.443 L1246.5 682.443 L1245.94 682.443 L1245.38 682.443 L1244.82 682.443 L1244.26 682.443 L1243.71 682.443 L1243.15 682.443 L1242.59 682.443 L1242.03 682.443 L1241.47 682.443 L1240.91 682.443 L1240.35 682.443 L1239.79 682.443 L1239.23 682.443 L1238.67 682.443 L1238.11 682.443 L1237.55 682.443 L1236.99 682.443 L1236.44 682.443 L1235.88 682.443 L1235.32 682.443 L1234.76 682.443 L1234.2 682.443 L1233.64 682.443 L1233.08 682.443 L1232.52 682.443 L1231.96 682.443 L1231.4 682.443 L1230.84 682.443 L1230.28 682.443 L1229.72 682.443 L1229.17 682.443 L1228.61 682.443 L1228.05 682.443 L1227.49 682.443 L1226.93 682.443 L1226.37 682.443 L1225.81 682.443 L1225.25 682.443 L1224.69 682.443 L1224.13 682.443 L1223.57 682.443 L1223.01 682.443 L1222.45 682.443 L1221.89 682.443 L1221.34 682.443 L1220.78 682.443 L1220.22 682.443 L1219.66 682.443 L1219.1 682.443 L1218.54 682.443 L1217.98 682.443 L1217.42 682.443 L1216.86 682.443 L1216.3 682.443 L1215.74 682.443 L1215.18 682.443 L1214.62 682.443 L1214.07 682.443 L1213.51 682.443 L1212.95 682.443 L1212.39 682.443 L1211.83 682.443 L1211.27 682.443 L1210.71 682.443 L1210.15 682.443 L1209.59 682.443 L1209.03 682.443 L1208.47 682.443 L1207.91 682.443 L1207.35 682.443 L1206.8 682.443 L1206.24 682.443 L1205.68 682.443 L1205.12 682.443 L1204.56 682.443 L1204 682.443 L1203.44 682.443 L1202.88 682.443 L1202.32 682.443 L1201.76 682.443 L1201.2 682.443 L1200.64 682.443 L1200.08 682.443 L1199.52 682.443 L1198.97 682.443 L1198.41 682.443 L1197.85 682.443 L1197.29 682.443 L1196.73 682.443 L1196.17 682.443 L1195.61 682.443 L1195.05 682.443 L1194.49 682.443 L1193.93 682.443 L1193.37 682.443 L1192.81 682.443 L1192.25 682.443 L1191.7 682.443 L1191.14 682.443 L1190.58 682.443 L1190.02 682.443 L1189.46 682.443 L1188.9 682.443 L1188.34 682.443 L1187.78 682.443 L1187.22 682.443 L1186.66 682.443 L1186.1 682.443 L1185.54 682.443 L1184.98 682.443 L1184.43 682.443 L1183.87 682.443 L1183.31 682.443 L1182.75 682.443 L1182.19 682.443 L1181.63 682.443 L1181.07 682.443 L1180.51 682.443 L1179.95 682.443 L1179.39 682.443 L1178.83 682.443 L1178.27 682.443 L1177.71 682.443 L1177.15 682.443 L1176.6 682.443 L1176.04 682.443 L1175.48 682.443 L1174.92 682.443 L1174.36 682.443 L1173.8 682.443 L1173.24 682.443 L1172.68 682.443 L1172.12 682.443 L1171.56 682.443 L1171 682.443 L1170.44 682.443 L1169.88 682.443 L1169.33 682.443 L1168.77 682.443 L1168.21 682.443 L1167.65 682.443 L1167.09 682.443 L1166.53 682.443 L1165.97 682.443 L1165.41 682.443 L1164.85 682.443 L1164.29 682.443 L1163.73 682.443 L1163.17 682.443 L1162.61 682.443 L1162.05 682.443 L1161.5 682.443 L1160.94 682.443 L1160.38 682.443 L1159.82 682.443 L1159.26 682.443 L1158.7 682.443 L1158.14 682.443 L1157.58 682.443 L1157.02 682.443 L1156.46 682.443 L1155.9 682.443 L1155.34 682.443 L1154.78 682.443 L1154.23 682.443 L1153.67 682.443 L1153.11 682.443 L1152.55 682.443 L1151.99 682.443 L1151.43 682.443 L1150.87 682.443 L1150.31 682.443 L1149.75 682.443 L1149.19 682.443 L1148.63 682.443 L1148.07 682.443 L1147.51 682.443 L1146.96 682.443 L1146.4 682.443 L1145.84 682.443 L1145.28 682.443 L1144.72 682.443 L1144.16 682.443 L1143.6 682.443 L1143.04 682.443 L1142.48 682.443 L1141.92 682.443 L1141.36 682.443 L1140.8 682.443 L1140.24 682.443 L1139.68 682.443 L1139.13 682.443 L1138.57 682.443 L1138.01 682.443 L1137.45 682.443 L1136.89 682.443 L1136.33 682.443 L1135.77 682.443 L1135.21 682.443 L1134.65 682.443 L1134.09 682.443 L1133.53 682.443 L1132.97 682.443 L1132.41 682.443 L1131.86 682.443 L1131.3 682.443 L1130.74 682.443 L1130.18 682.443 L1129.62 682.443 L1129.06 682.443 L1128.5 682.443 L1127.94 682.443 L1127.38 682.443 L1126.82 682.443 L1126.26 682.443 L1125.7 682.443 L1125.14 682.443 L1124.59 682.443 L1124.03 682.443 L1123.47 682.443 L1122.91 682.443 L1122.35 682.443 L1121.79 682.443 L1121.23 682.443 L1120.67 682.443 L1120.11 682.443 L1119.55 682.443 L1118.99 682.443 L1118.43 682.443 L1117.87 682.443 L1117.31 682.443 L1116.76 682.443 L1116.2 682.443 L1115.64 682.443 L1115.08 682.443 L1114.52 682.443 L1113.96 682.443 L1113.4 682.443 L1112.84 682.443 L1112.28 682.443 L1111.72 682.443 L1111.16 682.443 L1110.6 682.443 L1110.04 682.443 L1109.49 682.443 L1108.93 682.443 L1108.37 682.443 L1107.81 682.443 L1107.25 682.443 L1106.69 682.443 L1106.13 682.443 L1105.57 682.443 L1105.01 682.443 L1104.45 682.443 L1103.89 682.443 L1103.33 682.443 L1102.77 682.443 L1102.22 682.443 L1101.66 682.443 L1101.1 682.443 L1100.54 682.443 L1099.98 682.443 L1099.42 682.443 L1098.86 682.443 L1098.3 682.443 L1097.74 682.443 L1097.18 682.443 L1096.62 682.443 L1096.06 682.443 L1095.5 682.443 L1094.94 682.443 L1094.39 682.443 L1093.83 682.443 L1093.27 682.443 L1092.71 682.443 L1092.15 682.443 L1091.59 682.443 L1091.03 682.443 L1090.47 682.443 L1089.91 682.443 L1089.35 682.443 L1088.79 682.443 L1088.23 682.443 L1087.67 682.443 L1087.12 682.443 L1086.56 682.443 L1086 682.443 L1085.44 682.443 L1084.88 682.443 L1084.32 682.443 L1083.76 682.443 L1083.2 682.443 L1082.64 682.443 L1082.08 682.443 L1081.52 682.443 L1080.96 682.443 L1080.4 682.443 L1079.85 682.443 L1079.29 682.443 L1078.73 682.443 L1078.17 682.443 L1077.61 682.443 L1077.05 682.443 L1076.49 682.443 L1075.93 682.443 L1075.37 682.443 L1074.81 682.443 L1074.25 682.443 L1073.69 682.443 L1073.13 682.443 L1072.57 682.443 L1072.02 682.443 L1071.46 682.443 L1070.9 682.443 L1070.34 682.443 L1069.78 682.443 L1069.22 682.443 L1068.66 682.443 L1068.1 682.443 L1067.54 682.443 L1066.98 682.443 L1066.42 682.443 L1065.86 682.443 L1065.3 682.443 L1064.75 682.443 L1064.19 682.443 L1063.63 682.443 L1063.07 682.443 L1062.51 682.443 L1061.95 682.443 L1061.39 682.443 L1060.83 682.443 L1060.27 682.443 L1059.71 682.443 L1059.15 682.443 L1058.59 682.443 L1058.03 682.443 L1057.48 682.443 L1056.92 682.443 L1056.36 682.443 L1055.8 682.443 L1055.24 682.443 L1054.68 682.443 L1054.12 682.443 L1053.56 682.443 L1053 682.443 L1052.44 682.443 L1051.88 682.443 L1051.32 682.443 L1050.76 682.443 L1050.2 682.443 L1049.65 682.443 L1049.09 682.443 L1048.53 682.443 L1047.97 682.443 L1047.41 682.443 L1046.85 682.443 L1046.29 682.443 L1045.73 682.443 L1045.17 682.443 L1044.61 682.443 L1044.05 682.443 L1043.49 682.443 L1042.93 682.443 L1042.38 682.443 L1041.82 682.443 L1041.26 682.443 L1040.7 682.443 L1040.14 682.443 L1039.58 682.443 L1039.02 682.443 L1038.46 682.443 L1037.9 682.443 L1037.34 682.443 L1036.78 682.443 L1036.22 682.443 L1035.66 682.443 L1035.1 682.443 L1034.55 682.443 L1033.99 682.443 L1033.43 682.443 L1032.87 682.443 L1032.31 682.443 L1031.75 682.443 L1031.19 682.443 L1030.63 682.443 L1030.07 682.443 L1029.51 682.443 L1028.95 682.443 L1028.39 682.443 L1027.83 682.443 L1027.28 682.443 L1026.72 682.443 L1026.16 682.443 L1025.6 682.443 L1025.04 682.443 L1024.48 682.443 L1023.92 682.443 L1023.36 682.443 L1022.8 682.443 L1022.24 682.443 L1021.68 682.443 L1021.12 682.443 L1020.56 682.443 L1020.01 682.443 L1019.45 682.443 L1018.89 682.443 L1018.33 682.443 L1017.77 682.443 L1017.21 682.443 L1016.65 682.443 L1016.09 682.443 L1015.53 682.443 L1014.97 682.443 L1014.41 682.443 L1013.85 682.443 L1013.29 682.443 L1012.73 682.443 L1012.18 682.443 L1011.62 682.443 L1011.06 682.443 L1010.5 682.443 L1009.94 682.443 L1009.38 682.443 L1008.82 682.443 L1008.26 682.443 L1007.7 682.443 L1007.14 682.443 L1006.58 682.443 L1006.02 682.443 L1005.46 682.443 L1004.91 682.443 L1004.35 682.443 L1003.79 682.443 L1003.23 682.443 L1002.67 682.443 L1002.11 682.443 L1001.55 682.443 L1000.99 682.443 L1000.43 682.443 L999.872 682.443 L999.313 682.443 L998.754 682.443 L998.194 682.443 L997.635 682.443 L997.076 682.443 L996.517 682.443 L995.957 682.443 L995.398 682.443 L994.839 682.443 L994.28 682.443 L993.72 682.443 L993.161 682.443 L992.602 682.443 L992.043 682.443 L991.483 682.443 L990.924 682.443 L990.365 682.443 L989.806 682.443 L989.246 682.443 L988.687 682.443 L988.128 682.443 L987.569 682.443 L987.009 682.443 L986.45 682.443 L985.891 682.443 L985.332 682.443 L984.772 682.443 L984.213 682.443 L983.654 682.443 L983.095 682.443 L982.535 682.443 L981.976 682.443 L981.417 682.443 L980.858 682.443 L980.298 682.443 L979.739 682.443 L979.18 682.443 L978.621 682.443 L978.061 682.443 L977.502 682.443 L976.943 682.443 L976.384 682.443 L975.824 682.443 L975.265 682.443 L974.706 682.443 L974.147 682.443 L973.587 682.443 L973.028 682.443 L972.469 682.443 L971.91 682.443 L971.35 682.443 L970.791 682.443 L970.232 682.443 L969.673 682.443 L969.113 682.443 L968.554 682.443 L967.995 682.443 L967.436 682.443 L966.876 682.443 L966.317 682.443 L965.758 682.443 L965.199 682.443 L964.639 682.443 L964.08 682.443 L963.521 682.443 L962.962 682.443 L962.402 682.443 L961.843 682.443 L961.284 682.443 L960.725 682.443 L960.165 682.443 L959.606 682.443 L959.047 682.443 L958.488 682.443 L957.928 682.443 L957.369 682.443 L956.81 682.443 L956.251 682.443 L955.691 682.443 L955.132 682.443 L954.573 682.443 L954.014 682.443 L953.454 682.443 L952.895 682.443 L952.336 682.443 L951.777 682.443 L951.217 682.443 L950.658 682.443 L950.099 682.443 L949.54 682.443 L948.98 682.443 L948.421 682.443 L947.862 682.443 L947.303 682.443 L946.743 682.443 L946.184 682.443 L945.625 682.443 L945.066 682.443 L944.506 682.443 L943.947 682.443 L943.388 682.443 L942.829 682.443 L942.269 682.443 L941.71 682.443 L941.151 682.443 L940.592 682.443 L940.032 682.443 L939.473 682.443 L938.914 682.443 L938.355 682.443 L937.795 682.443 L937.236 682.443 L936.677 682.443 L936.118 682.443 L935.558 682.443 L934.999 682.443 L934.44 682.443 L933.881 682.443 L933.321 682.443 L932.762 682.443 L932.203 682.443 L931.644 682.443 L931.084 682.443 L930.525 682.443 L929.966 682.443 L929.406 682.443 L928.847 682.443 L928.288 682.443 L927.729 682.443 L927.169 682.443 L926.61 682.443 L926.051 682.443 L925.492 682.443 L924.932 682.443 L924.373 682.443 L923.814 682.443 L923.255 682.443 L922.695 682.443 L922.136 682.443 L921.577 682.443 L921.018 682.443 L920.458 682.443 L919.899 682.443 L919.34 682.443 L918.781 682.443 L918.221 682.443 L917.662 682.443 L917.103 682.443 L916.544 682.443 L915.984 682.443 L915.425 682.443 L914.866 682.443 L914.307 682.443 L913.747 682.443 L913.188 682.443 L912.629 682.443 L912.07 682.443 L911.51 682.443 L910.951 682.443 L910.392 682.443 L909.833 682.443 L909.273 682.443 L908.714 682.443 L908.155 682.443 L907.596 682.443 L907.036 682.443 L906.477 682.443 L905.918 682.443 L905.359 682.443 L904.799 682.443 L904.24 682.443 L903.681 682.443 L903.122 682.443 L902.562 682.443 L902.003 682.443 L901.444 682.443 L900.885 682.443 L900.325 682.443 L899.766 682.443 L899.207 682.443 L898.648 682.443 L898.088 682.443 L897.529 682.443 L896.97 682.443 L896.411 682.443 L895.851 682.443 L895.292 682.443 L894.733 682.443 L894.174 682.443 L893.614 682.443 L893.055 682.443 L892.496 682.443 L891.937 682.443 L891.377 682.443 L890.818 682.443 L890.259 682.443 L889.7 682.443 L889.14 682.443 L888.581 682.443 L888.022 682.443 L887.463 682.443 L886.903 682.443 L886.344 682.443 L885.785 682.443 L885.226 682.443 L884.666 682.443 L884.107 682.443 L883.548 682.443 L882.989 682.443 L882.429 682.443 L881.87 682.443 L881.311 682.443 L880.752 682.443 L880.192 682.443 L879.633 682.443 L879.074 682.443 L878.515 682.443 L877.955 682.443 L877.396 682.443 L876.837 682.443 L876.278 682.443 L875.718 682.443 L875.159 682.443 L874.6 682.443 L874.041 682.443 L873.481 682.443 L872.922 682.443 L872.363 682.443 L871.804 682.443 L871.244 682.443 L870.685 682.443 L870.126 682.443 L869.567 682.443 L869.007 682.443 L868.448 682.443 L867.889 682.443 L867.33 682.443 L866.77 682.443 L866.211 682.443 L865.652 682.443 L865.093 682.443 L864.533 682.443 L863.974 682.443 L863.415 682.443 L862.856 682.443 L862.296 682.443 L861.737 682.443 L861.178 682.443 L860.619 682.443 L860.059 682.443 L859.5 682.443 L858.941 682.443 L858.382 682.443 L857.822 682.443 L857.263 682.443 L856.704 682.443 L856.145 682.443 L855.585 682.443 L855.026 682.443 L854.467 682.443 L853.908 682.443 L853.348 682.443 L852.789 682.443 L852.23 682.443 L851.671 682.443 L851.111 682.443 L850.552 682.443 L849.993 682.443 L849.434 682.443 L848.874 682.443 L848.315 682.443 L847.756 682.443 L847.197 682.443 L846.637 682.443 L846.078 682.443 L845.519 682.443 L844.96 682.443 L844.4 682.443 L843.841 682.443 L843.282 682.443 L842.723 682.443 L842.163 682.443 L841.604 682.443 L841.045 682.443 L840.486 682.443 L839.926 682.443 L839.367 682.443 L838.808 682.443 L838.249 682.443 L837.689 682.443 L837.13 682.443 L836.571 682.443 L836.012 682.443 L835.452 682.443 L834.893 682.443 L834.334 682.443 L833.775 682.443 L833.215 682.443 L832.656 682.443 L832.097 682.443 L831.538 682.443 L830.978 682.443 L830.419 682.443 L829.86 682.443 L829.301 682.443 L828.741 682.443 L828.182 682.443 L827.623 682.443 L827.064 682.443 L826.504 682.443 L825.945 682.443 L825.386 682.443 L824.827 682.443 L824.267 682.443 L823.708 682.443 L823.149 682.443 L822.59 682.443 L822.03 682.443 L821.471 682.443 L820.912 682.443 L820.353 682.443 L819.793 682.443 L819.234 682.443 L818.675 682.443 L818.116 682.443 L817.556 682.443 L816.997 682.443 L816.438 682.443 L815.879 682.443 L815.319 682.443 L814.76 682.443 L814.201 682.443 L813.642 682.443 L813.082 682.443 L812.523 682.443 L811.964 682.443 L811.405 682.443 L810.845 682.443 L810.286 682.443 L809.727 682.443 L809.168 682.443 L808.608 682.443 L808.049 682.443 L807.49 682.443 L806.931 682.443 L806.371 682.443 L805.812 682.443 L805.253 682.443 L804.693 682.443 L804.134 682.443 L803.575 682.443 L803.016 682.443 L802.456 682.443 L801.897 682.443 L801.338 682.443 L800.779 682.443 L800.219 682.443 L799.66 682.443 L799.101 682.443 L798.542 682.443 L797.982 682.443 L797.423 682.443 L796.864 682.443 L796.305 682.443 L795.745 682.443 L795.186 682.443 L794.627 682.443 L794.068 682.443 L793.508 682.443 L792.949 682.443 L792.39 682.443 L791.831 682.443 L791.271 682.443 L790.712 682.443 L790.153 682.443 L789.594 682.443 L789.034 682.443 L788.475 682.443 L787.916 682.443 L787.357 682.443 L786.797 682.443 L786.238 682.443 L785.679 682.443 L785.12 682.443 L784.56 682.443 L784.001 682.443 L783.442 682.443 L782.883 682.443 L782.323 682.443 L781.764 682.443 L781.205 682.443 L780.646 682.443 L780.086 682.443 L779.527 682.443 L778.968 682.443 L778.409 682.443 L777.849 682.443 L777.29 682.443 L776.731 682.443 L776.172 682.443 L775.612 682.443 L775.053 682.443 L774.494 682.443 L773.935 682.443 L773.375 682.443 L772.816 682.443 L772.257 682.443 L771.698 682.443 L771.138 682.443 L770.579 682.443 L770.02 682.443 L769.461 682.443 L768.901 682.443 L768.342 682.443 L767.783 682.443 L767.224 682.443 L766.664 682.443 L766.105 682.443 L765.546 682.443 L764.987 682.443 L764.427 682.443 L763.868 682.443 L763.309 682.443 L762.75 682.443 L762.19 682.443 L761.631 682.443 L761.072 682.443 L760.513 682.443 L759.953 682.443 L759.394 682.443 L758.835 682.443 L758.276 682.443 L757.716 682.443 L757.157 682.443 L756.598 682.443 L756.039 682.443 L755.479 682.443 L754.92 682.443 L754.361 682.443 L753.802 682.443 L753.242 682.443 L752.683 682.443 L752.124 682.443 L751.565 682.443 L751.005 682.443 L750.446 682.443 L749.887 682.443 L749.328 682.443 L748.768 682.443 L748.209 682.443 L747.65 682.443 L747.091 682.443 L746.531 682.443 L745.972 682.443 L745.413 682.443 L744.854 682.443 L744.294 682.443 L743.735 682.443 L743.176 682.443 L742.617 682.443 L742.057 682.443 L741.498 682.443 L740.939 682.443 L740.38 682.443 L739.82 682.443 L739.261 682.443 L738.702 682.443 L738.143 682.443 L737.583 682.443 L737.024 682.443 L736.465 682.443 L735.906 682.443 L735.346 682.443 L734.787 682.443 L734.228 682.443 L733.669 682.443 L733.109 682.443 L732.55 682.443 L731.991 682.443 L731.432 682.443 L730.872 682.443 L730.313 682.443 L729.754 682.443 L729.195 682.443 L728.635 682.443 L728.076 682.443 L727.517 682.443 L726.958 682.443 L726.398 682.443 L725.839 682.443 L725.28 682.443 L724.721 682.443 L724.161 682.443 L723.602 682.443 L723.043 682.443 L722.484 682.443 L721.924 682.443 L721.365 682.443 L720.806 682.443 L720.247 682.443  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.232 720.806,683.232 721.365,683.232 721.924,683.232 722.484,683.232 723.043,683.232 723.602,683.232 724.161,683.232 724.721,683.232 725.28,683.232 725.839,683.232 726.398,683.232 726.958,683.232 727.517,683.232 728.076,683.232 728.635,683.232 729.195,683.232 729.754,683.232 730.313,683.232 730.872,683.232 731.432,683.232 731.991,683.232 732.55,683.232 733.109,683.232 733.669,683.232 734.228,683.232 734.787,683.232 735.346,683.232 735.906,683.232 736.465,683.232 737.024,683.232 737.583,683.232 738.143,683.232 738.702,683.232 739.261,683.232 739.82,683.232 740.38,683.232 740.939,683.232 741.498,683.232 742.057,683.232 742.617,683.232 743.176,683.232 743.735,683.232 744.294,683.232 744.854,683.232 745.413,683.232 745.972,683.232 746.531,683.232 747.091,683.232 747.65,683.232 748.209,683.232 748.768,683.232 749.328,683.232 749.887,683.232 750.446,683.232 751.005,683.232 751.565,683.232 752.124,683.232 752.683,683.232 753.242,683.232 753.802,683.232 754.361,683.232 754.92,683.232 755.479,683.232 756.039,683.232 756.598,683.232 757.157,683.232 757.716,683.232 758.276,683.232 758.835,683.232 759.394,683.232 759.953,683.232 760.513,683.232 761.072,683.232 761.631,683.232 762.19,683.232 762.75,683.232 763.309,683.232 763.868,683.232 764.427,683.232 764.987,683.232 765.546,683.232 766.105,683.232 766.664,683.232 767.224,683.232 767.783,683.232 768.342,683.232 768.901,683.232 769.461,683.232 770.02,683.232 770.579,683.232 771.138,683.232 771.698,683.232 772.257,683.232 772.816,683.232 773.375,683.232 773.935,683.232 774.494,683.232 775.053,683.232 775.612,683.232 776.172,683.232 776.731,683.232 777.29,683.232 777.849,683.232 778.409,683.232 778.968,683.232 779.527,683.232 780.086,683.232 780.646,683.232 781.205,683.232 781.764,683.232 782.323,683.232 782.883,683.232 783.442,683.232 784.001,683.232 784.56,683.232 785.12,683.232 785.679,683.232 786.238,683.232 786.797,683.232 787.357,683.232 787.916,683.232 788.475,683.232 789.034,683.232 789.594,683.232 790.153,683.232 790.712,683.232 791.271,683.232 791.831,683.232 792.39,683.232 792.949,683.232 793.508,683.232 794.068,683.232 794.627,683.232 795.186,683.232 795.745,683.232 796.305,683.232 796.864,683.232 797.423,683.232 797.982,683.232 798.542,683.232 799.101,683.232 799.66,683.232 800.219,683.232 800.779,683.232 801.338,683.232 801.897,683.232 802.456,683.232 803.016,683.232 803.575,683.232 804.134,683.232 804.693,683.232 805.253,683.232 805.812,683.232 806.371,683.232 806.931,683.232 807.49,683.232 808.049,683.232 808.608,683.232 809.168,683.232 809.727,683.232 810.286,683.232 810.845,683.232 811.405,683.232 811.964,683.232 812.523,683.232 813.082,683.232 813.642,683.232 814.201,683.232 814.76,683.232 815.319,683.232 815.879,683.232 816.438,683.232 816.997,683.232 817.556,683.232 818.116,683.232 818.675,683.232 819.234,683.232 819.793,683.232 820.353,683.232 820.912,683.232 821.471,683.232 822.03,683.232 822.59,683.232 823.149,683.232 823.708,683.232 824.267,683.232 824.827,683.232 825.386,683.232 825.945,683.232 826.504,683.232 827.064,683.232 827.623,683.232 828.182,683.232 828.741,683.232 829.301,683.232 829.86,683.232 830.419,683.232 830.978,683.232 831.538,683.232 832.097,683.232 832.656,683.232 833.215,683.232 833.775,683.232 834.334,683.232 834.893,683.232 835.452,683.232 836.012,683.232 836.571,683.232 837.13,683.232 837.689,683.232 838.249,683.232 838.808,683.232 839.367,683.232 839.926,683.232 840.486,683.232 841.045,683.232 841.604,683.232 842.163,683.232 842.723,683.232 843.282,683.232 843.841,683.232 844.4,683.232 844.96,683.232 845.519,683.232 846.078,683.232 846.637,683.232 847.197,683.232 847.756,683.232 848.315,683.232 848.874,683.232 849.434,683.232 849.993,683.232 850.552,683.232 851.111,683.232 851.671,683.232 852.23,683.232 852.789,683.232 853.348,683.232 853.908,683.232 854.467,683.232 855.026,683.232 855.585,683.232 856.145,683.232 856.704,683.232 857.263,683.232 857.822,683.232 858.382,683.232 858.941,683.232 859.5,683.232 860.059,683.232 860.619,683.232 861.178,683.232 861.737,683.232 862.296,683.232 862.856,683.232 863.415,683.232 863.974,683.232 864.533,683.232 865.093,683.232 865.652,683.232 866.211,683.232 866.77,683.232 867.33,683.232 867.889,683.232 868.448,683.232 869.007,683.232 869.567,683.232 870.126,683.232 870.685,683.232 871.244,683.232 871.804,683.232 872.363,683.232 872.922,683.232 873.481,683.232 874.041,683.232 874.6,683.232 875.159,683.232 875.718,683.232 876.278,683.232 876.837,683.232 877.396,683.232 877.955,683.232 878.515,683.232 879.074,683.232 879.633,683.232 880.192,683.232 880.752,683.232 881.311,683.232 881.87,683.232 882.429,683.232 882.989,683.232 883.548,683.232 884.107,683.232 884.666,683.232 885.226,683.232 885.785,683.232 886.344,683.232 886.903,683.232 887.463,683.232 888.022,683.232 888.581,683.232 889.14,683.232 889.7,683.232 890.259,683.232 890.818,683.232 891.377,683.232 891.937,683.232 892.496,683.232 893.055,683.232 893.614,683.232 894.174,683.232 894.733,683.232 895.292,683.232 895.851,683.232 896.411,683.232 896.97,683.232 897.529,683.232 898.088,683.232 898.648,683.232 899.207,683.232 899.766,683.232 900.325,683.232 900.885,683.232 901.444,683.232 902.003,683.232 902.562,683.232 903.122,683.232 903.681,683.232 904.24,683.232 904.799,683.232 905.359,683.232 905.918,683.232 906.477,683.232 907.036,683.232 907.596,683.232 908.155,683.232 908.714,683.232 909.273,683.232 909.833,683.232 910.392,683.232 910.951,683.232 911.51,683.232 912.07,683.232 912.629,683.232 913.188,683.232 913.747,683.232 914.307,683.232 914.866,683.232 915.425,683.232 915.984,683.232 916.544,683.232 917.103,683.232 917.662,683.232 918.221,683.232 918.781,683.232 919.34,683.232 919.899,683.232 920.458,683.232 921.018,683.232 921.577,683.232 922.136,683.232 922.695,683.232 923.255,683.232 923.814,683.232 924.373,683.232 924.932,683.232 925.492,683.232 926.051,683.232 926.61,683.232 927.169,683.232 927.729,683.232 928.288,683.232 928.847,683.232 929.406,683.232 929.966,683.232 930.525,683.232 931.084,683.232 931.644,683.232 932.203,683.232 932.762,683.232 933.321,683.232 933.881,683.232 934.44,683.232 934.999,683.232 935.558,683.232 936.118,683.232 936.677,683.232 937.236,683.232 937.795,683.232 938.355,683.232 938.914,683.232 939.473,683.232 940.032,683.232 940.592,683.232 941.151,683.232 941.71,683.232 942.269,683.232 942.829,683.232 943.388,683.232 943.947,683.232 944.506,683.232 945.066,683.232 945.625,683.232 946.184,683.232 946.743,683.232 947.303,683.232 947.862,683.232 948.421,683.232 948.98,683.232 949.54,683.232 950.099,683.232 950.658,683.232 951.217,683.232 951.777,683.232 952.336,683.232 952.895,683.232 953.454,683.232 954.014,683.232 954.573,683.232 955.132,683.232 955.691,683.232 956.251,683.232 956.81,683.232 957.369,683.232 957.928,683.232 958.488,683.232 959.047,683.232 959.606,683.232 960.165,683.232 960.725,683.232 961.284,683.232 961.843,683.232 962.402,683.232 962.962,683.232 963.521,683.232 964.08,683.232 964.639,683.232 965.199,683.232 965.758,683.232 966.317,683.232 966.876,683.232 967.436,683.232 967.995,683.232 968.554,683.232 969.113,683.232 969.673,683.232 970.232,683.232 970.791,683.232 971.35,683.232 971.91,683.232 972.469,683.232 973.028,683.232 973.587,683.232 974.147,683.232 974.706,683.232 975.265,683.232 975.824,683.232 976.384,683.232 976.943,683.232 977.502,683.232 978.061,683.232 978.621,683.232 979.18,683.232 979.739,683.232 980.298,683.232 980.858,683.232 981.417,683.232 981.976,683.232 982.535,683.232 983.095,683.232 983.654,683.232 984.213,683.232 984.772,683.232 985.332,683.232 985.891,683.232 986.45,683.232 987.009,683.232 987.569,683.232 988.128,683.232 988.687,683.232 989.246,683.232 989.806,683.232 990.365,683.232 990.924,683.232 991.483,683.232 992.043,683.232 992.602,683.232 993.161,683.232 993.72,683.232 994.28,683.232 994.839,683.232 995.398,683.232 995.957,683.232 996.517,683.232 997.076,683.232 997.635,683.232 998.194,683.232 998.754,683.232 999.313,683.232 999.872,683.232 1000.43,683.232 1000.99,683.232 1001.55,683.232 1002.11,683.232 1002.67,683.232 1003.23,683.232 1003.79,683.232 1004.35,683.232 1004.91,683.232 1005.46,683.232 1006.02,683.232 1006.58,683.232 1007.14,683.232 1007.7,683.232 1008.26,683.232 1008.82,683.232 1009.38,683.232 1009.94,683.232 1010.5,683.232 1011.06,683.232 1011.62,683.232 1012.18,683.232 1012.73,683.232 1013.29,683.232 1013.85,683.232 1014.41,683.232 1014.97,683.232 1015.53,683.232 1016.09,683.232 1016.65,683.232 1017.21,683.232 1017.77,683.232 1018.33,683.232 1018.89,683.232 1019.45,683.232 1020.01,683.232 1020.56,683.232 1021.12,683.232 1021.68,683.232 1022.24,683.232 1022.8,683.232 1023.36,683.232 1023.92,683.232 1024.48,683.232 1025.04,683.232 1025.6,683.232 1026.16,683.232 1026.72,683.232 1027.28,683.232 1027.83,683.232 1028.39,683.232 1028.95,683.232 1029.51,683.232 1030.07,683.232 1030.63,683.232 1031.19,683.232 1031.75,683.232 1032.31,683.232 1032.87,683.232 1033.43,683.232 1033.99,683.232 1034.55,683.232 1035.1,683.232 1035.66,683.232 1036.22,683.232 1036.78,683.232 1037.34,683.232 1037.9,683.232 1038.46,683.232 1039.02,683.232 1039.58,683.232 1040.14,683.232 1040.7,683.232 1041.26,683.232 1041.82,683.232 1042.38,683.232 1042.93,683.232 1043.49,683.232 1044.05,683.232 1044.61,683.232 1045.17,683.232 1045.73,683.232 1046.29,683.232 1046.85,683.232 1047.41,683.232 1047.97,683.232 1048.53,683.232 1049.09,683.232 1049.65,683.232 1050.2,683.232 1050.76,683.232 1051.32,683.232 1051.88,683.232 1052.44,683.232 1053,683.232 1053.56,683.232 1054.12,683.232 1054.68,683.232 1055.24,683.232 1055.8,683.232 1056.36,683.232 1056.92,683.232 1057.48,683.232 1058.03,683.232 1058.59,683.232 1059.15,683.232 1059.71,683.232 1060.27,683.232 1060.83,683.232 1061.39,683.232 1061.95,683.232 1062.51,683.232 1063.07,683.232 1063.63,683.232 1064.19,683.232 1064.75,683.232 1065.3,683.232 1065.86,683.232 1066.42,683.232 1066.98,683.232 1067.54,683.232 1068.1,683.232 1068.66,683.232 1069.22,683.232 1069.78,683.232 1070.34,683.232 1070.9,683.232 1071.46,683.232 1072.02,683.232 1072.57,683.232 1073.13,683.232 1073.69,683.232 1074.25,683.232 1074.81,683.232 1075.37,683.232 1075.93,683.232 1076.49,683.232 1077.05,683.232 1077.61,683.232 1078.17,683.232 1078.73,683.232 1079.29,683.232 1079.85,683.232 1080.4,683.232 1080.96,683.232 1081.52,683.232 1082.08,683.232 1082.64,683.232 1083.2,683.232 1083.76,683.232 1084.32,683.232 1084.88,683.232 1085.44,683.232 1086,683.232 1086.56,683.232 1087.12,683.232 1087.67,683.232 1088.23,683.232 1088.79,683.232 1089.35,683.232 1089.91,683.232 1090.47,683.232 1091.03,683.232 1091.59,683.232 1092.15,683.232 1092.71,683.232 1093.27,683.232 1093.83,683.232 1094.39,683.232 1094.94,683.232 1095.5,683.232 1096.06,683.232 1096.62,683.232 1097.18,683.232 1097.74,683.232 1098.3,683.232 1098.86,683.232 1099.42,683.232 1099.98,683.232 1100.54,683.232 1101.1,683.232 1101.66,683.232 1102.22,683.232 1102.77,683.232 1103.33,683.232 1103.89,683.232 1104.45,683.232 1105.01,683.232 1105.57,683.232 1106.13,683.232 1106.69,683.232 1107.25,683.232 1107.81,683.232 1108.37,683.232 1108.93,683.232 1109.49,683.232 1110.04,683.232 1110.6,683.232 1111.16,683.232 1111.72,683.232 1112.28,683.232 1112.84,683.232 1113.4,683.232 1113.96,683.232 1114.52,683.232 1115.08,683.232 1115.64,683.232 1116.2,683.232 1116.76,683.232 1117.31,683.232 1117.87,683.232 1118.43,683.232 1118.99,683.232 1119.55,683.232 1120.11,683.232 1120.67,683.232 1121.23,683.232 1121.79,683.232 1122.35,683.232 1122.91,683.232 1123.47,683.232 1124.03,683.232 1124.59,683.232 1125.14,683.232 1125.7,683.232 1126.26,683.232 1126.82,683.232 1127.38,683.232 1127.94,683.232 1128.5,683.232 1129.06,683.232 1129.62,683.232 1130.18,683.232 1130.74,683.232 1131.3,683.232 1131.86,683.232 1132.41,683.232 1132.97,683.232 1133.53,683.232 1134.09,683.232 1134.65,683.232 1135.21,683.232 1135.77,683.232 1136.33,683.232 1136.89,683.232 1137.45,683.232 1138.01,683.232 1138.57,683.232 1139.13,683.232 1139.68,683.232 1140.24,683.232 1140.8,683.232 1141.36,683.232 1141.92,683.232 1142.48,683.232 1143.04,683.232 1143.6,683.232 1144.16,683.232 1144.72,683.232 1145.28,683.232 1145.84,683.232 1146.4,683.232 1146.96,683.232 1147.51,683.232 1148.07,683.232 1148.63,683.232 1149.19,683.232 1149.75,683.232 1150.31,683.232 1150.87,683.232 1151.43,683.232 1151.99,683.232 1152.55,683.232 1153.11,683.232 1153.67,683.232 1154.23,683.232 1154.78,683.232 1155.34,683.232 1155.9,683.232 1156.46,683.232 1157.02,683.232 1157.58,683.232 1158.14,683.232 1158.7,683.232 1159.26,683.232 1159.82,683.232 1160.38,683.232 1160.94,683.232 1161.5,683.232 1162.05,683.232 1162.61,683.232 1163.17,683.232 1163.73,683.232 1164.29,683.232 1164.85,683.232 1165.41,683.232 1165.97,683.232 1166.53,683.232 1167.09,683.232 1167.65,683.232 1168.21,683.232 1168.77,683.232 1169.33,683.232 1169.88,683.232 1170.44,683.232 1171,683.232 1171.56,683.232 1172.12,683.232 1172.68,683.232 1173.24,683.232 1173.8,683.232 1174.36,683.232 1174.92,683.232 1175.48,683.232 1176.04,683.232 1176.6,683.232 1177.15,683.232 1177.71,683.232 1178.27,683.232 1178.83,683.232 1179.39,683.232 1179.95,683.232 1180.51,683.232 1181.07,683.232 1181.63,683.232 1182.19,683.232 1182.75,683.232 1183.31,683.232 1183.87,683.232 1184.43,683.232 1184.98,683.232 1185.54,683.232 1186.1,683.232 1186.66,683.232 1187.22,683.232 1187.78,683.232 1188.34,683.232 1188.9,683.232 1189.46,683.232 1190.02,683.232 1190.58,683.232 1191.14,683.232 1191.7,683.232 1192.25,683.232 1192.81,683.232 1193.37,683.232 1193.93,683.232 1194.49,683.232 1195.05,683.232 1195.61,683.232 1196.17,683.232 1196.73,683.232 1197.29,683.232 1197.85,683.232 1198.41,683.232 1198.97,683.232 1199.52,683.232 1200.08,683.232 1200.64,683.232 1201.2,683.232 1201.76,683.232 1202.32,683.232 1202.88,683.232 1203.44,683.232 1204,683.232 1204.56,683.232 1205.12,683.232 1205.68,683.232 1206.24,683.232 1206.8,683.232 1207.35,683.232 1207.91,683.232 1208.47,683.232 1209.03,683.232 1209.59,683.232 1210.15,683.232 1210.71,683.232 1211.27,683.232 1211.83,683.232 1212.39,683.232 1212.95,683.232 1213.51,683.232 1214.07,683.232 1214.62,683.232 1215.18,683.232 1215.74,683.232 1216.3,683.232 1216.86,683.232 1217.42,683.232 1217.98,683.232 1218.54,683.232 1219.1,683.232 1219.66,683.232 1220.22,683.232 1220.78,683.232 1221.34,683.232 1221.89,683.232 1222.45,683.232 1223.01,683.232 1223.57,683.232 1224.13,683.232 1224.69,683.232 1225.25,683.232 1225.81,683.232 1226.37,683.232 1226.93,683.232 1227.49,683.232 1228.05,683.232 1228.61,683.232 1229.17,683.232 1229.72,683.232 1230.28,683.232 1230.84,683.232 1231.4,683.232 1231.96,683.232 1232.52,683.232 1233.08,683.232 1233.64,683.232 1234.2,683.232 1234.76,683.232 1235.32,683.232 1235.88,683.232 1236.44,683.232 1236.99,683.232 1237.55,683.232 1238.11,683.232 1238.67,683.232 1239.23,683.232 1239.79,683.232 1240.35,683.232 1240.91,683.232 1241.47,683.232 1242.03,683.232 1242.59,683.232 1243.15,683.232 1243.71,683.232 1244.26,683.232 1244.82,683.232 1245.38,683.232 1245.94,683.232 1246.5,683.232 1247.06,683.232 1247.62,683.232 1248.18,683.232 1248.74,683.232 1249.3,683.232 1249.86,683.232 1250.42,683.232 1250.98,683.232 1251.54,683.232 1252.09,683.232 1252.65,683.232 1253.21,683.232 1253.77,683.232 1254.33,683.232 1254.89,683.232 1255.45,683.232 1256.01,683.232 1256.57,683.232 1257.13,683.232 1257.69,683.232 1258.25,683.232 1258.81,683.232 1259.36,683.232 1259.92,683.232 1260.48,683.232 1261.04,683.232 1261.6,683.232 1262.16,683.232 1262.72,683.232 1263.28,683.232 1263.84,683.232 1264.4,683.232 1264.96,683.232 1265.52,683.232 1266.08,683.232 1266.63,683.232 1267.19,683.232 1267.75,683.232 1268.31,683.232 1268.87,683.232 1269.43,683.232 1269.99,683.232 1270.55,683.232 1271.11,683.232 1271.67,683.232 1272.23,683.232 1272.79,683.232 1273.35,683.232 1273.91,683.232 1274.46,683.232 1275.02,683.232 1275.58,683.232 1276.14,683.232 1276.7,683.232 1277.26,683.232 1277.82,683.232 1278.38,683.232 1278.94,683.232 1279.5,683.232 1280.06,683.232 1280.62,683.232 1281.18,683.232 1281.73,683.232 1282.29,683.232 1282.85,683.232 1283.41,683.232 1283.97,683.232 1284.53,683.232 1285.09,683.232 1285.65,683.232 1286.21,683.232 1286.77,683.232 1287.33,683.232 1287.89,683.232 1288.45,683.232 1289,683.232 1289.56,683.232 1290.12,683.232 1290.68,683.232 1291.24,683.232 1291.8,683.232 1292.36,683.232 1292.92,683.232 1293.48,683.232 1294.04,683.232 1294.6,683.232 1295.16,683.232 1295.72,683.232 1296.28,683.232 1296.83,683.232 1297.39,683.232 1297.95,683.232 1298.51,683.232 1299.07,683.232 1299.63,683.232 1300.19,683.232 1300.75,683.232 1301.31,683.232 1301.87,683.232 1302.43,683.232 1302.99,683.232 1303.55,683.232 1304.1,683.232 1304.66,683.232 1305.22,683.232 1305.78,683.232 1306.34,683.232 1306.9,683.232 1307.46,683.232 1308.02,683.232 1308.58,683.232 1309.14,683.232 1309.7,683.232 1310.26,683.232 1310.82,683.232 1311.38,683.232 1311.93,683.232 1312.49,683.232 1313.05,683.232 1313.61,683.232 1314.17,683.232 1314.73,683.232 1315.29,683.232 1315.85,683.232 1316.41,683.232 1316.97,683.232 1317.53,683.232 1318.09,683.232 1318.65,683.232 1319.2,683.232 1319.76,683.232 1320.32,683.232 1320.88,683.232 1321.44,683.232 1322,683.232 1322.56,683.232 1323.12,683.232 1323.68,683.232 1324.24,683.232 1324.8,683.232 1325.36,683.232 1325.92,683.232 1326.47,683.232 1327.03,683.232 1327.59,683.232 1328.15,683.232 1328.71,683.232 1329.27,683.232 1329.83,683.232 1330.39,683.232 1330.95,683.232 1331.51,683.232 1332.07,683.232 1332.63,683.232 1333.19,683.232 1333.75,683.232 1334.3,683.232 1334.86,683.232 1335.42,683.232 1335.98,683.232 1336.54,683.232 1337.1,683.232 1337.66,683.232 1338.22,683.232 1338.78,683.232 1339.34,683.232 1339.9,683.232 1340.46,683.232 1341.02,683.232 1341.57,683.232 1342.13,683.232 1342.69,683.232 1343.25,683.232 1343.81,683.232 1344.37,683.232 1344.93,683.232 1345.49,683.232 1346.05,683.232 1346.61,683.232 1347.17,683.232 1347.73,683.232 1348.29,683.232 1348.84,683.232 1349.4,683.232 1349.96,683.232 1350.52,683.232 1351.08,683.232 1351.64,683.232 1352.2,683.232 1352.76,683.232 1353.32,683.232 1353.88,683.232 1354.44,683.232 1355,683.232 1355.56,683.232 1356.12,683.232 1356.67,683.232 1357.23,683.232 1357.79,683.232 1358.35,683.232 1358.91,683.232 1359.47,683.232 1360.03,683.232 1360.59,683.232 1361.15,683.232 1361.71,683.232 1362.27,683.232 1362.83,683.232 1363.39,683.232 1363.94,683.232 1364.5,683.232 1365.06,683.232 1365.62,683.232 1366.18,683.232 1366.74,683.232 1367.3,683.232 1367.86,683.232 1368.42,683.232 1368.98,683.232 1369.54,683.232 1370.1,683.232 1370.66,683.232 1371.21,683.232 1371.77,683.232 1372.33,683.232 1372.89,683.232 1373.45,683.232 1374.01,683.232 1374.57,683.232 1375.13,683.232 1375.69,683.232 1376.25,683.232 1376.81,683.232 1377.37,683.232 1377.93,683.232 1378.49,683.232 1379.04,683.232 1379.6,683.232 1380.16,683.232 1380.72,683.232 1381.28,683.232 1381.84,683.232 1382.4,683.232 1382.96,683.232 1383.52,683.232 1384.08,683.232 1384.64,683.232 1385.2,683.232 1385.76,683.232 1386.31,683.232 1386.87,683.232 1387.43,683.232 1387.99,683.232 1388.55,683.232 1389.11,683.232 1389.67,683.232 1390.23,683.232 1390.79,683.232 1391.35,683.232 1391.91,683.232 1392.47,683.232 1393.03,683.232 1393.58,683.232 1394.14,683.232 1394.7,683.232 1395.26,683.232 1395.82,683.232 1396.38,683.232 1396.94,683.232 1397.5,683.232 1398.06,683.232 1398.62,683.232 1399.18,683.232 1399.74,683.232 1400.3,683.232 1400.86,683.232 1401.41,683.232 1401.97,683.232 1402.53,683.232 1403.09,683.232 1403.65,683.232 1404.21,683.232 1404.77,683.232 1405.33,683.232 1405.89,683.232 1406.45,683.232 1407.01,683.232 1407.57,683.232 1408.13,683.232 1408.68,683.232 1409.24,683.232 1409.8,683.232 1410.36,683.232 1410.92,683.232 1411.48,683.232 1412.04,683.232 1412.6,683.232 1413.16,683.232 1413.72,683.232 1414.28,683.232 1414.84,683.232 1415.4,683.232 1415.95,683.232 1416.51,683.232 1417.07,683.232 1417.63,683.232 1418.19,683.232 1418.75,683.232 1419.31,683.232 1419.87,683.232 1420.43,683.232 1420.99,683.232 1421.55,683.232 1422.11,683.232 1422.67,683.232 1423.23,683.232 1423.78,683.232 1424.34,683.232 1424.9,683.232 1425.46,683.232 1426.02,683.232 1426.58,683.232 1427.14,683.232 1427.7,683.232 1428.26,683.232 1428.82,683.232 1429.38,683.232 1429.94,683.232 1430.5,683.232 1431.05,683.232 1431.61,683.232 1432.17,683.232 1432.73,683.232 1433.29,683.232 1433.85,683.232 1434.41,683.232 1434.97,683.232 1435.53,683.232 1436.09,683.232 1436.65,683.232 1437.21,683.232 1437.77,683.232 1438.33,683.232 1438.88,683.232 1439.44,683.232 1440,683.232 1440.56,683.232 1441.12,683.232 1441.68,683.232 1442.24,683.232 1442.8,683.232 1443.36,683.232 1443.92,683.232 1444.48,683.232 1445.04,683.232 1445.6,683.232 1446.15,683.232 1446.71,683.232 1447.27,683.232 1447.83,683.232 1448.39,683.232 1448.95,683.232 1449.51,683.232 1450.07,683.232 1450.63,683.232 1451.19,683.232 1451.75,683.232 1452.31,683.232 1452.87,683.232 1453.42,683.232 1453.98,683.232 1454.54,683.232 1455.1,683.232 1455.66,683.232 1456.22,683.232 1456.78,683.232 1457.34,683.232 1457.9,683.232 1458.46,683.232 1459.02,683.232 1459.58,683.232 1460.14,683.232 1460.7,683.232 1461.25,683.232 1461.81,683.232 1462.37,683.232 1462.93,683.232 1463.49,683.232 1464.05,683.232 1464.61,683.232 1465.17,683.232 1465.73,683.232 1466.29,683.232 1466.85,683.232 1467.41,683.232 1467.97,683.232 1468.52,683.232 1469.08,683.232 1469.64,683.232 1470.2,683.232 1470.76,683.232 1471.32,683.232 1471.88,683.232 1472.44,683.232 1473,683.232 1473.56,683.232 1474.12,683.232 1474.68,683.232 1475.24,683.232 1475.79,683.232 1476.35,683.232 1476.91,683.232 1477.47,683.232 1478.03,683.232 1478.59,683.232 1479.15,683.232 1479.71,683.232 1480.27,683.232 1480.83,683.232 1481.39,683.232 1481.95,683.232 1482.51,683.232 1483.07,683.232 1483.62,683.232 1484.18,683.232 1484.74,683.232 1485.3,683.232 1485.86,683.232 1486.42,683.232 1486.98,683.232 1487.54,683.232 1488.1,683.232 1488.66,683.232 1489.22,683.232 1489.78,683.232 1490.34,683.232 1490.89,683.232 1491.45,683.232 1492.01,683.232 1492.57,683.232 1493.13,683.232 1493.69,683.232 1494.25,683.232 1494.81,683.232 1495.37,683.232 1495.93,683.232 1496.49,683.232 1497.05,683.232 1497.61,683.232 1498.16,683.232 1498.72,683.232 1499.28,683.232 1499.84,683.232 1500.4,683.232 1500.96,683.232 1501.52,683.232 1502.08,683.232 1502.64,683.232 1503.2,683.232 1503.76,683.232 1504.32,683.232 1504.88,683.232 1505.44,683.232 1505.99,683.232 1506.55,683.232 1507.11,683.232 1507.67,683.232 1508.23,683.232 1508.79,683.232 1509.35,683.232 1509.91,683.232 1510.47,683.232 1511.03,683.232 1511.59,683.232 1512.15,683.232 1512.71,683.232 1513.26,683.232 1513.82,683.232 1514.38,683.232 1514.94,683.232 1515.5,683.232 1516.06,683.232 1516.62,683.232 1517.18,683.232 1517.74,683.232 1518.3,683.232 1518.86,683.232 1519.42,683.232 1519.98,683.232 1520.53,683.232 1521.09,683.232 1521.65,683.232 1522.21,683.232 1522.77,683.232 1523.33,683.232 1523.89,683.232 1524.45,683.232 1525.01,683.232 1525.57,683.232 1526.13,683.232 1526.69,683.232 1527.25,683.232 1527.81,683.232 1528.36,683.232 1528.92,683.232 1529.48,683.232 1530.04,683.232 1530.6,683.232 1531.16,683.232 1531.72,683.232 1532.28,683.232 1532.84,683.232 1533.4,683.232 1533.96,683.232 1534.52,683.232 1535.08,683.232 1535.63,683.232 1536.19,683.232 1536.75,683.232 1537.31,683.232 1537.87,683.232 1538.43,683.232 1538.99,683.232 1539.55,683.232 1540.11,683.232 1540.67,683.232 1541.23,683.232 1541.79,683.232 1542.35,683.232 1542.9,683.232 1543.46,683.232 1544.02,683.232 1544.58,683.232 1545.14,683.232 1545.7,683.232 1546.26,683.232 1546.82,683.232 1547.38,683.232 1547.94,683.232 1548.5,683.232 1549.06,683.232 1549.62,683.232 1550.18,683.232 1550.73,683.232 1551.29,683.232 1551.85,683.232 1552.41,683.232 1552.97,683.232 1553.53,683.232 1554.09,683.232 1554.65,683.232 1555.21,683.232 1555.77,683.232 1556.33,683.232 1556.89,683.232 1557.45,683.232 1558,683.232 1558.56,683.232 1559.12,683.232 1559.68,683.232 1560.24,683.232 1560.8,683.232 1561.36,683.232 1561.92,683.232 1562.48,683.232 1563.04,683.232 1563.6,683.232 1564.16,683.232 1564.72,683.232 1565.28,683.232 1565.83,683.232 1566.39,683.232 1566.95,683.232 1567.51,683.232 1568.07,683.232 1568.63,683.232 1569.19,683.232 1569.75,683.232 1570.31,683.232 1570.87,683.232 1571.43,683.232 1571.99,683.232 1572.55,683.232 1573.1,683.232 1573.66,683.232 1574.22,683.232 1574.78,683.232 1575.34,683.232 1575.9,683.232 1576.46,683.232 1577.02,683.232 1577.58,683.232 1578.14,683.232 1578.7,683.232 1579.26,683.232 1579.82,683.232 1580.37,683.232 1580.93,683.232 1581.49,683.232 1582.05,683.232 1582.61,683.232 1583.17,683.232 1583.73,683.232 1584.29,683.232 1584.85,683.232 1585.41,683.232 1585.97,683.232 1586.53,683.232 1587.09,683.232 1587.65,683.232 1588.2,683.232 1588.76,683.232 1589.32,683.232 1589.88,683.232 1590.44,683.232 1591,683.232 1591.56,683.232 1592.12,683.232 1592.68,683.232 1593.24,683.232 1593.8,683.232 1594.36,683.232 1594.92,683.232 1595.47,683.232 1596.03,683.232 1596.59,683.232 1597.15,683.232 1597.71,683.232 1598.27,683.232 1598.83,683.232 1599.39,683.232 1599.95,683.232 1600.51,683.232 1601.07,683.232 1601.63,683.232 1602.19,683.232 1602.74,683.232 1603.3,683.232 1603.86,683.232 1604.42,683.232 1604.98,683.232 1605.54,683.232 1606.1,683.232 1606.66,683.232 1607.22,683.232 1607.78,683.232 1608.34,683.232 1608.9,683.232 1609.46,683.232 1610.02,683.232 1610.57,683.232 1611.13,683.232 1611.69,683.232 1612.25,683.232 1612.81,683.232 1613.37,683.232 1613.93,683.232 1614.49,683.232 1615.05,683.232 1615.61,683.232 1616.17,683.232 1616.73,683.232 1617.29,683.232 1617.84,683.232 1618.4,683.232 1618.96,683.232 1619.52,683.232 1620.08,683.232 1620.64,683.232 1621.2,683.232 1621.76,683.232 1622.32,683.232 1622.88,683.232 1623.44,683.232 1624,683.232 1624.56,683.232 1625.11,683.232 1625.67,683.232 1626.23,683.232 1626.79,683.232 1627.35,683.232 1627.91,683.232 1628.47,683.232 1629.03,683.232 1629.59,683.232 1630.15,683.232 1630.71,683.232 1631.27,683.232 1631.83,683.232 1632.39,683.232 1632.94,683.232 1633.5,683.232 1634.06,683.232 1634.62,683.232 1635.18,683.232 1635.74,683.232 1636.3,683.232 1636.86,683.232 1637.42,683.232 1637.98,683.232 1638.54,683.232 1639.1,683.232 1639.66,683.232 1640.21,683.232 1640.77,683.232 1641.33,683.232 1641.89,683.232 1642.45,683.232 1643.01,683.232 1643.57,683.232 1644.13,683.232 1644.69,683.232 1645.25,683.232 1645.81,683.232 1646.37,683.232 1646.93,683.232 1647.48,683.232 1648.04,683.232 1648.6,683.232 1649.16,683.232 1649.72,683.232 1650.28,683.232 1650.84,683.232 1651.4,683.232 1651.96,683.232 1652.52,683.232 1653.08,683.232 1653.64,683.232 1654.2,683.232 1654.76,683.232 1655.31,683.232 1655.87,683.232 1656.43,683.232 1656.99,683.232 1657.55,683.232 1658.11,683.232 1658.67,683.232 1659.23,683.232 1659.79,683.232 1660.35,683.232 1660.91,683.232 1661.47,683.232 1662.03,683.232 1662.58,683.232 1663.14,683.232 1663.7,683.232 1664.26,683.232 1664.82,683.232 1665.38,683.232 1665.94,683.232 1666.5,683.232 1667.06,683.232 1667.62,683.232 1668.18,683.232 1668.74,683.232 1669.3,683.232 1669.85,683.232 1670.41,683.232 1670.97,683.232 1671.53,683.232 1672.09,683.232 1672.65,683.232 1673.21,683.232 1673.77,683.232 1674.33,683.232 1674.89,683.232 1675.45,683.232 1676.01,683.232 1676.57,683.232 1677.13,683.232 1677.68,683.232 1678.24,683.232 1678.8,683.232 1679.36,683.232 1679.92,683.232 1680.48,683.232 1681.04,683.232 1681.6,683.232 1682.16,683.232 1682.72,683.232 1683.28,683.232 1683.84,683.232 1684.4,683.232 1684.95,683.232 1685.51,683.232 1686.07,683.232 1686.63,683.232 1687.19,683.232 1687.75,683.232 1688.31,683.232 1688.87,683.232 1689.43,683.232 1689.99,683.232 1690.55,683.232 1691.11,683.232 1691.67,683.232 1692.23,683.232 1692.78,683.232 1693.34,683.232 1693.9,683.232 1694.46,683.232 1695.02,683.232 1695.58,683.232 1696.14,683.232 1696.7,683.232 1697.26,683.232 1697.82,683.232 1698.38,683.232 1698.94,683.232 1699.5,683.232 1700.05,683.232 1700.61,683.232 1701.17,683.232 1701.73,683.232 1702.29,683.232 1702.85,683.232 1703.41,683.232 1703.97,683.232 1704.53,683.232 1705.09,683.232 1705.65,683.232 1706.21,683.232 1706.77,683.232 1707.32,683.232 1707.88,683.232 1708.44,683.232 1709,683.232 1709.56,683.232 1710.12,683.232 1710.68,683.232 1711.24,683.232 1711.8,683.232 1712.36,683.232 1712.92,683.232 1713.48,683.232 1714.04,683.232 1714.6,683.232 1715.15,683.232 1715.71,683.232 1716.27,683.232 1716.83,683.232 1717.39,683.232 1717.95,683.232 1718.51,683.232 1719.07,683.232 1719.63,683.232 1720.19,683.232 1720.75,683.232 1721.31,683.232 1721.87,683.232 1722.42,683.232 1722.98,683.232 1723.54,683.232 1724.1,683.232 1724.66,683.232 1725.22,683.232 1725.78,683.232 1726.34,683.232 1726.9,683.232 1727.46,683.232 1728.02,683.232 1728.58,683.232 1729.14,683.232 1729.69,683.232 1730.25,683.232 1730.81,683.232 1731.37,683.232 1731.93,683.232 1732.49,683.232 1733.05,683.232 1733.61,683.232 1734.17,683.232 1734.73,683.232 1735.29,683.232 1735.85,683.232 1736.41,683.232 1736.97,683.232 1737.52,683.232 1738.08,683.232 1738.64,683.232 1739.2,683.232 1739.76,683.232 1740.32,683.232 1740.88,683.232 1741.44,683.232 1742,683.232 1742.56,683.232 1743.12,683.232 1743.68,683.232 1744.24,683.232 1744.79,683.232 1745.35,683.232 1745.91,683.232 1746.47,683.232 1747.03,683.232 1747.59,683.232 1748.15,683.232 1748.71,683.232 1749.27,683.232 1749.83,683.232 1750.39,683.232 1750.95,683.232 1751.51,683.232 1752.06,683.232 1752.62,683.232 1753.18,683.232 1753.74,683.232 1754.3,683.232 1754.86,683.232 1755.42,683.232 1755.98,683.232 1756.54,683.232 1757.1,683.232 1757.66,683.232 1758.22,683.232 1758.78,683.232 1759.34,683.232 1759.89,683.232 1760.45,683.232 1761.01,683.232 1761.57,683.232 1762.13,683.232 1762.69,683.232 1763.25,683.232 1763.81,683.232 1764.37,683.232 1764.93,683.232 1765.49,683.232 1766.05,683.232 1766.61,683.232 1767.16,683.232 1767.72,683.232 1768.28,683.232 1768.84,683.232 1769.4,683.232 1769.96,683.232 1770.52,683.232 1771.08,683.232 1771.64,683.232 1772.2,683.232 1772.76,683.232 1773.32,683.232 1773.88,683.232 1774.43,683.232 1774.99,683.232 1775.55,683.232 1776.11,683.232 1776.67,683.232 1777.23,683.232 1777.79,683.232 1778.35,683.232 1778.91,683.232 1779.47,683.232 1780.03,683.232 1780.59,683.232 1781.15,683.232 1781.71,683.232 1782.26,683.232 1782.82,683.232 1783.38,683.232 1783.94,683.232 1784.5,683.232 1785.06,683.232 1785.62,683.232 1786.18,683.232 1786.74,683.232 1787.3,683.232 1787.86,683.232 1788.42,683.232 1788.98,683.232 1789.53,683.232 1790.09,683.232 1790.65,683.232 1791.21,683.232 1791.77,683.232 1792.33,683.232 1792.89,683.232 1793.45,683.232 1794.01,683.232 1794.57,683.232 1795.13,683.232 1795.69,683.232 1796.25,683.232 1796.8,683.232 1797.36,683.232 1797.92,683.232 1798.48,683.232 1799.04,683.232 1799.6,683.232 1800.16,683.232 1800.72,683.232 1801.28,683.232 1801.84,683.232 1802.4,683.232 1802.96,683.232 1803.52,683.232 1804.08,683.232 1804.63,683.232 1805.19,683.232 1805.75,683.232 1806.31,683.232 1806.87,683.232 1807.43,683.232 1807.99,683.232 1808.55,683.232 1809.11,683.232 1809.67,683.232 1810.23,683.232 1810.79,683.232 1811.35,683.232 1811.9,683.232 1812.46,683.232 1813.02,683.232 1813.58,683.232 1814.14,683.232 1814.7,683.232 1815.26,683.232 1815.82,683.232 1816.38,683.232 1816.94,683.232 1817.5,683.232 1818.06,683.232 1818.62,683.232 1819.18,683.232 1819.73,683.232 1820.29,683.232 1820.85,683.232 1821.41,683.232 1821.97,683.232 1822.53,683.232 1823.09,683.232 1823.65,683.232 1824.21,683.232 1824.77,683.232 1825.33,683.232 1825.89,683.232 1826.45,683.232 1827,683.232 1827.56,683.232 1828.12,683.232 1828.68,683.232 1829.24,683.232 1829.8,683.232 1830.36,683.232 1830.92,683.232 1831.48,683.232 1832.04,683.232 1832.6,683.232 1833.16,683.232 1833.72,683.232 1834.27,683.232 1834.83,683.232 1835.39,683.232 1835.95,683.232 1836.51,683.232 1837.07,683.232 1837.63,683.232 1838.19,683.232 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0327428688892715 ± 0.021444304485668902\nProjected Energy: -4.013308704439 ± (0.004013716660637989, 0.0039728836277932444)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.45786</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3535e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.318e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.656e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.162e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.725e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.614e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613371\n -0.7590191922770941\n  0.13584182219622676\n  0.15789998694607554\n  0.8767114411781378\n  1.5305929970973269\n  1.5835732611867455\n  3.0728703303258706\n  3.125672653951834\n  4.862107221562175\n  6.260694850380598\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
