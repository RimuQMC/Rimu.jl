var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2101199465347556 ± 0.0014049792617376736\n   G2(1) = 0.9184242929765146 ± 0.0007356448391991567\n   G2(2) = 0.9816122573567897 ± 0.0007147059464725364\n   G2(3) = 0.9898069527986353 ± 0.001118025269960653\n   G2(4) = 0.9816122573567897 ± 0.0007147059464725364\n   G2(5) = 0.9184242929765146 ± 0.0007356448391991567\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9732097430286295 ± 0.14286495286037396\n   Replica 2: -3.9887118566484 ± 0.1388709566112253\n   Replica 3: -4.049986785221218 ± 0.12267002381043887\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip300\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip301\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip302\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.11 2211.02,1003.11 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.391 2211.02,745.391 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.667 2211.02,487.667 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.944 2211.02,229.944 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.11 423.181,1003.11 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.391 423.181,745.391 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.667 423.181,487.667 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.944 423.181,229.944 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M290.043 1016.46 L306.363 1016.46 L306.363 1020.39 L284.418 1020.39 L284.418 1016.46 Q287.08 1013.7 291.664 1009.07 Q296.27 1004.42 297.451 1003.08 Q299.696 1000.56 300.576 998.82 Q301.478 997.061 301.478 995.371 Q301.478 992.616 299.534 990.88 Q297.613 989.144 294.511 989.144 Q292.312 989.144 289.858 989.908 Q287.427 990.672 284.65 992.223 L284.65 987.501 Q287.474 986.367 289.927 985.788 Q292.381 985.209 294.418 985.209 Q299.789 985.209 302.983 987.894 Q306.177 990.579 306.177 995.07 Q306.177 997.2 305.367 999.121 Q304.58 1001.02 302.474 1003.61 Q301.895 1004.28 298.793 1007.5 Q295.691 1010.7 290.043 1016.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M316.224 985.834 L334.58 985.834 L334.58 989.769 L320.506 989.769 L320.506 998.241 Q321.524 997.894 322.543 997.732 Q323.562 997.547 324.58 997.547 Q330.367 997.547 333.747 1000.72 Q337.126 1003.89 337.126 1009.31 Q337.126 1014.88 333.654 1017.99 Q330.182 1021.07 323.862 1021.07 Q321.687 1021.07 319.418 1020.7 Q317.173 1020.32 314.765 1019.58 L314.765 1014.88 Q316.849 1016.02 319.071 1016.57 Q321.293 1017.13 323.77 1017.13 Q327.774 1017.13 330.112 1015.02 Q332.45 1012.92 332.45 1009.31 Q332.45 1005.7 330.112 1003.59 Q327.774 1001.48 323.77 1001.48 Q321.895 1001.48 320.02 1001.9 Q318.168 1002.32 316.224 1003.2 L316.224 985.834 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 988.913 Q352.728 988.913 350.899 992.478 Q349.094 996.019 349.094 1003.15 Q349.094 1010.26 350.899 1013.82 Q352.728 1017.36 356.339 1017.36 Q359.973 1017.36 361.779 1013.82 Q363.608 1010.26 363.608 1003.15 Q363.608 996.019 361.779 992.478 Q359.973 988.913 356.339 988.913 M356.339 985.209 Q362.149 985.209 365.205 989.816 Q368.284 994.399 368.284 1003.15 Q368.284 1011.88 365.205 1016.48 Q362.149 1021.07 356.339 1021.07 Q350.529 1021.07 347.45 1016.48 Q344.395 1011.88 344.395 1003.15 Q344.395 994.399 347.45 989.816 Q350.529 985.209 356.339 985.209 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M286.062 728.111 L304.418 728.111 L304.418 732.046 L290.344 732.046 L290.344 740.518 Q291.363 740.171 292.381 740.009 Q293.4 739.824 294.418 739.824 Q300.205 739.824 303.585 742.995 Q306.964 746.166 306.964 751.583 Q306.964 757.161 303.492 760.263 Q300.02 763.342 293.701 763.342 Q291.525 763.342 289.256 762.972 Q287.011 762.601 284.603 761.861 L284.603 757.161 Q286.687 758.296 288.909 758.851 Q291.131 759.407 293.608 759.407 Q297.613 759.407 299.951 757.3 Q302.288 755.194 302.288 751.583 Q302.288 747.972 299.951 745.865 Q297.613 743.759 293.608 743.759 Q291.733 743.759 289.858 744.175 Q288.006 744.592 286.062 745.472 L286.062 728.111 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M326.177 731.189 Q322.566 731.189 320.737 734.754 Q318.932 738.296 318.932 745.425 Q318.932 752.532 320.737 756.097 Q322.566 759.638 326.177 759.638 Q329.811 759.638 331.617 756.097 Q333.446 752.532 333.446 745.425 Q333.446 738.296 331.617 734.754 Q329.811 731.189 326.177 731.189 M326.177 727.486 Q331.987 727.486 335.043 732.092 Q338.122 736.675 338.122 745.425 Q338.122 754.152 335.043 758.759 Q331.987 763.342 326.177 763.342 Q320.367 763.342 317.288 758.759 Q314.233 754.152 314.233 745.425 Q314.233 736.675 317.288 732.092 Q320.367 727.486 326.177 727.486 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 731.189 Q352.728 731.189 350.899 734.754 Q349.094 738.296 349.094 745.425 Q349.094 752.532 350.899 756.097 Q352.728 759.638 356.339 759.638 Q359.973 759.638 361.779 756.097 Q363.608 752.532 363.608 745.425 Q363.608 738.296 361.779 734.754 Q359.973 731.189 356.339 731.189 M356.339 727.486 Q362.149 727.486 365.205 732.092 Q368.284 736.675 368.284 745.425 Q368.284 754.152 365.205 758.759 Q362.149 763.342 356.339 763.342 Q350.529 763.342 347.45 758.759 Q344.395 754.152 344.395 745.425 Q344.395 736.675 347.45 732.092 Q350.529 727.486 356.339 727.486 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M284.835 470.387 L307.057 470.387 L307.057 472.378 L294.511 504.947 L289.627 504.947 L301.432 474.323 L284.835 474.323 L284.835 470.387 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M316.224 470.387 L334.58 470.387 L334.58 474.323 L320.506 474.323 L320.506 482.795 Q321.524 482.447 322.543 482.285 Q323.562 482.1 324.58 482.1 Q330.367 482.1 333.747 485.272 Q337.126 488.443 337.126 493.859 Q337.126 499.438 333.654 502.54 Q330.182 505.619 323.862 505.619 Q321.687 505.619 319.418 505.248 Q317.173 504.878 314.765 504.137 L314.765 499.438 Q316.849 500.572 319.071 501.128 Q321.293 501.683 323.77 501.683 Q327.774 501.683 330.112 499.577 Q332.45 497.471 332.45 493.859 Q332.45 490.248 330.112 488.142 Q327.774 486.035 323.77 486.035 Q321.895 486.035 320.02 486.452 Q318.168 486.869 316.224 487.748 L316.224 470.387 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 473.466 Q352.728 473.466 350.899 477.031 Q349.094 480.572 349.094 487.702 Q349.094 494.809 350.899 498.373 Q352.728 501.915 356.339 501.915 Q359.973 501.915 361.779 498.373 Q363.608 494.809 363.608 487.702 Q363.608 480.572 361.779 477.031 Q359.973 473.466 356.339 473.466 M356.339 469.762 Q362.149 469.762 365.205 474.369 Q368.284 478.952 368.284 487.702 Q368.284 496.429 365.205 501.035 Q362.149 505.619 356.339 505.619 Q350.529 505.619 347.45 501.035 Q344.395 496.429 344.395 487.702 Q344.395 478.952 347.45 474.369 Q350.529 469.762 356.339 469.762 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M256.664 243.289 L264.303 243.289 L264.303 216.923 L255.992 218.59 L255.992 214.331 L264.256 212.664 L268.932 212.664 L268.932 243.289 L276.571 243.289 L276.571 247.224 L256.664 247.224 L256.664 243.289 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M296.015 215.743 Q292.404 215.743 290.576 219.307 Q288.77 222.849 288.77 229.979 Q288.77 237.085 290.576 240.65 Q292.404 244.192 296.015 244.192 Q299.65 244.192 301.455 240.65 Q303.284 237.085 303.284 229.979 Q303.284 222.849 301.455 219.307 Q299.65 215.743 296.015 215.743 M296.015 212.039 Q301.826 212.039 304.881 216.645 Q307.96 221.229 307.96 229.979 Q307.96 238.705 304.881 243.312 Q301.826 247.895 296.015 247.895 Q290.205 247.895 287.127 243.312 Q284.071 238.705 284.071 229.979 Q284.071 221.229 287.127 216.645 Q290.205 212.039 296.015 212.039 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M326.177 215.743 Q322.566 215.743 320.737 219.307 Q318.932 222.849 318.932 229.979 Q318.932 237.085 320.737 240.65 Q322.566 244.192 326.177 244.192 Q329.811 244.192 331.617 240.65 Q333.446 237.085 333.446 229.979 Q333.446 222.849 331.617 219.307 Q329.811 215.743 326.177 215.743 M326.177 212.039 Q331.987 212.039 335.043 216.645 Q338.122 221.229 338.122 229.979 Q338.122 238.705 335.043 243.312 Q331.987 247.895 326.177 247.895 Q320.367 247.895 317.288 243.312 Q314.233 238.705 314.233 229.979 Q314.233 221.229 317.288 216.645 Q320.367 212.039 326.177 212.039 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 215.743 Q352.728 215.743 350.899 219.307 Q349.094 222.849 349.094 229.979 Q349.094 237.085 350.899 240.65 Q352.728 244.192 356.339 244.192 Q359.973 244.192 361.779 240.65 Q363.608 237.085 363.608 229.979 Q363.608 222.849 361.779 219.307 Q359.973 215.743 356.339 215.743 M356.339 212.039 Q362.149 212.039 365.205 216.645 Q368.284 221.229 368.284 229.979 Q368.284 238.705 365.205 243.312 Q362.149 247.895 356.339 247.895 Q350.529 247.895 347.45 243.312 Q344.395 238.705 344.395 229.979 Q344.395 221.229 347.45 216.645 Q350.529 212.039 356.339 212.039 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip302)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.944 4017.76,229.944 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1248.44 458.828,1248.07 459.396,1247.63 459.964,1247.11 460.533,1246.53 461.101,1245.87 461.669,1245.14 462.238,1243.29 462.806,1242.4 463.375,1239.37 463.943,1238.33 464.511,1236.14 465.08,1234.89 465.648,1233.52 466.216,1232.06 466.785,1230.48 467.353,1228.75 467.921,1226.91 468.49,1224.91 469.058,1220.67 469.626,1218.43 470.195,1214.99 470.763,1212.39 471.331,1209.63 471.9,1205.66 472.468,1201.5 473.036,1197.17 473.605,1192.71 474.173,1189.1 474.741,1185.28 475.31,1180.18 475.878,1176 476.446,1171.66 477.015,1165.03 477.583,1160.3 478.152,1154.33 478.72,1149.14 479.288,1143.89 479.857,1138.41 480.425,1131.63 480.993,1123.62 481.562,1116.61 482.13,1109.27 482.698,1100.68 483.267,1092.85 483.835,1083.9 484.403,1074.59 484.972,1066.07 485.54,1055.27 486.108,1047.56 486.677,1039.54 487.245,1029.23 487.813,1019.99 488.382,1011.73 488.95,1003.29 489.518,992.684 490.087,983.012 490.655,972.2 491.224,963.333 491.792,954.402 492.36,943.377 492.929,932.292 493.497,923.27 494.065,912.039 494.634,899.742 495.202,890.664 495.77,878.427 496.339,869.369 496.907,857.014 497.475,845.859 498.044,833.593 498.612,821.563 499.18,810.564 499.749,798.663 500.317,787.661 500.885,777.901 501.454,769.171 502.022,760.316 502.59,750.42 503.159,736.512 503.727,726.043 504.295,715.679 504.864,704.315 505.432,695.121 506.001,685.978 506.569,677.973 507.137,668.949 507.706,659.013 508.274,652.196 508.842,643.199 509.411,633.502 509.979,624.852 510.547,614.209 511.116,605.855 511.684,596.497 512.252,589.633 512.821,581.587 513.389,575.672 513.957,566.581 514.526,555.918 515.094,549.485 515.662,541.106 516.231,533.837 516.799,528.677 517.367,521.67 517.936,513.554 518.504,507.67 519.072,500.975 519.641,494.204 520.209,486.689 520.778,482.579 521.346,476.266 521.914,471.208 522.483,461.172 523.051,457.521 523.619,451.842 524.188,447.342 524.756,440.785 525.324,437.585 525.893,433.403 526.461,426.073 527.029,423.022 527.598,417.941 528.166,411.893 528.734,408.009 529.303,400.211 529.871,395.713 530.439,390.485 531.008,388.423 531.576,384.339 532.144,381.296 532.713,375.059 533.281,370.275 533.85,367.852 534.418,364.277 534.986,360.675 535.555,357.034 536.123,355.664 536.691,351.104 537.26,346.796 537.828,340.79 538.396,337.887 538.965,335.406 539.533,333.834 540.101,329.988 540.67,329.437 541.238,326.927 541.806,324.488 542.375,323.121 542.943,318.575 543.511,317.439 544.08,316.147 544.648,314.776 545.216,311.471 545.785,310.536 546.353,308.312 546.921,306.04 547.49,306.184 548.058,305.174 548.627,304.057 549.195,301.723 549.763,295.445 550.332,294.665 550.9,292.019 551.468,290.229 552.037,288.669 552.605,287.248 553.173,284.681 553.742,284.379 554.31,283.862 554.878,282.34 555.447,283.173 556.015,283.88 556.583,282.19 557.152,281.56 557.72,278.816 558.288,279.376 558.857,274.864 559.425,272.683 559.993,270.734 560.562,270.716 561.13,269.649 561.698,269.661 562.267,270.487 562.835,268.343 563.404,269.161 563.972,269.951 564.54,268.755 565.109,268.449 565.677,268.021 566.245,265.558 566.814,264.265 567.382,262.258 567.95,264.292 568.519,263.085 569.087,265 569.655,265.704 570.224,264.248 570.792,264.944 571.36,265.535 571.929,261.94 572.497,261.793 573.065,259.268 573.634,258.99 574.202,258.952 574.77,258.751 575.339,257.481 575.907,257.461 576.476,257.414 577.044,256.196 577.612,257.191 578.181,257.791 578.749,258.642 579.317,259.422 579.886,257.93 580.454,256.643 581.022,255.62 581.591,255.416 582.159,255.05 582.727,252.883 583.296,250.595 583.864,250.676 584.432,250.709 585.001,249.816 585.569,249.814 586.137,250.845 586.706,251.995 587.274,250.842 587.842,248.62 588.411,247.44 588.979,246.672 589.547,249.013 590.116,245.907 590.684,246.047 591.253,247.215 591.821,246.13 592.389,245.247 592.958,247.589 593.526,247.342 594.094,248.424 594.663,248.393 595.231,247.274 595.799,247.316 596.368,249.149 596.936,245.96 597.504,244.749 598.073,244.509 598.641,244.547 599.209,243.561 599.778,243.721 600.346,243.81 600.914,241.789 601.483,241.861 602.051,237.782 602.619,237.282 603.188,238.86 603.756,239.232 604.325,240.651 604.893,241.816 605.461,240.945 606.03,240.996 606.598,240.234 607.166,240.3 607.735,238.543 608.303,239.859 608.871,239.85 609.44,239.179 610.008,237.295 610.576,236.588 611.145,236.972 611.713,237.509 612.281,238.916 612.85,237.223 613.418,236.586 613.986,236.947 614.555,239.414 615.123,239.671 615.691,239.693 616.26,239.829 616.828,240.271 617.396,238.336 617.965,235.767 618.533,237.196 619.102,243.623 619.67,241.345 620.238,239.25 620.807,239.351 621.375,240.476 621.943,240.525 622.512,239.401 623.08,240.598 623.648,240.628 624.217,240.57 624.785,239.556 625.353,238.336 625.922,235.148 626.49,235.271 627.058,235.364 627.627,234.789 628.195,234.359 628.763,234.031 629.332,234.4 629.9,233.469 630.468,235.912 631.037,235.982 631.605,234.017 632.173,233.388 632.742,233.009 633.31,233.367 633.879,234.606 634.447,234.052 635.015,235.48 635.584,234.584 636.152,237.024 636.72,237.341 637.289,236.474 637.857,236.935 638.425,237.249 638.994,238.381 639.562,237.427 640.13,239.367 640.699,241.544 641.267,241.388 641.835,240.994 642.404,239.931 642.972,240.889 643.54,242.945 644.109,240.561 644.677,240.252 645.245,241.225 645.814,238.955 646.382,238.838 646.951,238.611 647.519,237.468 648.087,237.582 648.656,236.451 649.224,235.319 649.792,234.584 650.361,234.984 650.929,236.234 651.497,236.225 652.066,236.214 652.634,234.304 653.202,235.678 653.771,236.877 654.339,236.852 654.907,236.856 655.476,240.02 656.044,241.688 656.612,238.317 657.181,237.223 657.749,239.074 658.317,238.886 658.886,238.745 659.454,238.732 660.022,238.379 660.591,239.058 661.159,240.815 661.728,237.347 662.296,238.329 662.864,239.162 663.433,239.054 664.001,238.717 664.569,239.381 665.138,238.775 665.706,238.723 666.274,237.462 666.843,237.16 667.411,239.191 667.979,236.707 668.548,237.296 669.116,235.04 669.684,233.917 670.253,233.797 670.821,233.833 671.389,235.977 671.958,234.893 672.526,233.643 673.094,232.531 673.663,233.651 674.231,234.765 674.799,234.572 675.368,235.594 675.936,236.383 676.505,236.246 677.073,234.841 677.641,233.615 678.21,232.548 678.778,232.644 679.346,232.624 679.915,231.69 680.483,229.946 681.051,229.302 681.62,229.589 682.188,230.939 682.756,229.997 683.325,231.193 683.893,229.239 684.461,226.631 685.03,227.174 685.598,225.743 686.166,227.21 686.735,226.832 687.303,229.405 687.871,227.728 688.44,227.302 689.008,226.791 689.577,227.198 690.145,225.871 690.713,227.34 691.282,230.98 691.85,229.091 692.418,227.573 692.987,228.065 693.555,226.616 694.123,229.324 694.692,229.846 695.26,229.226 695.828,229.431 696.397,231.719 696.965,236.014 697.533,235.976 698.102,235.076 698.67,234.223 699.238,233.324 699.807,233.409 700.375,232.574 700.943,232.73 701.512,232.052 702.08,233.156 702.648,233.355 703.217,234.543 703.785,232.343 704.354,232.626 704.922,233.756 705.49,234.97 706.059,235.843 706.627,235.68 707.195,234.407 707.764,237.373 708.332,237.018 708.9,237.752 709.469,238.606 710.037,234.958 710.605,235.762 711.174,235.72 711.742,237.638 712.31,236.427 712.879,236.152 713.447,237.982 714.015,235.723 714.584,235.429 715.152,235.968 715.72,235.858 716.289,236.761 716.857,236.417 717.425,237.032 717.994,236.622 718.562,234.438 719.131,235.352 719.699,234.079 720.267,233.841 720.836,233.744 721.404,234.78 721.972,234.303 722.541,234.076 723.109,236.161 723.677,234.032 724.246,231.887 724.814,232.977 725.382,232.82 725.951,232.436 726.519,231.482 727.087,231.347 727.656,233.376 728.224,236.338 728.792,237.146 729.361,238.859 729.929,236.317 730.497,236.045 731.066,235.923 731.634,234.516 732.203,233.267 732.771,234.055 733.339,232.753 733.908,233.559 734.476,233.429 735.044,234.153 735.613,231.97 736.181,229.777 736.749,229.827 737.318,227.703 737.886,227.923 738.454,228.181 739.023,230.427 739.591,232.711 740.159,232.467 740.728,231.403 741.296,231.372 741.864,231.112 742.433,233.057 743.001,229.691 743.569,228.838 744.138,229.091 744.706,232.425 745.274,232.328 745.843,232.353 746.411,232.245 746.98,232.045 747.548,231.008 748.116,230.975 748.685,232.015 749.253,232.996 749.821,234.824 750.39,234.402 750.958,232.16 751.526,231.127 752.095,230.946 752.663,232.162 753.231,229.099 753.8,227.018 754.368,227.309 754.936,225.425 755.505,226.109 756.073,225.444 756.641,227.836 757.21,226.873 757.778,225.245 758.346,226.822 758.915,228.028 759.483,229.315 760.052,229.585 760.62,230.75 761.188,228.841 761.757,228.93 762.325,228.999 762.893,228.213 763.462,230.446 764.03,231.616 764.598,232.622 765.167,227.383 765.735,227.65 766.303,225.917 766.872,227.61 767.44,225.926 768.008,226.268 768.577,225.777 769.145,223.289 769.713,224.099 770.282,225.783 770.85,228.396 771.418,229.886 771.987,227.053 772.555,228.362 773.123,227.736 773.692,228.144 774.26,227.467 774.829,229.938 775.397,230.131 775.965,231.164 776.534,232.509 777.102,230.239 777.67,231.303 778.239,231.291 778.807,229.366 779.375,230.423 779.944,232.765 780.512,234.625 781.08,234.475 781.649,234.397 782.217,231.132 782.785,231.248 783.354,232.626 783.922,231.516 784.49,232.746 785.059,232.702 785.627,229.736 786.195,230.851 786.764,230.914 787.332,233.911 787.9,235.213 788.469,235.105 789.037,234.743 789.606,233.226 790.174,232.211 790.742,232.053 791.311,230.851 791.879,232.968 792.447,233.849 793.016,235.932 793.584,234.394 794.152,235.388 794.721,234.018 795.289,233.828 795.857,234.666 796.426,234.358 796.994,235.022 797.562,231.994 798.131,231.891 798.699,230.833 799.267,229.847 799.836,230.885 800.404,229.791 800.972,227.539 801.541,229.843 802.109,228.772 802.678,227.762 803.246,225.844 803.814,225.252 804.383,225.929 804.951,224.177 805.519,222.478 806.088,224.36 806.656,224.85 807.224,224.299 807.793,226.012 808.361,228.275 808.929,228.578 809.498,228.977 810.066,231.236 810.634,233.492 811.203,235.406 811.771,234.238 812.339,237.16 812.908,238.021 813.476,240.762 814.044,240.291 814.613,237.702 815.181,236.129 815.749,234.879 816.318,235.837 816.886,235.297 817.455,234.966 818.023,234.716 818.591,234.526 819.16,234.992 819.728,232.625 820.296,233.321 820.865,229.938 821.433,229.027 822.001,231.327 822.57,231.113 823.138,232.215 823.706,230.077 824.275,227.957 824.843,225.953 825.411,226.367 825.98,228.108 826.548,227.272 827.116,228.541 827.685,229.732 828.253,229.728 828.821,226.612 829.39,227.839 829.958,228.091 830.526,229.482 831.095,228.791 831.663,230.294 832.232,229.315 832.8,230.482 833.368,229.545 833.937,230.832 834.505,230.035 835.073,229.398 835.642,231.508 836.21,230.573 836.778,229.751 837.347,227.843 837.915,228.172 838.483,228.591 839.052,230.074 839.62,230.15 840.188,229.367 840.757,230.645 841.325,233.024 841.893,235.03 842.462,233.734 843.03,231.546 843.598,232.737 844.167,232.526 844.735,233.628 845.304,233.332 845.872,233.428 846.44,234.196 847.009,235.736 847.577,237.487 848.145,236.035 848.714,235.553 849.282,236.109 849.85,235.679 850.419,235.463 850.987,235.999 851.555,234.351 852.124,232.111 852.692,231.863 853.26,228.68 853.829,227.907 854.397,227.082 854.965,225.117 855.534,227.476 856.102,224.387 856.67,223.82 857.239,225.208 857.807,225.468 858.375,224.914 858.944,225.341 859.512,226.715 860.081,227.884 860.649,228.979 861.217,227.977 861.786,227.309 862.354,227.432 862.922,228.67 863.491,230.031 864.059,228.195 864.627,228.571 865.196,229.753 865.764,230.757 866.332,231.792 866.901,231.437 867.469,231.442 868.037,231.428 868.606,232.377 869.174,234.283 869.742,235.316 870.311,234.831 870.879,232.394 871.447,232.53 872.016,229.221 872.584,228.264 873.152,229.619 873.721,228.534 874.289,228.671 874.858,228.842 875.426,228.851 875.994,228.692 876.563,228.876 877.131,227.176 877.699,227.421 878.268,227.841 878.836,227.045 879.404,228.234 879.973,228.385 880.541,227.529 881.109,228.937 881.678,227.245 882.246,227.397 882.814,226.924 883.383,227.305 883.951,228.84 884.519,230.153 885.088,229.245 885.656,229.397 886.224,225.491 886.793,227.062 887.361,224.214 887.93,223.798 888.498,224.223 889.066,225.842 889.635,227.404 890.203,228.937 890.771,230.335 891.34,229.524 891.908,228.732 892.476,226.92 893.045,228.396 893.613,227.633 894.181,228.898 894.75,229.119 895.318,228.509 895.886,228.574 896.455,228.898 897.023,228.177 897.591,228.553 898.16,227.812 898.728,226.213 899.296,228.791 899.865,228.037 900.433,228.439 901.001,228.895 901.57,232.249 902.138,233.341 902.707,233.37 903.275,231.373 903.843,232.41 904.412,232.25 904.98,232.299 905.548,231.434 906.117,230.186 906.685,231.549 907.253,231.543 907.822,230.784 908.39,230.963 908.958,230.238 909.527,231.557 910.095,232.589 910.663,232.188 911.232,232.194 911.8,230.389 912.368,231.604 912.937,231.84 913.505,232.054 914.073,231.23 914.642,234.317 915.21,236.124 915.779,236.001 916.347,237.839 916.915,235.409 917.484,233.699 918.052,234.571 918.62,234.272 919.189,235.013 919.757,232.64 920.325,231.739 920.894,233.56 921.462,233.416 922.03,235.554 922.599,234.49 923.167,235.247 923.735,236.087 924.304,235.923 924.872,237.489 925.44,235.004 926.009,235.681 926.577,235.481 927.145,234.115 927.714,234.621 928.282,233.105 928.85,234.744 929.419,234.19 929.987,231.587 930.556,229.326 931.124,228.489 931.692,229.667 932.261,229.439 932.829,230.352 933.397,232.393 933.966,230.136 934.534,229.066 935.102,229.045 935.671,231.011 936.239,231.064 936.807,231.128 937.376,230.865 937.944,230.986 938.512,229.823 939.081,229.779 939.649,230.804 940.217,232.892 940.786,231.779 941.354,234.593 941.922,233.324 942.491,235.026 943.059,233.73 943.627,233.47 944.196,233.406 944.764,233.213 945.333,226.78 945.901,226.005 946.469,225.462 947.038,227.939 947.606,229.097 948.174,228.184 948.743,228.273 949.311,227.448 949.879,227.622 950.448,228.703 951.016,231.93 951.584,232.494 952.153,231.456 952.721,232.282 953.289,230.956 953.858,231.954 954.426,231.909 954.994,231.63 955.563,230.556 956.131,231.514 956.699,231.367 957.268,230.219 957.836,231.19 958.405,229.989 958.973,230.864 959.541,232.112 960.11,232.086 960.678,232.015 961.246,233.995 961.815,234.699 962.383,234.233 962.951,235.223 963.52,232.582 964.088,231.297 964.656,234.464 965.225,234.099 965.793,234.903 966.361,234.649 966.93,234.484 967.498,233.082 968.066,230.574 968.635,232.415 969.203,232.005 969.771,231.666 970.34,232.512 970.908,231.318 971.476,229.927 972.045,228.956 972.613,229.162 973.182,229.219 973.75,229.226 974.318,229.097 974.887,228.09 975.455,227.26 976.023,227.301 976.592,226.363 977.16,228.607 977.728,229.662 978.297,229.781 978.865,229.715 979.433,229.728 980.002,226.499 980.57,228.991 981.138,227.006 981.707,227.994 982.275,227.038 982.843,225.161 983.412,224.369 983.98,224.649 984.548,226.945 985.117,226.108 985.685,227.457 986.253,229.688 986.822,230.67 987.39,231.702 987.959,229.523 988.527,227.666 989.095,229.726 989.664,229.682 990.232,229.59 990.8,228.555 991.369,226.58 991.937,228.931 992.505,230.197 993.074,231.162 993.642,231.796 994.21,230.696 994.779,232.849 995.347,233.573 995.915,233.383 996.484,233.225 997.052,235.11 997.62,237.915 998.189,238.239 998.757,238.457 999.325,237.844 999.894,237.007 1000.46,235.426 1001.03,232.909 1001.6,233.764 1002.17,235.509 1002.74,235.09 1003.3,234.794 1003.87,233.073 1004.44,232.772 1005.01,233.4 1005.58,232.919 1006.15,232.278 1006.71,231.847 1007.28,232.414 1007.85,231.37 1008.42,230.778 1008.99,232.45 1009.56,233.044 1010.12,232.674 1010.69,234.654 1011.26,233.264 1011.83,232.618 1012.4,231.422 1012.97,229.135 1013.53,228.104 1014.1,229.202 1014.67,229.071 1015.24,227.898 1015.81,226.985 1016.38,224.99 1016.94,225.412 1017.51,221.554 1018.08,224.038 1018.65,223.312 1019.22,220.76 1019.79,221.409 1020.35,221.678 1020.92,222.31 1021.49,222.895 1022.06,222.351 1022.63,219.895 1023.2,220.477 1023.76,222.038 1024.33,223.598 1024.9,225.23 1025.47,225.65 1026.04,225.854 1026.61,226.398 1027.17,225.588 1027.74,225.712 1028.31,225.073 1028.88,226.507 1029.45,229.01 1030.02,230.049 1030.58,228.055 1031.15,228.238 1031.72,228.492 1032.29,226.575 1032.86,227.903 1033.43,224.886 1033.99,225.319 1034.56,224.824 1035.13,225.005 1035.7,225.314 1036.27,224.611 1036.84,225.157 1037.4,225.688 1037.97,226.062 1038.54,227.554 1039.11,227.668 1039.68,228.922 1040.25,228.045 1040.81,228.269 1041.38,229.723 1041.95,230.787 1042.52,233.75 1043.09,231.535 1043.66,230.432 1044.22,230.528 1044.79,232.695 1045.36,231.708 1045.93,231.564 1046.5,232.632 1047.07,233.525 1047.63,234.543 1048.2,237.354 1048.77,234.819 1049.34,232.416 1049.91,234.353 1050.48,234.313 1051.05,233.256 1051.61,233.104 1052.18,233.212 1052.75,232.974 1053.32,230.695 1053.89,230.719 1054.46,230.663 1055.02,229.693 1055.59,228.695 1056.16,229.819 1056.73,227.736 1057.3,228.088 1057.87,228.208 1058.43,229.393 1059,229.56 1059.57,233.755 1060.14,233.714 1060.71,233.603 1061.28,234.298 1061.84,232.008 1062.41,232.069 1062.98,233.208 1063.55,230.985 1064.12,232.175 1064.69,233.219 1065.25,232.916 1065.82,231.587 1066.39,231.602 1066.96,230.508 1067.53,229.324 1068.1,231.283 1068.66,231.107 1069.23,230.098 1069.8,228.988 1070.37,229.009 1070.94,226.918 1071.51,226.319 1072.07,225.705 1072.64,226.041 1073.21,225.135 1073.78,228.701 1074.35,228.898 1074.92,229.124 1075.48,227.351 1076.05,227.432 1076.62,228.582 1077.19,226.807 1077.76,228.298 1078.33,227.397 1078.89,230.893 1079.46,232.029 1080.03,230.967 1080.6,229.019 1081.17,231.31 1081.74,232.429 1082.3,232.114 1082.87,234.095 1083.44,234.94 1084.01,233.578 1084.58,233.54 1085.15,234.531 1085.71,233.388 1086.28,230.962 1086.85,231.918 1087.42,233.992 1087.99,232.891 1088.56,232.62 1089.12,232.412 1089.69,232.172 1090.26,230.183 1090.83,232.157 1091.4,234.904 1091.97,236.4 1092.53,234.877 1093.1,234.495 1093.67,234.229 1094.24,231.923 1094.81,231.77 1095.38,233.667 1095.94,235.508 1096.51,237.1 1097.08,235.566 1097.65,233.128 1098.22,231.754 1098.79,229.494 1099.35,229.502 1099.92,228.48 1100.49,227.357 1101.06,227.583 1101.63,228.587 1102.2,227.686 1102.76,225.765 1103.33,226.854 1103.9,227.221 1104.47,226.848 1105.04,227.911 1105.61,228.103 1106.17,227.032 1106.74,227.198 1107.31,226.155 1107.88,226.311 1108.45,227.537 1109.02,227.759 1109.58,225.84 1110.15,224.038 1110.72,223.404 1111.29,228.233 1111.86,229.539 1112.43,227.781 1112.99,230.031 1113.56,229.134 1114.13,228.079 1114.7,228.08 1115.27,227.175 1115.84,226.312 1116.4,227.548 1116.97,228.73 1117.54,229.881 1118.11,229.864 1118.68,229.863 1119.25,230.03 1119.81,231.244 1120.38,231.14 1120.95,232.13 1121.52,232.134 1122.09,232.932 1122.66,232.526 1123.23,234.433 1123.79,235.409 1124.36,236.077 1124.93,235.505 1125.5,233.876 1126.07,237.681 1126.64,237.106 1127.2,237.391 1127.77,234.701 1128.34,233.052 1128.91,232.671 1129.48,231.35 1130.05,232.263 1130.61,233.12 1131.18,235.008 1131.75,232.71 1132.32,233.497 1132.89,234.469 1133.46,235.014 1134.02,234.847 1134.59,233.426 1135.16,232.121 1135.73,230.823 1136.3,228.548 1136.87,232.928 1137.43,232.64 1138,231.391 1138.57,231.062 1139.14,230.68 1139.71,230.709 1140.28,231.475 1140.84,231.375 1141.41,231.095 1141.98,230.03 1142.55,229.027 1143.12,230.128 1143.69,231.141 1144.25,228.936 1144.82,228.02 1145.39,228.089 1145.96,229.363 1146.53,226.149 1147.1,225.518 1147.66,226.633 1148.23,226.808 1148.8,227.069 1149.37,230.037 1149.94,230.055 1150.51,229.635 1151.07,229.395 1151.64,230.343 1152.21,229.093 1152.78,229.953 1153.35,227.775 1153.92,227.678 1154.48,228.018 1155.05,227.158 1155.62,228.318 1156.19,229.389 1156.76,230.513 1157.33,229.41 1157.89,229.485 1158.46,229.434 1159.03,229.475 1159.6,231.792 1160.17,231.539 1160.74,229.411 1161.3,229.361 1161.87,229.561 1162.44,229.422 1163.01,230.317 1163.58,229.131 1164.15,229.251 1164.71,231.291 1165.28,230.069 1165.85,229.016 1166.42,231.162 1166.99,231.995 1167.56,232.687 1168.12,232.482 1168.69,231.175 1169.26,231.986 1169.83,230.643 1170.4,231.82 1170.97,232.542 1171.53,234.327 1172.1,234.062 1172.67,233.802 1173.24,231.444 1173.81,229.368 1174.38,228.239 1174.94,229.4 1175.51,228.268 1176.08,227.164 1176.65,226.344 1177.22,226.504 1177.79,226.557 1178.35,227.576 1178.92,227.589 1179.49,228.61 1180.06,226.337 1180.63,225.506 1181.2,225.788 1181.76,227.058 1182.33,228.073 1182.9,229.087 1183.47,227.851 1184.04,228.163 1184.61,229.356 1185.17,228.321 1185.74,228.354 1186.31,228.712 1186.88,229.81 1187.45,228.757 1188.02,226.651 1188.58,227.841 1189.15,229.086 1189.72,229.131 1190.29,229.021 1190.86,225.081 1191.43,225.414 1192,224.738 1192.56,224.203 1193.13,225.902 1193.7,222.253 1194.27,222.793 1194.84,221.365 1195.41,224.049 1195.97,226.395 1196.54,223.555 1197.11,224.121 1197.68,223.715 1198.25,226.393 1198.82,225.577 1199.38,226.986 1199.95,227.361 1200.52,229.719 1201.09,226.846 1201.66,227.955 1202.23,228.181 1202.79,227.518 1203.36,228.668 1203.93,227.957 1204.5,228.178 1205.07,229.623 1205.64,229.529 1206.2,228.671 1206.77,229.744 1207.34,231.06 1207.91,229.034 1208.48,229.267 1209.05,227.327 1209.61,227.614 1210.18,228.787 1210.75,230.006 1211.32,229.23 1211.89,230.599 1212.46,229.686 1213.02,226.601 1213.59,229.84 1214.16,229.852 1214.73,232.18 1215.3,232.364 1215.87,232.456 1216.43,232.494 1217,232.522 1217.57,234.434 1218.14,234.413 1218.71,233.123 1219.28,234.11 1219.84,231.585 1220.41,232.738 1220.98,236.861 1221.55,238.5 1222.12,235.957 1222.69,235.688 1223.25,237.412 1223.82,237.934 1224.39,237.486 1224.96,235.226 1225.53,237.961 1226.1,235.172 1226.66,233.546 1227.23,233.326 1227.8,232.149 1228.37,230.954 1228.94,230.879 1229.51,230.843 1230.07,231.964 1230.64,229.053 1231.21,229.029 1231.78,229.21 1232.35,231.24 1232.92,233.069 1233.48,231.963 1234.05,233.712 1234.62,233.393 1235.19,233.342 1235.76,233.784 1236.33,232.316 1236.89,233.013 1237.46,232.838 1238.03,233.558 1238.6,228.168 1239.17,229.371 1239.74,231.403 1240.3,230.164 1240.87,231.239 1241.44,228.962 1242.01,228.069 1242.58,228.97 1243.15,226.889 1243.71,226.94 1244.28,231.013 1244.85,228.928 1245.42,227.809 1245.99,225.899 1246.56,227.037 1247.12,227.379 1247.69,226.751 1248.26,225.846 1248.83,224.992 1249.4,227.659 1249.97,227.593 1250.53,226.782 1251.1,226.898 1251.67,230.123 1252.24,229.035 1252.81,228.196 1253.38,230.207 1253.94,229.028 1254.51,229.057 1255.08,229.32 1255.65,230.365 1256.22,229.48 1256.79,230.523 1257.35,231.504 1257.92,230.413 1258.49,229.44 1259.06,231.555 1259.63,231.371 1260.2,232.439 1260.76,231.101 1261.33,228.81 1261.9,229.762 1262.47,230.661 1263.04,231.524 1263.61,231.513 1264.18,230.43 1264.74,227.264 1265.31,227.482 1265.88,225.647 1266.45,227.064 1267.02,228.312 1267.59,228.434 1268.15,227.68 1268.72,227.905 1269.29,229.154 1269.86,231.403 1270.43,231.295 1271,232.186 1271.56,232.107 1272.13,231.014 1272.7,230.088 1273.27,230.01 1273.84,226.874 1274.41,227.185 1274.97,225.356 1275.54,225.803 1276.11,228.206 1276.68,228.456 1277.25,228.727 1277.82,230.874 1278.38,230.916 1278.95,231.922 1279.52,234.868 1280.09,235.456 1280.66,234.073 1281.23,234.762 1281.79,233.55 1282.36,232.43 1282.93,231.383 1283.5,231.594 1284.07,228.215 1284.64,229.347 1285.2,231.464 1285.77,230.404 1286.34,231.35 1286.91,231.264 1287.48,230.172 1288.05,229.872 1288.61,228.892 1289.18,228.79 1289.75,228.831 1290.32,228.726 1290.89,227.672 1291.46,225.819 1292.02,228.218 1292.59,231.349 1293.16,232.316 1293.73,231.044 1294.3,231.069 1294.87,232.179 1295.43,232.989 1296,233.607 1296.57,232.448 1297.14,234.122 1297.71,232.77 1298.28,233.396 1298.84,233.028 1299.41,231.641 1299.98,230.542 1300.55,228.274 1301.12,228.268 1301.69,228.25 1302.25,227.276 1302.82,226.364 1303.39,227.769 1303.96,227.947 1304.53,227.946 1305.1,227.993 1305.66,228.001 1306.23,228.161 1306.8,229.308 1307.37,229.363 1307.94,228.227 1308.51,227.103 1309.07,227.341 1309.64,228.596 1310.21,228.648 1310.78,228.556 1311.35,228.812 1311.92,227.7 1312.48,224.825 1313.05,226.289 1313.62,224.587 1314.19,224.874 1314.76,223.197 1315.33,224.559 1315.89,226.022 1316.46,227.392 1317.03,226.645 1317.6,229.931 1318.17,229.977 1318.74,231.069 1319.3,230.199 1319.87,229.33 1320.44,227.608 1321.01,226.671 1321.58,229.134 1322.15,230.152 1322.71,232.171 1323.28,232.233 1323.85,231.266 1324.42,229.154 1324.99,229.221 1325.56,230.438 1326.12,227.366 1326.69,229.485 1327.26,229.542 1327.83,229.339 1328.4,230.61 1328.97,231.612 1329.53,230.448 1330.1,230.518 1330.67,231.446 1331.24,229.359 1331.81,228.381 1332.38,230.512 1332.94,231.371 1333.51,229.466 1334.08,229.751 1334.65,229.013 1335.22,229.251 1335.79,228.325 1336.36,231.699 1336.92,230.792 1337.49,231.836 1338.06,232.862 1338.63,233.533 1339.2,231.22 1339.77,234.057 1340.33,233.906 1340.9,233.715 1341.47,232.476 1342.04,233.371 1342.61,232.201 1343.18,232.035 1343.74,232.944 1344.31,232.716 1344.88,232.831 1345.45,231.697 1346.02,230.464 1346.59,230.563 1347.15,228.535 1347.72,227.909 1348.29,226.23 1348.86,224.545 1349.43,226.113 1350,226.554 1350.56,227.685 1351.13,226.889 1351.7,227.06 1352.27,228.324 1352.84,227.566 1353.41,229.871 1353.97,229.752 1354.54,228.929 1355.11,231.163 1355.68,229.798 1356.25,232.045 1356.82,228.85 1357.38,226.942 1357.95,228.197 1358.52,230.376 1359.09,230.329 1359.66,230.11 1360.23,233.298 1360.79,232.328 1361.36,235.212 1361.93,234.793 1362.5,233.338 1363.07,231.915 1363.64,234.013 1364.2,234.902 1364.77,234.496 1365.34,236.046 1365.91,235.738 1366.48,232.347 1367.05,230.228 1367.61,227.13 1368.18,228.073 1368.75,227.161 1369.32,227.424 1369.89,228.775 1370.46,226.658 1371.02,227.949 1371.59,229.039 1372.16,229.147 1372.73,228.303 1373.3,230.514 1373.87,229.459 1374.43,229.557 1375,228.398 1375.57,227.541 1376.14,226.717 1376.71,225.89 1377.28,226.165 1377.84,225.769 1378.41,228.07 1378.98,229.311 1379.55,230.382 1380.12,230.647 1380.69,232.672 1381.25,231.423 1381.82,231.343 1382.39,233.209 1382.96,231.716 1383.53,231.436 1384.1,231.661 1384.66,233.5 1385.23,233.078 1385.8,232.941 1386.37,230.718 1386.94,233.02 1387.51,235.979 1388.07,236.388 1388.64,233.815 1389.21,233.45 1389.78,232.305 1390.35,231.067 1390.92,230.162 1391.48,230.101 1392.05,229.082 1392.62,228.23 1393.19,228.292 1393.76,228.414 1394.33,229.616 1394.89,229.674 1395.46,228.676 1396.03,228.875 1396.6,228.889 1397.17,228.764 1397.74,228.011 1398.3,229.044 1398.87,226.961 1399.44,223.99 1400.01,224.352 1400.58,224.665 1401.15,225.011 1401.71,225.482 1402.28,225.81 1402.85,226.049 1403.42,228.375 1403.99,228.552 1404.56,228.551 1405.13,228.468 1405.69,227.61 1406.26,227.073 1406.83,225.287 1407.4,225.687 1407.97,226.082 1408.54,228.183 1409.1,228.348 1409.67,229.527 1410.24,228.581 1410.81,228.793 1411.38,227.764 1411.95,227.997 1412.51,230.276 1413.08,228.162 1413.65,227.455 1414.22,228.988 1414.79,229.065 1415.36,228.262 1415.92,226.565 1416.49,227.872 1417.06,229.118 1417.63,231.376 1418.2,233.428 1418.77,232.226 1419.33,232.135 1419.9,231.118 1420.47,233.098 1421.04,234.049 1421.61,235.725 1422.18,236.493 1422.74,238.257 1423.31,236.447 1423.88,235.696 1424.45,235.457 1425.02,234.171 1425.59,233.564 1426.15,234.31 1426.72,232.929 1427.29,232.628 1427.86,234.553 1428.43,232.147 1429,230.734 1429.56,230.625 1430.13,230.518 1430.7,230.651 1431.27,230.602 1431.84,230.217 1432.41,231.216 1432.97,232.04 1433.54,230.787 1434.11,232.978 1434.68,232.92 1435.25,233.733 1435.82,233.64 1436.38,233.405 1436.95,232.1 1437.52,230.752 1438.09,230.635 1438.66,231.409 1439.23,229.11 1439.79,229.09 1440.36,227.844 1440.93,227.067 1441.5,227.236 1442.07,227.288 1442.64,226.101 1443.2,226.247 1443.77,225.619 1444.34,225.83 1444.91,226.192 1445.48,229.662 1446.05,227.626 1446.61,228.687 1447.18,227.879 1447.75,224.969 1448.32,223.291 1448.89,225.006 1449.46,226.476 1450.02,231.864 1450.59,231.661 1451.16,228.461 1451.73,228.735 1452.3,230.815 1452.87,233.809 1453.43,233.458 1454,233.549 1454.57,235.324 1455.14,236.023 1455.71,235.55 1456.28,233.139 1456.84,233.03 1457.41,232.57 1457.98,232.28 1458.55,231.925 1459.12,230.823 1459.69,229.566 1460.25,229.572 1460.82,229.564 1461.39,230.626 1461.96,230.69 1462.53,229.373 1463.1,228.13 1463.66,228.119 1464.23,228.35 1464.8,229.418 1465.37,230.909 1465.94,230.83 1466.51,230.646 1467.07,233.747 1467.64,232.504 1468.21,233.371 1468.78,235.149 1469.35,234.652 1469.92,235.328 1470.48,235.708 1471.05,235.162 1471.62,232.445 1472.19,231.081 1472.76,230.846 1473.33,231.848 1473.89,232.864 1474.46,231.407 1475.03,230.2 1475.6,232.08 1476.17,230.783 1476.74,229.588 1477.31,229.41 1477.87,227.187 1478.44,229.19 1479.01,230.098 1479.58,228.826 1480.15,228.639 1480.72,227.79 1481.28,228.065 1481.85,227.135 1482.42,227.357 1482.99,230.466 1483.56,231.485 1484.13,231.271 1484.69,230.089 1485.26,230.122 1485.83,231.013 1486.4,232.83 1486.97,232.524 1487.54,232.398 1488.1,232.388 1488.67,233.249 1489.24,234.859 1489.81,235.201 1490.38,231.576 1490.95,233.501 1491.51,231.987 1492.08,231.67 1492.65,231.593 1493.22,231.27 1493.79,231.141 1494.36,231.113 1494.92,231.028 1495.49,231.813 1496.06,233.561 1496.63,233.222 1497.2,233.006 1497.77,233.959 1498.33,231.419 1498.9,231.173 1499.47,233.105 1500.04,232.773 1500.61,231.387 1501.18,230.18 1501.74,228.873 1502.31,229.85 1502.88,226.81 1503.45,227.805 1504.02,227.924 1504.59,225.955 1505.15,227.278 1505.72,228.333 1506.29,227.378 1506.86,225.273 1507.43,226.583 1508,227.868 1508.56,227.759 1509.13,225.762 1509.7,224.929 1510.27,226.472 1510.84,226.599 1511.41,227.8 1511.97,227.952 1512.54,227.072 1513.11,228.345 1513.68,228.137 1514.25,228.269 1514.82,229.448 1515.38,229.357 1515.95,230.351 1516.52,230.278 1517.09,229.326 1517.66,229.129 1518.23,228.944 1518.79,228.995 1519.36,228.811 1519.93,227.676 1520.5,227.68 1521.07,228.641 1521.64,228.765 1522.2,227.668 1522.77,226.804 1523.34,225.877 1523.91,223.237 1524.48,223.806 1525.05,224.244 1525.61,224.481 1526.18,225.887 1526.75,225.119 1527.32,224.459 1527.89,225.988 1528.46,226.514 1529.02,225.707 1529.59,226.004 1530.16,230.244 1530.73,230.203 1531.3,232.037 1531.87,231.011 1532.43,231.113 1533,231.225 1533.57,233.272 1534.14,232.895 1534.71,233.668 1535.28,233.181 1535.84,231.674 1536.41,232.615 1536.98,232.454 1537.55,231.443 1538.12,232.421 1538.69,232.166 1539.25,232.124 1539.82,233.039 1540.39,230.883 1540.96,230.762 1541.53,231.595 1542.1,231.341 1542.66,229.339 1543.23,228.371 1543.8,228.487 1544.37,229.558 1544.94,232.701 1545.51,232.653 1546.08,231.133 1546.64,229.026 1547.21,227.993 1547.78,228.983 1548.35,228.904 1548.92,229.067 1549.49,228.02 1550.05,227.96 1550.62,228.921 1551.19,229.045 1551.76,231.28 1552.33,231.138 1552.9,228.027 1553.46,228.015 1554.03,227.274 1554.6,226.215 1555.17,227.395 1555.74,226.654 1556.31,226.867 1556.87,227.091 1557.44,226.318 1558.01,226.75 1558.58,226.839 1559.15,227.043 1559.72,227.529 1560.28,225.547 1560.85,226.653 1561.42,226.805 1561.99,225.94 1562.56,226.263 1563.13,223.583 1563.69,223.168 1564.26,223.604 1564.83,222.988 1565.4,224.663 1565.97,227.236 1566.54,229.394 1567.1,229.635 1567.67,230.628 1568.24,231.817 1568.81,231.543 1569.38,231.488 1569.95,231.592 1570.51,231.8 1571.08,232.759 1571.65,231.525 1572.22,231.486 1572.79,230.457 1573.36,230.369 1573.92,229.576 1574.49,229.733 1575.06,229.803 1575.63,230.058 1576.2,229.057 1576.77,228.031 1577.33,228.279 1577.9,228.644 1578.47,229.857 1579.04,228.863 1579.61,229.051 1580.18,229.16 1580.74,228.404 1581.31,229.593 1581.88,228.575 1582.45,231.634 1583.02,230.64 1583.59,230.773 1584.15,230.839 1584.72,230.859 1585.29,229.83 1585.86,227.8 1586.43,227.146 1587,226.389 1587.56,229.911 1588.13,230.306 1588.7,230.205 1589.27,230.388 1589.84,230.41 1590.41,230.3 1590.97,230.26 1591.54,229.389 1592.11,231.687 1592.68,230.318 1593.25,231.312 1593.82,230.239 1594.38,233.384 1594.95,233.119 1595.52,231.938 1596.09,232.84 1596.66,234.876 1597.23,236.861 1597.79,237.508 1598.36,234.969 1598.93,233.678 1599.5,232.238 1600.07,233.161 1600.64,234.019 1601.2,233.857 1601.77,233.592 1602.34,233.198 1602.91,231.952 1603.48,231.671 1604.05,230.61 1604.61,228.542 1605.18,228.63 1605.75,228.67 1606.32,229.657 1606.89,231.536 1607.46,230.347 1608.02,229.275 1608.59,227.305 1609.16,225.379 1609.73,225.767 1610.3,226.335 1610.87,227.671 1611.43,226.82 1612,225.965 1612.57,227.418 1613.14,226.55 1613.71,226.934 1614.28,227.211 1614.84,227.344 1615.41,228.644 1615.98,227.821 1616.55,229.936 1617.12,228.863 1617.69,229.202 1618.26,230.511 1618.82,230.53 1619.39,234.861 1619.96,236.565 1620.53,236.382 1621.1,235.851 1621.67,233.312 1622.23,233.901 1622.8,236.693 1623.37,239.429 1623.94,237.575 1624.51,237.026 1625.08,234.399 1625.64,231.993 1626.21,234.148 1626.78,234.792 1627.35,234.253 1627.92,236.795 1628.49,237.478 1629.05,239.124 1629.62,238.497 1630.19,236.735 1630.76,238.186 1631.33,236.508 1631.9,235.885 1632.46,235.439 1633.03,234.898 1633.6,233.467 1634.17,235.484 1634.74,233.892 1635.31,233.435 1635.87,233.026 1636.44,232.707 1637.01,232.137 1637.58,230.913 1638.15,231.587 1638.72,231.327 1639.28,230.969 1639.85,229.85 1640.42,231.813 1640.99,232.534 1641.56,231.364 1642.13,230.057 1642.69,228.923 1643.26,226.772 1643.83,227.114 1644.4,228.113 1644.97,229.054 1645.54,228.83 1646.1,230.845 1646.67,230.614 1647.24,229.65 1647.81,225.372 1648.38,225.515 1648.95,226.561 1649.51,226.653 1650.08,225.618 1650.65,225.906 1651.22,227.154 1651.79,225.273 1652.36,226.555 1652.92,226.805 1653.49,225.89 1654.06,226.148 1654.63,225.139 1655.2,226.381 1655.77,227.593 1656.33,226.484 1656.9,227.387 1657.47,228.564 1658.04,229.742 1658.61,229.801 1659.18,226.503 1659.74,225.79 1660.31,225.993 1660.88,226.398 1661.45,226.709 1662.02,226.952 1662.59,227.098 1663.15,227.586 1663.72,228.937 1664.29,227.855 1664.86,227.114 1665.43,227.082 1666,227.253 1666.56,228.562 1667.13,228.786 1667.7,227.9 1668.27,228.977 1668.84,227.953 1669.41,227.113 1669.97,227.283 1670.54,225.549 1671.11,224.105 1671.68,224.298 1672.25,224.925 1672.82,223.955 1673.38,225.338 1673.95,227.764 1674.52,228.981 1675.09,228.996 1675.66,229.07 1676.23,229.35 1676.79,229.332 1677.36,230.574 1677.93,229.384 1678.5,230.562 1679.07,229.421 1679.64,230.424 1680.2,230.502 1680.77,231.591 1681.34,233.617 1681.91,232.474 1682.48,234.397 1683.05,234.056 1683.61,233.619 1684.18,233.606 1684.75,233.488 1685.32,233.387 1685.89,232.922 1686.46,233.671 1687.02,234.545 1687.59,233.011 1688.16,228.716 1688.73,229.752 1689.3,229.792 1689.87,229.499 1690.44,228.737 1691,226.825 1691.57,226.054 1692.14,224.212 1692.71,223.652 1693.28,226.233 1693.85,226.442 1694.41,227.624 1694.98,224.567 1695.55,224.94 1696.12,225.291 1696.69,223.611 1697.26,226.266 1697.82,227.653 1698.39,232.15 1698.96,231.116 1699.53,229.136 1700.1,228.107 1700.67,228.388 1701.23,225.446 1701.8,227.652 1702.37,227.762 1702.94,228.982 1703.51,228.027 1704.08,229.267 1704.64,227.556 1705.21,226.92 1705.78,227.16 1706.35,225.175 1706.92,225.701 1707.49,225.106 1708.05,227.603 1708.62,228.759 1709.19,228.856 1709.76,229.018 1710.33,227.95 1710.9,228.159 1711.46,227.535 1712.03,226.854 1712.6,225.131 1713.17,228.727 1713.74,229.852 1714.31,232.123 1714.87,232.971 1715.44,230.864 1716.01,229.845 1716.58,227.797 1717.15,228.078 1717.72,230.3 1718.28,231.473 1718.85,231.485 1719.42,229.264 1719.99,228.269 1720.56,226.333 1721.13,226.756 1721.69,227.812 1722.26,229.928 1722.83,231.124 1723.4,232.125 1723.97,230.93 1724.54,231.85 1725.1,227.63 1725.67,227.723 1726.24,227.963 1726.81,229.244 1727.38,230.217 1727.95,230.383 1728.51,234.435 1729.08,234.115 1729.65,233.958 1730.22,233.92 1730.79,231.637 1731.36,230.853 1731.92,230.906 1732.49,231.064 1733.06,232.274 1733.63,232.994 1734.2,234.772 1734.77,233.678 1735.33,232.585 1735.9,231.494 1736.47,231.521 1737.04,229.425 1737.61,229.475 1738.18,229.549 1738.74,227.636 1739.31,229.898 1739.88,231.073 1740.45,233.285 1741.02,234.318 1741.59,232.989 1742.15,232.021 1742.72,232.792 1743.29,232.71 1743.86,232.562 1744.43,232.475 1745,233.193 1745.56,233.831 1746.13,233.564 1746.7,235.612 1747.27,234.144 1747.84,234.117 1748.41,233.671 1748.97,235.61 1749.54,235.148 1750.11,235.785 1750.68,234.168 1751.25,235.924 1751.82,235.566 1752.38,235.122 1752.95,235.805 1753.52,237.277 1754.09,237.573 1754.66,239.214 1755.23,240.319 1755.79,239.527 1756.36,239.783 1756.93,237.909 1757.5,236.404 1758.07,235.96 1758.64,234.398 1759.21,232.838 1759.77,232.476 1760.34,233.073 1760.91,231.421 1761.48,230.261 1762.05,228.917 1762.62,230.122 1763.18,229.003 1763.75,227.041 1764.32,226.067 1764.89,226.088 1765.46,225.275 1766.03,226.272 1766.59,225.228 1767.16,225.206 1767.73,226.267 1768.3,226.186 1768.87,225.199 1769.44,225.523 1770,225.673 1770.57,224.905 1771.14,226.202 1771.71,226.436 1772.28,227.846 1772.85,227.091 1773.41,224.13 1773.98,225.724 1774.55,225.991 1775.12,226.913 1775.69,227.916 1776.26,226.89 1776.82,224.93 1777.39,224.363 1777.96,223.506 1778.53,228.118 1779.1,228.131 1779.67,232.32 1780.23,235.213 1780.8,231.652 1781.37,231.633 1781.94,231.625 1782.51,231.565 1783.08,230.49 1783.64,229.468 1784.21,228.531 1784.78,228.364 1785.35,226.234 1785.92,225.432 1786.49,225.65 1787.05,225.108 1787.62,224.591 1788.19,222.843 1788.76,223.316 1789.33,222.821 1789.9,220.489 1790.46,223.148 1791.03,226.647 1791.6,224.628 1792.17,226.052 1792.74,225.222 1793.31,225.423 1793.87,224.694 1794.44,227.96 1795.01,227.985 1795.58,229.188 1796.15,229.304 1796.72,229.381 1797.28,229.582 1797.85,228.754 1798.42,227.877 1798.99,229.19 1799.56,229.487 1800.13,228.47 1800.69,228.695 1801.26,227.61 1801.83,227.03 1802.4,225.304 1802.97,227.922 1803.54,229.131 1804.1,229.011 1804.67,229.04 1805.24,229.374 1805.81,231.695 1806.38,230.771 1806.95,229.637 1807.51,231.802 1808.08,232.762 1808.65,230.519 1809.22,227.533 1809.79,226.835 1810.36,225.124 1810.92,224.356 1811.49,222.842 1812.06,224.395 1812.63,223.889 1813.2,225.513 1813.77,227.007 1814.33,227.289 1814.9,228.335 1815.47,228.733 1816.04,230.943 1816.61,233.161 1817.18,233.04 1817.74,232.754 1818.31,230.758 1818.88,228.986 1819.45,231.346 1820.02,229.258 1820.59,228.655 1821.15,228.906 1821.72,230.158 1822.29,232.027 1822.86,231.885 1823.43,228.758 1824,228.139 1824.56,230.203 1825.13,231.541 1825.7,232.637 1826.27,232.632 1826.84,231.463 1827.41,232.503 1827.97,229.622 1828.54,229.596 1829.11,228.751 1829.68,227.845 1830.25,229.285 1830.82,230.533 1831.39,227.571 1831.95,226.8 1832.52,228.294 1833.09,227.477 1833.66,229.699 1834.23,231.659 1834.8,232.718 1835.36,231.664 1835.93,230.526 1836.5,227.496 1837.07,227.611 1837.64,226.679 1838.21,226.882 1838.77,227.335 1839.34,226.688 1839.91,231.182 1840.48,232.427 1841.05,233.57 1841.62,232.496 1842.18,233.611 1842.75,232.374 1843.32,233.406 1843.89,233.278 1844.46,230.868 1845.03,230.877 1845.59,232.965 1846.16,230.916 1846.73,232.916 1847.3,232.815 1847.87,231.668 1848.44,230.523 1849,232.667 1849.57,230.446 1850.14,231.733 1850.71,234.683 1851.28,234.255 1851.85,233.136 1852.41,233.01 1852.98,232.919 1853.55,231.775 1854.12,230.602 1854.69,230.534 1855.26,230.445 1855.82,229.295 1856.39,229.304 1856.96,229.414 1857.53,228.526 1858.1,230.738 1858.67,228.646 1859.23,229.897 1859.8,230.156 1860.37,232.218 1860.94,233.199 1861.51,234.125 1862.08,234.004 1862.64,233.84 1863.21,233.834 1863.78,235.927 1864.35,233.55 1864.92,233.21 1865.49,230.989 1866.05,229.892 1866.62,228.806 1867.19,228.941 1867.76,230.014 1868.33,229.94 1868.9,229.266 1869.46,230.411 1870.03,229.275 1870.6,227.331 1871.17,230.553 1871.74,229.208 1872.31,230.165 1872.87,231.209 1873.44,231.315 1874.01,230.331 1874.58,230.226 1875.15,228.274 1875.72,227.313 1876.28,227.54 1876.85,227.954 1877.42,226.999 1877.99,227.157 1878.56,228.648 1879.13,228.06 1879.69,230.351 1880.26,230.287 1880.83,230.604 1881.4,228.523 1881.97,228.626 1882.54,230.878 1883.1,233.802 1883.67,233.443 1884.24,235.313 1884.81,235.155 1885.38,232.856 1885.95,232.794 1886.51,231.782 1887.08,231.844 1887.65,233.823 1888.22,233.411 1888.79,234.264 1889.36,232.835 1889.92,233.633 1890.49,232.557 1891.06,229.383 1891.63,231.487 1892.2,233.352 1892.77,234.274 1893.33,231.998 1893.9,230.951 1894.47,233.014 1895.04,231.858 1895.61,233.795 1896.18,233.341 1896.74,234.053 1897.31,231.883 1897.88,231.444 1898.45,232.435 1899.02,231.049 1899.59,231.904 1900.16,232.751 1900.72,231.488 1901.29,227.156 1901.86,227.326 1902.43,224.568 1903,223.799 1903.57,225.227 1904.13,227.738 1904.7,230.16 1905.27,231.244 1905.84,229.998 1906.41,229.704 1906.98,231.714 1907.54,226.533 1908.11,229.052 1908.68,229.215 1909.25,230.033 1909.82,228.964 1910.39,227.115 1910.95,228.452 1911.52,229.461 1912.09,230.426 1912.66,231.269 1913.23,231.003 1913.8,230.966 1914.36,231.02 1914.93,231.9 1915.5,232.729 1916.07,230.665 1916.64,231.789 1917.21,230.525 1917.77,230.413 1918.34,230.128 1918.91,233.231 1919.48,231.873 1920.05,230.547 1920.62,230.248 1921.18,229.294 1921.75,231.421 1922.32,231.388 1922.89,229.225 1923.46,230.186 1924.03,228.235 1924.59,228.128 1925.16,230.234 1925.73,230.19 1926.3,230.048 1926.87,230.723 1927.44,230.728 1928,230.608 1928.57,228.506 1929.14,226.55 1929.71,226.669 1930.28,227.705 1930.85,227.563 1931.41,228.562 1931.98,228.873 1932.55,228.012 1933.12,227.165 1933.69,225.459 1934.26,224.694 1934.82,228.093 1935.39,229.2 1935.96,231.373 1936.53,233.266 1937.1,231.92 1937.67,230.839 1938.23,229.724 1938.8,229.785 1939.37,228.718 1939.94,228.685 1940.51,230.854 1941.08,231.72 1941.64,230.71 1942.21,229.595 1942.78,227.595 1943.35,228.821 1943.92,229.981 1944.49,228.018 1945.05,227.122 1945.62,227.413 1946.19,228.541 1946.76,227.515 1947.33,227.818 1947.9,229.275 1948.46,231.412 1949.03,234.426 1949.6,233.899 1950.17,232.825 1950.74,232.756 1951.31,233.446 1951.87,231.149 1952.44,233.09 1953.01,232.845 1953.58,234.448 1954.15,234.102 1954.72,233.915 1955.28,232.456 1955.85,232.312 1956.42,233.287 1956.99,233.063 1957.56,231.689 1958.13,233.526 1958.69,234.204 1959.26,235 1959.83,235.687 1960.4,235.32 1960.97,236.06 1961.54,237.475 1962.1,236.969 1962.67,234.485 1963.24,233.991 1963.81,232.477 1964.38,234.433 1964.95,232.846 1965.51,234.803 1966.08,233.198 1966.65,230.673 1967.22,230.555 1967.79,230.392 1968.36,229.077 1968.92,228.112 1969.49,231.179 1970.06,229.994 1970.63,228.71 1971.2,230.726 1971.77,228.449 1972.34,228.313 1972.9,229.476 1973.47,229.383 1974.04,228.17 1974.61,227.047 1975.18,226.026 1975.75,227.44 1976.31,227.497 1976.88,226.633 1977.45,225.537 1978.02,227.858 1978.59,228.032 1979.16,227.947 1979.72,226.864 1980.29,228.923 1980.86,230.047 1981.43,229.917 1982,229.807 1982.57,230.596 1983.13,226.426 1983.7,225.363 1984.27,226.619 1984.84,226.837 1985.41,227.174 1985.98,228.291 1986.54,227.092 1987.11,228.129 1987.68,230.363 1988.25,230.262 1988.82,227.943 1989.39,227.984 1989.95,226.98 1990.52,228.204 1991.09,229.372 1991.66,230.41 1992.23,228.194 1992.8,228.268 1993.36,229.223 1993.93,228.269 1994.5,228.316 1995.07,228.406 1995.64,229.453 1996.21,230.547 1996.77,229.664 1997.34,229.879 1997.91,227.793 1998.48,229.78 1999.05,228.381 1999.62,228.389 2000.18,228.31 2000.75,230.071 2001.32,229.025 2001.89,229.052 2002.46,230.149 2003.03,230.267 2003.59,230.264 2004.16,228.079 2004.73,227.181 2005.3,231.528 2005.87,232.31 2006.44,232.047 2007,230.793 2007.57,229.777 2008.14,230.961 2008.71,233.034 2009.28,232.8 2009.85,233.433 2010.41,234.129 2010.98,232.817 2011.55,232.719 2012.12,230.598 2012.69,231.36 2013.26,228.256 2013.82,230.467 2014.39,230.534 2014.96,231.498 2015.53,231.359 2016.1,230.093 2016.67,227.963 2017.23,228.22 2017.8,229.699 2018.37,229.652 2018.94,229.923 2019.51,228.992 2020.08,228.789 2020.64,227.735 2021.21,227.711 2021.78,227.934 2022.35,228.358 2022.92,228.675 2023.49,228.937 2024.05,228.789 2024.62,229.016 2025.19,232.293 2025.76,235.122 2026.33,234.751 2026.9,234.288 2027.46,232.889 2028.03,232.517 2028.6,230.171 2029.17,227.771 2029.74,227.747 2030.31,225.684 2030.87,226.051 2031.44,226.206 2032.01,228.424 2032.58,231.59 2033.15,230.324 2033.72,229.298 2034.28,232.162 2034.85,228.787 2035.42,228.691 2035.99,229.959 2036.56,228.038 2037.13,228.044 2037.69,228.283 2038.26,226.475 2038.83,227.813 2039.4,227.118 2039.97,227.423 2040.54,226.581 2041.11,228.055 2041.67,227.319 2042.24,227.38 2042.81,228.652 2043.38,229.652 2043.95,227.736 2044.52,224.789 2045.08,227.26 2045.65,227.448 2046.22,225.484 2046.79,225.964 2047.36,227.307 2047.93,228.529 2048.49,227.535 2049.06,227.725 2049.63,226.848 2050.2,228.002 2050.77,228.074 2051.34,227.192 2051.9,228.359 2052.47,229.703 2053.04,231.915 2053.61,234.063 2054.18,232.827 2054.75,231.523 2055.31,231.495 2055.88,231.119 2056.45,231.098 2057.02,231.091 2057.59,232.224 2058.16,230.226 2058.72,231.183 2059.29,235.277 2059.86,235.783 2060.43,235.301 2061,236.091 2061.57,235.507 2062.13,235.931 2062.7,231.494 2063.27,230.104 2063.84,231.245 2064.41,231.18 2064.98,233.056 2065.54,232.1 2066.11,233.934 2066.68,231.838 2067.25,232.498 2067.82,231.534 2068.39,231.204 2068.95,231.152 2069.52,232.037 2070.09,230.841 2070.66,229.522 2071.23,228.348 2071.8,226.448 2072.36,226.533 2072.93,224.744 2073.5,227.258 2074.07,228.399 2074.64,226.312 2075.21,227.65 2075.77,226.815 2076.34,227.917 2076.91,230.922 2077.48,229.714 2078.05,228.552 2078.62,228.678 2079.18,229.864 2079.75,230.801 2080.32,230.898 2080.89,231.899 2081.46,229.764 2082.03,228.573 2082.59,227.47 2083.16,225.484 2083.73,223.913 2084.3,223.208 2084.87,224.786 2085.44,223.029 2086,223.662 2086.57,227.21 2087.14,227.436 2087.71,228.666 2088.28,228.922 2088.85,230.103 2089.41,231.002 2089.98,232.098 2090.55,231.977 2091.12,231.905 2091.69,231.908 2092.26,231.753 2092.82,231.703 2093.39,230.507 2093.96,230.608 2094.53,229.518 2095.1,229.293 2095.67,228.17 2096.23,227.188 2096.8,227.608 2097.37,225.722 2097.94,225.994 2098.51,223.115 2099.08,223.826 2099.64,226.242 2100.21,227.477 2100.78,228.637 2101.35,228.521 2101.92,231.628 2102.49,232.452 2103.05,233.434 2103.62,232.324 2104.19,232.321 2104.76,230.961 2105.33,231.008 2105.9,232.168 2106.46,233.081 2107.03,231.915 2107.6,232.823 2108.17,231.748 2108.74,230.665 2109.31,231.865 2109.87,230.825 2110.44,228.699 2111.01,226.755 2111.58,225.147 2112.15,223.487 2112.72,224.046 2113.29,224.356 2113.85,225.933 2114.42,226.167 2114.99,229.339 2115.56,229.411 2116.13,227.543 2116.7,229.792 2117.26,230.871 2117.83,230.637 2118.4,231.6 2118.97,230.583 2119.54,232.697 2120.11,234.387 2120.67,236.241 2121.24,237.841 2121.81,238.376 2122.38,238.533 2122.95,236.87 2123.52,233.344 2124.08,233.203 2124.65,232.045 2125.22,231 2125.79,231.269 2126.36,231.19 2126.93,231.153 2127.49,230.099 2128.06,230.799 2128.63,230.735 2129.2,228.601 2129.77,227.615 2130.34,228.572 2130.9,227.887 2131.47,228.795 2132.04,228.906 2132.61,228.942 2133.18,228.027 2133.75,226.828 2134.31,229.066 2134.88,227.022 2135.45,228.353 2136.02,228.569 2136.59,228.568 2137.16,227.802 2137.72,227.887 2138.29,230.144 2138.86,230.074 2139.43,232.02 2140,230.834 2140.57,231.947 2141.13,230.74 2141.7,230.712 2142.27,228.706 2142.84,229.816 2143.41,229.795 2143.98,231.041 2144.54,230.836 2145.11,231.97 2145.68,231.757 2146.25,231.511 2146.82,232.345 2147.39,233.098 2147.95,232.028 2148.52,231.931 2149.09,231.647 2149.66,230.573 2150.23,232.638 2150.8,231.53 2151.36,232.707 2151.93,230.467 2152.5,230.414 2153.07,232.491 2153.64,231.234 2154.21,230.035 2154.77,230.952 2155.34,231.046 2155.91,230.839 2156.48,230.669 2157.05,230.429 2157.62,229.664 2158.18,230.062 2158.75,228.064 2159.32,228.163 2159.89,227.433 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ± 0.02\n  with uncertainty of ± 0.0018315909106722595\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.015 ± (0.0032756, 0.00325544) (MC)\n  95% confidence interval: [-4.02141, -4.00856] (MC)\n  linear error propagation: -4.01501 ± 0.00325284\n  |δ_y| = |0.00264981| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015004546295829, val_l = 0.006405432904304398, val_u = 0.006447098709958965)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip330\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip330)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip331\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip330)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip332\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1145.93 2211.02,1145.93 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,979.72 2211.02,979.72 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,813.509 2211.02,813.509 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,647.298 2211.02,647.298 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,481.087 2211.02,481.087 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,314.876 2211.02,314.876 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1145.93 365.751,1145.93 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,979.72 365.751,979.72 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,813.509 365.751,813.509 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,647.298 365.751,647.298 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,481.087 365.751,481.087 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,314.876 365.751,314.876 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M298.909 1131.73 Q295.298 1131.73 293.469 1135.29 Q291.664 1138.84 291.664 1145.97 Q291.664 1153.07 293.469 1156.64 Q295.298 1160.18 298.909 1160.18 Q302.543 1160.18 304.349 1156.64 Q306.177 1153.07 306.177 1145.97 Q306.177 1138.84 304.349 1135.29 Q302.543 1131.73 298.909 1131.73 M298.909 1128.03 Q304.719 1128.03 307.775 1132.63 Q310.853 1137.22 310.853 1145.97 Q310.853 1154.69 307.775 1159.3 Q304.719 1163.88 298.909 1163.88 Q293.099 1163.88 290.02 1159.3 Q286.964 1154.69 286.964 1145.97 Q286.964 1137.22 290.02 1132.63 Q293.099 1128.03 298.909 1128.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M259.557 993.065 L267.196 993.065 L267.196 966.699 L258.886 968.366 L258.886 964.106 L267.15 962.44 L271.826 962.44 L271.826 993.065 L279.465 993.065 L279.465 997 L259.557 997 L259.557 993.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 965.518 Q295.298 965.518 293.469 969.083 Q291.664 972.625 291.664 979.754 Q291.664 986.861 293.469 990.426 Q295.298 993.967 298.909 993.967 Q302.543 993.967 304.349 990.426 Q306.177 986.861 306.177 979.754 Q306.177 972.625 304.349 969.083 Q302.543 965.518 298.909 965.518 M298.909 961.815 Q304.719 961.815 307.775 966.421 Q310.853 971.004 310.853 979.754 Q310.853 988.481 307.775 993.088 Q304.719 997.671 298.909 997.671 Q293.099 997.671 290.02 993.088 Q286.964 988.481 286.964 979.754 Q286.964 971.004 290.02 966.421 Q293.099 961.815 298.909 961.815 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M262.775 826.854 L279.094 826.854 L279.094 830.789 L257.15 830.789 L257.15 826.854 Q259.812 824.099 264.395 819.469 Q269.002 814.817 270.182 813.474 Q272.428 810.951 273.307 809.215 Q274.21 807.456 274.21 805.766 Q274.21 803.011 272.266 801.275 Q270.344 799.539 267.242 799.539 Q265.043 799.539 262.59 800.303 Q260.159 801.067 257.381 802.618 L257.381 797.896 Q260.205 796.761 262.659 796.183 Q265.113 795.604 267.15 795.604 Q272.52 795.604 275.715 798.289 Q278.909 800.974 278.909 805.465 Q278.909 807.595 278.099 809.516 Q277.312 811.414 275.205 814.007 Q274.627 814.678 271.525 817.895 Q268.423 821.09 262.775 826.854 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 799.308 Q295.298 799.308 293.469 802.872 Q291.664 806.414 291.664 813.544 Q291.664 820.65 293.469 824.215 Q295.298 827.756 298.909 827.756 Q302.543 827.756 304.349 824.215 Q306.177 820.65 306.177 813.544 Q306.177 806.414 304.349 802.872 Q302.543 799.308 298.909 799.308 M298.909 795.604 Q304.719 795.604 307.775 800.21 Q310.853 804.794 310.853 813.544 Q310.853 822.27 307.775 826.877 Q304.719 831.46 298.909 831.46 Q293.099 831.46 290.02 826.877 Q286.964 822.27 286.964 813.544 Q286.964 804.794 290.02 800.21 Q293.099 795.604 298.909 795.604 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M272.914 645.944 Q276.27 646.661 278.145 648.93 Q280.043 651.198 280.043 654.532 Q280.043 659.647 276.525 662.448 Q273.006 665.249 266.525 665.249 Q264.349 665.249 262.034 664.809 Q259.742 664.393 257.289 663.536 L257.289 659.022 Q259.233 660.157 261.548 660.735 Q263.863 661.314 266.386 661.314 Q270.784 661.314 273.076 659.578 Q275.39 657.842 275.39 654.532 Q275.39 651.476 273.238 649.763 Q271.108 648.027 267.289 648.027 L263.261 648.027 L263.261 644.185 L267.474 644.185 Q270.923 644.185 272.752 642.819 Q274.58 641.43 274.58 638.837 Q274.58 636.175 272.682 634.763 Q270.807 633.328 267.289 633.328 Q265.367 633.328 263.168 633.745 Q260.969 634.161 258.33 635.041 L258.33 630.874 Q260.992 630.134 263.307 629.763 Q265.645 629.393 267.705 629.393 Q273.029 629.393 276.131 631.824 Q279.233 634.231 279.233 638.351 Q279.233 641.222 277.59 643.212 Q275.946 645.18 272.914 645.944 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 633.097 Q295.298 633.097 293.469 636.661 Q291.664 640.203 291.664 647.333 Q291.664 654.439 293.469 658.004 Q295.298 661.546 298.909 661.546 Q302.543 661.546 304.349 658.004 Q306.177 654.439 306.177 647.333 Q306.177 640.203 304.349 636.661 Q302.543 633.097 298.909 633.097 M298.909 629.393 Q304.719 629.393 307.775 633.999 Q310.853 638.583 310.853 647.333 Q310.853 656.06 307.775 660.666 Q304.719 665.249 298.909 665.249 Q293.099 665.249 290.02 660.666 Q286.964 656.06 286.964 647.333 Q286.964 638.583 290.02 633.999 Q293.099 629.393 298.909 629.393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M271.594 467.881 L259.789 486.33 L271.594 486.33 L271.594 467.881 M270.367 463.807 L276.247 463.807 L276.247 486.33 L281.177 486.33 L281.177 490.219 L276.247 490.219 L276.247 498.367 L271.594 498.367 L271.594 490.219 L255.992 490.219 L255.992 485.705 L270.367 463.807 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 466.886 Q295.298 466.886 293.469 470.451 Q291.664 473.992 291.664 481.122 Q291.664 488.228 293.469 491.793 Q295.298 495.335 298.909 495.335 Q302.543 495.335 304.349 491.793 Q306.177 488.228 306.177 481.122 Q306.177 473.992 304.349 470.451 Q302.543 466.886 298.909 466.886 M298.909 463.182 Q304.719 463.182 307.775 467.789 Q310.853 472.372 310.853 481.122 Q310.853 489.849 307.775 494.455 Q304.719 499.038 298.909 499.038 Q293.099 499.038 290.02 494.455 Q286.964 489.849 286.964 481.122 Q286.964 472.372 290.02 467.789 Q293.099 463.182 298.909 463.182 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M258.793 297.596 L277.15 297.596 L277.15 301.531 L263.076 301.531 L263.076 310.004 Q264.094 309.656 265.113 309.494 Q266.131 309.309 267.15 309.309 Q272.937 309.309 276.316 312.48 Q279.696 315.652 279.696 321.068 Q279.696 326.647 276.224 329.749 Q272.752 332.828 266.432 332.828 Q264.256 332.828 261.988 332.457 Q259.742 332.087 257.335 331.346 L257.335 326.647 Q259.418 327.781 261.641 328.337 Q263.863 328.892 266.34 328.892 Q270.344 328.892 272.682 326.786 Q275.02 324.679 275.02 321.068 Q275.02 317.457 272.682 315.351 Q270.344 313.244 266.34 313.244 Q264.465 313.244 262.59 313.661 Q260.738 314.078 258.793 314.957 L258.793 297.596 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 300.675 Q295.298 300.675 293.469 304.24 Q291.664 307.781 291.664 314.911 Q291.664 322.017 293.469 325.582 Q295.298 329.124 298.909 329.124 Q302.543 329.124 304.349 325.582 Q306.177 322.017 306.177 314.911 Q306.177 307.781 304.349 304.24 Q302.543 300.675 298.909 300.675 M298.909 296.971 Q304.719 296.971 307.775 301.578 Q310.853 306.161 310.853 314.911 Q310.853 323.638 307.775 328.244 Q304.719 332.828 298.909 332.828 Q293.099 332.828 290.02 328.244 Q286.964 323.638 286.964 314.911 Q286.964 306.161 290.02 301.578 Q293.099 296.971 298.909 296.971 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip332)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1023.46 400.199,910.95 400.786,807.717 401.372,713.138 401.958,626.637 402.545,665.391 403.131,587.699 403.718,516.923 404.304,452.611 404.891,394.193 405.477,341.44 406.063,293.985 406.65,333.598 407.236,292.031 407.823,391.904 408.409,353.029 408.995,377.114 409.582,344.773 410.168,316.7 410.755,290.788 411.341,268.225 411.927,249.467 412.514,232.911 413.1,219.895 413.687,281.856 414.273,269.085 414.86,289.992 415.446,282.174 416.032,275.999 416.619,297.307 417.205,317.992 417.792,337.631 418.378,355.45 418.964,353.264 419.551,352.681 420.137,371.796 420.724,372.601 421.31,373.838 421.896,405.953 422.483,408.125 423.069,424.513 423.656,428.612 424.242,431.79 424.829,436.077 425.415,452.486 426.001,478.86 426.588,492.772 427.174,507.851 427.761,531.586 428.347,546.835 428.933,568.96 429.52,591.679 430.106,606.855 430.693,635.724 431.279,642.732 431.865,650.918 432.452,671.779 433.038,685.105 433.625,692.205 434.211,699.611 434.798,717.45 435.384,729.698 435.97,746.61 436.557,753.796 437.143,760.859 437.73,776.538 438.316,791.763 438.902,798.096 439.489,812.794 440.075,830.968 440.662,836.746 441.248,853.62 441.835,858.997 442.421,875.392 443.007,887.425 443.594,902.734 444.18,916.969 444.767,927.826 445.353,941.179 445.939,951.752 446.526,958.736 447.112,962.869 447.699,967.386 448.285,974.726 448.871,992.494 449.458,1001.33 450.044,1009.91 450.631,1020.95 451.217,1026.78 451.804,1032.56 452.39,1035.79 452.976,1041.46 453.563,1049.28 454.149,1050.24 454.736,1056.13 455.322,1063.64 455.908,1069 456.495,1078.66 457.081,1083.67 457.668,1090.85 458.254,1093.11 458.84,1097.86 459.427,1098.52 460.013,1105.54 460.6,1115.69 461.186,1117.91 461.773,1123.92 462.359,1128 462.945,1128.3 463.532,1132.12 464.118,1138.08 464.705,1140.16 465.291,1143.82 465.877,1147.74 466.464,1153.09 467.05,1152.66 467.637,1156.14 468.223,1157.59 468.809,1167.63 469.396,1167.06 469.982,1169.98 470.569,1171.05 471.155,1175.64 471.742,1174.84 472.328,1175.73 472.914,1181.85 473.501,1181.18 474.087,1183.87 474.674,1188.21 475.26,1189.24 475.846,1196.54 476.433,1198.81 477.019,1202.32 477.606,1201.03 478.192,1202.92 478.778,1203.31 479.365,1208.67 479.951,1211.94 480.538,1211.73 481.124,1213.33 481.711,1215.06 482.297,1216.93 482.883,1215.48 483.47,1218.84 484.056,1221.92 484.643,1227.6 485.229,1228.85 485.815,1229.55 486.402,1228.98 486.988,1231.77 487.575,1229.86 488.161,1230.81 488.748,1231.72 489.334,1231.14 489.92,1235.18 490.507,1234.43 491.093,1233.93 491.68,1233.57 492.266,1236.02 492.852,1235.16 493.439,1236.17 494.025,1237.29 494.612,1235.05 495.198,1234.44 495.784,1234.01 496.371,1235.33 496.957,1242.26 497.544,1241.61 498.13,1243.6 498.717,1244.45 499.303,1245.02 499.889,1245.44 500.476,1247.49 501.062,1246.46 501.649,1245.74 502.235,1246.42 502.821,1243.88 503.408,1241.49 503.994,1242.4 504.581,1241.89 505.167,1244.32 505.753,1242.26 506.34,1247.17 506.926,1248.98 507.513,1250.53 508.099,1249.48 508.686,1249.87 509.272,1248.81 509.858,1246.63 510.445,1248.5 511.031,1246.37 511.618,1244.26 512.204,1244.84 512.79,1244.24 513.377,1243.81 513.963,1246.17 514.55,1247 515.136,1248.82 515.722,1245.21 516.309,1245.95 516.895,1242.48 517.482,1240.6 518.068,1241.64 518.655,1239.79 519.241,1238.07 519.827,1242.03 520.414,1241.39 521,1243.98 521.587,1243.59 522.173,1242.88 522.759,1242.39 523.346,1243.35 523.932,1242.66 524.519,1242.01 525.105,1242.93 525.691,1240.9 526.278,1239.38 526.864,1237.5 527.451,1235.69 528.037,1236.94 528.624,1237.95 529.21,1238.63 529.796,1238.24 530.383,1238.06 530.969,1240.33 531.556,1242.8 532.142,1242.16 532.728,1241.57 533.315,1242.23 533.901,1241.71 534.488,1239.81 535.074,1237.72 535.661,1238.7 536.247,1241.13 536.833,1242.23 537.42,1242.8 538.006,1239.23 538.593,1242.89 539.179,1242.29 539.765,1240.31 540.352,1241.31 540.938,1242.07 541.525,1238.54 542.111,1238.41 542.697,1236.51 543.284,1236.07 543.87,1237.09 544.457,1236.58 545.043,1233.67 545.63,1237.44 546.216,1238.64 546.802,1238.58 547.389,1238.15 547.975,1239.09 548.562,1238.52 549.148,1238.04 549.734,1240.37 550.321,1239.97 550.907,1245.08 551.494,1245.54 552.08,1243.26 552.666,1242.53 553.253,1240.41 553.839,1238.58 554.426,1239.43 555.012,1239.08 555.599,1239.8 556.185,1239.45 556.771,1241.51 557.358,1239.54 557.944,1239.3 558.531,1239.93 559.117,1242.19 559.703,1242.94 560.29,1242.26 560.876,1241.37 561.463,1239.3 562.049,1241.32 562.635,1241.97 563.222,1241.32 563.808,1237.87 564.395,1237.28 564.981,1237 565.568,1236.57 566.154,1235.72 566.74,1238.02 567.327,1241.21 567.913,1239.17 568.5,1230.44 569.086,1233.12 569.672,1235.6 570.259,1235.23 570.845,1233.49 571.432,1233.15 572.018,1234.37 572.605,1232.54 573.191,1232.22 573.777,1232.02 574.364,1233.09 574.95,1234.46 575.537,1238.47 576.123,1238.17 576.709,1237.91 577.296,1238.53 577.882,1238.97 578.469,1239.29 579.055,1238.7 579.641,1239.81 580.228,1236.49 580.814,1236.24 581.401,1238.69 581.987,1239.41 582.574,1239.82 583.16,1239.27 583.746,1237.55 584.333,1238.16 584.919,1236.16 585.506,1237.21 586.092,1233.86 586.678,1233.25 587.265,1234.21 587.851,1233.43 588.438,1232.83 589.024,1231.15 589.61,1232.19 590.197,1229.42 590.783,1226.29 591.37,1226.19 591.956,1226.42 592.543,1227.55 593.129,1226.01 593.715,1222.99 594.302,1225.83 594.888,1225.96 595.475,1224.4 596.061,1227.13 596.647,1227.05 597.234,1227.12 597.82,1228.41 598.407,1228.06 598.993,1229.37 599.579,1230.69 600.166,1231.53 600.752,1230.88 601.339,1229.09 601.925,1228.94 602.512,1228.8 603.098,1231.16 603.684,1229.23 604.271,1227.49 604.857,1227.35 605.444,1227.16 606.03,1222.79 606.616,1220.31 607.203,1224.48 607.789,1225.72 608.376,1223.07 608.962,1223.09 609.548,1223.04 610.135,1222.83 610.721,1223.07 611.308,1221.95 611.894,1219.38 612.481,1223.7 613.067,1222.21 613.653,1220.89 614.24,1220.79 614.826,1221 615.413,1219.89 615.999,1220.45 616.585,1220.29 617.172,1221.74 617.758,1221.94 618.345,1219.06 618.931,1222.12 619.518,1221.16 620.104,1223.96 620.69,1225.31 621.277,1225.37 621.863,1225.22 622.45,1222.28 623.036,1223.56 623.622,1225.09 624.209,1226.46 624.795,1224.91 625.382,1223.35 625.968,1223.48 626.554,1222 627.141,1220.81 627.727,1220.83 628.314,1222.52 628.9,1224.02 629.487,1225.33 630.073,1225.14 630.659,1225.09 631.246,1226.26 631.832,1228.51 632.419,1229.35 633.005,1228.99 633.591,1227.23 634.178,1228.44 634.764,1226.86 635.351,1229.4 635.937,1232.85 636.523,1232.22 637.11,1234.17 637.696,1232.35 638.283,1232.92 638.869,1229.62 639.456,1231.84 640.042,1232.45 640.628,1233.19 641.215,1232.74 641.801,1234.55 642.388,1232.73 642.974,1228.01 643.56,1230.47 644.147,1232.48 644.733,1231.9 645.32,1233.85 645.906,1230.38 646.492,1229.71 647.079,1230.53 647.665,1230.27 648.252,1227.28 648.838,1221.56 649.425,1221.45 650.011,1222.49 650.597,1223.48 651.184,1224.56 651.77,1224.36 652.357,1225.37 652.943,1225.1 653.529,1225.92 654.116,1224.41 654.702,1224.06 655.289,1222.4 655.875,1225.19 656.462,1224.75 657.048,1223.19 657.634,1221.49 658.221,1220.21 658.807,1220.27 659.394,1221.8 659.98,1217.76 660.566,1218.04 661.153,1216.89 661.739,1215.55 662.326,1220.16 662.912,1218.97 663.498,1218.87 664.085,1216.18 664.671,1217.59 665.258,1217.78 665.844,1215.2 666.431,1217.98 667.017,1218.22 667.603,1217.37 668.19,1217.36 668.776,1216.01 669.363,1216.29 669.949,1215.3 670.535,1215.66 671.122,1218.38 671.708,1217.06 672.295,1218.6 672.881,1218.81 673.467,1218.83 674.054,1217.37 674.64,1217.87 675.227,1218.06 675.813,1215.2 676.4,1217.85 676.986,1220.57 677.572,1219.09 678.159,1219.21 678.745,1219.65 679.332,1220.84 679.918,1220.98 680.504,1218.27 681.091,1214.26 681.677,1213.03 682.264,1210.57 682.85,1213.71 683.436,1213.9 684.023,1213.91 684.609,1215.61 685.196,1217.14 685.782,1216.02 686.369,1217.63 686.955,1216.49 687.541,1216.57 688.128,1215.53 688.714,1218.3 689.301,1221.13 689.887,1221.07 690.473,1223.87 691.06,1223.63 691.646,1223.35 692.233,1220.44 692.819,1217.42 693.405,1217.67 693.992,1219.01 694.578,1219.01 695.165,1219.31 695.751,1216.72 696.338,1221.07 696.924,1222.2 697.51,1221.9 698.097,1217.53 698.683,1217.59 699.27,1217.5 699.856,1217.58 700.442,1217.78 701.029,1219.1 701.615,1219.11 702.202,1217.71 702.788,1216.37 703.375,1213.88 703.961,1214.31 704.547,1217.15 705.134,1218.45 705.72,1218.66 706.307,1217.03 706.893,1221.01 707.479,1223.76 708.066,1223.46 708.652,1226 709.239,1225.22 709.825,1226.19 710.411,1223.17 710.998,1224.48 711.584,1226.7 712.171,1224.75 712.757,1223.25 713.344,1221.61 713.93,1221.27 714.516,1219.74 715.103,1222.23 715.689,1222.14 716.276,1222.08 716.862,1223.14 717.448,1220.25 718.035,1218.69 718.621,1217.32 719.208,1224.15 719.794,1223.86 720.38,1226.19 720.967,1224.08 721.553,1226.35 722.14,1226 722.726,1226.74 723.313,1230.1 723.899,1229.22 724.485,1227.16 725.072,1223.84 725.658,1221.92 726.245,1225.64 726.831,1224 727.417,1224.86 728.004,1224.38 728.59,1225.32 729.177,1222.14 729.763,1221.88 730.349,1220.52 730.936,1218.71 731.522,1221.64 732.109,1220.23 732.695,1220.21 733.282,1222.71 733.868,1221.33 734.454,1218.23 735.041,1215.71 735.627,1215.78 736.214,1215.77 736.8,1219.96 737.386,1219.78 737.973,1217.93 738.559,1219.32 739.146,1217.66 739.732,1217.64 740.318,1221.48 740.905,1220.02 741.491,1219.91 742.078,1215.93 742.664,1214.11 743.251,1214.12 743.837,1214.46 744.423,1216.34 745.01,1217.6 745.596,1217.75 746.183,1219.28 746.769,1216.46 747.355,1215.22 747.942,1212.37 748.528,1214.24 749.115,1212.82 749.701,1214.49 750.288,1214.63 750.874,1213.42 751.46,1213.71 752.047,1212.72 752.633,1216.58 753.22,1216.67 753.806,1218.01 754.392,1219.28 754.979,1217.92 755.565,1219.34 756.152,1222.3 756.738,1219.33 757.324,1220.74 757.911,1222.1 758.497,1224.67 759.084,1225.55 759.67,1224.79 760.257,1227.19 760.843,1229.55 761.429,1227.29 762.016,1226.79 762.602,1227.64 763.189,1225.54 763.775,1222.67 764.361,1222.32 764.948,1221.83 765.534,1218.88 766.121,1215.87 766.707,1213.25 767.293,1214.66 767.88,1210.68 768.466,1209.35 769.053,1205.5 769.639,1205.85 770.226,1209.02 770.812,1210.9 771.398,1212.39 771.985,1211 772.571,1211.56 773.158,1211.86 773.744,1212.06 774.33,1212.19 774.917,1211.45 775.503,1214.45 776.09,1213.46 776.676,1217.83 777.262,1219.03 777.849,1216.03 778.435,1216.27 779.022,1214.79 779.608,1217.55 780.195,1220.33 780.781,1223.01 781.367,1222.57 781.954,1220.38 782.54,1221.52 783.127,1219.93 783.713,1218.4 784.299,1218.41 784.886,1222.51 785.472,1220.98 786.059,1220.71 786.645,1218.92 787.232,1219.84 787.818,1217.9 788.404,1219.18 788.991,1217.66 789.577,1218.88 790.164,1217.19 790.75,1218.22 791.336,1219.05 791.923,1216.29 792.509,1217.48 793.096,1218.55 793.682,1221.06 794.268,1220.68 794.855,1220.18 795.441,1218.26 796.028,1218.16 796.614,1219.18 797.201,1217.52 797.787,1214.36 798.373,1211.63 798.96,1213.22 799.546,1216 800.133,1214.39 800.719,1214.6 801.305,1213.08 801.892,1213.37 802.478,1213.16 803.065,1212.05 803.651,1209.91 804.237,1207.44 804.824,1209.17 805.41,1209.65 805.997,1208.77 806.583,1209.18 807.17,1209.31 807.756,1208.46 808.342,1210.48 808.929,1213.33 809.515,1213.6 810.102,1217.74 810.688,1218.79 811.274,1219.92 811.861,1222.57 812.447,1219.6 813.034,1223.71 813.62,1224.6 814.206,1222.94 814.793,1222.72 815.379,1223.56 815.966,1223.13 816.552,1221.45 817.139,1220 817.725,1218.61 818.311,1219.95 818.898,1220.88 819.484,1220.79 820.071,1219.23 820.657,1217.47 821.243,1219.88 821.83,1219.43 822.416,1217.92 823.003,1216.6 823.589,1215.21 824.175,1215.63 824.762,1215.59 825.348,1215.57 825.935,1214.28 826.521,1211.7 827.108,1210.22 827.694,1210.73 828.28,1213.82 828.867,1213.57 829.453,1217.86 830.04,1219.14 830.626,1217.4 831.212,1218.84 831.799,1218.69 832.385,1218.5 832.972,1218.52 833.558,1218.76 834.145,1218.55 834.731,1220.81 835.317,1220.56 835.904,1220.07 836.49,1221.17 837.077,1219.68 837.663,1219.53 838.249,1220.69 838.836,1218.91 839.422,1221.15 840.009,1221.02 840.595,1221.71 841.181,1221.29 841.768,1219.34 842.354,1217.64 842.941,1218.83 843.527,1218.65 844.114,1223.79 844.7,1221.84 845.286,1225.65 845.873,1226.34 846.459,1225.94 847.046,1223.97 847.632,1222.03 848.218,1220.08 848.805,1218.27 849.391,1219.32 849.978,1220.38 850.564,1222.79 851.15,1220.93 851.737,1221.97 852.323,1220.37 852.91,1220.1 853.496,1220.93 854.083,1220.88 854.669,1220.49 855.255,1221.46 855.842,1221.01 856.428,1222.02 857.015,1224.17 857.601,1220.89 858.187,1221.91 858.774,1221.43 859.36,1220.87 859.947,1216.48 860.533,1214.98 861.119,1214.85 861.706,1217.4 862.292,1216 862.879,1216.14 863.465,1216.02 864.052,1217.1 864.638,1218.7 865.224,1216.9 865.811,1216.87 866.397,1217.83 866.984,1217.57 867.57,1218.5 868.156,1216.75 868.743,1215.35 869.329,1215.81 869.916,1215.74 870.502,1218.06 871.089,1216.45 871.675,1216.1 872.261,1215.77 872.848,1216.8 873.434,1212.69 874.021,1210.19 874.607,1210.19 875.193,1207.6 875.78,1210.62 876.366,1212.73 876.953,1211.49 877.539,1211.76 878.125,1210.67 878.712,1213.67 879.298,1214.79 879.885,1212.34 880.471,1212.44 881.058,1209.52 881.644,1210.78 882.23,1209.67 882.817,1208.42 883.403,1208.48 883.99,1206.25 884.576,1209.34 885.162,1208.32 885.749,1208.43 886.335,1210.09 886.922,1209.32 887.508,1211.2 888.094,1208.95 888.681,1209.56 889.267,1212.89 889.854,1215.82 890.44,1216.93 891.027,1215.42 891.613,1215.73 892.199,1214.54 892.786,1211.84 893.372,1214.75 893.959,1216.16 894.545,1216.21 895.131,1213.64 895.718,1213.55 896.304,1213.43 896.891,1213.75 897.477,1213.56 898.063,1215.07 898.65,1215.13 899.236,1213.79 899.823,1211.01 900.409,1212.4 900.996,1208.64 901.582,1210.2 902.168,1207.86 902.755,1209.44 903.341,1209.69 903.928,1209.68 904.514,1209.85 905.1,1218.23 905.687,1219.32 906.273,1220.14 906.86,1217 907.446,1215.53 908.032,1216.75 908.619,1216.68 909.205,1217.81 909.792,1217.65 910.378,1216.29 910.965,1212.07 911.551,1211.27 912.137,1212.58 912.724,1211.45 913.31,1213.14 913.897,1211.8 914.483,1211.8 915.069,1212.12 915.656,1213.49 916.242,1212.21 916.829,1212.37 917.415,1213.84 918.002,1212.56 918.588,1214.11 919.174,1212.95 919.761,1211.28 920.347,1211.26 920.934,1211.3 921.52,1208.64 922.106,1207.6 922.693,1208.09 923.279,1206.67 923.866,1210.03 924.452,1211.65 925.038,1207.44 925.625,1207.8 926.211,1206.63 926.798,1206.84 927.384,1206.94 927.971,1208.67 928.557,1211.9 929.143,1209.45 929.73,1209.93 930.316,1210.32 930.903,1209.16 931.489,1210.67 932.075,1212.47 932.662,1213.74 933.248,1213.5 933.835,1213.44 934.421,1213.45 935.007,1213.64 935.594,1214.99 936.18,1216.12 936.767,1216.14 937.353,1217.44 937.94,1214.58 938.526,1213.23 939.112,1213.08 939.699,1213.17 940.285,1213.16 940.872,1217.41 941.458,1214.23 942.044,1216.86 942.631,1215.64 943.217,1216.94 943.804,1219.48 944.39,1220.64 944.976,1220.41 945.563,1217.54 946.149,1218.72 946.736,1217.05 947.322,1214.18 947.909,1212.89 948.495,1211.51 949.081,1214.34 949.668,1216.79 950.254,1214.14 950.841,1214.2 951.427,1214.33 952.013,1215.7 952.6,1218.33 953.186,1215.33 953.773,1213.69 954.359,1212.41 954.945,1211.55 955.532,1212.95 956.118,1210.09 956.705,1209.06 957.291,1209.22 957.878,1209.34 958.464,1206.76 959.05,1202.91 959.637,1202.28 960.223,1201.77 960.81,1202.37 961.396,1203.27 961.982,1205.18 962.569,1208.37 963.155,1207.16 963.742,1204.76 964.328,1205.16 964.915,1205.42 965.501,1207.57 966.087,1207.89 966.674,1206.99 967.26,1207.53 967.847,1208.3 968.433,1208.81 969.019,1208.01 969.606,1209.32 970.192,1210.07 970.779,1207.84 971.365,1206.99 971.951,1207.4 972.538,1204.72 973.124,1206.43 973.711,1207.2 974.297,1208.7 974.884,1211.68 975.47,1213.05 976.056,1211.66 976.643,1211.85 977.229,1213.41 977.816,1214.66 978.402,1217.35 978.988,1216.93 979.575,1222.09 980.161,1219.06 980.748,1220.16 981.334,1223.66 981.92,1223.05 982.507,1222.92 983.093,1222.31 983.68,1221.74 984.266,1222.63 984.853,1226.03 985.439,1225.53 986.025,1223.74 986.612,1221.9 987.198,1219.93 987.785,1219.5 988.371,1219.34 988.957,1218.74 989.544,1219.89 990.13,1219.84 990.717,1220.78 991.303,1219.03 991.889,1215.83 992.476,1214.49 993.062,1217.11 993.649,1216.92 994.235,1216.63 994.822,1219.18 995.408,1217.52 995.994,1221.53 996.581,1221.1 997.167,1221.86 997.754,1221.76 998.34,1221.48 998.926,1222.52 999.513,1221.94 1000.1,1221.37 1000.69,1220.99 1001.27,1219.13 1001.86,1219.04 1002.44,1217.46 1003.03,1218.63 1003.62,1218.39 1004.2,1216.52 1004.79,1215.13 1005.38,1211.2 1005.96,1214.02 1006.55,1215.43 1007.14,1215.29 1007.72,1212.42 1008.31,1213.65 1008.9,1213.8 1009.48,1212.35 1010.07,1211.1 1010.65,1209.66 1011.24,1205.82 1011.83,1208.99 1012.41,1212.03 1013,1209.41 1013.59,1209.35 1014.17,1210.63 1014.76,1210.75 1015.35,1210.53 1015.93,1210.76 1016.52,1213.68 1017.11,1213.63 1017.69,1213.68 1018.28,1214.94 1018.86,1216.26 1019.45,1214.82 1020.04,1217.56 1020.62,1217.15 1021.21,1217.04 1021.8,1215.53 1022.38,1215.32 1022.97,1209.8 1023.56,1209.76 1024.14,1209.81 1024.73,1208.8 1025.32,1211.71 1025.9,1211.57 1026.49,1210.01 1027.07,1212.86 1027.66,1211.27 1028.25,1209.83 1028.83,1210.15 1029.42,1211.82 1030.01,1211.76 1030.59,1213.16 1031.18,1214.7 1031.77,1212.14 1032.35,1212.34 1032.94,1213.63 1033.52,1215.09 1034.11,1215.09 1034.7,1217.86 1035.28,1218.72 1035.87,1219.62 1036.46,1219.29 1037.04,1220.58 1037.63,1216.02 1038.22,1215.79 1038.8,1215.52 1039.39,1217.87 1039.98,1217.83 1040.56,1216.39 1041.15,1218.75 1041.73,1216.88 1042.32,1218.1 1042.91,1213.57 1043.49,1212.05 1044.08,1213.4 1044.67,1215.93 1045.25,1212.94 1045.84,1211.43 1046.43,1211.78 1047.01,1209.11 1047.6,1207.89 1048.19,1209.56 1048.77,1209.52 1049.36,1208.11 1049.94,1209.51 1050.53,1212.62 1051.12,1211.33 1051.7,1208.54 1052.29,1209.89 1052.88,1210.17 1053.46,1210.38 1054.05,1210.63 1054.64,1213.19 1055.22,1210.59 1055.81,1206.9 1056.39,1204.79 1056.98,1206.64 1057.57,1207.02 1058.15,1207.25 1058.74,1210.19 1059.33,1210.34 1059.91,1207.79 1060.5,1205.26 1061.09,1203.01 1061.67,1204.85 1062.26,1207.93 1062.85,1209.66 1063.43,1212.59 1064.02,1212.59 1064.6,1213.94 1065.19,1215.45 1065.78,1215.22 1066.36,1213.97 1066.95,1215.18 1067.54,1217.76 1068.12,1216.44 1068.71,1216.04 1069.3,1216.6 1069.88,1215.28 1070.47,1215.08 1071.06,1216.54 1071.64,1216.4 1072.23,1217.83 1072.81,1217.73 1073.4,1216.21 1073.99,1215.98 1074.57,1218.56 1075.16,1221.02 1075.75,1222 1076.33,1215.84 1076.92,1214.17 1077.51,1216.49 1078.09,1213.59 1078.68,1214.77 1079.26,1216.17 1079.85,1216.22 1080.44,1217.46 1081.02,1218.66 1081.61,1217.13 1082.2,1215.64 1082.78,1214.16 1083.37,1214.18 1083.96,1214.19 1084.54,1213.97 1085.13,1212.37 1085.72,1212.47 1086.3,1211.14 1086.89,1211.07 1087.47,1209.96 1088.06,1210.42 1088.65,1207.84 1089.23,1206.43 1089.82,1205.41 1090.41,1206.01 1090.99,1208.02 1091.58,1202.88 1092.17,1203.44 1092.75,1202.88 1093.34,1206.24 1093.93,1208.3 1094.51,1208.72 1095.1,1210.39 1095.68,1209.15 1096.27,1207.96 1096.86,1205.39 1097.44,1208.29 1098.03,1207.18 1098.62,1205.81 1099.2,1204.97 1099.79,1205.06 1100.38,1206.81 1100.96,1208.44 1101.55,1210.09 1102.14,1213.06 1102.72,1207.33 1103.31,1207.64 1103.89,1209.21 1104.48,1209.61 1105.07,1210.08 1105.65,1210.03 1106.24,1209 1106.83,1209.09 1107.41,1209.42 1108,1210.79 1108.59,1212.11 1109.17,1210.69 1109.76,1209.35 1110.34,1212.22 1110.93,1213.45 1111.52,1213.41 1112.1,1211.78 1112.69,1216.01 1113.28,1216.94 1113.86,1215.59 1114.45,1215.45 1115.04,1215.18 1115.62,1211.36 1116.21,1211.33 1116.8,1211.88 1117.38,1212.21 1117.97,1210.97 1118.55,1212.61 1119.14,1211.5 1119.73,1214.36 1120.31,1214.54 1120.9,1214.16 1121.49,1215.34 1122.07,1213.88 1122.66,1212.52 1123.25,1211.05 1123.83,1212.49 1124.42,1212.41 1125.01,1212.48 1125.59,1212.44 1126.18,1209.41 1126.76,1209.69 1127.35,1212.45 1127.94,1212.53 1128.52,1212.28 1129.11,1212.48 1129.7,1211.31 1130.28,1212.86 1130.87,1212.72 1131.46,1210.06 1132.04,1211.63 1132.63,1213.01 1133.21,1210.21 1133.8,1209.08 1134.39,1208.12 1134.97,1208.32 1135.56,1209.98 1136.15,1208.87 1136.73,1210.59 1137.32,1209.02 1137.91,1208.02 1138.49,1205.6 1139.08,1205.84 1139.67,1206.07 1140.25,1209.08 1140.84,1211.78 1141.42,1213.28 1142.01,1211.79 1142.6,1213.3 1143.18,1214.79 1143.77,1215.94 1144.36,1215.82 1144.94,1215.84 1145.53,1214.59 1146.12,1214.63 1146.7,1213.35 1147.29,1216.37 1147.88,1217.55 1148.46,1217.3 1149.05,1215.74 1149.63,1214.48 1150.22,1213.2 1150.81,1214.84 1151.39,1214.49 1151.98,1212.96 1152.57,1214.34 1153.15,1214.34 1153.74,1213.91 1154.33,1212.5 1154.91,1213.88 1155.5,1216.68 1156.09,1215.2 1156.67,1213.62 1157.26,1213.58 1157.84,1213.75 1158.43,1218.94 1159.02,1218.63 1159.6,1219.63 1160.19,1220.47 1160.78,1218.39 1161.36,1223.27 1161.95,1222.76 1162.54,1224.81 1163.12,1221.52 1163.71,1218.6 1164.29,1222.41 1164.88,1221.84 1165.47,1222.52 1166.05,1219.17 1166.64,1220.33 1167.23,1218.6 1167.81,1218.18 1168.4,1215.15 1168.99,1218.93 1169.57,1217.55 1170.16,1217.31 1170.75,1218.22 1171.33,1216.78 1171.92,1217.74 1172.5,1217.5 1173.09,1215.65 1173.68,1215.78 1174.26,1216.92 1174.85,1215.54 1175.44,1213.82 1176.02,1216.45 1176.61,1216.17 1177.2,1218.74 1177.78,1218.43 1178.37,1216.95 1178.96,1215.37 1179.54,1216.39 1180.13,1214.61 1180.71,1215.79 1181.3,1219.85 1181.89,1215.68 1182.47,1215.67 1183.06,1212.61 1183.65,1212.31 1184.23,1212.12 1184.82,1212.01 1185.41,1211.91 1185.99,1209.31 1186.58,1209.23 1187.16,1210.81 1187.75,1209.43 1188.34,1212.65 1188.92,1211.09 1189.51,1205.57 1190.1,1203.22 1190.68,1206.36 1191.27,1206.56 1191.86,1204.13 1192.44,1203.25 1193.03,1203.63 1193.62,1206.43 1194.2,1202.67 1194.79,1206.16 1195.37,1208.17 1195.96,1208.37 1196.55,1209.83 1197.13,1211.35 1197.72,1211.42 1198.31,1211.45 1198.89,1209.95 1199.48,1213.73 1200.07,1213.78 1200.65,1213.57 1201.24,1210.92 1201.83,1208.47 1202.41,1209.85 1203,1207.49 1203.58,1207.81 1204.17,1207.79 1204.76,1207.12 1205.34,1208.96 1205.93,1207.98 1206.52,1208.13 1207.1,1207.1 1207.69,1214.11 1208.28,1212.57 1208.86,1209.91 1209.45,1211.51 1210.03,1210.08 1210.62,1213.05 1211.21,1214.25 1211.79,1213.11 1212.38,1215.87 1212.97,1215.88 1213.55,1210.6 1214.14,1213.32 1214.73,1214.82 1215.31,1217.38 1215.9,1215.99 1216.49,1215.61 1217.07,1216.5 1217.66,1217.77 1218.24,1219 1218.83,1215.63 1219.42,1215.77 1220,1216.9 1220.59,1216.83 1221.18,1212.67 1221.76,1214.09 1222.35,1215.22 1222.94,1212.62 1223.52,1214.17 1224.11,1214.15 1224.7,1213.83 1225.28,1212.47 1225.87,1213.62 1226.45,1212.26 1227.04,1210.96 1227.63,1212.35 1228.21,1213.62 1228.8,1210.85 1229.39,1211.05 1229.97,1209.61 1230.56,1211.3 1231.15,1214.29 1231.73,1213.07 1232.32,1211.89 1232.91,1210.73 1233.49,1210.71 1234.08,1212.09 1234.66,1216.24 1235.25,1216.02 1235.84,1218.49 1236.42,1216.75 1237.01,1215.18 1237.6,1215.06 1238.18,1216.09 1238.77,1215.86 1239.36,1214.27 1239.94,1211.33 1240.53,1211.43 1241.11,1210.22 1241.7,1210.27 1242.29,1211.65 1242.87,1212.85 1243.46,1212.95 1244.05,1217.06 1244.63,1216.73 1245.22,1219.2 1245.81,1218.73 1246.39,1215.69 1246.98,1215.41 1247.57,1215.09 1248.15,1212.3 1248.74,1212.22 1249.32,1210.87 1249.91,1206.93 1250.5,1206.02 1251.08,1207.71 1251.67,1206.69 1252.26,1208.17 1252.84,1209.55 1253.43,1210.87 1254.02,1210.55 1254.6,1214.95 1255.19,1213.51 1255.78,1210.74 1256.36,1212.1 1256.95,1210.84 1257.53,1210.92 1258.12,1212.32 1258.71,1212.71 1259.29,1214 1259.88,1214.16 1260.47,1214.14 1261.05,1214.3 1261.64,1215.72 1262.23,1218.21 1262.81,1215.17 1263.4,1211.09 1263.98,1209.78 1264.57,1211.4 1265.16,1211.34 1265.74,1209.84 1266.33,1208.72 1266.92,1207.82 1267.5,1209.26 1268.09,1206.98 1268.68,1208.66 1269.26,1207.76 1269.85,1208.16 1270.44,1209.91 1271.02,1211.31 1271.61,1214.28 1272.19,1214.33 1272.78,1214.4 1273.37,1215.72 1273.95,1216.98 1274.54,1215.23 1275.13,1215.05 1275.71,1215.11 1276.3,1215.1 1276.89,1215.14 1277.47,1214.98 1278.06,1213.52 1278.65,1213.46 1279.23,1214.97 1279.82,1216.49 1280.4,1216.25 1280.99,1214.67 1281.58,1214.63 1282.16,1214.79 1282.75,1214.49 1283.34,1215.98 1283.92,1219.8 1284.51,1218.02 1285.1,1220.34 1285.68,1220.1 1286.27,1222.43 1286.86,1220.82 1287.44,1219.04 1288.03,1217.35 1288.61,1218.39 1289.2,1214.16 1289.79,1214.1 1290.37,1212.66 1290.96,1213.78 1291.55,1214.91 1292.13,1217.19 1292.72,1218.48 1293.31,1215.33 1293.89,1214.01 1294.48,1211.35 1295.06,1211.21 1295.65,1212.43 1296.24,1215.17 1296.82,1215.1 1297.41,1213.52 1298,1217.54 1298.58,1214.83 1299.17,1214.76 1299.76,1215.04 1300.34,1213.39 1300.93,1212.05 1301.52,1213.54 1302.1,1213.43 1302.69,1212.2 1303.27,1214.9 1303.86,1216.21 1304.45,1213.44 1305.03,1212.3 1305.62,1214.77 1306.21,1214.4 1306.79,1215.38 1307.38,1215.09 1307.97,1216.33 1308.55,1211.93 1309.14,1213.08 1309.73,1211.68 1310.31,1210.28 1310.9,1209.32 1311.48,1212.28 1312.07,1208.5 1312.66,1208.59 1313.24,1208.74 1313.83,1210.28 1314.42,1209.04 1315,1210.49 1315.59,1210.65 1316.18,1209.4 1316.76,1209.62 1317.35,1209.4 1317.93,1210.82 1318.52,1212.4 1319.11,1212.25 1319.69,1214.9 1320.28,1215.76 1320.87,1218.02 1321.45,1220.32 1322.04,1218.41 1322.63,1217.93 1323.21,1216.53 1323.8,1217.63 1324.39,1217.49 1324.97,1215.9 1325.56,1216.94 1326.14,1213.97 1326.73,1214.13 1327.32,1215.22 1327.9,1212.3 1328.49,1214.07 1329.08,1211.11 1329.66,1215.27 1330.25,1217.8 1330.84,1216.23 1331.42,1213.41 1332.01,1213.46 1332.6,1213.74 1333.18,1209.53 1333.77,1210.72 1334.35,1206.86 1334.94,1207.27 1335.53,1209.07 1336.11,1210.86 1336.7,1208.04 1337.29,1206.76 1337.87,1207.17 1338.46,1205 1339.05,1205.25 1339.63,1209.58 1340.22,1212.31 1340.8,1216.37 1341.39,1215.21 1341.98,1216.45 1342.56,1216.18 1343.15,1214.47 1343.74,1217.28 1344.32,1215.67 1344.91,1214.29 1345.5,1214.17 1346.08,1215.3 1346.67,1212.44 1347.26,1213.81 1347.84,1213.69 1348.43,1215.23 1349.01,1216.39 1349.6,1217.53 1350.19,1218.7 1350.77,1218.44 1351.36,1219.06 1351.95,1216.15 1352.53,1214.57 1353.12,1213.18 1353.71,1212.82 1354.29,1210.13 1354.88,1211.7 1355.47,1211.77 1356.05,1209.28 1356.64,1211.16 1357.22,1211.48 1357.81,1211.15 1358.4,1208.68 1358.98,1209.14 1359.57,1209.24 1360.16,1212.09 1360.74,1209.04 1361.33,1205.05 1361.92,1204.35 1362.5,1207.59 1363.09,1207.97 1363.68,1209.39 1364.26,1210.96 1364.85,1212.12 1365.43,1212.2 1366.02,1213.53 1366.61,1214.68 1367.19,1214.64 1367.78,1214.52 1368.37,1212.98 1368.95,1212.91 1369.54,1214.23 1370.13,1214 1370.71,1214.01 1371.3,1214.2 1371.88,1215.22 1372.47,1213.92 1373.06,1216.67 1373.64,1220.64 1374.23,1220.32 1374.82,1220.06 1375.4,1219.74 1375.99,1219.25 1376.58,1218.94 1377.16,1218.73 1377.75,1215.78 1378.34,1215.58 1378.92,1215.62 1379.51,1215.77 1380.09,1216.93 1380.68,1217.7 1381.27,1220.11 1381.85,1219.71 1382.44,1219.3 1383.03,1216.64 1383.61,1216.47 1384.2,1214.96 1384.79,1216.22 1385.37,1215.97 1385.96,1217.36 1386.55,1217.11 1387.13,1214.16 1387.72,1216.93 1388.3,1217.9 1388.89,1215.95 1389.48,1215.88 1390.06,1216.96 1390.65,1219.23 1391.24,1217.6 1391.82,1216.02 1392.41,1213.06 1393,1210.32 1393.58,1211.82 1394.17,1211.88 1394.75,1213.16 1395.34,1210.52 1395.93,1209.18 1396.51,1206.86 1397.1,1205.7 1397.69,1203.19 1398.27,1205.37 1398.86,1206.2 1399.45,1206.37 1400.03,1207.92 1400.62,1208.61 1401.21,1207.54 1401.79,1209.25 1402.38,1209.57 1402.96,1206.96 1403.55,1210.01 1404.14,1211.82 1404.72,1211.94 1405.31,1212.06 1405.9,1211.87 1406.48,1211.92 1407.07,1212.41 1407.66,1211.09 1408.24,1209.97 1408.83,1211.57 1409.42,1208.66 1410,1208.65 1410.59,1207.5 1411.17,1207.53 1411.76,1207.74 1412.35,1209.38 1412.93,1211.1 1413.52,1211.23 1414.11,1210.19 1414.69,1213.18 1415.28,1213.23 1415.87,1214.89 1416.45,1215.96 1417.04,1215.81 1417.63,1215.82 1418.21,1217.44 1418.8,1217.35 1419.38,1218.27 1419.97,1218.1 1420.56,1217.73 1421.14,1213.27 1421.73,1215.95 1422.32,1214.62 1422.9,1215.71 1423.49,1219.58 1424.08,1221.91 1424.66,1219.83 1425.25,1218.03 1425.83,1211.04 1426.42,1211.26 1427.01,1215.43 1427.59,1215.1 1428.18,1212.4 1428.77,1208.43 1429.35,1208.79 1429.94,1208.58 1430.53,1206.14 1431.11,1205.08 1431.7,1205.55 1432.29,1208.59 1432.87,1208.65 1433.46,1209.18 1434.04,1209.49 1434.63,1209.9 1435.22,1211.3 1435.8,1212.93 1436.39,1212.93 1436.98,1212.95 1437.56,1211.56 1438.15,1211.46 1438.74,1213.18 1439.32,1214.82 1439.91,1214.88 1440.5,1214.63 1441.08,1213.27 1441.67,1211.32 1442.25,1211.4 1442.84,1211.62 1443.43,1207.51 1444.01,1209.05 1444.6,1207.84 1445.19,1205.4 1445.77,1205.93 1446.36,1204.91 1446.95,1204.27 1447.53,1204.84 1448.12,1208.3 1448.7,1210.03 1449.29,1210.31 1449.88,1208.97 1450.46,1207.58 1451.05,1209.42 1451.64,1210.97 1452.22,1208.49 1452.81,1210.14 1453.4,1211.7 1453.98,1211.94 1454.57,1214.87 1455.16,1212.31 1455.74,1211.14 1456.33,1212.81 1456.91,1213.08 1457.5,1214.23 1458.09,1213.92 1458.67,1215.19 1459.26,1214.97 1459.85,1210.95 1460.43,1209.6 1461.02,1209.84 1461.61,1211.36 1462.19,1211.32 1462.78,1210.14 1463.37,1207.72 1463.95,1208.05 1464.54,1208.14 1465.12,1208.09 1465.71,1206.89 1466.3,1204.68 1466.88,1204.1 1467.47,1208.75 1468.06,1206.17 1468.64,1208.08 1469.23,1208.44 1469.82,1208.5 1470.4,1208.88 1470.99,1209.02 1471.57,1209.02 1472.16,1209.11 1472.75,1208.04 1473.33,1205.69 1473.92,1206.04 1474.51,1206.24 1475.09,1204.91 1475.68,1208.15 1476.27,1208.44 1476.85,1205.86 1477.44,1206.22 1478.03,1207.97 1478.61,1209.52 1479.2,1211.24 1479.78,1209.98 1480.37,1213.97 1480.96,1212.75 1481.54,1212.65 1482.13,1215.28 1482.72,1213.65 1483.3,1212.33 1483.89,1213.63 1484.48,1216.46 1485.06,1214.86 1485.65,1213.26 1486.24,1213.46 1486.82,1216.13 1487.41,1217.33 1487.99,1215.44 1488.58,1215.36 1489.17,1213.87 1489.75,1213.73 1490.34,1214.93 1490.93,1213.34 1491.51,1213.65 1492.1,1213.52 1492.69,1212.02 1493.27,1212.15 1493.86,1210.86 1494.45,1210.94 1495.03,1212.19 1495.62,1212.46 1496.2,1212.73 1496.79,1212.68 1497.38,1212.95 1497.96,1214.47 1498.55,1214.52 1499.14,1213.32 1499.72,1213.19 1500.31,1214.66 1500.9,1215.85 1501.48,1217.15 1502.07,1220.71 1502.65,1220.14 1503.24,1219.72 1503.83,1219.56 1504.41,1217.86 1505,1218.97 1505.59,1219.96 1506.17,1218.1 1506.76,1217.51 1507.35,1218.66 1507.93,1218.37 1508.52,1212.91 1509.11,1212.95 1509.69,1210.53 1510.28,1211.83 1510.86,1211.67 1511.45,1211.49 1512.04,1208.76 1512.62,1209.17 1513.21,1208.07 1513.8,1208.62 1514.38,1210.52 1514.97,1209.24 1515.56,1209.38 1516.14,1210.65 1516.73,1209.32 1517.32,1209.59 1517.9,1209.59 1518.49,1208.33 1519.07,1211.09 1519.66,1211.23 1520.25,1210.11 1520.83,1210.4 1521.42,1213 1522.01,1214.29 1522.59,1214.17 1523.18,1212.8 1523.77,1208.67 1524.35,1208.67 1524.94,1210.6 1525.52,1213.34 1526.11,1214.72 1526.7,1213.47 1527.28,1213.6 1527.87,1213.41 1528.46,1214.81 1529.04,1214.94 1529.63,1213.73 1530.22,1213.59 1530.8,1210.67 1531.39,1210.83 1531.98,1214.89 1532.56,1214.95 1533.15,1215.97 1533.73,1217.43 1534.32,1215.98 1534.91,1217.02 1535.49,1216.82 1536.08,1216.61 1536.67,1217.7 1537.25,1217.22 1537.84,1217.19 1538.43,1217 1539.01,1216.44 1539.6,1219.1 1540.19,1217.76 1540.77,1217.65 1541.36,1218.86 1541.94,1218.54 1542.53,1222.15 1543.12,1222.85 1543.7,1222.46 1544.29,1223.43 1544.88,1221.41 1545.46,1218.18 1546.05,1215.41 1546.64,1215.11 1547.22,1213.81 1547.81,1212.23 1548.4,1212.54 1548.98,1212.57 1549.57,1212.4 1550.15,1212.08 1550.74,1210.77 1551.33,1212.32 1551.91,1212.33 1552.5,1213.65 1553.09,1213.75 1553.67,1214.78 1554.26,1214.58 1554.85,1214.5 1555.43,1214.17 1556.02,1215.48 1556.6,1216.85 1557.19,1216.57 1557.78,1216.14 1558.36,1214.57 1558.95,1215.88 1559.54,1215.66 1560.12,1215.55 1560.71,1216.56 1561.3,1215.03 1561.88,1216.38 1562.47,1212.39 1563.06,1213.66 1563.64,1213.46 1564.23,1213.36 1564.81,1213.31 1565.4,1214.64 1565.99,1217.31 1566.57,1218.22 1567.16,1219.29 1567.75,1214.75 1568.33,1214.23 1568.92,1214.36 1569.51,1214.11 1570.09,1214.07 1570.68,1214.2 1571.27,1214.25 1571.85,1215.38 1572.44,1212.37 1573.02,1214.13 1573.61,1212.81 1574.2,1214.19 1574.78,1210.04 1575.37,1210.3 1575.96,1211.77 1576.54,1210.53 1577.13,1207.77 1577.72,1205.02 1578.3,1203.98 1578.89,1207.14 1579.47,1208.72 1580.06,1210.52 1580.65,1209.25 1581.23,1208.03 1581.82,1208.14 1582.41,1208.39 1582.99,1208.81 1583.58,1210.37 1584.17,1210.69 1584.75,1212.04 1585.34,1214.75 1585.93,1214.67 1586.51,1214.65 1587.1,1213.38 1587.68,1210.92 1588.27,1212.44 1588.86,1213.84 1589.44,1216.45 1590.03,1219.04 1590.62,1218.65 1591.2,1218.01 1591.79,1216.35 1592.38,1217.53 1592.96,1218.73 1593.55,1216.93 1594.14,1218.13 1594.72,1217.71 1595.31,1217.43 1595.89,1217.32 1596.48,1215.68 1597.07,1216.8 1597.65,1214.07 1598.24,1215.48 1598.83,1215.07 1599.41,1213.36 1600,1213.32 1600.59,1207.6 1601.17,1205.21 1601.76,1205.28 1602.34,1205.82 1602.93,1209.02 1603.52,1208.16 1604.1,1204.36 1604.69,1200.56 1605.28,1202.78 1605.86,1203.31 1606.45,1206.6 1607.04,1209.66 1607.62,1206.76 1608.21,1205.8 1608.8,1206.39 1609.38,1202.91 1609.97,1201.83 1610.55,1199.45 1611.14,1200.05 1611.73,1202.16 1612.31,1200.06 1612.9,1202.07 1613.49,1202.73 1614.07,1203.16 1614.66,1203.74 1615.25,1205.5 1615.83,1202.74 1616.42,1204.7 1617.01,1205.21 1617.59,1205.66 1618.18,1206 1618.76,1206.68 1619.35,1208.23 1619.94,1207.32 1620.52,1207.62 1621.11,1208.06 1621.7,1209.5 1622.28,1206.92 1622.87,1205.92 1623.46,1207.4 1624.04,1209.08 1624.63,1210.57 1625.22,1213.42 1625.8,1213.05 1626.39,1211.82 1626.97,1210.63 1627.56,1210.94 1628.15,1208.32 1628.73,1208.6 1629.32,1209.85 1629.91,1215.48 1630.49,1215.41 1631.08,1214.15 1631.67,1214.12 1632.25,1215.56 1632.84,1215.29 1633.42,1213.76 1634.01,1216.3 1634.6,1214.74 1635.18,1214.5 1635.77,1215.78 1636.36,1215.54 1636.94,1216.96 1637.53,1215.46 1638.12,1213.96 1638.7,1215.48 1639.29,1214.38 1639.88,1212.9 1640.46,1211.39 1641.05,1211.32 1641.63,1215.65 1642.22,1216.67 1642.81,1216.51 1643.39,1216.09 1643.98,1215.77 1644.57,1215.53 1645.15,1215.42 1645.74,1214.85 1646.33,1213.14 1646.91,1214.59 1647.5,1215.61 1648.09,1215.73 1648.67,1215.58 1649.26,1213.93 1649.84,1213.67 1650.43,1214.86 1651.02,1213.5 1651.6,1214.87 1652.19,1216.02 1652.78,1215.87 1653.36,1218.21 1653.95,1220.22 1654.54,1220.12 1655.12,1219.44 1655.71,1220.84 1656.29,1219.18 1656.88,1216.12 1657.47,1214.58 1658.05,1214.58 1658.64,1214.51 1659.23,1214.16 1659.81,1214.2 1660.4,1212.59 1660.99,1214.14 1661.57,1212.6 1662.16,1214.09 1662.75,1212.78 1663.33,1212.66 1663.92,1211.22 1664.5,1208.5 1665.09,1209.91 1665.68,1207.31 1666.26,1207.65 1666.85,1208.12 1667.44,1208.04 1668.02,1208.1 1668.61,1208.14 1669.2,1208.67 1669.78,1207.6 1670.37,1206.35 1670.96,1208.26 1671.54,1213.83 1672.13,1212.5 1672.71,1212.45 1673.3,1212.84 1673.89,1213.86 1674.47,1216.4 1675.06,1217.49 1675.65,1220 1676.23,1220.88 1676.82,1217.66 1677.41,1217.49 1677.99,1216.03 1678.58,1220.09 1679.17,1219.74 1679.75,1219.41 1680.34,1221.73 1680.92,1218.42 1681.51,1216.69 1682.1,1210.83 1682.68,1212.14 1683.27,1214.71 1683.86,1216.09 1684.44,1215.77 1685.03,1219.67 1685.62,1216.89 1686.2,1216.8 1686.79,1215.26 1687.37,1216.54 1687.96,1214.96 1688.55,1217.22 1689.13,1218.12 1689.72,1217.88 1690.31,1220.55 1690.89,1219.99 1691.48,1220.88 1692.07,1217.73 1692.65,1216.27 1693.24,1216.17 1693.83,1215.99 1694.41,1217.42 1695,1217.19 1695.58,1218.06 1696.17,1219.01 1696.76,1221.35 1697.34,1216.76 1697.93,1215.31 1698.52,1212.32 1699.1,1211.15 1699.69,1213.85 1700.28,1215.16 1700.86,1217.86 1701.45,1217.54 1702.04,1214.67 1702.62,1213.12 1703.21,1213.06 1703.79,1215.94 1704.38,1217.27 1704.97,1219.85 1705.55,1219.39 1706.14,1218.09 1706.73,1215.36 1707.31,1213.79 1707.9,1212.44 1708.49,1213.96 1709.07,1212.72 1709.66,1218.22 1710.24,1218.16 1710.83,1217.9 1711.42,1216.27 1712,1215.01 1712.59,1214.78 1713.18,1209.43 1713.76,1209.73 1714.35,1209.83 1714.94,1209.78 1715.52,1212.69 1716.11,1213.68 1716.7,1213.58 1717.28,1213.35 1717.87,1211.73 1718.45,1210.72 1719.04,1208.29 1719.63,1209.61 1720.21,1210.96 1720.8,1212.33 1721.39,1212.25 1721.97,1214.97 1722.56,1214.92 1723.15,1214.83 1723.73,1217.36 1724.32,1214.44 1724.91,1212.9 1725.49,1209.95 1726.08,1208.5 1726.66,1210.14 1727.25,1211.34 1727.84,1210.27 1728.42,1210.3 1729.01,1210.43 1729.6,1210.47 1730.18,1209.46 1730.77,1208.54 1731.36,1208.79 1731.94,1205.99 1732.53,1207.78 1733.11,1207.71 1733.7,1208.19 1734.29,1205.53 1734.87,1206 1735.46,1205.02 1736.05,1207.01 1736.63,1204.57 1737.22,1204.89 1737.81,1205.34 1738.39,1204.3 1738.98,1202.2 1739.57,1201.61 1740.15,1199.24 1740.74,1197.53 1741.32,1198.32 1741.91,1197.73 1742.5,1199.96 1743.08,1201.75 1743.67,1202.17 1744.26,1204.08 1744.84,1206.02 1745.43,1206.43 1746.02,1205.57 1746.6,1207.67 1747.19,1209.16 1747.78,1210.92 1748.36,1209.36 1748.95,1210.83 1749.53,1213.43 1750.12,1214.78 1750.71,1214.85 1751.29,1216.02 1751.88,1214.83 1752.47,1216.29 1753.05,1216.44 1753.64,1215.18 1754.23,1215.38 1754.81,1216.77 1755.4,1216.46 1755.99,1216.38 1756.57,1217.5 1757.16,1215.93 1757.74,1215.72 1758.33,1213.96 1758.92,1215 1759.5,1218.95 1760.09,1217.02 1760.68,1216.78 1761.26,1215.67 1761.85,1214.43 1762.44,1215.83 1763.02,1218.48 1763.61,1219.35 1764.19,1220.61 1764.78,1214.73 1765.37,1214.76 1765.95,1209.3 1766.54,1205.42 1767.13,1209.98 1767.71,1209.96 1768.3,1209.93 1768.89,1209.97 1769.47,1211.34 1770.06,1212.67 1770.65,1213.91 1771.23,1214.17 1771.82,1217.01 1772.4,1218.15 1772.99,1217.98 1773.58,1218.8 1774.16,1219.6 1774.75,1222.03 1775.34,1221.59 1775.92,1222.41 1776.51,1225.64 1777.1,1222.41 1777.68,1218 1778.27,1220.73 1778.86,1219 1779.44,1220.19 1780.03,1220.05 1780.61,1221.12 1781.2,1216.97 1781.79,1216.99 1782.37,1215.46 1782.96,1215.33 1783.55,1215.24 1784.13,1214.99 1784.72,1216.09 1785.31,1217.27 1785.89,1215.6 1786.48,1215.23 1787.06,1216.58 1787.65,1216.32 1788.24,1217.78 1788.82,1218.6 1789.41,1220.94 1790,1217.63 1790.58,1216.09 1791.17,1216.27 1791.76,1216.25 1792.34,1215.84 1792.93,1212.8 1793.52,1213.97 1794.1,1215.44 1794.69,1212.6 1795.27,1211.28 1795.86,1214.17 1796.45,1218.08 1797.03,1219.05 1797.62,1221.38 1798.21,1222.51 1798.79,1224.63 1799.38,1222.78 1799.97,1223.59 1800.55,1221.62 1801.14,1219.77 1801.73,1219.48 1802.31,1218.17 1802.9,1217.69 1803.48,1214.82 1804.07,1211.87 1804.66,1211.94 1805.24,1212.24 1805.83,1214.8 1806.42,1217.11 1807,1214.03 1807.59,1216.74 1808.18,1217.55 1808.76,1217.25 1809.35,1215.63 1809.94,1213.17 1810.52,1213.3 1811.11,1217.36 1811.69,1218.21 1812.28,1215.54 1812.87,1213.77 1813.45,1212.29 1814.04,1212.22 1814.63,1213.69 1815.21,1212.28 1815.8,1216.01 1816.39,1216.06 1816.97,1217.17 1817.56,1218.4 1818.14,1216.56 1818.73,1214.93 1819.32,1218.81 1819.9,1219.88 1820.49,1218 1821.08,1219.12 1821.66,1216.26 1822.25,1213.69 1822.84,1212.25 1823.42,1213.57 1824.01,1215.02 1824.6,1218.99 1825.18,1218.9 1825.77,1220.18 1826.35,1220 1826.94,1219.49 1827.53,1220.4 1828.11,1214.58 1828.7,1212.91 1829.29,1211.33 1829.87,1212.66 1830.46,1211.12 1831.05,1212.66 1831.63,1211.23 1832.22,1211.31 1832.81,1214.4 1833.39,1214.37 1833.98,1211.59 1834.56,1214.22 1835.15,1211.55 1835.74,1211.61 1836.32,1213.05 1836.91,1214.51 1837.5,1211.67 1838.08,1214.53 1838.67,1212.82 1839.26,1208.88 1839.84,1209.32 1840.43,1210.69 1841.01,1210.77 1841.6,1210.81 1842.19,1212.25 1842.77,1213.74 1843.36,1213.82 1843.95,1213.92 1844.53,1215.42 1845.12,1215.42 1845.71,1215.3 1846.29,1216.48 1846.88,1213.6 1847.47,1216.34 1848.05,1214.72 1848.64,1214.38 1849.22,1211.66 1849.81,1210.31 1850.4,1209 1850.98,1209.05 1851.57,1209.17 1852.16,1209.07 1852.74,1206.21 1853.33,1209.19 1853.92,1209.55 1854.5,1212.39 1855.09,1213.81 1855.68,1215.24 1856.26,1215.09 1856.85,1213.71 1857.43,1213.8 1858.02,1214.69 1858.61,1213.2 1859.19,1214.68 1859.78,1217.25 1860.37,1213.08 1860.95,1214.84 1861.54,1213.6 1862.13,1212.22 1862.71,1212.05 1863.3,1213.31 1863.88,1213.43 1864.47,1215.99 1865.06,1217.3 1865.64,1217.07 1866.23,1216.59 1866.82,1217.89 1867.4,1217.76 1867.99,1215.87 1868.58,1216.68 1869.16,1213.72 1869.75,1213.79 1870.34,1213.36 1870.92,1216.08 1871.51,1215.98 1872.09,1213.06 1872.68,1209.18 1873.27,1209.55 1873.85,1206.99 1874.44,1207.06 1875.03,1209.96 1875.61,1209.97 1876.2,1211.23 1876.79,1211.1 1877.37,1208.44 1877.96,1208.88 1878.55,1207.67 1879.13,1209.44 1879.72,1208.31 1880.3,1209.64 1880.89,1213.75 1881.48,1211 1882.06,1208.5 1882.65,1207.19 1883.24,1210.08 1883.82,1211.41 1884.41,1208.66 1885,1210.11 1885.58,1207.5 1886.17,1208 1886.76,1206.98 1887.34,1209.73 1887.93,1210.26 1888.51,1208.92 1889.1,1210.68 1889.69,1209.52 1890.27,1208.36 1890.86,1209.95 1891.45,1215.61 1892.03,1215.45 1892.62,1219.14 1893.21,1220.28 1893.79,1218.57 1894.38,1215.4 1894.96,1212.27 1895.55,1210.84 1896.14,1212.45 1896.72,1212.83 1897.31,1210.19 1897.9,1216.96 1898.48,1213.74 1899.07,1213.55 1899.66,1212.49 1900.24,1213.89 1900.83,1216.35 1901.42,1214.66 1902,1213.38 1902.59,1212.12 1903.17,1211 1903.76,1211.31 1904.35,1211.33 1904.93,1211.24 1905.52,1210.05 1906.11,1208.91 1906.69,1211.55 1907.28,1210.05 1907.87,1211.67 1908.45,1211.8 1909.04,1212.17 1909.63,1208.07 1910.21,1209.78 1910.8,1211.48 1911.38,1211.85 1911.97,1213.1 1912.56,1210.32 1913.14,1210.32 1913.73,1213.13 1914.32,1211.89 1914.9,1214.45 1915.49,1214.63 1916.08,1211.91 1916.66,1211.96 1917.25,1212.14 1917.83,1211.25 1918.42,1211.22 1919.01,1211.36 1919.59,1214.11 1920.18,1216.71 1920.77,1216.64 1921.35,1215.37 1921.94,1215.61 1922.53,1214.36 1923.11,1213.99 1923.7,1215.15 1924.29,1216.31 1924.87,1218.62 1925.46,1219.73 1926.04,1215.41 1926.63,1214.01 1927.22,1211.16 1927.8,1208.63 1928.39,1210.32 1928.98,1211.69 1929.56,1213.14 1930.15,1213.06 1930.74,1214.47 1931.32,1214.55 1931.91,1211.73 1932.5,1210.56 1933.08,1211.85 1933.67,1213.29 1934.25,1215.93 1934.84,1214.38 1935.43,1212.88 1936.01,1215.46 1936.6,1216.69 1937.19,1216.38 1937.77,1214.96 1938.36,1216.35 1938.95,1216.01 1939.53,1214.15 1940.12,1211.36 1940.71,1207.34 1941.29,1207.92 1941.88,1209.24 1942.46,1209.25 1943.05,1208.27 1943.64,1211.21 1944.22,1208.62 1944.81,1208.86 1945.4,1206.67 1945.98,1207.01 1946.57,1207.15 1947.16,1208.97 1947.74,1209.1 1948.33,1207.75 1948.91,1207.96 1949.5,1209.69 1950.09,1207.22 1950.67,1206.24 1951.26,1205.07 1951.85,1204.03 1952.43,1204.37 1953.02,1203.25 1953.61,1201.22 1954.19,1201.7 1954.78,1204.8 1955.37,1205.34 1955.95,1207.23 1956.54,1204.58 1957.12,1206.56 1957.71,1203.9 1958.3,1205.9 1958.88,1209.14 1959.47,1209.28 1960.06,1209.48 1960.64,1211.19 1961.23,1212.49 1961.82,1208.5 1962.4,1210.03 1962.99,1211.71 1963.58,1209.09 1964.16,1212.07 1964.75,1212.28 1965.33,1210.8 1965.92,1210.93 1966.51,1212.54 1967.09,1214.06 1967.68,1215.47 1968.27,1213.72 1968.85,1213.71 1969.44,1214.91 1970.03,1216.43 1970.61,1213.5 1971.2,1213.32 1971.78,1213.49 1972.37,1214.96 1972.96,1212.33 1973.54,1210.88 1974.13,1211.05 1974.72,1211.2 1975.3,1210.16 1975.89,1215.62 1976.48,1217.11 1977.06,1215.58 1977.65,1215.38 1978.24,1215.02 1978.82,1213.62 1979.41,1215.24 1979.99,1213.95 1980.58,1211.06 1981.17,1211.18 1981.75,1214.22 1982.34,1214.22 1982.93,1215.59 1983.51,1214.06 1984.1,1212.57 1984.69,1211.22 1985.27,1214.12 1985.86,1214.07 1986.45,1212.85 1987.03,1214.13 1987.62,1214.11 1988.2,1214.03 1988.79,1212.69 1989.38,1211.27 1989.96,1212.41 1990.55,1212.14 1991.14,1214.88 1991.72,1212.33 1992.31,1214.17 1992.9,1214.2 1993.48,1214.34 1994.07,1212.07 1994.65,1213.44 1995.24,1213.43 1995.83,1212.01 1996.41,1211.85 1997,1211.85 1997.59,1214.71 1998.17,1215.94 1998.76,1210.29 1999.35,1209.22 1999.93,1209.51 2000.52,1211.1 2001.11,1212.42 2001.69,1210.87 2002.28,1208.11 2002.86,1208.34 2003.45,1207.43 2004.04,1206.42 2004.62,1208.04 2005.21,1208.1 2005.8,1210.82 2006.38,1209.8 2006.97,1213.85 2007.56,1210.98 2008.14,1210.88 2008.73,1209.59 2009.32,1209.74 2009.9,1211.37 2010.49,1214.16 2011.07,1213.88 2011.66,1211.98 2012.25,1212.05 2012.83,1211.7 2013.42,1212.92 2014.01,1213.21 2014.59,1214.63 2015.18,1214.72 2015.77,1214.48 2016.35,1213.98 2016.94,1213.6 2017.53,1213.29 2018.11,1213.51 2018.7,1213.24 2019.28,1208.95 2019.87,1205.15 2020.46,1205.51 2021.04,1206 2021.63,1207.73 2022.22,1208.15 2022.8,1211.17 2023.39,1214.32 2023.98,1214.41 2024.56,1217.17 2025.15,1216.8 2025.73,1216.7 2026.32,1213.88 2026.91,1209.76 2027.49,1211.38 2028.08,1212.72 2028.67,1208.97 2029.25,1213.35 2029.84,1213.51 2030.43,1211.87 2031.01,1214.4 2031.6,1214.44 2032.19,1214.17 2032.77,1216.59 2033.36,1214.92 2033.94,1215.89 2034.53,1215.56 2035.12,1216.73 2035.7,1214.88 2036.29,1215.9 2036.88,1215.89 2037.46,1214.28 2038.05,1213 2038.64,1215.53 2039.22,1219.45 2039.81,1216.34 2040.4,1216.16 2040.98,1218.8 2041.57,1218.29 2042.15,1216.63 2042.74,1215.09 2043.33,1216.43 2043.91,1216.25 2044.5,1217.45 2045.09,1216.02 2045.67,1215.98 2046.26,1217.18 2046.85,1215.72 2047.43,1214 2048.02,1211.09 2048.6,1208.2 2049.19,1209.73 2049.78,1211.37 2050.36,1211.37 2050.95,1211.82 2051.54,1211.82 2052.12,1211.8 2052.71,1210.28 2053.3,1212.85 2053.88,1211.58 2054.47,1206.15 2055.06,1205.34 2055.64,1205.83 2056.23,1204.64 2056.81,1205.26 2057.4,1204.55 2057.99,1210.26 2058.57,1212.05 2059.16,1210.54 2059.75,1210.59 2060.33,1208.09 2060.92,1209.27 2061.51,1206.79 2062.09,1209.45 2062.68,1208.54 2063.27,1209.74 2063.85,1210.13 2064.44,1210.17 2065.02,1208.97 2065.61,1210.49 2066.2,1212.21 2066.78,1213.76 2067.37,1216.3 2067.96,1216.27 2068.54,1218.71 2069.13,1215.54 2069.72,1214.12 2070.3,1216.9 2070.89,1215.23 2071.48,1216.39 2072.06,1215.02 2072.65,1211.12 2073.23,1212.69 2073.82,1214.22 2074.41,1214.09 2074.99,1212.56 2075.58,1211.33 2076.17,1211.18 2076.75,1209.84 2077.34,1212.6 2077.93,1214.17 2078.51,1215.66 2079.1,1218.32 2079.68,1220.49 2080.27,1221.57 2080.86,1219.68 2081.44,1222.11 2082.03,1221.46 2082.62,1216.98 2083.2,1216.75 2083.79,1215.2 2084.38,1214.9 2084.96,1213.37 2085.55,1212.18 2086.14,1210.71 2086.72,1210.81 2087.31,1210.86 2087.89,1210.8 2088.48,1210.95 2089.07,1210.97 2089.65,1212.5 2090.24,1212.36 2090.83,1213.77 2091.41,1214.08 2092,1215.57 2092.59,1216.91 2093.17,1216.43 2093.76,1218.96 2094.35,1218.71 2094.93,1222.58 2095.52,1221.83 2096.1,1218.82 2096.69,1217.3 2097.28,1215.84 2097.86,1216.02 2098.45,1211.97 2099.04,1210.84 2099.62,1209.48 2100.21,1210.86 2100.8,1210.8 2101.38,1212.53 2101.97,1212.44 2102.55,1210.89 2103.14,1209.62 2103.73,1211.08 2104.31,1209.83 2104.9,1211.18 2105.49,1212.56 2106.07,1210.96 2106.66,1212.28 2107.25,1215.05 2107.83,1217.64 2108.42,1219.82 2109.01,1222.12 2109.59,1221.56 2110.18,1221.3 2110.76,1219.38 2111.35,1219.18 2111.94,1215.11 2112.52,1215.03 2113.11,1217.5 2113.7,1214.61 2114.28,1213.19 2114.87,1213.47 2115.46,1212.19 2116.04,1213.48 2116.63,1210.68 2117.22,1208.38 2117.8,1205.81 2118.39,1203.53 2118.97,1202.62 2119.56,1202.19 2120.15,1204.17 2120.73,1208.65 2121.32,1208.75 2121.91,1210.2 2122.49,1211.52 2123.08,1211.14 2123.67,1211.21 2124.25,1211.22 2124.84,1212.58 2125.42,1211.65 2126.01,1211.72 2126.6,1214.5 2127.18,1215.83 2127.77,1214.64 2128.36,1215.57 2128.94,1214.43 2129.53,1214.31 2130.12,1214.29 2130.7,1215.52 2131.29,1217.15 2131.88,1214.29 2132.46,1216.99 2133.05,1215.32 2133.63,1215.08 2134.22,1215.11 2134.81,1216.16 2135.39,1216.1 2135.98,1213.19 2136.57,1213.27 2137.15,1210.71 2137.74,1212.22 2138.33,1210.73 2138.91,1212.27 2139.5,1212.28 2140.09,1214.9 2140.67,1213.47 2141.26,1213.5 2141.84,1211.87 2142.43,1212.11 2143.02,1210.59 2143.6,1210.82 2144.19,1211.1 2144.78,1209.96 2145.36,1208.9 2145.95,1210.23 2146.54,1210.31 2147.12,1210.63 2147.71,1212 2148.3,1209.26 2148.88,1210.65 2149.47,1209.06 2150.05,1211.94 2150.64,1212 2151.23,1209.25 2151.81,1210.84 2152.4,1212.39 2152.99,1211.18 2153.57,1211.03 2154.16,1211.27 2154.75,1211.47 2155.33,1211.77 2155.92,1212.76 2156.5,1212.25 2157.09,1214.87 2157.68,1214.79 2158.26,1215.79 \"/>\n<path clip-path=\"url(#clip332)\" d=\"M986.025 1213.33 L986.612 1213.33 L987.198 1213.33 L987.785 1213.33 L988.371 1213.33 L988.957 1213.33 L989.544 1213.33 L990.13 1213.33 L990.717 1213.33 L991.303 1213.33 L991.889 1213.33 L992.476 1213.33 L993.062 1213.33 L993.649 1213.33 L994.235 1213.33 L994.822 1213.33 L995.408 1213.33 L995.994 1213.33 L996.581 1213.33 L997.167 1213.33 L997.754 1213.33 L998.34 1213.33 L998.926 1213.33 L999.513 1213.33 L1000.1 1213.33 L1000.69 1213.33 L1001.27 1213.33 L1001.86 1213.33 L1002.44 1213.33 L1003.03 1213.33 L1003.62 1213.33 L1004.2 1213.33 L1004.79 1213.33 L1005.38 1213.33 L1005.96 1213.33 L1006.55 1213.33 L1007.14 1213.33 L1007.72 1213.33 L1008.31 1213.33 L1008.9 1213.33 L1009.48 1213.33 L1010.07 1213.33 L1010.65 1213.33 L1011.24 1213.33 L1011.83 1213.33 L1012.41 1213.33 L1013 1213.33 L1013.59 1213.33 L1014.17 1213.33 L1014.76 1213.33 L1015.35 1213.33 L1015.93 1213.33 L1016.52 1213.33 L1017.11 1213.33 L1017.69 1213.33 L1018.28 1213.33 L1018.86 1213.33 L1019.45 1213.33 L1020.04 1213.33 L1020.62 1213.33 L1021.21 1213.33 L1021.8 1213.33 L1022.38 1213.33 L1022.97 1213.33 L1023.56 1213.33 L1024.14 1213.33 L1024.73 1213.33 L1025.32 1213.33 L1025.9 1213.33 L1026.49 1213.33 L1027.07 1213.33 L1027.66 1213.33 L1028.25 1213.33 L1028.83 1213.33 L1029.42 1213.33 L1030.01 1213.33 L1030.59 1213.33 L1031.18 1213.33 L1031.77 1213.33 L1032.35 1213.33 L1032.94 1213.33 L1033.52 1213.33 L1034.11 1213.33 L1034.7 1213.33 L1035.28 1213.33 L1035.87 1213.33 L1036.46 1213.33 L1037.04 1213.33 L1037.63 1213.33 L1038.22 1213.33 L1038.8 1213.33 L1039.39 1213.33 L1039.98 1213.33 L1040.56 1213.33 L1041.15 1213.33 L1041.73 1213.33 L1042.32 1213.33 L1042.91 1213.33 L1043.49 1213.33 L1044.08 1213.33 L1044.67 1213.33 L1045.25 1213.33 L1045.84 1213.33 L1046.43 1213.33 L1047.01 1213.33 L1047.6 1213.33 L1048.19 1213.33 L1048.77 1213.33 L1049.36 1213.33 L1049.94 1213.33 L1050.53 1213.33 L1051.12 1213.33 L1051.7 1213.33 L1052.29 1213.33 L1052.88 1213.33 L1053.46 1213.33 L1054.05 1213.33 L1054.64 1213.33 L1055.22 1213.33 L1055.81 1213.33 L1056.39 1213.33 L1056.98 1213.33 L1057.57 1213.33 L1058.15 1213.33 L1058.74 1213.33 L1059.33 1213.33 L1059.91 1213.33 L1060.5 1213.33 L1061.09 1213.33 L1061.67 1213.33 L1062.26 1213.33 L1062.85 1213.33 L1063.43 1213.33 L1064.02 1213.33 L1064.6 1213.33 L1065.19 1213.33 L1065.78 1213.33 L1066.36 1213.33 L1066.95 1213.33 L1067.54 1213.33 L1068.12 1213.33 L1068.71 1213.33 L1069.3 1213.33 L1069.88 1213.33 L1070.47 1213.33 L1071.06 1213.33 L1071.64 1213.33 L1072.23 1213.33 L1072.81 1213.33 L1073.4 1213.33 L1073.99 1213.33 L1074.57 1213.33 L1075.16 1213.33 L1075.75 1213.33 L1076.33 1213.33 L1076.92 1213.33 L1077.51 1213.33 L1078.09 1213.33 L1078.68 1213.33 L1079.26 1213.33 L1079.85 1213.33 L1080.44 1213.33 L1081.02 1213.33 L1081.61 1213.33 L1082.2 1213.33 L1082.78 1213.33 L1083.37 1213.33 L1083.96 1213.33 L1084.54 1213.33 L1085.13 1213.33 L1085.72 1213.33 L1086.3 1213.33 L1086.89 1213.33 L1087.47 1213.33 L1088.06 1213.33 L1088.65 1213.33 L1089.23 1213.33 L1089.82 1213.33 L1090.41 1213.33 L1090.99 1213.33 L1091.58 1213.33 L1092.17 1213.33 L1092.75 1213.33 L1093.34 1213.33 L1093.93 1213.33 L1094.51 1213.33 L1095.1 1213.33 L1095.68 1213.33 L1096.27 1213.33 L1096.86 1213.33 L1097.44 1213.33 L1098.03 1213.33 L1098.62 1213.33 L1099.2 1213.33 L1099.79 1213.33 L1100.38 1213.33 L1100.96 1213.33 L1101.55 1213.33 L1102.14 1213.33 L1102.72 1213.33 L1103.31 1213.33 L1103.89 1213.33 L1104.48 1213.33 L1105.07 1213.33 L1105.65 1213.33 L1106.24 1213.33 L1106.83 1213.33 L1107.41 1213.33 L1108 1213.33 L1108.59 1213.33 L1109.17 1213.33 L1109.76 1213.33 L1110.34 1213.33 L1110.93 1213.33 L1111.52 1213.33 L1112.1 1213.33 L1112.69 1213.33 L1113.28 1213.33 L1113.86 1213.33 L1114.45 1213.33 L1115.04 1213.33 L1115.62 1213.33 L1116.21 1213.33 L1116.8 1213.33 L1117.38 1213.33 L1117.97 1213.33 L1118.55 1213.33 L1119.14 1213.33 L1119.73 1213.33 L1120.31 1213.33 L1120.9 1213.33 L1121.49 1213.33 L1122.07 1213.33 L1122.66 1213.33 L1123.25 1213.33 L1123.83 1213.33 L1124.42 1213.33 L1125.01 1213.33 L1125.59 1213.33 L1126.18 1213.33 L1126.76 1213.33 L1127.35 1213.33 L1127.94 1213.33 L1128.52 1213.33 L1129.11 1213.33 L1129.7 1213.33 L1130.28 1213.33 L1130.87 1213.33 L1131.46 1213.33 L1132.04 1213.33 L1132.63 1213.33 L1133.21 1213.33 L1133.8 1213.33 L1134.39 1213.33 L1134.97 1213.33 L1135.56 1213.33 L1136.15 1213.33 L1136.73 1213.33 L1137.32 1213.33 L1137.91 1213.33 L1138.49 1213.33 L1139.08 1213.33 L1139.67 1213.33 L1140.25 1213.33 L1140.84 1213.33 L1141.42 1213.33 L1142.01 1213.33 L1142.6 1213.33 L1143.18 1213.33 L1143.77 1213.33 L1144.36 1213.33 L1144.94 1213.33 L1145.53 1213.33 L1146.12 1213.33 L1146.7 1213.33 L1147.29 1213.33 L1147.88 1213.33 L1148.46 1213.33 L1149.05 1213.33 L1149.63 1213.33 L1150.22 1213.33 L1150.81 1213.33 L1151.39 1213.33 L1151.98 1213.33 L1152.57 1213.33 L1153.15 1213.33 L1153.74 1213.33 L1154.33 1213.33 L1154.91 1213.33 L1155.5 1213.33 L1156.09 1213.33 L1156.67 1213.33 L1157.26 1213.33 L1157.84 1213.33 L1158.43 1213.33 L1159.02 1213.33 L1159.6 1213.33 L1160.19 1213.33 L1160.78 1213.33 L1161.36 1213.33 L1161.95 1213.33 L1162.54 1213.33 L1163.12 1213.33 L1163.71 1213.33 L1164.29 1213.33 L1164.88 1213.33 L1165.47 1213.33 L1166.05 1213.33 L1166.64 1213.33 L1167.23 1213.33 L1167.81 1213.33 L1168.4 1213.33 L1168.99 1213.33 L1169.57 1213.33 L1170.16 1213.33 L1170.75 1213.33 L1171.33 1213.33 L1171.92 1213.33 L1172.5 1213.33 L1173.09 1213.33 L1173.68 1213.33 L1174.26 1213.33 L1174.85 1213.33 L1175.44 1213.33 L1176.02 1213.33 L1176.61 1213.33 L1177.2 1213.33 L1177.78 1213.33 L1178.37 1213.33 L1178.96 1213.33 L1179.54 1213.33 L1180.13 1213.33 L1180.71 1213.33 L1181.3 1213.33 L1181.89 1213.33 L1182.47 1213.33 L1183.06 1213.33 L1183.65 1213.33 L1184.23 1213.33 L1184.82 1213.33 L1185.41 1213.33 L1185.99 1213.33 L1186.58 1213.33 L1187.16 1213.33 L1187.75 1213.33 L1188.34 1213.33 L1188.92 1213.33 L1189.51 1213.33 L1190.1 1213.33 L1190.68 1213.33 L1191.27 1213.33 L1191.86 1213.33 L1192.44 1213.33 L1193.03 1213.33 L1193.62 1213.33 L1194.2 1213.33 L1194.79 1213.33 L1195.37 1213.33 L1195.96 1213.33 L1196.55 1213.33 L1197.13 1213.33 L1197.72 1213.33 L1198.31 1213.33 L1198.89 1213.33 L1199.48 1213.33 L1200.07 1213.33 L1200.65 1213.33 L1201.24 1213.33 L1201.83 1213.33 L1202.41 1213.33 L1203 1213.33 L1203.58 1213.33 L1204.17 1213.33 L1204.76 1213.33 L1205.34 1213.33 L1205.93 1213.33 L1206.52 1213.33 L1207.1 1213.33 L1207.69 1213.33 L1208.28 1213.33 L1208.86 1213.33 L1209.45 1213.33 L1210.03 1213.33 L1210.62 1213.33 L1211.21 1213.33 L1211.79 1213.33 L1212.38 1213.33 L1212.97 1213.33 L1213.55 1213.33 L1214.14 1213.33 L1214.73 1213.33 L1215.31 1213.33 L1215.9 1213.33 L1216.49 1213.33 L1217.07 1213.33 L1217.66 1213.33 L1218.24 1213.33 L1218.83 1213.33 L1219.42 1213.33 L1220 1213.33 L1220.59 1213.33 L1221.18 1213.33 L1221.76 1213.33 L1222.35 1213.33 L1222.94 1213.33 L1223.52 1213.33 L1224.11 1213.33 L1224.7 1213.33 L1225.28 1213.33 L1225.87 1213.33 L1226.45 1213.33 L1227.04 1213.33 L1227.63 1213.33 L1228.21 1213.33 L1228.8 1213.33 L1229.39 1213.33 L1229.97 1213.33 L1230.56 1213.33 L1231.15 1213.33 L1231.73 1213.33 L1232.32 1213.33 L1232.91 1213.33 L1233.49 1213.33 L1234.08 1213.33 L1234.66 1213.33 L1235.25 1213.33 L1235.84 1213.33 L1236.42 1213.33 L1237.01 1213.33 L1237.6 1213.33 L1238.18 1213.33 L1238.77 1213.33 L1239.36 1213.33 L1239.94 1213.33 L1240.53 1213.33 L1241.11 1213.33 L1241.7 1213.33 L1242.29 1213.33 L1242.87 1213.33 L1243.46 1213.33 L1244.05 1213.33 L1244.63 1213.33 L1245.22 1213.33 L1245.81 1213.33 L1246.39 1213.33 L1246.98 1213.33 L1247.57 1213.33 L1248.15 1213.33 L1248.74 1213.33 L1249.32 1213.33 L1249.91 1213.33 L1250.5 1213.33 L1251.08 1213.33 L1251.67 1213.33 L1252.26 1213.33 L1252.84 1213.33 L1253.43 1213.33 L1254.02 1213.33 L1254.6 1213.33 L1255.19 1213.33 L1255.78 1213.33 L1256.36 1213.33 L1256.95 1213.33 L1257.53 1213.33 L1258.12 1213.33 L1258.71 1213.33 L1259.29 1213.33 L1259.88 1213.33 L1260.47 1213.33 L1261.05 1213.33 L1261.64 1213.33 L1262.23 1213.33 L1262.81 1213.33 L1263.4 1213.33 L1263.98 1213.33 L1264.57 1213.33 L1265.16 1213.33 L1265.74 1213.33 L1266.33 1213.33 L1266.92 1213.33 L1267.5 1213.33 L1268.09 1213.33 L1268.68 1213.33 L1269.26 1213.33 L1269.85 1213.33 L1270.44 1213.33 L1271.02 1213.33 L1271.61 1213.33 L1272.19 1213.33 L1272.78 1213.33 L1273.37 1213.33 L1273.95 1213.33 L1274.54 1213.33 L1275.13 1213.33 L1275.71 1213.33 L1276.3 1213.33 L1276.89 1213.33 L1277.47 1213.33 L1278.06 1213.33 L1278.65 1213.33 L1279.23 1213.33 L1279.82 1213.33 L1280.4 1213.33 L1280.99 1213.33 L1281.58 1213.33 L1282.16 1213.33 L1282.75 1213.33 L1283.34 1213.33 L1283.92 1213.33 L1284.51 1213.33 L1285.1 1213.33 L1285.68 1213.33 L1286.27 1213.33 L1286.86 1213.33 L1287.44 1213.33 L1288.03 1213.33 L1288.61 1213.33 L1289.2 1213.33 L1289.79 1213.33 L1290.37 1213.33 L1290.96 1213.33 L1291.55 1213.33 L1292.13 1213.33 L1292.72 1213.33 L1293.31 1213.33 L1293.89 1213.33 L1294.48 1213.33 L1295.06 1213.33 L1295.65 1213.33 L1296.24 1213.33 L1296.82 1213.33 L1297.41 1213.33 L1298 1213.33 L1298.58 1213.33 L1299.17 1213.33 L1299.76 1213.33 L1300.34 1213.33 L1300.93 1213.33 L1301.52 1213.33 L1302.1 1213.33 L1302.69 1213.33 L1303.27 1213.33 L1303.86 1213.33 L1304.45 1213.33 L1305.03 1213.33 L1305.62 1213.33 L1306.21 1213.33 L1306.79 1213.33 L1307.38 1213.33 L1307.97 1213.33 L1308.55 1213.33 L1309.14 1213.33 L1309.73 1213.33 L1310.31 1213.33 L1310.9 1213.33 L1311.48 1213.33 L1312.07 1213.33 L1312.66 1213.33 L1313.24 1213.33 L1313.83 1213.33 L1314.42 1213.33 L1315 1213.33 L1315.59 1213.33 L1316.18 1213.33 L1316.76 1213.33 L1317.35 1213.33 L1317.93 1213.33 L1318.52 1213.33 L1319.11 1213.33 L1319.69 1213.33 L1320.28 1213.33 L1320.87 1213.33 L1321.45 1213.33 L1322.04 1213.33 L1322.63 1213.33 L1323.21 1213.33 L1323.8 1213.33 L1324.39 1213.33 L1324.97 1213.33 L1325.56 1213.33 L1326.14 1213.33 L1326.73 1213.33 L1327.32 1213.33 L1327.9 1213.33 L1328.49 1213.33 L1329.08 1213.33 L1329.66 1213.33 L1330.25 1213.33 L1330.84 1213.33 L1331.42 1213.33 L1332.01 1213.33 L1332.6 1213.33 L1333.18 1213.33 L1333.77 1213.33 L1334.35 1213.33 L1334.94 1213.33 L1335.53 1213.33 L1336.11 1213.33 L1336.7 1213.33 L1337.29 1213.33 L1337.87 1213.33 L1338.46 1213.33 L1339.05 1213.33 L1339.63 1213.33 L1340.22 1213.33 L1340.8 1213.33 L1341.39 1213.33 L1341.98 1213.33 L1342.56 1213.33 L1343.15 1213.33 L1343.74 1213.33 L1344.32 1213.33 L1344.91 1213.33 L1345.5 1213.33 L1346.08 1213.33 L1346.67 1213.33 L1347.26 1213.33 L1347.84 1213.33 L1348.43 1213.33 L1349.01 1213.33 L1349.6 1213.33 L1350.19 1213.33 L1350.77 1213.33 L1351.36 1213.33 L1351.95 1213.33 L1352.53 1213.33 L1353.12 1213.33 L1353.71 1213.33 L1354.29 1213.33 L1354.88 1213.33 L1355.47 1213.33 L1356.05 1213.33 L1356.64 1213.33 L1357.22 1213.33 L1357.81 1213.33 L1358.4 1213.33 L1358.98 1213.33 L1359.57 1213.33 L1360.16 1213.33 L1360.74 1213.33 L1361.33 1213.33 L1361.92 1213.33 L1362.5 1213.33 L1363.09 1213.33 L1363.68 1213.33 L1364.26 1213.33 L1364.85 1213.33 L1365.43 1213.33 L1366.02 1213.33 L1366.61 1213.33 L1367.19 1213.33 L1367.78 1213.33 L1368.37 1213.33 L1368.95 1213.33 L1369.54 1213.33 L1370.13 1213.33 L1370.71 1213.33 L1371.3 1213.33 L1371.88 1213.33 L1372.47 1213.33 L1373.06 1213.33 L1373.64 1213.33 L1374.23 1213.33 L1374.82 1213.33 L1375.4 1213.33 L1375.99 1213.33 L1376.58 1213.33 L1377.16 1213.33 L1377.75 1213.33 L1378.34 1213.33 L1378.92 1213.33 L1379.51 1213.33 L1380.09 1213.33 L1380.68 1213.33 L1381.27 1213.33 L1381.85 1213.33 L1382.44 1213.33 L1383.03 1213.33 L1383.61 1213.33 L1384.2 1213.33 L1384.79 1213.33 L1385.37 1213.33 L1385.96 1213.33 L1386.55 1213.33 L1387.13 1213.33 L1387.72 1213.33 L1388.3 1213.33 L1388.89 1213.33 L1389.48 1213.33 L1390.06 1213.33 L1390.65 1213.33 L1391.24 1213.33 L1391.82 1213.33 L1392.41 1213.33 L1393 1213.33 L1393.58 1213.33 L1394.17 1213.33 L1394.75 1213.33 L1395.34 1213.33 L1395.93 1213.33 L1396.51 1213.33 L1397.1 1213.33 L1397.69 1213.33 L1398.27 1213.33 L1398.86 1213.33 L1399.45 1213.33 L1400.03 1213.33 L1400.62 1213.33 L1401.21 1213.33 L1401.79 1213.33 L1402.38 1213.33 L1402.96 1213.33 L1403.55 1213.33 L1404.14 1213.33 L1404.72 1213.33 L1405.31 1213.33 L1405.9 1213.33 L1406.48 1213.33 L1407.07 1213.33 L1407.66 1213.33 L1408.24 1213.33 L1408.83 1213.33 L1409.42 1213.33 L1410 1213.33 L1410.59 1213.33 L1411.17 1213.33 L1411.76 1213.33 L1412.35 1213.33 L1412.93 1213.33 L1413.52 1213.33 L1414.11 1213.33 L1414.69 1213.33 L1415.28 1213.33 L1415.87 1213.33 L1416.45 1213.33 L1417.04 1213.33 L1417.63 1213.33 L1418.21 1213.33 L1418.8 1213.33 L1419.38 1213.33 L1419.97 1213.33 L1420.56 1213.33 L1421.14 1213.33 L1421.73 1213.33 L1422.32 1213.33 L1422.9 1213.33 L1423.49 1213.33 L1424.08 1213.33 L1424.66 1213.33 L1425.25 1213.33 L1425.83 1213.33 L1426.42 1213.33 L1427.01 1213.33 L1427.59 1213.33 L1428.18 1213.33 L1428.77 1213.33 L1429.35 1213.33 L1429.94 1213.33 L1430.53 1213.33 L1431.11 1213.33 L1431.7 1213.33 L1432.29 1213.33 L1432.87 1213.33 L1433.46 1213.33 L1434.04 1213.33 L1434.63 1213.33 L1435.22 1213.33 L1435.8 1213.33 L1436.39 1213.33 L1436.98 1213.33 L1437.56 1213.33 L1438.15 1213.33 L1438.74 1213.33 L1439.32 1213.33 L1439.91 1213.33 L1440.5 1213.33 L1441.08 1213.33 L1441.67 1213.33 L1442.25 1213.33 L1442.84 1213.33 L1443.43 1213.33 L1444.01 1213.33 L1444.6 1213.33 L1445.19 1213.33 L1445.77 1213.33 L1446.36 1213.33 L1446.95 1213.33 L1447.53 1213.33 L1448.12 1213.33 L1448.7 1213.33 L1449.29 1213.33 L1449.88 1213.33 L1450.46 1213.33 L1451.05 1213.33 L1451.64 1213.33 L1452.22 1213.33 L1452.81 1213.33 L1453.4 1213.33 L1453.98 1213.33 L1454.57 1213.33 L1455.16 1213.33 L1455.74 1213.33 L1456.33 1213.33 L1456.91 1213.33 L1457.5 1213.33 L1458.09 1213.33 L1458.67 1213.33 L1459.26 1213.33 L1459.85 1213.33 L1460.43 1213.33 L1461.02 1213.33 L1461.61 1213.33 L1462.19 1213.33 L1462.78 1213.33 L1463.37 1213.33 L1463.95 1213.33 L1464.54 1213.33 L1465.12 1213.33 L1465.71 1213.33 L1466.3 1213.33 L1466.88 1213.33 L1467.47 1213.33 L1468.06 1213.33 L1468.64 1213.33 L1469.23 1213.33 L1469.82 1213.33 L1470.4 1213.33 L1470.99 1213.33 L1471.57 1213.33 L1472.16 1213.33 L1472.75 1213.33 L1473.33 1213.33 L1473.92 1213.33 L1474.51 1213.33 L1475.09 1213.33 L1475.68 1213.33 L1476.27 1213.33 L1476.85 1213.33 L1477.44 1213.33 L1478.03 1213.33 L1478.61 1213.33 L1479.2 1213.33 L1479.78 1213.33 L1480.37 1213.33 L1480.96 1213.33 L1481.54 1213.33 L1482.13 1213.33 L1482.72 1213.33 L1483.3 1213.33 L1483.89 1213.33 L1484.48 1213.33 L1485.06 1213.33 L1485.65 1213.33 L1486.24 1213.33 L1486.82 1213.33 L1487.41 1213.33 L1487.99 1213.33 L1488.58 1213.33 L1489.17 1213.33 L1489.75 1213.33 L1490.34 1213.33 L1490.93 1213.33 L1491.51 1213.33 L1492.1 1213.33 L1492.69 1213.33 L1493.27 1213.33 L1493.86 1213.33 L1494.45 1213.33 L1495.03 1213.33 L1495.62 1213.33 L1496.2 1213.33 L1496.79 1213.33 L1497.38 1213.33 L1497.96 1213.33 L1498.55 1213.33 L1499.14 1213.33 L1499.72 1213.33 L1500.31 1213.33 L1500.9 1213.33 L1501.48 1213.33 L1502.07 1213.33 L1502.65 1213.33 L1503.24 1213.33 L1503.83 1213.33 L1504.41 1213.33 L1505 1213.33 L1505.59 1213.33 L1506.17 1213.33 L1506.76 1213.33 L1507.35 1213.33 L1507.93 1213.33 L1508.52 1213.33 L1509.11 1213.33 L1509.69 1213.33 L1510.28 1213.33 L1510.86 1213.33 L1511.45 1213.33 L1512.04 1213.33 L1512.62 1213.33 L1513.21 1213.33 L1513.8 1213.33 L1514.38 1213.33 L1514.97 1213.33 L1515.56 1213.33 L1516.14 1213.33 L1516.73 1213.33 L1517.32 1213.33 L1517.9 1213.33 L1518.49 1213.33 L1519.07 1213.33 L1519.66 1213.33 L1520.25 1213.33 L1520.83 1213.33 L1521.42 1213.33 L1522.01 1213.33 L1522.59 1213.33 L1523.18 1213.33 L1523.77 1213.33 L1524.35 1213.33 L1524.94 1213.33 L1525.52 1213.33 L1526.11 1213.33 L1526.7 1213.33 L1527.28 1213.33 L1527.87 1213.33 L1528.46 1213.33 L1529.04 1213.33 L1529.63 1213.33 L1530.22 1213.33 L1530.8 1213.33 L1531.39 1213.33 L1531.98 1213.33 L1532.56 1213.33 L1533.15 1213.33 L1533.73 1213.33 L1534.32 1213.33 L1534.91 1213.33 L1535.49 1213.33 L1536.08 1213.33 L1536.67 1213.33 L1537.25 1213.33 L1537.84 1213.33 L1538.43 1213.33 L1539.01 1213.33 L1539.6 1213.33 L1540.19 1213.33 L1540.77 1213.33 L1541.36 1213.33 L1541.94 1213.33 L1542.53 1213.33 L1543.12 1213.33 L1543.7 1213.33 L1544.29 1213.33 L1544.88 1213.33 L1545.46 1213.33 L1546.05 1213.33 L1546.64 1213.33 L1547.22 1213.33 L1547.81 1213.33 L1548.4 1213.33 L1548.98 1213.33 L1549.57 1213.33 L1550.15 1213.33 L1550.74 1213.33 L1551.33 1213.33 L1551.91 1213.33 L1552.5 1213.33 L1553.09 1213.33 L1553.67 1213.33 L1554.26 1213.33 L1554.85 1213.33 L1555.43 1213.33 L1556.02 1213.33 L1556.6 1213.33 L1557.19 1213.33 L1557.78 1213.33 L1558.36 1213.33 L1558.95 1213.33 L1559.54 1213.33 L1560.12 1213.33 L1560.71 1213.33 L1561.3 1213.33 L1561.88 1213.33 L1562.47 1213.33 L1563.06 1213.33 L1563.64 1213.33 L1564.23 1213.33 L1564.81 1213.33 L1565.4 1213.33 L1565.99 1213.33 L1566.57 1213.33 L1567.16 1213.33 L1567.75 1213.33 L1568.33 1213.33 L1568.92 1213.33 L1569.51 1213.33 L1570.09 1213.33 L1570.68 1213.33 L1571.27 1213.33 L1571.85 1213.33 L1572.44 1213.33 L1573.02 1213.33 L1573.61 1213.33 L1574.2 1213.33 L1574.78 1213.33 L1575.37 1213.33 L1575.96 1213.33 L1576.54 1213.33 L1577.13 1213.33 L1577.72 1213.33 L1578.3 1213.33 L1578.89 1213.33 L1579.47 1213.33 L1580.06 1213.33 L1580.65 1213.33 L1581.23 1213.33 L1581.82 1213.33 L1582.41 1213.33 L1582.99 1213.33 L1583.58 1213.33 L1584.17 1213.33 L1584.75 1213.33 L1585.34 1213.33 L1585.93 1213.33 L1586.51 1213.33 L1587.1 1213.33 L1587.68 1213.33 L1588.27 1213.33 L1588.86 1213.33 L1589.44 1213.33 L1590.03 1213.33 L1590.62 1213.33 L1591.2 1213.33 L1591.79 1213.33 L1592.38 1213.33 L1592.96 1213.33 L1593.55 1213.33 L1594.14 1213.33 L1594.72 1213.33 L1595.31 1213.33 L1595.89 1213.33 L1596.48 1213.33 L1597.07 1213.33 L1597.65 1213.33 L1598.24 1213.33 L1598.83 1213.33 L1599.41 1213.33 L1600 1213.33 L1600.59 1213.33 L1601.17 1213.33 L1601.76 1213.33 L1602.34 1213.33 L1602.93 1213.33 L1603.52 1213.33 L1604.1 1213.33 L1604.69 1213.33 L1605.28 1213.33 L1605.86 1213.33 L1606.45 1213.33 L1607.04 1213.33 L1607.62 1213.33 L1608.21 1213.33 L1608.8 1213.33 L1609.38 1213.33 L1609.97 1213.33 L1610.55 1213.33 L1611.14 1213.33 L1611.73 1213.33 L1612.31 1213.33 L1612.9 1213.33 L1613.49 1213.33 L1614.07 1213.33 L1614.66 1213.33 L1615.25 1213.33 L1615.83 1213.33 L1616.42 1213.33 L1617.01 1213.33 L1617.59 1213.33 L1618.18 1213.33 L1618.76 1213.33 L1619.35 1213.33 L1619.94 1213.33 L1620.52 1213.33 L1621.11 1213.33 L1621.7 1213.33 L1622.28 1213.33 L1622.87 1213.33 L1623.46 1213.33 L1624.04 1213.33 L1624.63 1213.33 L1625.22 1213.33 L1625.8 1213.33 L1626.39 1213.33 L1626.97 1213.33 L1627.56 1213.33 L1628.15 1213.33 L1628.73 1213.33 L1629.32 1213.33 L1629.91 1213.33 L1630.49 1213.33 L1631.08 1213.33 L1631.67 1213.33 L1632.25 1213.33 L1632.84 1213.33 L1633.42 1213.33 L1634.01 1213.33 L1634.6 1213.33 L1635.18 1213.33 L1635.77 1213.33 L1636.36 1213.33 L1636.94 1213.33 L1637.53 1213.33 L1638.12 1213.33 L1638.7 1213.33 L1639.29 1213.33 L1639.88 1213.33 L1640.46 1213.33 L1641.05 1213.33 L1641.63 1213.33 L1642.22 1213.33 L1642.81 1213.33 L1643.39 1213.33 L1643.98 1213.33 L1644.57 1213.33 L1645.15 1213.33 L1645.74 1213.33 L1646.33 1213.33 L1646.91 1213.33 L1647.5 1213.33 L1648.09 1213.33 L1648.67 1213.33 L1649.26 1213.33 L1649.84 1213.33 L1650.43 1213.33 L1651.02 1213.33 L1651.6 1213.33 L1652.19 1213.33 L1652.78 1213.33 L1653.36 1213.33 L1653.95 1213.33 L1654.54 1213.33 L1655.12 1213.33 L1655.71 1213.33 L1656.29 1213.33 L1656.88 1213.33 L1657.47 1213.33 L1658.05 1213.33 L1658.64 1213.33 L1659.23 1213.33 L1659.81 1213.33 L1660.4 1213.33 L1660.99 1213.33 L1661.57 1213.33 L1662.16 1213.33 L1662.75 1213.33 L1663.33 1213.33 L1663.92 1213.33 L1664.5 1213.33 L1665.09 1213.33 L1665.68 1213.33 L1666.26 1213.33 L1666.85 1213.33 L1667.44 1213.33 L1668.02 1213.33 L1668.61 1213.33 L1669.2 1213.33 L1669.78 1213.33 L1670.37 1213.33 L1670.96 1213.33 L1671.54 1213.33 L1672.13 1213.33 L1672.71 1213.33 L1673.3 1213.33 L1673.89 1213.33 L1674.47 1213.33 L1675.06 1213.33 L1675.65 1213.33 L1676.23 1213.33 L1676.82 1213.33 L1677.41 1213.33 L1677.99 1213.33 L1678.58 1213.33 L1679.17 1213.33 L1679.75 1213.33 L1680.34 1213.33 L1680.92 1213.33 L1681.51 1213.33 L1682.1 1213.33 L1682.68 1213.33 L1683.27 1213.33 L1683.86 1213.33 L1684.44 1213.33 L1685.03 1213.33 L1685.62 1213.33 L1686.2 1213.33 L1686.79 1213.33 L1687.37 1213.33 L1687.96 1213.33 L1688.55 1213.33 L1689.13 1213.33 L1689.72 1213.33 L1690.31 1213.33 L1690.89 1213.33 L1691.48 1213.33 L1692.07 1213.33 L1692.65 1213.33 L1693.24 1213.33 L1693.83 1213.33 L1694.41 1213.33 L1695 1213.33 L1695.58 1213.33 L1696.17 1213.33 L1696.76 1213.33 L1697.34 1213.33 L1697.93 1213.33 L1698.52 1213.33 L1699.1 1213.33 L1699.69 1213.33 L1700.28 1213.33 L1700.86 1213.33 L1701.45 1213.33 L1702.04 1213.33 L1702.62 1213.33 L1703.21 1213.33 L1703.79 1213.33 L1704.38 1213.33 L1704.97 1213.33 L1705.55 1213.33 L1706.14 1213.33 L1706.73 1213.33 L1707.31 1213.33 L1707.9 1213.33 L1708.49 1213.33 L1709.07 1213.33 L1709.66 1213.33 L1710.24 1213.33 L1710.83 1213.33 L1711.42 1213.33 L1712 1213.33 L1712.59 1213.33 L1713.18 1213.33 L1713.76 1213.33 L1714.35 1213.33 L1714.94 1213.33 L1715.52 1213.33 L1716.11 1213.33 L1716.7 1213.33 L1717.28 1213.33 L1717.87 1213.33 L1718.45 1213.33 L1719.04 1213.33 L1719.63 1213.33 L1720.21 1213.33 L1720.8 1213.33 L1721.39 1213.33 L1721.97 1213.33 L1722.56 1213.33 L1723.15 1213.33 L1723.73 1213.33 L1724.32 1213.33 L1724.91 1213.33 L1725.49 1213.33 L1726.08 1213.33 L1726.66 1213.33 L1727.25 1213.33 L1727.84 1213.33 L1728.42 1213.33 L1729.01 1213.33 L1729.6 1213.33 L1730.18 1213.33 L1730.77 1213.33 L1731.36 1213.33 L1731.94 1213.33 L1732.53 1213.33 L1733.11 1213.33 L1733.7 1213.33 L1734.29 1213.33 L1734.87 1213.33 L1735.46 1213.33 L1736.05 1213.33 L1736.63 1213.33 L1737.22 1213.33 L1737.81 1213.33 L1738.39 1213.33 L1738.98 1213.33 L1739.57 1213.33 L1740.15 1213.33 L1740.74 1213.33 L1741.32 1213.33 L1741.91 1213.33 L1742.5 1213.33 L1743.08 1213.33 L1743.67 1213.33 L1744.26 1213.33 L1744.84 1213.33 L1745.43 1213.33 L1746.02 1213.33 L1746.6 1213.33 L1747.19 1213.33 L1747.78 1213.33 L1748.36 1213.33 L1748.95 1213.33 L1749.53 1213.33 L1750.12 1213.33 L1750.71 1213.33 L1751.29 1213.33 L1751.88 1213.33 L1752.47 1213.33 L1753.05 1213.33 L1753.64 1213.33 L1754.23 1213.33 L1754.81 1213.33 L1755.4 1213.33 L1755.99 1213.33 L1756.57 1213.33 L1757.16 1213.33 L1757.74 1213.33 L1758.33 1213.33 L1758.92 1213.33 L1759.5 1213.33 L1760.09 1213.33 L1760.68 1213.33 L1761.26 1213.33 L1761.85 1213.33 L1762.44 1213.33 L1763.02 1213.33 L1763.61 1213.33 L1764.19 1213.33 L1764.78 1213.33 L1765.37 1213.33 L1765.95 1213.33 L1766.54 1213.33 L1767.13 1213.33 L1767.71 1213.33 L1768.3 1213.33 L1768.89 1213.33 L1769.47 1213.33 L1770.06 1213.33 L1770.65 1213.33 L1771.23 1213.33 L1771.82 1213.33 L1772.4 1213.33 L1772.99 1213.33 L1773.58 1213.33 L1774.16 1213.33 L1774.75 1213.33 L1775.34 1213.33 L1775.92 1213.33 L1776.51 1213.33 L1777.1 1213.33 L1777.68 1213.33 L1778.27 1213.33 L1778.86 1213.33 L1779.44 1213.33 L1780.03 1213.33 L1780.61 1213.33 L1781.2 1213.33 L1781.79 1213.33 L1782.37 1213.33 L1782.96 1213.33 L1783.55 1213.33 L1784.13 1213.33 L1784.72 1213.33 L1785.31 1213.33 L1785.89 1213.33 L1786.48 1213.33 L1787.06 1213.33 L1787.65 1213.33 L1788.24 1213.33 L1788.82 1213.33 L1789.41 1213.33 L1790 1213.33 L1790.58 1213.33 L1791.17 1213.33 L1791.76 1213.33 L1792.34 1213.33 L1792.93 1213.33 L1793.52 1213.33 L1794.1 1213.33 L1794.69 1213.33 L1795.27 1213.33 L1795.86 1213.33 L1796.45 1213.33 L1797.03 1213.33 L1797.62 1213.33 L1798.21 1213.33 L1798.79 1213.33 L1799.38 1213.33 L1799.97 1213.33 L1800.55 1213.33 L1801.14 1213.33 L1801.73 1213.33 L1802.31 1213.33 L1802.9 1213.33 L1803.48 1213.33 L1804.07 1213.33 L1804.66 1213.33 L1805.24 1213.33 L1805.83 1213.33 L1806.42 1213.33 L1807 1213.33 L1807.59 1213.33 L1808.18 1213.33 L1808.76 1213.33 L1809.35 1213.33 L1809.94 1213.33 L1810.52 1213.33 L1811.11 1213.33 L1811.69 1213.33 L1812.28 1213.33 L1812.87 1213.33 L1813.45 1213.33 L1814.04 1213.33 L1814.63 1213.33 L1815.21 1213.33 L1815.8 1213.33 L1816.39 1213.33 L1816.97 1213.33 L1817.56 1213.33 L1818.14 1213.33 L1818.73 1213.33 L1819.32 1213.33 L1819.9 1213.33 L1820.49 1213.33 L1821.08 1213.33 L1821.66 1213.33 L1822.25 1213.33 L1822.84 1213.33 L1823.42 1213.33 L1824.01 1213.33 L1824.6 1213.33 L1825.18 1213.33 L1825.77 1213.33 L1826.35 1213.33 L1826.94 1213.33 L1827.53 1213.33 L1828.11 1213.33 L1828.7 1213.33 L1829.29 1213.33 L1829.87 1213.33 L1830.46 1213.33 L1831.05 1213.33 L1831.63 1213.33 L1832.22 1213.33 L1832.81 1213.33 L1833.39 1213.33 L1833.98 1213.33 L1834.56 1213.33 L1835.15 1213.33 L1835.74 1213.33 L1836.32 1213.33 L1836.91 1213.33 L1837.5 1213.33 L1838.08 1213.33 L1838.67 1213.33 L1839.26 1213.33 L1839.84 1213.33 L1840.43 1213.33 L1841.01 1213.33 L1841.6 1213.33 L1842.19 1213.33 L1842.77 1213.33 L1843.36 1213.33 L1843.95 1213.33 L1844.53 1213.33 L1845.12 1213.33 L1845.71 1213.33 L1846.29 1213.33 L1846.88 1213.33 L1847.47 1213.33 L1848.05 1213.33 L1848.64 1213.33 L1849.22 1213.33 L1849.81 1213.33 L1850.4 1213.33 L1850.98 1213.33 L1851.57 1213.33 L1852.16 1213.33 L1852.74 1213.33 L1853.33 1213.33 L1853.92 1213.33 L1854.5 1213.33 L1855.09 1213.33 L1855.68 1213.33 L1856.26 1213.33 L1856.85 1213.33 L1857.43 1213.33 L1858.02 1213.33 L1858.61 1213.33 L1859.19 1213.33 L1859.78 1213.33 L1860.37 1213.33 L1860.95 1213.33 L1861.54 1213.33 L1862.13 1213.33 L1862.71 1213.33 L1863.3 1213.33 L1863.88 1213.33 L1864.47 1213.33 L1865.06 1213.33 L1865.64 1213.33 L1866.23 1213.33 L1866.82 1213.33 L1867.4 1213.33 L1867.99 1213.33 L1868.58 1213.33 L1869.16 1213.33 L1869.75 1213.33 L1870.34 1213.33 L1870.92 1213.33 L1871.51 1213.33 L1872.09 1213.33 L1872.68 1213.33 L1873.27 1213.33 L1873.85 1213.33 L1874.44 1213.33 L1875.03 1213.33 L1875.61 1213.33 L1876.2 1213.33 L1876.79 1213.33 L1877.37 1213.33 L1877.96 1213.33 L1878.55 1213.33 L1879.13 1213.33 L1879.72 1213.33 L1880.3 1213.33 L1880.89 1213.33 L1881.48 1213.33 L1882.06 1213.33 L1882.65 1213.33 L1883.24 1213.33 L1883.82 1213.33 L1884.41 1213.33 L1885 1213.33 L1885.58 1213.33 L1886.17 1213.33 L1886.76 1213.33 L1887.34 1213.33 L1887.93 1213.33 L1888.51 1213.33 L1889.1 1213.33 L1889.69 1213.33 L1890.27 1213.33 L1890.86 1213.33 L1891.45 1213.33 L1892.03 1213.33 L1892.62 1213.33 L1893.21 1213.33 L1893.79 1213.33 L1894.38 1213.33 L1894.96 1213.33 L1895.55 1213.33 L1896.14 1213.33 L1896.72 1213.33 L1897.31 1213.33 L1897.9 1213.33 L1898.48 1213.33 L1899.07 1213.33 L1899.66 1213.33 L1900.24 1213.33 L1900.83 1213.33 L1901.42 1213.33 L1902 1213.33 L1902.59 1213.33 L1903.17 1213.33 L1903.76 1213.33 L1904.35 1213.33 L1904.93 1213.33 L1905.52 1213.33 L1906.11 1213.33 L1906.69 1213.33 L1907.28 1213.33 L1907.87 1213.33 L1908.45 1213.33 L1909.04 1213.33 L1909.63 1213.33 L1910.21 1213.33 L1910.8 1213.33 L1911.38 1213.33 L1911.97 1213.33 L1912.56 1213.33 L1913.14 1213.33 L1913.73 1213.33 L1914.32 1213.33 L1914.9 1213.33 L1915.49 1213.33 L1916.08 1213.33 L1916.66 1213.33 L1917.25 1213.33 L1917.83 1213.33 L1918.42 1213.33 L1919.01 1213.33 L1919.59 1213.33 L1920.18 1213.33 L1920.77 1213.33 L1921.35 1213.33 L1921.94 1213.33 L1922.53 1213.33 L1923.11 1213.33 L1923.7 1213.33 L1924.29 1213.33 L1924.87 1213.33 L1925.46 1213.33 L1926.04 1213.33 L1926.63 1213.33 L1927.22 1213.33 L1927.8 1213.33 L1928.39 1213.33 L1928.98 1213.33 L1929.56 1213.33 L1930.15 1213.33 L1930.74 1213.33 L1931.32 1213.33 L1931.91 1213.33 L1932.5 1213.33 L1933.08 1213.33 L1933.67 1213.33 L1934.25 1213.33 L1934.84 1213.33 L1935.43 1213.33 L1936.01 1213.33 L1936.6 1213.33 L1937.19 1213.33 L1937.77 1213.33 L1938.36 1213.33 L1938.95 1213.33 L1939.53 1213.33 L1940.12 1213.33 L1940.71 1213.33 L1941.29 1213.33 L1941.88 1213.33 L1942.46 1213.33 L1943.05 1213.33 L1943.64 1213.33 L1944.22 1213.33 L1944.81 1213.33 L1945.4 1213.33 L1945.98 1213.33 L1946.57 1213.33 L1947.16 1213.33 L1947.74 1213.33 L1948.33 1213.33 L1948.91 1213.33 L1949.5 1213.33 L1950.09 1213.33 L1950.67 1213.33 L1951.26 1213.33 L1951.85 1213.33 L1952.43 1213.33 L1953.02 1213.33 L1953.61 1213.33 L1954.19 1213.33 L1954.78 1213.33 L1955.37 1213.33 L1955.95 1213.33 L1956.54 1213.33 L1957.12 1213.33 L1957.71 1213.33 L1958.3 1213.33 L1958.88 1213.33 L1959.47 1213.33 L1960.06 1213.33 L1960.64 1213.33 L1961.23 1213.33 L1961.82 1213.33 L1962.4 1213.33 L1962.99 1213.33 L1963.58 1213.33 L1964.16 1213.33 L1964.75 1213.33 L1965.33 1213.33 L1965.92 1213.33 L1966.51 1213.33 L1967.09 1213.33 L1967.68 1213.33 L1968.27 1213.33 L1968.85 1213.33 L1969.44 1213.33 L1970.03 1213.33 L1970.61 1213.33 L1971.2 1213.33 L1971.78 1213.33 L1972.37 1213.33 L1972.96 1213.33 L1973.54 1213.33 L1974.13 1213.33 L1974.72 1213.33 L1975.3 1213.33 L1975.89 1213.33 L1976.48 1213.33 L1977.06 1213.33 L1977.65 1213.33 L1978.24 1213.33 L1978.82 1213.33 L1979.41 1213.33 L1979.99 1213.33 L1980.58 1213.33 L1981.17 1213.33 L1981.75 1213.33 L1982.34 1213.33 L1982.93 1213.33 L1983.51 1213.33 L1984.1 1213.33 L1984.69 1213.33 L1985.27 1213.33 L1985.86 1213.33 L1986.45 1213.33 L1987.03 1213.33 L1987.62 1213.33 L1988.2 1213.33 L1988.79 1213.33 L1989.38 1213.33 L1989.96 1213.33 L1990.55 1213.33 L1991.14 1213.33 L1991.72 1213.33 L1992.31 1213.33 L1992.9 1213.33 L1993.48 1213.33 L1994.07 1213.33 L1994.65 1213.33 L1995.24 1213.33 L1995.83 1213.33 L1996.41 1213.33 L1997 1213.33 L1997.59 1213.33 L1998.17 1213.33 L1998.76 1213.33 L1999.35 1213.33 L1999.93 1213.33 L2000.52 1213.33 L2001.11 1213.33 L2001.69 1213.33 L2002.28 1213.33 L2002.86 1213.33 L2003.45 1213.33 L2004.04 1213.33 L2004.62 1213.33 L2005.21 1213.33 L2005.8 1213.33 L2006.38 1213.33 L2006.97 1213.33 L2007.56 1213.33 L2008.14 1213.33 L2008.73 1213.33 L2009.32 1213.33 L2009.9 1213.33 L2010.49 1213.33 L2011.07 1213.33 L2011.66 1213.33 L2012.25 1213.33 L2012.83 1213.33 L2013.42 1213.33 L2014.01 1213.33 L2014.59 1213.33 L2015.18 1213.33 L2015.77 1213.33 L2016.35 1213.33 L2016.94 1213.33 L2017.53 1213.33 L2018.11 1213.33 L2018.7 1213.33 L2019.28 1213.33 L2019.87 1213.33 L2020.46 1213.33 L2021.04 1213.33 L2021.63 1213.33 L2022.22 1213.33 L2022.8 1213.33 L2023.39 1213.33 L2023.98 1213.33 L2024.56 1213.33 L2025.15 1213.33 L2025.73 1213.33 L2026.32 1213.33 L2026.91 1213.33 L2027.49 1213.33 L2028.08 1213.33 L2028.67 1213.33 L2029.25 1213.33 L2029.84 1213.33 L2030.43 1213.33 L2031.01 1213.33 L2031.6 1213.33 L2032.19 1213.33 L2032.77 1213.33 L2033.36 1213.33 L2033.94 1213.33 L2034.53 1213.33 L2035.12 1213.33 L2035.7 1213.33 L2036.29 1213.33 L2036.88 1213.33 L2037.46 1213.33 L2038.05 1213.33 L2038.64 1213.33 L2039.22 1213.33 L2039.81 1213.33 L2040.4 1213.33 L2040.98 1213.33 L2041.57 1213.33 L2042.15 1213.33 L2042.74 1213.33 L2043.33 1213.33 L2043.91 1213.33 L2044.5 1213.33 L2045.09 1213.33 L2045.67 1213.33 L2046.26 1213.33 L2046.85 1213.33 L2047.43 1213.33 L2048.02 1213.33 L2048.6 1213.33 L2049.19 1213.33 L2049.78 1213.33 L2050.36 1213.33 L2050.95 1213.33 L2051.54 1213.33 L2052.12 1213.33 L2052.71 1213.33 L2053.3 1213.33 L2053.88 1213.33 L2054.47 1213.33 L2055.06 1213.33 L2055.64 1213.33 L2056.23 1213.33 L2056.81 1213.33 L2057.4 1213.33 L2057.99 1213.33 L2058.57 1213.33 L2059.16 1213.33 L2059.75 1213.33 L2060.33 1213.33 L2060.92 1213.33 L2061.51 1213.33 L2062.09 1213.33 L2062.68 1213.33 L2063.27 1213.33 L2063.85 1213.33 L2064.44 1213.33 L2065.02 1213.33 L2065.61 1213.33 L2066.2 1213.33 L2066.78 1213.33 L2067.37 1213.33 L2067.96 1213.33 L2068.54 1213.33 L2069.13 1213.33 L2069.72 1213.33 L2070.3 1213.33 L2070.89 1213.33 L2071.48 1213.33 L2072.06 1213.33 L2072.65 1213.33 L2073.23 1213.33 L2073.82 1213.33 L2074.41 1213.33 L2074.99 1213.33 L2075.58 1213.33 L2076.17 1213.33 L2076.75 1213.33 L2077.34 1213.33 L2077.93 1213.33 L2078.51 1213.33 L2079.1 1213.33 L2079.68 1213.33 L2080.27 1213.33 L2080.86 1213.33 L2081.44 1213.33 L2082.03 1213.33 L2082.62 1213.33 L2083.2 1213.33 L2083.79 1213.33 L2084.38 1213.33 L2084.96 1213.33 L2085.55 1213.33 L2086.14 1213.33 L2086.72 1213.33 L2087.31 1213.33 L2087.89 1213.33 L2088.48 1213.33 L2089.07 1213.33 L2089.65 1213.33 L2090.24 1213.33 L2090.83 1213.33 L2091.41 1213.33 L2092 1213.33 L2092.59 1213.33 L2093.17 1213.33 L2093.76 1213.33 L2094.35 1213.33 L2094.93 1213.33 L2095.52 1213.33 L2096.1 1213.33 L2096.69 1213.33 L2097.28 1213.33 L2097.86 1213.33 L2098.45 1213.33 L2099.04 1213.33 L2099.62 1213.33 L2100.21 1213.33 L2100.8 1213.33 L2101.38 1213.33 L2101.97 1213.33 L2102.55 1213.33 L2103.14 1213.33 L2103.73 1213.33 L2104.31 1213.33 L2104.9 1213.33 L2105.49 1213.33 L2106.07 1213.33 L2106.66 1213.33 L2107.25 1213.33 L2107.83 1213.33 L2108.42 1213.33 L2109.01 1213.33 L2109.59 1213.33 L2110.18 1213.33 L2110.76 1213.33 L2111.35 1213.33 L2111.94 1213.33 L2112.52 1213.33 L2113.11 1213.33 L2113.7 1213.33 L2114.28 1213.33 L2114.87 1213.33 L2115.46 1213.33 L2116.04 1213.33 L2116.63 1213.33 L2117.22 1213.33 L2117.8 1213.33 L2118.39 1213.33 L2118.97 1213.33 L2119.56 1213.33 L2120.15 1213.33 L2120.73 1213.33 L2121.32 1213.33 L2121.91 1213.33 L2122.49 1213.33 L2123.08 1213.33 L2123.67 1213.33 L2124.25 1213.33 L2124.84 1213.33 L2125.42 1213.33 L2126.01 1213.33 L2126.6 1213.33 L2127.18 1213.33 L2127.77 1213.33 L2128.36 1213.33 L2128.94 1213.33 L2129.53 1213.33 L2130.12 1213.33 L2130.7 1213.33 L2131.29 1213.33 L2131.88 1213.33 L2132.46 1213.33 L2133.05 1213.33 L2133.63 1213.33 L2134.22 1213.33 L2134.81 1213.33 L2135.39 1213.33 L2135.98 1213.33 L2136.57 1213.33 L2137.15 1213.33 L2137.74 1213.33 L2138.33 1213.33 L2138.91 1213.33 L2139.5 1213.33 L2140.09 1213.33 L2140.67 1213.33 L2141.26 1213.33 L2141.84 1213.33 L2142.43 1213.33 L2143.02 1213.33 L2143.6 1213.33 L2144.19 1213.33 L2144.78 1213.33 L2145.36 1213.33 L2145.95 1213.33 L2146.54 1213.33 L2147.12 1213.33 L2147.71 1213.33 L2148.3 1213.33 L2148.88 1213.33 L2149.47 1213.33 L2150.05 1213.33 L2150.64 1213.33 L2151.23 1213.33 L2151.81 1213.33 L2152.4 1213.33 L2152.99 1213.33 L2153.57 1213.33 L2154.16 1213.33 L2154.75 1213.33 L2155.33 1213.33 L2155.92 1213.33 L2156.5 1213.33 L2157.09 1213.33 L2157.68 1213.33 L2158.26 1213.33 L2158.26 1212.66 L2157.68 1212.66 L2157.09 1212.66 L2156.5 1212.66 L2155.92 1212.66 L2155.33 1212.66 L2154.75 1212.66 L2154.16 1212.66 L2153.57 1212.66 L2152.99 1212.66 L2152.4 1212.66 L2151.81 1212.66 L2151.23 1212.66 L2150.64 1212.66 L2150.05 1212.66 L2149.47 1212.66 L2148.88 1212.66 L2148.3 1212.66 L2147.71 1212.66 L2147.12 1212.66 L2146.54 1212.66 L2145.95 1212.66 L2145.36 1212.66 L2144.78 1212.66 L2144.19 1212.66 L2143.6 1212.66 L2143.02 1212.66 L2142.43 1212.66 L2141.84 1212.66 L2141.26 1212.66 L2140.67 1212.66 L2140.09 1212.66 L2139.5 1212.66 L2138.91 1212.66 L2138.33 1212.66 L2137.74 1212.66 L2137.15 1212.66 L2136.57 1212.66 L2135.98 1212.66 L2135.39 1212.66 L2134.81 1212.66 L2134.22 1212.66 L2133.63 1212.66 L2133.05 1212.66 L2132.46 1212.66 L2131.88 1212.66 L2131.29 1212.66 L2130.7 1212.66 L2130.12 1212.66 L2129.53 1212.66 L2128.94 1212.66 L2128.36 1212.66 L2127.77 1212.66 L2127.18 1212.66 L2126.6 1212.66 L2126.01 1212.66 L2125.42 1212.66 L2124.84 1212.66 L2124.25 1212.66 L2123.67 1212.66 L2123.08 1212.66 L2122.49 1212.66 L2121.91 1212.66 L2121.32 1212.66 L2120.73 1212.66 L2120.15 1212.66 L2119.56 1212.66 L2118.97 1212.66 L2118.39 1212.66 L2117.8 1212.66 L2117.22 1212.66 L2116.63 1212.66 L2116.04 1212.66 L2115.46 1212.66 L2114.87 1212.66 L2114.28 1212.66 L2113.7 1212.66 L2113.11 1212.66 L2112.52 1212.66 L2111.94 1212.66 L2111.35 1212.66 L2110.76 1212.66 L2110.18 1212.66 L2109.59 1212.66 L2109.01 1212.66 L2108.42 1212.66 L2107.83 1212.66 L2107.25 1212.66 L2106.66 1212.66 L2106.07 1212.66 L2105.49 1212.66 L2104.9 1212.66 L2104.31 1212.66 L2103.73 1212.66 L2103.14 1212.66 L2102.55 1212.66 L2101.97 1212.66 L2101.38 1212.66 L2100.8 1212.66 L2100.21 1212.66 L2099.62 1212.66 L2099.04 1212.66 L2098.45 1212.66 L2097.86 1212.66 L2097.28 1212.66 L2096.69 1212.66 L2096.1 1212.66 L2095.52 1212.66 L2094.93 1212.66 L2094.35 1212.66 L2093.76 1212.66 L2093.17 1212.66 L2092.59 1212.66 L2092 1212.66 L2091.41 1212.66 L2090.83 1212.66 L2090.24 1212.66 L2089.65 1212.66 L2089.07 1212.66 L2088.48 1212.66 L2087.89 1212.66 L2087.31 1212.66 L2086.72 1212.66 L2086.14 1212.66 L2085.55 1212.66 L2084.96 1212.66 L2084.38 1212.66 L2083.79 1212.66 L2083.2 1212.66 L2082.62 1212.66 L2082.03 1212.66 L2081.44 1212.66 L2080.86 1212.66 L2080.27 1212.66 L2079.68 1212.66 L2079.1 1212.66 L2078.51 1212.66 L2077.93 1212.66 L2077.34 1212.66 L2076.75 1212.66 L2076.17 1212.66 L2075.58 1212.66 L2074.99 1212.66 L2074.41 1212.66 L2073.82 1212.66 L2073.23 1212.66 L2072.65 1212.66 L2072.06 1212.66 L2071.48 1212.66 L2070.89 1212.66 L2070.3 1212.66 L2069.72 1212.66 L2069.13 1212.66 L2068.54 1212.66 L2067.96 1212.66 L2067.37 1212.66 L2066.78 1212.66 L2066.2 1212.66 L2065.61 1212.66 L2065.02 1212.66 L2064.44 1212.66 L2063.85 1212.66 L2063.27 1212.66 L2062.68 1212.66 L2062.09 1212.66 L2061.51 1212.66 L2060.92 1212.66 L2060.33 1212.66 L2059.75 1212.66 L2059.16 1212.66 L2058.57 1212.66 L2057.99 1212.66 L2057.4 1212.66 L2056.81 1212.66 L2056.23 1212.66 L2055.64 1212.66 L2055.06 1212.66 L2054.47 1212.66 L2053.88 1212.66 L2053.3 1212.66 L2052.71 1212.66 L2052.12 1212.66 L2051.54 1212.66 L2050.95 1212.66 L2050.36 1212.66 L2049.78 1212.66 L2049.19 1212.66 L2048.6 1212.66 L2048.02 1212.66 L2047.43 1212.66 L2046.85 1212.66 L2046.26 1212.66 L2045.67 1212.66 L2045.09 1212.66 L2044.5 1212.66 L2043.91 1212.66 L2043.33 1212.66 L2042.74 1212.66 L2042.15 1212.66 L2041.57 1212.66 L2040.98 1212.66 L2040.4 1212.66 L2039.81 1212.66 L2039.22 1212.66 L2038.64 1212.66 L2038.05 1212.66 L2037.46 1212.66 L2036.88 1212.66 L2036.29 1212.66 L2035.7 1212.66 L2035.12 1212.66 L2034.53 1212.66 L2033.94 1212.66 L2033.36 1212.66 L2032.77 1212.66 L2032.19 1212.66 L2031.6 1212.66 L2031.01 1212.66 L2030.43 1212.66 L2029.84 1212.66 L2029.25 1212.66 L2028.67 1212.66 L2028.08 1212.66 L2027.49 1212.66 L2026.91 1212.66 L2026.32 1212.66 L2025.73 1212.66 L2025.15 1212.66 L2024.56 1212.66 L2023.98 1212.66 L2023.39 1212.66 L2022.8 1212.66 L2022.22 1212.66 L2021.63 1212.66 L2021.04 1212.66 L2020.46 1212.66 L2019.87 1212.66 L2019.28 1212.66 L2018.7 1212.66 L2018.11 1212.66 L2017.53 1212.66 L2016.94 1212.66 L2016.35 1212.66 L2015.77 1212.66 L2015.18 1212.66 L2014.59 1212.66 L2014.01 1212.66 L2013.42 1212.66 L2012.83 1212.66 L2012.25 1212.66 L2011.66 1212.66 L2011.07 1212.66 L2010.49 1212.66 L2009.9 1212.66 L2009.32 1212.66 L2008.73 1212.66 L2008.14 1212.66 L2007.56 1212.66 L2006.97 1212.66 L2006.38 1212.66 L2005.8 1212.66 L2005.21 1212.66 L2004.62 1212.66 L2004.04 1212.66 L2003.45 1212.66 L2002.86 1212.66 L2002.28 1212.66 L2001.69 1212.66 L2001.11 1212.66 L2000.52 1212.66 L1999.93 1212.66 L1999.35 1212.66 L1998.76 1212.66 L1998.17 1212.66 L1997.59 1212.66 L1997 1212.66 L1996.41 1212.66 L1995.83 1212.66 L1995.24 1212.66 L1994.65 1212.66 L1994.07 1212.66 L1993.48 1212.66 L1992.9 1212.66 L1992.31 1212.66 L1991.72 1212.66 L1991.14 1212.66 L1990.55 1212.66 L1989.96 1212.66 L1989.38 1212.66 L1988.79 1212.66 L1988.2 1212.66 L1987.62 1212.66 L1987.03 1212.66 L1986.45 1212.66 L1985.86 1212.66 L1985.27 1212.66 L1984.69 1212.66 L1984.1 1212.66 L1983.51 1212.66 L1982.93 1212.66 L1982.34 1212.66 L1981.75 1212.66 L1981.17 1212.66 L1980.58 1212.66 L1979.99 1212.66 L1979.41 1212.66 L1978.82 1212.66 L1978.24 1212.66 L1977.65 1212.66 L1977.06 1212.66 L1976.48 1212.66 L1975.89 1212.66 L1975.3 1212.66 L1974.72 1212.66 L1974.13 1212.66 L1973.54 1212.66 L1972.96 1212.66 L1972.37 1212.66 L1971.78 1212.66 L1971.2 1212.66 L1970.61 1212.66 L1970.03 1212.66 L1969.44 1212.66 L1968.85 1212.66 L1968.27 1212.66 L1967.68 1212.66 L1967.09 1212.66 L1966.51 1212.66 L1965.92 1212.66 L1965.33 1212.66 L1964.75 1212.66 L1964.16 1212.66 L1963.58 1212.66 L1962.99 1212.66 L1962.4 1212.66 L1961.82 1212.66 L1961.23 1212.66 L1960.64 1212.66 L1960.06 1212.66 L1959.47 1212.66 L1958.88 1212.66 L1958.3 1212.66 L1957.71 1212.66 L1957.12 1212.66 L1956.54 1212.66 L1955.95 1212.66 L1955.37 1212.66 L1954.78 1212.66 L1954.19 1212.66 L1953.61 1212.66 L1953.02 1212.66 L1952.43 1212.66 L1951.85 1212.66 L1951.26 1212.66 L1950.67 1212.66 L1950.09 1212.66 L1949.5 1212.66 L1948.91 1212.66 L1948.33 1212.66 L1947.74 1212.66 L1947.16 1212.66 L1946.57 1212.66 L1945.98 1212.66 L1945.4 1212.66 L1944.81 1212.66 L1944.22 1212.66 L1943.64 1212.66 L1943.05 1212.66 L1942.46 1212.66 L1941.88 1212.66 L1941.29 1212.66 L1940.71 1212.66 L1940.12 1212.66 L1939.53 1212.66 L1938.95 1212.66 L1938.36 1212.66 L1937.77 1212.66 L1937.19 1212.66 L1936.6 1212.66 L1936.01 1212.66 L1935.43 1212.66 L1934.84 1212.66 L1934.25 1212.66 L1933.67 1212.66 L1933.08 1212.66 L1932.5 1212.66 L1931.91 1212.66 L1931.32 1212.66 L1930.74 1212.66 L1930.15 1212.66 L1929.56 1212.66 L1928.98 1212.66 L1928.39 1212.66 L1927.8 1212.66 L1927.22 1212.66 L1926.63 1212.66 L1926.04 1212.66 L1925.46 1212.66 L1924.87 1212.66 L1924.29 1212.66 L1923.7 1212.66 L1923.11 1212.66 L1922.53 1212.66 L1921.94 1212.66 L1921.35 1212.66 L1920.77 1212.66 L1920.18 1212.66 L1919.59 1212.66 L1919.01 1212.66 L1918.42 1212.66 L1917.83 1212.66 L1917.25 1212.66 L1916.66 1212.66 L1916.08 1212.66 L1915.49 1212.66 L1914.9 1212.66 L1914.32 1212.66 L1913.73 1212.66 L1913.14 1212.66 L1912.56 1212.66 L1911.97 1212.66 L1911.38 1212.66 L1910.8 1212.66 L1910.21 1212.66 L1909.63 1212.66 L1909.04 1212.66 L1908.45 1212.66 L1907.87 1212.66 L1907.28 1212.66 L1906.69 1212.66 L1906.11 1212.66 L1905.52 1212.66 L1904.93 1212.66 L1904.35 1212.66 L1903.76 1212.66 L1903.17 1212.66 L1902.59 1212.66 L1902 1212.66 L1901.42 1212.66 L1900.83 1212.66 L1900.24 1212.66 L1899.66 1212.66 L1899.07 1212.66 L1898.48 1212.66 L1897.9 1212.66 L1897.31 1212.66 L1896.72 1212.66 L1896.14 1212.66 L1895.55 1212.66 L1894.96 1212.66 L1894.38 1212.66 L1893.79 1212.66 L1893.21 1212.66 L1892.62 1212.66 L1892.03 1212.66 L1891.45 1212.66 L1890.86 1212.66 L1890.27 1212.66 L1889.69 1212.66 L1889.1 1212.66 L1888.51 1212.66 L1887.93 1212.66 L1887.34 1212.66 L1886.76 1212.66 L1886.17 1212.66 L1885.58 1212.66 L1885 1212.66 L1884.41 1212.66 L1883.82 1212.66 L1883.24 1212.66 L1882.65 1212.66 L1882.06 1212.66 L1881.48 1212.66 L1880.89 1212.66 L1880.3 1212.66 L1879.72 1212.66 L1879.13 1212.66 L1878.55 1212.66 L1877.96 1212.66 L1877.37 1212.66 L1876.79 1212.66 L1876.2 1212.66 L1875.61 1212.66 L1875.03 1212.66 L1874.44 1212.66 L1873.85 1212.66 L1873.27 1212.66 L1872.68 1212.66 L1872.09 1212.66 L1871.51 1212.66 L1870.92 1212.66 L1870.34 1212.66 L1869.75 1212.66 L1869.16 1212.66 L1868.58 1212.66 L1867.99 1212.66 L1867.4 1212.66 L1866.82 1212.66 L1866.23 1212.66 L1865.64 1212.66 L1865.06 1212.66 L1864.47 1212.66 L1863.88 1212.66 L1863.3 1212.66 L1862.71 1212.66 L1862.13 1212.66 L1861.54 1212.66 L1860.95 1212.66 L1860.37 1212.66 L1859.78 1212.66 L1859.19 1212.66 L1858.61 1212.66 L1858.02 1212.66 L1857.43 1212.66 L1856.85 1212.66 L1856.26 1212.66 L1855.68 1212.66 L1855.09 1212.66 L1854.5 1212.66 L1853.92 1212.66 L1853.33 1212.66 L1852.74 1212.66 L1852.16 1212.66 L1851.57 1212.66 L1850.98 1212.66 L1850.4 1212.66 L1849.81 1212.66 L1849.22 1212.66 L1848.64 1212.66 L1848.05 1212.66 L1847.47 1212.66 L1846.88 1212.66 L1846.29 1212.66 L1845.71 1212.66 L1845.12 1212.66 L1844.53 1212.66 L1843.95 1212.66 L1843.36 1212.66 L1842.77 1212.66 L1842.19 1212.66 L1841.6 1212.66 L1841.01 1212.66 L1840.43 1212.66 L1839.84 1212.66 L1839.26 1212.66 L1838.67 1212.66 L1838.08 1212.66 L1837.5 1212.66 L1836.91 1212.66 L1836.32 1212.66 L1835.74 1212.66 L1835.15 1212.66 L1834.56 1212.66 L1833.98 1212.66 L1833.39 1212.66 L1832.81 1212.66 L1832.22 1212.66 L1831.63 1212.66 L1831.05 1212.66 L1830.46 1212.66 L1829.87 1212.66 L1829.29 1212.66 L1828.7 1212.66 L1828.11 1212.66 L1827.53 1212.66 L1826.94 1212.66 L1826.35 1212.66 L1825.77 1212.66 L1825.18 1212.66 L1824.6 1212.66 L1824.01 1212.66 L1823.42 1212.66 L1822.84 1212.66 L1822.25 1212.66 L1821.66 1212.66 L1821.08 1212.66 L1820.49 1212.66 L1819.9 1212.66 L1819.32 1212.66 L1818.73 1212.66 L1818.14 1212.66 L1817.56 1212.66 L1816.97 1212.66 L1816.39 1212.66 L1815.8 1212.66 L1815.21 1212.66 L1814.63 1212.66 L1814.04 1212.66 L1813.45 1212.66 L1812.87 1212.66 L1812.28 1212.66 L1811.69 1212.66 L1811.11 1212.66 L1810.52 1212.66 L1809.94 1212.66 L1809.35 1212.66 L1808.76 1212.66 L1808.18 1212.66 L1807.59 1212.66 L1807 1212.66 L1806.42 1212.66 L1805.83 1212.66 L1805.24 1212.66 L1804.66 1212.66 L1804.07 1212.66 L1803.48 1212.66 L1802.9 1212.66 L1802.31 1212.66 L1801.73 1212.66 L1801.14 1212.66 L1800.55 1212.66 L1799.97 1212.66 L1799.38 1212.66 L1798.79 1212.66 L1798.21 1212.66 L1797.62 1212.66 L1797.03 1212.66 L1796.45 1212.66 L1795.86 1212.66 L1795.27 1212.66 L1794.69 1212.66 L1794.1 1212.66 L1793.52 1212.66 L1792.93 1212.66 L1792.34 1212.66 L1791.76 1212.66 L1791.17 1212.66 L1790.58 1212.66 L1790 1212.66 L1789.41 1212.66 L1788.82 1212.66 L1788.24 1212.66 L1787.65 1212.66 L1787.06 1212.66 L1786.48 1212.66 L1785.89 1212.66 L1785.31 1212.66 L1784.72 1212.66 L1784.13 1212.66 L1783.55 1212.66 L1782.96 1212.66 L1782.37 1212.66 L1781.79 1212.66 L1781.2 1212.66 L1780.61 1212.66 L1780.03 1212.66 L1779.44 1212.66 L1778.86 1212.66 L1778.27 1212.66 L1777.68 1212.66 L1777.1 1212.66 L1776.51 1212.66 L1775.92 1212.66 L1775.34 1212.66 L1774.75 1212.66 L1774.16 1212.66 L1773.58 1212.66 L1772.99 1212.66 L1772.4 1212.66 L1771.82 1212.66 L1771.23 1212.66 L1770.65 1212.66 L1770.06 1212.66 L1769.47 1212.66 L1768.89 1212.66 L1768.3 1212.66 L1767.71 1212.66 L1767.13 1212.66 L1766.54 1212.66 L1765.95 1212.66 L1765.37 1212.66 L1764.78 1212.66 L1764.19 1212.66 L1763.61 1212.66 L1763.02 1212.66 L1762.44 1212.66 L1761.85 1212.66 L1761.26 1212.66 L1760.68 1212.66 L1760.09 1212.66 L1759.5 1212.66 L1758.92 1212.66 L1758.33 1212.66 L1757.74 1212.66 L1757.16 1212.66 L1756.57 1212.66 L1755.99 1212.66 L1755.4 1212.66 L1754.81 1212.66 L1754.23 1212.66 L1753.64 1212.66 L1753.05 1212.66 L1752.47 1212.66 L1751.88 1212.66 L1751.29 1212.66 L1750.71 1212.66 L1750.12 1212.66 L1749.53 1212.66 L1748.95 1212.66 L1748.36 1212.66 L1747.78 1212.66 L1747.19 1212.66 L1746.6 1212.66 L1746.02 1212.66 L1745.43 1212.66 L1744.84 1212.66 L1744.26 1212.66 L1743.67 1212.66 L1743.08 1212.66 L1742.5 1212.66 L1741.91 1212.66 L1741.32 1212.66 L1740.74 1212.66 L1740.15 1212.66 L1739.57 1212.66 L1738.98 1212.66 L1738.39 1212.66 L1737.81 1212.66 L1737.22 1212.66 L1736.63 1212.66 L1736.05 1212.66 L1735.46 1212.66 L1734.87 1212.66 L1734.29 1212.66 L1733.7 1212.66 L1733.11 1212.66 L1732.53 1212.66 L1731.94 1212.66 L1731.36 1212.66 L1730.77 1212.66 L1730.18 1212.66 L1729.6 1212.66 L1729.01 1212.66 L1728.42 1212.66 L1727.84 1212.66 L1727.25 1212.66 L1726.66 1212.66 L1726.08 1212.66 L1725.49 1212.66 L1724.91 1212.66 L1724.32 1212.66 L1723.73 1212.66 L1723.15 1212.66 L1722.56 1212.66 L1721.97 1212.66 L1721.39 1212.66 L1720.8 1212.66 L1720.21 1212.66 L1719.63 1212.66 L1719.04 1212.66 L1718.45 1212.66 L1717.87 1212.66 L1717.28 1212.66 L1716.7 1212.66 L1716.11 1212.66 L1715.52 1212.66 L1714.94 1212.66 L1714.35 1212.66 L1713.76 1212.66 L1713.18 1212.66 L1712.59 1212.66 L1712 1212.66 L1711.42 1212.66 L1710.83 1212.66 L1710.24 1212.66 L1709.66 1212.66 L1709.07 1212.66 L1708.49 1212.66 L1707.9 1212.66 L1707.31 1212.66 L1706.73 1212.66 L1706.14 1212.66 L1705.55 1212.66 L1704.97 1212.66 L1704.38 1212.66 L1703.79 1212.66 L1703.21 1212.66 L1702.62 1212.66 L1702.04 1212.66 L1701.45 1212.66 L1700.86 1212.66 L1700.28 1212.66 L1699.69 1212.66 L1699.1 1212.66 L1698.52 1212.66 L1697.93 1212.66 L1697.34 1212.66 L1696.76 1212.66 L1696.17 1212.66 L1695.58 1212.66 L1695 1212.66 L1694.41 1212.66 L1693.83 1212.66 L1693.24 1212.66 L1692.65 1212.66 L1692.07 1212.66 L1691.48 1212.66 L1690.89 1212.66 L1690.31 1212.66 L1689.72 1212.66 L1689.13 1212.66 L1688.55 1212.66 L1687.96 1212.66 L1687.37 1212.66 L1686.79 1212.66 L1686.2 1212.66 L1685.62 1212.66 L1685.03 1212.66 L1684.44 1212.66 L1683.86 1212.66 L1683.27 1212.66 L1682.68 1212.66 L1682.1 1212.66 L1681.51 1212.66 L1680.92 1212.66 L1680.34 1212.66 L1679.75 1212.66 L1679.17 1212.66 L1678.58 1212.66 L1677.99 1212.66 L1677.41 1212.66 L1676.82 1212.66 L1676.23 1212.66 L1675.65 1212.66 L1675.06 1212.66 L1674.47 1212.66 L1673.89 1212.66 L1673.3 1212.66 L1672.71 1212.66 L1672.13 1212.66 L1671.54 1212.66 L1670.96 1212.66 L1670.37 1212.66 L1669.78 1212.66 L1669.2 1212.66 L1668.61 1212.66 L1668.02 1212.66 L1667.44 1212.66 L1666.85 1212.66 L1666.26 1212.66 L1665.68 1212.66 L1665.09 1212.66 L1664.5 1212.66 L1663.92 1212.66 L1663.33 1212.66 L1662.75 1212.66 L1662.16 1212.66 L1661.57 1212.66 L1660.99 1212.66 L1660.4 1212.66 L1659.81 1212.66 L1659.23 1212.66 L1658.64 1212.66 L1658.05 1212.66 L1657.47 1212.66 L1656.88 1212.66 L1656.29 1212.66 L1655.71 1212.66 L1655.12 1212.66 L1654.54 1212.66 L1653.95 1212.66 L1653.36 1212.66 L1652.78 1212.66 L1652.19 1212.66 L1651.6 1212.66 L1651.02 1212.66 L1650.43 1212.66 L1649.84 1212.66 L1649.26 1212.66 L1648.67 1212.66 L1648.09 1212.66 L1647.5 1212.66 L1646.91 1212.66 L1646.33 1212.66 L1645.74 1212.66 L1645.15 1212.66 L1644.57 1212.66 L1643.98 1212.66 L1643.39 1212.66 L1642.81 1212.66 L1642.22 1212.66 L1641.63 1212.66 L1641.05 1212.66 L1640.46 1212.66 L1639.88 1212.66 L1639.29 1212.66 L1638.7 1212.66 L1638.12 1212.66 L1637.53 1212.66 L1636.94 1212.66 L1636.36 1212.66 L1635.77 1212.66 L1635.18 1212.66 L1634.6 1212.66 L1634.01 1212.66 L1633.42 1212.66 L1632.84 1212.66 L1632.25 1212.66 L1631.67 1212.66 L1631.08 1212.66 L1630.49 1212.66 L1629.91 1212.66 L1629.32 1212.66 L1628.73 1212.66 L1628.15 1212.66 L1627.56 1212.66 L1626.97 1212.66 L1626.39 1212.66 L1625.8 1212.66 L1625.22 1212.66 L1624.63 1212.66 L1624.04 1212.66 L1623.46 1212.66 L1622.87 1212.66 L1622.28 1212.66 L1621.7 1212.66 L1621.11 1212.66 L1620.52 1212.66 L1619.94 1212.66 L1619.35 1212.66 L1618.76 1212.66 L1618.18 1212.66 L1617.59 1212.66 L1617.01 1212.66 L1616.42 1212.66 L1615.83 1212.66 L1615.25 1212.66 L1614.66 1212.66 L1614.07 1212.66 L1613.49 1212.66 L1612.9 1212.66 L1612.31 1212.66 L1611.73 1212.66 L1611.14 1212.66 L1610.55 1212.66 L1609.97 1212.66 L1609.38 1212.66 L1608.8 1212.66 L1608.21 1212.66 L1607.62 1212.66 L1607.04 1212.66 L1606.45 1212.66 L1605.86 1212.66 L1605.28 1212.66 L1604.69 1212.66 L1604.1 1212.66 L1603.52 1212.66 L1602.93 1212.66 L1602.34 1212.66 L1601.76 1212.66 L1601.17 1212.66 L1600.59 1212.66 L1600 1212.66 L1599.41 1212.66 L1598.83 1212.66 L1598.24 1212.66 L1597.65 1212.66 L1597.07 1212.66 L1596.48 1212.66 L1595.89 1212.66 L1595.31 1212.66 L1594.72 1212.66 L1594.14 1212.66 L1593.55 1212.66 L1592.96 1212.66 L1592.38 1212.66 L1591.79 1212.66 L1591.2 1212.66 L1590.62 1212.66 L1590.03 1212.66 L1589.44 1212.66 L1588.86 1212.66 L1588.27 1212.66 L1587.68 1212.66 L1587.1 1212.66 L1586.51 1212.66 L1585.93 1212.66 L1585.34 1212.66 L1584.75 1212.66 L1584.17 1212.66 L1583.58 1212.66 L1582.99 1212.66 L1582.41 1212.66 L1581.82 1212.66 L1581.23 1212.66 L1580.65 1212.66 L1580.06 1212.66 L1579.47 1212.66 L1578.89 1212.66 L1578.3 1212.66 L1577.72 1212.66 L1577.13 1212.66 L1576.54 1212.66 L1575.96 1212.66 L1575.37 1212.66 L1574.78 1212.66 L1574.2 1212.66 L1573.61 1212.66 L1573.02 1212.66 L1572.44 1212.66 L1571.85 1212.66 L1571.27 1212.66 L1570.68 1212.66 L1570.09 1212.66 L1569.51 1212.66 L1568.92 1212.66 L1568.33 1212.66 L1567.75 1212.66 L1567.16 1212.66 L1566.57 1212.66 L1565.99 1212.66 L1565.4 1212.66 L1564.81 1212.66 L1564.23 1212.66 L1563.64 1212.66 L1563.06 1212.66 L1562.47 1212.66 L1561.88 1212.66 L1561.3 1212.66 L1560.71 1212.66 L1560.12 1212.66 L1559.54 1212.66 L1558.95 1212.66 L1558.36 1212.66 L1557.78 1212.66 L1557.19 1212.66 L1556.6 1212.66 L1556.02 1212.66 L1555.43 1212.66 L1554.85 1212.66 L1554.26 1212.66 L1553.67 1212.66 L1553.09 1212.66 L1552.5 1212.66 L1551.91 1212.66 L1551.33 1212.66 L1550.74 1212.66 L1550.15 1212.66 L1549.57 1212.66 L1548.98 1212.66 L1548.4 1212.66 L1547.81 1212.66 L1547.22 1212.66 L1546.64 1212.66 L1546.05 1212.66 L1545.46 1212.66 L1544.88 1212.66 L1544.29 1212.66 L1543.7 1212.66 L1543.12 1212.66 L1542.53 1212.66 L1541.94 1212.66 L1541.36 1212.66 L1540.77 1212.66 L1540.19 1212.66 L1539.6 1212.66 L1539.01 1212.66 L1538.43 1212.66 L1537.84 1212.66 L1537.25 1212.66 L1536.67 1212.66 L1536.08 1212.66 L1535.49 1212.66 L1534.91 1212.66 L1534.32 1212.66 L1533.73 1212.66 L1533.15 1212.66 L1532.56 1212.66 L1531.98 1212.66 L1531.39 1212.66 L1530.8 1212.66 L1530.22 1212.66 L1529.63 1212.66 L1529.04 1212.66 L1528.46 1212.66 L1527.87 1212.66 L1527.28 1212.66 L1526.7 1212.66 L1526.11 1212.66 L1525.52 1212.66 L1524.94 1212.66 L1524.35 1212.66 L1523.77 1212.66 L1523.18 1212.66 L1522.59 1212.66 L1522.01 1212.66 L1521.42 1212.66 L1520.83 1212.66 L1520.25 1212.66 L1519.66 1212.66 L1519.07 1212.66 L1518.49 1212.66 L1517.9 1212.66 L1517.32 1212.66 L1516.73 1212.66 L1516.14 1212.66 L1515.56 1212.66 L1514.97 1212.66 L1514.38 1212.66 L1513.8 1212.66 L1513.21 1212.66 L1512.62 1212.66 L1512.04 1212.66 L1511.45 1212.66 L1510.86 1212.66 L1510.28 1212.66 L1509.69 1212.66 L1509.11 1212.66 L1508.52 1212.66 L1507.93 1212.66 L1507.35 1212.66 L1506.76 1212.66 L1506.17 1212.66 L1505.59 1212.66 L1505 1212.66 L1504.41 1212.66 L1503.83 1212.66 L1503.24 1212.66 L1502.65 1212.66 L1502.07 1212.66 L1501.48 1212.66 L1500.9 1212.66 L1500.31 1212.66 L1499.72 1212.66 L1499.14 1212.66 L1498.55 1212.66 L1497.96 1212.66 L1497.38 1212.66 L1496.79 1212.66 L1496.2 1212.66 L1495.62 1212.66 L1495.03 1212.66 L1494.45 1212.66 L1493.86 1212.66 L1493.27 1212.66 L1492.69 1212.66 L1492.1 1212.66 L1491.51 1212.66 L1490.93 1212.66 L1490.34 1212.66 L1489.75 1212.66 L1489.17 1212.66 L1488.58 1212.66 L1487.99 1212.66 L1487.41 1212.66 L1486.82 1212.66 L1486.24 1212.66 L1485.65 1212.66 L1485.06 1212.66 L1484.48 1212.66 L1483.89 1212.66 L1483.3 1212.66 L1482.72 1212.66 L1482.13 1212.66 L1481.54 1212.66 L1480.96 1212.66 L1480.37 1212.66 L1479.78 1212.66 L1479.2 1212.66 L1478.61 1212.66 L1478.03 1212.66 L1477.44 1212.66 L1476.85 1212.66 L1476.27 1212.66 L1475.68 1212.66 L1475.09 1212.66 L1474.51 1212.66 L1473.92 1212.66 L1473.33 1212.66 L1472.75 1212.66 L1472.16 1212.66 L1471.57 1212.66 L1470.99 1212.66 L1470.4 1212.66 L1469.82 1212.66 L1469.23 1212.66 L1468.64 1212.66 L1468.06 1212.66 L1467.47 1212.66 L1466.88 1212.66 L1466.3 1212.66 L1465.71 1212.66 L1465.12 1212.66 L1464.54 1212.66 L1463.95 1212.66 L1463.37 1212.66 L1462.78 1212.66 L1462.19 1212.66 L1461.61 1212.66 L1461.02 1212.66 L1460.43 1212.66 L1459.85 1212.66 L1459.26 1212.66 L1458.67 1212.66 L1458.09 1212.66 L1457.5 1212.66 L1456.91 1212.66 L1456.33 1212.66 L1455.74 1212.66 L1455.16 1212.66 L1454.57 1212.66 L1453.98 1212.66 L1453.4 1212.66 L1452.81 1212.66 L1452.22 1212.66 L1451.64 1212.66 L1451.05 1212.66 L1450.46 1212.66 L1449.88 1212.66 L1449.29 1212.66 L1448.7 1212.66 L1448.12 1212.66 L1447.53 1212.66 L1446.95 1212.66 L1446.36 1212.66 L1445.77 1212.66 L1445.19 1212.66 L1444.6 1212.66 L1444.01 1212.66 L1443.43 1212.66 L1442.84 1212.66 L1442.25 1212.66 L1441.67 1212.66 L1441.08 1212.66 L1440.5 1212.66 L1439.91 1212.66 L1439.32 1212.66 L1438.74 1212.66 L1438.15 1212.66 L1437.56 1212.66 L1436.98 1212.66 L1436.39 1212.66 L1435.8 1212.66 L1435.22 1212.66 L1434.63 1212.66 L1434.04 1212.66 L1433.46 1212.66 L1432.87 1212.66 L1432.29 1212.66 L1431.7 1212.66 L1431.11 1212.66 L1430.53 1212.66 L1429.94 1212.66 L1429.35 1212.66 L1428.77 1212.66 L1428.18 1212.66 L1427.59 1212.66 L1427.01 1212.66 L1426.42 1212.66 L1425.83 1212.66 L1425.25 1212.66 L1424.66 1212.66 L1424.08 1212.66 L1423.49 1212.66 L1422.9 1212.66 L1422.32 1212.66 L1421.73 1212.66 L1421.14 1212.66 L1420.56 1212.66 L1419.97 1212.66 L1419.38 1212.66 L1418.8 1212.66 L1418.21 1212.66 L1417.63 1212.66 L1417.04 1212.66 L1416.45 1212.66 L1415.87 1212.66 L1415.28 1212.66 L1414.69 1212.66 L1414.11 1212.66 L1413.52 1212.66 L1412.93 1212.66 L1412.35 1212.66 L1411.76 1212.66 L1411.17 1212.66 L1410.59 1212.66 L1410 1212.66 L1409.42 1212.66 L1408.83 1212.66 L1408.24 1212.66 L1407.66 1212.66 L1407.07 1212.66 L1406.48 1212.66 L1405.9 1212.66 L1405.31 1212.66 L1404.72 1212.66 L1404.14 1212.66 L1403.55 1212.66 L1402.96 1212.66 L1402.38 1212.66 L1401.79 1212.66 L1401.21 1212.66 L1400.62 1212.66 L1400.03 1212.66 L1399.45 1212.66 L1398.86 1212.66 L1398.27 1212.66 L1397.69 1212.66 L1397.1 1212.66 L1396.51 1212.66 L1395.93 1212.66 L1395.34 1212.66 L1394.75 1212.66 L1394.17 1212.66 L1393.58 1212.66 L1393 1212.66 L1392.41 1212.66 L1391.82 1212.66 L1391.24 1212.66 L1390.65 1212.66 L1390.06 1212.66 L1389.48 1212.66 L1388.89 1212.66 L1388.3 1212.66 L1387.72 1212.66 L1387.13 1212.66 L1386.55 1212.66 L1385.96 1212.66 L1385.37 1212.66 L1384.79 1212.66 L1384.2 1212.66 L1383.61 1212.66 L1383.03 1212.66 L1382.44 1212.66 L1381.85 1212.66 L1381.27 1212.66 L1380.68 1212.66 L1380.09 1212.66 L1379.51 1212.66 L1378.92 1212.66 L1378.34 1212.66 L1377.75 1212.66 L1377.16 1212.66 L1376.58 1212.66 L1375.99 1212.66 L1375.4 1212.66 L1374.82 1212.66 L1374.23 1212.66 L1373.64 1212.66 L1373.06 1212.66 L1372.47 1212.66 L1371.88 1212.66 L1371.3 1212.66 L1370.71 1212.66 L1370.13 1212.66 L1369.54 1212.66 L1368.95 1212.66 L1368.37 1212.66 L1367.78 1212.66 L1367.19 1212.66 L1366.61 1212.66 L1366.02 1212.66 L1365.43 1212.66 L1364.85 1212.66 L1364.26 1212.66 L1363.68 1212.66 L1363.09 1212.66 L1362.5 1212.66 L1361.92 1212.66 L1361.33 1212.66 L1360.74 1212.66 L1360.16 1212.66 L1359.57 1212.66 L1358.98 1212.66 L1358.4 1212.66 L1357.81 1212.66 L1357.22 1212.66 L1356.64 1212.66 L1356.05 1212.66 L1355.47 1212.66 L1354.88 1212.66 L1354.29 1212.66 L1353.71 1212.66 L1353.12 1212.66 L1352.53 1212.66 L1351.95 1212.66 L1351.36 1212.66 L1350.77 1212.66 L1350.19 1212.66 L1349.6 1212.66 L1349.01 1212.66 L1348.43 1212.66 L1347.84 1212.66 L1347.26 1212.66 L1346.67 1212.66 L1346.08 1212.66 L1345.5 1212.66 L1344.91 1212.66 L1344.32 1212.66 L1343.74 1212.66 L1343.15 1212.66 L1342.56 1212.66 L1341.98 1212.66 L1341.39 1212.66 L1340.8 1212.66 L1340.22 1212.66 L1339.63 1212.66 L1339.05 1212.66 L1338.46 1212.66 L1337.87 1212.66 L1337.29 1212.66 L1336.7 1212.66 L1336.11 1212.66 L1335.53 1212.66 L1334.94 1212.66 L1334.35 1212.66 L1333.77 1212.66 L1333.18 1212.66 L1332.6 1212.66 L1332.01 1212.66 L1331.42 1212.66 L1330.84 1212.66 L1330.25 1212.66 L1329.66 1212.66 L1329.08 1212.66 L1328.49 1212.66 L1327.9 1212.66 L1327.32 1212.66 L1326.73 1212.66 L1326.14 1212.66 L1325.56 1212.66 L1324.97 1212.66 L1324.39 1212.66 L1323.8 1212.66 L1323.21 1212.66 L1322.63 1212.66 L1322.04 1212.66 L1321.45 1212.66 L1320.87 1212.66 L1320.28 1212.66 L1319.69 1212.66 L1319.11 1212.66 L1318.52 1212.66 L1317.93 1212.66 L1317.35 1212.66 L1316.76 1212.66 L1316.18 1212.66 L1315.59 1212.66 L1315 1212.66 L1314.42 1212.66 L1313.83 1212.66 L1313.24 1212.66 L1312.66 1212.66 L1312.07 1212.66 L1311.48 1212.66 L1310.9 1212.66 L1310.31 1212.66 L1309.73 1212.66 L1309.14 1212.66 L1308.55 1212.66 L1307.97 1212.66 L1307.38 1212.66 L1306.79 1212.66 L1306.21 1212.66 L1305.62 1212.66 L1305.03 1212.66 L1304.45 1212.66 L1303.86 1212.66 L1303.27 1212.66 L1302.69 1212.66 L1302.1 1212.66 L1301.52 1212.66 L1300.93 1212.66 L1300.34 1212.66 L1299.76 1212.66 L1299.17 1212.66 L1298.58 1212.66 L1298 1212.66 L1297.41 1212.66 L1296.82 1212.66 L1296.24 1212.66 L1295.65 1212.66 L1295.06 1212.66 L1294.48 1212.66 L1293.89 1212.66 L1293.31 1212.66 L1292.72 1212.66 L1292.13 1212.66 L1291.55 1212.66 L1290.96 1212.66 L1290.37 1212.66 L1289.79 1212.66 L1289.2 1212.66 L1288.61 1212.66 L1288.03 1212.66 L1287.44 1212.66 L1286.86 1212.66 L1286.27 1212.66 L1285.68 1212.66 L1285.1 1212.66 L1284.51 1212.66 L1283.92 1212.66 L1283.34 1212.66 L1282.75 1212.66 L1282.16 1212.66 L1281.58 1212.66 L1280.99 1212.66 L1280.4 1212.66 L1279.82 1212.66 L1279.23 1212.66 L1278.65 1212.66 L1278.06 1212.66 L1277.47 1212.66 L1276.89 1212.66 L1276.3 1212.66 L1275.71 1212.66 L1275.13 1212.66 L1274.54 1212.66 L1273.95 1212.66 L1273.37 1212.66 L1272.78 1212.66 L1272.19 1212.66 L1271.61 1212.66 L1271.02 1212.66 L1270.44 1212.66 L1269.85 1212.66 L1269.26 1212.66 L1268.68 1212.66 L1268.09 1212.66 L1267.5 1212.66 L1266.92 1212.66 L1266.33 1212.66 L1265.74 1212.66 L1265.16 1212.66 L1264.57 1212.66 L1263.98 1212.66 L1263.4 1212.66 L1262.81 1212.66 L1262.23 1212.66 L1261.64 1212.66 L1261.05 1212.66 L1260.47 1212.66 L1259.88 1212.66 L1259.29 1212.66 L1258.71 1212.66 L1258.12 1212.66 L1257.53 1212.66 L1256.95 1212.66 L1256.36 1212.66 L1255.78 1212.66 L1255.19 1212.66 L1254.6 1212.66 L1254.02 1212.66 L1253.43 1212.66 L1252.84 1212.66 L1252.26 1212.66 L1251.67 1212.66 L1251.08 1212.66 L1250.5 1212.66 L1249.91 1212.66 L1249.32 1212.66 L1248.74 1212.66 L1248.15 1212.66 L1247.57 1212.66 L1246.98 1212.66 L1246.39 1212.66 L1245.81 1212.66 L1245.22 1212.66 L1244.63 1212.66 L1244.05 1212.66 L1243.46 1212.66 L1242.87 1212.66 L1242.29 1212.66 L1241.7 1212.66 L1241.11 1212.66 L1240.53 1212.66 L1239.94 1212.66 L1239.36 1212.66 L1238.77 1212.66 L1238.18 1212.66 L1237.6 1212.66 L1237.01 1212.66 L1236.42 1212.66 L1235.84 1212.66 L1235.25 1212.66 L1234.66 1212.66 L1234.08 1212.66 L1233.49 1212.66 L1232.91 1212.66 L1232.32 1212.66 L1231.73 1212.66 L1231.15 1212.66 L1230.56 1212.66 L1229.97 1212.66 L1229.39 1212.66 L1228.8 1212.66 L1228.21 1212.66 L1227.63 1212.66 L1227.04 1212.66 L1226.45 1212.66 L1225.87 1212.66 L1225.28 1212.66 L1224.7 1212.66 L1224.11 1212.66 L1223.52 1212.66 L1222.94 1212.66 L1222.35 1212.66 L1221.76 1212.66 L1221.18 1212.66 L1220.59 1212.66 L1220 1212.66 L1219.42 1212.66 L1218.83 1212.66 L1218.24 1212.66 L1217.66 1212.66 L1217.07 1212.66 L1216.49 1212.66 L1215.9 1212.66 L1215.31 1212.66 L1214.73 1212.66 L1214.14 1212.66 L1213.55 1212.66 L1212.97 1212.66 L1212.38 1212.66 L1211.79 1212.66 L1211.21 1212.66 L1210.62 1212.66 L1210.03 1212.66 L1209.45 1212.66 L1208.86 1212.66 L1208.28 1212.66 L1207.69 1212.66 L1207.1 1212.66 L1206.52 1212.66 L1205.93 1212.66 L1205.34 1212.66 L1204.76 1212.66 L1204.17 1212.66 L1203.58 1212.66 L1203 1212.66 L1202.41 1212.66 L1201.83 1212.66 L1201.24 1212.66 L1200.65 1212.66 L1200.07 1212.66 L1199.48 1212.66 L1198.89 1212.66 L1198.31 1212.66 L1197.72 1212.66 L1197.13 1212.66 L1196.55 1212.66 L1195.96 1212.66 L1195.37 1212.66 L1194.79 1212.66 L1194.2 1212.66 L1193.62 1212.66 L1193.03 1212.66 L1192.44 1212.66 L1191.86 1212.66 L1191.27 1212.66 L1190.68 1212.66 L1190.1 1212.66 L1189.51 1212.66 L1188.92 1212.66 L1188.34 1212.66 L1187.75 1212.66 L1187.16 1212.66 L1186.58 1212.66 L1185.99 1212.66 L1185.41 1212.66 L1184.82 1212.66 L1184.23 1212.66 L1183.65 1212.66 L1183.06 1212.66 L1182.47 1212.66 L1181.89 1212.66 L1181.3 1212.66 L1180.71 1212.66 L1180.13 1212.66 L1179.54 1212.66 L1178.96 1212.66 L1178.37 1212.66 L1177.78 1212.66 L1177.2 1212.66 L1176.61 1212.66 L1176.02 1212.66 L1175.44 1212.66 L1174.85 1212.66 L1174.26 1212.66 L1173.68 1212.66 L1173.09 1212.66 L1172.5 1212.66 L1171.92 1212.66 L1171.33 1212.66 L1170.75 1212.66 L1170.16 1212.66 L1169.57 1212.66 L1168.99 1212.66 L1168.4 1212.66 L1167.81 1212.66 L1167.23 1212.66 L1166.64 1212.66 L1166.05 1212.66 L1165.47 1212.66 L1164.88 1212.66 L1164.29 1212.66 L1163.71 1212.66 L1163.12 1212.66 L1162.54 1212.66 L1161.95 1212.66 L1161.36 1212.66 L1160.78 1212.66 L1160.19 1212.66 L1159.6 1212.66 L1159.02 1212.66 L1158.43 1212.66 L1157.84 1212.66 L1157.26 1212.66 L1156.67 1212.66 L1156.09 1212.66 L1155.5 1212.66 L1154.91 1212.66 L1154.33 1212.66 L1153.74 1212.66 L1153.15 1212.66 L1152.57 1212.66 L1151.98 1212.66 L1151.39 1212.66 L1150.81 1212.66 L1150.22 1212.66 L1149.63 1212.66 L1149.05 1212.66 L1148.46 1212.66 L1147.88 1212.66 L1147.29 1212.66 L1146.7 1212.66 L1146.12 1212.66 L1145.53 1212.66 L1144.94 1212.66 L1144.36 1212.66 L1143.77 1212.66 L1143.18 1212.66 L1142.6 1212.66 L1142.01 1212.66 L1141.42 1212.66 L1140.84 1212.66 L1140.25 1212.66 L1139.67 1212.66 L1139.08 1212.66 L1138.49 1212.66 L1137.91 1212.66 L1137.32 1212.66 L1136.73 1212.66 L1136.15 1212.66 L1135.56 1212.66 L1134.97 1212.66 L1134.39 1212.66 L1133.8 1212.66 L1133.21 1212.66 L1132.63 1212.66 L1132.04 1212.66 L1131.46 1212.66 L1130.87 1212.66 L1130.28 1212.66 L1129.7 1212.66 L1129.11 1212.66 L1128.52 1212.66 L1127.94 1212.66 L1127.35 1212.66 L1126.76 1212.66 L1126.18 1212.66 L1125.59 1212.66 L1125.01 1212.66 L1124.42 1212.66 L1123.83 1212.66 L1123.25 1212.66 L1122.66 1212.66 L1122.07 1212.66 L1121.49 1212.66 L1120.9 1212.66 L1120.31 1212.66 L1119.73 1212.66 L1119.14 1212.66 L1118.55 1212.66 L1117.97 1212.66 L1117.38 1212.66 L1116.8 1212.66 L1116.21 1212.66 L1115.62 1212.66 L1115.04 1212.66 L1114.45 1212.66 L1113.86 1212.66 L1113.28 1212.66 L1112.69 1212.66 L1112.1 1212.66 L1111.52 1212.66 L1110.93 1212.66 L1110.34 1212.66 L1109.76 1212.66 L1109.17 1212.66 L1108.59 1212.66 L1108 1212.66 L1107.41 1212.66 L1106.83 1212.66 L1106.24 1212.66 L1105.65 1212.66 L1105.07 1212.66 L1104.48 1212.66 L1103.89 1212.66 L1103.31 1212.66 L1102.72 1212.66 L1102.14 1212.66 L1101.55 1212.66 L1100.96 1212.66 L1100.38 1212.66 L1099.79 1212.66 L1099.2 1212.66 L1098.62 1212.66 L1098.03 1212.66 L1097.44 1212.66 L1096.86 1212.66 L1096.27 1212.66 L1095.68 1212.66 L1095.1 1212.66 L1094.51 1212.66 L1093.93 1212.66 L1093.34 1212.66 L1092.75 1212.66 L1092.17 1212.66 L1091.58 1212.66 L1090.99 1212.66 L1090.41 1212.66 L1089.82 1212.66 L1089.23 1212.66 L1088.65 1212.66 L1088.06 1212.66 L1087.47 1212.66 L1086.89 1212.66 L1086.3 1212.66 L1085.72 1212.66 L1085.13 1212.66 L1084.54 1212.66 L1083.96 1212.66 L1083.37 1212.66 L1082.78 1212.66 L1082.2 1212.66 L1081.61 1212.66 L1081.02 1212.66 L1080.44 1212.66 L1079.85 1212.66 L1079.26 1212.66 L1078.68 1212.66 L1078.09 1212.66 L1077.51 1212.66 L1076.92 1212.66 L1076.33 1212.66 L1075.75 1212.66 L1075.16 1212.66 L1074.57 1212.66 L1073.99 1212.66 L1073.4 1212.66 L1072.81 1212.66 L1072.23 1212.66 L1071.64 1212.66 L1071.06 1212.66 L1070.47 1212.66 L1069.88 1212.66 L1069.3 1212.66 L1068.71 1212.66 L1068.12 1212.66 L1067.54 1212.66 L1066.95 1212.66 L1066.36 1212.66 L1065.78 1212.66 L1065.19 1212.66 L1064.6 1212.66 L1064.02 1212.66 L1063.43 1212.66 L1062.85 1212.66 L1062.26 1212.66 L1061.67 1212.66 L1061.09 1212.66 L1060.5 1212.66 L1059.91 1212.66 L1059.33 1212.66 L1058.74 1212.66 L1058.15 1212.66 L1057.57 1212.66 L1056.98 1212.66 L1056.39 1212.66 L1055.81 1212.66 L1055.22 1212.66 L1054.64 1212.66 L1054.05 1212.66 L1053.46 1212.66 L1052.88 1212.66 L1052.29 1212.66 L1051.7 1212.66 L1051.12 1212.66 L1050.53 1212.66 L1049.94 1212.66 L1049.36 1212.66 L1048.77 1212.66 L1048.19 1212.66 L1047.6 1212.66 L1047.01 1212.66 L1046.43 1212.66 L1045.84 1212.66 L1045.25 1212.66 L1044.67 1212.66 L1044.08 1212.66 L1043.49 1212.66 L1042.91 1212.66 L1042.32 1212.66 L1041.73 1212.66 L1041.15 1212.66 L1040.56 1212.66 L1039.98 1212.66 L1039.39 1212.66 L1038.8 1212.66 L1038.22 1212.66 L1037.63 1212.66 L1037.04 1212.66 L1036.46 1212.66 L1035.87 1212.66 L1035.28 1212.66 L1034.7 1212.66 L1034.11 1212.66 L1033.52 1212.66 L1032.94 1212.66 L1032.35 1212.66 L1031.77 1212.66 L1031.18 1212.66 L1030.59 1212.66 L1030.01 1212.66 L1029.42 1212.66 L1028.83 1212.66 L1028.25 1212.66 L1027.66 1212.66 L1027.07 1212.66 L1026.49 1212.66 L1025.9 1212.66 L1025.32 1212.66 L1024.73 1212.66 L1024.14 1212.66 L1023.56 1212.66 L1022.97 1212.66 L1022.38 1212.66 L1021.8 1212.66 L1021.21 1212.66 L1020.62 1212.66 L1020.04 1212.66 L1019.45 1212.66 L1018.86 1212.66 L1018.28 1212.66 L1017.69 1212.66 L1017.11 1212.66 L1016.52 1212.66 L1015.93 1212.66 L1015.35 1212.66 L1014.76 1212.66 L1014.17 1212.66 L1013.59 1212.66 L1013 1212.66 L1012.41 1212.66 L1011.83 1212.66 L1011.24 1212.66 L1010.65 1212.66 L1010.07 1212.66 L1009.48 1212.66 L1008.9 1212.66 L1008.31 1212.66 L1007.72 1212.66 L1007.14 1212.66 L1006.55 1212.66 L1005.96 1212.66 L1005.38 1212.66 L1004.79 1212.66 L1004.2 1212.66 L1003.62 1212.66 L1003.03 1212.66 L1002.44 1212.66 L1001.86 1212.66 L1001.27 1212.66 L1000.69 1212.66 L1000.1 1212.66 L999.513 1212.66 L998.926 1212.66 L998.34 1212.66 L997.754 1212.66 L997.167 1212.66 L996.581 1212.66 L995.994 1212.66 L995.408 1212.66 L994.822 1212.66 L994.235 1212.66 L993.649 1212.66 L993.062 1212.66 L992.476 1212.66 L991.889 1212.66 L991.303 1212.66 L990.717 1212.66 L990.13 1212.66 L989.544 1212.66 L988.957 1212.66 L988.371 1212.66 L987.785 1212.66 L987.198 1212.66 L986.612 1212.66 L986.025 1212.66  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213 986.612,1213 987.198,1213 987.785,1213 988.371,1213 988.957,1213 989.544,1213 990.13,1213 990.717,1213 991.303,1213 991.889,1213 992.476,1213 993.062,1213 993.649,1213 994.235,1213 994.822,1213 995.408,1213 995.994,1213 996.581,1213 997.167,1213 997.754,1213 998.34,1213 998.926,1213 999.513,1213 1000.1,1213 1000.69,1213 1001.27,1213 1001.86,1213 1002.44,1213 1003.03,1213 1003.62,1213 1004.2,1213 1004.79,1213 1005.38,1213 1005.96,1213 1006.55,1213 1007.14,1213 1007.72,1213 1008.31,1213 1008.9,1213 1009.48,1213 1010.07,1213 1010.65,1213 1011.24,1213 1011.83,1213 1012.41,1213 1013,1213 1013.59,1213 1014.17,1213 1014.76,1213 1015.35,1213 1015.93,1213 1016.52,1213 1017.11,1213 1017.69,1213 1018.28,1213 1018.86,1213 1019.45,1213 1020.04,1213 1020.62,1213 1021.21,1213 1021.8,1213 1022.38,1213 1022.97,1213 1023.56,1213 1024.14,1213 1024.73,1213 1025.32,1213 1025.9,1213 1026.49,1213 1027.07,1213 1027.66,1213 1028.25,1213 1028.83,1213 1029.42,1213 1030.01,1213 1030.59,1213 1031.18,1213 1031.77,1213 1032.35,1213 1032.94,1213 1033.52,1213 1034.11,1213 1034.7,1213 1035.28,1213 1035.87,1213 1036.46,1213 1037.04,1213 1037.63,1213 1038.22,1213 1038.8,1213 1039.39,1213 1039.98,1213 1040.56,1213 1041.15,1213 1041.73,1213 1042.32,1213 1042.91,1213 1043.49,1213 1044.08,1213 1044.67,1213 1045.25,1213 1045.84,1213 1046.43,1213 1047.01,1213 1047.6,1213 1048.19,1213 1048.77,1213 1049.36,1213 1049.94,1213 1050.53,1213 1051.12,1213 1051.7,1213 1052.29,1213 1052.88,1213 1053.46,1213 1054.05,1213 1054.64,1213 1055.22,1213 1055.81,1213 1056.39,1213 1056.98,1213 1057.57,1213 1058.15,1213 1058.74,1213 1059.33,1213 1059.91,1213 1060.5,1213 1061.09,1213 1061.67,1213 1062.26,1213 1062.85,1213 1063.43,1213 1064.02,1213 1064.6,1213 1065.19,1213 1065.78,1213 1066.36,1213 1066.95,1213 1067.54,1213 1068.12,1213 1068.71,1213 1069.3,1213 1069.88,1213 1070.47,1213 1071.06,1213 1071.64,1213 1072.23,1213 1072.81,1213 1073.4,1213 1073.99,1213 1074.57,1213 1075.16,1213 1075.75,1213 1076.33,1213 1076.92,1213 1077.51,1213 1078.09,1213 1078.68,1213 1079.26,1213 1079.85,1213 1080.44,1213 1081.02,1213 1081.61,1213 1082.2,1213 1082.78,1213 1083.37,1213 1083.96,1213 1084.54,1213 1085.13,1213 1085.72,1213 1086.3,1213 1086.89,1213 1087.47,1213 1088.06,1213 1088.65,1213 1089.23,1213 1089.82,1213 1090.41,1213 1090.99,1213 1091.58,1213 1092.17,1213 1092.75,1213 1093.34,1213 1093.93,1213 1094.51,1213 1095.1,1213 1095.68,1213 1096.27,1213 1096.86,1213 1097.44,1213 1098.03,1213 1098.62,1213 1099.2,1213 1099.79,1213 1100.38,1213 1100.96,1213 1101.55,1213 1102.14,1213 1102.72,1213 1103.31,1213 1103.89,1213 1104.48,1213 1105.07,1213 1105.65,1213 1106.24,1213 1106.83,1213 1107.41,1213 1108,1213 1108.59,1213 1109.17,1213 1109.76,1213 1110.34,1213 1110.93,1213 1111.52,1213 1112.1,1213 1112.69,1213 1113.28,1213 1113.86,1213 1114.45,1213 1115.04,1213 1115.62,1213 1116.21,1213 1116.8,1213 1117.38,1213 1117.97,1213 1118.55,1213 1119.14,1213 1119.73,1213 1120.31,1213 1120.9,1213 1121.49,1213 1122.07,1213 1122.66,1213 1123.25,1213 1123.83,1213 1124.42,1213 1125.01,1213 1125.59,1213 1126.18,1213 1126.76,1213 1127.35,1213 1127.94,1213 1128.52,1213 1129.11,1213 1129.7,1213 1130.28,1213 1130.87,1213 1131.46,1213 1132.04,1213 1132.63,1213 1133.21,1213 1133.8,1213 1134.39,1213 1134.97,1213 1135.56,1213 1136.15,1213 1136.73,1213 1137.32,1213 1137.91,1213 1138.49,1213 1139.08,1213 1139.67,1213 1140.25,1213 1140.84,1213 1141.42,1213 1142.01,1213 1142.6,1213 1143.18,1213 1143.77,1213 1144.36,1213 1144.94,1213 1145.53,1213 1146.12,1213 1146.7,1213 1147.29,1213 1147.88,1213 1148.46,1213 1149.05,1213 1149.63,1213 1150.22,1213 1150.81,1213 1151.39,1213 1151.98,1213 1152.57,1213 1153.15,1213 1153.74,1213 1154.33,1213 1154.91,1213 1155.5,1213 1156.09,1213 1156.67,1213 1157.26,1213 1157.84,1213 1158.43,1213 1159.02,1213 1159.6,1213 1160.19,1213 1160.78,1213 1161.36,1213 1161.95,1213 1162.54,1213 1163.12,1213 1163.71,1213 1164.29,1213 1164.88,1213 1165.47,1213 1166.05,1213 1166.64,1213 1167.23,1213 1167.81,1213 1168.4,1213 1168.99,1213 1169.57,1213 1170.16,1213 1170.75,1213 1171.33,1213 1171.92,1213 1172.5,1213 1173.09,1213 1173.68,1213 1174.26,1213 1174.85,1213 1175.44,1213 1176.02,1213 1176.61,1213 1177.2,1213 1177.78,1213 1178.37,1213 1178.96,1213 1179.54,1213 1180.13,1213 1180.71,1213 1181.3,1213 1181.89,1213 1182.47,1213 1183.06,1213 1183.65,1213 1184.23,1213 1184.82,1213 1185.41,1213 1185.99,1213 1186.58,1213 1187.16,1213 1187.75,1213 1188.34,1213 1188.92,1213 1189.51,1213 1190.1,1213 1190.68,1213 1191.27,1213 1191.86,1213 1192.44,1213 1193.03,1213 1193.62,1213 1194.2,1213 1194.79,1213 1195.37,1213 1195.96,1213 1196.55,1213 1197.13,1213 1197.72,1213 1198.31,1213 1198.89,1213 1199.48,1213 1200.07,1213 1200.65,1213 1201.24,1213 1201.83,1213 1202.41,1213 1203,1213 1203.58,1213 1204.17,1213 1204.76,1213 1205.34,1213 1205.93,1213 1206.52,1213 1207.1,1213 1207.69,1213 1208.28,1213 1208.86,1213 1209.45,1213 1210.03,1213 1210.62,1213 1211.21,1213 1211.79,1213 1212.38,1213 1212.97,1213 1213.55,1213 1214.14,1213 1214.73,1213 1215.31,1213 1215.9,1213 1216.49,1213 1217.07,1213 1217.66,1213 1218.24,1213 1218.83,1213 1219.42,1213 1220,1213 1220.59,1213 1221.18,1213 1221.76,1213 1222.35,1213 1222.94,1213 1223.52,1213 1224.11,1213 1224.7,1213 1225.28,1213 1225.87,1213 1226.45,1213 1227.04,1213 1227.63,1213 1228.21,1213 1228.8,1213 1229.39,1213 1229.97,1213 1230.56,1213 1231.15,1213 1231.73,1213 1232.32,1213 1232.91,1213 1233.49,1213 1234.08,1213 1234.66,1213 1235.25,1213 1235.84,1213 1236.42,1213 1237.01,1213 1237.6,1213 1238.18,1213 1238.77,1213 1239.36,1213 1239.94,1213 1240.53,1213 1241.11,1213 1241.7,1213 1242.29,1213 1242.87,1213 1243.46,1213 1244.05,1213 1244.63,1213 1245.22,1213 1245.81,1213 1246.39,1213 1246.98,1213 1247.57,1213 1248.15,1213 1248.74,1213 1249.32,1213 1249.91,1213 1250.5,1213 1251.08,1213 1251.67,1213 1252.26,1213 1252.84,1213 1253.43,1213 1254.02,1213 1254.6,1213 1255.19,1213 1255.78,1213 1256.36,1213 1256.95,1213 1257.53,1213 1258.12,1213 1258.71,1213 1259.29,1213 1259.88,1213 1260.47,1213 1261.05,1213 1261.64,1213 1262.23,1213 1262.81,1213 1263.4,1213 1263.98,1213 1264.57,1213 1265.16,1213 1265.74,1213 1266.33,1213 1266.92,1213 1267.5,1213 1268.09,1213 1268.68,1213 1269.26,1213 1269.85,1213 1270.44,1213 1271.02,1213 1271.61,1213 1272.19,1213 1272.78,1213 1273.37,1213 1273.95,1213 1274.54,1213 1275.13,1213 1275.71,1213 1276.3,1213 1276.89,1213 1277.47,1213 1278.06,1213 1278.65,1213 1279.23,1213 1279.82,1213 1280.4,1213 1280.99,1213 1281.58,1213 1282.16,1213 1282.75,1213 1283.34,1213 1283.92,1213 1284.51,1213 1285.1,1213 1285.68,1213 1286.27,1213 1286.86,1213 1287.44,1213 1288.03,1213 1288.61,1213 1289.2,1213 1289.79,1213 1290.37,1213 1290.96,1213 1291.55,1213 1292.13,1213 1292.72,1213 1293.31,1213 1293.89,1213 1294.48,1213 1295.06,1213 1295.65,1213 1296.24,1213 1296.82,1213 1297.41,1213 1298,1213 1298.58,1213 1299.17,1213 1299.76,1213 1300.34,1213 1300.93,1213 1301.52,1213 1302.1,1213 1302.69,1213 1303.27,1213 1303.86,1213 1304.45,1213 1305.03,1213 1305.62,1213 1306.21,1213 1306.79,1213 1307.38,1213 1307.97,1213 1308.55,1213 1309.14,1213 1309.73,1213 1310.31,1213 1310.9,1213 1311.48,1213 1312.07,1213 1312.66,1213 1313.24,1213 1313.83,1213 1314.42,1213 1315,1213 1315.59,1213 1316.18,1213 1316.76,1213 1317.35,1213 1317.93,1213 1318.52,1213 1319.11,1213 1319.69,1213 1320.28,1213 1320.87,1213 1321.45,1213 1322.04,1213 1322.63,1213 1323.21,1213 1323.8,1213 1324.39,1213 1324.97,1213 1325.56,1213 1326.14,1213 1326.73,1213 1327.32,1213 1327.9,1213 1328.49,1213 1329.08,1213 1329.66,1213 1330.25,1213 1330.84,1213 1331.42,1213 1332.01,1213 1332.6,1213 1333.18,1213 1333.77,1213 1334.35,1213 1334.94,1213 1335.53,1213 1336.11,1213 1336.7,1213 1337.29,1213 1337.87,1213 1338.46,1213 1339.05,1213 1339.63,1213 1340.22,1213 1340.8,1213 1341.39,1213 1341.98,1213 1342.56,1213 1343.15,1213 1343.74,1213 1344.32,1213 1344.91,1213 1345.5,1213 1346.08,1213 1346.67,1213 1347.26,1213 1347.84,1213 1348.43,1213 1349.01,1213 1349.6,1213 1350.19,1213 1350.77,1213 1351.36,1213 1351.95,1213 1352.53,1213 1353.12,1213 1353.71,1213 1354.29,1213 1354.88,1213 1355.47,1213 1356.05,1213 1356.64,1213 1357.22,1213 1357.81,1213 1358.4,1213 1358.98,1213 1359.57,1213 1360.16,1213 1360.74,1213 1361.33,1213 1361.92,1213 1362.5,1213 1363.09,1213 1363.68,1213 1364.26,1213 1364.85,1213 1365.43,1213 1366.02,1213 1366.61,1213 1367.19,1213 1367.78,1213 1368.37,1213 1368.95,1213 1369.54,1213 1370.13,1213 1370.71,1213 1371.3,1213 1371.88,1213 1372.47,1213 1373.06,1213 1373.64,1213 1374.23,1213 1374.82,1213 1375.4,1213 1375.99,1213 1376.58,1213 1377.16,1213 1377.75,1213 1378.34,1213 1378.92,1213 1379.51,1213 1380.09,1213 1380.68,1213 1381.27,1213 1381.85,1213 1382.44,1213 1383.03,1213 1383.61,1213 1384.2,1213 1384.79,1213 1385.37,1213 1385.96,1213 1386.55,1213 1387.13,1213 1387.72,1213 1388.3,1213 1388.89,1213 1389.48,1213 1390.06,1213 1390.65,1213 1391.24,1213 1391.82,1213 1392.41,1213 1393,1213 1393.58,1213 1394.17,1213 1394.75,1213 1395.34,1213 1395.93,1213 1396.51,1213 1397.1,1213 1397.69,1213 1398.27,1213 1398.86,1213 1399.45,1213 1400.03,1213 1400.62,1213 1401.21,1213 1401.79,1213 1402.38,1213 1402.96,1213 1403.55,1213 1404.14,1213 1404.72,1213 1405.31,1213 1405.9,1213 1406.48,1213 1407.07,1213 1407.66,1213 1408.24,1213 1408.83,1213 1409.42,1213 1410,1213 1410.59,1213 1411.17,1213 1411.76,1213 1412.35,1213 1412.93,1213 1413.52,1213 1414.11,1213 1414.69,1213 1415.28,1213 1415.87,1213 1416.45,1213 1417.04,1213 1417.63,1213 1418.21,1213 1418.8,1213 1419.38,1213 1419.97,1213 1420.56,1213 1421.14,1213 1421.73,1213 1422.32,1213 1422.9,1213 1423.49,1213 1424.08,1213 1424.66,1213 1425.25,1213 1425.83,1213 1426.42,1213 1427.01,1213 1427.59,1213 1428.18,1213 1428.77,1213 1429.35,1213 1429.94,1213 1430.53,1213 1431.11,1213 1431.7,1213 1432.29,1213 1432.87,1213 1433.46,1213 1434.04,1213 1434.63,1213 1435.22,1213 1435.8,1213 1436.39,1213 1436.98,1213 1437.56,1213 1438.15,1213 1438.74,1213 1439.32,1213 1439.91,1213 1440.5,1213 1441.08,1213 1441.67,1213 1442.25,1213 1442.84,1213 1443.43,1213 1444.01,1213 1444.6,1213 1445.19,1213 1445.77,1213 1446.36,1213 1446.95,1213 1447.53,1213 1448.12,1213 1448.7,1213 1449.29,1213 1449.88,1213 1450.46,1213 1451.05,1213 1451.64,1213 1452.22,1213 1452.81,1213 1453.4,1213 1453.98,1213 1454.57,1213 1455.16,1213 1455.74,1213 1456.33,1213 1456.91,1213 1457.5,1213 1458.09,1213 1458.67,1213 1459.26,1213 1459.85,1213 1460.43,1213 1461.02,1213 1461.61,1213 1462.19,1213 1462.78,1213 1463.37,1213 1463.95,1213 1464.54,1213 1465.12,1213 1465.71,1213 1466.3,1213 1466.88,1213 1467.47,1213 1468.06,1213 1468.64,1213 1469.23,1213 1469.82,1213 1470.4,1213 1470.99,1213 1471.57,1213 1472.16,1213 1472.75,1213 1473.33,1213 1473.92,1213 1474.51,1213 1475.09,1213 1475.68,1213 1476.27,1213 1476.85,1213 1477.44,1213 1478.03,1213 1478.61,1213 1479.2,1213 1479.78,1213 1480.37,1213 1480.96,1213 1481.54,1213 1482.13,1213 1482.72,1213 1483.3,1213 1483.89,1213 1484.48,1213 1485.06,1213 1485.65,1213 1486.24,1213 1486.82,1213 1487.41,1213 1487.99,1213 1488.58,1213 1489.17,1213 1489.75,1213 1490.34,1213 1490.93,1213 1491.51,1213 1492.1,1213 1492.69,1213 1493.27,1213 1493.86,1213 1494.45,1213 1495.03,1213 1495.62,1213 1496.2,1213 1496.79,1213 1497.38,1213 1497.96,1213 1498.55,1213 1499.14,1213 1499.72,1213 1500.31,1213 1500.9,1213 1501.48,1213 1502.07,1213 1502.65,1213 1503.24,1213 1503.83,1213 1504.41,1213 1505,1213 1505.59,1213 1506.17,1213 1506.76,1213 1507.35,1213 1507.93,1213 1508.52,1213 1509.11,1213 1509.69,1213 1510.28,1213 1510.86,1213 1511.45,1213 1512.04,1213 1512.62,1213 1513.21,1213 1513.8,1213 1514.38,1213 1514.97,1213 1515.56,1213 1516.14,1213 1516.73,1213 1517.32,1213 1517.9,1213 1518.49,1213 1519.07,1213 1519.66,1213 1520.25,1213 1520.83,1213 1521.42,1213 1522.01,1213 1522.59,1213 1523.18,1213 1523.77,1213 1524.35,1213 1524.94,1213 1525.52,1213 1526.11,1213 1526.7,1213 1527.28,1213 1527.87,1213 1528.46,1213 1529.04,1213 1529.63,1213 1530.22,1213 1530.8,1213 1531.39,1213 1531.98,1213 1532.56,1213 1533.15,1213 1533.73,1213 1534.32,1213 1534.91,1213 1535.49,1213 1536.08,1213 1536.67,1213 1537.25,1213 1537.84,1213 1538.43,1213 1539.01,1213 1539.6,1213 1540.19,1213 1540.77,1213 1541.36,1213 1541.94,1213 1542.53,1213 1543.12,1213 1543.7,1213 1544.29,1213 1544.88,1213 1545.46,1213 1546.05,1213 1546.64,1213 1547.22,1213 1547.81,1213 1548.4,1213 1548.98,1213 1549.57,1213 1550.15,1213 1550.74,1213 1551.33,1213 1551.91,1213 1552.5,1213 1553.09,1213 1553.67,1213 1554.26,1213 1554.85,1213 1555.43,1213 1556.02,1213 1556.6,1213 1557.19,1213 1557.78,1213 1558.36,1213 1558.95,1213 1559.54,1213 1560.12,1213 1560.71,1213 1561.3,1213 1561.88,1213 1562.47,1213 1563.06,1213 1563.64,1213 1564.23,1213 1564.81,1213 1565.4,1213 1565.99,1213 1566.57,1213 1567.16,1213 1567.75,1213 1568.33,1213 1568.92,1213 1569.51,1213 1570.09,1213 1570.68,1213 1571.27,1213 1571.85,1213 1572.44,1213 1573.02,1213 1573.61,1213 1574.2,1213 1574.78,1213 1575.37,1213 1575.96,1213 1576.54,1213 1577.13,1213 1577.72,1213 1578.3,1213 1578.89,1213 1579.47,1213 1580.06,1213 1580.65,1213 1581.23,1213 1581.82,1213 1582.41,1213 1582.99,1213 1583.58,1213 1584.17,1213 1584.75,1213 1585.34,1213 1585.93,1213 1586.51,1213 1587.1,1213 1587.68,1213 1588.27,1213 1588.86,1213 1589.44,1213 1590.03,1213 1590.62,1213 1591.2,1213 1591.79,1213 1592.38,1213 1592.96,1213 1593.55,1213 1594.14,1213 1594.72,1213 1595.31,1213 1595.89,1213 1596.48,1213 1597.07,1213 1597.65,1213 1598.24,1213 1598.83,1213 1599.41,1213 1600,1213 1600.59,1213 1601.17,1213 1601.76,1213 1602.34,1213 1602.93,1213 1603.52,1213 1604.1,1213 1604.69,1213 1605.28,1213 1605.86,1213 1606.45,1213 1607.04,1213 1607.62,1213 1608.21,1213 1608.8,1213 1609.38,1213 1609.97,1213 1610.55,1213 1611.14,1213 1611.73,1213 1612.31,1213 1612.9,1213 1613.49,1213 1614.07,1213 1614.66,1213 1615.25,1213 1615.83,1213 1616.42,1213 1617.01,1213 1617.59,1213 1618.18,1213 1618.76,1213 1619.35,1213 1619.94,1213 1620.52,1213 1621.11,1213 1621.7,1213 1622.28,1213 1622.87,1213 1623.46,1213 1624.04,1213 1624.63,1213 1625.22,1213 1625.8,1213 1626.39,1213 1626.97,1213 1627.56,1213 1628.15,1213 1628.73,1213 1629.32,1213 1629.91,1213 1630.49,1213 1631.08,1213 1631.67,1213 1632.25,1213 1632.84,1213 1633.42,1213 1634.01,1213 1634.6,1213 1635.18,1213 1635.77,1213 1636.36,1213 1636.94,1213 1637.53,1213 1638.12,1213 1638.7,1213 1639.29,1213 1639.88,1213 1640.46,1213 1641.05,1213 1641.63,1213 1642.22,1213 1642.81,1213 1643.39,1213 1643.98,1213 1644.57,1213 1645.15,1213 1645.74,1213 1646.33,1213 1646.91,1213 1647.5,1213 1648.09,1213 1648.67,1213 1649.26,1213 1649.84,1213 1650.43,1213 1651.02,1213 1651.6,1213 1652.19,1213 1652.78,1213 1653.36,1213 1653.95,1213 1654.54,1213 1655.12,1213 1655.71,1213 1656.29,1213 1656.88,1213 1657.47,1213 1658.05,1213 1658.64,1213 1659.23,1213 1659.81,1213 1660.4,1213 1660.99,1213 1661.57,1213 1662.16,1213 1662.75,1213 1663.33,1213 1663.92,1213 1664.5,1213 1665.09,1213 1665.68,1213 1666.26,1213 1666.85,1213 1667.44,1213 1668.02,1213 1668.61,1213 1669.2,1213 1669.78,1213 1670.37,1213 1670.96,1213 1671.54,1213 1672.13,1213 1672.71,1213 1673.3,1213 1673.89,1213 1674.47,1213 1675.06,1213 1675.65,1213 1676.23,1213 1676.82,1213 1677.41,1213 1677.99,1213 1678.58,1213 1679.17,1213 1679.75,1213 1680.34,1213 1680.92,1213 1681.51,1213 1682.1,1213 1682.68,1213 1683.27,1213 1683.86,1213 1684.44,1213 1685.03,1213 1685.62,1213 1686.2,1213 1686.79,1213 1687.37,1213 1687.96,1213 1688.55,1213 1689.13,1213 1689.72,1213 1690.31,1213 1690.89,1213 1691.48,1213 1692.07,1213 1692.65,1213 1693.24,1213 1693.83,1213 1694.41,1213 1695,1213 1695.58,1213 1696.17,1213 1696.76,1213 1697.34,1213 1697.93,1213 1698.52,1213 1699.1,1213 1699.69,1213 1700.28,1213 1700.86,1213 1701.45,1213 1702.04,1213 1702.62,1213 1703.21,1213 1703.79,1213 1704.38,1213 1704.97,1213 1705.55,1213 1706.14,1213 1706.73,1213 1707.31,1213 1707.9,1213 1708.49,1213 1709.07,1213 1709.66,1213 1710.24,1213 1710.83,1213 1711.42,1213 1712,1213 1712.59,1213 1713.18,1213 1713.76,1213 1714.35,1213 1714.94,1213 1715.52,1213 1716.11,1213 1716.7,1213 1717.28,1213 1717.87,1213 1718.45,1213 1719.04,1213 1719.63,1213 1720.21,1213 1720.8,1213 1721.39,1213 1721.97,1213 1722.56,1213 1723.15,1213 1723.73,1213 1724.32,1213 1724.91,1213 1725.49,1213 1726.08,1213 1726.66,1213 1727.25,1213 1727.84,1213 1728.42,1213 1729.01,1213 1729.6,1213 1730.18,1213 1730.77,1213 1731.36,1213 1731.94,1213 1732.53,1213 1733.11,1213 1733.7,1213 1734.29,1213 1734.87,1213 1735.46,1213 1736.05,1213 1736.63,1213 1737.22,1213 1737.81,1213 1738.39,1213 1738.98,1213 1739.57,1213 1740.15,1213 1740.74,1213 1741.32,1213 1741.91,1213 1742.5,1213 1743.08,1213 1743.67,1213 1744.26,1213 1744.84,1213 1745.43,1213 1746.02,1213 1746.6,1213 1747.19,1213 1747.78,1213 1748.36,1213 1748.95,1213 1749.53,1213 1750.12,1213 1750.71,1213 1751.29,1213 1751.88,1213 1752.47,1213 1753.05,1213 1753.64,1213 1754.23,1213 1754.81,1213 1755.4,1213 1755.99,1213 1756.57,1213 1757.16,1213 1757.74,1213 1758.33,1213 1758.92,1213 1759.5,1213 1760.09,1213 1760.68,1213 1761.26,1213 1761.85,1213 1762.44,1213 1763.02,1213 1763.61,1213 1764.19,1213 1764.78,1213 1765.37,1213 1765.95,1213 1766.54,1213 1767.13,1213 1767.71,1213 1768.3,1213 1768.89,1213 1769.47,1213 1770.06,1213 1770.65,1213 1771.23,1213 1771.82,1213 1772.4,1213 1772.99,1213 1773.58,1213 1774.16,1213 1774.75,1213 1775.34,1213 1775.92,1213 1776.51,1213 1777.1,1213 1777.68,1213 1778.27,1213 1778.86,1213 1779.44,1213 1780.03,1213 1780.61,1213 1781.2,1213 1781.79,1213 1782.37,1213 1782.96,1213 1783.55,1213 1784.13,1213 1784.72,1213 1785.31,1213 1785.89,1213 1786.48,1213 1787.06,1213 1787.65,1213 1788.24,1213 1788.82,1213 1789.41,1213 1790,1213 1790.58,1213 1791.17,1213 1791.76,1213 1792.34,1213 1792.93,1213 1793.52,1213 1794.1,1213 1794.69,1213 1795.27,1213 1795.86,1213 1796.45,1213 1797.03,1213 1797.62,1213 1798.21,1213 1798.79,1213 1799.38,1213 1799.97,1213 1800.55,1213 1801.14,1213 1801.73,1213 1802.31,1213 1802.9,1213 1803.48,1213 1804.07,1213 1804.66,1213 1805.24,1213 1805.83,1213 1806.42,1213 1807,1213 1807.59,1213 1808.18,1213 1808.76,1213 1809.35,1213 1809.94,1213 1810.52,1213 1811.11,1213 1811.69,1213 1812.28,1213 1812.87,1213 1813.45,1213 1814.04,1213 1814.63,1213 1815.21,1213 1815.8,1213 1816.39,1213 1816.97,1213 1817.56,1213 1818.14,1213 1818.73,1213 1819.32,1213 1819.9,1213 1820.49,1213 1821.08,1213 1821.66,1213 1822.25,1213 1822.84,1213 1823.42,1213 1824.01,1213 1824.6,1213 1825.18,1213 1825.77,1213 1826.35,1213 1826.94,1213 1827.53,1213 1828.11,1213 1828.7,1213 1829.29,1213 1829.87,1213 1830.46,1213 1831.05,1213 1831.63,1213 1832.22,1213 1832.81,1213 1833.39,1213 1833.98,1213 1834.56,1213 1835.15,1213 1835.74,1213 1836.32,1213 1836.91,1213 1837.5,1213 1838.08,1213 1838.67,1213 1839.26,1213 1839.84,1213 1840.43,1213 1841.01,1213 1841.6,1213 1842.19,1213 1842.77,1213 1843.36,1213 1843.95,1213 1844.53,1213 1845.12,1213 1845.71,1213 1846.29,1213 1846.88,1213 1847.47,1213 1848.05,1213 1848.64,1213 1849.22,1213 1849.81,1213 1850.4,1213 1850.98,1213 1851.57,1213 1852.16,1213 1852.74,1213 1853.33,1213 1853.92,1213 1854.5,1213 1855.09,1213 1855.68,1213 1856.26,1213 1856.85,1213 1857.43,1213 1858.02,1213 1858.61,1213 1859.19,1213 1859.78,1213 1860.37,1213 1860.95,1213 1861.54,1213 1862.13,1213 1862.71,1213 1863.3,1213 1863.88,1213 1864.47,1213 1865.06,1213 1865.64,1213 1866.23,1213 1866.82,1213 1867.4,1213 1867.99,1213 1868.58,1213 1869.16,1213 1869.75,1213 1870.34,1213 1870.92,1213 1871.51,1213 1872.09,1213 1872.68,1213 1873.27,1213 1873.85,1213 1874.44,1213 1875.03,1213 1875.61,1213 1876.2,1213 1876.79,1213 1877.37,1213 1877.96,1213 1878.55,1213 1879.13,1213 1879.72,1213 1880.3,1213 1880.89,1213 1881.48,1213 1882.06,1213 1882.65,1213 1883.24,1213 1883.82,1213 1884.41,1213 1885,1213 1885.58,1213 1886.17,1213 1886.76,1213 1887.34,1213 1887.93,1213 1888.51,1213 1889.1,1213 1889.69,1213 1890.27,1213 1890.86,1213 1891.45,1213 1892.03,1213 1892.62,1213 1893.21,1213 1893.79,1213 1894.38,1213 1894.96,1213 1895.55,1213 1896.14,1213 1896.72,1213 1897.31,1213 1897.9,1213 1898.48,1213 1899.07,1213 1899.66,1213 1900.24,1213 1900.83,1213 1901.42,1213 1902,1213 1902.59,1213 1903.17,1213 1903.76,1213 1904.35,1213 1904.93,1213 1905.52,1213 1906.11,1213 1906.69,1213 1907.28,1213 1907.87,1213 1908.45,1213 1909.04,1213 1909.63,1213 1910.21,1213 1910.8,1213 1911.38,1213 1911.97,1213 1912.56,1213 1913.14,1213 1913.73,1213 1914.32,1213 1914.9,1213 1915.49,1213 1916.08,1213 1916.66,1213 1917.25,1213 1917.83,1213 1918.42,1213 1919.01,1213 1919.59,1213 1920.18,1213 1920.77,1213 1921.35,1213 1921.94,1213 1922.53,1213 1923.11,1213 1923.7,1213 1924.29,1213 1924.87,1213 1925.46,1213 1926.04,1213 1926.63,1213 1927.22,1213 1927.8,1213 1928.39,1213 1928.98,1213 1929.56,1213 1930.15,1213 1930.74,1213 1931.32,1213 1931.91,1213 1932.5,1213 1933.08,1213 1933.67,1213 1934.25,1213 1934.84,1213 1935.43,1213 1936.01,1213 1936.6,1213 1937.19,1213 1937.77,1213 1938.36,1213 1938.95,1213 1939.53,1213 1940.12,1213 1940.71,1213 1941.29,1213 1941.88,1213 1942.46,1213 1943.05,1213 1943.64,1213 1944.22,1213 1944.81,1213 1945.4,1213 1945.98,1213 1946.57,1213 1947.16,1213 1947.74,1213 1948.33,1213 1948.91,1213 1949.5,1213 1950.09,1213 1950.67,1213 1951.26,1213 1951.85,1213 1952.43,1213 1953.02,1213 1953.61,1213 1954.19,1213 1954.78,1213 1955.37,1213 1955.95,1213 1956.54,1213 1957.12,1213 1957.71,1213 1958.3,1213 1958.88,1213 1959.47,1213 1960.06,1213 1960.64,1213 1961.23,1213 1961.82,1213 1962.4,1213 1962.99,1213 1963.58,1213 1964.16,1213 1964.75,1213 1965.33,1213 1965.92,1213 1966.51,1213 1967.09,1213 1967.68,1213 1968.27,1213 1968.85,1213 1969.44,1213 1970.03,1213 1970.61,1213 1971.2,1213 1971.78,1213 1972.37,1213 1972.96,1213 1973.54,1213 1974.13,1213 1974.72,1213 1975.3,1213 1975.89,1213 1976.48,1213 1977.06,1213 1977.65,1213 1978.24,1213 1978.82,1213 1979.41,1213 1979.99,1213 1980.58,1213 1981.17,1213 1981.75,1213 1982.34,1213 1982.93,1213 1983.51,1213 1984.1,1213 1984.69,1213 1985.27,1213 1985.86,1213 1986.45,1213 1987.03,1213 1987.62,1213 1988.2,1213 1988.79,1213 1989.38,1213 1989.96,1213 1990.55,1213 1991.14,1213 1991.72,1213 1992.31,1213 1992.9,1213 1993.48,1213 1994.07,1213 1994.65,1213 1995.24,1213 1995.83,1213 1996.41,1213 1997,1213 1997.59,1213 1998.17,1213 1998.76,1213 1999.35,1213 1999.93,1213 2000.52,1213 2001.11,1213 2001.69,1213 2002.28,1213 2002.86,1213 2003.45,1213 2004.04,1213 2004.62,1213 2005.21,1213 2005.8,1213 2006.38,1213 2006.97,1213 2007.56,1213 2008.14,1213 2008.73,1213 2009.32,1213 2009.9,1213 2010.49,1213 2011.07,1213 2011.66,1213 2012.25,1213 2012.83,1213 2013.42,1213 2014.01,1213 2014.59,1213 2015.18,1213 2015.77,1213 2016.35,1213 2016.94,1213 2017.53,1213 2018.11,1213 2018.7,1213 2019.28,1213 2019.87,1213 2020.46,1213 2021.04,1213 2021.63,1213 2022.22,1213 2022.8,1213 2023.39,1213 2023.98,1213 2024.56,1213 2025.15,1213 2025.73,1213 2026.32,1213 2026.91,1213 2027.49,1213 2028.08,1213 2028.67,1213 2029.25,1213 2029.84,1213 2030.43,1213 2031.01,1213 2031.6,1213 2032.19,1213 2032.77,1213 2033.36,1213 2033.94,1213 2034.53,1213 2035.12,1213 2035.7,1213 2036.29,1213 2036.88,1213 2037.46,1213 2038.05,1213 2038.64,1213 2039.22,1213 2039.81,1213 2040.4,1213 2040.98,1213 2041.57,1213 2042.15,1213 2042.74,1213 2043.33,1213 2043.91,1213 2044.5,1213 2045.09,1213 2045.67,1213 2046.26,1213 2046.85,1213 2047.43,1213 2048.02,1213 2048.6,1213 2049.19,1213 2049.78,1213 2050.36,1213 2050.95,1213 2051.54,1213 2052.12,1213 2052.71,1213 2053.3,1213 2053.88,1213 2054.47,1213 2055.06,1213 2055.64,1213 2056.23,1213 2056.81,1213 2057.4,1213 2057.99,1213 2058.57,1213 2059.16,1213 2059.75,1213 2060.33,1213 2060.92,1213 2061.51,1213 2062.09,1213 2062.68,1213 2063.27,1213 2063.85,1213 2064.44,1213 2065.02,1213 2065.61,1213 2066.2,1213 2066.78,1213 2067.37,1213 2067.96,1213 2068.54,1213 2069.13,1213 2069.72,1213 2070.3,1213 2070.89,1213 2071.48,1213 2072.06,1213 2072.65,1213 2073.23,1213 2073.82,1213 2074.41,1213 2074.99,1213 2075.58,1213 2076.17,1213 2076.75,1213 2077.34,1213 2077.93,1213 2078.51,1213 2079.1,1213 2079.68,1213 2080.27,1213 2080.86,1213 2081.44,1213 2082.03,1213 2082.62,1213 2083.2,1213 2083.79,1213 2084.38,1213 2084.96,1213 2085.55,1213 2086.14,1213 2086.72,1213 2087.31,1213 2087.89,1213 2088.48,1213 2089.07,1213 2089.65,1213 2090.24,1213 2090.83,1213 2091.41,1213 2092,1213 2092.59,1213 2093.17,1213 2093.76,1213 2094.35,1213 2094.93,1213 2095.52,1213 2096.1,1213 2096.69,1213 2097.28,1213 2097.86,1213 2098.45,1213 2099.04,1213 2099.62,1213 2100.21,1213 2100.8,1213 2101.38,1213 2101.97,1213 2102.55,1213 2103.14,1213 2103.73,1213 2104.31,1213 2104.9,1213 2105.49,1213 2106.07,1213 2106.66,1213 2107.25,1213 2107.83,1213 2108.42,1213 2109.01,1213 2109.59,1213 2110.18,1213 2110.76,1213 2111.35,1213 2111.94,1213 2112.52,1213 2113.11,1213 2113.7,1213 2114.28,1213 2114.87,1213 2115.46,1213 2116.04,1213 2116.63,1213 2117.22,1213 2117.8,1213 2118.39,1213 2118.97,1213 2119.56,1213 2120.15,1213 2120.73,1213 2121.32,1213 2121.91,1213 2122.49,1213 2123.08,1213 2123.67,1213 2124.25,1213 2124.84,1213 2125.42,1213 2126.01,1213 2126.6,1213 2127.18,1213 2127.77,1213 2128.36,1213 2128.94,1213 2129.53,1213 2130.12,1213 2130.7,1213 2131.29,1213 2131.88,1213 2132.46,1213 2133.05,1213 2133.63,1213 2134.22,1213 2134.81,1213 2135.39,1213 2135.98,1213 2136.57,1213 2137.15,1213 2137.74,1213 2138.33,1213 2138.91,1213 2139.5,1213 2140.09,1213 2140.67,1213 2141.26,1213 2141.84,1213 2142.43,1213 2143.02,1213 2143.6,1213 2144.19,1213 2144.78,1213 2145.36,1213 2145.95,1213 2146.54,1213 2147.12,1213 2147.71,1213 2148.3,1213 2148.88,1213 2149.47,1213 2150.05,1213 2150.64,1213 2151.23,1213 2151.81,1213 2152.4,1213 2152.99,1213 2153.57,1213 2154.16,1213 2154.75,1213 2155.33,1213 2155.92,1213 2156.5,1213 2157.09,1213 2157.68,1213 2158.26,1213 \"/>\n<path clip-path=\"url(#clip332)\" d=\"M986.025 1212.77 L986.612 1212.77 L987.198 1212.77 L987.785 1212.77 L988.371 1212.77 L988.957 1212.77 L989.544 1212.77 L990.13 1212.77 L990.717 1212.77 L991.303 1212.77 L991.889 1212.77 L992.476 1212.77 L993.062 1212.77 L993.649 1212.77 L994.235 1212.77 L994.822 1212.77 L995.408 1212.77 L995.994 1212.77 L996.581 1212.77 L997.167 1212.77 L997.754 1212.77 L998.34 1212.77 L998.926 1212.77 L999.513 1212.77 L1000.1 1212.77 L1000.69 1212.77 L1001.27 1212.77 L1001.86 1212.77 L1002.44 1212.77 L1003.03 1212.77 L1003.62 1212.77 L1004.2 1212.77 L1004.79 1212.77 L1005.38 1212.77 L1005.96 1212.77 L1006.55 1212.77 L1007.14 1212.77 L1007.72 1212.77 L1008.31 1212.77 L1008.9 1212.77 L1009.48 1212.77 L1010.07 1212.77 L1010.65 1212.77 L1011.24 1212.77 L1011.83 1212.77 L1012.41 1212.77 L1013 1212.77 L1013.59 1212.77 L1014.17 1212.77 L1014.76 1212.77 L1015.35 1212.77 L1015.93 1212.77 L1016.52 1212.77 L1017.11 1212.77 L1017.69 1212.77 L1018.28 1212.77 L1018.86 1212.77 L1019.45 1212.77 L1020.04 1212.77 L1020.62 1212.77 L1021.21 1212.77 L1021.8 1212.77 L1022.38 1212.77 L1022.97 1212.77 L1023.56 1212.77 L1024.14 1212.77 L1024.73 1212.77 L1025.32 1212.77 L1025.9 1212.77 L1026.49 1212.77 L1027.07 1212.77 L1027.66 1212.77 L1028.25 1212.77 L1028.83 1212.77 L1029.42 1212.77 L1030.01 1212.77 L1030.59 1212.77 L1031.18 1212.77 L1031.77 1212.77 L1032.35 1212.77 L1032.94 1212.77 L1033.52 1212.77 L1034.11 1212.77 L1034.7 1212.77 L1035.28 1212.77 L1035.87 1212.77 L1036.46 1212.77 L1037.04 1212.77 L1037.63 1212.77 L1038.22 1212.77 L1038.8 1212.77 L1039.39 1212.77 L1039.98 1212.77 L1040.56 1212.77 L1041.15 1212.77 L1041.73 1212.77 L1042.32 1212.77 L1042.91 1212.77 L1043.49 1212.77 L1044.08 1212.77 L1044.67 1212.77 L1045.25 1212.77 L1045.84 1212.77 L1046.43 1212.77 L1047.01 1212.77 L1047.6 1212.77 L1048.19 1212.77 L1048.77 1212.77 L1049.36 1212.77 L1049.94 1212.77 L1050.53 1212.77 L1051.12 1212.77 L1051.7 1212.77 L1052.29 1212.77 L1052.88 1212.77 L1053.46 1212.77 L1054.05 1212.77 L1054.64 1212.77 L1055.22 1212.77 L1055.81 1212.77 L1056.39 1212.77 L1056.98 1212.77 L1057.57 1212.77 L1058.15 1212.77 L1058.74 1212.77 L1059.33 1212.77 L1059.91 1212.77 L1060.5 1212.77 L1061.09 1212.77 L1061.67 1212.77 L1062.26 1212.77 L1062.85 1212.77 L1063.43 1212.77 L1064.02 1212.77 L1064.6 1212.77 L1065.19 1212.77 L1065.78 1212.77 L1066.36 1212.77 L1066.95 1212.77 L1067.54 1212.77 L1068.12 1212.77 L1068.71 1212.77 L1069.3 1212.77 L1069.88 1212.77 L1070.47 1212.77 L1071.06 1212.77 L1071.64 1212.77 L1072.23 1212.77 L1072.81 1212.77 L1073.4 1212.77 L1073.99 1212.77 L1074.57 1212.77 L1075.16 1212.77 L1075.75 1212.77 L1076.33 1212.77 L1076.92 1212.77 L1077.51 1212.77 L1078.09 1212.77 L1078.68 1212.77 L1079.26 1212.77 L1079.85 1212.77 L1080.44 1212.77 L1081.02 1212.77 L1081.61 1212.77 L1082.2 1212.77 L1082.78 1212.77 L1083.37 1212.77 L1083.96 1212.77 L1084.54 1212.77 L1085.13 1212.77 L1085.72 1212.77 L1086.3 1212.77 L1086.89 1212.77 L1087.47 1212.77 L1088.06 1212.77 L1088.65 1212.77 L1089.23 1212.77 L1089.82 1212.77 L1090.41 1212.77 L1090.99 1212.77 L1091.58 1212.77 L1092.17 1212.77 L1092.75 1212.77 L1093.34 1212.77 L1093.93 1212.77 L1094.51 1212.77 L1095.1 1212.77 L1095.68 1212.77 L1096.27 1212.77 L1096.86 1212.77 L1097.44 1212.77 L1098.03 1212.77 L1098.62 1212.77 L1099.2 1212.77 L1099.79 1212.77 L1100.38 1212.77 L1100.96 1212.77 L1101.55 1212.77 L1102.14 1212.77 L1102.72 1212.77 L1103.31 1212.77 L1103.89 1212.77 L1104.48 1212.77 L1105.07 1212.77 L1105.65 1212.77 L1106.24 1212.77 L1106.83 1212.77 L1107.41 1212.77 L1108 1212.77 L1108.59 1212.77 L1109.17 1212.77 L1109.76 1212.77 L1110.34 1212.77 L1110.93 1212.77 L1111.52 1212.77 L1112.1 1212.77 L1112.69 1212.77 L1113.28 1212.77 L1113.86 1212.77 L1114.45 1212.77 L1115.04 1212.77 L1115.62 1212.77 L1116.21 1212.77 L1116.8 1212.77 L1117.38 1212.77 L1117.97 1212.77 L1118.55 1212.77 L1119.14 1212.77 L1119.73 1212.77 L1120.31 1212.77 L1120.9 1212.77 L1121.49 1212.77 L1122.07 1212.77 L1122.66 1212.77 L1123.25 1212.77 L1123.83 1212.77 L1124.42 1212.77 L1125.01 1212.77 L1125.59 1212.77 L1126.18 1212.77 L1126.76 1212.77 L1127.35 1212.77 L1127.94 1212.77 L1128.52 1212.77 L1129.11 1212.77 L1129.7 1212.77 L1130.28 1212.77 L1130.87 1212.77 L1131.46 1212.77 L1132.04 1212.77 L1132.63 1212.77 L1133.21 1212.77 L1133.8 1212.77 L1134.39 1212.77 L1134.97 1212.77 L1135.56 1212.77 L1136.15 1212.77 L1136.73 1212.77 L1137.32 1212.77 L1137.91 1212.77 L1138.49 1212.77 L1139.08 1212.77 L1139.67 1212.77 L1140.25 1212.77 L1140.84 1212.77 L1141.42 1212.77 L1142.01 1212.77 L1142.6 1212.77 L1143.18 1212.77 L1143.77 1212.77 L1144.36 1212.77 L1144.94 1212.77 L1145.53 1212.77 L1146.12 1212.77 L1146.7 1212.77 L1147.29 1212.77 L1147.88 1212.77 L1148.46 1212.77 L1149.05 1212.77 L1149.63 1212.77 L1150.22 1212.77 L1150.81 1212.77 L1151.39 1212.77 L1151.98 1212.77 L1152.57 1212.77 L1153.15 1212.77 L1153.74 1212.77 L1154.33 1212.77 L1154.91 1212.77 L1155.5 1212.77 L1156.09 1212.77 L1156.67 1212.77 L1157.26 1212.77 L1157.84 1212.77 L1158.43 1212.77 L1159.02 1212.77 L1159.6 1212.77 L1160.19 1212.77 L1160.78 1212.77 L1161.36 1212.77 L1161.95 1212.77 L1162.54 1212.77 L1163.12 1212.77 L1163.71 1212.77 L1164.29 1212.77 L1164.88 1212.77 L1165.47 1212.77 L1166.05 1212.77 L1166.64 1212.77 L1167.23 1212.77 L1167.81 1212.77 L1168.4 1212.77 L1168.99 1212.77 L1169.57 1212.77 L1170.16 1212.77 L1170.75 1212.77 L1171.33 1212.77 L1171.92 1212.77 L1172.5 1212.77 L1173.09 1212.77 L1173.68 1212.77 L1174.26 1212.77 L1174.85 1212.77 L1175.44 1212.77 L1176.02 1212.77 L1176.61 1212.77 L1177.2 1212.77 L1177.78 1212.77 L1178.37 1212.77 L1178.96 1212.77 L1179.54 1212.77 L1180.13 1212.77 L1180.71 1212.77 L1181.3 1212.77 L1181.89 1212.77 L1182.47 1212.77 L1183.06 1212.77 L1183.65 1212.77 L1184.23 1212.77 L1184.82 1212.77 L1185.41 1212.77 L1185.99 1212.77 L1186.58 1212.77 L1187.16 1212.77 L1187.75 1212.77 L1188.34 1212.77 L1188.92 1212.77 L1189.51 1212.77 L1190.1 1212.77 L1190.68 1212.77 L1191.27 1212.77 L1191.86 1212.77 L1192.44 1212.77 L1193.03 1212.77 L1193.62 1212.77 L1194.2 1212.77 L1194.79 1212.77 L1195.37 1212.77 L1195.96 1212.77 L1196.55 1212.77 L1197.13 1212.77 L1197.72 1212.77 L1198.31 1212.77 L1198.89 1212.77 L1199.48 1212.77 L1200.07 1212.77 L1200.65 1212.77 L1201.24 1212.77 L1201.83 1212.77 L1202.41 1212.77 L1203 1212.77 L1203.58 1212.77 L1204.17 1212.77 L1204.76 1212.77 L1205.34 1212.77 L1205.93 1212.77 L1206.52 1212.77 L1207.1 1212.77 L1207.69 1212.77 L1208.28 1212.77 L1208.86 1212.77 L1209.45 1212.77 L1210.03 1212.77 L1210.62 1212.77 L1211.21 1212.77 L1211.79 1212.77 L1212.38 1212.77 L1212.97 1212.77 L1213.55 1212.77 L1214.14 1212.77 L1214.73 1212.77 L1215.31 1212.77 L1215.9 1212.77 L1216.49 1212.77 L1217.07 1212.77 L1217.66 1212.77 L1218.24 1212.77 L1218.83 1212.77 L1219.42 1212.77 L1220 1212.77 L1220.59 1212.77 L1221.18 1212.77 L1221.76 1212.77 L1222.35 1212.77 L1222.94 1212.77 L1223.52 1212.77 L1224.11 1212.77 L1224.7 1212.77 L1225.28 1212.77 L1225.87 1212.77 L1226.45 1212.77 L1227.04 1212.77 L1227.63 1212.77 L1228.21 1212.77 L1228.8 1212.77 L1229.39 1212.77 L1229.97 1212.77 L1230.56 1212.77 L1231.15 1212.77 L1231.73 1212.77 L1232.32 1212.77 L1232.91 1212.77 L1233.49 1212.77 L1234.08 1212.77 L1234.66 1212.77 L1235.25 1212.77 L1235.84 1212.77 L1236.42 1212.77 L1237.01 1212.77 L1237.6 1212.77 L1238.18 1212.77 L1238.77 1212.77 L1239.36 1212.77 L1239.94 1212.77 L1240.53 1212.77 L1241.11 1212.77 L1241.7 1212.77 L1242.29 1212.77 L1242.87 1212.77 L1243.46 1212.77 L1244.05 1212.77 L1244.63 1212.77 L1245.22 1212.77 L1245.81 1212.77 L1246.39 1212.77 L1246.98 1212.77 L1247.57 1212.77 L1248.15 1212.77 L1248.74 1212.77 L1249.32 1212.77 L1249.91 1212.77 L1250.5 1212.77 L1251.08 1212.77 L1251.67 1212.77 L1252.26 1212.77 L1252.84 1212.77 L1253.43 1212.77 L1254.02 1212.77 L1254.6 1212.77 L1255.19 1212.77 L1255.78 1212.77 L1256.36 1212.77 L1256.95 1212.77 L1257.53 1212.77 L1258.12 1212.77 L1258.71 1212.77 L1259.29 1212.77 L1259.88 1212.77 L1260.47 1212.77 L1261.05 1212.77 L1261.64 1212.77 L1262.23 1212.77 L1262.81 1212.77 L1263.4 1212.77 L1263.98 1212.77 L1264.57 1212.77 L1265.16 1212.77 L1265.74 1212.77 L1266.33 1212.77 L1266.92 1212.77 L1267.5 1212.77 L1268.09 1212.77 L1268.68 1212.77 L1269.26 1212.77 L1269.85 1212.77 L1270.44 1212.77 L1271.02 1212.77 L1271.61 1212.77 L1272.19 1212.77 L1272.78 1212.77 L1273.37 1212.77 L1273.95 1212.77 L1274.54 1212.77 L1275.13 1212.77 L1275.71 1212.77 L1276.3 1212.77 L1276.89 1212.77 L1277.47 1212.77 L1278.06 1212.77 L1278.65 1212.77 L1279.23 1212.77 L1279.82 1212.77 L1280.4 1212.77 L1280.99 1212.77 L1281.58 1212.77 L1282.16 1212.77 L1282.75 1212.77 L1283.34 1212.77 L1283.92 1212.77 L1284.51 1212.77 L1285.1 1212.77 L1285.68 1212.77 L1286.27 1212.77 L1286.86 1212.77 L1287.44 1212.77 L1288.03 1212.77 L1288.61 1212.77 L1289.2 1212.77 L1289.79 1212.77 L1290.37 1212.77 L1290.96 1212.77 L1291.55 1212.77 L1292.13 1212.77 L1292.72 1212.77 L1293.31 1212.77 L1293.89 1212.77 L1294.48 1212.77 L1295.06 1212.77 L1295.65 1212.77 L1296.24 1212.77 L1296.82 1212.77 L1297.41 1212.77 L1298 1212.77 L1298.58 1212.77 L1299.17 1212.77 L1299.76 1212.77 L1300.34 1212.77 L1300.93 1212.77 L1301.52 1212.77 L1302.1 1212.77 L1302.69 1212.77 L1303.27 1212.77 L1303.86 1212.77 L1304.45 1212.77 L1305.03 1212.77 L1305.62 1212.77 L1306.21 1212.77 L1306.79 1212.77 L1307.38 1212.77 L1307.97 1212.77 L1308.55 1212.77 L1309.14 1212.77 L1309.73 1212.77 L1310.31 1212.77 L1310.9 1212.77 L1311.48 1212.77 L1312.07 1212.77 L1312.66 1212.77 L1313.24 1212.77 L1313.83 1212.77 L1314.42 1212.77 L1315 1212.77 L1315.59 1212.77 L1316.18 1212.77 L1316.76 1212.77 L1317.35 1212.77 L1317.93 1212.77 L1318.52 1212.77 L1319.11 1212.77 L1319.69 1212.77 L1320.28 1212.77 L1320.87 1212.77 L1321.45 1212.77 L1322.04 1212.77 L1322.63 1212.77 L1323.21 1212.77 L1323.8 1212.77 L1324.39 1212.77 L1324.97 1212.77 L1325.56 1212.77 L1326.14 1212.77 L1326.73 1212.77 L1327.32 1212.77 L1327.9 1212.77 L1328.49 1212.77 L1329.08 1212.77 L1329.66 1212.77 L1330.25 1212.77 L1330.84 1212.77 L1331.42 1212.77 L1332.01 1212.77 L1332.6 1212.77 L1333.18 1212.77 L1333.77 1212.77 L1334.35 1212.77 L1334.94 1212.77 L1335.53 1212.77 L1336.11 1212.77 L1336.7 1212.77 L1337.29 1212.77 L1337.87 1212.77 L1338.46 1212.77 L1339.05 1212.77 L1339.63 1212.77 L1340.22 1212.77 L1340.8 1212.77 L1341.39 1212.77 L1341.98 1212.77 L1342.56 1212.77 L1343.15 1212.77 L1343.74 1212.77 L1344.32 1212.77 L1344.91 1212.77 L1345.5 1212.77 L1346.08 1212.77 L1346.67 1212.77 L1347.26 1212.77 L1347.84 1212.77 L1348.43 1212.77 L1349.01 1212.77 L1349.6 1212.77 L1350.19 1212.77 L1350.77 1212.77 L1351.36 1212.77 L1351.95 1212.77 L1352.53 1212.77 L1353.12 1212.77 L1353.71 1212.77 L1354.29 1212.77 L1354.88 1212.77 L1355.47 1212.77 L1356.05 1212.77 L1356.64 1212.77 L1357.22 1212.77 L1357.81 1212.77 L1358.4 1212.77 L1358.98 1212.77 L1359.57 1212.77 L1360.16 1212.77 L1360.74 1212.77 L1361.33 1212.77 L1361.92 1212.77 L1362.5 1212.77 L1363.09 1212.77 L1363.68 1212.77 L1364.26 1212.77 L1364.85 1212.77 L1365.43 1212.77 L1366.02 1212.77 L1366.61 1212.77 L1367.19 1212.77 L1367.78 1212.77 L1368.37 1212.77 L1368.95 1212.77 L1369.54 1212.77 L1370.13 1212.77 L1370.71 1212.77 L1371.3 1212.77 L1371.88 1212.77 L1372.47 1212.77 L1373.06 1212.77 L1373.64 1212.77 L1374.23 1212.77 L1374.82 1212.77 L1375.4 1212.77 L1375.99 1212.77 L1376.58 1212.77 L1377.16 1212.77 L1377.75 1212.77 L1378.34 1212.77 L1378.92 1212.77 L1379.51 1212.77 L1380.09 1212.77 L1380.68 1212.77 L1381.27 1212.77 L1381.85 1212.77 L1382.44 1212.77 L1383.03 1212.77 L1383.61 1212.77 L1384.2 1212.77 L1384.79 1212.77 L1385.37 1212.77 L1385.96 1212.77 L1386.55 1212.77 L1387.13 1212.77 L1387.72 1212.77 L1388.3 1212.77 L1388.89 1212.77 L1389.48 1212.77 L1390.06 1212.77 L1390.65 1212.77 L1391.24 1212.77 L1391.82 1212.77 L1392.41 1212.77 L1393 1212.77 L1393.58 1212.77 L1394.17 1212.77 L1394.75 1212.77 L1395.34 1212.77 L1395.93 1212.77 L1396.51 1212.77 L1397.1 1212.77 L1397.69 1212.77 L1398.27 1212.77 L1398.86 1212.77 L1399.45 1212.77 L1400.03 1212.77 L1400.62 1212.77 L1401.21 1212.77 L1401.79 1212.77 L1402.38 1212.77 L1402.96 1212.77 L1403.55 1212.77 L1404.14 1212.77 L1404.72 1212.77 L1405.31 1212.77 L1405.9 1212.77 L1406.48 1212.77 L1407.07 1212.77 L1407.66 1212.77 L1408.24 1212.77 L1408.83 1212.77 L1409.42 1212.77 L1410 1212.77 L1410.59 1212.77 L1411.17 1212.77 L1411.76 1212.77 L1412.35 1212.77 L1412.93 1212.77 L1413.52 1212.77 L1414.11 1212.77 L1414.69 1212.77 L1415.28 1212.77 L1415.87 1212.77 L1416.45 1212.77 L1417.04 1212.77 L1417.63 1212.77 L1418.21 1212.77 L1418.8 1212.77 L1419.38 1212.77 L1419.97 1212.77 L1420.56 1212.77 L1421.14 1212.77 L1421.73 1212.77 L1422.32 1212.77 L1422.9 1212.77 L1423.49 1212.77 L1424.08 1212.77 L1424.66 1212.77 L1425.25 1212.77 L1425.83 1212.77 L1426.42 1212.77 L1427.01 1212.77 L1427.59 1212.77 L1428.18 1212.77 L1428.77 1212.77 L1429.35 1212.77 L1429.94 1212.77 L1430.53 1212.77 L1431.11 1212.77 L1431.7 1212.77 L1432.29 1212.77 L1432.87 1212.77 L1433.46 1212.77 L1434.04 1212.77 L1434.63 1212.77 L1435.22 1212.77 L1435.8 1212.77 L1436.39 1212.77 L1436.98 1212.77 L1437.56 1212.77 L1438.15 1212.77 L1438.74 1212.77 L1439.32 1212.77 L1439.91 1212.77 L1440.5 1212.77 L1441.08 1212.77 L1441.67 1212.77 L1442.25 1212.77 L1442.84 1212.77 L1443.43 1212.77 L1444.01 1212.77 L1444.6 1212.77 L1445.19 1212.77 L1445.77 1212.77 L1446.36 1212.77 L1446.95 1212.77 L1447.53 1212.77 L1448.12 1212.77 L1448.7 1212.77 L1449.29 1212.77 L1449.88 1212.77 L1450.46 1212.77 L1451.05 1212.77 L1451.64 1212.77 L1452.22 1212.77 L1452.81 1212.77 L1453.4 1212.77 L1453.98 1212.77 L1454.57 1212.77 L1455.16 1212.77 L1455.74 1212.77 L1456.33 1212.77 L1456.91 1212.77 L1457.5 1212.77 L1458.09 1212.77 L1458.67 1212.77 L1459.26 1212.77 L1459.85 1212.77 L1460.43 1212.77 L1461.02 1212.77 L1461.61 1212.77 L1462.19 1212.77 L1462.78 1212.77 L1463.37 1212.77 L1463.95 1212.77 L1464.54 1212.77 L1465.12 1212.77 L1465.71 1212.77 L1466.3 1212.77 L1466.88 1212.77 L1467.47 1212.77 L1468.06 1212.77 L1468.64 1212.77 L1469.23 1212.77 L1469.82 1212.77 L1470.4 1212.77 L1470.99 1212.77 L1471.57 1212.77 L1472.16 1212.77 L1472.75 1212.77 L1473.33 1212.77 L1473.92 1212.77 L1474.51 1212.77 L1475.09 1212.77 L1475.68 1212.77 L1476.27 1212.77 L1476.85 1212.77 L1477.44 1212.77 L1478.03 1212.77 L1478.61 1212.77 L1479.2 1212.77 L1479.78 1212.77 L1480.37 1212.77 L1480.96 1212.77 L1481.54 1212.77 L1482.13 1212.77 L1482.72 1212.77 L1483.3 1212.77 L1483.89 1212.77 L1484.48 1212.77 L1485.06 1212.77 L1485.65 1212.77 L1486.24 1212.77 L1486.82 1212.77 L1487.41 1212.77 L1487.99 1212.77 L1488.58 1212.77 L1489.17 1212.77 L1489.75 1212.77 L1490.34 1212.77 L1490.93 1212.77 L1491.51 1212.77 L1492.1 1212.77 L1492.69 1212.77 L1493.27 1212.77 L1493.86 1212.77 L1494.45 1212.77 L1495.03 1212.77 L1495.62 1212.77 L1496.2 1212.77 L1496.79 1212.77 L1497.38 1212.77 L1497.96 1212.77 L1498.55 1212.77 L1499.14 1212.77 L1499.72 1212.77 L1500.31 1212.77 L1500.9 1212.77 L1501.48 1212.77 L1502.07 1212.77 L1502.65 1212.77 L1503.24 1212.77 L1503.83 1212.77 L1504.41 1212.77 L1505 1212.77 L1505.59 1212.77 L1506.17 1212.77 L1506.76 1212.77 L1507.35 1212.77 L1507.93 1212.77 L1508.52 1212.77 L1509.11 1212.77 L1509.69 1212.77 L1510.28 1212.77 L1510.86 1212.77 L1511.45 1212.77 L1512.04 1212.77 L1512.62 1212.77 L1513.21 1212.77 L1513.8 1212.77 L1514.38 1212.77 L1514.97 1212.77 L1515.56 1212.77 L1516.14 1212.77 L1516.73 1212.77 L1517.32 1212.77 L1517.9 1212.77 L1518.49 1212.77 L1519.07 1212.77 L1519.66 1212.77 L1520.25 1212.77 L1520.83 1212.77 L1521.42 1212.77 L1522.01 1212.77 L1522.59 1212.77 L1523.18 1212.77 L1523.77 1212.77 L1524.35 1212.77 L1524.94 1212.77 L1525.52 1212.77 L1526.11 1212.77 L1526.7 1212.77 L1527.28 1212.77 L1527.87 1212.77 L1528.46 1212.77 L1529.04 1212.77 L1529.63 1212.77 L1530.22 1212.77 L1530.8 1212.77 L1531.39 1212.77 L1531.98 1212.77 L1532.56 1212.77 L1533.15 1212.77 L1533.73 1212.77 L1534.32 1212.77 L1534.91 1212.77 L1535.49 1212.77 L1536.08 1212.77 L1536.67 1212.77 L1537.25 1212.77 L1537.84 1212.77 L1538.43 1212.77 L1539.01 1212.77 L1539.6 1212.77 L1540.19 1212.77 L1540.77 1212.77 L1541.36 1212.77 L1541.94 1212.77 L1542.53 1212.77 L1543.12 1212.77 L1543.7 1212.77 L1544.29 1212.77 L1544.88 1212.77 L1545.46 1212.77 L1546.05 1212.77 L1546.64 1212.77 L1547.22 1212.77 L1547.81 1212.77 L1548.4 1212.77 L1548.98 1212.77 L1549.57 1212.77 L1550.15 1212.77 L1550.74 1212.77 L1551.33 1212.77 L1551.91 1212.77 L1552.5 1212.77 L1553.09 1212.77 L1553.67 1212.77 L1554.26 1212.77 L1554.85 1212.77 L1555.43 1212.77 L1556.02 1212.77 L1556.6 1212.77 L1557.19 1212.77 L1557.78 1212.77 L1558.36 1212.77 L1558.95 1212.77 L1559.54 1212.77 L1560.12 1212.77 L1560.71 1212.77 L1561.3 1212.77 L1561.88 1212.77 L1562.47 1212.77 L1563.06 1212.77 L1563.64 1212.77 L1564.23 1212.77 L1564.81 1212.77 L1565.4 1212.77 L1565.99 1212.77 L1566.57 1212.77 L1567.16 1212.77 L1567.75 1212.77 L1568.33 1212.77 L1568.92 1212.77 L1569.51 1212.77 L1570.09 1212.77 L1570.68 1212.77 L1571.27 1212.77 L1571.85 1212.77 L1572.44 1212.77 L1573.02 1212.77 L1573.61 1212.77 L1574.2 1212.77 L1574.78 1212.77 L1575.37 1212.77 L1575.96 1212.77 L1576.54 1212.77 L1577.13 1212.77 L1577.72 1212.77 L1578.3 1212.77 L1578.89 1212.77 L1579.47 1212.77 L1580.06 1212.77 L1580.65 1212.77 L1581.23 1212.77 L1581.82 1212.77 L1582.41 1212.77 L1582.99 1212.77 L1583.58 1212.77 L1584.17 1212.77 L1584.75 1212.77 L1585.34 1212.77 L1585.93 1212.77 L1586.51 1212.77 L1587.1 1212.77 L1587.68 1212.77 L1588.27 1212.77 L1588.86 1212.77 L1589.44 1212.77 L1590.03 1212.77 L1590.62 1212.77 L1591.2 1212.77 L1591.79 1212.77 L1592.38 1212.77 L1592.96 1212.77 L1593.55 1212.77 L1594.14 1212.77 L1594.72 1212.77 L1595.31 1212.77 L1595.89 1212.77 L1596.48 1212.77 L1597.07 1212.77 L1597.65 1212.77 L1598.24 1212.77 L1598.83 1212.77 L1599.41 1212.77 L1600 1212.77 L1600.59 1212.77 L1601.17 1212.77 L1601.76 1212.77 L1602.34 1212.77 L1602.93 1212.77 L1603.52 1212.77 L1604.1 1212.77 L1604.69 1212.77 L1605.28 1212.77 L1605.86 1212.77 L1606.45 1212.77 L1607.04 1212.77 L1607.62 1212.77 L1608.21 1212.77 L1608.8 1212.77 L1609.38 1212.77 L1609.97 1212.77 L1610.55 1212.77 L1611.14 1212.77 L1611.73 1212.77 L1612.31 1212.77 L1612.9 1212.77 L1613.49 1212.77 L1614.07 1212.77 L1614.66 1212.77 L1615.25 1212.77 L1615.83 1212.77 L1616.42 1212.77 L1617.01 1212.77 L1617.59 1212.77 L1618.18 1212.77 L1618.76 1212.77 L1619.35 1212.77 L1619.94 1212.77 L1620.52 1212.77 L1621.11 1212.77 L1621.7 1212.77 L1622.28 1212.77 L1622.87 1212.77 L1623.46 1212.77 L1624.04 1212.77 L1624.63 1212.77 L1625.22 1212.77 L1625.8 1212.77 L1626.39 1212.77 L1626.97 1212.77 L1627.56 1212.77 L1628.15 1212.77 L1628.73 1212.77 L1629.32 1212.77 L1629.91 1212.77 L1630.49 1212.77 L1631.08 1212.77 L1631.67 1212.77 L1632.25 1212.77 L1632.84 1212.77 L1633.42 1212.77 L1634.01 1212.77 L1634.6 1212.77 L1635.18 1212.77 L1635.77 1212.77 L1636.36 1212.77 L1636.94 1212.77 L1637.53 1212.77 L1638.12 1212.77 L1638.7 1212.77 L1639.29 1212.77 L1639.88 1212.77 L1640.46 1212.77 L1641.05 1212.77 L1641.63 1212.77 L1642.22 1212.77 L1642.81 1212.77 L1643.39 1212.77 L1643.98 1212.77 L1644.57 1212.77 L1645.15 1212.77 L1645.74 1212.77 L1646.33 1212.77 L1646.91 1212.77 L1647.5 1212.77 L1648.09 1212.77 L1648.67 1212.77 L1649.26 1212.77 L1649.84 1212.77 L1650.43 1212.77 L1651.02 1212.77 L1651.6 1212.77 L1652.19 1212.77 L1652.78 1212.77 L1653.36 1212.77 L1653.95 1212.77 L1654.54 1212.77 L1655.12 1212.77 L1655.71 1212.77 L1656.29 1212.77 L1656.88 1212.77 L1657.47 1212.77 L1658.05 1212.77 L1658.64 1212.77 L1659.23 1212.77 L1659.81 1212.77 L1660.4 1212.77 L1660.99 1212.77 L1661.57 1212.77 L1662.16 1212.77 L1662.75 1212.77 L1663.33 1212.77 L1663.92 1212.77 L1664.5 1212.77 L1665.09 1212.77 L1665.68 1212.77 L1666.26 1212.77 L1666.85 1212.77 L1667.44 1212.77 L1668.02 1212.77 L1668.61 1212.77 L1669.2 1212.77 L1669.78 1212.77 L1670.37 1212.77 L1670.96 1212.77 L1671.54 1212.77 L1672.13 1212.77 L1672.71 1212.77 L1673.3 1212.77 L1673.89 1212.77 L1674.47 1212.77 L1675.06 1212.77 L1675.65 1212.77 L1676.23 1212.77 L1676.82 1212.77 L1677.41 1212.77 L1677.99 1212.77 L1678.58 1212.77 L1679.17 1212.77 L1679.75 1212.77 L1680.34 1212.77 L1680.92 1212.77 L1681.51 1212.77 L1682.1 1212.77 L1682.68 1212.77 L1683.27 1212.77 L1683.86 1212.77 L1684.44 1212.77 L1685.03 1212.77 L1685.62 1212.77 L1686.2 1212.77 L1686.79 1212.77 L1687.37 1212.77 L1687.96 1212.77 L1688.55 1212.77 L1689.13 1212.77 L1689.72 1212.77 L1690.31 1212.77 L1690.89 1212.77 L1691.48 1212.77 L1692.07 1212.77 L1692.65 1212.77 L1693.24 1212.77 L1693.83 1212.77 L1694.41 1212.77 L1695 1212.77 L1695.58 1212.77 L1696.17 1212.77 L1696.76 1212.77 L1697.34 1212.77 L1697.93 1212.77 L1698.52 1212.77 L1699.1 1212.77 L1699.69 1212.77 L1700.28 1212.77 L1700.86 1212.77 L1701.45 1212.77 L1702.04 1212.77 L1702.62 1212.77 L1703.21 1212.77 L1703.79 1212.77 L1704.38 1212.77 L1704.97 1212.77 L1705.55 1212.77 L1706.14 1212.77 L1706.73 1212.77 L1707.31 1212.77 L1707.9 1212.77 L1708.49 1212.77 L1709.07 1212.77 L1709.66 1212.77 L1710.24 1212.77 L1710.83 1212.77 L1711.42 1212.77 L1712 1212.77 L1712.59 1212.77 L1713.18 1212.77 L1713.76 1212.77 L1714.35 1212.77 L1714.94 1212.77 L1715.52 1212.77 L1716.11 1212.77 L1716.7 1212.77 L1717.28 1212.77 L1717.87 1212.77 L1718.45 1212.77 L1719.04 1212.77 L1719.63 1212.77 L1720.21 1212.77 L1720.8 1212.77 L1721.39 1212.77 L1721.97 1212.77 L1722.56 1212.77 L1723.15 1212.77 L1723.73 1212.77 L1724.32 1212.77 L1724.91 1212.77 L1725.49 1212.77 L1726.08 1212.77 L1726.66 1212.77 L1727.25 1212.77 L1727.84 1212.77 L1728.42 1212.77 L1729.01 1212.77 L1729.6 1212.77 L1730.18 1212.77 L1730.77 1212.77 L1731.36 1212.77 L1731.94 1212.77 L1732.53 1212.77 L1733.11 1212.77 L1733.7 1212.77 L1734.29 1212.77 L1734.87 1212.77 L1735.46 1212.77 L1736.05 1212.77 L1736.63 1212.77 L1737.22 1212.77 L1737.81 1212.77 L1738.39 1212.77 L1738.98 1212.77 L1739.57 1212.77 L1740.15 1212.77 L1740.74 1212.77 L1741.32 1212.77 L1741.91 1212.77 L1742.5 1212.77 L1743.08 1212.77 L1743.67 1212.77 L1744.26 1212.77 L1744.84 1212.77 L1745.43 1212.77 L1746.02 1212.77 L1746.6 1212.77 L1747.19 1212.77 L1747.78 1212.77 L1748.36 1212.77 L1748.95 1212.77 L1749.53 1212.77 L1750.12 1212.77 L1750.71 1212.77 L1751.29 1212.77 L1751.88 1212.77 L1752.47 1212.77 L1753.05 1212.77 L1753.64 1212.77 L1754.23 1212.77 L1754.81 1212.77 L1755.4 1212.77 L1755.99 1212.77 L1756.57 1212.77 L1757.16 1212.77 L1757.74 1212.77 L1758.33 1212.77 L1758.92 1212.77 L1759.5 1212.77 L1760.09 1212.77 L1760.68 1212.77 L1761.26 1212.77 L1761.85 1212.77 L1762.44 1212.77 L1763.02 1212.77 L1763.61 1212.77 L1764.19 1212.77 L1764.78 1212.77 L1765.37 1212.77 L1765.95 1212.77 L1766.54 1212.77 L1767.13 1212.77 L1767.71 1212.77 L1768.3 1212.77 L1768.89 1212.77 L1769.47 1212.77 L1770.06 1212.77 L1770.65 1212.77 L1771.23 1212.77 L1771.82 1212.77 L1772.4 1212.77 L1772.99 1212.77 L1773.58 1212.77 L1774.16 1212.77 L1774.75 1212.77 L1775.34 1212.77 L1775.92 1212.77 L1776.51 1212.77 L1777.1 1212.77 L1777.68 1212.77 L1778.27 1212.77 L1778.86 1212.77 L1779.44 1212.77 L1780.03 1212.77 L1780.61 1212.77 L1781.2 1212.77 L1781.79 1212.77 L1782.37 1212.77 L1782.96 1212.77 L1783.55 1212.77 L1784.13 1212.77 L1784.72 1212.77 L1785.31 1212.77 L1785.89 1212.77 L1786.48 1212.77 L1787.06 1212.77 L1787.65 1212.77 L1788.24 1212.77 L1788.82 1212.77 L1789.41 1212.77 L1790 1212.77 L1790.58 1212.77 L1791.17 1212.77 L1791.76 1212.77 L1792.34 1212.77 L1792.93 1212.77 L1793.52 1212.77 L1794.1 1212.77 L1794.69 1212.77 L1795.27 1212.77 L1795.86 1212.77 L1796.45 1212.77 L1797.03 1212.77 L1797.62 1212.77 L1798.21 1212.77 L1798.79 1212.77 L1799.38 1212.77 L1799.97 1212.77 L1800.55 1212.77 L1801.14 1212.77 L1801.73 1212.77 L1802.31 1212.77 L1802.9 1212.77 L1803.48 1212.77 L1804.07 1212.77 L1804.66 1212.77 L1805.24 1212.77 L1805.83 1212.77 L1806.42 1212.77 L1807 1212.77 L1807.59 1212.77 L1808.18 1212.77 L1808.76 1212.77 L1809.35 1212.77 L1809.94 1212.77 L1810.52 1212.77 L1811.11 1212.77 L1811.69 1212.77 L1812.28 1212.77 L1812.87 1212.77 L1813.45 1212.77 L1814.04 1212.77 L1814.63 1212.77 L1815.21 1212.77 L1815.8 1212.77 L1816.39 1212.77 L1816.97 1212.77 L1817.56 1212.77 L1818.14 1212.77 L1818.73 1212.77 L1819.32 1212.77 L1819.9 1212.77 L1820.49 1212.77 L1821.08 1212.77 L1821.66 1212.77 L1822.25 1212.77 L1822.84 1212.77 L1823.42 1212.77 L1824.01 1212.77 L1824.6 1212.77 L1825.18 1212.77 L1825.77 1212.77 L1826.35 1212.77 L1826.94 1212.77 L1827.53 1212.77 L1828.11 1212.77 L1828.7 1212.77 L1829.29 1212.77 L1829.87 1212.77 L1830.46 1212.77 L1831.05 1212.77 L1831.63 1212.77 L1832.22 1212.77 L1832.81 1212.77 L1833.39 1212.77 L1833.98 1212.77 L1834.56 1212.77 L1835.15 1212.77 L1835.74 1212.77 L1836.32 1212.77 L1836.91 1212.77 L1837.5 1212.77 L1838.08 1212.77 L1838.67 1212.77 L1839.26 1212.77 L1839.84 1212.77 L1840.43 1212.77 L1841.01 1212.77 L1841.6 1212.77 L1842.19 1212.77 L1842.77 1212.77 L1843.36 1212.77 L1843.95 1212.77 L1844.53 1212.77 L1845.12 1212.77 L1845.71 1212.77 L1846.29 1212.77 L1846.88 1212.77 L1847.47 1212.77 L1848.05 1212.77 L1848.64 1212.77 L1849.22 1212.77 L1849.81 1212.77 L1850.4 1212.77 L1850.98 1212.77 L1851.57 1212.77 L1852.16 1212.77 L1852.74 1212.77 L1853.33 1212.77 L1853.92 1212.77 L1854.5 1212.77 L1855.09 1212.77 L1855.68 1212.77 L1856.26 1212.77 L1856.85 1212.77 L1857.43 1212.77 L1858.02 1212.77 L1858.61 1212.77 L1859.19 1212.77 L1859.78 1212.77 L1860.37 1212.77 L1860.95 1212.77 L1861.54 1212.77 L1862.13 1212.77 L1862.71 1212.77 L1863.3 1212.77 L1863.88 1212.77 L1864.47 1212.77 L1865.06 1212.77 L1865.64 1212.77 L1866.23 1212.77 L1866.82 1212.77 L1867.4 1212.77 L1867.99 1212.77 L1868.58 1212.77 L1869.16 1212.77 L1869.75 1212.77 L1870.34 1212.77 L1870.92 1212.77 L1871.51 1212.77 L1872.09 1212.77 L1872.68 1212.77 L1873.27 1212.77 L1873.85 1212.77 L1874.44 1212.77 L1875.03 1212.77 L1875.61 1212.77 L1876.2 1212.77 L1876.79 1212.77 L1877.37 1212.77 L1877.96 1212.77 L1878.55 1212.77 L1879.13 1212.77 L1879.72 1212.77 L1880.3 1212.77 L1880.89 1212.77 L1881.48 1212.77 L1882.06 1212.77 L1882.65 1212.77 L1883.24 1212.77 L1883.82 1212.77 L1884.41 1212.77 L1885 1212.77 L1885.58 1212.77 L1886.17 1212.77 L1886.76 1212.77 L1887.34 1212.77 L1887.93 1212.77 L1888.51 1212.77 L1889.1 1212.77 L1889.69 1212.77 L1890.27 1212.77 L1890.86 1212.77 L1891.45 1212.77 L1892.03 1212.77 L1892.62 1212.77 L1893.21 1212.77 L1893.79 1212.77 L1894.38 1212.77 L1894.96 1212.77 L1895.55 1212.77 L1896.14 1212.77 L1896.72 1212.77 L1897.31 1212.77 L1897.9 1212.77 L1898.48 1212.77 L1899.07 1212.77 L1899.66 1212.77 L1900.24 1212.77 L1900.83 1212.77 L1901.42 1212.77 L1902 1212.77 L1902.59 1212.77 L1903.17 1212.77 L1903.76 1212.77 L1904.35 1212.77 L1904.93 1212.77 L1905.52 1212.77 L1906.11 1212.77 L1906.69 1212.77 L1907.28 1212.77 L1907.87 1212.77 L1908.45 1212.77 L1909.04 1212.77 L1909.63 1212.77 L1910.21 1212.77 L1910.8 1212.77 L1911.38 1212.77 L1911.97 1212.77 L1912.56 1212.77 L1913.14 1212.77 L1913.73 1212.77 L1914.32 1212.77 L1914.9 1212.77 L1915.49 1212.77 L1916.08 1212.77 L1916.66 1212.77 L1917.25 1212.77 L1917.83 1212.77 L1918.42 1212.77 L1919.01 1212.77 L1919.59 1212.77 L1920.18 1212.77 L1920.77 1212.77 L1921.35 1212.77 L1921.94 1212.77 L1922.53 1212.77 L1923.11 1212.77 L1923.7 1212.77 L1924.29 1212.77 L1924.87 1212.77 L1925.46 1212.77 L1926.04 1212.77 L1926.63 1212.77 L1927.22 1212.77 L1927.8 1212.77 L1928.39 1212.77 L1928.98 1212.77 L1929.56 1212.77 L1930.15 1212.77 L1930.74 1212.77 L1931.32 1212.77 L1931.91 1212.77 L1932.5 1212.77 L1933.08 1212.77 L1933.67 1212.77 L1934.25 1212.77 L1934.84 1212.77 L1935.43 1212.77 L1936.01 1212.77 L1936.6 1212.77 L1937.19 1212.77 L1937.77 1212.77 L1938.36 1212.77 L1938.95 1212.77 L1939.53 1212.77 L1940.12 1212.77 L1940.71 1212.77 L1941.29 1212.77 L1941.88 1212.77 L1942.46 1212.77 L1943.05 1212.77 L1943.64 1212.77 L1944.22 1212.77 L1944.81 1212.77 L1945.4 1212.77 L1945.98 1212.77 L1946.57 1212.77 L1947.16 1212.77 L1947.74 1212.77 L1948.33 1212.77 L1948.91 1212.77 L1949.5 1212.77 L1950.09 1212.77 L1950.67 1212.77 L1951.26 1212.77 L1951.85 1212.77 L1952.43 1212.77 L1953.02 1212.77 L1953.61 1212.77 L1954.19 1212.77 L1954.78 1212.77 L1955.37 1212.77 L1955.95 1212.77 L1956.54 1212.77 L1957.12 1212.77 L1957.71 1212.77 L1958.3 1212.77 L1958.88 1212.77 L1959.47 1212.77 L1960.06 1212.77 L1960.64 1212.77 L1961.23 1212.77 L1961.82 1212.77 L1962.4 1212.77 L1962.99 1212.77 L1963.58 1212.77 L1964.16 1212.77 L1964.75 1212.77 L1965.33 1212.77 L1965.92 1212.77 L1966.51 1212.77 L1967.09 1212.77 L1967.68 1212.77 L1968.27 1212.77 L1968.85 1212.77 L1969.44 1212.77 L1970.03 1212.77 L1970.61 1212.77 L1971.2 1212.77 L1971.78 1212.77 L1972.37 1212.77 L1972.96 1212.77 L1973.54 1212.77 L1974.13 1212.77 L1974.72 1212.77 L1975.3 1212.77 L1975.89 1212.77 L1976.48 1212.77 L1977.06 1212.77 L1977.65 1212.77 L1978.24 1212.77 L1978.82 1212.77 L1979.41 1212.77 L1979.99 1212.77 L1980.58 1212.77 L1981.17 1212.77 L1981.75 1212.77 L1982.34 1212.77 L1982.93 1212.77 L1983.51 1212.77 L1984.1 1212.77 L1984.69 1212.77 L1985.27 1212.77 L1985.86 1212.77 L1986.45 1212.77 L1987.03 1212.77 L1987.62 1212.77 L1988.2 1212.77 L1988.79 1212.77 L1989.38 1212.77 L1989.96 1212.77 L1990.55 1212.77 L1991.14 1212.77 L1991.72 1212.77 L1992.31 1212.77 L1992.9 1212.77 L1993.48 1212.77 L1994.07 1212.77 L1994.65 1212.77 L1995.24 1212.77 L1995.83 1212.77 L1996.41 1212.77 L1997 1212.77 L1997.59 1212.77 L1998.17 1212.77 L1998.76 1212.77 L1999.35 1212.77 L1999.93 1212.77 L2000.52 1212.77 L2001.11 1212.77 L2001.69 1212.77 L2002.28 1212.77 L2002.86 1212.77 L2003.45 1212.77 L2004.04 1212.77 L2004.62 1212.77 L2005.21 1212.77 L2005.8 1212.77 L2006.38 1212.77 L2006.97 1212.77 L2007.56 1212.77 L2008.14 1212.77 L2008.73 1212.77 L2009.32 1212.77 L2009.9 1212.77 L2010.49 1212.77 L2011.07 1212.77 L2011.66 1212.77 L2012.25 1212.77 L2012.83 1212.77 L2013.42 1212.77 L2014.01 1212.77 L2014.59 1212.77 L2015.18 1212.77 L2015.77 1212.77 L2016.35 1212.77 L2016.94 1212.77 L2017.53 1212.77 L2018.11 1212.77 L2018.7 1212.77 L2019.28 1212.77 L2019.87 1212.77 L2020.46 1212.77 L2021.04 1212.77 L2021.63 1212.77 L2022.22 1212.77 L2022.8 1212.77 L2023.39 1212.77 L2023.98 1212.77 L2024.56 1212.77 L2025.15 1212.77 L2025.73 1212.77 L2026.32 1212.77 L2026.91 1212.77 L2027.49 1212.77 L2028.08 1212.77 L2028.67 1212.77 L2029.25 1212.77 L2029.84 1212.77 L2030.43 1212.77 L2031.01 1212.77 L2031.6 1212.77 L2032.19 1212.77 L2032.77 1212.77 L2033.36 1212.77 L2033.94 1212.77 L2034.53 1212.77 L2035.12 1212.77 L2035.7 1212.77 L2036.29 1212.77 L2036.88 1212.77 L2037.46 1212.77 L2038.05 1212.77 L2038.64 1212.77 L2039.22 1212.77 L2039.81 1212.77 L2040.4 1212.77 L2040.98 1212.77 L2041.57 1212.77 L2042.15 1212.77 L2042.74 1212.77 L2043.33 1212.77 L2043.91 1212.77 L2044.5 1212.77 L2045.09 1212.77 L2045.67 1212.77 L2046.26 1212.77 L2046.85 1212.77 L2047.43 1212.77 L2048.02 1212.77 L2048.6 1212.77 L2049.19 1212.77 L2049.78 1212.77 L2050.36 1212.77 L2050.95 1212.77 L2051.54 1212.77 L2052.12 1212.77 L2052.71 1212.77 L2053.3 1212.77 L2053.88 1212.77 L2054.47 1212.77 L2055.06 1212.77 L2055.64 1212.77 L2056.23 1212.77 L2056.81 1212.77 L2057.4 1212.77 L2057.99 1212.77 L2058.57 1212.77 L2059.16 1212.77 L2059.75 1212.77 L2060.33 1212.77 L2060.92 1212.77 L2061.51 1212.77 L2062.09 1212.77 L2062.68 1212.77 L2063.27 1212.77 L2063.85 1212.77 L2064.44 1212.77 L2065.02 1212.77 L2065.61 1212.77 L2066.2 1212.77 L2066.78 1212.77 L2067.37 1212.77 L2067.96 1212.77 L2068.54 1212.77 L2069.13 1212.77 L2069.72 1212.77 L2070.3 1212.77 L2070.89 1212.77 L2071.48 1212.77 L2072.06 1212.77 L2072.65 1212.77 L2073.23 1212.77 L2073.82 1212.77 L2074.41 1212.77 L2074.99 1212.77 L2075.58 1212.77 L2076.17 1212.77 L2076.75 1212.77 L2077.34 1212.77 L2077.93 1212.77 L2078.51 1212.77 L2079.1 1212.77 L2079.68 1212.77 L2080.27 1212.77 L2080.86 1212.77 L2081.44 1212.77 L2082.03 1212.77 L2082.62 1212.77 L2083.2 1212.77 L2083.79 1212.77 L2084.38 1212.77 L2084.96 1212.77 L2085.55 1212.77 L2086.14 1212.77 L2086.72 1212.77 L2087.31 1212.77 L2087.89 1212.77 L2088.48 1212.77 L2089.07 1212.77 L2089.65 1212.77 L2090.24 1212.77 L2090.83 1212.77 L2091.41 1212.77 L2092 1212.77 L2092.59 1212.77 L2093.17 1212.77 L2093.76 1212.77 L2094.35 1212.77 L2094.93 1212.77 L2095.52 1212.77 L2096.1 1212.77 L2096.69 1212.77 L2097.28 1212.77 L2097.86 1212.77 L2098.45 1212.77 L2099.04 1212.77 L2099.62 1212.77 L2100.21 1212.77 L2100.8 1212.77 L2101.38 1212.77 L2101.97 1212.77 L2102.55 1212.77 L2103.14 1212.77 L2103.73 1212.77 L2104.31 1212.77 L2104.9 1212.77 L2105.49 1212.77 L2106.07 1212.77 L2106.66 1212.77 L2107.25 1212.77 L2107.83 1212.77 L2108.42 1212.77 L2109.01 1212.77 L2109.59 1212.77 L2110.18 1212.77 L2110.76 1212.77 L2111.35 1212.77 L2111.94 1212.77 L2112.52 1212.77 L2113.11 1212.77 L2113.7 1212.77 L2114.28 1212.77 L2114.87 1212.77 L2115.46 1212.77 L2116.04 1212.77 L2116.63 1212.77 L2117.22 1212.77 L2117.8 1212.77 L2118.39 1212.77 L2118.97 1212.77 L2119.56 1212.77 L2120.15 1212.77 L2120.73 1212.77 L2121.32 1212.77 L2121.91 1212.77 L2122.49 1212.77 L2123.08 1212.77 L2123.67 1212.77 L2124.25 1212.77 L2124.84 1212.77 L2125.42 1212.77 L2126.01 1212.77 L2126.6 1212.77 L2127.18 1212.77 L2127.77 1212.77 L2128.36 1212.77 L2128.94 1212.77 L2129.53 1212.77 L2130.12 1212.77 L2130.7 1212.77 L2131.29 1212.77 L2131.88 1212.77 L2132.46 1212.77 L2133.05 1212.77 L2133.63 1212.77 L2134.22 1212.77 L2134.81 1212.77 L2135.39 1212.77 L2135.98 1212.77 L2136.57 1212.77 L2137.15 1212.77 L2137.74 1212.77 L2138.33 1212.77 L2138.91 1212.77 L2139.5 1212.77 L2140.09 1212.77 L2140.67 1212.77 L2141.26 1212.77 L2141.84 1212.77 L2142.43 1212.77 L2143.02 1212.77 L2143.6 1212.77 L2144.19 1212.77 L2144.78 1212.77 L2145.36 1212.77 L2145.95 1212.77 L2146.54 1212.77 L2147.12 1212.77 L2147.71 1212.77 L2148.3 1212.77 L2148.88 1212.77 L2149.47 1212.77 L2150.05 1212.77 L2150.64 1212.77 L2151.23 1212.77 L2151.81 1212.77 L2152.4 1212.77 L2152.99 1212.77 L2153.57 1212.77 L2154.16 1212.77 L2154.75 1212.77 L2155.33 1212.77 L2155.92 1212.77 L2156.5 1212.77 L2157.09 1212.77 L2157.68 1212.77 L2158.26 1212.77 L2158.26 1212.56 L2157.68 1212.56 L2157.09 1212.56 L2156.5 1212.56 L2155.92 1212.56 L2155.33 1212.56 L2154.75 1212.56 L2154.16 1212.56 L2153.57 1212.56 L2152.99 1212.56 L2152.4 1212.56 L2151.81 1212.56 L2151.23 1212.56 L2150.64 1212.56 L2150.05 1212.56 L2149.47 1212.56 L2148.88 1212.56 L2148.3 1212.56 L2147.71 1212.56 L2147.12 1212.56 L2146.54 1212.56 L2145.95 1212.56 L2145.36 1212.56 L2144.78 1212.56 L2144.19 1212.56 L2143.6 1212.56 L2143.02 1212.56 L2142.43 1212.56 L2141.84 1212.56 L2141.26 1212.56 L2140.67 1212.56 L2140.09 1212.56 L2139.5 1212.56 L2138.91 1212.56 L2138.33 1212.56 L2137.74 1212.56 L2137.15 1212.56 L2136.57 1212.56 L2135.98 1212.56 L2135.39 1212.56 L2134.81 1212.56 L2134.22 1212.56 L2133.63 1212.56 L2133.05 1212.56 L2132.46 1212.56 L2131.88 1212.56 L2131.29 1212.56 L2130.7 1212.56 L2130.12 1212.56 L2129.53 1212.56 L2128.94 1212.56 L2128.36 1212.56 L2127.77 1212.56 L2127.18 1212.56 L2126.6 1212.56 L2126.01 1212.56 L2125.42 1212.56 L2124.84 1212.56 L2124.25 1212.56 L2123.67 1212.56 L2123.08 1212.56 L2122.49 1212.56 L2121.91 1212.56 L2121.32 1212.56 L2120.73 1212.56 L2120.15 1212.56 L2119.56 1212.56 L2118.97 1212.56 L2118.39 1212.56 L2117.8 1212.56 L2117.22 1212.56 L2116.63 1212.56 L2116.04 1212.56 L2115.46 1212.56 L2114.87 1212.56 L2114.28 1212.56 L2113.7 1212.56 L2113.11 1212.56 L2112.52 1212.56 L2111.94 1212.56 L2111.35 1212.56 L2110.76 1212.56 L2110.18 1212.56 L2109.59 1212.56 L2109.01 1212.56 L2108.42 1212.56 L2107.83 1212.56 L2107.25 1212.56 L2106.66 1212.56 L2106.07 1212.56 L2105.49 1212.56 L2104.9 1212.56 L2104.31 1212.56 L2103.73 1212.56 L2103.14 1212.56 L2102.55 1212.56 L2101.97 1212.56 L2101.38 1212.56 L2100.8 1212.56 L2100.21 1212.56 L2099.62 1212.56 L2099.04 1212.56 L2098.45 1212.56 L2097.86 1212.56 L2097.28 1212.56 L2096.69 1212.56 L2096.1 1212.56 L2095.52 1212.56 L2094.93 1212.56 L2094.35 1212.56 L2093.76 1212.56 L2093.17 1212.56 L2092.59 1212.56 L2092 1212.56 L2091.41 1212.56 L2090.83 1212.56 L2090.24 1212.56 L2089.65 1212.56 L2089.07 1212.56 L2088.48 1212.56 L2087.89 1212.56 L2087.31 1212.56 L2086.72 1212.56 L2086.14 1212.56 L2085.55 1212.56 L2084.96 1212.56 L2084.38 1212.56 L2083.79 1212.56 L2083.2 1212.56 L2082.62 1212.56 L2082.03 1212.56 L2081.44 1212.56 L2080.86 1212.56 L2080.27 1212.56 L2079.68 1212.56 L2079.1 1212.56 L2078.51 1212.56 L2077.93 1212.56 L2077.34 1212.56 L2076.75 1212.56 L2076.17 1212.56 L2075.58 1212.56 L2074.99 1212.56 L2074.41 1212.56 L2073.82 1212.56 L2073.23 1212.56 L2072.65 1212.56 L2072.06 1212.56 L2071.48 1212.56 L2070.89 1212.56 L2070.3 1212.56 L2069.72 1212.56 L2069.13 1212.56 L2068.54 1212.56 L2067.96 1212.56 L2067.37 1212.56 L2066.78 1212.56 L2066.2 1212.56 L2065.61 1212.56 L2065.02 1212.56 L2064.44 1212.56 L2063.85 1212.56 L2063.27 1212.56 L2062.68 1212.56 L2062.09 1212.56 L2061.51 1212.56 L2060.92 1212.56 L2060.33 1212.56 L2059.75 1212.56 L2059.16 1212.56 L2058.57 1212.56 L2057.99 1212.56 L2057.4 1212.56 L2056.81 1212.56 L2056.23 1212.56 L2055.64 1212.56 L2055.06 1212.56 L2054.47 1212.56 L2053.88 1212.56 L2053.3 1212.56 L2052.71 1212.56 L2052.12 1212.56 L2051.54 1212.56 L2050.95 1212.56 L2050.36 1212.56 L2049.78 1212.56 L2049.19 1212.56 L2048.6 1212.56 L2048.02 1212.56 L2047.43 1212.56 L2046.85 1212.56 L2046.26 1212.56 L2045.67 1212.56 L2045.09 1212.56 L2044.5 1212.56 L2043.91 1212.56 L2043.33 1212.56 L2042.74 1212.56 L2042.15 1212.56 L2041.57 1212.56 L2040.98 1212.56 L2040.4 1212.56 L2039.81 1212.56 L2039.22 1212.56 L2038.64 1212.56 L2038.05 1212.56 L2037.46 1212.56 L2036.88 1212.56 L2036.29 1212.56 L2035.7 1212.56 L2035.12 1212.56 L2034.53 1212.56 L2033.94 1212.56 L2033.36 1212.56 L2032.77 1212.56 L2032.19 1212.56 L2031.6 1212.56 L2031.01 1212.56 L2030.43 1212.56 L2029.84 1212.56 L2029.25 1212.56 L2028.67 1212.56 L2028.08 1212.56 L2027.49 1212.56 L2026.91 1212.56 L2026.32 1212.56 L2025.73 1212.56 L2025.15 1212.56 L2024.56 1212.56 L2023.98 1212.56 L2023.39 1212.56 L2022.8 1212.56 L2022.22 1212.56 L2021.63 1212.56 L2021.04 1212.56 L2020.46 1212.56 L2019.87 1212.56 L2019.28 1212.56 L2018.7 1212.56 L2018.11 1212.56 L2017.53 1212.56 L2016.94 1212.56 L2016.35 1212.56 L2015.77 1212.56 L2015.18 1212.56 L2014.59 1212.56 L2014.01 1212.56 L2013.42 1212.56 L2012.83 1212.56 L2012.25 1212.56 L2011.66 1212.56 L2011.07 1212.56 L2010.49 1212.56 L2009.9 1212.56 L2009.32 1212.56 L2008.73 1212.56 L2008.14 1212.56 L2007.56 1212.56 L2006.97 1212.56 L2006.38 1212.56 L2005.8 1212.56 L2005.21 1212.56 L2004.62 1212.56 L2004.04 1212.56 L2003.45 1212.56 L2002.86 1212.56 L2002.28 1212.56 L2001.69 1212.56 L2001.11 1212.56 L2000.52 1212.56 L1999.93 1212.56 L1999.35 1212.56 L1998.76 1212.56 L1998.17 1212.56 L1997.59 1212.56 L1997 1212.56 L1996.41 1212.56 L1995.83 1212.56 L1995.24 1212.56 L1994.65 1212.56 L1994.07 1212.56 L1993.48 1212.56 L1992.9 1212.56 L1992.31 1212.56 L1991.72 1212.56 L1991.14 1212.56 L1990.55 1212.56 L1989.96 1212.56 L1989.38 1212.56 L1988.79 1212.56 L1988.2 1212.56 L1987.62 1212.56 L1987.03 1212.56 L1986.45 1212.56 L1985.86 1212.56 L1985.27 1212.56 L1984.69 1212.56 L1984.1 1212.56 L1983.51 1212.56 L1982.93 1212.56 L1982.34 1212.56 L1981.75 1212.56 L1981.17 1212.56 L1980.58 1212.56 L1979.99 1212.56 L1979.41 1212.56 L1978.82 1212.56 L1978.24 1212.56 L1977.65 1212.56 L1977.06 1212.56 L1976.48 1212.56 L1975.89 1212.56 L1975.3 1212.56 L1974.72 1212.56 L1974.13 1212.56 L1973.54 1212.56 L1972.96 1212.56 L1972.37 1212.56 L1971.78 1212.56 L1971.2 1212.56 L1970.61 1212.56 L1970.03 1212.56 L1969.44 1212.56 L1968.85 1212.56 L1968.27 1212.56 L1967.68 1212.56 L1967.09 1212.56 L1966.51 1212.56 L1965.92 1212.56 L1965.33 1212.56 L1964.75 1212.56 L1964.16 1212.56 L1963.58 1212.56 L1962.99 1212.56 L1962.4 1212.56 L1961.82 1212.56 L1961.23 1212.56 L1960.64 1212.56 L1960.06 1212.56 L1959.47 1212.56 L1958.88 1212.56 L1958.3 1212.56 L1957.71 1212.56 L1957.12 1212.56 L1956.54 1212.56 L1955.95 1212.56 L1955.37 1212.56 L1954.78 1212.56 L1954.19 1212.56 L1953.61 1212.56 L1953.02 1212.56 L1952.43 1212.56 L1951.85 1212.56 L1951.26 1212.56 L1950.67 1212.56 L1950.09 1212.56 L1949.5 1212.56 L1948.91 1212.56 L1948.33 1212.56 L1947.74 1212.56 L1947.16 1212.56 L1946.57 1212.56 L1945.98 1212.56 L1945.4 1212.56 L1944.81 1212.56 L1944.22 1212.56 L1943.64 1212.56 L1943.05 1212.56 L1942.46 1212.56 L1941.88 1212.56 L1941.29 1212.56 L1940.71 1212.56 L1940.12 1212.56 L1939.53 1212.56 L1938.95 1212.56 L1938.36 1212.56 L1937.77 1212.56 L1937.19 1212.56 L1936.6 1212.56 L1936.01 1212.56 L1935.43 1212.56 L1934.84 1212.56 L1934.25 1212.56 L1933.67 1212.56 L1933.08 1212.56 L1932.5 1212.56 L1931.91 1212.56 L1931.32 1212.56 L1930.74 1212.56 L1930.15 1212.56 L1929.56 1212.56 L1928.98 1212.56 L1928.39 1212.56 L1927.8 1212.56 L1927.22 1212.56 L1926.63 1212.56 L1926.04 1212.56 L1925.46 1212.56 L1924.87 1212.56 L1924.29 1212.56 L1923.7 1212.56 L1923.11 1212.56 L1922.53 1212.56 L1921.94 1212.56 L1921.35 1212.56 L1920.77 1212.56 L1920.18 1212.56 L1919.59 1212.56 L1919.01 1212.56 L1918.42 1212.56 L1917.83 1212.56 L1917.25 1212.56 L1916.66 1212.56 L1916.08 1212.56 L1915.49 1212.56 L1914.9 1212.56 L1914.32 1212.56 L1913.73 1212.56 L1913.14 1212.56 L1912.56 1212.56 L1911.97 1212.56 L1911.38 1212.56 L1910.8 1212.56 L1910.21 1212.56 L1909.63 1212.56 L1909.04 1212.56 L1908.45 1212.56 L1907.87 1212.56 L1907.28 1212.56 L1906.69 1212.56 L1906.11 1212.56 L1905.52 1212.56 L1904.93 1212.56 L1904.35 1212.56 L1903.76 1212.56 L1903.17 1212.56 L1902.59 1212.56 L1902 1212.56 L1901.42 1212.56 L1900.83 1212.56 L1900.24 1212.56 L1899.66 1212.56 L1899.07 1212.56 L1898.48 1212.56 L1897.9 1212.56 L1897.31 1212.56 L1896.72 1212.56 L1896.14 1212.56 L1895.55 1212.56 L1894.96 1212.56 L1894.38 1212.56 L1893.79 1212.56 L1893.21 1212.56 L1892.62 1212.56 L1892.03 1212.56 L1891.45 1212.56 L1890.86 1212.56 L1890.27 1212.56 L1889.69 1212.56 L1889.1 1212.56 L1888.51 1212.56 L1887.93 1212.56 L1887.34 1212.56 L1886.76 1212.56 L1886.17 1212.56 L1885.58 1212.56 L1885 1212.56 L1884.41 1212.56 L1883.82 1212.56 L1883.24 1212.56 L1882.65 1212.56 L1882.06 1212.56 L1881.48 1212.56 L1880.89 1212.56 L1880.3 1212.56 L1879.72 1212.56 L1879.13 1212.56 L1878.55 1212.56 L1877.96 1212.56 L1877.37 1212.56 L1876.79 1212.56 L1876.2 1212.56 L1875.61 1212.56 L1875.03 1212.56 L1874.44 1212.56 L1873.85 1212.56 L1873.27 1212.56 L1872.68 1212.56 L1872.09 1212.56 L1871.51 1212.56 L1870.92 1212.56 L1870.34 1212.56 L1869.75 1212.56 L1869.16 1212.56 L1868.58 1212.56 L1867.99 1212.56 L1867.4 1212.56 L1866.82 1212.56 L1866.23 1212.56 L1865.64 1212.56 L1865.06 1212.56 L1864.47 1212.56 L1863.88 1212.56 L1863.3 1212.56 L1862.71 1212.56 L1862.13 1212.56 L1861.54 1212.56 L1860.95 1212.56 L1860.37 1212.56 L1859.78 1212.56 L1859.19 1212.56 L1858.61 1212.56 L1858.02 1212.56 L1857.43 1212.56 L1856.85 1212.56 L1856.26 1212.56 L1855.68 1212.56 L1855.09 1212.56 L1854.5 1212.56 L1853.92 1212.56 L1853.33 1212.56 L1852.74 1212.56 L1852.16 1212.56 L1851.57 1212.56 L1850.98 1212.56 L1850.4 1212.56 L1849.81 1212.56 L1849.22 1212.56 L1848.64 1212.56 L1848.05 1212.56 L1847.47 1212.56 L1846.88 1212.56 L1846.29 1212.56 L1845.71 1212.56 L1845.12 1212.56 L1844.53 1212.56 L1843.95 1212.56 L1843.36 1212.56 L1842.77 1212.56 L1842.19 1212.56 L1841.6 1212.56 L1841.01 1212.56 L1840.43 1212.56 L1839.84 1212.56 L1839.26 1212.56 L1838.67 1212.56 L1838.08 1212.56 L1837.5 1212.56 L1836.91 1212.56 L1836.32 1212.56 L1835.74 1212.56 L1835.15 1212.56 L1834.56 1212.56 L1833.98 1212.56 L1833.39 1212.56 L1832.81 1212.56 L1832.22 1212.56 L1831.63 1212.56 L1831.05 1212.56 L1830.46 1212.56 L1829.87 1212.56 L1829.29 1212.56 L1828.7 1212.56 L1828.11 1212.56 L1827.53 1212.56 L1826.94 1212.56 L1826.35 1212.56 L1825.77 1212.56 L1825.18 1212.56 L1824.6 1212.56 L1824.01 1212.56 L1823.42 1212.56 L1822.84 1212.56 L1822.25 1212.56 L1821.66 1212.56 L1821.08 1212.56 L1820.49 1212.56 L1819.9 1212.56 L1819.32 1212.56 L1818.73 1212.56 L1818.14 1212.56 L1817.56 1212.56 L1816.97 1212.56 L1816.39 1212.56 L1815.8 1212.56 L1815.21 1212.56 L1814.63 1212.56 L1814.04 1212.56 L1813.45 1212.56 L1812.87 1212.56 L1812.28 1212.56 L1811.69 1212.56 L1811.11 1212.56 L1810.52 1212.56 L1809.94 1212.56 L1809.35 1212.56 L1808.76 1212.56 L1808.18 1212.56 L1807.59 1212.56 L1807 1212.56 L1806.42 1212.56 L1805.83 1212.56 L1805.24 1212.56 L1804.66 1212.56 L1804.07 1212.56 L1803.48 1212.56 L1802.9 1212.56 L1802.31 1212.56 L1801.73 1212.56 L1801.14 1212.56 L1800.55 1212.56 L1799.97 1212.56 L1799.38 1212.56 L1798.79 1212.56 L1798.21 1212.56 L1797.62 1212.56 L1797.03 1212.56 L1796.45 1212.56 L1795.86 1212.56 L1795.27 1212.56 L1794.69 1212.56 L1794.1 1212.56 L1793.52 1212.56 L1792.93 1212.56 L1792.34 1212.56 L1791.76 1212.56 L1791.17 1212.56 L1790.58 1212.56 L1790 1212.56 L1789.41 1212.56 L1788.82 1212.56 L1788.24 1212.56 L1787.65 1212.56 L1787.06 1212.56 L1786.48 1212.56 L1785.89 1212.56 L1785.31 1212.56 L1784.72 1212.56 L1784.13 1212.56 L1783.55 1212.56 L1782.96 1212.56 L1782.37 1212.56 L1781.79 1212.56 L1781.2 1212.56 L1780.61 1212.56 L1780.03 1212.56 L1779.44 1212.56 L1778.86 1212.56 L1778.27 1212.56 L1777.68 1212.56 L1777.1 1212.56 L1776.51 1212.56 L1775.92 1212.56 L1775.34 1212.56 L1774.75 1212.56 L1774.16 1212.56 L1773.58 1212.56 L1772.99 1212.56 L1772.4 1212.56 L1771.82 1212.56 L1771.23 1212.56 L1770.65 1212.56 L1770.06 1212.56 L1769.47 1212.56 L1768.89 1212.56 L1768.3 1212.56 L1767.71 1212.56 L1767.13 1212.56 L1766.54 1212.56 L1765.95 1212.56 L1765.37 1212.56 L1764.78 1212.56 L1764.19 1212.56 L1763.61 1212.56 L1763.02 1212.56 L1762.44 1212.56 L1761.85 1212.56 L1761.26 1212.56 L1760.68 1212.56 L1760.09 1212.56 L1759.5 1212.56 L1758.92 1212.56 L1758.33 1212.56 L1757.74 1212.56 L1757.16 1212.56 L1756.57 1212.56 L1755.99 1212.56 L1755.4 1212.56 L1754.81 1212.56 L1754.23 1212.56 L1753.64 1212.56 L1753.05 1212.56 L1752.47 1212.56 L1751.88 1212.56 L1751.29 1212.56 L1750.71 1212.56 L1750.12 1212.56 L1749.53 1212.56 L1748.95 1212.56 L1748.36 1212.56 L1747.78 1212.56 L1747.19 1212.56 L1746.6 1212.56 L1746.02 1212.56 L1745.43 1212.56 L1744.84 1212.56 L1744.26 1212.56 L1743.67 1212.56 L1743.08 1212.56 L1742.5 1212.56 L1741.91 1212.56 L1741.32 1212.56 L1740.74 1212.56 L1740.15 1212.56 L1739.57 1212.56 L1738.98 1212.56 L1738.39 1212.56 L1737.81 1212.56 L1737.22 1212.56 L1736.63 1212.56 L1736.05 1212.56 L1735.46 1212.56 L1734.87 1212.56 L1734.29 1212.56 L1733.7 1212.56 L1733.11 1212.56 L1732.53 1212.56 L1731.94 1212.56 L1731.36 1212.56 L1730.77 1212.56 L1730.18 1212.56 L1729.6 1212.56 L1729.01 1212.56 L1728.42 1212.56 L1727.84 1212.56 L1727.25 1212.56 L1726.66 1212.56 L1726.08 1212.56 L1725.49 1212.56 L1724.91 1212.56 L1724.32 1212.56 L1723.73 1212.56 L1723.15 1212.56 L1722.56 1212.56 L1721.97 1212.56 L1721.39 1212.56 L1720.8 1212.56 L1720.21 1212.56 L1719.63 1212.56 L1719.04 1212.56 L1718.45 1212.56 L1717.87 1212.56 L1717.28 1212.56 L1716.7 1212.56 L1716.11 1212.56 L1715.52 1212.56 L1714.94 1212.56 L1714.35 1212.56 L1713.76 1212.56 L1713.18 1212.56 L1712.59 1212.56 L1712 1212.56 L1711.42 1212.56 L1710.83 1212.56 L1710.24 1212.56 L1709.66 1212.56 L1709.07 1212.56 L1708.49 1212.56 L1707.9 1212.56 L1707.31 1212.56 L1706.73 1212.56 L1706.14 1212.56 L1705.55 1212.56 L1704.97 1212.56 L1704.38 1212.56 L1703.79 1212.56 L1703.21 1212.56 L1702.62 1212.56 L1702.04 1212.56 L1701.45 1212.56 L1700.86 1212.56 L1700.28 1212.56 L1699.69 1212.56 L1699.1 1212.56 L1698.52 1212.56 L1697.93 1212.56 L1697.34 1212.56 L1696.76 1212.56 L1696.17 1212.56 L1695.58 1212.56 L1695 1212.56 L1694.41 1212.56 L1693.83 1212.56 L1693.24 1212.56 L1692.65 1212.56 L1692.07 1212.56 L1691.48 1212.56 L1690.89 1212.56 L1690.31 1212.56 L1689.72 1212.56 L1689.13 1212.56 L1688.55 1212.56 L1687.96 1212.56 L1687.37 1212.56 L1686.79 1212.56 L1686.2 1212.56 L1685.62 1212.56 L1685.03 1212.56 L1684.44 1212.56 L1683.86 1212.56 L1683.27 1212.56 L1682.68 1212.56 L1682.1 1212.56 L1681.51 1212.56 L1680.92 1212.56 L1680.34 1212.56 L1679.75 1212.56 L1679.17 1212.56 L1678.58 1212.56 L1677.99 1212.56 L1677.41 1212.56 L1676.82 1212.56 L1676.23 1212.56 L1675.65 1212.56 L1675.06 1212.56 L1674.47 1212.56 L1673.89 1212.56 L1673.3 1212.56 L1672.71 1212.56 L1672.13 1212.56 L1671.54 1212.56 L1670.96 1212.56 L1670.37 1212.56 L1669.78 1212.56 L1669.2 1212.56 L1668.61 1212.56 L1668.02 1212.56 L1667.44 1212.56 L1666.85 1212.56 L1666.26 1212.56 L1665.68 1212.56 L1665.09 1212.56 L1664.5 1212.56 L1663.92 1212.56 L1663.33 1212.56 L1662.75 1212.56 L1662.16 1212.56 L1661.57 1212.56 L1660.99 1212.56 L1660.4 1212.56 L1659.81 1212.56 L1659.23 1212.56 L1658.64 1212.56 L1658.05 1212.56 L1657.47 1212.56 L1656.88 1212.56 L1656.29 1212.56 L1655.71 1212.56 L1655.12 1212.56 L1654.54 1212.56 L1653.95 1212.56 L1653.36 1212.56 L1652.78 1212.56 L1652.19 1212.56 L1651.6 1212.56 L1651.02 1212.56 L1650.43 1212.56 L1649.84 1212.56 L1649.26 1212.56 L1648.67 1212.56 L1648.09 1212.56 L1647.5 1212.56 L1646.91 1212.56 L1646.33 1212.56 L1645.74 1212.56 L1645.15 1212.56 L1644.57 1212.56 L1643.98 1212.56 L1643.39 1212.56 L1642.81 1212.56 L1642.22 1212.56 L1641.63 1212.56 L1641.05 1212.56 L1640.46 1212.56 L1639.88 1212.56 L1639.29 1212.56 L1638.7 1212.56 L1638.12 1212.56 L1637.53 1212.56 L1636.94 1212.56 L1636.36 1212.56 L1635.77 1212.56 L1635.18 1212.56 L1634.6 1212.56 L1634.01 1212.56 L1633.42 1212.56 L1632.84 1212.56 L1632.25 1212.56 L1631.67 1212.56 L1631.08 1212.56 L1630.49 1212.56 L1629.91 1212.56 L1629.32 1212.56 L1628.73 1212.56 L1628.15 1212.56 L1627.56 1212.56 L1626.97 1212.56 L1626.39 1212.56 L1625.8 1212.56 L1625.22 1212.56 L1624.63 1212.56 L1624.04 1212.56 L1623.46 1212.56 L1622.87 1212.56 L1622.28 1212.56 L1621.7 1212.56 L1621.11 1212.56 L1620.52 1212.56 L1619.94 1212.56 L1619.35 1212.56 L1618.76 1212.56 L1618.18 1212.56 L1617.59 1212.56 L1617.01 1212.56 L1616.42 1212.56 L1615.83 1212.56 L1615.25 1212.56 L1614.66 1212.56 L1614.07 1212.56 L1613.49 1212.56 L1612.9 1212.56 L1612.31 1212.56 L1611.73 1212.56 L1611.14 1212.56 L1610.55 1212.56 L1609.97 1212.56 L1609.38 1212.56 L1608.8 1212.56 L1608.21 1212.56 L1607.62 1212.56 L1607.04 1212.56 L1606.45 1212.56 L1605.86 1212.56 L1605.28 1212.56 L1604.69 1212.56 L1604.1 1212.56 L1603.52 1212.56 L1602.93 1212.56 L1602.34 1212.56 L1601.76 1212.56 L1601.17 1212.56 L1600.59 1212.56 L1600 1212.56 L1599.41 1212.56 L1598.83 1212.56 L1598.24 1212.56 L1597.65 1212.56 L1597.07 1212.56 L1596.48 1212.56 L1595.89 1212.56 L1595.31 1212.56 L1594.72 1212.56 L1594.14 1212.56 L1593.55 1212.56 L1592.96 1212.56 L1592.38 1212.56 L1591.79 1212.56 L1591.2 1212.56 L1590.62 1212.56 L1590.03 1212.56 L1589.44 1212.56 L1588.86 1212.56 L1588.27 1212.56 L1587.68 1212.56 L1587.1 1212.56 L1586.51 1212.56 L1585.93 1212.56 L1585.34 1212.56 L1584.75 1212.56 L1584.17 1212.56 L1583.58 1212.56 L1582.99 1212.56 L1582.41 1212.56 L1581.82 1212.56 L1581.23 1212.56 L1580.65 1212.56 L1580.06 1212.56 L1579.47 1212.56 L1578.89 1212.56 L1578.3 1212.56 L1577.72 1212.56 L1577.13 1212.56 L1576.54 1212.56 L1575.96 1212.56 L1575.37 1212.56 L1574.78 1212.56 L1574.2 1212.56 L1573.61 1212.56 L1573.02 1212.56 L1572.44 1212.56 L1571.85 1212.56 L1571.27 1212.56 L1570.68 1212.56 L1570.09 1212.56 L1569.51 1212.56 L1568.92 1212.56 L1568.33 1212.56 L1567.75 1212.56 L1567.16 1212.56 L1566.57 1212.56 L1565.99 1212.56 L1565.4 1212.56 L1564.81 1212.56 L1564.23 1212.56 L1563.64 1212.56 L1563.06 1212.56 L1562.47 1212.56 L1561.88 1212.56 L1561.3 1212.56 L1560.71 1212.56 L1560.12 1212.56 L1559.54 1212.56 L1558.95 1212.56 L1558.36 1212.56 L1557.78 1212.56 L1557.19 1212.56 L1556.6 1212.56 L1556.02 1212.56 L1555.43 1212.56 L1554.85 1212.56 L1554.26 1212.56 L1553.67 1212.56 L1553.09 1212.56 L1552.5 1212.56 L1551.91 1212.56 L1551.33 1212.56 L1550.74 1212.56 L1550.15 1212.56 L1549.57 1212.56 L1548.98 1212.56 L1548.4 1212.56 L1547.81 1212.56 L1547.22 1212.56 L1546.64 1212.56 L1546.05 1212.56 L1545.46 1212.56 L1544.88 1212.56 L1544.29 1212.56 L1543.7 1212.56 L1543.12 1212.56 L1542.53 1212.56 L1541.94 1212.56 L1541.36 1212.56 L1540.77 1212.56 L1540.19 1212.56 L1539.6 1212.56 L1539.01 1212.56 L1538.43 1212.56 L1537.84 1212.56 L1537.25 1212.56 L1536.67 1212.56 L1536.08 1212.56 L1535.49 1212.56 L1534.91 1212.56 L1534.32 1212.56 L1533.73 1212.56 L1533.15 1212.56 L1532.56 1212.56 L1531.98 1212.56 L1531.39 1212.56 L1530.8 1212.56 L1530.22 1212.56 L1529.63 1212.56 L1529.04 1212.56 L1528.46 1212.56 L1527.87 1212.56 L1527.28 1212.56 L1526.7 1212.56 L1526.11 1212.56 L1525.52 1212.56 L1524.94 1212.56 L1524.35 1212.56 L1523.77 1212.56 L1523.18 1212.56 L1522.59 1212.56 L1522.01 1212.56 L1521.42 1212.56 L1520.83 1212.56 L1520.25 1212.56 L1519.66 1212.56 L1519.07 1212.56 L1518.49 1212.56 L1517.9 1212.56 L1517.32 1212.56 L1516.73 1212.56 L1516.14 1212.56 L1515.56 1212.56 L1514.97 1212.56 L1514.38 1212.56 L1513.8 1212.56 L1513.21 1212.56 L1512.62 1212.56 L1512.04 1212.56 L1511.45 1212.56 L1510.86 1212.56 L1510.28 1212.56 L1509.69 1212.56 L1509.11 1212.56 L1508.52 1212.56 L1507.93 1212.56 L1507.35 1212.56 L1506.76 1212.56 L1506.17 1212.56 L1505.59 1212.56 L1505 1212.56 L1504.41 1212.56 L1503.83 1212.56 L1503.24 1212.56 L1502.65 1212.56 L1502.07 1212.56 L1501.48 1212.56 L1500.9 1212.56 L1500.31 1212.56 L1499.72 1212.56 L1499.14 1212.56 L1498.55 1212.56 L1497.96 1212.56 L1497.38 1212.56 L1496.79 1212.56 L1496.2 1212.56 L1495.62 1212.56 L1495.03 1212.56 L1494.45 1212.56 L1493.86 1212.56 L1493.27 1212.56 L1492.69 1212.56 L1492.1 1212.56 L1491.51 1212.56 L1490.93 1212.56 L1490.34 1212.56 L1489.75 1212.56 L1489.17 1212.56 L1488.58 1212.56 L1487.99 1212.56 L1487.41 1212.56 L1486.82 1212.56 L1486.24 1212.56 L1485.65 1212.56 L1485.06 1212.56 L1484.48 1212.56 L1483.89 1212.56 L1483.3 1212.56 L1482.72 1212.56 L1482.13 1212.56 L1481.54 1212.56 L1480.96 1212.56 L1480.37 1212.56 L1479.78 1212.56 L1479.2 1212.56 L1478.61 1212.56 L1478.03 1212.56 L1477.44 1212.56 L1476.85 1212.56 L1476.27 1212.56 L1475.68 1212.56 L1475.09 1212.56 L1474.51 1212.56 L1473.92 1212.56 L1473.33 1212.56 L1472.75 1212.56 L1472.16 1212.56 L1471.57 1212.56 L1470.99 1212.56 L1470.4 1212.56 L1469.82 1212.56 L1469.23 1212.56 L1468.64 1212.56 L1468.06 1212.56 L1467.47 1212.56 L1466.88 1212.56 L1466.3 1212.56 L1465.71 1212.56 L1465.12 1212.56 L1464.54 1212.56 L1463.95 1212.56 L1463.37 1212.56 L1462.78 1212.56 L1462.19 1212.56 L1461.61 1212.56 L1461.02 1212.56 L1460.43 1212.56 L1459.85 1212.56 L1459.26 1212.56 L1458.67 1212.56 L1458.09 1212.56 L1457.5 1212.56 L1456.91 1212.56 L1456.33 1212.56 L1455.74 1212.56 L1455.16 1212.56 L1454.57 1212.56 L1453.98 1212.56 L1453.4 1212.56 L1452.81 1212.56 L1452.22 1212.56 L1451.64 1212.56 L1451.05 1212.56 L1450.46 1212.56 L1449.88 1212.56 L1449.29 1212.56 L1448.7 1212.56 L1448.12 1212.56 L1447.53 1212.56 L1446.95 1212.56 L1446.36 1212.56 L1445.77 1212.56 L1445.19 1212.56 L1444.6 1212.56 L1444.01 1212.56 L1443.43 1212.56 L1442.84 1212.56 L1442.25 1212.56 L1441.67 1212.56 L1441.08 1212.56 L1440.5 1212.56 L1439.91 1212.56 L1439.32 1212.56 L1438.74 1212.56 L1438.15 1212.56 L1437.56 1212.56 L1436.98 1212.56 L1436.39 1212.56 L1435.8 1212.56 L1435.22 1212.56 L1434.63 1212.56 L1434.04 1212.56 L1433.46 1212.56 L1432.87 1212.56 L1432.29 1212.56 L1431.7 1212.56 L1431.11 1212.56 L1430.53 1212.56 L1429.94 1212.56 L1429.35 1212.56 L1428.77 1212.56 L1428.18 1212.56 L1427.59 1212.56 L1427.01 1212.56 L1426.42 1212.56 L1425.83 1212.56 L1425.25 1212.56 L1424.66 1212.56 L1424.08 1212.56 L1423.49 1212.56 L1422.9 1212.56 L1422.32 1212.56 L1421.73 1212.56 L1421.14 1212.56 L1420.56 1212.56 L1419.97 1212.56 L1419.38 1212.56 L1418.8 1212.56 L1418.21 1212.56 L1417.63 1212.56 L1417.04 1212.56 L1416.45 1212.56 L1415.87 1212.56 L1415.28 1212.56 L1414.69 1212.56 L1414.11 1212.56 L1413.52 1212.56 L1412.93 1212.56 L1412.35 1212.56 L1411.76 1212.56 L1411.17 1212.56 L1410.59 1212.56 L1410 1212.56 L1409.42 1212.56 L1408.83 1212.56 L1408.24 1212.56 L1407.66 1212.56 L1407.07 1212.56 L1406.48 1212.56 L1405.9 1212.56 L1405.31 1212.56 L1404.72 1212.56 L1404.14 1212.56 L1403.55 1212.56 L1402.96 1212.56 L1402.38 1212.56 L1401.79 1212.56 L1401.21 1212.56 L1400.62 1212.56 L1400.03 1212.56 L1399.45 1212.56 L1398.86 1212.56 L1398.27 1212.56 L1397.69 1212.56 L1397.1 1212.56 L1396.51 1212.56 L1395.93 1212.56 L1395.34 1212.56 L1394.75 1212.56 L1394.17 1212.56 L1393.58 1212.56 L1393 1212.56 L1392.41 1212.56 L1391.82 1212.56 L1391.24 1212.56 L1390.65 1212.56 L1390.06 1212.56 L1389.48 1212.56 L1388.89 1212.56 L1388.3 1212.56 L1387.72 1212.56 L1387.13 1212.56 L1386.55 1212.56 L1385.96 1212.56 L1385.37 1212.56 L1384.79 1212.56 L1384.2 1212.56 L1383.61 1212.56 L1383.03 1212.56 L1382.44 1212.56 L1381.85 1212.56 L1381.27 1212.56 L1380.68 1212.56 L1380.09 1212.56 L1379.51 1212.56 L1378.92 1212.56 L1378.34 1212.56 L1377.75 1212.56 L1377.16 1212.56 L1376.58 1212.56 L1375.99 1212.56 L1375.4 1212.56 L1374.82 1212.56 L1374.23 1212.56 L1373.64 1212.56 L1373.06 1212.56 L1372.47 1212.56 L1371.88 1212.56 L1371.3 1212.56 L1370.71 1212.56 L1370.13 1212.56 L1369.54 1212.56 L1368.95 1212.56 L1368.37 1212.56 L1367.78 1212.56 L1367.19 1212.56 L1366.61 1212.56 L1366.02 1212.56 L1365.43 1212.56 L1364.85 1212.56 L1364.26 1212.56 L1363.68 1212.56 L1363.09 1212.56 L1362.5 1212.56 L1361.92 1212.56 L1361.33 1212.56 L1360.74 1212.56 L1360.16 1212.56 L1359.57 1212.56 L1358.98 1212.56 L1358.4 1212.56 L1357.81 1212.56 L1357.22 1212.56 L1356.64 1212.56 L1356.05 1212.56 L1355.47 1212.56 L1354.88 1212.56 L1354.29 1212.56 L1353.71 1212.56 L1353.12 1212.56 L1352.53 1212.56 L1351.95 1212.56 L1351.36 1212.56 L1350.77 1212.56 L1350.19 1212.56 L1349.6 1212.56 L1349.01 1212.56 L1348.43 1212.56 L1347.84 1212.56 L1347.26 1212.56 L1346.67 1212.56 L1346.08 1212.56 L1345.5 1212.56 L1344.91 1212.56 L1344.32 1212.56 L1343.74 1212.56 L1343.15 1212.56 L1342.56 1212.56 L1341.98 1212.56 L1341.39 1212.56 L1340.8 1212.56 L1340.22 1212.56 L1339.63 1212.56 L1339.05 1212.56 L1338.46 1212.56 L1337.87 1212.56 L1337.29 1212.56 L1336.7 1212.56 L1336.11 1212.56 L1335.53 1212.56 L1334.94 1212.56 L1334.35 1212.56 L1333.77 1212.56 L1333.18 1212.56 L1332.6 1212.56 L1332.01 1212.56 L1331.42 1212.56 L1330.84 1212.56 L1330.25 1212.56 L1329.66 1212.56 L1329.08 1212.56 L1328.49 1212.56 L1327.9 1212.56 L1327.32 1212.56 L1326.73 1212.56 L1326.14 1212.56 L1325.56 1212.56 L1324.97 1212.56 L1324.39 1212.56 L1323.8 1212.56 L1323.21 1212.56 L1322.63 1212.56 L1322.04 1212.56 L1321.45 1212.56 L1320.87 1212.56 L1320.28 1212.56 L1319.69 1212.56 L1319.11 1212.56 L1318.52 1212.56 L1317.93 1212.56 L1317.35 1212.56 L1316.76 1212.56 L1316.18 1212.56 L1315.59 1212.56 L1315 1212.56 L1314.42 1212.56 L1313.83 1212.56 L1313.24 1212.56 L1312.66 1212.56 L1312.07 1212.56 L1311.48 1212.56 L1310.9 1212.56 L1310.31 1212.56 L1309.73 1212.56 L1309.14 1212.56 L1308.55 1212.56 L1307.97 1212.56 L1307.38 1212.56 L1306.79 1212.56 L1306.21 1212.56 L1305.62 1212.56 L1305.03 1212.56 L1304.45 1212.56 L1303.86 1212.56 L1303.27 1212.56 L1302.69 1212.56 L1302.1 1212.56 L1301.52 1212.56 L1300.93 1212.56 L1300.34 1212.56 L1299.76 1212.56 L1299.17 1212.56 L1298.58 1212.56 L1298 1212.56 L1297.41 1212.56 L1296.82 1212.56 L1296.24 1212.56 L1295.65 1212.56 L1295.06 1212.56 L1294.48 1212.56 L1293.89 1212.56 L1293.31 1212.56 L1292.72 1212.56 L1292.13 1212.56 L1291.55 1212.56 L1290.96 1212.56 L1290.37 1212.56 L1289.79 1212.56 L1289.2 1212.56 L1288.61 1212.56 L1288.03 1212.56 L1287.44 1212.56 L1286.86 1212.56 L1286.27 1212.56 L1285.68 1212.56 L1285.1 1212.56 L1284.51 1212.56 L1283.92 1212.56 L1283.34 1212.56 L1282.75 1212.56 L1282.16 1212.56 L1281.58 1212.56 L1280.99 1212.56 L1280.4 1212.56 L1279.82 1212.56 L1279.23 1212.56 L1278.65 1212.56 L1278.06 1212.56 L1277.47 1212.56 L1276.89 1212.56 L1276.3 1212.56 L1275.71 1212.56 L1275.13 1212.56 L1274.54 1212.56 L1273.95 1212.56 L1273.37 1212.56 L1272.78 1212.56 L1272.19 1212.56 L1271.61 1212.56 L1271.02 1212.56 L1270.44 1212.56 L1269.85 1212.56 L1269.26 1212.56 L1268.68 1212.56 L1268.09 1212.56 L1267.5 1212.56 L1266.92 1212.56 L1266.33 1212.56 L1265.74 1212.56 L1265.16 1212.56 L1264.57 1212.56 L1263.98 1212.56 L1263.4 1212.56 L1262.81 1212.56 L1262.23 1212.56 L1261.64 1212.56 L1261.05 1212.56 L1260.47 1212.56 L1259.88 1212.56 L1259.29 1212.56 L1258.71 1212.56 L1258.12 1212.56 L1257.53 1212.56 L1256.95 1212.56 L1256.36 1212.56 L1255.78 1212.56 L1255.19 1212.56 L1254.6 1212.56 L1254.02 1212.56 L1253.43 1212.56 L1252.84 1212.56 L1252.26 1212.56 L1251.67 1212.56 L1251.08 1212.56 L1250.5 1212.56 L1249.91 1212.56 L1249.32 1212.56 L1248.74 1212.56 L1248.15 1212.56 L1247.57 1212.56 L1246.98 1212.56 L1246.39 1212.56 L1245.81 1212.56 L1245.22 1212.56 L1244.63 1212.56 L1244.05 1212.56 L1243.46 1212.56 L1242.87 1212.56 L1242.29 1212.56 L1241.7 1212.56 L1241.11 1212.56 L1240.53 1212.56 L1239.94 1212.56 L1239.36 1212.56 L1238.77 1212.56 L1238.18 1212.56 L1237.6 1212.56 L1237.01 1212.56 L1236.42 1212.56 L1235.84 1212.56 L1235.25 1212.56 L1234.66 1212.56 L1234.08 1212.56 L1233.49 1212.56 L1232.91 1212.56 L1232.32 1212.56 L1231.73 1212.56 L1231.15 1212.56 L1230.56 1212.56 L1229.97 1212.56 L1229.39 1212.56 L1228.8 1212.56 L1228.21 1212.56 L1227.63 1212.56 L1227.04 1212.56 L1226.45 1212.56 L1225.87 1212.56 L1225.28 1212.56 L1224.7 1212.56 L1224.11 1212.56 L1223.52 1212.56 L1222.94 1212.56 L1222.35 1212.56 L1221.76 1212.56 L1221.18 1212.56 L1220.59 1212.56 L1220 1212.56 L1219.42 1212.56 L1218.83 1212.56 L1218.24 1212.56 L1217.66 1212.56 L1217.07 1212.56 L1216.49 1212.56 L1215.9 1212.56 L1215.31 1212.56 L1214.73 1212.56 L1214.14 1212.56 L1213.55 1212.56 L1212.97 1212.56 L1212.38 1212.56 L1211.79 1212.56 L1211.21 1212.56 L1210.62 1212.56 L1210.03 1212.56 L1209.45 1212.56 L1208.86 1212.56 L1208.28 1212.56 L1207.69 1212.56 L1207.1 1212.56 L1206.52 1212.56 L1205.93 1212.56 L1205.34 1212.56 L1204.76 1212.56 L1204.17 1212.56 L1203.58 1212.56 L1203 1212.56 L1202.41 1212.56 L1201.83 1212.56 L1201.24 1212.56 L1200.65 1212.56 L1200.07 1212.56 L1199.48 1212.56 L1198.89 1212.56 L1198.31 1212.56 L1197.72 1212.56 L1197.13 1212.56 L1196.55 1212.56 L1195.96 1212.56 L1195.37 1212.56 L1194.79 1212.56 L1194.2 1212.56 L1193.62 1212.56 L1193.03 1212.56 L1192.44 1212.56 L1191.86 1212.56 L1191.27 1212.56 L1190.68 1212.56 L1190.1 1212.56 L1189.51 1212.56 L1188.92 1212.56 L1188.34 1212.56 L1187.75 1212.56 L1187.16 1212.56 L1186.58 1212.56 L1185.99 1212.56 L1185.41 1212.56 L1184.82 1212.56 L1184.23 1212.56 L1183.65 1212.56 L1183.06 1212.56 L1182.47 1212.56 L1181.89 1212.56 L1181.3 1212.56 L1180.71 1212.56 L1180.13 1212.56 L1179.54 1212.56 L1178.96 1212.56 L1178.37 1212.56 L1177.78 1212.56 L1177.2 1212.56 L1176.61 1212.56 L1176.02 1212.56 L1175.44 1212.56 L1174.85 1212.56 L1174.26 1212.56 L1173.68 1212.56 L1173.09 1212.56 L1172.5 1212.56 L1171.92 1212.56 L1171.33 1212.56 L1170.75 1212.56 L1170.16 1212.56 L1169.57 1212.56 L1168.99 1212.56 L1168.4 1212.56 L1167.81 1212.56 L1167.23 1212.56 L1166.64 1212.56 L1166.05 1212.56 L1165.47 1212.56 L1164.88 1212.56 L1164.29 1212.56 L1163.71 1212.56 L1163.12 1212.56 L1162.54 1212.56 L1161.95 1212.56 L1161.36 1212.56 L1160.78 1212.56 L1160.19 1212.56 L1159.6 1212.56 L1159.02 1212.56 L1158.43 1212.56 L1157.84 1212.56 L1157.26 1212.56 L1156.67 1212.56 L1156.09 1212.56 L1155.5 1212.56 L1154.91 1212.56 L1154.33 1212.56 L1153.74 1212.56 L1153.15 1212.56 L1152.57 1212.56 L1151.98 1212.56 L1151.39 1212.56 L1150.81 1212.56 L1150.22 1212.56 L1149.63 1212.56 L1149.05 1212.56 L1148.46 1212.56 L1147.88 1212.56 L1147.29 1212.56 L1146.7 1212.56 L1146.12 1212.56 L1145.53 1212.56 L1144.94 1212.56 L1144.36 1212.56 L1143.77 1212.56 L1143.18 1212.56 L1142.6 1212.56 L1142.01 1212.56 L1141.42 1212.56 L1140.84 1212.56 L1140.25 1212.56 L1139.67 1212.56 L1139.08 1212.56 L1138.49 1212.56 L1137.91 1212.56 L1137.32 1212.56 L1136.73 1212.56 L1136.15 1212.56 L1135.56 1212.56 L1134.97 1212.56 L1134.39 1212.56 L1133.8 1212.56 L1133.21 1212.56 L1132.63 1212.56 L1132.04 1212.56 L1131.46 1212.56 L1130.87 1212.56 L1130.28 1212.56 L1129.7 1212.56 L1129.11 1212.56 L1128.52 1212.56 L1127.94 1212.56 L1127.35 1212.56 L1126.76 1212.56 L1126.18 1212.56 L1125.59 1212.56 L1125.01 1212.56 L1124.42 1212.56 L1123.83 1212.56 L1123.25 1212.56 L1122.66 1212.56 L1122.07 1212.56 L1121.49 1212.56 L1120.9 1212.56 L1120.31 1212.56 L1119.73 1212.56 L1119.14 1212.56 L1118.55 1212.56 L1117.97 1212.56 L1117.38 1212.56 L1116.8 1212.56 L1116.21 1212.56 L1115.62 1212.56 L1115.04 1212.56 L1114.45 1212.56 L1113.86 1212.56 L1113.28 1212.56 L1112.69 1212.56 L1112.1 1212.56 L1111.52 1212.56 L1110.93 1212.56 L1110.34 1212.56 L1109.76 1212.56 L1109.17 1212.56 L1108.59 1212.56 L1108 1212.56 L1107.41 1212.56 L1106.83 1212.56 L1106.24 1212.56 L1105.65 1212.56 L1105.07 1212.56 L1104.48 1212.56 L1103.89 1212.56 L1103.31 1212.56 L1102.72 1212.56 L1102.14 1212.56 L1101.55 1212.56 L1100.96 1212.56 L1100.38 1212.56 L1099.79 1212.56 L1099.2 1212.56 L1098.62 1212.56 L1098.03 1212.56 L1097.44 1212.56 L1096.86 1212.56 L1096.27 1212.56 L1095.68 1212.56 L1095.1 1212.56 L1094.51 1212.56 L1093.93 1212.56 L1093.34 1212.56 L1092.75 1212.56 L1092.17 1212.56 L1091.58 1212.56 L1090.99 1212.56 L1090.41 1212.56 L1089.82 1212.56 L1089.23 1212.56 L1088.65 1212.56 L1088.06 1212.56 L1087.47 1212.56 L1086.89 1212.56 L1086.3 1212.56 L1085.72 1212.56 L1085.13 1212.56 L1084.54 1212.56 L1083.96 1212.56 L1083.37 1212.56 L1082.78 1212.56 L1082.2 1212.56 L1081.61 1212.56 L1081.02 1212.56 L1080.44 1212.56 L1079.85 1212.56 L1079.26 1212.56 L1078.68 1212.56 L1078.09 1212.56 L1077.51 1212.56 L1076.92 1212.56 L1076.33 1212.56 L1075.75 1212.56 L1075.16 1212.56 L1074.57 1212.56 L1073.99 1212.56 L1073.4 1212.56 L1072.81 1212.56 L1072.23 1212.56 L1071.64 1212.56 L1071.06 1212.56 L1070.47 1212.56 L1069.88 1212.56 L1069.3 1212.56 L1068.71 1212.56 L1068.12 1212.56 L1067.54 1212.56 L1066.95 1212.56 L1066.36 1212.56 L1065.78 1212.56 L1065.19 1212.56 L1064.6 1212.56 L1064.02 1212.56 L1063.43 1212.56 L1062.85 1212.56 L1062.26 1212.56 L1061.67 1212.56 L1061.09 1212.56 L1060.5 1212.56 L1059.91 1212.56 L1059.33 1212.56 L1058.74 1212.56 L1058.15 1212.56 L1057.57 1212.56 L1056.98 1212.56 L1056.39 1212.56 L1055.81 1212.56 L1055.22 1212.56 L1054.64 1212.56 L1054.05 1212.56 L1053.46 1212.56 L1052.88 1212.56 L1052.29 1212.56 L1051.7 1212.56 L1051.12 1212.56 L1050.53 1212.56 L1049.94 1212.56 L1049.36 1212.56 L1048.77 1212.56 L1048.19 1212.56 L1047.6 1212.56 L1047.01 1212.56 L1046.43 1212.56 L1045.84 1212.56 L1045.25 1212.56 L1044.67 1212.56 L1044.08 1212.56 L1043.49 1212.56 L1042.91 1212.56 L1042.32 1212.56 L1041.73 1212.56 L1041.15 1212.56 L1040.56 1212.56 L1039.98 1212.56 L1039.39 1212.56 L1038.8 1212.56 L1038.22 1212.56 L1037.63 1212.56 L1037.04 1212.56 L1036.46 1212.56 L1035.87 1212.56 L1035.28 1212.56 L1034.7 1212.56 L1034.11 1212.56 L1033.52 1212.56 L1032.94 1212.56 L1032.35 1212.56 L1031.77 1212.56 L1031.18 1212.56 L1030.59 1212.56 L1030.01 1212.56 L1029.42 1212.56 L1028.83 1212.56 L1028.25 1212.56 L1027.66 1212.56 L1027.07 1212.56 L1026.49 1212.56 L1025.9 1212.56 L1025.32 1212.56 L1024.73 1212.56 L1024.14 1212.56 L1023.56 1212.56 L1022.97 1212.56 L1022.38 1212.56 L1021.8 1212.56 L1021.21 1212.56 L1020.62 1212.56 L1020.04 1212.56 L1019.45 1212.56 L1018.86 1212.56 L1018.28 1212.56 L1017.69 1212.56 L1017.11 1212.56 L1016.52 1212.56 L1015.93 1212.56 L1015.35 1212.56 L1014.76 1212.56 L1014.17 1212.56 L1013.59 1212.56 L1013 1212.56 L1012.41 1212.56 L1011.83 1212.56 L1011.24 1212.56 L1010.65 1212.56 L1010.07 1212.56 L1009.48 1212.56 L1008.9 1212.56 L1008.31 1212.56 L1007.72 1212.56 L1007.14 1212.56 L1006.55 1212.56 L1005.96 1212.56 L1005.38 1212.56 L1004.79 1212.56 L1004.2 1212.56 L1003.62 1212.56 L1003.03 1212.56 L1002.44 1212.56 L1001.86 1212.56 L1001.27 1212.56 L1000.69 1212.56 L1000.1 1212.56 L999.513 1212.56 L998.926 1212.56 L998.34 1212.56 L997.754 1212.56 L997.167 1212.56 L996.581 1212.56 L995.994 1212.56 L995.408 1212.56 L994.822 1212.56 L994.235 1212.56 L993.649 1212.56 L993.062 1212.56 L992.476 1212.56 L991.889 1212.56 L991.303 1212.56 L990.717 1212.56 L990.13 1212.56 L989.544 1212.56 L988.957 1212.56 L988.371 1212.56 L987.785 1212.56 L987.198 1212.56 L986.612 1212.56 L986.025 1212.56  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.66 986.612,1212.66 987.198,1212.66 987.785,1212.66 988.371,1212.66 988.957,1212.66 989.544,1212.66 990.13,1212.66 990.717,1212.66 991.303,1212.66 991.889,1212.66 992.476,1212.66 993.062,1212.66 993.649,1212.66 994.235,1212.66 994.822,1212.66 995.408,1212.66 995.994,1212.66 996.581,1212.66 997.167,1212.66 997.754,1212.66 998.34,1212.66 998.926,1212.66 999.513,1212.66 1000.1,1212.66 1000.69,1212.66 1001.27,1212.66 1001.86,1212.66 1002.44,1212.66 1003.03,1212.66 1003.62,1212.66 1004.2,1212.66 1004.79,1212.66 1005.38,1212.66 1005.96,1212.66 1006.55,1212.66 1007.14,1212.66 1007.72,1212.66 1008.31,1212.66 1008.9,1212.66 1009.48,1212.66 1010.07,1212.66 1010.65,1212.66 1011.24,1212.66 1011.83,1212.66 1012.41,1212.66 1013,1212.66 1013.59,1212.66 1014.17,1212.66 1014.76,1212.66 1015.35,1212.66 1015.93,1212.66 1016.52,1212.66 1017.11,1212.66 1017.69,1212.66 1018.28,1212.66 1018.86,1212.66 1019.45,1212.66 1020.04,1212.66 1020.62,1212.66 1021.21,1212.66 1021.8,1212.66 1022.38,1212.66 1022.97,1212.66 1023.56,1212.66 1024.14,1212.66 1024.73,1212.66 1025.32,1212.66 1025.9,1212.66 1026.49,1212.66 1027.07,1212.66 1027.66,1212.66 1028.25,1212.66 1028.83,1212.66 1029.42,1212.66 1030.01,1212.66 1030.59,1212.66 1031.18,1212.66 1031.77,1212.66 1032.35,1212.66 1032.94,1212.66 1033.52,1212.66 1034.11,1212.66 1034.7,1212.66 1035.28,1212.66 1035.87,1212.66 1036.46,1212.66 1037.04,1212.66 1037.63,1212.66 1038.22,1212.66 1038.8,1212.66 1039.39,1212.66 1039.98,1212.66 1040.56,1212.66 1041.15,1212.66 1041.73,1212.66 1042.32,1212.66 1042.91,1212.66 1043.49,1212.66 1044.08,1212.66 1044.67,1212.66 1045.25,1212.66 1045.84,1212.66 1046.43,1212.66 1047.01,1212.66 1047.6,1212.66 1048.19,1212.66 1048.77,1212.66 1049.36,1212.66 1049.94,1212.66 1050.53,1212.66 1051.12,1212.66 1051.7,1212.66 1052.29,1212.66 1052.88,1212.66 1053.46,1212.66 1054.05,1212.66 1054.64,1212.66 1055.22,1212.66 1055.81,1212.66 1056.39,1212.66 1056.98,1212.66 1057.57,1212.66 1058.15,1212.66 1058.74,1212.66 1059.33,1212.66 1059.91,1212.66 1060.5,1212.66 1061.09,1212.66 1061.67,1212.66 1062.26,1212.66 1062.85,1212.66 1063.43,1212.66 1064.02,1212.66 1064.6,1212.66 1065.19,1212.66 1065.78,1212.66 1066.36,1212.66 1066.95,1212.66 1067.54,1212.66 1068.12,1212.66 1068.71,1212.66 1069.3,1212.66 1069.88,1212.66 1070.47,1212.66 1071.06,1212.66 1071.64,1212.66 1072.23,1212.66 1072.81,1212.66 1073.4,1212.66 1073.99,1212.66 1074.57,1212.66 1075.16,1212.66 1075.75,1212.66 1076.33,1212.66 1076.92,1212.66 1077.51,1212.66 1078.09,1212.66 1078.68,1212.66 1079.26,1212.66 1079.85,1212.66 1080.44,1212.66 1081.02,1212.66 1081.61,1212.66 1082.2,1212.66 1082.78,1212.66 1083.37,1212.66 1083.96,1212.66 1084.54,1212.66 1085.13,1212.66 1085.72,1212.66 1086.3,1212.66 1086.89,1212.66 1087.47,1212.66 1088.06,1212.66 1088.65,1212.66 1089.23,1212.66 1089.82,1212.66 1090.41,1212.66 1090.99,1212.66 1091.58,1212.66 1092.17,1212.66 1092.75,1212.66 1093.34,1212.66 1093.93,1212.66 1094.51,1212.66 1095.1,1212.66 1095.68,1212.66 1096.27,1212.66 1096.86,1212.66 1097.44,1212.66 1098.03,1212.66 1098.62,1212.66 1099.2,1212.66 1099.79,1212.66 1100.38,1212.66 1100.96,1212.66 1101.55,1212.66 1102.14,1212.66 1102.72,1212.66 1103.31,1212.66 1103.89,1212.66 1104.48,1212.66 1105.07,1212.66 1105.65,1212.66 1106.24,1212.66 1106.83,1212.66 1107.41,1212.66 1108,1212.66 1108.59,1212.66 1109.17,1212.66 1109.76,1212.66 1110.34,1212.66 1110.93,1212.66 1111.52,1212.66 1112.1,1212.66 1112.69,1212.66 1113.28,1212.66 1113.86,1212.66 1114.45,1212.66 1115.04,1212.66 1115.62,1212.66 1116.21,1212.66 1116.8,1212.66 1117.38,1212.66 1117.97,1212.66 1118.55,1212.66 1119.14,1212.66 1119.73,1212.66 1120.31,1212.66 1120.9,1212.66 1121.49,1212.66 1122.07,1212.66 1122.66,1212.66 1123.25,1212.66 1123.83,1212.66 1124.42,1212.66 1125.01,1212.66 1125.59,1212.66 1126.18,1212.66 1126.76,1212.66 1127.35,1212.66 1127.94,1212.66 1128.52,1212.66 1129.11,1212.66 1129.7,1212.66 1130.28,1212.66 1130.87,1212.66 1131.46,1212.66 1132.04,1212.66 1132.63,1212.66 1133.21,1212.66 1133.8,1212.66 1134.39,1212.66 1134.97,1212.66 1135.56,1212.66 1136.15,1212.66 1136.73,1212.66 1137.32,1212.66 1137.91,1212.66 1138.49,1212.66 1139.08,1212.66 1139.67,1212.66 1140.25,1212.66 1140.84,1212.66 1141.42,1212.66 1142.01,1212.66 1142.6,1212.66 1143.18,1212.66 1143.77,1212.66 1144.36,1212.66 1144.94,1212.66 1145.53,1212.66 1146.12,1212.66 1146.7,1212.66 1147.29,1212.66 1147.88,1212.66 1148.46,1212.66 1149.05,1212.66 1149.63,1212.66 1150.22,1212.66 1150.81,1212.66 1151.39,1212.66 1151.98,1212.66 1152.57,1212.66 1153.15,1212.66 1153.74,1212.66 1154.33,1212.66 1154.91,1212.66 1155.5,1212.66 1156.09,1212.66 1156.67,1212.66 1157.26,1212.66 1157.84,1212.66 1158.43,1212.66 1159.02,1212.66 1159.6,1212.66 1160.19,1212.66 1160.78,1212.66 1161.36,1212.66 1161.95,1212.66 1162.54,1212.66 1163.12,1212.66 1163.71,1212.66 1164.29,1212.66 1164.88,1212.66 1165.47,1212.66 1166.05,1212.66 1166.64,1212.66 1167.23,1212.66 1167.81,1212.66 1168.4,1212.66 1168.99,1212.66 1169.57,1212.66 1170.16,1212.66 1170.75,1212.66 1171.33,1212.66 1171.92,1212.66 1172.5,1212.66 1173.09,1212.66 1173.68,1212.66 1174.26,1212.66 1174.85,1212.66 1175.44,1212.66 1176.02,1212.66 1176.61,1212.66 1177.2,1212.66 1177.78,1212.66 1178.37,1212.66 1178.96,1212.66 1179.54,1212.66 1180.13,1212.66 1180.71,1212.66 1181.3,1212.66 1181.89,1212.66 1182.47,1212.66 1183.06,1212.66 1183.65,1212.66 1184.23,1212.66 1184.82,1212.66 1185.41,1212.66 1185.99,1212.66 1186.58,1212.66 1187.16,1212.66 1187.75,1212.66 1188.34,1212.66 1188.92,1212.66 1189.51,1212.66 1190.1,1212.66 1190.68,1212.66 1191.27,1212.66 1191.86,1212.66 1192.44,1212.66 1193.03,1212.66 1193.62,1212.66 1194.2,1212.66 1194.79,1212.66 1195.37,1212.66 1195.96,1212.66 1196.55,1212.66 1197.13,1212.66 1197.72,1212.66 1198.31,1212.66 1198.89,1212.66 1199.48,1212.66 1200.07,1212.66 1200.65,1212.66 1201.24,1212.66 1201.83,1212.66 1202.41,1212.66 1203,1212.66 1203.58,1212.66 1204.17,1212.66 1204.76,1212.66 1205.34,1212.66 1205.93,1212.66 1206.52,1212.66 1207.1,1212.66 1207.69,1212.66 1208.28,1212.66 1208.86,1212.66 1209.45,1212.66 1210.03,1212.66 1210.62,1212.66 1211.21,1212.66 1211.79,1212.66 1212.38,1212.66 1212.97,1212.66 1213.55,1212.66 1214.14,1212.66 1214.73,1212.66 1215.31,1212.66 1215.9,1212.66 1216.49,1212.66 1217.07,1212.66 1217.66,1212.66 1218.24,1212.66 1218.83,1212.66 1219.42,1212.66 1220,1212.66 1220.59,1212.66 1221.18,1212.66 1221.76,1212.66 1222.35,1212.66 1222.94,1212.66 1223.52,1212.66 1224.11,1212.66 1224.7,1212.66 1225.28,1212.66 1225.87,1212.66 1226.45,1212.66 1227.04,1212.66 1227.63,1212.66 1228.21,1212.66 1228.8,1212.66 1229.39,1212.66 1229.97,1212.66 1230.56,1212.66 1231.15,1212.66 1231.73,1212.66 1232.32,1212.66 1232.91,1212.66 1233.49,1212.66 1234.08,1212.66 1234.66,1212.66 1235.25,1212.66 1235.84,1212.66 1236.42,1212.66 1237.01,1212.66 1237.6,1212.66 1238.18,1212.66 1238.77,1212.66 1239.36,1212.66 1239.94,1212.66 1240.53,1212.66 1241.11,1212.66 1241.7,1212.66 1242.29,1212.66 1242.87,1212.66 1243.46,1212.66 1244.05,1212.66 1244.63,1212.66 1245.22,1212.66 1245.81,1212.66 1246.39,1212.66 1246.98,1212.66 1247.57,1212.66 1248.15,1212.66 1248.74,1212.66 1249.32,1212.66 1249.91,1212.66 1250.5,1212.66 1251.08,1212.66 1251.67,1212.66 1252.26,1212.66 1252.84,1212.66 1253.43,1212.66 1254.02,1212.66 1254.6,1212.66 1255.19,1212.66 1255.78,1212.66 1256.36,1212.66 1256.95,1212.66 1257.53,1212.66 1258.12,1212.66 1258.71,1212.66 1259.29,1212.66 1259.88,1212.66 1260.47,1212.66 1261.05,1212.66 1261.64,1212.66 1262.23,1212.66 1262.81,1212.66 1263.4,1212.66 1263.98,1212.66 1264.57,1212.66 1265.16,1212.66 1265.74,1212.66 1266.33,1212.66 1266.92,1212.66 1267.5,1212.66 1268.09,1212.66 1268.68,1212.66 1269.26,1212.66 1269.85,1212.66 1270.44,1212.66 1271.02,1212.66 1271.61,1212.66 1272.19,1212.66 1272.78,1212.66 1273.37,1212.66 1273.95,1212.66 1274.54,1212.66 1275.13,1212.66 1275.71,1212.66 1276.3,1212.66 1276.89,1212.66 1277.47,1212.66 1278.06,1212.66 1278.65,1212.66 1279.23,1212.66 1279.82,1212.66 1280.4,1212.66 1280.99,1212.66 1281.58,1212.66 1282.16,1212.66 1282.75,1212.66 1283.34,1212.66 1283.92,1212.66 1284.51,1212.66 1285.1,1212.66 1285.68,1212.66 1286.27,1212.66 1286.86,1212.66 1287.44,1212.66 1288.03,1212.66 1288.61,1212.66 1289.2,1212.66 1289.79,1212.66 1290.37,1212.66 1290.96,1212.66 1291.55,1212.66 1292.13,1212.66 1292.72,1212.66 1293.31,1212.66 1293.89,1212.66 1294.48,1212.66 1295.06,1212.66 1295.65,1212.66 1296.24,1212.66 1296.82,1212.66 1297.41,1212.66 1298,1212.66 1298.58,1212.66 1299.17,1212.66 1299.76,1212.66 1300.34,1212.66 1300.93,1212.66 1301.52,1212.66 1302.1,1212.66 1302.69,1212.66 1303.27,1212.66 1303.86,1212.66 1304.45,1212.66 1305.03,1212.66 1305.62,1212.66 1306.21,1212.66 1306.79,1212.66 1307.38,1212.66 1307.97,1212.66 1308.55,1212.66 1309.14,1212.66 1309.73,1212.66 1310.31,1212.66 1310.9,1212.66 1311.48,1212.66 1312.07,1212.66 1312.66,1212.66 1313.24,1212.66 1313.83,1212.66 1314.42,1212.66 1315,1212.66 1315.59,1212.66 1316.18,1212.66 1316.76,1212.66 1317.35,1212.66 1317.93,1212.66 1318.52,1212.66 1319.11,1212.66 1319.69,1212.66 1320.28,1212.66 1320.87,1212.66 1321.45,1212.66 1322.04,1212.66 1322.63,1212.66 1323.21,1212.66 1323.8,1212.66 1324.39,1212.66 1324.97,1212.66 1325.56,1212.66 1326.14,1212.66 1326.73,1212.66 1327.32,1212.66 1327.9,1212.66 1328.49,1212.66 1329.08,1212.66 1329.66,1212.66 1330.25,1212.66 1330.84,1212.66 1331.42,1212.66 1332.01,1212.66 1332.6,1212.66 1333.18,1212.66 1333.77,1212.66 1334.35,1212.66 1334.94,1212.66 1335.53,1212.66 1336.11,1212.66 1336.7,1212.66 1337.29,1212.66 1337.87,1212.66 1338.46,1212.66 1339.05,1212.66 1339.63,1212.66 1340.22,1212.66 1340.8,1212.66 1341.39,1212.66 1341.98,1212.66 1342.56,1212.66 1343.15,1212.66 1343.74,1212.66 1344.32,1212.66 1344.91,1212.66 1345.5,1212.66 1346.08,1212.66 1346.67,1212.66 1347.26,1212.66 1347.84,1212.66 1348.43,1212.66 1349.01,1212.66 1349.6,1212.66 1350.19,1212.66 1350.77,1212.66 1351.36,1212.66 1351.95,1212.66 1352.53,1212.66 1353.12,1212.66 1353.71,1212.66 1354.29,1212.66 1354.88,1212.66 1355.47,1212.66 1356.05,1212.66 1356.64,1212.66 1357.22,1212.66 1357.81,1212.66 1358.4,1212.66 1358.98,1212.66 1359.57,1212.66 1360.16,1212.66 1360.74,1212.66 1361.33,1212.66 1361.92,1212.66 1362.5,1212.66 1363.09,1212.66 1363.68,1212.66 1364.26,1212.66 1364.85,1212.66 1365.43,1212.66 1366.02,1212.66 1366.61,1212.66 1367.19,1212.66 1367.78,1212.66 1368.37,1212.66 1368.95,1212.66 1369.54,1212.66 1370.13,1212.66 1370.71,1212.66 1371.3,1212.66 1371.88,1212.66 1372.47,1212.66 1373.06,1212.66 1373.64,1212.66 1374.23,1212.66 1374.82,1212.66 1375.4,1212.66 1375.99,1212.66 1376.58,1212.66 1377.16,1212.66 1377.75,1212.66 1378.34,1212.66 1378.92,1212.66 1379.51,1212.66 1380.09,1212.66 1380.68,1212.66 1381.27,1212.66 1381.85,1212.66 1382.44,1212.66 1383.03,1212.66 1383.61,1212.66 1384.2,1212.66 1384.79,1212.66 1385.37,1212.66 1385.96,1212.66 1386.55,1212.66 1387.13,1212.66 1387.72,1212.66 1388.3,1212.66 1388.89,1212.66 1389.48,1212.66 1390.06,1212.66 1390.65,1212.66 1391.24,1212.66 1391.82,1212.66 1392.41,1212.66 1393,1212.66 1393.58,1212.66 1394.17,1212.66 1394.75,1212.66 1395.34,1212.66 1395.93,1212.66 1396.51,1212.66 1397.1,1212.66 1397.69,1212.66 1398.27,1212.66 1398.86,1212.66 1399.45,1212.66 1400.03,1212.66 1400.62,1212.66 1401.21,1212.66 1401.79,1212.66 1402.38,1212.66 1402.96,1212.66 1403.55,1212.66 1404.14,1212.66 1404.72,1212.66 1405.31,1212.66 1405.9,1212.66 1406.48,1212.66 1407.07,1212.66 1407.66,1212.66 1408.24,1212.66 1408.83,1212.66 1409.42,1212.66 1410,1212.66 1410.59,1212.66 1411.17,1212.66 1411.76,1212.66 1412.35,1212.66 1412.93,1212.66 1413.52,1212.66 1414.11,1212.66 1414.69,1212.66 1415.28,1212.66 1415.87,1212.66 1416.45,1212.66 1417.04,1212.66 1417.63,1212.66 1418.21,1212.66 1418.8,1212.66 1419.38,1212.66 1419.97,1212.66 1420.56,1212.66 1421.14,1212.66 1421.73,1212.66 1422.32,1212.66 1422.9,1212.66 1423.49,1212.66 1424.08,1212.66 1424.66,1212.66 1425.25,1212.66 1425.83,1212.66 1426.42,1212.66 1427.01,1212.66 1427.59,1212.66 1428.18,1212.66 1428.77,1212.66 1429.35,1212.66 1429.94,1212.66 1430.53,1212.66 1431.11,1212.66 1431.7,1212.66 1432.29,1212.66 1432.87,1212.66 1433.46,1212.66 1434.04,1212.66 1434.63,1212.66 1435.22,1212.66 1435.8,1212.66 1436.39,1212.66 1436.98,1212.66 1437.56,1212.66 1438.15,1212.66 1438.74,1212.66 1439.32,1212.66 1439.91,1212.66 1440.5,1212.66 1441.08,1212.66 1441.67,1212.66 1442.25,1212.66 1442.84,1212.66 1443.43,1212.66 1444.01,1212.66 1444.6,1212.66 1445.19,1212.66 1445.77,1212.66 1446.36,1212.66 1446.95,1212.66 1447.53,1212.66 1448.12,1212.66 1448.7,1212.66 1449.29,1212.66 1449.88,1212.66 1450.46,1212.66 1451.05,1212.66 1451.64,1212.66 1452.22,1212.66 1452.81,1212.66 1453.4,1212.66 1453.98,1212.66 1454.57,1212.66 1455.16,1212.66 1455.74,1212.66 1456.33,1212.66 1456.91,1212.66 1457.5,1212.66 1458.09,1212.66 1458.67,1212.66 1459.26,1212.66 1459.85,1212.66 1460.43,1212.66 1461.02,1212.66 1461.61,1212.66 1462.19,1212.66 1462.78,1212.66 1463.37,1212.66 1463.95,1212.66 1464.54,1212.66 1465.12,1212.66 1465.71,1212.66 1466.3,1212.66 1466.88,1212.66 1467.47,1212.66 1468.06,1212.66 1468.64,1212.66 1469.23,1212.66 1469.82,1212.66 1470.4,1212.66 1470.99,1212.66 1471.57,1212.66 1472.16,1212.66 1472.75,1212.66 1473.33,1212.66 1473.92,1212.66 1474.51,1212.66 1475.09,1212.66 1475.68,1212.66 1476.27,1212.66 1476.85,1212.66 1477.44,1212.66 1478.03,1212.66 1478.61,1212.66 1479.2,1212.66 1479.78,1212.66 1480.37,1212.66 1480.96,1212.66 1481.54,1212.66 1482.13,1212.66 1482.72,1212.66 1483.3,1212.66 1483.89,1212.66 1484.48,1212.66 1485.06,1212.66 1485.65,1212.66 1486.24,1212.66 1486.82,1212.66 1487.41,1212.66 1487.99,1212.66 1488.58,1212.66 1489.17,1212.66 1489.75,1212.66 1490.34,1212.66 1490.93,1212.66 1491.51,1212.66 1492.1,1212.66 1492.69,1212.66 1493.27,1212.66 1493.86,1212.66 1494.45,1212.66 1495.03,1212.66 1495.62,1212.66 1496.2,1212.66 1496.79,1212.66 1497.38,1212.66 1497.96,1212.66 1498.55,1212.66 1499.14,1212.66 1499.72,1212.66 1500.31,1212.66 1500.9,1212.66 1501.48,1212.66 1502.07,1212.66 1502.65,1212.66 1503.24,1212.66 1503.83,1212.66 1504.41,1212.66 1505,1212.66 1505.59,1212.66 1506.17,1212.66 1506.76,1212.66 1507.35,1212.66 1507.93,1212.66 1508.52,1212.66 1509.11,1212.66 1509.69,1212.66 1510.28,1212.66 1510.86,1212.66 1511.45,1212.66 1512.04,1212.66 1512.62,1212.66 1513.21,1212.66 1513.8,1212.66 1514.38,1212.66 1514.97,1212.66 1515.56,1212.66 1516.14,1212.66 1516.73,1212.66 1517.32,1212.66 1517.9,1212.66 1518.49,1212.66 1519.07,1212.66 1519.66,1212.66 1520.25,1212.66 1520.83,1212.66 1521.42,1212.66 1522.01,1212.66 1522.59,1212.66 1523.18,1212.66 1523.77,1212.66 1524.35,1212.66 1524.94,1212.66 1525.52,1212.66 1526.11,1212.66 1526.7,1212.66 1527.28,1212.66 1527.87,1212.66 1528.46,1212.66 1529.04,1212.66 1529.63,1212.66 1530.22,1212.66 1530.8,1212.66 1531.39,1212.66 1531.98,1212.66 1532.56,1212.66 1533.15,1212.66 1533.73,1212.66 1534.32,1212.66 1534.91,1212.66 1535.49,1212.66 1536.08,1212.66 1536.67,1212.66 1537.25,1212.66 1537.84,1212.66 1538.43,1212.66 1539.01,1212.66 1539.6,1212.66 1540.19,1212.66 1540.77,1212.66 1541.36,1212.66 1541.94,1212.66 1542.53,1212.66 1543.12,1212.66 1543.7,1212.66 1544.29,1212.66 1544.88,1212.66 1545.46,1212.66 1546.05,1212.66 1546.64,1212.66 1547.22,1212.66 1547.81,1212.66 1548.4,1212.66 1548.98,1212.66 1549.57,1212.66 1550.15,1212.66 1550.74,1212.66 1551.33,1212.66 1551.91,1212.66 1552.5,1212.66 1553.09,1212.66 1553.67,1212.66 1554.26,1212.66 1554.85,1212.66 1555.43,1212.66 1556.02,1212.66 1556.6,1212.66 1557.19,1212.66 1557.78,1212.66 1558.36,1212.66 1558.95,1212.66 1559.54,1212.66 1560.12,1212.66 1560.71,1212.66 1561.3,1212.66 1561.88,1212.66 1562.47,1212.66 1563.06,1212.66 1563.64,1212.66 1564.23,1212.66 1564.81,1212.66 1565.4,1212.66 1565.99,1212.66 1566.57,1212.66 1567.16,1212.66 1567.75,1212.66 1568.33,1212.66 1568.92,1212.66 1569.51,1212.66 1570.09,1212.66 1570.68,1212.66 1571.27,1212.66 1571.85,1212.66 1572.44,1212.66 1573.02,1212.66 1573.61,1212.66 1574.2,1212.66 1574.78,1212.66 1575.37,1212.66 1575.96,1212.66 1576.54,1212.66 1577.13,1212.66 1577.72,1212.66 1578.3,1212.66 1578.89,1212.66 1579.47,1212.66 1580.06,1212.66 1580.65,1212.66 1581.23,1212.66 1581.82,1212.66 1582.41,1212.66 1582.99,1212.66 1583.58,1212.66 1584.17,1212.66 1584.75,1212.66 1585.34,1212.66 1585.93,1212.66 1586.51,1212.66 1587.1,1212.66 1587.68,1212.66 1588.27,1212.66 1588.86,1212.66 1589.44,1212.66 1590.03,1212.66 1590.62,1212.66 1591.2,1212.66 1591.79,1212.66 1592.38,1212.66 1592.96,1212.66 1593.55,1212.66 1594.14,1212.66 1594.72,1212.66 1595.31,1212.66 1595.89,1212.66 1596.48,1212.66 1597.07,1212.66 1597.65,1212.66 1598.24,1212.66 1598.83,1212.66 1599.41,1212.66 1600,1212.66 1600.59,1212.66 1601.17,1212.66 1601.76,1212.66 1602.34,1212.66 1602.93,1212.66 1603.52,1212.66 1604.1,1212.66 1604.69,1212.66 1605.28,1212.66 1605.86,1212.66 1606.45,1212.66 1607.04,1212.66 1607.62,1212.66 1608.21,1212.66 1608.8,1212.66 1609.38,1212.66 1609.97,1212.66 1610.55,1212.66 1611.14,1212.66 1611.73,1212.66 1612.31,1212.66 1612.9,1212.66 1613.49,1212.66 1614.07,1212.66 1614.66,1212.66 1615.25,1212.66 1615.83,1212.66 1616.42,1212.66 1617.01,1212.66 1617.59,1212.66 1618.18,1212.66 1618.76,1212.66 1619.35,1212.66 1619.94,1212.66 1620.52,1212.66 1621.11,1212.66 1621.7,1212.66 1622.28,1212.66 1622.87,1212.66 1623.46,1212.66 1624.04,1212.66 1624.63,1212.66 1625.22,1212.66 1625.8,1212.66 1626.39,1212.66 1626.97,1212.66 1627.56,1212.66 1628.15,1212.66 1628.73,1212.66 1629.32,1212.66 1629.91,1212.66 1630.49,1212.66 1631.08,1212.66 1631.67,1212.66 1632.25,1212.66 1632.84,1212.66 1633.42,1212.66 1634.01,1212.66 1634.6,1212.66 1635.18,1212.66 1635.77,1212.66 1636.36,1212.66 1636.94,1212.66 1637.53,1212.66 1638.12,1212.66 1638.7,1212.66 1639.29,1212.66 1639.88,1212.66 1640.46,1212.66 1641.05,1212.66 1641.63,1212.66 1642.22,1212.66 1642.81,1212.66 1643.39,1212.66 1643.98,1212.66 1644.57,1212.66 1645.15,1212.66 1645.74,1212.66 1646.33,1212.66 1646.91,1212.66 1647.5,1212.66 1648.09,1212.66 1648.67,1212.66 1649.26,1212.66 1649.84,1212.66 1650.43,1212.66 1651.02,1212.66 1651.6,1212.66 1652.19,1212.66 1652.78,1212.66 1653.36,1212.66 1653.95,1212.66 1654.54,1212.66 1655.12,1212.66 1655.71,1212.66 1656.29,1212.66 1656.88,1212.66 1657.47,1212.66 1658.05,1212.66 1658.64,1212.66 1659.23,1212.66 1659.81,1212.66 1660.4,1212.66 1660.99,1212.66 1661.57,1212.66 1662.16,1212.66 1662.75,1212.66 1663.33,1212.66 1663.92,1212.66 1664.5,1212.66 1665.09,1212.66 1665.68,1212.66 1666.26,1212.66 1666.85,1212.66 1667.44,1212.66 1668.02,1212.66 1668.61,1212.66 1669.2,1212.66 1669.78,1212.66 1670.37,1212.66 1670.96,1212.66 1671.54,1212.66 1672.13,1212.66 1672.71,1212.66 1673.3,1212.66 1673.89,1212.66 1674.47,1212.66 1675.06,1212.66 1675.65,1212.66 1676.23,1212.66 1676.82,1212.66 1677.41,1212.66 1677.99,1212.66 1678.58,1212.66 1679.17,1212.66 1679.75,1212.66 1680.34,1212.66 1680.92,1212.66 1681.51,1212.66 1682.1,1212.66 1682.68,1212.66 1683.27,1212.66 1683.86,1212.66 1684.44,1212.66 1685.03,1212.66 1685.62,1212.66 1686.2,1212.66 1686.79,1212.66 1687.37,1212.66 1687.96,1212.66 1688.55,1212.66 1689.13,1212.66 1689.72,1212.66 1690.31,1212.66 1690.89,1212.66 1691.48,1212.66 1692.07,1212.66 1692.65,1212.66 1693.24,1212.66 1693.83,1212.66 1694.41,1212.66 1695,1212.66 1695.58,1212.66 1696.17,1212.66 1696.76,1212.66 1697.34,1212.66 1697.93,1212.66 1698.52,1212.66 1699.1,1212.66 1699.69,1212.66 1700.28,1212.66 1700.86,1212.66 1701.45,1212.66 1702.04,1212.66 1702.62,1212.66 1703.21,1212.66 1703.79,1212.66 1704.38,1212.66 1704.97,1212.66 1705.55,1212.66 1706.14,1212.66 1706.73,1212.66 1707.31,1212.66 1707.9,1212.66 1708.49,1212.66 1709.07,1212.66 1709.66,1212.66 1710.24,1212.66 1710.83,1212.66 1711.42,1212.66 1712,1212.66 1712.59,1212.66 1713.18,1212.66 1713.76,1212.66 1714.35,1212.66 1714.94,1212.66 1715.52,1212.66 1716.11,1212.66 1716.7,1212.66 1717.28,1212.66 1717.87,1212.66 1718.45,1212.66 1719.04,1212.66 1719.63,1212.66 1720.21,1212.66 1720.8,1212.66 1721.39,1212.66 1721.97,1212.66 1722.56,1212.66 1723.15,1212.66 1723.73,1212.66 1724.32,1212.66 1724.91,1212.66 1725.49,1212.66 1726.08,1212.66 1726.66,1212.66 1727.25,1212.66 1727.84,1212.66 1728.42,1212.66 1729.01,1212.66 1729.6,1212.66 1730.18,1212.66 1730.77,1212.66 1731.36,1212.66 1731.94,1212.66 1732.53,1212.66 1733.11,1212.66 1733.7,1212.66 1734.29,1212.66 1734.87,1212.66 1735.46,1212.66 1736.05,1212.66 1736.63,1212.66 1737.22,1212.66 1737.81,1212.66 1738.39,1212.66 1738.98,1212.66 1739.57,1212.66 1740.15,1212.66 1740.74,1212.66 1741.32,1212.66 1741.91,1212.66 1742.5,1212.66 1743.08,1212.66 1743.67,1212.66 1744.26,1212.66 1744.84,1212.66 1745.43,1212.66 1746.02,1212.66 1746.6,1212.66 1747.19,1212.66 1747.78,1212.66 1748.36,1212.66 1748.95,1212.66 1749.53,1212.66 1750.12,1212.66 1750.71,1212.66 1751.29,1212.66 1751.88,1212.66 1752.47,1212.66 1753.05,1212.66 1753.64,1212.66 1754.23,1212.66 1754.81,1212.66 1755.4,1212.66 1755.99,1212.66 1756.57,1212.66 1757.16,1212.66 1757.74,1212.66 1758.33,1212.66 1758.92,1212.66 1759.5,1212.66 1760.09,1212.66 1760.68,1212.66 1761.26,1212.66 1761.85,1212.66 1762.44,1212.66 1763.02,1212.66 1763.61,1212.66 1764.19,1212.66 1764.78,1212.66 1765.37,1212.66 1765.95,1212.66 1766.54,1212.66 1767.13,1212.66 1767.71,1212.66 1768.3,1212.66 1768.89,1212.66 1769.47,1212.66 1770.06,1212.66 1770.65,1212.66 1771.23,1212.66 1771.82,1212.66 1772.4,1212.66 1772.99,1212.66 1773.58,1212.66 1774.16,1212.66 1774.75,1212.66 1775.34,1212.66 1775.92,1212.66 1776.51,1212.66 1777.1,1212.66 1777.68,1212.66 1778.27,1212.66 1778.86,1212.66 1779.44,1212.66 1780.03,1212.66 1780.61,1212.66 1781.2,1212.66 1781.79,1212.66 1782.37,1212.66 1782.96,1212.66 1783.55,1212.66 1784.13,1212.66 1784.72,1212.66 1785.31,1212.66 1785.89,1212.66 1786.48,1212.66 1787.06,1212.66 1787.65,1212.66 1788.24,1212.66 1788.82,1212.66 1789.41,1212.66 1790,1212.66 1790.58,1212.66 1791.17,1212.66 1791.76,1212.66 1792.34,1212.66 1792.93,1212.66 1793.52,1212.66 1794.1,1212.66 1794.69,1212.66 1795.27,1212.66 1795.86,1212.66 1796.45,1212.66 1797.03,1212.66 1797.62,1212.66 1798.21,1212.66 1798.79,1212.66 1799.38,1212.66 1799.97,1212.66 1800.55,1212.66 1801.14,1212.66 1801.73,1212.66 1802.31,1212.66 1802.9,1212.66 1803.48,1212.66 1804.07,1212.66 1804.66,1212.66 1805.24,1212.66 1805.83,1212.66 1806.42,1212.66 1807,1212.66 1807.59,1212.66 1808.18,1212.66 1808.76,1212.66 1809.35,1212.66 1809.94,1212.66 1810.52,1212.66 1811.11,1212.66 1811.69,1212.66 1812.28,1212.66 1812.87,1212.66 1813.45,1212.66 1814.04,1212.66 1814.63,1212.66 1815.21,1212.66 1815.8,1212.66 1816.39,1212.66 1816.97,1212.66 1817.56,1212.66 1818.14,1212.66 1818.73,1212.66 1819.32,1212.66 1819.9,1212.66 1820.49,1212.66 1821.08,1212.66 1821.66,1212.66 1822.25,1212.66 1822.84,1212.66 1823.42,1212.66 1824.01,1212.66 1824.6,1212.66 1825.18,1212.66 1825.77,1212.66 1826.35,1212.66 1826.94,1212.66 1827.53,1212.66 1828.11,1212.66 1828.7,1212.66 1829.29,1212.66 1829.87,1212.66 1830.46,1212.66 1831.05,1212.66 1831.63,1212.66 1832.22,1212.66 1832.81,1212.66 1833.39,1212.66 1833.98,1212.66 1834.56,1212.66 1835.15,1212.66 1835.74,1212.66 1836.32,1212.66 1836.91,1212.66 1837.5,1212.66 1838.08,1212.66 1838.67,1212.66 1839.26,1212.66 1839.84,1212.66 1840.43,1212.66 1841.01,1212.66 1841.6,1212.66 1842.19,1212.66 1842.77,1212.66 1843.36,1212.66 1843.95,1212.66 1844.53,1212.66 1845.12,1212.66 1845.71,1212.66 1846.29,1212.66 1846.88,1212.66 1847.47,1212.66 1848.05,1212.66 1848.64,1212.66 1849.22,1212.66 1849.81,1212.66 1850.4,1212.66 1850.98,1212.66 1851.57,1212.66 1852.16,1212.66 1852.74,1212.66 1853.33,1212.66 1853.92,1212.66 1854.5,1212.66 1855.09,1212.66 1855.68,1212.66 1856.26,1212.66 1856.85,1212.66 1857.43,1212.66 1858.02,1212.66 1858.61,1212.66 1859.19,1212.66 1859.78,1212.66 1860.37,1212.66 1860.95,1212.66 1861.54,1212.66 1862.13,1212.66 1862.71,1212.66 1863.3,1212.66 1863.88,1212.66 1864.47,1212.66 1865.06,1212.66 1865.64,1212.66 1866.23,1212.66 1866.82,1212.66 1867.4,1212.66 1867.99,1212.66 1868.58,1212.66 1869.16,1212.66 1869.75,1212.66 1870.34,1212.66 1870.92,1212.66 1871.51,1212.66 1872.09,1212.66 1872.68,1212.66 1873.27,1212.66 1873.85,1212.66 1874.44,1212.66 1875.03,1212.66 1875.61,1212.66 1876.2,1212.66 1876.79,1212.66 1877.37,1212.66 1877.96,1212.66 1878.55,1212.66 1879.13,1212.66 1879.72,1212.66 1880.3,1212.66 1880.89,1212.66 1881.48,1212.66 1882.06,1212.66 1882.65,1212.66 1883.24,1212.66 1883.82,1212.66 1884.41,1212.66 1885,1212.66 1885.58,1212.66 1886.17,1212.66 1886.76,1212.66 1887.34,1212.66 1887.93,1212.66 1888.51,1212.66 1889.1,1212.66 1889.69,1212.66 1890.27,1212.66 1890.86,1212.66 1891.45,1212.66 1892.03,1212.66 1892.62,1212.66 1893.21,1212.66 1893.79,1212.66 1894.38,1212.66 1894.96,1212.66 1895.55,1212.66 1896.14,1212.66 1896.72,1212.66 1897.31,1212.66 1897.9,1212.66 1898.48,1212.66 1899.07,1212.66 1899.66,1212.66 1900.24,1212.66 1900.83,1212.66 1901.42,1212.66 1902,1212.66 1902.59,1212.66 1903.17,1212.66 1903.76,1212.66 1904.35,1212.66 1904.93,1212.66 1905.52,1212.66 1906.11,1212.66 1906.69,1212.66 1907.28,1212.66 1907.87,1212.66 1908.45,1212.66 1909.04,1212.66 1909.63,1212.66 1910.21,1212.66 1910.8,1212.66 1911.38,1212.66 1911.97,1212.66 1912.56,1212.66 1913.14,1212.66 1913.73,1212.66 1914.32,1212.66 1914.9,1212.66 1915.49,1212.66 1916.08,1212.66 1916.66,1212.66 1917.25,1212.66 1917.83,1212.66 1918.42,1212.66 1919.01,1212.66 1919.59,1212.66 1920.18,1212.66 1920.77,1212.66 1921.35,1212.66 1921.94,1212.66 1922.53,1212.66 1923.11,1212.66 1923.7,1212.66 1924.29,1212.66 1924.87,1212.66 1925.46,1212.66 1926.04,1212.66 1926.63,1212.66 1927.22,1212.66 1927.8,1212.66 1928.39,1212.66 1928.98,1212.66 1929.56,1212.66 1930.15,1212.66 1930.74,1212.66 1931.32,1212.66 1931.91,1212.66 1932.5,1212.66 1933.08,1212.66 1933.67,1212.66 1934.25,1212.66 1934.84,1212.66 1935.43,1212.66 1936.01,1212.66 1936.6,1212.66 1937.19,1212.66 1937.77,1212.66 1938.36,1212.66 1938.95,1212.66 1939.53,1212.66 1940.12,1212.66 1940.71,1212.66 1941.29,1212.66 1941.88,1212.66 1942.46,1212.66 1943.05,1212.66 1943.64,1212.66 1944.22,1212.66 1944.81,1212.66 1945.4,1212.66 1945.98,1212.66 1946.57,1212.66 1947.16,1212.66 1947.74,1212.66 1948.33,1212.66 1948.91,1212.66 1949.5,1212.66 1950.09,1212.66 1950.67,1212.66 1951.26,1212.66 1951.85,1212.66 1952.43,1212.66 1953.02,1212.66 1953.61,1212.66 1954.19,1212.66 1954.78,1212.66 1955.37,1212.66 1955.95,1212.66 1956.54,1212.66 1957.12,1212.66 1957.71,1212.66 1958.3,1212.66 1958.88,1212.66 1959.47,1212.66 1960.06,1212.66 1960.64,1212.66 1961.23,1212.66 1961.82,1212.66 1962.4,1212.66 1962.99,1212.66 1963.58,1212.66 1964.16,1212.66 1964.75,1212.66 1965.33,1212.66 1965.92,1212.66 1966.51,1212.66 1967.09,1212.66 1967.68,1212.66 1968.27,1212.66 1968.85,1212.66 1969.44,1212.66 1970.03,1212.66 1970.61,1212.66 1971.2,1212.66 1971.78,1212.66 1972.37,1212.66 1972.96,1212.66 1973.54,1212.66 1974.13,1212.66 1974.72,1212.66 1975.3,1212.66 1975.89,1212.66 1976.48,1212.66 1977.06,1212.66 1977.65,1212.66 1978.24,1212.66 1978.82,1212.66 1979.41,1212.66 1979.99,1212.66 1980.58,1212.66 1981.17,1212.66 1981.75,1212.66 1982.34,1212.66 1982.93,1212.66 1983.51,1212.66 1984.1,1212.66 1984.69,1212.66 1985.27,1212.66 1985.86,1212.66 1986.45,1212.66 1987.03,1212.66 1987.62,1212.66 1988.2,1212.66 1988.79,1212.66 1989.38,1212.66 1989.96,1212.66 1990.55,1212.66 1991.14,1212.66 1991.72,1212.66 1992.31,1212.66 1992.9,1212.66 1993.48,1212.66 1994.07,1212.66 1994.65,1212.66 1995.24,1212.66 1995.83,1212.66 1996.41,1212.66 1997,1212.66 1997.59,1212.66 1998.17,1212.66 1998.76,1212.66 1999.35,1212.66 1999.93,1212.66 2000.52,1212.66 2001.11,1212.66 2001.69,1212.66 2002.28,1212.66 2002.86,1212.66 2003.45,1212.66 2004.04,1212.66 2004.62,1212.66 2005.21,1212.66 2005.8,1212.66 2006.38,1212.66 2006.97,1212.66 2007.56,1212.66 2008.14,1212.66 2008.73,1212.66 2009.32,1212.66 2009.9,1212.66 2010.49,1212.66 2011.07,1212.66 2011.66,1212.66 2012.25,1212.66 2012.83,1212.66 2013.42,1212.66 2014.01,1212.66 2014.59,1212.66 2015.18,1212.66 2015.77,1212.66 2016.35,1212.66 2016.94,1212.66 2017.53,1212.66 2018.11,1212.66 2018.7,1212.66 2019.28,1212.66 2019.87,1212.66 2020.46,1212.66 2021.04,1212.66 2021.63,1212.66 2022.22,1212.66 2022.8,1212.66 2023.39,1212.66 2023.98,1212.66 2024.56,1212.66 2025.15,1212.66 2025.73,1212.66 2026.32,1212.66 2026.91,1212.66 2027.49,1212.66 2028.08,1212.66 2028.67,1212.66 2029.25,1212.66 2029.84,1212.66 2030.43,1212.66 2031.01,1212.66 2031.6,1212.66 2032.19,1212.66 2032.77,1212.66 2033.36,1212.66 2033.94,1212.66 2034.53,1212.66 2035.12,1212.66 2035.7,1212.66 2036.29,1212.66 2036.88,1212.66 2037.46,1212.66 2038.05,1212.66 2038.64,1212.66 2039.22,1212.66 2039.81,1212.66 2040.4,1212.66 2040.98,1212.66 2041.57,1212.66 2042.15,1212.66 2042.74,1212.66 2043.33,1212.66 2043.91,1212.66 2044.5,1212.66 2045.09,1212.66 2045.67,1212.66 2046.26,1212.66 2046.85,1212.66 2047.43,1212.66 2048.02,1212.66 2048.6,1212.66 2049.19,1212.66 2049.78,1212.66 2050.36,1212.66 2050.95,1212.66 2051.54,1212.66 2052.12,1212.66 2052.71,1212.66 2053.3,1212.66 2053.88,1212.66 2054.47,1212.66 2055.06,1212.66 2055.64,1212.66 2056.23,1212.66 2056.81,1212.66 2057.4,1212.66 2057.99,1212.66 2058.57,1212.66 2059.16,1212.66 2059.75,1212.66 2060.33,1212.66 2060.92,1212.66 2061.51,1212.66 2062.09,1212.66 2062.68,1212.66 2063.27,1212.66 2063.85,1212.66 2064.44,1212.66 2065.02,1212.66 2065.61,1212.66 2066.2,1212.66 2066.78,1212.66 2067.37,1212.66 2067.96,1212.66 2068.54,1212.66 2069.13,1212.66 2069.72,1212.66 2070.3,1212.66 2070.89,1212.66 2071.48,1212.66 2072.06,1212.66 2072.65,1212.66 2073.23,1212.66 2073.82,1212.66 2074.41,1212.66 2074.99,1212.66 2075.58,1212.66 2076.17,1212.66 2076.75,1212.66 2077.34,1212.66 2077.93,1212.66 2078.51,1212.66 2079.1,1212.66 2079.68,1212.66 2080.27,1212.66 2080.86,1212.66 2081.44,1212.66 2082.03,1212.66 2082.62,1212.66 2083.2,1212.66 2083.79,1212.66 2084.38,1212.66 2084.96,1212.66 2085.55,1212.66 2086.14,1212.66 2086.72,1212.66 2087.31,1212.66 2087.89,1212.66 2088.48,1212.66 2089.07,1212.66 2089.65,1212.66 2090.24,1212.66 2090.83,1212.66 2091.41,1212.66 2092,1212.66 2092.59,1212.66 2093.17,1212.66 2093.76,1212.66 2094.35,1212.66 2094.93,1212.66 2095.52,1212.66 2096.1,1212.66 2096.69,1212.66 2097.28,1212.66 2097.86,1212.66 2098.45,1212.66 2099.04,1212.66 2099.62,1212.66 2100.21,1212.66 2100.8,1212.66 2101.38,1212.66 2101.97,1212.66 2102.55,1212.66 2103.14,1212.66 2103.73,1212.66 2104.31,1212.66 2104.9,1212.66 2105.49,1212.66 2106.07,1212.66 2106.66,1212.66 2107.25,1212.66 2107.83,1212.66 2108.42,1212.66 2109.01,1212.66 2109.59,1212.66 2110.18,1212.66 2110.76,1212.66 2111.35,1212.66 2111.94,1212.66 2112.52,1212.66 2113.11,1212.66 2113.7,1212.66 2114.28,1212.66 2114.87,1212.66 2115.46,1212.66 2116.04,1212.66 2116.63,1212.66 2117.22,1212.66 2117.8,1212.66 2118.39,1212.66 2118.97,1212.66 2119.56,1212.66 2120.15,1212.66 2120.73,1212.66 2121.32,1212.66 2121.91,1212.66 2122.49,1212.66 2123.08,1212.66 2123.67,1212.66 2124.25,1212.66 2124.84,1212.66 2125.42,1212.66 2126.01,1212.66 2126.6,1212.66 2127.18,1212.66 2127.77,1212.66 2128.36,1212.66 2128.94,1212.66 2129.53,1212.66 2130.12,1212.66 2130.7,1212.66 2131.29,1212.66 2131.88,1212.66 2132.46,1212.66 2133.05,1212.66 2133.63,1212.66 2134.22,1212.66 2134.81,1212.66 2135.39,1212.66 2135.98,1212.66 2136.57,1212.66 2137.15,1212.66 2137.74,1212.66 2138.33,1212.66 2138.91,1212.66 2139.5,1212.66 2140.09,1212.66 2140.67,1212.66 2141.26,1212.66 2141.84,1212.66 2142.43,1212.66 2143.02,1212.66 2143.6,1212.66 2144.19,1212.66 2144.78,1212.66 2145.36,1212.66 2145.95,1212.66 2146.54,1212.66 2147.12,1212.66 2147.71,1212.66 2148.3,1212.66 2148.88,1212.66 2149.47,1212.66 2150.05,1212.66 2150.64,1212.66 2151.23,1212.66 2151.81,1212.66 2152.4,1212.66 2152.99,1212.66 2153.57,1212.66 2154.16,1212.66 2154.75,1212.66 2155.33,1212.66 2155.92,1212.66 2156.5,1212.66 2157.09,1212.66 2157.68,1212.66 2158.26,1212.66 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.78,1194.13 1399.28,899.083 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.7 985.439,1194.13 2158.26,1194.13 2158.26,1230.7 985.439,1230.7 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip333\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip333)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-5856.65 164.351,-6785.11 164.91,-7630.93 165.469,-8399.48 166.029,-9097.61 166.588,-9728.04 167.147,-10295.2 167.706,-9821.75 168.266,-10318.5 168.825,-9124.97 169.384,-9589.55 169.943,-9301.72 170.503,-9688.21 171.062,-10023.7 171.621,-10333.4 172.18,-10603 172.74,-10827.2 173.299,-11025 173.858,-11180.6 174.417,-10440.1 174.977,-10592.7 175.536,-10342.9 176.095,-10436.3 176.655,-10510.1 177.214,-10255.5 177.773,-10008.3 178.332,-9773.56 178.892,-9560.61 179.451,-9586.74 180.01,-9593.7 180.569,-9365.27 181.129,-9355.65 181.688,-9340.87 182.247,-8957.08 182.806,-8931.12 183.366,-8735.28 183.925,-8686.29 184.484,-8648.3 185.043,-8597.08 185.603,-8400.98 186.162,-8085.79 186.721,-7919.54 187.28,-7739.34 187.84,-7455.69 188.399,-7273.46 188.958,-7009.05 189.517,-6737.55 190.077,-6556.18 190.636,-6211.18 191.195,-6127.43 191.754,-6029.61 192.314,-5780.31 192.873,-5621.05 193.432,-5536.2 193.991,-5447.7 194.551,-5234.51 195.11,-5088.15 195.669,-4886.03 196.228,-4800.16 196.788,-4715.75 197.347,-4528.38 197.906,-4346.44 198.465,-4270.76 199.025,-4095.1 199.584,-3877.92 200.143,-3808.86 200.702,-3607.21 201.262,-3542.95 201.821,-3347.02 202.38,-3203.23 202.939,-3020.26 203.499,-2850.15 204.058,-2720.4 204.617,-2560.83 205.176,-2434.47 205.736,-2351.01 206.295,-2301.63 206.854,-2247.64 207.413,-2159.93 207.973,-1947.58 208.532,-1842.02 209.091,-1739.49 209.65,-1607.58 210.21,-1537.91 210.769,-1468.75 211.328,-1430.23 211.887,-1362.44 212.447,-1268.96 213.006,-1257.44 213.565,-1187.06 214.124,-1097.38 214.684,-1033.29 215.243,-917.8 215.802,-857.952 216.361,-772.177 216.921,-745.198 217.48,-688.447 218.039,-680.494 218.598,-596.682 219.158,-475.292 219.717,-448.839 220.276,-376.952 220.835,-328.263 221.395,-324.614 221.954,-278.981 222.513,-207.718 223.072,-182.853 223.632,-139.17 224.191,-92.3224 224.75,-28.3452 225.309,-33.5431 225.869,8.07056 226.428,25.4393 226.987,145.415 227.546,138.528 228.106,173.446 228.665,186.304 229.224,241.156 229.783,231.56 230.343,242.209 230.902,315.294 231.461,307.359 232.02,339.455 232.58,391.356 233.139,403.61 233.698,490.876 234.257,518.009 234.817,559.946 235.376,544.499 235.935,567.152 236.494,571.752 237.054,635.826 237.613,674.913 238.172,672.453 238.731,691.569 239.291,712.179 239.85,734.512 240.409,717.248 240.968,757.366 241.528,794.206 242.087,862.116 242.646,877.038 243.205,885.393 243.765,878.594 244.324,911.943 244.883,889.099 245.442,900.462 246.002,911.333 246.561,904.408 247.12,952.682 247.679,943.652 248.239,937.65 248.798,933.395 249.357,962.635 249.916,952.407 250.476,964.415 251.035,977.909 251.594,951.1 252.153,943.812 252.713,938.663 253.272,954.446 253.831,1037.26 254.39,1029.49 254.95,1053.21 255.509,1063.39 256.068,1070.26 256.627,1075.3 257.187,1099.81 257.746,1087.48 258.305,1078.81 258.864,1086.98 259.424,1056.59 259.983,1028.01 260.542,1038.95 261.101,1032.86 261.661,1061.88 262.22,1037.21 262.779,1095.92 263.338,1117.58 263.898,1136.07 264.457,1123.52 265.016,1128.17 265.575,1115.49 266.135,1089.48 266.694,1111.78 267.253,1086.35 267.812,1061.11 268.372,1068.08 268.931,1060.89 269.49,1055.78 270.049,1083.97 270.609,1093.84 271.168,1115.7 271.727,1072.53 272.286,1081.37 272.846,1039.85 273.405,1017.39 273.964,1029.87 274.523,1007.79 275.083,987.199 275.642,1034.46 276.201,1026.82 276.76,1057.76 277.32,1053.1 277.879,1044.63 278.438,1038.81 278.997,1050.33 279.557,1042.05 280.116,1034.21 280.675,1045.28 281.234,1021.02 281.794,1002.83 282.353,980.369 282.912,958.772 283.471,973.689 284.031,985.722 284.59,993.881 285.149,989.162 285.708,987.1 286.268,1014.16 286.827,1043.76 287.386,1036.02 287.945,1029.04 288.505,1036.9 289.064,1030.74 289.623,1008.02 290.182,983.038 290.742,994.678 291.301,1023.79 291.86,1036.87 292.419,1043.7 292.979,1001.05 293.538,1044.79 294.097,1037.6 294.656,1013.92 295.216,1025.9 295.775,1034.97 296.334,992.792 296.893,991.261 297.453,968.533 298.012,963.284 298.571,975.447 299.13,969.384 299.69,934.645 300.249,979.682 300.808,994.028 301.368,993.259 301.927,988.137 302.486,999.323 303.045,992.543 303.605,986.85 304.164,1014.72 304.723,1009.91 305.282,1070.97 305.842,1076.46 306.401,1049.18 306.96,1040.52 307.519,1015.11 308.079,993.269 308.638,1003.44 309.197,999.225 309.756,1007.9 310.316,1003.66 310.875,1028.34 311.434,1004.79 311.993,1001.86 312.553,1009.44 313.112,1036.45 313.671,1045.37 314.23,1037.23 314.79,1026.56 315.349,1001.91 315.908,1025.97 316.467,1033.8 317.027,1026.03 317.586,984.766 318.145,977.759 318.704,974.386 319.264,969.207 319.823,959.134 320.382,986.636 320.941,1024.71 321.501,1000.29 322.06,895.962 322.619,927.975 323.178,957.72 323.738,953.238 324.297,932.452 324.856,928.424 325.415,942.986 325.975,921.057 326.534,917.266 327.093,914.881 327.652,927.683 328.212,944.056 328.771,991.923 329.33,988.366 329.889,985.259 330.449,992.662 331.008,997.954 331.567,1001.78 332.126,994.69 332.686,1008 333.245,968.325 333.804,965.367 334.363,994.553 334.923,1003.22 335.482,1008.14 336.041,1001.54 336.6,980.935 337.16,988.236 337.719,964.414 338.278,976.855 338.837,936.832 339.397,929.633 339.956,941.066 340.515,931.749 341.074,924.61 341.634,904.427 342.193,916.929 342.752,883.863 343.311,846.365 343.871,845.237 344.43,847.954 344.989,861.412 345.548,843.099 346.108,807.002 346.667,840.888 347.226,842.509 347.785,823.86 348.345,856.406 348.904,855.464 349.463,856.314 350.022,871.742 350.582,867.61 351.141,883.153 351.7,899.039 352.259,908.993 352.819,901.248 353.378,879.918 353.937,878.117 354.496,876.346 355.056,904.598 355.615,881.533 356.174,860.793 356.733,859.045 357.293,856.848 357.852,804.56 358.411,774.923 358.97,824.805 359.53,839.541 360.089,807.955 360.648,808.111 361.207,807.587 361.767,805.064 362.326,807.946 362.885,794.56 363.444,763.85 364.004,815.491 364.563,797.64 365.122,781.841 365.681,780.685 366.241,783.215 366.8,769.967 367.359,776.656 367.918,774.755 368.478,792.013 369.037,794.478 369.596,760.043 370.155,796.538 370.715,785.124 371.274,818.547 371.833,834.702 372.392,835.372 372.952,833.609 373.511,798.528 374.07,813.803 374.629,832.008 375.189,848.4 375.748,829.95 376.307,811.212 376.866,812.77 377.426,795.194 377.985,780.97 378.544,781.136 379.103,801.402 379.663,819.241 380.222,834.935 380.781,832.625 381.34,832.106 381.9,845.992 382.459,872.902 383.018,883.016 383.577,878.709 384.137,857.587 384.696,872.096 385.255,853.266 385.814,883.603 386.374,924.756 386.933,917.265 387.492,940.539 388.051,918.841 388.611,925.603 389.17,886.181 389.729,912.675 390.288,920.037 390.848,928.87 391.407,923.455 391.966,945.107 392.525,923.324 393.085,866.938 393.644,896.323 394.203,920.428 394.762,913.433 395.322,936.727 395.881,895.257 396.44,887.247 396.999,897.027 397.559,894.018 398.118,858.189 398.677,789.846 399.236,788.585 399.796,800.938 400.355,812.83 400.914,825.695 401.473,823.315 402.033,835.411 402.592,832.131 403.151,841.958 403.71,823.908 404.27,819.769 404.829,799.968 405.388,833.254 405.947,828.054 406.507,809.41 407.066,789.052 407.625,773.701 408.184,774.464 408.744,792.803 409.303,744.522 409.862,747.846 410.421,734.034 410.981,718.074 411.54,773.133 412.099,758.87 412.658,757.75 413.218,725.605 413.777,742.388 414.336,744.736 414.895,713.842 415.455,747.12 416.014,749.975 416.573,739.76 417.132,739.634 417.692,723.522 418.251,726.852 418.81,715.119 419.369,719.419 419.929,751.877 420.488,736.045 421.047,754.48 421.606,756.964 422.166,757.296 422.725,739.763 423.284,745.801 423.843,748.042 424.403,713.812 424.962,745.533 425.521,778.094 426.08,760.32 426.64,761.85 427.199,767.022 427.758,781.276 428.318,782.938 428.877,750.529 429.436,702.664 429.995,687.904 430.555,658.526 431.114,696.043 431.673,698.37 432.232,698.407 432.792,718.801 433.351,737.095 433.91,723.634 434.469,742.904 435.029,729.324 435.588,730.267 436.147,717.765 436.706,750.882 437.266,784.77 437.825,784.043 438.384,817.431 438.943,814.663 439.503,811.236 440.062,776.496 440.621,740.38 441.18,743.374 441.74,759.352 442.299,759.398 442.858,763.045 443.417,732.038 443.977,784.081 444.536,797.555 445.095,793.916 445.654,741.721 446.214,742.483 446.773,741.364 447.332,742.311 447.891,744.751 448.451,760.436 449.01,760.627 449.569,743.927 450.128,727.84 450.688,698.042 451.247,703.201 451.806,737.186 452.365,752.762 452.925,755.253 453.484,735.789 454.043,783.295 454.602,816.213 455.162,812.558 455.721,842.887 456.28,833.558 456.839,845.157 457.399,809.06 457.958,824.804 458.517,851.247 459.076,827.992 459.636,810.044 460.195,790.42 460.754,786.369 461.313,768.161 461.873,797.927 462.432,796.862 462.991,796.094 463.55,808.725 464.11,774.178 464.669,755.6 465.228,739.23 465.787,820.792 466.347,817.381 466.906,845.258 467.465,819.965 468.024,847.079 468.584,842.949 469.143,851.781 469.702,891.975 470.261,881.363 470.821,856.802 471.38,817.117 471.939,794.179 472.498,838.683 473.058,819.027 473.617,829.343 474.176,823.624 474.735,834.792 475.295,796.751 475.854,793.719 476.413,777.42 476.972,755.847 477.532,790.797 478.091,773.968 478.65,773.734 479.209,803.591 479.769,787.155 480.328,750.137 480.887,719.908 481.446,720.836 482.006,720.656 482.565,770.767 483.124,768.572 483.683,746.454 484.243,763.115 484.802,743.259 485.361,743.085 485.92,788.925 486.48,771.443 487.039,770.185 487.598,722.651 488.157,700.865 488.717,700.93 489.276,705.064 489.835,727.518 490.394,742.517 490.954,744.305 491.513,762.584 492.072,728.948 492.631,714.112 493.191,680.01 493.75,702.448 494.309,685.376 494.868,705.34 495.428,707.07 495.987,692.637 496.546,696.041 497.105,684.192 497.665,730.408 498.224,731.385 498.783,747.445 499.342,762.678 499.902,746.388 500.461,763.301 501.02,798.712 501.579,763.265 502.139,780.123 502.698,796.347 503.257,827.075 503.816,837.617 504.376,828.452 504.935,857.114 505.494,885.414 506.053,858.313 506.613,852.36 507.172,862.542 507.731,837.469 508.29,803.202 508.85,798.954 509.409,793.111 509.968,757.882 510.527,721.938 511.087,690.609 511.646,707.379 512.205,659.846 512.764,643.977 513.324,597.986 513.883,602.113 514.442,639.982 515.001,662.477 515.561,680.327 516.12,663.664 516.679,670.371 517.238,673.945 517.798,676.352 518.357,677.868 518.916,669.087 519.475,704.883 520.035,693.083 520.594,745.314 521.153,759.645 521.712,723.758 522.272,726.698 522.831,708.984 523.39,741.939 523.949,775.195 524.509,807.221 525.068,801.963 525.627,775.769 526.186,789.443 526.746,770.352 527.305,752.077 527.864,752.199 528.423,801.176 528.983,782.965 529.542,779.664 530.101,758.387 530.66,769.382 531.22,746.106 531.779,761.399 532.338,743.245 532.897,757.81 533.457,737.695 534.016,749.954 534.575,759.934 535.134,726.924 535.694,741.158 536.253,753.884 536.812,783.911 537.371,779.397 537.931,773.354 538.49,750.473 539.049,749.233 539.608,761.482 540.168,741.562 540.727,703.872 541.286,671.255 541.845,690.161 542.405,723.474 542.964,704.214 543.523,706.688 544.082,688.504 544.642,692.039 545.201,689.471 545.76,676.276 546.319,650.628 546.879,621.14 547.438,641.779 547.997,647.521 548.556,636.996 549.116,641.881 549.675,643.532 550.234,633.354 550.793,657.524 551.353,691.49 551.912,694.732 552.471,744.19 553.031,756.723 553.59,770.284 554.149,801.948 554.708,766.472 555.268,815.611 555.827,826.182 556.386,806.353 556.945,803.748 557.505,813.798 558.064,808.656 558.623,788.558 559.182,771.217 559.742,754.652 560.301,770.689 560.86,781.764 561.419,780.653 561.979,762.006 562.538,741.008 563.097,769.828 563.656,764.455 564.216,746.318 564.775,730.575 565.334,714.038 565.893,719.053 566.453,718.519 567.012,718.275 567.571,702.873 568.13,672.045 568.69,654.397 569.249,660.394 569.808,697.339 570.367,694.44 570.927,745.715 571.486,760.965 572.045,740.204 572.604,757.347 573.164,755.628 573.723,753.329 574.282,753.532 574.841,756.369 575.401,753.854 575.96,780.867 576.519,777.88 577.078,772.071 577.638,785.202 578.197,767.433 578.756,765.598 579.315,779.504 579.875,758.157 580.434,785.022 580.993,783.459 581.552,791.672 582.112,786.618 582.671,763.34 583.23,743.052 583.789,757.264 584.349,755.087 584.908,816.523 585.467,793.27 586.026,838.757 586.586,847.022 587.145,842.261 587.704,818.69 588.263,795.464 588.823,772.197 589.382,750.526 589.941,763.16 590.5,775.733 591.06,804.531 591.619,782.302 592.178,794.762 592.737,775.622 593.297,772.471 593.856,782.293 594.415,781.719 594.974,777.061 595.534,788.693 596.093,783.338 596.652,795.402 597.211,821.119 597.771,781.831 598.33,794.026 598.889,788.306 599.448,781.607 600.008,729.173 600.567,711.235 601.126,709.727 601.685,740.147 602.245,723.373 602.804,725.135 603.363,723.651 603.922,736.548 604.482,755.72 605.041,734.201 605.6,733.802 606.159,745.26 606.719,742.179 607.278,753.266 607.837,732.42 608.396,715.67 608.956,721.168 609.515,720.381 610.074,748.103 610.633,728.842 611.193,724.608 611.752,720.65 612.311,732.984 612.87,683.916 613.43,654.004 613.989,654.043 614.548,623.073 615.107,659.094 615.667,684.403 616.226,669.479 616.785,672.771 617.344,659.736 617.904,695.607 618.463,708.979 619.022,679.712 619.581,680.875 620.141,646.046 620.7,661.109 621.259,647.754 621.818,632.838 622.378,633.533 622.937,606.895 623.496,643.872 624.055,631.613 624.615,632.999 625.174,652.86 625.733,643.589 626.292,666.061 626.852,639.212 627.411,646.487 627.97,686.209 628.529,721.271 629.089,734.606 629.648,716.557 630.207,720.222 630.766,706.024 631.326,673.765 631.885,708.542 632.444,725.293 633.003,725.897 633.563,695.269 634.122,694.105 634.681,692.749 635.24,696.519 635.8,694.331 636.359,712.31 636.918,713.041 637.477,696.969 638.037,663.805 638.596,680.432 639.155,635.483 639.714,654.081 640.274,626.171 640.833,645.07 641.392,647.992 641.951,647.923 642.511,649.899 643.07,750.025 643.629,763.145 644.188,772.867 644.748,735.415 645.307,717.848 645.866,732.452 646.425,731.599 646.985,745.055 647.544,743.096 648.103,726.847 648.662,676.466 649.222,666.965 649.781,682.538 650.34,669.067 650.899,689.222 651.459,673.19 652.018,673.284 652.577,677.064 653.136,693.463 653.696,678.186 654.255,680.015 654.814,697.65 655.373,682.278 655.933,700.787 656.492,687.019 657.051,667.08 657.61,666.815 658.17,667.284 658.729,635.42 659.288,623.05 659.847,628.932 660.407,611.981 660.966,652.033 661.525,671.454 662.084,621.104 662.644,625.469 663.203,611.493 663.762,613.961 664.321,615.125 664.881,635.848 665.44,674.385 665.999,645.193 666.558,650.886 667.118,655.603 667.677,641.738 668.236,659.756 668.795,681.211 669.355,696.48 669.914,693.55 670.473,692.898 671.032,693.009 671.592,695.256 672.151,711.33 672.71,724.917 673.269,725.095 673.829,740.614 674.388,706.52 674.947,690.357 675.506,688.577 676.066,689.661 676.625,689.527 677.184,740.275 677.743,702.243 678.303,733.68 678.862,719.083 679.421,734.686 679.981,764.977 680.54,778.836 681.099,776.182 681.658,741.854 682.218,755.896 682.777,735.925 683.336,701.658 683.895,686.298 684.455,669.825 685.014,703.571 685.573,732.853 686.132,701.206 686.692,701.969 687.251,703.487 687.81,719.864 688.369,751.268 688.929,715.426 689.488,695.834 690.047,680.579 690.606,670.213 691.166,686.956 691.725,652.82 692.284,640.495 692.843,642.373 693.403,643.811 693.962,613.044 694.521,567.058 695.08,559.446 695.64,553.429 696.199,560.513 696.758,571.327 697.317,594.145 697.877,632.195 698.436,617.793 698.995,589.052 699.554,593.947 700.114,597.026 700.673,622.704 701.232,626.478 701.791,615.699 702.351,622.217 702.91,631.407 703.469,637.473 704.028,627.95 704.588,643.645 705.147,652.509 705.706,625.921 706.265,615.795 706.825,620.662 707.384,588.587 707.943,609.071 708.502,618.233 709.062,636.237 709.621,671.755 710.18,688.187 710.739,671.522 711.299,673.81 711.858,692.492 712.417,707.449 712.976,739.6 713.536,734.515 714.095,796.189 714.654,759.982 715.213,773.149 715.773,815.001 716.332,807.706 716.891,806.12 717.45,798.805 718.01,792.012 718.569,802.681 719.128,843.288 719.687,837.318 720.247,815.878 720.806,793.947 721.365,770.369 721.924,765.248 722.484,763.376 723.043,756.12 723.602,769.887 724.161,769.293 724.721,780.601 725.28,759.635 725.839,721.429 726.398,705.38 726.958,736.677 727.517,734.39 728.076,730.929 728.635,761.441 729.195,741.649 729.754,789.548 730.313,784.336 730.872,793.503 731.432,792.241 731.991,788.923 732.55,801.345 733.109,794.444 733.669,787.604 734.228,783.066 734.787,760.872 735.346,759.812 735.906,740.824 736.465,754.921 737.024,751.992 737.583,729.666 738.143,712.997 738.702,666.048 739.261,699.78 739.82,716.656 740.38,714.989 740.939,680.691 741.498,695.384 742.057,697.122 742.617,679.784 743.176,664.872 743.735,647.7 744.294,601.822 744.854,639.628 745.413,676.04 745.972,644.711 746.531,643.991 747.091,659.31 747.65,660.689 748.209,658.008 748.768,660.752 749.328,695.712 749.887,695.111 750.446,695.758 751.005,710.78 751.565,726.536 752.124,709.273 752.683,742.016 753.242,737.176 753.802,735.868 754.361,717.789 754.92,715.336 755.479,649.391 756.039,648.847 756.598,649.446 757.157,637.335 757.716,672.106 758.276,670.508 758.835,651.897 759.394,685.925 759.953,666.864 760.513,649.708 761.072,653.481 761.631,673.498 762.19,672.767 762.75,689.467 763.309,707.917 763.868,677.286 764.427,679.645 764.987,695.16 765.546,712.561 766.105,712.521 766.664,745.627 767.224,755.94 767.783,766.672 768.342,762.713 768.901,778.11 769.461,723.69 770.02,720.975 770.579,717.751 771.138,745.823 771.698,745.347 772.257,728.079 772.816,756.351 773.375,733.918 773.935,748.576 774.494,694.422 775.053,676.248 775.612,692.326 776.172,722.641 776.731,686.892 777.29,668.851 777.849,673.051 778.409,641.137 778.968,626.51 779.527,646.471 780.086,645.949 780.646,629.199 781.205,645.818 781.764,682.981 782.323,667.614 782.883,634.305 783.442,650.411 784.001,653.776 784.56,656.227 785.12,659.249 785.679,689.869 786.238,658.734 786.797,614.711 787.357,589.526 787.916,611.602 788.475,616.104 789.034,618.901 789.594,653.949 790.153,655.742 790.712,625.283 791.271,595.055 791.831,568.152 792.39,590.202 792.949,626.954 793.508,647.629 794.068,682.626 794.627,682.643 795.186,698.828 795.745,716.911 796.305,714.159 796.864,699.124 797.423,713.691 797.982,744.496 798.542,728.71 799.101,723.908 799.66,730.601 800.219,714.878 800.779,712.491 801.338,729.867 801.897,728.154 802.456,745.348 803.016,744.068 803.575,725.968 804.134,723.229 804.693,753.973 805.253,783.442 805.812,795.161 806.371,721.547 806.931,701.567 807.49,729.288 808.049,694.616 808.608,708.692 809.168,725.512 809.727,726.061 810.286,740.833 810.845,755.214 811.405,736.952 811.964,719.146 812.523,701.432 813.082,701.714 813.642,701.761 814.201,699.15 814.76,680.036 815.319,681.269 815.879,665.313 816.438,664.573 816.997,651.31 817.556,656.799 818.116,625.916 818.675,609.106 819.234,596.858 819.793,603.994 820.353,628.012 820.912,566.631 821.471,573.352 822.03,566.616 822.59,606.854 823.149,631.414 823.708,636.454 824.267,656.425 824.827,641.615 825.386,627.397 825.945,596.601 826.504,631.301 827.064,618.037 827.623,601.607 828.182,591.6 828.741,592.667 829.301,613.59 829.86,633.085 830.419,652.849 830.978,688.341 831.538,619.856 832.097,623.476 832.656,642.324 833.215,647.045 833.775,652.712 834.334,652.036 834.893,639.738 835.452,640.846 836.012,644.801 836.571,661.211 837.13,676.945 837.689,659.926 838.249,643.924 838.808,678.234 839.367,692.93 839.926,692.436 840.486,672.99 841.045,723.595 841.604,734.658 842.163,718.548 842.723,716.822 843.282,713.691 843.841,667.973 844.4,667.663 844.96,674.236 845.519,678.097 846.078,663.367 846.637,682.9 847.197,669.638 847.756,703.851 848.315,706.036 848.874,701.396 849.434,715.49 849.993,698.146 850.552,681.819 851.111,664.319 851.671,681.491 852.23,680.48 852.789,681.411 853.348,680.926 853.908,644.624 854.467,648.027 855.026,681.02 855.585,681.959 856.145,678.997 856.704,681.311 857.263,667.397 857.822,685.921 858.382,684.281 858.941,652.411 859.5,671.23 860.059,687.732 860.619,654.276 861.178,640.79 861.737,629.255 862.296,631.626 862.856,651.442 863.415,638.281 863.974,658.797 864.533,640.053 865.093,628.104 865.652,599.143 866.211,601.962 866.77,604.798 867.33,640.777 867.889,672.974 868.448,690.871 869.007,673.177 869.567,691.121 870.126,708.959 870.685,722.659 871.244,721.264 871.804,721.498 872.363,706.557 872.922,707.074 873.481,691.787 874.041,727.839 874.6,741.965 875.159,738.926 875.718,720.295 876.278,705.267 876.837,689.915 877.396,709.595 877.955,705.337 878.515,687.156 879.074,703.582 879.633,703.576 880.192,698.436 880.752,681.569 881.311,698.156 881.87,731.566 882.429,713.905 882.989,695.006 883.548,694.564 884.107,696.545 884.666,758.608 885.226,754.897 885.785,766.86 886.344,776.833 886.903,752.003 887.463,810.302 888.022,804.239 888.581,828.71 889.14,789.446 889.7,754.53 890.259,800.068 890.818,793.186 891.377,801.322 891.937,761.326 892.496,775.198 893.055,754.47 893.614,749.498 894.174,713.265 894.733,758.434 895.292,741.996 895.851,739.065 896.411,750.017 896.97,732.706 897.529,744.269 898.088,741.4 898.648,719.25 899.207,720.829 899.766,734.435 900.325,717.966 900.885,697.334 901.444,728.842 902.003,725.472 902.562,756.134 903.122,752.43 903.681,734.735 904.24,715.94 904.799,728.122 905.359,706.811 905.918,720.967 906.477,769.469 907.036,719.66 907.596,719.501 908.155,682.887 908.714,679.305 909.273,677.107 909.833,675.731 910.392,674.496 910.951,643.534 911.51,642.475 912.07,661.456 912.629,644.907 913.188,683.422 913.747,664.748 914.307,598.758 914.866,570.66 915.425,608.27 915.984,610.669 916.544,581.612 917.103,571.037 917.662,575.657 918.221,609.072 918.781,564.169 919.34,605.818 919.899,629.878 920.458,632.242 921.018,649.748 921.577,667.891 922.136,668.752 922.695,669.033 923.255,651.109 923.814,696.282 924.373,696.921 924.932,694.367 925.492,662.664 926.051,633.441 926.61,649.911 927.169,621.711 927.729,625.582 928.288,625.323 928.847,617.296 929.406,639.259 929.966,627.539 930.525,629.359 931.084,617.104 931.644,700.82 932.203,682.466 932.762,650.682 933.321,669.721 933.881,652.739 934.44,688.154 934.999,702.479 935.558,688.904 936.118,721.865 936.677,721.998 937.236,658.955 937.795,691.399 938.355,709.281 938.914,739.878 939.473,723.286 940.032,718.821 940.592,729.454 941.151,744.618 941.71,759.243 942.269,718.988 942.829,720.73 943.388,734.172 943.947,733.325 944.506,683.618 945.066,700.663 945.625,714.132 946.184,683.065 946.743,701.521 947.303,701.344 947.862,697.482 948.421,681.25 948.98,695.028 949.54,678.783 950.099,663.164 950.658,679.848 951.217,695.007 951.777,661.893 952.336,664.293 952.895,647.026 953.454,667.324 954.014,702.994 954.573,688.386 955.132,674.297 955.691,660.486 956.251,660.177 956.81,676.745 957.369,726.317 957.928,723.726 958.488,753.236 959.047,732.35 959.606,713.662 960.165,712.254 960.725,724.55 961.284,721.711 961.843,702.734 962.402,667.607 962.962,668.854 963.521,654.404 964.08,654.963 964.639,671.495 965.199,685.735 965.758,686.923 966.317,736.142 966.876,732.208 967.436,761.712 967.995,756.116 968.554,719.718 969.113,716.331 969.673,712.531 970.232,679.163 970.791,678.214 971.35,662.069 971.91,614.982 972.469,604.179 973.028,624.316 973.587,612.161 974.147,629.806 974.706,646.357 975.265,662.074 975.824,658.313 976.384,710.934 976.943,693.682 977.502,660.561 978.061,676.781 978.621,661.75 979.18,662.667 979.739,679.452 980.298,684.099 980.858,699.521 981.417,701.439 981.976,701.156 982.535,703.149 983.095,720.069 983.654,749.811 984.213,713.46 984.772,664.784 985.332,649.11 985.891,668.406 986.45,667.686 987.009,649.859 987.569,636.395 988.128,625.707 988.687,642.858 989.246,615.679 989.806,635.709 990.365,624.974 990.924,629.71 991.483,650.619 992.043,667.389 992.602,702.846 993.161,703.45 993.72,704.253 994.28,720.057 994.839,735.178 995.398,714.243 995.957,712.113 996.517,712.759 997.076,712.633 997.635,713.109 998.194,711.191 998.754,693.735 999.313,693.059 999.872,711.076 1000.43,729.243 1000.99,726.387 1001.55,707.486 1002.11,707.094 1002.67,708.936 1003.23,705.336 1003.79,723.14 1004.35,768.883 1004.91,747.53 1005.46,775.303 1006.02,772.462 1006.58,800.235 1007.14,781.012 1007.7,759.77 1008.26,739.516 1008.82,752.01 1009.38,701.446 1009.94,700.717 1010.5,683.536 1011.06,696.879 1011.62,710.449 1012.18,737.678 1012.73,753.099 1013.29,715.449 1013.85,699.7 1014.41,667.848 1014.97,666.195 1015.53,680.718 1016.09,713.517 1016.65,712.716 1017.21,693.807 1017.77,741.895 1018.33,709.431 1018.89,708.671 1019.45,711.987 1020.01,692.193 1020.56,676.219 1021.12,694.017 1021.68,692.757 1022.24,677.974 1022.8,710.339 1023.36,725.886 1023.92,692.881 1024.48,679.187 1025.04,708.704 1025.6,704.369 1026.16,716.03 1026.72,712.585 1027.28,727.334 1027.83,674.781 1028.39,688.52 1028.95,671.825 1029.51,655.071 1030.07,643.578 1030.63,678.932 1031.19,633.816 1031.75,634.926 1032.31,636.717 1032.87,655.091 1033.43,640.198 1033.99,657.582 1034.55,659.511 1035.1,644.534 1035.66,647.205 1036.22,644.53 1036.78,661.509 1037.34,680.377 1037.9,678.654 1038.46,710.337 1039.02,720.607 1039.58,747.561 1040.14,775.079 1040.7,752.192 1041.26,746.459 1041.82,729.774 1042.38,742.955 1042.93,741.209 1043.49,722.264 1044.05,734.655 1044.61,699.197 1045.17,701.082 1045.73,714.085 1046.29,679.269 1046.85,700.354 1047.41,665.039 1047.97,714.653 1048.53,744.925 1049.09,726.169 1049.65,692.472 1050.2,693.08 1050.76,696.393 1051.32,646.141 1051.88,660.388 1052.44,614.15 1053,619.137 1053.56,640.608 1054.12,662 1054.68,628.303 1055.24,613 1055.8,617.892 1056.36,591.982 1056.92,594.974 1057.48,646.697 1058.03,679.326 1058.59,727.876 1059.15,713.957 1059.71,728.837 1060.27,725.569 1060.83,705.147 1061.39,738.714 1061.95,719.476 1062.51,702.984 1063.07,701.563 1063.63,715.066 1064.19,680.832 1064.75,697.233 1065.3,695.855 1065.86,714.18 1066.42,728.097 1066.98,741.764 1067.54,755.708 1068.1,752.645 1068.66,760.017 1069.22,725.228 1069.78,706.322 1070.34,689.678 1070.9,685.37 1071.46,653.266 1072.02,672.092 1072.57,672.907 1073.13,643.067 1073.69,665.592 1074.25,669.454 1074.81,665.453 1075.37,635.923 1075.93,641.49 1076.49,642.686 1077.05,676.765 1077.61,640.27 1078.17,592.596 1078.73,584.249 1079.29,622.912 1079.85,627.48 1080.4,644.461 1080.96,663.227 1081.52,677.111 1082.08,678.014 1082.64,693.971 1083.2,707.62 1083.76,707.177 1084.32,705.77 1084.88,687.355 1085.44,686.549 1086,702.313 1086.56,699.577 1087.12,699.688 1087.67,701.965 1088.23,714.153 1088.79,698.53 1089.35,731.495 1089.91,778.935 1090.47,775.105 1091.03,771.929 1091.59,768.128 1092.15,762.271 1092.71,758.518 1093.27,756.041 1093.83,720.762 1094.39,718.468 1094.94,718.917 1095.5,720.656 1096.06,734.57 1096.62,743.715 1097.18,772.569 1097.74,767.749 1098.3,762.859 1098.86,731.103 1099.42,729.069 1099.98,711.036 1100.54,726.025 1101.1,723.111 1101.66,739.625 1102.22,736.639 1102.77,701.441 1103.33,734.544 1103.89,746.19 1104.45,722.889 1105.01,721.981 1105.57,734.853 1106.13,761.987 1106.69,742.539 1107.25,723.618 1107.81,688.352 1108.37,655.577 1108.93,673.442 1109.49,674.18 1110.04,689.509 1110.6,657.952 1111.16,641.982 1111.72,614.226 1112.28,600.292 1112.84,570.338 1113.4,596.425 1113.96,606.296 1114.52,608.29 1115.08,626.913 1115.64,635.174 1116.2,622.28 1116.76,642.737 1117.31,646.546 1117.87,615.348 1118.43,651.888 1118.99,673.449 1119.55,674.925 1120.11,676.395 1120.67,674.131 1121.23,674.677 1121.79,680.534 1122.35,664.723 1122.91,651.358 1123.47,670.438 1124.03,635.662 1124.59,635.642 1125.14,621.907 1125.7,622.201 1126.26,624.772 1126.82,644.279 1127.38,664.822 1127.94,666.423 1128.5,654.024 1129.06,689.738 1129.62,690.303 1130.18,710.13 1130.74,722.956 1131.3,721.201 1131.86,721.222 1132.41,740.633 1132.97,739.53 1133.53,750.505 1134.09,748.53 1134.65,744.131 1135.21,690.833 1135.77,722.891 1136.33,706.952 1136.89,720.02 1137.45,766.249 1138.01,794.015 1138.57,769.246 1139.13,747.745 1139.68,664.168 1140.24,666.777 1140.8,716.563 1141.36,712.711 1141.92,680.386 1142.48,632.942 1143.04,637.284 1143.6,634.769 1144.16,605.627 1144.72,592.911 1145.28,598.507 1145.84,634.842 1146.4,635.581 1146.96,641.882 1147.51,645.643 1148.07,650.5 1148.63,667.253 1149.19,686.748 1149.75,686.767 1150.31,687.011 1150.87,670.425 1151.43,669.198 1151.99,689.691 1152.55,709.38 1153.11,710.105 1153.67,707.044 1154.23,690.77 1154.78,667.473 1155.34,668.418 1155.9,671.047 1156.46,621.973 1157.02,640.399 1157.58,625.941 1158.14,596.798 1158.7,603.046 1159.26,590.917 1159.82,583.243 1160.38,590.097 1160.94,631.359 1161.5,652.072 1162.05,655.418 1162.61,639.369 1163.17,622.767 1163.73,644.822 1164.29,663.363 1164.85,633.695 1165.41,653.458 1165.97,671.989 1166.53,674.886 1167.09,709.953 1167.65,679.357 1168.21,665.329 1168.77,685.268 1169.33,688.544 1169.88,702.274 1170.44,698.625 1171,713.791 1171.56,711.171 1172.12,663.136 1172.68,646.939 1173.24,649.826 1173.8,668.014 1174.36,667.464 1174.92,653.382 1175.48,624.427 1176.04,628.368 1176.6,629.558 1177.15,628.962 1177.71,614.622 1178.27,588.187 1178.83,581.274 1179.39,636.834 1179.95,605.977 1180.51,628.748 1181.07,633.111 1181.63,633.795 1182.19,638.373 1182.75,639.994 1183.31,640.07 1183.87,641.047 1184.43,628.351 1184.98,600.211 1185.54,604.439 1186.1,606.846 1186.66,590.853 1187.22,629.667 1187.78,633.079 1188.34,602.257 1188.9,606.518 1189.46,627.475 1190.02,646.026 1190.58,666.494 1191.14,651.47 1191.7,699.227 1192.25,684.587 1192.81,683.372 1193.37,714.863 1193.93,695.368 1194.49,679.626 1195.05,695.11 1195.61,728.888 1196.17,709.805 1196.73,690.682 1197.29,693.033 1197.85,725.005 1198.41,739.334 1198.97,716.71 1199.52,715.801 1200.08,697.985 1200.64,696.268 1201.2,710.678 1201.76,691.597 1202.32,695.345 1202.88,693.841 1203.44,675.834 1204,677.426 1204.56,661.972 1205.12,662.996 1205.68,677.855 1206.24,681.136 1206.8,684.298 1207.35,683.808 1207.91,686.986 1208.47,705.162 1209.03,705.783 1209.59,691.41 1210.15,689.866 1210.71,707.435 1211.27,721.687 1211.83,737.183 1212.39,779.723 1212.95,772.893 1213.51,767.938 1214.07,765.979 1214.62,745.654 1215.18,758.933 1215.74,770.744 1216.3,748.492 1216.86,741.469 1217.42,755.171 1217.98,751.813 1218.54,686.485 1219.1,687.039 1219.66,658.092 1220.22,673.592 1220.78,671.669 1221.34,669.535 1221.89,636.892 1222.45,641.813 1223.01,628.71 1223.57,635.24 1224.13,657.987 1224.69,642.633 1225.25,644.342 1225.81,659.5 1226.37,643.617 1226.93,646.885 1227.49,646.85 1228.05,631.759 1228.61,664.766 1229.17,666.378 1229.72,653.018 1230.28,656.501 1230.84,687.567 1231.4,702.95 1231.96,701.613 1232.52,685.247 1233.08,635.887 1233.64,635.79 1234.2,658.897 1234.76,691.668 1235.32,708.173 1235.88,693.226 1236.44,694.761 1236.99,692.525 1237.55,709.235 1238.11,710.77 1238.67,696.282 1239.23,694.656 1239.79,659.792 1240.35,661.616 1240.91,710.138 1241.47,710.923 1242.03,723.13 1242.59,740.555 1243.15,723.206 1243.71,735.602 1244.26,733.278 1244.82,730.724 1245.38,743.716 1245.94,738.054 1246.5,737.643 1247.06,735.409 1247.62,728.67 1248.18,760.481 1248.74,744.502 1249.3,743.132 1249.86,757.653 1250.42,753.829 1250.98,796.889 1251.54,805.331 1252.09,800.597 1252.65,812.178 1253.21,788.124 1253.77,749.458 1254.33,716.416 1254.89,712.796 1255.45,697.277 1256.01,678.346 1256.57,682.083 1257.13,682.454 1257.69,680.352 1258.25,676.564 1258.81,660.872 1259.36,679.447 1259.92,679.574 1260.48,695.294 1261.04,696.52 1261.6,708.852 1262.16,706.507 1262.72,705.471 1263.28,701.507 1263.84,717.206 1264.4,733.577 1264.96,730.273 1265.52,725.064 1266.08,706.397 1266.63,722.044 1267.19,719.429 1267.75,718 1268.31,730.105 1268.87,711.898 1269.43,728.004 1269.99,680.327 1270.55,695.441 1271.11,693.134 1271.67,691.852 1272.23,691.253 1272.79,707.152 1273.35,739.069 1273.91,749.998 1274.46,762.726 1275.02,708.532 1275.58,702.331 1276.14,703.814 1276.7,700.848 1277.26,700.368 1277.82,701.95 1278.38,702.482 1278.94,716.077 1279.5,680.093 1280.06,701.095 1280.62,685.341 1281.18,701.801 1281.73,652.171 1282.29,655.301 1282.85,672.921 1283.41,658.101 1283.97,625.066 1284.53,592.159 1285.09,579.769 1285.65,617.594 1286.21,636.423 1286.77,657.981 1287.33,642.722 1287.89,628.194 1288.45,629.492 1289,632.461 1289.56,637.545 1290.12,656.189 1290.68,660 1291.24,676.159 1291.8,708.463 1292.36,707.502 1292.92,707.288 1293.48,692.17 1294.04,662.702 1294.6,680.928 1295.16,697.65 1295.72,728.771 1296.28,759.76 1296.83,755.091 1297.39,747.477 1297.95,727.647 1298.51,741.691 1299.07,756.053 1299.63,734.499 1300.19,748.892 1300.75,743.92 1301.31,740.499 1301.87,739.247 1302.43,719.661 1302.99,732.978 1303.55,700.404 1304.1,717.276 1304.66,712.287 1305.22,691.935 1305.78,691.464 1306.34,622.994 1306.9,594.53 1307.46,595.38 1308.02,601.794 1308.58,640.061 1309.14,629.728 1309.7,584.386 1310.26,538.943 1310.82,565.391 1311.38,571.723 1311.93,611.067 1312.49,647.636 1313.05,613.026 1313.61,601.559 1314.17,608.564 1314.73,567.055 1315.29,554.122 1315.85,525.699 1316.41,532.804 1316.97,558.064 1317.53,532.988 1318.09,557.002 1318.65,564.828 1319.2,570.036 1319.76,576.891 1320.32,597.962 1320.88,565.009 1321.44,588.449 1322,594.439 1322.56,599.815 1323.12,603.897 1323.68,612.022 1324.24,630.618 1324.8,619.716 1325.36,623.293 1325.92,628.504 1326.47,645.79 1327.03,614.93 1327.59,602.991 1328.15,620.621 1328.71,640.749 1329.27,658.542 1329.83,692.597 1330.39,688.211 1330.95,673.421 1331.51,659.213 1332.07,662.997 1332.63,631.671 1333.19,635.029 1333.75,649.974 1334.3,717.165 1334.86,716.341 1335.42,701.319 1335.98,700.908 1336.54,718.138 1337.1,714.956 1337.66,696.639 1338.22,726.966 1338.78,708.325 1339.34,705.457 1339.9,720.766 1340.46,717.957 1341.02,734.931 1341.57,716.957 1342.13,699.051 1342.69,717.172 1343.25,704.079 1343.81,686.393 1344.37,668.309 1344.93,667.445 1345.49,719.252 1346.05,731.478 1346.61,729.582 1347.17,724.457 1347.73,720.671 1348.29,717.849 1348.84,716.479 1349.4,709.713 1349.96,689.235 1350.52,706.531 1351.08,718.787 1351.64,720.159 1352.2,718.36 1352.76,698.659 1353.32,695.568 1353.88,709.826 1354.44,693.55 1355,709.926 1355.56,723.71 1356.12,721.919 1356.67,749.9 1357.23,773.842 1357.79,772.628 1358.35,764.561 1358.91,781.264 1359.47,761.484 1360.03,724.869 1360.59,706.448 1361.15,706.5 1361.71,705.63 1362.27,701.5 1362.83,701.969 1363.39,682.636 1363.94,701.148 1364.5,682.798 1365.06,700.553 1365.62,684.934 1366.18,683.562 1366.74,666.257 1367.3,633.803 1367.86,650.701 1368.42,619.585 1368.98,623.592 1369.54,629.208 1370.1,628.286 1370.66,629.02 1371.21,629.512 1371.77,635.785 1372.33,623.055 1372.89,608.108 1373.45,630.889 1374.01,697.53 1374.57,681.629 1375.13,681.066 1375.69,685.708 1376.25,697.818 1376.81,728.2 1377.37,741.232 1377.93,771.251 1378.49,781.775 1379.04,743.318 1379.6,741.188 1380.16,723.739 1380.72,772.339 1381.28,768.152 1381.84,764.207 1382.4,791.903 1382.96,752.309 1383.52,731.705 1384.08,661.705 1384.64,677.301 1385.2,708.075 1385.76,724.491 1386.31,720.643 1386.87,767.247 1387.43,734.057 1387.99,733.029 1388.55,714.554 1389.11,729.841 1389.67,710.96 1390.23,738.037 1390.79,748.741 1391.35,745.915 1391.91,777.861 1392.47,771.095 1393.03,781.722 1393.58,744.078 1394.14,726.651 1394.7,725.495 1395.26,723.296 1395.82,740.347 1396.38,737.67 1396.94,748.011 1397.5,759.434 1398.06,787.37 1398.62,732.475 1399.18,715.187 1399.74,679.469 1400.3,665.419 1400.86,697.679 1401.41,713.434 1401.97,745.619 1402.53,741.88 1403.09,707.546 1403.65,688.968 1404.21,688.302 1404.77,722.761 1405.33,738.602 1405.89,769.484 1406.45,763.958 1407.01,748.377 1407.57,715.81 1408.13,696.994 1408.68,680.868 1409.24,699.012 1409.8,684.228 1410.36,749.977 1410.92,749.223 1411.48,746.136 1412.04,726.639 1412.6,711.562 1413.16,708.866 1413.72,644.862 1414.28,648.54 1414.84,649.729 1415.4,649.081 1415.95,683.856 1416.51,695.675 1417.07,694.554 1417.63,691.777 1418.19,672.367 1418.75,660.293 1419.31,631.292 1419.87,647.084 1420.43,663.158 1420.99,679.527 1421.55,678.629 1422.11,711.111 1422.67,710.484 1423.23,709.479 1423.78,739.632 1424.34,704.814 1424.9,686.341 1425.46,651.144 1426.02,633.806 1426.58,653.434 1427.14,667.756 1427.7,654.957 1428.26,655.364 1428.82,656.842 1429.38,657.405 1429.94,645.316 1430.5,634.246 1431.05,637.257 1431.61,603.784 1432.17,625.236 1432.73,624.359 1433.29,630.112 1433.85,598.334 1434.41,603.876 1434.97,592.2 1435.53,615.946 1436.09,586.892 1436.65,590.707 1437.21,595.984 1437.77,583.596 1438.33,558.479 1438.88,551.523 1439.44,523.156 1440,502.745 1440.56,512.11 1441.12,505.073 1441.68,531.74 1442.24,553.109 1442.8,558.138 1443.36,580.959 1443.92,604.203 1444.48,609.009 1445.04,598.814 1445.6,623.885 1446.15,641.686 1446.71,662.713 1447.27,644.093 1447.83,661.612 1448.39,692.694 1448.95,708.861 1449.51,709.721 1450.07,723.636 1450.63,709.457 1451.19,726.935 1451.75,728.737 1452.31,713.578 1452.87,715.983 1453.42,732.59 1453.98,728.978 1454.54,727.99 1455.1,741.323 1455.66,722.56 1456.22,720.054 1456.78,699.016 1457.34,711.512 1457.9,758.744 1458.46,735.589 1459.02,732.708 1459.58,719.487 1460.14,704.686 1460.7,721.401 1461.25,753.032 1461.81,763.453 1462.37,778.563 1462.93,708.307 1463.49,708.669 1464.05,643.354 1464.61,596.958 1465.17,651.508 1465.73,651.283 1466.29,650.891 1466.85,651.323 1467.41,667.737 1467.97,683.634 1468.52,698.505 1469.08,701.555 1469.64,735.452 1470.2,749.151 1470.76,747.131 1471.32,756.924 1471.88,766.504 1472.44,795.468 1473,790.259 1473.56,800.029 1474.12,838.586 1474.68,800.017 1475.24,747.362 1475.79,779.982 1476.35,759.336 1476.91,773.519 1477.47,771.833 1478.03,784.629 1478.59,735.063 1479.15,735.284 1479.71,717.006 1480.27,715.411 1480.83,714.398 1481.39,711.422 1481.95,724.535 1482.51,738.662 1483.07,718.695 1483.62,714.249 1484.18,730.372 1484.74,727.285 1485.3,744.712 1485.86,754.523 1486.42,782.462 1486.98,742.862 1487.54,724.489 1488.1,726.637 1488.66,726.47 1489.22,721.497 1489.78,685.157 1490.34,699.161 1490.89,716.735 1491.45,682.773 1492.01,667.076 1492.57,701.523 1493.13,748.256 1493.69,759.939 1494.25,787.692 1494.81,801.191 1495.37,826.567 1495.93,804.475 1496.49,814.103 1497.05,790.557 1497.61,768.514 1498.16,764.991 1498.72,749.405 1499.28,743.653 1499.84,709.273 1500.4,674.028 1500.96,674.934 1501.52,678.498 1502.08,709.056 1502.64,736.667 1503.2,699.851 1503.76,732.253 1504.32,741.943 1504.88,738.4 1505.44,719.038 1505.99,689.557 1506.55,691.147 1507.11,739.729 1507.67,749.811 1508.23,717.944 1508.79,696.808 1509.35,679.052 1509.91,678.304 1510.47,695.88 1511.03,679.031 1511.59,723.582 1512.15,724.101 1512.71,737.474 1513.26,752.073 1513.82,730.11 1514.38,710.686 1514.94,757.035 1515.5,769.858 1516.06,747.385 1516.62,760.712 1517.18,726.594 1517.74,695.819 1518.3,678.615 1518.86,694.363 1519.42,711.743 1519.98,759.162 1520.53,758.112 1521.09,773.442 1521.65,771.258 1522.21,765.102 1522.77,776.055 1523.33,706.458 1523.89,686.469 1524.45,667.679 1525.01,683.503 1525.57,665.124 1526.13,683.501 1526.69,666.485 1527.25,667.435 1527.81,704.366 1528.36,703.938 1528.92,670.756 1529.48,702.115 1530.04,670.295 1530.6,670.982 1531.16,688.171 1531.72,705.654 1532.28,671.721 1532.84,705.849 1533.4,685.431 1533.96,638.35 1534.52,643.644 1535.08,659.983 1535.63,660.975 1536.19,661.46 1536.75,678.575 1537.31,696.47 1537.87,697.347 1538.43,698.566 1538.99,716.484 1539.55,716.541 1540.11,715.018 1540.67,729.131 1541.23,694.801 1541.79,727.438 1542.35,708.173 1542.9,704.126 1543.46,671.598 1544.02,655.431 1544.58,639.815 1545.14,640.422 1545.7,641.761 1546.26,640.649 1546.82,606.379 1547.38,642.08 1547.94,646.336 1548.5,680.312 1549.06,697.256 1549.62,714.327 1550.18,712.561 1550.73,696.009 1551.29,697.157 1551.85,707.742 1552.41,689.953 1552.97,707.675 1553.53,738.396 1554.09,688.595 1554.65,709.543 1555.21,694.734 1555.77,678.236 1556.33,676.181 1556.89,691.24 1557.45,692.777 1558,723.351 1558.56,738.947 1559.12,736.2 1559.68,730.445 1560.24,746.033 1560.8,744.463 1561.36,721.916 1561.92,731.557 1562.48,696.145 1563.04,697.016 1563.6,691.922 1564.16,724.425 1564.72,723.246 1565.28,688.25 1565.83,641.89 1566.39,646.356 1566.95,615.747 1567.51,616.583 1568.07,651.271 1568.63,651.354 1569.19,666.414 1569.75,664.871 1570.31,633.087 1570.87,638.384 1571.43,623.855 1571.99,645.065 1572.55,631.59 1573.1,647.416 1573.66,696.556 1574.22,663.635 1574.78,633.766 1575.34,618.162 1575.9,652.721 1576.46,668.579 1577.02,635.771 1577.58,653.042 1578.14,621.9 1578.7,627.886 1579.26,615.6 1579.82,648.539 1580.37,654.864 1580.93,638.787 1581.49,659.854 1582.05,646.039 1582.61,632.098 1583.17,651.124 1583.73,718.718 1584.29,716.909 1584.85,760.906 1585.41,774.595 1585.97,754.136 1586.53,716.246 1587.09,678.885 1587.65,661.757 1588.2,680.965 1588.76,685.559 1589.32,654.021 1589.88,734.868 1590.44,696.395 1591,694.097 1591.56,681.473 1592.12,698.242 1592.68,727.57 1593.24,707.454 1593.8,692.063 1594.36,677.051 1594.92,663.627 1595.47,667.405 1596.03,667.664 1596.59,666.505 1597.15,652.317 1597.71,638.651 1598.27,670.29 1598.83,652.374 1599.39,671.699 1599.95,673.291 1600.51,677.623 1601.07,628.693 1601.63,649.087 1602.19,669.365 1602.74,673.887 1603.3,688.792 1603.86,655.529 1604.42,655.598 1604.98,689.168 1605.54,674.283 1606.1,704.87 1606.66,707.072 1607.22,674.537 1607.78,675.136 1608.34,677.301 1608.9,666.652 1609.46,666.336 1610.02,667.971 1610.57,700.815 1611.13,731.941 1611.69,731.106 1612.25,715.88 1612.81,718.789 1613.37,703.844 1613.93,699.394 1614.49,713.245 1615.05,727.125 1615.61,754.703 1616.17,768.062 1616.73,716.417 1617.29,699.592 1617.84,665.648 1618.4,635.376 1618.96,655.573 1619.52,671.976 1620.08,689.241 1620.64,688.345 1621.2,705.158 1621.76,706.055 1622.32,672.357 1622.88,658.433 1623.44,673.784 1624,691.085 1624.56,722.599 1625.11,704.081 1625.67,686.187 1626.23,717.023 1626.79,731.663 1627.35,727.965 1627.91,711.045 1628.47,727.586 1629.03,723.577 1629.59,701.349 1630.15,667.945 1630.71,619.973 1631.27,626.905 1631.83,642.621 1632.39,642.826 1632.94,631.078 1633.5,666.188 1634.06,635.233 1634.62,638.127 1635.18,611.945 1635.74,616.005 1636.3,617.671 1636.86,639.468 1637.42,640.951 1637.98,624.847 1638.54,627.35 1639.1,648.051 1639.66,618.55 1640.21,606.744 1640.77,592.85 1641.33,580.432 1641.89,584.458 1642.45,571.092 1643.01,546.813 1643.57,552.493 1644.13,589.602 1644.69,595.997 1645.25,618.625 1645.81,586.984 1646.37,610.637 1646.93,578.863 1647.48,602.688 1648.04,641.461 1648.6,643.098 1649.16,645.465 1649.72,665.998 1650.28,681.428 1650.84,633.78 1651.4,652.032 1651.96,672.205 1652.52,640.885 1653.08,676.43 1653.64,679.025 1654.2,661.267 1654.76,662.872 1655.31,682.097 1655.87,700.262 1656.43,717.144 1656.99,696.198 1657.55,696.075 1658.11,710.378 1658.67,728.563 1659.23,693.542 1659.79,691.449 1660.35,693.378 1660.91,710.971 1661.47,679.607 1662.03,662.266 1662.58,664.269 1663.14,666.019 1663.7,653.646 1664.26,718.915 1664.82,736.649 1665.38,718.389 1665.94,715.987 1666.5,711.667 1667.06,694.994 1667.62,714.311 1668.18,698.925 1668.74,664.374 1669.3,665.843 1669.85,702.178 1670.41,702.151 1670.97,718.502 1671.53,700.21 1672.09,682.409 1672.65,666.254 1673.21,700.938 1673.77,700.31 1674.33,685.823 1674.89,701.03 1675.45,700.805 1676.01,699.9 1676.57,683.934 1677.13,666.886 1677.68,680.571 1678.24,677.289 1678.8,710.064 1679.36,679.532 1679.92,701.547 1680.48,701.915 1681.04,703.632 1681.6,676.457 1682.16,692.86 1682.72,692.722 1683.28,675.75 1683.84,673.844 1684.4,673.79 1684.95,708.013 1685.51,722.682 1686.07,655.222 1686.63,642.417 1687.19,645.832 1687.75,664.921 1688.31,680.644 1688.87,662.071 1689.43,629.096 1689.99,631.838 1690.55,620.972 1691.11,608.912 1691.67,628.307 1692.23,628.969 1692.78,661.516 1693.34,649.314 1693.9,697.679 1694.46,663.452 1695.02,662.243 1695.58,646.886 1696.14,648.599 1696.7,668.089 1697.26,701.488 1697.82,698.069 1698.38,675.378 1698.94,676.178 1699.5,672.013 1700.05,686.648 1700.61,690.131 1701.17,707.031 1701.73,708.097 1702.29,705.275 1702.85,699.242 1703.41,694.748 1703.97,691.028 1704.53,693.673 1705.09,690.46 1705.65,639.185 1706.21,593.819 1706.77,598.085 1707.32,603.911 1707.88,624.634 1708.44,629.585 1709,665.733 1709.56,703.368 1710.12,704.413 1710.68,737.417 1711.24,732.974 1711.8,731.758 1712.36,698.117 1712.92,648.812 1713.48,668.217 1714.04,684.239 1714.6,639.365 1715.15,691.781 1715.71,693.644 1716.27,674.103 1716.83,704.265 1717.39,704.758 1717.95,701.597 1718.51,730.473 1719.07,710.557 1719.63,722.107 1720.19,718.205 1720.75,732.181 1721.31,710.101 1721.87,722.219 1722.42,722.073 1722.98,702.909 1723.54,687.586 1724.1,717.77 1724.66,764.616 1725.22,727.495 1725.78,725.376 1726.34,756.926 1726.9,750.78 1727.46,730.959 1728.02,712.591 1728.58,728.618 1729.14,726.383 1729.69,740.82 1730.25,723.675 1730.81,723.149 1731.37,737.557 1731.93,720.096 1732.49,699.476 1733.05,664.733 1733.61,630.253 1734.17,648.481 1734.73,668.142 1735.29,668.093 1735.85,673.532 1736.41,673.496 1736.97,673.263 1737.52,655.057 1738.08,685.802 1738.64,670.661 1739.2,605.703 1739.76,596.064 1740.32,601.874 1740.88,587.728 1741.44,595.055 1742,586.644 1742.56,654.806 1743.12,676.204 1743.68,658.197 1744.24,658.826 1744.79,628.882 1745.35,642.992 1745.91,613.4 1746.47,645.211 1747.03,634.238 1747.59,648.631 1748.15,653.337 1748.71,653.767 1749.27,639.46 1749.83,657.641 1750.39,678.109 1750.95,696.677 1751.51,726.976 1752.06,726.715 1752.62,755.777 1753.18,717.993 1753.74,700.928 1754.3,734.137 1754.86,714.27 1755.42,728.073 1755.98,711.748 1756.54,665.147 1757.1,683.851 1757.66,702.184 1758.22,700.621 1758.78,682.379 1759.34,667.673 1759.89,665.882 1760.45,649.819 1761.01,682.812 1761.57,701.586 1762.13,719.318 1762.69,751.205 1763.25,777.143 1763.81,790.021 1764.37,767.415 1764.93,796.474 1765.49,788.709 1766.05,735.094 1766.61,732.392 1767.16,713.867 1767.72,710.233 1768.28,691.99 1768.84,677.79 1769.4,660.204 1769.96,661.447 1770.52,661.952 1771.08,661.306 1771.64,663.142 1772.2,663.373 1772.76,681.646 1773.32,679.886 1773.88,696.82 1774.43,700.498 1774.99,718.332 1775.55,734.287 1776.11,728.539 1776.67,758.824 1777.23,755.86 1777.79,802.107 1778.35,793.087 1778.91,757.167 1779.47,738.95 1780.03,721.501 1780.59,723.731 1781.15,675.314 1781.71,661.813 1782.26,645.549 1782.82,661.981 1783.38,661.291 1783.94,681.969 1784.5,680.912 1785.06,662.327 1785.62,647.237 1786.18,664.65 1786.74,649.736 1787.3,665.794 1787.86,682.278 1788.42,663.159 1788.98,678.944 1789.53,712.102 1790.09,742.974 1790.65,769.136 1791.21,796.581 1791.77,789.822 1792.33,786.792 1792.89,763.832 1793.45,761.401 1794.01,712.793 1794.57,711.854 1795.13,741.342 1795.69,706.769 1796.25,689.841 1796.8,693.234 1797.36,677.87 1797.92,693.363 1798.48,659.872 1799.04,632.351 1799.6,601.677 1800.16,574.398 1800.72,563.487 1801.28,558.385 1801.84,582.073 1802.4,635.645 1802.96,636.813 1803.52,654.072 1804.08,669.87 1804.63,665.312 1805.19,666.143 1805.75,666.346 1806.31,682.552 1806.87,671.494 1807.43,672.243 1807.99,705.53 1808.55,721.434 1809.11,707.132 1809.67,718.292 1810.23,704.675 1810.79,703.288 1811.35,703.049 1811.9,717.718 1812.46,737.116 1813.02,702.947 1813.58,735.305 1814.14,715.314 1814.7,712.413 1815.26,712.856 1815.82,725.299 1816.38,724.635 1816.94,689.805 1817.5,690.85 1818.06,660.179 1818.62,678.215 1819.18,660.42 1819.73,678.798 1820.29,678.994 1820.85,710.285 1821.41,693.238 1821.97,693.608 1822.53,674.056 1823.09,676.931 1823.65,658.8 1824.21,661.531 1824.77,664.846 1825.33,651.226 1825.89,638.611 1826.45,654.511 1827,655.394 1827.56,659.249 1828.12,675.629 1828.68,642.923 1829.24,659.552 1829.8,640.509 1830.36,674.938 1830.92,675.598 1831.48,642.763 1832.04,661.776 1832.6,680.244 1833.16,665.791 1833.72,663.997 1834.27,666.914 1834.83,669.317 1835.39,672.869 1835.95,684.745 1836.51,678.568 1837.07,709.926 1837.63,708.953 1838.19,720.953 \"/>\n<path clip-path=\"url(#clip333)\" d=\"M720.247 691.55 L720.806 691.55 L721.365 691.55 L721.924 691.55 L722.484 691.55 L723.043 691.55 L723.602 691.55 L724.161 691.55 L724.721 691.55 L725.28 691.55 L725.839 691.55 L726.398 691.55 L726.958 691.55 L727.517 691.55 L728.076 691.55 L728.635 691.55 L729.195 691.55 L729.754 691.55 L730.313 691.55 L730.872 691.55 L731.432 691.55 L731.991 691.55 L732.55 691.55 L733.109 691.55 L733.669 691.55 L734.228 691.55 L734.787 691.55 L735.346 691.55 L735.906 691.55 L736.465 691.55 L737.024 691.55 L737.583 691.55 L738.143 691.55 L738.702 691.55 L739.261 691.55 L739.82 691.55 L740.38 691.55 L740.939 691.55 L741.498 691.55 L742.057 691.55 L742.617 691.55 L743.176 691.55 L743.735 691.55 L744.294 691.55 L744.854 691.55 L745.413 691.55 L745.972 691.55 L746.531 691.55 L747.091 691.55 L747.65 691.55 L748.209 691.55 L748.768 691.55 L749.328 691.55 L749.887 691.55 L750.446 691.55 L751.005 691.55 L751.565 691.55 L752.124 691.55 L752.683 691.55 L753.242 691.55 L753.802 691.55 L754.361 691.55 L754.92 691.55 L755.479 691.55 L756.039 691.55 L756.598 691.55 L757.157 691.55 L757.716 691.55 L758.276 691.55 L758.835 691.55 L759.394 691.55 L759.953 691.55 L760.513 691.55 L761.072 691.55 L761.631 691.55 L762.19 691.55 L762.75 691.55 L763.309 691.55 L763.868 691.55 L764.427 691.55 L764.987 691.55 L765.546 691.55 L766.105 691.55 L766.664 691.55 L767.224 691.55 L767.783 691.55 L768.342 691.55 L768.901 691.55 L769.461 691.55 L770.02 691.55 L770.579 691.55 L771.138 691.55 L771.698 691.55 L772.257 691.55 L772.816 691.55 L773.375 691.55 L773.935 691.55 L774.494 691.55 L775.053 691.55 L775.612 691.55 L776.172 691.55 L776.731 691.55 L777.29 691.55 L777.849 691.55 L778.409 691.55 L778.968 691.55 L779.527 691.55 L780.086 691.55 L780.646 691.55 L781.205 691.55 L781.764 691.55 L782.323 691.55 L782.883 691.55 L783.442 691.55 L784.001 691.55 L784.56 691.55 L785.12 691.55 L785.679 691.55 L786.238 691.55 L786.797 691.55 L787.357 691.55 L787.916 691.55 L788.475 691.55 L789.034 691.55 L789.594 691.55 L790.153 691.55 L790.712 691.55 L791.271 691.55 L791.831 691.55 L792.39 691.55 L792.949 691.55 L793.508 691.55 L794.068 691.55 L794.627 691.55 L795.186 691.55 L795.745 691.55 L796.305 691.55 L796.864 691.55 L797.423 691.55 L797.982 691.55 L798.542 691.55 L799.101 691.55 L799.66 691.55 L800.219 691.55 L800.779 691.55 L801.338 691.55 L801.897 691.55 L802.456 691.55 L803.016 691.55 L803.575 691.55 L804.134 691.55 L804.693 691.55 L805.253 691.55 L805.812 691.55 L806.371 691.55 L806.931 691.55 L807.49 691.55 L808.049 691.55 L808.608 691.55 L809.168 691.55 L809.727 691.55 L810.286 691.55 L810.845 691.55 L811.405 691.55 L811.964 691.55 L812.523 691.55 L813.082 691.55 L813.642 691.55 L814.201 691.55 L814.76 691.55 L815.319 691.55 L815.879 691.55 L816.438 691.55 L816.997 691.55 L817.556 691.55 L818.116 691.55 L818.675 691.55 L819.234 691.55 L819.793 691.55 L820.353 691.55 L820.912 691.55 L821.471 691.55 L822.03 691.55 L822.59 691.55 L823.149 691.55 L823.708 691.55 L824.267 691.55 L824.827 691.55 L825.386 691.55 L825.945 691.55 L826.504 691.55 L827.064 691.55 L827.623 691.55 L828.182 691.55 L828.741 691.55 L829.301 691.55 L829.86 691.55 L830.419 691.55 L830.978 691.55 L831.538 691.55 L832.097 691.55 L832.656 691.55 L833.215 691.55 L833.775 691.55 L834.334 691.55 L834.893 691.55 L835.452 691.55 L836.012 691.55 L836.571 691.55 L837.13 691.55 L837.689 691.55 L838.249 691.55 L838.808 691.55 L839.367 691.55 L839.926 691.55 L840.486 691.55 L841.045 691.55 L841.604 691.55 L842.163 691.55 L842.723 691.55 L843.282 691.55 L843.841 691.55 L844.4 691.55 L844.96 691.55 L845.519 691.55 L846.078 691.55 L846.637 691.55 L847.197 691.55 L847.756 691.55 L848.315 691.55 L848.874 691.55 L849.434 691.55 L849.993 691.55 L850.552 691.55 L851.111 691.55 L851.671 691.55 L852.23 691.55 L852.789 691.55 L853.348 691.55 L853.908 691.55 L854.467 691.55 L855.026 691.55 L855.585 691.55 L856.145 691.55 L856.704 691.55 L857.263 691.55 L857.822 691.55 L858.382 691.55 L858.941 691.55 L859.5 691.55 L860.059 691.55 L860.619 691.55 L861.178 691.55 L861.737 691.55 L862.296 691.55 L862.856 691.55 L863.415 691.55 L863.974 691.55 L864.533 691.55 L865.093 691.55 L865.652 691.55 L866.211 691.55 L866.77 691.55 L867.33 691.55 L867.889 691.55 L868.448 691.55 L869.007 691.55 L869.567 691.55 L870.126 691.55 L870.685 691.55 L871.244 691.55 L871.804 691.55 L872.363 691.55 L872.922 691.55 L873.481 691.55 L874.041 691.55 L874.6 691.55 L875.159 691.55 L875.718 691.55 L876.278 691.55 L876.837 691.55 L877.396 691.55 L877.955 691.55 L878.515 691.55 L879.074 691.55 L879.633 691.55 L880.192 691.55 L880.752 691.55 L881.311 691.55 L881.87 691.55 L882.429 691.55 L882.989 691.55 L883.548 691.55 L884.107 691.55 L884.666 691.55 L885.226 691.55 L885.785 691.55 L886.344 691.55 L886.903 691.55 L887.463 691.55 L888.022 691.55 L888.581 691.55 L889.14 691.55 L889.7 691.55 L890.259 691.55 L890.818 691.55 L891.377 691.55 L891.937 691.55 L892.496 691.55 L893.055 691.55 L893.614 691.55 L894.174 691.55 L894.733 691.55 L895.292 691.55 L895.851 691.55 L896.411 691.55 L896.97 691.55 L897.529 691.55 L898.088 691.55 L898.648 691.55 L899.207 691.55 L899.766 691.55 L900.325 691.55 L900.885 691.55 L901.444 691.55 L902.003 691.55 L902.562 691.55 L903.122 691.55 L903.681 691.55 L904.24 691.55 L904.799 691.55 L905.359 691.55 L905.918 691.55 L906.477 691.55 L907.036 691.55 L907.596 691.55 L908.155 691.55 L908.714 691.55 L909.273 691.55 L909.833 691.55 L910.392 691.55 L910.951 691.55 L911.51 691.55 L912.07 691.55 L912.629 691.55 L913.188 691.55 L913.747 691.55 L914.307 691.55 L914.866 691.55 L915.425 691.55 L915.984 691.55 L916.544 691.55 L917.103 691.55 L917.662 691.55 L918.221 691.55 L918.781 691.55 L919.34 691.55 L919.899 691.55 L920.458 691.55 L921.018 691.55 L921.577 691.55 L922.136 691.55 L922.695 691.55 L923.255 691.55 L923.814 691.55 L924.373 691.55 L924.932 691.55 L925.492 691.55 L926.051 691.55 L926.61 691.55 L927.169 691.55 L927.729 691.55 L928.288 691.55 L928.847 691.55 L929.406 691.55 L929.966 691.55 L930.525 691.55 L931.084 691.55 L931.644 691.55 L932.203 691.55 L932.762 691.55 L933.321 691.55 L933.881 691.55 L934.44 691.55 L934.999 691.55 L935.558 691.55 L936.118 691.55 L936.677 691.55 L937.236 691.55 L937.795 691.55 L938.355 691.55 L938.914 691.55 L939.473 691.55 L940.032 691.55 L940.592 691.55 L941.151 691.55 L941.71 691.55 L942.269 691.55 L942.829 691.55 L943.388 691.55 L943.947 691.55 L944.506 691.55 L945.066 691.55 L945.625 691.55 L946.184 691.55 L946.743 691.55 L947.303 691.55 L947.862 691.55 L948.421 691.55 L948.98 691.55 L949.54 691.55 L950.099 691.55 L950.658 691.55 L951.217 691.55 L951.777 691.55 L952.336 691.55 L952.895 691.55 L953.454 691.55 L954.014 691.55 L954.573 691.55 L955.132 691.55 L955.691 691.55 L956.251 691.55 L956.81 691.55 L957.369 691.55 L957.928 691.55 L958.488 691.55 L959.047 691.55 L959.606 691.55 L960.165 691.55 L960.725 691.55 L961.284 691.55 L961.843 691.55 L962.402 691.55 L962.962 691.55 L963.521 691.55 L964.08 691.55 L964.639 691.55 L965.199 691.55 L965.758 691.55 L966.317 691.55 L966.876 691.55 L967.436 691.55 L967.995 691.55 L968.554 691.55 L969.113 691.55 L969.673 691.55 L970.232 691.55 L970.791 691.55 L971.35 691.55 L971.91 691.55 L972.469 691.55 L973.028 691.55 L973.587 691.55 L974.147 691.55 L974.706 691.55 L975.265 691.55 L975.824 691.55 L976.384 691.55 L976.943 691.55 L977.502 691.55 L978.061 691.55 L978.621 691.55 L979.18 691.55 L979.739 691.55 L980.298 691.55 L980.858 691.55 L981.417 691.55 L981.976 691.55 L982.535 691.55 L983.095 691.55 L983.654 691.55 L984.213 691.55 L984.772 691.55 L985.332 691.55 L985.891 691.55 L986.45 691.55 L987.009 691.55 L987.569 691.55 L988.128 691.55 L988.687 691.55 L989.246 691.55 L989.806 691.55 L990.365 691.55 L990.924 691.55 L991.483 691.55 L992.043 691.55 L992.602 691.55 L993.161 691.55 L993.72 691.55 L994.28 691.55 L994.839 691.55 L995.398 691.55 L995.957 691.55 L996.517 691.55 L997.076 691.55 L997.635 691.55 L998.194 691.55 L998.754 691.55 L999.313 691.55 L999.872 691.55 L1000.43 691.55 L1000.99 691.55 L1001.55 691.55 L1002.11 691.55 L1002.67 691.55 L1003.23 691.55 L1003.79 691.55 L1004.35 691.55 L1004.91 691.55 L1005.46 691.55 L1006.02 691.55 L1006.58 691.55 L1007.14 691.55 L1007.7 691.55 L1008.26 691.55 L1008.82 691.55 L1009.38 691.55 L1009.94 691.55 L1010.5 691.55 L1011.06 691.55 L1011.62 691.55 L1012.18 691.55 L1012.73 691.55 L1013.29 691.55 L1013.85 691.55 L1014.41 691.55 L1014.97 691.55 L1015.53 691.55 L1016.09 691.55 L1016.65 691.55 L1017.21 691.55 L1017.77 691.55 L1018.33 691.55 L1018.89 691.55 L1019.45 691.55 L1020.01 691.55 L1020.56 691.55 L1021.12 691.55 L1021.68 691.55 L1022.24 691.55 L1022.8 691.55 L1023.36 691.55 L1023.92 691.55 L1024.48 691.55 L1025.04 691.55 L1025.6 691.55 L1026.16 691.55 L1026.72 691.55 L1027.28 691.55 L1027.83 691.55 L1028.39 691.55 L1028.95 691.55 L1029.51 691.55 L1030.07 691.55 L1030.63 691.55 L1031.19 691.55 L1031.75 691.55 L1032.31 691.55 L1032.87 691.55 L1033.43 691.55 L1033.99 691.55 L1034.55 691.55 L1035.1 691.55 L1035.66 691.55 L1036.22 691.55 L1036.78 691.55 L1037.34 691.55 L1037.9 691.55 L1038.46 691.55 L1039.02 691.55 L1039.58 691.55 L1040.14 691.55 L1040.7 691.55 L1041.26 691.55 L1041.82 691.55 L1042.38 691.55 L1042.93 691.55 L1043.49 691.55 L1044.05 691.55 L1044.61 691.55 L1045.17 691.55 L1045.73 691.55 L1046.29 691.55 L1046.85 691.55 L1047.41 691.55 L1047.97 691.55 L1048.53 691.55 L1049.09 691.55 L1049.65 691.55 L1050.2 691.55 L1050.76 691.55 L1051.32 691.55 L1051.88 691.55 L1052.44 691.55 L1053 691.55 L1053.56 691.55 L1054.12 691.55 L1054.68 691.55 L1055.24 691.55 L1055.8 691.55 L1056.36 691.55 L1056.92 691.55 L1057.48 691.55 L1058.03 691.55 L1058.59 691.55 L1059.15 691.55 L1059.71 691.55 L1060.27 691.55 L1060.83 691.55 L1061.39 691.55 L1061.95 691.55 L1062.51 691.55 L1063.07 691.55 L1063.63 691.55 L1064.19 691.55 L1064.75 691.55 L1065.3 691.55 L1065.86 691.55 L1066.42 691.55 L1066.98 691.55 L1067.54 691.55 L1068.1 691.55 L1068.66 691.55 L1069.22 691.55 L1069.78 691.55 L1070.34 691.55 L1070.9 691.55 L1071.46 691.55 L1072.02 691.55 L1072.57 691.55 L1073.13 691.55 L1073.69 691.55 L1074.25 691.55 L1074.81 691.55 L1075.37 691.55 L1075.93 691.55 L1076.49 691.55 L1077.05 691.55 L1077.61 691.55 L1078.17 691.55 L1078.73 691.55 L1079.29 691.55 L1079.85 691.55 L1080.4 691.55 L1080.96 691.55 L1081.52 691.55 L1082.08 691.55 L1082.64 691.55 L1083.2 691.55 L1083.76 691.55 L1084.32 691.55 L1084.88 691.55 L1085.44 691.55 L1086 691.55 L1086.56 691.55 L1087.12 691.55 L1087.67 691.55 L1088.23 691.55 L1088.79 691.55 L1089.35 691.55 L1089.91 691.55 L1090.47 691.55 L1091.03 691.55 L1091.59 691.55 L1092.15 691.55 L1092.71 691.55 L1093.27 691.55 L1093.83 691.55 L1094.39 691.55 L1094.94 691.55 L1095.5 691.55 L1096.06 691.55 L1096.62 691.55 L1097.18 691.55 L1097.74 691.55 L1098.3 691.55 L1098.86 691.55 L1099.42 691.55 L1099.98 691.55 L1100.54 691.55 L1101.1 691.55 L1101.66 691.55 L1102.22 691.55 L1102.77 691.55 L1103.33 691.55 L1103.89 691.55 L1104.45 691.55 L1105.01 691.55 L1105.57 691.55 L1106.13 691.55 L1106.69 691.55 L1107.25 691.55 L1107.81 691.55 L1108.37 691.55 L1108.93 691.55 L1109.49 691.55 L1110.04 691.55 L1110.6 691.55 L1111.16 691.55 L1111.72 691.55 L1112.28 691.55 L1112.84 691.55 L1113.4 691.55 L1113.96 691.55 L1114.52 691.55 L1115.08 691.55 L1115.64 691.55 L1116.2 691.55 L1116.76 691.55 L1117.31 691.55 L1117.87 691.55 L1118.43 691.55 L1118.99 691.55 L1119.55 691.55 L1120.11 691.55 L1120.67 691.55 L1121.23 691.55 L1121.79 691.55 L1122.35 691.55 L1122.91 691.55 L1123.47 691.55 L1124.03 691.55 L1124.59 691.55 L1125.14 691.55 L1125.7 691.55 L1126.26 691.55 L1126.82 691.55 L1127.38 691.55 L1127.94 691.55 L1128.5 691.55 L1129.06 691.55 L1129.62 691.55 L1130.18 691.55 L1130.74 691.55 L1131.3 691.55 L1131.86 691.55 L1132.41 691.55 L1132.97 691.55 L1133.53 691.55 L1134.09 691.55 L1134.65 691.55 L1135.21 691.55 L1135.77 691.55 L1136.33 691.55 L1136.89 691.55 L1137.45 691.55 L1138.01 691.55 L1138.57 691.55 L1139.13 691.55 L1139.68 691.55 L1140.24 691.55 L1140.8 691.55 L1141.36 691.55 L1141.92 691.55 L1142.48 691.55 L1143.04 691.55 L1143.6 691.55 L1144.16 691.55 L1144.72 691.55 L1145.28 691.55 L1145.84 691.55 L1146.4 691.55 L1146.96 691.55 L1147.51 691.55 L1148.07 691.55 L1148.63 691.55 L1149.19 691.55 L1149.75 691.55 L1150.31 691.55 L1150.87 691.55 L1151.43 691.55 L1151.99 691.55 L1152.55 691.55 L1153.11 691.55 L1153.67 691.55 L1154.23 691.55 L1154.78 691.55 L1155.34 691.55 L1155.9 691.55 L1156.46 691.55 L1157.02 691.55 L1157.58 691.55 L1158.14 691.55 L1158.7 691.55 L1159.26 691.55 L1159.82 691.55 L1160.38 691.55 L1160.94 691.55 L1161.5 691.55 L1162.05 691.55 L1162.61 691.55 L1163.17 691.55 L1163.73 691.55 L1164.29 691.55 L1164.85 691.55 L1165.41 691.55 L1165.97 691.55 L1166.53 691.55 L1167.09 691.55 L1167.65 691.55 L1168.21 691.55 L1168.77 691.55 L1169.33 691.55 L1169.88 691.55 L1170.44 691.55 L1171 691.55 L1171.56 691.55 L1172.12 691.55 L1172.68 691.55 L1173.24 691.55 L1173.8 691.55 L1174.36 691.55 L1174.92 691.55 L1175.48 691.55 L1176.04 691.55 L1176.6 691.55 L1177.15 691.55 L1177.71 691.55 L1178.27 691.55 L1178.83 691.55 L1179.39 691.55 L1179.95 691.55 L1180.51 691.55 L1181.07 691.55 L1181.63 691.55 L1182.19 691.55 L1182.75 691.55 L1183.31 691.55 L1183.87 691.55 L1184.43 691.55 L1184.98 691.55 L1185.54 691.55 L1186.1 691.55 L1186.66 691.55 L1187.22 691.55 L1187.78 691.55 L1188.34 691.55 L1188.9 691.55 L1189.46 691.55 L1190.02 691.55 L1190.58 691.55 L1191.14 691.55 L1191.7 691.55 L1192.25 691.55 L1192.81 691.55 L1193.37 691.55 L1193.93 691.55 L1194.49 691.55 L1195.05 691.55 L1195.61 691.55 L1196.17 691.55 L1196.73 691.55 L1197.29 691.55 L1197.85 691.55 L1198.41 691.55 L1198.97 691.55 L1199.52 691.55 L1200.08 691.55 L1200.64 691.55 L1201.2 691.55 L1201.76 691.55 L1202.32 691.55 L1202.88 691.55 L1203.44 691.55 L1204 691.55 L1204.56 691.55 L1205.12 691.55 L1205.68 691.55 L1206.24 691.55 L1206.8 691.55 L1207.35 691.55 L1207.91 691.55 L1208.47 691.55 L1209.03 691.55 L1209.59 691.55 L1210.15 691.55 L1210.71 691.55 L1211.27 691.55 L1211.83 691.55 L1212.39 691.55 L1212.95 691.55 L1213.51 691.55 L1214.07 691.55 L1214.62 691.55 L1215.18 691.55 L1215.74 691.55 L1216.3 691.55 L1216.86 691.55 L1217.42 691.55 L1217.98 691.55 L1218.54 691.55 L1219.1 691.55 L1219.66 691.55 L1220.22 691.55 L1220.78 691.55 L1221.34 691.55 L1221.89 691.55 L1222.45 691.55 L1223.01 691.55 L1223.57 691.55 L1224.13 691.55 L1224.69 691.55 L1225.25 691.55 L1225.81 691.55 L1226.37 691.55 L1226.93 691.55 L1227.49 691.55 L1228.05 691.55 L1228.61 691.55 L1229.17 691.55 L1229.72 691.55 L1230.28 691.55 L1230.84 691.55 L1231.4 691.55 L1231.96 691.55 L1232.52 691.55 L1233.08 691.55 L1233.64 691.55 L1234.2 691.55 L1234.76 691.55 L1235.32 691.55 L1235.88 691.55 L1236.44 691.55 L1236.99 691.55 L1237.55 691.55 L1238.11 691.55 L1238.67 691.55 L1239.23 691.55 L1239.79 691.55 L1240.35 691.55 L1240.91 691.55 L1241.47 691.55 L1242.03 691.55 L1242.59 691.55 L1243.15 691.55 L1243.71 691.55 L1244.26 691.55 L1244.82 691.55 L1245.38 691.55 L1245.94 691.55 L1246.5 691.55 L1247.06 691.55 L1247.62 691.55 L1248.18 691.55 L1248.74 691.55 L1249.3 691.55 L1249.86 691.55 L1250.42 691.55 L1250.98 691.55 L1251.54 691.55 L1252.09 691.55 L1252.65 691.55 L1253.21 691.55 L1253.77 691.55 L1254.33 691.55 L1254.89 691.55 L1255.45 691.55 L1256.01 691.55 L1256.57 691.55 L1257.13 691.55 L1257.69 691.55 L1258.25 691.55 L1258.81 691.55 L1259.36 691.55 L1259.92 691.55 L1260.48 691.55 L1261.04 691.55 L1261.6 691.55 L1262.16 691.55 L1262.72 691.55 L1263.28 691.55 L1263.84 691.55 L1264.4 691.55 L1264.96 691.55 L1265.52 691.55 L1266.08 691.55 L1266.63 691.55 L1267.19 691.55 L1267.75 691.55 L1268.31 691.55 L1268.87 691.55 L1269.43 691.55 L1269.99 691.55 L1270.55 691.55 L1271.11 691.55 L1271.67 691.55 L1272.23 691.55 L1272.79 691.55 L1273.35 691.55 L1273.91 691.55 L1274.46 691.55 L1275.02 691.55 L1275.58 691.55 L1276.14 691.55 L1276.7 691.55 L1277.26 691.55 L1277.82 691.55 L1278.38 691.55 L1278.94 691.55 L1279.5 691.55 L1280.06 691.55 L1280.62 691.55 L1281.18 691.55 L1281.73 691.55 L1282.29 691.55 L1282.85 691.55 L1283.41 691.55 L1283.97 691.55 L1284.53 691.55 L1285.09 691.55 L1285.65 691.55 L1286.21 691.55 L1286.77 691.55 L1287.33 691.55 L1287.89 691.55 L1288.45 691.55 L1289 691.55 L1289.56 691.55 L1290.12 691.55 L1290.68 691.55 L1291.24 691.55 L1291.8 691.55 L1292.36 691.55 L1292.92 691.55 L1293.48 691.55 L1294.04 691.55 L1294.6 691.55 L1295.16 691.55 L1295.72 691.55 L1296.28 691.55 L1296.83 691.55 L1297.39 691.55 L1297.95 691.55 L1298.51 691.55 L1299.07 691.55 L1299.63 691.55 L1300.19 691.55 L1300.75 691.55 L1301.31 691.55 L1301.87 691.55 L1302.43 691.55 L1302.99 691.55 L1303.55 691.55 L1304.1 691.55 L1304.66 691.55 L1305.22 691.55 L1305.78 691.55 L1306.34 691.55 L1306.9 691.55 L1307.46 691.55 L1308.02 691.55 L1308.58 691.55 L1309.14 691.55 L1309.7 691.55 L1310.26 691.55 L1310.82 691.55 L1311.38 691.55 L1311.93 691.55 L1312.49 691.55 L1313.05 691.55 L1313.61 691.55 L1314.17 691.55 L1314.73 691.55 L1315.29 691.55 L1315.85 691.55 L1316.41 691.55 L1316.97 691.55 L1317.53 691.55 L1318.09 691.55 L1318.65 691.55 L1319.2 691.55 L1319.76 691.55 L1320.32 691.55 L1320.88 691.55 L1321.44 691.55 L1322 691.55 L1322.56 691.55 L1323.12 691.55 L1323.68 691.55 L1324.24 691.55 L1324.8 691.55 L1325.36 691.55 L1325.92 691.55 L1326.47 691.55 L1327.03 691.55 L1327.59 691.55 L1328.15 691.55 L1328.71 691.55 L1329.27 691.55 L1329.83 691.55 L1330.39 691.55 L1330.95 691.55 L1331.51 691.55 L1332.07 691.55 L1332.63 691.55 L1333.19 691.55 L1333.75 691.55 L1334.3 691.55 L1334.86 691.55 L1335.42 691.55 L1335.98 691.55 L1336.54 691.55 L1337.1 691.55 L1337.66 691.55 L1338.22 691.55 L1338.78 691.55 L1339.34 691.55 L1339.9 691.55 L1340.46 691.55 L1341.02 691.55 L1341.57 691.55 L1342.13 691.55 L1342.69 691.55 L1343.25 691.55 L1343.81 691.55 L1344.37 691.55 L1344.93 691.55 L1345.49 691.55 L1346.05 691.55 L1346.61 691.55 L1347.17 691.55 L1347.73 691.55 L1348.29 691.55 L1348.84 691.55 L1349.4 691.55 L1349.96 691.55 L1350.52 691.55 L1351.08 691.55 L1351.64 691.55 L1352.2 691.55 L1352.76 691.55 L1353.32 691.55 L1353.88 691.55 L1354.44 691.55 L1355 691.55 L1355.56 691.55 L1356.12 691.55 L1356.67 691.55 L1357.23 691.55 L1357.79 691.55 L1358.35 691.55 L1358.91 691.55 L1359.47 691.55 L1360.03 691.55 L1360.59 691.55 L1361.15 691.55 L1361.71 691.55 L1362.27 691.55 L1362.83 691.55 L1363.39 691.55 L1363.94 691.55 L1364.5 691.55 L1365.06 691.55 L1365.62 691.55 L1366.18 691.55 L1366.74 691.55 L1367.3 691.55 L1367.86 691.55 L1368.42 691.55 L1368.98 691.55 L1369.54 691.55 L1370.1 691.55 L1370.66 691.55 L1371.21 691.55 L1371.77 691.55 L1372.33 691.55 L1372.89 691.55 L1373.45 691.55 L1374.01 691.55 L1374.57 691.55 L1375.13 691.55 L1375.69 691.55 L1376.25 691.55 L1376.81 691.55 L1377.37 691.55 L1377.93 691.55 L1378.49 691.55 L1379.04 691.55 L1379.6 691.55 L1380.16 691.55 L1380.72 691.55 L1381.28 691.55 L1381.84 691.55 L1382.4 691.55 L1382.96 691.55 L1383.52 691.55 L1384.08 691.55 L1384.64 691.55 L1385.2 691.55 L1385.76 691.55 L1386.31 691.55 L1386.87 691.55 L1387.43 691.55 L1387.99 691.55 L1388.55 691.55 L1389.11 691.55 L1389.67 691.55 L1390.23 691.55 L1390.79 691.55 L1391.35 691.55 L1391.91 691.55 L1392.47 691.55 L1393.03 691.55 L1393.58 691.55 L1394.14 691.55 L1394.7 691.55 L1395.26 691.55 L1395.82 691.55 L1396.38 691.55 L1396.94 691.55 L1397.5 691.55 L1398.06 691.55 L1398.62 691.55 L1399.18 691.55 L1399.74 691.55 L1400.3 691.55 L1400.86 691.55 L1401.41 691.55 L1401.97 691.55 L1402.53 691.55 L1403.09 691.55 L1403.65 691.55 L1404.21 691.55 L1404.77 691.55 L1405.33 691.55 L1405.89 691.55 L1406.45 691.55 L1407.01 691.55 L1407.57 691.55 L1408.13 691.55 L1408.68 691.55 L1409.24 691.55 L1409.8 691.55 L1410.36 691.55 L1410.92 691.55 L1411.48 691.55 L1412.04 691.55 L1412.6 691.55 L1413.16 691.55 L1413.72 691.55 L1414.28 691.55 L1414.84 691.55 L1415.4 691.55 L1415.95 691.55 L1416.51 691.55 L1417.07 691.55 L1417.63 691.55 L1418.19 691.55 L1418.75 691.55 L1419.31 691.55 L1419.87 691.55 L1420.43 691.55 L1420.99 691.55 L1421.55 691.55 L1422.11 691.55 L1422.67 691.55 L1423.23 691.55 L1423.78 691.55 L1424.34 691.55 L1424.9 691.55 L1425.46 691.55 L1426.02 691.55 L1426.58 691.55 L1427.14 691.55 L1427.7 691.55 L1428.26 691.55 L1428.82 691.55 L1429.38 691.55 L1429.94 691.55 L1430.5 691.55 L1431.05 691.55 L1431.61 691.55 L1432.17 691.55 L1432.73 691.55 L1433.29 691.55 L1433.85 691.55 L1434.41 691.55 L1434.97 691.55 L1435.53 691.55 L1436.09 691.55 L1436.65 691.55 L1437.21 691.55 L1437.77 691.55 L1438.33 691.55 L1438.88 691.55 L1439.44 691.55 L1440 691.55 L1440.56 691.55 L1441.12 691.55 L1441.68 691.55 L1442.24 691.55 L1442.8 691.55 L1443.36 691.55 L1443.92 691.55 L1444.48 691.55 L1445.04 691.55 L1445.6 691.55 L1446.15 691.55 L1446.71 691.55 L1447.27 691.55 L1447.83 691.55 L1448.39 691.55 L1448.95 691.55 L1449.51 691.55 L1450.07 691.55 L1450.63 691.55 L1451.19 691.55 L1451.75 691.55 L1452.31 691.55 L1452.87 691.55 L1453.42 691.55 L1453.98 691.55 L1454.54 691.55 L1455.1 691.55 L1455.66 691.55 L1456.22 691.55 L1456.78 691.55 L1457.34 691.55 L1457.9 691.55 L1458.46 691.55 L1459.02 691.55 L1459.58 691.55 L1460.14 691.55 L1460.7 691.55 L1461.25 691.55 L1461.81 691.55 L1462.37 691.55 L1462.93 691.55 L1463.49 691.55 L1464.05 691.55 L1464.61 691.55 L1465.17 691.55 L1465.73 691.55 L1466.29 691.55 L1466.85 691.55 L1467.41 691.55 L1467.97 691.55 L1468.52 691.55 L1469.08 691.55 L1469.64 691.55 L1470.2 691.55 L1470.76 691.55 L1471.32 691.55 L1471.88 691.55 L1472.44 691.55 L1473 691.55 L1473.56 691.55 L1474.12 691.55 L1474.68 691.55 L1475.24 691.55 L1475.79 691.55 L1476.35 691.55 L1476.91 691.55 L1477.47 691.55 L1478.03 691.55 L1478.59 691.55 L1479.15 691.55 L1479.71 691.55 L1480.27 691.55 L1480.83 691.55 L1481.39 691.55 L1481.95 691.55 L1482.51 691.55 L1483.07 691.55 L1483.62 691.55 L1484.18 691.55 L1484.74 691.55 L1485.3 691.55 L1485.86 691.55 L1486.42 691.55 L1486.98 691.55 L1487.54 691.55 L1488.1 691.55 L1488.66 691.55 L1489.22 691.55 L1489.78 691.55 L1490.34 691.55 L1490.89 691.55 L1491.45 691.55 L1492.01 691.55 L1492.57 691.55 L1493.13 691.55 L1493.69 691.55 L1494.25 691.55 L1494.81 691.55 L1495.37 691.55 L1495.93 691.55 L1496.49 691.55 L1497.05 691.55 L1497.61 691.55 L1498.16 691.55 L1498.72 691.55 L1499.28 691.55 L1499.84 691.55 L1500.4 691.55 L1500.96 691.55 L1501.52 691.55 L1502.08 691.55 L1502.64 691.55 L1503.2 691.55 L1503.76 691.55 L1504.32 691.55 L1504.88 691.55 L1505.44 691.55 L1505.99 691.55 L1506.55 691.55 L1507.11 691.55 L1507.67 691.55 L1508.23 691.55 L1508.79 691.55 L1509.35 691.55 L1509.91 691.55 L1510.47 691.55 L1511.03 691.55 L1511.59 691.55 L1512.15 691.55 L1512.71 691.55 L1513.26 691.55 L1513.82 691.55 L1514.38 691.55 L1514.94 691.55 L1515.5 691.55 L1516.06 691.55 L1516.62 691.55 L1517.18 691.55 L1517.74 691.55 L1518.3 691.55 L1518.86 691.55 L1519.42 691.55 L1519.98 691.55 L1520.53 691.55 L1521.09 691.55 L1521.65 691.55 L1522.21 691.55 L1522.77 691.55 L1523.33 691.55 L1523.89 691.55 L1524.45 691.55 L1525.01 691.55 L1525.57 691.55 L1526.13 691.55 L1526.69 691.55 L1527.25 691.55 L1527.81 691.55 L1528.36 691.55 L1528.92 691.55 L1529.48 691.55 L1530.04 691.55 L1530.6 691.55 L1531.16 691.55 L1531.72 691.55 L1532.28 691.55 L1532.84 691.55 L1533.4 691.55 L1533.96 691.55 L1534.52 691.55 L1535.08 691.55 L1535.63 691.55 L1536.19 691.55 L1536.75 691.55 L1537.31 691.55 L1537.87 691.55 L1538.43 691.55 L1538.99 691.55 L1539.55 691.55 L1540.11 691.55 L1540.67 691.55 L1541.23 691.55 L1541.79 691.55 L1542.35 691.55 L1542.9 691.55 L1543.46 691.55 L1544.02 691.55 L1544.58 691.55 L1545.14 691.55 L1545.7 691.55 L1546.26 691.55 L1546.82 691.55 L1547.38 691.55 L1547.94 691.55 L1548.5 691.55 L1549.06 691.55 L1549.62 691.55 L1550.18 691.55 L1550.73 691.55 L1551.29 691.55 L1551.85 691.55 L1552.41 691.55 L1552.97 691.55 L1553.53 691.55 L1554.09 691.55 L1554.65 691.55 L1555.21 691.55 L1555.77 691.55 L1556.33 691.55 L1556.89 691.55 L1557.45 691.55 L1558 691.55 L1558.56 691.55 L1559.12 691.55 L1559.68 691.55 L1560.24 691.55 L1560.8 691.55 L1561.36 691.55 L1561.92 691.55 L1562.48 691.55 L1563.04 691.55 L1563.6 691.55 L1564.16 691.55 L1564.72 691.55 L1565.28 691.55 L1565.83 691.55 L1566.39 691.55 L1566.95 691.55 L1567.51 691.55 L1568.07 691.55 L1568.63 691.55 L1569.19 691.55 L1569.75 691.55 L1570.31 691.55 L1570.87 691.55 L1571.43 691.55 L1571.99 691.55 L1572.55 691.55 L1573.1 691.55 L1573.66 691.55 L1574.22 691.55 L1574.78 691.55 L1575.34 691.55 L1575.9 691.55 L1576.46 691.55 L1577.02 691.55 L1577.58 691.55 L1578.14 691.55 L1578.7 691.55 L1579.26 691.55 L1579.82 691.55 L1580.37 691.55 L1580.93 691.55 L1581.49 691.55 L1582.05 691.55 L1582.61 691.55 L1583.17 691.55 L1583.73 691.55 L1584.29 691.55 L1584.85 691.55 L1585.41 691.55 L1585.97 691.55 L1586.53 691.55 L1587.09 691.55 L1587.65 691.55 L1588.2 691.55 L1588.76 691.55 L1589.32 691.55 L1589.88 691.55 L1590.44 691.55 L1591 691.55 L1591.56 691.55 L1592.12 691.55 L1592.68 691.55 L1593.24 691.55 L1593.8 691.55 L1594.36 691.55 L1594.92 691.55 L1595.47 691.55 L1596.03 691.55 L1596.59 691.55 L1597.15 691.55 L1597.71 691.55 L1598.27 691.55 L1598.83 691.55 L1599.39 691.55 L1599.95 691.55 L1600.51 691.55 L1601.07 691.55 L1601.63 691.55 L1602.19 691.55 L1602.74 691.55 L1603.3 691.55 L1603.86 691.55 L1604.42 691.55 L1604.98 691.55 L1605.54 691.55 L1606.1 691.55 L1606.66 691.55 L1607.22 691.55 L1607.78 691.55 L1608.34 691.55 L1608.9 691.55 L1609.46 691.55 L1610.02 691.55 L1610.57 691.55 L1611.13 691.55 L1611.69 691.55 L1612.25 691.55 L1612.81 691.55 L1613.37 691.55 L1613.93 691.55 L1614.49 691.55 L1615.05 691.55 L1615.61 691.55 L1616.17 691.55 L1616.73 691.55 L1617.29 691.55 L1617.84 691.55 L1618.4 691.55 L1618.96 691.55 L1619.52 691.55 L1620.08 691.55 L1620.64 691.55 L1621.2 691.55 L1621.76 691.55 L1622.32 691.55 L1622.88 691.55 L1623.44 691.55 L1624 691.55 L1624.56 691.55 L1625.11 691.55 L1625.67 691.55 L1626.23 691.55 L1626.79 691.55 L1627.35 691.55 L1627.91 691.55 L1628.47 691.55 L1629.03 691.55 L1629.59 691.55 L1630.15 691.55 L1630.71 691.55 L1631.27 691.55 L1631.83 691.55 L1632.39 691.55 L1632.94 691.55 L1633.5 691.55 L1634.06 691.55 L1634.62 691.55 L1635.18 691.55 L1635.74 691.55 L1636.3 691.55 L1636.86 691.55 L1637.42 691.55 L1637.98 691.55 L1638.54 691.55 L1639.1 691.55 L1639.66 691.55 L1640.21 691.55 L1640.77 691.55 L1641.33 691.55 L1641.89 691.55 L1642.45 691.55 L1643.01 691.55 L1643.57 691.55 L1644.13 691.55 L1644.69 691.55 L1645.25 691.55 L1645.81 691.55 L1646.37 691.55 L1646.93 691.55 L1647.48 691.55 L1648.04 691.55 L1648.6 691.55 L1649.16 691.55 L1649.72 691.55 L1650.28 691.55 L1650.84 691.55 L1651.4 691.55 L1651.96 691.55 L1652.52 691.55 L1653.08 691.55 L1653.64 691.55 L1654.2 691.55 L1654.76 691.55 L1655.31 691.55 L1655.87 691.55 L1656.43 691.55 L1656.99 691.55 L1657.55 691.55 L1658.11 691.55 L1658.67 691.55 L1659.23 691.55 L1659.79 691.55 L1660.35 691.55 L1660.91 691.55 L1661.47 691.55 L1662.03 691.55 L1662.58 691.55 L1663.14 691.55 L1663.7 691.55 L1664.26 691.55 L1664.82 691.55 L1665.38 691.55 L1665.94 691.55 L1666.5 691.55 L1667.06 691.55 L1667.62 691.55 L1668.18 691.55 L1668.74 691.55 L1669.3 691.55 L1669.85 691.55 L1670.41 691.55 L1670.97 691.55 L1671.53 691.55 L1672.09 691.55 L1672.65 691.55 L1673.21 691.55 L1673.77 691.55 L1674.33 691.55 L1674.89 691.55 L1675.45 691.55 L1676.01 691.55 L1676.57 691.55 L1677.13 691.55 L1677.68 691.55 L1678.24 691.55 L1678.8 691.55 L1679.36 691.55 L1679.92 691.55 L1680.48 691.55 L1681.04 691.55 L1681.6 691.55 L1682.16 691.55 L1682.72 691.55 L1683.28 691.55 L1683.84 691.55 L1684.4 691.55 L1684.95 691.55 L1685.51 691.55 L1686.07 691.55 L1686.63 691.55 L1687.19 691.55 L1687.75 691.55 L1688.31 691.55 L1688.87 691.55 L1689.43 691.55 L1689.99 691.55 L1690.55 691.55 L1691.11 691.55 L1691.67 691.55 L1692.23 691.55 L1692.78 691.55 L1693.34 691.55 L1693.9 691.55 L1694.46 691.55 L1695.02 691.55 L1695.58 691.55 L1696.14 691.55 L1696.7 691.55 L1697.26 691.55 L1697.82 691.55 L1698.38 691.55 L1698.94 691.55 L1699.5 691.55 L1700.05 691.55 L1700.61 691.55 L1701.17 691.55 L1701.73 691.55 L1702.29 691.55 L1702.85 691.55 L1703.41 691.55 L1703.97 691.55 L1704.53 691.55 L1705.09 691.55 L1705.65 691.55 L1706.21 691.55 L1706.77 691.55 L1707.32 691.55 L1707.88 691.55 L1708.44 691.55 L1709 691.55 L1709.56 691.55 L1710.12 691.55 L1710.68 691.55 L1711.24 691.55 L1711.8 691.55 L1712.36 691.55 L1712.92 691.55 L1713.48 691.55 L1714.04 691.55 L1714.6 691.55 L1715.15 691.55 L1715.71 691.55 L1716.27 691.55 L1716.83 691.55 L1717.39 691.55 L1717.95 691.55 L1718.51 691.55 L1719.07 691.55 L1719.63 691.55 L1720.19 691.55 L1720.75 691.55 L1721.31 691.55 L1721.87 691.55 L1722.42 691.55 L1722.98 691.55 L1723.54 691.55 L1724.1 691.55 L1724.66 691.55 L1725.22 691.55 L1725.78 691.55 L1726.34 691.55 L1726.9 691.55 L1727.46 691.55 L1728.02 691.55 L1728.58 691.55 L1729.14 691.55 L1729.69 691.55 L1730.25 691.55 L1730.81 691.55 L1731.37 691.55 L1731.93 691.55 L1732.49 691.55 L1733.05 691.55 L1733.61 691.55 L1734.17 691.55 L1734.73 691.55 L1735.29 691.55 L1735.85 691.55 L1736.41 691.55 L1736.97 691.55 L1737.52 691.55 L1738.08 691.55 L1738.64 691.55 L1739.2 691.55 L1739.76 691.55 L1740.32 691.55 L1740.88 691.55 L1741.44 691.55 L1742 691.55 L1742.56 691.55 L1743.12 691.55 L1743.68 691.55 L1744.24 691.55 L1744.79 691.55 L1745.35 691.55 L1745.91 691.55 L1746.47 691.55 L1747.03 691.55 L1747.59 691.55 L1748.15 691.55 L1748.71 691.55 L1749.27 691.55 L1749.83 691.55 L1750.39 691.55 L1750.95 691.55 L1751.51 691.55 L1752.06 691.55 L1752.62 691.55 L1753.18 691.55 L1753.74 691.55 L1754.3 691.55 L1754.86 691.55 L1755.42 691.55 L1755.98 691.55 L1756.54 691.55 L1757.1 691.55 L1757.66 691.55 L1758.22 691.55 L1758.78 691.55 L1759.34 691.55 L1759.89 691.55 L1760.45 691.55 L1761.01 691.55 L1761.57 691.55 L1762.13 691.55 L1762.69 691.55 L1763.25 691.55 L1763.81 691.55 L1764.37 691.55 L1764.93 691.55 L1765.49 691.55 L1766.05 691.55 L1766.61 691.55 L1767.16 691.55 L1767.72 691.55 L1768.28 691.55 L1768.84 691.55 L1769.4 691.55 L1769.96 691.55 L1770.52 691.55 L1771.08 691.55 L1771.64 691.55 L1772.2 691.55 L1772.76 691.55 L1773.32 691.55 L1773.88 691.55 L1774.43 691.55 L1774.99 691.55 L1775.55 691.55 L1776.11 691.55 L1776.67 691.55 L1777.23 691.55 L1777.79 691.55 L1778.35 691.55 L1778.91 691.55 L1779.47 691.55 L1780.03 691.55 L1780.59 691.55 L1781.15 691.55 L1781.71 691.55 L1782.26 691.55 L1782.82 691.55 L1783.38 691.55 L1783.94 691.55 L1784.5 691.55 L1785.06 691.55 L1785.62 691.55 L1786.18 691.55 L1786.74 691.55 L1787.3 691.55 L1787.86 691.55 L1788.42 691.55 L1788.98 691.55 L1789.53 691.55 L1790.09 691.55 L1790.65 691.55 L1791.21 691.55 L1791.77 691.55 L1792.33 691.55 L1792.89 691.55 L1793.45 691.55 L1794.01 691.55 L1794.57 691.55 L1795.13 691.55 L1795.69 691.55 L1796.25 691.55 L1796.8 691.55 L1797.36 691.55 L1797.92 691.55 L1798.48 691.55 L1799.04 691.55 L1799.6 691.55 L1800.16 691.55 L1800.72 691.55 L1801.28 691.55 L1801.84 691.55 L1802.4 691.55 L1802.96 691.55 L1803.52 691.55 L1804.08 691.55 L1804.63 691.55 L1805.19 691.55 L1805.75 691.55 L1806.31 691.55 L1806.87 691.55 L1807.43 691.55 L1807.99 691.55 L1808.55 691.55 L1809.11 691.55 L1809.67 691.55 L1810.23 691.55 L1810.79 691.55 L1811.35 691.55 L1811.9 691.55 L1812.46 691.55 L1813.02 691.55 L1813.58 691.55 L1814.14 691.55 L1814.7 691.55 L1815.26 691.55 L1815.82 691.55 L1816.38 691.55 L1816.94 691.55 L1817.5 691.55 L1818.06 691.55 L1818.62 691.55 L1819.18 691.55 L1819.73 691.55 L1820.29 691.55 L1820.85 691.55 L1821.41 691.55 L1821.97 691.55 L1822.53 691.55 L1823.09 691.55 L1823.65 691.55 L1824.21 691.55 L1824.77 691.55 L1825.33 691.55 L1825.89 691.55 L1826.45 691.55 L1827 691.55 L1827.56 691.55 L1828.12 691.55 L1828.68 691.55 L1829.24 691.55 L1829.8 691.55 L1830.36 691.55 L1830.92 691.55 L1831.48 691.55 L1832.04 691.55 L1832.6 691.55 L1833.16 691.55 L1833.72 691.55 L1834.27 691.55 L1834.83 691.55 L1835.39 691.55 L1835.95 691.55 L1836.51 691.55 L1837.07 691.55 L1837.63 691.55 L1838.19 691.55 L1838.19 683.513 L1837.63 683.513 L1837.07 683.513 L1836.51 683.513 L1835.95 683.513 L1835.39 683.513 L1834.83 683.513 L1834.27 683.513 L1833.72 683.513 L1833.16 683.513 L1832.6 683.513 L1832.04 683.513 L1831.48 683.513 L1830.92 683.513 L1830.36 683.513 L1829.8 683.513 L1829.24 683.513 L1828.68 683.513 L1828.12 683.513 L1827.56 683.513 L1827 683.513 L1826.45 683.513 L1825.89 683.513 L1825.33 683.513 L1824.77 683.513 L1824.21 683.513 L1823.65 683.513 L1823.09 683.513 L1822.53 683.513 L1821.97 683.513 L1821.41 683.513 L1820.85 683.513 L1820.29 683.513 L1819.73 683.513 L1819.18 683.513 L1818.62 683.513 L1818.06 683.513 L1817.5 683.513 L1816.94 683.513 L1816.38 683.513 L1815.82 683.513 L1815.26 683.513 L1814.7 683.513 L1814.14 683.513 L1813.58 683.513 L1813.02 683.513 L1812.46 683.513 L1811.9 683.513 L1811.35 683.513 L1810.79 683.513 L1810.23 683.513 L1809.67 683.513 L1809.11 683.513 L1808.55 683.513 L1807.99 683.513 L1807.43 683.513 L1806.87 683.513 L1806.31 683.513 L1805.75 683.513 L1805.19 683.513 L1804.63 683.513 L1804.08 683.513 L1803.52 683.513 L1802.96 683.513 L1802.4 683.513 L1801.84 683.513 L1801.28 683.513 L1800.72 683.513 L1800.16 683.513 L1799.6 683.513 L1799.04 683.513 L1798.48 683.513 L1797.92 683.513 L1797.36 683.513 L1796.8 683.513 L1796.25 683.513 L1795.69 683.513 L1795.13 683.513 L1794.57 683.513 L1794.01 683.513 L1793.45 683.513 L1792.89 683.513 L1792.33 683.513 L1791.77 683.513 L1791.21 683.513 L1790.65 683.513 L1790.09 683.513 L1789.53 683.513 L1788.98 683.513 L1788.42 683.513 L1787.86 683.513 L1787.3 683.513 L1786.74 683.513 L1786.18 683.513 L1785.62 683.513 L1785.06 683.513 L1784.5 683.513 L1783.94 683.513 L1783.38 683.513 L1782.82 683.513 L1782.26 683.513 L1781.71 683.513 L1781.15 683.513 L1780.59 683.513 L1780.03 683.513 L1779.47 683.513 L1778.91 683.513 L1778.35 683.513 L1777.79 683.513 L1777.23 683.513 L1776.67 683.513 L1776.11 683.513 L1775.55 683.513 L1774.99 683.513 L1774.43 683.513 L1773.88 683.513 L1773.32 683.513 L1772.76 683.513 L1772.2 683.513 L1771.64 683.513 L1771.08 683.513 L1770.52 683.513 L1769.96 683.513 L1769.4 683.513 L1768.84 683.513 L1768.28 683.513 L1767.72 683.513 L1767.16 683.513 L1766.61 683.513 L1766.05 683.513 L1765.49 683.513 L1764.93 683.513 L1764.37 683.513 L1763.81 683.513 L1763.25 683.513 L1762.69 683.513 L1762.13 683.513 L1761.57 683.513 L1761.01 683.513 L1760.45 683.513 L1759.89 683.513 L1759.34 683.513 L1758.78 683.513 L1758.22 683.513 L1757.66 683.513 L1757.1 683.513 L1756.54 683.513 L1755.98 683.513 L1755.42 683.513 L1754.86 683.513 L1754.3 683.513 L1753.74 683.513 L1753.18 683.513 L1752.62 683.513 L1752.06 683.513 L1751.51 683.513 L1750.95 683.513 L1750.39 683.513 L1749.83 683.513 L1749.27 683.513 L1748.71 683.513 L1748.15 683.513 L1747.59 683.513 L1747.03 683.513 L1746.47 683.513 L1745.91 683.513 L1745.35 683.513 L1744.79 683.513 L1744.24 683.513 L1743.68 683.513 L1743.12 683.513 L1742.56 683.513 L1742 683.513 L1741.44 683.513 L1740.88 683.513 L1740.32 683.513 L1739.76 683.513 L1739.2 683.513 L1738.64 683.513 L1738.08 683.513 L1737.52 683.513 L1736.97 683.513 L1736.41 683.513 L1735.85 683.513 L1735.29 683.513 L1734.73 683.513 L1734.17 683.513 L1733.61 683.513 L1733.05 683.513 L1732.49 683.513 L1731.93 683.513 L1731.37 683.513 L1730.81 683.513 L1730.25 683.513 L1729.69 683.513 L1729.14 683.513 L1728.58 683.513 L1728.02 683.513 L1727.46 683.513 L1726.9 683.513 L1726.34 683.513 L1725.78 683.513 L1725.22 683.513 L1724.66 683.513 L1724.1 683.513 L1723.54 683.513 L1722.98 683.513 L1722.42 683.513 L1721.87 683.513 L1721.31 683.513 L1720.75 683.513 L1720.19 683.513 L1719.63 683.513 L1719.07 683.513 L1718.51 683.513 L1717.95 683.513 L1717.39 683.513 L1716.83 683.513 L1716.27 683.513 L1715.71 683.513 L1715.15 683.513 L1714.6 683.513 L1714.04 683.513 L1713.48 683.513 L1712.92 683.513 L1712.36 683.513 L1711.8 683.513 L1711.24 683.513 L1710.68 683.513 L1710.12 683.513 L1709.56 683.513 L1709 683.513 L1708.44 683.513 L1707.88 683.513 L1707.32 683.513 L1706.77 683.513 L1706.21 683.513 L1705.65 683.513 L1705.09 683.513 L1704.53 683.513 L1703.97 683.513 L1703.41 683.513 L1702.85 683.513 L1702.29 683.513 L1701.73 683.513 L1701.17 683.513 L1700.61 683.513 L1700.05 683.513 L1699.5 683.513 L1698.94 683.513 L1698.38 683.513 L1697.82 683.513 L1697.26 683.513 L1696.7 683.513 L1696.14 683.513 L1695.58 683.513 L1695.02 683.513 L1694.46 683.513 L1693.9 683.513 L1693.34 683.513 L1692.78 683.513 L1692.23 683.513 L1691.67 683.513 L1691.11 683.513 L1690.55 683.513 L1689.99 683.513 L1689.43 683.513 L1688.87 683.513 L1688.31 683.513 L1687.75 683.513 L1687.19 683.513 L1686.63 683.513 L1686.07 683.513 L1685.51 683.513 L1684.95 683.513 L1684.4 683.513 L1683.84 683.513 L1683.28 683.513 L1682.72 683.513 L1682.16 683.513 L1681.6 683.513 L1681.04 683.513 L1680.48 683.513 L1679.92 683.513 L1679.36 683.513 L1678.8 683.513 L1678.24 683.513 L1677.68 683.513 L1677.13 683.513 L1676.57 683.513 L1676.01 683.513 L1675.45 683.513 L1674.89 683.513 L1674.33 683.513 L1673.77 683.513 L1673.21 683.513 L1672.65 683.513 L1672.09 683.513 L1671.53 683.513 L1670.97 683.513 L1670.41 683.513 L1669.85 683.513 L1669.3 683.513 L1668.74 683.513 L1668.18 683.513 L1667.62 683.513 L1667.06 683.513 L1666.5 683.513 L1665.94 683.513 L1665.38 683.513 L1664.82 683.513 L1664.26 683.513 L1663.7 683.513 L1663.14 683.513 L1662.58 683.513 L1662.03 683.513 L1661.47 683.513 L1660.91 683.513 L1660.35 683.513 L1659.79 683.513 L1659.23 683.513 L1658.67 683.513 L1658.11 683.513 L1657.55 683.513 L1656.99 683.513 L1656.43 683.513 L1655.87 683.513 L1655.31 683.513 L1654.76 683.513 L1654.2 683.513 L1653.64 683.513 L1653.08 683.513 L1652.52 683.513 L1651.96 683.513 L1651.4 683.513 L1650.84 683.513 L1650.28 683.513 L1649.72 683.513 L1649.16 683.513 L1648.6 683.513 L1648.04 683.513 L1647.48 683.513 L1646.93 683.513 L1646.37 683.513 L1645.81 683.513 L1645.25 683.513 L1644.69 683.513 L1644.13 683.513 L1643.57 683.513 L1643.01 683.513 L1642.45 683.513 L1641.89 683.513 L1641.33 683.513 L1640.77 683.513 L1640.21 683.513 L1639.66 683.513 L1639.1 683.513 L1638.54 683.513 L1637.98 683.513 L1637.42 683.513 L1636.86 683.513 L1636.3 683.513 L1635.74 683.513 L1635.18 683.513 L1634.62 683.513 L1634.06 683.513 L1633.5 683.513 L1632.94 683.513 L1632.39 683.513 L1631.83 683.513 L1631.27 683.513 L1630.71 683.513 L1630.15 683.513 L1629.59 683.513 L1629.03 683.513 L1628.47 683.513 L1627.91 683.513 L1627.35 683.513 L1626.79 683.513 L1626.23 683.513 L1625.67 683.513 L1625.11 683.513 L1624.56 683.513 L1624 683.513 L1623.44 683.513 L1622.88 683.513 L1622.32 683.513 L1621.76 683.513 L1621.2 683.513 L1620.64 683.513 L1620.08 683.513 L1619.52 683.513 L1618.96 683.513 L1618.4 683.513 L1617.84 683.513 L1617.29 683.513 L1616.73 683.513 L1616.17 683.513 L1615.61 683.513 L1615.05 683.513 L1614.49 683.513 L1613.93 683.513 L1613.37 683.513 L1612.81 683.513 L1612.25 683.513 L1611.69 683.513 L1611.13 683.513 L1610.57 683.513 L1610.02 683.513 L1609.46 683.513 L1608.9 683.513 L1608.34 683.513 L1607.78 683.513 L1607.22 683.513 L1606.66 683.513 L1606.1 683.513 L1605.54 683.513 L1604.98 683.513 L1604.42 683.513 L1603.86 683.513 L1603.3 683.513 L1602.74 683.513 L1602.19 683.513 L1601.63 683.513 L1601.07 683.513 L1600.51 683.513 L1599.95 683.513 L1599.39 683.513 L1598.83 683.513 L1598.27 683.513 L1597.71 683.513 L1597.15 683.513 L1596.59 683.513 L1596.03 683.513 L1595.47 683.513 L1594.92 683.513 L1594.36 683.513 L1593.8 683.513 L1593.24 683.513 L1592.68 683.513 L1592.12 683.513 L1591.56 683.513 L1591 683.513 L1590.44 683.513 L1589.88 683.513 L1589.32 683.513 L1588.76 683.513 L1588.2 683.513 L1587.65 683.513 L1587.09 683.513 L1586.53 683.513 L1585.97 683.513 L1585.41 683.513 L1584.85 683.513 L1584.29 683.513 L1583.73 683.513 L1583.17 683.513 L1582.61 683.513 L1582.05 683.513 L1581.49 683.513 L1580.93 683.513 L1580.37 683.513 L1579.82 683.513 L1579.26 683.513 L1578.7 683.513 L1578.14 683.513 L1577.58 683.513 L1577.02 683.513 L1576.46 683.513 L1575.9 683.513 L1575.34 683.513 L1574.78 683.513 L1574.22 683.513 L1573.66 683.513 L1573.1 683.513 L1572.55 683.513 L1571.99 683.513 L1571.43 683.513 L1570.87 683.513 L1570.31 683.513 L1569.75 683.513 L1569.19 683.513 L1568.63 683.513 L1568.07 683.513 L1567.51 683.513 L1566.95 683.513 L1566.39 683.513 L1565.83 683.513 L1565.28 683.513 L1564.72 683.513 L1564.16 683.513 L1563.6 683.513 L1563.04 683.513 L1562.48 683.513 L1561.92 683.513 L1561.36 683.513 L1560.8 683.513 L1560.24 683.513 L1559.68 683.513 L1559.12 683.513 L1558.56 683.513 L1558 683.513 L1557.45 683.513 L1556.89 683.513 L1556.33 683.513 L1555.77 683.513 L1555.21 683.513 L1554.65 683.513 L1554.09 683.513 L1553.53 683.513 L1552.97 683.513 L1552.41 683.513 L1551.85 683.513 L1551.29 683.513 L1550.73 683.513 L1550.18 683.513 L1549.62 683.513 L1549.06 683.513 L1548.5 683.513 L1547.94 683.513 L1547.38 683.513 L1546.82 683.513 L1546.26 683.513 L1545.7 683.513 L1545.14 683.513 L1544.58 683.513 L1544.02 683.513 L1543.46 683.513 L1542.9 683.513 L1542.35 683.513 L1541.79 683.513 L1541.23 683.513 L1540.67 683.513 L1540.11 683.513 L1539.55 683.513 L1538.99 683.513 L1538.43 683.513 L1537.87 683.513 L1537.31 683.513 L1536.75 683.513 L1536.19 683.513 L1535.63 683.513 L1535.08 683.513 L1534.52 683.513 L1533.96 683.513 L1533.4 683.513 L1532.84 683.513 L1532.28 683.513 L1531.72 683.513 L1531.16 683.513 L1530.6 683.513 L1530.04 683.513 L1529.48 683.513 L1528.92 683.513 L1528.36 683.513 L1527.81 683.513 L1527.25 683.513 L1526.69 683.513 L1526.13 683.513 L1525.57 683.513 L1525.01 683.513 L1524.45 683.513 L1523.89 683.513 L1523.33 683.513 L1522.77 683.513 L1522.21 683.513 L1521.65 683.513 L1521.09 683.513 L1520.53 683.513 L1519.98 683.513 L1519.42 683.513 L1518.86 683.513 L1518.3 683.513 L1517.74 683.513 L1517.18 683.513 L1516.62 683.513 L1516.06 683.513 L1515.5 683.513 L1514.94 683.513 L1514.38 683.513 L1513.82 683.513 L1513.26 683.513 L1512.71 683.513 L1512.15 683.513 L1511.59 683.513 L1511.03 683.513 L1510.47 683.513 L1509.91 683.513 L1509.35 683.513 L1508.79 683.513 L1508.23 683.513 L1507.67 683.513 L1507.11 683.513 L1506.55 683.513 L1505.99 683.513 L1505.44 683.513 L1504.88 683.513 L1504.32 683.513 L1503.76 683.513 L1503.2 683.513 L1502.64 683.513 L1502.08 683.513 L1501.52 683.513 L1500.96 683.513 L1500.4 683.513 L1499.84 683.513 L1499.28 683.513 L1498.72 683.513 L1498.16 683.513 L1497.61 683.513 L1497.05 683.513 L1496.49 683.513 L1495.93 683.513 L1495.37 683.513 L1494.81 683.513 L1494.25 683.513 L1493.69 683.513 L1493.13 683.513 L1492.57 683.513 L1492.01 683.513 L1491.45 683.513 L1490.89 683.513 L1490.34 683.513 L1489.78 683.513 L1489.22 683.513 L1488.66 683.513 L1488.1 683.513 L1487.54 683.513 L1486.98 683.513 L1486.42 683.513 L1485.86 683.513 L1485.3 683.513 L1484.74 683.513 L1484.18 683.513 L1483.62 683.513 L1483.07 683.513 L1482.51 683.513 L1481.95 683.513 L1481.39 683.513 L1480.83 683.513 L1480.27 683.513 L1479.71 683.513 L1479.15 683.513 L1478.59 683.513 L1478.03 683.513 L1477.47 683.513 L1476.91 683.513 L1476.35 683.513 L1475.79 683.513 L1475.24 683.513 L1474.68 683.513 L1474.12 683.513 L1473.56 683.513 L1473 683.513 L1472.44 683.513 L1471.88 683.513 L1471.32 683.513 L1470.76 683.513 L1470.2 683.513 L1469.64 683.513 L1469.08 683.513 L1468.52 683.513 L1467.97 683.513 L1467.41 683.513 L1466.85 683.513 L1466.29 683.513 L1465.73 683.513 L1465.17 683.513 L1464.61 683.513 L1464.05 683.513 L1463.49 683.513 L1462.93 683.513 L1462.37 683.513 L1461.81 683.513 L1461.25 683.513 L1460.7 683.513 L1460.14 683.513 L1459.58 683.513 L1459.02 683.513 L1458.46 683.513 L1457.9 683.513 L1457.34 683.513 L1456.78 683.513 L1456.22 683.513 L1455.66 683.513 L1455.1 683.513 L1454.54 683.513 L1453.98 683.513 L1453.42 683.513 L1452.87 683.513 L1452.31 683.513 L1451.75 683.513 L1451.19 683.513 L1450.63 683.513 L1450.07 683.513 L1449.51 683.513 L1448.95 683.513 L1448.39 683.513 L1447.83 683.513 L1447.27 683.513 L1446.71 683.513 L1446.15 683.513 L1445.6 683.513 L1445.04 683.513 L1444.48 683.513 L1443.92 683.513 L1443.36 683.513 L1442.8 683.513 L1442.24 683.513 L1441.68 683.513 L1441.12 683.513 L1440.56 683.513 L1440 683.513 L1439.44 683.513 L1438.88 683.513 L1438.33 683.513 L1437.77 683.513 L1437.21 683.513 L1436.65 683.513 L1436.09 683.513 L1435.53 683.513 L1434.97 683.513 L1434.41 683.513 L1433.85 683.513 L1433.29 683.513 L1432.73 683.513 L1432.17 683.513 L1431.61 683.513 L1431.05 683.513 L1430.5 683.513 L1429.94 683.513 L1429.38 683.513 L1428.82 683.513 L1428.26 683.513 L1427.7 683.513 L1427.14 683.513 L1426.58 683.513 L1426.02 683.513 L1425.46 683.513 L1424.9 683.513 L1424.34 683.513 L1423.78 683.513 L1423.23 683.513 L1422.67 683.513 L1422.11 683.513 L1421.55 683.513 L1420.99 683.513 L1420.43 683.513 L1419.87 683.513 L1419.31 683.513 L1418.75 683.513 L1418.19 683.513 L1417.63 683.513 L1417.07 683.513 L1416.51 683.513 L1415.95 683.513 L1415.4 683.513 L1414.84 683.513 L1414.28 683.513 L1413.72 683.513 L1413.16 683.513 L1412.6 683.513 L1412.04 683.513 L1411.48 683.513 L1410.92 683.513 L1410.36 683.513 L1409.8 683.513 L1409.24 683.513 L1408.68 683.513 L1408.13 683.513 L1407.57 683.513 L1407.01 683.513 L1406.45 683.513 L1405.89 683.513 L1405.33 683.513 L1404.77 683.513 L1404.21 683.513 L1403.65 683.513 L1403.09 683.513 L1402.53 683.513 L1401.97 683.513 L1401.41 683.513 L1400.86 683.513 L1400.3 683.513 L1399.74 683.513 L1399.18 683.513 L1398.62 683.513 L1398.06 683.513 L1397.5 683.513 L1396.94 683.513 L1396.38 683.513 L1395.82 683.513 L1395.26 683.513 L1394.7 683.513 L1394.14 683.513 L1393.58 683.513 L1393.03 683.513 L1392.47 683.513 L1391.91 683.513 L1391.35 683.513 L1390.79 683.513 L1390.23 683.513 L1389.67 683.513 L1389.11 683.513 L1388.55 683.513 L1387.99 683.513 L1387.43 683.513 L1386.87 683.513 L1386.31 683.513 L1385.76 683.513 L1385.2 683.513 L1384.64 683.513 L1384.08 683.513 L1383.52 683.513 L1382.96 683.513 L1382.4 683.513 L1381.84 683.513 L1381.28 683.513 L1380.72 683.513 L1380.16 683.513 L1379.6 683.513 L1379.04 683.513 L1378.49 683.513 L1377.93 683.513 L1377.37 683.513 L1376.81 683.513 L1376.25 683.513 L1375.69 683.513 L1375.13 683.513 L1374.57 683.513 L1374.01 683.513 L1373.45 683.513 L1372.89 683.513 L1372.33 683.513 L1371.77 683.513 L1371.21 683.513 L1370.66 683.513 L1370.1 683.513 L1369.54 683.513 L1368.98 683.513 L1368.42 683.513 L1367.86 683.513 L1367.3 683.513 L1366.74 683.513 L1366.18 683.513 L1365.62 683.513 L1365.06 683.513 L1364.5 683.513 L1363.94 683.513 L1363.39 683.513 L1362.83 683.513 L1362.27 683.513 L1361.71 683.513 L1361.15 683.513 L1360.59 683.513 L1360.03 683.513 L1359.47 683.513 L1358.91 683.513 L1358.35 683.513 L1357.79 683.513 L1357.23 683.513 L1356.67 683.513 L1356.12 683.513 L1355.56 683.513 L1355 683.513 L1354.44 683.513 L1353.88 683.513 L1353.32 683.513 L1352.76 683.513 L1352.2 683.513 L1351.64 683.513 L1351.08 683.513 L1350.52 683.513 L1349.96 683.513 L1349.4 683.513 L1348.84 683.513 L1348.29 683.513 L1347.73 683.513 L1347.17 683.513 L1346.61 683.513 L1346.05 683.513 L1345.49 683.513 L1344.93 683.513 L1344.37 683.513 L1343.81 683.513 L1343.25 683.513 L1342.69 683.513 L1342.13 683.513 L1341.57 683.513 L1341.02 683.513 L1340.46 683.513 L1339.9 683.513 L1339.34 683.513 L1338.78 683.513 L1338.22 683.513 L1337.66 683.513 L1337.1 683.513 L1336.54 683.513 L1335.98 683.513 L1335.42 683.513 L1334.86 683.513 L1334.3 683.513 L1333.75 683.513 L1333.19 683.513 L1332.63 683.513 L1332.07 683.513 L1331.51 683.513 L1330.95 683.513 L1330.39 683.513 L1329.83 683.513 L1329.27 683.513 L1328.71 683.513 L1328.15 683.513 L1327.59 683.513 L1327.03 683.513 L1326.47 683.513 L1325.92 683.513 L1325.36 683.513 L1324.8 683.513 L1324.24 683.513 L1323.68 683.513 L1323.12 683.513 L1322.56 683.513 L1322 683.513 L1321.44 683.513 L1320.88 683.513 L1320.32 683.513 L1319.76 683.513 L1319.2 683.513 L1318.65 683.513 L1318.09 683.513 L1317.53 683.513 L1316.97 683.513 L1316.41 683.513 L1315.85 683.513 L1315.29 683.513 L1314.73 683.513 L1314.17 683.513 L1313.61 683.513 L1313.05 683.513 L1312.49 683.513 L1311.93 683.513 L1311.38 683.513 L1310.82 683.513 L1310.26 683.513 L1309.7 683.513 L1309.14 683.513 L1308.58 683.513 L1308.02 683.513 L1307.46 683.513 L1306.9 683.513 L1306.34 683.513 L1305.78 683.513 L1305.22 683.513 L1304.66 683.513 L1304.1 683.513 L1303.55 683.513 L1302.99 683.513 L1302.43 683.513 L1301.87 683.513 L1301.31 683.513 L1300.75 683.513 L1300.19 683.513 L1299.63 683.513 L1299.07 683.513 L1298.51 683.513 L1297.95 683.513 L1297.39 683.513 L1296.83 683.513 L1296.28 683.513 L1295.72 683.513 L1295.16 683.513 L1294.6 683.513 L1294.04 683.513 L1293.48 683.513 L1292.92 683.513 L1292.36 683.513 L1291.8 683.513 L1291.24 683.513 L1290.68 683.513 L1290.12 683.513 L1289.56 683.513 L1289 683.513 L1288.45 683.513 L1287.89 683.513 L1287.33 683.513 L1286.77 683.513 L1286.21 683.513 L1285.65 683.513 L1285.09 683.513 L1284.53 683.513 L1283.97 683.513 L1283.41 683.513 L1282.85 683.513 L1282.29 683.513 L1281.73 683.513 L1281.18 683.513 L1280.62 683.513 L1280.06 683.513 L1279.5 683.513 L1278.94 683.513 L1278.38 683.513 L1277.82 683.513 L1277.26 683.513 L1276.7 683.513 L1276.14 683.513 L1275.58 683.513 L1275.02 683.513 L1274.46 683.513 L1273.91 683.513 L1273.35 683.513 L1272.79 683.513 L1272.23 683.513 L1271.67 683.513 L1271.11 683.513 L1270.55 683.513 L1269.99 683.513 L1269.43 683.513 L1268.87 683.513 L1268.31 683.513 L1267.75 683.513 L1267.19 683.513 L1266.63 683.513 L1266.08 683.513 L1265.52 683.513 L1264.96 683.513 L1264.4 683.513 L1263.84 683.513 L1263.28 683.513 L1262.72 683.513 L1262.16 683.513 L1261.6 683.513 L1261.04 683.513 L1260.48 683.513 L1259.92 683.513 L1259.36 683.513 L1258.81 683.513 L1258.25 683.513 L1257.69 683.513 L1257.13 683.513 L1256.57 683.513 L1256.01 683.513 L1255.45 683.513 L1254.89 683.513 L1254.33 683.513 L1253.77 683.513 L1253.21 683.513 L1252.65 683.513 L1252.09 683.513 L1251.54 683.513 L1250.98 683.513 L1250.42 683.513 L1249.86 683.513 L1249.3 683.513 L1248.74 683.513 L1248.18 683.513 L1247.62 683.513 L1247.06 683.513 L1246.5 683.513 L1245.94 683.513 L1245.38 683.513 L1244.82 683.513 L1244.26 683.513 L1243.71 683.513 L1243.15 683.513 L1242.59 683.513 L1242.03 683.513 L1241.47 683.513 L1240.91 683.513 L1240.35 683.513 L1239.79 683.513 L1239.23 683.513 L1238.67 683.513 L1238.11 683.513 L1237.55 683.513 L1236.99 683.513 L1236.44 683.513 L1235.88 683.513 L1235.32 683.513 L1234.76 683.513 L1234.2 683.513 L1233.64 683.513 L1233.08 683.513 L1232.52 683.513 L1231.96 683.513 L1231.4 683.513 L1230.84 683.513 L1230.28 683.513 L1229.72 683.513 L1229.17 683.513 L1228.61 683.513 L1228.05 683.513 L1227.49 683.513 L1226.93 683.513 L1226.37 683.513 L1225.81 683.513 L1225.25 683.513 L1224.69 683.513 L1224.13 683.513 L1223.57 683.513 L1223.01 683.513 L1222.45 683.513 L1221.89 683.513 L1221.34 683.513 L1220.78 683.513 L1220.22 683.513 L1219.66 683.513 L1219.1 683.513 L1218.54 683.513 L1217.98 683.513 L1217.42 683.513 L1216.86 683.513 L1216.3 683.513 L1215.74 683.513 L1215.18 683.513 L1214.62 683.513 L1214.07 683.513 L1213.51 683.513 L1212.95 683.513 L1212.39 683.513 L1211.83 683.513 L1211.27 683.513 L1210.71 683.513 L1210.15 683.513 L1209.59 683.513 L1209.03 683.513 L1208.47 683.513 L1207.91 683.513 L1207.35 683.513 L1206.8 683.513 L1206.24 683.513 L1205.68 683.513 L1205.12 683.513 L1204.56 683.513 L1204 683.513 L1203.44 683.513 L1202.88 683.513 L1202.32 683.513 L1201.76 683.513 L1201.2 683.513 L1200.64 683.513 L1200.08 683.513 L1199.52 683.513 L1198.97 683.513 L1198.41 683.513 L1197.85 683.513 L1197.29 683.513 L1196.73 683.513 L1196.17 683.513 L1195.61 683.513 L1195.05 683.513 L1194.49 683.513 L1193.93 683.513 L1193.37 683.513 L1192.81 683.513 L1192.25 683.513 L1191.7 683.513 L1191.14 683.513 L1190.58 683.513 L1190.02 683.513 L1189.46 683.513 L1188.9 683.513 L1188.34 683.513 L1187.78 683.513 L1187.22 683.513 L1186.66 683.513 L1186.1 683.513 L1185.54 683.513 L1184.98 683.513 L1184.43 683.513 L1183.87 683.513 L1183.31 683.513 L1182.75 683.513 L1182.19 683.513 L1181.63 683.513 L1181.07 683.513 L1180.51 683.513 L1179.95 683.513 L1179.39 683.513 L1178.83 683.513 L1178.27 683.513 L1177.71 683.513 L1177.15 683.513 L1176.6 683.513 L1176.04 683.513 L1175.48 683.513 L1174.92 683.513 L1174.36 683.513 L1173.8 683.513 L1173.24 683.513 L1172.68 683.513 L1172.12 683.513 L1171.56 683.513 L1171 683.513 L1170.44 683.513 L1169.88 683.513 L1169.33 683.513 L1168.77 683.513 L1168.21 683.513 L1167.65 683.513 L1167.09 683.513 L1166.53 683.513 L1165.97 683.513 L1165.41 683.513 L1164.85 683.513 L1164.29 683.513 L1163.73 683.513 L1163.17 683.513 L1162.61 683.513 L1162.05 683.513 L1161.5 683.513 L1160.94 683.513 L1160.38 683.513 L1159.82 683.513 L1159.26 683.513 L1158.7 683.513 L1158.14 683.513 L1157.58 683.513 L1157.02 683.513 L1156.46 683.513 L1155.9 683.513 L1155.34 683.513 L1154.78 683.513 L1154.23 683.513 L1153.67 683.513 L1153.11 683.513 L1152.55 683.513 L1151.99 683.513 L1151.43 683.513 L1150.87 683.513 L1150.31 683.513 L1149.75 683.513 L1149.19 683.513 L1148.63 683.513 L1148.07 683.513 L1147.51 683.513 L1146.96 683.513 L1146.4 683.513 L1145.84 683.513 L1145.28 683.513 L1144.72 683.513 L1144.16 683.513 L1143.6 683.513 L1143.04 683.513 L1142.48 683.513 L1141.92 683.513 L1141.36 683.513 L1140.8 683.513 L1140.24 683.513 L1139.68 683.513 L1139.13 683.513 L1138.57 683.513 L1138.01 683.513 L1137.45 683.513 L1136.89 683.513 L1136.33 683.513 L1135.77 683.513 L1135.21 683.513 L1134.65 683.513 L1134.09 683.513 L1133.53 683.513 L1132.97 683.513 L1132.41 683.513 L1131.86 683.513 L1131.3 683.513 L1130.74 683.513 L1130.18 683.513 L1129.62 683.513 L1129.06 683.513 L1128.5 683.513 L1127.94 683.513 L1127.38 683.513 L1126.82 683.513 L1126.26 683.513 L1125.7 683.513 L1125.14 683.513 L1124.59 683.513 L1124.03 683.513 L1123.47 683.513 L1122.91 683.513 L1122.35 683.513 L1121.79 683.513 L1121.23 683.513 L1120.67 683.513 L1120.11 683.513 L1119.55 683.513 L1118.99 683.513 L1118.43 683.513 L1117.87 683.513 L1117.31 683.513 L1116.76 683.513 L1116.2 683.513 L1115.64 683.513 L1115.08 683.513 L1114.52 683.513 L1113.96 683.513 L1113.4 683.513 L1112.84 683.513 L1112.28 683.513 L1111.72 683.513 L1111.16 683.513 L1110.6 683.513 L1110.04 683.513 L1109.49 683.513 L1108.93 683.513 L1108.37 683.513 L1107.81 683.513 L1107.25 683.513 L1106.69 683.513 L1106.13 683.513 L1105.57 683.513 L1105.01 683.513 L1104.45 683.513 L1103.89 683.513 L1103.33 683.513 L1102.77 683.513 L1102.22 683.513 L1101.66 683.513 L1101.1 683.513 L1100.54 683.513 L1099.98 683.513 L1099.42 683.513 L1098.86 683.513 L1098.3 683.513 L1097.74 683.513 L1097.18 683.513 L1096.62 683.513 L1096.06 683.513 L1095.5 683.513 L1094.94 683.513 L1094.39 683.513 L1093.83 683.513 L1093.27 683.513 L1092.71 683.513 L1092.15 683.513 L1091.59 683.513 L1091.03 683.513 L1090.47 683.513 L1089.91 683.513 L1089.35 683.513 L1088.79 683.513 L1088.23 683.513 L1087.67 683.513 L1087.12 683.513 L1086.56 683.513 L1086 683.513 L1085.44 683.513 L1084.88 683.513 L1084.32 683.513 L1083.76 683.513 L1083.2 683.513 L1082.64 683.513 L1082.08 683.513 L1081.52 683.513 L1080.96 683.513 L1080.4 683.513 L1079.85 683.513 L1079.29 683.513 L1078.73 683.513 L1078.17 683.513 L1077.61 683.513 L1077.05 683.513 L1076.49 683.513 L1075.93 683.513 L1075.37 683.513 L1074.81 683.513 L1074.25 683.513 L1073.69 683.513 L1073.13 683.513 L1072.57 683.513 L1072.02 683.513 L1071.46 683.513 L1070.9 683.513 L1070.34 683.513 L1069.78 683.513 L1069.22 683.513 L1068.66 683.513 L1068.1 683.513 L1067.54 683.513 L1066.98 683.513 L1066.42 683.513 L1065.86 683.513 L1065.3 683.513 L1064.75 683.513 L1064.19 683.513 L1063.63 683.513 L1063.07 683.513 L1062.51 683.513 L1061.95 683.513 L1061.39 683.513 L1060.83 683.513 L1060.27 683.513 L1059.71 683.513 L1059.15 683.513 L1058.59 683.513 L1058.03 683.513 L1057.48 683.513 L1056.92 683.513 L1056.36 683.513 L1055.8 683.513 L1055.24 683.513 L1054.68 683.513 L1054.12 683.513 L1053.56 683.513 L1053 683.513 L1052.44 683.513 L1051.88 683.513 L1051.32 683.513 L1050.76 683.513 L1050.2 683.513 L1049.65 683.513 L1049.09 683.513 L1048.53 683.513 L1047.97 683.513 L1047.41 683.513 L1046.85 683.513 L1046.29 683.513 L1045.73 683.513 L1045.17 683.513 L1044.61 683.513 L1044.05 683.513 L1043.49 683.513 L1042.93 683.513 L1042.38 683.513 L1041.82 683.513 L1041.26 683.513 L1040.7 683.513 L1040.14 683.513 L1039.58 683.513 L1039.02 683.513 L1038.46 683.513 L1037.9 683.513 L1037.34 683.513 L1036.78 683.513 L1036.22 683.513 L1035.66 683.513 L1035.1 683.513 L1034.55 683.513 L1033.99 683.513 L1033.43 683.513 L1032.87 683.513 L1032.31 683.513 L1031.75 683.513 L1031.19 683.513 L1030.63 683.513 L1030.07 683.513 L1029.51 683.513 L1028.95 683.513 L1028.39 683.513 L1027.83 683.513 L1027.28 683.513 L1026.72 683.513 L1026.16 683.513 L1025.6 683.513 L1025.04 683.513 L1024.48 683.513 L1023.92 683.513 L1023.36 683.513 L1022.8 683.513 L1022.24 683.513 L1021.68 683.513 L1021.12 683.513 L1020.56 683.513 L1020.01 683.513 L1019.45 683.513 L1018.89 683.513 L1018.33 683.513 L1017.77 683.513 L1017.21 683.513 L1016.65 683.513 L1016.09 683.513 L1015.53 683.513 L1014.97 683.513 L1014.41 683.513 L1013.85 683.513 L1013.29 683.513 L1012.73 683.513 L1012.18 683.513 L1011.62 683.513 L1011.06 683.513 L1010.5 683.513 L1009.94 683.513 L1009.38 683.513 L1008.82 683.513 L1008.26 683.513 L1007.7 683.513 L1007.14 683.513 L1006.58 683.513 L1006.02 683.513 L1005.46 683.513 L1004.91 683.513 L1004.35 683.513 L1003.79 683.513 L1003.23 683.513 L1002.67 683.513 L1002.11 683.513 L1001.55 683.513 L1000.99 683.513 L1000.43 683.513 L999.872 683.513 L999.313 683.513 L998.754 683.513 L998.194 683.513 L997.635 683.513 L997.076 683.513 L996.517 683.513 L995.957 683.513 L995.398 683.513 L994.839 683.513 L994.28 683.513 L993.72 683.513 L993.161 683.513 L992.602 683.513 L992.043 683.513 L991.483 683.513 L990.924 683.513 L990.365 683.513 L989.806 683.513 L989.246 683.513 L988.687 683.513 L988.128 683.513 L987.569 683.513 L987.009 683.513 L986.45 683.513 L985.891 683.513 L985.332 683.513 L984.772 683.513 L984.213 683.513 L983.654 683.513 L983.095 683.513 L982.535 683.513 L981.976 683.513 L981.417 683.513 L980.858 683.513 L980.298 683.513 L979.739 683.513 L979.18 683.513 L978.621 683.513 L978.061 683.513 L977.502 683.513 L976.943 683.513 L976.384 683.513 L975.824 683.513 L975.265 683.513 L974.706 683.513 L974.147 683.513 L973.587 683.513 L973.028 683.513 L972.469 683.513 L971.91 683.513 L971.35 683.513 L970.791 683.513 L970.232 683.513 L969.673 683.513 L969.113 683.513 L968.554 683.513 L967.995 683.513 L967.436 683.513 L966.876 683.513 L966.317 683.513 L965.758 683.513 L965.199 683.513 L964.639 683.513 L964.08 683.513 L963.521 683.513 L962.962 683.513 L962.402 683.513 L961.843 683.513 L961.284 683.513 L960.725 683.513 L960.165 683.513 L959.606 683.513 L959.047 683.513 L958.488 683.513 L957.928 683.513 L957.369 683.513 L956.81 683.513 L956.251 683.513 L955.691 683.513 L955.132 683.513 L954.573 683.513 L954.014 683.513 L953.454 683.513 L952.895 683.513 L952.336 683.513 L951.777 683.513 L951.217 683.513 L950.658 683.513 L950.099 683.513 L949.54 683.513 L948.98 683.513 L948.421 683.513 L947.862 683.513 L947.303 683.513 L946.743 683.513 L946.184 683.513 L945.625 683.513 L945.066 683.513 L944.506 683.513 L943.947 683.513 L943.388 683.513 L942.829 683.513 L942.269 683.513 L941.71 683.513 L941.151 683.513 L940.592 683.513 L940.032 683.513 L939.473 683.513 L938.914 683.513 L938.355 683.513 L937.795 683.513 L937.236 683.513 L936.677 683.513 L936.118 683.513 L935.558 683.513 L934.999 683.513 L934.44 683.513 L933.881 683.513 L933.321 683.513 L932.762 683.513 L932.203 683.513 L931.644 683.513 L931.084 683.513 L930.525 683.513 L929.966 683.513 L929.406 683.513 L928.847 683.513 L928.288 683.513 L927.729 683.513 L927.169 683.513 L926.61 683.513 L926.051 683.513 L925.492 683.513 L924.932 683.513 L924.373 683.513 L923.814 683.513 L923.255 683.513 L922.695 683.513 L922.136 683.513 L921.577 683.513 L921.018 683.513 L920.458 683.513 L919.899 683.513 L919.34 683.513 L918.781 683.513 L918.221 683.513 L917.662 683.513 L917.103 683.513 L916.544 683.513 L915.984 683.513 L915.425 683.513 L914.866 683.513 L914.307 683.513 L913.747 683.513 L913.188 683.513 L912.629 683.513 L912.07 683.513 L911.51 683.513 L910.951 683.513 L910.392 683.513 L909.833 683.513 L909.273 683.513 L908.714 683.513 L908.155 683.513 L907.596 683.513 L907.036 683.513 L906.477 683.513 L905.918 683.513 L905.359 683.513 L904.799 683.513 L904.24 683.513 L903.681 683.513 L903.122 683.513 L902.562 683.513 L902.003 683.513 L901.444 683.513 L900.885 683.513 L900.325 683.513 L899.766 683.513 L899.207 683.513 L898.648 683.513 L898.088 683.513 L897.529 683.513 L896.97 683.513 L896.411 683.513 L895.851 683.513 L895.292 683.513 L894.733 683.513 L894.174 683.513 L893.614 683.513 L893.055 683.513 L892.496 683.513 L891.937 683.513 L891.377 683.513 L890.818 683.513 L890.259 683.513 L889.7 683.513 L889.14 683.513 L888.581 683.513 L888.022 683.513 L887.463 683.513 L886.903 683.513 L886.344 683.513 L885.785 683.513 L885.226 683.513 L884.666 683.513 L884.107 683.513 L883.548 683.513 L882.989 683.513 L882.429 683.513 L881.87 683.513 L881.311 683.513 L880.752 683.513 L880.192 683.513 L879.633 683.513 L879.074 683.513 L878.515 683.513 L877.955 683.513 L877.396 683.513 L876.837 683.513 L876.278 683.513 L875.718 683.513 L875.159 683.513 L874.6 683.513 L874.041 683.513 L873.481 683.513 L872.922 683.513 L872.363 683.513 L871.804 683.513 L871.244 683.513 L870.685 683.513 L870.126 683.513 L869.567 683.513 L869.007 683.513 L868.448 683.513 L867.889 683.513 L867.33 683.513 L866.77 683.513 L866.211 683.513 L865.652 683.513 L865.093 683.513 L864.533 683.513 L863.974 683.513 L863.415 683.513 L862.856 683.513 L862.296 683.513 L861.737 683.513 L861.178 683.513 L860.619 683.513 L860.059 683.513 L859.5 683.513 L858.941 683.513 L858.382 683.513 L857.822 683.513 L857.263 683.513 L856.704 683.513 L856.145 683.513 L855.585 683.513 L855.026 683.513 L854.467 683.513 L853.908 683.513 L853.348 683.513 L852.789 683.513 L852.23 683.513 L851.671 683.513 L851.111 683.513 L850.552 683.513 L849.993 683.513 L849.434 683.513 L848.874 683.513 L848.315 683.513 L847.756 683.513 L847.197 683.513 L846.637 683.513 L846.078 683.513 L845.519 683.513 L844.96 683.513 L844.4 683.513 L843.841 683.513 L843.282 683.513 L842.723 683.513 L842.163 683.513 L841.604 683.513 L841.045 683.513 L840.486 683.513 L839.926 683.513 L839.367 683.513 L838.808 683.513 L838.249 683.513 L837.689 683.513 L837.13 683.513 L836.571 683.513 L836.012 683.513 L835.452 683.513 L834.893 683.513 L834.334 683.513 L833.775 683.513 L833.215 683.513 L832.656 683.513 L832.097 683.513 L831.538 683.513 L830.978 683.513 L830.419 683.513 L829.86 683.513 L829.301 683.513 L828.741 683.513 L828.182 683.513 L827.623 683.513 L827.064 683.513 L826.504 683.513 L825.945 683.513 L825.386 683.513 L824.827 683.513 L824.267 683.513 L823.708 683.513 L823.149 683.513 L822.59 683.513 L822.03 683.513 L821.471 683.513 L820.912 683.513 L820.353 683.513 L819.793 683.513 L819.234 683.513 L818.675 683.513 L818.116 683.513 L817.556 683.513 L816.997 683.513 L816.438 683.513 L815.879 683.513 L815.319 683.513 L814.76 683.513 L814.201 683.513 L813.642 683.513 L813.082 683.513 L812.523 683.513 L811.964 683.513 L811.405 683.513 L810.845 683.513 L810.286 683.513 L809.727 683.513 L809.168 683.513 L808.608 683.513 L808.049 683.513 L807.49 683.513 L806.931 683.513 L806.371 683.513 L805.812 683.513 L805.253 683.513 L804.693 683.513 L804.134 683.513 L803.575 683.513 L803.016 683.513 L802.456 683.513 L801.897 683.513 L801.338 683.513 L800.779 683.513 L800.219 683.513 L799.66 683.513 L799.101 683.513 L798.542 683.513 L797.982 683.513 L797.423 683.513 L796.864 683.513 L796.305 683.513 L795.745 683.513 L795.186 683.513 L794.627 683.513 L794.068 683.513 L793.508 683.513 L792.949 683.513 L792.39 683.513 L791.831 683.513 L791.271 683.513 L790.712 683.513 L790.153 683.513 L789.594 683.513 L789.034 683.513 L788.475 683.513 L787.916 683.513 L787.357 683.513 L786.797 683.513 L786.238 683.513 L785.679 683.513 L785.12 683.513 L784.56 683.513 L784.001 683.513 L783.442 683.513 L782.883 683.513 L782.323 683.513 L781.764 683.513 L781.205 683.513 L780.646 683.513 L780.086 683.513 L779.527 683.513 L778.968 683.513 L778.409 683.513 L777.849 683.513 L777.29 683.513 L776.731 683.513 L776.172 683.513 L775.612 683.513 L775.053 683.513 L774.494 683.513 L773.935 683.513 L773.375 683.513 L772.816 683.513 L772.257 683.513 L771.698 683.513 L771.138 683.513 L770.579 683.513 L770.02 683.513 L769.461 683.513 L768.901 683.513 L768.342 683.513 L767.783 683.513 L767.224 683.513 L766.664 683.513 L766.105 683.513 L765.546 683.513 L764.987 683.513 L764.427 683.513 L763.868 683.513 L763.309 683.513 L762.75 683.513 L762.19 683.513 L761.631 683.513 L761.072 683.513 L760.513 683.513 L759.953 683.513 L759.394 683.513 L758.835 683.513 L758.276 683.513 L757.716 683.513 L757.157 683.513 L756.598 683.513 L756.039 683.513 L755.479 683.513 L754.92 683.513 L754.361 683.513 L753.802 683.513 L753.242 683.513 L752.683 683.513 L752.124 683.513 L751.565 683.513 L751.005 683.513 L750.446 683.513 L749.887 683.513 L749.328 683.513 L748.768 683.513 L748.209 683.513 L747.65 683.513 L747.091 683.513 L746.531 683.513 L745.972 683.513 L745.413 683.513 L744.854 683.513 L744.294 683.513 L743.735 683.513 L743.176 683.513 L742.617 683.513 L742.057 683.513 L741.498 683.513 L740.939 683.513 L740.38 683.513 L739.82 683.513 L739.261 683.513 L738.702 683.513 L738.143 683.513 L737.583 683.513 L737.024 683.513 L736.465 683.513 L735.906 683.513 L735.346 683.513 L734.787 683.513 L734.228 683.513 L733.669 683.513 L733.109 683.513 L732.55 683.513 L731.991 683.513 L731.432 683.513 L730.872 683.513 L730.313 683.513 L729.754 683.513 L729.195 683.513 L728.635 683.513 L728.076 683.513 L727.517 683.513 L726.958 683.513 L726.398 683.513 L725.839 683.513 L725.28 683.513 L724.721 683.513 L724.161 683.513 L723.602 683.513 L723.043 683.513 L722.484 683.513 L721.924 683.513 L721.365 683.513 L720.806 683.513 L720.247 683.513  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.531 720.806,687.531 721.365,687.531 721.924,687.531 722.484,687.531 723.043,687.531 723.602,687.531 724.161,687.531 724.721,687.531 725.28,687.531 725.839,687.531 726.398,687.531 726.958,687.531 727.517,687.531 728.076,687.531 728.635,687.531 729.195,687.531 729.754,687.531 730.313,687.531 730.872,687.531 731.432,687.531 731.991,687.531 732.55,687.531 733.109,687.531 733.669,687.531 734.228,687.531 734.787,687.531 735.346,687.531 735.906,687.531 736.465,687.531 737.024,687.531 737.583,687.531 738.143,687.531 738.702,687.531 739.261,687.531 739.82,687.531 740.38,687.531 740.939,687.531 741.498,687.531 742.057,687.531 742.617,687.531 743.176,687.531 743.735,687.531 744.294,687.531 744.854,687.531 745.413,687.531 745.972,687.531 746.531,687.531 747.091,687.531 747.65,687.531 748.209,687.531 748.768,687.531 749.328,687.531 749.887,687.531 750.446,687.531 751.005,687.531 751.565,687.531 752.124,687.531 752.683,687.531 753.242,687.531 753.802,687.531 754.361,687.531 754.92,687.531 755.479,687.531 756.039,687.531 756.598,687.531 757.157,687.531 757.716,687.531 758.276,687.531 758.835,687.531 759.394,687.531 759.953,687.531 760.513,687.531 761.072,687.531 761.631,687.531 762.19,687.531 762.75,687.531 763.309,687.531 763.868,687.531 764.427,687.531 764.987,687.531 765.546,687.531 766.105,687.531 766.664,687.531 767.224,687.531 767.783,687.531 768.342,687.531 768.901,687.531 769.461,687.531 770.02,687.531 770.579,687.531 771.138,687.531 771.698,687.531 772.257,687.531 772.816,687.531 773.375,687.531 773.935,687.531 774.494,687.531 775.053,687.531 775.612,687.531 776.172,687.531 776.731,687.531 777.29,687.531 777.849,687.531 778.409,687.531 778.968,687.531 779.527,687.531 780.086,687.531 780.646,687.531 781.205,687.531 781.764,687.531 782.323,687.531 782.883,687.531 783.442,687.531 784.001,687.531 784.56,687.531 785.12,687.531 785.679,687.531 786.238,687.531 786.797,687.531 787.357,687.531 787.916,687.531 788.475,687.531 789.034,687.531 789.594,687.531 790.153,687.531 790.712,687.531 791.271,687.531 791.831,687.531 792.39,687.531 792.949,687.531 793.508,687.531 794.068,687.531 794.627,687.531 795.186,687.531 795.745,687.531 796.305,687.531 796.864,687.531 797.423,687.531 797.982,687.531 798.542,687.531 799.101,687.531 799.66,687.531 800.219,687.531 800.779,687.531 801.338,687.531 801.897,687.531 802.456,687.531 803.016,687.531 803.575,687.531 804.134,687.531 804.693,687.531 805.253,687.531 805.812,687.531 806.371,687.531 806.931,687.531 807.49,687.531 808.049,687.531 808.608,687.531 809.168,687.531 809.727,687.531 810.286,687.531 810.845,687.531 811.405,687.531 811.964,687.531 812.523,687.531 813.082,687.531 813.642,687.531 814.201,687.531 814.76,687.531 815.319,687.531 815.879,687.531 816.438,687.531 816.997,687.531 817.556,687.531 818.116,687.531 818.675,687.531 819.234,687.531 819.793,687.531 820.353,687.531 820.912,687.531 821.471,687.531 822.03,687.531 822.59,687.531 823.149,687.531 823.708,687.531 824.267,687.531 824.827,687.531 825.386,687.531 825.945,687.531 826.504,687.531 827.064,687.531 827.623,687.531 828.182,687.531 828.741,687.531 829.301,687.531 829.86,687.531 830.419,687.531 830.978,687.531 831.538,687.531 832.097,687.531 832.656,687.531 833.215,687.531 833.775,687.531 834.334,687.531 834.893,687.531 835.452,687.531 836.012,687.531 836.571,687.531 837.13,687.531 837.689,687.531 838.249,687.531 838.808,687.531 839.367,687.531 839.926,687.531 840.486,687.531 841.045,687.531 841.604,687.531 842.163,687.531 842.723,687.531 843.282,687.531 843.841,687.531 844.4,687.531 844.96,687.531 845.519,687.531 846.078,687.531 846.637,687.531 847.197,687.531 847.756,687.531 848.315,687.531 848.874,687.531 849.434,687.531 849.993,687.531 850.552,687.531 851.111,687.531 851.671,687.531 852.23,687.531 852.789,687.531 853.348,687.531 853.908,687.531 854.467,687.531 855.026,687.531 855.585,687.531 856.145,687.531 856.704,687.531 857.263,687.531 857.822,687.531 858.382,687.531 858.941,687.531 859.5,687.531 860.059,687.531 860.619,687.531 861.178,687.531 861.737,687.531 862.296,687.531 862.856,687.531 863.415,687.531 863.974,687.531 864.533,687.531 865.093,687.531 865.652,687.531 866.211,687.531 866.77,687.531 867.33,687.531 867.889,687.531 868.448,687.531 869.007,687.531 869.567,687.531 870.126,687.531 870.685,687.531 871.244,687.531 871.804,687.531 872.363,687.531 872.922,687.531 873.481,687.531 874.041,687.531 874.6,687.531 875.159,687.531 875.718,687.531 876.278,687.531 876.837,687.531 877.396,687.531 877.955,687.531 878.515,687.531 879.074,687.531 879.633,687.531 880.192,687.531 880.752,687.531 881.311,687.531 881.87,687.531 882.429,687.531 882.989,687.531 883.548,687.531 884.107,687.531 884.666,687.531 885.226,687.531 885.785,687.531 886.344,687.531 886.903,687.531 887.463,687.531 888.022,687.531 888.581,687.531 889.14,687.531 889.7,687.531 890.259,687.531 890.818,687.531 891.377,687.531 891.937,687.531 892.496,687.531 893.055,687.531 893.614,687.531 894.174,687.531 894.733,687.531 895.292,687.531 895.851,687.531 896.411,687.531 896.97,687.531 897.529,687.531 898.088,687.531 898.648,687.531 899.207,687.531 899.766,687.531 900.325,687.531 900.885,687.531 901.444,687.531 902.003,687.531 902.562,687.531 903.122,687.531 903.681,687.531 904.24,687.531 904.799,687.531 905.359,687.531 905.918,687.531 906.477,687.531 907.036,687.531 907.596,687.531 908.155,687.531 908.714,687.531 909.273,687.531 909.833,687.531 910.392,687.531 910.951,687.531 911.51,687.531 912.07,687.531 912.629,687.531 913.188,687.531 913.747,687.531 914.307,687.531 914.866,687.531 915.425,687.531 915.984,687.531 916.544,687.531 917.103,687.531 917.662,687.531 918.221,687.531 918.781,687.531 919.34,687.531 919.899,687.531 920.458,687.531 921.018,687.531 921.577,687.531 922.136,687.531 922.695,687.531 923.255,687.531 923.814,687.531 924.373,687.531 924.932,687.531 925.492,687.531 926.051,687.531 926.61,687.531 927.169,687.531 927.729,687.531 928.288,687.531 928.847,687.531 929.406,687.531 929.966,687.531 930.525,687.531 931.084,687.531 931.644,687.531 932.203,687.531 932.762,687.531 933.321,687.531 933.881,687.531 934.44,687.531 934.999,687.531 935.558,687.531 936.118,687.531 936.677,687.531 937.236,687.531 937.795,687.531 938.355,687.531 938.914,687.531 939.473,687.531 940.032,687.531 940.592,687.531 941.151,687.531 941.71,687.531 942.269,687.531 942.829,687.531 943.388,687.531 943.947,687.531 944.506,687.531 945.066,687.531 945.625,687.531 946.184,687.531 946.743,687.531 947.303,687.531 947.862,687.531 948.421,687.531 948.98,687.531 949.54,687.531 950.099,687.531 950.658,687.531 951.217,687.531 951.777,687.531 952.336,687.531 952.895,687.531 953.454,687.531 954.014,687.531 954.573,687.531 955.132,687.531 955.691,687.531 956.251,687.531 956.81,687.531 957.369,687.531 957.928,687.531 958.488,687.531 959.047,687.531 959.606,687.531 960.165,687.531 960.725,687.531 961.284,687.531 961.843,687.531 962.402,687.531 962.962,687.531 963.521,687.531 964.08,687.531 964.639,687.531 965.199,687.531 965.758,687.531 966.317,687.531 966.876,687.531 967.436,687.531 967.995,687.531 968.554,687.531 969.113,687.531 969.673,687.531 970.232,687.531 970.791,687.531 971.35,687.531 971.91,687.531 972.469,687.531 973.028,687.531 973.587,687.531 974.147,687.531 974.706,687.531 975.265,687.531 975.824,687.531 976.384,687.531 976.943,687.531 977.502,687.531 978.061,687.531 978.621,687.531 979.18,687.531 979.739,687.531 980.298,687.531 980.858,687.531 981.417,687.531 981.976,687.531 982.535,687.531 983.095,687.531 983.654,687.531 984.213,687.531 984.772,687.531 985.332,687.531 985.891,687.531 986.45,687.531 987.009,687.531 987.569,687.531 988.128,687.531 988.687,687.531 989.246,687.531 989.806,687.531 990.365,687.531 990.924,687.531 991.483,687.531 992.043,687.531 992.602,687.531 993.161,687.531 993.72,687.531 994.28,687.531 994.839,687.531 995.398,687.531 995.957,687.531 996.517,687.531 997.076,687.531 997.635,687.531 998.194,687.531 998.754,687.531 999.313,687.531 999.872,687.531 1000.43,687.531 1000.99,687.531 1001.55,687.531 1002.11,687.531 1002.67,687.531 1003.23,687.531 1003.79,687.531 1004.35,687.531 1004.91,687.531 1005.46,687.531 1006.02,687.531 1006.58,687.531 1007.14,687.531 1007.7,687.531 1008.26,687.531 1008.82,687.531 1009.38,687.531 1009.94,687.531 1010.5,687.531 1011.06,687.531 1011.62,687.531 1012.18,687.531 1012.73,687.531 1013.29,687.531 1013.85,687.531 1014.41,687.531 1014.97,687.531 1015.53,687.531 1016.09,687.531 1016.65,687.531 1017.21,687.531 1017.77,687.531 1018.33,687.531 1018.89,687.531 1019.45,687.531 1020.01,687.531 1020.56,687.531 1021.12,687.531 1021.68,687.531 1022.24,687.531 1022.8,687.531 1023.36,687.531 1023.92,687.531 1024.48,687.531 1025.04,687.531 1025.6,687.531 1026.16,687.531 1026.72,687.531 1027.28,687.531 1027.83,687.531 1028.39,687.531 1028.95,687.531 1029.51,687.531 1030.07,687.531 1030.63,687.531 1031.19,687.531 1031.75,687.531 1032.31,687.531 1032.87,687.531 1033.43,687.531 1033.99,687.531 1034.55,687.531 1035.1,687.531 1035.66,687.531 1036.22,687.531 1036.78,687.531 1037.34,687.531 1037.9,687.531 1038.46,687.531 1039.02,687.531 1039.58,687.531 1040.14,687.531 1040.7,687.531 1041.26,687.531 1041.82,687.531 1042.38,687.531 1042.93,687.531 1043.49,687.531 1044.05,687.531 1044.61,687.531 1045.17,687.531 1045.73,687.531 1046.29,687.531 1046.85,687.531 1047.41,687.531 1047.97,687.531 1048.53,687.531 1049.09,687.531 1049.65,687.531 1050.2,687.531 1050.76,687.531 1051.32,687.531 1051.88,687.531 1052.44,687.531 1053,687.531 1053.56,687.531 1054.12,687.531 1054.68,687.531 1055.24,687.531 1055.8,687.531 1056.36,687.531 1056.92,687.531 1057.48,687.531 1058.03,687.531 1058.59,687.531 1059.15,687.531 1059.71,687.531 1060.27,687.531 1060.83,687.531 1061.39,687.531 1061.95,687.531 1062.51,687.531 1063.07,687.531 1063.63,687.531 1064.19,687.531 1064.75,687.531 1065.3,687.531 1065.86,687.531 1066.42,687.531 1066.98,687.531 1067.54,687.531 1068.1,687.531 1068.66,687.531 1069.22,687.531 1069.78,687.531 1070.34,687.531 1070.9,687.531 1071.46,687.531 1072.02,687.531 1072.57,687.531 1073.13,687.531 1073.69,687.531 1074.25,687.531 1074.81,687.531 1075.37,687.531 1075.93,687.531 1076.49,687.531 1077.05,687.531 1077.61,687.531 1078.17,687.531 1078.73,687.531 1079.29,687.531 1079.85,687.531 1080.4,687.531 1080.96,687.531 1081.52,687.531 1082.08,687.531 1082.64,687.531 1083.2,687.531 1083.76,687.531 1084.32,687.531 1084.88,687.531 1085.44,687.531 1086,687.531 1086.56,687.531 1087.12,687.531 1087.67,687.531 1088.23,687.531 1088.79,687.531 1089.35,687.531 1089.91,687.531 1090.47,687.531 1091.03,687.531 1091.59,687.531 1092.15,687.531 1092.71,687.531 1093.27,687.531 1093.83,687.531 1094.39,687.531 1094.94,687.531 1095.5,687.531 1096.06,687.531 1096.62,687.531 1097.18,687.531 1097.74,687.531 1098.3,687.531 1098.86,687.531 1099.42,687.531 1099.98,687.531 1100.54,687.531 1101.1,687.531 1101.66,687.531 1102.22,687.531 1102.77,687.531 1103.33,687.531 1103.89,687.531 1104.45,687.531 1105.01,687.531 1105.57,687.531 1106.13,687.531 1106.69,687.531 1107.25,687.531 1107.81,687.531 1108.37,687.531 1108.93,687.531 1109.49,687.531 1110.04,687.531 1110.6,687.531 1111.16,687.531 1111.72,687.531 1112.28,687.531 1112.84,687.531 1113.4,687.531 1113.96,687.531 1114.52,687.531 1115.08,687.531 1115.64,687.531 1116.2,687.531 1116.76,687.531 1117.31,687.531 1117.87,687.531 1118.43,687.531 1118.99,687.531 1119.55,687.531 1120.11,687.531 1120.67,687.531 1121.23,687.531 1121.79,687.531 1122.35,687.531 1122.91,687.531 1123.47,687.531 1124.03,687.531 1124.59,687.531 1125.14,687.531 1125.7,687.531 1126.26,687.531 1126.82,687.531 1127.38,687.531 1127.94,687.531 1128.5,687.531 1129.06,687.531 1129.62,687.531 1130.18,687.531 1130.74,687.531 1131.3,687.531 1131.86,687.531 1132.41,687.531 1132.97,687.531 1133.53,687.531 1134.09,687.531 1134.65,687.531 1135.21,687.531 1135.77,687.531 1136.33,687.531 1136.89,687.531 1137.45,687.531 1138.01,687.531 1138.57,687.531 1139.13,687.531 1139.68,687.531 1140.24,687.531 1140.8,687.531 1141.36,687.531 1141.92,687.531 1142.48,687.531 1143.04,687.531 1143.6,687.531 1144.16,687.531 1144.72,687.531 1145.28,687.531 1145.84,687.531 1146.4,687.531 1146.96,687.531 1147.51,687.531 1148.07,687.531 1148.63,687.531 1149.19,687.531 1149.75,687.531 1150.31,687.531 1150.87,687.531 1151.43,687.531 1151.99,687.531 1152.55,687.531 1153.11,687.531 1153.67,687.531 1154.23,687.531 1154.78,687.531 1155.34,687.531 1155.9,687.531 1156.46,687.531 1157.02,687.531 1157.58,687.531 1158.14,687.531 1158.7,687.531 1159.26,687.531 1159.82,687.531 1160.38,687.531 1160.94,687.531 1161.5,687.531 1162.05,687.531 1162.61,687.531 1163.17,687.531 1163.73,687.531 1164.29,687.531 1164.85,687.531 1165.41,687.531 1165.97,687.531 1166.53,687.531 1167.09,687.531 1167.65,687.531 1168.21,687.531 1168.77,687.531 1169.33,687.531 1169.88,687.531 1170.44,687.531 1171,687.531 1171.56,687.531 1172.12,687.531 1172.68,687.531 1173.24,687.531 1173.8,687.531 1174.36,687.531 1174.92,687.531 1175.48,687.531 1176.04,687.531 1176.6,687.531 1177.15,687.531 1177.71,687.531 1178.27,687.531 1178.83,687.531 1179.39,687.531 1179.95,687.531 1180.51,687.531 1181.07,687.531 1181.63,687.531 1182.19,687.531 1182.75,687.531 1183.31,687.531 1183.87,687.531 1184.43,687.531 1184.98,687.531 1185.54,687.531 1186.1,687.531 1186.66,687.531 1187.22,687.531 1187.78,687.531 1188.34,687.531 1188.9,687.531 1189.46,687.531 1190.02,687.531 1190.58,687.531 1191.14,687.531 1191.7,687.531 1192.25,687.531 1192.81,687.531 1193.37,687.531 1193.93,687.531 1194.49,687.531 1195.05,687.531 1195.61,687.531 1196.17,687.531 1196.73,687.531 1197.29,687.531 1197.85,687.531 1198.41,687.531 1198.97,687.531 1199.52,687.531 1200.08,687.531 1200.64,687.531 1201.2,687.531 1201.76,687.531 1202.32,687.531 1202.88,687.531 1203.44,687.531 1204,687.531 1204.56,687.531 1205.12,687.531 1205.68,687.531 1206.24,687.531 1206.8,687.531 1207.35,687.531 1207.91,687.531 1208.47,687.531 1209.03,687.531 1209.59,687.531 1210.15,687.531 1210.71,687.531 1211.27,687.531 1211.83,687.531 1212.39,687.531 1212.95,687.531 1213.51,687.531 1214.07,687.531 1214.62,687.531 1215.18,687.531 1215.74,687.531 1216.3,687.531 1216.86,687.531 1217.42,687.531 1217.98,687.531 1218.54,687.531 1219.1,687.531 1219.66,687.531 1220.22,687.531 1220.78,687.531 1221.34,687.531 1221.89,687.531 1222.45,687.531 1223.01,687.531 1223.57,687.531 1224.13,687.531 1224.69,687.531 1225.25,687.531 1225.81,687.531 1226.37,687.531 1226.93,687.531 1227.49,687.531 1228.05,687.531 1228.61,687.531 1229.17,687.531 1229.72,687.531 1230.28,687.531 1230.84,687.531 1231.4,687.531 1231.96,687.531 1232.52,687.531 1233.08,687.531 1233.64,687.531 1234.2,687.531 1234.76,687.531 1235.32,687.531 1235.88,687.531 1236.44,687.531 1236.99,687.531 1237.55,687.531 1238.11,687.531 1238.67,687.531 1239.23,687.531 1239.79,687.531 1240.35,687.531 1240.91,687.531 1241.47,687.531 1242.03,687.531 1242.59,687.531 1243.15,687.531 1243.71,687.531 1244.26,687.531 1244.82,687.531 1245.38,687.531 1245.94,687.531 1246.5,687.531 1247.06,687.531 1247.62,687.531 1248.18,687.531 1248.74,687.531 1249.3,687.531 1249.86,687.531 1250.42,687.531 1250.98,687.531 1251.54,687.531 1252.09,687.531 1252.65,687.531 1253.21,687.531 1253.77,687.531 1254.33,687.531 1254.89,687.531 1255.45,687.531 1256.01,687.531 1256.57,687.531 1257.13,687.531 1257.69,687.531 1258.25,687.531 1258.81,687.531 1259.36,687.531 1259.92,687.531 1260.48,687.531 1261.04,687.531 1261.6,687.531 1262.16,687.531 1262.72,687.531 1263.28,687.531 1263.84,687.531 1264.4,687.531 1264.96,687.531 1265.52,687.531 1266.08,687.531 1266.63,687.531 1267.19,687.531 1267.75,687.531 1268.31,687.531 1268.87,687.531 1269.43,687.531 1269.99,687.531 1270.55,687.531 1271.11,687.531 1271.67,687.531 1272.23,687.531 1272.79,687.531 1273.35,687.531 1273.91,687.531 1274.46,687.531 1275.02,687.531 1275.58,687.531 1276.14,687.531 1276.7,687.531 1277.26,687.531 1277.82,687.531 1278.38,687.531 1278.94,687.531 1279.5,687.531 1280.06,687.531 1280.62,687.531 1281.18,687.531 1281.73,687.531 1282.29,687.531 1282.85,687.531 1283.41,687.531 1283.97,687.531 1284.53,687.531 1285.09,687.531 1285.65,687.531 1286.21,687.531 1286.77,687.531 1287.33,687.531 1287.89,687.531 1288.45,687.531 1289,687.531 1289.56,687.531 1290.12,687.531 1290.68,687.531 1291.24,687.531 1291.8,687.531 1292.36,687.531 1292.92,687.531 1293.48,687.531 1294.04,687.531 1294.6,687.531 1295.16,687.531 1295.72,687.531 1296.28,687.531 1296.83,687.531 1297.39,687.531 1297.95,687.531 1298.51,687.531 1299.07,687.531 1299.63,687.531 1300.19,687.531 1300.75,687.531 1301.31,687.531 1301.87,687.531 1302.43,687.531 1302.99,687.531 1303.55,687.531 1304.1,687.531 1304.66,687.531 1305.22,687.531 1305.78,687.531 1306.34,687.531 1306.9,687.531 1307.46,687.531 1308.02,687.531 1308.58,687.531 1309.14,687.531 1309.7,687.531 1310.26,687.531 1310.82,687.531 1311.38,687.531 1311.93,687.531 1312.49,687.531 1313.05,687.531 1313.61,687.531 1314.17,687.531 1314.73,687.531 1315.29,687.531 1315.85,687.531 1316.41,687.531 1316.97,687.531 1317.53,687.531 1318.09,687.531 1318.65,687.531 1319.2,687.531 1319.76,687.531 1320.32,687.531 1320.88,687.531 1321.44,687.531 1322,687.531 1322.56,687.531 1323.12,687.531 1323.68,687.531 1324.24,687.531 1324.8,687.531 1325.36,687.531 1325.92,687.531 1326.47,687.531 1327.03,687.531 1327.59,687.531 1328.15,687.531 1328.71,687.531 1329.27,687.531 1329.83,687.531 1330.39,687.531 1330.95,687.531 1331.51,687.531 1332.07,687.531 1332.63,687.531 1333.19,687.531 1333.75,687.531 1334.3,687.531 1334.86,687.531 1335.42,687.531 1335.98,687.531 1336.54,687.531 1337.1,687.531 1337.66,687.531 1338.22,687.531 1338.78,687.531 1339.34,687.531 1339.9,687.531 1340.46,687.531 1341.02,687.531 1341.57,687.531 1342.13,687.531 1342.69,687.531 1343.25,687.531 1343.81,687.531 1344.37,687.531 1344.93,687.531 1345.49,687.531 1346.05,687.531 1346.61,687.531 1347.17,687.531 1347.73,687.531 1348.29,687.531 1348.84,687.531 1349.4,687.531 1349.96,687.531 1350.52,687.531 1351.08,687.531 1351.64,687.531 1352.2,687.531 1352.76,687.531 1353.32,687.531 1353.88,687.531 1354.44,687.531 1355,687.531 1355.56,687.531 1356.12,687.531 1356.67,687.531 1357.23,687.531 1357.79,687.531 1358.35,687.531 1358.91,687.531 1359.47,687.531 1360.03,687.531 1360.59,687.531 1361.15,687.531 1361.71,687.531 1362.27,687.531 1362.83,687.531 1363.39,687.531 1363.94,687.531 1364.5,687.531 1365.06,687.531 1365.62,687.531 1366.18,687.531 1366.74,687.531 1367.3,687.531 1367.86,687.531 1368.42,687.531 1368.98,687.531 1369.54,687.531 1370.1,687.531 1370.66,687.531 1371.21,687.531 1371.77,687.531 1372.33,687.531 1372.89,687.531 1373.45,687.531 1374.01,687.531 1374.57,687.531 1375.13,687.531 1375.69,687.531 1376.25,687.531 1376.81,687.531 1377.37,687.531 1377.93,687.531 1378.49,687.531 1379.04,687.531 1379.6,687.531 1380.16,687.531 1380.72,687.531 1381.28,687.531 1381.84,687.531 1382.4,687.531 1382.96,687.531 1383.52,687.531 1384.08,687.531 1384.64,687.531 1385.2,687.531 1385.76,687.531 1386.31,687.531 1386.87,687.531 1387.43,687.531 1387.99,687.531 1388.55,687.531 1389.11,687.531 1389.67,687.531 1390.23,687.531 1390.79,687.531 1391.35,687.531 1391.91,687.531 1392.47,687.531 1393.03,687.531 1393.58,687.531 1394.14,687.531 1394.7,687.531 1395.26,687.531 1395.82,687.531 1396.38,687.531 1396.94,687.531 1397.5,687.531 1398.06,687.531 1398.62,687.531 1399.18,687.531 1399.74,687.531 1400.3,687.531 1400.86,687.531 1401.41,687.531 1401.97,687.531 1402.53,687.531 1403.09,687.531 1403.65,687.531 1404.21,687.531 1404.77,687.531 1405.33,687.531 1405.89,687.531 1406.45,687.531 1407.01,687.531 1407.57,687.531 1408.13,687.531 1408.68,687.531 1409.24,687.531 1409.8,687.531 1410.36,687.531 1410.92,687.531 1411.48,687.531 1412.04,687.531 1412.6,687.531 1413.16,687.531 1413.72,687.531 1414.28,687.531 1414.84,687.531 1415.4,687.531 1415.95,687.531 1416.51,687.531 1417.07,687.531 1417.63,687.531 1418.19,687.531 1418.75,687.531 1419.31,687.531 1419.87,687.531 1420.43,687.531 1420.99,687.531 1421.55,687.531 1422.11,687.531 1422.67,687.531 1423.23,687.531 1423.78,687.531 1424.34,687.531 1424.9,687.531 1425.46,687.531 1426.02,687.531 1426.58,687.531 1427.14,687.531 1427.7,687.531 1428.26,687.531 1428.82,687.531 1429.38,687.531 1429.94,687.531 1430.5,687.531 1431.05,687.531 1431.61,687.531 1432.17,687.531 1432.73,687.531 1433.29,687.531 1433.85,687.531 1434.41,687.531 1434.97,687.531 1435.53,687.531 1436.09,687.531 1436.65,687.531 1437.21,687.531 1437.77,687.531 1438.33,687.531 1438.88,687.531 1439.44,687.531 1440,687.531 1440.56,687.531 1441.12,687.531 1441.68,687.531 1442.24,687.531 1442.8,687.531 1443.36,687.531 1443.92,687.531 1444.48,687.531 1445.04,687.531 1445.6,687.531 1446.15,687.531 1446.71,687.531 1447.27,687.531 1447.83,687.531 1448.39,687.531 1448.95,687.531 1449.51,687.531 1450.07,687.531 1450.63,687.531 1451.19,687.531 1451.75,687.531 1452.31,687.531 1452.87,687.531 1453.42,687.531 1453.98,687.531 1454.54,687.531 1455.1,687.531 1455.66,687.531 1456.22,687.531 1456.78,687.531 1457.34,687.531 1457.9,687.531 1458.46,687.531 1459.02,687.531 1459.58,687.531 1460.14,687.531 1460.7,687.531 1461.25,687.531 1461.81,687.531 1462.37,687.531 1462.93,687.531 1463.49,687.531 1464.05,687.531 1464.61,687.531 1465.17,687.531 1465.73,687.531 1466.29,687.531 1466.85,687.531 1467.41,687.531 1467.97,687.531 1468.52,687.531 1469.08,687.531 1469.64,687.531 1470.2,687.531 1470.76,687.531 1471.32,687.531 1471.88,687.531 1472.44,687.531 1473,687.531 1473.56,687.531 1474.12,687.531 1474.68,687.531 1475.24,687.531 1475.79,687.531 1476.35,687.531 1476.91,687.531 1477.47,687.531 1478.03,687.531 1478.59,687.531 1479.15,687.531 1479.71,687.531 1480.27,687.531 1480.83,687.531 1481.39,687.531 1481.95,687.531 1482.51,687.531 1483.07,687.531 1483.62,687.531 1484.18,687.531 1484.74,687.531 1485.3,687.531 1485.86,687.531 1486.42,687.531 1486.98,687.531 1487.54,687.531 1488.1,687.531 1488.66,687.531 1489.22,687.531 1489.78,687.531 1490.34,687.531 1490.89,687.531 1491.45,687.531 1492.01,687.531 1492.57,687.531 1493.13,687.531 1493.69,687.531 1494.25,687.531 1494.81,687.531 1495.37,687.531 1495.93,687.531 1496.49,687.531 1497.05,687.531 1497.61,687.531 1498.16,687.531 1498.72,687.531 1499.28,687.531 1499.84,687.531 1500.4,687.531 1500.96,687.531 1501.52,687.531 1502.08,687.531 1502.64,687.531 1503.2,687.531 1503.76,687.531 1504.32,687.531 1504.88,687.531 1505.44,687.531 1505.99,687.531 1506.55,687.531 1507.11,687.531 1507.67,687.531 1508.23,687.531 1508.79,687.531 1509.35,687.531 1509.91,687.531 1510.47,687.531 1511.03,687.531 1511.59,687.531 1512.15,687.531 1512.71,687.531 1513.26,687.531 1513.82,687.531 1514.38,687.531 1514.94,687.531 1515.5,687.531 1516.06,687.531 1516.62,687.531 1517.18,687.531 1517.74,687.531 1518.3,687.531 1518.86,687.531 1519.42,687.531 1519.98,687.531 1520.53,687.531 1521.09,687.531 1521.65,687.531 1522.21,687.531 1522.77,687.531 1523.33,687.531 1523.89,687.531 1524.45,687.531 1525.01,687.531 1525.57,687.531 1526.13,687.531 1526.69,687.531 1527.25,687.531 1527.81,687.531 1528.36,687.531 1528.92,687.531 1529.48,687.531 1530.04,687.531 1530.6,687.531 1531.16,687.531 1531.72,687.531 1532.28,687.531 1532.84,687.531 1533.4,687.531 1533.96,687.531 1534.52,687.531 1535.08,687.531 1535.63,687.531 1536.19,687.531 1536.75,687.531 1537.31,687.531 1537.87,687.531 1538.43,687.531 1538.99,687.531 1539.55,687.531 1540.11,687.531 1540.67,687.531 1541.23,687.531 1541.79,687.531 1542.35,687.531 1542.9,687.531 1543.46,687.531 1544.02,687.531 1544.58,687.531 1545.14,687.531 1545.7,687.531 1546.26,687.531 1546.82,687.531 1547.38,687.531 1547.94,687.531 1548.5,687.531 1549.06,687.531 1549.62,687.531 1550.18,687.531 1550.73,687.531 1551.29,687.531 1551.85,687.531 1552.41,687.531 1552.97,687.531 1553.53,687.531 1554.09,687.531 1554.65,687.531 1555.21,687.531 1555.77,687.531 1556.33,687.531 1556.89,687.531 1557.45,687.531 1558,687.531 1558.56,687.531 1559.12,687.531 1559.68,687.531 1560.24,687.531 1560.8,687.531 1561.36,687.531 1561.92,687.531 1562.48,687.531 1563.04,687.531 1563.6,687.531 1564.16,687.531 1564.72,687.531 1565.28,687.531 1565.83,687.531 1566.39,687.531 1566.95,687.531 1567.51,687.531 1568.07,687.531 1568.63,687.531 1569.19,687.531 1569.75,687.531 1570.31,687.531 1570.87,687.531 1571.43,687.531 1571.99,687.531 1572.55,687.531 1573.1,687.531 1573.66,687.531 1574.22,687.531 1574.78,687.531 1575.34,687.531 1575.9,687.531 1576.46,687.531 1577.02,687.531 1577.58,687.531 1578.14,687.531 1578.7,687.531 1579.26,687.531 1579.82,687.531 1580.37,687.531 1580.93,687.531 1581.49,687.531 1582.05,687.531 1582.61,687.531 1583.17,687.531 1583.73,687.531 1584.29,687.531 1584.85,687.531 1585.41,687.531 1585.97,687.531 1586.53,687.531 1587.09,687.531 1587.65,687.531 1588.2,687.531 1588.76,687.531 1589.32,687.531 1589.88,687.531 1590.44,687.531 1591,687.531 1591.56,687.531 1592.12,687.531 1592.68,687.531 1593.24,687.531 1593.8,687.531 1594.36,687.531 1594.92,687.531 1595.47,687.531 1596.03,687.531 1596.59,687.531 1597.15,687.531 1597.71,687.531 1598.27,687.531 1598.83,687.531 1599.39,687.531 1599.95,687.531 1600.51,687.531 1601.07,687.531 1601.63,687.531 1602.19,687.531 1602.74,687.531 1603.3,687.531 1603.86,687.531 1604.42,687.531 1604.98,687.531 1605.54,687.531 1606.1,687.531 1606.66,687.531 1607.22,687.531 1607.78,687.531 1608.34,687.531 1608.9,687.531 1609.46,687.531 1610.02,687.531 1610.57,687.531 1611.13,687.531 1611.69,687.531 1612.25,687.531 1612.81,687.531 1613.37,687.531 1613.93,687.531 1614.49,687.531 1615.05,687.531 1615.61,687.531 1616.17,687.531 1616.73,687.531 1617.29,687.531 1617.84,687.531 1618.4,687.531 1618.96,687.531 1619.52,687.531 1620.08,687.531 1620.64,687.531 1621.2,687.531 1621.76,687.531 1622.32,687.531 1622.88,687.531 1623.44,687.531 1624,687.531 1624.56,687.531 1625.11,687.531 1625.67,687.531 1626.23,687.531 1626.79,687.531 1627.35,687.531 1627.91,687.531 1628.47,687.531 1629.03,687.531 1629.59,687.531 1630.15,687.531 1630.71,687.531 1631.27,687.531 1631.83,687.531 1632.39,687.531 1632.94,687.531 1633.5,687.531 1634.06,687.531 1634.62,687.531 1635.18,687.531 1635.74,687.531 1636.3,687.531 1636.86,687.531 1637.42,687.531 1637.98,687.531 1638.54,687.531 1639.1,687.531 1639.66,687.531 1640.21,687.531 1640.77,687.531 1641.33,687.531 1641.89,687.531 1642.45,687.531 1643.01,687.531 1643.57,687.531 1644.13,687.531 1644.69,687.531 1645.25,687.531 1645.81,687.531 1646.37,687.531 1646.93,687.531 1647.48,687.531 1648.04,687.531 1648.6,687.531 1649.16,687.531 1649.72,687.531 1650.28,687.531 1650.84,687.531 1651.4,687.531 1651.96,687.531 1652.52,687.531 1653.08,687.531 1653.64,687.531 1654.2,687.531 1654.76,687.531 1655.31,687.531 1655.87,687.531 1656.43,687.531 1656.99,687.531 1657.55,687.531 1658.11,687.531 1658.67,687.531 1659.23,687.531 1659.79,687.531 1660.35,687.531 1660.91,687.531 1661.47,687.531 1662.03,687.531 1662.58,687.531 1663.14,687.531 1663.7,687.531 1664.26,687.531 1664.82,687.531 1665.38,687.531 1665.94,687.531 1666.5,687.531 1667.06,687.531 1667.62,687.531 1668.18,687.531 1668.74,687.531 1669.3,687.531 1669.85,687.531 1670.41,687.531 1670.97,687.531 1671.53,687.531 1672.09,687.531 1672.65,687.531 1673.21,687.531 1673.77,687.531 1674.33,687.531 1674.89,687.531 1675.45,687.531 1676.01,687.531 1676.57,687.531 1677.13,687.531 1677.68,687.531 1678.24,687.531 1678.8,687.531 1679.36,687.531 1679.92,687.531 1680.48,687.531 1681.04,687.531 1681.6,687.531 1682.16,687.531 1682.72,687.531 1683.28,687.531 1683.84,687.531 1684.4,687.531 1684.95,687.531 1685.51,687.531 1686.07,687.531 1686.63,687.531 1687.19,687.531 1687.75,687.531 1688.31,687.531 1688.87,687.531 1689.43,687.531 1689.99,687.531 1690.55,687.531 1691.11,687.531 1691.67,687.531 1692.23,687.531 1692.78,687.531 1693.34,687.531 1693.9,687.531 1694.46,687.531 1695.02,687.531 1695.58,687.531 1696.14,687.531 1696.7,687.531 1697.26,687.531 1697.82,687.531 1698.38,687.531 1698.94,687.531 1699.5,687.531 1700.05,687.531 1700.61,687.531 1701.17,687.531 1701.73,687.531 1702.29,687.531 1702.85,687.531 1703.41,687.531 1703.97,687.531 1704.53,687.531 1705.09,687.531 1705.65,687.531 1706.21,687.531 1706.77,687.531 1707.32,687.531 1707.88,687.531 1708.44,687.531 1709,687.531 1709.56,687.531 1710.12,687.531 1710.68,687.531 1711.24,687.531 1711.8,687.531 1712.36,687.531 1712.92,687.531 1713.48,687.531 1714.04,687.531 1714.6,687.531 1715.15,687.531 1715.71,687.531 1716.27,687.531 1716.83,687.531 1717.39,687.531 1717.95,687.531 1718.51,687.531 1719.07,687.531 1719.63,687.531 1720.19,687.531 1720.75,687.531 1721.31,687.531 1721.87,687.531 1722.42,687.531 1722.98,687.531 1723.54,687.531 1724.1,687.531 1724.66,687.531 1725.22,687.531 1725.78,687.531 1726.34,687.531 1726.9,687.531 1727.46,687.531 1728.02,687.531 1728.58,687.531 1729.14,687.531 1729.69,687.531 1730.25,687.531 1730.81,687.531 1731.37,687.531 1731.93,687.531 1732.49,687.531 1733.05,687.531 1733.61,687.531 1734.17,687.531 1734.73,687.531 1735.29,687.531 1735.85,687.531 1736.41,687.531 1736.97,687.531 1737.52,687.531 1738.08,687.531 1738.64,687.531 1739.2,687.531 1739.76,687.531 1740.32,687.531 1740.88,687.531 1741.44,687.531 1742,687.531 1742.56,687.531 1743.12,687.531 1743.68,687.531 1744.24,687.531 1744.79,687.531 1745.35,687.531 1745.91,687.531 1746.47,687.531 1747.03,687.531 1747.59,687.531 1748.15,687.531 1748.71,687.531 1749.27,687.531 1749.83,687.531 1750.39,687.531 1750.95,687.531 1751.51,687.531 1752.06,687.531 1752.62,687.531 1753.18,687.531 1753.74,687.531 1754.3,687.531 1754.86,687.531 1755.42,687.531 1755.98,687.531 1756.54,687.531 1757.1,687.531 1757.66,687.531 1758.22,687.531 1758.78,687.531 1759.34,687.531 1759.89,687.531 1760.45,687.531 1761.01,687.531 1761.57,687.531 1762.13,687.531 1762.69,687.531 1763.25,687.531 1763.81,687.531 1764.37,687.531 1764.93,687.531 1765.49,687.531 1766.05,687.531 1766.61,687.531 1767.16,687.531 1767.72,687.531 1768.28,687.531 1768.84,687.531 1769.4,687.531 1769.96,687.531 1770.52,687.531 1771.08,687.531 1771.64,687.531 1772.2,687.531 1772.76,687.531 1773.32,687.531 1773.88,687.531 1774.43,687.531 1774.99,687.531 1775.55,687.531 1776.11,687.531 1776.67,687.531 1777.23,687.531 1777.79,687.531 1778.35,687.531 1778.91,687.531 1779.47,687.531 1780.03,687.531 1780.59,687.531 1781.15,687.531 1781.71,687.531 1782.26,687.531 1782.82,687.531 1783.38,687.531 1783.94,687.531 1784.5,687.531 1785.06,687.531 1785.62,687.531 1786.18,687.531 1786.74,687.531 1787.3,687.531 1787.86,687.531 1788.42,687.531 1788.98,687.531 1789.53,687.531 1790.09,687.531 1790.65,687.531 1791.21,687.531 1791.77,687.531 1792.33,687.531 1792.89,687.531 1793.45,687.531 1794.01,687.531 1794.57,687.531 1795.13,687.531 1795.69,687.531 1796.25,687.531 1796.8,687.531 1797.36,687.531 1797.92,687.531 1798.48,687.531 1799.04,687.531 1799.6,687.531 1800.16,687.531 1800.72,687.531 1801.28,687.531 1801.84,687.531 1802.4,687.531 1802.96,687.531 1803.52,687.531 1804.08,687.531 1804.63,687.531 1805.19,687.531 1805.75,687.531 1806.31,687.531 1806.87,687.531 1807.43,687.531 1807.99,687.531 1808.55,687.531 1809.11,687.531 1809.67,687.531 1810.23,687.531 1810.79,687.531 1811.35,687.531 1811.9,687.531 1812.46,687.531 1813.02,687.531 1813.58,687.531 1814.14,687.531 1814.7,687.531 1815.26,687.531 1815.82,687.531 1816.38,687.531 1816.94,687.531 1817.5,687.531 1818.06,687.531 1818.62,687.531 1819.18,687.531 1819.73,687.531 1820.29,687.531 1820.85,687.531 1821.41,687.531 1821.97,687.531 1822.53,687.531 1823.09,687.531 1823.65,687.531 1824.21,687.531 1824.77,687.531 1825.33,687.531 1825.89,687.531 1826.45,687.531 1827,687.531 1827.56,687.531 1828.12,687.531 1828.68,687.531 1829.24,687.531 1829.8,687.531 1830.36,687.531 1830.92,687.531 1831.48,687.531 1832.04,687.531 1832.6,687.531 1833.16,687.531 1833.72,687.531 1834.27,687.531 1834.83,687.531 1835.39,687.531 1835.95,687.531 1836.51,687.531 1837.07,687.531 1837.63,687.531 1838.19,687.531 \"/>\n<path clip-path=\"url(#clip333)\" d=\"M720.247 684.841 L720.806 684.841 L721.365 684.841 L721.924 684.841 L722.484 684.841 L723.043 684.841 L723.602 684.841 L724.161 684.841 L724.721 684.841 L725.28 684.841 L725.839 684.841 L726.398 684.841 L726.958 684.841 L727.517 684.841 L728.076 684.841 L728.635 684.841 L729.195 684.841 L729.754 684.841 L730.313 684.841 L730.872 684.841 L731.432 684.841 L731.991 684.841 L732.55 684.841 L733.109 684.841 L733.669 684.841 L734.228 684.841 L734.787 684.841 L735.346 684.841 L735.906 684.841 L736.465 684.841 L737.024 684.841 L737.583 684.841 L738.143 684.841 L738.702 684.841 L739.261 684.841 L739.82 684.841 L740.38 684.841 L740.939 684.841 L741.498 684.841 L742.057 684.841 L742.617 684.841 L743.176 684.841 L743.735 684.841 L744.294 684.841 L744.854 684.841 L745.413 684.841 L745.972 684.841 L746.531 684.841 L747.091 684.841 L747.65 684.841 L748.209 684.841 L748.768 684.841 L749.328 684.841 L749.887 684.841 L750.446 684.841 L751.005 684.841 L751.565 684.841 L752.124 684.841 L752.683 684.841 L753.242 684.841 L753.802 684.841 L754.361 684.841 L754.92 684.841 L755.479 684.841 L756.039 684.841 L756.598 684.841 L757.157 684.841 L757.716 684.841 L758.276 684.841 L758.835 684.841 L759.394 684.841 L759.953 684.841 L760.513 684.841 L761.072 684.841 L761.631 684.841 L762.19 684.841 L762.75 684.841 L763.309 684.841 L763.868 684.841 L764.427 684.841 L764.987 684.841 L765.546 684.841 L766.105 684.841 L766.664 684.841 L767.224 684.841 L767.783 684.841 L768.342 684.841 L768.901 684.841 L769.461 684.841 L770.02 684.841 L770.579 684.841 L771.138 684.841 L771.698 684.841 L772.257 684.841 L772.816 684.841 L773.375 684.841 L773.935 684.841 L774.494 684.841 L775.053 684.841 L775.612 684.841 L776.172 684.841 L776.731 684.841 L777.29 684.841 L777.849 684.841 L778.409 684.841 L778.968 684.841 L779.527 684.841 L780.086 684.841 L780.646 684.841 L781.205 684.841 L781.764 684.841 L782.323 684.841 L782.883 684.841 L783.442 684.841 L784.001 684.841 L784.56 684.841 L785.12 684.841 L785.679 684.841 L786.238 684.841 L786.797 684.841 L787.357 684.841 L787.916 684.841 L788.475 684.841 L789.034 684.841 L789.594 684.841 L790.153 684.841 L790.712 684.841 L791.271 684.841 L791.831 684.841 L792.39 684.841 L792.949 684.841 L793.508 684.841 L794.068 684.841 L794.627 684.841 L795.186 684.841 L795.745 684.841 L796.305 684.841 L796.864 684.841 L797.423 684.841 L797.982 684.841 L798.542 684.841 L799.101 684.841 L799.66 684.841 L800.219 684.841 L800.779 684.841 L801.338 684.841 L801.897 684.841 L802.456 684.841 L803.016 684.841 L803.575 684.841 L804.134 684.841 L804.693 684.841 L805.253 684.841 L805.812 684.841 L806.371 684.841 L806.931 684.841 L807.49 684.841 L808.049 684.841 L808.608 684.841 L809.168 684.841 L809.727 684.841 L810.286 684.841 L810.845 684.841 L811.405 684.841 L811.964 684.841 L812.523 684.841 L813.082 684.841 L813.642 684.841 L814.201 684.841 L814.76 684.841 L815.319 684.841 L815.879 684.841 L816.438 684.841 L816.997 684.841 L817.556 684.841 L818.116 684.841 L818.675 684.841 L819.234 684.841 L819.793 684.841 L820.353 684.841 L820.912 684.841 L821.471 684.841 L822.03 684.841 L822.59 684.841 L823.149 684.841 L823.708 684.841 L824.267 684.841 L824.827 684.841 L825.386 684.841 L825.945 684.841 L826.504 684.841 L827.064 684.841 L827.623 684.841 L828.182 684.841 L828.741 684.841 L829.301 684.841 L829.86 684.841 L830.419 684.841 L830.978 684.841 L831.538 684.841 L832.097 684.841 L832.656 684.841 L833.215 684.841 L833.775 684.841 L834.334 684.841 L834.893 684.841 L835.452 684.841 L836.012 684.841 L836.571 684.841 L837.13 684.841 L837.689 684.841 L838.249 684.841 L838.808 684.841 L839.367 684.841 L839.926 684.841 L840.486 684.841 L841.045 684.841 L841.604 684.841 L842.163 684.841 L842.723 684.841 L843.282 684.841 L843.841 684.841 L844.4 684.841 L844.96 684.841 L845.519 684.841 L846.078 684.841 L846.637 684.841 L847.197 684.841 L847.756 684.841 L848.315 684.841 L848.874 684.841 L849.434 684.841 L849.993 684.841 L850.552 684.841 L851.111 684.841 L851.671 684.841 L852.23 684.841 L852.789 684.841 L853.348 684.841 L853.908 684.841 L854.467 684.841 L855.026 684.841 L855.585 684.841 L856.145 684.841 L856.704 684.841 L857.263 684.841 L857.822 684.841 L858.382 684.841 L858.941 684.841 L859.5 684.841 L860.059 684.841 L860.619 684.841 L861.178 684.841 L861.737 684.841 L862.296 684.841 L862.856 684.841 L863.415 684.841 L863.974 684.841 L864.533 684.841 L865.093 684.841 L865.652 684.841 L866.211 684.841 L866.77 684.841 L867.33 684.841 L867.889 684.841 L868.448 684.841 L869.007 684.841 L869.567 684.841 L870.126 684.841 L870.685 684.841 L871.244 684.841 L871.804 684.841 L872.363 684.841 L872.922 684.841 L873.481 684.841 L874.041 684.841 L874.6 684.841 L875.159 684.841 L875.718 684.841 L876.278 684.841 L876.837 684.841 L877.396 684.841 L877.955 684.841 L878.515 684.841 L879.074 684.841 L879.633 684.841 L880.192 684.841 L880.752 684.841 L881.311 684.841 L881.87 684.841 L882.429 684.841 L882.989 684.841 L883.548 684.841 L884.107 684.841 L884.666 684.841 L885.226 684.841 L885.785 684.841 L886.344 684.841 L886.903 684.841 L887.463 684.841 L888.022 684.841 L888.581 684.841 L889.14 684.841 L889.7 684.841 L890.259 684.841 L890.818 684.841 L891.377 684.841 L891.937 684.841 L892.496 684.841 L893.055 684.841 L893.614 684.841 L894.174 684.841 L894.733 684.841 L895.292 684.841 L895.851 684.841 L896.411 684.841 L896.97 684.841 L897.529 684.841 L898.088 684.841 L898.648 684.841 L899.207 684.841 L899.766 684.841 L900.325 684.841 L900.885 684.841 L901.444 684.841 L902.003 684.841 L902.562 684.841 L903.122 684.841 L903.681 684.841 L904.24 684.841 L904.799 684.841 L905.359 684.841 L905.918 684.841 L906.477 684.841 L907.036 684.841 L907.596 684.841 L908.155 684.841 L908.714 684.841 L909.273 684.841 L909.833 684.841 L910.392 684.841 L910.951 684.841 L911.51 684.841 L912.07 684.841 L912.629 684.841 L913.188 684.841 L913.747 684.841 L914.307 684.841 L914.866 684.841 L915.425 684.841 L915.984 684.841 L916.544 684.841 L917.103 684.841 L917.662 684.841 L918.221 684.841 L918.781 684.841 L919.34 684.841 L919.899 684.841 L920.458 684.841 L921.018 684.841 L921.577 684.841 L922.136 684.841 L922.695 684.841 L923.255 684.841 L923.814 684.841 L924.373 684.841 L924.932 684.841 L925.492 684.841 L926.051 684.841 L926.61 684.841 L927.169 684.841 L927.729 684.841 L928.288 684.841 L928.847 684.841 L929.406 684.841 L929.966 684.841 L930.525 684.841 L931.084 684.841 L931.644 684.841 L932.203 684.841 L932.762 684.841 L933.321 684.841 L933.881 684.841 L934.44 684.841 L934.999 684.841 L935.558 684.841 L936.118 684.841 L936.677 684.841 L937.236 684.841 L937.795 684.841 L938.355 684.841 L938.914 684.841 L939.473 684.841 L940.032 684.841 L940.592 684.841 L941.151 684.841 L941.71 684.841 L942.269 684.841 L942.829 684.841 L943.388 684.841 L943.947 684.841 L944.506 684.841 L945.066 684.841 L945.625 684.841 L946.184 684.841 L946.743 684.841 L947.303 684.841 L947.862 684.841 L948.421 684.841 L948.98 684.841 L949.54 684.841 L950.099 684.841 L950.658 684.841 L951.217 684.841 L951.777 684.841 L952.336 684.841 L952.895 684.841 L953.454 684.841 L954.014 684.841 L954.573 684.841 L955.132 684.841 L955.691 684.841 L956.251 684.841 L956.81 684.841 L957.369 684.841 L957.928 684.841 L958.488 684.841 L959.047 684.841 L959.606 684.841 L960.165 684.841 L960.725 684.841 L961.284 684.841 L961.843 684.841 L962.402 684.841 L962.962 684.841 L963.521 684.841 L964.08 684.841 L964.639 684.841 L965.199 684.841 L965.758 684.841 L966.317 684.841 L966.876 684.841 L967.436 684.841 L967.995 684.841 L968.554 684.841 L969.113 684.841 L969.673 684.841 L970.232 684.841 L970.791 684.841 L971.35 684.841 L971.91 684.841 L972.469 684.841 L973.028 684.841 L973.587 684.841 L974.147 684.841 L974.706 684.841 L975.265 684.841 L975.824 684.841 L976.384 684.841 L976.943 684.841 L977.502 684.841 L978.061 684.841 L978.621 684.841 L979.18 684.841 L979.739 684.841 L980.298 684.841 L980.858 684.841 L981.417 684.841 L981.976 684.841 L982.535 684.841 L983.095 684.841 L983.654 684.841 L984.213 684.841 L984.772 684.841 L985.332 684.841 L985.891 684.841 L986.45 684.841 L987.009 684.841 L987.569 684.841 L988.128 684.841 L988.687 684.841 L989.246 684.841 L989.806 684.841 L990.365 684.841 L990.924 684.841 L991.483 684.841 L992.043 684.841 L992.602 684.841 L993.161 684.841 L993.72 684.841 L994.28 684.841 L994.839 684.841 L995.398 684.841 L995.957 684.841 L996.517 684.841 L997.076 684.841 L997.635 684.841 L998.194 684.841 L998.754 684.841 L999.313 684.841 L999.872 684.841 L1000.43 684.841 L1000.99 684.841 L1001.55 684.841 L1002.11 684.841 L1002.67 684.841 L1003.23 684.841 L1003.79 684.841 L1004.35 684.841 L1004.91 684.841 L1005.46 684.841 L1006.02 684.841 L1006.58 684.841 L1007.14 684.841 L1007.7 684.841 L1008.26 684.841 L1008.82 684.841 L1009.38 684.841 L1009.94 684.841 L1010.5 684.841 L1011.06 684.841 L1011.62 684.841 L1012.18 684.841 L1012.73 684.841 L1013.29 684.841 L1013.85 684.841 L1014.41 684.841 L1014.97 684.841 L1015.53 684.841 L1016.09 684.841 L1016.65 684.841 L1017.21 684.841 L1017.77 684.841 L1018.33 684.841 L1018.89 684.841 L1019.45 684.841 L1020.01 684.841 L1020.56 684.841 L1021.12 684.841 L1021.68 684.841 L1022.24 684.841 L1022.8 684.841 L1023.36 684.841 L1023.92 684.841 L1024.48 684.841 L1025.04 684.841 L1025.6 684.841 L1026.16 684.841 L1026.72 684.841 L1027.28 684.841 L1027.83 684.841 L1028.39 684.841 L1028.95 684.841 L1029.51 684.841 L1030.07 684.841 L1030.63 684.841 L1031.19 684.841 L1031.75 684.841 L1032.31 684.841 L1032.87 684.841 L1033.43 684.841 L1033.99 684.841 L1034.55 684.841 L1035.1 684.841 L1035.66 684.841 L1036.22 684.841 L1036.78 684.841 L1037.34 684.841 L1037.9 684.841 L1038.46 684.841 L1039.02 684.841 L1039.58 684.841 L1040.14 684.841 L1040.7 684.841 L1041.26 684.841 L1041.82 684.841 L1042.38 684.841 L1042.93 684.841 L1043.49 684.841 L1044.05 684.841 L1044.61 684.841 L1045.17 684.841 L1045.73 684.841 L1046.29 684.841 L1046.85 684.841 L1047.41 684.841 L1047.97 684.841 L1048.53 684.841 L1049.09 684.841 L1049.65 684.841 L1050.2 684.841 L1050.76 684.841 L1051.32 684.841 L1051.88 684.841 L1052.44 684.841 L1053 684.841 L1053.56 684.841 L1054.12 684.841 L1054.68 684.841 L1055.24 684.841 L1055.8 684.841 L1056.36 684.841 L1056.92 684.841 L1057.48 684.841 L1058.03 684.841 L1058.59 684.841 L1059.15 684.841 L1059.71 684.841 L1060.27 684.841 L1060.83 684.841 L1061.39 684.841 L1061.95 684.841 L1062.51 684.841 L1063.07 684.841 L1063.63 684.841 L1064.19 684.841 L1064.75 684.841 L1065.3 684.841 L1065.86 684.841 L1066.42 684.841 L1066.98 684.841 L1067.54 684.841 L1068.1 684.841 L1068.66 684.841 L1069.22 684.841 L1069.78 684.841 L1070.34 684.841 L1070.9 684.841 L1071.46 684.841 L1072.02 684.841 L1072.57 684.841 L1073.13 684.841 L1073.69 684.841 L1074.25 684.841 L1074.81 684.841 L1075.37 684.841 L1075.93 684.841 L1076.49 684.841 L1077.05 684.841 L1077.61 684.841 L1078.17 684.841 L1078.73 684.841 L1079.29 684.841 L1079.85 684.841 L1080.4 684.841 L1080.96 684.841 L1081.52 684.841 L1082.08 684.841 L1082.64 684.841 L1083.2 684.841 L1083.76 684.841 L1084.32 684.841 L1084.88 684.841 L1085.44 684.841 L1086 684.841 L1086.56 684.841 L1087.12 684.841 L1087.67 684.841 L1088.23 684.841 L1088.79 684.841 L1089.35 684.841 L1089.91 684.841 L1090.47 684.841 L1091.03 684.841 L1091.59 684.841 L1092.15 684.841 L1092.71 684.841 L1093.27 684.841 L1093.83 684.841 L1094.39 684.841 L1094.94 684.841 L1095.5 684.841 L1096.06 684.841 L1096.62 684.841 L1097.18 684.841 L1097.74 684.841 L1098.3 684.841 L1098.86 684.841 L1099.42 684.841 L1099.98 684.841 L1100.54 684.841 L1101.1 684.841 L1101.66 684.841 L1102.22 684.841 L1102.77 684.841 L1103.33 684.841 L1103.89 684.841 L1104.45 684.841 L1105.01 684.841 L1105.57 684.841 L1106.13 684.841 L1106.69 684.841 L1107.25 684.841 L1107.81 684.841 L1108.37 684.841 L1108.93 684.841 L1109.49 684.841 L1110.04 684.841 L1110.6 684.841 L1111.16 684.841 L1111.72 684.841 L1112.28 684.841 L1112.84 684.841 L1113.4 684.841 L1113.96 684.841 L1114.52 684.841 L1115.08 684.841 L1115.64 684.841 L1116.2 684.841 L1116.76 684.841 L1117.31 684.841 L1117.87 684.841 L1118.43 684.841 L1118.99 684.841 L1119.55 684.841 L1120.11 684.841 L1120.67 684.841 L1121.23 684.841 L1121.79 684.841 L1122.35 684.841 L1122.91 684.841 L1123.47 684.841 L1124.03 684.841 L1124.59 684.841 L1125.14 684.841 L1125.7 684.841 L1126.26 684.841 L1126.82 684.841 L1127.38 684.841 L1127.94 684.841 L1128.5 684.841 L1129.06 684.841 L1129.62 684.841 L1130.18 684.841 L1130.74 684.841 L1131.3 684.841 L1131.86 684.841 L1132.41 684.841 L1132.97 684.841 L1133.53 684.841 L1134.09 684.841 L1134.65 684.841 L1135.21 684.841 L1135.77 684.841 L1136.33 684.841 L1136.89 684.841 L1137.45 684.841 L1138.01 684.841 L1138.57 684.841 L1139.13 684.841 L1139.68 684.841 L1140.24 684.841 L1140.8 684.841 L1141.36 684.841 L1141.92 684.841 L1142.48 684.841 L1143.04 684.841 L1143.6 684.841 L1144.16 684.841 L1144.72 684.841 L1145.28 684.841 L1145.84 684.841 L1146.4 684.841 L1146.96 684.841 L1147.51 684.841 L1148.07 684.841 L1148.63 684.841 L1149.19 684.841 L1149.75 684.841 L1150.31 684.841 L1150.87 684.841 L1151.43 684.841 L1151.99 684.841 L1152.55 684.841 L1153.11 684.841 L1153.67 684.841 L1154.23 684.841 L1154.78 684.841 L1155.34 684.841 L1155.9 684.841 L1156.46 684.841 L1157.02 684.841 L1157.58 684.841 L1158.14 684.841 L1158.7 684.841 L1159.26 684.841 L1159.82 684.841 L1160.38 684.841 L1160.94 684.841 L1161.5 684.841 L1162.05 684.841 L1162.61 684.841 L1163.17 684.841 L1163.73 684.841 L1164.29 684.841 L1164.85 684.841 L1165.41 684.841 L1165.97 684.841 L1166.53 684.841 L1167.09 684.841 L1167.65 684.841 L1168.21 684.841 L1168.77 684.841 L1169.33 684.841 L1169.88 684.841 L1170.44 684.841 L1171 684.841 L1171.56 684.841 L1172.12 684.841 L1172.68 684.841 L1173.24 684.841 L1173.8 684.841 L1174.36 684.841 L1174.92 684.841 L1175.48 684.841 L1176.04 684.841 L1176.6 684.841 L1177.15 684.841 L1177.71 684.841 L1178.27 684.841 L1178.83 684.841 L1179.39 684.841 L1179.95 684.841 L1180.51 684.841 L1181.07 684.841 L1181.63 684.841 L1182.19 684.841 L1182.75 684.841 L1183.31 684.841 L1183.87 684.841 L1184.43 684.841 L1184.98 684.841 L1185.54 684.841 L1186.1 684.841 L1186.66 684.841 L1187.22 684.841 L1187.78 684.841 L1188.34 684.841 L1188.9 684.841 L1189.46 684.841 L1190.02 684.841 L1190.58 684.841 L1191.14 684.841 L1191.7 684.841 L1192.25 684.841 L1192.81 684.841 L1193.37 684.841 L1193.93 684.841 L1194.49 684.841 L1195.05 684.841 L1195.61 684.841 L1196.17 684.841 L1196.73 684.841 L1197.29 684.841 L1197.85 684.841 L1198.41 684.841 L1198.97 684.841 L1199.52 684.841 L1200.08 684.841 L1200.64 684.841 L1201.2 684.841 L1201.76 684.841 L1202.32 684.841 L1202.88 684.841 L1203.44 684.841 L1204 684.841 L1204.56 684.841 L1205.12 684.841 L1205.68 684.841 L1206.24 684.841 L1206.8 684.841 L1207.35 684.841 L1207.91 684.841 L1208.47 684.841 L1209.03 684.841 L1209.59 684.841 L1210.15 684.841 L1210.71 684.841 L1211.27 684.841 L1211.83 684.841 L1212.39 684.841 L1212.95 684.841 L1213.51 684.841 L1214.07 684.841 L1214.62 684.841 L1215.18 684.841 L1215.74 684.841 L1216.3 684.841 L1216.86 684.841 L1217.42 684.841 L1217.98 684.841 L1218.54 684.841 L1219.1 684.841 L1219.66 684.841 L1220.22 684.841 L1220.78 684.841 L1221.34 684.841 L1221.89 684.841 L1222.45 684.841 L1223.01 684.841 L1223.57 684.841 L1224.13 684.841 L1224.69 684.841 L1225.25 684.841 L1225.81 684.841 L1226.37 684.841 L1226.93 684.841 L1227.49 684.841 L1228.05 684.841 L1228.61 684.841 L1229.17 684.841 L1229.72 684.841 L1230.28 684.841 L1230.84 684.841 L1231.4 684.841 L1231.96 684.841 L1232.52 684.841 L1233.08 684.841 L1233.64 684.841 L1234.2 684.841 L1234.76 684.841 L1235.32 684.841 L1235.88 684.841 L1236.44 684.841 L1236.99 684.841 L1237.55 684.841 L1238.11 684.841 L1238.67 684.841 L1239.23 684.841 L1239.79 684.841 L1240.35 684.841 L1240.91 684.841 L1241.47 684.841 L1242.03 684.841 L1242.59 684.841 L1243.15 684.841 L1243.71 684.841 L1244.26 684.841 L1244.82 684.841 L1245.38 684.841 L1245.94 684.841 L1246.5 684.841 L1247.06 684.841 L1247.62 684.841 L1248.18 684.841 L1248.74 684.841 L1249.3 684.841 L1249.86 684.841 L1250.42 684.841 L1250.98 684.841 L1251.54 684.841 L1252.09 684.841 L1252.65 684.841 L1253.21 684.841 L1253.77 684.841 L1254.33 684.841 L1254.89 684.841 L1255.45 684.841 L1256.01 684.841 L1256.57 684.841 L1257.13 684.841 L1257.69 684.841 L1258.25 684.841 L1258.81 684.841 L1259.36 684.841 L1259.92 684.841 L1260.48 684.841 L1261.04 684.841 L1261.6 684.841 L1262.16 684.841 L1262.72 684.841 L1263.28 684.841 L1263.84 684.841 L1264.4 684.841 L1264.96 684.841 L1265.52 684.841 L1266.08 684.841 L1266.63 684.841 L1267.19 684.841 L1267.75 684.841 L1268.31 684.841 L1268.87 684.841 L1269.43 684.841 L1269.99 684.841 L1270.55 684.841 L1271.11 684.841 L1271.67 684.841 L1272.23 684.841 L1272.79 684.841 L1273.35 684.841 L1273.91 684.841 L1274.46 684.841 L1275.02 684.841 L1275.58 684.841 L1276.14 684.841 L1276.7 684.841 L1277.26 684.841 L1277.82 684.841 L1278.38 684.841 L1278.94 684.841 L1279.5 684.841 L1280.06 684.841 L1280.62 684.841 L1281.18 684.841 L1281.73 684.841 L1282.29 684.841 L1282.85 684.841 L1283.41 684.841 L1283.97 684.841 L1284.53 684.841 L1285.09 684.841 L1285.65 684.841 L1286.21 684.841 L1286.77 684.841 L1287.33 684.841 L1287.89 684.841 L1288.45 684.841 L1289 684.841 L1289.56 684.841 L1290.12 684.841 L1290.68 684.841 L1291.24 684.841 L1291.8 684.841 L1292.36 684.841 L1292.92 684.841 L1293.48 684.841 L1294.04 684.841 L1294.6 684.841 L1295.16 684.841 L1295.72 684.841 L1296.28 684.841 L1296.83 684.841 L1297.39 684.841 L1297.95 684.841 L1298.51 684.841 L1299.07 684.841 L1299.63 684.841 L1300.19 684.841 L1300.75 684.841 L1301.31 684.841 L1301.87 684.841 L1302.43 684.841 L1302.99 684.841 L1303.55 684.841 L1304.1 684.841 L1304.66 684.841 L1305.22 684.841 L1305.78 684.841 L1306.34 684.841 L1306.9 684.841 L1307.46 684.841 L1308.02 684.841 L1308.58 684.841 L1309.14 684.841 L1309.7 684.841 L1310.26 684.841 L1310.82 684.841 L1311.38 684.841 L1311.93 684.841 L1312.49 684.841 L1313.05 684.841 L1313.61 684.841 L1314.17 684.841 L1314.73 684.841 L1315.29 684.841 L1315.85 684.841 L1316.41 684.841 L1316.97 684.841 L1317.53 684.841 L1318.09 684.841 L1318.65 684.841 L1319.2 684.841 L1319.76 684.841 L1320.32 684.841 L1320.88 684.841 L1321.44 684.841 L1322 684.841 L1322.56 684.841 L1323.12 684.841 L1323.68 684.841 L1324.24 684.841 L1324.8 684.841 L1325.36 684.841 L1325.92 684.841 L1326.47 684.841 L1327.03 684.841 L1327.59 684.841 L1328.15 684.841 L1328.71 684.841 L1329.27 684.841 L1329.83 684.841 L1330.39 684.841 L1330.95 684.841 L1331.51 684.841 L1332.07 684.841 L1332.63 684.841 L1333.19 684.841 L1333.75 684.841 L1334.3 684.841 L1334.86 684.841 L1335.42 684.841 L1335.98 684.841 L1336.54 684.841 L1337.1 684.841 L1337.66 684.841 L1338.22 684.841 L1338.78 684.841 L1339.34 684.841 L1339.9 684.841 L1340.46 684.841 L1341.02 684.841 L1341.57 684.841 L1342.13 684.841 L1342.69 684.841 L1343.25 684.841 L1343.81 684.841 L1344.37 684.841 L1344.93 684.841 L1345.49 684.841 L1346.05 684.841 L1346.61 684.841 L1347.17 684.841 L1347.73 684.841 L1348.29 684.841 L1348.84 684.841 L1349.4 684.841 L1349.96 684.841 L1350.52 684.841 L1351.08 684.841 L1351.64 684.841 L1352.2 684.841 L1352.76 684.841 L1353.32 684.841 L1353.88 684.841 L1354.44 684.841 L1355 684.841 L1355.56 684.841 L1356.12 684.841 L1356.67 684.841 L1357.23 684.841 L1357.79 684.841 L1358.35 684.841 L1358.91 684.841 L1359.47 684.841 L1360.03 684.841 L1360.59 684.841 L1361.15 684.841 L1361.71 684.841 L1362.27 684.841 L1362.83 684.841 L1363.39 684.841 L1363.94 684.841 L1364.5 684.841 L1365.06 684.841 L1365.62 684.841 L1366.18 684.841 L1366.74 684.841 L1367.3 684.841 L1367.86 684.841 L1368.42 684.841 L1368.98 684.841 L1369.54 684.841 L1370.1 684.841 L1370.66 684.841 L1371.21 684.841 L1371.77 684.841 L1372.33 684.841 L1372.89 684.841 L1373.45 684.841 L1374.01 684.841 L1374.57 684.841 L1375.13 684.841 L1375.69 684.841 L1376.25 684.841 L1376.81 684.841 L1377.37 684.841 L1377.93 684.841 L1378.49 684.841 L1379.04 684.841 L1379.6 684.841 L1380.16 684.841 L1380.72 684.841 L1381.28 684.841 L1381.84 684.841 L1382.4 684.841 L1382.96 684.841 L1383.52 684.841 L1384.08 684.841 L1384.64 684.841 L1385.2 684.841 L1385.76 684.841 L1386.31 684.841 L1386.87 684.841 L1387.43 684.841 L1387.99 684.841 L1388.55 684.841 L1389.11 684.841 L1389.67 684.841 L1390.23 684.841 L1390.79 684.841 L1391.35 684.841 L1391.91 684.841 L1392.47 684.841 L1393.03 684.841 L1393.58 684.841 L1394.14 684.841 L1394.7 684.841 L1395.26 684.841 L1395.82 684.841 L1396.38 684.841 L1396.94 684.841 L1397.5 684.841 L1398.06 684.841 L1398.62 684.841 L1399.18 684.841 L1399.74 684.841 L1400.3 684.841 L1400.86 684.841 L1401.41 684.841 L1401.97 684.841 L1402.53 684.841 L1403.09 684.841 L1403.65 684.841 L1404.21 684.841 L1404.77 684.841 L1405.33 684.841 L1405.89 684.841 L1406.45 684.841 L1407.01 684.841 L1407.57 684.841 L1408.13 684.841 L1408.68 684.841 L1409.24 684.841 L1409.8 684.841 L1410.36 684.841 L1410.92 684.841 L1411.48 684.841 L1412.04 684.841 L1412.6 684.841 L1413.16 684.841 L1413.72 684.841 L1414.28 684.841 L1414.84 684.841 L1415.4 684.841 L1415.95 684.841 L1416.51 684.841 L1417.07 684.841 L1417.63 684.841 L1418.19 684.841 L1418.75 684.841 L1419.31 684.841 L1419.87 684.841 L1420.43 684.841 L1420.99 684.841 L1421.55 684.841 L1422.11 684.841 L1422.67 684.841 L1423.23 684.841 L1423.78 684.841 L1424.34 684.841 L1424.9 684.841 L1425.46 684.841 L1426.02 684.841 L1426.58 684.841 L1427.14 684.841 L1427.7 684.841 L1428.26 684.841 L1428.82 684.841 L1429.38 684.841 L1429.94 684.841 L1430.5 684.841 L1431.05 684.841 L1431.61 684.841 L1432.17 684.841 L1432.73 684.841 L1433.29 684.841 L1433.85 684.841 L1434.41 684.841 L1434.97 684.841 L1435.53 684.841 L1436.09 684.841 L1436.65 684.841 L1437.21 684.841 L1437.77 684.841 L1438.33 684.841 L1438.88 684.841 L1439.44 684.841 L1440 684.841 L1440.56 684.841 L1441.12 684.841 L1441.68 684.841 L1442.24 684.841 L1442.8 684.841 L1443.36 684.841 L1443.92 684.841 L1444.48 684.841 L1445.04 684.841 L1445.6 684.841 L1446.15 684.841 L1446.71 684.841 L1447.27 684.841 L1447.83 684.841 L1448.39 684.841 L1448.95 684.841 L1449.51 684.841 L1450.07 684.841 L1450.63 684.841 L1451.19 684.841 L1451.75 684.841 L1452.31 684.841 L1452.87 684.841 L1453.42 684.841 L1453.98 684.841 L1454.54 684.841 L1455.1 684.841 L1455.66 684.841 L1456.22 684.841 L1456.78 684.841 L1457.34 684.841 L1457.9 684.841 L1458.46 684.841 L1459.02 684.841 L1459.58 684.841 L1460.14 684.841 L1460.7 684.841 L1461.25 684.841 L1461.81 684.841 L1462.37 684.841 L1462.93 684.841 L1463.49 684.841 L1464.05 684.841 L1464.61 684.841 L1465.17 684.841 L1465.73 684.841 L1466.29 684.841 L1466.85 684.841 L1467.41 684.841 L1467.97 684.841 L1468.52 684.841 L1469.08 684.841 L1469.64 684.841 L1470.2 684.841 L1470.76 684.841 L1471.32 684.841 L1471.88 684.841 L1472.44 684.841 L1473 684.841 L1473.56 684.841 L1474.12 684.841 L1474.68 684.841 L1475.24 684.841 L1475.79 684.841 L1476.35 684.841 L1476.91 684.841 L1477.47 684.841 L1478.03 684.841 L1478.59 684.841 L1479.15 684.841 L1479.71 684.841 L1480.27 684.841 L1480.83 684.841 L1481.39 684.841 L1481.95 684.841 L1482.51 684.841 L1483.07 684.841 L1483.62 684.841 L1484.18 684.841 L1484.74 684.841 L1485.3 684.841 L1485.86 684.841 L1486.42 684.841 L1486.98 684.841 L1487.54 684.841 L1488.1 684.841 L1488.66 684.841 L1489.22 684.841 L1489.78 684.841 L1490.34 684.841 L1490.89 684.841 L1491.45 684.841 L1492.01 684.841 L1492.57 684.841 L1493.13 684.841 L1493.69 684.841 L1494.25 684.841 L1494.81 684.841 L1495.37 684.841 L1495.93 684.841 L1496.49 684.841 L1497.05 684.841 L1497.61 684.841 L1498.16 684.841 L1498.72 684.841 L1499.28 684.841 L1499.84 684.841 L1500.4 684.841 L1500.96 684.841 L1501.52 684.841 L1502.08 684.841 L1502.64 684.841 L1503.2 684.841 L1503.76 684.841 L1504.32 684.841 L1504.88 684.841 L1505.44 684.841 L1505.99 684.841 L1506.55 684.841 L1507.11 684.841 L1507.67 684.841 L1508.23 684.841 L1508.79 684.841 L1509.35 684.841 L1509.91 684.841 L1510.47 684.841 L1511.03 684.841 L1511.59 684.841 L1512.15 684.841 L1512.71 684.841 L1513.26 684.841 L1513.82 684.841 L1514.38 684.841 L1514.94 684.841 L1515.5 684.841 L1516.06 684.841 L1516.62 684.841 L1517.18 684.841 L1517.74 684.841 L1518.3 684.841 L1518.86 684.841 L1519.42 684.841 L1519.98 684.841 L1520.53 684.841 L1521.09 684.841 L1521.65 684.841 L1522.21 684.841 L1522.77 684.841 L1523.33 684.841 L1523.89 684.841 L1524.45 684.841 L1525.01 684.841 L1525.57 684.841 L1526.13 684.841 L1526.69 684.841 L1527.25 684.841 L1527.81 684.841 L1528.36 684.841 L1528.92 684.841 L1529.48 684.841 L1530.04 684.841 L1530.6 684.841 L1531.16 684.841 L1531.72 684.841 L1532.28 684.841 L1532.84 684.841 L1533.4 684.841 L1533.96 684.841 L1534.52 684.841 L1535.08 684.841 L1535.63 684.841 L1536.19 684.841 L1536.75 684.841 L1537.31 684.841 L1537.87 684.841 L1538.43 684.841 L1538.99 684.841 L1539.55 684.841 L1540.11 684.841 L1540.67 684.841 L1541.23 684.841 L1541.79 684.841 L1542.35 684.841 L1542.9 684.841 L1543.46 684.841 L1544.02 684.841 L1544.58 684.841 L1545.14 684.841 L1545.7 684.841 L1546.26 684.841 L1546.82 684.841 L1547.38 684.841 L1547.94 684.841 L1548.5 684.841 L1549.06 684.841 L1549.62 684.841 L1550.18 684.841 L1550.73 684.841 L1551.29 684.841 L1551.85 684.841 L1552.41 684.841 L1552.97 684.841 L1553.53 684.841 L1554.09 684.841 L1554.65 684.841 L1555.21 684.841 L1555.77 684.841 L1556.33 684.841 L1556.89 684.841 L1557.45 684.841 L1558 684.841 L1558.56 684.841 L1559.12 684.841 L1559.68 684.841 L1560.24 684.841 L1560.8 684.841 L1561.36 684.841 L1561.92 684.841 L1562.48 684.841 L1563.04 684.841 L1563.6 684.841 L1564.16 684.841 L1564.72 684.841 L1565.28 684.841 L1565.83 684.841 L1566.39 684.841 L1566.95 684.841 L1567.51 684.841 L1568.07 684.841 L1568.63 684.841 L1569.19 684.841 L1569.75 684.841 L1570.31 684.841 L1570.87 684.841 L1571.43 684.841 L1571.99 684.841 L1572.55 684.841 L1573.1 684.841 L1573.66 684.841 L1574.22 684.841 L1574.78 684.841 L1575.34 684.841 L1575.9 684.841 L1576.46 684.841 L1577.02 684.841 L1577.58 684.841 L1578.14 684.841 L1578.7 684.841 L1579.26 684.841 L1579.82 684.841 L1580.37 684.841 L1580.93 684.841 L1581.49 684.841 L1582.05 684.841 L1582.61 684.841 L1583.17 684.841 L1583.73 684.841 L1584.29 684.841 L1584.85 684.841 L1585.41 684.841 L1585.97 684.841 L1586.53 684.841 L1587.09 684.841 L1587.65 684.841 L1588.2 684.841 L1588.76 684.841 L1589.32 684.841 L1589.88 684.841 L1590.44 684.841 L1591 684.841 L1591.56 684.841 L1592.12 684.841 L1592.68 684.841 L1593.24 684.841 L1593.8 684.841 L1594.36 684.841 L1594.92 684.841 L1595.47 684.841 L1596.03 684.841 L1596.59 684.841 L1597.15 684.841 L1597.71 684.841 L1598.27 684.841 L1598.83 684.841 L1599.39 684.841 L1599.95 684.841 L1600.51 684.841 L1601.07 684.841 L1601.63 684.841 L1602.19 684.841 L1602.74 684.841 L1603.3 684.841 L1603.86 684.841 L1604.42 684.841 L1604.98 684.841 L1605.54 684.841 L1606.1 684.841 L1606.66 684.841 L1607.22 684.841 L1607.78 684.841 L1608.34 684.841 L1608.9 684.841 L1609.46 684.841 L1610.02 684.841 L1610.57 684.841 L1611.13 684.841 L1611.69 684.841 L1612.25 684.841 L1612.81 684.841 L1613.37 684.841 L1613.93 684.841 L1614.49 684.841 L1615.05 684.841 L1615.61 684.841 L1616.17 684.841 L1616.73 684.841 L1617.29 684.841 L1617.84 684.841 L1618.4 684.841 L1618.96 684.841 L1619.52 684.841 L1620.08 684.841 L1620.64 684.841 L1621.2 684.841 L1621.76 684.841 L1622.32 684.841 L1622.88 684.841 L1623.44 684.841 L1624 684.841 L1624.56 684.841 L1625.11 684.841 L1625.67 684.841 L1626.23 684.841 L1626.79 684.841 L1627.35 684.841 L1627.91 684.841 L1628.47 684.841 L1629.03 684.841 L1629.59 684.841 L1630.15 684.841 L1630.71 684.841 L1631.27 684.841 L1631.83 684.841 L1632.39 684.841 L1632.94 684.841 L1633.5 684.841 L1634.06 684.841 L1634.62 684.841 L1635.18 684.841 L1635.74 684.841 L1636.3 684.841 L1636.86 684.841 L1637.42 684.841 L1637.98 684.841 L1638.54 684.841 L1639.1 684.841 L1639.66 684.841 L1640.21 684.841 L1640.77 684.841 L1641.33 684.841 L1641.89 684.841 L1642.45 684.841 L1643.01 684.841 L1643.57 684.841 L1644.13 684.841 L1644.69 684.841 L1645.25 684.841 L1645.81 684.841 L1646.37 684.841 L1646.93 684.841 L1647.48 684.841 L1648.04 684.841 L1648.6 684.841 L1649.16 684.841 L1649.72 684.841 L1650.28 684.841 L1650.84 684.841 L1651.4 684.841 L1651.96 684.841 L1652.52 684.841 L1653.08 684.841 L1653.64 684.841 L1654.2 684.841 L1654.76 684.841 L1655.31 684.841 L1655.87 684.841 L1656.43 684.841 L1656.99 684.841 L1657.55 684.841 L1658.11 684.841 L1658.67 684.841 L1659.23 684.841 L1659.79 684.841 L1660.35 684.841 L1660.91 684.841 L1661.47 684.841 L1662.03 684.841 L1662.58 684.841 L1663.14 684.841 L1663.7 684.841 L1664.26 684.841 L1664.82 684.841 L1665.38 684.841 L1665.94 684.841 L1666.5 684.841 L1667.06 684.841 L1667.62 684.841 L1668.18 684.841 L1668.74 684.841 L1669.3 684.841 L1669.85 684.841 L1670.41 684.841 L1670.97 684.841 L1671.53 684.841 L1672.09 684.841 L1672.65 684.841 L1673.21 684.841 L1673.77 684.841 L1674.33 684.841 L1674.89 684.841 L1675.45 684.841 L1676.01 684.841 L1676.57 684.841 L1677.13 684.841 L1677.68 684.841 L1678.24 684.841 L1678.8 684.841 L1679.36 684.841 L1679.92 684.841 L1680.48 684.841 L1681.04 684.841 L1681.6 684.841 L1682.16 684.841 L1682.72 684.841 L1683.28 684.841 L1683.84 684.841 L1684.4 684.841 L1684.95 684.841 L1685.51 684.841 L1686.07 684.841 L1686.63 684.841 L1687.19 684.841 L1687.75 684.841 L1688.31 684.841 L1688.87 684.841 L1689.43 684.841 L1689.99 684.841 L1690.55 684.841 L1691.11 684.841 L1691.67 684.841 L1692.23 684.841 L1692.78 684.841 L1693.34 684.841 L1693.9 684.841 L1694.46 684.841 L1695.02 684.841 L1695.58 684.841 L1696.14 684.841 L1696.7 684.841 L1697.26 684.841 L1697.82 684.841 L1698.38 684.841 L1698.94 684.841 L1699.5 684.841 L1700.05 684.841 L1700.61 684.841 L1701.17 684.841 L1701.73 684.841 L1702.29 684.841 L1702.85 684.841 L1703.41 684.841 L1703.97 684.841 L1704.53 684.841 L1705.09 684.841 L1705.65 684.841 L1706.21 684.841 L1706.77 684.841 L1707.32 684.841 L1707.88 684.841 L1708.44 684.841 L1709 684.841 L1709.56 684.841 L1710.12 684.841 L1710.68 684.841 L1711.24 684.841 L1711.8 684.841 L1712.36 684.841 L1712.92 684.841 L1713.48 684.841 L1714.04 684.841 L1714.6 684.841 L1715.15 684.841 L1715.71 684.841 L1716.27 684.841 L1716.83 684.841 L1717.39 684.841 L1717.95 684.841 L1718.51 684.841 L1719.07 684.841 L1719.63 684.841 L1720.19 684.841 L1720.75 684.841 L1721.31 684.841 L1721.87 684.841 L1722.42 684.841 L1722.98 684.841 L1723.54 684.841 L1724.1 684.841 L1724.66 684.841 L1725.22 684.841 L1725.78 684.841 L1726.34 684.841 L1726.9 684.841 L1727.46 684.841 L1728.02 684.841 L1728.58 684.841 L1729.14 684.841 L1729.69 684.841 L1730.25 684.841 L1730.81 684.841 L1731.37 684.841 L1731.93 684.841 L1732.49 684.841 L1733.05 684.841 L1733.61 684.841 L1734.17 684.841 L1734.73 684.841 L1735.29 684.841 L1735.85 684.841 L1736.41 684.841 L1736.97 684.841 L1737.52 684.841 L1738.08 684.841 L1738.64 684.841 L1739.2 684.841 L1739.76 684.841 L1740.32 684.841 L1740.88 684.841 L1741.44 684.841 L1742 684.841 L1742.56 684.841 L1743.12 684.841 L1743.68 684.841 L1744.24 684.841 L1744.79 684.841 L1745.35 684.841 L1745.91 684.841 L1746.47 684.841 L1747.03 684.841 L1747.59 684.841 L1748.15 684.841 L1748.71 684.841 L1749.27 684.841 L1749.83 684.841 L1750.39 684.841 L1750.95 684.841 L1751.51 684.841 L1752.06 684.841 L1752.62 684.841 L1753.18 684.841 L1753.74 684.841 L1754.3 684.841 L1754.86 684.841 L1755.42 684.841 L1755.98 684.841 L1756.54 684.841 L1757.1 684.841 L1757.66 684.841 L1758.22 684.841 L1758.78 684.841 L1759.34 684.841 L1759.89 684.841 L1760.45 684.841 L1761.01 684.841 L1761.57 684.841 L1762.13 684.841 L1762.69 684.841 L1763.25 684.841 L1763.81 684.841 L1764.37 684.841 L1764.93 684.841 L1765.49 684.841 L1766.05 684.841 L1766.61 684.841 L1767.16 684.841 L1767.72 684.841 L1768.28 684.841 L1768.84 684.841 L1769.4 684.841 L1769.96 684.841 L1770.52 684.841 L1771.08 684.841 L1771.64 684.841 L1772.2 684.841 L1772.76 684.841 L1773.32 684.841 L1773.88 684.841 L1774.43 684.841 L1774.99 684.841 L1775.55 684.841 L1776.11 684.841 L1776.67 684.841 L1777.23 684.841 L1777.79 684.841 L1778.35 684.841 L1778.91 684.841 L1779.47 684.841 L1780.03 684.841 L1780.59 684.841 L1781.15 684.841 L1781.71 684.841 L1782.26 684.841 L1782.82 684.841 L1783.38 684.841 L1783.94 684.841 L1784.5 684.841 L1785.06 684.841 L1785.62 684.841 L1786.18 684.841 L1786.74 684.841 L1787.3 684.841 L1787.86 684.841 L1788.42 684.841 L1788.98 684.841 L1789.53 684.841 L1790.09 684.841 L1790.65 684.841 L1791.21 684.841 L1791.77 684.841 L1792.33 684.841 L1792.89 684.841 L1793.45 684.841 L1794.01 684.841 L1794.57 684.841 L1795.13 684.841 L1795.69 684.841 L1796.25 684.841 L1796.8 684.841 L1797.36 684.841 L1797.92 684.841 L1798.48 684.841 L1799.04 684.841 L1799.6 684.841 L1800.16 684.841 L1800.72 684.841 L1801.28 684.841 L1801.84 684.841 L1802.4 684.841 L1802.96 684.841 L1803.52 684.841 L1804.08 684.841 L1804.63 684.841 L1805.19 684.841 L1805.75 684.841 L1806.31 684.841 L1806.87 684.841 L1807.43 684.841 L1807.99 684.841 L1808.55 684.841 L1809.11 684.841 L1809.67 684.841 L1810.23 684.841 L1810.79 684.841 L1811.35 684.841 L1811.9 684.841 L1812.46 684.841 L1813.02 684.841 L1813.58 684.841 L1814.14 684.841 L1814.7 684.841 L1815.26 684.841 L1815.82 684.841 L1816.38 684.841 L1816.94 684.841 L1817.5 684.841 L1818.06 684.841 L1818.62 684.841 L1819.18 684.841 L1819.73 684.841 L1820.29 684.841 L1820.85 684.841 L1821.41 684.841 L1821.97 684.841 L1822.53 684.841 L1823.09 684.841 L1823.65 684.841 L1824.21 684.841 L1824.77 684.841 L1825.33 684.841 L1825.89 684.841 L1826.45 684.841 L1827 684.841 L1827.56 684.841 L1828.12 684.841 L1828.68 684.841 L1829.24 684.841 L1829.8 684.841 L1830.36 684.841 L1830.92 684.841 L1831.48 684.841 L1832.04 684.841 L1832.6 684.841 L1833.16 684.841 L1833.72 684.841 L1834.27 684.841 L1834.83 684.841 L1835.39 684.841 L1835.95 684.841 L1836.51 684.841 L1837.07 684.841 L1837.63 684.841 L1838.19 684.841 L1838.19 682.288 L1837.63 682.288 L1837.07 682.288 L1836.51 682.288 L1835.95 682.288 L1835.39 682.288 L1834.83 682.288 L1834.27 682.288 L1833.72 682.288 L1833.16 682.288 L1832.6 682.288 L1832.04 682.288 L1831.48 682.288 L1830.92 682.288 L1830.36 682.288 L1829.8 682.288 L1829.24 682.288 L1828.68 682.288 L1828.12 682.288 L1827.56 682.288 L1827 682.288 L1826.45 682.288 L1825.89 682.288 L1825.33 682.288 L1824.77 682.288 L1824.21 682.288 L1823.65 682.288 L1823.09 682.288 L1822.53 682.288 L1821.97 682.288 L1821.41 682.288 L1820.85 682.288 L1820.29 682.288 L1819.73 682.288 L1819.18 682.288 L1818.62 682.288 L1818.06 682.288 L1817.5 682.288 L1816.94 682.288 L1816.38 682.288 L1815.82 682.288 L1815.26 682.288 L1814.7 682.288 L1814.14 682.288 L1813.58 682.288 L1813.02 682.288 L1812.46 682.288 L1811.9 682.288 L1811.35 682.288 L1810.79 682.288 L1810.23 682.288 L1809.67 682.288 L1809.11 682.288 L1808.55 682.288 L1807.99 682.288 L1807.43 682.288 L1806.87 682.288 L1806.31 682.288 L1805.75 682.288 L1805.19 682.288 L1804.63 682.288 L1804.08 682.288 L1803.52 682.288 L1802.96 682.288 L1802.4 682.288 L1801.84 682.288 L1801.28 682.288 L1800.72 682.288 L1800.16 682.288 L1799.6 682.288 L1799.04 682.288 L1798.48 682.288 L1797.92 682.288 L1797.36 682.288 L1796.8 682.288 L1796.25 682.288 L1795.69 682.288 L1795.13 682.288 L1794.57 682.288 L1794.01 682.288 L1793.45 682.288 L1792.89 682.288 L1792.33 682.288 L1791.77 682.288 L1791.21 682.288 L1790.65 682.288 L1790.09 682.288 L1789.53 682.288 L1788.98 682.288 L1788.42 682.288 L1787.86 682.288 L1787.3 682.288 L1786.74 682.288 L1786.18 682.288 L1785.62 682.288 L1785.06 682.288 L1784.5 682.288 L1783.94 682.288 L1783.38 682.288 L1782.82 682.288 L1782.26 682.288 L1781.71 682.288 L1781.15 682.288 L1780.59 682.288 L1780.03 682.288 L1779.47 682.288 L1778.91 682.288 L1778.35 682.288 L1777.79 682.288 L1777.23 682.288 L1776.67 682.288 L1776.11 682.288 L1775.55 682.288 L1774.99 682.288 L1774.43 682.288 L1773.88 682.288 L1773.32 682.288 L1772.76 682.288 L1772.2 682.288 L1771.64 682.288 L1771.08 682.288 L1770.52 682.288 L1769.96 682.288 L1769.4 682.288 L1768.84 682.288 L1768.28 682.288 L1767.72 682.288 L1767.16 682.288 L1766.61 682.288 L1766.05 682.288 L1765.49 682.288 L1764.93 682.288 L1764.37 682.288 L1763.81 682.288 L1763.25 682.288 L1762.69 682.288 L1762.13 682.288 L1761.57 682.288 L1761.01 682.288 L1760.45 682.288 L1759.89 682.288 L1759.34 682.288 L1758.78 682.288 L1758.22 682.288 L1757.66 682.288 L1757.1 682.288 L1756.54 682.288 L1755.98 682.288 L1755.42 682.288 L1754.86 682.288 L1754.3 682.288 L1753.74 682.288 L1753.18 682.288 L1752.62 682.288 L1752.06 682.288 L1751.51 682.288 L1750.95 682.288 L1750.39 682.288 L1749.83 682.288 L1749.27 682.288 L1748.71 682.288 L1748.15 682.288 L1747.59 682.288 L1747.03 682.288 L1746.47 682.288 L1745.91 682.288 L1745.35 682.288 L1744.79 682.288 L1744.24 682.288 L1743.68 682.288 L1743.12 682.288 L1742.56 682.288 L1742 682.288 L1741.44 682.288 L1740.88 682.288 L1740.32 682.288 L1739.76 682.288 L1739.2 682.288 L1738.64 682.288 L1738.08 682.288 L1737.52 682.288 L1736.97 682.288 L1736.41 682.288 L1735.85 682.288 L1735.29 682.288 L1734.73 682.288 L1734.17 682.288 L1733.61 682.288 L1733.05 682.288 L1732.49 682.288 L1731.93 682.288 L1731.37 682.288 L1730.81 682.288 L1730.25 682.288 L1729.69 682.288 L1729.14 682.288 L1728.58 682.288 L1728.02 682.288 L1727.46 682.288 L1726.9 682.288 L1726.34 682.288 L1725.78 682.288 L1725.22 682.288 L1724.66 682.288 L1724.1 682.288 L1723.54 682.288 L1722.98 682.288 L1722.42 682.288 L1721.87 682.288 L1721.31 682.288 L1720.75 682.288 L1720.19 682.288 L1719.63 682.288 L1719.07 682.288 L1718.51 682.288 L1717.95 682.288 L1717.39 682.288 L1716.83 682.288 L1716.27 682.288 L1715.71 682.288 L1715.15 682.288 L1714.6 682.288 L1714.04 682.288 L1713.48 682.288 L1712.92 682.288 L1712.36 682.288 L1711.8 682.288 L1711.24 682.288 L1710.68 682.288 L1710.12 682.288 L1709.56 682.288 L1709 682.288 L1708.44 682.288 L1707.88 682.288 L1707.32 682.288 L1706.77 682.288 L1706.21 682.288 L1705.65 682.288 L1705.09 682.288 L1704.53 682.288 L1703.97 682.288 L1703.41 682.288 L1702.85 682.288 L1702.29 682.288 L1701.73 682.288 L1701.17 682.288 L1700.61 682.288 L1700.05 682.288 L1699.5 682.288 L1698.94 682.288 L1698.38 682.288 L1697.82 682.288 L1697.26 682.288 L1696.7 682.288 L1696.14 682.288 L1695.58 682.288 L1695.02 682.288 L1694.46 682.288 L1693.9 682.288 L1693.34 682.288 L1692.78 682.288 L1692.23 682.288 L1691.67 682.288 L1691.11 682.288 L1690.55 682.288 L1689.99 682.288 L1689.43 682.288 L1688.87 682.288 L1688.31 682.288 L1687.75 682.288 L1687.19 682.288 L1686.63 682.288 L1686.07 682.288 L1685.51 682.288 L1684.95 682.288 L1684.4 682.288 L1683.84 682.288 L1683.28 682.288 L1682.72 682.288 L1682.16 682.288 L1681.6 682.288 L1681.04 682.288 L1680.48 682.288 L1679.92 682.288 L1679.36 682.288 L1678.8 682.288 L1678.24 682.288 L1677.68 682.288 L1677.13 682.288 L1676.57 682.288 L1676.01 682.288 L1675.45 682.288 L1674.89 682.288 L1674.33 682.288 L1673.77 682.288 L1673.21 682.288 L1672.65 682.288 L1672.09 682.288 L1671.53 682.288 L1670.97 682.288 L1670.41 682.288 L1669.85 682.288 L1669.3 682.288 L1668.74 682.288 L1668.18 682.288 L1667.62 682.288 L1667.06 682.288 L1666.5 682.288 L1665.94 682.288 L1665.38 682.288 L1664.82 682.288 L1664.26 682.288 L1663.7 682.288 L1663.14 682.288 L1662.58 682.288 L1662.03 682.288 L1661.47 682.288 L1660.91 682.288 L1660.35 682.288 L1659.79 682.288 L1659.23 682.288 L1658.67 682.288 L1658.11 682.288 L1657.55 682.288 L1656.99 682.288 L1656.43 682.288 L1655.87 682.288 L1655.31 682.288 L1654.76 682.288 L1654.2 682.288 L1653.64 682.288 L1653.08 682.288 L1652.52 682.288 L1651.96 682.288 L1651.4 682.288 L1650.84 682.288 L1650.28 682.288 L1649.72 682.288 L1649.16 682.288 L1648.6 682.288 L1648.04 682.288 L1647.48 682.288 L1646.93 682.288 L1646.37 682.288 L1645.81 682.288 L1645.25 682.288 L1644.69 682.288 L1644.13 682.288 L1643.57 682.288 L1643.01 682.288 L1642.45 682.288 L1641.89 682.288 L1641.33 682.288 L1640.77 682.288 L1640.21 682.288 L1639.66 682.288 L1639.1 682.288 L1638.54 682.288 L1637.98 682.288 L1637.42 682.288 L1636.86 682.288 L1636.3 682.288 L1635.74 682.288 L1635.18 682.288 L1634.62 682.288 L1634.06 682.288 L1633.5 682.288 L1632.94 682.288 L1632.39 682.288 L1631.83 682.288 L1631.27 682.288 L1630.71 682.288 L1630.15 682.288 L1629.59 682.288 L1629.03 682.288 L1628.47 682.288 L1627.91 682.288 L1627.35 682.288 L1626.79 682.288 L1626.23 682.288 L1625.67 682.288 L1625.11 682.288 L1624.56 682.288 L1624 682.288 L1623.44 682.288 L1622.88 682.288 L1622.32 682.288 L1621.76 682.288 L1621.2 682.288 L1620.64 682.288 L1620.08 682.288 L1619.52 682.288 L1618.96 682.288 L1618.4 682.288 L1617.84 682.288 L1617.29 682.288 L1616.73 682.288 L1616.17 682.288 L1615.61 682.288 L1615.05 682.288 L1614.49 682.288 L1613.93 682.288 L1613.37 682.288 L1612.81 682.288 L1612.25 682.288 L1611.69 682.288 L1611.13 682.288 L1610.57 682.288 L1610.02 682.288 L1609.46 682.288 L1608.9 682.288 L1608.34 682.288 L1607.78 682.288 L1607.22 682.288 L1606.66 682.288 L1606.1 682.288 L1605.54 682.288 L1604.98 682.288 L1604.42 682.288 L1603.86 682.288 L1603.3 682.288 L1602.74 682.288 L1602.19 682.288 L1601.63 682.288 L1601.07 682.288 L1600.51 682.288 L1599.95 682.288 L1599.39 682.288 L1598.83 682.288 L1598.27 682.288 L1597.71 682.288 L1597.15 682.288 L1596.59 682.288 L1596.03 682.288 L1595.47 682.288 L1594.92 682.288 L1594.36 682.288 L1593.8 682.288 L1593.24 682.288 L1592.68 682.288 L1592.12 682.288 L1591.56 682.288 L1591 682.288 L1590.44 682.288 L1589.88 682.288 L1589.32 682.288 L1588.76 682.288 L1588.2 682.288 L1587.65 682.288 L1587.09 682.288 L1586.53 682.288 L1585.97 682.288 L1585.41 682.288 L1584.85 682.288 L1584.29 682.288 L1583.73 682.288 L1583.17 682.288 L1582.61 682.288 L1582.05 682.288 L1581.49 682.288 L1580.93 682.288 L1580.37 682.288 L1579.82 682.288 L1579.26 682.288 L1578.7 682.288 L1578.14 682.288 L1577.58 682.288 L1577.02 682.288 L1576.46 682.288 L1575.9 682.288 L1575.34 682.288 L1574.78 682.288 L1574.22 682.288 L1573.66 682.288 L1573.1 682.288 L1572.55 682.288 L1571.99 682.288 L1571.43 682.288 L1570.87 682.288 L1570.31 682.288 L1569.75 682.288 L1569.19 682.288 L1568.63 682.288 L1568.07 682.288 L1567.51 682.288 L1566.95 682.288 L1566.39 682.288 L1565.83 682.288 L1565.28 682.288 L1564.72 682.288 L1564.16 682.288 L1563.6 682.288 L1563.04 682.288 L1562.48 682.288 L1561.92 682.288 L1561.36 682.288 L1560.8 682.288 L1560.24 682.288 L1559.68 682.288 L1559.12 682.288 L1558.56 682.288 L1558 682.288 L1557.45 682.288 L1556.89 682.288 L1556.33 682.288 L1555.77 682.288 L1555.21 682.288 L1554.65 682.288 L1554.09 682.288 L1553.53 682.288 L1552.97 682.288 L1552.41 682.288 L1551.85 682.288 L1551.29 682.288 L1550.73 682.288 L1550.18 682.288 L1549.62 682.288 L1549.06 682.288 L1548.5 682.288 L1547.94 682.288 L1547.38 682.288 L1546.82 682.288 L1546.26 682.288 L1545.7 682.288 L1545.14 682.288 L1544.58 682.288 L1544.02 682.288 L1543.46 682.288 L1542.9 682.288 L1542.35 682.288 L1541.79 682.288 L1541.23 682.288 L1540.67 682.288 L1540.11 682.288 L1539.55 682.288 L1538.99 682.288 L1538.43 682.288 L1537.87 682.288 L1537.31 682.288 L1536.75 682.288 L1536.19 682.288 L1535.63 682.288 L1535.08 682.288 L1534.52 682.288 L1533.96 682.288 L1533.4 682.288 L1532.84 682.288 L1532.28 682.288 L1531.72 682.288 L1531.16 682.288 L1530.6 682.288 L1530.04 682.288 L1529.48 682.288 L1528.92 682.288 L1528.36 682.288 L1527.81 682.288 L1527.25 682.288 L1526.69 682.288 L1526.13 682.288 L1525.57 682.288 L1525.01 682.288 L1524.45 682.288 L1523.89 682.288 L1523.33 682.288 L1522.77 682.288 L1522.21 682.288 L1521.65 682.288 L1521.09 682.288 L1520.53 682.288 L1519.98 682.288 L1519.42 682.288 L1518.86 682.288 L1518.3 682.288 L1517.74 682.288 L1517.18 682.288 L1516.62 682.288 L1516.06 682.288 L1515.5 682.288 L1514.94 682.288 L1514.38 682.288 L1513.82 682.288 L1513.26 682.288 L1512.71 682.288 L1512.15 682.288 L1511.59 682.288 L1511.03 682.288 L1510.47 682.288 L1509.91 682.288 L1509.35 682.288 L1508.79 682.288 L1508.23 682.288 L1507.67 682.288 L1507.11 682.288 L1506.55 682.288 L1505.99 682.288 L1505.44 682.288 L1504.88 682.288 L1504.32 682.288 L1503.76 682.288 L1503.2 682.288 L1502.64 682.288 L1502.08 682.288 L1501.52 682.288 L1500.96 682.288 L1500.4 682.288 L1499.84 682.288 L1499.28 682.288 L1498.72 682.288 L1498.16 682.288 L1497.61 682.288 L1497.05 682.288 L1496.49 682.288 L1495.93 682.288 L1495.37 682.288 L1494.81 682.288 L1494.25 682.288 L1493.69 682.288 L1493.13 682.288 L1492.57 682.288 L1492.01 682.288 L1491.45 682.288 L1490.89 682.288 L1490.34 682.288 L1489.78 682.288 L1489.22 682.288 L1488.66 682.288 L1488.1 682.288 L1487.54 682.288 L1486.98 682.288 L1486.42 682.288 L1485.86 682.288 L1485.3 682.288 L1484.74 682.288 L1484.18 682.288 L1483.62 682.288 L1483.07 682.288 L1482.51 682.288 L1481.95 682.288 L1481.39 682.288 L1480.83 682.288 L1480.27 682.288 L1479.71 682.288 L1479.15 682.288 L1478.59 682.288 L1478.03 682.288 L1477.47 682.288 L1476.91 682.288 L1476.35 682.288 L1475.79 682.288 L1475.24 682.288 L1474.68 682.288 L1474.12 682.288 L1473.56 682.288 L1473 682.288 L1472.44 682.288 L1471.88 682.288 L1471.32 682.288 L1470.76 682.288 L1470.2 682.288 L1469.64 682.288 L1469.08 682.288 L1468.52 682.288 L1467.97 682.288 L1467.41 682.288 L1466.85 682.288 L1466.29 682.288 L1465.73 682.288 L1465.17 682.288 L1464.61 682.288 L1464.05 682.288 L1463.49 682.288 L1462.93 682.288 L1462.37 682.288 L1461.81 682.288 L1461.25 682.288 L1460.7 682.288 L1460.14 682.288 L1459.58 682.288 L1459.02 682.288 L1458.46 682.288 L1457.9 682.288 L1457.34 682.288 L1456.78 682.288 L1456.22 682.288 L1455.66 682.288 L1455.1 682.288 L1454.54 682.288 L1453.98 682.288 L1453.42 682.288 L1452.87 682.288 L1452.31 682.288 L1451.75 682.288 L1451.19 682.288 L1450.63 682.288 L1450.07 682.288 L1449.51 682.288 L1448.95 682.288 L1448.39 682.288 L1447.83 682.288 L1447.27 682.288 L1446.71 682.288 L1446.15 682.288 L1445.6 682.288 L1445.04 682.288 L1444.48 682.288 L1443.92 682.288 L1443.36 682.288 L1442.8 682.288 L1442.24 682.288 L1441.68 682.288 L1441.12 682.288 L1440.56 682.288 L1440 682.288 L1439.44 682.288 L1438.88 682.288 L1438.33 682.288 L1437.77 682.288 L1437.21 682.288 L1436.65 682.288 L1436.09 682.288 L1435.53 682.288 L1434.97 682.288 L1434.41 682.288 L1433.85 682.288 L1433.29 682.288 L1432.73 682.288 L1432.17 682.288 L1431.61 682.288 L1431.05 682.288 L1430.5 682.288 L1429.94 682.288 L1429.38 682.288 L1428.82 682.288 L1428.26 682.288 L1427.7 682.288 L1427.14 682.288 L1426.58 682.288 L1426.02 682.288 L1425.46 682.288 L1424.9 682.288 L1424.34 682.288 L1423.78 682.288 L1423.23 682.288 L1422.67 682.288 L1422.11 682.288 L1421.55 682.288 L1420.99 682.288 L1420.43 682.288 L1419.87 682.288 L1419.31 682.288 L1418.75 682.288 L1418.19 682.288 L1417.63 682.288 L1417.07 682.288 L1416.51 682.288 L1415.95 682.288 L1415.4 682.288 L1414.84 682.288 L1414.28 682.288 L1413.72 682.288 L1413.16 682.288 L1412.6 682.288 L1412.04 682.288 L1411.48 682.288 L1410.92 682.288 L1410.36 682.288 L1409.8 682.288 L1409.24 682.288 L1408.68 682.288 L1408.13 682.288 L1407.57 682.288 L1407.01 682.288 L1406.45 682.288 L1405.89 682.288 L1405.33 682.288 L1404.77 682.288 L1404.21 682.288 L1403.65 682.288 L1403.09 682.288 L1402.53 682.288 L1401.97 682.288 L1401.41 682.288 L1400.86 682.288 L1400.3 682.288 L1399.74 682.288 L1399.18 682.288 L1398.62 682.288 L1398.06 682.288 L1397.5 682.288 L1396.94 682.288 L1396.38 682.288 L1395.82 682.288 L1395.26 682.288 L1394.7 682.288 L1394.14 682.288 L1393.58 682.288 L1393.03 682.288 L1392.47 682.288 L1391.91 682.288 L1391.35 682.288 L1390.79 682.288 L1390.23 682.288 L1389.67 682.288 L1389.11 682.288 L1388.55 682.288 L1387.99 682.288 L1387.43 682.288 L1386.87 682.288 L1386.31 682.288 L1385.76 682.288 L1385.2 682.288 L1384.64 682.288 L1384.08 682.288 L1383.52 682.288 L1382.96 682.288 L1382.4 682.288 L1381.84 682.288 L1381.28 682.288 L1380.72 682.288 L1380.16 682.288 L1379.6 682.288 L1379.04 682.288 L1378.49 682.288 L1377.93 682.288 L1377.37 682.288 L1376.81 682.288 L1376.25 682.288 L1375.69 682.288 L1375.13 682.288 L1374.57 682.288 L1374.01 682.288 L1373.45 682.288 L1372.89 682.288 L1372.33 682.288 L1371.77 682.288 L1371.21 682.288 L1370.66 682.288 L1370.1 682.288 L1369.54 682.288 L1368.98 682.288 L1368.42 682.288 L1367.86 682.288 L1367.3 682.288 L1366.74 682.288 L1366.18 682.288 L1365.62 682.288 L1365.06 682.288 L1364.5 682.288 L1363.94 682.288 L1363.39 682.288 L1362.83 682.288 L1362.27 682.288 L1361.71 682.288 L1361.15 682.288 L1360.59 682.288 L1360.03 682.288 L1359.47 682.288 L1358.91 682.288 L1358.35 682.288 L1357.79 682.288 L1357.23 682.288 L1356.67 682.288 L1356.12 682.288 L1355.56 682.288 L1355 682.288 L1354.44 682.288 L1353.88 682.288 L1353.32 682.288 L1352.76 682.288 L1352.2 682.288 L1351.64 682.288 L1351.08 682.288 L1350.52 682.288 L1349.96 682.288 L1349.4 682.288 L1348.84 682.288 L1348.29 682.288 L1347.73 682.288 L1347.17 682.288 L1346.61 682.288 L1346.05 682.288 L1345.49 682.288 L1344.93 682.288 L1344.37 682.288 L1343.81 682.288 L1343.25 682.288 L1342.69 682.288 L1342.13 682.288 L1341.57 682.288 L1341.02 682.288 L1340.46 682.288 L1339.9 682.288 L1339.34 682.288 L1338.78 682.288 L1338.22 682.288 L1337.66 682.288 L1337.1 682.288 L1336.54 682.288 L1335.98 682.288 L1335.42 682.288 L1334.86 682.288 L1334.3 682.288 L1333.75 682.288 L1333.19 682.288 L1332.63 682.288 L1332.07 682.288 L1331.51 682.288 L1330.95 682.288 L1330.39 682.288 L1329.83 682.288 L1329.27 682.288 L1328.71 682.288 L1328.15 682.288 L1327.59 682.288 L1327.03 682.288 L1326.47 682.288 L1325.92 682.288 L1325.36 682.288 L1324.8 682.288 L1324.24 682.288 L1323.68 682.288 L1323.12 682.288 L1322.56 682.288 L1322 682.288 L1321.44 682.288 L1320.88 682.288 L1320.32 682.288 L1319.76 682.288 L1319.2 682.288 L1318.65 682.288 L1318.09 682.288 L1317.53 682.288 L1316.97 682.288 L1316.41 682.288 L1315.85 682.288 L1315.29 682.288 L1314.73 682.288 L1314.17 682.288 L1313.61 682.288 L1313.05 682.288 L1312.49 682.288 L1311.93 682.288 L1311.38 682.288 L1310.82 682.288 L1310.26 682.288 L1309.7 682.288 L1309.14 682.288 L1308.58 682.288 L1308.02 682.288 L1307.46 682.288 L1306.9 682.288 L1306.34 682.288 L1305.78 682.288 L1305.22 682.288 L1304.66 682.288 L1304.1 682.288 L1303.55 682.288 L1302.99 682.288 L1302.43 682.288 L1301.87 682.288 L1301.31 682.288 L1300.75 682.288 L1300.19 682.288 L1299.63 682.288 L1299.07 682.288 L1298.51 682.288 L1297.95 682.288 L1297.39 682.288 L1296.83 682.288 L1296.28 682.288 L1295.72 682.288 L1295.16 682.288 L1294.6 682.288 L1294.04 682.288 L1293.48 682.288 L1292.92 682.288 L1292.36 682.288 L1291.8 682.288 L1291.24 682.288 L1290.68 682.288 L1290.12 682.288 L1289.56 682.288 L1289 682.288 L1288.45 682.288 L1287.89 682.288 L1287.33 682.288 L1286.77 682.288 L1286.21 682.288 L1285.65 682.288 L1285.09 682.288 L1284.53 682.288 L1283.97 682.288 L1283.41 682.288 L1282.85 682.288 L1282.29 682.288 L1281.73 682.288 L1281.18 682.288 L1280.62 682.288 L1280.06 682.288 L1279.5 682.288 L1278.94 682.288 L1278.38 682.288 L1277.82 682.288 L1277.26 682.288 L1276.7 682.288 L1276.14 682.288 L1275.58 682.288 L1275.02 682.288 L1274.46 682.288 L1273.91 682.288 L1273.35 682.288 L1272.79 682.288 L1272.23 682.288 L1271.67 682.288 L1271.11 682.288 L1270.55 682.288 L1269.99 682.288 L1269.43 682.288 L1268.87 682.288 L1268.31 682.288 L1267.75 682.288 L1267.19 682.288 L1266.63 682.288 L1266.08 682.288 L1265.52 682.288 L1264.96 682.288 L1264.4 682.288 L1263.84 682.288 L1263.28 682.288 L1262.72 682.288 L1262.16 682.288 L1261.6 682.288 L1261.04 682.288 L1260.48 682.288 L1259.92 682.288 L1259.36 682.288 L1258.81 682.288 L1258.25 682.288 L1257.69 682.288 L1257.13 682.288 L1256.57 682.288 L1256.01 682.288 L1255.45 682.288 L1254.89 682.288 L1254.33 682.288 L1253.77 682.288 L1253.21 682.288 L1252.65 682.288 L1252.09 682.288 L1251.54 682.288 L1250.98 682.288 L1250.42 682.288 L1249.86 682.288 L1249.3 682.288 L1248.74 682.288 L1248.18 682.288 L1247.62 682.288 L1247.06 682.288 L1246.5 682.288 L1245.94 682.288 L1245.38 682.288 L1244.82 682.288 L1244.26 682.288 L1243.71 682.288 L1243.15 682.288 L1242.59 682.288 L1242.03 682.288 L1241.47 682.288 L1240.91 682.288 L1240.35 682.288 L1239.79 682.288 L1239.23 682.288 L1238.67 682.288 L1238.11 682.288 L1237.55 682.288 L1236.99 682.288 L1236.44 682.288 L1235.88 682.288 L1235.32 682.288 L1234.76 682.288 L1234.2 682.288 L1233.64 682.288 L1233.08 682.288 L1232.52 682.288 L1231.96 682.288 L1231.4 682.288 L1230.84 682.288 L1230.28 682.288 L1229.72 682.288 L1229.17 682.288 L1228.61 682.288 L1228.05 682.288 L1227.49 682.288 L1226.93 682.288 L1226.37 682.288 L1225.81 682.288 L1225.25 682.288 L1224.69 682.288 L1224.13 682.288 L1223.57 682.288 L1223.01 682.288 L1222.45 682.288 L1221.89 682.288 L1221.34 682.288 L1220.78 682.288 L1220.22 682.288 L1219.66 682.288 L1219.1 682.288 L1218.54 682.288 L1217.98 682.288 L1217.42 682.288 L1216.86 682.288 L1216.3 682.288 L1215.74 682.288 L1215.18 682.288 L1214.62 682.288 L1214.07 682.288 L1213.51 682.288 L1212.95 682.288 L1212.39 682.288 L1211.83 682.288 L1211.27 682.288 L1210.71 682.288 L1210.15 682.288 L1209.59 682.288 L1209.03 682.288 L1208.47 682.288 L1207.91 682.288 L1207.35 682.288 L1206.8 682.288 L1206.24 682.288 L1205.68 682.288 L1205.12 682.288 L1204.56 682.288 L1204 682.288 L1203.44 682.288 L1202.88 682.288 L1202.32 682.288 L1201.76 682.288 L1201.2 682.288 L1200.64 682.288 L1200.08 682.288 L1199.52 682.288 L1198.97 682.288 L1198.41 682.288 L1197.85 682.288 L1197.29 682.288 L1196.73 682.288 L1196.17 682.288 L1195.61 682.288 L1195.05 682.288 L1194.49 682.288 L1193.93 682.288 L1193.37 682.288 L1192.81 682.288 L1192.25 682.288 L1191.7 682.288 L1191.14 682.288 L1190.58 682.288 L1190.02 682.288 L1189.46 682.288 L1188.9 682.288 L1188.34 682.288 L1187.78 682.288 L1187.22 682.288 L1186.66 682.288 L1186.1 682.288 L1185.54 682.288 L1184.98 682.288 L1184.43 682.288 L1183.87 682.288 L1183.31 682.288 L1182.75 682.288 L1182.19 682.288 L1181.63 682.288 L1181.07 682.288 L1180.51 682.288 L1179.95 682.288 L1179.39 682.288 L1178.83 682.288 L1178.27 682.288 L1177.71 682.288 L1177.15 682.288 L1176.6 682.288 L1176.04 682.288 L1175.48 682.288 L1174.92 682.288 L1174.36 682.288 L1173.8 682.288 L1173.24 682.288 L1172.68 682.288 L1172.12 682.288 L1171.56 682.288 L1171 682.288 L1170.44 682.288 L1169.88 682.288 L1169.33 682.288 L1168.77 682.288 L1168.21 682.288 L1167.65 682.288 L1167.09 682.288 L1166.53 682.288 L1165.97 682.288 L1165.41 682.288 L1164.85 682.288 L1164.29 682.288 L1163.73 682.288 L1163.17 682.288 L1162.61 682.288 L1162.05 682.288 L1161.5 682.288 L1160.94 682.288 L1160.38 682.288 L1159.82 682.288 L1159.26 682.288 L1158.7 682.288 L1158.14 682.288 L1157.58 682.288 L1157.02 682.288 L1156.46 682.288 L1155.9 682.288 L1155.34 682.288 L1154.78 682.288 L1154.23 682.288 L1153.67 682.288 L1153.11 682.288 L1152.55 682.288 L1151.99 682.288 L1151.43 682.288 L1150.87 682.288 L1150.31 682.288 L1149.75 682.288 L1149.19 682.288 L1148.63 682.288 L1148.07 682.288 L1147.51 682.288 L1146.96 682.288 L1146.4 682.288 L1145.84 682.288 L1145.28 682.288 L1144.72 682.288 L1144.16 682.288 L1143.6 682.288 L1143.04 682.288 L1142.48 682.288 L1141.92 682.288 L1141.36 682.288 L1140.8 682.288 L1140.24 682.288 L1139.68 682.288 L1139.13 682.288 L1138.57 682.288 L1138.01 682.288 L1137.45 682.288 L1136.89 682.288 L1136.33 682.288 L1135.77 682.288 L1135.21 682.288 L1134.65 682.288 L1134.09 682.288 L1133.53 682.288 L1132.97 682.288 L1132.41 682.288 L1131.86 682.288 L1131.3 682.288 L1130.74 682.288 L1130.18 682.288 L1129.62 682.288 L1129.06 682.288 L1128.5 682.288 L1127.94 682.288 L1127.38 682.288 L1126.82 682.288 L1126.26 682.288 L1125.7 682.288 L1125.14 682.288 L1124.59 682.288 L1124.03 682.288 L1123.47 682.288 L1122.91 682.288 L1122.35 682.288 L1121.79 682.288 L1121.23 682.288 L1120.67 682.288 L1120.11 682.288 L1119.55 682.288 L1118.99 682.288 L1118.43 682.288 L1117.87 682.288 L1117.31 682.288 L1116.76 682.288 L1116.2 682.288 L1115.64 682.288 L1115.08 682.288 L1114.52 682.288 L1113.96 682.288 L1113.4 682.288 L1112.84 682.288 L1112.28 682.288 L1111.72 682.288 L1111.16 682.288 L1110.6 682.288 L1110.04 682.288 L1109.49 682.288 L1108.93 682.288 L1108.37 682.288 L1107.81 682.288 L1107.25 682.288 L1106.69 682.288 L1106.13 682.288 L1105.57 682.288 L1105.01 682.288 L1104.45 682.288 L1103.89 682.288 L1103.33 682.288 L1102.77 682.288 L1102.22 682.288 L1101.66 682.288 L1101.1 682.288 L1100.54 682.288 L1099.98 682.288 L1099.42 682.288 L1098.86 682.288 L1098.3 682.288 L1097.74 682.288 L1097.18 682.288 L1096.62 682.288 L1096.06 682.288 L1095.5 682.288 L1094.94 682.288 L1094.39 682.288 L1093.83 682.288 L1093.27 682.288 L1092.71 682.288 L1092.15 682.288 L1091.59 682.288 L1091.03 682.288 L1090.47 682.288 L1089.91 682.288 L1089.35 682.288 L1088.79 682.288 L1088.23 682.288 L1087.67 682.288 L1087.12 682.288 L1086.56 682.288 L1086 682.288 L1085.44 682.288 L1084.88 682.288 L1084.32 682.288 L1083.76 682.288 L1083.2 682.288 L1082.64 682.288 L1082.08 682.288 L1081.52 682.288 L1080.96 682.288 L1080.4 682.288 L1079.85 682.288 L1079.29 682.288 L1078.73 682.288 L1078.17 682.288 L1077.61 682.288 L1077.05 682.288 L1076.49 682.288 L1075.93 682.288 L1075.37 682.288 L1074.81 682.288 L1074.25 682.288 L1073.69 682.288 L1073.13 682.288 L1072.57 682.288 L1072.02 682.288 L1071.46 682.288 L1070.9 682.288 L1070.34 682.288 L1069.78 682.288 L1069.22 682.288 L1068.66 682.288 L1068.1 682.288 L1067.54 682.288 L1066.98 682.288 L1066.42 682.288 L1065.86 682.288 L1065.3 682.288 L1064.75 682.288 L1064.19 682.288 L1063.63 682.288 L1063.07 682.288 L1062.51 682.288 L1061.95 682.288 L1061.39 682.288 L1060.83 682.288 L1060.27 682.288 L1059.71 682.288 L1059.15 682.288 L1058.59 682.288 L1058.03 682.288 L1057.48 682.288 L1056.92 682.288 L1056.36 682.288 L1055.8 682.288 L1055.24 682.288 L1054.68 682.288 L1054.12 682.288 L1053.56 682.288 L1053 682.288 L1052.44 682.288 L1051.88 682.288 L1051.32 682.288 L1050.76 682.288 L1050.2 682.288 L1049.65 682.288 L1049.09 682.288 L1048.53 682.288 L1047.97 682.288 L1047.41 682.288 L1046.85 682.288 L1046.29 682.288 L1045.73 682.288 L1045.17 682.288 L1044.61 682.288 L1044.05 682.288 L1043.49 682.288 L1042.93 682.288 L1042.38 682.288 L1041.82 682.288 L1041.26 682.288 L1040.7 682.288 L1040.14 682.288 L1039.58 682.288 L1039.02 682.288 L1038.46 682.288 L1037.9 682.288 L1037.34 682.288 L1036.78 682.288 L1036.22 682.288 L1035.66 682.288 L1035.1 682.288 L1034.55 682.288 L1033.99 682.288 L1033.43 682.288 L1032.87 682.288 L1032.31 682.288 L1031.75 682.288 L1031.19 682.288 L1030.63 682.288 L1030.07 682.288 L1029.51 682.288 L1028.95 682.288 L1028.39 682.288 L1027.83 682.288 L1027.28 682.288 L1026.72 682.288 L1026.16 682.288 L1025.6 682.288 L1025.04 682.288 L1024.48 682.288 L1023.92 682.288 L1023.36 682.288 L1022.8 682.288 L1022.24 682.288 L1021.68 682.288 L1021.12 682.288 L1020.56 682.288 L1020.01 682.288 L1019.45 682.288 L1018.89 682.288 L1018.33 682.288 L1017.77 682.288 L1017.21 682.288 L1016.65 682.288 L1016.09 682.288 L1015.53 682.288 L1014.97 682.288 L1014.41 682.288 L1013.85 682.288 L1013.29 682.288 L1012.73 682.288 L1012.18 682.288 L1011.62 682.288 L1011.06 682.288 L1010.5 682.288 L1009.94 682.288 L1009.38 682.288 L1008.82 682.288 L1008.26 682.288 L1007.7 682.288 L1007.14 682.288 L1006.58 682.288 L1006.02 682.288 L1005.46 682.288 L1004.91 682.288 L1004.35 682.288 L1003.79 682.288 L1003.23 682.288 L1002.67 682.288 L1002.11 682.288 L1001.55 682.288 L1000.99 682.288 L1000.43 682.288 L999.872 682.288 L999.313 682.288 L998.754 682.288 L998.194 682.288 L997.635 682.288 L997.076 682.288 L996.517 682.288 L995.957 682.288 L995.398 682.288 L994.839 682.288 L994.28 682.288 L993.72 682.288 L993.161 682.288 L992.602 682.288 L992.043 682.288 L991.483 682.288 L990.924 682.288 L990.365 682.288 L989.806 682.288 L989.246 682.288 L988.687 682.288 L988.128 682.288 L987.569 682.288 L987.009 682.288 L986.45 682.288 L985.891 682.288 L985.332 682.288 L984.772 682.288 L984.213 682.288 L983.654 682.288 L983.095 682.288 L982.535 682.288 L981.976 682.288 L981.417 682.288 L980.858 682.288 L980.298 682.288 L979.739 682.288 L979.18 682.288 L978.621 682.288 L978.061 682.288 L977.502 682.288 L976.943 682.288 L976.384 682.288 L975.824 682.288 L975.265 682.288 L974.706 682.288 L974.147 682.288 L973.587 682.288 L973.028 682.288 L972.469 682.288 L971.91 682.288 L971.35 682.288 L970.791 682.288 L970.232 682.288 L969.673 682.288 L969.113 682.288 L968.554 682.288 L967.995 682.288 L967.436 682.288 L966.876 682.288 L966.317 682.288 L965.758 682.288 L965.199 682.288 L964.639 682.288 L964.08 682.288 L963.521 682.288 L962.962 682.288 L962.402 682.288 L961.843 682.288 L961.284 682.288 L960.725 682.288 L960.165 682.288 L959.606 682.288 L959.047 682.288 L958.488 682.288 L957.928 682.288 L957.369 682.288 L956.81 682.288 L956.251 682.288 L955.691 682.288 L955.132 682.288 L954.573 682.288 L954.014 682.288 L953.454 682.288 L952.895 682.288 L952.336 682.288 L951.777 682.288 L951.217 682.288 L950.658 682.288 L950.099 682.288 L949.54 682.288 L948.98 682.288 L948.421 682.288 L947.862 682.288 L947.303 682.288 L946.743 682.288 L946.184 682.288 L945.625 682.288 L945.066 682.288 L944.506 682.288 L943.947 682.288 L943.388 682.288 L942.829 682.288 L942.269 682.288 L941.71 682.288 L941.151 682.288 L940.592 682.288 L940.032 682.288 L939.473 682.288 L938.914 682.288 L938.355 682.288 L937.795 682.288 L937.236 682.288 L936.677 682.288 L936.118 682.288 L935.558 682.288 L934.999 682.288 L934.44 682.288 L933.881 682.288 L933.321 682.288 L932.762 682.288 L932.203 682.288 L931.644 682.288 L931.084 682.288 L930.525 682.288 L929.966 682.288 L929.406 682.288 L928.847 682.288 L928.288 682.288 L927.729 682.288 L927.169 682.288 L926.61 682.288 L926.051 682.288 L925.492 682.288 L924.932 682.288 L924.373 682.288 L923.814 682.288 L923.255 682.288 L922.695 682.288 L922.136 682.288 L921.577 682.288 L921.018 682.288 L920.458 682.288 L919.899 682.288 L919.34 682.288 L918.781 682.288 L918.221 682.288 L917.662 682.288 L917.103 682.288 L916.544 682.288 L915.984 682.288 L915.425 682.288 L914.866 682.288 L914.307 682.288 L913.747 682.288 L913.188 682.288 L912.629 682.288 L912.07 682.288 L911.51 682.288 L910.951 682.288 L910.392 682.288 L909.833 682.288 L909.273 682.288 L908.714 682.288 L908.155 682.288 L907.596 682.288 L907.036 682.288 L906.477 682.288 L905.918 682.288 L905.359 682.288 L904.799 682.288 L904.24 682.288 L903.681 682.288 L903.122 682.288 L902.562 682.288 L902.003 682.288 L901.444 682.288 L900.885 682.288 L900.325 682.288 L899.766 682.288 L899.207 682.288 L898.648 682.288 L898.088 682.288 L897.529 682.288 L896.97 682.288 L896.411 682.288 L895.851 682.288 L895.292 682.288 L894.733 682.288 L894.174 682.288 L893.614 682.288 L893.055 682.288 L892.496 682.288 L891.937 682.288 L891.377 682.288 L890.818 682.288 L890.259 682.288 L889.7 682.288 L889.14 682.288 L888.581 682.288 L888.022 682.288 L887.463 682.288 L886.903 682.288 L886.344 682.288 L885.785 682.288 L885.226 682.288 L884.666 682.288 L884.107 682.288 L883.548 682.288 L882.989 682.288 L882.429 682.288 L881.87 682.288 L881.311 682.288 L880.752 682.288 L880.192 682.288 L879.633 682.288 L879.074 682.288 L878.515 682.288 L877.955 682.288 L877.396 682.288 L876.837 682.288 L876.278 682.288 L875.718 682.288 L875.159 682.288 L874.6 682.288 L874.041 682.288 L873.481 682.288 L872.922 682.288 L872.363 682.288 L871.804 682.288 L871.244 682.288 L870.685 682.288 L870.126 682.288 L869.567 682.288 L869.007 682.288 L868.448 682.288 L867.889 682.288 L867.33 682.288 L866.77 682.288 L866.211 682.288 L865.652 682.288 L865.093 682.288 L864.533 682.288 L863.974 682.288 L863.415 682.288 L862.856 682.288 L862.296 682.288 L861.737 682.288 L861.178 682.288 L860.619 682.288 L860.059 682.288 L859.5 682.288 L858.941 682.288 L858.382 682.288 L857.822 682.288 L857.263 682.288 L856.704 682.288 L856.145 682.288 L855.585 682.288 L855.026 682.288 L854.467 682.288 L853.908 682.288 L853.348 682.288 L852.789 682.288 L852.23 682.288 L851.671 682.288 L851.111 682.288 L850.552 682.288 L849.993 682.288 L849.434 682.288 L848.874 682.288 L848.315 682.288 L847.756 682.288 L847.197 682.288 L846.637 682.288 L846.078 682.288 L845.519 682.288 L844.96 682.288 L844.4 682.288 L843.841 682.288 L843.282 682.288 L842.723 682.288 L842.163 682.288 L841.604 682.288 L841.045 682.288 L840.486 682.288 L839.926 682.288 L839.367 682.288 L838.808 682.288 L838.249 682.288 L837.689 682.288 L837.13 682.288 L836.571 682.288 L836.012 682.288 L835.452 682.288 L834.893 682.288 L834.334 682.288 L833.775 682.288 L833.215 682.288 L832.656 682.288 L832.097 682.288 L831.538 682.288 L830.978 682.288 L830.419 682.288 L829.86 682.288 L829.301 682.288 L828.741 682.288 L828.182 682.288 L827.623 682.288 L827.064 682.288 L826.504 682.288 L825.945 682.288 L825.386 682.288 L824.827 682.288 L824.267 682.288 L823.708 682.288 L823.149 682.288 L822.59 682.288 L822.03 682.288 L821.471 682.288 L820.912 682.288 L820.353 682.288 L819.793 682.288 L819.234 682.288 L818.675 682.288 L818.116 682.288 L817.556 682.288 L816.997 682.288 L816.438 682.288 L815.879 682.288 L815.319 682.288 L814.76 682.288 L814.201 682.288 L813.642 682.288 L813.082 682.288 L812.523 682.288 L811.964 682.288 L811.405 682.288 L810.845 682.288 L810.286 682.288 L809.727 682.288 L809.168 682.288 L808.608 682.288 L808.049 682.288 L807.49 682.288 L806.931 682.288 L806.371 682.288 L805.812 682.288 L805.253 682.288 L804.693 682.288 L804.134 682.288 L803.575 682.288 L803.016 682.288 L802.456 682.288 L801.897 682.288 L801.338 682.288 L800.779 682.288 L800.219 682.288 L799.66 682.288 L799.101 682.288 L798.542 682.288 L797.982 682.288 L797.423 682.288 L796.864 682.288 L796.305 682.288 L795.745 682.288 L795.186 682.288 L794.627 682.288 L794.068 682.288 L793.508 682.288 L792.949 682.288 L792.39 682.288 L791.831 682.288 L791.271 682.288 L790.712 682.288 L790.153 682.288 L789.594 682.288 L789.034 682.288 L788.475 682.288 L787.916 682.288 L787.357 682.288 L786.797 682.288 L786.238 682.288 L785.679 682.288 L785.12 682.288 L784.56 682.288 L784.001 682.288 L783.442 682.288 L782.883 682.288 L782.323 682.288 L781.764 682.288 L781.205 682.288 L780.646 682.288 L780.086 682.288 L779.527 682.288 L778.968 682.288 L778.409 682.288 L777.849 682.288 L777.29 682.288 L776.731 682.288 L776.172 682.288 L775.612 682.288 L775.053 682.288 L774.494 682.288 L773.935 682.288 L773.375 682.288 L772.816 682.288 L772.257 682.288 L771.698 682.288 L771.138 682.288 L770.579 682.288 L770.02 682.288 L769.461 682.288 L768.901 682.288 L768.342 682.288 L767.783 682.288 L767.224 682.288 L766.664 682.288 L766.105 682.288 L765.546 682.288 L764.987 682.288 L764.427 682.288 L763.868 682.288 L763.309 682.288 L762.75 682.288 L762.19 682.288 L761.631 682.288 L761.072 682.288 L760.513 682.288 L759.953 682.288 L759.394 682.288 L758.835 682.288 L758.276 682.288 L757.716 682.288 L757.157 682.288 L756.598 682.288 L756.039 682.288 L755.479 682.288 L754.92 682.288 L754.361 682.288 L753.802 682.288 L753.242 682.288 L752.683 682.288 L752.124 682.288 L751.565 682.288 L751.005 682.288 L750.446 682.288 L749.887 682.288 L749.328 682.288 L748.768 682.288 L748.209 682.288 L747.65 682.288 L747.091 682.288 L746.531 682.288 L745.972 682.288 L745.413 682.288 L744.854 682.288 L744.294 682.288 L743.735 682.288 L743.176 682.288 L742.617 682.288 L742.057 682.288 L741.498 682.288 L740.939 682.288 L740.38 682.288 L739.82 682.288 L739.261 682.288 L738.702 682.288 L738.143 682.288 L737.583 682.288 L737.024 682.288 L736.465 682.288 L735.906 682.288 L735.346 682.288 L734.787 682.288 L734.228 682.288 L733.669 682.288 L733.109 682.288 L732.55 682.288 L731.991 682.288 L731.432 682.288 L730.872 682.288 L730.313 682.288 L729.754 682.288 L729.195 682.288 L728.635 682.288 L728.076 682.288 L727.517 682.288 L726.958 682.288 L726.398 682.288 L725.839 682.288 L725.28 682.288 L724.721 682.288 L724.161 682.288 L723.602 682.288 L723.043 682.288 L722.484 682.288 L721.924 682.288 L721.365 682.288 L720.806 682.288 L720.247 682.288  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.569 720.806,683.569 721.365,683.569 721.924,683.569 722.484,683.569 723.043,683.569 723.602,683.569 724.161,683.569 724.721,683.569 725.28,683.569 725.839,683.569 726.398,683.569 726.958,683.569 727.517,683.569 728.076,683.569 728.635,683.569 729.195,683.569 729.754,683.569 730.313,683.569 730.872,683.569 731.432,683.569 731.991,683.569 732.55,683.569 733.109,683.569 733.669,683.569 734.228,683.569 734.787,683.569 735.346,683.569 735.906,683.569 736.465,683.569 737.024,683.569 737.583,683.569 738.143,683.569 738.702,683.569 739.261,683.569 739.82,683.569 740.38,683.569 740.939,683.569 741.498,683.569 742.057,683.569 742.617,683.569 743.176,683.569 743.735,683.569 744.294,683.569 744.854,683.569 745.413,683.569 745.972,683.569 746.531,683.569 747.091,683.569 747.65,683.569 748.209,683.569 748.768,683.569 749.328,683.569 749.887,683.569 750.446,683.569 751.005,683.569 751.565,683.569 752.124,683.569 752.683,683.569 753.242,683.569 753.802,683.569 754.361,683.569 754.92,683.569 755.479,683.569 756.039,683.569 756.598,683.569 757.157,683.569 757.716,683.569 758.276,683.569 758.835,683.569 759.394,683.569 759.953,683.569 760.513,683.569 761.072,683.569 761.631,683.569 762.19,683.569 762.75,683.569 763.309,683.569 763.868,683.569 764.427,683.569 764.987,683.569 765.546,683.569 766.105,683.569 766.664,683.569 767.224,683.569 767.783,683.569 768.342,683.569 768.901,683.569 769.461,683.569 770.02,683.569 770.579,683.569 771.138,683.569 771.698,683.569 772.257,683.569 772.816,683.569 773.375,683.569 773.935,683.569 774.494,683.569 775.053,683.569 775.612,683.569 776.172,683.569 776.731,683.569 777.29,683.569 777.849,683.569 778.409,683.569 778.968,683.569 779.527,683.569 780.086,683.569 780.646,683.569 781.205,683.569 781.764,683.569 782.323,683.569 782.883,683.569 783.442,683.569 784.001,683.569 784.56,683.569 785.12,683.569 785.679,683.569 786.238,683.569 786.797,683.569 787.357,683.569 787.916,683.569 788.475,683.569 789.034,683.569 789.594,683.569 790.153,683.569 790.712,683.569 791.271,683.569 791.831,683.569 792.39,683.569 792.949,683.569 793.508,683.569 794.068,683.569 794.627,683.569 795.186,683.569 795.745,683.569 796.305,683.569 796.864,683.569 797.423,683.569 797.982,683.569 798.542,683.569 799.101,683.569 799.66,683.569 800.219,683.569 800.779,683.569 801.338,683.569 801.897,683.569 802.456,683.569 803.016,683.569 803.575,683.569 804.134,683.569 804.693,683.569 805.253,683.569 805.812,683.569 806.371,683.569 806.931,683.569 807.49,683.569 808.049,683.569 808.608,683.569 809.168,683.569 809.727,683.569 810.286,683.569 810.845,683.569 811.405,683.569 811.964,683.569 812.523,683.569 813.082,683.569 813.642,683.569 814.201,683.569 814.76,683.569 815.319,683.569 815.879,683.569 816.438,683.569 816.997,683.569 817.556,683.569 818.116,683.569 818.675,683.569 819.234,683.569 819.793,683.569 820.353,683.569 820.912,683.569 821.471,683.569 822.03,683.569 822.59,683.569 823.149,683.569 823.708,683.569 824.267,683.569 824.827,683.569 825.386,683.569 825.945,683.569 826.504,683.569 827.064,683.569 827.623,683.569 828.182,683.569 828.741,683.569 829.301,683.569 829.86,683.569 830.419,683.569 830.978,683.569 831.538,683.569 832.097,683.569 832.656,683.569 833.215,683.569 833.775,683.569 834.334,683.569 834.893,683.569 835.452,683.569 836.012,683.569 836.571,683.569 837.13,683.569 837.689,683.569 838.249,683.569 838.808,683.569 839.367,683.569 839.926,683.569 840.486,683.569 841.045,683.569 841.604,683.569 842.163,683.569 842.723,683.569 843.282,683.569 843.841,683.569 844.4,683.569 844.96,683.569 845.519,683.569 846.078,683.569 846.637,683.569 847.197,683.569 847.756,683.569 848.315,683.569 848.874,683.569 849.434,683.569 849.993,683.569 850.552,683.569 851.111,683.569 851.671,683.569 852.23,683.569 852.789,683.569 853.348,683.569 853.908,683.569 854.467,683.569 855.026,683.569 855.585,683.569 856.145,683.569 856.704,683.569 857.263,683.569 857.822,683.569 858.382,683.569 858.941,683.569 859.5,683.569 860.059,683.569 860.619,683.569 861.178,683.569 861.737,683.569 862.296,683.569 862.856,683.569 863.415,683.569 863.974,683.569 864.533,683.569 865.093,683.569 865.652,683.569 866.211,683.569 866.77,683.569 867.33,683.569 867.889,683.569 868.448,683.569 869.007,683.569 869.567,683.569 870.126,683.569 870.685,683.569 871.244,683.569 871.804,683.569 872.363,683.569 872.922,683.569 873.481,683.569 874.041,683.569 874.6,683.569 875.159,683.569 875.718,683.569 876.278,683.569 876.837,683.569 877.396,683.569 877.955,683.569 878.515,683.569 879.074,683.569 879.633,683.569 880.192,683.569 880.752,683.569 881.311,683.569 881.87,683.569 882.429,683.569 882.989,683.569 883.548,683.569 884.107,683.569 884.666,683.569 885.226,683.569 885.785,683.569 886.344,683.569 886.903,683.569 887.463,683.569 888.022,683.569 888.581,683.569 889.14,683.569 889.7,683.569 890.259,683.569 890.818,683.569 891.377,683.569 891.937,683.569 892.496,683.569 893.055,683.569 893.614,683.569 894.174,683.569 894.733,683.569 895.292,683.569 895.851,683.569 896.411,683.569 896.97,683.569 897.529,683.569 898.088,683.569 898.648,683.569 899.207,683.569 899.766,683.569 900.325,683.569 900.885,683.569 901.444,683.569 902.003,683.569 902.562,683.569 903.122,683.569 903.681,683.569 904.24,683.569 904.799,683.569 905.359,683.569 905.918,683.569 906.477,683.569 907.036,683.569 907.596,683.569 908.155,683.569 908.714,683.569 909.273,683.569 909.833,683.569 910.392,683.569 910.951,683.569 911.51,683.569 912.07,683.569 912.629,683.569 913.188,683.569 913.747,683.569 914.307,683.569 914.866,683.569 915.425,683.569 915.984,683.569 916.544,683.569 917.103,683.569 917.662,683.569 918.221,683.569 918.781,683.569 919.34,683.569 919.899,683.569 920.458,683.569 921.018,683.569 921.577,683.569 922.136,683.569 922.695,683.569 923.255,683.569 923.814,683.569 924.373,683.569 924.932,683.569 925.492,683.569 926.051,683.569 926.61,683.569 927.169,683.569 927.729,683.569 928.288,683.569 928.847,683.569 929.406,683.569 929.966,683.569 930.525,683.569 931.084,683.569 931.644,683.569 932.203,683.569 932.762,683.569 933.321,683.569 933.881,683.569 934.44,683.569 934.999,683.569 935.558,683.569 936.118,683.569 936.677,683.569 937.236,683.569 937.795,683.569 938.355,683.569 938.914,683.569 939.473,683.569 940.032,683.569 940.592,683.569 941.151,683.569 941.71,683.569 942.269,683.569 942.829,683.569 943.388,683.569 943.947,683.569 944.506,683.569 945.066,683.569 945.625,683.569 946.184,683.569 946.743,683.569 947.303,683.569 947.862,683.569 948.421,683.569 948.98,683.569 949.54,683.569 950.099,683.569 950.658,683.569 951.217,683.569 951.777,683.569 952.336,683.569 952.895,683.569 953.454,683.569 954.014,683.569 954.573,683.569 955.132,683.569 955.691,683.569 956.251,683.569 956.81,683.569 957.369,683.569 957.928,683.569 958.488,683.569 959.047,683.569 959.606,683.569 960.165,683.569 960.725,683.569 961.284,683.569 961.843,683.569 962.402,683.569 962.962,683.569 963.521,683.569 964.08,683.569 964.639,683.569 965.199,683.569 965.758,683.569 966.317,683.569 966.876,683.569 967.436,683.569 967.995,683.569 968.554,683.569 969.113,683.569 969.673,683.569 970.232,683.569 970.791,683.569 971.35,683.569 971.91,683.569 972.469,683.569 973.028,683.569 973.587,683.569 974.147,683.569 974.706,683.569 975.265,683.569 975.824,683.569 976.384,683.569 976.943,683.569 977.502,683.569 978.061,683.569 978.621,683.569 979.18,683.569 979.739,683.569 980.298,683.569 980.858,683.569 981.417,683.569 981.976,683.569 982.535,683.569 983.095,683.569 983.654,683.569 984.213,683.569 984.772,683.569 985.332,683.569 985.891,683.569 986.45,683.569 987.009,683.569 987.569,683.569 988.128,683.569 988.687,683.569 989.246,683.569 989.806,683.569 990.365,683.569 990.924,683.569 991.483,683.569 992.043,683.569 992.602,683.569 993.161,683.569 993.72,683.569 994.28,683.569 994.839,683.569 995.398,683.569 995.957,683.569 996.517,683.569 997.076,683.569 997.635,683.569 998.194,683.569 998.754,683.569 999.313,683.569 999.872,683.569 1000.43,683.569 1000.99,683.569 1001.55,683.569 1002.11,683.569 1002.67,683.569 1003.23,683.569 1003.79,683.569 1004.35,683.569 1004.91,683.569 1005.46,683.569 1006.02,683.569 1006.58,683.569 1007.14,683.569 1007.7,683.569 1008.26,683.569 1008.82,683.569 1009.38,683.569 1009.94,683.569 1010.5,683.569 1011.06,683.569 1011.62,683.569 1012.18,683.569 1012.73,683.569 1013.29,683.569 1013.85,683.569 1014.41,683.569 1014.97,683.569 1015.53,683.569 1016.09,683.569 1016.65,683.569 1017.21,683.569 1017.77,683.569 1018.33,683.569 1018.89,683.569 1019.45,683.569 1020.01,683.569 1020.56,683.569 1021.12,683.569 1021.68,683.569 1022.24,683.569 1022.8,683.569 1023.36,683.569 1023.92,683.569 1024.48,683.569 1025.04,683.569 1025.6,683.569 1026.16,683.569 1026.72,683.569 1027.28,683.569 1027.83,683.569 1028.39,683.569 1028.95,683.569 1029.51,683.569 1030.07,683.569 1030.63,683.569 1031.19,683.569 1031.75,683.569 1032.31,683.569 1032.87,683.569 1033.43,683.569 1033.99,683.569 1034.55,683.569 1035.1,683.569 1035.66,683.569 1036.22,683.569 1036.78,683.569 1037.34,683.569 1037.9,683.569 1038.46,683.569 1039.02,683.569 1039.58,683.569 1040.14,683.569 1040.7,683.569 1041.26,683.569 1041.82,683.569 1042.38,683.569 1042.93,683.569 1043.49,683.569 1044.05,683.569 1044.61,683.569 1045.17,683.569 1045.73,683.569 1046.29,683.569 1046.85,683.569 1047.41,683.569 1047.97,683.569 1048.53,683.569 1049.09,683.569 1049.65,683.569 1050.2,683.569 1050.76,683.569 1051.32,683.569 1051.88,683.569 1052.44,683.569 1053,683.569 1053.56,683.569 1054.12,683.569 1054.68,683.569 1055.24,683.569 1055.8,683.569 1056.36,683.569 1056.92,683.569 1057.48,683.569 1058.03,683.569 1058.59,683.569 1059.15,683.569 1059.71,683.569 1060.27,683.569 1060.83,683.569 1061.39,683.569 1061.95,683.569 1062.51,683.569 1063.07,683.569 1063.63,683.569 1064.19,683.569 1064.75,683.569 1065.3,683.569 1065.86,683.569 1066.42,683.569 1066.98,683.569 1067.54,683.569 1068.1,683.569 1068.66,683.569 1069.22,683.569 1069.78,683.569 1070.34,683.569 1070.9,683.569 1071.46,683.569 1072.02,683.569 1072.57,683.569 1073.13,683.569 1073.69,683.569 1074.25,683.569 1074.81,683.569 1075.37,683.569 1075.93,683.569 1076.49,683.569 1077.05,683.569 1077.61,683.569 1078.17,683.569 1078.73,683.569 1079.29,683.569 1079.85,683.569 1080.4,683.569 1080.96,683.569 1081.52,683.569 1082.08,683.569 1082.64,683.569 1083.2,683.569 1083.76,683.569 1084.32,683.569 1084.88,683.569 1085.44,683.569 1086,683.569 1086.56,683.569 1087.12,683.569 1087.67,683.569 1088.23,683.569 1088.79,683.569 1089.35,683.569 1089.91,683.569 1090.47,683.569 1091.03,683.569 1091.59,683.569 1092.15,683.569 1092.71,683.569 1093.27,683.569 1093.83,683.569 1094.39,683.569 1094.94,683.569 1095.5,683.569 1096.06,683.569 1096.62,683.569 1097.18,683.569 1097.74,683.569 1098.3,683.569 1098.86,683.569 1099.42,683.569 1099.98,683.569 1100.54,683.569 1101.1,683.569 1101.66,683.569 1102.22,683.569 1102.77,683.569 1103.33,683.569 1103.89,683.569 1104.45,683.569 1105.01,683.569 1105.57,683.569 1106.13,683.569 1106.69,683.569 1107.25,683.569 1107.81,683.569 1108.37,683.569 1108.93,683.569 1109.49,683.569 1110.04,683.569 1110.6,683.569 1111.16,683.569 1111.72,683.569 1112.28,683.569 1112.84,683.569 1113.4,683.569 1113.96,683.569 1114.52,683.569 1115.08,683.569 1115.64,683.569 1116.2,683.569 1116.76,683.569 1117.31,683.569 1117.87,683.569 1118.43,683.569 1118.99,683.569 1119.55,683.569 1120.11,683.569 1120.67,683.569 1121.23,683.569 1121.79,683.569 1122.35,683.569 1122.91,683.569 1123.47,683.569 1124.03,683.569 1124.59,683.569 1125.14,683.569 1125.7,683.569 1126.26,683.569 1126.82,683.569 1127.38,683.569 1127.94,683.569 1128.5,683.569 1129.06,683.569 1129.62,683.569 1130.18,683.569 1130.74,683.569 1131.3,683.569 1131.86,683.569 1132.41,683.569 1132.97,683.569 1133.53,683.569 1134.09,683.569 1134.65,683.569 1135.21,683.569 1135.77,683.569 1136.33,683.569 1136.89,683.569 1137.45,683.569 1138.01,683.569 1138.57,683.569 1139.13,683.569 1139.68,683.569 1140.24,683.569 1140.8,683.569 1141.36,683.569 1141.92,683.569 1142.48,683.569 1143.04,683.569 1143.6,683.569 1144.16,683.569 1144.72,683.569 1145.28,683.569 1145.84,683.569 1146.4,683.569 1146.96,683.569 1147.51,683.569 1148.07,683.569 1148.63,683.569 1149.19,683.569 1149.75,683.569 1150.31,683.569 1150.87,683.569 1151.43,683.569 1151.99,683.569 1152.55,683.569 1153.11,683.569 1153.67,683.569 1154.23,683.569 1154.78,683.569 1155.34,683.569 1155.9,683.569 1156.46,683.569 1157.02,683.569 1157.58,683.569 1158.14,683.569 1158.7,683.569 1159.26,683.569 1159.82,683.569 1160.38,683.569 1160.94,683.569 1161.5,683.569 1162.05,683.569 1162.61,683.569 1163.17,683.569 1163.73,683.569 1164.29,683.569 1164.85,683.569 1165.41,683.569 1165.97,683.569 1166.53,683.569 1167.09,683.569 1167.65,683.569 1168.21,683.569 1168.77,683.569 1169.33,683.569 1169.88,683.569 1170.44,683.569 1171,683.569 1171.56,683.569 1172.12,683.569 1172.68,683.569 1173.24,683.569 1173.8,683.569 1174.36,683.569 1174.92,683.569 1175.48,683.569 1176.04,683.569 1176.6,683.569 1177.15,683.569 1177.71,683.569 1178.27,683.569 1178.83,683.569 1179.39,683.569 1179.95,683.569 1180.51,683.569 1181.07,683.569 1181.63,683.569 1182.19,683.569 1182.75,683.569 1183.31,683.569 1183.87,683.569 1184.43,683.569 1184.98,683.569 1185.54,683.569 1186.1,683.569 1186.66,683.569 1187.22,683.569 1187.78,683.569 1188.34,683.569 1188.9,683.569 1189.46,683.569 1190.02,683.569 1190.58,683.569 1191.14,683.569 1191.7,683.569 1192.25,683.569 1192.81,683.569 1193.37,683.569 1193.93,683.569 1194.49,683.569 1195.05,683.569 1195.61,683.569 1196.17,683.569 1196.73,683.569 1197.29,683.569 1197.85,683.569 1198.41,683.569 1198.97,683.569 1199.52,683.569 1200.08,683.569 1200.64,683.569 1201.2,683.569 1201.76,683.569 1202.32,683.569 1202.88,683.569 1203.44,683.569 1204,683.569 1204.56,683.569 1205.12,683.569 1205.68,683.569 1206.24,683.569 1206.8,683.569 1207.35,683.569 1207.91,683.569 1208.47,683.569 1209.03,683.569 1209.59,683.569 1210.15,683.569 1210.71,683.569 1211.27,683.569 1211.83,683.569 1212.39,683.569 1212.95,683.569 1213.51,683.569 1214.07,683.569 1214.62,683.569 1215.18,683.569 1215.74,683.569 1216.3,683.569 1216.86,683.569 1217.42,683.569 1217.98,683.569 1218.54,683.569 1219.1,683.569 1219.66,683.569 1220.22,683.569 1220.78,683.569 1221.34,683.569 1221.89,683.569 1222.45,683.569 1223.01,683.569 1223.57,683.569 1224.13,683.569 1224.69,683.569 1225.25,683.569 1225.81,683.569 1226.37,683.569 1226.93,683.569 1227.49,683.569 1228.05,683.569 1228.61,683.569 1229.17,683.569 1229.72,683.569 1230.28,683.569 1230.84,683.569 1231.4,683.569 1231.96,683.569 1232.52,683.569 1233.08,683.569 1233.64,683.569 1234.2,683.569 1234.76,683.569 1235.32,683.569 1235.88,683.569 1236.44,683.569 1236.99,683.569 1237.55,683.569 1238.11,683.569 1238.67,683.569 1239.23,683.569 1239.79,683.569 1240.35,683.569 1240.91,683.569 1241.47,683.569 1242.03,683.569 1242.59,683.569 1243.15,683.569 1243.71,683.569 1244.26,683.569 1244.82,683.569 1245.38,683.569 1245.94,683.569 1246.5,683.569 1247.06,683.569 1247.62,683.569 1248.18,683.569 1248.74,683.569 1249.3,683.569 1249.86,683.569 1250.42,683.569 1250.98,683.569 1251.54,683.569 1252.09,683.569 1252.65,683.569 1253.21,683.569 1253.77,683.569 1254.33,683.569 1254.89,683.569 1255.45,683.569 1256.01,683.569 1256.57,683.569 1257.13,683.569 1257.69,683.569 1258.25,683.569 1258.81,683.569 1259.36,683.569 1259.92,683.569 1260.48,683.569 1261.04,683.569 1261.6,683.569 1262.16,683.569 1262.72,683.569 1263.28,683.569 1263.84,683.569 1264.4,683.569 1264.96,683.569 1265.52,683.569 1266.08,683.569 1266.63,683.569 1267.19,683.569 1267.75,683.569 1268.31,683.569 1268.87,683.569 1269.43,683.569 1269.99,683.569 1270.55,683.569 1271.11,683.569 1271.67,683.569 1272.23,683.569 1272.79,683.569 1273.35,683.569 1273.91,683.569 1274.46,683.569 1275.02,683.569 1275.58,683.569 1276.14,683.569 1276.7,683.569 1277.26,683.569 1277.82,683.569 1278.38,683.569 1278.94,683.569 1279.5,683.569 1280.06,683.569 1280.62,683.569 1281.18,683.569 1281.73,683.569 1282.29,683.569 1282.85,683.569 1283.41,683.569 1283.97,683.569 1284.53,683.569 1285.09,683.569 1285.65,683.569 1286.21,683.569 1286.77,683.569 1287.33,683.569 1287.89,683.569 1288.45,683.569 1289,683.569 1289.56,683.569 1290.12,683.569 1290.68,683.569 1291.24,683.569 1291.8,683.569 1292.36,683.569 1292.92,683.569 1293.48,683.569 1294.04,683.569 1294.6,683.569 1295.16,683.569 1295.72,683.569 1296.28,683.569 1296.83,683.569 1297.39,683.569 1297.95,683.569 1298.51,683.569 1299.07,683.569 1299.63,683.569 1300.19,683.569 1300.75,683.569 1301.31,683.569 1301.87,683.569 1302.43,683.569 1302.99,683.569 1303.55,683.569 1304.1,683.569 1304.66,683.569 1305.22,683.569 1305.78,683.569 1306.34,683.569 1306.9,683.569 1307.46,683.569 1308.02,683.569 1308.58,683.569 1309.14,683.569 1309.7,683.569 1310.26,683.569 1310.82,683.569 1311.38,683.569 1311.93,683.569 1312.49,683.569 1313.05,683.569 1313.61,683.569 1314.17,683.569 1314.73,683.569 1315.29,683.569 1315.85,683.569 1316.41,683.569 1316.97,683.569 1317.53,683.569 1318.09,683.569 1318.65,683.569 1319.2,683.569 1319.76,683.569 1320.32,683.569 1320.88,683.569 1321.44,683.569 1322,683.569 1322.56,683.569 1323.12,683.569 1323.68,683.569 1324.24,683.569 1324.8,683.569 1325.36,683.569 1325.92,683.569 1326.47,683.569 1327.03,683.569 1327.59,683.569 1328.15,683.569 1328.71,683.569 1329.27,683.569 1329.83,683.569 1330.39,683.569 1330.95,683.569 1331.51,683.569 1332.07,683.569 1332.63,683.569 1333.19,683.569 1333.75,683.569 1334.3,683.569 1334.86,683.569 1335.42,683.569 1335.98,683.569 1336.54,683.569 1337.1,683.569 1337.66,683.569 1338.22,683.569 1338.78,683.569 1339.34,683.569 1339.9,683.569 1340.46,683.569 1341.02,683.569 1341.57,683.569 1342.13,683.569 1342.69,683.569 1343.25,683.569 1343.81,683.569 1344.37,683.569 1344.93,683.569 1345.49,683.569 1346.05,683.569 1346.61,683.569 1347.17,683.569 1347.73,683.569 1348.29,683.569 1348.84,683.569 1349.4,683.569 1349.96,683.569 1350.52,683.569 1351.08,683.569 1351.64,683.569 1352.2,683.569 1352.76,683.569 1353.32,683.569 1353.88,683.569 1354.44,683.569 1355,683.569 1355.56,683.569 1356.12,683.569 1356.67,683.569 1357.23,683.569 1357.79,683.569 1358.35,683.569 1358.91,683.569 1359.47,683.569 1360.03,683.569 1360.59,683.569 1361.15,683.569 1361.71,683.569 1362.27,683.569 1362.83,683.569 1363.39,683.569 1363.94,683.569 1364.5,683.569 1365.06,683.569 1365.62,683.569 1366.18,683.569 1366.74,683.569 1367.3,683.569 1367.86,683.569 1368.42,683.569 1368.98,683.569 1369.54,683.569 1370.1,683.569 1370.66,683.569 1371.21,683.569 1371.77,683.569 1372.33,683.569 1372.89,683.569 1373.45,683.569 1374.01,683.569 1374.57,683.569 1375.13,683.569 1375.69,683.569 1376.25,683.569 1376.81,683.569 1377.37,683.569 1377.93,683.569 1378.49,683.569 1379.04,683.569 1379.6,683.569 1380.16,683.569 1380.72,683.569 1381.28,683.569 1381.84,683.569 1382.4,683.569 1382.96,683.569 1383.52,683.569 1384.08,683.569 1384.64,683.569 1385.2,683.569 1385.76,683.569 1386.31,683.569 1386.87,683.569 1387.43,683.569 1387.99,683.569 1388.55,683.569 1389.11,683.569 1389.67,683.569 1390.23,683.569 1390.79,683.569 1391.35,683.569 1391.91,683.569 1392.47,683.569 1393.03,683.569 1393.58,683.569 1394.14,683.569 1394.7,683.569 1395.26,683.569 1395.82,683.569 1396.38,683.569 1396.94,683.569 1397.5,683.569 1398.06,683.569 1398.62,683.569 1399.18,683.569 1399.74,683.569 1400.3,683.569 1400.86,683.569 1401.41,683.569 1401.97,683.569 1402.53,683.569 1403.09,683.569 1403.65,683.569 1404.21,683.569 1404.77,683.569 1405.33,683.569 1405.89,683.569 1406.45,683.569 1407.01,683.569 1407.57,683.569 1408.13,683.569 1408.68,683.569 1409.24,683.569 1409.8,683.569 1410.36,683.569 1410.92,683.569 1411.48,683.569 1412.04,683.569 1412.6,683.569 1413.16,683.569 1413.72,683.569 1414.28,683.569 1414.84,683.569 1415.4,683.569 1415.95,683.569 1416.51,683.569 1417.07,683.569 1417.63,683.569 1418.19,683.569 1418.75,683.569 1419.31,683.569 1419.87,683.569 1420.43,683.569 1420.99,683.569 1421.55,683.569 1422.11,683.569 1422.67,683.569 1423.23,683.569 1423.78,683.569 1424.34,683.569 1424.9,683.569 1425.46,683.569 1426.02,683.569 1426.58,683.569 1427.14,683.569 1427.7,683.569 1428.26,683.569 1428.82,683.569 1429.38,683.569 1429.94,683.569 1430.5,683.569 1431.05,683.569 1431.61,683.569 1432.17,683.569 1432.73,683.569 1433.29,683.569 1433.85,683.569 1434.41,683.569 1434.97,683.569 1435.53,683.569 1436.09,683.569 1436.65,683.569 1437.21,683.569 1437.77,683.569 1438.33,683.569 1438.88,683.569 1439.44,683.569 1440,683.569 1440.56,683.569 1441.12,683.569 1441.68,683.569 1442.24,683.569 1442.8,683.569 1443.36,683.569 1443.92,683.569 1444.48,683.569 1445.04,683.569 1445.6,683.569 1446.15,683.569 1446.71,683.569 1447.27,683.569 1447.83,683.569 1448.39,683.569 1448.95,683.569 1449.51,683.569 1450.07,683.569 1450.63,683.569 1451.19,683.569 1451.75,683.569 1452.31,683.569 1452.87,683.569 1453.42,683.569 1453.98,683.569 1454.54,683.569 1455.1,683.569 1455.66,683.569 1456.22,683.569 1456.78,683.569 1457.34,683.569 1457.9,683.569 1458.46,683.569 1459.02,683.569 1459.58,683.569 1460.14,683.569 1460.7,683.569 1461.25,683.569 1461.81,683.569 1462.37,683.569 1462.93,683.569 1463.49,683.569 1464.05,683.569 1464.61,683.569 1465.17,683.569 1465.73,683.569 1466.29,683.569 1466.85,683.569 1467.41,683.569 1467.97,683.569 1468.52,683.569 1469.08,683.569 1469.64,683.569 1470.2,683.569 1470.76,683.569 1471.32,683.569 1471.88,683.569 1472.44,683.569 1473,683.569 1473.56,683.569 1474.12,683.569 1474.68,683.569 1475.24,683.569 1475.79,683.569 1476.35,683.569 1476.91,683.569 1477.47,683.569 1478.03,683.569 1478.59,683.569 1479.15,683.569 1479.71,683.569 1480.27,683.569 1480.83,683.569 1481.39,683.569 1481.95,683.569 1482.51,683.569 1483.07,683.569 1483.62,683.569 1484.18,683.569 1484.74,683.569 1485.3,683.569 1485.86,683.569 1486.42,683.569 1486.98,683.569 1487.54,683.569 1488.1,683.569 1488.66,683.569 1489.22,683.569 1489.78,683.569 1490.34,683.569 1490.89,683.569 1491.45,683.569 1492.01,683.569 1492.57,683.569 1493.13,683.569 1493.69,683.569 1494.25,683.569 1494.81,683.569 1495.37,683.569 1495.93,683.569 1496.49,683.569 1497.05,683.569 1497.61,683.569 1498.16,683.569 1498.72,683.569 1499.28,683.569 1499.84,683.569 1500.4,683.569 1500.96,683.569 1501.52,683.569 1502.08,683.569 1502.64,683.569 1503.2,683.569 1503.76,683.569 1504.32,683.569 1504.88,683.569 1505.44,683.569 1505.99,683.569 1506.55,683.569 1507.11,683.569 1507.67,683.569 1508.23,683.569 1508.79,683.569 1509.35,683.569 1509.91,683.569 1510.47,683.569 1511.03,683.569 1511.59,683.569 1512.15,683.569 1512.71,683.569 1513.26,683.569 1513.82,683.569 1514.38,683.569 1514.94,683.569 1515.5,683.569 1516.06,683.569 1516.62,683.569 1517.18,683.569 1517.74,683.569 1518.3,683.569 1518.86,683.569 1519.42,683.569 1519.98,683.569 1520.53,683.569 1521.09,683.569 1521.65,683.569 1522.21,683.569 1522.77,683.569 1523.33,683.569 1523.89,683.569 1524.45,683.569 1525.01,683.569 1525.57,683.569 1526.13,683.569 1526.69,683.569 1527.25,683.569 1527.81,683.569 1528.36,683.569 1528.92,683.569 1529.48,683.569 1530.04,683.569 1530.6,683.569 1531.16,683.569 1531.72,683.569 1532.28,683.569 1532.84,683.569 1533.4,683.569 1533.96,683.569 1534.52,683.569 1535.08,683.569 1535.63,683.569 1536.19,683.569 1536.75,683.569 1537.31,683.569 1537.87,683.569 1538.43,683.569 1538.99,683.569 1539.55,683.569 1540.11,683.569 1540.67,683.569 1541.23,683.569 1541.79,683.569 1542.35,683.569 1542.9,683.569 1543.46,683.569 1544.02,683.569 1544.58,683.569 1545.14,683.569 1545.7,683.569 1546.26,683.569 1546.82,683.569 1547.38,683.569 1547.94,683.569 1548.5,683.569 1549.06,683.569 1549.62,683.569 1550.18,683.569 1550.73,683.569 1551.29,683.569 1551.85,683.569 1552.41,683.569 1552.97,683.569 1553.53,683.569 1554.09,683.569 1554.65,683.569 1555.21,683.569 1555.77,683.569 1556.33,683.569 1556.89,683.569 1557.45,683.569 1558,683.569 1558.56,683.569 1559.12,683.569 1559.68,683.569 1560.24,683.569 1560.8,683.569 1561.36,683.569 1561.92,683.569 1562.48,683.569 1563.04,683.569 1563.6,683.569 1564.16,683.569 1564.72,683.569 1565.28,683.569 1565.83,683.569 1566.39,683.569 1566.95,683.569 1567.51,683.569 1568.07,683.569 1568.63,683.569 1569.19,683.569 1569.75,683.569 1570.31,683.569 1570.87,683.569 1571.43,683.569 1571.99,683.569 1572.55,683.569 1573.1,683.569 1573.66,683.569 1574.22,683.569 1574.78,683.569 1575.34,683.569 1575.9,683.569 1576.46,683.569 1577.02,683.569 1577.58,683.569 1578.14,683.569 1578.7,683.569 1579.26,683.569 1579.82,683.569 1580.37,683.569 1580.93,683.569 1581.49,683.569 1582.05,683.569 1582.61,683.569 1583.17,683.569 1583.73,683.569 1584.29,683.569 1584.85,683.569 1585.41,683.569 1585.97,683.569 1586.53,683.569 1587.09,683.569 1587.65,683.569 1588.2,683.569 1588.76,683.569 1589.32,683.569 1589.88,683.569 1590.44,683.569 1591,683.569 1591.56,683.569 1592.12,683.569 1592.68,683.569 1593.24,683.569 1593.8,683.569 1594.36,683.569 1594.92,683.569 1595.47,683.569 1596.03,683.569 1596.59,683.569 1597.15,683.569 1597.71,683.569 1598.27,683.569 1598.83,683.569 1599.39,683.569 1599.95,683.569 1600.51,683.569 1601.07,683.569 1601.63,683.569 1602.19,683.569 1602.74,683.569 1603.3,683.569 1603.86,683.569 1604.42,683.569 1604.98,683.569 1605.54,683.569 1606.1,683.569 1606.66,683.569 1607.22,683.569 1607.78,683.569 1608.34,683.569 1608.9,683.569 1609.46,683.569 1610.02,683.569 1610.57,683.569 1611.13,683.569 1611.69,683.569 1612.25,683.569 1612.81,683.569 1613.37,683.569 1613.93,683.569 1614.49,683.569 1615.05,683.569 1615.61,683.569 1616.17,683.569 1616.73,683.569 1617.29,683.569 1617.84,683.569 1618.4,683.569 1618.96,683.569 1619.52,683.569 1620.08,683.569 1620.64,683.569 1621.2,683.569 1621.76,683.569 1622.32,683.569 1622.88,683.569 1623.44,683.569 1624,683.569 1624.56,683.569 1625.11,683.569 1625.67,683.569 1626.23,683.569 1626.79,683.569 1627.35,683.569 1627.91,683.569 1628.47,683.569 1629.03,683.569 1629.59,683.569 1630.15,683.569 1630.71,683.569 1631.27,683.569 1631.83,683.569 1632.39,683.569 1632.94,683.569 1633.5,683.569 1634.06,683.569 1634.62,683.569 1635.18,683.569 1635.74,683.569 1636.3,683.569 1636.86,683.569 1637.42,683.569 1637.98,683.569 1638.54,683.569 1639.1,683.569 1639.66,683.569 1640.21,683.569 1640.77,683.569 1641.33,683.569 1641.89,683.569 1642.45,683.569 1643.01,683.569 1643.57,683.569 1644.13,683.569 1644.69,683.569 1645.25,683.569 1645.81,683.569 1646.37,683.569 1646.93,683.569 1647.48,683.569 1648.04,683.569 1648.6,683.569 1649.16,683.569 1649.72,683.569 1650.28,683.569 1650.84,683.569 1651.4,683.569 1651.96,683.569 1652.52,683.569 1653.08,683.569 1653.64,683.569 1654.2,683.569 1654.76,683.569 1655.31,683.569 1655.87,683.569 1656.43,683.569 1656.99,683.569 1657.55,683.569 1658.11,683.569 1658.67,683.569 1659.23,683.569 1659.79,683.569 1660.35,683.569 1660.91,683.569 1661.47,683.569 1662.03,683.569 1662.58,683.569 1663.14,683.569 1663.7,683.569 1664.26,683.569 1664.82,683.569 1665.38,683.569 1665.94,683.569 1666.5,683.569 1667.06,683.569 1667.62,683.569 1668.18,683.569 1668.74,683.569 1669.3,683.569 1669.85,683.569 1670.41,683.569 1670.97,683.569 1671.53,683.569 1672.09,683.569 1672.65,683.569 1673.21,683.569 1673.77,683.569 1674.33,683.569 1674.89,683.569 1675.45,683.569 1676.01,683.569 1676.57,683.569 1677.13,683.569 1677.68,683.569 1678.24,683.569 1678.8,683.569 1679.36,683.569 1679.92,683.569 1680.48,683.569 1681.04,683.569 1681.6,683.569 1682.16,683.569 1682.72,683.569 1683.28,683.569 1683.84,683.569 1684.4,683.569 1684.95,683.569 1685.51,683.569 1686.07,683.569 1686.63,683.569 1687.19,683.569 1687.75,683.569 1688.31,683.569 1688.87,683.569 1689.43,683.569 1689.99,683.569 1690.55,683.569 1691.11,683.569 1691.67,683.569 1692.23,683.569 1692.78,683.569 1693.34,683.569 1693.9,683.569 1694.46,683.569 1695.02,683.569 1695.58,683.569 1696.14,683.569 1696.7,683.569 1697.26,683.569 1697.82,683.569 1698.38,683.569 1698.94,683.569 1699.5,683.569 1700.05,683.569 1700.61,683.569 1701.17,683.569 1701.73,683.569 1702.29,683.569 1702.85,683.569 1703.41,683.569 1703.97,683.569 1704.53,683.569 1705.09,683.569 1705.65,683.569 1706.21,683.569 1706.77,683.569 1707.32,683.569 1707.88,683.569 1708.44,683.569 1709,683.569 1709.56,683.569 1710.12,683.569 1710.68,683.569 1711.24,683.569 1711.8,683.569 1712.36,683.569 1712.92,683.569 1713.48,683.569 1714.04,683.569 1714.6,683.569 1715.15,683.569 1715.71,683.569 1716.27,683.569 1716.83,683.569 1717.39,683.569 1717.95,683.569 1718.51,683.569 1719.07,683.569 1719.63,683.569 1720.19,683.569 1720.75,683.569 1721.31,683.569 1721.87,683.569 1722.42,683.569 1722.98,683.569 1723.54,683.569 1724.1,683.569 1724.66,683.569 1725.22,683.569 1725.78,683.569 1726.34,683.569 1726.9,683.569 1727.46,683.569 1728.02,683.569 1728.58,683.569 1729.14,683.569 1729.69,683.569 1730.25,683.569 1730.81,683.569 1731.37,683.569 1731.93,683.569 1732.49,683.569 1733.05,683.569 1733.61,683.569 1734.17,683.569 1734.73,683.569 1735.29,683.569 1735.85,683.569 1736.41,683.569 1736.97,683.569 1737.52,683.569 1738.08,683.569 1738.64,683.569 1739.2,683.569 1739.76,683.569 1740.32,683.569 1740.88,683.569 1741.44,683.569 1742,683.569 1742.56,683.569 1743.12,683.569 1743.68,683.569 1744.24,683.569 1744.79,683.569 1745.35,683.569 1745.91,683.569 1746.47,683.569 1747.03,683.569 1747.59,683.569 1748.15,683.569 1748.71,683.569 1749.27,683.569 1749.83,683.569 1750.39,683.569 1750.95,683.569 1751.51,683.569 1752.06,683.569 1752.62,683.569 1753.18,683.569 1753.74,683.569 1754.3,683.569 1754.86,683.569 1755.42,683.569 1755.98,683.569 1756.54,683.569 1757.1,683.569 1757.66,683.569 1758.22,683.569 1758.78,683.569 1759.34,683.569 1759.89,683.569 1760.45,683.569 1761.01,683.569 1761.57,683.569 1762.13,683.569 1762.69,683.569 1763.25,683.569 1763.81,683.569 1764.37,683.569 1764.93,683.569 1765.49,683.569 1766.05,683.569 1766.61,683.569 1767.16,683.569 1767.72,683.569 1768.28,683.569 1768.84,683.569 1769.4,683.569 1769.96,683.569 1770.52,683.569 1771.08,683.569 1771.64,683.569 1772.2,683.569 1772.76,683.569 1773.32,683.569 1773.88,683.569 1774.43,683.569 1774.99,683.569 1775.55,683.569 1776.11,683.569 1776.67,683.569 1777.23,683.569 1777.79,683.569 1778.35,683.569 1778.91,683.569 1779.47,683.569 1780.03,683.569 1780.59,683.569 1781.15,683.569 1781.71,683.569 1782.26,683.569 1782.82,683.569 1783.38,683.569 1783.94,683.569 1784.5,683.569 1785.06,683.569 1785.62,683.569 1786.18,683.569 1786.74,683.569 1787.3,683.569 1787.86,683.569 1788.42,683.569 1788.98,683.569 1789.53,683.569 1790.09,683.569 1790.65,683.569 1791.21,683.569 1791.77,683.569 1792.33,683.569 1792.89,683.569 1793.45,683.569 1794.01,683.569 1794.57,683.569 1795.13,683.569 1795.69,683.569 1796.25,683.569 1796.8,683.569 1797.36,683.569 1797.92,683.569 1798.48,683.569 1799.04,683.569 1799.6,683.569 1800.16,683.569 1800.72,683.569 1801.28,683.569 1801.84,683.569 1802.4,683.569 1802.96,683.569 1803.52,683.569 1804.08,683.569 1804.63,683.569 1805.19,683.569 1805.75,683.569 1806.31,683.569 1806.87,683.569 1807.43,683.569 1807.99,683.569 1808.55,683.569 1809.11,683.569 1809.67,683.569 1810.23,683.569 1810.79,683.569 1811.35,683.569 1811.9,683.569 1812.46,683.569 1813.02,683.569 1813.58,683.569 1814.14,683.569 1814.7,683.569 1815.26,683.569 1815.82,683.569 1816.38,683.569 1816.94,683.569 1817.5,683.569 1818.06,683.569 1818.62,683.569 1819.18,683.569 1819.73,683.569 1820.29,683.569 1820.85,683.569 1821.41,683.569 1821.97,683.569 1822.53,683.569 1823.09,683.569 1823.65,683.569 1824.21,683.569 1824.77,683.569 1825.33,683.569 1825.89,683.569 1826.45,683.569 1827,683.569 1827.56,683.569 1828.12,683.569 1828.68,683.569 1829.24,683.569 1829.8,683.569 1830.36,683.569 1830.92,683.569 1831.48,683.569 1832.04,683.569 1832.6,683.569 1833.16,683.569 1833.72,683.569 1834.27,683.569 1834.83,683.569 1835.39,683.569 1835.95,683.569 1836.51,683.569 1837.07,683.569 1837.63,683.569 1838.19,683.569 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.034953238356042 ± 0.02023058284417389\nProjected Energy: -4.015004546295829 ± (0.006405432904304398, 0.006447098709958965)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.528111</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3735e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1883e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0229e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.302e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.805e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.032e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.3631242916133637\n -0.7590191922770835\n  0.1358418221962232\n  0.15789998694608798\n  0.8767114411781431\n  1.530592997097333\n  1.5835732611867357\n  3.072870330325869\n  3.1256726539518436\n  4.862107221562164\n  6.2606948503805935\n  6.402671211183108\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
