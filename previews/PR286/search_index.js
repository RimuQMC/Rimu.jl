var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2144638287035632 ± 0.002409333924885127\n   G2(1) = 0.9171412833383297 ± 0.0009787121613453694\n   G2(2) = 0.981395397563904 ± 0.0006809514997844302\n   G2(3) = 0.988462809491969 ± 0.000584554944663882\n   G2(4) = 0.981395397563904 ± 0.0006809514997844302\n   G2(5) = 0.9171412833383297 ± 0.0009787121613453694\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9274293695395723 ± 0.14654649595058816\n   Replica 2: -4.079062660192445 ± 0.13317824254380506\n   Replica 3: -3.9961517978395036 ± 0.13319011854157786\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip270\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip271\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip272\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.58 2211.02,1003.58 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.343 2211.02,746.343 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.106 2211.02,489.106 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.868 2211.02,231.868 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.58 423.181,1003.58 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.343 423.181,746.343 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.106 423.181,489.106 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.868 423.181,231.868 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M290.043 1016.93 L306.363 1016.93 L306.363 1020.86 L284.418 1020.86 L284.418 1016.93 Q287.08 1014.17 291.664 1009.54 Q296.27 1004.89 297.451 1003.55 Q299.696 1001.02 300.576 999.287 Q301.478 997.527 301.478 995.838 Q301.478 993.083 299.534 991.347 Q297.613 989.611 294.511 989.611 Q292.312 989.611 289.858 990.375 Q287.427 991.139 284.65 992.689 L284.65 987.967 Q287.474 986.833 289.927 986.254 Q292.381 985.676 294.418 985.676 Q299.789 985.676 302.983 988.361 Q306.177 991.046 306.177 995.537 Q306.177 997.666 305.367 999.588 Q304.58 1001.49 302.474 1004.08 Q301.895 1004.75 298.793 1007.97 Q295.691 1011.16 290.043 1016.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M316.224 986.301 L334.58 986.301 L334.58 990.236 L320.506 990.236 L320.506 998.708 Q321.524 998.361 322.543 998.199 Q323.562 998.013 324.58 998.013 Q330.367 998.013 333.747 1001.18 Q337.126 1004.36 337.126 1009.77 Q337.126 1015.35 333.654 1018.45 Q330.182 1021.53 323.862 1021.53 Q321.687 1021.53 319.418 1021.16 Q317.173 1020.79 314.765 1020.05 L314.765 1015.35 Q316.849 1016.49 319.071 1017.04 Q321.293 1017.6 323.77 1017.6 Q327.774 1017.6 330.112 1015.49 Q332.45 1013.38 332.45 1009.77 Q332.45 1006.16 330.112 1004.06 Q327.774 1001.95 323.77 1001.95 Q321.895 1001.95 320.02 1002.37 Q318.168 1002.78 316.224 1003.66 L316.224 986.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M356.339 989.379 Q352.728 989.379 350.899 992.944 Q349.094 996.486 349.094 1003.62 Q349.094 1010.72 350.899 1014.29 Q352.728 1017.83 356.339 1017.83 Q359.973 1017.83 361.779 1014.29 Q363.608 1010.72 363.608 1003.62 Q363.608 996.486 361.779 992.944 Q359.973 989.379 356.339 989.379 M356.339 985.676 Q362.149 985.676 365.205 990.282 Q368.284 994.865 368.284 1003.62 Q368.284 1012.34 365.205 1016.95 Q362.149 1021.53 356.339 1021.53 Q350.529 1021.53 347.45 1016.95 Q344.395 1012.34 344.395 1003.62 Q344.395 994.865 347.45 990.282 Q350.529 985.676 356.339 985.676 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M286.062 729.063 L304.418 729.063 L304.418 732.998 L290.344 732.998 L290.344 741.47 Q291.363 741.123 292.381 740.961 Q293.4 740.776 294.418 740.776 Q300.205 740.776 303.585 743.947 Q306.964 747.119 306.964 752.535 Q306.964 758.114 303.492 761.216 Q300.02 764.294 293.701 764.294 Q291.525 764.294 289.256 763.924 Q287.011 763.554 284.603 762.813 L284.603 758.114 Q286.687 759.248 288.909 759.804 Q291.131 760.359 293.608 760.359 Q297.613 760.359 299.951 758.253 Q302.288 756.146 302.288 752.535 Q302.288 748.924 299.951 746.818 Q297.613 744.711 293.608 744.711 Q291.733 744.711 289.858 745.128 Q288.006 745.545 286.062 746.424 L286.062 729.063 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M326.177 732.142 Q322.566 732.142 320.737 735.707 Q318.932 739.248 318.932 746.378 Q318.932 753.484 320.737 757.049 Q322.566 760.591 326.177 760.591 Q329.811 760.591 331.617 757.049 Q333.446 753.484 333.446 746.378 Q333.446 739.248 331.617 735.707 Q329.811 732.142 326.177 732.142 M326.177 728.438 Q331.987 728.438 335.043 733.045 Q338.122 737.628 338.122 746.378 Q338.122 755.105 335.043 759.711 Q331.987 764.294 326.177 764.294 Q320.367 764.294 317.288 759.711 Q314.233 755.105 314.233 746.378 Q314.233 737.628 317.288 733.045 Q320.367 728.438 326.177 728.438 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M356.339 732.142 Q352.728 732.142 350.899 735.707 Q349.094 739.248 349.094 746.378 Q349.094 753.484 350.899 757.049 Q352.728 760.591 356.339 760.591 Q359.973 760.591 361.779 757.049 Q363.608 753.484 363.608 746.378 Q363.608 739.248 361.779 735.707 Q359.973 732.142 356.339 732.142 M356.339 728.438 Q362.149 728.438 365.205 733.045 Q368.284 737.628 368.284 746.378 Q368.284 755.105 365.205 759.711 Q362.149 764.294 356.339 764.294 Q350.529 764.294 347.45 759.711 Q344.395 755.105 344.395 746.378 Q344.395 737.628 347.45 733.045 Q350.529 728.438 356.339 728.438 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M284.835 471.826 L307.057 471.826 L307.057 473.816 L294.511 506.386 L289.627 506.386 L301.432 475.761 L284.835 475.761 L284.835 471.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M316.224 471.826 L334.58 471.826 L334.58 475.761 L320.506 475.761 L320.506 484.233 Q321.524 483.886 322.543 483.724 Q323.562 483.539 324.58 483.539 Q330.367 483.539 333.747 486.71 Q337.126 489.881 337.126 495.298 Q337.126 500.876 333.654 503.978 Q330.182 507.057 323.862 507.057 Q321.687 507.057 319.418 506.687 Q317.173 506.316 314.765 505.575 L314.765 500.876 Q316.849 502.011 319.071 502.566 Q321.293 503.122 323.77 503.122 Q327.774 503.122 330.112 501.015 Q332.45 498.909 332.45 495.298 Q332.45 491.687 330.112 489.58 Q327.774 487.474 323.77 487.474 Q321.895 487.474 320.02 487.89 Q318.168 488.307 316.224 489.187 L316.224 471.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M356.339 474.904 Q352.728 474.904 350.899 478.469 Q349.094 482.011 349.094 489.14 Q349.094 496.247 350.899 499.812 Q352.728 503.353 356.339 503.353 Q359.973 503.353 361.779 499.812 Q363.608 496.247 363.608 489.14 Q363.608 482.011 361.779 478.469 Q359.973 474.904 356.339 474.904 M356.339 471.201 Q362.149 471.201 365.205 475.807 Q368.284 480.39 368.284 489.14 Q368.284 497.867 365.205 502.474 Q362.149 507.057 356.339 507.057 Q350.529 507.057 347.45 502.474 Q344.395 497.867 344.395 489.14 Q344.395 480.39 347.45 475.807 Q350.529 471.201 356.339 471.201 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M256.664 245.213 L264.303 245.213 L264.303 218.847 L255.992 220.514 L255.992 216.255 L264.256 214.588 L268.932 214.588 L268.932 245.213 L276.571 245.213 L276.571 249.148 L256.664 249.148 L256.664 245.213 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M296.015 217.667 Q292.404 217.667 290.576 221.232 Q288.77 224.773 288.77 231.903 Q288.77 239.009 290.576 242.574 Q292.404 246.116 296.015 246.116 Q299.65 246.116 301.455 242.574 Q303.284 239.009 303.284 231.903 Q303.284 224.773 301.455 221.232 Q299.65 217.667 296.015 217.667 M296.015 213.963 Q301.826 213.963 304.881 218.57 Q307.96 223.153 307.96 231.903 Q307.96 240.63 304.881 245.236 Q301.826 249.819 296.015 249.819 Q290.205 249.819 287.127 245.236 Q284.071 240.63 284.071 231.903 Q284.071 223.153 287.127 218.57 Q290.205 213.963 296.015 213.963 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M326.177 217.667 Q322.566 217.667 320.737 221.232 Q318.932 224.773 318.932 231.903 Q318.932 239.009 320.737 242.574 Q322.566 246.116 326.177 246.116 Q329.811 246.116 331.617 242.574 Q333.446 239.009 333.446 231.903 Q333.446 224.773 331.617 221.232 Q329.811 217.667 326.177 217.667 M326.177 213.963 Q331.987 213.963 335.043 218.57 Q338.122 223.153 338.122 231.903 Q338.122 240.63 335.043 245.236 Q331.987 249.819 326.177 249.819 Q320.367 249.819 317.288 245.236 Q314.233 240.63 314.233 231.903 Q314.233 223.153 317.288 218.57 Q320.367 213.963 326.177 213.963 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M356.339 217.667 Q352.728 217.667 350.899 221.232 Q349.094 224.773 349.094 231.903 Q349.094 239.009 350.899 242.574 Q352.728 246.116 356.339 246.116 Q359.973 246.116 361.779 242.574 Q363.608 239.009 363.608 231.903 Q363.608 224.773 361.779 221.232 Q359.973 217.667 356.339 217.667 M356.339 213.963 Q362.149 213.963 365.205 218.57 Q368.284 223.153 368.284 231.903 Q368.284 240.63 365.205 245.236 Q362.149 249.819 356.339 249.819 Q350.529 249.819 347.45 245.236 Q344.395 240.63 344.395 231.903 Q344.395 223.153 347.45 218.57 Q350.529 213.963 356.339 213.963 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip272)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.868 4017.76,231.868 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1247.56 459.964,1247.01 460.533,1245.4 461.101,1244.77 461.669,1244.06 462.238,1243.27 462.806,1241.36 463.375,1240.37 463.943,1239.32 464.511,1238.17 465.08,1235.86 465.648,1234.51 466.216,1232.01 466.785,1230.46 467.353,1228.78 467.921,1226.98 468.49,1225.03 469.058,1222.9 469.626,1220.62 470.195,1217.18 470.763,1214.59 471.331,1210.83 471.9,1207.87 472.468,1204.7 473.036,1199.3 473.605,1195.83 474.173,1191.05 474.741,1185.1 475.31,1178.85 475.878,1174.51 476.446,1168.96 477.015,1163.27 477.583,1157.37 478.152,1152.23 478.72,1146.96 479.288,1141.41 479.857,1134.61 480.425,1126.54 480.993,1118.28 481.562,1110.95 482.13,1104.54 482.698,1096.81 483.267,1089.98 483.835,1082.94 484.403,1073.52 484.972,1065.1 485.54,1056.54 486.108,1047.85 486.677,1039.99 487.245,1030.02 487.813,1019.78 488.382,1008.56 488.95,998.125 489.518,989.615 490.087,979.922 490.655,971.051 491.224,962.093 491.792,950.046 492.36,941.097 492.929,930.975 493.497,919.782 494.065,909.497 494.634,899.246 495.202,886.871 495.77,877.657 496.339,865.253 496.907,854.873 497.475,844.668 498.044,833.5 498.612,821.206 499.18,812.132 499.749,800.957 500.317,791.989 500.885,780.897 501.454,770.885 502.022,762.117 502.59,753.106 503.159,741.202 503.727,732.53 504.295,722.701 504.864,714.016 505.432,705.368 506.001,695.721 506.569,686.11 507.137,677.622 507.706,666.03 508.274,657.726 508.842,646.432 509.411,635.301 509.979,627.644 510.547,617.833 511.116,610.424 511.684,600.946 512.252,593.631 512.821,585.391 513.389,578.278 513.957,571.295 514.526,561.293 515.094,552.603 515.662,544.132 516.231,535.619 516.799,529.133 517.367,521.852 517.936,512.687 518.504,505.96 519.072,500.274 519.641,491.805 520.209,484.541 520.778,478.459 521.346,469.394 521.914,460.578 522.483,456.125 523.051,453.143 523.619,445.735 524.188,441.648 524.756,438.634 525.324,430.487 525.893,426.787 526.461,420.923 527.029,418.358 527.598,413.715 528.166,405.92 528.734,403.715 529.303,400.504 529.871,396.229 530.439,393.22 531.008,391.142 531.576,383.937 532.144,379.841 532.713,376.059 533.281,372.444 533.85,366.677 534.418,362.235 534.986,359.058 535.555,356.777 536.123,353.454 536.691,351.253 537.26,348.241 537.828,345.161 538.396,343.168 538.965,339.169 539.533,338.221 540.101,336.269 540.67,332.57 541.238,330.882 541.806,332.314 542.375,330.41 542.943,328.401 543.511,326.465 544.08,322.707 544.648,321.051 545.216,316.215 545.785,312.951 546.353,309.577 546.921,306.227 547.49,305.346 548.058,303.427 548.627,301.533 549.195,301.869 549.763,298.832 550.332,297.719 550.9,293.858 551.468,292.151 552.037,288.391 552.605,287.17 553.173,286.793 553.742,286.515 554.31,286.178 554.878,286.855 555.447,288.087 556.015,286.144 556.583,283.613 557.152,283.066 557.72,284.491 558.288,282.933 558.857,282.267 559.425,281.572 559.993,279.557 560.562,278.952 561.13,274.387 561.698,271.027 562.267,269.713 562.835,271.561 563.404,269.254 563.972,270.17 564.54,269.893 565.109,268.572 565.677,268.382 566.245,266.189 566.814,266.029 567.382,264.683 567.95,264.654 568.519,262.564 569.087,262.592 569.655,262.459 570.224,262.385 570.792,263.441 571.36,262.372 571.929,263.406 572.497,263.156 573.065,263.035 573.634,261.802 574.202,261.585 574.77,260.072 575.339,260.034 575.907,261.046 576.476,259.765 577.044,258.604 577.612,257.41 578.181,256.288 578.749,257.151 579.317,257.148 579.886,255.905 580.454,256.702 581.022,255.73 581.591,255.545 582.159,255.514 582.727,255.43 583.296,253.142 583.864,253.147 584.432,251.021 585.001,250.154 585.569,251.421 586.137,253.439 586.706,253.397 587.274,252.026 587.842,251.777 588.411,251.829 588.979,251.944 589.547,252.76 590.116,252.638 590.684,250.379 591.253,250.254 591.821,249.157 592.389,248.528 592.958,248.475 593.526,248.542 594.094,245.62 594.663,243.74 595.231,243.248 595.799,243.529 596.368,241.578 596.936,242.86 597.504,242.034 598.073,241.421 598.641,238.649 599.209,238.198 599.778,238.573 600.346,239.417 600.914,240.869 601.483,239.172 602.051,240.825 602.619,241.491 603.188,241.989 603.756,242.237 604.325,243.678 604.893,242.837 605.461,242.962 606.03,244.274 606.598,245.277 607.166,244.225 607.735,240.345 608.303,241.769 608.871,244.314 609.44,244.257 610.008,247.406 610.576,246.174 611.145,245.218 611.713,244.111 612.281,245.385 612.85,246.437 613.418,247.217 613.986,244.148 614.555,243.159 615.123,241.049 615.691,244.495 616.26,242.178 616.828,243.163 617.396,242.01 617.965,242.133 618.533,242.164 619.102,241.08 619.67,241.212 620.238,240.468 620.807,239.775 621.375,242.053 621.943,241.264 622.512,240.266 623.08,243.468 623.648,243.51 624.217,243.632 624.785,243.309 625.353,242.33 625.922,243.254 626.49,244.146 627.058,242.758 627.627,240.552 628.195,239.642 628.763,240.055 629.332,240.068 629.9,241.401 630.468,240.28 631.037,238.445 631.605,236.587 632.173,236.831 632.742,235.966 633.31,235.213 633.879,235.806 634.447,234.129 635.015,234.529 635.584,234.953 636.152,235.575 636.72,236.001 637.289,237.343 637.857,237.359 638.425,237.595 638.994,236.74 639.562,236.905 640.13,236.837 640.699,236.955 641.267,238.146 641.835,240.389 642.404,243.26 642.972,243.123 643.54,242.972 644.109,242.945 644.677,240.829 645.245,234.612 645.814,235.837 646.382,234.954 646.951,234.2 647.519,234.385 648.087,232.777 648.656,232.207 649.224,233.771 649.792,232.379 650.361,235.234 650.929,234.493 651.497,234.886 652.066,235.201 652.634,237.772 653.202,237.859 653.771,237.962 654.339,239.384 654.907,242.385 655.476,240.034 656.044,237.99 656.612,238.981 657.181,237.716 657.749,237.869 658.317,240.978 658.886,241.772 659.454,239.469 660.022,239.385 660.591,239.488 661.159,237.378 661.728,235.535 662.296,234.692 662.864,234.898 663.433,233.16 664.001,231.39 664.569,231.925 665.138,235.504 665.706,235.583 666.274,232.66 666.843,234.029 667.411,233.375 667.979,234.915 668.548,234.123 669.116,232.384 669.684,231.618 670.253,232.21 670.821,235.74 671.389,237.963 671.958,239.204 672.526,240.334 673.094,240.131 673.663,240.089 674.231,239.029 674.799,239.065 675.368,238.01 675.936,239.187 676.505,237.169 677.073,236.219 677.641,236.475 678.21,236.453 678.778,235.486 679.346,235.705 679.915,234.783 680.483,238.2 681.051,237.087 681.62,238.129 682.188,238.006 682.756,237.185 683.325,236.828 683.893,236.886 684.461,237.007 685.03,236.85 685.598,236.701 686.166,236.59 686.735,238.555 687.303,237.432 687.871,237.225 688.44,238.211 689.008,239.113 689.577,238.891 690.145,237.652 690.713,236.531 691.282,236.382 691.85,237.41 692.418,237.403 692.987,236.517 693.555,236.481 694.123,238.625 694.692,238.425 695.26,238.344 695.828,237.268 696.397,241.207 696.965,239.822 697.533,238.511 698.102,237.266 698.67,237.191 699.238,234.387 699.807,233.454 700.375,233.311 700.943,232.454 701.512,232.556 702.08,234.818 702.648,236.962 703.217,234.758 703.785,236.919 704.354,234.714 704.922,234.943 705.49,233.933 706.059,233.815 706.627,234.854 707.195,233.606 707.764,232.62 708.332,229.732 708.9,231.108 709.469,231.239 710.037,231.55 710.605,231.663 711.174,230.888 711.742,233.028 712.31,233.158 712.879,233.436 713.447,232.536 714.015,230.737 714.584,230.898 715.152,233.498 715.72,233.603 716.289,233.487 716.857,232.425 717.425,234.554 717.994,234.59 718.562,234.677 719.131,234.816 719.699,232.873 720.267,233.918 720.836,233.042 721.404,231.046 721.972,230.492 722.541,230.847 723.109,228.433 723.677,228.805 724.246,230.111 724.814,231.48 725.382,232.906 725.951,232.049 726.519,234.319 727.087,236.567 727.656,239.451 728.224,239.254 728.792,238.027 729.361,236.855 729.929,236.655 730.497,236.473 731.066,236.553 731.634,236.526 732.203,232.412 732.771,233.495 733.339,231.719 733.908,229.804 734.476,230.364 735.044,228.816 735.613,231.497 736.181,229.864 736.749,231.065 737.318,227.47 737.886,225.911 738.454,226.453 739.023,227.132 739.591,228.515 740.159,229.114 740.728,229.754 741.296,228.946 741.864,229.539 742.433,232.065 743.001,231.365 743.569,230.75 744.138,232.258 744.706,235.569 745.274,235.747 745.843,236.8 746.411,236.732 746.98,237.491 747.548,238.27 748.116,235.048 748.685,234.149 749.253,233.057 749.821,232.062 750.39,231.36 750.958,231.739 751.526,231.026 752.095,230.273 752.663,230.72 753.231,229.022 753.8,228.562 754.368,229.926 754.936,229.351 755.505,229.844 756.073,232.171 756.641,232.625 757.21,234.073 757.778,234.029 758.346,231.033 758.915,230.298 759.483,230.938 760.052,231.346 760.62,232.582 761.188,232.725 761.757,230.932 762.325,230.218 762.893,233.834 763.462,235.699 764.03,235.62 764.598,237.542 765.167,237.386 765.735,239.363 766.303,238.084 766.872,241.018 767.44,240.301 768.008,240.833 768.577,238.47 769.145,237.04 769.713,237.7 770.282,236.357 770.85,236.116 771.418,234.978 771.987,237.209 772.555,238.094 773.123,237.858 773.692,237.359 774.26,237.128 774.829,234.848 775.397,234.727 775.965,233.644 776.534,232.6 777.102,233.562 777.67,233.508 778.239,234.467 778.807,235.712 779.375,237.606 779.944,238.597 780.512,235.337 781.08,236.2 781.649,237.271 782.217,236.966 782.785,236.781 783.354,235.509 783.922,234.243 784.49,235.096 785.059,236.884 785.627,236.665 786.195,238.19 786.764,237.698 787.332,236.366 787.9,234.139 788.469,232.955 789.037,234.006 789.606,234.881 790.174,237.831 790.742,238.544 791.311,239.111 791.879,236.646 792.447,235.389 793.016,233.205 793.584,232.146 794.152,232.35 794.721,233.304 795.289,233.332 795.857,233.358 796.426,235.46 796.994,236.175 797.562,235.945 798.131,235.636 798.699,235.337 799.267,235.07 799.836,233.954 800.404,233.845 800.972,232.647 801.541,232.602 802.109,234.849 802.678,233.617 803.246,235.59 803.814,235.438 804.383,235.08 804.951,235.929 805.519,236.687 806.088,235.496 806.656,234.271 807.224,236.326 807.793,233.909 808.361,232.789 808.929,233.714 809.498,233.272 810.066,233.114 810.634,232.937 811.203,229.854 811.771,228.999 812.339,230.158 812.908,227.257 813.476,227.691 814.044,227.946 814.613,231.194 815.181,231.358 815.749,232.465 816.318,231.315 816.886,231.583 817.455,229.457 818.023,232.812 818.591,230.502 819.16,229.661 819.728,230.964 820.296,230.174 820.865,230.517 821.433,229.65 822.001,231.08 822.57,232.315 823.138,231.378 823.706,230.472 824.275,229.742 824.843,228.93 825.411,227.246 825.98,227.601 826.548,228.1 827.116,231.319 827.685,229.363 828.253,228.533 828.821,230.959 829.39,232.154 829.958,233.403 830.526,233.529 831.095,234.546 831.663,234.607 832.232,236.447 832.8,237.206 833.368,235.858 833.937,233.599 834.505,233.74 835.073,232.669 835.642,230.63 836.21,232.966 836.778,232.858 837.347,232.749 837.915,233.883 838.483,234.939 839.052,234.781 839.62,233.62 840.188,232.69 840.757,233.674 841.325,233.681 841.893,234.542 842.462,235.238 843.03,233.999 843.598,233.781 844.167,235.805 844.735,234.528 845.304,235.614 845.872,235.441 846.44,235.185 847.009,235.994 847.577,233.38 848.145,235.325 848.714,235.125 849.282,234.809 849.85,234.501 850.419,235.237 850.987,236.101 851.555,234.537 852.124,232.41 852.692,232.5 853.26,231.541 853.829,231.459 854.397,231.627 854.965,232.761 855.534,234.492 856.102,234.381 856.67,232.004 857.239,232.03 857.807,230.029 858.375,227.96 858.944,229.288 859.512,228.205 860.081,225.494 860.649,227.011 861.217,227.365 861.786,228.995 862.354,229.452 862.922,230.706 863.491,230.73 864.059,230.623 864.627,231.683 865.196,233.753 865.764,231.589 866.332,230.589 866.901,232.672 867.469,232.764 868.037,232.817 868.606,234.697 869.174,234.448 869.742,234.335 870.311,234.196 870.879,235.178 871.447,231.975 872.016,231.892 872.584,229.817 873.152,231.055 873.721,229.146 874.289,229.429 874.858,228.775 875.426,230.093 875.994,227.133 876.563,230.466 877.131,229.789 877.699,232.056 878.268,231.887 878.836,232.701 879.404,229.471 879.973,227.58 880.541,229.994 881.109,231.154 881.678,232.257 882.246,232.438 882.814,234.883 883.383,236.022 883.951,236.852 884.519,236.561 885.088,234.404 885.656,234.492 886.224,233.549 886.793,233.533 887.361,235.4 887.93,236.257 888.498,234.792 889.066,234.567 889.635,235.359 890.203,233.954 890.771,231.814 891.34,227.885 891.908,228.208 892.476,229.587 893.045,228.672 893.613,226.124 894.181,226.403 894.75,226.965 895.318,226.457 895.886,225.951 896.455,223.334 897.023,219.895 897.591,224.006 898.16,226.899 898.728,229.549 899.296,230.944 899.865,232.245 900.433,232.46 901.001,233.707 901.57,233.793 902.138,232.806 902.707,233.876 903.275,234.947 903.843,241.05 904.412,240.395 904.98,238.86 905.548,237.686 906.117,237.427 906.685,238.249 907.253,239.128 907.822,237.71 908.39,237.363 908.958,237.143 909.527,236.834 910.095,234.533 910.663,235.374 911.232,238.071 911.8,237.739 912.368,236.212 912.937,235.676 913.505,235.27 914.073,234.189 914.642,232.838 915.21,232.812 915.779,233.607 916.347,233.544 916.915,234.503 917.484,234.321 918.052,235.234 918.62,234.837 919.189,234.507 919.757,234.169 920.325,235.024 920.894,235.997 921.462,234.682 922.03,234.441 922.599,235.368 923.167,235.94 923.735,236.82 924.304,235.255 924.872,235.048 925.44,232.326 926.009,229.095 926.577,232.343 927.145,231.198 927.714,231.191 928.282,231.184 928.85,232.151 929.419,232.268 929.987,234.324 930.556,232.11 931.124,235.152 931.692,235.73 932.261,234.292 932.829,231.926 933.397,234.072 933.966,232.764 934.534,232.476 935.102,230.47 935.671,227.415 936.239,226.842 936.807,228.006 937.376,227.232 937.944,228.393 938.512,226.602 939.081,227.03 939.649,224.32 940.217,223.782 940.786,224.384 941.354,224.952 941.922,222.558 942.491,223.304 943.059,221.92 943.627,222.635 944.196,224.039 944.764,224.495 945.333,225.153 945.901,225.637 946.469,224.079 947.038,225.75 947.606,227.382 948.174,227.662 948.743,230.189 949.311,231.261 949.879,231.41 950.448,229.727 951.016,231.027 951.584,231.409 952.153,230.738 952.721,227.771 953.289,227.113 953.858,226.42 954.426,229.049 954.994,228.54 955.563,231.123 956.131,230.33 956.699,233.752 957.268,234.736 957.836,235.578 958.405,235.571 958.973,236.577 959.541,234.437 960.11,237.486 960.678,238.404 961.246,237.137 961.815,237 962.383,233.716 962.951,233.494 963.52,233.576 964.088,233.541 964.656,232.515 965.225,234.689 965.793,236.559 966.361,236.33 966.93,234.095 967.498,233.939 968.066,232.781 968.635,231.748 969.203,230.892 969.771,231.196 970.34,230.265 970.908,229.164 971.476,227.256 972.045,227.661 972.613,228.218 973.182,228.599 973.75,227.949 974.318,230.424 974.887,231.703 975.455,231.066 976.023,231.206 976.592,231.462 977.16,232.645 977.728,232.679 978.297,233.831 978.865,233.943 979.433,233.881 980.002,233.759 980.57,235.792 981.138,235.9 981.707,235.869 982.275,236.741 982.843,236.711 983.412,236.379 983.98,238.291 984.548,236.957 985.117,238.713 985.685,240.394 986.253,235.569 986.822,235.21 987.39,233.954 987.959,233.891 988.527,232.684 989.095,233.581 989.664,234.568 990.232,235.561 990.8,235.215 991.369,233.954 991.937,231.764 992.505,231.638 993.074,231.717 993.642,233.956 994.21,235.751 994.779,236.476 995.347,235.996 995.915,236.856 996.484,236.567 997.052,235.154 997.62,235.81 998.189,233.441 998.757,231.185 999.325,230.158 999.894,232.273 1000.46,232.286 1001.03,232.294 1001.6,232.385 1002.17,231.462 1002.74,231.659 1003.3,230.634 1003.87,228.719 1004.44,230.187 1005.01,230.323 1005.58,230.389 1006.15,230.419 1006.71,229.491 1007.28,229.645 1007.85,230.84 1008.42,227.5 1008.99,228.876 1009.56,230.143 1010.12,228.201 1010.69,226.213 1011.26,226.612 1011.83,227.112 1012.4,226.724 1012.97,228.98 1013.53,231.184 1014.1,230.413 1014.67,229.304 1015.24,229.445 1015.81,230.599 1016.38,228.723 1016.94,229.019 1017.51,228.533 1018.08,231.07 1018.65,232.254 1019.22,232.398 1019.79,231.535 1020.35,230.554 1020.92,231.898 1021.49,235.114 1022.06,233.814 1022.63,233.469 1023.2,231.315 1023.76,230.278 1024.33,232.313 1024.9,232.277 1025.47,232.007 1026.04,233.197 1026.61,235.328 1027.17,236.13 1027.74,235.932 1028.31,235.418 1028.88,235.275 1029.45,234.156 1030.02,233.897 1030.58,235.557 1031.15,236.507 1031.72,236.168 1032.29,237.994 1032.86,237.553 1033.43,237.173 1033.99,235.753 1034.56,237.534 1035.13,238.229 1035.7,236.818 1036.27,236.278 1036.84,235.902 1037.4,238.561 1037.97,238.102 1038.54,239.459 1039.11,238.824 1039.68,238.447 1040.25,239.071 1040.81,237.563 1041.38,236.976 1041.95,236.469 1042.52,237.969 1043.09,238.375 1043.66,235.852 1044.22,235.545 1044.79,236.229 1045.36,235.692 1045.93,235.306 1046.5,234.784 1047.07,233.549 1047.63,233.31 1048.2,232.027 1048.77,232.827 1049.34,232.469 1049.91,231.254 1050.48,232.042 1051.05,233.177 1051.61,233.221 1052.18,233.898 1052.75,233.564 1053.32,231.955 1053.89,235.807 1054.46,234.247 1055.02,232.819 1055.59,232.53 1056.16,231.572 1056.73,232.445 1057.3,234.244 1057.87,234.923 1058.43,235.678 1059,237.411 1059.57,235.911 1060.14,234.408 1060.71,234.856 1061.28,233.466 1061.84,233.59 1062.41,233.308 1062.98,234.981 1063.55,231.567 1064.12,232.452 1064.69,233.422 1065.25,233.098 1065.82,233.869 1066.39,232.483 1066.96,233.507 1067.53,233.181 1068.1,232.978 1068.66,231.743 1069.23,230.463 1069.8,230.17 1070.37,230.221 1070.94,229.101 1071.51,230.094 1072.07,229.118 1072.64,228.246 1073.21,228.596 1073.78,227.627 1074.35,226.71 1074.92,226.098 1075.48,227.237 1076.05,227.403 1076.62,227.518 1077.19,228.859 1077.76,226.846 1078.33,225.229 1078.89,228.612 1079.46,228.578 1080.03,230.806 1080.6,231.14 1081.17,232.224 1081.74,231.898 1082.3,231.765 1082.87,232.94 1083.44,231.773 1084.01,230.556 1084.58,228.552 1085.15,229.616 1085.71,230.659 1086.28,229.341 1086.85,228.458 1087.42,228.53 1087.99,227.532 1088.56,224.888 1089.12,225.239 1089.69,224.698 1090.26,227.102 1090.83,226.539 1091.4,226.05 1091.97,224.495 1092.53,224.765 1093.1,225.262 1093.67,225.744 1094.24,227.122 1094.81,224.317 1095.38,224.929 1095.94,224.514 1096.51,225.23 1097.08,225.721 1097.65,226.21 1098.22,230.039 1098.79,230.362 1099.35,231.757 1099.92,232.04 1100.49,230.809 1101.06,233.17 1101.63,234.154 1102.2,232.961 1102.76,233.041 1103.33,230.03 1103.9,231.265 1104.47,230.218 1105.04,229.555 1105.61,230.776 1106.17,233.116 1106.74,232.136 1107.31,232.297 1107.88,230.383 1108.45,229.343 1109.02,229.579 1109.58,229.888 1110.15,228.161 1110.72,228.497 1111.29,226.68 1111.86,228.067 1112.43,229.328 1112.99,231.618 1113.56,231.646 1114.13,233.113 1114.7,233.132 1115.27,235.251 1115.84,236.368 1116.4,237.313 1116.97,239.164 1117.54,237.505 1118.11,236.125 1118.68,235.784 1119.25,235.637 1119.81,236.517 1120.38,235.426 1120.95,234.339 1121.52,234.058 1122.09,232.793 1122.66,231.864 1123.23,232.045 1123.79,233.168 1124.36,235.194 1124.93,236.158 1125.5,235.709 1126.07,235.53 1126.64,234.256 1127.2,230.085 1127.77,229.12 1128.34,230.264 1128.91,232.532 1129.48,231.539 1130.05,230.603 1130.61,230.479 1131.18,230.463 1131.75,229.572 1132.32,230.694 1132.89,232.881 1133.46,232.925 1134.02,232.848 1134.59,233.852 1135.16,233.623 1135.73,232.261 1136.3,231.238 1136.87,230.327 1137.43,230.604 1138,231.765 1138.57,232.016 1139.14,232.194 1139.71,232.287 1140.28,230.279 1140.84,229.397 1141.41,229.657 1141.98,228.997 1142.55,229.359 1143.12,229.795 1143.69,228.944 1144.25,229.121 1144.82,228.402 1145.39,228.709 1145.96,231.174 1146.53,231.331 1147.1,229.264 1147.66,229.41 1148.23,229.7 1148.8,229.971 1149.37,232.108 1149.94,231.02 1150.51,231.374 1151.07,231.61 1151.64,230.576 1152.21,228.462 1152.78,229.732 1153.35,231.087 1153.92,230.065 1154.48,230.288 1155.05,230.269 1155.62,230.579 1156.19,230.599 1156.76,230.874 1157.33,231.076 1157.89,231.118 1158.46,229.906 1159.03,228.973 1159.6,228.006 1160.17,226.259 1160.74,227.773 1161.3,227.333 1161.87,226.715 1162.44,227.269 1163.01,229.525 1163.58,232.958 1164.15,233.07 1164.71,234.14 1165.28,234.353 1165.85,234.289 1166.42,234.139 1166.99,233.79 1167.56,232.867 1168.12,234.14 1168.69,234.125 1169.26,234.934 1169.83,233.696 1170.4,233.684 1170.97,234.657 1171.53,234.67 1172.1,234.466 1172.67,234.382 1173.24,232.226 1173.81,234.42 1174.38,235.577 1174.94,234.485 1175.51,237.56 1176.08,238.238 1176.65,238.676 1177.22,235.514 1177.79,233.409 1178.35,234.276 1178.92,234.233 1179.49,235.269 1180.06,235.025 1180.63,234.965 1181.2,232.889 1181.76,230.774 1182.33,232.027 1182.9,230.954 1183.47,232.054 1184.04,230.955 1184.61,231.927 1185.17,231.918 1185.74,230.913 1186.31,235.073 1186.88,233.704 1187.45,233.698 1188.02,230.647 1188.58,232.879 1189.15,230.765 1189.72,229.994 1190.29,230.331 1190.86,230.41 1191.43,229.539 1192,232.681 1192.56,235.891 1193.13,236.708 1193.7,236.446 1194.27,235.031 1194.84,231.845 1195.41,232.891 1195.97,231.717 1196.54,227.576 1197.11,229.883 1197.68,228.89 1198.25,230.182 1198.82,230.286 1199.38,230.703 1199.95,230.79 1200.52,230.854 1201.09,230.114 1201.66,231.206 1202.23,229.08 1202.79,230.433 1203.36,229.406 1203.93,226.749 1204.5,226.099 1205.07,224.392 1205.64,224.94 1206.2,226.506 1206.77,227.875 1207.34,227.276 1207.91,227.712 1208.48,227.841 1209.05,227.007 1209.61,226.566 1210.18,228.01 1210.75,228.512 1211.32,231.138 1211.89,232.471 1212.46,234.835 1213.02,235.762 1213.59,235.7 1214.16,235.268 1214.73,235.036 1215.3,235.966 1215.87,234.975 1216.43,234.686 1217,234.669 1217.57,234.641 1218.14,234.374 1218.71,233.109 1219.28,236.199 1219.84,236.951 1220.41,237.546 1220.98,237.072 1221.55,237.902 1222.12,238.615 1222.69,236.268 1223.25,235.035 1223.82,235.136 1224.39,234.086 1224.96,233.902 1225.53,231.92 1226.1,232.933 1226.66,233.812 1227.23,235.71 1227.8,234.172 1228.37,237.189 1228.94,235.775 1229.51,236.391 1230.07,236.003 1230.64,234.452 1231.21,236.542 1231.78,234.866 1232.35,234.564 1232.92,235.335 1233.48,233.09 1234.05,234.084 1234.62,233.962 1235.19,234.815 1235.76,233.715 1236.33,234.658 1236.89,234.651 1237.46,235.191 1238.03,232.825 1238.6,232.662 1239.17,231.409 1239.74,230.329 1240.3,229.248 1240.87,229.126 1241.44,227.971 1242.01,229.12 1242.58,229.391 1243.15,229.523 1243.71,229.695 1244.28,230.587 1244.85,232.792 1245.42,234.644 1245.99,234.473 1246.56,235.166 1247.12,235.838 1247.69,236.58 1248.26,238.068 1248.83,237.302 1249.4,235.922 1249.97,236.863 1250.53,238.385 1251.1,234.84 1251.67,235.49 1252.24,231.875 1252.81,231.787 1253.38,232.846 1253.94,234.564 1254.51,233.068 1255.08,233.971 1255.65,233.77 1256.22,232.519 1256.79,233.517 1257.35,233.283 1257.92,234.047 1258.49,233.605 1259.06,234.43 1259.63,235.033 1260.2,233.847 1260.76,233.687 1261.33,234.467 1261.9,234.206 1262.47,234.863 1263.04,235.366 1263.61,234.975 1264.18,233.771 1264.74,233.479 1265.31,233.295 1265.88,231.946 1266.45,233.945 1267.02,233.492 1267.59,232.148 1268.15,229.955 1268.72,231.171 1269.29,230.038 1269.86,229.219 1270.43,227.964 1271,226.987 1271.56,226.233 1272.13,226.725 1272.7,226.746 1273.27,225.9 1273.84,226.264 1274.41,227.862 1274.97,231.197 1275.54,231.023 1276.11,230.744 1276.68,233.677 1277.25,233.406 1277.82,232.155 1278.38,230.959 1278.95,231.88 1279.52,231.779 1280.09,229.845 1280.66,226.75 1281.23,227.224 1281.79,226.556 1282.36,224.831 1282.93,225.329 1283.5,227.72 1284.07,232.034 1284.64,232.966 1285.2,229.878 1285.77,228.886 1286.34,230.057 1286.91,230.135 1287.48,229.099 1288.05,228.312 1288.61,227.721 1289.18,227.931 1289.75,227.987 1290.32,228.261 1290.89,228.377 1291.46,229.69 1292.02,228.868 1292.59,226.887 1293.16,227.25 1293.73,226.712 1294.3,230.116 1294.87,229.397 1295.43,230.613 1296,229.836 1296.57,229.79 1297.14,227.88 1297.71,227.018 1298.28,227.611 1298.84,229.057 1299.41,228.227 1299.98,227.527 1300.55,227.97 1301.12,230.47 1301.69,230.548 1302.25,228.536 1302.82,228.679 1303.39,227.848 1303.96,227.054 1304.53,227.325 1305.1,228.839 1305.66,229.117 1306.23,229.473 1306.8,227.424 1307.37,227.913 1307.94,229.294 1308.51,229.669 1309.07,229.897 1309.64,231.206 1310.21,232.361 1310.78,229.3 1311.35,231.656 1311.92,233.979 1312.48,234.118 1313.05,234.892 1313.62,233.836 1314.19,233.798 1314.76,234.593 1315.33,233.526 1315.89,235.571 1316.46,235.429 1317.03,233.264 1317.6,234.493 1318.17,231.18 1318.74,233.587 1319.3,234.635 1319.87,235.482 1320.44,237.437 1321.01,237.164 1321.58,237.811 1322.15,237.457 1322.71,236.059 1323.28,237.94 1323.85,241.435 1324.42,237.694 1324.99,237.166 1325.56,236.565 1326.12,238.203 1326.69,238.828 1327.26,235.276 1327.83,234.182 1328.4,233.884 1328.97,233.851 1329.53,232.454 1330.1,235.396 1330.67,237.154 1331.24,234.866 1331.81,234.604 1332.38,233.368 1332.94,234.549 1333.51,236.537 1334.08,237.263 1334.65,237.979 1335.22,236.498 1335.79,237.11 1336.36,236.827 1336.92,235.422 1337.49,236.864 1338.06,236.106 1338.63,234.731 1339.2,234.446 1339.77,235.153 1340.33,233.902 1340.9,233.474 1341.47,232.445 1342.04,231.474 1342.61,229.143 1343.18,229.254 1343.74,229.282 1344.31,228.229 1344.88,228.366 1345.45,227.557 1346.02,227.829 1346.59,229.021 1347.15,230.077 1347.72,230.218 1348.29,227.065 1348.86,228.218 1349.43,229.434 1350,228.661 1350.56,229.87 1351.13,229.055 1351.7,229.886 1352.27,229.972 1352.84,229.996 1353.41,230.961 1353.97,231.174 1354.54,231.032 1355.11,232.888 1355.68,233.919 1356.25,233.766 1356.82,233.56 1357.38,233.184 1357.95,232.102 1358.52,234.219 1359.09,235.741 1359.66,235.608 1360.23,234.42 1360.79,233.028 1361.36,232.792 1361.93,231.618 1362.5,231.579 1363.07,231.509 1363.64,232.422 1364.2,230.195 1364.77,230.944 1365.34,233.039 1365.91,232.935 1366.48,233.906 1367.05,234.763 1367.61,233.449 1368.18,233.249 1368.75,233.079 1369.32,231.941 1369.89,230.97 1370.46,229.741 1371.02,227.567 1371.59,227.874 1372.16,228.444 1372.73,229.651 1373.3,230.797 1373.87,227.869 1374.43,227.793 1375,227.068 1375.57,226.454 1376.14,225.636 1376.71,228.302 1377.28,228.565 1377.84,226.761 1378.41,227.126 1378.98,227.661 1379.55,227.154 1380.12,225.341 1380.69,226.868 1381.25,228.369 1381.82,227.72 1382.39,227.094 1382.96,226.268 1383.53,227.667 1384.1,228.166 1384.66,227.292 1385.23,226.837 1385.8,227.376 1386.37,228.853 1386.94,228.231 1387.51,228.655 1388.07,227.973 1388.64,227.411 1389.21,229.96 1389.78,229.115 1390.35,228.345 1390.92,230.897 1391.48,235.269 1392.05,233.154 1392.62,229.902 1393.19,231.347 1393.76,229.639 1394.33,230.908 1394.89,228.077 1395.46,227.396 1396.03,227.746 1396.6,230.254 1397.17,228.336 1397.74,227.788 1398.3,225.178 1398.87,225.886 1399.44,225.206 1400.01,225.627 1400.58,224.252 1401.15,228.984 1401.71,229.276 1402.28,227.732 1402.85,229.421 1403.42,229.665 1403.99,232.195 1404.56,232.406 1405.13,234.69 1405.69,234.792 1406.26,234.943 1406.83,234.528 1407.4,232.413 1407.97,232.448 1408.54,233.475 1409.1,234.437 1409.67,234.407 1410.24,234.192 1410.81,234.08 1411.38,231.884 1411.95,233.976 1412.51,233.902 1413.08,232.8 1413.65,231.674 1414.22,229.71 1414.79,229.011 1415.36,229.128 1415.92,230.152 1416.49,231.162 1417.06,232.398 1417.63,233.577 1418.2,233.761 1418.77,233.861 1419.33,239.131 1419.9,240.945 1420.47,240.535 1421.04,239.94 1421.61,239.533 1422.18,238.98 1422.74,239.878 1423.31,239.236 1423.88,237.735 1424.45,237.341 1425.02,234.936 1425.59,236.002 1426.15,236.867 1426.72,235.672 1427.29,235.398 1427.86,235.121 1428.43,234.819 1429,235.826 1429.56,234.412 1430.13,232.395 1430.7,235.634 1431.27,236.506 1431.84,236.036 1432.41,235.887 1432.97,236.725 1433.54,236.314 1434.11,232.755 1434.68,233.59 1435.25,232.342 1435.82,231.166 1436.38,231.178 1436.95,230.429 1437.52,229.682 1438.09,229.951 1438.66,231.122 1439.23,230.141 1439.79,231.165 1440.36,229.438 1440.93,230.521 1441.5,231.429 1442.07,230.6 1442.64,231.791 1443.2,231.959 1443.77,231.932 1444.34,231.824 1444.91,231.977 1445.48,230.77 1446.05,229.83 1446.61,230.912 1447.18,229.108 1447.75,230.515 1448.32,232.774 1448.89,231.692 1449.46,229.733 1450.02,230.006 1450.59,229.077 1451.16,230.305 1451.73,231.555 1452.3,232.653 1452.87,231.795 1453.43,233.923 1454,231.5 1454.57,232.518 1455.14,232.551 1455.71,232.463 1456.28,231.525 1456.84,232.469 1457.41,234.448 1457.98,234.263 1458.55,235.313 1459.12,235.163 1459.69,235.915 1460.25,235.536 1460.82,234.325 1461.39,235.381 1461.96,235.091 1462.53,235.76 1463.1,236.53 1463.66,237.133 1464.23,239.811 1464.8,238.326 1465.37,237.004 1465.94,237.599 1466.51,238.053 1467.07,239.509 1467.64,239.917 1468.21,240.359 1468.78,239.784 1469.35,237.931 1469.92,238.317 1470.48,235.684 1471.05,233.957 1471.62,233.595 1472.19,232.429 1472.76,230.168 1473.33,229.791 1473.89,229.725 1474.46,228.877 1475.03,230.002 1475.6,227.079 1476.17,223.189 1476.74,222.613 1477.31,222.052 1477.87,227.724 1478.44,229.926 1479.01,227.878 1479.58,225.828 1480.15,226.228 1480.72,225.504 1481.28,225.79 1481.85,225.159 1482.42,224.251 1482.99,224.789 1483.56,225.293 1484.13,226.531 1484.69,228.884 1485.26,230.251 1485.83,230.491 1486.4,229.354 1486.97,228.465 1487.54,229.807 1488.1,230.924 1488.67,226.998 1489.24,228.522 1489.81,227.6 1490.38,228.313 1490.95,230.022 1491.51,227.94 1492.08,228.384 1492.65,229.826 1493.22,229.851 1493.79,231.145 1494.36,232.269 1494.92,231.18 1495.49,232.402 1496.06,232.338 1496.63,233.428 1497.2,232.45 1497.77,232.461 1498.33,230.48 1498.9,230.773 1499.47,232.004 1500.04,230.979 1500.61,231.015 1501.18,230.99 1501.74,232.157 1502.31,233.349 1502.88,233.491 1503.45,235.442 1504.02,234.046 1504.59,233.16 1505.15,233.94 1505.72,233.861 1506.29,233.821 1506.86,232.885 1507.43,232.77 1508,234.773 1508.56,231.57 1509.13,231.622 1509.7,231.779 1510.27,231.733 1510.84,230.68 1511.41,230.697 1511.97,230.697 1512.54,230.985 1513.11,227.775 1513.68,229.057 1514.25,230.591 1514.82,232.891 1515.38,233.924 1515.95,236.711 1516.52,235.34 1517.09,237.166 1517.66,234.94 1518.23,235.955 1518.79,233.592 1519.36,230.145 1519.93,228.235 1520.5,229.521 1521.07,230.848 1521.64,234.115 1522.2,234.969 1522.77,233.742 1523.34,233.457 1523.91,233.235 1524.48,233.243 1525.05,232.266 1525.61,232.271 1526.18,232.255 1526.75,234.261 1527.32,233.032 1527.89,233.904 1528.46,235.867 1529.02,237.558 1529.59,238.104 1530.16,236.632 1530.73,237.358 1531.3,237.116 1531.87,234.705 1532.43,234.763 1533,234.62 1533.57,232.391 1534.14,231.278 1534.71,230.261 1535.28,230.241 1535.84,230.146 1536.41,229.251 1536.98,229.306 1537.55,228.638 1538.12,227.94 1538.69,230.132 1539.25,230.393 1539.82,232.53 1540.39,231.408 1540.96,233.508 1541.53,231.149 1542.1,232.074 1542.66,232.069 1543.23,231.868 1543.8,230.866 1544.37,233.847 1544.94,232.527 1545.51,233.501 1546.08,231.283 1546.64,230.148 1547.21,228.341 1547.78,227.646 1548.35,228.814 1548.92,227.029 1549.49,226.378 1550.05,227.793 1550.62,228.282 1551.19,228.559 1551.76,229.144 1552.33,228.358 1552.9,227.615 1553.46,228.958 1554.03,230.126 1554.6,230.32 1555.17,229.48 1555.74,229.755 1556.31,229.929 1556.87,230.213 1557.44,232.512 1558.01,233.446 1558.58,234.414 1559.15,234.153 1559.72,234.073 1560.28,232.979 1560.85,232.815 1561.42,232.836 1561.99,233.869 1562.56,232.82 1563.13,233.735 1563.69,233.489 1564.26,232.24 1564.83,232.104 1565.4,233.244 1565.97,232.923 1566.54,233.032 1567.1,232.154 1567.67,234.011 1568.24,232.766 1568.81,231.66 1569.38,230.689 1569.95,230.965 1570.51,230.03 1571.08,228.985 1571.65,230.143 1572.22,231.125 1572.79,232.232 1573.36,232.217 1573.92,231.093 1574.49,231.278 1575.06,231.264 1575.63,230.294 1576.2,229.407 1576.77,230.673 1577.33,232.912 1577.9,233.812 1578.47,232.674 1579.04,230.466 1579.61,232.587 1580.18,231.582 1580.74,232.652 1581.31,232.597 1581.88,231.449 1582.45,229.523 1583.02,232.802 1583.59,231.693 1584.15,232.701 1584.72,233.911 1585.29,234.62 1585.86,230.515 1586.43,229.57 1587,229.905 1587.56,231.217 1588.13,230.341 1588.7,230.688 1589.27,231.68 1589.84,231.714 1590.41,232.579 1590.97,232.475 1591.54,231.407 1592.11,233.579 1592.68,234.616 1593.25,236.569 1593.82,236.338 1594.38,233.85 1594.95,230.512 1595.52,229.82 1596.09,230.031 1596.66,228.094 1597.23,229.416 1597.79,231.686 1598.36,230.776 1598.93,229.819 1599.5,236.135 1600.07,236.762 1600.64,234.281 1601.2,234.061 1601.77,233.88 1602.34,233.561 1602.91,232.401 1603.48,232.48 1604.05,232.659 1604.61,232.506 1605.18,232.549 1605.75,233.522 1606.32,234.293 1606.89,232.942 1607.46,233.731 1608.02,233.629 1608.59,232.456 1609.16,234.451 1609.73,233.317 1610.3,232.217 1610.87,232.373 1611.43,231.269 1612,231.199 1612.57,230.393 1613.14,230.578 1613.71,231.66 1614.28,232.773 1614.84,232.57 1615.41,236.41 1615.98,235.164 1616.55,236.698 1617.12,236.37 1617.69,235.908 1618.26,235.658 1618.82,232.102 1619.39,232.127 1619.96,233.112 1620.53,233.91 1621.1,233.776 1621.67,233.375 1622.23,233.319 1622.8,234.2 1623.37,232.736 1623.94,231.581 1624.51,234.614 1625.08,231.169 1625.64,231.969 1626.21,232.838 1626.78,233.677 1627.35,232.707 1627.92,230.54 1628.49,231.622 1629.05,231.745 1629.62,230.939 1630.19,232.04 1630.76,232.044 1631.33,229.84 1631.9,228.867 1632.46,226.142 1633.03,227.449 1633.6,228.8 1634.17,228.859 1634.74,230.043 1635.31,230.465 1635.87,230.647 1636.44,230.567 1637.01,230.522 1637.58,231.549 1638.15,233.493 1638.72,235.263 1639.28,235.867 1639.85,234.389 1640.42,234.358 1640.99,230.953 1641.56,232.162 1642.13,230.909 1642.69,232.021 1643.26,230.929 1643.83,234.14 1644.4,234.108 1644.97,234.723 1645.54,232.357 1646.1,232.265 1646.67,234.119 1647.24,233.974 1647.81,234.061 1648.38,234.011 1648.95,232.864 1649.51,228.593 1650.08,228.694 1650.65,228.764 1651.22,227.981 1651.79,227.125 1652.36,225.408 1652.92,225.751 1653.49,226.145 1654.06,227.607 1654.63,227.861 1655.2,227.064 1655.77,225.438 1656.33,224.914 1656.9,225.422 1657.47,225.993 1658.04,226.469 1658.61,227.93 1659.18,229.25 1659.74,230.549 1660.31,232.688 1660.88,233.595 1661.45,235.505 1662.02,234.177 1662.59,236.135 1663.15,234.702 1663.72,232.417 1664.29,233.488 1664.86,232.3 1665.43,229.214 1666,230.657 1666.56,230.813 1667.13,231.905 1667.7,230.969 1668.27,231.287 1668.84,231.284 1669.41,229.479 1669.97,230.724 1670.54,231.918 1671.11,232.043 1671.68,231.193 1672.25,232.596 1672.82,231.625 1673.38,233.797 1673.95,231.624 1674.52,229.706 1675.09,228.746 1675.66,231.037 1676.23,231.139 1676.79,233.26 1677.36,231.146 1677.93,234.252 1678.5,233.248 1679.07,233.338 1679.64,235.235 1680.2,236.002 1680.77,236.818 1681.34,234.359 1681.91,235.109 1682.48,236.296 1683.05,236.054 1683.61,235.009 1684.18,235.866 1684.75,236.647 1685.32,236.063 1685.89,234.738 1686.46,235.374 1687.02,232.98 1687.59,234.795 1688.16,235.659 1688.73,234.201 1689.3,232.543 1689.87,233.677 1690.44,233.654 1691,233.734 1691.57,233.501 1692.14,234.263 1692.71,231.101 1693.28,229.158 1693.85,230.17 1694.41,231.493 1694.98,232.633 1695.55,230.718 1696.12,229.666 1696.69,231.891 1697.26,229.959 1697.82,231.295 1698.39,233.379 1698.96,231.127 1699.53,234.276 1700.1,236.222 1700.67,235.743 1701.23,236.357 1701.8,235.948 1702.37,236.938 1702.94,234.299 1703.51,236.246 1704.08,236.884 1704.64,236.353 1705.21,236.125 1705.78,236.754 1706.35,235.36 1706.92,234.926 1707.49,233.282 1708.05,232.053 1708.62,230.933 1709.19,231.019 1709.76,231.214 1710.33,231.167 1710.9,231.892 1711.46,231.57 1712.03,229.236 1712.6,229.33 1713.17,229.527 1713.74,232.471 1714.31,233.477 1714.87,234.253 1715.44,233.947 1716.01,234.929 1716.58,237.709 1717.15,239.194 1717.72,237.71 1718.28,233.044 1718.85,232.926 1719.42,232.746 1719.99,234.889 1720.56,234.64 1721.13,236.271 1721.69,234.664 1722.26,236.335 1722.83,236.02 1723.4,235.394 1723.97,234.883 1724.54,234.472 1725.1,234.206 1725.67,233.873 1726.24,233.383 1726.81,233.193 1727.38,230.952 1727.95,229.87 1728.51,229.826 1729.08,228.614 1729.65,230.834 1730.22,229.691 1730.79,230.853 1731.36,230.67 1731.92,226.475 1732.49,223.477 1733.06,224.958 1733.63,223.969 1734.2,223.157 1734.77,222.52 1735.33,223.116 1735.9,224.822 1736.47,226.294 1737.04,225.552 1737.61,226.934 1738.18,226.416 1738.74,229.007 1739.31,230.343 1739.88,228.148 1740.45,229.26 1741.02,229.486 1741.59,227.478 1742.15,226.928 1742.72,227.101 1743.29,227.437 1743.86,227.836 1744.43,228.078 1745,227.377 1745.56,227.783 1746.13,227.322 1746.7,225.542 1747.27,226.243 1747.84,227.687 1748.41,226.983 1748.97,226.472 1749.54,229.233 1750.11,231.756 1750.68,230.843 1751.25,230.965 1751.82,231.132 1752.38,230.329 1752.95,229.599 1753.52,227.888 1754.09,230.336 1754.66,230.343 1755.23,228.507 1755.79,228.815 1756.36,230.188 1756.93,231.386 1757.5,231.47 1758.07,229.501 1758.64,227.829 1759.21,228.356 1759.77,228.552 1760.34,230.135 1760.91,228.459 1761.48,228.731 1762.05,229.265 1762.62,227.645 1763.18,228.062 1763.75,228.511 1764.32,230.032 1764.89,230.196 1765.46,228.267 1766.03,229.84 1766.59,231.195 1767.16,234.773 1767.73,235.768 1768.3,236.828 1768.87,235.533 1769.44,233.21 1770,231.007 1770.57,232.171 1771.14,233.326 1771.71,233.218 1772.28,232.189 1772.85,236.39 1773.41,237.221 1773.98,237.108 1774.55,236.784 1775.12,237.534 1775.69,236.331 1776.26,238.015 1776.82,235.381 1777.39,233.176 1777.96,232.043 1778.53,231.124 1779.1,231.267 1779.67,231.289 1780.23,230.29 1780.8,231.497 1781.37,233.855 1781.94,234.494 1782.51,234.429 1783.08,235.324 1783.64,236.223 1784.21,236.923 1784.78,234.579 1785.35,236.638 1785.92,237.514 1786.49,239.106 1787.05,237.599 1787.62,236.067 1788.19,233.726 1788.76,233.723 1789.33,231.367 1789.9,231.286 1790.46,231.183 1791.03,230.077 1791.6,230.009 1792.17,230.188 1792.74,230.261 1793.31,228.427 1793.87,228.535 1794.44,230.874 1795.01,231.995 1795.58,233.162 1796.15,233.124 1796.72,233.008 1797.28,234.077 1797.85,233.863 1798.42,233.571 1798.99,233.342 1799.56,234.236 1800.13,235.192 1800.69,233.924 1801.26,232.931 1801.83,232.748 1802.4,233.643 1802.97,230.365 1803.54,231.326 1804.1,230.281 1804.67,230.188 1805.24,229.31 1805.81,229.435 1806.38,229.284 1806.95,229.254 1807.51,229.646 1808.08,229.62 1808.65,229.869 1809.22,229.914 1809.79,229.807 1810.36,231.042 1810.92,231.263 1811.49,229.296 1812.06,229.641 1812.63,229.787 1813.2,230.939 1813.77,231.952 1814.33,232.973 1814.9,233.956 1815.47,233.762 1816.04,233.675 1816.61,234.766 1817.18,232.484 1817.74,232.622 1818.31,229.537 1818.88,229.657 1819.45,230.029 1820.02,229.067 1820.59,228.415 1821.15,227.548 1821.72,229.979 1822.29,230.172 1822.86,230.509 1823.43,230.651 1824,229.784 1824.56,230.151 1825.13,231.377 1825.7,231.458 1826.27,230.471 1826.84,231.592 1827.41,231.543 1827.97,230.659 1828.54,229.893 1829.11,233.181 1829.68,230.193 1830.25,230.677 1830.82,230.95 1831.39,233.063 1831.95,231.923 1832.52,233.129 1833.09,232.17 1833.66,231.27 1834.23,233.555 1834.8,234.278 1835.36,235.141 1835.93,238.122 1836.5,236.467 1837.07,237.232 1837.64,237.19 1838.21,237.829 1838.77,239.297 1839.34,238.988 1839.91,238.427 1840.48,238.022 1841.05,236.549 1841.62,235.078 1842.18,234.963 1842.75,233.693 1843.32,235.765 1843.89,234.211 1844.46,233.925 1845.03,235.84 1845.59,234.507 1846.16,235.405 1846.73,233.805 1847.3,235.549 1847.87,234.135 1848.44,233.738 1849,234.473 1849.57,234.089 1850.14,231.86 1850.71,231.996 1851.28,230.908 1851.85,230.024 1852.41,230.072 1852.98,230.035 1853.55,229.154 1854.12,232.462 1854.69,231.419 1855.26,229.368 1855.82,229.467 1856.39,230.55 1856.96,229.586 1857.53,229.702 1858.1,226.902 1858.67,228.229 1859.23,228.714 1859.8,230.026 1860.37,230.226 1860.94,231.401 1861.51,229.449 1862.08,229.592 1862.64,227.766 1863.21,228.028 1863.78,228.328 1864.35,229.605 1864.92,227.704 1865.49,230.105 1866.05,230.397 1866.62,231.526 1867.19,233.746 1867.76,234.646 1868.33,234.478 1868.9,234.349 1869.46,234.986 1870.03,235.785 1870.6,234.331 1871.17,235.24 1871.74,235.977 1872.31,232.451 1872.87,231.502 1873.44,232.597 1874.01,231.646 1874.58,232.552 1875.15,232.328 1875.72,232.409 1876.28,232.23 1876.85,231.334 1877.42,232.451 1877.99,234.414 1878.56,233.142 1879.13,233.873 1879.69,232.737 1880.26,232.553 1880.83,231.679 1881.4,231.675 1881.97,230.768 1882.54,231.886 1883.1,231.029 1883.67,232.081 1884.24,231.949 1884.81,232.836 1885.38,231.402 1885.95,233.247 1886.51,233.156 1887.08,236.152 1887.65,236.596 1888.22,234.311 1888.79,233.767 1889.36,232.498 1889.92,232.377 1890.49,229.246 1891.06,228.079 1891.63,228.165 1892.2,226.279 1892.77,227.463 1893.33,227.771 1893.9,227.938 1894.47,229.995 1895.04,228.916 1895.61,228.968 1896.18,229.041 1896.74,230.235 1897.31,229.241 1897.88,229.289 1898.45,230.398 1899.02,230.485 1899.59,231.582 1900.16,230.39 1900.72,229.549 1901.29,228.649 1901.86,229.668 1902.43,228.868 1903,229.288 1903.57,228.503 1904.13,231.032 1904.7,231.414 1905.27,232.432 1905.84,232.349 1906.41,231.4 1906.98,230.403 1907.54,227.574 1908.11,230.083 1908.68,227.903 1909.25,229.347 1909.82,231.634 1910.39,233.836 1910.95,233.821 1911.52,233.665 1912.09,233.527 1912.66,231.373 1913.23,231.362 1913.8,230.457 1914.36,231.728 1914.93,231.844 1915.5,232.025 1916.07,232.164 1916.64,231.107 1917.21,229.143 1917.77,230.354 1918.34,231.762 1918.91,230.784 1919.48,232.97 1920.05,234.796 1920.62,232.604 1921.18,233.641 1921.75,235.742 1922.32,234.23 1922.89,233.117 1923.46,233.157 1924.03,230.904 1924.59,228.765 1925.16,228.974 1925.73,228.203 1926.3,230.538 1926.87,230.79 1927.44,234.092 1928,232.003 1928.57,234.958 1929.14,235.852 1929.71,233.654 1930.28,234.627 1930.85,235.519 1931.41,235.308 1931.98,232.858 1932.55,235.756 1933.12,235.31 1933.69,235.237 1934.26,236.15 1934.82,235.744 1935.39,235.397 1935.96,233.882 1936.53,234.612 1937.1,234.274 1937.67,234.09 1938.23,234.875 1938.8,232.573 1939.37,234.243 1939.94,234.051 1940.51,233.826 1941.08,234.765 1941.64,235.286 1942.21,234.033 1942.78,234.725 1943.35,234.411 1943.92,233.154 1944.49,232.986 1945.05,235.924 1945.62,235.6 1946.19,235.222 1946.76,235.911 1947.33,237.539 1947.9,236.166 1948.46,233.585 1949.03,232.192 1949.6,232.964 1950.17,234.753 1950.74,235.413 1951.31,235.817 1951.87,234.049 1952.44,232.749 1953.01,231.493 1953.58,232.334 1954.15,234.346 1954.72,237.316 1955.28,234.757 1955.85,230.408 1956.42,229.271 1956.99,227.439 1957.56,227.474 1958.13,229.811 1958.69,229.814 1959.26,229.904 1959.83,229.911 1960.4,231.103 1960.97,229.871 1961.54,230.021 1962.1,230.955 1962.67,231.969 1963.24,230.889 1963.81,228.964 1964.38,229.076 1964.95,229.062 1965.51,229.281 1966.08,229.346 1966.65,228.433 1967.22,227.758 1967.79,229.156 1968.36,229.442 1968.92,229.739 1969.49,229.86 1970.06,230.867 1970.63,230.072 1971.2,229.013 1971.77,230.232 1972.34,230.255 1972.9,231.467 1973.47,229.531 1974.04,229.558 1974.61,229.506 1975.18,230.7 1975.75,229.7 1976.31,228.861 1976.88,229.119 1977.45,227.042 1978.02,226.306 1978.59,225.659 1979.16,227.076 1979.72,227.506 1980.29,227.714 1980.86,227.983 1981.43,229.288 1982,232.625 1982.57,232.497 1983.13,233.293 1983.7,233.147 1984.27,230.861 1984.84,232.133 1985.41,230.182 1985.98,230.129 1986.54,231.269 1987.11,230.305 1987.68,230.315 1988.25,230.308 1988.82,230.46 1989.39,230.635 1989.95,231.793 1990.52,231.942 1991.09,227.846 1991.66,228.147 1992.23,224.48 1992.8,222.958 1993.36,223.537 1993.93,224.961 1994.5,221.545 1995.07,223.431 1995.64,222.713 1996.21,221.48 1996.77,222.357 1997.34,222.255 1997.91,225.096 1998.48,228.751 1999.05,230.345 1999.62,233.599 2000.18,232.614 2000.75,233.903 2001.32,233.829 2001.89,233.776 2002.46,233.745 2003.03,233.774 2003.59,233.823 2004.16,230.707 2004.73,232.751 2005.3,232.86 2005.87,235.077 2006.44,236.08 2007,233.719 2007.57,233.545 2008.14,234.612 2008.71,234.535 2009.28,236.307 2009.85,237.305 2010.41,237.06 2010.98,235.935 2011.55,234.778 2012.12,236.757 2012.69,235.592 2013.26,233.386 2013.82,235.518 2014.39,237.227 2014.96,236.984 2015.53,234.685 2016.1,233.461 2016.67,232.353 2017.23,232.328 2017.8,233.366 2018.37,231.205 2018.94,231.14 2019.51,231.593 2020.08,229.52 2020.64,228.767 2021.21,229.989 2021.78,230.407 2022.35,231.443 2022.92,231.577 2023.49,231.604 2024.05,230.486 2024.62,232.685 2025.19,233.911 2025.76,232.917 2026.33,232.769 2026.9,230.649 2027.46,231.862 2028.03,230.838 2028.6,231.964 2029.17,228.89 2029.74,231.088 2030.31,231.241 2030.87,232.491 2031.44,232.414 2032.01,232.624 2032.58,233.859 2033.15,232.823 2033.72,232.676 2034.28,232.605 2034.85,233.465 2035.42,234.455 2035.99,235.405 2036.56,237.17 2037.13,235.62 2037.69,234.392 2038.26,233.218 2038.83,234.145 2039.4,233.936 2039.97,234.708 2040.54,231.418 2041.11,232.285 2041.67,231.226 2042.24,232.52 2042.81,233.592 2043.38,233.627 2043.95,231.358 2044.52,232.391 2045.08,230.229 2045.65,229.442 2046.22,227.971 2046.79,230.458 2047.36,229.368 2047.93,230.878 2048.49,229.971 2049.06,229.154 2049.63,231.401 2050.2,229.41 2050.77,229.733 2051.34,231.099 2051.9,231.453 2052.47,231.485 2053.04,235.882 2053.61,235.545 2054.18,235.323 2054.75,236.092 2055.31,236.116 2055.88,235.901 2056.45,235.466 2057.02,235.339 2057.59,236.049 2058.16,234.707 2058.72,233.419 2059.29,233.091 2059.86,231.854 2060.43,232.113 2061,232.216 2061.57,231.163 2062.13,231.161 2062.7,231.224 2063.27,231.124 2063.84,231.398 2064.41,232.491 2064.98,233.382 2065.54,233.245 2066.11,232.177 2066.68,232.06 2067.25,232.114 2067.82,231.075 2068.39,230.165 2068.95,229.191 2069.52,230.456 2070.09,230.642 2070.66,230.624 2071.23,233.566 2071.8,236.616 2072.36,236.359 2072.93,235.903 2073.5,232.768 2074.07,232.823 2074.64,232.808 2075.21,233.613 2075.77,232.399 2076.34,233.43 2076.91,233.33 2077.48,235.174 2078.05,232.902 2078.62,233.685 2079.18,233.541 2079.75,232.33 2080.32,230.131 2080.89,229.093 2081.46,230.251 2082.03,230.203 2082.59,233.255 2083.16,233.926 2083.73,232.508 2084.3,232.317 2084.87,232.069 2085.44,233.877 2086,233.841 2086.57,233.522 2087.14,232.441 2087.71,234.269 2088.28,230.868 2088.85,231.933 2089.41,230.624 2089.98,231.654 2090.55,231.656 2091.12,233.726 2091.69,235.562 2092.26,235.027 2092.82,235.886 2093.39,234.626 2093.96,231.576 2094.53,231.658 2095.1,230.456 2095.67,230.604 2096.23,231.799 2096.8,232.761 2097.37,234.673 2097.94,233.426 2098.51,231.266 2099.08,233.21 2099.64,233.21 2100.21,235.382 2100.78,236.043 2101.35,236.675 2101.92,236.264 2102.49,234.777 2103.05,236.664 2103.62,237.207 2104.19,237.937 2104.76,237.223 2105.33,236.8 2105.9,235.381 2106.46,233.207 2107.03,233.002 2107.6,231.726 2108.17,230.767 2108.74,230.536 2109.31,231.699 2109.87,231.869 2110.44,230.805 2111.01,230.719 2111.58,228.611 2112.15,228.847 2112.72,229.01 2113.29,228.334 2113.85,227.681 2114.42,225.817 2114.99,227.022 2115.56,226.331 2116.13,226.542 2116.7,226.861 2117.26,228.235 2117.83,227.289 2118.4,227.527 2118.97,228.714 2119.54,230.065 2120.11,229.043 2120.67,230.027 2121.24,231.114 2121.81,235.294 2122.38,235.099 2122.95,234.775 2123.52,234.402 2124.08,234.257 2124.65,235.965 2125.22,237.708 2125.79,236.418 2126.36,235.905 2126.93,234.401 2127.49,233.11 2128.06,232.931 2128.63,233.654 2129.2,233.596 2129.77,235.35 2130.34,234.975 2130.9,235.881 2131.47,233.499 2132.04,231.36 2132.61,229.39 2133.18,229.658 2133.75,228.468 2134.31,228.523 2134.88,229.895 2135.45,228.938 2136.02,230.001 2136.59,227.991 2137.16,230.365 2137.72,229.551 2138.29,228.585 2138.86,226.622 2139.43,228.061 2140,227.295 2140.57,228.804 2141.13,229.034 2141.7,227.023 2142.27,227.293 2142.84,228.629 2143.41,226.77 2143.98,227.041 2144.54,228.13 2145.11,225.45 2145.68,228.957 2146.25,230.295 2146.82,230.385 2147.39,230.58 2147.95,232.614 2148.52,231.361 2149.09,230.516 2149.66,230.653 2150.23,229.57 2150.8,230.707 2151.36,228.843 2151.93,227.16 2152.5,227.641 2153.07,228.988 2153.64,231.348 2154.21,232.437 2154.77,230.446 2155.34,229.753 2155.91,228.997 2156.48,226.333 2157.05,229.073 2157.62,228.198 2158.18,227.517 2158.75,227.976 2159.32,226.306 2159.89,227.768 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.022\n  with uncertainty of ± 0.002026721537782019\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01372 ± (0.0025505, 0.00250399) (MC)\n  95% confidence interval: [-4.01875, -4.00854]) (MC)\n  linear error propagation: -4.01411 ± 0.0024624\n  |δ_y| = |0.00256432| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013721909365154, val_l = 0.005023873867061823, val_u = 0.005177605386976758)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip300\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip301\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip302\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148.77 2211.02,1148.77 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,986.542 2211.02,986.542 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,824.313 2211.02,824.313 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,662.083 2211.02,662.083 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,499.853 2211.02,499.853 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,337.624 2211.02,337.624 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148.77 365.751,1148.77 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,986.542 365.751,986.542 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,824.313 365.751,824.313 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,662.083 365.751,662.083 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,499.853 365.751,499.853 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,337.624 365.751,337.624 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M298.909 1134.57 Q295.298 1134.57 293.469 1138.14 Q291.664 1141.68 291.664 1148.81 Q291.664 1155.91 293.469 1159.48 Q295.298 1163.02 298.909 1163.02 Q302.543 1163.02 304.349 1159.48 Q306.177 1155.91 306.177 1148.81 Q306.177 1141.68 304.349 1138.14 Q302.543 1134.57 298.909 1134.57 M298.909 1130.87 Q304.719 1130.87 307.775 1135.47 Q310.853 1140.06 310.853 1148.81 Q310.853 1157.53 307.775 1162.14 Q304.719 1166.72 298.909 1166.72 Q293.099 1166.72 290.02 1162.14 Q286.964 1157.53 286.964 1148.81 Q286.964 1140.06 290.02 1135.47 Q293.099 1130.87 298.909 1130.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M259.557 999.887 L267.196 999.887 L267.196 973.522 L258.886 975.188 L258.886 970.929 L267.15 969.262 L271.826 969.262 L271.826 999.887 L279.465 999.887 L279.465 1003.82 L259.557 1003.82 L259.557 999.887 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 972.341 Q295.298 972.341 293.469 975.906 Q291.664 979.447 291.664 986.577 Q291.664 993.683 293.469 997.248 Q295.298 1000.79 298.909 1000.79 Q302.543 1000.79 304.349 997.248 Q306.177 993.683 306.177 986.577 Q306.177 979.447 304.349 975.906 Q302.543 972.341 298.909 972.341 M298.909 968.637 Q304.719 968.637 307.775 973.244 Q310.853 977.827 310.853 986.577 Q310.853 995.304 307.775 999.91 Q304.719 1004.49 298.909 1004.49 Q293.099 1004.49 290.02 999.91 Q286.964 995.304 286.964 986.577 Q286.964 977.827 290.02 973.244 Q293.099 968.637 298.909 968.637 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M262.775 837.658 L279.094 837.658 L279.094 841.593 L257.15 841.593 L257.15 837.658 Q259.812 834.903 264.395 830.273 Q269.002 825.621 270.182 824.278 Q272.428 821.755 273.307 820.019 Q274.21 818.259 274.21 816.57 Q274.21 813.815 272.266 812.079 Q270.344 810.343 267.242 810.343 Q265.043 810.343 262.59 811.107 Q260.159 811.871 257.381 813.422 L257.381 808.699 Q260.205 807.565 262.659 806.986 Q265.113 806.408 267.15 806.408 Q272.52 806.408 275.715 809.093 Q278.909 811.778 278.909 816.269 Q278.909 818.398 278.099 820.32 Q277.312 822.218 275.205 824.81 Q274.627 825.482 271.525 828.699 Q268.423 831.894 262.775 837.658 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 810.111 Q295.298 810.111 293.469 813.676 Q291.664 817.218 291.664 824.347 Q291.664 831.454 293.469 835.019 Q295.298 838.56 298.909 838.56 Q302.543 838.56 304.349 835.019 Q306.177 831.454 306.177 824.347 Q306.177 817.218 304.349 813.676 Q302.543 810.111 298.909 810.111 M298.909 806.408 Q304.719 806.408 307.775 811.014 Q310.853 815.597 310.853 824.347 Q310.853 833.074 307.775 837.681 Q304.719 842.264 298.909 842.264 Q293.099 842.264 290.02 837.681 Q286.964 833.074 286.964 824.347 Q286.964 815.597 290.02 811.014 Q293.099 806.408 298.909 806.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M272.914 660.729 Q276.27 661.447 278.145 663.715 Q280.043 665.984 280.043 669.317 Q280.043 674.433 276.525 677.233 Q273.006 680.034 266.525 680.034 Q264.349 680.034 262.034 679.595 Q259.742 679.178 257.289 678.321 L257.289 673.808 Q259.233 674.942 261.548 675.521 Q263.863 676.099 266.386 676.099 Q270.784 676.099 273.076 674.363 Q275.39 672.627 275.39 669.317 Q275.39 666.261 273.238 664.548 Q271.108 662.812 267.289 662.812 L263.261 662.812 L263.261 658.97 L267.474 658.97 Q270.923 658.97 272.752 657.604 Q274.58 656.215 274.58 653.622 Q274.58 650.96 272.682 649.548 Q270.807 648.113 267.289 648.113 Q265.367 648.113 263.168 648.53 Q260.969 648.947 258.33 649.826 L258.33 645.66 Q260.992 644.919 263.307 644.548 Q265.645 644.178 267.705 644.178 Q273.029 644.178 276.131 646.609 Q279.233 649.016 279.233 653.136 Q279.233 656.007 277.59 657.997 Q275.946 659.965 272.914 660.729 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 647.882 Q295.298 647.882 293.469 651.447 Q291.664 654.988 291.664 662.118 Q291.664 669.224 293.469 672.789 Q295.298 676.331 298.909 676.331 Q302.543 676.331 304.349 672.789 Q306.177 669.224 306.177 662.118 Q306.177 654.988 304.349 651.447 Q302.543 647.882 298.909 647.882 M298.909 644.178 Q304.719 644.178 307.775 648.785 Q310.853 653.368 310.853 662.118 Q310.853 670.845 307.775 675.451 Q304.719 680.034 298.909 680.034 Q293.099 680.034 290.02 675.451 Q286.964 670.845 286.964 662.118 Q286.964 653.368 290.02 648.785 Q293.099 644.178 298.909 644.178 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M271.594 486.648 L259.789 505.097 L271.594 505.097 L271.594 486.648 M270.367 482.573 L276.247 482.573 L276.247 505.097 L281.177 505.097 L281.177 508.985 L276.247 508.985 L276.247 517.133 L271.594 517.133 L271.594 508.985 L255.992 508.985 L255.992 504.472 L270.367 482.573 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 485.652 Q295.298 485.652 293.469 489.217 Q291.664 492.759 291.664 499.888 Q291.664 506.995 293.469 510.559 Q295.298 514.101 298.909 514.101 Q302.543 514.101 304.349 510.559 Q306.177 506.995 306.177 499.888 Q306.177 492.759 304.349 489.217 Q302.543 485.652 298.909 485.652 M298.909 481.948 Q304.719 481.948 307.775 486.555 Q310.853 491.138 310.853 499.888 Q310.853 508.615 307.775 513.221 Q304.719 517.805 298.909 517.805 Q293.099 517.805 290.02 513.221 Q286.964 508.615 286.964 499.888 Q286.964 491.138 290.02 486.555 Q293.099 481.948 298.909 481.948 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M258.793 320.344 L277.15 320.344 L277.15 324.279 L263.076 324.279 L263.076 332.751 Q264.094 332.404 265.113 332.242 Q266.131 332.057 267.15 332.057 Q272.937 332.057 276.316 335.228 Q279.696 338.399 279.696 343.816 Q279.696 349.395 276.224 352.497 Q272.752 355.575 266.432 355.575 Q264.256 355.575 261.988 355.205 Q259.742 354.834 257.335 354.094 L257.335 349.395 Q259.418 350.529 261.641 351.084 Q263.863 351.64 266.34 351.64 Q270.344 351.64 272.682 349.534 Q275.02 347.427 275.02 343.816 Q275.02 340.205 272.682 338.098 Q270.344 335.992 266.34 335.992 Q264.465 335.992 262.59 336.409 Q260.738 336.825 258.793 337.705 L258.793 320.344 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 323.423 Q295.298 323.423 293.469 326.987 Q291.664 330.529 291.664 337.659 Q291.664 344.765 293.469 348.33 Q295.298 351.872 298.909 351.872 Q302.543 351.872 304.349 348.33 Q306.177 344.765 306.177 337.659 Q306.177 330.529 304.349 326.987 Q302.543 323.423 298.909 323.423 M298.909 319.719 Q304.719 319.719 307.775 324.325 Q310.853 328.909 310.853 337.659 Q310.853 346.385 307.775 350.992 Q304.719 355.575 298.909 355.575 Q293.099 355.575 290.02 350.992 Q286.964 346.385 286.964 337.659 Q286.964 328.909 290.02 324.325 Q293.099 319.719 298.909 319.719 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip302)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1029.24 400.199,919.42 400.786,818.659 401.372,726.346 401.958,641.917 402.545,564.854 403.131,494.672 403.718,537.85 404.304,478.264 404.891,512.459 405.477,456.357 406.063,405.67 406.65,360.047 407.236,391.081 407.823,353.867 408.409,318.338 408.995,286.838 409.582,316.174 410.168,289.609 410.755,314.589 411.341,291.143 411.927,270.851 412.514,253.503 413.1,238.899 413.687,228.396 414.273,219.895 414.86,244.45 415.446,238.64 416.032,261.702 416.619,259.216 417.205,259.331 417.792,305.33 418.378,304.917 418.964,327.164 419.551,365.652 420.137,402.986 420.724,405.496 421.31,423.757 421.896,440.595 422.483,457.158 423.069,461.696 423.656,466.081 424.242,471.99 424.829,489.343 425.415,516.965 426.001,543.149 426.588,558.168 427.174,563.608 427.761,578.619 428.347,584.924 428.933,591.828 429.52,614.587 430.106,628.523 430.693,642.168 431.279,655.339 431.865,662.422 432.452,680.957 433.038,699.575 433.625,722.146 434.211,739.325 434.798,746.092 435.384,757.969 435.97,765.427 436.557,772.838 437.143,793.073 437.73,799.579 438.316,810.501 438.902,825.148 439.489,835.816 440.075,845.995 440.662,863.398 441.248,869.347 441.835,885.882 442.421,895.359 443.007,904.084 443.594,915.644 444.18,930.384 444.767,935.356 445.353,946.377 445.939,951.04 446.526,961.593 447.112,969.129 447.699,973.35 448.285,978.257 448.871,990.599 449.458,994.777 450.044,1001.88 450.631,1006.25 451.217,1010.61 451.804,1017.4 452.39,1024.17 452.976,1028.46 453.563,1039.78 454.149,1043.91 454.736,1054.6 455.322,1064.98 455.908,1068.17 456.495,1075.92 457.081,1078.88 457.668,1086.13 458.254,1089.19 458.84,1094.2 459.427,1097.14 460.013,1099.96 460.6,1108.63 461.186,1114.96 461.773,1121 462.359,1127.25 462.945,1129.95 463.532,1134.21 464.118,1141.94 464.705,1145.51 465.291,1147.41 465.877,1154.22 466.464,1159.11 467.05,1162.13 467.637,1170.26 468.223,1178.12 468.809,1178.94 469.396,1177.45 469.982,1183.26 470.569,1183.83 471.155,1182.77 471.742,1190 472.328,1190.32 472.914,1194.14 473.501,1192.91 474.087,1195 474.674,1202.07 475.26,1200.67 475.846,1200.88 476.433,1202.8 477.019,1202.88 477.606,1201.62 478.192,1208.17 478.778,1210.19 479.365,1211.83 479.951,1213.31 480.538,1218.07 481.124,1220.98 481.711,1222.14 482.297,1222.05 482.883,1223.55 483.47,1223.5 484.056,1224.67 484.643,1226.02 485.229,1225.87 485.815,1228.65 486.402,1227.15 486.988,1227.12 487.575,1229.63 488.161,1229.36 488.748,1224.69 489.334,1224.74 489.92,1224.98 490.507,1225.17 491.093,1227.98 491.68,1227.92 492.266,1232.36 492.852,1234.7 493.439,1237.28 494.025,1239.89 494.612,1239.17 495.198,1239.9 495.784,1240.65 496.371,1238.36 496.957,1240.72 497.544,1240.5 498.13,1244.08 498.717,1244.8 499.303,1248.37 499.889,1248.56 500.476,1247.64 501.062,1246.59 501.649,1245.63 502.235,1243.31 502.821,1240.21 503.408,1241.39 503.994,1243.42 504.581,1242.82 505.167,1239.56 505.753,1240.31 506.34,1239.89 506.926,1239.53 507.513,1240.96 508.099,1240.55 508.686,1245.47 509.272,1248.88 509.858,1249.63 510.445,1246.18 511.031,1248.24 511.618,1246.06 512.204,1245.45 512.79,1246.23 513.377,1245.54 513.963,1247.53 514.55,1246.86 515.136,1247.77 515.722,1246.97 516.309,1248.9 516.895,1248.08 517.482,1247.47 518.068,1246.78 518.655,1244.6 519.241,1245.21 519.827,1243.06 520.414,1242.58 521,1241.94 521.587,1242.78 522.173,1242.3 522.759,1243.54 523.346,1242.87 523.932,1240.81 524.519,1241.76 525.105,1242.58 525.691,1243.47 526.278,1244.3 526.864,1242.54 527.451,1241.9 528.037,1242.89 528.624,1241.23 529.21,1241.87 529.796,1241.51 530.383,1240.94 530.969,1240.45 531.556,1242.86 532.142,1242.31 532.728,1244.56 533.315,1245.21 533.901,1243.08 534.488,1239.93 535.074,1239.44 535.661,1240.69 536.247,1240.5 536.833,1239.93 537.42,1239.27 538.006,1237.68 538.593,1237.31 539.179,1239.75 539.765,1239.44 540.352,1240.41 540.938,1240.79 541.525,1240.44 542.111,1239.93 542.697,1243.32 543.284,1245.42 543.87,1245.76 544.457,1245.1 545.043,1247.34 545.63,1245.43 546.216,1246.23 546.802,1246.76 547.389,1250.12 547.975,1250.53 548.562,1249.88 549.148,1248.62 549.734,1246.55 550.321,1248.52 550.907,1246.19 551.494,1245.1 552.08,1244.21 552.666,1243.63 553.253,1241.49 553.839,1242.29 554.426,1241.85 555.012,1239.86 555.599,1238.24 556.185,1239.27 556.771,1244 557.358,1241.93 557.944,1238.37 558.531,1238.13 559.117,1233.71 559.703,1234.92 560.29,1235.8 560.876,1236.91 561.463,1234.94 562.049,1233.22 562.635,1231.83 563.222,1235.44 563.808,1236.42 564.395,1238.88 564.981,1234.16 565.568,1236.86 566.154,1235.31 566.74,1236.53 567.327,1236.11 567.913,1235.81 568.5,1236.96 569.086,1236.55 569.672,1237.28 570.259,1237.96 570.845,1234.8 571.432,1235.57 572.018,1236.63 572.605,1232.25 573.191,1231.91 573.777,1231.45 574.364,1231.57 574.95,1232.56 575.537,1231.09 576.123,1229.64 576.709,1231.13 577.296,1233.72 577.882,1234.68 578.469,1233.95 579.055,1233.73 579.641,1231.79 580.228,1233 580.814,1235.17 581.401,1237.41 581.987,1236.97 582.574,1237.96 583.16,1238.83 583.746,1237.98 584.333,1240.05 584.919,1239.47 585.506,1238.86 586.092,1237.98 586.678,1237.33 587.265,1235.49 587.851,1235.34 588.438,1234.89 589.024,1235.85 589.61,1235.52 590.197,1235.48 590.783,1235.2 591.37,1233.53 591.956,1230.46 592.543,1226.52 593.129,1226.41 593.715,1226.32 594.302,1226.07 594.888,1228.54 595.475,1236.36 596.061,1234.71 596.647,1235.75 597.234,1236.64 597.82,1236.34 598.407,1238.35 598.993,1239.06 599.579,1237.04 600.166,1238.78 600.752,1235.09 601.339,1235.96 601.925,1235.39 602.512,1234.91 603.098,1231.5 603.684,1231.24 604.271,1230.95 604.857,1228.96 605.444,1224.87 606.03,1227.66 606.616,1230.1 607.203,1228.66 607.789,1230.12 608.376,1229.77 608.962,1225.59 609.548,1224.33 610.135,1227.07 610.721,1226.98 611.308,1226.66 611.894,1229.2 612.481,1231.44 613.067,1232.44 613.653,1232.1 614.24,1234.26 614.826,1236.51 615.413,1235.83 615.999,1231.22 616.585,1231.02 617.172,1234.7 617.758,1232.91 618.345,1233.7 618.931,1231.68 619.518,1232.63 620.104,1234.81 620.69,1235.78 621.277,1235.02 621.863,1230.47 622.45,1227.49 623.036,1225.73 623.622,1224.08 624.209,1224.13 624.795,1223.98 625.382,1225.14 625.968,1224.91 626.554,1226.1 627.141,1224.42 627.727,1226.85 628.314,1227.94 628.9,1227.5 629.487,1227.41 630.073,1228.54 630.659,1228.17 631.246,1229.26 631.832,1224.77 632.419,1226.05 633.005,1224.57 633.591,1224.57 634.178,1225.48 634.764,1225.81 635.351,1225.61 635.937,1225.32 636.523,1225.4 637.11,1225.46 637.696,1225.48 638.283,1222.82 638.869,1224.11 639.456,1224.23 640.042,1222.82 640.628,1221.49 641.215,1221.6 641.801,1223.02 642.388,1224.33 642.974,1224.4 643.56,1222.96 644.147,1222.83 644.733,1223.83 645.32,1223.76 645.906,1220.87 646.492,1220.96 647.079,1220.9 647.665,1222.13 648.252,1216.89 648.838,1218.45 649.425,1219.94 650.011,1221.39 650.597,1221.35 651.184,1224.83 651.77,1225.97 652.357,1226.12 652.943,1227.19 653.529,1227.04 654.116,1224.11 654.702,1221.26 655.289,1223.98 655.875,1221.12 656.462,1223.84 657.048,1223.47 657.634,1224.69 658.221,1224.79 658.807,1223.41 659.394,1224.94 659.98,1226.17 660.566,1229.86 661.153,1228.15 661.739,1228 662.326,1227.61 662.912,1227.47 663.498,1228.48 664.085,1225.75 664.671,1225.55 665.258,1225.16 665.844,1226.28 666.431,1228.58 667.017,1228.4 667.603,1225.08 668.19,1224.9 668.776,1225.01 669.363,1226.33 669.949,1223.58 670.535,1223.46 671.122,1223.28 671.708,1223.03 672.295,1225.46 672.881,1224.09 673.467,1225.16 674.054,1227.7 674.64,1228.44 675.227,1228.01 675.813,1231.14 676.4,1230.75 676.986,1229.15 677.572,1227.44 678.159,1225.61 678.745,1226.69 679.332,1223.76 679.918,1220.79 680.504,1216.94 681.091,1217.01 681.677,1218.41 682.264,1219.77 682.85,1219.9 683.436,1220.02 684.023,1219.79 684.609,1219.71 685.196,1224.9 685.782,1223.49 686.369,1225.74 686.955,1228.2 687.541,1227.53 688.128,1229.56 688.714,1226.19 689.301,1228.3 689.887,1226.81 690.473,1231.44 691.06,1233.55 691.646,1233 692.233,1232.27 692.819,1230.62 693.405,1229.93 693.992,1229.18 694.578,1230.27 695.165,1229.59 695.751,1226.4 696.338,1227.29 696.924,1228.1 697.51,1226.19 698.097,1221.91 698.683,1221.58 699.27,1220.13 699.856,1220.09 700.442,1218.98 701.029,1217.83 701.615,1221.84 702.202,1222.92 702.788,1224.27 703.375,1225.52 703.961,1226.41 704.547,1225.94 705.134,1226.86 705.72,1227.85 706.307,1227.31 706.893,1229.52 707.479,1230.19 708.066,1228.52 708.652,1229.31 709.239,1228.74 709.825,1225.8 710.411,1225.2 710.998,1223.32 711.584,1223.32 712.171,1227.12 712.757,1228.09 713.344,1227.31 713.93,1226.8 714.516,1225.23 715.103,1225.02 715.689,1227.31 716.276,1228.25 716.862,1223.64 717.448,1221.18 718.035,1221.19 718.621,1218.61 719.208,1218.67 719.794,1215.97 720.38,1217.44 720.967,1213.48 721.553,1214.17 722.14,1213.27 722.726,1216.11 723.313,1217.79 723.899,1216.81 724.485,1218.39 725.072,1218.59 725.658,1219.95 726.245,1216.99 726.831,1215.71 727.417,1215.86 728.004,1216.36 728.59,1216.52 729.177,1219.33 729.763,1219.41 730.349,1220.73 730.936,1222.03 731.522,1220.77 732.109,1220.8 732.695,1219.52 733.282,1217.85 733.868,1215.31 734.454,1213.88 735.041,1217.92 735.627,1216.72 736.214,1215.23 736.8,1215.48 737.386,1215.6 737.973,1217.11 738.559,1218.66 739.146,1217.49 739.732,1215.1 740.318,1215.26 740.905,1213.17 741.491,1213.64 742.078,1215.22 742.664,1217.98 743.251,1219.45 743.837,1218.06 744.423,1216.88 745.01,1212.99 745.596,1211.92 746.183,1211.02 746.769,1214.02 747.355,1215.53 747.942,1218.25 748.528,1219.58 749.115,1219.31 749.701,1218.07 750.288,1218 750.874,1217.93 751.46,1215.18 752.047,1214.17 752.633,1214.36 753.22,1214.65 753.806,1214.94 754.392,1215.2 754.979,1216.56 755.565,1216.65 756.152,1218.14 756.738,1218.18 757.324,1215.26 757.911,1216.78 758.497,1214.19 759.084,1214.29 759.67,1214.66 760.257,1213.49 760.843,1212.4 761.429,1213.82 762.016,1215.31 762.602,1212.6 763.189,1215.6 763.775,1216.99 764.361,1215.78 764.948,1216.3 765.534,1216.47 766.121,1216.67 766.707,1220.6 767.293,1221.75 767.88,1220.34 768.466,1224.1 769.053,1223.66 769.639,1223.44 770.226,1219.37 770.812,1219.17 771.398,1217.76 771.985,1219.23 772.571,1218.9 773.158,1221.64 773.744,1217.38 774.33,1220.33 774.917,1221.45 775.503,1219.83 776.09,1220.86 776.676,1220.47 777.262,1221.61 777.849,1219.83 778.435,1218.26 779.022,1219.46 779.608,1220.64 780.195,1221.61 780.781,1222.7 781.367,1224.94 781.954,1224.6 782.54,1224.07 783.127,1220.03 783.713,1222.55 784.299,1223.68 784.886,1220.65 785.472,1219.14 786.059,1217.52 786.645,1217.32 787.232,1215.97 787.818,1215.82 788.404,1213.38 788.991,1212.28 789.577,1213.89 790.164,1216.7 790.75,1216.47 791.336,1217.81 791.923,1220.41 792.509,1217.44 793.096,1217.55 793.682,1217.66 794.268,1216.18 794.855,1214.77 795.441,1214.89 796.028,1216.32 796.614,1217.47 797.201,1216.18 797.787,1216.13 798.373,1214.97 798.96,1214.01 799.546,1215.52 800.133,1215.75 800.719,1213.09 801.305,1214.64 801.892,1213.17 802.478,1213.3 803.065,1213.54 803.651,1212.41 804.237,1215.68 804.824,1213.13 805.41,1213.3 805.997,1213.62 806.583,1213.95 807.17,1212.93 807.756,1211.73 808.342,1213.64 808.929,1216.32 809.515,1216.19 810.102,1217.4 810.688,1217.52 811.274,1217.31 811.861,1215.86 812.447,1213.61 813.034,1213.68 813.62,1216.68 814.206,1216.64 814.793,1219.21 815.379,1221.91 815.966,1220.31 816.552,1221.76 817.139,1225.33 817.725,1223.55 818.311,1223.21 818.898,1221.24 819.484,1220.72 820.071,1219.17 820.657,1219.17 821.243,1219.34 821.83,1218.01 822.416,1215.35 823.003,1218.09 823.589,1219.38 824.175,1216.73 824.762,1216.59 825.348,1216.5 825.935,1214.05 826.521,1214.3 827.108,1214.38 827.694,1214.5 828.28,1213.18 828.867,1217.22 829.453,1217.32 830.04,1219.99 830.626,1218.45 831.212,1220.92 831.799,1220.63 832.385,1221.53 832.972,1219.92 833.558,1223.76 834.145,1219.6 834.731,1220.51 835.317,1217.64 835.904,1217.86 836.49,1216.81 837.077,1220.94 837.663,1223.43 838.249,1220.44 838.836,1218.99 839.422,1217.59 840.009,1217.35 840.595,1214.18 841.181,1212.64 841.768,1211.46 842.354,1211.71 842.941,1214.38 843.527,1214.2 844.114,1215.35 844.7,1215.33 845.286,1212.88 845.873,1211.68 846.459,1213.46 847.046,1213.68 847.632,1212.59 848.218,1214.31 848.805,1217.02 849.391,1222.06 849.978,1221.75 850.564,1220.07 851.15,1221.3 851.737,1224.65 852.323,1224.43 852.91,1223.85 853.496,1224.63 854.083,1225.41 854.669,1228.9 855.255,1233.5 855.842,1228.56 856.428,1225.06 857.015,1221.79 857.601,1220.05 858.187,1218.4 858.774,1218.12 859.36,1216.49 859.947,1216.34 860.533,1217.56 861.119,1216.16 861.706,1214.73 862.292,1206.75 862.879,1207.37 863.465,1209.14 864.052,1210.48 864.638,1210.67 865.224,1209.47 865.811,1208.17 866.397,1209.82 866.984,1210.12 867.57,1210.27 868.156,1210.53 868.743,1213.38 869.329,1212.22 869.916,1208.65 870.502,1208.92 871.089,1210.75 871.675,1211.33 872.261,1211.76 872.848,1213.07 873.434,1214.75 874.021,1214.76 874.607,1213.71 875.193,1213.75 875.78,1212.47 876.366,1212.64 876.953,1211.4 877.539,1211.83 878.125,1212.18 878.712,1212.55 879.298,1211.38 879.885,1210.05 880.471,1211.64 881.058,1211.88 881.644,1210.62 882.23,1209.79 882.817,1208.55 883.403,1210.45 883.99,1210.63 884.576,1214.06 885.162,1218.2 885.749,1214.09 886.335,1215.56 886.922,1215.58 887.508,1215.61 888.094,1214.38 888.681,1214.22 889.267,1211.57 889.854,1214.36 890.44,1210.43 891.027,1209.6 891.613,1211.36 892.199,1214.34 892.786,1211.58 893.372,1213.21 893.959,1213.56 894.545,1216.12 895.131,1220.08 895.718,1220.92 896.304,1219.56 896.891,1220.65 897.477,1219.27 898.063,1221.66 898.65,1221.24 899.236,1224.83 899.823,1225.71 900.409,1225.14 900.996,1224.6 901.582,1227.83 902.168,1227.11 902.755,1229.09 903.341,1228.43 903.928,1226.87 904.514,1226.49 905.1,1225.83 905.687,1225.38 906.273,1227.53 906.86,1225.59 907.446,1223.65 908.032,1223.41 908.619,1220.27 909.205,1218.94 909.792,1218.76 910.378,1220.94 910.965,1219.32 911.551,1218.85 912.137,1219.72 912.724,1223.56 913.31,1224.51 913.897,1225.51 914.483,1222.28 915.069,1223.01 915.656,1219.77 916.242,1220.81 916.829,1216.45 917.415,1215.13 918.002,1213.97 918.588,1213.88 919.174,1212.49 919.761,1215.14 920.347,1211.13 920.934,1209.8 921.52,1211.28 922.106,1211.32 922.693,1215.43 923.279,1215.67 923.866,1215.52 924.452,1215.53 925.038,1216.8 925.625,1213.99 926.211,1211.5 926.798,1211.68 927.384,1214.45 927.971,1214.59 928.557,1216.03 929.143,1217.34 929.73,1218.44 930.316,1218.08 930.903,1219.29 931.489,1220.75 932.075,1223.26 932.662,1222.86 933.248,1222.25 933.835,1221.85 934.421,1222.77 935.007,1219.69 935.594,1218.08 936.18,1218.91 936.767,1218.75 937.353,1218.43 937.94,1216.92 938.526,1216.86 939.112,1215.35 939.699,1215.16 940.285,1215.19 940.872,1215.29 941.458,1212.62 942.044,1212.38 942.631,1212.32 943.217,1211.09 943.804,1211.01 944.39,1211.32 944.976,1208.73 945.563,1210.29 946.149,1207.89 946.736,1205.54 947.322,1211.57 947.909,1211.94 948.495,1213.48 949.081,1213.5 949.668,1215.01 950.254,1213.83 950.841,1212.52 951.427,1211.17 952.013,1211.52 952.6,1213.06 953.186,1215.83 953.773,1215.99 954.359,1215.9 954.945,1213.02 955.532,1210.65 956.118,1209.61 956.705,1210.12 957.291,1208.9 957.878,1209.15 958.464,1210.86 959.05,1209.93 959.637,1212.88 960.223,1215.75 960.81,1217.08 961.396,1214.41 961.982,1214.38 962.569,1214.36 963.155,1214.23 963.742,1215.41 964.328,1215.16 964.915,1216.49 965.501,1218.98 966.087,1217.17 966.674,1217.04 967.26,1216.99 967.847,1216.99 968.433,1218.22 969.019,1218.08 969.606,1216.6 970.192,1220.92 970.779,1219.26 971.365,1217.71 971.951,1220.24 972.538,1222.88 973.124,1222.52 973.711,1222.01 974.297,1222.62 974.884,1219.86 975.47,1217.1 976.056,1218.11 976.643,1219.57 977.229,1219.46 977.816,1218.04 978.402,1220.48 978.988,1220.18 979.575,1220.87 980.161,1217.7 980.748,1216.19 981.334,1216 981.92,1217.1 982.507,1218.37 983.093,1216.67 983.68,1212.53 984.266,1214.12 984.853,1214.52 985.439,1217.25 986.025,1218.59 986.612,1216.02 987.198,1216.05 987.785,1216.39 988.371,1214.86 988.957,1212.07 989.544,1210.95 990.13,1211.1 990.717,1211.66 991.303,1211.75 991.889,1213.11 992.476,1213.39 993.062,1211.2 993.649,1209.87 994.235,1210.2 994.822,1207.73 995.408,1208.14 995.994,1208.49 996.581,1210.19 997.167,1207.79 997.754,1206.75 998.34,1208.41 998.926,1208.98 999.513,1209.36 1000.1,1205.82 1000.69,1206.24 1001.27,1204.33 1001.86,1204.96 1002.44,1205.27 1003.03,1204.3 1003.62,1206.07 1004.2,1206.68 1004.79,1207.21 1005.38,1205.15 1005.96,1204.47 1006.55,1207.57 1007.14,1207.86 1007.72,1206.89 1008.31,1207.47 1008.9,1207.87 1009.48,1208.46 1010.07,1209.98 1010.65,1210.24 1011.24,1211.86 1011.83,1210.83 1012.41,1211.26 1013,1212.81 1013.59,1211.81 1014.17,1210.35 1014.76,1210.26 1015.35,1209.35 1015.93,1209.73 1016.52,1211.76 1017.11,1206.79 1017.69,1208.7 1018.28,1210.49 1018.86,1210.83 1019.45,1212.05 1020.04,1210.93 1020.62,1208.6 1021.21,1207.67 1021.8,1206.61 1022.38,1204.28 1022.97,1206.08 1023.56,1207.91 1024.14,1207.27 1024.73,1208.99 1025.32,1208.79 1025.9,1209.11 1026.49,1206.91 1027.07,1211.23 1027.66,1210.1 1028.25,1208.84 1028.83,1209.22 1029.42,1208.19 1030.01,1209.93 1030.59,1208.59 1031.18,1208.97 1031.77,1209.2 1032.35,1210.76 1032.94,1212.41 1033.52,1212.82 1034.11,1212.8 1034.7,1214.28 1035.28,1213.07 1035.87,1214.37 1036.46,1215.56 1037.04,1215.2 1037.63,1216.53 1038.22,1217.81 1038.8,1218.72 1039.39,1217.41 1039.98,1217.31 1040.56,1217.28 1041.15,1215.67 1041.73,1218.32 1042.32,1220.52 1042.91,1216.35 1043.49,1216.48 1044.08,1213.7 1044.67,1213.3 1045.25,1211.92 1045.84,1212.33 1046.43,1212.5 1047.01,1210.99 1047.6,1212.47 1048.19,1214.04 1048.77,1216.64 1049.36,1215.36 1049.94,1214.08 1050.53,1215.8 1051.12,1217 1051.7,1216.99 1052.29,1218.35 1052.88,1221.84 1053.46,1221.57 1054.05,1222.43 1054.64,1219.54 1055.22,1220.38 1055.81,1221.14 1056.39,1223.27 1056.98,1223.11 1057.57,1222.65 1058.15,1222.2 1058.74,1220.59 1059.33,1224.3 1059.91,1223.71 1060.5,1224.41 1061.09,1223.68 1061.67,1223.22 1062.26,1222.75 1062.85,1217.98 1063.43,1217.62 1064.02,1215.86 1064.6,1215.5 1065.19,1217.08 1065.78,1214.07 1066.36,1212.77 1066.95,1214.25 1067.54,1214.12 1068.12,1217.96 1068.71,1216.42 1069.3,1217.78 1069.88,1218.67 1070.47,1217.16 1071.06,1214.18 1071.64,1215.41 1072.23,1215.19 1072.81,1217.65 1073.4,1219.02 1073.99,1218.78 1074.57,1218.44 1075.16,1220.7 1075.75,1220.37 1076.33,1222.78 1076.92,1221.13 1077.51,1219.61 1078.09,1216.73 1078.68,1216.7 1079.26,1214.82 1079.85,1214.77 1080.44,1212 1081.02,1210.47 1081.61,1209.14 1082.2,1206.6 1082.78,1208.57 1083.37,1210.21 1083.96,1210.54 1084.54,1210.63 1085.13,1209.4 1085.72,1210.69 1086.3,1212.01 1086.89,1212.31 1087.47,1213.88 1088.06,1215.05 1088.65,1214.82 1089.23,1213.37 1089.82,1210.72 1090.41,1209.39 1090.99,1209.87 1091.58,1210 1092.17,1211.55 1092.75,1216.86 1093.34,1218.14 1093.93,1216.74 1094.51,1213.87 1095.1,1215.13 1095.68,1216.34 1096.27,1216.53 1096.86,1216.59 1097.44,1217.77 1098.03,1216.38 1098.62,1213.6 1099.2,1213.52 1099.79,1213.59 1100.38,1212.27 1100.96,1212.52 1101.55,1214.23 1102.14,1215.53 1102.72,1216.72 1103.31,1216.4 1103.89,1214.94 1104.48,1214.62 1105.07,1214.39 1105.65,1214.26 1106.24,1216.83 1106.83,1218 1107.41,1217.73 1108,1218.64 1108.59,1218.24 1109.17,1217.75 1109.76,1218.89 1110.34,1218.74 1110.93,1219.73 1111.52,1219.42 1112.1,1216.34 1112.69,1216.15 1113.28,1218.82 1113.86,1218.7 1114.45,1218.39 1115.04,1218.1 1115.62,1215.4 1116.21,1216.79 1116.8,1216.36 1117.38,1216.07 1117.97,1217.4 1118.55,1220.15 1119.14,1218.6 1119.73,1216.92 1120.31,1218.25 1120.9,1218.01 1121.49,1218.07 1122.07,1217.72 1122.66,1217.72 1123.25,1217.4 1123.83,1217.17 1124.42,1217.13 1125.01,1218.71 1125.59,1219.96 1126.18,1221.27 1126.76,1223.6 1127.35,1221.8 1127.94,1222.47 1128.52,1223.38 1129.11,1222.8 1129.7,1220.02 1130.28,1215.66 1130.87,1215.49 1131.46,1214.08 1132.04,1213.75 1132.63,1213.77 1133.21,1213.9 1133.8,1214.3 1134.39,1215.44 1134.97,1213.77 1135.56,1213.73 1136.15,1212.63 1136.73,1214.15 1137.32,1214.12 1137.91,1212.82 1138.49,1212.73 1139.08,1212.93 1139.67,1212.97 1140.25,1215.68 1140.84,1212.85 1141.42,1211.29 1142.01,1212.61 1142.6,1208.57 1143.18,1207.55 1143.77,1206.82 1144.36,1210.73 1144.94,1213.36 1145.53,1212.2 1146.12,1212.2 1146.7,1210.8 1147.29,1211.03 1147.88,1211.03 1148.46,1213.62 1149.05,1216.32 1149.63,1214.73 1150.22,1216.11 1150.81,1214.72 1151.39,1216.13 1151.98,1214.9 1152.57,1214.91 1153.15,1216.2 1153.74,1210.87 1154.33,1212.55 1154.91,1212.51 1155.5,1216.39 1156.09,1213.55 1156.67,1216.25 1157.26,1217.27 1157.84,1216.88 1158.43,1216.82 1159.02,1217.97 1159.6,1213.99 1160.19,1209.83 1160.78,1208.68 1161.36,1208.89 1161.95,1210.6 1162.54,1214.63 1163.12,1213.28 1163.71,1214.77 1164.29,1220.09 1164.88,1217.24 1165.47,1218.56 1166.05,1216.98 1166.64,1216.89 1167.23,1216.39 1167.81,1216.31 1168.4,1216.25 1168.99,1217.23 1169.57,1215.87 1170.16,1218.62 1170.75,1216.95 1171.33,1218.31 1171.92,1221.77 1172.5,1222.74 1173.09,1225.06 1173.68,1224.55 1174.26,1222.72 1174.85,1221.1 1175.44,1221.97 1176.02,1221.53 1176.61,1221.47 1177.2,1222.64 1177.78,1223.32 1178.37,1221.61 1178.96,1221.06 1179.54,1217.77 1180.13,1216.08 1180.71,1213.02 1181.3,1211.74 1181.89,1211.73 1182.47,1212.19 1183.06,1212.4 1183.65,1211.12 1184.23,1212.3 1184.82,1212.59 1185.41,1212.54 1185.99,1212.51 1186.58,1212.78 1187.16,1214.35 1187.75,1210.33 1188.34,1209.25 1188.92,1208.35 1189.51,1208.82 1190.1,1207.61 1190.68,1206.54 1191.27,1209.4 1191.86,1210.88 1192.44,1210.67 1193.03,1211.95 1193.62,1212.13 1194.2,1214.63 1194.79,1213.32 1195.37,1212.16 1195.96,1209.67 1196.55,1211.55 1197.13,1207.6 1197.72,1209.29 1198.31,1208.4 1198.89,1208.79 1199.48,1210.68 1200.07,1207.92 1200.65,1209.96 1201.24,1210.28 1201.83,1209.22 1202.41,1212.02 1203,1210.71 1203.58,1210.81 1204.17,1209.66 1204.76,1211 1205.34,1209.74 1205.93,1209.68 1206.52,1208.91 1207.1,1211.88 1207.69,1212.07 1208.28,1213.66 1208.86,1215.06 1209.45,1216.48 1210.03,1216.71 1210.62,1218.26 1211.21,1216.88 1211.79,1216.6 1212.38,1216.5 1212.97,1216.33 1213.55,1215.24 1214.14,1212.44 1214.73,1210.03 1215.31,1210.18 1215.9,1209.22 1216.49,1208.27 1217.07,1207.21 1217.66,1205.16 1218.24,1206 1218.83,1207.65 1219.42,1206.33 1220,1204.23 1220.59,1208.65 1221.18,1207.73 1221.76,1212.3 1222.35,1212.41 1222.94,1211.05 1223.52,1208.81 1224.11,1210.68 1224.7,1209.48 1225.28,1209.69 1225.87,1211.25 1226.45,1209.95 1227.04,1210.21 1227.63,1209.19 1228.21,1209.7 1228.8,1208.6 1229.39,1207.75 1229.97,1209.2 1230.56,1209.36 1231.15,1208.31 1231.73,1208.58 1232.32,1207.67 1232.91,1206.95 1233.49,1207.36 1234.08,1208.84 1234.66,1209.17 1235.25,1209.36 1235.84,1211.06 1236.42,1208.49 1237.01,1209.02 1237.6,1210.71 1238.18,1213.52 1238.77,1212.01 1239.36,1213.48 1239.94,1214.58 1240.53,1216.25 1241.11,1217.6 1241.7,1218.69 1242.29,1218.2 1242.87,1218.31 1243.46,1219.52 1244.05,1219.2 1244.63,1217.3 1245.22,1213.12 1245.81,1213.36 1246.39,1213.74 1246.98,1209.99 1247.57,1210.29 1248.15,1211.87 1248.74,1213.4 1249.32,1212.24 1249.91,1212.36 1250.5,1214.85 1251.08,1218.87 1251.67,1218.39 1252.26,1219.37 1252.84,1221.71 1253.43,1221.25 1254.02,1218.35 1254.6,1212.92 1255.19,1211.71 1255.78,1215.65 1256.36,1216.98 1256.95,1215.55 1257.53,1215.5 1258.12,1216.87 1258.71,1217.95 1259.29,1218.8 1259.88,1218.63 1260.47,1218.66 1261.05,1218.4 1261.64,1218.35 1262.23,1216.75 1262.81,1217.86 1263.4,1220.47 1263.98,1220.13 1264.57,1220.94 1265.16,1216.71 1265.74,1217.67 1266.33,1216.17 1266.92,1217.2 1267.5,1217.31 1268.09,1219.82 1268.68,1221.02 1269.26,1220.38 1269.85,1218.64 1270.44,1219.77 1271.02,1220.76 1271.61,1220.3 1272.19,1217.19 1272.78,1217.13 1273.37,1219.74 1273.95,1219.64 1274.54,1220.79 1275.13,1221.91 1275.71,1221.68 1276.3,1219.85 1276.89,1219.57 1277.47,1219.19 1278.06,1221.88 1278.65,1221.36 1279.23,1219.69 1279.82,1219.27 1280.4,1219.03 1280.99,1217.4 1281.58,1215.93 1282.16,1219.86 1282.75,1216.89 1283.34,1213.91 1283.92,1213.67 1284.51,1212.62 1285.1,1213.9 1285.68,1213.9 1286.27,1212.83 1286.86,1214.14 1287.44,1211.46 1288.03,1211.55 1288.61,1214.25 1289.2,1212.63 1289.79,1216.83 1290.37,1213.75 1290.96,1212.35 1291.55,1211.19 1292.13,1208.57 1292.72,1208.79 1293.31,1207.81 1293.89,1208.12 1294.48,1209.79 1295.06,1207.25 1295.65,1202.57 1296.24,1207.17 1296.82,1207.71 1297.41,1208.35 1298,1206.11 1298.58,1205.14 1299.17,1209.56 1299.76,1210.89 1300.34,1211.21 1300.93,1211.2 1301.52,1212.95 1302.1,1209.14 1302.69,1206.78 1303.27,1209.61 1303.86,1209.87 1304.45,1211.39 1305.03,1209.83 1305.62,1207.2 1306.21,1206.14 1306.79,1205.08 1307.38,1206.84 1307.97,1205.93 1308.55,1206.17 1309.14,1207.85 1309.73,1205.9 1310.31,1206.75 1310.9,1208.42 1311.48,1208.72 1312.07,1207.74 1312.66,1209.27 1313.24,1209.77 1313.83,1211.06 1314.42,1212.29 1315,1215.3 1315.59,1215.22 1316.18,1215.25 1316.76,1216.67 1317.35,1216.58 1317.93,1217.71 1318.52,1217.47 1319.11,1216.04 1319.69,1214.76 1320.28,1214.62 1320.87,1218.71 1321.45,1217.35 1322.04,1215.88 1322.63,1216.94 1323.21,1215.47 1323.8,1216.56 1324.39,1215.57 1324.97,1215.51 1325.56,1215.52 1326.14,1214.33 1326.73,1214.08 1327.32,1214.28 1327.9,1211.91 1328.49,1210.56 1329.08,1210.7 1329.66,1210.92 1330.25,1211.36 1330.84,1212.72 1331.42,1209.99 1332.01,1207.97 1332.6,1208.04 1333.18,1209.48 1333.77,1211.21 1334.35,1211.48 1334.94,1212.97 1335.53,1213.03 1336.11,1213.12 1336.7,1211.96 1337.29,1214.81 1337.87,1213.89 1338.46,1211.22 1339.05,1211.32 1339.63,1210.04 1340.22,1208.89 1340.8,1210.51 1341.39,1210.72 1341.98,1210.91 1342.56,1212.34 1343.15,1213.59 1343.74,1215.19 1344.32,1218.03 1344.91,1217.75 1345.5,1217.12 1346.08,1215.66 1346.67,1214.24 1347.26,1218.02 1347.84,1218.22 1348.43,1219.25 1349.01,1220.16 1349.6,1221.34 1350.19,1218.09 1350.77,1217.84 1351.36,1220.23 1351.95,1219.89 1352.53,1219.33 1353.12,1220.08 1353.71,1222.52 1354.29,1220.73 1354.88,1218.94 1355.47,1219.86 1356.05,1220.76 1356.64,1221.94 1357.22,1220.29 1357.81,1219.75 1358.4,1220.97 1358.98,1221.67 1359.57,1221.1 1360.16,1219.32 1360.74,1220.2 1361.33,1219.74 1361.92,1220.7 1362.5,1221.52 1363.09,1218.36 1363.68,1219.49 1364.26,1220.55 1364.85,1217.36 1365.43,1211.76 1366.02,1214.4 1366.61,1218.55 1367.19,1216.74 1367.78,1218.95 1368.37,1217.37 1368.95,1221.03 1369.54,1222 1370.13,1221.66 1370.71,1218.55 1371.3,1221.05 1371.88,1221.84 1372.47,1225.29 1373.06,1224.55 1373.64,1225.57 1374.23,1225.2 1374.82,1227.11 1375.4,1221.25 1375.99,1220.94 1376.58,1222.99 1377.16,1220.93 1377.75,1220.68 1378.34,1217.48 1378.92,1217.2 1379.51,1214.24 1380.09,1214.04 1380.68,1213.77 1381.27,1214.23 1381.85,1216.89 1382.44,1216.83 1383.03,1215.49 1383.61,1214.21 1384.2,1214.19 1384.79,1214.4 1385.37,1214.48 1385.96,1217.26 1386.55,1214.56 1387.13,1214.6 1387.72,1215.97 1388.3,1217.4 1388.89,1219.93 1389.48,1220.88 1390.06,1220.8 1390.65,1219.55 1391.24,1218.3 1391.82,1216.73 1392.41,1215.2 1393,1214.92 1393.58,1214.74 1394.17,1207.88 1394.75,1205.34 1395.34,1205.64 1395.93,1206.2 1396.51,1206.52 1397.1,1207.04 1397.69,1205.7 1398.27,1206.33 1398.86,1208.08 1399.45,1208.45 1400.03,1211.41 1400.62,1209.96 1401.21,1208.74 1401.79,1210.15 1402.38,1210.41 1402.96,1210.68 1403.55,1210.99 1404.14,1209.61 1404.72,1211.34 1405.31,1213.87 1405.9,1209.68 1406.48,1208.46 1407.07,1208.95 1407.66,1209.04 1408.24,1207.86 1408.83,1208.26 1409.42,1212.74 1410,1211.64 1410.59,1213.21 1411.17,1214.71 1411.76,1214.71 1412.35,1215.69 1412.93,1216.69 1413.52,1216.4 1414.11,1214.94 1414.69,1216.22 1415.28,1214.95 1415.87,1217.18 1416.45,1215.85 1417.04,1214.72 1417.63,1215.8 1418.21,1214.3 1418.8,1214.08 1419.38,1214.12 1419.97,1214.25 1420.56,1214.06 1421.14,1215.61 1421.73,1216.84 1422.32,1215.5 1422.9,1217.85 1423.49,1216.11 1424.08,1213.24 1424.66,1214.61 1425.25,1217.13 1425.83,1216.83 1426.42,1218.07 1427.01,1216.57 1427.59,1215 1428.18,1213.59 1428.77,1214.68 1429.35,1211.94 1429.94,1215.01 1430.53,1213.71 1431.11,1213.65 1431.7,1213.74 1432.29,1214.93 1432.87,1213.73 1433.46,1211.16 1434.04,1211.34 1434.63,1209.92 1435.22,1210.03 1435.8,1208.97 1436.39,1209.36 1436.98,1210.83 1437.56,1209.41 1438.15,1209.69 1438.74,1208.75 1439.32,1207.65 1439.91,1206.76 1440.5,1203.16 1441.08,1204.88 1441.67,1206.43 1442.25,1205.53 1442.84,1204.79 1443.43,1202.75 1444.01,1202.03 1444.6,1201.25 1445.19,1201.78 1445.77,1203.98 1446.36,1203.33 1446.95,1206.57 1447.53,1208.7 1448.12,1209.12 1448.7,1210.57 1449.29,1213.47 1449.88,1213.99 1450.46,1214.13 1451.05,1215.27 1451.64,1213.91 1452.22,1217.7 1452.81,1222.79 1453.4,1223.75 1453.98,1224.69 1454.57,1217.69 1455.16,1214.97 1455.74,1217.65 1456.33,1220.37 1456.91,1220.01 1457.5,1221.08 1458.09,1220.88 1458.67,1221.83 1459.26,1223.16 1459.85,1222.67 1460.43,1222.2 1461.02,1220.78 1461.61,1217.9 1462.19,1216.22 1462.78,1215.96 1463.37,1217.45 1463.95,1218.65 1464.54,1217.02 1465.12,1215.63 1465.71,1220.7 1466.3,1218.86 1466.88,1220.13 1467.47,1219.32 1468.06,1217.22 1468.64,1219.94 1469.23,1219.47 1469.82,1217.71 1470.4,1217.73 1470.99,1216.11 1471.57,1214.69 1472.16,1216.08 1472.75,1214.52 1473.33,1214.59 1473.92,1213.18 1474.51,1214.4 1475.09,1214.37 1475.68,1216.9 1476.27,1216.56 1476.85,1215 1477.44,1216.32 1478.03,1216.29 1478.61,1216.35 1479.2,1214.87 1479.78,1213.33 1480.37,1213.11 1480.96,1210.55 1481.54,1212.26 1482.13,1213.35 1482.72,1212.31 1483.3,1212.36 1483.89,1212.36 1484.48,1213.52 1485.06,1213.64 1485.65,1211.03 1486.24,1215.09 1486.82,1215.03 1487.41,1214.83 1487.99,1214.89 1488.58,1216.25 1489.17,1216.26 1489.75,1216.29 1490.34,1215.95 1490.93,1220.09 1491.51,1218.55 1492.1,1216.65 1492.69,1213.72 1493.27,1212.37 1493.86,1208.72 1494.45,1210.37 1495.03,1207.92 1495.62,1210.66 1496.2,1209.27 1496.79,1212.22 1497.38,1216.61 1497.96,1219.1 1498.55,1217.54 1499.14,1215.9 1499.72,1211.72 1500.31,1210.56 1500.9,1212.07 1501.48,1212.39 1502.07,1212.63 1502.65,1212.59 1503.24,1213.81 1503.83,1213.79 1504.41,1213.8 1505,1211.21 1505.59,1212.73 1506.17,1211.58 1506.76,1209 1507.35,1206.71 1507.93,1205.86 1508.52,1207.6 1509.11,1206.55 1509.69,1206.72 1510.28,1209.7 1510.86,1209.55 1511.45,1209.67 1512.04,1212.47 1512.62,1213.89 1513.21,1215.21 1513.8,1215.28 1514.38,1215.44 1514.97,1216.63 1515.56,1216.63 1516.14,1217.55 1516.73,1218.52 1517.32,1215.81 1517.9,1215.52 1518.49,1212.81 1519.07,1214.24 1519.66,1211.54 1520.25,1214.54 1520.83,1213.37 1521.42,1213.37 1522.01,1213.62 1522.59,1214.91 1523.18,1211.1 1523.77,1212.75 1524.35,1211.48 1524.94,1214.29 1525.52,1215.76 1526.11,1218.13 1526.7,1219.11 1527.28,1217.72 1527.87,1220.08 1528.46,1221.04 1529.04,1219.36 1529.63,1218.84 1530.22,1218.57 1530.8,1217.9 1531.39,1218.98 1531.98,1220.02 1532.56,1218.41 1533.15,1216.98 1533.73,1216.78 1534.32,1217.89 1534.91,1217.6 1535.49,1217.43 1536.08,1217.11 1536.67,1214.2 1537.25,1212.98 1537.84,1211.69 1538.43,1211.97 1539.01,1212.01 1539.6,1213.37 1540.19,1213.55 1540.77,1213.5 1541.36,1212.14 1541.94,1213.44 1542.53,1212.24 1543.12,1212.51 1543.7,1214.08 1544.29,1214.24 1544.88,1212.77 1545.46,1213.15 1546.05,1212.98 1546.64,1214.08 1547.22,1211.68 1547.81,1213.23 1548.4,1214.63 1548.98,1215.89 1549.57,1215.56 1550.15,1216.79 1550.74,1218.17 1551.33,1216.76 1551.91,1215.54 1552.5,1214.14 1553.09,1214.15 1553.67,1215.58 1554.26,1215.37 1554.85,1215.4 1555.43,1216.66 1556.02,1217.84 1556.6,1216.28 1557.19,1213.42 1557.78,1212.24 1558.36,1213.66 1558.95,1216.48 1559.54,1213.78 1560.12,1215.06 1560.71,1213.69 1561.3,1213.74 1561.88,1215.2 1562.47,1217.68 1563.06,1213.53 1563.64,1214.93 1564.23,1213.64 1564.81,1212.06 1565.4,1211.09 1565.99,1216.31 1566.57,1217.55 1567.16,1217.18 1567.75,1215.55 1568.33,1216.69 1568.92,1216.28 1569.51,1215.04 1570.09,1215 1570.68,1213.89 1571.27,1214 1571.85,1215.36 1572.44,1212.58 1573.02,1211.2 1573.61,1208.61 1574.2,1208.79 1574.78,1211.88 1575.37,1216.13 1575.96,1217.05 1576.54,1216.83 1577.13,1219.37 1577.72,1217.76 1578.3,1214.91 1578.89,1216.08 1579.47,1217.34 1580.06,1209.26 1580.65,1208.34 1581.23,1211.42 1581.82,1211.64 1582.41,1211.82 1582.99,1212.18 1583.58,1213.63 1584.17,1213.52 1584.75,1213.27 1585.34,1213.45 1585.93,1213.38 1586.51,1212.11 1587.1,1211.07 1587.68,1212.75 1588.27,1211.71 1588.86,1211.79 1589.44,1213.26 1590.03,1210.67 1590.62,1212.07 1591.2,1213.45 1591.79,1213.24 1592.38,1214.65 1592.96,1214.75 1593.55,1215.8 1594.14,1215.6 1594.72,1214.25 1595.31,1212.82 1595.89,1213.06 1596.48,1208.09 1597.07,1209.58 1597.65,1207.52 1598.24,1207.82 1598.83,1208.3 1599.41,1208.52 1600,1213.01 1600.59,1212.97 1601.17,1211.7 1601.76,1210.64 1602.34,1210.76 1602.93,1211.23 1603.52,1211.26 1604.1,1210.09 1604.69,1211.92 1605.28,1213.38 1605.86,1209.48 1606.45,1213.85 1607.04,1212.84 1607.62,1211.72 1608.21,1210.61 1608.8,1211.81 1609.38,1214.58 1609.97,1213.22 1610.55,1213.07 1611.14,1214.11 1611.73,1212.72 1612.31,1212.71 1612.9,1215.54 1613.49,1216.84 1614.07,1220.4 1614.66,1218.87 1615.25,1217.25 1615.83,1217.26 1616.42,1215.81 1617.01,1215.32 1617.59,1215.12 1618.18,1215.25 1618.76,1215.34 1619.35,1214.05 1619.94,1211.56 1620.52,1209.24 1621.11,1208.37 1621.7,1210.18 1622.28,1210.15 1622.87,1214.47 1623.46,1212.94 1624.04,1214.55 1624.63,1213.14 1625.22,1214.54 1625.8,1210.43 1626.39,1210.42 1626.97,1209.57 1627.56,1212.54 1628.15,1212.65 1628.73,1210.25 1629.32,1210.38 1629.91,1210.21 1630.49,1210.22 1631.08,1211.65 1631.67,1217.11 1632.25,1217.06 1632.84,1217.05 1633.42,1218.14 1634.01,1219.33 1634.6,1221.65 1635.18,1221.37 1635.77,1221.02 1636.36,1219.29 1636.94,1219.08 1637.53,1220.2 1638.12,1222.4 1638.7,1223.23 1639.29,1222.76 1639.88,1222.19 1640.46,1221.73 1641.05,1219.99 1641.63,1218.4 1642.22,1216.79 1642.81,1214.08 1643.39,1212.89 1643.98,1210.38 1644.57,1212 1645.15,1209.42 1645.74,1211.16 1646.33,1214.03 1646.91,1212.64 1647.5,1214.13 1648.09,1218.08 1648.67,1216.3 1649.26,1216.13 1649.84,1214.75 1650.43,1215.95 1651.02,1215.57 1651.6,1215.58 1652.19,1217.92 1652.78,1216.38 1653.36,1214.87 1653.95,1214.71 1654.54,1215.8 1655.12,1214.01 1655.71,1215.24 1656.29,1212.45 1656.88,1215.2 1657.47,1217.67 1658.05,1218.96 1658.64,1216.1 1659.23,1215.99 1659.81,1213.27 1660.4,1215.96 1660.99,1211.98 1661.57,1213.21 1662.16,1213.06 1662.75,1210.58 1663.33,1209.5 1663.92,1208.34 1664.5,1211.39 1665.09,1210.36 1665.68,1208.75 1666.26,1208.95 1666.85,1210.19 1667.44,1209.01 1668.02,1207.9 1668.61,1208.53 1669.2,1210.13 1669.78,1209.24 1670.37,1212.24 1670.96,1209.87 1671.54,1208.68 1672.13,1210.47 1672.71,1212.55 1673.3,1211.07 1673.89,1211.05 1674.47,1210.9 1675.06,1211.16 1675.65,1210.13 1676.23,1214.14 1676.82,1216.66 1677.41,1215.43 1677.99,1213.77 1678.58,1212.31 1679.17,1214.76 1679.75,1216.14 1680.34,1213.33 1680.92,1215.82 1681.51,1214.15 1682.1,1211.48 1682.68,1214.34 1683.27,1210.3 1683.86,1207.73 1684.44,1208.24 1685.03,1207.35 1685.62,1207.76 1686.2,1206.38 1686.79,1209.66 1687.37,1207.09 1687.96,1206.15 1688.55,1206.71 1689.13,1206.89 1689.72,1205.97 1690.31,1207.65 1690.89,1208.12 1691.48,1210.16 1692.07,1211.71 1692.65,1213.15 1693.24,1213.06 1693.83,1212.83 1694.41,1212.91 1695,1211.99 1695.58,1212.41 1696.17,1215.41 1696.76,1215.36 1697.34,1215.17 1697.93,1211.44 1698.52,1210.13 1699.1,1209.09 1699.69,1209.42 1700.28,1208.11 1700.86,1204.44 1701.45,1202.37 1702.04,1204.1 1702.62,1209.98 1703.21,1210.1 1703.79,1210.31 1704.38,1207.52 1704.97,1207.77 1705.55,1205.59 1706.14,1207.55 1706.73,1205.32 1707.31,1205.62 1707.9,1206.32 1708.49,1206.89 1709.07,1207.35 1709.66,1207.62 1710.24,1207.99 1710.83,1208.57 1711.42,1208.78 1712,1211.63 1712.59,1213.05 1713.18,1213.15 1713.76,1214.76 1714.35,1211.99 1714.94,1213.49 1715.52,1212.05 1716.11,1212.31 1716.7,1217.72 1717.28,1221.69 1717.87,1220 1718.45,1221.44 1719.04,1222.68 1719.63,1223.71 1720.21,1223.18 1720.8,1221.22 1721.39,1219.52 1721.97,1220.61 1722.56,1219 1723.15,1219.79 1723.73,1216.6 1724.32,1214.96 1724.91,1217.82 1725.49,1216.48 1726.08,1216.26 1726.66,1218.89 1727.25,1219.71 1727.84,1219.61 1728.42,1219.3 1729.01,1218.9 1729.6,1218.69 1730.18,1219.69 1730.77,1219.28 1731.36,1219.97 1731.94,1222.37 1732.53,1221.63 1733.11,1219.92 1733.7,1220.93 1734.29,1221.7 1734.87,1218.3 1735.46,1215.13 1736.05,1216.3 1736.63,1216.17 1737.22,1215.98 1737.81,1217.03 1738.39,1218.01 1738.98,1220.26 1739.57,1217.22 1740.15,1217.25 1740.74,1219.64 1741.32,1219.33 1741.91,1217.65 1742.5,1216.15 1743.08,1216.05 1743.67,1218.59 1744.26,1220.8 1744.84,1220.22 1745.43,1220.06 1746.02,1218.11 1746.6,1220.31 1747.19,1220.04 1747.78,1219.44 1748.36,1221.58 1748.95,1221.15 1749.53,1220.67 1750.12,1218.81 1750.71,1218.64 1751.29,1221.16 1751.88,1219.23 1752.47,1217.54 1753.05,1212.95 1753.64,1211.59 1754.23,1210.12 1754.81,1211.67 1755.4,1214.58 1755.99,1217.38 1756.57,1215.9 1757.16,1214.41 1757.74,1214.51 1758.33,1215.8 1758.92,1210.37 1759.5,1209.18 1760.09,1209.2 1760.68,1209.48 1761.26,1208.39 1761.85,1209.8 1762.44,1207.51 1763.02,1210.76 1763.61,1213.51 1764.19,1214.94 1764.78,1216.12 1765.37,1215.95 1765.95,1215.94 1766.54,1217.24 1767.13,1215.73 1767.71,1212.7 1768.3,1211.82 1768.89,1211.84 1769.47,1210.62 1770.06,1209.37 1770.65,1208.36 1771.23,1211.26 1771.82,1208.53 1772.4,1207.28 1772.99,1205.07 1773.58,1206.84 1774.16,1208.68 1774.75,1211.59 1775.34,1211.55 1775.92,1214.53 1776.51,1214.65 1777.1,1214.8 1777.68,1216.24 1778.27,1216.37 1778.86,1216.19 1779.44,1216.14 1780.03,1218.53 1780.61,1218.48 1781.2,1215.56 1781.79,1214.14 1782.37,1212.64 1782.96,1212.65 1783.55,1212.77 1784.13,1211.36 1784.72,1211.58 1785.31,1211.91 1785.89,1212.16 1786.48,1210.97 1787.06,1209.68 1787.65,1211.23 1788.24,1212.46 1788.82,1212.67 1789.41,1211.49 1790,1215.67 1790.58,1214.47 1791.17,1215.83 1791.76,1215.98 1792.34,1217.15 1792.93,1217.06 1793.52,1217.31 1794.1,1217.42 1794.69,1216.98 1795.27,1217.07 1795.86,1216.81 1796.45,1216.8 1797.03,1216.99 1797.62,1215.45 1798.21,1215.19 1798.79,1217.73 1799.38,1217.35 1799.97,1217.22 1800.55,1215.79 1801.14,1214.51 1801.73,1213.2 1802.31,1211.9 1802.9,1212.1 1803.48,1212.16 1804.07,1210.71 1804.66,1213.58 1805.24,1213.39 1805.83,1217.33 1806.42,1217.24 1807,1216.82 1807.59,1218.1 1808.18,1219 1808.76,1220.2 1809.35,1217.19 1809.94,1216.99 1810.52,1216.6 1811.11,1216.45 1811.69,1217.6 1812.28,1217.18 1812.87,1215.65 1813.45,1215.56 1814.04,1216.84 1814.63,1215.43 1815.21,1215.5 1815.8,1216.64 1816.39,1217.66 1816.97,1213.48 1817.56,1217.29 1818.14,1216.71 1818.73,1216.39 1819.32,1213.69 1819.9,1215.13 1820.49,1213.58 1821.08,1214.78 1821.66,1215.93 1822.25,1213 1822.84,1212.03 1823.42,1210.85 1824.01,1206.92 1824.6,1208.9 1825.18,1207.8 1825.77,1207.71 1826.35,1206.75 1826.94,1204.7 1827.53,1204.91 1828.11,1205.46 1828.7,1205.82 1829.29,1207.57 1829.87,1209.35 1830.46,1209.42 1831.05,1210.98 1831.63,1208.26 1832.22,1210.16 1832.81,1210.47 1833.39,1207.95 1833.98,1209.57 1834.56,1208.35 1835.15,1210.32 1835.74,1208.02 1836.32,1209.75 1836.91,1210.21 1837.5,1209.21 1838.08,1209.64 1838.67,1212.46 1839.26,1212.28 1839.84,1213.68 1840.43,1214.84 1841.01,1214.82 1841.6,1214.92 1842.19,1216.09 1842.77,1211.91 1843.36,1213.24 1843.95,1215.88 1844.53,1215.82 1845.12,1214.49 1845.71,1215.76 1846.29,1215.67 1846.88,1219.31 1847.47,1217.74 1848.05,1217.21 1848.64,1215.6 1849.22,1215.39 1849.81,1213.92 1850.4,1216.44 1850.98,1216.32 1851.57,1218.72 1852.16,1218.49 1852.74,1218.2 1853.33,1216.65 1853.92,1219.14 1854.5,1216.17 1855.09,1215.84 1855.68,1214.43 1856.26,1211.58 1856.85,1210.37 1857.43,1210.51 1858.02,1210.61 1858.61,1209.73 1859.19,1208.62 1859.78,1210.4 1860.37,1209.16 1860.95,1208.13 1861.54,1212.57 1862.13,1213.77 1862.71,1212.37 1863.3,1213.58 1863.88,1212.42 1864.47,1212.69 1865.06,1212.58 1865.64,1212.79 1866.23,1213.93 1866.82,1212.51 1867.4,1209.97 1867.99,1211.54 1868.58,1210.57 1869.16,1211.98 1869.75,1212.2 1870.34,1213.3 1870.92,1213.31 1871.51,1214.49 1872.09,1213.07 1872.68,1214.18 1873.27,1212.85 1873.85,1213.01 1874.44,1211.87 1875.03,1213.69 1875.61,1211.32 1876.2,1211.41 1876.79,1207.51 1877.37,1206.83 1877.96,1209.66 1878.55,1210.3 1879.13,1211.88 1879.72,1212.02 1880.3,1216.03 1880.89,1217.6 1881.48,1217.58 1882.06,1220.09 1882.65,1218.72 1883.24,1218.43 1883.82,1218.32 1884.41,1215.78 1885,1217.21 1885.58,1217.22 1886.17,1217.2 1886.76,1215.74 1887.34,1217.06 1887.93,1217.06 1888.51,1215.7 1889.1,1215.63 1889.69,1214.25 1890.27,1215.79 1890.86,1216.91 1891.45,1218.12 1892.03,1216.89 1892.62,1217.98 1893.21,1217.51 1893.79,1218.59 1894.38,1215.42 1894.96,1214.95 1895.55,1213.66 1896.14,1213.75 1896.72,1214.96 1897.31,1216.25 1897.9,1219.92 1898.48,1216.81 1899.07,1219.65 1899.66,1217.9 1900.24,1215.02 1900.83,1212.19 1901.42,1212.16 1902,1212.31 1902.59,1212.45 1903.17,1215.18 1903.76,1215.2 1904.35,1216.38 1904.93,1214.78 1905.52,1214.63 1906.11,1214.4 1906.69,1214.22 1907.28,1215.57 1907.87,1218.11 1908.45,1216.63 1909.04,1214.86 1909.63,1216.12 1910.21,1213.33 1910.8,1210.95 1911.38,1213.7 1911.97,1212.35 1912.56,1209.59 1913.14,1211.44 1913.73,1212.82 1914.32,1212.74 1914.9,1215.6 1915.49,1218.37 1916.08,1218.18 1916.66,1219.25 1917.25,1216.34 1917.83,1216.05 1918.42,1211.83 1919.01,1214.46 1919.59,1210.65 1920.18,1209.42 1920.77,1212.15 1921.35,1210.85 1921.94,1209.63 1922.53,1209.81 1923.11,1212.88 1923.7,1209.12 1924.29,1209.6 1924.87,1209.61 1925.46,1208.34 1926.04,1208.76 1926.63,1209.11 1927.22,1210.97 1927.8,1209.98 1928.39,1210.35 1928.98,1210.53 1929.56,1209.46 1930.15,1212.35 1930.74,1210.18 1931.32,1210.37 1931.91,1210.6 1932.5,1209.34 1933.08,1208.6 1933.67,1210.13 1934.25,1209.18 1934.84,1209.51 1935.43,1211.07 1936.01,1211.25 1936.6,1207.43 1937.19,1207.75 1937.77,1208.14 1938.36,1207.17 1938.95,1204.96 1939.53,1206.59 1940.12,1209.81 1940.71,1211.57 1941.29,1210.56 1941.88,1208.23 1942.46,1207.3 1943.05,1206.69 1943.64,1208.88 1944.22,1210.49 1944.81,1212.09 1945.4,1211.02 1945.98,1208.41 1946.57,1204.51 1947.16,1207.68 1947.74,1213.21 1948.33,1214.71 1948.91,1217.12 1949.5,1217.19 1950.09,1214.3 1950.67,1214.35 1951.26,1214.28 1951.85,1214.32 1952.43,1212.84 1953.02,1214.44 1953.61,1214.3 1954.19,1213.15 1954.78,1211.87 1955.37,1213.25 1955.95,1215.75 1956.54,1215.68 1957.12,1215.77 1957.71,1215.56 1958.3,1215.54 1958.88,1216.77 1959.47,1217.73 1960.06,1216.04 1960.64,1215.74 1961.23,1215.42 1961.82,1215.32 1962.4,1214.07 1962.99,1215.12 1963.58,1216.52 1964.16,1215.03 1964.75,1215.04 1965.33,1213.53 1965.92,1216.02 1966.51,1216.05 1967.09,1216.17 1967.68,1214.7 1968.27,1216.01 1968.85,1217.14 1969.44,1216.89 1970.03,1219.62 1970.61,1220.68 1971.2,1221.65 1971.78,1219.99 1972.37,1219.56 1972.96,1219.41 1973.54,1219.17 1974.13,1217.59 1974.72,1213.37 1975.3,1213.51 1975.89,1212.47 1976.48,1212.62 1977.06,1215.53 1977.65,1213.92 1978.24,1216.42 1978.82,1216.53 1979.41,1215.11 1979.99,1216.37 1980.58,1216.39 1981.17,1216.44 1981.75,1216.29 1982.34,1216.1 1982.93,1214.64 1983.51,1214.45 1984.1,1219.71 1984.69,1219.42 1985.27,1224.21 1985.86,1226.34 1986.45,1225.82 1987.03,1224.21 1987.62,1228.75 1988.2,1226.6 1988.79,1227.73 1989.38,1229.53 1989.96,1228.67 1990.55,1229.04 1991.14,1225.66 1991.72,1221.15 1992.31,1219.18 1992.9,1215.03 1993.48,1216.26 1994.07,1214.58 1994.65,1214.62 1995.24,1214.64 1995.83,1214.63 1996.41,1214.55 1997,1214.43 1997.59,1218.4 1998.17,1215.8 1998.76,1215.63 1999.35,1212.75 1999.93,1211.37 2000.52,1214.31 2001.11,1214.49 2001.69,1213.07 2002.28,1213.1 2002.86,1210.75 2003.45,1209.35 2004.04,1209.53 2004.62,1210.85 2005.21,1212.24 2005.8,1209.61 2006.38,1210.99 2006.97,1213.74 2007.56,1210.95 2008.14,1208.65 2008.73,1208.83 2009.32,1211.67 2009.9,1213.18 2010.49,1214.57 2011.07,1214.59 2011.66,1213.24 2012.25,1215.98 2012.83,1216.08 2013.42,1215.52 2014.01,1218.19 2014.59,1219.21 2015.18,1217.72 2015.77,1217.23 2016.35,1215.94 2016.94,1215.78 2017.53,1215.75 2018.11,1217.19 2018.7,1214.4 2019.28,1212.8 2019.87,1214.03 2020.46,1214.19 2021.04,1216.9 2021.63,1215.37 2022.22,1216.69 2022.8,1215.26 2023.39,1219.21 2023.98,1216.46 2024.56,1216.29 2025.15,1214.69 2025.73,1214.78 2026.32,1214.49 2026.91,1212.88 2027.49,1214.17 2028.08,1214.33 2028.67,1214.4 2029.25,1213.28 2029.84,1211.96 2030.43,1210.67 2031.01,1208.3 2031.6,1210.17 2032.19,1211.66 2032.77,1213.11 2033.36,1211.88 2033.94,1212.09 2034.53,1211.04 2035.12,1215.21 2035.7,1214.1 2036.29,1215.46 2036.88,1213.81 2037.46,1212.41 2038.05,1212.32 2038.64,1215.2 2039.22,1213.88 2039.81,1216.65 2040.4,1217.7 2040.98,1219.65 2041.57,1216.56 2042.15,1217.99 2042.74,1216.11 2043.33,1217.3 2043.91,1218.4 2044.5,1215.58 2045.09,1218.15 2045.67,1217.8 2046.26,1216.1 2046.85,1215.66 2047.43,1215.63 2048.02,1209.97 2048.6,1210.31 2049.19,1210.5 2049.78,1209.42 2050.36,1209.28 2050.95,1209.46 2051.54,1209.91 2052.12,1209.99 2052.71,1208.98 2053.3,1210.61 2053.88,1212.2 2054.47,1212.58 2055.06,1214.14 2055.64,1213.81 2056.23,1213.67 2056.81,1215.02 2057.4,1215.04 2057.99,1214.98 2058.57,1215.12 2059.16,1214.79 2059.75,1213.39 2060.33,1212.23 2060.92,1212.37 2061.51,1213.71 2062.09,1213.85 2062.68,1213.78 2063.27,1215.11 2063.85,1216.3 2064.44,1217.59 2065.02,1216.03 2065.61,1215.83 2066.2,1215.88 2066.78,1212.13 2067.37,1208.15 2067.96,1208.36 2068.54,1208.84 2069.13,1212.78 2069.72,1212.68 2070.3,1212.68 2070.89,1211.62 2071.48,1213.14 2072.06,1211.8 2072.65,1211.89 2073.23,1209.47 2073.82,1212.32 2074.41,1211.28 2074.99,1211.42 2075.58,1212.94 2076.17,1215.75 2076.75,1217.13 2077.34,1215.71 2077.93,1215.82 2078.51,1211.93 2079.1,1211.03 2079.68,1212.81 2080.27,1213.04 2080.86,1213.35 2081.44,1211.01 2082.03,1211.01 2082.62,1211.37 2083.2,1212.72 2083.79,1210.35 2084.38,1214.67 2084.96,1213.32 2085.55,1215 2086.14,1213.71 2086.72,1213.72 2087.31,1211.05 2087.89,1208.64 2088.48,1209.24 2089.07,1208.05 2089.65,1209.57 2090.24,1213.43 2090.83,1213.33 2091.41,1214.88 2092,1214.73 2092.59,1213.23 2093.17,1211.99 2093.76,1209.5 2094.35,1211.04 2094.93,1213.78 2095.52,1211.29 2096.1,1211.26 2096.69,1208.42 2097.28,1207.48 2097.86,1206.56 2098.45,1206.97 2099.04,1208.78 2099.62,1206.27 2100.21,1205.44 2100.8,1204.37 2101.38,1205.14 2101.97,1205.55 2102.55,1207.26 2103.14,1209.97 2103.73,1210.2 2104.31,1211.81 2104.9,1213.05 2105.49,1213.37 2106.07,1211.91 2106.66,1211.7 2107.25,1213.07 2107.83,1213.2 2108.42,1215.94 2109.01,1215.72 2109.59,1215.59 2110.18,1216.52 2110.76,1217.45 2111.35,1219.94 2111.94,1218.55 2112.52,1219.56 2113.11,1219.43 2113.7,1219.15 2114.28,1217.52 2114.87,1218.82 2115.46,1218.63 2116.04,1217.22 2116.63,1215.57 2117.22,1216.92 2117.8,1215.73 2118.39,1214.38 2118.97,1209.02 2119.56,1209.18 2120.15,1209.52 2120.73,1209.93 2121.32,1210.05 2121.91,1207.78 2122.49,1205.43 2123.08,1206.95 2123.67,1207.5 2124.25,1209.33 2124.84,1210.94 2125.42,1211.13 2126.01,1210.18 2126.6,1210.2 2127.18,1207.9 2127.77,1208.3 2128.36,1207.05 2128.94,1210.02 2129.53,1212.73 2130.12,1215.27 2130.7,1214.99 2131.29,1216.58 2131.88,1216.59 2132.46,1214.91 2133.05,1216.19 2133.63,1214.9 2134.22,1217.53 2134.81,1214.58 2135.39,1215.66 2135.98,1216.96 2136.57,1219.56 2137.15,1217.85 2137.74,1218.92 2138.33,1217.1 2138.91,1216.89 2139.5,1219.54 2140.09,1219.31 2140.67,1217.72 2141.26,1220.18 2141.84,1219.96 2142.43,1218.69 2143.02,1222.21 2143.6,1217.88 2144.19,1216.24 2144.78,1216.16 2145.36,1215.95 2145.95,1213.36 2146.54,1214.96 2147.12,1216.06 2147.71,1215.91 2148.3,1217.34 2148.88,1215.93 2149.47,1218.36 2150.05,1220.59 2150.64,1220.09 2151.23,1218.47 2151.81,1215.51 2152.4,1214.12 2152.99,1216.67 2153.57,1217.6 2154.16,1218.62 2154.75,1222.11 2155.33,1218.73 2155.92,1219.93 2156.5,1220.89 2157.09,1220.41 2157.68,1222.65 2158.26,1220.92 \"/>\n<path clip-path=\"url(#clip302)\" d=\"M986.025 1214.43 L986.612 1214.43 L987.198 1214.43 L987.785 1214.43 L988.371 1214.43 L988.957 1214.43 L989.544 1214.43 L990.13 1214.43 L990.717 1214.43 L991.303 1214.43 L991.889 1214.43 L992.476 1214.43 L993.062 1214.43 L993.649 1214.43 L994.235 1214.43 L994.822 1214.43 L995.408 1214.43 L995.994 1214.43 L996.581 1214.43 L997.167 1214.43 L997.754 1214.43 L998.34 1214.43 L998.926 1214.43 L999.513 1214.43 L1000.1 1214.43 L1000.69 1214.43 L1001.27 1214.43 L1001.86 1214.43 L1002.44 1214.43 L1003.03 1214.43 L1003.62 1214.43 L1004.2 1214.43 L1004.79 1214.43 L1005.38 1214.43 L1005.96 1214.43 L1006.55 1214.43 L1007.14 1214.43 L1007.72 1214.43 L1008.31 1214.43 L1008.9 1214.43 L1009.48 1214.43 L1010.07 1214.43 L1010.65 1214.43 L1011.24 1214.43 L1011.83 1214.43 L1012.41 1214.43 L1013 1214.43 L1013.59 1214.43 L1014.17 1214.43 L1014.76 1214.43 L1015.35 1214.43 L1015.93 1214.43 L1016.52 1214.43 L1017.11 1214.43 L1017.69 1214.43 L1018.28 1214.43 L1018.86 1214.43 L1019.45 1214.43 L1020.04 1214.43 L1020.62 1214.43 L1021.21 1214.43 L1021.8 1214.43 L1022.38 1214.43 L1022.97 1214.43 L1023.56 1214.43 L1024.14 1214.43 L1024.73 1214.43 L1025.32 1214.43 L1025.9 1214.43 L1026.49 1214.43 L1027.07 1214.43 L1027.66 1214.43 L1028.25 1214.43 L1028.83 1214.43 L1029.42 1214.43 L1030.01 1214.43 L1030.59 1214.43 L1031.18 1214.43 L1031.77 1214.43 L1032.35 1214.43 L1032.94 1214.43 L1033.52 1214.43 L1034.11 1214.43 L1034.7 1214.43 L1035.28 1214.43 L1035.87 1214.43 L1036.46 1214.43 L1037.04 1214.43 L1037.63 1214.43 L1038.22 1214.43 L1038.8 1214.43 L1039.39 1214.43 L1039.98 1214.43 L1040.56 1214.43 L1041.15 1214.43 L1041.73 1214.43 L1042.32 1214.43 L1042.91 1214.43 L1043.49 1214.43 L1044.08 1214.43 L1044.67 1214.43 L1045.25 1214.43 L1045.84 1214.43 L1046.43 1214.43 L1047.01 1214.43 L1047.6 1214.43 L1048.19 1214.43 L1048.77 1214.43 L1049.36 1214.43 L1049.94 1214.43 L1050.53 1214.43 L1051.12 1214.43 L1051.7 1214.43 L1052.29 1214.43 L1052.88 1214.43 L1053.46 1214.43 L1054.05 1214.43 L1054.64 1214.43 L1055.22 1214.43 L1055.81 1214.43 L1056.39 1214.43 L1056.98 1214.43 L1057.57 1214.43 L1058.15 1214.43 L1058.74 1214.43 L1059.33 1214.43 L1059.91 1214.43 L1060.5 1214.43 L1061.09 1214.43 L1061.67 1214.43 L1062.26 1214.43 L1062.85 1214.43 L1063.43 1214.43 L1064.02 1214.43 L1064.6 1214.43 L1065.19 1214.43 L1065.78 1214.43 L1066.36 1214.43 L1066.95 1214.43 L1067.54 1214.43 L1068.12 1214.43 L1068.71 1214.43 L1069.3 1214.43 L1069.88 1214.43 L1070.47 1214.43 L1071.06 1214.43 L1071.64 1214.43 L1072.23 1214.43 L1072.81 1214.43 L1073.4 1214.43 L1073.99 1214.43 L1074.57 1214.43 L1075.16 1214.43 L1075.75 1214.43 L1076.33 1214.43 L1076.92 1214.43 L1077.51 1214.43 L1078.09 1214.43 L1078.68 1214.43 L1079.26 1214.43 L1079.85 1214.43 L1080.44 1214.43 L1081.02 1214.43 L1081.61 1214.43 L1082.2 1214.43 L1082.78 1214.43 L1083.37 1214.43 L1083.96 1214.43 L1084.54 1214.43 L1085.13 1214.43 L1085.72 1214.43 L1086.3 1214.43 L1086.89 1214.43 L1087.47 1214.43 L1088.06 1214.43 L1088.65 1214.43 L1089.23 1214.43 L1089.82 1214.43 L1090.41 1214.43 L1090.99 1214.43 L1091.58 1214.43 L1092.17 1214.43 L1092.75 1214.43 L1093.34 1214.43 L1093.93 1214.43 L1094.51 1214.43 L1095.1 1214.43 L1095.68 1214.43 L1096.27 1214.43 L1096.86 1214.43 L1097.44 1214.43 L1098.03 1214.43 L1098.62 1214.43 L1099.2 1214.43 L1099.79 1214.43 L1100.38 1214.43 L1100.96 1214.43 L1101.55 1214.43 L1102.14 1214.43 L1102.72 1214.43 L1103.31 1214.43 L1103.89 1214.43 L1104.48 1214.43 L1105.07 1214.43 L1105.65 1214.43 L1106.24 1214.43 L1106.83 1214.43 L1107.41 1214.43 L1108 1214.43 L1108.59 1214.43 L1109.17 1214.43 L1109.76 1214.43 L1110.34 1214.43 L1110.93 1214.43 L1111.52 1214.43 L1112.1 1214.43 L1112.69 1214.43 L1113.28 1214.43 L1113.86 1214.43 L1114.45 1214.43 L1115.04 1214.43 L1115.62 1214.43 L1116.21 1214.43 L1116.8 1214.43 L1117.38 1214.43 L1117.97 1214.43 L1118.55 1214.43 L1119.14 1214.43 L1119.73 1214.43 L1120.31 1214.43 L1120.9 1214.43 L1121.49 1214.43 L1122.07 1214.43 L1122.66 1214.43 L1123.25 1214.43 L1123.83 1214.43 L1124.42 1214.43 L1125.01 1214.43 L1125.59 1214.43 L1126.18 1214.43 L1126.76 1214.43 L1127.35 1214.43 L1127.94 1214.43 L1128.52 1214.43 L1129.11 1214.43 L1129.7 1214.43 L1130.28 1214.43 L1130.87 1214.43 L1131.46 1214.43 L1132.04 1214.43 L1132.63 1214.43 L1133.21 1214.43 L1133.8 1214.43 L1134.39 1214.43 L1134.97 1214.43 L1135.56 1214.43 L1136.15 1214.43 L1136.73 1214.43 L1137.32 1214.43 L1137.91 1214.43 L1138.49 1214.43 L1139.08 1214.43 L1139.67 1214.43 L1140.25 1214.43 L1140.84 1214.43 L1141.42 1214.43 L1142.01 1214.43 L1142.6 1214.43 L1143.18 1214.43 L1143.77 1214.43 L1144.36 1214.43 L1144.94 1214.43 L1145.53 1214.43 L1146.12 1214.43 L1146.7 1214.43 L1147.29 1214.43 L1147.88 1214.43 L1148.46 1214.43 L1149.05 1214.43 L1149.63 1214.43 L1150.22 1214.43 L1150.81 1214.43 L1151.39 1214.43 L1151.98 1214.43 L1152.57 1214.43 L1153.15 1214.43 L1153.74 1214.43 L1154.33 1214.43 L1154.91 1214.43 L1155.5 1214.43 L1156.09 1214.43 L1156.67 1214.43 L1157.26 1214.43 L1157.84 1214.43 L1158.43 1214.43 L1159.02 1214.43 L1159.6 1214.43 L1160.19 1214.43 L1160.78 1214.43 L1161.36 1214.43 L1161.95 1214.43 L1162.54 1214.43 L1163.12 1214.43 L1163.71 1214.43 L1164.29 1214.43 L1164.88 1214.43 L1165.47 1214.43 L1166.05 1214.43 L1166.64 1214.43 L1167.23 1214.43 L1167.81 1214.43 L1168.4 1214.43 L1168.99 1214.43 L1169.57 1214.43 L1170.16 1214.43 L1170.75 1214.43 L1171.33 1214.43 L1171.92 1214.43 L1172.5 1214.43 L1173.09 1214.43 L1173.68 1214.43 L1174.26 1214.43 L1174.85 1214.43 L1175.44 1214.43 L1176.02 1214.43 L1176.61 1214.43 L1177.2 1214.43 L1177.78 1214.43 L1178.37 1214.43 L1178.96 1214.43 L1179.54 1214.43 L1180.13 1214.43 L1180.71 1214.43 L1181.3 1214.43 L1181.89 1214.43 L1182.47 1214.43 L1183.06 1214.43 L1183.65 1214.43 L1184.23 1214.43 L1184.82 1214.43 L1185.41 1214.43 L1185.99 1214.43 L1186.58 1214.43 L1187.16 1214.43 L1187.75 1214.43 L1188.34 1214.43 L1188.92 1214.43 L1189.51 1214.43 L1190.1 1214.43 L1190.68 1214.43 L1191.27 1214.43 L1191.86 1214.43 L1192.44 1214.43 L1193.03 1214.43 L1193.62 1214.43 L1194.2 1214.43 L1194.79 1214.43 L1195.37 1214.43 L1195.96 1214.43 L1196.55 1214.43 L1197.13 1214.43 L1197.72 1214.43 L1198.31 1214.43 L1198.89 1214.43 L1199.48 1214.43 L1200.07 1214.43 L1200.65 1214.43 L1201.24 1214.43 L1201.83 1214.43 L1202.41 1214.43 L1203 1214.43 L1203.58 1214.43 L1204.17 1214.43 L1204.76 1214.43 L1205.34 1214.43 L1205.93 1214.43 L1206.52 1214.43 L1207.1 1214.43 L1207.69 1214.43 L1208.28 1214.43 L1208.86 1214.43 L1209.45 1214.43 L1210.03 1214.43 L1210.62 1214.43 L1211.21 1214.43 L1211.79 1214.43 L1212.38 1214.43 L1212.97 1214.43 L1213.55 1214.43 L1214.14 1214.43 L1214.73 1214.43 L1215.31 1214.43 L1215.9 1214.43 L1216.49 1214.43 L1217.07 1214.43 L1217.66 1214.43 L1218.24 1214.43 L1218.83 1214.43 L1219.42 1214.43 L1220 1214.43 L1220.59 1214.43 L1221.18 1214.43 L1221.76 1214.43 L1222.35 1214.43 L1222.94 1214.43 L1223.52 1214.43 L1224.11 1214.43 L1224.7 1214.43 L1225.28 1214.43 L1225.87 1214.43 L1226.45 1214.43 L1227.04 1214.43 L1227.63 1214.43 L1228.21 1214.43 L1228.8 1214.43 L1229.39 1214.43 L1229.97 1214.43 L1230.56 1214.43 L1231.15 1214.43 L1231.73 1214.43 L1232.32 1214.43 L1232.91 1214.43 L1233.49 1214.43 L1234.08 1214.43 L1234.66 1214.43 L1235.25 1214.43 L1235.84 1214.43 L1236.42 1214.43 L1237.01 1214.43 L1237.6 1214.43 L1238.18 1214.43 L1238.77 1214.43 L1239.36 1214.43 L1239.94 1214.43 L1240.53 1214.43 L1241.11 1214.43 L1241.7 1214.43 L1242.29 1214.43 L1242.87 1214.43 L1243.46 1214.43 L1244.05 1214.43 L1244.63 1214.43 L1245.22 1214.43 L1245.81 1214.43 L1246.39 1214.43 L1246.98 1214.43 L1247.57 1214.43 L1248.15 1214.43 L1248.74 1214.43 L1249.32 1214.43 L1249.91 1214.43 L1250.5 1214.43 L1251.08 1214.43 L1251.67 1214.43 L1252.26 1214.43 L1252.84 1214.43 L1253.43 1214.43 L1254.02 1214.43 L1254.6 1214.43 L1255.19 1214.43 L1255.78 1214.43 L1256.36 1214.43 L1256.95 1214.43 L1257.53 1214.43 L1258.12 1214.43 L1258.71 1214.43 L1259.29 1214.43 L1259.88 1214.43 L1260.47 1214.43 L1261.05 1214.43 L1261.64 1214.43 L1262.23 1214.43 L1262.81 1214.43 L1263.4 1214.43 L1263.98 1214.43 L1264.57 1214.43 L1265.16 1214.43 L1265.74 1214.43 L1266.33 1214.43 L1266.92 1214.43 L1267.5 1214.43 L1268.09 1214.43 L1268.68 1214.43 L1269.26 1214.43 L1269.85 1214.43 L1270.44 1214.43 L1271.02 1214.43 L1271.61 1214.43 L1272.19 1214.43 L1272.78 1214.43 L1273.37 1214.43 L1273.95 1214.43 L1274.54 1214.43 L1275.13 1214.43 L1275.71 1214.43 L1276.3 1214.43 L1276.89 1214.43 L1277.47 1214.43 L1278.06 1214.43 L1278.65 1214.43 L1279.23 1214.43 L1279.82 1214.43 L1280.4 1214.43 L1280.99 1214.43 L1281.58 1214.43 L1282.16 1214.43 L1282.75 1214.43 L1283.34 1214.43 L1283.92 1214.43 L1284.51 1214.43 L1285.1 1214.43 L1285.68 1214.43 L1286.27 1214.43 L1286.86 1214.43 L1287.44 1214.43 L1288.03 1214.43 L1288.61 1214.43 L1289.2 1214.43 L1289.79 1214.43 L1290.37 1214.43 L1290.96 1214.43 L1291.55 1214.43 L1292.13 1214.43 L1292.72 1214.43 L1293.31 1214.43 L1293.89 1214.43 L1294.48 1214.43 L1295.06 1214.43 L1295.65 1214.43 L1296.24 1214.43 L1296.82 1214.43 L1297.41 1214.43 L1298 1214.43 L1298.58 1214.43 L1299.17 1214.43 L1299.76 1214.43 L1300.34 1214.43 L1300.93 1214.43 L1301.52 1214.43 L1302.1 1214.43 L1302.69 1214.43 L1303.27 1214.43 L1303.86 1214.43 L1304.45 1214.43 L1305.03 1214.43 L1305.62 1214.43 L1306.21 1214.43 L1306.79 1214.43 L1307.38 1214.43 L1307.97 1214.43 L1308.55 1214.43 L1309.14 1214.43 L1309.73 1214.43 L1310.31 1214.43 L1310.9 1214.43 L1311.48 1214.43 L1312.07 1214.43 L1312.66 1214.43 L1313.24 1214.43 L1313.83 1214.43 L1314.42 1214.43 L1315 1214.43 L1315.59 1214.43 L1316.18 1214.43 L1316.76 1214.43 L1317.35 1214.43 L1317.93 1214.43 L1318.52 1214.43 L1319.11 1214.43 L1319.69 1214.43 L1320.28 1214.43 L1320.87 1214.43 L1321.45 1214.43 L1322.04 1214.43 L1322.63 1214.43 L1323.21 1214.43 L1323.8 1214.43 L1324.39 1214.43 L1324.97 1214.43 L1325.56 1214.43 L1326.14 1214.43 L1326.73 1214.43 L1327.32 1214.43 L1327.9 1214.43 L1328.49 1214.43 L1329.08 1214.43 L1329.66 1214.43 L1330.25 1214.43 L1330.84 1214.43 L1331.42 1214.43 L1332.01 1214.43 L1332.6 1214.43 L1333.18 1214.43 L1333.77 1214.43 L1334.35 1214.43 L1334.94 1214.43 L1335.53 1214.43 L1336.11 1214.43 L1336.7 1214.43 L1337.29 1214.43 L1337.87 1214.43 L1338.46 1214.43 L1339.05 1214.43 L1339.63 1214.43 L1340.22 1214.43 L1340.8 1214.43 L1341.39 1214.43 L1341.98 1214.43 L1342.56 1214.43 L1343.15 1214.43 L1343.74 1214.43 L1344.32 1214.43 L1344.91 1214.43 L1345.5 1214.43 L1346.08 1214.43 L1346.67 1214.43 L1347.26 1214.43 L1347.84 1214.43 L1348.43 1214.43 L1349.01 1214.43 L1349.6 1214.43 L1350.19 1214.43 L1350.77 1214.43 L1351.36 1214.43 L1351.95 1214.43 L1352.53 1214.43 L1353.12 1214.43 L1353.71 1214.43 L1354.29 1214.43 L1354.88 1214.43 L1355.47 1214.43 L1356.05 1214.43 L1356.64 1214.43 L1357.22 1214.43 L1357.81 1214.43 L1358.4 1214.43 L1358.98 1214.43 L1359.57 1214.43 L1360.16 1214.43 L1360.74 1214.43 L1361.33 1214.43 L1361.92 1214.43 L1362.5 1214.43 L1363.09 1214.43 L1363.68 1214.43 L1364.26 1214.43 L1364.85 1214.43 L1365.43 1214.43 L1366.02 1214.43 L1366.61 1214.43 L1367.19 1214.43 L1367.78 1214.43 L1368.37 1214.43 L1368.95 1214.43 L1369.54 1214.43 L1370.13 1214.43 L1370.71 1214.43 L1371.3 1214.43 L1371.88 1214.43 L1372.47 1214.43 L1373.06 1214.43 L1373.64 1214.43 L1374.23 1214.43 L1374.82 1214.43 L1375.4 1214.43 L1375.99 1214.43 L1376.58 1214.43 L1377.16 1214.43 L1377.75 1214.43 L1378.34 1214.43 L1378.92 1214.43 L1379.51 1214.43 L1380.09 1214.43 L1380.68 1214.43 L1381.27 1214.43 L1381.85 1214.43 L1382.44 1214.43 L1383.03 1214.43 L1383.61 1214.43 L1384.2 1214.43 L1384.79 1214.43 L1385.37 1214.43 L1385.96 1214.43 L1386.55 1214.43 L1387.13 1214.43 L1387.72 1214.43 L1388.3 1214.43 L1388.89 1214.43 L1389.48 1214.43 L1390.06 1214.43 L1390.65 1214.43 L1391.24 1214.43 L1391.82 1214.43 L1392.41 1214.43 L1393 1214.43 L1393.58 1214.43 L1394.17 1214.43 L1394.75 1214.43 L1395.34 1214.43 L1395.93 1214.43 L1396.51 1214.43 L1397.1 1214.43 L1397.69 1214.43 L1398.27 1214.43 L1398.86 1214.43 L1399.45 1214.43 L1400.03 1214.43 L1400.62 1214.43 L1401.21 1214.43 L1401.79 1214.43 L1402.38 1214.43 L1402.96 1214.43 L1403.55 1214.43 L1404.14 1214.43 L1404.72 1214.43 L1405.31 1214.43 L1405.9 1214.43 L1406.48 1214.43 L1407.07 1214.43 L1407.66 1214.43 L1408.24 1214.43 L1408.83 1214.43 L1409.42 1214.43 L1410 1214.43 L1410.59 1214.43 L1411.17 1214.43 L1411.76 1214.43 L1412.35 1214.43 L1412.93 1214.43 L1413.52 1214.43 L1414.11 1214.43 L1414.69 1214.43 L1415.28 1214.43 L1415.87 1214.43 L1416.45 1214.43 L1417.04 1214.43 L1417.63 1214.43 L1418.21 1214.43 L1418.8 1214.43 L1419.38 1214.43 L1419.97 1214.43 L1420.56 1214.43 L1421.14 1214.43 L1421.73 1214.43 L1422.32 1214.43 L1422.9 1214.43 L1423.49 1214.43 L1424.08 1214.43 L1424.66 1214.43 L1425.25 1214.43 L1425.83 1214.43 L1426.42 1214.43 L1427.01 1214.43 L1427.59 1214.43 L1428.18 1214.43 L1428.77 1214.43 L1429.35 1214.43 L1429.94 1214.43 L1430.53 1214.43 L1431.11 1214.43 L1431.7 1214.43 L1432.29 1214.43 L1432.87 1214.43 L1433.46 1214.43 L1434.04 1214.43 L1434.63 1214.43 L1435.22 1214.43 L1435.8 1214.43 L1436.39 1214.43 L1436.98 1214.43 L1437.56 1214.43 L1438.15 1214.43 L1438.74 1214.43 L1439.32 1214.43 L1439.91 1214.43 L1440.5 1214.43 L1441.08 1214.43 L1441.67 1214.43 L1442.25 1214.43 L1442.84 1214.43 L1443.43 1214.43 L1444.01 1214.43 L1444.6 1214.43 L1445.19 1214.43 L1445.77 1214.43 L1446.36 1214.43 L1446.95 1214.43 L1447.53 1214.43 L1448.12 1214.43 L1448.7 1214.43 L1449.29 1214.43 L1449.88 1214.43 L1450.46 1214.43 L1451.05 1214.43 L1451.64 1214.43 L1452.22 1214.43 L1452.81 1214.43 L1453.4 1214.43 L1453.98 1214.43 L1454.57 1214.43 L1455.16 1214.43 L1455.74 1214.43 L1456.33 1214.43 L1456.91 1214.43 L1457.5 1214.43 L1458.09 1214.43 L1458.67 1214.43 L1459.26 1214.43 L1459.85 1214.43 L1460.43 1214.43 L1461.02 1214.43 L1461.61 1214.43 L1462.19 1214.43 L1462.78 1214.43 L1463.37 1214.43 L1463.95 1214.43 L1464.54 1214.43 L1465.12 1214.43 L1465.71 1214.43 L1466.3 1214.43 L1466.88 1214.43 L1467.47 1214.43 L1468.06 1214.43 L1468.64 1214.43 L1469.23 1214.43 L1469.82 1214.43 L1470.4 1214.43 L1470.99 1214.43 L1471.57 1214.43 L1472.16 1214.43 L1472.75 1214.43 L1473.33 1214.43 L1473.92 1214.43 L1474.51 1214.43 L1475.09 1214.43 L1475.68 1214.43 L1476.27 1214.43 L1476.85 1214.43 L1477.44 1214.43 L1478.03 1214.43 L1478.61 1214.43 L1479.2 1214.43 L1479.78 1214.43 L1480.37 1214.43 L1480.96 1214.43 L1481.54 1214.43 L1482.13 1214.43 L1482.72 1214.43 L1483.3 1214.43 L1483.89 1214.43 L1484.48 1214.43 L1485.06 1214.43 L1485.65 1214.43 L1486.24 1214.43 L1486.82 1214.43 L1487.41 1214.43 L1487.99 1214.43 L1488.58 1214.43 L1489.17 1214.43 L1489.75 1214.43 L1490.34 1214.43 L1490.93 1214.43 L1491.51 1214.43 L1492.1 1214.43 L1492.69 1214.43 L1493.27 1214.43 L1493.86 1214.43 L1494.45 1214.43 L1495.03 1214.43 L1495.62 1214.43 L1496.2 1214.43 L1496.79 1214.43 L1497.38 1214.43 L1497.96 1214.43 L1498.55 1214.43 L1499.14 1214.43 L1499.72 1214.43 L1500.31 1214.43 L1500.9 1214.43 L1501.48 1214.43 L1502.07 1214.43 L1502.65 1214.43 L1503.24 1214.43 L1503.83 1214.43 L1504.41 1214.43 L1505 1214.43 L1505.59 1214.43 L1506.17 1214.43 L1506.76 1214.43 L1507.35 1214.43 L1507.93 1214.43 L1508.52 1214.43 L1509.11 1214.43 L1509.69 1214.43 L1510.28 1214.43 L1510.86 1214.43 L1511.45 1214.43 L1512.04 1214.43 L1512.62 1214.43 L1513.21 1214.43 L1513.8 1214.43 L1514.38 1214.43 L1514.97 1214.43 L1515.56 1214.43 L1516.14 1214.43 L1516.73 1214.43 L1517.32 1214.43 L1517.9 1214.43 L1518.49 1214.43 L1519.07 1214.43 L1519.66 1214.43 L1520.25 1214.43 L1520.83 1214.43 L1521.42 1214.43 L1522.01 1214.43 L1522.59 1214.43 L1523.18 1214.43 L1523.77 1214.43 L1524.35 1214.43 L1524.94 1214.43 L1525.52 1214.43 L1526.11 1214.43 L1526.7 1214.43 L1527.28 1214.43 L1527.87 1214.43 L1528.46 1214.43 L1529.04 1214.43 L1529.63 1214.43 L1530.22 1214.43 L1530.8 1214.43 L1531.39 1214.43 L1531.98 1214.43 L1532.56 1214.43 L1533.15 1214.43 L1533.73 1214.43 L1534.32 1214.43 L1534.91 1214.43 L1535.49 1214.43 L1536.08 1214.43 L1536.67 1214.43 L1537.25 1214.43 L1537.84 1214.43 L1538.43 1214.43 L1539.01 1214.43 L1539.6 1214.43 L1540.19 1214.43 L1540.77 1214.43 L1541.36 1214.43 L1541.94 1214.43 L1542.53 1214.43 L1543.12 1214.43 L1543.7 1214.43 L1544.29 1214.43 L1544.88 1214.43 L1545.46 1214.43 L1546.05 1214.43 L1546.64 1214.43 L1547.22 1214.43 L1547.81 1214.43 L1548.4 1214.43 L1548.98 1214.43 L1549.57 1214.43 L1550.15 1214.43 L1550.74 1214.43 L1551.33 1214.43 L1551.91 1214.43 L1552.5 1214.43 L1553.09 1214.43 L1553.67 1214.43 L1554.26 1214.43 L1554.85 1214.43 L1555.43 1214.43 L1556.02 1214.43 L1556.6 1214.43 L1557.19 1214.43 L1557.78 1214.43 L1558.36 1214.43 L1558.95 1214.43 L1559.54 1214.43 L1560.12 1214.43 L1560.71 1214.43 L1561.3 1214.43 L1561.88 1214.43 L1562.47 1214.43 L1563.06 1214.43 L1563.64 1214.43 L1564.23 1214.43 L1564.81 1214.43 L1565.4 1214.43 L1565.99 1214.43 L1566.57 1214.43 L1567.16 1214.43 L1567.75 1214.43 L1568.33 1214.43 L1568.92 1214.43 L1569.51 1214.43 L1570.09 1214.43 L1570.68 1214.43 L1571.27 1214.43 L1571.85 1214.43 L1572.44 1214.43 L1573.02 1214.43 L1573.61 1214.43 L1574.2 1214.43 L1574.78 1214.43 L1575.37 1214.43 L1575.96 1214.43 L1576.54 1214.43 L1577.13 1214.43 L1577.72 1214.43 L1578.3 1214.43 L1578.89 1214.43 L1579.47 1214.43 L1580.06 1214.43 L1580.65 1214.43 L1581.23 1214.43 L1581.82 1214.43 L1582.41 1214.43 L1582.99 1214.43 L1583.58 1214.43 L1584.17 1214.43 L1584.75 1214.43 L1585.34 1214.43 L1585.93 1214.43 L1586.51 1214.43 L1587.1 1214.43 L1587.68 1214.43 L1588.27 1214.43 L1588.86 1214.43 L1589.44 1214.43 L1590.03 1214.43 L1590.62 1214.43 L1591.2 1214.43 L1591.79 1214.43 L1592.38 1214.43 L1592.96 1214.43 L1593.55 1214.43 L1594.14 1214.43 L1594.72 1214.43 L1595.31 1214.43 L1595.89 1214.43 L1596.48 1214.43 L1597.07 1214.43 L1597.65 1214.43 L1598.24 1214.43 L1598.83 1214.43 L1599.41 1214.43 L1600 1214.43 L1600.59 1214.43 L1601.17 1214.43 L1601.76 1214.43 L1602.34 1214.43 L1602.93 1214.43 L1603.52 1214.43 L1604.1 1214.43 L1604.69 1214.43 L1605.28 1214.43 L1605.86 1214.43 L1606.45 1214.43 L1607.04 1214.43 L1607.62 1214.43 L1608.21 1214.43 L1608.8 1214.43 L1609.38 1214.43 L1609.97 1214.43 L1610.55 1214.43 L1611.14 1214.43 L1611.73 1214.43 L1612.31 1214.43 L1612.9 1214.43 L1613.49 1214.43 L1614.07 1214.43 L1614.66 1214.43 L1615.25 1214.43 L1615.83 1214.43 L1616.42 1214.43 L1617.01 1214.43 L1617.59 1214.43 L1618.18 1214.43 L1618.76 1214.43 L1619.35 1214.43 L1619.94 1214.43 L1620.52 1214.43 L1621.11 1214.43 L1621.7 1214.43 L1622.28 1214.43 L1622.87 1214.43 L1623.46 1214.43 L1624.04 1214.43 L1624.63 1214.43 L1625.22 1214.43 L1625.8 1214.43 L1626.39 1214.43 L1626.97 1214.43 L1627.56 1214.43 L1628.15 1214.43 L1628.73 1214.43 L1629.32 1214.43 L1629.91 1214.43 L1630.49 1214.43 L1631.08 1214.43 L1631.67 1214.43 L1632.25 1214.43 L1632.84 1214.43 L1633.42 1214.43 L1634.01 1214.43 L1634.6 1214.43 L1635.18 1214.43 L1635.77 1214.43 L1636.36 1214.43 L1636.94 1214.43 L1637.53 1214.43 L1638.12 1214.43 L1638.7 1214.43 L1639.29 1214.43 L1639.88 1214.43 L1640.46 1214.43 L1641.05 1214.43 L1641.63 1214.43 L1642.22 1214.43 L1642.81 1214.43 L1643.39 1214.43 L1643.98 1214.43 L1644.57 1214.43 L1645.15 1214.43 L1645.74 1214.43 L1646.33 1214.43 L1646.91 1214.43 L1647.5 1214.43 L1648.09 1214.43 L1648.67 1214.43 L1649.26 1214.43 L1649.84 1214.43 L1650.43 1214.43 L1651.02 1214.43 L1651.6 1214.43 L1652.19 1214.43 L1652.78 1214.43 L1653.36 1214.43 L1653.95 1214.43 L1654.54 1214.43 L1655.12 1214.43 L1655.71 1214.43 L1656.29 1214.43 L1656.88 1214.43 L1657.47 1214.43 L1658.05 1214.43 L1658.64 1214.43 L1659.23 1214.43 L1659.81 1214.43 L1660.4 1214.43 L1660.99 1214.43 L1661.57 1214.43 L1662.16 1214.43 L1662.75 1214.43 L1663.33 1214.43 L1663.92 1214.43 L1664.5 1214.43 L1665.09 1214.43 L1665.68 1214.43 L1666.26 1214.43 L1666.85 1214.43 L1667.44 1214.43 L1668.02 1214.43 L1668.61 1214.43 L1669.2 1214.43 L1669.78 1214.43 L1670.37 1214.43 L1670.96 1214.43 L1671.54 1214.43 L1672.13 1214.43 L1672.71 1214.43 L1673.3 1214.43 L1673.89 1214.43 L1674.47 1214.43 L1675.06 1214.43 L1675.65 1214.43 L1676.23 1214.43 L1676.82 1214.43 L1677.41 1214.43 L1677.99 1214.43 L1678.58 1214.43 L1679.17 1214.43 L1679.75 1214.43 L1680.34 1214.43 L1680.92 1214.43 L1681.51 1214.43 L1682.1 1214.43 L1682.68 1214.43 L1683.27 1214.43 L1683.86 1214.43 L1684.44 1214.43 L1685.03 1214.43 L1685.62 1214.43 L1686.2 1214.43 L1686.79 1214.43 L1687.37 1214.43 L1687.96 1214.43 L1688.55 1214.43 L1689.13 1214.43 L1689.72 1214.43 L1690.31 1214.43 L1690.89 1214.43 L1691.48 1214.43 L1692.07 1214.43 L1692.65 1214.43 L1693.24 1214.43 L1693.83 1214.43 L1694.41 1214.43 L1695 1214.43 L1695.58 1214.43 L1696.17 1214.43 L1696.76 1214.43 L1697.34 1214.43 L1697.93 1214.43 L1698.52 1214.43 L1699.1 1214.43 L1699.69 1214.43 L1700.28 1214.43 L1700.86 1214.43 L1701.45 1214.43 L1702.04 1214.43 L1702.62 1214.43 L1703.21 1214.43 L1703.79 1214.43 L1704.38 1214.43 L1704.97 1214.43 L1705.55 1214.43 L1706.14 1214.43 L1706.73 1214.43 L1707.31 1214.43 L1707.9 1214.43 L1708.49 1214.43 L1709.07 1214.43 L1709.66 1214.43 L1710.24 1214.43 L1710.83 1214.43 L1711.42 1214.43 L1712 1214.43 L1712.59 1214.43 L1713.18 1214.43 L1713.76 1214.43 L1714.35 1214.43 L1714.94 1214.43 L1715.52 1214.43 L1716.11 1214.43 L1716.7 1214.43 L1717.28 1214.43 L1717.87 1214.43 L1718.45 1214.43 L1719.04 1214.43 L1719.63 1214.43 L1720.21 1214.43 L1720.8 1214.43 L1721.39 1214.43 L1721.97 1214.43 L1722.56 1214.43 L1723.15 1214.43 L1723.73 1214.43 L1724.32 1214.43 L1724.91 1214.43 L1725.49 1214.43 L1726.08 1214.43 L1726.66 1214.43 L1727.25 1214.43 L1727.84 1214.43 L1728.42 1214.43 L1729.01 1214.43 L1729.6 1214.43 L1730.18 1214.43 L1730.77 1214.43 L1731.36 1214.43 L1731.94 1214.43 L1732.53 1214.43 L1733.11 1214.43 L1733.7 1214.43 L1734.29 1214.43 L1734.87 1214.43 L1735.46 1214.43 L1736.05 1214.43 L1736.63 1214.43 L1737.22 1214.43 L1737.81 1214.43 L1738.39 1214.43 L1738.98 1214.43 L1739.57 1214.43 L1740.15 1214.43 L1740.74 1214.43 L1741.32 1214.43 L1741.91 1214.43 L1742.5 1214.43 L1743.08 1214.43 L1743.67 1214.43 L1744.26 1214.43 L1744.84 1214.43 L1745.43 1214.43 L1746.02 1214.43 L1746.6 1214.43 L1747.19 1214.43 L1747.78 1214.43 L1748.36 1214.43 L1748.95 1214.43 L1749.53 1214.43 L1750.12 1214.43 L1750.71 1214.43 L1751.29 1214.43 L1751.88 1214.43 L1752.47 1214.43 L1753.05 1214.43 L1753.64 1214.43 L1754.23 1214.43 L1754.81 1214.43 L1755.4 1214.43 L1755.99 1214.43 L1756.57 1214.43 L1757.16 1214.43 L1757.74 1214.43 L1758.33 1214.43 L1758.92 1214.43 L1759.5 1214.43 L1760.09 1214.43 L1760.68 1214.43 L1761.26 1214.43 L1761.85 1214.43 L1762.44 1214.43 L1763.02 1214.43 L1763.61 1214.43 L1764.19 1214.43 L1764.78 1214.43 L1765.37 1214.43 L1765.95 1214.43 L1766.54 1214.43 L1767.13 1214.43 L1767.71 1214.43 L1768.3 1214.43 L1768.89 1214.43 L1769.47 1214.43 L1770.06 1214.43 L1770.65 1214.43 L1771.23 1214.43 L1771.82 1214.43 L1772.4 1214.43 L1772.99 1214.43 L1773.58 1214.43 L1774.16 1214.43 L1774.75 1214.43 L1775.34 1214.43 L1775.92 1214.43 L1776.51 1214.43 L1777.1 1214.43 L1777.68 1214.43 L1778.27 1214.43 L1778.86 1214.43 L1779.44 1214.43 L1780.03 1214.43 L1780.61 1214.43 L1781.2 1214.43 L1781.79 1214.43 L1782.37 1214.43 L1782.96 1214.43 L1783.55 1214.43 L1784.13 1214.43 L1784.72 1214.43 L1785.31 1214.43 L1785.89 1214.43 L1786.48 1214.43 L1787.06 1214.43 L1787.65 1214.43 L1788.24 1214.43 L1788.82 1214.43 L1789.41 1214.43 L1790 1214.43 L1790.58 1214.43 L1791.17 1214.43 L1791.76 1214.43 L1792.34 1214.43 L1792.93 1214.43 L1793.52 1214.43 L1794.1 1214.43 L1794.69 1214.43 L1795.27 1214.43 L1795.86 1214.43 L1796.45 1214.43 L1797.03 1214.43 L1797.62 1214.43 L1798.21 1214.43 L1798.79 1214.43 L1799.38 1214.43 L1799.97 1214.43 L1800.55 1214.43 L1801.14 1214.43 L1801.73 1214.43 L1802.31 1214.43 L1802.9 1214.43 L1803.48 1214.43 L1804.07 1214.43 L1804.66 1214.43 L1805.24 1214.43 L1805.83 1214.43 L1806.42 1214.43 L1807 1214.43 L1807.59 1214.43 L1808.18 1214.43 L1808.76 1214.43 L1809.35 1214.43 L1809.94 1214.43 L1810.52 1214.43 L1811.11 1214.43 L1811.69 1214.43 L1812.28 1214.43 L1812.87 1214.43 L1813.45 1214.43 L1814.04 1214.43 L1814.63 1214.43 L1815.21 1214.43 L1815.8 1214.43 L1816.39 1214.43 L1816.97 1214.43 L1817.56 1214.43 L1818.14 1214.43 L1818.73 1214.43 L1819.32 1214.43 L1819.9 1214.43 L1820.49 1214.43 L1821.08 1214.43 L1821.66 1214.43 L1822.25 1214.43 L1822.84 1214.43 L1823.42 1214.43 L1824.01 1214.43 L1824.6 1214.43 L1825.18 1214.43 L1825.77 1214.43 L1826.35 1214.43 L1826.94 1214.43 L1827.53 1214.43 L1828.11 1214.43 L1828.7 1214.43 L1829.29 1214.43 L1829.87 1214.43 L1830.46 1214.43 L1831.05 1214.43 L1831.63 1214.43 L1832.22 1214.43 L1832.81 1214.43 L1833.39 1214.43 L1833.98 1214.43 L1834.56 1214.43 L1835.15 1214.43 L1835.74 1214.43 L1836.32 1214.43 L1836.91 1214.43 L1837.5 1214.43 L1838.08 1214.43 L1838.67 1214.43 L1839.26 1214.43 L1839.84 1214.43 L1840.43 1214.43 L1841.01 1214.43 L1841.6 1214.43 L1842.19 1214.43 L1842.77 1214.43 L1843.36 1214.43 L1843.95 1214.43 L1844.53 1214.43 L1845.12 1214.43 L1845.71 1214.43 L1846.29 1214.43 L1846.88 1214.43 L1847.47 1214.43 L1848.05 1214.43 L1848.64 1214.43 L1849.22 1214.43 L1849.81 1214.43 L1850.4 1214.43 L1850.98 1214.43 L1851.57 1214.43 L1852.16 1214.43 L1852.74 1214.43 L1853.33 1214.43 L1853.92 1214.43 L1854.5 1214.43 L1855.09 1214.43 L1855.68 1214.43 L1856.26 1214.43 L1856.85 1214.43 L1857.43 1214.43 L1858.02 1214.43 L1858.61 1214.43 L1859.19 1214.43 L1859.78 1214.43 L1860.37 1214.43 L1860.95 1214.43 L1861.54 1214.43 L1862.13 1214.43 L1862.71 1214.43 L1863.3 1214.43 L1863.88 1214.43 L1864.47 1214.43 L1865.06 1214.43 L1865.64 1214.43 L1866.23 1214.43 L1866.82 1214.43 L1867.4 1214.43 L1867.99 1214.43 L1868.58 1214.43 L1869.16 1214.43 L1869.75 1214.43 L1870.34 1214.43 L1870.92 1214.43 L1871.51 1214.43 L1872.09 1214.43 L1872.68 1214.43 L1873.27 1214.43 L1873.85 1214.43 L1874.44 1214.43 L1875.03 1214.43 L1875.61 1214.43 L1876.2 1214.43 L1876.79 1214.43 L1877.37 1214.43 L1877.96 1214.43 L1878.55 1214.43 L1879.13 1214.43 L1879.72 1214.43 L1880.3 1214.43 L1880.89 1214.43 L1881.48 1214.43 L1882.06 1214.43 L1882.65 1214.43 L1883.24 1214.43 L1883.82 1214.43 L1884.41 1214.43 L1885 1214.43 L1885.58 1214.43 L1886.17 1214.43 L1886.76 1214.43 L1887.34 1214.43 L1887.93 1214.43 L1888.51 1214.43 L1889.1 1214.43 L1889.69 1214.43 L1890.27 1214.43 L1890.86 1214.43 L1891.45 1214.43 L1892.03 1214.43 L1892.62 1214.43 L1893.21 1214.43 L1893.79 1214.43 L1894.38 1214.43 L1894.96 1214.43 L1895.55 1214.43 L1896.14 1214.43 L1896.72 1214.43 L1897.31 1214.43 L1897.9 1214.43 L1898.48 1214.43 L1899.07 1214.43 L1899.66 1214.43 L1900.24 1214.43 L1900.83 1214.43 L1901.42 1214.43 L1902 1214.43 L1902.59 1214.43 L1903.17 1214.43 L1903.76 1214.43 L1904.35 1214.43 L1904.93 1214.43 L1905.52 1214.43 L1906.11 1214.43 L1906.69 1214.43 L1907.28 1214.43 L1907.87 1214.43 L1908.45 1214.43 L1909.04 1214.43 L1909.63 1214.43 L1910.21 1214.43 L1910.8 1214.43 L1911.38 1214.43 L1911.97 1214.43 L1912.56 1214.43 L1913.14 1214.43 L1913.73 1214.43 L1914.32 1214.43 L1914.9 1214.43 L1915.49 1214.43 L1916.08 1214.43 L1916.66 1214.43 L1917.25 1214.43 L1917.83 1214.43 L1918.42 1214.43 L1919.01 1214.43 L1919.59 1214.43 L1920.18 1214.43 L1920.77 1214.43 L1921.35 1214.43 L1921.94 1214.43 L1922.53 1214.43 L1923.11 1214.43 L1923.7 1214.43 L1924.29 1214.43 L1924.87 1214.43 L1925.46 1214.43 L1926.04 1214.43 L1926.63 1214.43 L1927.22 1214.43 L1927.8 1214.43 L1928.39 1214.43 L1928.98 1214.43 L1929.56 1214.43 L1930.15 1214.43 L1930.74 1214.43 L1931.32 1214.43 L1931.91 1214.43 L1932.5 1214.43 L1933.08 1214.43 L1933.67 1214.43 L1934.25 1214.43 L1934.84 1214.43 L1935.43 1214.43 L1936.01 1214.43 L1936.6 1214.43 L1937.19 1214.43 L1937.77 1214.43 L1938.36 1214.43 L1938.95 1214.43 L1939.53 1214.43 L1940.12 1214.43 L1940.71 1214.43 L1941.29 1214.43 L1941.88 1214.43 L1942.46 1214.43 L1943.05 1214.43 L1943.64 1214.43 L1944.22 1214.43 L1944.81 1214.43 L1945.4 1214.43 L1945.98 1214.43 L1946.57 1214.43 L1947.16 1214.43 L1947.74 1214.43 L1948.33 1214.43 L1948.91 1214.43 L1949.5 1214.43 L1950.09 1214.43 L1950.67 1214.43 L1951.26 1214.43 L1951.85 1214.43 L1952.43 1214.43 L1953.02 1214.43 L1953.61 1214.43 L1954.19 1214.43 L1954.78 1214.43 L1955.37 1214.43 L1955.95 1214.43 L1956.54 1214.43 L1957.12 1214.43 L1957.71 1214.43 L1958.3 1214.43 L1958.88 1214.43 L1959.47 1214.43 L1960.06 1214.43 L1960.64 1214.43 L1961.23 1214.43 L1961.82 1214.43 L1962.4 1214.43 L1962.99 1214.43 L1963.58 1214.43 L1964.16 1214.43 L1964.75 1214.43 L1965.33 1214.43 L1965.92 1214.43 L1966.51 1214.43 L1967.09 1214.43 L1967.68 1214.43 L1968.27 1214.43 L1968.85 1214.43 L1969.44 1214.43 L1970.03 1214.43 L1970.61 1214.43 L1971.2 1214.43 L1971.78 1214.43 L1972.37 1214.43 L1972.96 1214.43 L1973.54 1214.43 L1974.13 1214.43 L1974.72 1214.43 L1975.3 1214.43 L1975.89 1214.43 L1976.48 1214.43 L1977.06 1214.43 L1977.65 1214.43 L1978.24 1214.43 L1978.82 1214.43 L1979.41 1214.43 L1979.99 1214.43 L1980.58 1214.43 L1981.17 1214.43 L1981.75 1214.43 L1982.34 1214.43 L1982.93 1214.43 L1983.51 1214.43 L1984.1 1214.43 L1984.69 1214.43 L1985.27 1214.43 L1985.86 1214.43 L1986.45 1214.43 L1987.03 1214.43 L1987.62 1214.43 L1988.2 1214.43 L1988.79 1214.43 L1989.38 1214.43 L1989.96 1214.43 L1990.55 1214.43 L1991.14 1214.43 L1991.72 1214.43 L1992.31 1214.43 L1992.9 1214.43 L1993.48 1214.43 L1994.07 1214.43 L1994.65 1214.43 L1995.24 1214.43 L1995.83 1214.43 L1996.41 1214.43 L1997 1214.43 L1997.59 1214.43 L1998.17 1214.43 L1998.76 1214.43 L1999.35 1214.43 L1999.93 1214.43 L2000.52 1214.43 L2001.11 1214.43 L2001.69 1214.43 L2002.28 1214.43 L2002.86 1214.43 L2003.45 1214.43 L2004.04 1214.43 L2004.62 1214.43 L2005.21 1214.43 L2005.8 1214.43 L2006.38 1214.43 L2006.97 1214.43 L2007.56 1214.43 L2008.14 1214.43 L2008.73 1214.43 L2009.32 1214.43 L2009.9 1214.43 L2010.49 1214.43 L2011.07 1214.43 L2011.66 1214.43 L2012.25 1214.43 L2012.83 1214.43 L2013.42 1214.43 L2014.01 1214.43 L2014.59 1214.43 L2015.18 1214.43 L2015.77 1214.43 L2016.35 1214.43 L2016.94 1214.43 L2017.53 1214.43 L2018.11 1214.43 L2018.7 1214.43 L2019.28 1214.43 L2019.87 1214.43 L2020.46 1214.43 L2021.04 1214.43 L2021.63 1214.43 L2022.22 1214.43 L2022.8 1214.43 L2023.39 1214.43 L2023.98 1214.43 L2024.56 1214.43 L2025.15 1214.43 L2025.73 1214.43 L2026.32 1214.43 L2026.91 1214.43 L2027.49 1214.43 L2028.08 1214.43 L2028.67 1214.43 L2029.25 1214.43 L2029.84 1214.43 L2030.43 1214.43 L2031.01 1214.43 L2031.6 1214.43 L2032.19 1214.43 L2032.77 1214.43 L2033.36 1214.43 L2033.94 1214.43 L2034.53 1214.43 L2035.12 1214.43 L2035.7 1214.43 L2036.29 1214.43 L2036.88 1214.43 L2037.46 1214.43 L2038.05 1214.43 L2038.64 1214.43 L2039.22 1214.43 L2039.81 1214.43 L2040.4 1214.43 L2040.98 1214.43 L2041.57 1214.43 L2042.15 1214.43 L2042.74 1214.43 L2043.33 1214.43 L2043.91 1214.43 L2044.5 1214.43 L2045.09 1214.43 L2045.67 1214.43 L2046.26 1214.43 L2046.85 1214.43 L2047.43 1214.43 L2048.02 1214.43 L2048.6 1214.43 L2049.19 1214.43 L2049.78 1214.43 L2050.36 1214.43 L2050.95 1214.43 L2051.54 1214.43 L2052.12 1214.43 L2052.71 1214.43 L2053.3 1214.43 L2053.88 1214.43 L2054.47 1214.43 L2055.06 1214.43 L2055.64 1214.43 L2056.23 1214.43 L2056.81 1214.43 L2057.4 1214.43 L2057.99 1214.43 L2058.57 1214.43 L2059.16 1214.43 L2059.75 1214.43 L2060.33 1214.43 L2060.92 1214.43 L2061.51 1214.43 L2062.09 1214.43 L2062.68 1214.43 L2063.27 1214.43 L2063.85 1214.43 L2064.44 1214.43 L2065.02 1214.43 L2065.61 1214.43 L2066.2 1214.43 L2066.78 1214.43 L2067.37 1214.43 L2067.96 1214.43 L2068.54 1214.43 L2069.13 1214.43 L2069.72 1214.43 L2070.3 1214.43 L2070.89 1214.43 L2071.48 1214.43 L2072.06 1214.43 L2072.65 1214.43 L2073.23 1214.43 L2073.82 1214.43 L2074.41 1214.43 L2074.99 1214.43 L2075.58 1214.43 L2076.17 1214.43 L2076.75 1214.43 L2077.34 1214.43 L2077.93 1214.43 L2078.51 1214.43 L2079.1 1214.43 L2079.68 1214.43 L2080.27 1214.43 L2080.86 1214.43 L2081.44 1214.43 L2082.03 1214.43 L2082.62 1214.43 L2083.2 1214.43 L2083.79 1214.43 L2084.38 1214.43 L2084.96 1214.43 L2085.55 1214.43 L2086.14 1214.43 L2086.72 1214.43 L2087.31 1214.43 L2087.89 1214.43 L2088.48 1214.43 L2089.07 1214.43 L2089.65 1214.43 L2090.24 1214.43 L2090.83 1214.43 L2091.41 1214.43 L2092 1214.43 L2092.59 1214.43 L2093.17 1214.43 L2093.76 1214.43 L2094.35 1214.43 L2094.93 1214.43 L2095.52 1214.43 L2096.1 1214.43 L2096.69 1214.43 L2097.28 1214.43 L2097.86 1214.43 L2098.45 1214.43 L2099.04 1214.43 L2099.62 1214.43 L2100.21 1214.43 L2100.8 1214.43 L2101.38 1214.43 L2101.97 1214.43 L2102.55 1214.43 L2103.14 1214.43 L2103.73 1214.43 L2104.31 1214.43 L2104.9 1214.43 L2105.49 1214.43 L2106.07 1214.43 L2106.66 1214.43 L2107.25 1214.43 L2107.83 1214.43 L2108.42 1214.43 L2109.01 1214.43 L2109.59 1214.43 L2110.18 1214.43 L2110.76 1214.43 L2111.35 1214.43 L2111.94 1214.43 L2112.52 1214.43 L2113.11 1214.43 L2113.7 1214.43 L2114.28 1214.43 L2114.87 1214.43 L2115.46 1214.43 L2116.04 1214.43 L2116.63 1214.43 L2117.22 1214.43 L2117.8 1214.43 L2118.39 1214.43 L2118.97 1214.43 L2119.56 1214.43 L2120.15 1214.43 L2120.73 1214.43 L2121.32 1214.43 L2121.91 1214.43 L2122.49 1214.43 L2123.08 1214.43 L2123.67 1214.43 L2124.25 1214.43 L2124.84 1214.43 L2125.42 1214.43 L2126.01 1214.43 L2126.6 1214.43 L2127.18 1214.43 L2127.77 1214.43 L2128.36 1214.43 L2128.94 1214.43 L2129.53 1214.43 L2130.12 1214.43 L2130.7 1214.43 L2131.29 1214.43 L2131.88 1214.43 L2132.46 1214.43 L2133.05 1214.43 L2133.63 1214.43 L2134.22 1214.43 L2134.81 1214.43 L2135.39 1214.43 L2135.98 1214.43 L2136.57 1214.43 L2137.15 1214.43 L2137.74 1214.43 L2138.33 1214.43 L2138.91 1214.43 L2139.5 1214.43 L2140.09 1214.43 L2140.67 1214.43 L2141.26 1214.43 L2141.84 1214.43 L2142.43 1214.43 L2143.02 1214.43 L2143.6 1214.43 L2144.19 1214.43 L2144.78 1214.43 L2145.36 1214.43 L2145.95 1214.43 L2146.54 1214.43 L2147.12 1214.43 L2147.71 1214.43 L2148.3 1214.43 L2148.88 1214.43 L2149.47 1214.43 L2150.05 1214.43 L2150.64 1214.43 L2151.23 1214.43 L2151.81 1214.43 L2152.4 1214.43 L2152.99 1214.43 L2153.57 1214.43 L2154.16 1214.43 L2154.75 1214.43 L2155.33 1214.43 L2155.92 1214.43 L2156.5 1214.43 L2157.09 1214.43 L2157.68 1214.43 L2158.26 1214.43 L2158.26 1213.7 L2157.68 1213.7 L2157.09 1213.7 L2156.5 1213.7 L2155.92 1213.7 L2155.33 1213.7 L2154.75 1213.7 L2154.16 1213.7 L2153.57 1213.7 L2152.99 1213.7 L2152.4 1213.7 L2151.81 1213.7 L2151.23 1213.7 L2150.64 1213.7 L2150.05 1213.7 L2149.47 1213.7 L2148.88 1213.7 L2148.3 1213.7 L2147.71 1213.7 L2147.12 1213.7 L2146.54 1213.7 L2145.95 1213.7 L2145.36 1213.7 L2144.78 1213.7 L2144.19 1213.7 L2143.6 1213.7 L2143.02 1213.7 L2142.43 1213.7 L2141.84 1213.7 L2141.26 1213.7 L2140.67 1213.7 L2140.09 1213.7 L2139.5 1213.7 L2138.91 1213.7 L2138.33 1213.7 L2137.74 1213.7 L2137.15 1213.7 L2136.57 1213.7 L2135.98 1213.7 L2135.39 1213.7 L2134.81 1213.7 L2134.22 1213.7 L2133.63 1213.7 L2133.05 1213.7 L2132.46 1213.7 L2131.88 1213.7 L2131.29 1213.7 L2130.7 1213.7 L2130.12 1213.7 L2129.53 1213.7 L2128.94 1213.7 L2128.36 1213.7 L2127.77 1213.7 L2127.18 1213.7 L2126.6 1213.7 L2126.01 1213.7 L2125.42 1213.7 L2124.84 1213.7 L2124.25 1213.7 L2123.67 1213.7 L2123.08 1213.7 L2122.49 1213.7 L2121.91 1213.7 L2121.32 1213.7 L2120.73 1213.7 L2120.15 1213.7 L2119.56 1213.7 L2118.97 1213.7 L2118.39 1213.7 L2117.8 1213.7 L2117.22 1213.7 L2116.63 1213.7 L2116.04 1213.7 L2115.46 1213.7 L2114.87 1213.7 L2114.28 1213.7 L2113.7 1213.7 L2113.11 1213.7 L2112.52 1213.7 L2111.94 1213.7 L2111.35 1213.7 L2110.76 1213.7 L2110.18 1213.7 L2109.59 1213.7 L2109.01 1213.7 L2108.42 1213.7 L2107.83 1213.7 L2107.25 1213.7 L2106.66 1213.7 L2106.07 1213.7 L2105.49 1213.7 L2104.9 1213.7 L2104.31 1213.7 L2103.73 1213.7 L2103.14 1213.7 L2102.55 1213.7 L2101.97 1213.7 L2101.38 1213.7 L2100.8 1213.7 L2100.21 1213.7 L2099.62 1213.7 L2099.04 1213.7 L2098.45 1213.7 L2097.86 1213.7 L2097.28 1213.7 L2096.69 1213.7 L2096.1 1213.7 L2095.52 1213.7 L2094.93 1213.7 L2094.35 1213.7 L2093.76 1213.7 L2093.17 1213.7 L2092.59 1213.7 L2092 1213.7 L2091.41 1213.7 L2090.83 1213.7 L2090.24 1213.7 L2089.65 1213.7 L2089.07 1213.7 L2088.48 1213.7 L2087.89 1213.7 L2087.31 1213.7 L2086.72 1213.7 L2086.14 1213.7 L2085.55 1213.7 L2084.96 1213.7 L2084.38 1213.7 L2083.79 1213.7 L2083.2 1213.7 L2082.62 1213.7 L2082.03 1213.7 L2081.44 1213.7 L2080.86 1213.7 L2080.27 1213.7 L2079.68 1213.7 L2079.1 1213.7 L2078.51 1213.7 L2077.93 1213.7 L2077.34 1213.7 L2076.75 1213.7 L2076.17 1213.7 L2075.58 1213.7 L2074.99 1213.7 L2074.41 1213.7 L2073.82 1213.7 L2073.23 1213.7 L2072.65 1213.7 L2072.06 1213.7 L2071.48 1213.7 L2070.89 1213.7 L2070.3 1213.7 L2069.72 1213.7 L2069.13 1213.7 L2068.54 1213.7 L2067.96 1213.7 L2067.37 1213.7 L2066.78 1213.7 L2066.2 1213.7 L2065.61 1213.7 L2065.02 1213.7 L2064.44 1213.7 L2063.85 1213.7 L2063.27 1213.7 L2062.68 1213.7 L2062.09 1213.7 L2061.51 1213.7 L2060.92 1213.7 L2060.33 1213.7 L2059.75 1213.7 L2059.16 1213.7 L2058.57 1213.7 L2057.99 1213.7 L2057.4 1213.7 L2056.81 1213.7 L2056.23 1213.7 L2055.64 1213.7 L2055.06 1213.7 L2054.47 1213.7 L2053.88 1213.7 L2053.3 1213.7 L2052.71 1213.7 L2052.12 1213.7 L2051.54 1213.7 L2050.95 1213.7 L2050.36 1213.7 L2049.78 1213.7 L2049.19 1213.7 L2048.6 1213.7 L2048.02 1213.7 L2047.43 1213.7 L2046.85 1213.7 L2046.26 1213.7 L2045.67 1213.7 L2045.09 1213.7 L2044.5 1213.7 L2043.91 1213.7 L2043.33 1213.7 L2042.74 1213.7 L2042.15 1213.7 L2041.57 1213.7 L2040.98 1213.7 L2040.4 1213.7 L2039.81 1213.7 L2039.22 1213.7 L2038.64 1213.7 L2038.05 1213.7 L2037.46 1213.7 L2036.88 1213.7 L2036.29 1213.7 L2035.7 1213.7 L2035.12 1213.7 L2034.53 1213.7 L2033.94 1213.7 L2033.36 1213.7 L2032.77 1213.7 L2032.19 1213.7 L2031.6 1213.7 L2031.01 1213.7 L2030.43 1213.7 L2029.84 1213.7 L2029.25 1213.7 L2028.67 1213.7 L2028.08 1213.7 L2027.49 1213.7 L2026.91 1213.7 L2026.32 1213.7 L2025.73 1213.7 L2025.15 1213.7 L2024.56 1213.7 L2023.98 1213.7 L2023.39 1213.7 L2022.8 1213.7 L2022.22 1213.7 L2021.63 1213.7 L2021.04 1213.7 L2020.46 1213.7 L2019.87 1213.7 L2019.28 1213.7 L2018.7 1213.7 L2018.11 1213.7 L2017.53 1213.7 L2016.94 1213.7 L2016.35 1213.7 L2015.77 1213.7 L2015.18 1213.7 L2014.59 1213.7 L2014.01 1213.7 L2013.42 1213.7 L2012.83 1213.7 L2012.25 1213.7 L2011.66 1213.7 L2011.07 1213.7 L2010.49 1213.7 L2009.9 1213.7 L2009.32 1213.7 L2008.73 1213.7 L2008.14 1213.7 L2007.56 1213.7 L2006.97 1213.7 L2006.38 1213.7 L2005.8 1213.7 L2005.21 1213.7 L2004.62 1213.7 L2004.04 1213.7 L2003.45 1213.7 L2002.86 1213.7 L2002.28 1213.7 L2001.69 1213.7 L2001.11 1213.7 L2000.52 1213.7 L1999.93 1213.7 L1999.35 1213.7 L1998.76 1213.7 L1998.17 1213.7 L1997.59 1213.7 L1997 1213.7 L1996.41 1213.7 L1995.83 1213.7 L1995.24 1213.7 L1994.65 1213.7 L1994.07 1213.7 L1993.48 1213.7 L1992.9 1213.7 L1992.31 1213.7 L1991.72 1213.7 L1991.14 1213.7 L1990.55 1213.7 L1989.96 1213.7 L1989.38 1213.7 L1988.79 1213.7 L1988.2 1213.7 L1987.62 1213.7 L1987.03 1213.7 L1986.45 1213.7 L1985.86 1213.7 L1985.27 1213.7 L1984.69 1213.7 L1984.1 1213.7 L1983.51 1213.7 L1982.93 1213.7 L1982.34 1213.7 L1981.75 1213.7 L1981.17 1213.7 L1980.58 1213.7 L1979.99 1213.7 L1979.41 1213.7 L1978.82 1213.7 L1978.24 1213.7 L1977.65 1213.7 L1977.06 1213.7 L1976.48 1213.7 L1975.89 1213.7 L1975.3 1213.7 L1974.72 1213.7 L1974.13 1213.7 L1973.54 1213.7 L1972.96 1213.7 L1972.37 1213.7 L1971.78 1213.7 L1971.2 1213.7 L1970.61 1213.7 L1970.03 1213.7 L1969.44 1213.7 L1968.85 1213.7 L1968.27 1213.7 L1967.68 1213.7 L1967.09 1213.7 L1966.51 1213.7 L1965.92 1213.7 L1965.33 1213.7 L1964.75 1213.7 L1964.16 1213.7 L1963.58 1213.7 L1962.99 1213.7 L1962.4 1213.7 L1961.82 1213.7 L1961.23 1213.7 L1960.64 1213.7 L1960.06 1213.7 L1959.47 1213.7 L1958.88 1213.7 L1958.3 1213.7 L1957.71 1213.7 L1957.12 1213.7 L1956.54 1213.7 L1955.95 1213.7 L1955.37 1213.7 L1954.78 1213.7 L1954.19 1213.7 L1953.61 1213.7 L1953.02 1213.7 L1952.43 1213.7 L1951.85 1213.7 L1951.26 1213.7 L1950.67 1213.7 L1950.09 1213.7 L1949.5 1213.7 L1948.91 1213.7 L1948.33 1213.7 L1947.74 1213.7 L1947.16 1213.7 L1946.57 1213.7 L1945.98 1213.7 L1945.4 1213.7 L1944.81 1213.7 L1944.22 1213.7 L1943.64 1213.7 L1943.05 1213.7 L1942.46 1213.7 L1941.88 1213.7 L1941.29 1213.7 L1940.71 1213.7 L1940.12 1213.7 L1939.53 1213.7 L1938.95 1213.7 L1938.36 1213.7 L1937.77 1213.7 L1937.19 1213.7 L1936.6 1213.7 L1936.01 1213.7 L1935.43 1213.7 L1934.84 1213.7 L1934.25 1213.7 L1933.67 1213.7 L1933.08 1213.7 L1932.5 1213.7 L1931.91 1213.7 L1931.32 1213.7 L1930.74 1213.7 L1930.15 1213.7 L1929.56 1213.7 L1928.98 1213.7 L1928.39 1213.7 L1927.8 1213.7 L1927.22 1213.7 L1926.63 1213.7 L1926.04 1213.7 L1925.46 1213.7 L1924.87 1213.7 L1924.29 1213.7 L1923.7 1213.7 L1923.11 1213.7 L1922.53 1213.7 L1921.94 1213.7 L1921.35 1213.7 L1920.77 1213.7 L1920.18 1213.7 L1919.59 1213.7 L1919.01 1213.7 L1918.42 1213.7 L1917.83 1213.7 L1917.25 1213.7 L1916.66 1213.7 L1916.08 1213.7 L1915.49 1213.7 L1914.9 1213.7 L1914.32 1213.7 L1913.73 1213.7 L1913.14 1213.7 L1912.56 1213.7 L1911.97 1213.7 L1911.38 1213.7 L1910.8 1213.7 L1910.21 1213.7 L1909.63 1213.7 L1909.04 1213.7 L1908.45 1213.7 L1907.87 1213.7 L1907.28 1213.7 L1906.69 1213.7 L1906.11 1213.7 L1905.52 1213.7 L1904.93 1213.7 L1904.35 1213.7 L1903.76 1213.7 L1903.17 1213.7 L1902.59 1213.7 L1902 1213.7 L1901.42 1213.7 L1900.83 1213.7 L1900.24 1213.7 L1899.66 1213.7 L1899.07 1213.7 L1898.48 1213.7 L1897.9 1213.7 L1897.31 1213.7 L1896.72 1213.7 L1896.14 1213.7 L1895.55 1213.7 L1894.96 1213.7 L1894.38 1213.7 L1893.79 1213.7 L1893.21 1213.7 L1892.62 1213.7 L1892.03 1213.7 L1891.45 1213.7 L1890.86 1213.7 L1890.27 1213.7 L1889.69 1213.7 L1889.1 1213.7 L1888.51 1213.7 L1887.93 1213.7 L1887.34 1213.7 L1886.76 1213.7 L1886.17 1213.7 L1885.58 1213.7 L1885 1213.7 L1884.41 1213.7 L1883.82 1213.7 L1883.24 1213.7 L1882.65 1213.7 L1882.06 1213.7 L1881.48 1213.7 L1880.89 1213.7 L1880.3 1213.7 L1879.72 1213.7 L1879.13 1213.7 L1878.55 1213.7 L1877.96 1213.7 L1877.37 1213.7 L1876.79 1213.7 L1876.2 1213.7 L1875.61 1213.7 L1875.03 1213.7 L1874.44 1213.7 L1873.85 1213.7 L1873.27 1213.7 L1872.68 1213.7 L1872.09 1213.7 L1871.51 1213.7 L1870.92 1213.7 L1870.34 1213.7 L1869.75 1213.7 L1869.16 1213.7 L1868.58 1213.7 L1867.99 1213.7 L1867.4 1213.7 L1866.82 1213.7 L1866.23 1213.7 L1865.64 1213.7 L1865.06 1213.7 L1864.47 1213.7 L1863.88 1213.7 L1863.3 1213.7 L1862.71 1213.7 L1862.13 1213.7 L1861.54 1213.7 L1860.95 1213.7 L1860.37 1213.7 L1859.78 1213.7 L1859.19 1213.7 L1858.61 1213.7 L1858.02 1213.7 L1857.43 1213.7 L1856.85 1213.7 L1856.26 1213.7 L1855.68 1213.7 L1855.09 1213.7 L1854.5 1213.7 L1853.92 1213.7 L1853.33 1213.7 L1852.74 1213.7 L1852.16 1213.7 L1851.57 1213.7 L1850.98 1213.7 L1850.4 1213.7 L1849.81 1213.7 L1849.22 1213.7 L1848.64 1213.7 L1848.05 1213.7 L1847.47 1213.7 L1846.88 1213.7 L1846.29 1213.7 L1845.71 1213.7 L1845.12 1213.7 L1844.53 1213.7 L1843.95 1213.7 L1843.36 1213.7 L1842.77 1213.7 L1842.19 1213.7 L1841.6 1213.7 L1841.01 1213.7 L1840.43 1213.7 L1839.84 1213.7 L1839.26 1213.7 L1838.67 1213.7 L1838.08 1213.7 L1837.5 1213.7 L1836.91 1213.7 L1836.32 1213.7 L1835.74 1213.7 L1835.15 1213.7 L1834.56 1213.7 L1833.98 1213.7 L1833.39 1213.7 L1832.81 1213.7 L1832.22 1213.7 L1831.63 1213.7 L1831.05 1213.7 L1830.46 1213.7 L1829.87 1213.7 L1829.29 1213.7 L1828.7 1213.7 L1828.11 1213.7 L1827.53 1213.7 L1826.94 1213.7 L1826.35 1213.7 L1825.77 1213.7 L1825.18 1213.7 L1824.6 1213.7 L1824.01 1213.7 L1823.42 1213.7 L1822.84 1213.7 L1822.25 1213.7 L1821.66 1213.7 L1821.08 1213.7 L1820.49 1213.7 L1819.9 1213.7 L1819.32 1213.7 L1818.73 1213.7 L1818.14 1213.7 L1817.56 1213.7 L1816.97 1213.7 L1816.39 1213.7 L1815.8 1213.7 L1815.21 1213.7 L1814.63 1213.7 L1814.04 1213.7 L1813.45 1213.7 L1812.87 1213.7 L1812.28 1213.7 L1811.69 1213.7 L1811.11 1213.7 L1810.52 1213.7 L1809.94 1213.7 L1809.35 1213.7 L1808.76 1213.7 L1808.18 1213.7 L1807.59 1213.7 L1807 1213.7 L1806.42 1213.7 L1805.83 1213.7 L1805.24 1213.7 L1804.66 1213.7 L1804.07 1213.7 L1803.48 1213.7 L1802.9 1213.7 L1802.31 1213.7 L1801.73 1213.7 L1801.14 1213.7 L1800.55 1213.7 L1799.97 1213.7 L1799.38 1213.7 L1798.79 1213.7 L1798.21 1213.7 L1797.62 1213.7 L1797.03 1213.7 L1796.45 1213.7 L1795.86 1213.7 L1795.27 1213.7 L1794.69 1213.7 L1794.1 1213.7 L1793.52 1213.7 L1792.93 1213.7 L1792.34 1213.7 L1791.76 1213.7 L1791.17 1213.7 L1790.58 1213.7 L1790 1213.7 L1789.41 1213.7 L1788.82 1213.7 L1788.24 1213.7 L1787.65 1213.7 L1787.06 1213.7 L1786.48 1213.7 L1785.89 1213.7 L1785.31 1213.7 L1784.72 1213.7 L1784.13 1213.7 L1783.55 1213.7 L1782.96 1213.7 L1782.37 1213.7 L1781.79 1213.7 L1781.2 1213.7 L1780.61 1213.7 L1780.03 1213.7 L1779.44 1213.7 L1778.86 1213.7 L1778.27 1213.7 L1777.68 1213.7 L1777.1 1213.7 L1776.51 1213.7 L1775.92 1213.7 L1775.34 1213.7 L1774.75 1213.7 L1774.16 1213.7 L1773.58 1213.7 L1772.99 1213.7 L1772.4 1213.7 L1771.82 1213.7 L1771.23 1213.7 L1770.65 1213.7 L1770.06 1213.7 L1769.47 1213.7 L1768.89 1213.7 L1768.3 1213.7 L1767.71 1213.7 L1767.13 1213.7 L1766.54 1213.7 L1765.95 1213.7 L1765.37 1213.7 L1764.78 1213.7 L1764.19 1213.7 L1763.61 1213.7 L1763.02 1213.7 L1762.44 1213.7 L1761.85 1213.7 L1761.26 1213.7 L1760.68 1213.7 L1760.09 1213.7 L1759.5 1213.7 L1758.92 1213.7 L1758.33 1213.7 L1757.74 1213.7 L1757.16 1213.7 L1756.57 1213.7 L1755.99 1213.7 L1755.4 1213.7 L1754.81 1213.7 L1754.23 1213.7 L1753.64 1213.7 L1753.05 1213.7 L1752.47 1213.7 L1751.88 1213.7 L1751.29 1213.7 L1750.71 1213.7 L1750.12 1213.7 L1749.53 1213.7 L1748.95 1213.7 L1748.36 1213.7 L1747.78 1213.7 L1747.19 1213.7 L1746.6 1213.7 L1746.02 1213.7 L1745.43 1213.7 L1744.84 1213.7 L1744.26 1213.7 L1743.67 1213.7 L1743.08 1213.7 L1742.5 1213.7 L1741.91 1213.7 L1741.32 1213.7 L1740.74 1213.7 L1740.15 1213.7 L1739.57 1213.7 L1738.98 1213.7 L1738.39 1213.7 L1737.81 1213.7 L1737.22 1213.7 L1736.63 1213.7 L1736.05 1213.7 L1735.46 1213.7 L1734.87 1213.7 L1734.29 1213.7 L1733.7 1213.7 L1733.11 1213.7 L1732.53 1213.7 L1731.94 1213.7 L1731.36 1213.7 L1730.77 1213.7 L1730.18 1213.7 L1729.6 1213.7 L1729.01 1213.7 L1728.42 1213.7 L1727.84 1213.7 L1727.25 1213.7 L1726.66 1213.7 L1726.08 1213.7 L1725.49 1213.7 L1724.91 1213.7 L1724.32 1213.7 L1723.73 1213.7 L1723.15 1213.7 L1722.56 1213.7 L1721.97 1213.7 L1721.39 1213.7 L1720.8 1213.7 L1720.21 1213.7 L1719.63 1213.7 L1719.04 1213.7 L1718.45 1213.7 L1717.87 1213.7 L1717.28 1213.7 L1716.7 1213.7 L1716.11 1213.7 L1715.52 1213.7 L1714.94 1213.7 L1714.35 1213.7 L1713.76 1213.7 L1713.18 1213.7 L1712.59 1213.7 L1712 1213.7 L1711.42 1213.7 L1710.83 1213.7 L1710.24 1213.7 L1709.66 1213.7 L1709.07 1213.7 L1708.49 1213.7 L1707.9 1213.7 L1707.31 1213.7 L1706.73 1213.7 L1706.14 1213.7 L1705.55 1213.7 L1704.97 1213.7 L1704.38 1213.7 L1703.79 1213.7 L1703.21 1213.7 L1702.62 1213.7 L1702.04 1213.7 L1701.45 1213.7 L1700.86 1213.7 L1700.28 1213.7 L1699.69 1213.7 L1699.1 1213.7 L1698.52 1213.7 L1697.93 1213.7 L1697.34 1213.7 L1696.76 1213.7 L1696.17 1213.7 L1695.58 1213.7 L1695 1213.7 L1694.41 1213.7 L1693.83 1213.7 L1693.24 1213.7 L1692.65 1213.7 L1692.07 1213.7 L1691.48 1213.7 L1690.89 1213.7 L1690.31 1213.7 L1689.72 1213.7 L1689.13 1213.7 L1688.55 1213.7 L1687.96 1213.7 L1687.37 1213.7 L1686.79 1213.7 L1686.2 1213.7 L1685.62 1213.7 L1685.03 1213.7 L1684.44 1213.7 L1683.86 1213.7 L1683.27 1213.7 L1682.68 1213.7 L1682.1 1213.7 L1681.51 1213.7 L1680.92 1213.7 L1680.34 1213.7 L1679.75 1213.7 L1679.17 1213.7 L1678.58 1213.7 L1677.99 1213.7 L1677.41 1213.7 L1676.82 1213.7 L1676.23 1213.7 L1675.65 1213.7 L1675.06 1213.7 L1674.47 1213.7 L1673.89 1213.7 L1673.3 1213.7 L1672.71 1213.7 L1672.13 1213.7 L1671.54 1213.7 L1670.96 1213.7 L1670.37 1213.7 L1669.78 1213.7 L1669.2 1213.7 L1668.61 1213.7 L1668.02 1213.7 L1667.44 1213.7 L1666.85 1213.7 L1666.26 1213.7 L1665.68 1213.7 L1665.09 1213.7 L1664.5 1213.7 L1663.92 1213.7 L1663.33 1213.7 L1662.75 1213.7 L1662.16 1213.7 L1661.57 1213.7 L1660.99 1213.7 L1660.4 1213.7 L1659.81 1213.7 L1659.23 1213.7 L1658.64 1213.7 L1658.05 1213.7 L1657.47 1213.7 L1656.88 1213.7 L1656.29 1213.7 L1655.71 1213.7 L1655.12 1213.7 L1654.54 1213.7 L1653.95 1213.7 L1653.36 1213.7 L1652.78 1213.7 L1652.19 1213.7 L1651.6 1213.7 L1651.02 1213.7 L1650.43 1213.7 L1649.84 1213.7 L1649.26 1213.7 L1648.67 1213.7 L1648.09 1213.7 L1647.5 1213.7 L1646.91 1213.7 L1646.33 1213.7 L1645.74 1213.7 L1645.15 1213.7 L1644.57 1213.7 L1643.98 1213.7 L1643.39 1213.7 L1642.81 1213.7 L1642.22 1213.7 L1641.63 1213.7 L1641.05 1213.7 L1640.46 1213.7 L1639.88 1213.7 L1639.29 1213.7 L1638.7 1213.7 L1638.12 1213.7 L1637.53 1213.7 L1636.94 1213.7 L1636.36 1213.7 L1635.77 1213.7 L1635.18 1213.7 L1634.6 1213.7 L1634.01 1213.7 L1633.42 1213.7 L1632.84 1213.7 L1632.25 1213.7 L1631.67 1213.7 L1631.08 1213.7 L1630.49 1213.7 L1629.91 1213.7 L1629.32 1213.7 L1628.73 1213.7 L1628.15 1213.7 L1627.56 1213.7 L1626.97 1213.7 L1626.39 1213.7 L1625.8 1213.7 L1625.22 1213.7 L1624.63 1213.7 L1624.04 1213.7 L1623.46 1213.7 L1622.87 1213.7 L1622.28 1213.7 L1621.7 1213.7 L1621.11 1213.7 L1620.52 1213.7 L1619.94 1213.7 L1619.35 1213.7 L1618.76 1213.7 L1618.18 1213.7 L1617.59 1213.7 L1617.01 1213.7 L1616.42 1213.7 L1615.83 1213.7 L1615.25 1213.7 L1614.66 1213.7 L1614.07 1213.7 L1613.49 1213.7 L1612.9 1213.7 L1612.31 1213.7 L1611.73 1213.7 L1611.14 1213.7 L1610.55 1213.7 L1609.97 1213.7 L1609.38 1213.7 L1608.8 1213.7 L1608.21 1213.7 L1607.62 1213.7 L1607.04 1213.7 L1606.45 1213.7 L1605.86 1213.7 L1605.28 1213.7 L1604.69 1213.7 L1604.1 1213.7 L1603.52 1213.7 L1602.93 1213.7 L1602.34 1213.7 L1601.76 1213.7 L1601.17 1213.7 L1600.59 1213.7 L1600 1213.7 L1599.41 1213.7 L1598.83 1213.7 L1598.24 1213.7 L1597.65 1213.7 L1597.07 1213.7 L1596.48 1213.7 L1595.89 1213.7 L1595.31 1213.7 L1594.72 1213.7 L1594.14 1213.7 L1593.55 1213.7 L1592.96 1213.7 L1592.38 1213.7 L1591.79 1213.7 L1591.2 1213.7 L1590.62 1213.7 L1590.03 1213.7 L1589.44 1213.7 L1588.86 1213.7 L1588.27 1213.7 L1587.68 1213.7 L1587.1 1213.7 L1586.51 1213.7 L1585.93 1213.7 L1585.34 1213.7 L1584.75 1213.7 L1584.17 1213.7 L1583.58 1213.7 L1582.99 1213.7 L1582.41 1213.7 L1581.82 1213.7 L1581.23 1213.7 L1580.65 1213.7 L1580.06 1213.7 L1579.47 1213.7 L1578.89 1213.7 L1578.3 1213.7 L1577.72 1213.7 L1577.13 1213.7 L1576.54 1213.7 L1575.96 1213.7 L1575.37 1213.7 L1574.78 1213.7 L1574.2 1213.7 L1573.61 1213.7 L1573.02 1213.7 L1572.44 1213.7 L1571.85 1213.7 L1571.27 1213.7 L1570.68 1213.7 L1570.09 1213.7 L1569.51 1213.7 L1568.92 1213.7 L1568.33 1213.7 L1567.75 1213.7 L1567.16 1213.7 L1566.57 1213.7 L1565.99 1213.7 L1565.4 1213.7 L1564.81 1213.7 L1564.23 1213.7 L1563.64 1213.7 L1563.06 1213.7 L1562.47 1213.7 L1561.88 1213.7 L1561.3 1213.7 L1560.71 1213.7 L1560.12 1213.7 L1559.54 1213.7 L1558.95 1213.7 L1558.36 1213.7 L1557.78 1213.7 L1557.19 1213.7 L1556.6 1213.7 L1556.02 1213.7 L1555.43 1213.7 L1554.85 1213.7 L1554.26 1213.7 L1553.67 1213.7 L1553.09 1213.7 L1552.5 1213.7 L1551.91 1213.7 L1551.33 1213.7 L1550.74 1213.7 L1550.15 1213.7 L1549.57 1213.7 L1548.98 1213.7 L1548.4 1213.7 L1547.81 1213.7 L1547.22 1213.7 L1546.64 1213.7 L1546.05 1213.7 L1545.46 1213.7 L1544.88 1213.7 L1544.29 1213.7 L1543.7 1213.7 L1543.12 1213.7 L1542.53 1213.7 L1541.94 1213.7 L1541.36 1213.7 L1540.77 1213.7 L1540.19 1213.7 L1539.6 1213.7 L1539.01 1213.7 L1538.43 1213.7 L1537.84 1213.7 L1537.25 1213.7 L1536.67 1213.7 L1536.08 1213.7 L1535.49 1213.7 L1534.91 1213.7 L1534.32 1213.7 L1533.73 1213.7 L1533.15 1213.7 L1532.56 1213.7 L1531.98 1213.7 L1531.39 1213.7 L1530.8 1213.7 L1530.22 1213.7 L1529.63 1213.7 L1529.04 1213.7 L1528.46 1213.7 L1527.87 1213.7 L1527.28 1213.7 L1526.7 1213.7 L1526.11 1213.7 L1525.52 1213.7 L1524.94 1213.7 L1524.35 1213.7 L1523.77 1213.7 L1523.18 1213.7 L1522.59 1213.7 L1522.01 1213.7 L1521.42 1213.7 L1520.83 1213.7 L1520.25 1213.7 L1519.66 1213.7 L1519.07 1213.7 L1518.49 1213.7 L1517.9 1213.7 L1517.32 1213.7 L1516.73 1213.7 L1516.14 1213.7 L1515.56 1213.7 L1514.97 1213.7 L1514.38 1213.7 L1513.8 1213.7 L1513.21 1213.7 L1512.62 1213.7 L1512.04 1213.7 L1511.45 1213.7 L1510.86 1213.7 L1510.28 1213.7 L1509.69 1213.7 L1509.11 1213.7 L1508.52 1213.7 L1507.93 1213.7 L1507.35 1213.7 L1506.76 1213.7 L1506.17 1213.7 L1505.59 1213.7 L1505 1213.7 L1504.41 1213.7 L1503.83 1213.7 L1503.24 1213.7 L1502.65 1213.7 L1502.07 1213.7 L1501.48 1213.7 L1500.9 1213.7 L1500.31 1213.7 L1499.72 1213.7 L1499.14 1213.7 L1498.55 1213.7 L1497.96 1213.7 L1497.38 1213.7 L1496.79 1213.7 L1496.2 1213.7 L1495.62 1213.7 L1495.03 1213.7 L1494.45 1213.7 L1493.86 1213.7 L1493.27 1213.7 L1492.69 1213.7 L1492.1 1213.7 L1491.51 1213.7 L1490.93 1213.7 L1490.34 1213.7 L1489.75 1213.7 L1489.17 1213.7 L1488.58 1213.7 L1487.99 1213.7 L1487.41 1213.7 L1486.82 1213.7 L1486.24 1213.7 L1485.65 1213.7 L1485.06 1213.7 L1484.48 1213.7 L1483.89 1213.7 L1483.3 1213.7 L1482.72 1213.7 L1482.13 1213.7 L1481.54 1213.7 L1480.96 1213.7 L1480.37 1213.7 L1479.78 1213.7 L1479.2 1213.7 L1478.61 1213.7 L1478.03 1213.7 L1477.44 1213.7 L1476.85 1213.7 L1476.27 1213.7 L1475.68 1213.7 L1475.09 1213.7 L1474.51 1213.7 L1473.92 1213.7 L1473.33 1213.7 L1472.75 1213.7 L1472.16 1213.7 L1471.57 1213.7 L1470.99 1213.7 L1470.4 1213.7 L1469.82 1213.7 L1469.23 1213.7 L1468.64 1213.7 L1468.06 1213.7 L1467.47 1213.7 L1466.88 1213.7 L1466.3 1213.7 L1465.71 1213.7 L1465.12 1213.7 L1464.54 1213.7 L1463.95 1213.7 L1463.37 1213.7 L1462.78 1213.7 L1462.19 1213.7 L1461.61 1213.7 L1461.02 1213.7 L1460.43 1213.7 L1459.85 1213.7 L1459.26 1213.7 L1458.67 1213.7 L1458.09 1213.7 L1457.5 1213.7 L1456.91 1213.7 L1456.33 1213.7 L1455.74 1213.7 L1455.16 1213.7 L1454.57 1213.7 L1453.98 1213.7 L1453.4 1213.7 L1452.81 1213.7 L1452.22 1213.7 L1451.64 1213.7 L1451.05 1213.7 L1450.46 1213.7 L1449.88 1213.7 L1449.29 1213.7 L1448.7 1213.7 L1448.12 1213.7 L1447.53 1213.7 L1446.95 1213.7 L1446.36 1213.7 L1445.77 1213.7 L1445.19 1213.7 L1444.6 1213.7 L1444.01 1213.7 L1443.43 1213.7 L1442.84 1213.7 L1442.25 1213.7 L1441.67 1213.7 L1441.08 1213.7 L1440.5 1213.7 L1439.91 1213.7 L1439.32 1213.7 L1438.74 1213.7 L1438.15 1213.7 L1437.56 1213.7 L1436.98 1213.7 L1436.39 1213.7 L1435.8 1213.7 L1435.22 1213.7 L1434.63 1213.7 L1434.04 1213.7 L1433.46 1213.7 L1432.87 1213.7 L1432.29 1213.7 L1431.7 1213.7 L1431.11 1213.7 L1430.53 1213.7 L1429.94 1213.7 L1429.35 1213.7 L1428.77 1213.7 L1428.18 1213.7 L1427.59 1213.7 L1427.01 1213.7 L1426.42 1213.7 L1425.83 1213.7 L1425.25 1213.7 L1424.66 1213.7 L1424.08 1213.7 L1423.49 1213.7 L1422.9 1213.7 L1422.32 1213.7 L1421.73 1213.7 L1421.14 1213.7 L1420.56 1213.7 L1419.97 1213.7 L1419.38 1213.7 L1418.8 1213.7 L1418.21 1213.7 L1417.63 1213.7 L1417.04 1213.7 L1416.45 1213.7 L1415.87 1213.7 L1415.28 1213.7 L1414.69 1213.7 L1414.11 1213.7 L1413.52 1213.7 L1412.93 1213.7 L1412.35 1213.7 L1411.76 1213.7 L1411.17 1213.7 L1410.59 1213.7 L1410 1213.7 L1409.42 1213.7 L1408.83 1213.7 L1408.24 1213.7 L1407.66 1213.7 L1407.07 1213.7 L1406.48 1213.7 L1405.9 1213.7 L1405.31 1213.7 L1404.72 1213.7 L1404.14 1213.7 L1403.55 1213.7 L1402.96 1213.7 L1402.38 1213.7 L1401.79 1213.7 L1401.21 1213.7 L1400.62 1213.7 L1400.03 1213.7 L1399.45 1213.7 L1398.86 1213.7 L1398.27 1213.7 L1397.69 1213.7 L1397.1 1213.7 L1396.51 1213.7 L1395.93 1213.7 L1395.34 1213.7 L1394.75 1213.7 L1394.17 1213.7 L1393.58 1213.7 L1393 1213.7 L1392.41 1213.7 L1391.82 1213.7 L1391.24 1213.7 L1390.65 1213.7 L1390.06 1213.7 L1389.48 1213.7 L1388.89 1213.7 L1388.3 1213.7 L1387.72 1213.7 L1387.13 1213.7 L1386.55 1213.7 L1385.96 1213.7 L1385.37 1213.7 L1384.79 1213.7 L1384.2 1213.7 L1383.61 1213.7 L1383.03 1213.7 L1382.44 1213.7 L1381.85 1213.7 L1381.27 1213.7 L1380.68 1213.7 L1380.09 1213.7 L1379.51 1213.7 L1378.92 1213.7 L1378.34 1213.7 L1377.75 1213.7 L1377.16 1213.7 L1376.58 1213.7 L1375.99 1213.7 L1375.4 1213.7 L1374.82 1213.7 L1374.23 1213.7 L1373.64 1213.7 L1373.06 1213.7 L1372.47 1213.7 L1371.88 1213.7 L1371.3 1213.7 L1370.71 1213.7 L1370.13 1213.7 L1369.54 1213.7 L1368.95 1213.7 L1368.37 1213.7 L1367.78 1213.7 L1367.19 1213.7 L1366.61 1213.7 L1366.02 1213.7 L1365.43 1213.7 L1364.85 1213.7 L1364.26 1213.7 L1363.68 1213.7 L1363.09 1213.7 L1362.5 1213.7 L1361.92 1213.7 L1361.33 1213.7 L1360.74 1213.7 L1360.16 1213.7 L1359.57 1213.7 L1358.98 1213.7 L1358.4 1213.7 L1357.81 1213.7 L1357.22 1213.7 L1356.64 1213.7 L1356.05 1213.7 L1355.47 1213.7 L1354.88 1213.7 L1354.29 1213.7 L1353.71 1213.7 L1353.12 1213.7 L1352.53 1213.7 L1351.95 1213.7 L1351.36 1213.7 L1350.77 1213.7 L1350.19 1213.7 L1349.6 1213.7 L1349.01 1213.7 L1348.43 1213.7 L1347.84 1213.7 L1347.26 1213.7 L1346.67 1213.7 L1346.08 1213.7 L1345.5 1213.7 L1344.91 1213.7 L1344.32 1213.7 L1343.74 1213.7 L1343.15 1213.7 L1342.56 1213.7 L1341.98 1213.7 L1341.39 1213.7 L1340.8 1213.7 L1340.22 1213.7 L1339.63 1213.7 L1339.05 1213.7 L1338.46 1213.7 L1337.87 1213.7 L1337.29 1213.7 L1336.7 1213.7 L1336.11 1213.7 L1335.53 1213.7 L1334.94 1213.7 L1334.35 1213.7 L1333.77 1213.7 L1333.18 1213.7 L1332.6 1213.7 L1332.01 1213.7 L1331.42 1213.7 L1330.84 1213.7 L1330.25 1213.7 L1329.66 1213.7 L1329.08 1213.7 L1328.49 1213.7 L1327.9 1213.7 L1327.32 1213.7 L1326.73 1213.7 L1326.14 1213.7 L1325.56 1213.7 L1324.97 1213.7 L1324.39 1213.7 L1323.8 1213.7 L1323.21 1213.7 L1322.63 1213.7 L1322.04 1213.7 L1321.45 1213.7 L1320.87 1213.7 L1320.28 1213.7 L1319.69 1213.7 L1319.11 1213.7 L1318.52 1213.7 L1317.93 1213.7 L1317.35 1213.7 L1316.76 1213.7 L1316.18 1213.7 L1315.59 1213.7 L1315 1213.7 L1314.42 1213.7 L1313.83 1213.7 L1313.24 1213.7 L1312.66 1213.7 L1312.07 1213.7 L1311.48 1213.7 L1310.9 1213.7 L1310.31 1213.7 L1309.73 1213.7 L1309.14 1213.7 L1308.55 1213.7 L1307.97 1213.7 L1307.38 1213.7 L1306.79 1213.7 L1306.21 1213.7 L1305.62 1213.7 L1305.03 1213.7 L1304.45 1213.7 L1303.86 1213.7 L1303.27 1213.7 L1302.69 1213.7 L1302.1 1213.7 L1301.52 1213.7 L1300.93 1213.7 L1300.34 1213.7 L1299.76 1213.7 L1299.17 1213.7 L1298.58 1213.7 L1298 1213.7 L1297.41 1213.7 L1296.82 1213.7 L1296.24 1213.7 L1295.65 1213.7 L1295.06 1213.7 L1294.48 1213.7 L1293.89 1213.7 L1293.31 1213.7 L1292.72 1213.7 L1292.13 1213.7 L1291.55 1213.7 L1290.96 1213.7 L1290.37 1213.7 L1289.79 1213.7 L1289.2 1213.7 L1288.61 1213.7 L1288.03 1213.7 L1287.44 1213.7 L1286.86 1213.7 L1286.27 1213.7 L1285.68 1213.7 L1285.1 1213.7 L1284.51 1213.7 L1283.92 1213.7 L1283.34 1213.7 L1282.75 1213.7 L1282.16 1213.7 L1281.58 1213.7 L1280.99 1213.7 L1280.4 1213.7 L1279.82 1213.7 L1279.23 1213.7 L1278.65 1213.7 L1278.06 1213.7 L1277.47 1213.7 L1276.89 1213.7 L1276.3 1213.7 L1275.71 1213.7 L1275.13 1213.7 L1274.54 1213.7 L1273.95 1213.7 L1273.37 1213.7 L1272.78 1213.7 L1272.19 1213.7 L1271.61 1213.7 L1271.02 1213.7 L1270.44 1213.7 L1269.85 1213.7 L1269.26 1213.7 L1268.68 1213.7 L1268.09 1213.7 L1267.5 1213.7 L1266.92 1213.7 L1266.33 1213.7 L1265.74 1213.7 L1265.16 1213.7 L1264.57 1213.7 L1263.98 1213.7 L1263.4 1213.7 L1262.81 1213.7 L1262.23 1213.7 L1261.64 1213.7 L1261.05 1213.7 L1260.47 1213.7 L1259.88 1213.7 L1259.29 1213.7 L1258.71 1213.7 L1258.12 1213.7 L1257.53 1213.7 L1256.95 1213.7 L1256.36 1213.7 L1255.78 1213.7 L1255.19 1213.7 L1254.6 1213.7 L1254.02 1213.7 L1253.43 1213.7 L1252.84 1213.7 L1252.26 1213.7 L1251.67 1213.7 L1251.08 1213.7 L1250.5 1213.7 L1249.91 1213.7 L1249.32 1213.7 L1248.74 1213.7 L1248.15 1213.7 L1247.57 1213.7 L1246.98 1213.7 L1246.39 1213.7 L1245.81 1213.7 L1245.22 1213.7 L1244.63 1213.7 L1244.05 1213.7 L1243.46 1213.7 L1242.87 1213.7 L1242.29 1213.7 L1241.7 1213.7 L1241.11 1213.7 L1240.53 1213.7 L1239.94 1213.7 L1239.36 1213.7 L1238.77 1213.7 L1238.18 1213.7 L1237.6 1213.7 L1237.01 1213.7 L1236.42 1213.7 L1235.84 1213.7 L1235.25 1213.7 L1234.66 1213.7 L1234.08 1213.7 L1233.49 1213.7 L1232.91 1213.7 L1232.32 1213.7 L1231.73 1213.7 L1231.15 1213.7 L1230.56 1213.7 L1229.97 1213.7 L1229.39 1213.7 L1228.8 1213.7 L1228.21 1213.7 L1227.63 1213.7 L1227.04 1213.7 L1226.45 1213.7 L1225.87 1213.7 L1225.28 1213.7 L1224.7 1213.7 L1224.11 1213.7 L1223.52 1213.7 L1222.94 1213.7 L1222.35 1213.7 L1221.76 1213.7 L1221.18 1213.7 L1220.59 1213.7 L1220 1213.7 L1219.42 1213.7 L1218.83 1213.7 L1218.24 1213.7 L1217.66 1213.7 L1217.07 1213.7 L1216.49 1213.7 L1215.9 1213.7 L1215.31 1213.7 L1214.73 1213.7 L1214.14 1213.7 L1213.55 1213.7 L1212.97 1213.7 L1212.38 1213.7 L1211.79 1213.7 L1211.21 1213.7 L1210.62 1213.7 L1210.03 1213.7 L1209.45 1213.7 L1208.86 1213.7 L1208.28 1213.7 L1207.69 1213.7 L1207.1 1213.7 L1206.52 1213.7 L1205.93 1213.7 L1205.34 1213.7 L1204.76 1213.7 L1204.17 1213.7 L1203.58 1213.7 L1203 1213.7 L1202.41 1213.7 L1201.83 1213.7 L1201.24 1213.7 L1200.65 1213.7 L1200.07 1213.7 L1199.48 1213.7 L1198.89 1213.7 L1198.31 1213.7 L1197.72 1213.7 L1197.13 1213.7 L1196.55 1213.7 L1195.96 1213.7 L1195.37 1213.7 L1194.79 1213.7 L1194.2 1213.7 L1193.62 1213.7 L1193.03 1213.7 L1192.44 1213.7 L1191.86 1213.7 L1191.27 1213.7 L1190.68 1213.7 L1190.1 1213.7 L1189.51 1213.7 L1188.92 1213.7 L1188.34 1213.7 L1187.75 1213.7 L1187.16 1213.7 L1186.58 1213.7 L1185.99 1213.7 L1185.41 1213.7 L1184.82 1213.7 L1184.23 1213.7 L1183.65 1213.7 L1183.06 1213.7 L1182.47 1213.7 L1181.89 1213.7 L1181.3 1213.7 L1180.71 1213.7 L1180.13 1213.7 L1179.54 1213.7 L1178.96 1213.7 L1178.37 1213.7 L1177.78 1213.7 L1177.2 1213.7 L1176.61 1213.7 L1176.02 1213.7 L1175.44 1213.7 L1174.85 1213.7 L1174.26 1213.7 L1173.68 1213.7 L1173.09 1213.7 L1172.5 1213.7 L1171.92 1213.7 L1171.33 1213.7 L1170.75 1213.7 L1170.16 1213.7 L1169.57 1213.7 L1168.99 1213.7 L1168.4 1213.7 L1167.81 1213.7 L1167.23 1213.7 L1166.64 1213.7 L1166.05 1213.7 L1165.47 1213.7 L1164.88 1213.7 L1164.29 1213.7 L1163.71 1213.7 L1163.12 1213.7 L1162.54 1213.7 L1161.95 1213.7 L1161.36 1213.7 L1160.78 1213.7 L1160.19 1213.7 L1159.6 1213.7 L1159.02 1213.7 L1158.43 1213.7 L1157.84 1213.7 L1157.26 1213.7 L1156.67 1213.7 L1156.09 1213.7 L1155.5 1213.7 L1154.91 1213.7 L1154.33 1213.7 L1153.74 1213.7 L1153.15 1213.7 L1152.57 1213.7 L1151.98 1213.7 L1151.39 1213.7 L1150.81 1213.7 L1150.22 1213.7 L1149.63 1213.7 L1149.05 1213.7 L1148.46 1213.7 L1147.88 1213.7 L1147.29 1213.7 L1146.7 1213.7 L1146.12 1213.7 L1145.53 1213.7 L1144.94 1213.7 L1144.36 1213.7 L1143.77 1213.7 L1143.18 1213.7 L1142.6 1213.7 L1142.01 1213.7 L1141.42 1213.7 L1140.84 1213.7 L1140.25 1213.7 L1139.67 1213.7 L1139.08 1213.7 L1138.49 1213.7 L1137.91 1213.7 L1137.32 1213.7 L1136.73 1213.7 L1136.15 1213.7 L1135.56 1213.7 L1134.97 1213.7 L1134.39 1213.7 L1133.8 1213.7 L1133.21 1213.7 L1132.63 1213.7 L1132.04 1213.7 L1131.46 1213.7 L1130.87 1213.7 L1130.28 1213.7 L1129.7 1213.7 L1129.11 1213.7 L1128.52 1213.7 L1127.94 1213.7 L1127.35 1213.7 L1126.76 1213.7 L1126.18 1213.7 L1125.59 1213.7 L1125.01 1213.7 L1124.42 1213.7 L1123.83 1213.7 L1123.25 1213.7 L1122.66 1213.7 L1122.07 1213.7 L1121.49 1213.7 L1120.9 1213.7 L1120.31 1213.7 L1119.73 1213.7 L1119.14 1213.7 L1118.55 1213.7 L1117.97 1213.7 L1117.38 1213.7 L1116.8 1213.7 L1116.21 1213.7 L1115.62 1213.7 L1115.04 1213.7 L1114.45 1213.7 L1113.86 1213.7 L1113.28 1213.7 L1112.69 1213.7 L1112.1 1213.7 L1111.52 1213.7 L1110.93 1213.7 L1110.34 1213.7 L1109.76 1213.7 L1109.17 1213.7 L1108.59 1213.7 L1108 1213.7 L1107.41 1213.7 L1106.83 1213.7 L1106.24 1213.7 L1105.65 1213.7 L1105.07 1213.7 L1104.48 1213.7 L1103.89 1213.7 L1103.31 1213.7 L1102.72 1213.7 L1102.14 1213.7 L1101.55 1213.7 L1100.96 1213.7 L1100.38 1213.7 L1099.79 1213.7 L1099.2 1213.7 L1098.62 1213.7 L1098.03 1213.7 L1097.44 1213.7 L1096.86 1213.7 L1096.27 1213.7 L1095.68 1213.7 L1095.1 1213.7 L1094.51 1213.7 L1093.93 1213.7 L1093.34 1213.7 L1092.75 1213.7 L1092.17 1213.7 L1091.58 1213.7 L1090.99 1213.7 L1090.41 1213.7 L1089.82 1213.7 L1089.23 1213.7 L1088.65 1213.7 L1088.06 1213.7 L1087.47 1213.7 L1086.89 1213.7 L1086.3 1213.7 L1085.72 1213.7 L1085.13 1213.7 L1084.54 1213.7 L1083.96 1213.7 L1083.37 1213.7 L1082.78 1213.7 L1082.2 1213.7 L1081.61 1213.7 L1081.02 1213.7 L1080.44 1213.7 L1079.85 1213.7 L1079.26 1213.7 L1078.68 1213.7 L1078.09 1213.7 L1077.51 1213.7 L1076.92 1213.7 L1076.33 1213.7 L1075.75 1213.7 L1075.16 1213.7 L1074.57 1213.7 L1073.99 1213.7 L1073.4 1213.7 L1072.81 1213.7 L1072.23 1213.7 L1071.64 1213.7 L1071.06 1213.7 L1070.47 1213.7 L1069.88 1213.7 L1069.3 1213.7 L1068.71 1213.7 L1068.12 1213.7 L1067.54 1213.7 L1066.95 1213.7 L1066.36 1213.7 L1065.78 1213.7 L1065.19 1213.7 L1064.6 1213.7 L1064.02 1213.7 L1063.43 1213.7 L1062.85 1213.7 L1062.26 1213.7 L1061.67 1213.7 L1061.09 1213.7 L1060.5 1213.7 L1059.91 1213.7 L1059.33 1213.7 L1058.74 1213.7 L1058.15 1213.7 L1057.57 1213.7 L1056.98 1213.7 L1056.39 1213.7 L1055.81 1213.7 L1055.22 1213.7 L1054.64 1213.7 L1054.05 1213.7 L1053.46 1213.7 L1052.88 1213.7 L1052.29 1213.7 L1051.7 1213.7 L1051.12 1213.7 L1050.53 1213.7 L1049.94 1213.7 L1049.36 1213.7 L1048.77 1213.7 L1048.19 1213.7 L1047.6 1213.7 L1047.01 1213.7 L1046.43 1213.7 L1045.84 1213.7 L1045.25 1213.7 L1044.67 1213.7 L1044.08 1213.7 L1043.49 1213.7 L1042.91 1213.7 L1042.32 1213.7 L1041.73 1213.7 L1041.15 1213.7 L1040.56 1213.7 L1039.98 1213.7 L1039.39 1213.7 L1038.8 1213.7 L1038.22 1213.7 L1037.63 1213.7 L1037.04 1213.7 L1036.46 1213.7 L1035.87 1213.7 L1035.28 1213.7 L1034.7 1213.7 L1034.11 1213.7 L1033.52 1213.7 L1032.94 1213.7 L1032.35 1213.7 L1031.77 1213.7 L1031.18 1213.7 L1030.59 1213.7 L1030.01 1213.7 L1029.42 1213.7 L1028.83 1213.7 L1028.25 1213.7 L1027.66 1213.7 L1027.07 1213.7 L1026.49 1213.7 L1025.9 1213.7 L1025.32 1213.7 L1024.73 1213.7 L1024.14 1213.7 L1023.56 1213.7 L1022.97 1213.7 L1022.38 1213.7 L1021.8 1213.7 L1021.21 1213.7 L1020.62 1213.7 L1020.04 1213.7 L1019.45 1213.7 L1018.86 1213.7 L1018.28 1213.7 L1017.69 1213.7 L1017.11 1213.7 L1016.52 1213.7 L1015.93 1213.7 L1015.35 1213.7 L1014.76 1213.7 L1014.17 1213.7 L1013.59 1213.7 L1013 1213.7 L1012.41 1213.7 L1011.83 1213.7 L1011.24 1213.7 L1010.65 1213.7 L1010.07 1213.7 L1009.48 1213.7 L1008.9 1213.7 L1008.31 1213.7 L1007.72 1213.7 L1007.14 1213.7 L1006.55 1213.7 L1005.96 1213.7 L1005.38 1213.7 L1004.79 1213.7 L1004.2 1213.7 L1003.62 1213.7 L1003.03 1213.7 L1002.44 1213.7 L1001.86 1213.7 L1001.27 1213.7 L1000.69 1213.7 L1000.1 1213.7 L999.513 1213.7 L998.926 1213.7 L998.34 1213.7 L997.754 1213.7 L997.167 1213.7 L996.581 1213.7 L995.994 1213.7 L995.408 1213.7 L994.822 1213.7 L994.235 1213.7 L993.649 1213.7 L993.062 1213.7 L992.476 1213.7 L991.889 1213.7 L991.303 1213.7 L990.717 1213.7 L990.13 1213.7 L989.544 1213.7 L988.957 1213.7 L988.371 1213.7 L987.785 1213.7 L987.198 1213.7 L986.612 1213.7 L986.025 1213.7  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.07 986.612,1214.07 987.198,1214.07 987.785,1214.07 988.371,1214.07 988.957,1214.07 989.544,1214.07 990.13,1214.07 990.717,1214.07 991.303,1214.07 991.889,1214.07 992.476,1214.07 993.062,1214.07 993.649,1214.07 994.235,1214.07 994.822,1214.07 995.408,1214.07 995.994,1214.07 996.581,1214.07 997.167,1214.07 997.754,1214.07 998.34,1214.07 998.926,1214.07 999.513,1214.07 1000.1,1214.07 1000.69,1214.07 1001.27,1214.07 1001.86,1214.07 1002.44,1214.07 1003.03,1214.07 1003.62,1214.07 1004.2,1214.07 1004.79,1214.07 1005.38,1214.07 1005.96,1214.07 1006.55,1214.07 1007.14,1214.07 1007.72,1214.07 1008.31,1214.07 1008.9,1214.07 1009.48,1214.07 1010.07,1214.07 1010.65,1214.07 1011.24,1214.07 1011.83,1214.07 1012.41,1214.07 1013,1214.07 1013.59,1214.07 1014.17,1214.07 1014.76,1214.07 1015.35,1214.07 1015.93,1214.07 1016.52,1214.07 1017.11,1214.07 1017.69,1214.07 1018.28,1214.07 1018.86,1214.07 1019.45,1214.07 1020.04,1214.07 1020.62,1214.07 1021.21,1214.07 1021.8,1214.07 1022.38,1214.07 1022.97,1214.07 1023.56,1214.07 1024.14,1214.07 1024.73,1214.07 1025.32,1214.07 1025.9,1214.07 1026.49,1214.07 1027.07,1214.07 1027.66,1214.07 1028.25,1214.07 1028.83,1214.07 1029.42,1214.07 1030.01,1214.07 1030.59,1214.07 1031.18,1214.07 1031.77,1214.07 1032.35,1214.07 1032.94,1214.07 1033.52,1214.07 1034.11,1214.07 1034.7,1214.07 1035.28,1214.07 1035.87,1214.07 1036.46,1214.07 1037.04,1214.07 1037.63,1214.07 1038.22,1214.07 1038.8,1214.07 1039.39,1214.07 1039.98,1214.07 1040.56,1214.07 1041.15,1214.07 1041.73,1214.07 1042.32,1214.07 1042.91,1214.07 1043.49,1214.07 1044.08,1214.07 1044.67,1214.07 1045.25,1214.07 1045.84,1214.07 1046.43,1214.07 1047.01,1214.07 1047.6,1214.07 1048.19,1214.07 1048.77,1214.07 1049.36,1214.07 1049.94,1214.07 1050.53,1214.07 1051.12,1214.07 1051.7,1214.07 1052.29,1214.07 1052.88,1214.07 1053.46,1214.07 1054.05,1214.07 1054.64,1214.07 1055.22,1214.07 1055.81,1214.07 1056.39,1214.07 1056.98,1214.07 1057.57,1214.07 1058.15,1214.07 1058.74,1214.07 1059.33,1214.07 1059.91,1214.07 1060.5,1214.07 1061.09,1214.07 1061.67,1214.07 1062.26,1214.07 1062.85,1214.07 1063.43,1214.07 1064.02,1214.07 1064.6,1214.07 1065.19,1214.07 1065.78,1214.07 1066.36,1214.07 1066.95,1214.07 1067.54,1214.07 1068.12,1214.07 1068.71,1214.07 1069.3,1214.07 1069.88,1214.07 1070.47,1214.07 1071.06,1214.07 1071.64,1214.07 1072.23,1214.07 1072.81,1214.07 1073.4,1214.07 1073.99,1214.07 1074.57,1214.07 1075.16,1214.07 1075.75,1214.07 1076.33,1214.07 1076.92,1214.07 1077.51,1214.07 1078.09,1214.07 1078.68,1214.07 1079.26,1214.07 1079.85,1214.07 1080.44,1214.07 1081.02,1214.07 1081.61,1214.07 1082.2,1214.07 1082.78,1214.07 1083.37,1214.07 1083.96,1214.07 1084.54,1214.07 1085.13,1214.07 1085.72,1214.07 1086.3,1214.07 1086.89,1214.07 1087.47,1214.07 1088.06,1214.07 1088.65,1214.07 1089.23,1214.07 1089.82,1214.07 1090.41,1214.07 1090.99,1214.07 1091.58,1214.07 1092.17,1214.07 1092.75,1214.07 1093.34,1214.07 1093.93,1214.07 1094.51,1214.07 1095.1,1214.07 1095.68,1214.07 1096.27,1214.07 1096.86,1214.07 1097.44,1214.07 1098.03,1214.07 1098.62,1214.07 1099.2,1214.07 1099.79,1214.07 1100.38,1214.07 1100.96,1214.07 1101.55,1214.07 1102.14,1214.07 1102.72,1214.07 1103.31,1214.07 1103.89,1214.07 1104.48,1214.07 1105.07,1214.07 1105.65,1214.07 1106.24,1214.07 1106.83,1214.07 1107.41,1214.07 1108,1214.07 1108.59,1214.07 1109.17,1214.07 1109.76,1214.07 1110.34,1214.07 1110.93,1214.07 1111.52,1214.07 1112.1,1214.07 1112.69,1214.07 1113.28,1214.07 1113.86,1214.07 1114.45,1214.07 1115.04,1214.07 1115.62,1214.07 1116.21,1214.07 1116.8,1214.07 1117.38,1214.07 1117.97,1214.07 1118.55,1214.07 1119.14,1214.07 1119.73,1214.07 1120.31,1214.07 1120.9,1214.07 1121.49,1214.07 1122.07,1214.07 1122.66,1214.07 1123.25,1214.07 1123.83,1214.07 1124.42,1214.07 1125.01,1214.07 1125.59,1214.07 1126.18,1214.07 1126.76,1214.07 1127.35,1214.07 1127.94,1214.07 1128.52,1214.07 1129.11,1214.07 1129.7,1214.07 1130.28,1214.07 1130.87,1214.07 1131.46,1214.07 1132.04,1214.07 1132.63,1214.07 1133.21,1214.07 1133.8,1214.07 1134.39,1214.07 1134.97,1214.07 1135.56,1214.07 1136.15,1214.07 1136.73,1214.07 1137.32,1214.07 1137.91,1214.07 1138.49,1214.07 1139.08,1214.07 1139.67,1214.07 1140.25,1214.07 1140.84,1214.07 1141.42,1214.07 1142.01,1214.07 1142.6,1214.07 1143.18,1214.07 1143.77,1214.07 1144.36,1214.07 1144.94,1214.07 1145.53,1214.07 1146.12,1214.07 1146.7,1214.07 1147.29,1214.07 1147.88,1214.07 1148.46,1214.07 1149.05,1214.07 1149.63,1214.07 1150.22,1214.07 1150.81,1214.07 1151.39,1214.07 1151.98,1214.07 1152.57,1214.07 1153.15,1214.07 1153.74,1214.07 1154.33,1214.07 1154.91,1214.07 1155.5,1214.07 1156.09,1214.07 1156.67,1214.07 1157.26,1214.07 1157.84,1214.07 1158.43,1214.07 1159.02,1214.07 1159.6,1214.07 1160.19,1214.07 1160.78,1214.07 1161.36,1214.07 1161.95,1214.07 1162.54,1214.07 1163.12,1214.07 1163.71,1214.07 1164.29,1214.07 1164.88,1214.07 1165.47,1214.07 1166.05,1214.07 1166.64,1214.07 1167.23,1214.07 1167.81,1214.07 1168.4,1214.07 1168.99,1214.07 1169.57,1214.07 1170.16,1214.07 1170.75,1214.07 1171.33,1214.07 1171.92,1214.07 1172.5,1214.07 1173.09,1214.07 1173.68,1214.07 1174.26,1214.07 1174.85,1214.07 1175.44,1214.07 1176.02,1214.07 1176.61,1214.07 1177.2,1214.07 1177.78,1214.07 1178.37,1214.07 1178.96,1214.07 1179.54,1214.07 1180.13,1214.07 1180.71,1214.07 1181.3,1214.07 1181.89,1214.07 1182.47,1214.07 1183.06,1214.07 1183.65,1214.07 1184.23,1214.07 1184.82,1214.07 1185.41,1214.07 1185.99,1214.07 1186.58,1214.07 1187.16,1214.07 1187.75,1214.07 1188.34,1214.07 1188.92,1214.07 1189.51,1214.07 1190.1,1214.07 1190.68,1214.07 1191.27,1214.07 1191.86,1214.07 1192.44,1214.07 1193.03,1214.07 1193.62,1214.07 1194.2,1214.07 1194.79,1214.07 1195.37,1214.07 1195.96,1214.07 1196.55,1214.07 1197.13,1214.07 1197.72,1214.07 1198.31,1214.07 1198.89,1214.07 1199.48,1214.07 1200.07,1214.07 1200.65,1214.07 1201.24,1214.07 1201.83,1214.07 1202.41,1214.07 1203,1214.07 1203.58,1214.07 1204.17,1214.07 1204.76,1214.07 1205.34,1214.07 1205.93,1214.07 1206.52,1214.07 1207.1,1214.07 1207.69,1214.07 1208.28,1214.07 1208.86,1214.07 1209.45,1214.07 1210.03,1214.07 1210.62,1214.07 1211.21,1214.07 1211.79,1214.07 1212.38,1214.07 1212.97,1214.07 1213.55,1214.07 1214.14,1214.07 1214.73,1214.07 1215.31,1214.07 1215.9,1214.07 1216.49,1214.07 1217.07,1214.07 1217.66,1214.07 1218.24,1214.07 1218.83,1214.07 1219.42,1214.07 1220,1214.07 1220.59,1214.07 1221.18,1214.07 1221.76,1214.07 1222.35,1214.07 1222.94,1214.07 1223.52,1214.07 1224.11,1214.07 1224.7,1214.07 1225.28,1214.07 1225.87,1214.07 1226.45,1214.07 1227.04,1214.07 1227.63,1214.07 1228.21,1214.07 1228.8,1214.07 1229.39,1214.07 1229.97,1214.07 1230.56,1214.07 1231.15,1214.07 1231.73,1214.07 1232.32,1214.07 1232.91,1214.07 1233.49,1214.07 1234.08,1214.07 1234.66,1214.07 1235.25,1214.07 1235.84,1214.07 1236.42,1214.07 1237.01,1214.07 1237.6,1214.07 1238.18,1214.07 1238.77,1214.07 1239.36,1214.07 1239.94,1214.07 1240.53,1214.07 1241.11,1214.07 1241.7,1214.07 1242.29,1214.07 1242.87,1214.07 1243.46,1214.07 1244.05,1214.07 1244.63,1214.07 1245.22,1214.07 1245.81,1214.07 1246.39,1214.07 1246.98,1214.07 1247.57,1214.07 1248.15,1214.07 1248.74,1214.07 1249.32,1214.07 1249.91,1214.07 1250.5,1214.07 1251.08,1214.07 1251.67,1214.07 1252.26,1214.07 1252.84,1214.07 1253.43,1214.07 1254.02,1214.07 1254.6,1214.07 1255.19,1214.07 1255.78,1214.07 1256.36,1214.07 1256.95,1214.07 1257.53,1214.07 1258.12,1214.07 1258.71,1214.07 1259.29,1214.07 1259.88,1214.07 1260.47,1214.07 1261.05,1214.07 1261.64,1214.07 1262.23,1214.07 1262.81,1214.07 1263.4,1214.07 1263.98,1214.07 1264.57,1214.07 1265.16,1214.07 1265.74,1214.07 1266.33,1214.07 1266.92,1214.07 1267.5,1214.07 1268.09,1214.07 1268.68,1214.07 1269.26,1214.07 1269.85,1214.07 1270.44,1214.07 1271.02,1214.07 1271.61,1214.07 1272.19,1214.07 1272.78,1214.07 1273.37,1214.07 1273.95,1214.07 1274.54,1214.07 1275.13,1214.07 1275.71,1214.07 1276.3,1214.07 1276.89,1214.07 1277.47,1214.07 1278.06,1214.07 1278.65,1214.07 1279.23,1214.07 1279.82,1214.07 1280.4,1214.07 1280.99,1214.07 1281.58,1214.07 1282.16,1214.07 1282.75,1214.07 1283.34,1214.07 1283.92,1214.07 1284.51,1214.07 1285.1,1214.07 1285.68,1214.07 1286.27,1214.07 1286.86,1214.07 1287.44,1214.07 1288.03,1214.07 1288.61,1214.07 1289.2,1214.07 1289.79,1214.07 1290.37,1214.07 1290.96,1214.07 1291.55,1214.07 1292.13,1214.07 1292.72,1214.07 1293.31,1214.07 1293.89,1214.07 1294.48,1214.07 1295.06,1214.07 1295.65,1214.07 1296.24,1214.07 1296.82,1214.07 1297.41,1214.07 1298,1214.07 1298.58,1214.07 1299.17,1214.07 1299.76,1214.07 1300.34,1214.07 1300.93,1214.07 1301.52,1214.07 1302.1,1214.07 1302.69,1214.07 1303.27,1214.07 1303.86,1214.07 1304.45,1214.07 1305.03,1214.07 1305.62,1214.07 1306.21,1214.07 1306.79,1214.07 1307.38,1214.07 1307.97,1214.07 1308.55,1214.07 1309.14,1214.07 1309.73,1214.07 1310.31,1214.07 1310.9,1214.07 1311.48,1214.07 1312.07,1214.07 1312.66,1214.07 1313.24,1214.07 1313.83,1214.07 1314.42,1214.07 1315,1214.07 1315.59,1214.07 1316.18,1214.07 1316.76,1214.07 1317.35,1214.07 1317.93,1214.07 1318.52,1214.07 1319.11,1214.07 1319.69,1214.07 1320.28,1214.07 1320.87,1214.07 1321.45,1214.07 1322.04,1214.07 1322.63,1214.07 1323.21,1214.07 1323.8,1214.07 1324.39,1214.07 1324.97,1214.07 1325.56,1214.07 1326.14,1214.07 1326.73,1214.07 1327.32,1214.07 1327.9,1214.07 1328.49,1214.07 1329.08,1214.07 1329.66,1214.07 1330.25,1214.07 1330.84,1214.07 1331.42,1214.07 1332.01,1214.07 1332.6,1214.07 1333.18,1214.07 1333.77,1214.07 1334.35,1214.07 1334.94,1214.07 1335.53,1214.07 1336.11,1214.07 1336.7,1214.07 1337.29,1214.07 1337.87,1214.07 1338.46,1214.07 1339.05,1214.07 1339.63,1214.07 1340.22,1214.07 1340.8,1214.07 1341.39,1214.07 1341.98,1214.07 1342.56,1214.07 1343.15,1214.07 1343.74,1214.07 1344.32,1214.07 1344.91,1214.07 1345.5,1214.07 1346.08,1214.07 1346.67,1214.07 1347.26,1214.07 1347.84,1214.07 1348.43,1214.07 1349.01,1214.07 1349.6,1214.07 1350.19,1214.07 1350.77,1214.07 1351.36,1214.07 1351.95,1214.07 1352.53,1214.07 1353.12,1214.07 1353.71,1214.07 1354.29,1214.07 1354.88,1214.07 1355.47,1214.07 1356.05,1214.07 1356.64,1214.07 1357.22,1214.07 1357.81,1214.07 1358.4,1214.07 1358.98,1214.07 1359.57,1214.07 1360.16,1214.07 1360.74,1214.07 1361.33,1214.07 1361.92,1214.07 1362.5,1214.07 1363.09,1214.07 1363.68,1214.07 1364.26,1214.07 1364.85,1214.07 1365.43,1214.07 1366.02,1214.07 1366.61,1214.07 1367.19,1214.07 1367.78,1214.07 1368.37,1214.07 1368.95,1214.07 1369.54,1214.07 1370.13,1214.07 1370.71,1214.07 1371.3,1214.07 1371.88,1214.07 1372.47,1214.07 1373.06,1214.07 1373.64,1214.07 1374.23,1214.07 1374.82,1214.07 1375.4,1214.07 1375.99,1214.07 1376.58,1214.07 1377.16,1214.07 1377.75,1214.07 1378.34,1214.07 1378.92,1214.07 1379.51,1214.07 1380.09,1214.07 1380.68,1214.07 1381.27,1214.07 1381.85,1214.07 1382.44,1214.07 1383.03,1214.07 1383.61,1214.07 1384.2,1214.07 1384.79,1214.07 1385.37,1214.07 1385.96,1214.07 1386.55,1214.07 1387.13,1214.07 1387.72,1214.07 1388.3,1214.07 1388.89,1214.07 1389.48,1214.07 1390.06,1214.07 1390.65,1214.07 1391.24,1214.07 1391.82,1214.07 1392.41,1214.07 1393,1214.07 1393.58,1214.07 1394.17,1214.07 1394.75,1214.07 1395.34,1214.07 1395.93,1214.07 1396.51,1214.07 1397.1,1214.07 1397.69,1214.07 1398.27,1214.07 1398.86,1214.07 1399.45,1214.07 1400.03,1214.07 1400.62,1214.07 1401.21,1214.07 1401.79,1214.07 1402.38,1214.07 1402.96,1214.07 1403.55,1214.07 1404.14,1214.07 1404.72,1214.07 1405.31,1214.07 1405.9,1214.07 1406.48,1214.07 1407.07,1214.07 1407.66,1214.07 1408.24,1214.07 1408.83,1214.07 1409.42,1214.07 1410,1214.07 1410.59,1214.07 1411.17,1214.07 1411.76,1214.07 1412.35,1214.07 1412.93,1214.07 1413.52,1214.07 1414.11,1214.07 1414.69,1214.07 1415.28,1214.07 1415.87,1214.07 1416.45,1214.07 1417.04,1214.07 1417.63,1214.07 1418.21,1214.07 1418.8,1214.07 1419.38,1214.07 1419.97,1214.07 1420.56,1214.07 1421.14,1214.07 1421.73,1214.07 1422.32,1214.07 1422.9,1214.07 1423.49,1214.07 1424.08,1214.07 1424.66,1214.07 1425.25,1214.07 1425.83,1214.07 1426.42,1214.07 1427.01,1214.07 1427.59,1214.07 1428.18,1214.07 1428.77,1214.07 1429.35,1214.07 1429.94,1214.07 1430.53,1214.07 1431.11,1214.07 1431.7,1214.07 1432.29,1214.07 1432.87,1214.07 1433.46,1214.07 1434.04,1214.07 1434.63,1214.07 1435.22,1214.07 1435.8,1214.07 1436.39,1214.07 1436.98,1214.07 1437.56,1214.07 1438.15,1214.07 1438.74,1214.07 1439.32,1214.07 1439.91,1214.07 1440.5,1214.07 1441.08,1214.07 1441.67,1214.07 1442.25,1214.07 1442.84,1214.07 1443.43,1214.07 1444.01,1214.07 1444.6,1214.07 1445.19,1214.07 1445.77,1214.07 1446.36,1214.07 1446.95,1214.07 1447.53,1214.07 1448.12,1214.07 1448.7,1214.07 1449.29,1214.07 1449.88,1214.07 1450.46,1214.07 1451.05,1214.07 1451.64,1214.07 1452.22,1214.07 1452.81,1214.07 1453.4,1214.07 1453.98,1214.07 1454.57,1214.07 1455.16,1214.07 1455.74,1214.07 1456.33,1214.07 1456.91,1214.07 1457.5,1214.07 1458.09,1214.07 1458.67,1214.07 1459.26,1214.07 1459.85,1214.07 1460.43,1214.07 1461.02,1214.07 1461.61,1214.07 1462.19,1214.07 1462.78,1214.07 1463.37,1214.07 1463.95,1214.07 1464.54,1214.07 1465.12,1214.07 1465.71,1214.07 1466.3,1214.07 1466.88,1214.07 1467.47,1214.07 1468.06,1214.07 1468.64,1214.07 1469.23,1214.07 1469.82,1214.07 1470.4,1214.07 1470.99,1214.07 1471.57,1214.07 1472.16,1214.07 1472.75,1214.07 1473.33,1214.07 1473.92,1214.07 1474.51,1214.07 1475.09,1214.07 1475.68,1214.07 1476.27,1214.07 1476.85,1214.07 1477.44,1214.07 1478.03,1214.07 1478.61,1214.07 1479.2,1214.07 1479.78,1214.07 1480.37,1214.07 1480.96,1214.07 1481.54,1214.07 1482.13,1214.07 1482.72,1214.07 1483.3,1214.07 1483.89,1214.07 1484.48,1214.07 1485.06,1214.07 1485.65,1214.07 1486.24,1214.07 1486.82,1214.07 1487.41,1214.07 1487.99,1214.07 1488.58,1214.07 1489.17,1214.07 1489.75,1214.07 1490.34,1214.07 1490.93,1214.07 1491.51,1214.07 1492.1,1214.07 1492.69,1214.07 1493.27,1214.07 1493.86,1214.07 1494.45,1214.07 1495.03,1214.07 1495.62,1214.07 1496.2,1214.07 1496.79,1214.07 1497.38,1214.07 1497.96,1214.07 1498.55,1214.07 1499.14,1214.07 1499.72,1214.07 1500.31,1214.07 1500.9,1214.07 1501.48,1214.07 1502.07,1214.07 1502.65,1214.07 1503.24,1214.07 1503.83,1214.07 1504.41,1214.07 1505,1214.07 1505.59,1214.07 1506.17,1214.07 1506.76,1214.07 1507.35,1214.07 1507.93,1214.07 1508.52,1214.07 1509.11,1214.07 1509.69,1214.07 1510.28,1214.07 1510.86,1214.07 1511.45,1214.07 1512.04,1214.07 1512.62,1214.07 1513.21,1214.07 1513.8,1214.07 1514.38,1214.07 1514.97,1214.07 1515.56,1214.07 1516.14,1214.07 1516.73,1214.07 1517.32,1214.07 1517.9,1214.07 1518.49,1214.07 1519.07,1214.07 1519.66,1214.07 1520.25,1214.07 1520.83,1214.07 1521.42,1214.07 1522.01,1214.07 1522.59,1214.07 1523.18,1214.07 1523.77,1214.07 1524.35,1214.07 1524.94,1214.07 1525.52,1214.07 1526.11,1214.07 1526.7,1214.07 1527.28,1214.07 1527.87,1214.07 1528.46,1214.07 1529.04,1214.07 1529.63,1214.07 1530.22,1214.07 1530.8,1214.07 1531.39,1214.07 1531.98,1214.07 1532.56,1214.07 1533.15,1214.07 1533.73,1214.07 1534.32,1214.07 1534.91,1214.07 1535.49,1214.07 1536.08,1214.07 1536.67,1214.07 1537.25,1214.07 1537.84,1214.07 1538.43,1214.07 1539.01,1214.07 1539.6,1214.07 1540.19,1214.07 1540.77,1214.07 1541.36,1214.07 1541.94,1214.07 1542.53,1214.07 1543.12,1214.07 1543.7,1214.07 1544.29,1214.07 1544.88,1214.07 1545.46,1214.07 1546.05,1214.07 1546.64,1214.07 1547.22,1214.07 1547.81,1214.07 1548.4,1214.07 1548.98,1214.07 1549.57,1214.07 1550.15,1214.07 1550.74,1214.07 1551.33,1214.07 1551.91,1214.07 1552.5,1214.07 1553.09,1214.07 1553.67,1214.07 1554.26,1214.07 1554.85,1214.07 1555.43,1214.07 1556.02,1214.07 1556.6,1214.07 1557.19,1214.07 1557.78,1214.07 1558.36,1214.07 1558.95,1214.07 1559.54,1214.07 1560.12,1214.07 1560.71,1214.07 1561.3,1214.07 1561.88,1214.07 1562.47,1214.07 1563.06,1214.07 1563.64,1214.07 1564.23,1214.07 1564.81,1214.07 1565.4,1214.07 1565.99,1214.07 1566.57,1214.07 1567.16,1214.07 1567.75,1214.07 1568.33,1214.07 1568.92,1214.07 1569.51,1214.07 1570.09,1214.07 1570.68,1214.07 1571.27,1214.07 1571.85,1214.07 1572.44,1214.07 1573.02,1214.07 1573.61,1214.07 1574.2,1214.07 1574.78,1214.07 1575.37,1214.07 1575.96,1214.07 1576.54,1214.07 1577.13,1214.07 1577.72,1214.07 1578.3,1214.07 1578.89,1214.07 1579.47,1214.07 1580.06,1214.07 1580.65,1214.07 1581.23,1214.07 1581.82,1214.07 1582.41,1214.07 1582.99,1214.07 1583.58,1214.07 1584.17,1214.07 1584.75,1214.07 1585.34,1214.07 1585.93,1214.07 1586.51,1214.07 1587.1,1214.07 1587.68,1214.07 1588.27,1214.07 1588.86,1214.07 1589.44,1214.07 1590.03,1214.07 1590.62,1214.07 1591.2,1214.07 1591.79,1214.07 1592.38,1214.07 1592.96,1214.07 1593.55,1214.07 1594.14,1214.07 1594.72,1214.07 1595.31,1214.07 1595.89,1214.07 1596.48,1214.07 1597.07,1214.07 1597.65,1214.07 1598.24,1214.07 1598.83,1214.07 1599.41,1214.07 1600,1214.07 1600.59,1214.07 1601.17,1214.07 1601.76,1214.07 1602.34,1214.07 1602.93,1214.07 1603.52,1214.07 1604.1,1214.07 1604.69,1214.07 1605.28,1214.07 1605.86,1214.07 1606.45,1214.07 1607.04,1214.07 1607.62,1214.07 1608.21,1214.07 1608.8,1214.07 1609.38,1214.07 1609.97,1214.07 1610.55,1214.07 1611.14,1214.07 1611.73,1214.07 1612.31,1214.07 1612.9,1214.07 1613.49,1214.07 1614.07,1214.07 1614.66,1214.07 1615.25,1214.07 1615.83,1214.07 1616.42,1214.07 1617.01,1214.07 1617.59,1214.07 1618.18,1214.07 1618.76,1214.07 1619.35,1214.07 1619.94,1214.07 1620.52,1214.07 1621.11,1214.07 1621.7,1214.07 1622.28,1214.07 1622.87,1214.07 1623.46,1214.07 1624.04,1214.07 1624.63,1214.07 1625.22,1214.07 1625.8,1214.07 1626.39,1214.07 1626.97,1214.07 1627.56,1214.07 1628.15,1214.07 1628.73,1214.07 1629.32,1214.07 1629.91,1214.07 1630.49,1214.07 1631.08,1214.07 1631.67,1214.07 1632.25,1214.07 1632.84,1214.07 1633.42,1214.07 1634.01,1214.07 1634.6,1214.07 1635.18,1214.07 1635.77,1214.07 1636.36,1214.07 1636.94,1214.07 1637.53,1214.07 1638.12,1214.07 1638.7,1214.07 1639.29,1214.07 1639.88,1214.07 1640.46,1214.07 1641.05,1214.07 1641.63,1214.07 1642.22,1214.07 1642.81,1214.07 1643.39,1214.07 1643.98,1214.07 1644.57,1214.07 1645.15,1214.07 1645.74,1214.07 1646.33,1214.07 1646.91,1214.07 1647.5,1214.07 1648.09,1214.07 1648.67,1214.07 1649.26,1214.07 1649.84,1214.07 1650.43,1214.07 1651.02,1214.07 1651.6,1214.07 1652.19,1214.07 1652.78,1214.07 1653.36,1214.07 1653.95,1214.07 1654.54,1214.07 1655.12,1214.07 1655.71,1214.07 1656.29,1214.07 1656.88,1214.07 1657.47,1214.07 1658.05,1214.07 1658.64,1214.07 1659.23,1214.07 1659.81,1214.07 1660.4,1214.07 1660.99,1214.07 1661.57,1214.07 1662.16,1214.07 1662.75,1214.07 1663.33,1214.07 1663.92,1214.07 1664.5,1214.07 1665.09,1214.07 1665.68,1214.07 1666.26,1214.07 1666.85,1214.07 1667.44,1214.07 1668.02,1214.07 1668.61,1214.07 1669.2,1214.07 1669.78,1214.07 1670.37,1214.07 1670.96,1214.07 1671.54,1214.07 1672.13,1214.07 1672.71,1214.07 1673.3,1214.07 1673.89,1214.07 1674.47,1214.07 1675.06,1214.07 1675.65,1214.07 1676.23,1214.07 1676.82,1214.07 1677.41,1214.07 1677.99,1214.07 1678.58,1214.07 1679.17,1214.07 1679.75,1214.07 1680.34,1214.07 1680.92,1214.07 1681.51,1214.07 1682.1,1214.07 1682.68,1214.07 1683.27,1214.07 1683.86,1214.07 1684.44,1214.07 1685.03,1214.07 1685.62,1214.07 1686.2,1214.07 1686.79,1214.07 1687.37,1214.07 1687.96,1214.07 1688.55,1214.07 1689.13,1214.07 1689.72,1214.07 1690.31,1214.07 1690.89,1214.07 1691.48,1214.07 1692.07,1214.07 1692.65,1214.07 1693.24,1214.07 1693.83,1214.07 1694.41,1214.07 1695,1214.07 1695.58,1214.07 1696.17,1214.07 1696.76,1214.07 1697.34,1214.07 1697.93,1214.07 1698.52,1214.07 1699.1,1214.07 1699.69,1214.07 1700.28,1214.07 1700.86,1214.07 1701.45,1214.07 1702.04,1214.07 1702.62,1214.07 1703.21,1214.07 1703.79,1214.07 1704.38,1214.07 1704.97,1214.07 1705.55,1214.07 1706.14,1214.07 1706.73,1214.07 1707.31,1214.07 1707.9,1214.07 1708.49,1214.07 1709.07,1214.07 1709.66,1214.07 1710.24,1214.07 1710.83,1214.07 1711.42,1214.07 1712,1214.07 1712.59,1214.07 1713.18,1214.07 1713.76,1214.07 1714.35,1214.07 1714.94,1214.07 1715.52,1214.07 1716.11,1214.07 1716.7,1214.07 1717.28,1214.07 1717.87,1214.07 1718.45,1214.07 1719.04,1214.07 1719.63,1214.07 1720.21,1214.07 1720.8,1214.07 1721.39,1214.07 1721.97,1214.07 1722.56,1214.07 1723.15,1214.07 1723.73,1214.07 1724.32,1214.07 1724.91,1214.07 1725.49,1214.07 1726.08,1214.07 1726.66,1214.07 1727.25,1214.07 1727.84,1214.07 1728.42,1214.07 1729.01,1214.07 1729.6,1214.07 1730.18,1214.07 1730.77,1214.07 1731.36,1214.07 1731.94,1214.07 1732.53,1214.07 1733.11,1214.07 1733.7,1214.07 1734.29,1214.07 1734.87,1214.07 1735.46,1214.07 1736.05,1214.07 1736.63,1214.07 1737.22,1214.07 1737.81,1214.07 1738.39,1214.07 1738.98,1214.07 1739.57,1214.07 1740.15,1214.07 1740.74,1214.07 1741.32,1214.07 1741.91,1214.07 1742.5,1214.07 1743.08,1214.07 1743.67,1214.07 1744.26,1214.07 1744.84,1214.07 1745.43,1214.07 1746.02,1214.07 1746.6,1214.07 1747.19,1214.07 1747.78,1214.07 1748.36,1214.07 1748.95,1214.07 1749.53,1214.07 1750.12,1214.07 1750.71,1214.07 1751.29,1214.07 1751.88,1214.07 1752.47,1214.07 1753.05,1214.07 1753.64,1214.07 1754.23,1214.07 1754.81,1214.07 1755.4,1214.07 1755.99,1214.07 1756.57,1214.07 1757.16,1214.07 1757.74,1214.07 1758.33,1214.07 1758.92,1214.07 1759.5,1214.07 1760.09,1214.07 1760.68,1214.07 1761.26,1214.07 1761.85,1214.07 1762.44,1214.07 1763.02,1214.07 1763.61,1214.07 1764.19,1214.07 1764.78,1214.07 1765.37,1214.07 1765.95,1214.07 1766.54,1214.07 1767.13,1214.07 1767.71,1214.07 1768.3,1214.07 1768.89,1214.07 1769.47,1214.07 1770.06,1214.07 1770.65,1214.07 1771.23,1214.07 1771.82,1214.07 1772.4,1214.07 1772.99,1214.07 1773.58,1214.07 1774.16,1214.07 1774.75,1214.07 1775.34,1214.07 1775.92,1214.07 1776.51,1214.07 1777.1,1214.07 1777.68,1214.07 1778.27,1214.07 1778.86,1214.07 1779.44,1214.07 1780.03,1214.07 1780.61,1214.07 1781.2,1214.07 1781.79,1214.07 1782.37,1214.07 1782.96,1214.07 1783.55,1214.07 1784.13,1214.07 1784.72,1214.07 1785.31,1214.07 1785.89,1214.07 1786.48,1214.07 1787.06,1214.07 1787.65,1214.07 1788.24,1214.07 1788.82,1214.07 1789.41,1214.07 1790,1214.07 1790.58,1214.07 1791.17,1214.07 1791.76,1214.07 1792.34,1214.07 1792.93,1214.07 1793.52,1214.07 1794.1,1214.07 1794.69,1214.07 1795.27,1214.07 1795.86,1214.07 1796.45,1214.07 1797.03,1214.07 1797.62,1214.07 1798.21,1214.07 1798.79,1214.07 1799.38,1214.07 1799.97,1214.07 1800.55,1214.07 1801.14,1214.07 1801.73,1214.07 1802.31,1214.07 1802.9,1214.07 1803.48,1214.07 1804.07,1214.07 1804.66,1214.07 1805.24,1214.07 1805.83,1214.07 1806.42,1214.07 1807,1214.07 1807.59,1214.07 1808.18,1214.07 1808.76,1214.07 1809.35,1214.07 1809.94,1214.07 1810.52,1214.07 1811.11,1214.07 1811.69,1214.07 1812.28,1214.07 1812.87,1214.07 1813.45,1214.07 1814.04,1214.07 1814.63,1214.07 1815.21,1214.07 1815.8,1214.07 1816.39,1214.07 1816.97,1214.07 1817.56,1214.07 1818.14,1214.07 1818.73,1214.07 1819.32,1214.07 1819.9,1214.07 1820.49,1214.07 1821.08,1214.07 1821.66,1214.07 1822.25,1214.07 1822.84,1214.07 1823.42,1214.07 1824.01,1214.07 1824.6,1214.07 1825.18,1214.07 1825.77,1214.07 1826.35,1214.07 1826.94,1214.07 1827.53,1214.07 1828.11,1214.07 1828.7,1214.07 1829.29,1214.07 1829.87,1214.07 1830.46,1214.07 1831.05,1214.07 1831.63,1214.07 1832.22,1214.07 1832.81,1214.07 1833.39,1214.07 1833.98,1214.07 1834.56,1214.07 1835.15,1214.07 1835.74,1214.07 1836.32,1214.07 1836.91,1214.07 1837.5,1214.07 1838.08,1214.07 1838.67,1214.07 1839.26,1214.07 1839.84,1214.07 1840.43,1214.07 1841.01,1214.07 1841.6,1214.07 1842.19,1214.07 1842.77,1214.07 1843.36,1214.07 1843.95,1214.07 1844.53,1214.07 1845.12,1214.07 1845.71,1214.07 1846.29,1214.07 1846.88,1214.07 1847.47,1214.07 1848.05,1214.07 1848.64,1214.07 1849.22,1214.07 1849.81,1214.07 1850.4,1214.07 1850.98,1214.07 1851.57,1214.07 1852.16,1214.07 1852.74,1214.07 1853.33,1214.07 1853.92,1214.07 1854.5,1214.07 1855.09,1214.07 1855.68,1214.07 1856.26,1214.07 1856.85,1214.07 1857.43,1214.07 1858.02,1214.07 1858.61,1214.07 1859.19,1214.07 1859.78,1214.07 1860.37,1214.07 1860.95,1214.07 1861.54,1214.07 1862.13,1214.07 1862.71,1214.07 1863.3,1214.07 1863.88,1214.07 1864.47,1214.07 1865.06,1214.07 1865.64,1214.07 1866.23,1214.07 1866.82,1214.07 1867.4,1214.07 1867.99,1214.07 1868.58,1214.07 1869.16,1214.07 1869.75,1214.07 1870.34,1214.07 1870.92,1214.07 1871.51,1214.07 1872.09,1214.07 1872.68,1214.07 1873.27,1214.07 1873.85,1214.07 1874.44,1214.07 1875.03,1214.07 1875.61,1214.07 1876.2,1214.07 1876.79,1214.07 1877.37,1214.07 1877.96,1214.07 1878.55,1214.07 1879.13,1214.07 1879.72,1214.07 1880.3,1214.07 1880.89,1214.07 1881.48,1214.07 1882.06,1214.07 1882.65,1214.07 1883.24,1214.07 1883.82,1214.07 1884.41,1214.07 1885,1214.07 1885.58,1214.07 1886.17,1214.07 1886.76,1214.07 1887.34,1214.07 1887.93,1214.07 1888.51,1214.07 1889.1,1214.07 1889.69,1214.07 1890.27,1214.07 1890.86,1214.07 1891.45,1214.07 1892.03,1214.07 1892.62,1214.07 1893.21,1214.07 1893.79,1214.07 1894.38,1214.07 1894.96,1214.07 1895.55,1214.07 1896.14,1214.07 1896.72,1214.07 1897.31,1214.07 1897.9,1214.07 1898.48,1214.07 1899.07,1214.07 1899.66,1214.07 1900.24,1214.07 1900.83,1214.07 1901.42,1214.07 1902,1214.07 1902.59,1214.07 1903.17,1214.07 1903.76,1214.07 1904.35,1214.07 1904.93,1214.07 1905.52,1214.07 1906.11,1214.07 1906.69,1214.07 1907.28,1214.07 1907.87,1214.07 1908.45,1214.07 1909.04,1214.07 1909.63,1214.07 1910.21,1214.07 1910.8,1214.07 1911.38,1214.07 1911.97,1214.07 1912.56,1214.07 1913.14,1214.07 1913.73,1214.07 1914.32,1214.07 1914.9,1214.07 1915.49,1214.07 1916.08,1214.07 1916.66,1214.07 1917.25,1214.07 1917.83,1214.07 1918.42,1214.07 1919.01,1214.07 1919.59,1214.07 1920.18,1214.07 1920.77,1214.07 1921.35,1214.07 1921.94,1214.07 1922.53,1214.07 1923.11,1214.07 1923.7,1214.07 1924.29,1214.07 1924.87,1214.07 1925.46,1214.07 1926.04,1214.07 1926.63,1214.07 1927.22,1214.07 1927.8,1214.07 1928.39,1214.07 1928.98,1214.07 1929.56,1214.07 1930.15,1214.07 1930.74,1214.07 1931.32,1214.07 1931.91,1214.07 1932.5,1214.07 1933.08,1214.07 1933.67,1214.07 1934.25,1214.07 1934.84,1214.07 1935.43,1214.07 1936.01,1214.07 1936.6,1214.07 1937.19,1214.07 1937.77,1214.07 1938.36,1214.07 1938.95,1214.07 1939.53,1214.07 1940.12,1214.07 1940.71,1214.07 1941.29,1214.07 1941.88,1214.07 1942.46,1214.07 1943.05,1214.07 1943.64,1214.07 1944.22,1214.07 1944.81,1214.07 1945.4,1214.07 1945.98,1214.07 1946.57,1214.07 1947.16,1214.07 1947.74,1214.07 1948.33,1214.07 1948.91,1214.07 1949.5,1214.07 1950.09,1214.07 1950.67,1214.07 1951.26,1214.07 1951.85,1214.07 1952.43,1214.07 1953.02,1214.07 1953.61,1214.07 1954.19,1214.07 1954.78,1214.07 1955.37,1214.07 1955.95,1214.07 1956.54,1214.07 1957.12,1214.07 1957.71,1214.07 1958.3,1214.07 1958.88,1214.07 1959.47,1214.07 1960.06,1214.07 1960.64,1214.07 1961.23,1214.07 1961.82,1214.07 1962.4,1214.07 1962.99,1214.07 1963.58,1214.07 1964.16,1214.07 1964.75,1214.07 1965.33,1214.07 1965.92,1214.07 1966.51,1214.07 1967.09,1214.07 1967.68,1214.07 1968.27,1214.07 1968.85,1214.07 1969.44,1214.07 1970.03,1214.07 1970.61,1214.07 1971.2,1214.07 1971.78,1214.07 1972.37,1214.07 1972.96,1214.07 1973.54,1214.07 1974.13,1214.07 1974.72,1214.07 1975.3,1214.07 1975.89,1214.07 1976.48,1214.07 1977.06,1214.07 1977.65,1214.07 1978.24,1214.07 1978.82,1214.07 1979.41,1214.07 1979.99,1214.07 1980.58,1214.07 1981.17,1214.07 1981.75,1214.07 1982.34,1214.07 1982.93,1214.07 1983.51,1214.07 1984.1,1214.07 1984.69,1214.07 1985.27,1214.07 1985.86,1214.07 1986.45,1214.07 1987.03,1214.07 1987.62,1214.07 1988.2,1214.07 1988.79,1214.07 1989.38,1214.07 1989.96,1214.07 1990.55,1214.07 1991.14,1214.07 1991.72,1214.07 1992.31,1214.07 1992.9,1214.07 1993.48,1214.07 1994.07,1214.07 1994.65,1214.07 1995.24,1214.07 1995.83,1214.07 1996.41,1214.07 1997,1214.07 1997.59,1214.07 1998.17,1214.07 1998.76,1214.07 1999.35,1214.07 1999.93,1214.07 2000.52,1214.07 2001.11,1214.07 2001.69,1214.07 2002.28,1214.07 2002.86,1214.07 2003.45,1214.07 2004.04,1214.07 2004.62,1214.07 2005.21,1214.07 2005.8,1214.07 2006.38,1214.07 2006.97,1214.07 2007.56,1214.07 2008.14,1214.07 2008.73,1214.07 2009.32,1214.07 2009.9,1214.07 2010.49,1214.07 2011.07,1214.07 2011.66,1214.07 2012.25,1214.07 2012.83,1214.07 2013.42,1214.07 2014.01,1214.07 2014.59,1214.07 2015.18,1214.07 2015.77,1214.07 2016.35,1214.07 2016.94,1214.07 2017.53,1214.07 2018.11,1214.07 2018.7,1214.07 2019.28,1214.07 2019.87,1214.07 2020.46,1214.07 2021.04,1214.07 2021.63,1214.07 2022.22,1214.07 2022.8,1214.07 2023.39,1214.07 2023.98,1214.07 2024.56,1214.07 2025.15,1214.07 2025.73,1214.07 2026.32,1214.07 2026.91,1214.07 2027.49,1214.07 2028.08,1214.07 2028.67,1214.07 2029.25,1214.07 2029.84,1214.07 2030.43,1214.07 2031.01,1214.07 2031.6,1214.07 2032.19,1214.07 2032.77,1214.07 2033.36,1214.07 2033.94,1214.07 2034.53,1214.07 2035.12,1214.07 2035.7,1214.07 2036.29,1214.07 2036.88,1214.07 2037.46,1214.07 2038.05,1214.07 2038.64,1214.07 2039.22,1214.07 2039.81,1214.07 2040.4,1214.07 2040.98,1214.07 2041.57,1214.07 2042.15,1214.07 2042.74,1214.07 2043.33,1214.07 2043.91,1214.07 2044.5,1214.07 2045.09,1214.07 2045.67,1214.07 2046.26,1214.07 2046.85,1214.07 2047.43,1214.07 2048.02,1214.07 2048.6,1214.07 2049.19,1214.07 2049.78,1214.07 2050.36,1214.07 2050.95,1214.07 2051.54,1214.07 2052.12,1214.07 2052.71,1214.07 2053.3,1214.07 2053.88,1214.07 2054.47,1214.07 2055.06,1214.07 2055.64,1214.07 2056.23,1214.07 2056.81,1214.07 2057.4,1214.07 2057.99,1214.07 2058.57,1214.07 2059.16,1214.07 2059.75,1214.07 2060.33,1214.07 2060.92,1214.07 2061.51,1214.07 2062.09,1214.07 2062.68,1214.07 2063.27,1214.07 2063.85,1214.07 2064.44,1214.07 2065.02,1214.07 2065.61,1214.07 2066.2,1214.07 2066.78,1214.07 2067.37,1214.07 2067.96,1214.07 2068.54,1214.07 2069.13,1214.07 2069.72,1214.07 2070.3,1214.07 2070.89,1214.07 2071.48,1214.07 2072.06,1214.07 2072.65,1214.07 2073.23,1214.07 2073.82,1214.07 2074.41,1214.07 2074.99,1214.07 2075.58,1214.07 2076.17,1214.07 2076.75,1214.07 2077.34,1214.07 2077.93,1214.07 2078.51,1214.07 2079.1,1214.07 2079.68,1214.07 2080.27,1214.07 2080.86,1214.07 2081.44,1214.07 2082.03,1214.07 2082.62,1214.07 2083.2,1214.07 2083.79,1214.07 2084.38,1214.07 2084.96,1214.07 2085.55,1214.07 2086.14,1214.07 2086.72,1214.07 2087.31,1214.07 2087.89,1214.07 2088.48,1214.07 2089.07,1214.07 2089.65,1214.07 2090.24,1214.07 2090.83,1214.07 2091.41,1214.07 2092,1214.07 2092.59,1214.07 2093.17,1214.07 2093.76,1214.07 2094.35,1214.07 2094.93,1214.07 2095.52,1214.07 2096.1,1214.07 2096.69,1214.07 2097.28,1214.07 2097.86,1214.07 2098.45,1214.07 2099.04,1214.07 2099.62,1214.07 2100.21,1214.07 2100.8,1214.07 2101.38,1214.07 2101.97,1214.07 2102.55,1214.07 2103.14,1214.07 2103.73,1214.07 2104.31,1214.07 2104.9,1214.07 2105.49,1214.07 2106.07,1214.07 2106.66,1214.07 2107.25,1214.07 2107.83,1214.07 2108.42,1214.07 2109.01,1214.07 2109.59,1214.07 2110.18,1214.07 2110.76,1214.07 2111.35,1214.07 2111.94,1214.07 2112.52,1214.07 2113.11,1214.07 2113.7,1214.07 2114.28,1214.07 2114.87,1214.07 2115.46,1214.07 2116.04,1214.07 2116.63,1214.07 2117.22,1214.07 2117.8,1214.07 2118.39,1214.07 2118.97,1214.07 2119.56,1214.07 2120.15,1214.07 2120.73,1214.07 2121.32,1214.07 2121.91,1214.07 2122.49,1214.07 2123.08,1214.07 2123.67,1214.07 2124.25,1214.07 2124.84,1214.07 2125.42,1214.07 2126.01,1214.07 2126.6,1214.07 2127.18,1214.07 2127.77,1214.07 2128.36,1214.07 2128.94,1214.07 2129.53,1214.07 2130.12,1214.07 2130.7,1214.07 2131.29,1214.07 2131.88,1214.07 2132.46,1214.07 2133.05,1214.07 2133.63,1214.07 2134.22,1214.07 2134.81,1214.07 2135.39,1214.07 2135.98,1214.07 2136.57,1214.07 2137.15,1214.07 2137.74,1214.07 2138.33,1214.07 2138.91,1214.07 2139.5,1214.07 2140.09,1214.07 2140.67,1214.07 2141.26,1214.07 2141.84,1214.07 2142.43,1214.07 2143.02,1214.07 2143.6,1214.07 2144.19,1214.07 2144.78,1214.07 2145.36,1214.07 2145.95,1214.07 2146.54,1214.07 2147.12,1214.07 2147.71,1214.07 2148.3,1214.07 2148.88,1214.07 2149.47,1214.07 2150.05,1214.07 2150.64,1214.07 2151.23,1214.07 2151.81,1214.07 2152.4,1214.07 2152.99,1214.07 2153.57,1214.07 2154.16,1214.07 2154.75,1214.07 2155.33,1214.07 2155.92,1214.07 2156.5,1214.07 2157.09,1214.07 2157.68,1214.07 2158.26,1214.07 \"/>\n<path clip-path=\"url(#clip302)\" d=\"M986.025 1213.97 L986.612 1213.97 L987.198 1213.97 L987.785 1213.97 L988.371 1213.97 L988.957 1213.97 L989.544 1213.97 L990.13 1213.97 L990.717 1213.97 L991.303 1213.97 L991.889 1213.97 L992.476 1213.97 L993.062 1213.97 L993.649 1213.97 L994.235 1213.97 L994.822 1213.97 L995.408 1213.97 L995.994 1213.97 L996.581 1213.97 L997.167 1213.97 L997.754 1213.97 L998.34 1213.97 L998.926 1213.97 L999.513 1213.97 L1000.1 1213.97 L1000.69 1213.97 L1001.27 1213.97 L1001.86 1213.97 L1002.44 1213.97 L1003.03 1213.97 L1003.62 1213.97 L1004.2 1213.97 L1004.79 1213.97 L1005.38 1213.97 L1005.96 1213.97 L1006.55 1213.97 L1007.14 1213.97 L1007.72 1213.97 L1008.31 1213.97 L1008.9 1213.97 L1009.48 1213.97 L1010.07 1213.97 L1010.65 1213.97 L1011.24 1213.97 L1011.83 1213.97 L1012.41 1213.97 L1013 1213.97 L1013.59 1213.97 L1014.17 1213.97 L1014.76 1213.97 L1015.35 1213.97 L1015.93 1213.97 L1016.52 1213.97 L1017.11 1213.97 L1017.69 1213.97 L1018.28 1213.97 L1018.86 1213.97 L1019.45 1213.97 L1020.04 1213.97 L1020.62 1213.97 L1021.21 1213.97 L1021.8 1213.97 L1022.38 1213.97 L1022.97 1213.97 L1023.56 1213.97 L1024.14 1213.97 L1024.73 1213.97 L1025.32 1213.97 L1025.9 1213.97 L1026.49 1213.97 L1027.07 1213.97 L1027.66 1213.97 L1028.25 1213.97 L1028.83 1213.97 L1029.42 1213.97 L1030.01 1213.97 L1030.59 1213.97 L1031.18 1213.97 L1031.77 1213.97 L1032.35 1213.97 L1032.94 1213.97 L1033.52 1213.97 L1034.11 1213.97 L1034.7 1213.97 L1035.28 1213.97 L1035.87 1213.97 L1036.46 1213.97 L1037.04 1213.97 L1037.63 1213.97 L1038.22 1213.97 L1038.8 1213.97 L1039.39 1213.97 L1039.98 1213.97 L1040.56 1213.97 L1041.15 1213.97 L1041.73 1213.97 L1042.32 1213.97 L1042.91 1213.97 L1043.49 1213.97 L1044.08 1213.97 L1044.67 1213.97 L1045.25 1213.97 L1045.84 1213.97 L1046.43 1213.97 L1047.01 1213.97 L1047.6 1213.97 L1048.19 1213.97 L1048.77 1213.97 L1049.36 1213.97 L1049.94 1213.97 L1050.53 1213.97 L1051.12 1213.97 L1051.7 1213.97 L1052.29 1213.97 L1052.88 1213.97 L1053.46 1213.97 L1054.05 1213.97 L1054.64 1213.97 L1055.22 1213.97 L1055.81 1213.97 L1056.39 1213.97 L1056.98 1213.97 L1057.57 1213.97 L1058.15 1213.97 L1058.74 1213.97 L1059.33 1213.97 L1059.91 1213.97 L1060.5 1213.97 L1061.09 1213.97 L1061.67 1213.97 L1062.26 1213.97 L1062.85 1213.97 L1063.43 1213.97 L1064.02 1213.97 L1064.6 1213.97 L1065.19 1213.97 L1065.78 1213.97 L1066.36 1213.97 L1066.95 1213.97 L1067.54 1213.97 L1068.12 1213.97 L1068.71 1213.97 L1069.3 1213.97 L1069.88 1213.97 L1070.47 1213.97 L1071.06 1213.97 L1071.64 1213.97 L1072.23 1213.97 L1072.81 1213.97 L1073.4 1213.97 L1073.99 1213.97 L1074.57 1213.97 L1075.16 1213.97 L1075.75 1213.97 L1076.33 1213.97 L1076.92 1213.97 L1077.51 1213.97 L1078.09 1213.97 L1078.68 1213.97 L1079.26 1213.97 L1079.85 1213.97 L1080.44 1213.97 L1081.02 1213.97 L1081.61 1213.97 L1082.2 1213.97 L1082.78 1213.97 L1083.37 1213.97 L1083.96 1213.97 L1084.54 1213.97 L1085.13 1213.97 L1085.72 1213.97 L1086.3 1213.97 L1086.89 1213.97 L1087.47 1213.97 L1088.06 1213.97 L1088.65 1213.97 L1089.23 1213.97 L1089.82 1213.97 L1090.41 1213.97 L1090.99 1213.97 L1091.58 1213.97 L1092.17 1213.97 L1092.75 1213.97 L1093.34 1213.97 L1093.93 1213.97 L1094.51 1213.97 L1095.1 1213.97 L1095.68 1213.97 L1096.27 1213.97 L1096.86 1213.97 L1097.44 1213.97 L1098.03 1213.97 L1098.62 1213.97 L1099.2 1213.97 L1099.79 1213.97 L1100.38 1213.97 L1100.96 1213.97 L1101.55 1213.97 L1102.14 1213.97 L1102.72 1213.97 L1103.31 1213.97 L1103.89 1213.97 L1104.48 1213.97 L1105.07 1213.97 L1105.65 1213.97 L1106.24 1213.97 L1106.83 1213.97 L1107.41 1213.97 L1108 1213.97 L1108.59 1213.97 L1109.17 1213.97 L1109.76 1213.97 L1110.34 1213.97 L1110.93 1213.97 L1111.52 1213.97 L1112.1 1213.97 L1112.69 1213.97 L1113.28 1213.97 L1113.86 1213.97 L1114.45 1213.97 L1115.04 1213.97 L1115.62 1213.97 L1116.21 1213.97 L1116.8 1213.97 L1117.38 1213.97 L1117.97 1213.97 L1118.55 1213.97 L1119.14 1213.97 L1119.73 1213.97 L1120.31 1213.97 L1120.9 1213.97 L1121.49 1213.97 L1122.07 1213.97 L1122.66 1213.97 L1123.25 1213.97 L1123.83 1213.97 L1124.42 1213.97 L1125.01 1213.97 L1125.59 1213.97 L1126.18 1213.97 L1126.76 1213.97 L1127.35 1213.97 L1127.94 1213.97 L1128.52 1213.97 L1129.11 1213.97 L1129.7 1213.97 L1130.28 1213.97 L1130.87 1213.97 L1131.46 1213.97 L1132.04 1213.97 L1132.63 1213.97 L1133.21 1213.97 L1133.8 1213.97 L1134.39 1213.97 L1134.97 1213.97 L1135.56 1213.97 L1136.15 1213.97 L1136.73 1213.97 L1137.32 1213.97 L1137.91 1213.97 L1138.49 1213.97 L1139.08 1213.97 L1139.67 1213.97 L1140.25 1213.97 L1140.84 1213.97 L1141.42 1213.97 L1142.01 1213.97 L1142.6 1213.97 L1143.18 1213.97 L1143.77 1213.97 L1144.36 1213.97 L1144.94 1213.97 L1145.53 1213.97 L1146.12 1213.97 L1146.7 1213.97 L1147.29 1213.97 L1147.88 1213.97 L1148.46 1213.97 L1149.05 1213.97 L1149.63 1213.97 L1150.22 1213.97 L1150.81 1213.97 L1151.39 1213.97 L1151.98 1213.97 L1152.57 1213.97 L1153.15 1213.97 L1153.74 1213.97 L1154.33 1213.97 L1154.91 1213.97 L1155.5 1213.97 L1156.09 1213.97 L1156.67 1213.97 L1157.26 1213.97 L1157.84 1213.97 L1158.43 1213.97 L1159.02 1213.97 L1159.6 1213.97 L1160.19 1213.97 L1160.78 1213.97 L1161.36 1213.97 L1161.95 1213.97 L1162.54 1213.97 L1163.12 1213.97 L1163.71 1213.97 L1164.29 1213.97 L1164.88 1213.97 L1165.47 1213.97 L1166.05 1213.97 L1166.64 1213.97 L1167.23 1213.97 L1167.81 1213.97 L1168.4 1213.97 L1168.99 1213.97 L1169.57 1213.97 L1170.16 1213.97 L1170.75 1213.97 L1171.33 1213.97 L1171.92 1213.97 L1172.5 1213.97 L1173.09 1213.97 L1173.68 1213.97 L1174.26 1213.97 L1174.85 1213.97 L1175.44 1213.97 L1176.02 1213.97 L1176.61 1213.97 L1177.2 1213.97 L1177.78 1213.97 L1178.37 1213.97 L1178.96 1213.97 L1179.54 1213.97 L1180.13 1213.97 L1180.71 1213.97 L1181.3 1213.97 L1181.89 1213.97 L1182.47 1213.97 L1183.06 1213.97 L1183.65 1213.97 L1184.23 1213.97 L1184.82 1213.97 L1185.41 1213.97 L1185.99 1213.97 L1186.58 1213.97 L1187.16 1213.97 L1187.75 1213.97 L1188.34 1213.97 L1188.92 1213.97 L1189.51 1213.97 L1190.1 1213.97 L1190.68 1213.97 L1191.27 1213.97 L1191.86 1213.97 L1192.44 1213.97 L1193.03 1213.97 L1193.62 1213.97 L1194.2 1213.97 L1194.79 1213.97 L1195.37 1213.97 L1195.96 1213.97 L1196.55 1213.97 L1197.13 1213.97 L1197.72 1213.97 L1198.31 1213.97 L1198.89 1213.97 L1199.48 1213.97 L1200.07 1213.97 L1200.65 1213.97 L1201.24 1213.97 L1201.83 1213.97 L1202.41 1213.97 L1203 1213.97 L1203.58 1213.97 L1204.17 1213.97 L1204.76 1213.97 L1205.34 1213.97 L1205.93 1213.97 L1206.52 1213.97 L1207.1 1213.97 L1207.69 1213.97 L1208.28 1213.97 L1208.86 1213.97 L1209.45 1213.97 L1210.03 1213.97 L1210.62 1213.97 L1211.21 1213.97 L1211.79 1213.97 L1212.38 1213.97 L1212.97 1213.97 L1213.55 1213.97 L1214.14 1213.97 L1214.73 1213.97 L1215.31 1213.97 L1215.9 1213.97 L1216.49 1213.97 L1217.07 1213.97 L1217.66 1213.97 L1218.24 1213.97 L1218.83 1213.97 L1219.42 1213.97 L1220 1213.97 L1220.59 1213.97 L1221.18 1213.97 L1221.76 1213.97 L1222.35 1213.97 L1222.94 1213.97 L1223.52 1213.97 L1224.11 1213.97 L1224.7 1213.97 L1225.28 1213.97 L1225.87 1213.97 L1226.45 1213.97 L1227.04 1213.97 L1227.63 1213.97 L1228.21 1213.97 L1228.8 1213.97 L1229.39 1213.97 L1229.97 1213.97 L1230.56 1213.97 L1231.15 1213.97 L1231.73 1213.97 L1232.32 1213.97 L1232.91 1213.97 L1233.49 1213.97 L1234.08 1213.97 L1234.66 1213.97 L1235.25 1213.97 L1235.84 1213.97 L1236.42 1213.97 L1237.01 1213.97 L1237.6 1213.97 L1238.18 1213.97 L1238.77 1213.97 L1239.36 1213.97 L1239.94 1213.97 L1240.53 1213.97 L1241.11 1213.97 L1241.7 1213.97 L1242.29 1213.97 L1242.87 1213.97 L1243.46 1213.97 L1244.05 1213.97 L1244.63 1213.97 L1245.22 1213.97 L1245.81 1213.97 L1246.39 1213.97 L1246.98 1213.97 L1247.57 1213.97 L1248.15 1213.97 L1248.74 1213.97 L1249.32 1213.97 L1249.91 1213.97 L1250.5 1213.97 L1251.08 1213.97 L1251.67 1213.97 L1252.26 1213.97 L1252.84 1213.97 L1253.43 1213.97 L1254.02 1213.97 L1254.6 1213.97 L1255.19 1213.97 L1255.78 1213.97 L1256.36 1213.97 L1256.95 1213.97 L1257.53 1213.97 L1258.12 1213.97 L1258.71 1213.97 L1259.29 1213.97 L1259.88 1213.97 L1260.47 1213.97 L1261.05 1213.97 L1261.64 1213.97 L1262.23 1213.97 L1262.81 1213.97 L1263.4 1213.97 L1263.98 1213.97 L1264.57 1213.97 L1265.16 1213.97 L1265.74 1213.97 L1266.33 1213.97 L1266.92 1213.97 L1267.5 1213.97 L1268.09 1213.97 L1268.68 1213.97 L1269.26 1213.97 L1269.85 1213.97 L1270.44 1213.97 L1271.02 1213.97 L1271.61 1213.97 L1272.19 1213.97 L1272.78 1213.97 L1273.37 1213.97 L1273.95 1213.97 L1274.54 1213.97 L1275.13 1213.97 L1275.71 1213.97 L1276.3 1213.97 L1276.89 1213.97 L1277.47 1213.97 L1278.06 1213.97 L1278.65 1213.97 L1279.23 1213.97 L1279.82 1213.97 L1280.4 1213.97 L1280.99 1213.97 L1281.58 1213.97 L1282.16 1213.97 L1282.75 1213.97 L1283.34 1213.97 L1283.92 1213.97 L1284.51 1213.97 L1285.1 1213.97 L1285.68 1213.97 L1286.27 1213.97 L1286.86 1213.97 L1287.44 1213.97 L1288.03 1213.97 L1288.61 1213.97 L1289.2 1213.97 L1289.79 1213.97 L1290.37 1213.97 L1290.96 1213.97 L1291.55 1213.97 L1292.13 1213.97 L1292.72 1213.97 L1293.31 1213.97 L1293.89 1213.97 L1294.48 1213.97 L1295.06 1213.97 L1295.65 1213.97 L1296.24 1213.97 L1296.82 1213.97 L1297.41 1213.97 L1298 1213.97 L1298.58 1213.97 L1299.17 1213.97 L1299.76 1213.97 L1300.34 1213.97 L1300.93 1213.97 L1301.52 1213.97 L1302.1 1213.97 L1302.69 1213.97 L1303.27 1213.97 L1303.86 1213.97 L1304.45 1213.97 L1305.03 1213.97 L1305.62 1213.97 L1306.21 1213.97 L1306.79 1213.97 L1307.38 1213.97 L1307.97 1213.97 L1308.55 1213.97 L1309.14 1213.97 L1309.73 1213.97 L1310.31 1213.97 L1310.9 1213.97 L1311.48 1213.97 L1312.07 1213.97 L1312.66 1213.97 L1313.24 1213.97 L1313.83 1213.97 L1314.42 1213.97 L1315 1213.97 L1315.59 1213.97 L1316.18 1213.97 L1316.76 1213.97 L1317.35 1213.97 L1317.93 1213.97 L1318.52 1213.97 L1319.11 1213.97 L1319.69 1213.97 L1320.28 1213.97 L1320.87 1213.97 L1321.45 1213.97 L1322.04 1213.97 L1322.63 1213.97 L1323.21 1213.97 L1323.8 1213.97 L1324.39 1213.97 L1324.97 1213.97 L1325.56 1213.97 L1326.14 1213.97 L1326.73 1213.97 L1327.32 1213.97 L1327.9 1213.97 L1328.49 1213.97 L1329.08 1213.97 L1329.66 1213.97 L1330.25 1213.97 L1330.84 1213.97 L1331.42 1213.97 L1332.01 1213.97 L1332.6 1213.97 L1333.18 1213.97 L1333.77 1213.97 L1334.35 1213.97 L1334.94 1213.97 L1335.53 1213.97 L1336.11 1213.97 L1336.7 1213.97 L1337.29 1213.97 L1337.87 1213.97 L1338.46 1213.97 L1339.05 1213.97 L1339.63 1213.97 L1340.22 1213.97 L1340.8 1213.97 L1341.39 1213.97 L1341.98 1213.97 L1342.56 1213.97 L1343.15 1213.97 L1343.74 1213.97 L1344.32 1213.97 L1344.91 1213.97 L1345.5 1213.97 L1346.08 1213.97 L1346.67 1213.97 L1347.26 1213.97 L1347.84 1213.97 L1348.43 1213.97 L1349.01 1213.97 L1349.6 1213.97 L1350.19 1213.97 L1350.77 1213.97 L1351.36 1213.97 L1351.95 1213.97 L1352.53 1213.97 L1353.12 1213.97 L1353.71 1213.97 L1354.29 1213.97 L1354.88 1213.97 L1355.47 1213.97 L1356.05 1213.97 L1356.64 1213.97 L1357.22 1213.97 L1357.81 1213.97 L1358.4 1213.97 L1358.98 1213.97 L1359.57 1213.97 L1360.16 1213.97 L1360.74 1213.97 L1361.33 1213.97 L1361.92 1213.97 L1362.5 1213.97 L1363.09 1213.97 L1363.68 1213.97 L1364.26 1213.97 L1364.85 1213.97 L1365.43 1213.97 L1366.02 1213.97 L1366.61 1213.97 L1367.19 1213.97 L1367.78 1213.97 L1368.37 1213.97 L1368.95 1213.97 L1369.54 1213.97 L1370.13 1213.97 L1370.71 1213.97 L1371.3 1213.97 L1371.88 1213.97 L1372.47 1213.97 L1373.06 1213.97 L1373.64 1213.97 L1374.23 1213.97 L1374.82 1213.97 L1375.4 1213.97 L1375.99 1213.97 L1376.58 1213.97 L1377.16 1213.97 L1377.75 1213.97 L1378.34 1213.97 L1378.92 1213.97 L1379.51 1213.97 L1380.09 1213.97 L1380.68 1213.97 L1381.27 1213.97 L1381.85 1213.97 L1382.44 1213.97 L1383.03 1213.97 L1383.61 1213.97 L1384.2 1213.97 L1384.79 1213.97 L1385.37 1213.97 L1385.96 1213.97 L1386.55 1213.97 L1387.13 1213.97 L1387.72 1213.97 L1388.3 1213.97 L1388.89 1213.97 L1389.48 1213.97 L1390.06 1213.97 L1390.65 1213.97 L1391.24 1213.97 L1391.82 1213.97 L1392.41 1213.97 L1393 1213.97 L1393.58 1213.97 L1394.17 1213.97 L1394.75 1213.97 L1395.34 1213.97 L1395.93 1213.97 L1396.51 1213.97 L1397.1 1213.97 L1397.69 1213.97 L1398.27 1213.97 L1398.86 1213.97 L1399.45 1213.97 L1400.03 1213.97 L1400.62 1213.97 L1401.21 1213.97 L1401.79 1213.97 L1402.38 1213.97 L1402.96 1213.97 L1403.55 1213.97 L1404.14 1213.97 L1404.72 1213.97 L1405.31 1213.97 L1405.9 1213.97 L1406.48 1213.97 L1407.07 1213.97 L1407.66 1213.97 L1408.24 1213.97 L1408.83 1213.97 L1409.42 1213.97 L1410 1213.97 L1410.59 1213.97 L1411.17 1213.97 L1411.76 1213.97 L1412.35 1213.97 L1412.93 1213.97 L1413.52 1213.97 L1414.11 1213.97 L1414.69 1213.97 L1415.28 1213.97 L1415.87 1213.97 L1416.45 1213.97 L1417.04 1213.97 L1417.63 1213.97 L1418.21 1213.97 L1418.8 1213.97 L1419.38 1213.97 L1419.97 1213.97 L1420.56 1213.97 L1421.14 1213.97 L1421.73 1213.97 L1422.32 1213.97 L1422.9 1213.97 L1423.49 1213.97 L1424.08 1213.97 L1424.66 1213.97 L1425.25 1213.97 L1425.83 1213.97 L1426.42 1213.97 L1427.01 1213.97 L1427.59 1213.97 L1428.18 1213.97 L1428.77 1213.97 L1429.35 1213.97 L1429.94 1213.97 L1430.53 1213.97 L1431.11 1213.97 L1431.7 1213.97 L1432.29 1213.97 L1432.87 1213.97 L1433.46 1213.97 L1434.04 1213.97 L1434.63 1213.97 L1435.22 1213.97 L1435.8 1213.97 L1436.39 1213.97 L1436.98 1213.97 L1437.56 1213.97 L1438.15 1213.97 L1438.74 1213.97 L1439.32 1213.97 L1439.91 1213.97 L1440.5 1213.97 L1441.08 1213.97 L1441.67 1213.97 L1442.25 1213.97 L1442.84 1213.97 L1443.43 1213.97 L1444.01 1213.97 L1444.6 1213.97 L1445.19 1213.97 L1445.77 1213.97 L1446.36 1213.97 L1446.95 1213.97 L1447.53 1213.97 L1448.12 1213.97 L1448.7 1213.97 L1449.29 1213.97 L1449.88 1213.97 L1450.46 1213.97 L1451.05 1213.97 L1451.64 1213.97 L1452.22 1213.97 L1452.81 1213.97 L1453.4 1213.97 L1453.98 1213.97 L1454.57 1213.97 L1455.16 1213.97 L1455.74 1213.97 L1456.33 1213.97 L1456.91 1213.97 L1457.5 1213.97 L1458.09 1213.97 L1458.67 1213.97 L1459.26 1213.97 L1459.85 1213.97 L1460.43 1213.97 L1461.02 1213.97 L1461.61 1213.97 L1462.19 1213.97 L1462.78 1213.97 L1463.37 1213.97 L1463.95 1213.97 L1464.54 1213.97 L1465.12 1213.97 L1465.71 1213.97 L1466.3 1213.97 L1466.88 1213.97 L1467.47 1213.97 L1468.06 1213.97 L1468.64 1213.97 L1469.23 1213.97 L1469.82 1213.97 L1470.4 1213.97 L1470.99 1213.97 L1471.57 1213.97 L1472.16 1213.97 L1472.75 1213.97 L1473.33 1213.97 L1473.92 1213.97 L1474.51 1213.97 L1475.09 1213.97 L1475.68 1213.97 L1476.27 1213.97 L1476.85 1213.97 L1477.44 1213.97 L1478.03 1213.97 L1478.61 1213.97 L1479.2 1213.97 L1479.78 1213.97 L1480.37 1213.97 L1480.96 1213.97 L1481.54 1213.97 L1482.13 1213.97 L1482.72 1213.97 L1483.3 1213.97 L1483.89 1213.97 L1484.48 1213.97 L1485.06 1213.97 L1485.65 1213.97 L1486.24 1213.97 L1486.82 1213.97 L1487.41 1213.97 L1487.99 1213.97 L1488.58 1213.97 L1489.17 1213.97 L1489.75 1213.97 L1490.34 1213.97 L1490.93 1213.97 L1491.51 1213.97 L1492.1 1213.97 L1492.69 1213.97 L1493.27 1213.97 L1493.86 1213.97 L1494.45 1213.97 L1495.03 1213.97 L1495.62 1213.97 L1496.2 1213.97 L1496.79 1213.97 L1497.38 1213.97 L1497.96 1213.97 L1498.55 1213.97 L1499.14 1213.97 L1499.72 1213.97 L1500.31 1213.97 L1500.9 1213.97 L1501.48 1213.97 L1502.07 1213.97 L1502.65 1213.97 L1503.24 1213.97 L1503.83 1213.97 L1504.41 1213.97 L1505 1213.97 L1505.59 1213.97 L1506.17 1213.97 L1506.76 1213.97 L1507.35 1213.97 L1507.93 1213.97 L1508.52 1213.97 L1509.11 1213.97 L1509.69 1213.97 L1510.28 1213.97 L1510.86 1213.97 L1511.45 1213.97 L1512.04 1213.97 L1512.62 1213.97 L1513.21 1213.97 L1513.8 1213.97 L1514.38 1213.97 L1514.97 1213.97 L1515.56 1213.97 L1516.14 1213.97 L1516.73 1213.97 L1517.32 1213.97 L1517.9 1213.97 L1518.49 1213.97 L1519.07 1213.97 L1519.66 1213.97 L1520.25 1213.97 L1520.83 1213.97 L1521.42 1213.97 L1522.01 1213.97 L1522.59 1213.97 L1523.18 1213.97 L1523.77 1213.97 L1524.35 1213.97 L1524.94 1213.97 L1525.52 1213.97 L1526.11 1213.97 L1526.7 1213.97 L1527.28 1213.97 L1527.87 1213.97 L1528.46 1213.97 L1529.04 1213.97 L1529.63 1213.97 L1530.22 1213.97 L1530.8 1213.97 L1531.39 1213.97 L1531.98 1213.97 L1532.56 1213.97 L1533.15 1213.97 L1533.73 1213.97 L1534.32 1213.97 L1534.91 1213.97 L1535.49 1213.97 L1536.08 1213.97 L1536.67 1213.97 L1537.25 1213.97 L1537.84 1213.97 L1538.43 1213.97 L1539.01 1213.97 L1539.6 1213.97 L1540.19 1213.97 L1540.77 1213.97 L1541.36 1213.97 L1541.94 1213.97 L1542.53 1213.97 L1543.12 1213.97 L1543.7 1213.97 L1544.29 1213.97 L1544.88 1213.97 L1545.46 1213.97 L1546.05 1213.97 L1546.64 1213.97 L1547.22 1213.97 L1547.81 1213.97 L1548.4 1213.97 L1548.98 1213.97 L1549.57 1213.97 L1550.15 1213.97 L1550.74 1213.97 L1551.33 1213.97 L1551.91 1213.97 L1552.5 1213.97 L1553.09 1213.97 L1553.67 1213.97 L1554.26 1213.97 L1554.85 1213.97 L1555.43 1213.97 L1556.02 1213.97 L1556.6 1213.97 L1557.19 1213.97 L1557.78 1213.97 L1558.36 1213.97 L1558.95 1213.97 L1559.54 1213.97 L1560.12 1213.97 L1560.71 1213.97 L1561.3 1213.97 L1561.88 1213.97 L1562.47 1213.97 L1563.06 1213.97 L1563.64 1213.97 L1564.23 1213.97 L1564.81 1213.97 L1565.4 1213.97 L1565.99 1213.97 L1566.57 1213.97 L1567.16 1213.97 L1567.75 1213.97 L1568.33 1213.97 L1568.92 1213.97 L1569.51 1213.97 L1570.09 1213.97 L1570.68 1213.97 L1571.27 1213.97 L1571.85 1213.97 L1572.44 1213.97 L1573.02 1213.97 L1573.61 1213.97 L1574.2 1213.97 L1574.78 1213.97 L1575.37 1213.97 L1575.96 1213.97 L1576.54 1213.97 L1577.13 1213.97 L1577.72 1213.97 L1578.3 1213.97 L1578.89 1213.97 L1579.47 1213.97 L1580.06 1213.97 L1580.65 1213.97 L1581.23 1213.97 L1581.82 1213.97 L1582.41 1213.97 L1582.99 1213.97 L1583.58 1213.97 L1584.17 1213.97 L1584.75 1213.97 L1585.34 1213.97 L1585.93 1213.97 L1586.51 1213.97 L1587.1 1213.97 L1587.68 1213.97 L1588.27 1213.97 L1588.86 1213.97 L1589.44 1213.97 L1590.03 1213.97 L1590.62 1213.97 L1591.2 1213.97 L1591.79 1213.97 L1592.38 1213.97 L1592.96 1213.97 L1593.55 1213.97 L1594.14 1213.97 L1594.72 1213.97 L1595.31 1213.97 L1595.89 1213.97 L1596.48 1213.97 L1597.07 1213.97 L1597.65 1213.97 L1598.24 1213.97 L1598.83 1213.97 L1599.41 1213.97 L1600 1213.97 L1600.59 1213.97 L1601.17 1213.97 L1601.76 1213.97 L1602.34 1213.97 L1602.93 1213.97 L1603.52 1213.97 L1604.1 1213.97 L1604.69 1213.97 L1605.28 1213.97 L1605.86 1213.97 L1606.45 1213.97 L1607.04 1213.97 L1607.62 1213.97 L1608.21 1213.97 L1608.8 1213.97 L1609.38 1213.97 L1609.97 1213.97 L1610.55 1213.97 L1611.14 1213.97 L1611.73 1213.97 L1612.31 1213.97 L1612.9 1213.97 L1613.49 1213.97 L1614.07 1213.97 L1614.66 1213.97 L1615.25 1213.97 L1615.83 1213.97 L1616.42 1213.97 L1617.01 1213.97 L1617.59 1213.97 L1618.18 1213.97 L1618.76 1213.97 L1619.35 1213.97 L1619.94 1213.97 L1620.52 1213.97 L1621.11 1213.97 L1621.7 1213.97 L1622.28 1213.97 L1622.87 1213.97 L1623.46 1213.97 L1624.04 1213.97 L1624.63 1213.97 L1625.22 1213.97 L1625.8 1213.97 L1626.39 1213.97 L1626.97 1213.97 L1627.56 1213.97 L1628.15 1213.97 L1628.73 1213.97 L1629.32 1213.97 L1629.91 1213.97 L1630.49 1213.97 L1631.08 1213.97 L1631.67 1213.97 L1632.25 1213.97 L1632.84 1213.97 L1633.42 1213.97 L1634.01 1213.97 L1634.6 1213.97 L1635.18 1213.97 L1635.77 1213.97 L1636.36 1213.97 L1636.94 1213.97 L1637.53 1213.97 L1638.12 1213.97 L1638.7 1213.97 L1639.29 1213.97 L1639.88 1213.97 L1640.46 1213.97 L1641.05 1213.97 L1641.63 1213.97 L1642.22 1213.97 L1642.81 1213.97 L1643.39 1213.97 L1643.98 1213.97 L1644.57 1213.97 L1645.15 1213.97 L1645.74 1213.97 L1646.33 1213.97 L1646.91 1213.97 L1647.5 1213.97 L1648.09 1213.97 L1648.67 1213.97 L1649.26 1213.97 L1649.84 1213.97 L1650.43 1213.97 L1651.02 1213.97 L1651.6 1213.97 L1652.19 1213.97 L1652.78 1213.97 L1653.36 1213.97 L1653.95 1213.97 L1654.54 1213.97 L1655.12 1213.97 L1655.71 1213.97 L1656.29 1213.97 L1656.88 1213.97 L1657.47 1213.97 L1658.05 1213.97 L1658.64 1213.97 L1659.23 1213.97 L1659.81 1213.97 L1660.4 1213.97 L1660.99 1213.97 L1661.57 1213.97 L1662.16 1213.97 L1662.75 1213.97 L1663.33 1213.97 L1663.92 1213.97 L1664.5 1213.97 L1665.09 1213.97 L1665.68 1213.97 L1666.26 1213.97 L1666.85 1213.97 L1667.44 1213.97 L1668.02 1213.97 L1668.61 1213.97 L1669.2 1213.97 L1669.78 1213.97 L1670.37 1213.97 L1670.96 1213.97 L1671.54 1213.97 L1672.13 1213.97 L1672.71 1213.97 L1673.3 1213.97 L1673.89 1213.97 L1674.47 1213.97 L1675.06 1213.97 L1675.65 1213.97 L1676.23 1213.97 L1676.82 1213.97 L1677.41 1213.97 L1677.99 1213.97 L1678.58 1213.97 L1679.17 1213.97 L1679.75 1213.97 L1680.34 1213.97 L1680.92 1213.97 L1681.51 1213.97 L1682.1 1213.97 L1682.68 1213.97 L1683.27 1213.97 L1683.86 1213.97 L1684.44 1213.97 L1685.03 1213.97 L1685.62 1213.97 L1686.2 1213.97 L1686.79 1213.97 L1687.37 1213.97 L1687.96 1213.97 L1688.55 1213.97 L1689.13 1213.97 L1689.72 1213.97 L1690.31 1213.97 L1690.89 1213.97 L1691.48 1213.97 L1692.07 1213.97 L1692.65 1213.97 L1693.24 1213.97 L1693.83 1213.97 L1694.41 1213.97 L1695 1213.97 L1695.58 1213.97 L1696.17 1213.97 L1696.76 1213.97 L1697.34 1213.97 L1697.93 1213.97 L1698.52 1213.97 L1699.1 1213.97 L1699.69 1213.97 L1700.28 1213.97 L1700.86 1213.97 L1701.45 1213.97 L1702.04 1213.97 L1702.62 1213.97 L1703.21 1213.97 L1703.79 1213.97 L1704.38 1213.97 L1704.97 1213.97 L1705.55 1213.97 L1706.14 1213.97 L1706.73 1213.97 L1707.31 1213.97 L1707.9 1213.97 L1708.49 1213.97 L1709.07 1213.97 L1709.66 1213.97 L1710.24 1213.97 L1710.83 1213.97 L1711.42 1213.97 L1712 1213.97 L1712.59 1213.97 L1713.18 1213.97 L1713.76 1213.97 L1714.35 1213.97 L1714.94 1213.97 L1715.52 1213.97 L1716.11 1213.97 L1716.7 1213.97 L1717.28 1213.97 L1717.87 1213.97 L1718.45 1213.97 L1719.04 1213.97 L1719.63 1213.97 L1720.21 1213.97 L1720.8 1213.97 L1721.39 1213.97 L1721.97 1213.97 L1722.56 1213.97 L1723.15 1213.97 L1723.73 1213.97 L1724.32 1213.97 L1724.91 1213.97 L1725.49 1213.97 L1726.08 1213.97 L1726.66 1213.97 L1727.25 1213.97 L1727.84 1213.97 L1728.42 1213.97 L1729.01 1213.97 L1729.6 1213.97 L1730.18 1213.97 L1730.77 1213.97 L1731.36 1213.97 L1731.94 1213.97 L1732.53 1213.97 L1733.11 1213.97 L1733.7 1213.97 L1734.29 1213.97 L1734.87 1213.97 L1735.46 1213.97 L1736.05 1213.97 L1736.63 1213.97 L1737.22 1213.97 L1737.81 1213.97 L1738.39 1213.97 L1738.98 1213.97 L1739.57 1213.97 L1740.15 1213.97 L1740.74 1213.97 L1741.32 1213.97 L1741.91 1213.97 L1742.5 1213.97 L1743.08 1213.97 L1743.67 1213.97 L1744.26 1213.97 L1744.84 1213.97 L1745.43 1213.97 L1746.02 1213.97 L1746.6 1213.97 L1747.19 1213.97 L1747.78 1213.97 L1748.36 1213.97 L1748.95 1213.97 L1749.53 1213.97 L1750.12 1213.97 L1750.71 1213.97 L1751.29 1213.97 L1751.88 1213.97 L1752.47 1213.97 L1753.05 1213.97 L1753.64 1213.97 L1754.23 1213.97 L1754.81 1213.97 L1755.4 1213.97 L1755.99 1213.97 L1756.57 1213.97 L1757.16 1213.97 L1757.74 1213.97 L1758.33 1213.97 L1758.92 1213.97 L1759.5 1213.97 L1760.09 1213.97 L1760.68 1213.97 L1761.26 1213.97 L1761.85 1213.97 L1762.44 1213.97 L1763.02 1213.97 L1763.61 1213.97 L1764.19 1213.97 L1764.78 1213.97 L1765.37 1213.97 L1765.95 1213.97 L1766.54 1213.97 L1767.13 1213.97 L1767.71 1213.97 L1768.3 1213.97 L1768.89 1213.97 L1769.47 1213.97 L1770.06 1213.97 L1770.65 1213.97 L1771.23 1213.97 L1771.82 1213.97 L1772.4 1213.97 L1772.99 1213.97 L1773.58 1213.97 L1774.16 1213.97 L1774.75 1213.97 L1775.34 1213.97 L1775.92 1213.97 L1776.51 1213.97 L1777.1 1213.97 L1777.68 1213.97 L1778.27 1213.97 L1778.86 1213.97 L1779.44 1213.97 L1780.03 1213.97 L1780.61 1213.97 L1781.2 1213.97 L1781.79 1213.97 L1782.37 1213.97 L1782.96 1213.97 L1783.55 1213.97 L1784.13 1213.97 L1784.72 1213.97 L1785.31 1213.97 L1785.89 1213.97 L1786.48 1213.97 L1787.06 1213.97 L1787.65 1213.97 L1788.24 1213.97 L1788.82 1213.97 L1789.41 1213.97 L1790 1213.97 L1790.58 1213.97 L1791.17 1213.97 L1791.76 1213.97 L1792.34 1213.97 L1792.93 1213.97 L1793.52 1213.97 L1794.1 1213.97 L1794.69 1213.97 L1795.27 1213.97 L1795.86 1213.97 L1796.45 1213.97 L1797.03 1213.97 L1797.62 1213.97 L1798.21 1213.97 L1798.79 1213.97 L1799.38 1213.97 L1799.97 1213.97 L1800.55 1213.97 L1801.14 1213.97 L1801.73 1213.97 L1802.31 1213.97 L1802.9 1213.97 L1803.48 1213.97 L1804.07 1213.97 L1804.66 1213.97 L1805.24 1213.97 L1805.83 1213.97 L1806.42 1213.97 L1807 1213.97 L1807.59 1213.97 L1808.18 1213.97 L1808.76 1213.97 L1809.35 1213.97 L1809.94 1213.97 L1810.52 1213.97 L1811.11 1213.97 L1811.69 1213.97 L1812.28 1213.97 L1812.87 1213.97 L1813.45 1213.97 L1814.04 1213.97 L1814.63 1213.97 L1815.21 1213.97 L1815.8 1213.97 L1816.39 1213.97 L1816.97 1213.97 L1817.56 1213.97 L1818.14 1213.97 L1818.73 1213.97 L1819.32 1213.97 L1819.9 1213.97 L1820.49 1213.97 L1821.08 1213.97 L1821.66 1213.97 L1822.25 1213.97 L1822.84 1213.97 L1823.42 1213.97 L1824.01 1213.97 L1824.6 1213.97 L1825.18 1213.97 L1825.77 1213.97 L1826.35 1213.97 L1826.94 1213.97 L1827.53 1213.97 L1828.11 1213.97 L1828.7 1213.97 L1829.29 1213.97 L1829.87 1213.97 L1830.46 1213.97 L1831.05 1213.97 L1831.63 1213.97 L1832.22 1213.97 L1832.81 1213.97 L1833.39 1213.97 L1833.98 1213.97 L1834.56 1213.97 L1835.15 1213.97 L1835.74 1213.97 L1836.32 1213.97 L1836.91 1213.97 L1837.5 1213.97 L1838.08 1213.97 L1838.67 1213.97 L1839.26 1213.97 L1839.84 1213.97 L1840.43 1213.97 L1841.01 1213.97 L1841.6 1213.97 L1842.19 1213.97 L1842.77 1213.97 L1843.36 1213.97 L1843.95 1213.97 L1844.53 1213.97 L1845.12 1213.97 L1845.71 1213.97 L1846.29 1213.97 L1846.88 1213.97 L1847.47 1213.97 L1848.05 1213.97 L1848.64 1213.97 L1849.22 1213.97 L1849.81 1213.97 L1850.4 1213.97 L1850.98 1213.97 L1851.57 1213.97 L1852.16 1213.97 L1852.74 1213.97 L1853.33 1213.97 L1853.92 1213.97 L1854.5 1213.97 L1855.09 1213.97 L1855.68 1213.97 L1856.26 1213.97 L1856.85 1213.97 L1857.43 1213.97 L1858.02 1213.97 L1858.61 1213.97 L1859.19 1213.97 L1859.78 1213.97 L1860.37 1213.97 L1860.95 1213.97 L1861.54 1213.97 L1862.13 1213.97 L1862.71 1213.97 L1863.3 1213.97 L1863.88 1213.97 L1864.47 1213.97 L1865.06 1213.97 L1865.64 1213.97 L1866.23 1213.97 L1866.82 1213.97 L1867.4 1213.97 L1867.99 1213.97 L1868.58 1213.97 L1869.16 1213.97 L1869.75 1213.97 L1870.34 1213.97 L1870.92 1213.97 L1871.51 1213.97 L1872.09 1213.97 L1872.68 1213.97 L1873.27 1213.97 L1873.85 1213.97 L1874.44 1213.97 L1875.03 1213.97 L1875.61 1213.97 L1876.2 1213.97 L1876.79 1213.97 L1877.37 1213.97 L1877.96 1213.97 L1878.55 1213.97 L1879.13 1213.97 L1879.72 1213.97 L1880.3 1213.97 L1880.89 1213.97 L1881.48 1213.97 L1882.06 1213.97 L1882.65 1213.97 L1883.24 1213.97 L1883.82 1213.97 L1884.41 1213.97 L1885 1213.97 L1885.58 1213.97 L1886.17 1213.97 L1886.76 1213.97 L1887.34 1213.97 L1887.93 1213.97 L1888.51 1213.97 L1889.1 1213.97 L1889.69 1213.97 L1890.27 1213.97 L1890.86 1213.97 L1891.45 1213.97 L1892.03 1213.97 L1892.62 1213.97 L1893.21 1213.97 L1893.79 1213.97 L1894.38 1213.97 L1894.96 1213.97 L1895.55 1213.97 L1896.14 1213.97 L1896.72 1213.97 L1897.31 1213.97 L1897.9 1213.97 L1898.48 1213.97 L1899.07 1213.97 L1899.66 1213.97 L1900.24 1213.97 L1900.83 1213.97 L1901.42 1213.97 L1902 1213.97 L1902.59 1213.97 L1903.17 1213.97 L1903.76 1213.97 L1904.35 1213.97 L1904.93 1213.97 L1905.52 1213.97 L1906.11 1213.97 L1906.69 1213.97 L1907.28 1213.97 L1907.87 1213.97 L1908.45 1213.97 L1909.04 1213.97 L1909.63 1213.97 L1910.21 1213.97 L1910.8 1213.97 L1911.38 1213.97 L1911.97 1213.97 L1912.56 1213.97 L1913.14 1213.97 L1913.73 1213.97 L1914.32 1213.97 L1914.9 1213.97 L1915.49 1213.97 L1916.08 1213.97 L1916.66 1213.97 L1917.25 1213.97 L1917.83 1213.97 L1918.42 1213.97 L1919.01 1213.97 L1919.59 1213.97 L1920.18 1213.97 L1920.77 1213.97 L1921.35 1213.97 L1921.94 1213.97 L1922.53 1213.97 L1923.11 1213.97 L1923.7 1213.97 L1924.29 1213.97 L1924.87 1213.97 L1925.46 1213.97 L1926.04 1213.97 L1926.63 1213.97 L1927.22 1213.97 L1927.8 1213.97 L1928.39 1213.97 L1928.98 1213.97 L1929.56 1213.97 L1930.15 1213.97 L1930.74 1213.97 L1931.32 1213.97 L1931.91 1213.97 L1932.5 1213.97 L1933.08 1213.97 L1933.67 1213.97 L1934.25 1213.97 L1934.84 1213.97 L1935.43 1213.97 L1936.01 1213.97 L1936.6 1213.97 L1937.19 1213.97 L1937.77 1213.97 L1938.36 1213.97 L1938.95 1213.97 L1939.53 1213.97 L1940.12 1213.97 L1940.71 1213.97 L1941.29 1213.97 L1941.88 1213.97 L1942.46 1213.97 L1943.05 1213.97 L1943.64 1213.97 L1944.22 1213.97 L1944.81 1213.97 L1945.4 1213.97 L1945.98 1213.97 L1946.57 1213.97 L1947.16 1213.97 L1947.74 1213.97 L1948.33 1213.97 L1948.91 1213.97 L1949.5 1213.97 L1950.09 1213.97 L1950.67 1213.97 L1951.26 1213.97 L1951.85 1213.97 L1952.43 1213.97 L1953.02 1213.97 L1953.61 1213.97 L1954.19 1213.97 L1954.78 1213.97 L1955.37 1213.97 L1955.95 1213.97 L1956.54 1213.97 L1957.12 1213.97 L1957.71 1213.97 L1958.3 1213.97 L1958.88 1213.97 L1959.47 1213.97 L1960.06 1213.97 L1960.64 1213.97 L1961.23 1213.97 L1961.82 1213.97 L1962.4 1213.97 L1962.99 1213.97 L1963.58 1213.97 L1964.16 1213.97 L1964.75 1213.97 L1965.33 1213.97 L1965.92 1213.97 L1966.51 1213.97 L1967.09 1213.97 L1967.68 1213.97 L1968.27 1213.97 L1968.85 1213.97 L1969.44 1213.97 L1970.03 1213.97 L1970.61 1213.97 L1971.2 1213.97 L1971.78 1213.97 L1972.37 1213.97 L1972.96 1213.97 L1973.54 1213.97 L1974.13 1213.97 L1974.72 1213.97 L1975.3 1213.97 L1975.89 1213.97 L1976.48 1213.97 L1977.06 1213.97 L1977.65 1213.97 L1978.24 1213.97 L1978.82 1213.97 L1979.41 1213.97 L1979.99 1213.97 L1980.58 1213.97 L1981.17 1213.97 L1981.75 1213.97 L1982.34 1213.97 L1982.93 1213.97 L1983.51 1213.97 L1984.1 1213.97 L1984.69 1213.97 L1985.27 1213.97 L1985.86 1213.97 L1986.45 1213.97 L1987.03 1213.97 L1987.62 1213.97 L1988.2 1213.97 L1988.79 1213.97 L1989.38 1213.97 L1989.96 1213.97 L1990.55 1213.97 L1991.14 1213.97 L1991.72 1213.97 L1992.31 1213.97 L1992.9 1213.97 L1993.48 1213.97 L1994.07 1213.97 L1994.65 1213.97 L1995.24 1213.97 L1995.83 1213.97 L1996.41 1213.97 L1997 1213.97 L1997.59 1213.97 L1998.17 1213.97 L1998.76 1213.97 L1999.35 1213.97 L1999.93 1213.97 L2000.52 1213.97 L2001.11 1213.97 L2001.69 1213.97 L2002.28 1213.97 L2002.86 1213.97 L2003.45 1213.97 L2004.04 1213.97 L2004.62 1213.97 L2005.21 1213.97 L2005.8 1213.97 L2006.38 1213.97 L2006.97 1213.97 L2007.56 1213.97 L2008.14 1213.97 L2008.73 1213.97 L2009.32 1213.97 L2009.9 1213.97 L2010.49 1213.97 L2011.07 1213.97 L2011.66 1213.97 L2012.25 1213.97 L2012.83 1213.97 L2013.42 1213.97 L2014.01 1213.97 L2014.59 1213.97 L2015.18 1213.97 L2015.77 1213.97 L2016.35 1213.97 L2016.94 1213.97 L2017.53 1213.97 L2018.11 1213.97 L2018.7 1213.97 L2019.28 1213.97 L2019.87 1213.97 L2020.46 1213.97 L2021.04 1213.97 L2021.63 1213.97 L2022.22 1213.97 L2022.8 1213.97 L2023.39 1213.97 L2023.98 1213.97 L2024.56 1213.97 L2025.15 1213.97 L2025.73 1213.97 L2026.32 1213.97 L2026.91 1213.97 L2027.49 1213.97 L2028.08 1213.97 L2028.67 1213.97 L2029.25 1213.97 L2029.84 1213.97 L2030.43 1213.97 L2031.01 1213.97 L2031.6 1213.97 L2032.19 1213.97 L2032.77 1213.97 L2033.36 1213.97 L2033.94 1213.97 L2034.53 1213.97 L2035.12 1213.97 L2035.7 1213.97 L2036.29 1213.97 L2036.88 1213.97 L2037.46 1213.97 L2038.05 1213.97 L2038.64 1213.97 L2039.22 1213.97 L2039.81 1213.97 L2040.4 1213.97 L2040.98 1213.97 L2041.57 1213.97 L2042.15 1213.97 L2042.74 1213.97 L2043.33 1213.97 L2043.91 1213.97 L2044.5 1213.97 L2045.09 1213.97 L2045.67 1213.97 L2046.26 1213.97 L2046.85 1213.97 L2047.43 1213.97 L2048.02 1213.97 L2048.6 1213.97 L2049.19 1213.97 L2049.78 1213.97 L2050.36 1213.97 L2050.95 1213.97 L2051.54 1213.97 L2052.12 1213.97 L2052.71 1213.97 L2053.3 1213.97 L2053.88 1213.97 L2054.47 1213.97 L2055.06 1213.97 L2055.64 1213.97 L2056.23 1213.97 L2056.81 1213.97 L2057.4 1213.97 L2057.99 1213.97 L2058.57 1213.97 L2059.16 1213.97 L2059.75 1213.97 L2060.33 1213.97 L2060.92 1213.97 L2061.51 1213.97 L2062.09 1213.97 L2062.68 1213.97 L2063.27 1213.97 L2063.85 1213.97 L2064.44 1213.97 L2065.02 1213.97 L2065.61 1213.97 L2066.2 1213.97 L2066.78 1213.97 L2067.37 1213.97 L2067.96 1213.97 L2068.54 1213.97 L2069.13 1213.97 L2069.72 1213.97 L2070.3 1213.97 L2070.89 1213.97 L2071.48 1213.97 L2072.06 1213.97 L2072.65 1213.97 L2073.23 1213.97 L2073.82 1213.97 L2074.41 1213.97 L2074.99 1213.97 L2075.58 1213.97 L2076.17 1213.97 L2076.75 1213.97 L2077.34 1213.97 L2077.93 1213.97 L2078.51 1213.97 L2079.1 1213.97 L2079.68 1213.97 L2080.27 1213.97 L2080.86 1213.97 L2081.44 1213.97 L2082.03 1213.97 L2082.62 1213.97 L2083.2 1213.97 L2083.79 1213.97 L2084.38 1213.97 L2084.96 1213.97 L2085.55 1213.97 L2086.14 1213.97 L2086.72 1213.97 L2087.31 1213.97 L2087.89 1213.97 L2088.48 1213.97 L2089.07 1213.97 L2089.65 1213.97 L2090.24 1213.97 L2090.83 1213.97 L2091.41 1213.97 L2092 1213.97 L2092.59 1213.97 L2093.17 1213.97 L2093.76 1213.97 L2094.35 1213.97 L2094.93 1213.97 L2095.52 1213.97 L2096.1 1213.97 L2096.69 1213.97 L2097.28 1213.97 L2097.86 1213.97 L2098.45 1213.97 L2099.04 1213.97 L2099.62 1213.97 L2100.21 1213.97 L2100.8 1213.97 L2101.38 1213.97 L2101.97 1213.97 L2102.55 1213.97 L2103.14 1213.97 L2103.73 1213.97 L2104.31 1213.97 L2104.9 1213.97 L2105.49 1213.97 L2106.07 1213.97 L2106.66 1213.97 L2107.25 1213.97 L2107.83 1213.97 L2108.42 1213.97 L2109.01 1213.97 L2109.59 1213.97 L2110.18 1213.97 L2110.76 1213.97 L2111.35 1213.97 L2111.94 1213.97 L2112.52 1213.97 L2113.11 1213.97 L2113.7 1213.97 L2114.28 1213.97 L2114.87 1213.97 L2115.46 1213.97 L2116.04 1213.97 L2116.63 1213.97 L2117.22 1213.97 L2117.8 1213.97 L2118.39 1213.97 L2118.97 1213.97 L2119.56 1213.97 L2120.15 1213.97 L2120.73 1213.97 L2121.32 1213.97 L2121.91 1213.97 L2122.49 1213.97 L2123.08 1213.97 L2123.67 1213.97 L2124.25 1213.97 L2124.84 1213.97 L2125.42 1213.97 L2126.01 1213.97 L2126.6 1213.97 L2127.18 1213.97 L2127.77 1213.97 L2128.36 1213.97 L2128.94 1213.97 L2129.53 1213.97 L2130.12 1213.97 L2130.7 1213.97 L2131.29 1213.97 L2131.88 1213.97 L2132.46 1213.97 L2133.05 1213.97 L2133.63 1213.97 L2134.22 1213.97 L2134.81 1213.97 L2135.39 1213.97 L2135.98 1213.97 L2136.57 1213.97 L2137.15 1213.97 L2137.74 1213.97 L2138.33 1213.97 L2138.91 1213.97 L2139.5 1213.97 L2140.09 1213.97 L2140.67 1213.97 L2141.26 1213.97 L2141.84 1213.97 L2142.43 1213.97 L2143.02 1213.97 L2143.6 1213.97 L2144.19 1213.97 L2144.78 1213.97 L2145.36 1213.97 L2145.95 1213.97 L2146.54 1213.97 L2147.12 1213.97 L2147.71 1213.97 L2148.3 1213.97 L2148.88 1213.97 L2149.47 1213.97 L2150.05 1213.97 L2150.64 1213.97 L2151.23 1213.97 L2151.81 1213.97 L2152.4 1213.97 L2152.99 1213.97 L2153.57 1213.97 L2154.16 1213.97 L2154.75 1213.97 L2155.33 1213.97 L2155.92 1213.97 L2156.5 1213.97 L2157.09 1213.97 L2157.68 1213.97 L2158.26 1213.97 L2158.26 1213.8 L2157.68 1213.8 L2157.09 1213.8 L2156.5 1213.8 L2155.92 1213.8 L2155.33 1213.8 L2154.75 1213.8 L2154.16 1213.8 L2153.57 1213.8 L2152.99 1213.8 L2152.4 1213.8 L2151.81 1213.8 L2151.23 1213.8 L2150.64 1213.8 L2150.05 1213.8 L2149.47 1213.8 L2148.88 1213.8 L2148.3 1213.8 L2147.71 1213.8 L2147.12 1213.8 L2146.54 1213.8 L2145.95 1213.8 L2145.36 1213.8 L2144.78 1213.8 L2144.19 1213.8 L2143.6 1213.8 L2143.02 1213.8 L2142.43 1213.8 L2141.84 1213.8 L2141.26 1213.8 L2140.67 1213.8 L2140.09 1213.8 L2139.5 1213.8 L2138.91 1213.8 L2138.33 1213.8 L2137.74 1213.8 L2137.15 1213.8 L2136.57 1213.8 L2135.98 1213.8 L2135.39 1213.8 L2134.81 1213.8 L2134.22 1213.8 L2133.63 1213.8 L2133.05 1213.8 L2132.46 1213.8 L2131.88 1213.8 L2131.29 1213.8 L2130.7 1213.8 L2130.12 1213.8 L2129.53 1213.8 L2128.94 1213.8 L2128.36 1213.8 L2127.77 1213.8 L2127.18 1213.8 L2126.6 1213.8 L2126.01 1213.8 L2125.42 1213.8 L2124.84 1213.8 L2124.25 1213.8 L2123.67 1213.8 L2123.08 1213.8 L2122.49 1213.8 L2121.91 1213.8 L2121.32 1213.8 L2120.73 1213.8 L2120.15 1213.8 L2119.56 1213.8 L2118.97 1213.8 L2118.39 1213.8 L2117.8 1213.8 L2117.22 1213.8 L2116.63 1213.8 L2116.04 1213.8 L2115.46 1213.8 L2114.87 1213.8 L2114.28 1213.8 L2113.7 1213.8 L2113.11 1213.8 L2112.52 1213.8 L2111.94 1213.8 L2111.35 1213.8 L2110.76 1213.8 L2110.18 1213.8 L2109.59 1213.8 L2109.01 1213.8 L2108.42 1213.8 L2107.83 1213.8 L2107.25 1213.8 L2106.66 1213.8 L2106.07 1213.8 L2105.49 1213.8 L2104.9 1213.8 L2104.31 1213.8 L2103.73 1213.8 L2103.14 1213.8 L2102.55 1213.8 L2101.97 1213.8 L2101.38 1213.8 L2100.8 1213.8 L2100.21 1213.8 L2099.62 1213.8 L2099.04 1213.8 L2098.45 1213.8 L2097.86 1213.8 L2097.28 1213.8 L2096.69 1213.8 L2096.1 1213.8 L2095.52 1213.8 L2094.93 1213.8 L2094.35 1213.8 L2093.76 1213.8 L2093.17 1213.8 L2092.59 1213.8 L2092 1213.8 L2091.41 1213.8 L2090.83 1213.8 L2090.24 1213.8 L2089.65 1213.8 L2089.07 1213.8 L2088.48 1213.8 L2087.89 1213.8 L2087.31 1213.8 L2086.72 1213.8 L2086.14 1213.8 L2085.55 1213.8 L2084.96 1213.8 L2084.38 1213.8 L2083.79 1213.8 L2083.2 1213.8 L2082.62 1213.8 L2082.03 1213.8 L2081.44 1213.8 L2080.86 1213.8 L2080.27 1213.8 L2079.68 1213.8 L2079.1 1213.8 L2078.51 1213.8 L2077.93 1213.8 L2077.34 1213.8 L2076.75 1213.8 L2076.17 1213.8 L2075.58 1213.8 L2074.99 1213.8 L2074.41 1213.8 L2073.82 1213.8 L2073.23 1213.8 L2072.65 1213.8 L2072.06 1213.8 L2071.48 1213.8 L2070.89 1213.8 L2070.3 1213.8 L2069.72 1213.8 L2069.13 1213.8 L2068.54 1213.8 L2067.96 1213.8 L2067.37 1213.8 L2066.78 1213.8 L2066.2 1213.8 L2065.61 1213.8 L2065.02 1213.8 L2064.44 1213.8 L2063.85 1213.8 L2063.27 1213.8 L2062.68 1213.8 L2062.09 1213.8 L2061.51 1213.8 L2060.92 1213.8 L2060.33 1213.8 L2059.75 1213.8 L2059.16 1213.8 L2058.57 1213.8 L2057.99 1213.8 L2057.4 1213.8 L2056.81 1213.8 L2056.23 1213.8 L2055.64 1213.8 L2055.06 1213.8 L2054.47 1213.8 L2053.88 1213.8 L2053.3 1213.8 L2052.71 1213.8 L2052.12 1213.8 L2051.54 1213.8 L2050.95 1213.8 L2050.36 1213.8 L2049.78 1213.8 L2049.19 1213.8 L2048.6 1213.8 L2048.02 1213.8 L2047.43 1213.8 L2046.85 1213.8 L2046.26 1213.8 L2045.67 1213.8 L2045.09 1213.8 L2044.5 1213.8 L2043.91 1213.8 L2043.33 1213.8 L2042.74 1213.8 L2042.15 1213.8 L2041.57 1213.8 L2040.98 1213.8 L2040.4 1213.8 L2039.81 1213.8 L2039.22 1213.8 L2038.64 1213.8 L2038.05 1213.8 L2037.46 1213.8 L2036.88 1213.8 L2036.29 1213.8 L2035.7 1213.8 L2035.12 1213.8 L2034.53 1213.8 L2033.94 1213.8 L2033.36 1213.8 L2032.77 1213.8 L2032.19 1213.8 L2031.6 1213.8 L2031.01 1213.8 L2030.43 1213.8 L2029.84 1213.8 L2029.25 1213.8 L2028.67 1213.8 L2028.08 1213.8 L2027.49 1213.8 L2026.91 1213.8 L2026.32 1213.8 L2025.73 1213.8 L2025.15 1213.8 L2024.56 1213.8 L2023.98 1213.8 L2023.39 1213.8 L2022.8 1213.8 L2022.22 1213.8 L2021.63 1213.8 L2021.04 1213.8 L2020.46 1213.8 L2019.87 1213.8 L2019.28 1213.8 L2018.7 1213.8 L2018.11 1213.8 L2017.53 1213.8 L2016.94 1213.8 L2016.35 1213.8 L2015.77 1213.8 L2015.18 1213.8 L2014.59 1213.8 L2014.01 1213.8 L2013.42 1213.8 L2012.83 1213.8 L2012.25 1213.8 L2011.66 1213.8 L2011.07 1213.8 L2010.49 1213.8 L2009.9 1213.8 L2009.32 1213.8 L2008.73 1213.8 L2008.14 1213.8 L2007.56 1213.8 L2006.97 1213.8 L2006.38 1213.8 L2005.8 1213.8 L2005.21 1213.8 L2004.62 1213.8 L2004.04 1213.8 L2003.45 1213.8 L2002.86 1213.8 L2002.28 1213.8 L2001.69 1213.8 L2001.11 1213.8 L2000.52 1213.8 L1999.93 1213.8 L1999.35 1213.8 L1998.76 1213.8 L1998.17 1213.8 L1997.59 1213.8 L1997 1213.8 L1996.41 1213.8 L1995.83 1213.8 L1995.24 1213.8 L1994.65 1213.8 L1994.07 1213.8 L1993.48 1213.8 L1992.9 1213.8 L1992.31 1213.8 L1991.72 1213.8 L1991.14 1213.8 L1990.55 1213.8 L1989.96 1213.8 L1989.38 1213.8 L1988.79 1213.8 L1988.2 1213.8 L1987.62 1213.8 L1987.03 1213.8 L1986.45 1213.8 L1985.86 1213.8 L1985.27 1213.8 L1984.69 1213.8 L1984.1 1213.8 L1983.51 1213.8 L1982.93 1213.8 L1982.34 1213.8 L1981.75 1213.8 L1981.17 1213.8 L1980.58 1213.8 L1979.99 1213.8 L1979.41 1213.8 L1978.82 1213.8 L1978.24 1213.8 L1977.65 1213.8 L1977.06 1213.8 L1976.48 1213.8 L1975.89 1213.8 L1975.3 1213.8 L1974.72 1213.8 L1974.13 1213.8 L1973.54 1213.8 L1972.96 1213.8 L1972.37 1213.8 L1971.78 1213.8 L1971.2 1213.8 L1970.61 1213.8 L1970.03 1213.8 L1969.44 1213.8 L1968.85 1213.8 L1968.27 1213.8 L1967.68 1213.8 L1967.09 1213.8 L1966.51 1213.8 L1965.92 1213.8 L1965.33 1213.8 L1964.75 1213.8 L1964.16 1213.8 L1963.58 1213.8 L1962.99 1213.8 L1962.4 1213.8 L1961.82 1213.8 L1961.23 1213.8 L1960.64 1213.8 L1960.06 1213.8 L1959.47 1213.8 L1958.88 1213.8 L1958.3 1213.8 L1957.71 1213.8 L1957.12 1213.8 L1956.54 1213.8 L1955.95 1213.8 L1955.37 1213.8 L1954.78 1213.8 L1954.19 1213.8 L1953.61 1213.8 L1953.02 1213.8 L1952.43 1213.8 L1951.85 1213.8 L1951.26 1213.8 L1950.67 1213.8 L1950.09 1213.8 L1949.5 1213.8 L1948.91 1213.8 L1948.33 1213.8 L1947.74 1213.8 L1947.16 1213.8 L1946.57 1213.8 L1945.98 1213.8 L1945.4 1213.8 L1944.81 1213.8 L1944.22 1213.8 L1943.64 1213.8 L1943.05 1213.8 L1942.46 1213.8 L1941.88 1213.8 L1941.29 1213.8 L1940.71 1213.8 L1940.12 1213.8 L1939.53 1213.8 L1938.95 1213.8 L1938.36 1213.8 L1937.77 1213.8 L1937.19 1213.8 L1936.6 1213.8 L1936.01 1213.8 L1935.43 1213.8 L1934.84 1213.8 L1934.25 1213.8 L1933.67 1213.8 L1933.08 1213.8 L1932.5 1213.8 L1931.91 1213.8 L1931.32 1213.8 L1930.74 1213.8 L1930.15 1213.8 L1929.56 1213.8 L1928.98 1213.8 L1928.39 1213.8 L1927.8 1213.8 L1927.22 1213.8 L1926.63 1213.8 L1926.04 1213.8 L1925.46 1213.8 L1924.87 1213.8 L1924.29 1213.8 L1923.7 1213.8 L1923.11 1213.8 L1922.53 1213.8 L1921.94 1213.8 L1921.35 1213.8 L1920.77 1213.8 L1920.18 1213.8 L1919.59 1213.8 L1919.01 1213.8 L1918.42 1213.8 L1917.83 1213.8 L1917.25 1213.8 L1916.66 1213.8 L1916.08 1213.8 L1915.49 1213.8 L1914.9 1213.8 L1914.32 1213.8 L1913.73 1213.8 L1913.14 1213.8 L1912.56 1213.8 L1911.97 1213.8 L1911.38 1213.8 L1910.8 1213.8 L1910.21 1213.8 L1909.63 1213.8 L1909.04 1213.8 L1908.45 1213.8 L1907.87 1213.8 L1907.28 1213.8 L1906.69 1213.8 L1906.11 1213.8 L1905.52 1213.8 L1904.93 1213.8 L1904.35 1213.8 L1903.76 1213.8 L1903.17 1213.8 L1902.59 1213.8 L1902 1213.8 L1901.42 1213.8 L1900.83 1213.8 L1900.24 1213.8 L1899.66 1213.8 L1899.07 1213.8 L1898.48 1213.8 L1897.9 1213.8 L1897.31 1213.8 L1896.72 1213.8 L1896.14 1213.8 L1895.55 1213.8 L1894.96 1213.8 L1894.38 1213.8 L1893.79 1213.8 L1893.21 1213.8 L1892.62 1213.8 L1892.03 1213.8 L1891.45 1213.8 L1890.86 1213.8 L1890.27 1213.8 L1889.69 1213.8 L1889.1 1213.8 L1888.51 1213.8 L1887.93 1213.8 L1887.34 1213.8 L1886.76 1213.8 L1886.17 1213.8 L1885.58 1213.8 L1885 1213.8 L1884.41 1213.8 L1883.82 1213.8 L1883.24 1213.8 L1882.65 1213.8 L1882.06 1213.8 L1881.48 1213.8 L1880.89 1213.8 L1880.3 1213.8 L1879.72 1213.8 L1879.13 1213.8 L1878.55 1213.8 L1877.96 1213.8 L1877.37 1213.8 L1876.79 1213.8 L1876.2 1213.8 L1875.61 1213.8 L1875.03 1213.8 L1874.44 1213.8 L1873.85 1213.8 L1873.27 1213.8 L1872.68 1213.8 L1872.09 1213.8 L1871.51 1213.8 L1870.92 1213.8 L1870.34 1213.8 L1869.75 1213.8 L1869.16 1213.8 L1868.58 1213.8 L1867.99 1213.8 L1867.4 1213.8 L1866.82 1213.8 L1866.23 1213.8 L1865.64 1213.8 L1865.06 1213.8 L1864.47 1213.8 L1863.88 1213.8 L1863.3 1213.8 L1862.71 1213.8 L1862.13 1213.8 L1861.54 1213.8 L1860.95 1213.8 L1860.37 1213.8 L1859.78 1213.8 L1859.19 1213.8 L1858.61 1213.8 L1858.02 1213.8 L1857.43 1213.8 L1856.85 1213.8 L1856.26 1213.8 L1855.68 1213.8 L1855.09 1213.8 L1854.5 1213.8 L1853.92 1213.8 L1853.33 1213.8 L1852.74 1213.8 L1852.16 1213.8 L1851.57 1213.8 L1850.98 1213.8 L1850.4 1213.8 L1849.81 1213.8 L1849.22 1213.8 L1848.64 1213.8 L1848.05 1213.8 L1847.47 1213.8 L1846.88 1213.8 L1846.29 1213.8 L1845.71 1213.8 L1845.12 1213.8 L1844.53 1213.8 L1843.95 1213.8 L1843.36 1213.8 L1842.77 1213.8 L1842.19 1213.8 L1841.6 1213.8 L1841.01 1213.8 L1840.43 1213.8 L1839.84 1213.8 L1839.26 1213.8 L1838.67 1213.8 L1838.08 1213.8 L1837.5 1213.8 L1836.91 1213.8 L1836.32 1213.8 L1835.74 1213.8 L1835.15 1213.8 L1834.56 1213.8 L1833.98 1213.8 L1833.39 1213.8 L1832.81 1213.8 L1832.22 1213.8 L1831.63 1213.8 L1831.05 1213.8 L1830.46 1213.8 L1829.87 1213.8 L1829.29 1213.8 L1828.7 1213.8 L1828.11 1213.8 L1827.53 1213.8 L1826.94 1213.8 L1826.35 1213.8 L1825.77 1213.8 L1825.18 1213.8 L1824.6 1213.8 L1824.01 1213.8 L1823.42 1213.8 L1822.84 1213.8 L1822.25 1213.8 L1821.66 1213.8 L1821.08 1213.8 L1820.49 1213.8 L1819.9 1213.8 L1819.32 1213.8 L1818.73 1213.8 L1818.14 1213.8 L1817.56 1213.8 L1816.97 1213.8 L1816.39 1213.8 L1815.8 1213.8 L1815.21 1213.8 L1814.63 1213.8 L1814.04 1213.8 L1813.45 1213.8 L1812.87 1213.8 L1812.28 1213.8 L1811.69 1213.8 L1811.11 1213.8 L1810.52 1213.8 L1809.94 1213.8 L1809.35 1213.8 L1808.76 1213.8 L1808.18 1213.8 L1807.59 1213.8 L1807 1213.8 L1806.42 1213.8 L1805.83 1213.8 L1805.24 1213.8 L1804.66 1213.8 L1804.07 1213.8 L1803.48 1213.8 L1802.9 1213.8 L1802.31 1213.8 L1801.73 1213.8 L1801.14 1213.8 L1800.55 1213.8 L1799.97 1213.8 L1799.38 1213.8 L1798.79 1213.8 L1798.21 1213.8 L1797.62 1213.8 L1797.03 1213.8 L1796.45 1213.8 L1795.86 1213.8 L1795.27 1213.8 L1794.69 1213.8 L1794.1 1213.8 L1793.52 1213.8 L1792.93 1213.8 L1792.34 1213.8 L1791.76 1213.8 L1791.17 1213.8 L1790.58 1213.8 L1790 1213.8 L1789.41 1213.8 L1788.82 1213.8 L1788.24 1213.8 L1787.65 1213.8 L1787.06 1213.8 L1786.48 1213.8 L1785.89 1213.8 L1785.31 1213.8 L1784.72 1213.8 L1784.13 1213.8 L1783.55 1213.8 L1782.96 1213.8 L1782.37 1213.8 L1781.79 1213.8 L1781.2 1213.8 L1780.61 1213.8 L1780.03 1213.8 L1779.44 1213.8 L1778.86 1213.8 L1778.27 1213.8 L1777.68 1213.8 L1777.1 1213.8 L1776.51 1213.8 L1775.92 1213.8 L1775.34 1213.8 L1774.75 1213.8 L1774.16 1213.8 L1773.58 1213.8 L1772.99 1213.8 L1772.4 1213.8 L1771.82 1213.8 L1771.23 1213.8 L1770.65 1213.8 L1770.06 1213.8 L1769.47 1213.8 L1768.89 1213.8 L1768.3 1213.8 L1767.71 1213.8 L1767.13 1213.8 L1766.54 1213.8 L1765.95 1213.8 L1765.37 1213.8 L1764.78 1213.8 L1764.19 1213.8 L1763.61 1213.8 L1763.02 1213.8 L1762.44 1213.8 L1761.85 1213.8 L1761.26 1213.8 L1760.68 1213.8 L1760.09 1213.8 L1759.5 1213.8 L1758.92 1213.8 L1758.33 1213.8 L1757.74 1213.8 L1757.16 1213.8 L1756.57 1213.8 L1755.99 1213.8 L1755.4 1213.8 L1754.81 1213.8 L1754.23 1213.8 L1753.64 1213.8 L1753.05 1213.8 L1752.47 1213.8 L1751.88 1213.8 L1751.29 1213.8 L1750.71 1213.8 L1750.12 1213.8 L1749.53 1213.8 L1748.95 1213.8 L1748.36 1213.8 L1747.78 1213.8 L1747.19 1213.8 L1746.6 1213.8 L1746.02 1213.8 L1745.43 1213.8 L1744.84 1213.8 L1744.26 1213.8 L1743.67 1213.8 L1743.08 1213.8 L1742.5 1213.8 L1741.91 1213.8 L1741.32 1213.8 L1740.74 1213.8 L1740.15 1213.8 L1739.57 1213.8 L1738.98 1213.8 L1738.39 1213.8 L1737.81 1213.8 L1737.22 1213.8 L1736.63 1213.8 L1736.05 1213.8 L1735.46 1213.8 L1734.87 1213.8 L1734.29 1213.8 L1733.7 1213.8 L1733.11 1213.8 L1732.53 1213.8 L1731.94 1213.8 L1731.36 1213.8 L1730.77 1213.8 L1730.18 1213.8 L1729.6 1213.8 L1729.01 1213.8 L1728.42 1213.8 L1727.84 1213.8 L1727.25 1213.8 L1726.66 1213.8 L1726.08 1213.8 L1725.49 1213.8 L1724.91 1213.8 L1724.32 1213.8 L1723.73 1213.8 L1723.15 1213.8 L1722.56 1213.8 L1721.97 1213.8 L1721.39 1213.8 L1720.8 1213.8 L1720.21 1213.8 L1719.63 1213.8 L1719.04 1213.8 L1718.45 1213.8 L1717.87 1213.8 L1717.28 1213.8 L1716.7 1213.8 L1716.11 1213.8 L1715.52 1213.8 L1714.94 1213.8 L1714.35 1213.8 L1713.76 1213.8 L1713.18 1213.8 L1712.59 1213.8 L1712 1213.8 L1711.42 1213.8 L1710.83 1213.8 L1710.24 1213.8 L1709.66 1213.8 L1709.07 1213.8 L1708.49 1213.8 L1707.9 1213.8 L1707.31 1213.8 L1706.73 1213.8 L1706.14 1213.8 L1705.55 1213.8 L1704.97 1213.8 L1704.38 1213.8 L1703.79 1213.8 L1703.21 1213.8 L1702.62 1213.8 L1702.04 1213.8 L1701.45 1213.8 L1700.86 1213.8 L1700.28 1213.8 L1699.69 1213.8 L1699.1 1213.8 L1698.52 1213.8 L1697.93 1213.8 L1697.34 1213.8 L1696.76 1213.8 L1696.17 1213.8 L1695.58 1213.8 L1695 1213.8 L1694.41 1213.8 L1693.83 1213.8 L1693.24 1213.8 L1692.65 1213.8 L1692.07 1213.8 L1691.48 1213.8 L1690.89 1213.8 L1690.31 1213.8 L1689.72 1213.8 L1689.13 1213.8 L1688.55 1213.8 L1687.96 1213.8 L1687.37 1213.8 L1686.79 1213.8 L1686.2 1213.8 L1685.62 1213.8 L1685.03 1213.8 L1684.44 1213.8 L1683.86 1213.8 L1683.27 1213.8 L1682.68 1213.8 L1682.1 1213.8 L1681.51 1213.8 L1680.92 1213.8 L1680.34 1213.8 L1679.75 1213.8 L1679.17 1213.8 L1678.58 1213.8 L1677.99 1213.8 L1677.41 1213.8 L1676.82 1213.8 L1676.23 1213.8 L1675.65 1213.8 L1675.06 1213.8 L1674.47 1213.8 L1673.89 1213.8 L1673.3 1213.8 L1672.71 1213.8 L1672.13 1213.8 L1671.54 1213.8 L1670.96 1213.8 L1670.37 1213.8 L1669.78 1213.8 L1669.2 1213.8 L1668.61 1213.8 L1668.02 1213.8 L1667.44 1213.8 L1666.85 1213.8 L1666.26 1213.8 L1665.68 1213.8 L1665.09 1213.8 L1664.5 1213.8 L1663.92 1213.8 L1663.33 1213.8 L1662.75 1213.8 L1662.16 1213.8 L1661.57 1213.8 L1660.99 1213.8 L1660.4 1213.8 L1659.81 1213.8 L1659.23 1213.8 L1658.64 1213.8 L1658.05 1213.8 L1657.47 1213.8 L1656.88 1213.8 L1656.29 1213.8 L1655.71 1213.8 L1655.12 1213.8 L1654.54 1213.8 L1653.95 1213.8 L1653.36 1213.8 L1652.78 1213.8 L1652.19 1213.8 L1651.6 1213.8 L1651.02 1213.8 L1650.43 1213.8 L1649.84 1213.8 L1649.26 1213.8 L1648.67 1213.8 L1648.09 1213.8 L1647.5 1213.8 L1646.91 1213.8 L1646.33 1213.8 L1645.74 1213.8 L1645.15 1213.8 L1644.57 1213.8 L1643.98 1213.8 L1643.39 1213.8 L1642.81 1213.8 L1642.22 1213.8 L1641.63 1213.8 L1641.05 1213.8 L1640.46 1213.8 L1639.88 1213.8 L1639.29 1213.8 L1638.7 1213.8 L1638.12 1213.8 L1637.53 1213.8 L1636.94 1213.8 L1636.36 1213.8 L1635.77 1213.8 L1635.18 1213.8 L1634.6 1213.8 L1634.01 1213.8 L1633.42 1213.8 L1632.84 1213.8 L1632.25 1213.8 L1631.67 1213.8 L1631.08 1213.8 L1630.49 1213.8 L1629.91 1213.8 L1629.32 1213.8 L1628.73 1213.8 L1628.15 1213.8 L1627.56 1213.8 L1626.97 1213.8 L1626.39 1213.8 L1625.8 1213.8 L1625.22 1213.8 L1624.63 1213.8 L1624.04 1213.8 L1623.46 1213.8 L1622.87 1213.8 L1622.28 1213.8 L1621.7 1213.8 L1621.11 1213.8 L1620.52 1213.8 L1619.94 1213.8 L1619.35 1213.8 L1618.76 1213.8 L1618.18 1213.8 L1617.59 1213.8 L1617.01 1213.8 L1616.42 1213.8 L1615.83 1213.8 L1615.25 1213.8 L1614.66 1213.8 L1614.07 1213.8 L1613.49 1213.8 L1612.9 1213.8 L1612.31 1213.8 L1611.73 1213.8 L1611.14 1213.8 L1610.55 1213.8 L1609.97 1213.8 L1609.38 1213.8 L1608.8 1213.8 L1608.21 1213.8 L1607.62 1213.8 L1607.04 1213.8 L1606.45 1213.8 L1605.86 1213.8 L1605.28 1213.8 L1604.69 1213.8 L1604.1 1213.8 L1603.52 1213.8 L1602.93 1213.8 L1602.34 1213.8 L1601.76 1213.8 L1601.17 1213.8 L1600.59 1213.8 L1600 1213.8 L1599.41 1213.8 L1598.83 1213.8 L1598.24 1213.8 L1597.65 1213.8 L1597.07 1213.8 L1596.48 1213.8 L1595.89 1213.8 L1595.31 1213.8 L1594.72 1213.8 L1594.14 1213.8 L1593.55 1213.8 L1592.96 1213.8 L1592.38 1213.8 L1591.79 1213.8 L1591.2 1213.8 L1590.62 1213.8 L1590.03 1213.8 L1589.44 1213.8 L1588.86 1213.8 L1588.27 1213.8 L1587.68 1213.8 L1587.1 1213.8 L1586.51 1213.8 L1585.93 1213.8 L1585.34 1213.8 L1584.75 1213.8 L1584.17 1213.8 L1583.58 1213.8 L1582.99 1213.8 L1582.41 1213.8 L1581.82 1213.8 L1581.23 1213.8 L1580.65 1213.8 L1580.06 1213.8 L1579.47 1213.8 L1578.89 1213.8 L1578.3 1213.8 L1577.72 1213.8 L1577.13 1213.8 L1576.54 1213.8 L1575.96 1213.8 L1575.37 1213.8 L1574.78 1213.8 L1574.2 1213.8 L1573.61 1213.8 L1573.02 1213.8 L1572.44 1213.8 L1571.85 1213.8 L1571.27 1213.8 L1570.68 1213.8 L1570.09 1213.8 L1569.51 1213.8 L1568.92 1213.8 L1568.33 1213.8 L1567.75 1213.8 L1567.16 1213.8 L1566.57 1213.8 L1565.99 1213.8 L1565.4 1213.8 L1564.81 1213.8 L1564.23 1213.8 L1563.64 1213.8 L1563.06 1213.8 L1562.47 1213.8 L1561.88 1213.8 L1561.3 1213.8 L1560.71 1213.8 L1560.12 1213.8 L1559.54 1213.8 L1558.95 1213.8 L1558.36 1213.8 L1557.78 1213.8 L1557.19 1213.8 L1556.6 1213.8 L1556.02 1213.8 L1555.43 1213.8 L1554.85 1213.8 L1554.26 1213.8 L1553.67 1213.8 L1553.09 1213.8 L1552.5 1213.8 L1551.91 1213.8 L1551.33 1213.8 L1550.74 1213.8 L1550.15 1213.8 L1549.57 1213.8 L1548.98 1213.8 L1548.4 1213.8 L1547.81 1213.8 L1547.22 1213.8 L1546.64 1213.8 L1546.05 1213.8 L1545.46 1213.8 L1544.88 1213.8 L1544.29 1213.8 L1543.7 1213.8 L1543.12 1213.8 L1542.53 1213.8 L1541.94 1213.8 L1541.36 1213.8 L1540.77 1213.8 L1540.19 1213.8 L1539.6 1213.8 L1539.01 1213.8 L1538.43 1213.8 L1537.84 1213.8 L1537.25 1213.8 L1536.67 1213.8 L1536.08 1213.8 L1535.49 1213.8 L1534.91 1213.8 L1534.32 1213.8 L1533.73 1213.8 L1533.15 1213.8 L1532.56 1213.8 L1531.98 1213.8 L1531.39 1213.8 L1530.8 1213.8 L1530.22 1213.8 L1529.63 1213.8 L1529.04 1213.8 L1528.46 1213.8 L1527.87 1213.8 L1527.28 1213.8 L1526.7 1213.8 L1526.11 1213.8 L1525.52 1213.8 L1524.94 1213.8 L1524.35 1213.8 L1523.77 1213.8 L1523.18 1213.8 L1522.59 1213.8 L1522.01 1213.8 L1521.42 1213.8 L1520.83 1213.8 L1520.25 1213.8 L1519.66 1213.8 L1519.07 1213.8 L1518.49 1213.8 L1517.9 1213.8 L1517.32 1213.8 L1516.73 1213.8 L1516.14 1213.8 L1515.56 1213.8 L1514.97 1213.8 L1514.38 1213.8 L1513.8 1213.8 L1513.21 1213.8 L1512.62 1213.8 L1512.04 1213.8 L1511.45 1213.8 L1510.86 1213.8 L1510.28 1213.8 L1509.69 1213.8 L1509.11 1213.8 L1508.52 1213.8 L1507.93 1213.8 L1507.35 1213.8 L1506.76 1213.8 L1506.17 1213.8 L1505.59 1213.8 L1505 1213.8 L1504.41 1213.8 L1503.83 1213.8 L1503.24 1213.8 L1502.65 1213.8 L1502.07 1213.8 L1501.48 1213.8 L1500.9 1213.8 L1500.31 1213.8 L1499.72 1213.8 L1499.14 1213.8 L1498.55 1213.8 L1497.96 1213.8 L1497.38 1213.8 L1496.79 1213.8 L1496.2 1213.8 L1495.62 1213.8 L1495.03 1213.8 L1494.45 1213.8 L1493.86 1213.8 L1493.27 1213.8 L1492.69 1213.8 L1492.1 1213.8 L1491.51 1213.8 L1490.93 1213.8 L1490.34 1213.8 L1489.75 1213.8 L1489.17 1213.8 L1488.58 1213.8 L1487.99 1213.8 L1487.41 1213.8 L1486.82 1213.8 L1486.24 1213.8 L1485.65 1213.8 L1485.06 1213.8 L1484.48 1213.8 L1483.89 1213.8 L1483.3 1213.8 L1482.72 1213.8 L1482.13 1213.8 L1481.54 1213.8 L1480.96 1213.8 L1480.37 1213.8 L1479.78 1213.8 L1479.2 1213.8 L1478.61 1213.8 L1478.03 1213.8 L1477.44 1213.8 L1476.85 1213.8 L1476.27 1213.8 L1475.68 1213.8 L1475.09 1213.8 L1474.51 1213.8 L1473.92 1213.8 L1473.33 1213.8 L1472.75 1213.8 L1472.16 1213.8 L1471.57 1213.8 L1470.99 1213.8 L1470.4 1213.8 L1469.82 1213.8 L1469.23 1213.8 L1468.64 1213.8 L1468.06 1213.8 L1467.47 1213.8 L1466.88 1213.8 L1466.3 1213.8 L1465.71 1213.8 L1465.12 1213.8 L1464.54 1213.8 L1463.95 1213.8 L1463.37 1213.8 L1462.78 1213.8 L1462.19 1213.8 L1461.61 1213.8 L1461.02 1213.8 L1460.43 1213.8 L1459.85 1213.8 L1459.26 1213.8 L1458.67 1213.8 L1458.09 1213.8 L1457.5 1213.8 L1456.91 1213.8 L1456.33 1213.8 L1455.74 1213.8 L1455.16 1213.8 L1454.57 1213.8 L1453.98 1213.8 L1453.4 1213.8 L1452.81 1213.8 L1452.22 1213.8 L1451.64 1213.8 L1451.05 1213.8 L1450.46 1213.8 L1449.88 1213.8 L1449.29 1213.8 L1448.7 1213.8 L1448.12 1213.8 L1447.53 1213.8 L1446.95 1213.8 L1446.36 1213.8 L1445.77 1213.8 L1445.19 1213.8 L1444.6 1213.8 L1444.01 1213.8 L1443.43 1213.8 L1442.84 1213.8 L1442.25 1213.8 L1441.67 1213.8 L1441.08 1213.8 L1440.5 1213.8 L1439.91 1213.8 L1439.32 1213.8 L1438.74 1213.8 L1438.15 1213.8 L1437.56 1213.8 L1436.98 1213.8 L1436.39 1213.8 L1435.8 1213.8 L1435.22 1213.8 L1434.63 1213.8 L1434.04 1213.8 L1433.46 1213.8 L1432.87 1213.8 L1432.29 1213.8 L1431.7 1213.8 L1431.11 1213.8 L1430.53 1213.8 L1429.94 1213.8 L1429.35 1213.8 L1428.77 1213.8 L1428.18 1213.8 L1427.59 1213.8 L1427.01 1213.8 L1426.42 1213.8 L1425.83 1213.8 L1425.25 1213.8 L1424.66 1213.8 L1424.08 1213.8 L1423.49 1213.8 L1422.9 1213.8 L1422.32 1213.8 L1421.73 1213.8 L1421.14 1213.8 L1420.56 1213.8 L1419.97 1213.8 L1419.38 1213.8 L1418.8 1213.8 L1418.21 1213.8 L1417.63 1213.8 L1417.04 1213.8 L1416.45 1213.8 L1415.87 1213.8 L1415.28 1213.8 L1414.69 1213.8 L1414.11 1213.8 L1413.52 1213.8 L1412.93 1213.8 L1412.35 1213.8 L1411.76 1213.8 L1411.17 1213.8 L1410.59 1213.8 L1410 1213.8 L1409.42 1213.8 L1408.83 1213.8 L1408.24 1213.8 L1407.66 1213.8 L1407.07 1213.8 L1406.48 1213.8 L1405.9 1213.8 L1405.31 1213.8 L1404.72 1213.8 L1404.14 1213.8 L1403.55 1213.8 L1402.96 1213.8 L1402.38 1213.8 L1401.79 1213.8 L1401.21 1213.8 L1400.62 1213.8 L1400.03 1213.8 L1399.45 1213.8 L1398.86 1213.8 L1398.27 1213.8 L1397.69 1213.8 L1397.1 1213.8 L1396.51 1213.8 L1395.93 1213.8 L1395.34 1213.8 L1394.75 1213.8 L1394.17 1213.8 L1393.58 1213.8 L1393 1213.8 L1392.41 1213.8 L1391.82 1213.8 L1391.24 1213.8 L1390.65 1213.8 L1390.06 1213.8 L1389.48 1213.8 L1388.89 1213.8 L1388.3 1213.8 L1387.72 1213.8 L1387.13 1213.8 L1386.55 1213.8 L1385.96 1213.8 L1385.37 1213.8 L1384.79 1213.8 L1384.2 1213.8 L1383.61 1213.8 L1383.03 1213.8 L1382.44 1213.8 L1381.85 1213.8 L1381.27 1213.8 L1380.68 1213.8 L1380.09 1213.8 L1379.51 1213.8 L1378.92 1213.8 L1378.34 1213.8 L1377.75 1213.8 L1377.16 1213.8 L1376.58 1213.8 L1375.99 1213.8 L1375.4 1213.8 L1374.82 1213.8 L1374.23 1213.8 L1373.64 1213.8 L1373.06 1213.8 L1372.47 1213.8 L1371.88 1213.8 L1371.3 1213.8 L1370.71 1213.8 L1370.13 1213.8 L1369.54 1213.8 L1368.95 1213.8 L1368.37 1213.8 L1367.78 1213.8 L1367.19 1213.8 L1366.61 1213.8 L1366.02 1213.8 L1365.43 1213.8 L1364.85 1213.8 L1364.26 1213.8 L1363.68 1213.8 L1363.09 1213.8 L1362.5 1213.8 L1361.92 1213.8 L1361.33 1213.8 L1360.74 1213.8 L1360.16 1213.8 L1359.57 1213.8 L1358.98 1213.8 L1358.4 1213.8 L1357.81 1213.8 L1357.22 1213.8 L1356.64 1213.8 L1356.05 1213.8 L1355.47 1213.8 L1354.88 1213.8 L1354.29 1213.8 L1353.71 1213.8 L1353.12 1213.8 L1352.53 1213.8 L1351.95 1213.8 L1351.36 1213.8 L1350.77 1213.8 L1350.19 1213.8 L1349.6 1213.8 L1349.01 1213.8 L1348.43 1213.8 L1347.84 1213.8 L1347.26 1213.8 L1346.67 1213.8 L1346.08 1213.8 L1345.5 1213.8 L1344.91 1213.8 L1344.32 1213.8 L1343.74 1213.8 L1343.15 1213.8 L1342.56 1213.8 L1341.98 1213.8 L1341.39 1213.8 L1340.8 1213.8 L1340.22 1213.8 L1339.63 1213.8 L1339.05 1213.8 L1338.46 1213.8 L1337.87 1213.8 L1337.29 1213.8 L1336.7 1213.8 L1336.11 1213.8 L1335.53 1213.8 L1334.94 1213.8 L1334.35 1213.8 L1333.77 1213.8 L1333.18 1213.8 L1332.6 1213.8 L1332.01 1213.8 L1331.42 1213.8 L1330.84 1213.8 L1330.25 1213.8 L1329.66 1213.8 L1329.08 1213.8 L1328.49 1213.8 L1327.9 1213.8 L1327.32 1213.8 L1326.73 1213.8 L1326.14 1213.8 L1325.56 1213.8 L1324.97 1213.8 L1324.39 1213.8 L1323.8 1213.8 L1323.21 1213.8 L1322.63 1213.8 L1322.04 1213.8 L1321.45 1213.8 L1320.87 1213.8 L1320.28 1213.8 L1319.69 1213.8 L1319.11 1213.8 L1318.52 1213.8 L1317.93 1213.8 L1317.35 1213.8 L1316.76 1213.8 L1316.18 1213.8 L1315.59 1213.8 L1315 1213.8 L1314.42 1213.8 L1313.83 1213.8 L1313.24 1213.8 L1312.66 1213.8 L1312.07 1213.8 L1311.48 1213.8 L1310.9 1213.8 L1310.31 1213.8 L1309.73 1213.8 L1309.14 1213.8 L1308.55 1213.8 L1307.97 1213.8 L1307.38 1213.8 L1306.79 1213.8 L1306.21 1213.8 L1305.62 1213.8 L1305.03 1213.8 L1304.45 1213.8 L1303.86 1213.8 L1303.27 1213.8 L1302.69 1213.8 L1302.1 1213.8 L1301.52 1213.8 L1300.93 1213.8 L1300.34 1213.8 L1299.76 1213.8 L1299.17 1213.8 L1298.58 1213.8 L1298 1213.8 L1297.41 1213.8 L1296.82 1213.8 L1296.24 1213.8 L1295.65 1213.8 L1295.06 1213.8 L1294.48 1213.8 L1293.89 1213.8 L1293.31 1213.8 L1292.72 1213.8 L1292.13 1213.8 L1291.55 1213.8 L1290.96 1213.8 L1290.37 1213.8 L1289.79 1213.8 L1289.2 1213.8 L1288.61 1213.8 L1288.03 1213.8 L1287.44 1213.8 L1286.86 1213.8 L1286.27 1213.8 L1285.68 1213.8 L1285.1 1213.8 L1284.51 1213.8 L1283.92 1213.8 L1283.34 1213.8 L1282.75 1213.8 L1282.16 1213.8 L1281.58 1213.8 L1280.99 1213.8 L1280.4 1213.8 L1279.82 1213.8 L1279.23 1213.8 L1278.65 1213.8 L1278.06 1213.8 L1277.47 1213.8 L1276.89 1213.8 L1276.3 1213.8 L1275.71 1213.8 L1275.13 1213.8 L1274.54 1213.8 L1273.95 1213.8 L1273.37 1213.8 L1272.78 1213.8 L1272.19 1213.8 L1271.61 1213.8 L1271.02 1213.8 L1270.44 1213.8 L1269.85 1213.8 L1269.26 1213.8 L1268.68 1213.8 L1268.09 1213.8 L1267.5 1213.8 L1266.92 1213.8 L1266.33 1213.8 L1265.74 1213.8 L1265.16 1213.8 L1264.57 1213.8 L1263.98 1213.8 L1263.4 1213.8 L1262.81 1213.8 L1262.23 1213.8 L1261.64 1213.8 L1261.05 1213.8 L1260.47 1213.8 L1259.88 1213.8 L1259.29 1213.8 L1258.71 1213.8 L1258.12 1213.8 L1257.53 1213.8 L1256.95 1213.8 L1256.36 1213.8 L1255.78 1213.8 L1255.19 1213.8 L1254.6 1213.8 L1254.02 1213.8 L1253.43 1213.8 L1252.84 1213.8 L1252.26 1213.8 L1251.67 1213.8 L1251.08 1213.8 L1250.5 1213.8 L1249.91 1213.8 L1249.32 1213.8 L1248.74 1213.8 L1248.15 1213.8 L1247.57 1213.8 L1246.98 1213.8 L1246.39 1213.8 L1245.81 1213.8 L1245.22 1213.8 L1244.63 1213.8 L1244.05 1213.8 L1243.46 1213.8 L1242.87 1213.8 L1242.29 1213.8 L1241.7 1213.8 L1241.11 1213.8 L1240.53 1213.8 L1239.94 1213.8 L1239.36 1213.8 L1238.77 1213.8 L1238.18 1213.8 L1237.6 1213.8 L1237.01 1213.8 L1236.42 1213.8 L1235.84 1213.8 L1235.25 1213.8 L1234.66 1213.8 L1234.08 1213.8 L1233.49 1213.8 L1232.91 1213.8 L1232.32 1213.8 L1231.73 1213.8 L1231.15 1213.8 L1230.56 1213.8 L1229.97 1213.8 L1229.39 1213.8 L1228.8 1213.8 L1228.21 1213.8 L1227.63 1213.8 L1227.04 1213.8 L1226.45 1213.8 L1225.87 1213.8 L1225.28 1213.8 L1224.7 1213.8 L1224.11 1213.8 L1223.52 1213.8 L1222.94 1213.8 L1222.35 1213.8 L1221.76 1213.8 L1221.18 1213.8 L1220.59 1213.8 L1220 1213.8 L1219.42 1213.8 L1218.83 1213.8 L1218.24 1213.8 L1217.66 1213.8 L1217.07 1213.8 L1216.49 1213.8 L1215.9 1213.8 L1215.31 1213.8 L1214.73 1213.8 L1214.14 1213.8 L1213.55 1213.8 L1212.97 1213.8 L1212.38 1213.8 L1211.79 1213.8 L1211.21 1213.8 L1210.62 1213.8 L1210.03 1213.8 L1209.45 1213.8 L1208.86 1213.8 L1208.28 1213.8 L1207.69 1213.8 L1207.1 1213.8 L1206.52 1213.8 L1205.93 1213.8 L1205.34 1213.8 L1204.76 1213.8 L1204.17 1213.8 L1203.58 1213.8 L1203 1213.8 L1202.41 1213.8 L1201.83 1213.8 L1201.24 1213.8 L1200.65 1213.8 L1200.07 1213.8 L1199.48 1213.8 L1198.89 1213.8 L1198.31 1213.8 L1197.72 1213.8 L1197.13 1213.8 L1196.55 1213.8 L1195.96 1213.8 L1195.37 1213.8 L1194.79 1213.8 L1194.2 1213.8 L1193.62 1213.8 L1193.03 1213.8 L1192.44 1213.8 L1191.86 1213.8 L1191.27 1213.8 L1190.68 1213.8 L1190.1 1213.8 L1189.51 1213.8 L1188.92 1213.8 L1188.34 1213.8 L1187.75 1213.8 L1187.16 1213.8 L1186.58 1213.8 L1185.99 1213.8 L1185.41 1213.8 L1184.82 1213.8 L1184.23 1213.8 L1183.65 1213.8 L1183.06 1213.8 L1182.47 1213.8 L1181.89 1213.8 L1181.3 1213.8 L1180.71 1213.8 L1180.13 1213.8 L1179.54 1213.8 L1178.96 1213.8 L1178.37 1213.8 L1177.78 1213.8 L1177.2 1213.8 L1176.61 1213.8 L1176.02 1213.8 L1175.44 1213.8 L1174.85 1213.8 L1174.26 1213.8 L1173.68 1213.8 L1173.09 1213.8 L1172.5 1213.8 L1171.92 1213.8 L1171.33 1213.8 L1170.75 1213.8 L1170.16 1213.8 L1169.57 1213.8 L1168.99 1213.8 L1168.4 1213.8 L1167.81 1213.8 L1167.23 1213.8 L1166.64 1213.8 L1166.05 1213.8 L1165.47 1213.8 L1164.88 1213.8 L1164.29 1213.8 L1163.71 1213.8 L1163.12 1213.8 L1162.54 1213.8 L1161.95 1213.8 L1161.36 1213.8 L1160.78 1213.8 L1160.19 1213.8 L1159.6 1213.8 L1159.02 1213.8 L1158.43 1213.8 L1157.84 1213.8 L1157.26 1213.8 L1156.67 1213.8 L1156.09 1213.8 L1155.5 1213.8 L1154.91 1213.8 L1154.33 1213.8 L1153.74 1213.8 L1153.15 1213.8 L1152.57 1213.8 L1151.98 1213.8 L1151.39 1213.8 L1150.81 1213.8 L1150.22 1213.8 L1149.63 1213.8 L1149.05 1213.8 L1148.46 1213.8 L1147.88 1213.8 L1147.29 1213.8 L1146.7 1213.8 L1146.12 1213.8 L1145.53 1213.8 L1144.94 1213.8 L1144.36 1213.8 L1143.77 1213.8 L1143.18 1213.8 L1142.6 1213.8 L1142.01 1213.8 L1141.42 1213.8 L1140.84 1213.8 L1140.25 1213.8 L1139.67 1213.8 L1139.08 1213.8 L1138.49 1213.8 L1137.91 1213.8 L1137.32 1213.8 L1136.73 1213.8 L1136.15 1213.8 L1135.56 1213.8 L1134.97 1213.8 L1134.39 1213.8 L1133.8 1213.8 L1133.21 1213.8 L1132.63 1213.8 L1132.04 1213.8 L1131.46 1213.8 L1130.87 1213.8 L1130.28 1213.8 L1129.7 1213.8 L1129.11 1213.8 L1128.52 1213.8 L1127.94 1213.8 L1127.35 1213.8 L1126.76 1213.8 L1126.18 1213.8 L1125.59 1213.8 L1125.01 1213.8 L1124.42 1213.8 L1123.83 1213.8 L1123.25 1213.8 L1122.66 1213.8 L1122.07 1213.8 L1121.49 1213.8 L1120.9 1213.8 L1120.31 1213.8 L1119.73 1213.8 L1119.14 1213.8 L1118.55 1213.8 L1117.97 1213.8 L1117.38 1213.8 L1116.8 1213.8 L1116.21 1213.8 L1115.62 1213.8 L1115.04 1213.8 L1114.45 1213.8 L1113.86 1213.8 L1113.28 1213.8 L1112.69 1213.8 L1112.1 1213.8 L1111.52 1213.8 L1110.93 1213.8 L1110.34 1213.8 L1109.76 1213.8 L1109.17 1213.8 L1108.59 1213.8 L1108 1213.8 L1107.41 1213.8 L1106.83 1213.8 L1106.24 1213.8 L1105.65 1213.8 L1105.07 1213.8 L1104.48 1213.8 L1103.89 1213.8 L1103.31 1213.8 L1102.72 1213.8 L1102.14 1213.8 L1101.55 1213.8 L1100.96 1213.8 L1100.38 1213.8 L1099.79 1213.8 L1099.2 1213.8 L1098.62 1213.8 L1098.03 1213.8 L1097.44 1213.8 L1096.86 1213.8 L1096.27 1213.8 L1095.68 1213.8 L1095.1 1213.8 L1094.51 1213.8 L1093.93 1213.8 L1093.34 1213.8 L1092.75 1213.8 L1092.17 1213.8 L1091.58 1213.8 L1090.99 1213.8 L1090.41 1213.8 L1089.82 1213.8 L1089.23 1213.8 L1088.65 1213.8 L1088.06 1213.8 L1087.47 1213.8 L1086.89 1213.8 L1086.3 1213.8 L1085.72 1213.8 L1085.13 1213.8 L1084.54 1213.8 L1083.96 1213.8 L1083.37 1213.8 L1082.78 1213.8 L1082.2 1213.8 L1081.61 1213.8 L1081.02 1213.8 L1080.44 1213.8 L1079.85 1213.8 L1079.26 1213.8 L1078.68 1213.8 L1078.09 1213.8 L1077.51 1213.8 L1076.92 1213.8 L1076.33 1213.8 L1075.75 1213.8 L1075.16 1213.8 L1074.57 1213.8 L1073.99 1213.8 L1073.4 1213.8 L1072.81 1213.8 L1072.23 1213.8 L1071.64 1213.8 L1071.06 1213.8 L1070.47 1213.8 L1069.88 1213.8 L1069.3 1213.8 L1068.71 1213.8 L1068.12 1213.8 L1067.54 1213.8 L1066.95 1213.8 L1066.36 1213.8 L1065.78 1213.8 L1065.19 1213.8 L1064.6 1213.8 L1064.02 1213.8 L1063.43 1213.8 L1062.85 1213.8 L1062.26 1213.8 L1061.67 1213.8 L1061.09 1213.8 L1060.5 1213.8 L1059.91 1213.8 L1059.33 1213.8 L1058.74 1213.8 L1058.15 1213.8 L1057.57 1213.8 L1056.98 1213.8 L1056.39 1213.8 L1055.81 1213.8 L1055.22 1213.8 L1054.64 1213.8 L1054.05 1213.8 L1053.46 1213.8 L1052.88 1213.8 L1052.29 1213.8 L1051.7 1213.8 L1051.12 1213.8 L1050.53 1213.8 L1049.94 1213.8 L1049.36 1213.8 L1048.77 1213.8 L1048.19 1213.8 L1047.6 1213.8 L1047.01 1213.8 L1046.43 1213.8 L1045.84 1213.8 L1045.25 1213.8 L1044.67 1213.8 L1044.08 1213.8 L1043.49 1213.8 L1042.91 1213.8 L1042.32 1213.8 L1041.73 1213.8 L1041.15 1213.8 L1040.56 1213.8 L1039.98 1213.8 L1039.39 1213.8 L1038.8 1213.8 L1038.22 1213.8 L1037.63 1213.8 L1037.04 1213.8 L1036.46 1213.8 L1035.87 1213.8 L1035.28 1213.8 L1034.7 1213.8 L1034.11 1213.8 L1033.52 1213.8 L1032.94 1213.8 L1032.35 1213.8 L1031.77 1213.8 L1031.18 1213.8 L1030.59 1213.8 L1030.01 1213.8 L1029.42 1213.8 L1028.83 1213.8 L1028.25 1213.8 L1027.66 1213.8 L1027.07 1213.8 L1026.49 1213.8 L1025.9 1213.8 L1025.32 1213.8 L1024.73 1213.8 L1024.14 1213.8 L1023.56 1213.8 L1022.97 1213.8 L1022.38 1213.8 L1021.8 1213.8 L1021.21 1213.8 L1020.62 1213.8 L1020.04 1213.8 L1019.45 1213.8 L1018.86 1213.8 L1018.28 1213.8 L1017.69 1213.8 L1017.11 1213.8 L1016.52 1213.8 L1015.93 1213.8 L1015.35 1213.8 L1014.76 1213.8 L1014.17 1213.8 L1013.59 1213.8 L1013 1213.8 L1012.41 1213.8 L1011.83 1213.8 L1011.24 1213.8 L1010.65 1213.8 L1010.07 1213.8 L1009.48 1213.8 L1008.9 1213.8 L1008.31 1213.8 L1007.72 1213.8 L1007.14 1213.8 L1006.55 1213.8 L1005.96 1213.8 L1005.38 1213.8 L1004.79 1213.8 L1004.2 1213.8 L1003.62 1213.8 L1003.03 1213.8 L1002.44 1213.8 L1001.86 1213.8 L1001.27 1213.8 L1000.69 1213.8 L1000.1 1213.8 L999.513 1213.8 L998.926 1213.8 L998.34 1213.8 L997.754 1213.8 L997.167 1213.8 L996.581 1213.8 L995.994 1213.8 L995.408 1213.8 L994.822 1213.8 L994.235 1213.8 L993.649 1213.8 L993.062 1213.8 L992.476 1213.8 L991.889 1213.8 L991.303 1213.8 L990.717 1213.8 L990.13 1213.8 L989.544 1213.8 L988.957 1213.8 L988.371 1213.8 L987.785 1213.8 L987.198 1213.8 L986.612 1213.8 L986.025 1213.8  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.89 986.612,1213.89 987.198,1213.89 987.785,1213.89 988.371,1213.89 988.957,1213.89 989.544,1213.89 990.13,1213.89 990.717,1213.89 991.303,1213.89 991.889,1213.89 992.476,1213.89 993.062,1213.89 993.649,1213.89 994.235,1213.89 994.822,1213.89 995.408,1213.89 995.994,1213.89 996.581,1213.89 997.167,1213.89 997.754,1213.89 998.34,1213.89 998.926,1213.89 999.513,1213.89 1000.1,1213.89 1000.69,1213.89 1001.27,1213.89 1001.86,1213.89 1002.44,1213.89 1003.03,1213.89 1003.62,1213.89 1004.2,1213.89 1004.79,1213.89 1005.38,1213.89 1005.96,1213.89 1006.55,1213.89 1007.14,1213.89 1007.72,1213.89 1008.31,1213.89 1008.9,1213.89 1009.48,1213.89 1010.07,1213.89 1010.65,1213.89 1011.24,1213.89 1011.83,1213.89 1012.41,1213.89 1013,1213.89 1013.59,1213.89 1014.17,1213.89 1014.76,1213.89 1015.35,1213.89 1015.93,1213.89 1016.52,1213.89 1017.11,1213.89 1017.69,1213.89 1018.28,1213.89 1018.86,1213.89 1019.45,1213.89 1020.04,1213.89 1020.62,1213.89 1021.21,1213.89 1021.8,1213.89 1022.38,1213.89 1022.97,1213.89 1023.56,1213.89 1024.14,1213.89 1024.73,1213.89 1025.32,1213.89 1025.9,1213.89 1026.49,1213.89 1027.07,1213.89 1027.66,1213.89 1028.25,1213.89 1028.83,1213.89 1029.42,1213.89 1030.01,1213.89 1030.59,1213.89 1031.18,1213.89 1031.77,1213.89 1032.35,1213.89 1032.94,1213.89 1033.52,1213.89 1034.11,1213.89 1034.7,1213.89 1035.28,1213.89 1035.87,1213.89 1036.46,1213.89 1037.04,1213.89 1037.63,1213.89 1038.22,1213.89 1038.8,1213.89 1039.39,1213.89 1039.98,1213.89 1040.56,1213.89 1041.15,1213.89 1041.73,1213.89 1042.32,1213.89 1042.91,1213.89 1043.49,1213.89 1044.08,1213.89 1044.67,1213.89 1045.25,1213.89 1045.84,1213.89 1046.43,1213.89 1047.01,1213.89 1047.6,1213.89 1048.19,1213.89 1048.77,1213.89 1049.36,1213.89 1049.94,1213.89 1050.53,1213.89 1051.12,1213.89 1051.7,1213.89 1052.29,1213.89 1052.88,1213.89 1053.46,1213.89 1054.05,1213.89 1054.64,1213.89 1055.22,1213.89 1055.81,1213.89 1056.39,1213.89 1056.98,1213.89 1057.57,1213.89 1058.15,1213.89 1058.74,1213.89 1059.33,1213.89 1059.91,1213.89 1060.5,1213.89 1061.09,1213.89 1061.67,1213.89 1062.26,1213.89 1062.85,1213.89 1063.43,1213.89 1064.02,1213.89 1064.6,1213.89 1065.19,1213.89 1065.78,1213.89 1066.36,1213.89 1066.95,1213.89 1067.54,1213.89 1068.12,1213.89 1068.71,1213.89 1069.3,1213.89 1069.88,1213.89 1070.47,1213.89 1071.06,1213.89 1071.64,1213.89 1072.23,1213.89 1072.81,1213.89 1073.4,1213.89 1073.99,1213.89 1074.57,1213.89 1075.16,1213.89 1075.75,1213.89 1076.33,1213.89 1076.92,1213.89 1077.51,1213.89 1078.09,1213.89 1078.68,1213.89 1079.26,1213.89 1079.85,1213.89 1080.44,1213.89 1081.02,1213.89 1081.61,1213.89 1082.2,1213.89 1082.78,1213.89 1083.37,1213.89 1083.96,1213.89 1084.54,1213.89 1085.13,1213.89 1085.72,1213.89 1086.3,1213.89 1086.89,1213.89 1087.47,1213.89 1088.06,1213.89 1088.65,1213.89 1089.23,1213.89 1089.82,1213.89 1090.41,1213.89 1090.99,1213.89 1091.58,1213.89 1092.17,1213.89 1092.75,1213.89 1093.34,1213.89 1093.93,1213.89 1094.51,1213.89 1095.1,1213.89 1095.68,1213.89 1096.27,1213.89 1096.86,1213.89 1097.44,1213.89 1098.03,1213.89 1098.62,1213.89 1099.2,1213.89 1099.79,1213.89 1100.38,1213.89 1100.96,1213.89 1101.55,1213.89 1102.14,1213.89 1102.72,1213.89 1103.31,1213.89 1103.89,1213.89 1104.48,1213.89 1105.07,1213.89 1105.65,1213.89 1106.24,1213.89 1106.83,1213.89 1107.41,1213.89 1108,1213.89 1108.59,1213.89 1109.17,1213.89 1109.76,1213.89 1110.34,1213.89 1110.93,1213.89 1111.52,1213.89 1112.1,1213.89 1112.69,1213.89 1113.28,1213.89 1113.86,1213.89 1114.45,1213.89 1115.04,1213.89 1115.62,1213.89 1116.21,1213.89 1116.8,1213.89 1117.38,1213.89 1117.97,1213.89 1118.55,1213.89 1119.14,1213.89 1119.73,1213.89 1120.31,1213.89 1120.9,1213.89 1121.49,1213.89 1122.07,1213.89 1122.66,1213.89 1123.25,1213.89 1123.83,1213.89 1124.42,1213.89 1125.01,1213.89 1125.59,1213.89 1126.18,1213.89 1126.76,1213.89 1127.35,1213.89 1127.94,1213.89 1128.52,1213.89 1129.11,1213.89 1129.7,1213.89 1130.28,1213.89 1130.87,1213.89 1131.46,1213.89 1132.04,1213.89 1132.63,1213.89 1133.21,1213.89 1133.8,1213.89 1134.39,1213.89 1134.97,1213.89 1135.56,1213.89 1136.15,1213.89 1136.73,1213.89 1137.32,1213.89 1137.91,1213.89 1138.49,1213.89 1139.08,1213.89 1139.67,1213.89 1140.25,1213.89 1140.84,1213.89 1141.42,1213.89 1142.01,1213.89 1142.6,1213.89 1143.18,1213.89 1143.77,1213.89 1144.36,1213.89 1144.94,1213.89 1145.53,1213.89 1146.12,1213.89 1146.7,1213.89 1147.29,1213.89 1147.88,1213.89 1148.46,1213.89 1149.05,1213.89 1149.63,1213.89 1150.22,1213.89 1150.81,1213.89 1151.39,1213.89 1151.98,1213.89 1152.57,1213.89 1153.15,1213.89 1153.74,1213.89 1154.33,1213.89 1154.91,1213.89 1155.5,1213.89 1156.09,1213.89 1156.67,1213.89 1157.26,1213.89 1157.84,1213.89 1158.43,1213.89 1159.02,1213.89 1159.6,1213.89 1160.19,1213.89 1160.78,1213.89 1161.36,1213.89 1161.95,1213.89 1162.54,1213.89 1163.12,1213.89 1163.71,1213.89 1164.29,1213.89 1164.88,1213.89 1165.47,1213.89 1166.05,1213.89 1166.64,1213.89 1167.23,1213.89 1167.81,1213.89 1168.4,1213.89 1168.99,1213.89 1169.57,1213.89 1170.16,1213.89 1170.75,1213.89 1171.33,1213.89 1171.92,1213.89 1172.5,1213.89 1173.09,1213.89 1173.68,1213.89 1174.26,1213.89 1174.85,1213.89 1175.44,1213.89 1176.02,1213.89 1176.61,1213.89 1177.2,1213.89 1177.78,1213.89 1178.37,1213.89 1178.96,1213.89 1179.54,1213.89 1180.13,1213.89 1180.71,1213.89 1181.3,1213.89 1181.89,1213.89 1182.47,1213.89 1183.06,1213.89 1183.65,1213.89 1184.23,1213.89 1184.82,1213.89 1185.41,1213.89 1185.99,1213.89 1186.58,1213.89 1187.16,1213.89 1187.75,1213.89 1188.34,1213.89 1188.92,1213.89 1189.51,1213.89 1190.1,1213.89 1190.68,1213.89 1191.27,1213.89 1191.86,1213.89 1192.44,1213.89 1193.03,1213.89 1193.62,1213.89 1194.2,1213.89 1194.79,1213.89 1195.37,1213.89 1195.96,1213.89 1196.55,1213.89 1197.13,1213.89 1197.72,1213.89 1198.31,1213.89 1198.89,1213.89 1199.48,1213.89 1200.07,1213.89 1200.65,1213.89 1201.24,1213.89 1201.83,1213.89 1202.41,1213.89 1203,1213.89 1203.58,1213.89 1204.17,1213.89 1204.76,1213.89 1205.34,1213.89 1205.93,1213.89 1206.52,1213.89 1207.1,1213.89 1207.69,1213.89 1208.28,1213.89 1208.86,1213.89 1209.45,1213.89 1210.03,1213.89 1210.62,1213.89 1211.21,1213.89 1211.79,1213.89 1212.38,1213.89 1212.97,1213.89 1213.55,1213.89 1214.14,1213.89 1214.73,1213.89 1215.31,1213.89 1215.9,1213.89 1216.49,1213.89 1217.07,1213.89 1217.66,1213.89 1218.24,1213.89 1218.83,1213.89 1219.42,1213.89 1220,1213.89 1220.59,1213.89 1221.18,1213.89 1221.76,1213.89 1222.35,1213.89 1222.94,1213.89 1223.52,1213.89 1224.11,1213.89 1224.7,1213.89 1225.28,1213.89 1225.87,1213.89 1226.45,1213.89 1227.04,1213.89 1227.63,1213.89 1228.21,1213.89 1228.8,1213.89 1229.39,1213.89 1229.97,1213.89 1230.56,1213.89 1231.15,1213.89 1231.73,1213.89 1232.32,1213.89 1232.91,1213.89 1233.49,1213.89 1234.08,1213.89 1234.66,1213.89 1235.25,1213.89 1235.84,1213.89 1236.42,1213.89 1237.01,1213.89 1237.6,1213.89 1238.18,1213.89 1238.77,1213.89 1239.36,1213.89 1239.94,1213.89 1240.53,1213.89 1241.11,1213.89 1241.7,1213.89 1242.29,1213.89 1242.87,1213.89 1243.46,1213.89 1244.05,1213.89 1244.63,1213.89 1245.22,1213.89 1245.81,1213.89 1246.39,1213.89 1246.98,1213.89 1247.57,1213.89 1248.15,1213.89 1248.74,1213.89 1249.32,1213.89 1249.91,1213.89 1250.5,1213.89 1251.08,1213.89 1251.67,1213.89 1252.26,1213.89 1252.84,1213.89 1253.43,1213.89 1254.02,1213.89 1254.6,1213.89 1255.19,1213.89 1255.78,1213.89 1256.36,1213.89 1256.95,1213.89 1257.53,1213.89 1258.12,1213.89 1258.71,1213.89 1259.29,1213.89 1259.88,1213.89 1260.47,1213.89 1261.05,1213.89 1261.64,1213.89 1262.23,1213.89 1262.81,1213.89 1263.4,1213.89 1263.98,1213.89 1264.57,1213.89 1265.16,1213.89 1265.74,1213.89 1266.33,1213.89 1266.92,1213.89 1267.5,1213.89 1268.09,1213.89 1268.68,1213.89 1269.26,1213.89 1269.85,1213.89 1270.44,1213.89 1271.02,1213.89 1271.61,1213.89 1272.19,1213.89 1272.78,1213.89 1273.37,1213.89 1273.95,1213.89 1274.54,1213.89 1275.13,1213.89 1275.71,1213.89 1276.3,1213.89 1276.89,1213.89 1277.47,1213.89 1278.06,1213.89 1278.65,1213.89 1279.23,1213.89 1279.82,1213.89 1280.4,1213.89 1280.99,1213.89 1281.58,1213.89 1282.16,1213.89 1282.75,1213.89 1283.34,1213.89 1283.92,1213.89 1284.51,1213.89 1285.1,1213.89 1285.68,1213.89 1286.27,1213.89 1286.86,1213.89 1287.44,1213.89 1288.03,1213.89 1288.61,1213.89 1289.2,1213.89 1289.79,1213.89 1290.37,1213.89 1290.96,1213.89 1291.55,1213.89 1292.13,1213.89 1292.72,1213.89 1293.31,1213.89 1293.89,1213.89 1294.48,1213.89 1295.06,1213.89 1295.65,1213.89 1296.24,1213.89 1296.82,1213.89 1297.41,1213.89 1298,1213.89 1298.58,1213.89 1299.17,1213.89 1299.76,1213.89 1300.34,1213.89 1300.93,1213.89 1301.52,1213.89 1302.1,1213.89 1302.69,1213.89 1303.27,1213.89 1303.86,1213.89 1304.45,1213.89 1305.03,1213.89 1305.62,1213.89 1306.21,1213.89 1306.79,1213.89 1307.38,1213.89 1307.97,1213.89 1308.55,1213.89 1309.14,1213.89 1309.73,1213.89 1310.31,1213.89 1310.9,1213.89 1311.48,1213.89 1312.07,1213.89 1312.66,1213.89 1313.24,1213.89 1313.83,1213.89 1314.42,1213.89 1315,1213.89 1315.59,1213.89 1316.18,1213.89 1316.76,1213.89 1317.35,1213.89 1317.93,1213.89 1318.52,1213.89 1319.11,1213.89 1319.69,1213.89 1320.28,1213.89 1320.87,1213.89 1321.45,1213.89 1322.04,1213.89 1322.63,1213.89 1323.21,1213.89 1323.8,1213.89 1324.39,1213.89 1324.97,1213.89 1325.56,1213.89 1326.14,1213.89 1326.73,1213.89 1327.32,1213.89 1327.9,1213.89 1328.49,1213.89 1329.08,1213.89 1329.66,1213.89 1330.25,1213.89 1330.84,1213.89 1331.42,1213.89 1332.01,1213.89 1332.6,1213.89 1333.18,1213.89 1333.77,1213.89 1334.35,1213.89 1334.94,1213.89 1335.53,1213.89 1336.11,1213.89 1336.7,1213.89 1337.29,1213.89 1337.87,1213.89 1338.46,1213.89 1339.05,1213.89 1339.63,1213.89 1340.22,1213.89 1340.8,1213.89 1341.39,1213.89 1341.98,1213.89 1342.56,1213.89 1343.15,1213.89 1343.74,1213.89 1344.32,1213.89 1344.91,1213.89 1345.5,1213.89 1346.08,1213.89 1346.67,1213.89 1347.26,1213.89 1347.84,1213.89 1348.43,1213.89 1349.01,1213.89 1349.6,1213.89 1350.19,1213.89 1350.77,1213.89 1351.36,1213.89 1351.95,1213.89 1352.53,1213.89 1353.12,1213.89 1353.71,1213.89 1354.29,1213.89 1354.88,1213.89 1355.47,1213.89 1356.05,1213.89 1356.64,1213.89 1357.22,1213.89 1357.81,1213.89 1358.4,1213.89 1358.98,1213.89 1359.57,1213.89 1360.16,1213.89 1360.74,1213.89 1361.33,1213.89 1361.92,1213.89 1362.5,1213.89 1363.09,1213.89 1363.68,1213.89 1364.26,1213.89 1364.85,1213.89 1365.43,1213.89 1366.02,1213.89 1366.61,1213.89 1367.19,1213.89 1367.78,1213.89 1368.37,1213.89 1368.95,1213.89 1369.54,1213.89 1370.13,1213.89 1370.71,1213.89 1371.3,1213.89 1371.88,1213.89 1372.47,1213.89 1373.06,1213.89 1373.64,1213.89 1374.23,1213.89 1374.82,1213.89 1375.4,1213.89 1375.99,1213.89 1376.58,1213.89 1377.16,1213.89 1377.75,1213.89 1378.34,1213.89 1378.92,1213.89 1379.51,1213.89 1380.09,1213.89 1380.68,1213.89 1381.27,1213.89 1381.85,1213.89 1382.44,1213.89 1383.03,1213.89 1383.61,1213.89 1384.2,1213.89 1384.79,1213.89 1385.37,1213.89 1385.96,1213.89 1386.55,1213.89 1387.13,1213.89 1387.72,1213.89 1388.3,1213.89 1388.89,1213.89 1389.48,1213.89 1390.06,1213.89 1390.65,1213.89 1391.24,1213.89 1391.82,1213.89 1392.41,1213.89 1393,1213.89 1393.58,1213.89 1394.17,1213.89 1394.75,1213.89 1395.34,1213.89 1395.93,1213.89 1396.51,1213.89 1397.1,1213.89 1397.69,1213.89 1398.27,1213.89 1398.86,1213.89 1399.45,1213.89 1400.03,1213.89 1400.62,1213.89 1401.21,1213.89 1401.79,1213.89 1402.38,1213.89 1402.96,1213.89 1403.55,1213.89 1404.14,1213.89 1404.72,1213.89 1405.31,1213.89 1405.9,1213.89 1406.48,1213.89 1407.07,1213.89 1407.66,1213.89 1408.24,1213.89 1408.83,1213.89 1409.42,1213.89 1410,1213.89 1410.59,1213.89 1411.17,1213.89 1411.76,1213.89 1412.35,1213.89 1412.93,1213.89 1413.52,1213.89 1414.11,1213.89 1414.69,1213.89 1415.28,1213.89 1415.87,1213.89 1416.45,1213.89 1417.04,1213.89 1417.63,1213.89 1418.21,1213.89 1418.8,1213.89 1419.38,1213.89 1419.97,1213.89 1420.56,1213.89 1421.14,1213.89 1421.73,1213.89 1422.32,1213.89 1422.9,1213.89 1423.49,1213.89 1424.08,1213.89 1424.66,1213.89 1425.25,1213.89 1425.83,1213.89 1426.42,1213.89 1427.01,1213.89 1427.59,1213.89 1428.18,1213.89 1428.77,1213.89 1429.35,1213.89 1429.94,1213.89 1430.53,1213.89 1431.11,1213.89 1431.7,1213.89 1432.29,1213.89 1432.87,1213.89 1433.46,1213.89 1434.04,1213.89 1434.63,1213.89 1435.22,1213.89 1435.8,1213.89 1436.39,1213.89 1436.98,1213.89 1437.56,1213.89 1438.15,1213.89 1438.74,1213.89 1439.32,1213.89 1439.91,1213.89 1440.5,1213.89 1441.08,1213.89 1441.67,1213.89 1442.25,1213.89 1442.84,1213.89 1443.43,1213.89 1444.01,1213.89 1444.6,1213.89 1445.19,1213.89 1445.77,1213.89 1446.36,1213.89 1446.95,1213.89 1447.53,1213.89 1448.12,1213.89 1448.7,1213.89 1449.29,1213.89 1449.88,1213.89 1450.46,1213.89 1451.05,1213.89 1451.64,1213.89 1452.22,1213.89 1452.81,1213.89 1453.4,1213.89 1453.98,1213.89 1454.57,1213.89 1455.16,1213.89 1455.74,1213.89 1456.33,1213.89 1456.91,1213.89 1457.5,1213.89 1458.09,1213.89 1458.67,1213.89 1459.26,1213.89 1459.85,1213.89 1460.43,1213.89 1461.02,1213.89 1461.61,1213.89 1462.19,1213.89 1462.78,1213.89 1463.37,1213.89 1463.95,1213.89 1464.54,1213.89 1465.12,1213.89 1465.71,1213.89 1466.3,1213.89 1466.88,1213.89 1467.47,1213.89 1468.06,1213.89 1468.64,1213.89 1469.23,1213.89 1469.82,1213.89 1470.4,1213.89 1470.99,1213.89 1471.57,1213.89 1472.16,1213.89 1472.75,1213.89 1473.33,1213.89 1473.92,1213.89 1474.51,1213.89 1475.09,1213.89 1475.68,1213.89 1476.27,1213.89 1476.85,1213.89 1477.44,1213.89 1478.03,1213.89 1478.61,1213.89 1479.2,1213.89 1479.78,1213.89 1480.37,1213.89 1480.96,1213.89 1481.54,1213.89 1482.13,1213.89 1482.72,1213.89 1483.3,1213.89 1483.89,1213.89 1484.48,1213.89 1485.06,1213.89 1485.65,1213.89 1486.24,1213.89 1486.82,1213.89 1487.41,1213.89 1487.99,1213.89 1488.58,1213.89 1489.17,1213.89 1489.75,1213.89 1490.34,1213.89 1490.93,1213.89 1491.51,1213.89 1492.1,1213.89 1492.69,1213.89 1493.27,1213.89 1493.86,1213.89 1494.45,1213.89 1495.03,1213.89 1495.62,1213.89 1496.2,1213.89 1496.79,1213.89 1497.38,1213.89 1497.96,1213.89 1498.55,1213.89 1499.14,1213.89 1499.72,1213.89 1500.31,1213.89 1500.9,1213.89 1501.48,1213.89 1502.07,1213.89 1502.65,1213.89 1503.24,1213.89 1503.83,1213.89 1504.41,1213.89 1505,1213.89 1505.59,1213.89 1506.17,1213.89 1506.76,1213.89 1507.35,1213.89 1507.93,1213.89 1508.52,1213.89 1509.11,1213.89 1509.69,1213.89 1510.28,1213.89 1510.86,1213.89 1511.45,1213.89 1512.04,1213.89 1512.62,1213.89 1513.21,1213.89 1513.8,1213.89 1514.38,1213.89 1514.97,1213.89 1515.56,1213.89 1516.14,1213.89 1516.73,1213.89 1517.32,1213.89 1517.9,1213.89 1518.49,1213.89 1519.07,1213.89 1519.66,1213.89 1520.25,1213.89 1520.83,1213.89 1521.42,1213.89 1522.01,1213.89 1522.59,1213.89 1523.18,1213.89 1523.77,1213.89 1524.35,1213.89 1524.94,1213.89 1525.52,1213.89 1526.11,1213.89 1526.7,1213.89 1527.28,1213.89 1527.87,1213.89 1528.46,1213.89 1529.04,1213.89 1529.63,1213.89 1530.22,1213.89 1530.8,1213.89 1531.39,1213.89 1531.98,1213.89 1532.56,1213.89 1533.15,1213.89 1533.73,1213.89 1534.32,1213.89 1534.91,1213.89 1535.49,1213.89 1536.08,1213.89 1536.67,1213.89 1537.25,1213.89 1537.84,1213.89 1538.43,1213.89 1539.01,1213.89 1539.6,1213.89 1540.19,1213.89 1540.77,1213.89 1541.36,1213.89 1541.94,1213.89 1542.53,1213.89 1543.12,1213.89 1543.7,1213.89 1544.29,1213.89 1544.88,1213.89 1545.46,1213.89 1546.05,1213.89 1546.64,1213.89 1547.22,1213.89 1547.81,1213.89 1548.4,1213.89 1548.98,1213.89 1549.57,1213.89 1550.15,1213.89 1550.74,1213.89 1551.33,1213.89 1551.91,1213.89 1552.5,1213.89 1553.09,1213.89 1553.67,1213.89 1554.26,1213.89 1554.85,1213.89 1555.43,1213.89 1556.02,1213.89 1556.6,1213.89 1557.19,1213.89 1557.78,1213.89 1558.36,1213.89 1558.95,1213.89 1559.54,1213.89 1560.12,1213.89 1560.71,1213.89 1561.3,1213.89 1561.88,1213.89 1562.47,1213.89 1563.06,1213.89 1563.64,1213.89 1564.23,1213.89 1564.81,1213.89 1565.4,1213.89 1565.99,1213.89 1566.57,1213.89 1567.16,1213.89 1567.75,1213.89 1568.33,1213.89 1568.92,1213.89 1569.51,1213.89 1570.09,1213.89 1570.68,1213.89 1571.27,1213.89 1571.85,1213.89 1572.44,1213.89 1573.02,1213.89 1573.61,1213.89 1574.2,1213.89 1574.78,1213.89 1575.37,1213.89 1575.96,1213.89 1576.54,1213.89 1577.13,1213.89 1577.72,1213.89 1578.3,1213.89 1578.89,1213.89 1579.47,1213.89 1580.06,1213.89 1580.65,1213.89 1581.23,1213.89 1581.82,1213.89 1582.41,1213.89 1582.99,1213.89 1583.58,1213.89 1584.17,1213.89 1584.75,1213.89 1585.34,1213.89 1585.93,1213.89 1586.51,1213.89 1587.1,1213.89 1587.68,1213.89 1588.27,1213.89 1588.86,1213.89 1589.44,1213.89 1590.03,1213.89 1590.62,1213.89 1591.2,1213.89 1591.79,1213.89 1592.38,1213.89 1592.96,1213.89 1593.55,1213.89 1594.14,1213.89 1594.72,1213.89 1595.31,1213.89 1595.89,1213.89 1596.48,1213.89 1597.07,1213.89 1597.65,1213.89 1598.24,1213.89 1598.83,1213.89 1599.41,1213.89 1600,1213.89 1600.59,1213.89 1601.17,1213.89 1601.76,1213.89 1602.34,1213.89 1602.93,1213.89 1603.52,1213.89 1604.1,1213.89 1604.69,1213.89 1605.28,1213.89 1605.86,1213.89 1606.45,1213.89 1607.04,1213.89 1607.62,1213.89 1608.21,1213.89 1608.8,1213.89 1609.38,1213.89 1609.97,1213.89 1610.55,1213.89 1611.14,1213.89 1611.73,1213.89 1612.31,1213.89 1612.9,1213.89 1613.49,1213.89 1614.07,1213.89 1614.66,1213.89 1615.25,1213.89 1615.83,1213.89 1616.42,1213.89 1617.01,1213.89 1617.59,1213.89 1618.18,1213.89 1618.76,1213.89 1619.35,1213.89 1619.94,1213.89 1620.52,1213.89 1621.11,1213.89 1621.7,1213.89 1622.28,1213.89 1622.87,1213.89 1623.46,1213.89 1624.04,1213.89 1624.63,1213.89 1625.22,1213.89 1625.8,1213.89 1626.39,1213.89 1626.97,1213.89 1627.56,1213.89 1628.15,1213.89 1628.73,1213.89 1629.32,1213.89 1629.91,1213.89 1630.49,1213.89 1631.08,1213.89 1631.67,1213.89 1632.25,1213.89 1632.84,1213.89 1633.42,1213.89 1634.01,1213.89 1634.6,1213.89 1635.18,1213.89 1635.77,1213.89 1636.36,1213.89 1636.94,1213.89 1637.53,1213.89 1638.12,1213.89 1638.7,1213.89 1639.29,1213.89 1639.88,1213.89 1640.46,1213.89 1641.05,1213.89 1641.63,1213.89 1642.22,1213.89 1642.81,1213.89 1643.39,1213.89 1643.98,1213.89 1644.57,1213.89 1645.15,1213.89 1645.74,1213.89 1646.33,1213.89 1646.91,1213.89 1647.5,1213.89 1648.09,1213.89 1648.67,1213.89 1649.26,1213.89 1649.84,1213.89 1650.43,1213.89 1651.02,1213.89 1651.6,1213.89 1652.19,1213.89 1652.78,1213.89 1653.36,1213.89 1653.95,1213.89 1654.54,1213.89 1655.12,1213.89 1655.71,1213.89 1656.29,1213.89 1656.88,1213.89 1657.47,1213.89 1658.05,1213.89 1658.64,1213.89 1659.23,1213.89 1659.81,1213.89 1660.4,1213.89 1660.99,1213.89 1661.57,1213.89 1662.16,1213.89 1662.75,1213.89 1663.33,1213.89 1663.92,1213.89 1664.5,1213.89 1665.09,1213.89 1665.68,1213.89 1666.26,1213.89 1666.85,1213.89 1667.44,1213.89 1668.02,1213.89 1668.61,1213.89 1669.2,1213.89 1669.78,1213.89 1670.37,1213.89 1670.96,1213.89 1671.54,1213.89 1672.13,1213.89 1672.71,1213.89 1673.3,1213.89 1673.89,1213.89 1674.47,1213.89 1675.06,1213.89 1675.65,1213.89 1676.23,1213.89 1676.82,1213.89 1677.41,1213.89 1677.99,1213.89 1678.58,1213.89 1679.17,1213.89 1679.75,1213.89 1680.34,1213.89 1680.92,1213.89 1681.51,1213.89 1682.1,1213.89 1682.68,1213.89 1683.27,1213.89 1683.86,1213.89 1684.44,1213.89 1685.03,1213.89 1685.62,1213.89 1686.2,1213.89 1686.79,1213.89 1687.37,1213.89 1687.96,1213.89 1688.55,1213.89 1689.13,1213.89 1689.72,1213.89 1690.31,1213.89 1690.89,1213.89 1691.48,1213.89 1692.07,1213.89 1692.65,1213.89 1693.24,1213.89 1693.83,1213.89 1694.41,1213.89 1695,1213.89 1695.58,1213.89 1696.17,1213.89 1696.76,1213.89 1697.34,1213.89 1697.93,1213.89 1698.52,1213.89 1699.1,1213.89 1699.69,1213.89 1700.28,1213.89 1700.86,1213.89 1701.45,1213.89 1702.04,1213.89 1702.62,1213.89 1703.21,1213.89 1703.79,1213.89 1704.38,1213.89 1704.97,1213.89 1705.55,1213.89 1706.14,1213.89 1706.73,1213.89 1707.31,1213.89 1707.9,1213.89 1708.49,1213.89 1709.07,1213.89 1709.66,1213.89 1710.24,1213.89 1710.83,1213.89 1711.42,1213.89 1712,1213.89 1712.59,1213.89 1713.18,1213.89 1713.76,1213.89 1714.35,1213.89 1714.94,1213.89 1715.52,1213.89 1716.11,1213.89 1716.7,1213.89 1717.28,1213.89 1717.87,1213.89 1718.45,1213.89 1719.04,1213.89 1719.63,1213.89 1720.21,1213.89 1720.8,1213.89 1721.39,1213.89 1721.97,1213.89 1722.56,1213.89 1723.15,1213.89 1723.73,1213.89 1724.32,1213.89 1724.91,1213.89 1725.49,1213.89 1726.08,1213.89 1726.66,1213.89 1727.25,1213.89 1727.84,1213.89 1728.42,1213.89 1729.01,1213.89 1729.6,1213.89 1730.18,1213.89 1730.77,1213.89 1731.36,1213.89 1731.94,1213.89 1732.53,1213.89 1733.11,1213.89 1733.7,1213.89 1734.29,1213.89 1734.87,1213.89 1735.46,1213.89 1736.05,1213.89 1736.63,1213.89 1737.22,1213.89 1737.81,1213.89 1738.39,1213.89 1738.98,1213.89 1739.57,1213.89 1740.15,1213.89 1740.74,1213.89 1741.32,1213.89 1741.91,1213.89 1742.5,1213.89 1743.08,1213.89 1743.67,1213.89 1744.26,1213.89 1744.84,1213.89 1745.43,1213.89 1746.02,1213.89 1746.6,1213.89 1747.19,1213.89 1747.78,1213.89 1748.36,1213.89 1748.95,1213.89 1749.53,1213.89 1750.12,1213.89 1750.71,1213.89 1751.29,1213.89 1751.88,1213.89 1752.47,1213.89 1753.05,1213.89 1753.64,1213.89 1754.23,1213.89 1754.81,1213.89 1755.4,1213.89 1755.99,1213.89 1756.57,1213.89 1757.16,1213.89 1757.74,1213.89 1758.33,1213.89 1758.92,1213.89 1759.5,1213.89 1760.09,1213.89 1760.68,1213.89 1761.26,1213.89 1761.85,1213.89 1762.44,1213.89 1763.02,1213.89 1763.61,1213.89 1764.19,1213.89 1764.78,1213.89 1765.37,1213.89 1765.95,1213.89 1766.54,1213.89 1767.13,1213.89 1767.71,1213.89 1768.3,1213.89 1768.89,1213.89 1769.47,1213.89 1770.06,1213.89 1770.65,1213.89 1771.23,1213.89 1771.82,1213.89 1772.4,1213.89 1772.99,1213.89 1773.58,1213.89 1774.16,1213.89 1774.75,1213.89 1775.34,1213.89 1775.92,1213.89 1776.51,1213.89 1777.1,1213.89 1777.68,1213.89 1778.27,1213.89 1778.86,1213.89 1779.44,1213.89 1780.03,1213.89 1780.61,1213.89 1781.2,1213.89 1781.79,1213.89 1782.37,1213.89 1782.96,1213.89 1783.55,1213.89 1784.13,1213.89 1784.72,1213.89 1785.31,1213.89 1785.89,1213.89 1786.48,1213.89 1787.06,1213.89 1787.65,1213.89 1788.24,1213.89 1788.82,1213.89 1789.41,1213.89 1790,1213.89 1790.58,1213.89 1791.17,1213.89 1791.76,1213.89 1792.34,1213.89 1792.93,1213.89 1793.52,1213.89 1794.1,1213.89 1794.69,1213.89 1795.27,1213.89 1795.86,1213.89 1796.45,1213.89 1797.03,1213.89 1797.62,1213.89 1798.21,1213.89 1798.79,1213.89 1799.38,1213.89 1799.97,1213.89 1800.55,1213.89 1801.14,1213.89 1801.73,1213.89 1802.31,1213.89 1802.9,1213.89 1803.48,1213.89 1804.07,1213.89 1804.66,1213.89 1805.24,1213.89 1805.83,1213.89 1806.42,1213.89 1807,1213.89 1807.59,1213.89 1808.18,1213.89 1808.76,1213.89 1809.35,1213.89 1809.94,1213.89 1810.52,1213.89 1811.11,1213.89 1811.69,1213.89 1812.28,1213.89 1812.87,1213.89 1813.45,1213.89 1814.04,1213.89 1814.63,1213.89 1815.21,1213.89 1815.8,1213.89 1816.39,1213.89 1816.97,1213.89 1817.56,1213.89 1818.14,1213.89 1818.73,1213.89 1819.32,1213.89 1819.9,1213.89 1820.49,1213.89 1821.08,1213.89 1821.66,1213.89 1822.25,1213.89 1822.84,1213.89 1823.42,1213.89 1824.01,1213.89 1824.6,1213.89 1825.18,1213.89 1825.77,1213.89 1826.35,1213.89 1826.94,1213.89 1827.53,1213.89 1828.11,1213.89 1828.7,1213.89 1829.29,1213.89 1829.87,1213.89 1830.46,1213.89 1831.05,1213.89 1831.63,1213.89 1832.22,1213.89 1832.81,1213.89 1833.39,1213.89 1833.98,1213.89 1834.56,1213.89 1835.15,1213.89 1835.74,1213.89 1836.32,1213.89 1836.91,1213.89 1837.5,1213.89 1838.08,1213.89 1838.67,1213.89 1839.26,1213.89 1839.84,1213.89 1840.43,1213.89 1841.01,1213.89 1841.6,1213.89 1842.19,1213.89 1842.77,1213.89 1843.36,1213.89 1843.95,1213.89 1844.53,1213.89 1845.12,1213.89 1845.71,1213.89 1846.29,1213.89 1846.88,1213.89 1847.47,1213.89 1848.05,1213.89 1848.64,1213.89 1849.22,1213.89 1849.81,1213.89 1850.4,1213.89 1850.98,1213.89 1851.57,1213.89 1852.16,1213.89 1852.74,1213.89 1853.33,1213.89 1853.92,1213.89 1854.5,1213.89 1855.09,1213.89 1855.68,1213.89 1856.26,1213.89 1856.85,1213.89 1857.43,1213.89 1858.02,1213.89 1858.61,1213.89 1859.19,1213.89 1859.78,1213.89 1860.37,1213.89 1860.95,1213.89 1861.54,1213.89 1862.13,1213.89 1862.71,1213.89 1863.3,1213.89 1863.88,1213.89 1864.47,1213.89 1865.06,1213.89 1865.64,1213.89 1866.23,1213.89 1866.82,1213.89 1867.4,1213.89 1867.99,1213.89 1868.58,1213.89 1869.16,1213.89 1869.75,1213.89 1870.34,1213.89 1870.92,1213.89 1871.51,1213.89 1872.09,1213.89 1872.68,1213.89 1873.27,1213.89 1873.85,1213.89 1874.44,1213.89 1875.03,1213.89 1875.61,1213.89 1876.2,1213.89 1876.79,1213.89 1877.37,1213.89 1877.96,1213.89 1878.55,1213.89 1879.13,1213.89 1879.72,1213.89 1880.3,1213.89 1880.89,1213.89 1881.48,1213.89 1882.06,1213.89 1882.65,1213.89 1883.24,1213.89 1883.82,1213.89 1884.41,1213.89 1885,1213.89 1885.58,1213.89 1886.17,1213.89 1886.76,1213.89 1887.34,1213.89 1887.93,1213.89 1888.51,1213.89 1889.1,1213.89 1889.69,1213.89 1890.27,1213.89 1890.86,1213.89 1891.45,1213.89 1892.03,1213.89 1892.62,1213.89 1893.21,1213.89 1893.79,1213.89 1894.38,1213.89 1894.96,1213.89 1895.55,1213.89 1896.14,1213.89 1896.72,1213.89 1897.31,1213.89 1897.9,1213.89 1898.48,1213.89 1899.07,1213.89 1899.66,1213.89 1900.24,1213.89 1900.83,1213.89 1901.42,1213.89 1902,1213.89 1902.59,1213.89 1903.17,1213.89 1903.76,1213.89 1904.35,1213.89 1904.93,1213.89 1905.52,1213.89 1906.11,1213.89 1906.69,1213.89 1907.28,1213.89 1907.87,1213.89 1908.45,1213.89 1909.04,1213.89 1909.63,1213.89 1910.21,1213.89 1910.8,1213.89 1911.38,1213.89 1911.97,1213.89 1912.56,1213.89 1913.14,1213.89 1913.73,1213.89 1914.32,1213.89 1914.9,1213.89 1915.49,1213.89 1916.08,1213.89 1916.66,1213.89 1917.25,1213.89 1917.83,1213.89 1918.42,1213.89 1919.01,1213.89 1919.59,1213.89 1920.18,1213.89 1920.77,1213.89 1921.35,1213.89 1921.94,1213.89 1922.53,1213.89 1923.11,1213.89 1923.7,1213.89 1924.29,1213.89 1924.87,1213.89 1925.46,1213.89 1926.04,1213.89 1926.63,1213.89 1927.22,1213.89 1927.8,1213.89 1928.39,1213.89 1928.98,1213.89 1929.56,1213.89 1930.15,1213.89 1930.74,1213.89 1931.32,1213.89 1931.91,1213.89 1932.5,1213.89 1933.08,1213.89 1933.67,1213.89 1934.25,1213.89 1934.84,1213.89 1935.43,1213.89 1936.01,1213.89 1936.6,1213.89 1937.19,1213.89 1937.77,1213.89 1938.36,1213.89 1938.95,1213.89 1939.53,1213.89 1940.12,1213.89 1940.71,1213.89 1941.29,1213.89 1941.88,1213.89 1942.46,1213.89 1943.05,1213.89 1943.64,1213.89 1944.22,1213.89 1944.81,1213.89 1945.4,1213.89 1945.98,1213.89 1946.57,1213.89 1947.16,1213.89 1947.74,1213.89 1948.33,1213.89 1948.91,1213.89 1949.5,1213.89 1950.09,1213.89 1950.67,1213.89 1951.26,1213.89 1951.85,1213.89 1952.43,1213.89 1953.02,1213.89 1953.61,1213.89 1954.19,1213.89 1954.78,1213.89 1955.37,1213.89 1955.95,1213.89 1956.54,1213.89 1957.12,1213.89 1957.71,1213.89 1958.3,1213.89 1958.88,1213.89 1959.47,1213.89 1960.06,1213.89 1960.64,1213.89 1961.23,1213.89 1961.82,1213.89 1962.4,1213.89 1962.99,1213.89 1963.58,1213.89 1964.16,1213.89 1964.75,1213.89 1965.33,1213.89 1965.92,1213.89 1966.51,1213.89 1967.09,1213.89 1967.68,1213.89 1968.27,1213.89 1968.85,1213.89 1969.44,1213.89 1970.03,1213.89 1970.61,1213.89 1971.2,1213.89 1971.78,1213.89 1972.37,1213.89 1972.96,1213.89 1973.54,1213.89 1974.13,1213.89 1974.72,1213.89 1975.3,1213.89 1975.89,1213.89 1976.48,1213.89 1977.06,1213.89 1977.65,1213.89 1978.24,1213.89 1978.82,1213.89 1979.41,1213.89 1979.99,1213.89 1980.58,1213.89 1981.17,1213.89 1981.75,1213.89 1982.34,1213.89 1982.93,1213.89 1983.51,1213.89 1984.1,1213.89 1984.69,1213.89 1985.27,1213.89 1985.86,1213.89 1986.45,1213.89 1987.03,1213.89 1987.62,1213.89 1988.2,1213.89 1988.79,1213.89 1989.38,1213.89 1989.96,1213.89 1990.55,1213.89 1991.14,1213.89 1991.72,1213.89 1992.31,1213.89 1992.9,1213.89 1993.48,1213.89 1994.07,1213.89 1994.65,1213.89 1995.24,1213.89 1995.83,1213.89 1996.41,1213.89 1997,1213.89 1997.59,1213.89 1998.17,1213.89 1998.76,1213.89 1999.35,1213.89 1999.93,1213.89 2000.52,1213.89 2001.11,1213.89 2001.69,1213.89 2002.28,1213.89 2002.86,1213.89 2003.45,1213.89 2004.04,1213.89 2004.62,1213.89 2005.21,1213.89 2005.8,1213.89 2006.38,1213.89 2006.97,1213.89 2007.56,1213.89 2008.14,1213.89 2008.73,1213.89 2009.32,1213.89 2009.9,1213.89 2010.49,1213.89 2011.07,1213.89 2011.66,1213.89 2012.25,1213.89 2012.83,1213.89 2013.42,1213.89 2014.01,1213.89 2014.59,1213.89 2015.18,1213.89 2015.77,1213.89 2016.35,1213.89 2016.94,1213.89 2017.53,1213.89 2018.11,1213.89 2018.7,1213.89 2019.28,1213.89 2019.87,1213.89 2020.46,1213.89 2021.04,1213.89 2021.63,1213.89 2022.22,1213.89 2022.8,1213.89 2023.39,1213.89 2023.98,1213.89 2024.56,1213.89 2025.15,1213.89 2025.73,1213.89 2026.32,1213.89 2026.91,1213.89 2027.49,1213.89 2028.08,1213.89 2028.67,1213.89 2029.25,1213.89 2029.84,1213.89 2030.43,1213.89 2031.01,1213.89 2031.6,1213.89 2032.19,1213.89 2032.77,1213.89 2033.36,1213.89 2033.94,1213.89 2034.53,1213.89 2035.12,1213.89 2035.7,1213.89 2036.29,1213.89 2036.88,1213.89 2037.46,1213.89 2038.05,1213.89 2038.64,1213.89 2039.22,1213.89 2039.81,1213.89 2040.4,1213.89 2040.98,1213.89 2041.57,1213.89 2042.15,1213.89 2042.74,1213.89 2043.33,1213.89 2043.91,1213.89 2044.5,1213.89 2045.09,1213.89 2045.67,1213.89 2046.26,1213.89 2046.85,1213.89 2047.43,1213.89 2048.02,1213.89 2048.6,1213.89 2049.19,1213.89 2049.78,1213.89 2050.36,1213.89 2050.95,1213.89 2051.54,1213.89 2052.12,1213.89 2052.71,1213.89 2053.3,1213.89 2053.88,1213.89 2054.47,1213.89 2055.06,1213.89 2055.64,1213.89 2056.23,1213.89 2056.81,1213.89 2057.4,1213.89 2057.99,1213.89 2058.57,1213.89 2059.16,1213.89 2059.75,1213.89 2060.33,1213.89 2060.92,1213.89 2061.51,1213.89 2062.09,1213.89 2062.68,1213.89 2063.27,1213.89 2063.85,1213.89 2064.44,1213.89 2065.02,1213.89 2065.61,1213.89 2066.2,1213.89 2066.78,1213.89 2067.37,1213.89 2067.96,1213.89 2068.54,1213.89 2069.13,1213.89 2069.72,1213.89 2070.3,1213.89 2070.89,1213.89 2071.48,1213.89 2072.06,1213.89 2072.65,1213.89 2073.23,1213.89 2073.82,1213.89 2074.41,1213.89 2074.99,1213.89 2075.58,1213.89 2076.17,1213.89 2076.75,1213.89 2077.34,1213.89 2077.93,1213.89 2078.51,1213.89 2079.1,1213.89 2079.68,1213.89 2080.27,1213.89 2080.86,1213.89 2081.44,1213.89 2082.03,1213.89 2082.62,1213.89 2083.2,1213.89 2083.79,1213.89 2084.38,1213.89 2084.96,1213.89 2085.55,1213.89 2086.14,1213.89 2086.72,1213.89 2087.31,1213.89 2087.89,1213.89 2088.48,1213.89 2089.07,1213.89 2089.65,1213.89 2090.24,1213.89 2090.83,1213.89 2091.41,1213.89 2092,1213.89 2092.59,1213.89 2093.17,1213.89 2093.76,1213.89 2094.35,1213.89 2094.93,1213.89 2095.52,1213.89 2096.1,1213.89 2096.69,1213.89 2097.28,1213.89 2097.86,1213.89 2098.45,1213.89 2099.04,1213.89 2099.62,1213.89 2100.21,1213.89 2100.8,1213.89 2101.38,1213.89 2101.97,1213.89 2102.55,1213.89 2103.14,1213.89 2103.73,1213.89 2104.31,1213.89 2104.9,1213.89 2105.49,1213.89 2106.07,1213.89 2106.66,1213.89 2107.25,1213.89 2107.83,1213.89 2108.42,1213.89 2109.01,1213.89 2109.59,1213.89 2110.18,1213.89 2110.76,1213.89 2111.35,1213.89 2111.94,1213.89 2112.52,1213.89 2113.11,1213.89 2113.7,1213.89 2114.28,1213.89 2114.87,1213.89 2115.46,1213.89 2116.04,1213.89 2116.63,1213.89 2117.22,1213.89 2117.8,1213.89 2118.39,1213.89 2118.97,1213.89 2119.56,1213.89 2120.15,1213.89 2120.73,1213.89 2121.32,1213.89 2121.91,1213.89 2122.49,1213.89 2123.08,1213.89 2123.67,1213.89 2124.25,1213.89 2124.84,1213.89 2125.42,1213.89 2126.01,1213.89 2126.6,1213.89 2127.18,1213.89 2127.77,1213.89 2128.36,1213.89 2128.94,1213.89 2129.53,1213.89 2130.12,1213.89 2130.7,1213.89 2131.29,1213.89 2131.88,1213.89 2132.46,1213.89 2133.05,1213.89 2133.63,1213.89 2134.22,1213.89 2134.81,1213.89 2135.39,1213.89 2135.98,1213.89 2136.57,1213.89 2137.15,1213.89 2137.74,1213.89 2138.33,1213.89 2138.91,1213.89 2139.5,1213.89 2140.09,1213.89 2140.67,1213.89 2141.26,1213.89 2141.84,1213.89 2142.43,1213.89 2143.02,1213.89 2143.6,1213.89 2144.19,1213.89 2144.78,1213.89 2145.36,1213.89 2145.95,1213.89 2146.54,1213.89 2147.12,1213.89 2147.71,1213.89 2148.3,1213.89 2148.88,1213.89 2149.47,1213.89 2150.05,1213.89 2150.64,1213.89 2151.23,1213.89 2151.81,1213.89 2152.4,1213.89 2152.99,1213.89 2153.57,1213.89 2154.16,1213.89 2154.75,1213.89 2155.33,1213.89 2155.92,1213.89 2156.5,1213.89 2157.09,1213.89 2157.68,1213.89 2158.26,1213.89 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.05,1195.82 1399,899.083 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.51 985.439,1195.82 2158.26,1195.82 2158.26,1231.51 985.439,1231.51 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip303\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip303)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-7593.95 165.469,-8323.51 166.029,-7904.84 166.588,-8591.74 167.147,-9212.35 167.706,-9770.95 168.266,-9390.98 168.825,-9846.61 169.384,-10281.6 169.943,-10667.3 170.503,-10308.1 171.062,-10633.4 171.621,-10327.5 172.18,-10614.6 172.74,-10863 173.299,-11075.5 173.858,-11254.3 174.417,-11382.9 174.977,-11486.9 175.536,-11186.3 176.095,-11257.4 176.655,-10975.1 177.214,-11005.5 177.773,-11004.1 178.332,-10440.9 178.892,-10446 179.451,-10173.6 180.01,-9702.32 180.569,-9245.21 181.129,-9214.48 181.688,-8990.9 182.247,-8784.73 182.806,-8581.93 183.366,-8526.37 183.925,-8472.69 184.484,-8400.34 185.043,-8187.87 185.603,-7849.67 186.162,-7529.07 186.721,-7345.19 187.28,-7278.59 187.84,-7094.79 188.399,-7017.59 188.958,-6933.06 189.517,-6654.4 190.077,-6483.77 190.636,-6316.7 191.195,-6155.45 191.754,-6068.72 192.314,-5841.79 192.873,-5613.83 193.432,-5337.47 193.991,-5127.13 194.551,-5044.28 195.11,-4898.86 195.669,-4807.55 196.228,-4716.8 196.788,-4469.05 197.347,-4389.4 197.906,-4255.67 198.465,-4076.34 199.025,-3945.72 199.584,-3821.09 200.143,-3608.01 200.702,-3535.16 201.262,-3332.71 201.821,-3216.68 202.38,-3109.85 202.939,-2968.32 203.499,-2787.84 204.058,-2726.96 204.617,-2592.02 205.176,-2534.93 205.736,-2405.72 206.295,-2313.45 206.854,-2261.77 207.413,-2201.7 207.973,-2050.58 208.532,-1999.43 209.091,-1912.5 209.65,-1858.99 210.21,-1805.57 210.769,-1722.42 211.328,-1639.56 211.887,-1587.01 212.447,-1448.46 213.006,-1397.91 213.565,-1266.97 214.124,-1139.84 214.684,-1100.81 215.243,-1005.92 215.802,-969.626 216.361,-880.915 216.921,-843.426 217.48,-782.16 218.039,-746.143 218.598,-711.598 219.158,-605.397 219.717,-527.93 220.276,-453.917 220.835,-377.474 221.395,-344.337 221.954,-292.192 222.513,-197.622 223.072,-153.814 223.632,-130.635 224.191,-47.2179 224.75,12.6226 225.309,49.5794 225.869,149.211 226.428,245.355 226.987,255.402 227.546,237.233 228.106,308.277 228.665,315.293 229.224,302.357 229.783,390.868 230.343,394.774 230.902,441.584 231.461,426.501 232.02,452.03 232.58,538.683 233.139,521.55 233.698,524.077 234.257,547.529 234.817,548.522 235.376,533.095 235.935,613.369 236.494,638.093 237.054,658.175 237.613,676.276 238.172,734.478 238.731,770.158 239.291,784.314 239.85,783.325 240.409,801.674 240.968,800.963 241.528,815.355 242.087,831.82 242.646,830 243.205,864.092 243.765,845.761 244.324,845.336 244.883,876.059 245.442,872.769 246.002,815.645 246.561,816.186 247.12,819.167 247.679,821.478 248.239,855.878 248.798,855.092 249.357,909.475 249.916,938.193 250.476,969.711 251.035,1001.73 251.594,992.845 252.153,1001.82 252.713,1010.94 253.272,982.987 253.831,1011.85 254.39,1009.2 254.95,1053.02 255.509,1061.86 256.068,1105.48 256.627,1107.85 257.187,1096.58 257.746,1083.77 258.305,1072.02 258.864,1043.54 259.424,1005.56 259.983,1020.04 260.542,1044.87 261.101,1037.53 261.661,997.672 262.22,1006.83 262.779,1001.69 263.338,997.24 263.898,1014.82 264.457,1009.72 265.016,1070.02 265.575,1111.73 266.135,1120.9 266.694,1078.74 267.253,1103.99 267.812,1077.25 268.372,1069.73 268.931,1079.35 269.49,1070.9 270.049,1095.2 270.609,1087.03 271.168,1098.22 271.727,1088.39 272.286,1112.07 272.846,1101.99 273.405,1094.51 273.964,1086.11 274.523,1059.4 275.083,1066.87 275.642,1040.5 276.201,1034.67 276.76,1026.82 277.32,1037.06 277.879,1031.2 278.438,1046.4 278.997,1038.19 279.557,1012.98 280.116,1024.58 280.675,1034.64 281.234,1045.56 281.794,1055.7 282.353,1034.13 282.912,1026.27 283.471,1038.42 284.031,1018.06 284.59,1025.97 285.149,1021.5 285.708,1014.61 286.268,1008.57 286.827,1038.04 287.386,1031.32 287.945,1058.85 288.505,1066.79 289.064,1040.75 289.623,1002.22 290.182,996.168 290.742,1011.48 291.301,1009.2 291.86,1002.15 292.419,994.074 292.979,974.695 293.538,970.151 294.097,999.948 294.656,996.173 295.216,1008.03 295.775,1012.72 296.334,1008.39 296.893,1002.14 297.453,1043.66 298.012,1069.38 298.571,1073.52 299.13,1065.51 299.69,1092.95 300.249,1069.54 300.808,1079.28 301.368,1085.86 301.927,1126.91 302.486,1131.96 303.045,1124.06 303.605,1108.6 304.164,1083.19 304.723,1107.35 305.282,1078.84 305.842,1065.46 306.401,1054.57 306.96,1047.47 307.519,1021.31 308.079,1031.04 308.638,1025.64 309.197,1001.3 309.756,981.442 310.316,994.053 310.875,1051.96 311.434,1026.69 311.993,983.094 312.553,980.122 313.112,925.986 313.671,940.857 314.23,951.672 314.79,965.166 315.349,941.052 315.908,920.039 316.467,903.047 317.027,947.26 317.586,959.216 318.145,989.278 318.704,931.564 319.264,964.547 319.823,945.667 320.382,960.507 320.941,955.415 321.501,951.729 322.06,965.776 322.619,960.816 323.178,969.74 323.738,978.082 324.297,939.423 324.856,948.817 325.415,961.757 325.975,908.209 326.534,903.941 327.093,898.386 327.652,899.868 328.212,911.905 328.771,893.94 329.33,876.191 329.889,894.499 330.449,926.2 331.008,937.947 331.567,928.98 332.126,926.248 332.686,902.52 333.245,917.372 333.804,943.879 334.363,971.278 334.923,965.949 335.482,978.1 336.041,988.734 336.6,978.327 337.16,1003.6 337.719,996.585 338.278,989.071 338.837,978.283 339.397,970.404 339.956,947.883 340.515,945.935 341.074,940.498 341.634,952.263 342.193,948.142 342.752,947.662 343.311,944.255 343.871,923.804 344.43,886.282 344.989,837.975 345.548,836.617 346.108,835.526 346.667,832.503 347.226,862.726 347.785,958.434 348.345,938.226 348.904,950.956 349.463,961.909 350.022,958.265 350.582,982.864 351.141,991.564 351.7,966.795 352.259,988.167 352.819,942.949 353.378,953.619 353.937,946.6 354.496,940.688 355.056,898.97 355.615,895.756 356.174,892.268 356.733,867.832 357.293,817.809 357.852,851.921 358.411,881.817 358.97,864.214 359.53,882.053 360.089,877.818 360.648,826.628 361.207,811.179 361.767,844.69 362.326,843.672 362.885,839.707 363.444,870.789 364.004,898.243 364.563,910.426 365.122,906.31 365.681,932.795 366.241,960.292 366.8,952.016 367.359,895.524 367.918,893.143 368.478,938.144 369.037,916.295 369.596,925.962 370.155,901.17 370.715,912.747 371.274,939.471 371.833,951.377 372.392,942.129 372.952,886.307 373.511,849.922 374.07,828.363 374.629,808.147 375.189,808.745 375.748,806.857 376.307,821.118 376.866,818.328 377.426,832.832 377.985,812.27 378.544,841.979 379.103,855.373 379.663,849.968 380.222,848.903 380.781,862.78 381.34,858.194 381.9,871.578 382.459,816.603 383.018,832.275 383.577,814.158 384.137,814.167 384.696,825.259 385.255,829.278 385.814,826.824 386.374,823.341 386.933,824.248 387.492,825.065 388.051,825.314 388.611,792.723 389.17,808.454 389.729,810.012 390.288,792.731 390.848,776.469 391.407,777.743 391.966,795.201 392.525,811.157 393.085,812.064 393.644,794.397 394.203,792.794 394.762,805.115 395.322,804.24 395.881,768.842 396.44,769.931 396.999,769.184 397.559,784.228 398.118,720.049 398.677,739.152 399.236,757.493 399.796,775.161 400.355,774.682 400.914,817.362 401.473,831.311 402.033,833.075 402.592,846.15 403.151,844.353 403.71,808.445 404.27,773.624 404.829,806.903 405.388,771.84 405.947,805.147 406.507,800.65 407.066,815.638 407.625,816.863 408.184,799.862 408.744,818.646 409.303,833.659 409.862,878.89 410.421,857.899 410.981,856.07 411.54,851.368 412.099,849.687 412.658,861.945 413.218,828.537 413.777,826.129 414.336,821.347 414.895,835.058 415.455,863.175 416.014,860.994 416.573,820.321 417.132,818.162 417.692,819.455 418.251,835.703 418.81,801.948 419.369,800.548 419.929,798.335 420.488,795.266 421.047,825.027 421.606,808.225 422.166,821.408 422.725,852.494 423.284,861.459 423.843,856.299 424.403,894.569 424.962,889.786 425.521,870.198 426.08,849.204 426.64,826.845 427.199,840.044 427.758,804.179 428.318,767.888 428.877,720.736 429.436,721.513 429.995,738.673 430.555,755.329 431.114,756.946 431.673,758.354 432.232,755.649 432.792,754.634 433.351,818.162 433.91,800.914 434.469,828.412 435.029,858.584 435.588,850.416 436.147,875.215 436.706,833.99 437.266,859.795 437.825,841.521 438.384,898.255 438.943,924.043 439.503,917.387 440.062,908.413 440.621,888.171 441.18,879.809 441.74,870.597 442.299,883.941 442.858,875.534 443.417,836.506 443.977,847.471 444.536,857.297 445.095,833.899 445.654,781.518 446.214,777.563 446.773,759.707 447.332,759.242 447.891,745.718 448.451,731.637 449.01,780.645 449.569,793.861 450.128,810.393 450.688,825.706 451.247,836.705 451.806,830.891 452.365,842.164 452.925,854.271 453.484,847.73 454.043,874.778 454.602,882.881 455.162,862.462 455.721,872.099 456.28,865.135 456.839,829.128 457.399,821.874 457.958,798.81 458.517,798.823 459.076,845.375 459.636,857.192 460.195,847.616 460.754,841.482 461.313,822.17 461.873,819.689 462.432,847.664 462.991,859.191 463.55,802.73 464.11,772.661 464.669,772.723 465.228,741.156 465.787,741.857 466.347,708.813 466.906,726.779 467.465,678.28 468.024,686.839 468.584,675.773 469.143,710.493 469.702,731.099 470.261,719.056 470.821,738.51 471.38,740.925 471.939,757.612 472.498,721.351 473.058,705.688 473.617,707.493 474.176,713.545 474.735,715.501 475.295,749.935 475.854,750.918 476.413,767.134 476.972,783.046 477.532,767.644 478.091,767.976 478.65,752.328 479.209,731.858 479.769,700.691 480.328,683.219 480.887,732.743 481.446,718.022 482.006,699.719 482.565,702.885 483.124,704.236 483.683,722.828 484.243,741.706 484.802,727.491 485.361,698.223 485.92,700.139 486.48,674.498 487.039,680.332 487.598,699.613 488.157,733.423 488.717,751.404 489.276,734.473 489.835,719.994 490.394,672.399 490.954,659.241 491.513,648.187 492.072,685.002 492.631,703.394 493.191,736.796 493.75,753.073 494.309,749.774 494.868,734.594 495.428,733.705 495.987,732.837 496.546,699.191 497.105,686.762 497.665,689.077 498.224,692.69 498.783,696.261 499.342,699.409 499.902,716.032 500.461,717.109 501.02,735.403 501.579,735.87 502.139,700.183 502.698,718.714 503.257,687.003 503.816,688.26 504.376,692.815 504.935,678.401 505.494,665.147 506.053,682.503 506.613,700.725 507.172,667.511 507.731,704.326 508.29,721.358 508.85,706.478 509.409,712.883 509.968,714.938 510.527,717.347 511.087,765.567 511.646,779.614 512.205,762.294 512.764,808.377 513.324,802.981 513.883,800.279 514.442,750.428 515.001,748.062 515.561,730.78 516.12,748.706 516.679,744.661 517.238,778.196 517.798,726.123 518.357,762.219 518.916,775.866 519.475,756.046 520.035,768.757 520.594,763.877 521.153,777.929 521.712,756.124 522.272,736.921 522.831,751.546 523.39,765.953 523.949,777.857 524.509,791.27 525.068,818.605 525.627,814.461 526.186,807.959 526.746,758.51 527.305,789.451 527.864,803.252 528.423,766.149 528.983,747.619 529.542,727.829 530.101,725.368 530.66,708.801 531.22,707.014 531.779,677.072 532.338,663.652 532.897,683.327 533.457,717.77 534.016,715.009 534.575,731.333 535.134,763.192 535.694,726.785 536.253,728.14 536.812,729.55 537.371,711.393 537.931,694.089 538.49,695.648 539.049,713.074 539.608,727.2 540.168,711.416 540.727,710.752 541.286,696.608 541.845,684.781 542.405,703.311 542.964,706.093 543.523,673.519 544.082,692.485 544.642,674.508 545.201,676.082 545.76,679.013 546.319,665.209 546.879,705.221 547.438,674.043 547.997,676.122 548.556,680.112 549.116,684.066 549.675,671.63 550.234,656.921 550.793,680.327 551.353,713.058 551.912,711.484 552.471,726.391 553.031,727.781 553.59,725.269 554.149,707.474 554.708,679.884 555.268,680.829 555.827,717.536 556.386,717.09 556.945,748.525 557.505,781.592 558.064,761.947 558.623,779.749 559.182,823.381 559.742,801.579 560.301,797.518 560.86,773.32 561.419,767.03 561.979,748.06 562.538,748.045 563.097,750.081 563.656,733.78 564.216,701.195 564.775,734.725 565.334,750.553 565.893,718.152 566.453,716.444 567.012,715.337 567.571,685.368 568.13,688.434 568.69,689.412 569.249,690.853 569.808,674.612 570.367,724.127 570.927,725.398 571.486,758.048 572.045,739.216 572.604,769.487 573.164,765.868 573.723,776.905 574.282,757.138 574.841,804.166 575.401,753.278 575.96,764.357 576.519,729.331 577.078,731.931 577.638,719.1 578.197,769.678 578.756,800.113 579.315,763.522 579.875,745.848 580.434,728.704 580.993,725.718 581.552,686.961 582.112,668.03 582.671,653.616 583.23,656.673 583.789,689.311 584.349,687.146 584.908,701.221 585.467,700.952 586.026,670.961 586.586,656.302 587.145,678.116 587.704,680.766 588.263,667.407 588.823,688.524 589.382,721.628 589.941,783.411 590.5,779.563 591.06,759.033 591.619,774.117 592.178,815.056 592.737,812.469 593.297,805.343 593.856,814.806 594.415,824.4 594.974,867.16 595.534,923.419 596.093,862.962 596.652,820.088 597.211,780.029 597.771,758.805 598.33,738.604 598.889,735.091 599.448,715.254 600.008,713.325 600.567,728.301 601.126,711.129 601.685,693.585 602.245,595.92 602.804,603.485 603.363,625.198 603.922,641.644 604.482,643.951 605.041,629.209 605.6,613.284 606.159,633.52 606.719,637.201 607.278,638.981 607.837,642.242 608.396,677.089 608.956,662.968 609.515,619.204 610.074,622.543 610.633,644.897 611.193,652.032 611.752,657.267 612.311,673.294 612.87,693.894 613.43,693.998 613.989,681.175 614.548,681.63 615.107,665.963 615.667,668.027 616.226,652.844 616.785,658.08 617.344,662.378 617.904,666.901 618.463,652.681 619.022,636.317 619.581,655.832 620.141,658.764 620.7,643.323 621.259,633.191 621.818,618.016 622.378,641.234 622.937,643.462 623.496,685.434 624.055,736.128 624.615,685.868 625.174,703.765 625.733,704.071 626.292,704.39 626.852,689.383 627.411,687.441 627.97,654.897 628.529,689.058 629.089,640.982 629.648,630.825 630.207,652.36 630.766,688.923 631.326,655.062 631.885,675.016 632.444,679.274 633.003,710.683 633.563,759.093 634.122,769.445 634.681,752.749 635.24,766.077 635.8,749.289 636.359,778.454 636.918,773.367 637.477,817.285 638.037,828.024 638.596,821.094 639.155,814.512 639.714,854.056 640.274,845.275 640.833,869.514 641.392,861.414 641.951,842.318 642.511,837.599 643.07,829.581 643.629,824.058 644.188,850.357 644.748,826.618 645.307,802.916 645.866,799.902 646.425,761.512 646.985,745.157 647.544,743.007 648.103,769.631 648.662,749.83 649.222,744.089 649.781,754.793 650.34,801.751 650.899,813.341 651.459,825.665 652.018,786.091 652.577,794.965 653.136,755.373 653.696,768.089 654.255,714.649 654.814,698.532 655.373,684.331 655.933,683.294 656.492,666.238 657.051,698.613 657.61,649.602 658.17,633.319 658.729,651.354 659.288,651.901 659.847,702.215 660.407,705.145 660.966,703.35 661.525,703.381 662.084,719.034 662.644,684.537 663.203,654.101 663.762,656.267 664.321,690.216 664.881,691.98 665.44,709.605 665.999,725.608 666.558,739.126 667.118,734.633 667.677,749.491 668.236,767.294 668.795,798.073 669.355,793.152 669.914,785.71 670.473,780.842 671.032,792.06 671.592,754.382 672.151,734.697 672.71,744.773 673.269,742.818 673.829,739.001 674.388,720.478 674.947,719.698 675.506,701.282 676.066,698.912 676.625,699.244 677.184,700.555 677.743,667.855 678.303,664.929 678.862,664.176 679.421,649.133 679.981,648.104 680.54,651.86 681.099,620.185 681.658,639.327 682.218,609.932 682.777,581.131 683.336,654.943 683.895,659.47 684.455,678.28 685.014,678.62 685.573,697.043 686.132,682.643 686.692,666.533 687.251,649.999 687.81,654.325 688.369,673.211 688.929,707.1 689.488,709.111 690.047,707.942 690.606,672.688 691.166,643.672 691.725,631.012 692.284,637.172 692.843,622.298 693.403,625.325 693.962,646.213 694.521,634.831 695.08,671.03 695.64,706.089 696.199,722.452 696.758,689.686 697.317,689.355 697.877,689.107 698.436,687.546 698.995,701.922 699.554,698.939 700.114,715.15 700.673,745.627 701.232,723.534 701.791,721.9 702.351,721.35 702.91,721.335 703.469,736.372 704.028,734.684 704.588,716.571 705.147,769.373 705.706,749.115 706.265,730.13 706.825,761.161 707.384,793.47 707.943,788.963 708.502,782.748 709.062,790.3 709.621,756.481 710.18,722.711 710.739,735.056 711.299,752.933 711.858,751.508 712.417,734.119 712.976,764.002 713.536,760.319 714.095,768.825 714.654,729.974 715.213,711.579 715.773,709.185 716.332,722.621 716.891,738.163 717.45,717.403 718.01,666.659 718.569,686.185 719.128,691.02 719.687,724.476 720.247,740.963 720.806,709.415 721.365,709.853 721.924,713.982 722.484,695.183 723.043,661.124 723.602,647.365 724.161,649.183 724.721,656.045 725.28,657.211 725.839,673.84 726.398,677.217 726.958,650.374 727.517,634.193 728.076,638.128 728.635,607.879 729.195,612.981 729.754,617.224 730.313,638.055 730.872,608.662 731.432,595.904 731.991,616.281 732.55,623.296 733.109,627.871 733.669,584.527 734.228,589.732 734.787,566.266 735.346,573.988 735.906,577.817 736.465,565.881 737.024,587.558 737.583,595.089 738.143,601.523 738.702,576.359 739.261,568.034 739.82,605.954 740.38,609.573 740.939,597.632 741.498,604.775 742.057,609.69 742.617,616.877 743.176,635.463 743.735,638.723 744.294,658.499 744.854,645.845 745.413,651.186 745.972,670.146 746.531,657.915 747.091,639.982 747.65,638.884 748.209,627.784 748.768,632.419 749.328,657.264 749.887,596.444 750.446,619.872 751.005,641.673 751.565,645.928 752.124,660.812 752.683,647.155 753.242,618.597 753.802,607.144 754.361,594.253 754.92,565.665 755.479,587.685 756.039,610.178 756.598,602.321 757.157,623.333 757.716,620.889 758.276,624.812 758.835,597.943 759.394,650.837 759.953,636.987 760.513,621.506 761.072,626.141 761.631,613.592 762.19,634.836 762.75,618.509 763.309,623.139 763.868,625.94 764.427,645.06 764.987,665.247 765.546,670.288 766.105,669.999 766.664,688.117 767.224,673.364 767.783,689.256 768.342,703.794 768.901,699.42 769.461,715.64 770.02,731.321 770.579,742.498 771.138,726.422 771.698,725.243 772.257,724.821 772.816,705.116 773.375,737.625 773.935,764.51 774.494,713.517 775.053,715.055 775.612,681.04 776.172,676.111 776.731,659.263 777.29,664.297 777.849,666.373 778.409,647.899 778.968,665.954 779.527,685.139 780.086,717.034 780.646,701.355 781.205,685.647 781.764,706.739 782.323,721.389 782.883,721.301 783.442,738.006 784.001,780.757 784.56,777.409 785.12,787.925 785.679,752.478 786.238,762.777 786.797,772.082 787.357,798.205 787.916,796.257 788.475,790.664 789.034,785.142 789.594,765.445 790.153,810.835 790.712,803.582 791.271,812.206 791.831,803.264 792.39,797.62 792.949,791.852 793.508,733.497 794.068,728.992 794.627,707.489 795.186,703.078 795.745,722.398 796.305,685.538 796.864,669.6 797.423,687.718 797.982,686.129 798.542,733.171 799.101,714.317 799.66,730.968 800.219,741.898 800.779,723.413 801.338,686.895 801.897,701.954 802.456,699.333 803.016,729.343 803.575,746.148 804.134,743.208 804.693,739.064 805.253,766.796 805.812,762.674 806.371,792.214 806.931,772.056 807.49,753.428 808.049,718.191 808.608,717.819 809.168,694.771 809.727,694.094 810.286,660.246 810.845,641.535 811.405,625.186 811.964,594.152 812.523,618.201 813.082,638.292 813.642,642.36 814.201,643.486 814.76,628.39 815.319,644.205 815.879,660.282 816.438,663.956 816.997,683.239 817.556,697.591 818.116,694.744 818.675,676.986 819.234,644.599 819.793,628.317 820.353,634.098 820.912,635.733 821.471,654.734 822.03,719.723 822.59,735.427 823.149,718.302 823.708,683.082 824.267,698.526 824.827,713.361 825.386,715.696 825.945,716.377 826.504,730.83 827.064,713.891 827.623,679.797 828.182,678.796 828.741,679.677 829.301,663.539 829.86,666.542 830.419,687.476 830.978,703.475 831.538,717.993 832.097,714.112 832.656,696.233 833.215,692.308 833.775,689.466 834.334,687.888 834.893,719.37 835.452,733.733 836.012,730.402 836.571,741.466 837.13,736.655 837.689,730.588 838.249,744.597 838.808,742.712 839.367,754.859 839.926,751.106 840.486,713.318 841.045,711.065 841.604,743.745 842.163,742.252 842.723,738.451 843.282,734.856 843.841,701.809 844.4,718.873 844.96,713.557 845.519,709.996 846.078,726.352 846.637,759.976 847.197,741.076 847.756,720.422 848.315,736.738 848.874,733.79 849.434,734.577 849.993,730.193 850.552,730.277 851.111,726.337 851.671,723.467 852.23,723.045 852.789,742.347 853.348,757.621 853.908,773.687 854.467,802.277 855.026,780.258 855.585,788.423 856.145,799.514 856.704,792.417 857.263,758.418 857.822,705.087 858.382,702.999 858.941,685.733 859.5,681.673 860.059,681.919 860.619,683.537 861.178,688.336 861.737,702.307 862.296,681.912 862.856,681.444 863.415,667.976 863.974,686.566 864.533,686.204 865.093,670.274 865.652,669.213 866.211,671.568 866.77,672.092 867.33,705.322 867.889,670.59 868.448,651.519 869.007,667.636 869.567,618.19 870.126,605.684 870.685,596.767 871.244,644.715 871.804,676.832 872.363,662.673 872.922,662.613 873.481,645.513 874.041,648.313 874.6,648.293 875.159,680.089 875.718,713.1 876.278,693.702 876.837,710.554 877.396,693.505 877.955,710.76 878.515,695.745 879.074,695.854 879.633,711.674 880.192,646.363 880.752,666.998 881.311,666.514 881.87,714.02 882.429,679.255 882.989,712.232 883.548,724.704 884.107,719.985 884.666,719.214 885.226,733.356 885.785,684.623 886.344,633.678 886.903,619.52 887.463,622.157 888.022,643.122 888.581,692.4 889.14,675.924 889.7,694.116 890.259,759.244 890.818,724.343 891.377,740.56 891.937,721.175 892.496,720.051 893.055,713.984 893.614,712.98 894.174,712.303 894.733,724.25 895.292,707.606 895.851,741.255 896.411,720.838 896.97,737.439 897.529,779.892 898.088,791.661 898.648,820.153 899.207,813.881 899.766,791.485 900.325,771.669 900.885,782.298 901.444,776.87 902.003,776.137 902.562,790.458 903.122,798.869 903.681,777.849 904.24,771.157 904.799,730.916 905.359,710.142 905.918,672.651 906.477,657.079 907.036,656.855 907.596,662.508 908.155,665.111 908.714,649.437 909.273,663.835 909.833,667.439 910.392,666.835 910.951,666.418 911.51,669.773 912.07,688.957 912.629,639.773 913.188,626.532 913.747,615.526 914.307,621.274 914.866,606.515 915.425,593.357 915.984,628.432 916.544,646.56 917.103,643.983 917.662,659.558 918.221,661.784 918.781,692.41 919.34,676.418 919.899,662.224 920.458,631.637 921.018,654.761 921.577,606.336 922.136,627.073 922.695,616.112 923.255,620.858 923.814,644.09 924.373,610.246 924.932,635.294 925.492,639.139 926.051,626.135 926.61,660.499 927.169,644.437 927.729,645.676 928.288,631.569 928.847,648.024 929.406,632.555 929.966,631.805 930.525,622.41 931.084,658.737 931.644,661.015 932.203,680.497 932.762,697.65 933.321,715.113 933.881,717.836 934.44,736.823 934.999,719.985 935.558,716.566 936.118,715.264 936.677,713.274 937.236,699.922 937.795,665.593 938.355,636.077 938.914,637.925 939.473,626.163 940.032,614.527 940.592,601.55 941.151,576.529 941.71,586.744 942.269,606.903 942.829,590.754 943.388,565.102 943.947,619.179 944.506,607.994 945.066,663.913 945.625,665.298 946.184,648.638 946.743,621.22 947.303,643.999 947.862,629.377 948.421,631.904 948.98,651.054 949.54,635.113 950.099,638.299 950.658,625.805 951.217,632.093 951.777,618.534 952.336,608.227 952.895,625.969 953.454,627.894 954.014,615.015 954.573,618.331 955.132,607.232 955.691,598.356 956.251,603.454 956.81,621.509 957.369,625.519 957.928,627.933 958.488,648.756 959.047,617.199 959.606,623.709 960.165,644.398 960.725,678.831 961.284,660.292 961.843,678.333 962.402,691.774 962.962,712.291 963.521,728.828 964.08,742.15 964.639,736.171 965.199,737.417 965.758,752.252 966.317,748.395 966.876,725.061 967.436,673.887 967.995,676.836 968.554,681.481 969.113,635.611 969.673,639.325 970.232,658.578 970.791,677.326 971.35,663.101 971.91,664.685 972.469,695.157 973.028,744.363 973.587,738.509 974.147,750.412 974.706,779.056 975.265,773.422 975.824,737.975 976.384,671.431 976.943,656.68 977.502,704.961 978.061,721.175 978.621,703.695 979.18,703.021 979.739,719.846 980.298,733.051 980.858,743.43 981.417,741.402 981.976,741.748 982.535,738.637 983.095,737.922 983.654,718.378 984.213,731.97 984.772,763.974 985.332,759.815 985.891,769.681 986.45,717.832 987.009,729.672 987.569,711.306 988.128,723.925 988.687,725.264 989.246,755.909 989.806,770.664 990.365,762.846 990.924,741.469 991.483,755.37 992.043,767.475 992.602,761.861 993.161,723.781 993.72,722.987 994.28,755.024 994.839,753.794 995.398,767.826 995.957,781.518 996.517,778.756 997.076,756.39 997.635,752.958 998.194,748.211 998.754,781.13 999.313,774.817 999.872,754.359 1000.43,749.256 1000.99,746.352 1001.55,726.364 1002.11,708.384 1002.67,756.397 1003.23,720.119 1003.79,683.568 1004.35,680.71 1004.91,667.799 1005.46,683.543 1006.02,683.524 1006.58,670.376 1007.14,686.388 1007.7,653.579 1008.26,654.67 1008.82,687.759 1009.38,667.919 1009.94,719.354 1010.5,681.625 1011.06,664.553 1011.62,650.314 1012.18,618.266 1012.73,620.857 1013.29,608.971 1013.85,612.738 1014.41,633.133 1014.97,602.06 1015.53,544.699 1016.09,601.102 1016.65,607.662 1017.21,615.54 1017.77,588.14 1018.33,576.272 1018.89,630.341 1019.45,646.573 1020.01,650.56 1020.56,650.461 1021.12,671.879 1021.68,625.259 1022.24,596.361 1022.8,630.917 1023.36,634.117 1023.92,652.786 1024.48,633.677 1025.04,601.43 1025.6,588.481 1026.16,575.481 1026.72,597.039 1027.28,585.92 1027.83,588.777 1028.39,609.462 1028.95,585.546 1029.51,595.996 1030.07,616.422 1030.63,620.028 1031.19,608.064 1031.75,626.817 1032.31,632.937 1032.87,648.661 1033.43,663.784 1033.99,700.571 1034.55,699.663 1035.1,700.024 1035.66,717.363 1036.22,716.341 1036.78,730.111 1037.34,727.167 1037.9,709.713 1038.46,693.986 1039.02,692.314 1039.58,742.349 1040.14,725.74 1040.7,707.77 1041.26,720.649 1041.82,702.649 1042.38,716.079 1042.93,703.878 1043.49,703.137 1044.05,703.351 1044.61,688.748 1045.17,685.679 1045.73,688.125 1046.29,659.15 1046.85,642.564 1047.41,644.338 1047.97,647.003 1048.53,652.414 1049.09,669.059 1049.65,635.603 1050.2,610.828 1050.76,611.737 1051.32,629.341 1051.88,650.529 1052.44,653.894 1053,672.108 1053.56,672.8 1054.12,673.983 1054.68,659.71 1055.24,694.606 1055.8,683.33 1056.36,650.623 1056.92,651.891 1057.48,636.248 1058.03,622.091 1058.59,641.936 1059.15,644.598 1059.71,646.851 1060.27,664.414 1060.83,679.688 1061.39,699.29 1061.95,734.094 1062.51,730.592 1063.07,722.886 1063.63,704.979 1064.19,687.636 1064.75,733.975 1065.3,736.398 1065.86,749.029 1066.42,760.134 1066.98,774.613 1067.54,734.732 1068.1,731.701 1068.66,761.029 1069.22,756.88 1069.78,749.943 1070.34,759.194 1070.9,789.06 1071.46,767.136 1072.02,745.129 1072.57,756.403 1073.13,767.5 1073.69,781.917 1074.25,761.7 1074.81,755.164 1075.37,770.028 1075.93,778.564 1076.49,771.662 1077.05,749.868 1077.61,760.565 1078.17,755.033 1078.73,766.721 1079.29,776.748 1079.85,738.097 1080.4,751.96 1080.96,764.907 1081.52,725.869 1082.08,657.219 1082.64,689.573 1083.2,740.381 1083.76,718.252 1084.32,745.274 1084.88,726.01 1085.44,770.794 1086,782.656 1086.56,778.544 1087.12,740.409 1087.67,771.041 1088.23,780.741 1088.79,822.903 1089.35,813.878 1089.91,826.355 1090.47,821.822 1091.03,845.263 1091.59,773.437 1092.15,769.734 1092.71,794.783 1093.27,769.544 1093.83,766.46 1094.39,727.325 1094.94,723.889 1095.5,687.698 1096.06,685.213 1096.62,681.918 1097.18,687.516 1097.74,720.059 1098.3,719.35 1098.86,702.97 1099.42,687.291 1099.98,686.977 1100.54,689.576 1101.1,690.624 1101.66,724.578 1102.22,691.586 1102.77,692.095 1103.33,708.853 1103.89,726.317 1104.45,757.273 1105.01,768.923 1105.57,767.97 1106.13,752.707 1106.69,737.357 1107.25,718.097 1107.81,699.346 1108.37,695.923 1108.93,693.745 1109.49,609.745 1110.04,578.685 1110.6,582.383 1111.16,589.146 1111.72,593.116 1112.28,599.512 1112.84,583.052 1113.4,590.758 1113.96,612.274 1114.52,616.698 1115.08,653.038 1115.64,635.247 1116.2,620.27 1116.76,637.626 1117.31,640.783 1117.87,644.073 1118.43,647.841 1118.99,631.009 1119.55,652.123 1120.11,683.168 1120.67,631.869 1121.23,616.918 1121.79,622.912 1122.35,623.986 1122.91,609.473 1123.47,614.476 1124.03,669.308 1124.59,655.867 1125.14,675.013 1125.7,693.385 1126.26,693.417 1126.82,705.411 1127.38,717.608 1127.94,714.049 1128.5,696.219 1129.06,711.885 1129.62,696.311 1130.18,723.695 1130.74,707.414 1131.3,693.534 1131.86,706.724 1132.41,688.361 1132.97,685.745 1133.53,686.141 1134.09,687.819 1134.65,685.417 1135.21,704.391 1135.77,719.508 1136.33,703.118 1136.89,731.792 1137.45,710.518 1138.01,675.354 1138.57,692.135 1139.13,723.004 1139.68,719.373 1140.24,734.55 1140.8,716.114 1141.36,696.923 1141.92,679.714 1142.48,692.989 1143.04,659.469 1143.6,697.032 1144.16,681.094 1144.72,680.384 1145.28,681.551 1145.84,696.147 1146.4,681.386 1146.96,649.98 1147.51,652.106 1148.07,634.776 1148.63,636.072 1149.19,623.164 1149.75,627.903 1150.31,645.913 1150.87,628.47 1151.43,631.963 1151.99,620.392 1152.55,607.003 1153.11,596.014 1153.67,551.934 1154.23,573.032 1154.78,591.969 1155.34,580.949 1155.9,571.98 1156.46,546.978 1157.02,538.132 1157.58,528.626 1158.14,535.117 1158.7,562.049 1159.26,554.051 1159.82,593.742 1160.38,619.842 1160.94,624.908 1161.5,642.76 1162.05,678.191 1162.61,684.635 1163.17,686.313 1163.73,700.299 1164.29,683.548 1164.85,730.016 1165.41,792.366 1165.97,804.031 1166.53,815.642 1167.09,729.906 1167.65,696.6 1168.21,729.373 1168.77,762.739 1169.33,758.331 1169.88,771.406 1170.44,768.888 1171,780.63 1171.56,796.903 1172.12,790.841 1172.68,785.122 1173.24,767.77 1173.8,732.493 1174.36,711.926 1174.92,708.646 1175.48,726.949 1176.04,741.689 1176.6,721.655 1177.15,704.724 1177.71,766.691 1178.27,744.269 1178.83,759.782 1179.39,749.9 1179.95,724.143 1180.51,757.425 1181.07,751.661 1181.63,730.092 1182.19,730.322 1182.75,710.596 1183.31,693.117 1183.87,710.141 1184.43,691.103 1184.98,691.95 1185.54,674.617 1186.1,689.56 1186.66,689.207 1187.22,720.217 1187.78,716.029 1188.34,696.989 1188.9,713.082 1189.46,712.797 1190.02,713.448 1190.58,695.349 1191.14,676.456 1191.7,673.765 1192.25,642.451 1192.81,663.394 1193.37,676.707 1193.93,663.995 1194.49,664.599 1195.05,664.622 1195.61,678.775 1196.17,680.284 1196.73,648.388 1197.29,698.015 1197.85,697.289 1198.41,694.88 1198.97,695.635 1199.52,712.26 1200.08,712.354 1200.64,712.713 1201.2,708.54 1201.76,759.26 1202.32,740.403 1202.88,717.15 1203.44,681.316 1204,664.702 1204.56,620.015 1205.12,640.207 1205.68,610.245 1206.24,643.817 1206.8,626.813 1207.35,662.883 1207.91,716.651 1208.47,747.182 1209.03,728.108 1209.59,707.961 1210.15,656.791 1210.71,642.596 1211.27,661.019 1211.83,664.935 1212.39,667.943 1212.95,667.4 1213.51,682.369 1214.07,682.169 1214.62,682.298 1215.18,650.546 1215.74,669.187 1216.3,655.071 1216.86,623.437 1217.42,595.436 1217.98,585.012 1218.54,606.395 1219.1,593.43 1219.66,595.56 1220.22,632.06 1220.78,630.278 1221.34,631.63 1221.89,665.957 1222.45,683.324 1223.01,699.511 1223.57,700.317 1224.13,702.318 1224.69,716.913 1225.25,716.866 1225.81,728.137 1226.37,740.091 1226.93,706.871 1227.49,703.306 1228.05,670.115 1228.61,687.585 1229.17,654.621 1229.72,691.295 1230.28,676.948 1230.84,676.955 1231.4,680.062 1231.96,695.843 1232.52,649.175 1233.08,669.388 1233.64,653.817 1234.2,688.272 1234.76,706.308 1235.32,735.225 1235.88,747.22 1236.44,730.194 1236.99,759.139 1237.55,770.845 1238.11,750.338 1238.67,743.929 1239.23,740.677 1239.79,732.516 1240.35,745.702 1240.91,758.442 1241.47,738.671 1242.03,721.214 1242.59,718.702 1243.15,732.39 1243.71,728.797 1244.26,726.718 1244.82,722.839 1245.38,687.16 1245.94,672.235 1246.5,656.467 1247.06,659.799 1247.62,660.351 1248.18,676.94 1248.74,679.174 1249.3,678.559 1249.86,661.954 1250.42,677.889 1250.98,663.155 1251.54,666.466 1252.09,685.666 1252.65,687.691 1253.21,669.643 1253.77,674.279 1254.33,672.242 1254.89,685.719 1255.45,656.341 1256.01,675.315 1256.57,692.462 1257.13,707.82 1257.69,703.838 1258.25,718.832 1258.81,735.816 1259.36,718.514 1259.92,703.588 1260.48,686.392 1261.04,686.501 1261.6,704.097 1262.16,701.423 1262.72,701.833 1263.28,717.284 1263.84,731.719 1264.4,712.567 1264.96,677.664 1265.52,663.15 1266.08,680.493 1266.63,715.014 1267.19,682.045 1267.75,697.667 1268.31,680.894 1268.87,681.524 1269.43,699.385 1269.99,729.803 1270.55,678.916 1271.11,696.098 1271.67,680.274 1272.23,660.923 1272.79,649.094 1273.35,712.964 1273.91,728.23 1274.46,723.672 1275.02,703.637 1275.58,717.624 1276.14,712.632 1276.7,697.391 1277.26,696.907 1277.82,683.327 1278.38,684.75 1278.94,701.391 1279.5,667.288 1280.06,650.387 1280.62,618.675 1281.18,620.866 1281.73,658.803 1282.29,710.79 1282.85,722.09 1283.41,719.406 1283.97,750.397 1284.53,730.793 1285.09,695.838 1285.65,710.223 1286.21,725.612 1286.77,626.653 1287.33,615.413 1287.89,653.115 1288.45,655.832 1289,658.023 1289.56,662.434 1290.12,680.205 1290.68,678.782 1291.24,675.786 1291.8,677.942 1292.36,677.075 1292.92,661.515 1293.48,648.836 1294.04,669.397 1294.6,656.627 1295.16,657.663 1295.72,675.605 1296.28,643.963 1296.83,661.058 1297.39,677.945 1297.95,675.385 1298.51,692.614 1299.07,693.899 1299.63,706.8 1300.19,704.335 1300.75,687.71 1301.31,670.237 1301.87,673.156 1302.43,612.293 1302.99,630.593 1303.55,605.308 1304.1,609.008 1304.66,614.925 1305.22,617.624 1305.78,672.575 1306.34,672.116 1306.9,656.503 1307.46,643.531 1308.02,645.006 1308.58,650.755 1309.14,651.167 1309.7,636.817 1310.26,659.198 1310.82,677.123 1311.38,629.382 1311.93,682.844 1312.49,670.469 1313.05,656.738 1313.61,643.202 1314.17,657.946 1314.73,691.808 1315.29,675.186 1315.85,673.331 1316.41,686.052 1316.97,669.014 1317.53,668.892 1318.09,703.531 1318.65,719.443 1319.2,763.104 1319.76,744.385 1320.32,724.538 1320.88,724.562 1321.44,706.881 1322,700.811 1322.56,698.385 1323.12,700.014 1323.68,701.131 1324.24,685.373 1324.8,654.838 1325.36,626.388 1325.92,615.787 1326.47,637.906 1327.03,637.613 1327.59,690.519 1328.15,671.765 1328.71,691.395 1329.27,674.184 1329.83,691.337 1330.39,641.01 1330.95,640.812 1331.51,630.406 1332.07,666.855 1332.63,668.165 1333.19,638.796 1333.75,640.388 1334.3,638.358 1334.86,638.469 1335.42,655.907 1335.98,722.8 1336.54,722.225 1337.1,722.104 1337.66,735.352 1338.22,749.98 1338.78,778.336 1339.34,774.969 1339.9,770.669 1340.46,749.522 1341.02,746.854 1341.57,760.576 1342.13,787.541 1342.69,797.725 1343.25,791.915 1343.81,784.952 1344.37,779.309 1344.93,758.057 1345.49,738.552 1346.05,718.927 1346.61,685.649 1347.17,671.093 1347.73,640.387 1348.29,660.254 1348.84,628.594 1349.4,649.919 1349.96,685.092 1350.52,668.043 1351.08,686.28 1351.64,734.697 1352.2,712.836 1352.76,710.75 1353.32,693.881 1353.88,708.605 1354.44,703.879 1355,704.101 1355.56,732.678 1356.12,713.831 1356.67,695.397 1357.23,693.413 1357.79,706.734 1358.35,684.84 1358.91,699.926 1359.47,665.761 1360.03,699.418 1360.59,729.666 1361.15,745.418 1361.71,710.363 1362.27,709.02 1362.83,675.811 1363.39,708.697 1363.94,659.962 1364.5,675.07 1365.06,673.222 1365.62,642.803 1366.18,629.643 1366.74,615.458 1367.3,652.796 1367.86,640.185 1368.42,620.406 1368.98,622.87 1369.54,638.088 1370.1,623.567 1370.66,609.982 1371.21,617.733 1371.77,637.381 1372.33,626.444 1372.89,663.154 1373.45,634.17 1374.01,619.612 1374.57,641.475 1375.13,666.897 1375.69,648.817 1376.25,648.61 1376.81,646.803 1377.37,649.9 1377.93,637.366 1378.49,686.478 1379.04,717.263 1379.6,702.193 1380.16,681.895 1380.72,664.051 1381.28,693.988 1381.84,710.882 1382.4,676.552 1382.96,706.946 1383.52,686.508 1384.08,653.851 1384.64,688.873 1385.2,639.449 1385.76,607.958 1386.31,614.187 1386.87,603.274 1387.43,608.359 1387.99,591.424 1388.55,631.572 1389.11,600.054 1389.67,588.609 1390.23,595.447 1390.79,597.67 1391.35,586.398 1391.91,606.935 1392.47,612.718 1393.03,637.718 1393.58,656.66 1394.14,674.243 1394.7,673.174 1395.26,670.369 1395.82,671.312 1396.38,660.116 1396.94,665.177 1397.5,701.976 1398.06,701.312 1398.62,699.006 1399.18,653.391 1399.74,637.343 1400.3,624.591 1400.86,628.683 1401.41,612.534 1401.97,567.606 1402.53,542.25 1403.09,563.512 1403.65,635.462 1404.21,636.944 1404.77,639.468 1405.33,605.373 1405.89,608.369 1406.45,581.724 1407.01,605.765 1407.57,578.485 1408.13,582.093 1408.68,590.696 1409.24,597.687 1409.8,603.247 1410.36,606.644 1410.92,611.169 1411.48,618.283 1412.04,620.816 1412.6,655.708 1413.16,673.017 1413.72,674.33 1414.28,694.004 1414.84,660.111 1415.4,678.407 1415.95,660.79 1416.51,663.985 1417.07,730.233 1417.63,778.805 1418.19,758.229 1418.75,775.817 1419.31,790.935 1419.87,803.562 1420.43,797.138 1420.99,773.15 1421.55,752.283 1422.11,765.624 1422.67,745.917 1423.23,755.544 1423.78,716.581 1424.34,696.457 1424.9,731.421 1425.46,715.108 1426.02,712.352 1426.58,744.626 1427.14,754.597 1427.7,753.415 1428.26,749.602 1428.82,744.717 1429.38,742.16 1429.94,754.332 1430.5,749.346 1431.05,757.831 1431.61,787.128 1432.17,778.094 1432.73,757.188 1433.29,769.523 1433.85,779.027 1434.41,737.373 1434.97,698.488 1435.53,712.902 1436.09,711.293 1436.65,708.952 1437.21,721.807 1437.77,733.77 1438.33,761.343 1438.88,724.111 1439.44,724.474 1440,753.794 1440.56,749.988 1441.12,729.349 1441.68,711.024 1442.24,709.849 1442.8,740.949 1443.36,767.925 1443.92,760.903 1444.48,758.915 1445.04,735.058 1445.6,761.926 1446.15,758.709 1446.71,751.292 1447.27,777.526 1447.83,772.277 1448.39,766.411 1448.95,743.54 1449.51,741.526 1450.07,772.36 1450.63,748.752 1451.19,728.068 1451.75,671.859 1452.31,655.23 1452.87,637.259 1453.42,656.208 1453.98,691.754 1454.54,726.051 1455.1,707.973 1455.66,689.684 1456.22,690.937 1456.78,706.734 1457.34,640.308 1457.9,625.748 1458.46,625.878 1459.02,629.384 1459.58,615.99 1460.14,633.278 1460.7,605.228 1461.25,645.021 1461.81,678.74 1462.37,696.203 1462.93,710.617 1463.49,708.6 1464.05,708.444 1464.61,724.332 1465.17,705.837 1465.73,668.768 1466.29,658.065 1466.85,658.279 1467.41,643.353 1467.97,628.07 1468.52,615.636 1469.08,651.133 1469.64,617.753 1470.2,602.407 1470.76,575.415 1471.32,597.06 1471.88,619.537 1472.44,655.227 1473,654.694 1473.56,691.256 1474.12,692.689 1474.68,694.488 1475.24,712.111 1475.79,713.725 1476.35,711.481 1476.91,710.852 1477.47,740.171 1478.03,739.529 1478.59,703.79 1479.15,686.445 1479.71,668.02 1480.27,668.218 1480.83,669.656 1481.39,652.436 1481.95,655.134 1482.51,659.121 1483.07,662.218 1483.62,647.648 1484.18,631.812 1484.74,650.809 1485.3,665.839 1485.86,668.403 1486.42,654.009 1486.98,705.109 1487.54,690.441 1488.1,707.054 1488.66,709.004 1489.22,723.324 1489.78,722.163 1490.34,725.284 1490.89,726.54 1491.45,721.192 1492.01,722.291 1492.57,719.069 1493.13,718.969 1493.69,721.257 1494.25,702.472 1494.81,699.252 1495.37,730.367 1495.93,725.75 1496.49,724.128 1497.05,706.66 1497.61,690.998 1498.16,674.87 1498.72,659.028 1499.28,661.446 1499.84,662.228 1500.4,644.439 1500.96,679.553 1501.52,677.198 1502.08,725.519 1502.64,724.343 1503.2,719.18 1503.76,734.872 1504.32,745.968 1504.88,760.645 1505.44,723.799 1505.99,721.339 1506.55,716.574 1507.11,714.751 1507.67,728.772 1508.23,723.643 1508.79,704.869 1509.35,703.747 1509.91,719.417 1510.47,702.193 1511.03,703.053 1511.59,717.072 1512.15,729.486 1512.71,678.326 1513.26,724.978 1513.82,717.884 1514.38,713.961 1514.94,680.941 1515.5,698.546 1516.06,679.518 1516.62,694.256 1517.18,708.329 1517.74,672.5 1518.3,660.574 1518.86,646.198 1519.42,598.013 1519.98,622.269 1520.53,608.743 1521.09,607.749 1521.65,595.972 1522.21,570.862 1522.77,573.462 1523.33,580.15 1523.89,584.525 1524.45,605.949 1525.01,627.759 1525.57,628.582 1526.13,647.68 1526.69,614.383 1527.25,637.744 1527.81,641.524 1528.36,610.631 1528.92,630.48 1529.48,615.475 1530.04,639.651 1530.6,611.499 1531.16,632.697 1531.72,638.259 1532.28,626.09 1532.84,631.342 1533.4,665.808 1533.96,663.668 1534.52,680.761 1535.08,694.962 1535.63,694.774 1536.19,695.914 1536.75,710.315 1537.31,659.109 1537.87,675.349 1538.43,707.751 1538.99,706.973 1539.55,690.676 1540.11,706.245 1540.67,705.119 1541.23,749.746 1541.79,730.46 1542.35,723.966 1542.9,704.32 1543.46,701.746 1544.02,683.758 1544.58,714.617 1545.14,713.12 1545.7,742.489 1546.26,739.639 1546.82,736.124 1547.38,717.157 1547.94,747.695 1548.5,711.267 1549.06,707.218 1549.62,689.911 1550.18,655.019 1550.73,640.229 1551.29,642.027 1551.85,643.247 1552.41,632.424 1552.97,618.824 1553.53,640.599 1554.09,625.465 1554.65,612.779 1555.21,667.171 1555.77,681.948 1556.33,664.805 1556.89,679.568 1557.45,665.355 1558,668.671 1558.56,667.267 1559.12,669.916 1559.68,683.909 1560.24,666.483 1560.8,635.334 1561.36,654.627 1561.92,642.688 1562.48,659.988 1563.04,662.629 1563.6,676.18 1564.16,676.3 1564.72,690.652 1565.28,673.376 1565.83,686.877 1566.39,670.572 1566.95,672.579 1567.51,658.574 1568.07,680.868 1568.63,651.942 1569.19,652.939 1569.75,605.224 1570.31,596.883 1570.87,631.525 1571.43,639.366 1571.99,658.793 1572.55,660.503 1573.1,709.616 1573.66,728.745 1574.22,728.569 1574.78,759.287 1575.34,742.445 1575.9,738.967 1576.46,737.615 1577.02,706.517 1577.58,724.045 1578.14,724.143 1578.7,723.886 1579.26,705.998 1579.82,722.121 1580.37,722.179 1580.93,705.546 1581.49,704.631 1582.05,687.795 1582.61,706.64 1583.17,720.316 1583.73,735.173 1584.29,720.15 1584.85,733.41 1585.41,727.731 1585.97,740.85 1586.53,702.139 1587.09,696.384 1587.65,680.485 1588.2,681.624 1588.76,696.428 1589.32,712.251 1589.88,757.151 1590.44,719.069 1591,753.867 1591.56,732.406 1592.12,697.206 1592.68,662.569 1593.24,662.188 1593.8,664.059 1594.36,665.668 1594.92,699.118 1595.47,699.44 1596.03,713.836 1596.59,694.259 1597.15,692.474 1597.71,689.635 1598.27,687.391 1598.83,703.959 1599.39,735.069 1599.95,716.878 1600.51,695.184 1601.07,710.607 1601.63,676.504 1602.19,647.344 1602.74,681.043 1603.3,664.457 1603.86,630.72 1604.42,653.403 1604.98,670.242 1605.54,669.229 1606.1,704.327 1606.66,738.244 1607.22,735.929 1607.78,748.927 1608.34,713.364 1608.9,709.798 1609.46,658.101 1610.02,690.355 1610.57,643.691 1611.13,628.607 1611.69,662.095 1612.25,646.174 1612.81,631.234 1613.37,633.442 1613.93,671.041 1614.49,624.983 1615.05,630.832 1615.61,630.919 1616.17,615.448 1616.73,620.544 1617.29,624.821 1617.84,647.668 1618.4,635.516 1618.96,639.995 1619.52,642.161 1620.08,629.075 1620.64,664.468 1621.2,637.919 1621.76,640.201 1622.32,643.078 1622.88,627.65 1623.44,618.53 1624,637.265 1624.56,625.661 1625.11,629.743 1625.67,648.795 1626.23,651.043 1626.79,604.302 1627.35,608.16 1627.91,612.995 1628.47,601.056 1629.03,574.035 1629.59,594.013 1630.15,633.46 1630.71,654.898 1631.27,642.622 1631.83,614.049 1632.39,602.725 1632.94,595.242 1633.5,621.957 1634.06,641.789 1634.62,661.305 1635.18,648.184 1635.74,616.288 1636.3,568.557 1636.86,607.346 1637.42,675.01 1637.98,693.343 1638.54,722.905 1639.1,723.716 1639.66,688.375 1640.21,688.958 1640.77,688.174 1641.33,688.676 1641.89,670.532 1642.45,690.136 1643.01,688.402 1643.57,674.275 1644.13,658.595 1644.69,675.561 1645.25,706.128 1645.81,705.264 1646.37,706.355 1646.93,703.78 1647.48,703.557 1648.04,718.67 1648.6,730.33 1649.16,709.645 1649.72,705.989 1650.28,702.065 1650.84,700.821 1651.4,685.608 1651.96,698.418 1652.52,715.619 1653.08,697.341 1653.64,697.481 1654.2,678.899 1654.76,709.484 1655.31,709.786 1655.87,711.313 1656.43,693.27 1656.99,709.358 1657.55,723.197 1658.11,720.084 1658.67,753.527 1659.23,766.548 1659.79,778.389 1660.35,758.105 1660.91,752.835 1661.47,750.914 1662.03,747.976 1662.58,728.689 1663.14,676.965 1663.7,678.736 1664.26,665.999 1664.82,667.867 1665.38,703.472 1665.94,683.754 1666.5,714.397 1667.06,715.744 1667.62,698.344 1668.18,713.701 1668.74,714.018 1669.3,714.612 1669.85,712.71 1670.41,710.381 1670.97,692.531 1671.53,690.219 1672.09,754.585 1672.65,751.099 1673.21,809.704 1673.77,835.765 1674.33,829.467 1674.89,809.752 1675.45,865.253 1676.01,838.974 1676.57,852.79 1677.13,874.841 1677.68,864.35 1678.24,868.866 1678.8,827.42 1679.36,772.217 1679.92,748.122 1680.48,697.323 1681.04,712.33 1681.6,691.764 1682.16,692.306 1682.72,692.535 1683.28,692.44 1683.84,691.39 1684.4,690.026 1684.95,738.537 1685.51,706.7 1686.07,704.704 1686.63,669.404 1687.19,652.547 1687.75,688.55 1688.31,690.719 1688.87,673.362 1689.43,673.735 1689.99,644.891 1690.55,627.728 1691.11,629.918 1691.67,646.109 1692.23,663.147 1692.78,630.949 1693.34,647.862 1693.9,681.556 1694.46,647.411 1695.02,619.249 1695.58,621.431 1696.14,656.202 1696.7,674.648 1697.26,691.632 1697.82,691.874 1698.38,675.369 1698.94,708.961 1699.5,710.192 1700.05,703.289 1700.61,735.978 1701.17,748.539 1701.73,730.29 1702.29,724.297 1702.85,708.443 1703.41,706.469 1703.97,706.127 1704.53,723.808 1705.09,689.608 1705.65,670.007 1706.21,685.064 1706.77,687.074 1707.32,720.176 1707.88,701.455 1708.44,717.59 1709,700.171 1709.56,748.499 1710.12,714.852 1710.68,712.685 1711.24,693.191 1711.8,694.207 1712.36,690.735 1712.92,671.019 1713.48,686.744 1714.04,688.77 1714.6,689.645 1715.15,675.853 1715.71,659.728 1716.27,643.926 1716.83,614.897 1717.39,637.786 1717.95,656.029 1718.51,673.776 1719.07,658.724 1719.63,661.33 1720.19,648.495 1720.75,699.497 1721.31,685.986 1721.87,702.541 1722.42,682.35 1722.98,665.245 1723.54,664.159 1724.1,699.378 1724.66,683.263 1725.22,717.143 1725.78,730.023 1726.34,753.873 1726.9,715.997 1727.46,733.565 1728.02,710.599 1728.58,725.169 1729.14,738.591 1729.69,704.084 1730.25,735.544 1730.81,731.24 1731.37,710.405 1731.93,705.075 1732.49,704.696 1733.05,635.42 1733.61,639.505 1734.17,641.891 1734.73,628.664 1735.29,626.965 1735.85,629.058 1736.41,634.677 1736.97,635.578 1737.52,623.272 1738.08,643.195 1738.64,662.649 1739.2,667.352 1739.76,686.464 1740.32,682.389 1740.88,680.693 1741.44,697.165 1742,697.415 1742.56,696.648 1743.12,698.42 1743.68,694.34 1744.24,677.267 1744.79,663.017 1745.35,664.718 1745.91,681.12 1746.47,682.865 1747.03,681.959 1747.59,698.249 1748.15,712.812 1748.71,728.651 1749.27,709.575 1749.83,707.087 1750.39,707.751 1750.95,661.782 1751.51,613.071 1752.06,615.664 1752.62,621.482 1753.18,669.733 1753.74,668.586 1754.3,668.541 1754.86,655.55 1755.42,674.154 1755.98,657.722 1756.54,658.823 1757.1,629.252 1757.66,664.097 1758.22,651.437 1758.78,653.137 1759.34,671.725 1759.89,706.193 1760.45,723.052 1761.01,705.703 1761.57,706.95 1762.13,659.395 1762.69,648.377 1763.25,670.112 1763.81,672.916 1764.37,676.694 1764.93,648.124 1765.49,648.064 1766.05,652.486 1766.61,669.034 1767.16,640.019 1767.72,692.876 1768.28,676.416 1768.84,697.001 1769.4,681.18 1769.96,681.218 1770.52,648.642 1771.08,619.073 1771.64,626.38 1772.2,611.832 1772.76,630.502 1773.32,677.754 1773.88,676.552 1774.43,695.534 1774.99,693.644 1775.55,675.223 1776.11,660.082 1776.67,629.632 1777.23,648.441 1777.79,682.015 1778.35,651.555 1778.91,651.142 1779.47,616.442 1780.03,604.899 1780.59,593.614 1781.15,598.624 1781.71,620.767 1782.26,590.037 1782.82,579.958 1783.38,566.737 1783.94,576.169 1784.5,581.208 1785.06,602.129 1785.62,635.355 1786.18,638.174 1786.74,657.944 1787.3,673.074 1787.86,677.053 1788.42,659.162 1788.98,656.528 1789.53,673.289 1790.09,674.967 1790.65,708.452 1791.21,705.751 1791.77,704.122 1792.33,715.616 1792.89,726.958 1793.45,757.46 1794.01,740.443 1794.57,752.766 1795.13,751.171 1795.69,747.808 1796.25,727.796 1796.8,743.763 1797.36,741.441 1797.92,724.158 1798.48,703.894 1799.04,720.518 1799.6,705.916 1800.16,689.383 1800.72,623.688 1801.28,625.718 1801.84,629.828 1802.4,634.822 1802.96,636.329 1803.52,608.597 1804.08,579.744 1804.63,598.359 1805.19,605.068 1805.75,627.58 1806.31,647.18 1806.87,649.611 1807.43,637.886 1807.99,638.24 1808.55,610.001 1809.11,614.864 1809.67,599.573 1810.23,635.961 1810.79,669.162 1811.35,700.316 1811.9,696.855 1812.46,716.246 1813.02,716.427 1813.58,695.898 1814.14,711.541 1814.7,695.748 1815.26,727.898 1815.82,691.784 1816.38,705.057 1816.94,720.947 1817.5,752.745 1818.06,731.796 1818.62,744.983 1819.18,722.723 1819.73,720.045 1820.29,752.482 1820.85,749.743 1821.41,730.194 1821.97,760.358 1822.53,757.667 1823.09,742.077 1823.65,785.242 1824.21,732.215 1824.77,712.088 1825.33,711.157 1825.89,708.55 1826.45,676.908 1827,696.42 1827.56,709.875 1828.12,708.139 1828.68,725.541 1829.24,708.378 1829.8,738.041 1830.36,765.379 1830.92,759.287 1831.48,739.453 1832.04,703.213 1832.6,686.222 1833.16,717.405 1833.72,728.735 1834.27,741.268 1834.83,783.944 1835.39,742.664 1835.95,757.27 1836.51,769.083 1837.07,763.224 1837.63,790.618 1838.19,769.409 \"/>\n<path clip-path=\"url(#clip303)\" d=\"M720.247 689.979 L720.806 689.979 L721.365 689.979 L721.924 689.979 L722.484 689.979 L723.043 689.979 L723.602 689.979 L724.161 689.979 L724.721 689.979 L725.28 689.979 L725.839 689.979 L726.398 689.979 L726.958 689.979 L727.517 689.979 L728.076 689.979 L728.635 689.979 L729.195 689.979 L729.754 689.979 L730.313 689.979 L730.872 689.979 L731.432 689.979 L731.991 689.979 L732.55 689.979 L733.109 689.979 L733.669 689.979 L734.228 689.979 L734.787 689.979 L735.346 689.979 L735.906 689.979 L736.465 689.979 L737.024 689.979 L737.583 689.979 L738.143 689.979 L738.702 689.979 L739.261 689.979 L739.82 689.979 L740.38 689.979 L740.939 689.979 L741.498 689.979 L742.057 689.979 L742.617 689.979 L743.176 689.979 L743.735 689.979 L744.294 689.979 L744.854 689.979 L745.413 689.979 L745.972 689.979 L746.531 689.979 L747.091 689.979 L747.65 689.979 L748.209 689.979 L748.768 689.979 L749.328 689.979 L749.887 689.979 L750.446 689.979 L751.005 689.979 L751.565 689.979 L752.124 689.979 L752.683 689.979 L753.242 689.979 L753.802 689.979 L754.361 689.979 L754.92 689.979 L755.479 689.979 L756.039 689.979 L756.598 689.979 L757.157 689.979 L757.716 689.979 L758.276 689.979 L758.835 689.979 L759.394 689.979 L759.953 689.979 L760.513 689.979 L761.072 689.979 L761.631 689.979 L762.19 689.979 L762.75 689.979 L763.309 689.979 L763.868 689.979 L764.427 689.979 L764.987 689.979 L765.546 689.979 L766.105 689.979 L766.664 689.979 L767.224 689.979 L767.783 689.979 L768.342 689.979 L768.901 689.979 L769.461 689.979 L770.02 689.979 L770.579 689.979 L771.138 689.979 L771.698 689.979 L772.257 689.979 L772.816 689.979 L773.375 689.979 L773.935 689.979 L774.494 689.979 L775.053 689.979 L775.612 689.979 L776.172 689.979 L776.731 689.979 L777.29 689.979 L777.849 689.979 L778.409 689.979 L778.968 689.979 L779.527 689.979 L780.086 689.979 L780.646 689.979 L781.205 689.979 L781.764 689.979 L782.323 689.979 L782.883 689.979 L783.442 689.979 L784.001 689.979 L784.56 689.979 L785.12 689.979 L785.679 689.979 L786.238 689.979 L786.797 689.979 L787.357 689.979 L787.916 689.979 L788.475 689.979 L789.034 689.979 L789.594 689.979 L790.153 689.979 L790.712 689.979 L791.271 689.979 L791.831 689.979 L792.39 689.979 L792.949 689.979 L793.508 689.979 L794.068 689.979 L794.627 689.979 L795.186 689.979 L795.745 689.979 L796.305 689.979 L796.864 689.979 L797.423 689.979 L797.982 689.979 L798.542 689.979 L799.101 689.979 L799.66 689.979 L800.219 689.979 L800.779 689.979 L801.338 689.979 L801.897 689.979 L802.456 689.979 L803.016 689.979 L803.575 689.979 L804.134 689.979 L804.693 689.979 L805.253 689.979 L805.812 689.979 L806.371 689.979 L806.931 689.979 L807.49 689.979 L808.049 689.979 L808.608 689.979 L809.168 689.979 L809.727 689.979 L810.286 689.979 L810.845 689.979 L811.405 689.979 L811.964 689.979 L812.523 689.979 L813.082 689.979 L813.642 689.979 L814.201 689.979 L814.76 689.979 L815.319 689.979 L815.879 689.979 L816.438 689.979 L816.997 689.979 L817.556 689.979 L818.116 689.979 L818.675 689.979 L819.234 689.979 L819.793 689.979 L820.353 689.979 L820.912 689.979 L821.471 689.979 L822.03 689.979 L822.59 689.979 L823.149 689.979 L823.708 689.979 L824.267 689.979 L824.827 689.979 L825.386 689.979 L825.945 689.979 L826.504 689.979 L827.064 689.979 L827.623 689.979 L828.182 689.979 L828.741 689.979 L829.301 689.979 L829.86 689.979 L830.419 689.979 L830.978 689.979 L831.538 689.979 L832.097 689.979 L832.656 689.979 L833.215 689.979 L833.775 689.979 L834.334 689.979 L834.893 689.979 L835.452 689.979 L836.012 689.979 L836.571 689.979 L837.13 689.979 L837.689 689.979 L838.249 689.979 L838.808 689.979 L839.367 689.979 L839.926 689.979 L840.486 689.979 L841.045 689.979 L841.604 689.979 L842.163 689.979 L842.723 689.979 L843.282 689.979 L843.841 689.979 L844.4 689.979 L844.96 689.979 L845.519 689.979 L846.078 689.979 L846.637 689.979 L847.197 689.979 L847.756 689.979 L848.315 689.979 L848.874 689.979 L849.434 689.979 L849.993 689.979 L850.552 689.979 L851.111 689.979 L851.671 689.979 L852.23 689.979 L852.789 689.979 L853.348 689.979 L853.908 689.979 L854.467 689.979 L855.026 689.979 L855.585 689.979 L856.145 689.979 L856.704 689.979 L857.263 689.979 L857.822 689.979 L858.382 689.979 L858.941 689.979 L859.5 689.979 L860.059 689.979 L860.619 689.979 L861.178 689.979 L861.737 689.979 L862.296 689.979 L862.856 689.979 L863.415 689.979 L863.974 689.979 L864.533 689.979 L865.093 689.979 L865.652 689.979 L866.211 689.979 L866.77 689.979 L867.33 689.979 L867.889 689.979 L868.448 689.979 L869.007 689.979 L869.567 689.979 L870.126 689.979 L870.685 689.979 L871.244 689.979 L871.804 689.979 L872.363 689.979 L872.922 689.979 L873.481 689.979 L874.041 689.979 L874.6 689.979 L875.159 689.979 L875.718 689.979 L876.278 689.979 L876.837 689.979 L877.396 689.979 L877.955 689.979 L878.515 689.979 L879.074 689.979 L879.633 689.979 L880.192 689.979 L880.752 689.979 L881.311 689.979 L881.87 689.979 L882.429 689.979 L882.989 689.979 L883.548 689.979 L884.107 689.979 L884.666 689.979 L885.226 689.979 L885.785 689.979 L886.344 689.979 L886.903 689.979 L887.463 689.979 L888.022 689.979 L888.581 689.979 L889.14 689.979 L889.7 689.979 L890.259 689.979 L890.818 689.979 L891.377 689.979 L891.937 689.979 L892.496 689.979 L893.055 689.979 L893.614 689.979 L894.174 689.979 L894.733 689.979 L895.292 689.979 L895.851 689.979 L896.411 689.979 L896.97 689.979 L897.529 689.979 L898.088 689.979 L898.648 689.979 L899.207 689.979 L899.766 689.979 L900.325 689.979 L900.885 689.979 L901.444 689.979 L902.003 689.979 L902.562 689.979 L903.122 689.979 L903.681 689.979 L904.24 689.979 L904.799 689.979 L905.359 689.979 L905.918 689.979 L906.477 689.979 L907.036 689.979 L907.596 689.979 L908.155 689.979 L908.714 689.979 L909.273 689.979 L909.833 689.979 L910.392 689.979 L910.951 689.979 L911.51 689.979 L912.07 689.979 L912.629 689.979 L913.188 689.979 L913.747 689.979 L914.307 689.979 L914.866 689.979 L915.425 689.979 L915.984 689.979 L916.544 689.979 L917.103 689.979 L917.662 689.979 L918.221 689.979 L918.781 689.979 L919.34 689.979 L919.899 689.979 L920.458 689.979 L921.018 689.979 L921.577 689.979 L922.136 689.979 L922.695 689.979 L923.255 689.979 L923.814 689.979 L924.373 689.979 L924.932 689.979 L925.492 689.979 L926.051 689.979 L926.61 689.979 L927.169 689.979 L927.729 689.979 L928.288 689.979 L928.847 689.979 L929.406 689.979 L929.966 689.979 L930.525 689.979 L931.084 689.979 L931.644 689.979 L932.203 689.979 L932.762 689.979 L933.321 689.979 L933.881 689.979 L934.44 689.979 L934.999 689.979 L935.558 689.979 L936.118 689.979 L936.677 689.979 L937.236 689.979 L937.795 689.979 L938.355 689.979 L938.914 689.979 L939.473 689.979 L940.032 689.979 L940.592 689.979 L941.151 689.979 L941.71 689.979 L942.269 689.979 L942.829 689.979 L943.388 689.979 L943.947 689.979 L944.506 689.979 L945.066 689.979 L945.625 689.979 L946.184 689.979 L946.743 689.979 L947.303 689.979 L947.862 689.979 L948.421 689.979 L948.98 689.979 L949.54 689.979 L950.099 689.979 L950.658 689.979 L951.217 689.979 L951.777 689.979 L952.336 689.979 L952.895 689.979 L953.454 689.979 L954.014 689.979 L954.573 689.979 L955.132 689.979 L955.691 689.979 L956.251 689.979 L956.81 689.979 L957.369 689.979 L957.928 689.979 L958.488 689.979 L959.047 689.979 L959.606 689.979 L960.165 689.979 L960.725 689.979 L961.284 689.979 L961.843 689.979 L962.402 689.979 L962.962 689.979 L963.521 689.979 L964.08 689.979 L964.639 689.979 L965.199 689.979 L965.758 689.979 L966.317 689.979 L966.876 689.979 L967.436 689.979 L967.995 689.979 L968.554 689.979 L969.113 689.979 L969.673 689.979 L970.232 689.979 L970.791 689.979 L971.35 689.979 L971.91 689.979 L972.469 689.979 L973.028 689.979 L973.587 689.979 L974.147 689.979 L974.706 689.979 L975.265 689.979 L975.824 689.979 L976.384 689.979 L976.943 689.979 L977.502 689.979 L978.061 689.979 L978.621 689.979 L979.18 689.979 L979.739 689.979 L980.298 689.979 L980.858 689.979 L981.417 689.979 L981.976 689.979 L982.535 689.979 L983.095 689.979 L983.654 689.979 L984.213 689.979 L984.772 689.979 L985.332 689.979 L985.891 689.979 L986.45 689.979 L987.009 689.979 L987.569 689.979 L988.128 689.979 L988.687 689.979 L989.246 689.979 L989.806 689.979 L990.365 689.979 L990.924 689.979 L991.483 689.979 L992.043 689.979 L992.602 689.979 L993.161 689.979 L993.72 689.979 L994.28 689.979 L994.839 689.979 L995.398 689.979 L995.957 689.979 L996.517 689.979 L997.076 689.979 L997.635 689.979 L998.194 689.979 L998.754 689.979 L999.313 689.979 L999.872 689.979 L1000.43 689.979 L1000.99 689.979 L1001.55 689.979 L1002.11 689.979 L1002.67 689.979 L1003.23 689.979 L1003.79 689.979 L1004.35 689.979 L1004.91 689.979 L1005.46 689.979 L1006.02 689.979 L1006.58 689.979 L1007.14 689.979 L1007.7 689.979 L1008.26 689.979 L1008.82 689.979 L1009.38 689.979 L1009.94 689.979 L1010.5 689.979 L1011.06 689.979 L1011.62 689.979 L1012.18 689.979 L1012.73 689.979 L1013.29 689.979 L1013.85 689.979 L1014.41 689.979 L1014.97 689.979 L1015.53 689.979 L1016.09 689.979 L1016.65 689.979 L1017.21 689.979 L1017.77 689.979 L1018.33 689.979 L1018.89 689.979 L1019.45 689.979 L1020.01 689.979 L1020.56 689.979 L1021.12 689.979 L1021.68 689.979 L1022.24 689.979 L1022.8 689.979 L1023.36 689.979 L1023.92 689.979 L1024.48 689.979 L1025.04 689.979 L1025.6 689.979 L1026.16 689.979 L1026.72 689.979 L1027.28 689.979 L1027.83 689.979 L1028.39 689.979 L1028.95 689.979 L1029.51 689.979 L1030.07 689.979 L1030.63 689.979 L1031.19 689.979 L1031.75 689.979 L1032.31 689.979 L1032.87 689.979 L1033.43 689.979 L1033.99 689.979 L1034.55 689.979 L1035.1 689.979 L1035.66 689.979 L1036.22 689.979 L1036.78 689.979 L1037.34 689.979 L1037.9 689.979 L1038.46 689.979 L1039.02 689.979 L1039.58 689.979 L1040.14 689.979 L1040.7 689.979 L1041.26 689.979 L1041.82 689.979 L1042.38 689.979 L1042.93 689.979 L1043.49 689.979 L1044.05 689.979 L1044.61 689.979 L1045.17 689.979 L1045.73 689.979 L1046.29 689.979 L1046.85 689.979 L1047.41 689.979 L1047.97 689.979 L1048.53 689.979 L1049.09 689.979 L1049.65 689.979 L1050.2 689.979 L1050.76 689.979 L1051.32 689.979 L1051.88 689.979 L1052.44 689.979 L1053 689.979 L1053.56 689.979 L1054.12 689.979 L1054.68 689.979 L1055.24 689.979 L1055.8 689.979 L1056.36 689.979 L1056.92 689.979 L1057.48 689.979 L1058.03 689.979 L1058.59 689.979 L1059.15 689.979 L1059.71 689.979 L1060.27 689.979 L1060.83 689.979 L1061.39 689.979 L1061.95 689.979 L1062.51 689.979 L1063.07 689.979 L1063.63 689.979 L1064.19 689.979 L1064.75 689.979 L1065.3 689.979 L1065.86 689.979 L1066.42 689.979 L1066.98 689.979 L1067.54 689.979 L1068.1 689.979 L1068.66 689.979 L1069.22 689.979 L1069.78 689.979 L1070.34 689.979 L1070.9 689.979 L1071.46 689.979 L1072.02 689.979 L1072.57 689.979 L1073.13 689.979 L1073.69 689.979 L1074.25 689.979 L1074.81 689.979 L1075.37 689.979 L1075.93 689.979 L1076.49 689.979 L1077.05 689.979 L1077.61 689.979 L1078.17 689.979 L1078.73 689.979 L1079.29 689.979 L1079.85 689.979 L1080.4 689.979 L1080.96 689.979 L1081.52 689.979 L1082.08 689.979 L1082.64 689.979 L1083.2 689.979 L1083.76 689.979 L1084.32 689.979 L1084.88 689.979 L1085.44 689.979 L1086 689.979 L1086.56 689.979 L1087.12 689.979 L1087.67 689.979 L1088.23 689.979 L1088.79 689.979 L1089.35 689.979 L1089.91 689.979 L1090.47 689.979 L1091.03 689.979 L1091.59 689.979 L1092.15 689.979 L1092.71 689.979 L1093.27 689.979 L1093.83 689.979 L1094.39 689.979 L1094.94 689.979 L1095.5 689.979 L1096.06 689.979 L1096.62 689.979 L1097.18 689.979 L1097.74 689.979 L1098.3 689.979 L1098.86 689.979 L1099.42 689.979 L1099.98 689.979 L1100.54 689.979 L1101.1 689.979 L1101.66 689.979 L1102.22 689.979 L1102.77 689.979 L1103.33 689.979 L1103.89 689.979 L1104.45 689.979 L1105.01 689.979 L1105.57 689.979 L1106.13 689.979 L1106.69 689.979 L1107.25 689.979 L1107.81 689.979 L1108.37 689.979 L1108.93 689.979 L1109.49 689.979 L1110.04 689.979 L1110.6 689.979 L1111.16 689.979 L1111.72 689.979 L1112.28 689.979 L1112.84 689.979 L1113.4 689.979 L1113.96 689.979 L1114.52 689.979 L1115.08 689.979 L1115.64 689.979 L1116.2 689.979 L1116.76 689.979 L1117.31 689.979 L1117.87 689.979 L1118.43 689.979 L1118.99 689.979 L1119.55 689.979 L1120.11 689.979 L1120.67 689.979 L1121.23 689.979 L1121.79 689.979 L1122.35 689.979 L1122.91 689.979 L1123.47 689.979 L1124.03 689.979 L1124.59 689.979 L1125.14 689.979 L1125.7 689.979 L1126.26 689.979 L1126.82 689.979 L1127.38 689.979 L1127.94 689.979 L1128.5 689.979 L1129.06 689.979 L1129.62 689.979 L1130.18 689.979 L1130.74 689.979 L1131.3 689.979 L1131.86 689.979 L1132.41 689.979 L1132.97 689.979 L1133.53 689.979 L1134.09 689.979 L1134.65 689.979 L1135.21 689.979 L1135.77 689.979 L1136.33 689.979 L1136.89 689.979 L1137.45 689.979 L1138.01 689.979 L1138.57 689.979 L1139.13 689.979 L1139.68 689.979 L1140.24 689.979 L1140.8 689.979 L1141.36 689.979 L1141.92 689.979 L1142.48 689.979 L1143.04 689.979 L1143.6 689.979 L1144.16 689.979 L1144.72 689.979 L1145.28 689.979 L1145.84 689.979 L1146.4 689.979 L1146.96 689.979 L1147.51 689.979 L1148.07 689.979 L1148.63 689.979 L1149.19 689.979 L1149.75 689.979 L1150.31 689.979 L1150.87 689.979 L1151.43 689.979 L1151.99 689.979 L1152.55 689.979 L1153.11 689.979 L1153.67 689.979 L1154.23 689.979 L1154.78 689.979 L1155.34 689.979 L1155.9 689.979 L1156.46 689.979 L1157.02 689.979 L1157.58 689.979 L1158.14 689.979 L1158.7 689.979 L1159.26 689.979 L1159.82 689.979 L1160.38 689.979 L1160.94 689.979 L1161.5 689.979 L1162.05 689.979 L1162.61 689.979 L1163.17 689.979 L1163.73 689.979 L1164.29 689.979 L1164.85 689.979 L1165.41 689.979 L1165.97 689.979 L1166.53 689.979 L1167.09 689.979 L1167.65 689.979 L1168.21 689.979 L1168.77 689.979 L1169.33 689.979 L1169.88 689.979 L1170.44 689.979 L1171 689.979 L1171.56 689.979 L1172.12 689.979 L1172.68 689.979 L1173.24 689.979 L1173.8 689.979 L1174.36 689.979 L1174.92 689.979 L1175.48 689.979 L1176.04 689.979 L1176.6 689.979 L1177.15 689.979 L1177.71 689.979 L1178.27 689.979 L1178.83 689.979 L1179.39 689.979 L1179.95 689.979 L1180.51 689.979 L1181.07 689.979 L1181.63 689.979 L1182.19 689.979 L1182.75 689.979 L1183.31 689.979 L1183.87 689.979 L1184.43 689.979 L1184.98 689.979 L1185.54 689.979 L1186.1 689.979 L1186.66 689.979 L1187.22 689.979 L1187.78 689.979 L1188.34 689.979 L1188.9 689.979 L1189.46 689.979 L1190.02 689.979 L1190.58 689.979 L1191.14 689.979 L1191.7 689.979 L1192.25 689.979 L1192.81 689.979 L1193.37 689.979 L1193.93 689.979 L1194.49 689.979 L1195.05 689.979 L1195.61 689.979 L1196.17 689.979 L1196.73 689.979 L1197.29 689.979 L1197.85 689.979 L1198.41 689.979 L1198.97 689.979 L1199.52 689.979 L1200.08 689.979 L1200.64 689.979 L1201.2 689.979 L1201.76 689.979 L1202.32 689.979 L1202.88 689.979 L1203.44 689.979 L1204 689.979 L1204.56 689.979 L1205.12 689.979 L1205.68 689.979 L1206.24 689.979 L1206.8 689.979 L1207.35 689.979 L1207.91 689.979 L1208.47 689.979 L1209.03 689.979 L1209.59 689.979 L1210.15 689.979 L1210.71 689.979 L1211.27 689.979 L1211.83 689.979 L1212.39 689.979 L1212.95 689.979 L1213.51 689.979 L1214.07 689.979 L1214.62 689.979 L1215.18 689.979 L1215.74 689.979 L1216.3 689.979 L1216.86 689.979 L1217.42 689.979 L1217.98 689.979 L1218.54 689.979 L1219.1 689.979 L1219.66 689.979 L1220.22 689.979 L1220.78 689.979 L1221.34 689.979 L1221.89 689.979 L1222.45 689.979 L1223.01 689.979 L1223.57 689.979 L1224.13 689.979 L1224.69 689.979 L1225.25 689.979 L1225.81 689.979 L1226.37 689.979 L1226.93 689.979 L1227.49 689.979 L1228.05 689.979 L1228.61 689.979 L1229.17 689.979 L1229.72 689.979 L1230.28 689.979 L1230.84 689.979 L1231.4 689.979 L1231.96 689.979 L1232.52 689.979 L1233.08 689.979 L1233.64 689.979 L1234.2 689.979 L1234.76 689.979 L1235.32 689.979 L1235.88 689.979 L1236.44 689.979 L1236.99 689.979 L1237.55 689.979 L1238.11 689.979 L1238.67 689.979 L1239.23 689.979 L1239.79 689.979 L1240.35 689.979 L1240.91 689.979 L1241.47 689.979 L1242.03 689.979 L1242.59 689.979 L1243.15 689.979 L1243.71 689.979 L1244.26 689.979 L1244.82 689.979 L1245.38 689.979 L1245.94 689.979 L1246.5 689.979 L1247.06 689.979 L1247.62 689.979 L1248.18 689.979 L1248.74 689.979 L1249.3 689.979 L1249.86 689.979 L1250.42 689.979 L1250.98 689.979 L1251.54 689.979 L1252.09 689.979 L1252.65 689.979 L1253.21 689.979 L1253.77 689.979 L1254.33 689.979 L1254.89 689.979 L1255.45 689.979 L1256.01 689.979 L1256.57 689.979 L1257.13 689.979 L1257.69 689.979 L1258.25 689.979 L1258.81 689.979 L1259.36 689.979 L1259.92 689.979 L1260.48 689.979 L1261.04 689.979 L1261.6 689.979 L1262.16 689.979 L1262.72 689.979 L1263.28 689.979 L1263.84 689.979 L1264.4 689.979 L1264.96 689.979 L1265.52 689.979 L1266.08 689.979 L1266.63 689.979 L1267.19 689.979 L1267.75 689.979 L1268.31 689.979 L1268.87 689.979 L1269.43 689.979 L1269.99 689.979 L1270.55 689.979 L1271.11 689.979 L1271.67 689.979 L1272.23 689.979 L1272.79 689.979 L1273.35 689.979 L1273.91 689.979 L1274.46 689.979 L1275.02 689.979 L1275.58 689.979 L1276.14 689.979 L1276.7 689.979 L1277.26 689.979 L1277.82 689.979 L1278.38 689.979 L1278.94 689.979 L1279.5 689.979 L1280.06 689.979 L1280.62 689.979 L1281.18 689.979 L1281.73 689.979 L1282.29 689.979 L1282.85 689.979 L1283.41 689.979 L1283.97 689.979 L1284.53 689.979 L1285.09 689.979 L1285.65 689.979 L1286.21 689.979 L1286.77 689.979 L1287.33 689.979 L1287.89 689.979 L1288.45 689.979 L1289 689.979 L1289.56 689.979 L1290.12 689.979 L1290.68 689.979 L1291.24 689.979 L1291.8 689.979 L1292.36 689.979 L1292.92 689.979 L1293.48 689.979 L1294.04 689.979 L1294.6 689.979 L1295.16 689.979 L1295.72 689.979 L1296.28 689.979 L1296.83 689.979 L1297.39 689.979 L1297.95 689.979 L1298.51 689.979 L1299.07 689.979 L1299.63 689.979 L1300.19 689.979 L1300.75 689.979 L1301.31 689.979 L1301.87 689.979 L1302.43 689.979 L1302.99 689.979 L1303.55 689.979 L1304.1 689.979 L1304.66 689.979 L1305.22 689.979 L1305.78 689.979 L1306.34 689.979 L1306.9 689.979 L1307.46 689.979 L1308.02 689.979 L1308.58 689.979 L1309.14 689.979 L1309.7 689.979 L1310.26 689.979 L1310.82 689.979 L1311.38 689.979 L1311.93 689.979 L1312.49 689.979 L1313.05 689.979 L1313.61 689.979 L1314.17 689.979 L1314.73 689.979 L1315.29 689.979 L1315.85 689.979 L1316.41 689.979 L1316.97 689.979 L1317.53 689.979 L1318.09 689.979 L1318.65 689.979 L1319.2 689.979 L1319.76 689.979 L1320.32 689.979 L1320.88 689.979 L1321.44 689.979 L1322 689.979 L1322.56 689.979 L1323.12 689.979 L1323.68 689.979 L1324.24 689.979 L1324.8 689.979 L1325.36 689.979 L1325.92 689.979 L1326.47 689.979 L1327.03 689.979 L1327.59 689.979 L1328.15 689.979 L1328.71 689.979 L1329.27 689.979 L1329.83 689.979 L1330.39 689.979 L1330.95 689.979 L1331.51 689.979 L1332.07 689.979 L1332.63 689.979 L1333.19 689.979 L1333.75 689.979 L1334.3 689.979 L1334.86 689.979 L1335.42 689.979 L1335.98 689.979 L1336.54 689.979 L1337.1 689.979 L1337.66 689.979 L1338.22 689.979 L1338.78 689.979 L1339.34 689.979 L1339.9 689.979 L1340.46 689.979 L1341.02 689.979 L1341.57 689.979 L1342.13 689.979 L1342.69 689.979 L1343.25 689.979 L1343.81 689.979 L1344.37 689.979 L1344.93 689.979 L1345.49 689.979 L1346.05 689.979 L1346.61 689.979 L1347.17 689.979 L1347.73 689.979 L1348.29 689.979 L1348.84 689.979 L1349.4 689.979 L1349.96 689.979 L1350.52 689.979 L1351.08 689.979 L1351.64 689.979 L1352.2 689.979 L1352.76 689.979 L1353.32 689.979 L1353.88 689.979 L1354.44 689.979 L1355 689.979 L1355.56 689.979 L1356.12 689.979 L1356.67 689.979 L1357.23 689.979 L1357.79 689.979 L1358.35 689.979 L1358.91 689.979 L1359.47 689.979 L1360.03 689.979 L1360.59 689.979 L1361.15 689.979 L1361.71 689.979 L1362.27 689.979 L1362.83 689.979 L1363.39 689.979 L1363.94 689.979 L1364.5 689.979 L1365.06 689.979 L1365.62 689.979 L1366.18 689.979 L1366.74 689.979 L1367.3 689.979 L1367.86 689.979 L1368.42 689.979 L1368.98 689.979 L1369.54 689.979 L1370.1 689.979 L1370.66 689.979 L1371.21 689.979 L1371.77 689.979 L1372.33 689.979 L1372.89 689.979 L1373.45 689.979 L1374.01 689.979 L1374.57 689.979 L1375.13 689.979 L1375.69 689.979 L1376.25 689.979 L1376.81 689.979 L1377.37 689.979 L1377.93 689.979 L1378.49 689.979 L1379.04 689.979 L1379.6 689.979 L1380.16 689.979 L1380.72 689.979 L1381.28 689.979 L1381.84 689.979 L1382.4 689.979 L1382.96 689.979 L1383.52 689.979 L1384.08 689.979 L1384.64 689.979 L1385.2 689.979 L1385.76 689.979 L1386.31 689.979 L1386.87 689.979 L1387.43 689.979 L1387.99 689.979 L1388.55 689.979 L1389.11 689.979 L1389.67 689.979 L1390.23 689.979 L1390.79 689.979 L1391.35 689.979 L1391.91 689.979 L1392.47 689.979 L1393.03 689.979 L1393.58 689.979 L1394.14 689.979 L1394.7 689.979 L1395.26 689.979 L1395.82 689.979 L1396.38 689.979 L1396.94 689.979 L1397.5 689.979 L1398.06 689.979 L1398.62 689.979 L1399.18 689.979 L1399.74 689.979 L1400.3 689.979 L1400.86 689.979 L1401.41 689.979 L1401.97 689.979 L1402.53 689.979 L1403.09 689.979 L1403.65 689.979 L1404.21 689.979 L1404.77 689.979 L1405.33 689.979 L1405.89 689.979 L1406.45 689.979 L1407.01 689.979 L1407.57 689.979 L1408.13 689.979 L1408.68 689.979 L1409.24 689.979 L1409.8 689.979 L1410.36 689.979 L1410.92 689.979 L1411.48 689.979 L1412.04 689.979 L1412.6 689.979 L1413.16 689.979 L1413.72 689.979 L1414.28 689.979 L1414.84 689.979 L1415.4 689.979 L1415.95 689.979 L1416.51 689.979 L1417.07 689.979 L1417.63 689.979 L1418.19 689.979 L1418.75 689.979 L1419.31 689.979 L1419.87 689.979 L1420.43 689.979 L1420.99 689.979 L1421.55 689.979 L1422.11 689.979 L1422.67 689.979 L1423.23 689.979 L1423.78 689.979 L1424.34 689.979 L1424.9 689.979 L1425.46 689.979 L1426.02 689.979 L1426.58 689.979 L1427.14 689.979 L1427.7 689.979 L1428.26 689.979 L1428.82 689.979 L1429.38 689.979 L1429.94 689.979 L1430.5 689.979 L1431.05 689.979 L1431.61 689.979 L1432.17 689.979 L1432.73 689.979 L1433.29 689.979 L1433.85 689.979 L1434.41 689.979 L1434.97 689.979 L1435.53 689.979 L1436.09 689.979 L1436.65 689.979 L1437.21 689.979 L1437.77 689.979 L1438.33 689.979 L1438.88 689.979 L1439.44 689.979 L1440 689.979 L1440.56 689.979 L1441.12 689.979 L1441.68 689.979 L1442.24 689.979 L1442.8 689.979 L1443.36 689.979 L1443.92 689.979 L1444.48 689.979 L1445.04 689.979 L1445.6 689.979 L1446.15 689.979 L1446.71 689.979 L1447.27 689.979 L1447.83 689.979 L1448.39 689.979 L1448.95 689.979 L1449.51 689.979 L1450.07 689.979 L1450.63 689.979 L1451.19 689.979 L1451.75 689.979 L1452.31 689.979 L1452.87 689.979 L1453.42 689.979 L1453.98 689.979 L1454.54 689.979 L1455.1 689.979 L1455.66 689.979 L1456.22 689.979 L1456.78 689.979 L1457.34 689.979 L1457.9 689.979 L1458.46 689.979 L1459.02 689.979 L1459.58 689.979 L1460.14 689.979 L1460.7 689.979 L1461.25 689.979 L1461.81 689.979 L1462.37 689.979 L1462.93 689.979 L1463.49 689.979 L1464.05 689.979 L1464.61 689.979 L1465.17 689.979 L1465.73 689.979 L1466.29 689.979 L1466.85 689.979 L1467.41 689.979 L1467.97 689.979 L1468.52 689.979 L1469.08 689.979 L1469.64 689.979 L1470.2 689.979 L1470.76 689.979 L1471.32 689.979 L1471.88 689.979 L1472.44 689.979 L1473 689.979 L1473.56 689.979 L1474.12 689.979 L1474.68 689.979 L1475.24 689.979 L1475.79 689.979 L1476.35 689.979 L1476.91 689.979 L1477.47 689.979 L1478.03 689.979 L1478.59 689.979 L1479.15 689.979 L1479.71 689.979 L1480.27 689.979 L1480.83 689.979 L1481.39 689.979 L1481.95 689.979 L1482.51 689.979 L1483.07 689.979 L1483.62 689.979 L1484.18 689.979 L1484.74 689.979 L1485.3 689.979 L1485.86 689.979 L1486.42 689.979 L1486.98 689.979 L1487.54 689.979 L1488.1 689.979 L1488.66 689.979 L1489.22 689.979 L1489.78 689.979 L1490.34 689.979 L1490.89 689.979 L1491.45 689.979 L1492.01 689.979 L1492.57 689.979 L1493.13 689.979 L1493.69 689.979 L1494.25 689.979 L1494.81 689.979 L1495.37 689.979 L1495.93 689.979 L1496.49 689.979 L1497.05 689.979 L1497.61 689.979 L1498.16 689.979 L1498.72 689.979 L1499.28 689.979 L1499.84 689.979 L1500.4 689.979 L1500.96 689.979 L1501.52 689.979 L1502.08 689.979 L1502.64 689.979 L1503.2 689.979 L1503.76 689.979 L1504.32 689.979 L1504.88 689.979 L1505.44 689.979 L1505.99 689.979 L1506.55 689.979 L1507.11 689.979 L1507.67 689.979 L1508.23 689.979 L1508.79 689.979 L1509.35 689.979 L1509.91 689.979 L1510.47 689.979 L1511.03 689.979 L1511.59 689.979 L1512.15 689.979 L1512.71 689.979 L1513.26 689.979 L1513.82 689.979 L1514.38 689.979 L1514.94 689.979 L1515.5 689.979 L1516.06 689.979 L1516.62 689.979 L1517.18 689.979 L1517.74 689.979 L1518.3 689.979 L1518.86 689.979 L1519.42 689.979 L1519.98 689.979 L1520.53 689.979 L1521.09 689.979 L1521.65 689.979 L1522.21 689.979 L1522.77 689.979 L1523.33 689.979 L1523.89 689.979 L1524.45 689.979 L1525.01 689.979 L1525.57 689.979 L1526.13 689.979 L1526.69 689.979 L1527.25 689.979 L1527.81 689.979 L1528.36 689.979 L1528.92 689.979 L1529.48 689.979 L1530.04 689.979 L1530.6 689.979 L1531.16 689.979 L1531.72 689.979 L1532.28 689.979 L1532.84 689.979 L1533.4 689.979 L1533.96 689.979 L1534.52 689.979 L1535.08 689.979 L1535.63 689.979 L1536.19 689.979 L1536.75 689.979 L1537.31 689.979 L1537.87 689.979 L1538.43 689.979 L1538.99 689.979 L1539.55 689.979 L1540.11 689.979 L1540.67 689.979 L1541.23 689.979 L1541.79 689.979 L1542.35 689.979 L1542.9 689.979 L1543.46 689.979 L1544.02 689.979 L1544.58 689.979 L1545.14 689.979 L1545.7 689.979 L1546.26 689.979 L1546.82 689.979 L1547.38 689.979 L1547.94 689.979 L1548.5 689.979 L1549.06 689.979 L1549.62 689.979 L1550.18 689.979 L1550.73 689.979 L1551.29 689.979 L1551.85 689.979 L1552.41 689.979 L1552.97 689.979 L1553.53 689.979 L1554.09 689.979 L1554.65 689.979 L1555.21 689.979 L1555.77 689.979 L1556.33 689.979 L1556.89 689.979 L1557.45 689.979 L1558 689.979 L1558.56 689.979 L1559.12 689.979 L1559.68 689.979 L1560.24 689.979 L1560.8 689.979 L1561.36 689.979 L1561.92 689.979 L1562.48 689.979 L1563.04 689.979 L1563.6 689.979 L1564.16 689.979 L1564.72 689.979 L1565.28 689.979 L1565.83 689.979 L1566.39 689.979 L1566.95 689.979 L1567.51 689.979 L1568.07 689.979 L1568.63 689.979 L1569.19 689.979 L1569.75 689.979 L1570.31 689.979 L1570.87 689.979 L1571.43 689.979 L1571.99 689.979 L1572.55 689.979 L1573.1 689.979 L1573.66 689.979 L1574.22 689.979 L1574.78 689.979 L1575.34 689.979 L1575.9 689.979 L1576.46 689.979 L1577.02 689.979 L1577.58 689.979 L1578.14 689.979 L1578.7 689.979 L1579.26 689.979 L1579.82 689.979 L1580.37 689.979 L1580.93 689.979 L1581.49 689.979 L1582.05 689.979 L1582.61 689.979 L1583.17 689.979 L1583.73 689.979 L1584.29 689.979 L1584.85 689.979 L1585.41 689.979 L1585.97 689.979 L1586.53 689.979 L1587.09 689.979 L1587.65 689.979 L1588.2 689.979 L1588.76 689.979 L1589.32 689.979 L1589.88 689.979 L1590.44 689.979 L1591 689.979 L1591.56 689.979 L1592.12 689.979 L1592.68 689.979 L1593.24 689.979 L1593.8 689.979 L1594.36 689.979 L1594.92 689.979 L1595.47 689.979 L1596.03 689.979 L1596.59 689.979 L1597.15 689.979 L1597.71 689.979 L1598.27 689.979 L1598.83 689.979 L1599.39 689.979 L1599.95 689.979 L1600.51 689.979 L1601.07 689.979 L1601.63 689.979 L1602.19 689.979 L1602.74 689.979 L1603.3 689.979 L1603.86 689.979 L1604.42 689.979 L1604.98 689.979 L1605.54 689.979 L1606.1 689.979 L1606.66 689.979 L1607.22 689.979 L1607.78 689.979 L1608.34 689.979 L1608.9 689.979 L1609.46 689.979 L1610.02 689.979 L1610.57 689.979 L1611.13 689.979 L1611.69 689.979 L1612.25 689.979 L1612.81 689.979 L1613.37 689.979 L1613.93 689.979 L1614.49 689.979 L1615.05 689.979 L1615.61 689.979 L1616.17 689.979 L1616.73 689.979 L1617.29 689.979 L1617.84 689.979 L1618.4 689.979 L1618.96 689.979 L1619.52 689.979 L1620.08 689.979 L1620.64 689.979 L1621.2 689.979 L1621.76 689.979 L1622.32 689.979 L1622.88 689.979 L1623.44 689.979 L1624 689.979 L1624.56 689.979 L1625.11 689.979 L1625.67 689.979 L1626.23 689.979 L1626.79 689.979 L1627.35 689.979 L1627.91 689.979 L1628.47 689.979 L1629.03 689.979 L1629.59 689.979 L1630.15 689.979 L1630.71 689.979 L1631.27 689.979 L1631.83 689.979 L1632.39 689.979 L1632.94 689.979 L1633.5 689.979 L1634.06 689.979 L1634.62 689.979 L1635.18 689.979 L1635.74 689.979 L1636.3 689.979 L1636.86 689.979 L1637.42 689.979 L1637.98 689.979 L1638.54 689.979 L1639.1 689.979 L1639.66 689.979 L1640.21 689.979 L1640.77 689.979 L1641.33 689.979 L1641.89 689.979 L1642.45 689.979 L1643.01 689.979 L1643.57 689.979 L1644.13 689.979 L1644.69 689.979 L1645.25 689.979 L1645.81 689.979 L1646.37 689.979 L1646.93 689.979 L1647.48 689.979 L1648.04 689.979 L1648.6 689.979 L1649.16 689.979 L1649.72 689.979 L1650.28 689.979 L1650.84 689.979 L1651.4 689.979 L1651.96 689.979 L1652.52 689.979 L1653.08 689.979 L1653.64 689.979 L1654.2 689.979 L1654.76 689.979 L1655.31 689.979 L1655.87 689.979 L1656.43 689.979 L1656.99 689.979 L1657.55 689.979 L1658.11 689.979 L1658.67 689.979 L1659.23 689.979 L1659.79 689.979 L1660.35 689.979 L1660.91 689.979 L1661.47 689.979 L1662.03 689.979 L1662.58 689.979 L1663.14 689.979 L1663.7 689.979 L1664.26 689.979 L1664.82 689.979 L1665.38 689.979 L1665.94 689.979 L1666.5 689.979 L1667.06 689.979 L1667.62 689.979 L1668.18 689.979 L1668.74 689.979 L1669.3 689.979 L1669.85 689.979 L1670.41 689.979 L1670.97 689.979 L1671.53 689.979 L1672.09 689.979 L1672.65 689.979 L1673.21 689.979 L1673.77 689.979 L1674.33 689.979 L1674.89 689.979 L1675.45 689.979 L1676.01 689.979 L1676.57 689.979 L1677.13 689.979 L1677.68 689.979 L1678.24 689.979 L1678.8 689.979 L1679.36 689.979 L1679.92 689.979 L1680.48 689.979 L1681.04 689.979 L1681.6 689.979 L1682.16 689.979 L1682.72 689.979 L1683.28 689.979 L1683.84 689.979 L1684.4 689.979 L1684.95 689.979 L1685.51 689.979 L1686.07 689.979 L1686.63 689.979 L1687.19 689.979 L1687.75 689.979 L1688.31 689.979 L1688.87 689.979 L1689.43 689.979 L1689.99 689.979 L1690.55 689.979 L1691.11 689.979 L1691.67 689.979 L1692.23 689.979 L1692.78 689.979 L1693.34 689.979 L1693.9 689.979 L1694.46 689.979 L1695.02 689.979 L1695.58 689.979 L1696.14 689.979 L1696.7 689.979 L1697.26 689.979 L1697.82 689.979 L1698.38 689.979 L1698.94 689.979 L1699.5 689.979 L1700.05 689.979 L1700.61 689.979 L1701.17 689.979 L1701.73 689.979 L1702.29 689.979 L1702.85 689.979 L1703.41 689.979 L1703.97 689.979 L1704.53 689.979 L1705.09 689.979 L1705.65 689.979 L1706.21 689.979 L1706.77 689.979 L1707.32 689.979 L1707.88 689.979 L1708.44 689.979 L1709 689.979 L1709.56 689.979 L1710.12 689.979 L1710.68 689.979 L1711.24 689.979 L1711.8 689.979 L1712.36 689.979 L1712.92 689.979 L1713.48 689.979 L1714.04 689.979 L1714.6 689.979 L1715.15 689.979 L1715.71 689.979 L1716.27 689.979 L1716.83 689.979 L1717.39 689.979 L1717.95 689.979 L1718.51 689.979 L1719.07 689.979 L1719.63 689.979 L1720.19 689.979 L1720.75 689.979 L1721.31 689.979 L1721.87 689.979 L1722.42 689.979 L1722.98 689.979 L1723.54 689.979 L1724.1 689.979 L1724.66 689.979 L1725.22 689.979 L1725.78 689.979 L1726.34 689.979 L1726.9 689.979 L1727.46 689.979 L1728.02 689.979 L1728.58 689.979 L1729.14 689.979 L1729.69 689.979 L1730.25 689.979 L1730.81 689.979 L1731.37 689.979 L1731.93 689.979 L1732.49 689.979 L1733.05 689.979 L1733.61 689.979 L1734.17 689.979 L1734.73 689.979 L1735.29 689.979 L1735.85 689.979 L1736.41 689.979 L1736.97 689.979 L1737.52 689.979 L1738.08 689.979 L1738.64 689.979 L1739.2 689.979 L1739.76 689.979 L1740.32 689.979 L1740.88 689.979 L1741.44 689.979 L1742 689.979 L1742.56 689.979 L1743.12 689.979 L1743.68 689.979 L1744.24 689.979 L1744.79 689.979 L1745.35 689.979 L1745.91 689.979 L1746.47 689.979 L1747.03 689.979 L1747.59 689.979 L1748.15 689.979 L1748.71 689.979 L1749.27 689.979 L1749.83 689.979 L1750.39 689.979 L1750.95 689.979 L1751.51 689.979 L1752.06 689.979 L1752.62 689.979 L1753.18 689.979 L1753.74 689.979 L1754.3 689.979 L1754.86 689.979 L1755.42 689.979 L1755.98 689.979 L1756.54 689.979 L1757.1 689.979 L1757.66 689.979 L1758.22 689.979 L1758.78 689.979 L1759.34 689.979 L1759.89 689.979 L1760.45 689.979 L1761.01 689.979 L1761.57 689.979 L1762.13 689.979 L1762.69 689.979 L1763.25 689.979 L1763.81 689.979 L1764.37 689.979 L1764.93 689.979 L1765.49 689.979 L1766.05 689.979 L1766.61 689.979 L1767.16 689.979 L1767.72 689.979 L1768.28 689.979 L1768.84 689.979 L1769.4 689.979 L1769.96 689.979 L1770.52 689.979 L1771.08 689.979 L1771.64 689.979 L1772.2 689.979 L1772.76 689.979 L1773.32 689.979 L1773.88 689.979 L1774.43 689.979 L1774.99 689.979 L1775.55 689.979 L1776.11 689.979 L1776.67 689.979 L1777.23 689.979 L1777.79 689.979 L1778.35 689.979 L1778.91 689.979 L1779.47 689.979 L1780.03 689.979 L1780.59 689.979 L1781.15 689.979 L1781.71 689.979 L1782.26 689.979 L1782.82 689.979 L1783.38 689.979 L1783.94 689.979 L1784.5 689.979 L1785.06 689.979 L1785.62 689.979 L1786.18 689.979 L1786.74 689.979 L1787.3 689.979 L1787.86 689.979 L1788.42 689.979 L1788.98 689.979 L1789.53 689.979 L1790.09 689.979 L1790.65 689.979 L1791.21 689.979 L1791.77 689.979 L1792.33 689.979 L1792.89 689.979 L1793.45 689.979 L1794.01 689.979 L1794.57 689.979 L1795.13 689.979 L1795.69 689.979 L1796.25 689.979 L1796.8 689.979 L1797.36 689.979 L1797.92 689.979 L1798.48 689.979 L1799.04 689.979 L1799.6 689.979 L1800.16 689.979 L1800.72 689.979 L1801.28 689.979 L1801.84 689.979 L1802.4 689.979 L1802.96 689.979 L1803.52 689.979 L1804.08 689.979 L1804.63 689.979 L1805.19 689.979 L1805.75 689.979 L1806.31 689.979 L1806.87 689.979 L1807.43 689.979 L1807.99 689.979 L1808.55 689.979 L1809.11 689.979 L1809.67 689.979 L1810.23 689.979 L1810.79 689.979 L1811.35 689.979 L1811.9 689.979 L1812.46 689.979 L1813.02 689.979 L1813.58 689.979 L1814.14 689.979 L1814.7 689.979 L1815.26 689.979 L1815.82 689.979 L1816.38 689.979 L1816.94 689.979 L1817.5 689.979 L1818.06 689.979 L1818.62 689.979 L1819.18 689.979 L1819.73 689.979 L1820.29 689.979 L1820.85 689.979 L1821.41 689.979 L1821.97 689.979 L1822.53 689.979 L1823.09 689.979 L1823.65 689.979 L1824.21 689.979 L1824.77 689.979 L1825.33 689.979 L1825.89 689.979 L1826.45 689.979 L1827 689.979 L1827.56 689.979 L1828.12 689.979 L1828.68 689.979 L1829.24 689.979 L1829.8 689.979 L1830.36 689.979 L1830.92 689.979 L1831.48 689.979 L1832.04 689.979 L1832.6 689.979 L1833.16 689.979 L1833.72 689.979 L1834.27 689.979 L1834.83 689.979 L1835.39 689.979 L1835.95 689.979 L1836.51 689.979 L1837.07 689.979 L1837.63 689.979 L1838.19 689.979 L1838.19 681.086 L1837.63 681.086 L1837.07 681.086 L1836.51 681.086 L1835.95 681.086 L1835.39 681.086 L1834.83 681.086 L1834.27 681.086 L1833.72 681.086 L1833.16 681.086 L1832.6 681.086 L1832.04 681.086 L1831.48 681.086 L1830.92 681.086 L1830.36 681.086 L1829.8 681.086 L1829.24 681.086 L1828.68 681.086 L1828.12 681.086 L1827.56 681.086 L1827 681.086 L1826.45 681.086 L1825.89 681.086 L1825.33 681.086 L1824.77 681.086 L1824.21 681.086 L1823.65 681.086 L1823.09 681.086 L1822.53 681.086 L1821.97 681.086 L1821.41 681.086 L1820.85 681.086 L1820.29 681.086 L1819.73 681.086 L1819.18 681.086 L1818.62 681.086 L1818.06 681.086 L1817.5 681.086 L1816.94 681.086 L1816.38 681.086 L1815.82 681.086 L1815.26 681.086 L1814.7 681.086 L1814.14 681.086 L1813.58 681.086 L1813.02 681.086 L1812.46 681.086 L1811.9 681.086 L1811.35 681.086 L1810.79 681.086 L1810.23 681.086 L1809.67 681.086 L1809.11 681.086 L1808.55 681.086 L1807.99 681.086 L1807.43 681.086 L1806.87 681.086 L1806.31 681.086 L1805.75 681.086 L1805.19 681.086 L1804.63 681.086 L1804.08 681.086 L1803.52 681.086 L1802.96 681.086 L1802.4 681.086 L1801.84 681.086 L1801.28 681.086 L1800.72 681.086 L1800.16 681.086 L1799.6 681.086 L1799.04 681.086 L1798.48 681.086 L1797.92 681.086 L1797.36 681.086 L1796.8 681.086 L1796.25 681.086 L1795.69 681.086 L1795.13 681.086 L1794.57 681.086 L1794.01 681.086 L1793.45 681.086 L1792.89 681.086 L1792.33 681.086 L1791.77 681.086 L1791.21 681.086 L1790.65 681.086 L1790.09 681.086 L1789.53 681.086 L1788.98 681.086 L1788.42 681.086 L1787.86 681.086 L1787.3 681.086 L1786.74 681.086 L1786.18 681.086 L1785.62 681.086 L1785.06 681.086 L1784.5 681.086 L1783.94 681.086 L1783.38 681.086 L1782.82 681.086 L1782.26 681.086 L1781.71 681.086 L1781.15 681.086 L1780.59 681.086 L1780.03 681.086 L1779.47 681.086 L1778.91 681.086 L1778.35 681.086 L1777.79 681.086 L1777.23 681.086 L1776.67 681.086 L1776.11 681.086 L1775.55 681.086 L1774.99 681.086 L1774.43 681.086 L1773.88 681.086 L1773.32 681.086 L1772.76 681.086 L1772.2 681.086 L1771.64 681.086 L1771.08 681.086 L1770.52 681.086 L1769.96 681.086 L1769.4 681.086 L1768.84 681.086 L1768.28 681.086 L1767.72 681.086 L1767.16 681.086 L1766.61 681.086 L1766.05 681.086 L1765.49 681.086 L1764.93 681.086 L1764.37 681.086 L1763.81 681.086 L1763.25 681.086 L1762.69 681.086 L1762.13 681.086 L1761.57 681.086 L1761.01 681.086 L1760.45 681.086 L1759.89 681.086 L1759.34 681.086 L1758.78 681.086 L1758.22 681.086 L1757.66 681.086 L1757.1 681.086 L1756.54 681.086 L1755.98 681.086 L1755.42 681.086 L1754.86 681.086 L1754.3 681.086 L1753.74 681.086 L1753.18 681.086 L1752.62 681.086 L1752.06 681.086 L1751.51 681.086 L1750.95 681.086 L1750.39 681.086 L1749.83 681.086 L1749.27 681.086 L1748.71 681.086 L1748.15 681.086 L1747.59 681.086 L1747.03 681.086 L1746.47 681.086 L1745.91 681.086 L1745.35 681.086 L1744.79 681.086 L1744.24 681.086 L1743.68 681.086 L1743.12 681.086 L1742.56 681.086 L1742 681.086 L1741.44 681.086 L1740.88 681.086 L1740.32 681.086 L1739.76 681.086 L1739.2 681.086 L1738.64 681.086 L1738.08 681.086 L1737.52 681.086 L1736.97 681.086 L1736.41 681.086 L1735.85 681.086 L1735.29 681.086 L1734.73 681.086 L1734.17 681.086 L1733.61 681.086 L1733.05 681.086 L1732.49 681.086 L1731.93 681.086 L1731.37 681.086 L1730.81 681.086 L1730.25 681.086 L1729.69 681.086 L1729.14 681.086 L1728.58 681.086 L1728.02 681.086 L1727.46 681.086 L1726.9 681.086 L1726.34 681.086 L1725.78 681.086 L1725.22 681.086 L1724.66 681.086 L1724.1 681.086 L1723.54 681.086 L1722.98 681.086 L1722.42 681.086 L1721.87 681.086 L1721.31 681.086 L1720.75 681.086 L1720.19 681.086 L1719.63 681.086 L1719.07 681.086 L1718.51 681.086 L1717.95 681.086 L1717.39 681.086 L1716.83 681.086 L1716.27 681.086 L1715.71 681.086 L1715.15 681.086 L1714.6 681.086 L1714.04 681.086 L1713.48 681.086 L1712.92 681.086 L1712.36 681.086 L1711.8 681.086 L1711.24 681.086 L1710.68 681.086 L1710.12 681.086 L1709.56 681.086 L1709 681.086 L1708.44 681.086 L1707.88 681.086 L1707.32 681.086 L1706.77 681.086 L1706.21 681.086 L1705.65 681.086 L1705.09 681.086 L1704.53 681.086 L1703.97 681.086 L1703.41 681.086 L1702.85 681.086 L1702.29 681.086 L1701.73 681.086 L1701.17 681.086 L1700.61 681.086 L1700.05 681.086 L1699.5 681.086 L1698.94 681.086 L1698.38 681.086 L1697.82 681.086 L1697.26 681.086 L1696.7 681.086 L1696.14 681.086 L1695.58 681.086 L1695.02 681.086 L1694.46 681.086 L1693.9 681.086 L1693.34 681.086 L1692.78 681.086 L1692.23 681.086 L1691.67 681.086 L1691.11 681.086 L1690.55 681.086 L1689.99 681.086 L1689.43 681.086 L1688.87 681.086 L1688.31 681.086 L1687.75 681.086 L1687.19 681.086 L1686.63 681.086 L1686.07 681.086 L1685.51 681.086 L1684.95 681.086 L1684.4 681.086 L1683.84 681.086 L1683.28 681.086 L1682.72 681.086 L1682.16 681.086 L1681.6 681.086 L1681.04 681.086 L1680.48 681.086 L1679.92 681.086 L1679.36 681.086 L1678.8 681.086 L1678.24 681.086 L1677.68 681.086 L1677.13 681.086 L1676.57 681.086 L1676.01 681.086 L1675.45 681.086 L1674.89 681.086 L1674.33 681.086 L1673.77 681.086 L1673.21 681.086 L1672.65 681.086 L1672.09 681.086 L1671.53 681.086 L1670.97 681.086 L1670.41 681.086 L1669.85 681.086 L1669.3 681.086 L1668.74 681.086 L1668.18 681.086 L1667.62 681.086 L1667.06 681.086 L1666.5 681.086 L1665.94 681.086 L1665.38 681.086 L1664.82 681.086 L1664.26 681.086 L1663.7 681.086 L1663.14 681.086 L1662.58 681.086 L1662.03 681.086 L1661.47 681.086 L1660.91 681.086 L1660.35 681.086 L1659.79 681.086 L1659.23 681.086 L1658.67 681.086 L1658.11 681.086 L1657.55 681.086 L1656.99 681.086 L1656.43 681.086 L1655.87 681.086 L1655.31 681.086 L1654.76 681.086 L1654.2 681.086 L1653.64 681.086 L1653.08 681.086 L1652.52 681.086 L1651.96 681.086 L1651.4 681.086 L1650.84 681.086 L1650.28 681.086 L1649.72 681.086 L1649.16 681.086 L1648.6 681.086 L1648.04 681.086 L1647.48 681.086 L1646.93 681.086 L1646.37 681.086 L1645.81 681.086 L1645.25 681.086 L1644.69 681.086 L1644.13 681.086 L1643.57 681.086 L1643.01 681.086 L1642.45 681.086 L1641.89 681.086 L1641.33 681.086 L1640.77 681.086 L1640.21 681.086 L1639.66 681.086 L1639.1 681.086 L1638.54 681.086 L1637.98 681.086 L1637.42 681.086 L1636.86 681.086 L1636.3 681.086 L1635.74 681.086 L1635.18 681.086 L1634.62 681.086 L1634.06 681.086 L1633.5 681.086 L1632.94 681.086 L1632.39 681.086 L1631.83 681.086 L1631.27 681.086 L1630.71 681.086 L1630.15 681.086 L1629.59 681.086 L1629.03 681.086 L1628.47 681.086 L1627.91 681.086 L1627.35 681.086 L1626.79 681.086 L1626.23 681.086 L1625.67 681.086 L1625.11 681.086 L1624.56 681.086 L1624 681.086 L1623.44 681.086 L1622.88 681.086 L1622.32 681.086 L1621.76 681.086 L1621.2 681.086 L1620.64 681.086 L1620.08 681.086 L1619.52 681.086 L1618.96 681.086 L1618.4 681.086 L1617.84 681.086 L1617.29 681.086 L1616.73 681.086 L1616.17 681.086 L1615.61 681.086 L1615.05 681.086 L1614.49 681.086 L1613.93 681.086 L1613.37 681.086 L1612.81 681.086 L1612.25 681.086 L1611.69 681.086 L1611.13 681.086 L1610.57 681.086 L1610.02 681.086 L1609.46 681.086 L1608.9 681.086 L1608.34 681.086 L1607.78 681.086 L1607.22 681.086 L1606.66 681.086 L1606.1 681.086 L1605.54 681.086 L1604.98 681.086 L1604.42 681.086 L1603.86 681.086 L1603.3 681.086 L1602.74 681.086 L1602.19 681.086 L1601.63 681.086 L1601.07 681.086 L1600.51 681.086 L1599.95 681.086 L1599.39 681.086 L1598.83 681.086 L1598.27 681.086 L1597.71 681.086 L1597.15 681.086 L1596.59 681.086 L1596.03 681.086 L1595.47 681.086 L1594.92 681.086 L1594.36 681.086 L1593.8 681.086 L1593.24 681.086 L1592.68 681.086 L1592.12 681.086 L1591.56 681.086 L1591 681.086 L1590.44 681.086 L1589.88 681.086 L1589.32 681.086 L1588.76 681.086 L1588.2 681.086 L1587.65 681.086 L1587.09 681.086 L1586.53 681.086 L1585.97 681.086 L1585.41 681.086 L1584.85 681.086 L1584.29 681.086 L1583.73 681.086 L1583.17 681.086 L1582.61 681.086 L1582.05 681.086 L1581.49 681.086 L1580.93 681.086 L1580.37 681.086 L1579.82 681.086 L1579.26 681.086 L1578.7 681.086 L1578.14 681.086 L1577.58 681.086 L1577.02 681.086 L1576.46 681.086 L1575.9 681.086 L1575.34 681.086 L1574.78 681.086 L1574.22 681.086 L1573.66 681.086 L1573.1 681.086 L1572.55 681.086 L1571.99 681.086 L1571.43 681.086 L1570.87 681.086 L1570.31 681.086 L1569.75 681.086 L1569.19 681.086 L1568.63 681.086 L1568.07 681.086 L1567.51 681.086 L1566.95 681.086 L1566.39 681.086 L1565.83 681.086 L1565.28 681.086 L1564.72 681.086 L1564.16 681.086 L1563.6 681.086 L1563.04 681.086 L1562.48 681.086 L1561.92 681.086 L1561.36 681.086 L1560.8 681.086 L1560.24 681.086 L1559.68 681.086 L1559.12 681.086 L1558.56 681.086 L1558 681.086 L1557.45 681.086 L1556.89 681.086 L1556.33 681.086 L1555.77 681.086 L1555.21 681.086 L1554.65 681.086 L1554.09 681.086 L1553.53 681.086 L1552.97 681.086 L1552.41 681.086 L1551.85 681.086 L1551.29 681.086 L1550.73 681.086 L1550.18 681.086 L1549.62 681.086 L1549.06 681.086 L1548.5 681.086 L1547.94 681.086 L1547.38 681.086 L1546.82 681.086 L1546.26 681.086 L1545.7 681.086 L1545.14 681.086 L1544.58 681.086 L1544.02 681.086 L1543.46 681.086 L1542.9 681.086 L1542.35 681.086 L1541.79 681.086 L1541.23 681.086 L1540.67 681.086 L1540.11 681.086 L1539.55 681.086 L1538.99 681.086 L1538.43 681.086 L1537.87 681.086 L1537.31 681.086 L1536.75 681.086 L1536.19 681.086 L1535.63 681.086 L1535.08 681.086 L1534.52 681.086 L1533.96 681.086 L1533.4 681.086 L1532.84 681.086 L1532.28 681.086 L1531.72 681.086 L1531.16 681.086 L1530.6 681.086 L1530.04 681.086 L1529.48 681.086 L1528.92 681.086 L1528.36 681.086 L1527.81 681.086 L1527.25 681.086 L1526.69 681.086 L1526.13 681.086 L1525.57 681.086 L1525.01 681.086 L1524.45 681.086 L1523.89 681.086 L1523.33 681.086 L1522.77 681.086 L1522.21 681.086 L1521.65 681.086 L1521.09 681.086 L1520.53 681.086 L1519.98 681.086 L1519.42 681.086 L1518.86 681.086 L1518.3 681.086 L1517.74 681.086 L1517.18 681.086 L1516.62 681.086 L1516.06 681.086 L1515.5 681.086 L1514.94 681.086 L1514.38 681.086 L1513.82 681.086 L1513.26 681.086 L1512.71 681.086 L1512.15 681.086 L1511.59 681.086 L1511.03 681.086 L1510.47 681.086 L1509.91 681.086 L1509.35 681.086 L1508.79 681.086 L1508.23 681.086 L1507.67 681.086 L1507.11 681.086 L1506.55 681.086 L1505.99 681.086 L1505.44 681.086 L1504.88 681.086 L1504.32 681.086 L1503.76 681.086 L1503.2 681.086 L1502.64 681.086 L1502.08 681.086 L1501.52 681.086 L1500.96 681.086 L1500.4 681.086 L1499.84 681.086 L1499.28 681.086 L1498.72 681.086 L1498.16 681.086 L1497.61 681.086 L1497.05 681.086 L1496.49 681.086 L1495.93 681.086 L1495.37 681.086 L1494.81 681.086 L1494.25 681.086 L1493.69 681.086 L1493.13 681.086 L1492.57 681.086 L1492.01 681.086 L1491.45 681.086 L1490.89 681.086 L1490.34 681.086 L1489.78 681.086 L1489.22 681.086 L1488.66 681.086 L1488.1 681.086 L1487.54 681.086 L1486.98 681.086 L1486.42 681.086 L1485.86 681.086 L1485.3 681.086 L1484.74 681.086 L1484.18 681.086 L1483.62 681.086 L1483.07 681.086 L1482.51 681.086 L1481.95 681.086 L1481.39 681.086 L1480.83 681.086 L1480.27 681.086 L1479.71 681.086 L1479.15 681.086 L1478.59 681.086 L1478.03 681.086 L1477.47 681.086 L1476.91 681.086 L1476.35 681.086 L1475.79 681.086 L1475.24 681.086 L1474.68 681.086 L1474.12 681.086 L1473.56 681.086 L1473 681.086 L1472.44 681.086 L1471.88 681.086 L1471.32 681.086 L1470.76 681.086 L1470.2 681.086 L1469.64 681.086 L1469.08 681.086 L1468.52 681.086 L1467.97 681.086 L1467.41 681.086 L1466.85 681.086 L1466.29 681.086 L1465.73 681.086 L1465.17 681.086 L1464.61 681.086 L1464.05 681.086 L1463.49 681.086 L1462.93 681.086 L1462.37 681.086 L1461.81 681.086 L1461.25 681.086 L1460.7 681.086 L1460.14 681.086 L1459.58 681.086 L1459.02 681.086 L1458.46 681.086 L1457.9 681.086 L1457.34 681.086 L1456.78 681.086 L1456.22 681.086 L1455.66 681.086 L1455.1 681.086 L1454.54 681.086 L1453.98 681.086 L1453.42 681.086 L1452.87 681.086 L1452.31 681.086 L1451.75 681.086 L1451.19 681.086 L1450.63 681.086 L1450.07 681.086 L1449.51 681.086 L1448.95 681.086 L1448.39 681.086 L1447.83 681.086 L1447.27 681.086 L1446.71 681.086 L1446.15 681.086 L1445.6 681.086 L1445.04 681.086 L1444.48 681.086 L1443.92 681.086 L1443.36 681.086 L1442.8 681.086 L1442.24 681.086 L1441.68 681.086 L1441.12 681.086 L1440.56 681.086 L1440 681.086 L1439.44 681.086 L1438.88 681.086 L1438.33 681.086 L1437.77 681.086 L1437.21 681.086 L1436.65 681.086 L1436.09 681.086 L1435.53 681.086 L1434.97 681.086 L1434.41 681.086 L1433.85 681.086 L1433.29 681.086 L1432.73 681.086 L1432.17 681.086 L1431.61 681.086 L1431.05 681.086 L1430.5 681.086 L1429.94 681.086 L1429.38 681.086 L1428.82 681.086 L1428.26 681.086 L1427.7 681.086 L1427.14 681.086 L1426.58 681.086 L1426.02 681.086 L1425.46 681.086 L1424.9 681.086 L1424.34 681.086 L1423.78 681.086 L1423.23 681.086 L1422.67 681.086 L1422.11 681.086 L1421.55 681.086 L1420.99 681.086 L1420.43 681.086 L1419.87 681.086 L1419.31 681.086 L1418.75 681.086 L1418.19 681.086 L1417.63 681.086 L1417.07 681.086 L1416.51 681.086 L1415.95 681.086 L1415.4 681.086 L1414.84 681.086 L1414.28 681.086 L1413.72 681.086 L1413.16 681.086 L1412.6 681.086 L1412.04 681.086 L1411.48 681.086 L1410.92 681.086 L1410.36 681.086 L1409.8 681.086 L1409.24 681.086 L1408.68 681.086 L1408.13 681.086 L1407.57 681.086 L1407.01 681.086 L1406.45 681.086 L1405.89 681.086 L1405.33 681.086 L1404.77 681.086 L1404.21 681.086 L1403.65 681.086 L1403.09 681.086 L1402.53 681.086 L1401.97 681.086 L1401.41 681.086 L1400.86 681.086 L1400.3 681.086 L1399.74 681.086 L1399.18 681.086 L1398.62 681.086 L1398.06 681.086 L1397.5 681.086 L1396.94 681.086 L1396.38 681.086 L1395.82 681.086 L1395.26 681.086 L1394.7 681.086 L1394.14 681.086 L1393.58 681.086 L1393.03 681.086 L1392.47 681.086 L1391.91 681.086 L1391.35 681.086 L1390.79 681.086 L1390.23 681.086 L1389.67 681.086 L1389.11 681.086 L1388.55 681.086 L1387.99 681.086 L1387.43 681.086 L1386.87 681.086 L1386.31 681.086 L1385.76 681.086 L1385.2 681.086 L1384.64 681.086 L1384.08 681.086 L1383.52 681.086 L1382.96 681.086 L1382.4 681.086 L1381.84 681.086 L1381.28 681.086 L1380.72 681.086 L1380.16 681.086 L1379.6 681.086 L1379.04 681.086 L1378.49 681.086 L1377.93 681.086 L1377.37 681.086 L1376.81 681.086 L1376.25 681.086 L1375.69 681.086 L1375.13 681.086 L1374.57 681.086 L1374.01 681.086 L1373.45 681.086 L1372.89 681.086 L1372.33 681.086 L1371.77 681.086 L1371.21 681.086 L1370.66 681.086 L1370.1 681.086 L1369.54 681.086 L1368.98 681.086 L1368.42 681.086 L1367.86 681.086 L1367.3 681.086 L1366.74 681.086 L1366.18 681.086 L1365.62 681.086 L1365.06 681.086 L1364.5 681.086 L1363.94 681.086 L1363.39 681.086 L1362.83 681.086 L1362.27 681.086 L1361.71 681.086 L1361.15 681.086 L1360.59 681.086 L1360.03 681.086 L1359.47 681.086 L1358.91 681.086 L1358.35 681.086 L1357.79 681.086 L1357.23 681.086 L1356.67 681.086 L1356.12 681.086 L1355.56 681.086 L1355 681.086 L1354.44 681.086 L1353.88 681.086 L1353.32 681.086 L1352.76 681.086 L1352.2 681.086 L1351.64 681.086 L1351.08 681.086 L1350.52 681.086 L1349.96 681.086 L1349.4 681.086 L1348.84 681.086 L1348.29 681.086 L1347.73 681.086 L1347.17 681.086 L1346.61 681.086 L1346.05 681.086 L1345.49 681.086 L1344.93 681.086 L1344.37 681.086 L1343.81 681.086 L1343.25 681.086 L1342.69 681.086 L1342.13 681.086 L1341.57 681.086 L1341.02 681.086 L1340.46 681.086 L1339.9 681.086 L1339.34 681.086 L1338.78 681.086 L1338.22 681.086 L1337.66 681.086 L1337.1 681.086 L1336.54 681.086 L1335.98 681.086 L1335.42 681.086 L1334.86 681.086 L1334.3 681.086 L1333.75 681.086 L1333.19 681.086 L1332.63 681.086 L1332.07 681.086 L1331.51 681.086 L1330.95 681.086 L1330.39 681.086 L1329.83 681.086 L1329.27 681.086 L1328.71 681.086 L1328.15 681.086 L1327.59 681.086 L1327.03 681.086 L1326.47 681.086 L1325.92 681.086 L1325.36 681.086 L1324.8 681.086 L1324.24 681.086 L1323.68 681.086 L1323.12 681.086 L1322.56 681.086 L1322 681.086 L1321.44 681.086 L1320.88 681.086 L1320.32 681.086 L1319.76 681.086 L1319.2 681.086 L1318.65 681.086 L1318.09 681.086 L1317.53 681.086 L1316.97 681.086 L1316.41 681.086 L1315.85 681.086 L1315.29 681.086 L1314.73 681.086 L1314.17 681.086 L1313.61 681.086 L1313.05 681.086 L1312.49 681.086 L1311.93 681.086 L1311.38 681.086 L1310.82 681.086 L1310.26 681.086 L1309.7 681.086 L1309.14 681.086 L1308.58 681.086 L1308.02 681.086 L1307.46 681.086 L1306.9 681.086 L1306.34 681.086 L1305.78 681.086 L1305.22 681.086 L1304.66 681.086 L1304.1 681.086 L1303.55 681.086 L1302.99 681.086 L1302.43 681.086 L1301.87 681.086 L1301.31 681.086 L1300.75 681.086 L1300.19 681.086 L1299.63 681.086 L1299.07 681.086 L1298.51 681.086 L1297.95 681.086 L1297.39 681.086 L1296.83 681.086 L1296.28 681.086 L1295.72 681.086 L1295.16 681.086 L1294.6 681.086 L1294.04 681.086 L1293.48 681.086 L1292.92 681.086 L1292.36 681.086 L1291.8 681.086 L1291.24 681.086 L1290.68 681.086 L1290.12 681.086 L1289.56 681.086 L1289 681.086 L1288.45 681.086 L1287.89 681.086 L1287.33 681.086 L1286.77 681.086 L1286.21 681.086 L1285.65 681.086 L1285.09 681.086 L1284.53 681.086 L1283.97 681.086 L1283.41 681.086 L1282.85 681.086 L1282.29 681.086 L1281.73 681.086 L1281.18 681.086 L1280.62 681.086 L1280.06 681.086 L1279.5 681.086 L1278.94 681.086 L1278.38 681.086 L1277.82 681.086 L1277.26 681.086 L1276.7 681.086 L1276.14 681.086 L1275.58 681.086 L1275.02 681.086 L1274.46 681.086 L1273.91 681.086 L1273.35 681.086 L1272.79 681.086 L1272.23 681.086 L1271.67 681.086 L1271.11 681.086 L1270.55 681.086 L1269.99 681.086 L1269.43 681.086 L1268.87 681.086 L1268.31 681.086 L1267.75 681.086 L1267.19 681.086 L1266.63 681.086 L1266.08 681.086 L1265.52 681.086 L1264.96 681.086 L1264.4 681.086 L1263.84 681.086 L1263.28 681.086 L1262.72 681.086 L1262.16 681.086 L1261.6 681.086 L1261.04 681.086 L1260.48 681.086 L1259.92 681.086 L1259.36 681.086 L1258.81 681.086 L1258.25 681.086 L1257.69 681.086 L1257.13 681.086 L1256.57 681.086 L1256.01 681.086 L1255.45 681.086 L1254.89 681.086 L1254.33 681.086 L1253.77 681.086 L1253.21 681.086 L1252.65 681.086 L1252.09 681.086 L1251.54 681.086 L1250.98 681.086 L1250.42 681.086 L1249.86 681.086 L1249.3 681.086 L1248.74 681.086 L1248.18 681.086 L1247.62 681.086 L1247.06 681.086 L1246.5 681.086 L1245.94 681.086 L1245.38 681.086 L1244.82 681.086 L1244.26 681.086 L1243.71 681.086 L1243.15 681.086 L1242.59 681.086 L1242.03 681.086 L1241.47 681.086 L1240.91 681.086 L1240.35 681.086 L1239.79 681.086 L1239.23 681.086 L1238.67 681.086 L1238.11 681.086 L1237.55 681.086 L1236.99 681.086 L1236.44 681.086 L1235.88 681.086 L1235.32 681.086 L1234.76 681.086 L1234.2 681.086 L1233.64 681.086 L1233.08 681.086 L1232.52 681.086 L1231.96 681.086 L1231.4 681.086 L1230.84 681.086 L1230.28 681.086 L1229.72 681.086 L1229.17 681.086 L1228.61 681.086 L1228.05 681.086 L1227.49 681.086 L1226.93 681.086 L1226.37 681.086 L1225.81 681.086 L1225.25 681.086 L1224.69 681.086 L1224.13 681.086 L1223.57 681.086 L1223.01 681.086 L1222.45 681.086 L1221.89 681.086 L1221.34 681.086 L1220.78 681.086 L1220.22 681.086 L1219.66 681.086 L1219.1 681.086 L1218.54 681.086 L1217.98 681.086 L1217.42 681.086 L1216.86 681.086 L1216.3 681.086 L1215.74 681.086 L1215.18 681.086 L1214.62 681.086 L1214.07 681.086 L1213.51 681.086 L1212.95 681.086 L1212.39 681.086 L1211.83 681.086 L1211.27 681.086 L1210.71 681.086 L1210.15 681.086 L1209.59 681.086 L1209.03 681.086 L1208.47 681.086 L1207.91 681.086 L1207.35 681.086 L1206.8 681.086 L1206.24 681.086 L1205.68 681.086 L1205.12 681.086 L1204.56 681.086 L1204 681.086 L1203.44 681.086 L1202.88 681.086 L1202.32 681.086 L1201.76 681.086 L1201.2 681.086 L1200.64 681.086 L1200.08 681.086 L1199.52 681.086 L1198.97 681.086 L1198.41 681.086 L1197.85 681.086 L1197.29 681.086 L1196.73 681.086 L1196.17 681.086 L1195.61 681.086 L1195.05 681.086 L1194.49 681.086 L1193.93 681.086 L1193.37 681.086 L1192.81 681.086 L1192.25 681.086 L1191.7 681.086 L1191.14 681.086 L1190.58 681.086 L1190.02 681.086 L1189.46 681.086 L1188.9 681.086 L1188.34 681.086 L1187.78 681.086 L1187.22 681.086 L1186.66 681.086 L1186.1 681.086 L1185.54 681.086 L1184.98 681.086 L1184.43 681.086 L1183.87 681.086 L1183.31 681.086 L1182.75 681.086 L1182.19 681.086 L1181.63 681.086 L1181.07 681.086 L1180.51 681.086 L1179.95 681.086 L1179.39 681.086 L1178.83 681.086 L1178.27 681.086 L1177.71 681.086 L1177.15 681.086 L1176.6 681.086 L1176.04 681.086 L1175.48 681.086 L1174.92 681.086 L1174.36 681.086 L1173.8 681.086 L1173.24 681.086 L1172.68 681.086 L1172.12 681.086 L1171.56 681.086 L1171 681.086 L1170.44 681.086 L1169.88 681.086 L1169.33 681.086 L1168.77 681.086 L1168.21 681.086 L1167.65 681.086 L1167.09 681.086 L1166.53 681.086 L1165.97 681.086 L1165.41 681.086 L1164.85 681.086 L1164.29 681.086 L1163.73 681.086 L1163.17 681.086 L1162.61 681.086 L1162.05 681.086 L1161.5 681.086 L1160.94 681.086 L1160.38 681.086 L1159.82 681.086 L1159.26 681.086 L1158.7 681.086 L1158.14 681.086 L1157.58 681.086 L1157.02 681.086 L1156.46 681.086 L1155.9 681.086 L1155.34 681.086 L1154.78 681.086 L1154.23 681.086 L1153.67 681.086 L1153.11 681.086 L1152.55 681.086 L1151.99 681.086 L1151.43 681.086 L1150.87 681.086 L1150.31 681.086 L1149.75 681.086 L1149.19 681.086 L1148.63 681.086 L1148.07 681.086 L1147.51 681.086 L1146.96 681.086 L1146.4 681.086 L1145.84 681.086 L1145.28 681.086 L1144.72 681.086 L1144.16 681.086 L1143.6 681.086 L1143.04 681.086 L1142.48 681.086 L1141.92 681.086 L1141.36 681.086 L1140.8 681.086 L1140.24 681.086 L1139.68 681.086 L1139.13 681.086 L1138.57 681.086 L1138.01 681.086 L1137.45 681.086 L1136.89 681.086 L1136.33 681.086 L1135.77 681.086 L1135.21 681.086 L1134.65 681.086 L1134.09 681.086 L1133.53 681.086 L1132.97 681.086 L1132.41 681.086 L1131.86 681.086 L1131.3 681.086 L1130.74 681.086 L1130.18 681.086 L1129.62 681.086 L1129.06 681.086 L1128.5 681.086 L1127.94 681.086 L1127.38 681.086 L1126.82 681.086 L1126.26 681.086 L1125.7 681.086 L1125.14 681.086 L1124.59 681.086 L1124.03 681.086 L1123.47 681.086 L1122.91 681.086 L1122.35 681.086 L1121.79 681.086 L1121.23 681.086 L1120.67 681.086 L1120.11 681.086 L1119.55 681.086 L1118.99 681.086 L1118.43 681.086 L1117.87 681.086 L1117.31 681.086 L1116.76 681.086 L1116.2 681.086 L1115.64 681.086 L1115.08 681.086 L1114.52 681.086 L1113.96 681.086 L1113.4 681.086 L1112.84 681.086 L1112.28 681.086 L1111.72 681.086 L1111.16 681.086 L1110.6 681.086 L1110.04 681.086 L1109.49 681.086 L1108.93 681.086 L1108.37 681.086 L1107.81 681.086 L1107.25 681.086 L1106.69 681.086 L1106.13 681.086 L1105.57 681.086 L1105.01 681.086 L1104.45 681.086 L1103.89 681.086 L1103.33 681.086 L1102.77 681.086 L1102.22 681.086 L1101.66 681.086 L1101.1 681.086 L1100.54 681.086 L1099.98 681.086 L1099.42 681.086 L1098.86 681.086 L1098.3 681.086 L1097.74 681.086 L1097.18 681.086 L1096.62 681.086 L1096.06 681.086 L1095.5 681.086 L1094.94 681.086 L1094.39 681.086 L1093.83 681.086 L1093.27 681.086 L1092.71 681.086 L1092.15 681.086 L1091.59 681.086 L1091.03 681.086 L1090.47 681.086 L1089.91 681.086 L1089.35 681.086 L1088.79 681.086 L1088.23 681.086 L1087.67 681.086 L1087.12 681.086 L1086.56 681.086 L1086 681.086 L1085.44 681.086 L1084.88 681.086 L1084.32 681.086 L1083.76 681.086 L1083.2 681.086 L1082.64 681.086 L1082.08 681.086 L1081.52 681.086 L1080.96 681.086 L1080.4 681.086 L1079.85 681.086 L1079.29 681.086 L1078.73 681.086 L1078.17 681.086 L1077.61 681.086 L1077.05 681.086 L1076.49 681.086 L1075.93 681.086 L1075.37 681.086 L1074.81 681.086 L1074.25 681.086 L1073.69 681.086 L1073.13 681.086 L1072.57 681.086 L1072.02 681.086 L1071.46 681.086 L1070.9 681.086 L1070.34 681.086 L1069.78 681.086 L1069.22 681.086 L1068.66 681.086 L1068.1 681.086 L1067.54 681.086 L1066.98 681.086 L1066.42 681.086 L1065.86 681.086 L1065.3 681.086 L1064.75 681.086 L1064.19 681.086 L1063.63 681.086 L1063.07 681.086 L1062.51 681.086 L1061.95 681.086 L1061.39 681.086 L1060.83 681.086 L1060.27 681.086 L1059.71 681.086 L1059.15 681.086 L1058.59 681.086 L1058.03 681.086 L1057.48 681.086 L1056.92 681.086 L1056.36 681.086 L1055.8 681.086 L1055.24 681.086 L1054.68 681.086 L1054.12 681.086 L1053.56 681.086 L1053 681.086 L1052.44 681.086 L1051.88 681.086 L1051.32 681.086 L1050.76 681.086 L1050.2 681.086 L1049.65 681.086 L1049.09 681.086 L1048.53 681.086 L1047.97 681.086 L1047.41 681.086 L1046.85 681.086 L1046.29 681.086 L1045.73 681.086 L1045.17 681.086 L1044.61 681.086 L1044.05 681.086 L1043.49 681.086 L1042.93 681.086 L1042.38 681.086 L1041.82 681.086 L1041.26 681.086 L1040.7 681.086 L1040.14 681.086 L1039.58 681.086 L1039.02 681.086 L1038.46 681.086 L1037.9 681.086 L1037.34 681.086 L1036.78 681.086 L1036.22 681.086 L1035.66 681.086 L1035.1 681.086 L1034.55 681.086 L1033.99 681.086 L1033.43 681.086 L1032.87 681.086 L1032.31 681.086 L1031.75 681.086 L1031.19 681.086 L1030.63 681.086 L1030.07 681.086 L1029.51 681.086 L1028.95 681.086 L1028.39 681.086 L1027.83 681.086 L1027.28 681.086 L1026.72 681.086 L1026.16 681.086 L1025.6 681.086 L1025.04 681.086 L1024.48 681.086 L1023.92 681.086 L1023.36 681.086 L1022.8 681.086 L1022.24 681.086 L1021.68 681.086 L1021.12 681.086 L1020.56 681.086 L1020.01 681.086 L1019.45 681.086 L1018.89 681.086 L1018.33 681.086 L1017.77 681.086 L1017.21 681.086 L1016.65 681.086 L1016.09 681.086 L1015.53 681.086 L1014.97 681.086 L1014.41 681.086 L1013.85 681.086 L1013.29 681.086 L1012.73 681.086 L1012.18 681.086 L1011.62 681.086 L1011.06 681.086 L1010.5 681.086 L1009.94 681.086 L1009.38 681.086 L1008.82 681.086 L1008.26 681.086 L1007.7 681.086 L1007.14 681.086 L1006.58 681.086 L1006.02 681.086 L1005.46 681.086 L1004.91 681.086 L1004.35 681.086 L1003.79 681.086 L1003.23 681.086 L1002.67 681.086 L1002.11 681.086 L1001.55 681.086 L1000.99 681.086 L1000.43 681.086 L999.872 681.086 L999.313 681.086 L998.754 681.086 L998.194 681.086 L997.635 681.086 L997.076 681.086 L996.517 681.086 L995.957 681.086 L995.398 681.086 L994.839 681.086 L994.28 681.086 L993.72 681.086 L993.161 681.086 L992.602 681.086 L992.043 681.086 L991.483 681.086 L990.924 681.086 L990.365 681.086 L989.806 681.086 L989.246 681.086 L988.687 681.086 L988.128 681.086 L987.569 681.086 L987.009 681.086 L986.45 681.086 L985.891 681.086 L985.332 681.086 L984.772 681.086 L984.213 681.086 L983.654 681.086 L983.095 681.086 L982.535 681.086 L981.976 681.086 L981.417 681.086 L980.858 681.086 L980.298 681.086 L979.739 681.086 L979.18 681.086 L978.621 681.086 L978.061 681.086 L977.502 681.086 L976.943 681.086 L976.384 681.086 L975.824 681.086 L975.265 681.086 L974.706 681.086 L974.147 681.086 L973.587 681.086 L973.028 681.086 L972.469 681.086 L971.91 681.086 L971.35 681.086 L970.791 681.086 L970.232 681.086 L969.673 681.086 L969.113 681.086 L968.554 681.086 L967.995 681.086 L967.436 681.086 L966.876 681.086 L966.317 681.086 L965.758 681.086 L965.199 681.086 L964.639 681.086 L964.08 681.086 L963.521 681.086 L962.962 681.086 L962.402 681.086 L961.843 681.086 L961.284 681.086 L960.725 681.086 L960.165 681.086 L959.606 681.086 L959.047 681.086 L958.488 681.086 L957.928 681.086 L957.369 681.086 L956.81 681.086 L956.251 681.086 L955.691 681.086 L955.132 681.086 L954.573 681.086 L954.014 681.086 L953.454 681.086 L952.895 681.086 L952.336 681.086 L951.777 681.086 L951.217 681.086 L950.658 681.086 L950.099 681.086 L949.54 681.086 L948.98 681.086 L948.421 681.086 L947.862 681.086 L947.303 681.086 L946.743 681.086 L946.184 681.086 L945.625 681.086 L945.066 681.086 L944.506 681.086 L943.947 681.086 L943.388 681.086 L942.829 681.086 L942.269 681.086 L941.71 681.086 L941.151 681.086 L940.592 681.086 L940.032 681.086 L939.473 681.086 L938.914 681.086 L938.355 681.086 L937.795 681.086 L937.236 681.086 L936.677 681.086 L936.118 681.086 L935.558 681.086 L934.999 681.086 L934.44 681.086 L933.881 681.086 L933.321 681.086 L932.762 681.086 L932.203 681.086 L931.644 681.086 L931.084 681.086 L930.525 681.086 L929.966 681.086 L929.406 681.086 L928.847 681.086 L928.288 681.086 L927.729 681.086 L927.169 681.086 L926.61 681.086 L926.051 681.086 L925.492 681.086 L924.932 681.086 L924.373 681.086 L923.814 681.086 L923.255 681.086 L922.695 681.086 L922.136 681.086 L921.577 681.086 L921.018 681.086 L920.458 681.086 L919.899 681.086 L919.34 681.086 L918.781 681.086 L918.221 681.086 L917.662 681.086 L917.103 681.086 L916.544 681.086 L915.984 681.086 L915.425 681.086 L914.866 681.086 L914.307 681.086 L913.747 681.086 L913.188 681.086 L912.629 681.086 L912.07 681.086 L911.51 681.086 L910.951 681.086 L910.392 681.086 L909.833 681.086 L909.273 681.086 L908.714 681.086 L908.155 681.086 L907.596 681.086 L907.036 681.086 L906.477 681.086 L905.918 681.086 L905.359 681.086 L904.799 681.086 L904.24 681.086 L903.681 681.086 L903.122 681.086 L902.562 681.086 L902.003 681.086 L901.444 681.086 L900.885 681.086 L900.325 681.086 L899.766 681.086 L899.207 681.086 L898.648 681.086 L898.088 681.086 L897.529 681.086 L896.97 681.086 L896.411 681.086 L895.851 681.086 L895.292 681.086 L894.733 681.086 L894.174 681.086 L893.614 681.086 L893.055 681.086 L892.496 681.086 L891.937 681.086 L891.377 681.086 L890.818 681.086 L890.259 681.086 L889.7 681.086 L889.14 681.086 L888.581 681.086 L888.022 681.086 L887.463 681.086 L886.903 681.086 L886.344 681.086 L885.785 681.086 L885.226 681.086 L884.666 681.086 L884.107 681.086 L883.548 681.086 L882.989 681.086 L882.429 681.086 L881.87 681.086 L881.311 681.086 L880.752 681.086 L880.192 681.086 L879.633 681.086 L879.074 681.086 L878.515 681.086 L877.955 681.086 L877.396 681.086 L876.837 681.086 L876.278 681.086 L875.718 681.086 L875.159 681.086 L874.6 681.086 L874.041 681.086 L873.481 681.086 L872.922 681.086 L872.363 681.086 L871.804 681.086 L871.244 681.086 L870.685 681.086 L870.126 681.086 L869.567 681.086 L869.007 681.086 L868.448 681.086 L867.889 681.086 L867.33 681.086 L866.77 681.086 L866.211 681.086 L865.652 681.086 L865.093 681.086 L864.533 681.086 L863.974 681.086 L863.415 681.086 L862.856 681.086 L862.296 681.086 L861.737 681.086 L861.178 681.086 L860.619 681.086 L860.059 681.086 L859.5 681.086 L858.941 681.086 L858.382 681.086 L857.822 681.086 L857.263 681.086 L856.704 681.086 L856.145 681.086 L855.585 681.086 L855.026 681.086 L854.467 681.086 L853.908 681.086 L853.348 681.086 L852.789 681.086 L852.23 681.086 L851.671 681.086 L851.111 681.086 L850.552 681.086 L849.993 681.086 L849.434 681.086 L848.874 681.086 L848.315 681.086 L847.756 681.086 L847.197 681.086 L846.637 681.086 L846.078 681.086 L845.519 681.086 L844.96 681.086 L844.4 681.086 L843.841 681.086 L843.282 681.086 L842.723 681.086 L842.163 681.086 L841.604 681.086 L841.045 681.086 L840.486 681.086 L839.926 681.086 L839.367 681.086 L838.808 681.086 L838.249 681.086 L837.689 681.086 L837.13 681.086 L836.571 681.086 L836.012 681.086 L835.452 681.086 L834.893 681.086 L834.334 681.086 L833.775 681.086 L833.215 681.086 L832.656 681.086 L832.097 681.086 L831.538 681.086 L830.978 681.086 L830.419 681.086 L829.86 681.086 L829.301 681.086 L828.741 681.086 L828.182 681.086 L827.623 681.086 L827.064 681.086 L826.504 681.086 L825.945 681.086 L825.386 681.086 L824.827 681.086 L824.267 681.086 L823.708 681.086 L823.149 681.086 L822.59 681.086 L822.03 681.086 L821.471 681.086 L820.912 681.086 L820.353 681.086 L819.793 681.086 L819.234 681.086 L818.675 681.086 L818.116 681.086 L817.556 681.086 L816.997 681.086 L816.438 681.086 L815.879 681.086 L815.319 681.086 L814.76 681.086 L814.201 681.086 L813.642 681.086 L813.082 681.086 L812.523 681.086 L811.964 681.086 L811.405 681.086 L810.845 681.086 L810.286 681.086 L809.727 681.086 L809.168 681.086 L808.608 681.086 L808.049 681.086 L807.49 681.086 L806.931 681.086 L806.371 681.086 L805.812 681.086 L805.253 681.086 L804.693 681.086 L804.134 681.086 L803.575 681.086 L803.016 681.086 L802.456 681.086 L801.897 681.086 L801.338 681.086 L800.779 681.086 L800.219 681.086 L799.66 681.086 L799.101 681.086 L798.542 681.086 L797.982 681.086 L797.423 681.086 L796.864 681.086 L796.305 681.086 L795.745 681.086 L795.186 681.086 L794.627 681.086 L794.068 681.086 L793.508 681.086 L792.949 681.086 L792.39 681.086 L791.831 681.086 L791.271 681.086 L790.712 681.086 L790.153 681.086 L789.594 681.086 L789.034 681.086 L788.475 681.086 L787.916 681.086 L787.357 681.086 L786.797 681.086 L786.238 681.086 L785.679 681.086 L785.12 681.086 L784.56 681.086 L784.001 681.086 L783.442 681.086 L782.883 681.086 L782.323 681.086 L781.764 681.086 L781.205 681.086 L780.646 681.086 L780.086 681.086 L779.527 681.086 L778.968 681.086 L778.409 681.086 L777.849 681.086 L777.29 681.086 L776.731 681.086 L776.172 681.086 L775.612 681.086 L775.053 681.086 L774.494 681.086 L773.935 681.086 L773.375 681.086 L772.816 681.086 L772.257 681.086 L771.698 681.086 L771.138 681.086 L770.579 681.086 L770.02 681.086 L769.461 681.086 L768.901 681.086 L768.342 681.086 L767.783 681.086 L767.224 681.086 L766.664 681.086 L766.105 681.086 L765.546 681.086 L764.987 681.086 L764.427 681.086 L763.868 681.086 L763.309 681.086 L762.75 681.086 L762.19 681.086 L761.631 681.086 L761.072 681.086 L760.513 681.086 L759.953 681.086 L759.394 681.086 L758.835 681.086 L758.276 681.086 L757.716 681.086 L757.157 681.086 L756.598 681.086 L756.039 681.086 L755.479 681.086 L754.92 681.086 L754.361 681.086 L753.802 681.086 L753.242 681.086 L752.683 681.086 L752.124 681.086 L751.565 681.086 L751.005 681.086 L750.446 681.086 L749.887 681.086 L749.328 681.086 L748.768 681.086 L748.209 681.086 L747.65 681.086 L747.091 681.086 L746.531 681.086 L745.972 681.086 L745.413 681.086 L744.854 681.086 L744.294 681.086 L743.735 681.086 L743.176 681.086 L742.617 681.086 L742.057 681.086 L741.498 681.086 L740.939 681.086 L740.38 681.086 L739.82 681.086 L739.261 681.086 L738.702 681.086 L738.143 681.086 L737.583 681.086 L737.024 681.086 L736.465 681.086 L735.906 681.086 L735.346 681.086 L734.787 681.086 L734.228 681.086 L733.669 681.086 L733.109 681.086 L732.55 681.086 L731.991 681.086 L731.432 681.086 L730.872 681.086 L730.313 681.086 L729.754 681.086 L729.195 681.086 L728.635 681.086 L728.076 681.086 L727.517 681.086 L726.958 681.086 L726.398 681.086 L725.839 681.086 L725.28 681.086 L724.721 681.086 L724.161 681.086 L723.602 681.086 L723.043 681.086 L722.484 681.086 L721.924 681.086 L721.365 681.086 L720.806 681.086 L720.247 681.086  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.533 720.806,685.533 721.365,685.533 721.924,685.533 722.484,685.533 723.043,685.533 723.602,685.533 724.161,685.533 724.721,685.533 725.28,685.533 725.839,685.533 726.398,685.533 726.958,685.533 727.517,685.533 728.076,685.533 728.635,685.533 729.195,685.533 729.754,685.533 730.313,685.533 730.872,685.533 731.432,685.533 731.991,685.533 732.55,685.533 733.109,685.533 733.669,685.533 734.228,685.533 734.787,685.533 735.346,685.533 735.906,685.533 736.465,685.533 737.024,685.533 737.583,685.533 738.143,685.533 738.702,685.533 739.261,685.533 739.82,685.533 740.38,685.533 740.939,685.533 741.498,685.533 742.057,685.533 742.617,685.533 743.176,685.533 743.735,685.533 744.294,685.533 744.854,685.533 745.413,685.533 745.972,685.533 746.531,685.533 747.091,685.533 747.65,685.533 748.209,685.533 748.768,685.533 749.328,685.533 749.887,685.533 750.446,685.533 751.005,685.533 751.565,685.533 752.124,685.533 752.683,685.533 753.242,685.533 753.802,685.533 754.361,685.533 754.92,685.533 755.479,685.533 756.039,685.533 756.598,685.533 757.157,685.533 757.716,685.533 758.276,685.533 758.835,685.533 759.394,685.533 759.953,685.533 760.513,685.533 761.072,685.533 761.631,685.533 762.19,685.533 762.75,685.533 763.309,685.533 763.868,685.533 764.427,685.533 764.987,685.533 765.546,685.533 766.105,685.533 766.664,685.533 767.224,685.533 767.783,685.533 768.342,685.533 768.901,685.533 769.461,685.533 770.02,685.533 770.579,685.533 771.138,685.533 771.698,685.533 772.257,685.533 772.816,685.533 773.375,685.533 773.935,685.533 774.494,685.533 775.053,685.533 775.612,685.533 776.172,685.533 776.731,685.533 777.29,685.533 777.849,685.533 778.409,685.533 778.968,685.533 779.527,685.533 780.086,685.533 780.646,685.533 781.205,685.533 781.764,685.533 782.323,685.533 782.883,685.533 783.442,685.533 784.001,685.533 784.56,685.533 785.12,685.533 785.679,685.533 786.238,685.533 786.797,685.533 787.357,685.533 787.916,685.533 788.475,685.533 789.034,685.533 789.594,685.533 790.153,685.533 790.712,685.533 791.271,685.533 791.831,685.533 792.39,685.533 792.949,685.533 793.508,685.533 794.068,685.533 794.627,685.533 795.186,685.533 795.745,685.533 796.305,685.533 796.864,685.533 797.423,685.533 797.982,685.533 798.542,685.533 799.101,685.533 799.66,685.533 800.219,685.533 800.779,685.533 801.338,685.533 801.897,685.533 802.456,685.533 803.016,685.533 803.575,685.533 804.134,685.533 804.693,685.533 805.253,685.533 805.812,685.533 806.371,685.533 806.931,685.533 807.49,685.533 808.049,685.533 808.608,685.533 809.168,685.533 809.727,685.533 810.286,685.533 810.845,685.533 811.405,685.533 811.964,685.533 812.523,685.533 813.082,685.533 813.642,685.533 814.201,685.533 814.76,685.533 815.319,685.533 815.879,685.533 816.438,685.533 816.997,685.533 817.556,685.533 818.116,685.533 818.675,685.533 819.234,685.533 819.793,685.533 820.353,685.533 820.912,685.533 821.471,685.533 822.03,685.533 822.59,685.533 823.149,685.533 823.708,685.533 824.267,685.533 824.827,685.533 825.386,685.533 825.945,685.533 826.504,685.533 827.064,685.533 827.623,685.533 828.182,685.533 828.741,685.533 829.301,685.533 829.86,685.533 830.419,685.533 830.978,685.533 831.538,685.533 832.097,685.533 832.656,685.533 833.215,685.533 833.775,685.533 834.334,685.533 834.893,685.533 835.452,685.533 836.012,685.533 836.571,685.533 837.13,685.533 837.689,685.533 838.249,685.533 838.808,685.533 839.367,685.533 839.926,685.533 840.486,685.533 841.045,685.533 841.604,685.533 842.163,685.533 842.723,685.533 843.282,685.533 843.841,685.533 844.4,685.533 844.96,685.533 845.519,685.533 846.078,685.533 846.637,685.533 847.197,685.533 847.756,685.533 848.315,685.533 848.874,685.533 849.434,685.533 849.993,685.533 850.552,685.533 851.111,685.533 851.671,685.533 852.23,685.533 852.789,685.533 853.348,685.533 853.908,685.533 854.467,685.533 855.026,685.533 855.585,685.533 856.145,685.533 856.704,685.533 857.263,685.533 857.822,685.533 858.382,685.533 858.941,685.533 859.5,685.533 860.059,685.533 860.619,685.533 861.178,685.533 861.737,685.533 862.296,685.533 862.856,685.533 863.415,685.533 863.974,685.533 864.533,685.533 865.093,685.533 865.652,685.533 866.211,685.533 866.77,685.533 867.33,685.533 867.889,685.533 868.448,685.533 869.007,685.533 869.567,685.533 870.126,685.533 870.685,685.533 871.244,685.533 871.804,685.533 872.363,685.533 872.922,685.533 873.481,685.533 874.041,685.533 874.6,685.533 875.159,685.533 875.718,685.533 876.278,685.533 876.837,685.533 877.396,685.533 877.955,685.533 878.515,685.533 879.074,685.533 879.633,685.533 880.192,685.533 880.752,685.533 881.311,685.533 881.87,685.533 882.429,685.533 882.989,685.533 883.548,685.533 884.107,685.533 884.666,685.533 885.226,685.533 885.785,685.533 886.344,685.533 886.903,685.533 887.463,685.533 888.022,685.533 888.581,685.533 889.14,685.533 889.7,685.533 890.259,685.533 890.818,685.533 891.377,685.533 891.937,685.533 892.496,685.533 893.055,685.533 893.614,685.533 894.174,685.533 894.733,685.533 895.292,685.533 895.851,685.533 896.411,685.533 896.97,685.533 897.529,685.533 898.088,685.533 898.648,685.533 899.207,685.533 899.766,685.533 900.325,685.533 900.885,685.533 901.444,685.533 902.003,685.533 902.562,685.533 903.122,685.533 903.681,685.533 904.24,685.533 904.799,685.533 905.359,685.533 905.918,685.533 906.477,685.533 907.036,685.533 907.596,685.533 908.155,685.533 908.714,685.533 909.273,685.533 909.833,685.533 910.392,685.533 910.951,685.533 911.51,685.533 912.07,685.533 912.629,685.533 913.188,685.533 913.747,685.533 914.307,685.533 914.866,685.533 915.425,685.533 915.984,685.533 916.544,685.533 917.103,685.533 917.662,685.533 918.221,685.533 918.781,685.533 919.34,685.533 919.899,685.533 920.458,685.533 921.018,685.533 921.577,685.533 922.136,685.533 922.695,685.533 923.255,685.533 923.814,685.533 924.373,685.533 924.932,685.533 925.492,685.533 926.051,685.533 926.61,685.533 927.169,685.533 927.729,685.533 928.288,685.533 928.847,685.533 929.406,685.533 929.966,685.533 930.525,685.533 931.084,685.533 931.644,685.533 932.203,685.533 932.762,685.533 933.321,685.533 933.881,685.533 934.44,685.533 934.999,685.533 935.558,685.533 936.118,685.533 936.677,685.533 937.236,685.533 937.795,685.533 938.355,685.533 938.914,685.533 939.473,685.533 940.032,685.533 940.592,685.533 941.151,685.533 941.71,685.533 942.269,685.533 942.829,685.533 943.388,685.533 943.947,685.533 944.506,685.533 945.066,685.533 945.625,685.533 946.184,685.533 946.743,685.533 947.303,685.533 947.862,685.533 948.421,685.533 948.98,685.533 949.54,685.533 950.099,685.533 950.658,685.533 951.217,685.533 951.777,685.533 952.336,685.533 952.895,685.533 953.454,685.533 954.014,685.533 954.573,685.533 955.132,685.533 955.691,685.533 956.251,685.533 956.81,685.533 957.369,685.533 957.928,685.533 958.488,685.533 959.047,685.533 959.606,685.533 960.165,685.533 960.725,685.533 961.284,685.533 961.843,685.533 962.402,685.533 962.962,685.533 963.521,685.533 964.08,685.533 964.639,685.533 965.199,685.533 965.758,685.533 966.317,685.533 966.876,685.533 967.436,685.533 967.995,685.533 968.554,685.533 969.113,685.533 969.673,685.533 970.232,685.533 970.791,685.533 971.35,685.533 971.91,685.533 972.469,685.533 973.028,685.533 973.587,685.533 974.147,685.533 974.706,685.533 975.265,685.533 975.824,685.533 976.384,685.533 976.943,685.533 977.502,685.533 978.061,685.533 978.621,685.533 979.18,685.533 979.739,685.533 980.298,685.533 980.858,685.533 981.417,685.533 981.976,685.533 982.535,685.533 983.095,685.533 983.654,685.533 984.213,685.533 984.772,685.533 985.332,685.533 985.891,685.533 986.45,685.533 987.009,685.533 987.569,685.533 988.128,685.533 988.687,685.533 989.246,685.533 989.806,685.533 990.365,685.533 990.924,685.533 991.483,685.533 992.043,685.533 992.602,685.533 993.161,685.533 993.72,685.533 994.28,685.533 994.839,685.533 995.398,685.533 995.957,685.533 996.517,685.533 997.076,685.533 997.635,685.533 998.194,685.533 998.754,685.533 999.313,685.533 999.872,685.533 1000.43,685.533 1000.99,685.533 1001.55,685.533 1002.11,685.533 1002.67,685.533 1003.23,685.533 1003.79,685.533 1004.35,685.533 1004.91,685.533 1005.46,685.533 1006.02,685.533 1006.58,685.533 1007.14,685.533 1007.7,685.533 1008.26,685.533 1008.82,685.533 1009.38,685.533 1009.94,685.533 1010.5,685.533 1011.06,685.533 1011.62,685.533 1012.18,685.533 1012.73,685.533 1013.29,685.533 1013.85,685.533 1014.41,685.533 1014.97,685.533 1015.53,685.533 1016.09,685.533 1016.65,685.533 1017.21,685.533 1017.77,685.533 1018.33,685.533 1018.89,685.533 1019.45,685.533 1020.01,685.533 1020.56,685.533 1021.12,685.533 1021.68,685.533 1022.24,685.533 1022.8,685.533 1023.36,685.533 1023.92,685.533 1024.48,685.533 1025.04,685.533 1025.6,685.533 1026.16,685.533 1026.72,685.533 1027.28,685.533 1027.83,685.533 1028.39,685.533 1028.95,685.533 1029.51,685.533 1030.07,685.533 1030.63,685.533 1031.19,685.533 1031.75,685.533 1032.31,685.533 1032.87,685.533 1033.43,685.533 1033.99,685.533 1034.55,685.533 1035.1,685.533 1035.66,685.533 1036.22,685.533 1036.78,685.533 1037.34,685.533 1037.9,685.533 1038.46,685.533 1039.02,685.533 1039.58,685.533 1040.14,685.533 1040.7,685.533 1041.26,685.533 1041.82,685.533 1042.38,685.533 1042.93,685.533 1043.49,685.533 1044.05,685.533 1044.61,685.533 1045.17,685.533 1045.73,685.533 1046.29,685.533 1046.85,685.533 1047.41,685.533 1047.97,685.533 1048.53,685.533 1049.09,685.533 1049.65,685.533 1050.2,685.533 1050.76,685.533 1051.32,685.533 1051.88,685.533 1052.44,685.533 1053,685.533 1053.56,685.533 1054.12,685.533 1054.68,685.533 1055.24,685.533 1055.8,685.533 1056.36,685.533 1056.92,685.533 1057.48,685.533 1058.03,685.533 1058.59,685.533 1059.15,685.533 1059.71,685.533 1060.27,685.533 1060.83,685.533 1061.39,685.533 1061.95,685.533 1062.51,685.533 1063.07,685.533 1063.63,685.533 1064.19,685.533 1064.75,685.533 1065.3,685.533 1065.86,685.533 1066.42,685.533 1066.98,685.533 1067.54,685.533 1068.1,685.533 1068.66,685.533 1069.22,685.533 1069.78,685.533 1070.34,685.533 1070.9,685.533 1071.46,685.533 1072.02,685.533 1072.57,685.533 1073.13,685.533 1073.69,685.533 1074.25,685.533 1074.81,685.533 1075.37,685.533 1075.93,685.533 1076.49,685.533 1077.05,685.533 1077.61,685.533 1078.17,685.533 1078.73,685.533 1079.29,685.533 1079.85,685.533 1080.4,685.533 1080.96,685.533 1081.52,685.533 1082.08,685.533 1082.64,685.533 1083.2,685.533 1083.76,685.533 1084.32,685.533 1084.88,685.533 1085.44,685.533 1086,685.533 1086.56,685.533 1087.12,685.533 1087.67,685.533 1088.23,685.533 1088.79,685.533 1089.35,685.533 1089.91,685.533 1090.47,685.533 1091.03,685.533 1091.59,685.533 1092.15,685.533 1092.71,685.533 1093.27,685.533 1093.83,685.533 1094.39,685.533 1094.94,685.533 1095.5,685.533 1096.06,685.533 1096.62,685.533 1097.18,685.533 1097.74,685.533 1098.3,685.533 1098.86,685.533 1099.42,685.533 1099.98,685.533 1100.54,685.533 1101.1,685.533 1101.66,685.533 1102.22,685.533 1102.77,685.533 1103.33,685.533 1103.89,685.533 1104.45,685.533 1105.01,685.533 1105.57,685.533 1106.13,685.533 1106.69,685.533 1107.25,685.533 1107.81,685.533 1108.37,685.533 1108.93,685.533 1109.49,685.533 1110.04,685.533 1110.6,685.533 1111.16,685.533 1111.72,685.533 1112.28,685.533 1112.84,685.533 1113.4,685.533 1113.96,685.533 1114.52,685.533 1115.08,685.533 1115.64,685.533 1116.2,685.533 1116.76,685.533 1117.31,685.533 1117.87,685.533 1118.43,685.533 1118.99,685.533 1119.55,685.533 1120.11,685.533 1120.67,685.533 1121.23,685.533 1121.79,685.533 1122.35,685.533 1122.91,685.533 1123.47,685.533 1124.03,685.533 1124.59,685.533 1125.14,685.533 1125.7,685.533 1126.26,685.533 1126.82,685.533 1127.38,685.533 1127.94,685.533 1128.5,685.533 1129.06,685.533 1129.62,685.533 1130.18,685.533 1130.74,685.533 1131.3,685.533 1131.86,685.533 1132.41,685.533 1132.97,685.533 1133.53,685.533 1134.09,685.533 1134.65,685.533 1135.21,685.533 1135.77,685.533 1136.33,685.533 1136.89,685.533 1137.45,685.533 1138.01,685.533 1138.57,685.533 1139.13,685.533 1139.68,685.533 1140.24,685.533 1140.8,685.533 1141.36,685.533 1141.92,685.533 1142.48,685.533 1143.04,685.533 1143.6,685.533 1144.16,685.533 1144.72,685.533 1145.28,685.533 1145.84,685.533 1146.4,685.533 1146.96,685.533 1147.51,685.533 1148.07,685.533 1148.63,685.533 1149.19,685.533 1149.75,685.533 1150.31,685.533 1150.87,685.533 1151.43,685.533 1151.99,685.533 1152.55,685.533 1153.11,685.533 1153.67,685.533 1154.23,685.533 1154.78,685.533 1155.34,685.533 1155.9,685.533 1156.46,685.533 1157.02,685.533 1157.58,685.533 1158.14,685.533 1158.7,685.533 1159.26,685.533 1159.82,685.533 1160.38,685.533 1160.94,685.533 1161.5,685.533 1162.05,685.533 1162.61,685.533 1163.17,685.533 1163.73,685.533 1164.29,685.533 1164.85,685.533 1165.41,685.533 1165.97,685.533 1166.53,685.533 1167.09,685.533 1167.65,685.533 1168.21,685.533 1168.77,685.533 1169.33,685.533 1169.88,685.533 1170.44,685.533 1171,685.533 1171.56,685.533 1172.12,685.533 1172.68,685.533 1173.24,685.533 1173.8,685.533 1174.36,685.533 1174.92,685.533 1175.48,685.533 1176.04,685.533 1176.6,685.533 1177.15,685.533 1177.71,685.533 1178.27,685.533 1178.83,685.533 1179.39,685.533 1179.95,685.533 1180.51,685.533 1181.07,685.533 1181.63,685.533 1182.19,685.533 1182.75,685.533 1183.31,685.533 1183.87,685.533 1184.43,685.533 1184.98,685.533 1185.54,685.533 1186.1,685.533 1186.66,685.533 1187.22,685.533 1187.78,685.533 1188.34,685.533 1188.9,685.533 1189.46,685.533 1190.02,685.533 1190.58,685.533 1191.14,685.533 1191.7,685.533 1192.25,685.533 1192.81,685.533 1193.37,685.533 1193.93,685.533 1194.49,685.533 1195.05,685.533 1195.61,685.533 1196.17,685.533 1196.73,685.533 1197.29,685.533 1197.85,685.533 1198.41,685.533 1198.97,685.533 1199.52,685.533 1200.08,685.533 1200.64,685.533 1201.2,685.533 1201.76,685.533 1202.32,685.533 1202.88,685.533 1203.44,685.533 1204,685.533 1204.56,685.533 1205.12,685.533 1205.68,685.533 1206.24,685.533 1206.8,685.533 1207.35,685.533 1207.91,685.533 1208.47,685.533 1209.03,685.533 1209.59,685.533 1210.15,685.533 1210.71,685.533 1211.27,685.533 1211.83,685.533 1212.39,685.533 1212.95,685.533 1213.51,685.533 1214.07,685.533 1214.62,685.533 1215.18,685.533 1215.74,685.533 1216.3,685.533 1216.86,685.533 1217.42,685.533 1217.98,685.533 1218.54,685.533 1219.1,685.533 1219.66,685.533 1220.22,685.533 1220.78,685.533 1221.34,685.533 1221.89,685.533 1222.45,685.533 1223.01,685.533 1223.57,685.533 1224.13,685.533 1224.69,685.533 1225.25,685.533 1225.81,685.533 1226.37,685.533 1226.93,685.533 1227.49,685.533 1228.05,685.533 1228.61,685.533 1229.17,685.533 1229.72,685.533 1230.28,685.533 1230.84,685.533 1231.4,685.533 1231.96,685.533 1232.52,685.533 1233.08,685.533 1233.64,685.533 1234.2,685.533 1234.76,685.533 1235.32,685.533 1235.88,685.533 1236.44,685.533 1236.99,685.533 1237.55,685.533 1238.11,685.533 1238.67,685.533 1239.23,685.533 1239.79,685.533 1240.35,685.533 1240.91,685.533 1241.47,685.533 1242.03,685.533 1242.59,685.533 1243.15,685.533 1243.71,685.533 1244.26,685.533 1244.82,685.533 1245.38,685.533 1245.94,685.533 1246.5,685.533 1247.06,685.533 1247.62,685.533 1248.18,685.533 1248.74,685.533 1249.3,685.533 1249.86,685.533 1250.42,685.533 1250.98,685.533 1251.54,685.533 1252.09,685.533 1252.65,685.533 1253.21,685.533 1253.77,685.533 1254.33,685.533 1254.89,685.533 1255.45,685.533 1256.01,685.533 1256.57,685.533 1257.13,685.533 1257.69,685.533 1258.25,685.533 1258.81,685.533 1259.36,685.533 1259.92,685.533 1260.48,685.533 1261.04,685.533 1261.6,685.533 1262.16,685.533 1262.72,685.533 1263.28,685.533 1263.84,685.533 1264.4,685.533 1264.96,685.533 1265.52,685.533 1266.08,685.533 1266.63,685.533 1267.19,685.533 1267.75,685.533 1268.31,685.533 1268.87,685.533 1269.43,685.533 1269.99,685.533 1270.55,685.533 1271.11,685.533 1271.67,685.533 1272.23,685.533 1272.79,685.533 1273.35,685.533 1273.91,685.533 1274.46,685.533 1275.02,685.533 1275.58,685.533 1276.14,685.533 1276.7,685.533 1277.26,685.533 1277.82,685.533 1278.38,685.533 1278.94,685.533 1279.5,685.533 1280.06,685.533 1280.62,685.533 1281.18,685.533 1281.73,685.533 1282.29,685.533 1282.85,685.533 1283.41,685.533 1283.97,685.533 1284.53,685.533 1285.09,685.533 1285.65,685.533 1286.21,685.533 1286.77,685.533 1287.33,685.533 1287.89,685.533 1288.45,685.533 1289,685.533 1289.56,685.533 1290.12,685.533 1290.68,685.533 1291.24,685.533 1291.8,685.533 1292.36,685.533 1292.92,685.533 1293.48,685.533 1294.04,685.533 1294.6,685.533 1295.16,685.533 1295.72,685.533 1296.28,685.533 1296.83,685.533 1297.39,685.533 1297.95,685.533 1298.51,685.533 1299.07,685.533 1299.63,685.533 1300.19,685.533 1300.75,685.533 1301.31,685.533 1301.87,685.533 1302.43,685.533 1302.99,685.533 1303.55,685.533 1304.1,685.533 1304.66,685.533 1305.22,685.533 1305.78,685.533 1306.34,685.533 1306.9,685.533 1307.46,685.533 1308.02,685.533 1308.58,685.533 1309.14,685.533 1309.7,685.533 1310.26,685.533 1310.82,685.533 1311.38,685.533 1311.93,685.533 1312.49,685.533 1313.05,685.533 1313.61,685.533 1314.17,685.533 1314.73,685.533 1315.29,685.533 1315.85,685.533 1316.41,685.533 1316.97,685.533 1317.53,685.533 1318.09,685.533 1318.65,685.533 1319.2,685.533 1319.76,685.533 1320.32,685.533 1320.88,685.533 1321.44,685.533 1322,685.533 1322.56,685.533 1323.12,685.533 1323.68,685.533 1324.24,685.533 1324.8,685.533 1325.36,685.533 1325.92,685.533 1326.47,685.533 1327.03,685.533 1327.59,685.533 1328.15,685.533 1328.71,685.533 1329.27,685.533 1329.83,685.533 1330.39,685.533 1330.95,685.533 1331.51,685.533 1332.07,685.533 1332.63,685.533 1333.19,685.533 1333.75,685.533 1334.3,685.533 1334.86,685.533 1335.42,685.533 1335.98,685.533 1336.54,685.533 1337.1,685.533 1337.66,685.533 1338.22,685.533 1338.78,685.533 1339.34,685.533 1339.9,685.533 1340.46,685.533 1341.02,685.533 1341.57,685.533 1342.13,685.533 1342.69,685.533 1343.25,685.533 1343.81,685.533 1344.37,685.533 1344.93,685.533 1345.49,685.533 1346.05,685.533 1346.61,685.533 1347.17,685.533 1347.73,685.533 1348.29,685.533 1348.84,685.533 1349.4,685.533 1349.96,685.533 1350.52,685.533 1351.08,685.533 1351.64,685.533 1352.2,685.533 1352.76,685.533 1353.32,685.533 1353.88,685.533 1354.44,685.533 1355,685.533 1355.56,685.533 1356.12,685.533 1356.67,685.533 1357.23,685.533 1357.79,685.533 1358.35,685.533 1358.91,685.533 1359.47,685.533 1360.03,685.533 1360.59,685.533 1361.15,685.533 1361.71,685.533 1362.27,685.533 1362.83,685.533 1363.39,685.533 1363.94,685.533 1364.5,685.533 1365.06,685.533 1365.62,685.533 1366.18,685.533 1366.74,685.533 1367.3,685.533 1367.86,685.533 1368.42,685.533 1368.98,685.533 1369.54,685.533 1370.1,685.533 1370.66,685.533 1371.21,685.533 1371.77,685.533 1372.33,685.533 1372.89,685.533 1373.45,685.533 1374.01,685.533 1374.57,685.533 1375.13,685.533 1375.69,685.533 1376.25,685.533 1376.81,685.533 1377.37,685.533 1377.93,685.533 1378.49,685.533 1379.04,685.533 1379.6,685.533 1380.16,685.533 1380.72,685.533 1381.28,685.533 1381.84,685.533 1382.4,685.533 1382.96,685.533 1383.52,685.533 1384.08,685.533 1384.64,685.533 1385.2,685.533 1385.76,685.533 1386.31,685.533 1386.87,685.533 1387.43,685.533 1387.99,685.533 1388.55,685.533 1389.11,685.533 1389.67,685.533 1390.23,685.533 1390.79,685.533 1391.35,685.533 1391.91,685.533 1392.47,685.533 1393.03,685.533 1393.58,685.533 1394.14,685.533 1394.7,685.533 1395.26,685.533 1395.82,685.533 1396.38,685.533 1396.94,685.533 1397.5,685.533 1398.06,685.533 1398.62,685.533 1399.18,685.533 1399.74,685.533 1400.3,685.533 1400.86,685.533 1401.41,685.533 1401.97,685.533 1402.53,685.533 1403.09,685.533 1403.65,685.533 1404.21,685.533 1404.77,685.533 1405.33,685.533 1405.89,685.533 1406.45,685.533 1407.01,685.533 1407.57,685.533 1408.13,685.533 1408.68,685.533 1409.24,685.533 1409.8,685.533 1410.36,685.533 1410.92,685.533 1411.48,685.533 1412.04,685.533 1412.6,685.533 1413.16,685.533 1413.72,685.533 1414.28,685.533 1414.84,685.533 1415.4,685.533 1415.95,685.533 1416.51,685.533 1417.07,685.533 1417.63,685.533 1418.19,685.533 1418.75,685.533 1419.31,685.533 1419.87,685.533 1420.43,685.533 1420.99,685.533 1421.55,685.533 1422.11,685.533 1422.67,685.533 1423.23,685.533 1423.78,685.533 1424.34,685.533 1424.9,685.533 1425.46,685.533 1426.02,685.533 1426.58,685.533 1427.14,685.533 1427.7,685.533 1428.26,685.533 1428.82,685.533 1429.38,685.533 1429.94,685.533 1430.5,685.533 1431.05,685.533 1431.61,685.533 1432.17,685.533 1432.73,685.533 1433.29,685.533 1433.85,685.533 1434.41,685.533 1434.97,685.533 1435.53,685.533 1436.09,685.533 1436.65,685.533 1437.21,685.533 1437.77,685.533 1438.33,685.533 1438.88,685.533 1439.44,685.533 1440,685.533 1440.56,685.533 1441.12,685.533 1441.68,685.533 1442.24,685.533 1442.8,685.533 1443.36,685.533 1443.92,685.533 1444.48,685.533 1445.04,685.533 1445.6,685.533 1446.15,685.533 1446.71,685.533 1447.27,685.533 1447.83,685.533 1448.39,685.533 1448.95,685.533 1449.51,685.533 1450.07,685.533 1450.63,685.533 1451.19,685.533 1451.75,685.533 1452.31,685.533 1452.87,685.533 1453.42,685.533 1453.98,685.533 1454.54,685.533 1455.1,685.533 1455.66,685.533 1456.22,685.533 1456.78,685.533 1457.34,685.533 1457.9,685.533 1458.46,685.533 1459.02,685.533 1459.58,685.533 1460.14,685.533 1460.7,685.533 1461.25,685.533 1461.81,685.533 1462.37,685.533 1462.93,685.533 1463.49,685.533 1464.05,685.533 1464.61,685.533 1465.17,685.533 1465.73,685.533 1466.29,685.533 1466.85,685.533 1467.41,685.533 1467.97,685.533 1468.52,685.533 1469.08,685.533 1469.64,685.533 1470.2,685.533 1470.76,685.533 1471.32,685.533 1471.88,685.533 1472.44,685.533 1473,685.533 1473.56,685.533 1474.12,685.533 1474.68,685.533 1475.24,685.533 1475.79,685.533 1476.35,685.533 1476.91,685.533 1477.47,685.533 1478.03,685.533 1478.59,685.533 1479.15,685.533 1479.71,685.533 1480.27,685.533 1480.83,685.533 1481.39,685.533 1481.95,685.533 1482.51,685.533 1483.07,685.533 1483.62,685.533 1484.18,685.533 1484.74,685.533 1485.3,685.533 1485.86,685.533 1486.42,685.533 1486.98,685.533 1487.54,685.533 1488.1,685.533 1488.66,685.533 1489.22,685.533 1489.78,685.533 1490.34,685.533 1490.89,685.533 1491.45,685.533 1492.01,685.533 1492.57,685.533 1493.13,685.533 1493.69,685.533 1494.25,685.533 1494.81,685.533 1495.37,685.533 1495.93,685.533 1496.49,685.533 1497.05,685.533 1497.61,685.533 1498.16,685.533 1498.72,685.533 1499.28,685.533 1499.84,685.533 1500.4,685.533 1500.96,685.533 1501.52,685.533 1502.08,685.533 1502.64,685.533 1503.2,685.533 1503.76,685.533 1504.32,685.533 1504.88,685.533 1505.44,685.533 1505.99,685.533 1506.55,685.533 1507.11,685.533 1507.67,685.533 1508.23,685.533 1508.79,685.533 1509.35,685.533 1509.91,685.533 1510.47,685.533 1511.03,685.533 1511.59,685.533 1512.15,685.533 1512.71,685.533 1513.26,685.533 1513.82,685.533 1514.38,685.533 1514.94,685.533 1515.5,685.533 1516.06,685.533 1516.62,685.533 1517.18,685.533 1517.74,685.533 1518.3,685.533 1518.86,685.533 1519.42,685.533 1519.98,685.533 1520.53,685.533 1521.09,685.533 1521.65,685.533 1522.21,685.533 1522.77,685.533 1523.33,685.533 1523.89,685.533 1524.45,685.533 1525.01,685.533 1525.57,685.533 1526.13,685.533 1526.69,685.533 1527.25,685.533 1527.81,685.533 1528.36,685.533 1528.92,685.533 1529.48,685.533 1530.04,685.533 1530.6,685.533 1531.16,685.533 1531.72,685.533 1532.28,685.533 1532.84,685.533 1533.4,685.533 1533.96,685.533 1534.52,685.533 1535.08,685.533 1535.63,685.533 1536.19,685.533 1536.75,685.533 1537.31,685.533 1537.87,685.533 1538.43,685.533 1538.99,685.533 1539.55,685.533 1540.11,685.533 1540.67,685.533 1541.23,685.533 1541.79,685.533 1542.35,685.533 1542.9,685.533 1543.46,685.533 1544.02,685.533 1544.58,685.533 1545.14,685.533 1545.7,685.533 1546.26,685.533 1546.82,685.533 1547.38,685.533 1547.94,685.533 1548.5,685.533 1549.06,685.533 1549.62,685.533 1550.18,685.533 1550.73,685.533 1551.29,685.533 1551.85,685.533 1552.41,685.533 1552.97,685.533 1553.53,685.533 1554.09,685.533 1554.65,685.533 1555.21,685.533 1555.77,685.533 1556.33,685.533 1556.89,685.533 1557.45,685.533 1558,685.533 1558.56,685.533 1559.12,685.533 1559.68,685.533 1560.24,685.533 1560.8,685.533 1561.36,685.533 1561.92,685.533 1562.48,685.533 1563.04,685.533 1563.6,685.533 1564.16,685.533 1564.72,685.533 1565.28,685.533 1565.83,685.533 1566.39,685.533 1566.95,685.533 1567.51,685.533 1568.07,685.533 1568.63,685.533 1569.19,685.533 1569.75,685.533 1570.31,685.533 1570.87,685.533 1571.43,685.533 1571.99,685.533 1572.55,685.533 1573.1,685.533 1573.66,685.533 1574.22,685.533 1574.78,685.533 1575.34,685.533 1575.9,685.533 1576.46,685.533 1577.02,685.533 1577.58,685.533 1578.14,685.533 1578.7,685.533 1579.26,685.533 1579.82,685.533 1580.37,685.533 1580.93,685.533 1581.49,685.533 1582.05,685.533 1582.61,685.533 1583.17,685.533 1583.73,685.533 1584.29,685.533 1584.85,685.533 1585.41,685.533 1585.97,685.533 1586.53,685.533 1587.09,685.533 1587.65,685.533 1588.2,685.533 1588.76,685.533 1589.32,685.533 1589.88,685.533 1590.44,685.533 1591,685.533 1591.56,685.533 1592.12,685.533 1592.68,685.533 1593.24,685.533 1593.8,685.533 1594.36,685.533 1594.92,685.533 1595.47,685.533 1596.03,685.533 1596.59,685.533 1597.15,685.533 1597.71,685.533 1598.27,685.533 1598.83,685.533 1599.39,685.533 1599.95,685.533 1600.51,685.533 1601.07,685.533 1601.63,685.533 1602.19,685.533 1602.74,685.533 1603.3,685.533 1603.86,685.533 1604.42,685.533 1604.98,685.533 1605.54,685.533 1606.1,685.533 1606.66,685.533 1607.22,685.533 1607.78,685.533 1608.34,685.533 1608.9,685.533 1609.46,685.533 1610.02,685.533 1610.57,685.533 1611.13,685.533 1611.69,685.533 1612.25,685.533 1612.81,685.533 1613.37,685.533 1613.93,685.533 1614.49,685.533 1615.05,685.533 1615.61,685.533 1616.17,685.533 1616.73,685.533 1617.29,685.533 1617.84,685.533 1618.4,685.533 1618.96,685.533 1619.52,685.533 1620.08,685.533 1620.64,685.533 1621.2,685.533 1621.76,685.533 1622.32,685.533 1622.88,685.533 1623.44,685.533 1624,685.533 1624.56,685.533 1625.11,685.533 1625.67,685.533 1626.23,685.533 1626.79,685.533 1627.35,685.533 1627.91,685.533 1628.47,685.533 1629.03,685.533 1629.59,685.533 1630.15,685.533 1630.71,685.533 1631.27,685.533 1631.83,685.533 1632.39,685.533 1632.94,685.533 1633.5,685.533 1634.06,685.533 1634.62,685.533 1635.18,685.533 1635.74,685.533 1636.3,685.533 1636.86,685.533 1637.42,685.533 1637.98,685.533 1638.54,685.533 1639.1,685.533 1639.66,685.533 1640.21,685.533 1640.77,685.533 1641.33,685.533 1641.89,685.533 1642.45,685.533 1643.01,685.533 1643.57,685.533 1644.13,685.533 1644.69,685.533 1645.25,685.533 1645.81,685.533 1646.37,685.533 1646.93,685.533 1647.48,685.533 1648.04,685.533 1648.6,685.533 1649.16,685.533 1649.72,685.533 1650.28,685.533 1650.84,685.533 1651.4,685.533 1651.96,685.533 1652.52,685.533 1653.08,685.533 1653.64,685.533 1654.2,685.533 1654.76,685.533 1655.31,685.533 1655.87,685.533 1656.43,685.533 1656.99,685.533 1657.55,685.533 1658.11,685.533 1658.67,685.533 1659.23,685.533 1659.79,685.533 1660.35,685.533 1660.91,685.533 1661.47,685.533 1662.03,685.533 1662.58,685.533 1663.14,685.533 1663.7,685.533 1664.26,685.533 1664.82,685.533 1665.38,685.533 1665.94,685.533 1666.5,685.533 1667.06,685.533 1667.62,685.533 1668.18,685.533 1668.74,685.533 1669.3,685.533 1669.85,685.533 1670.41,685.533 1670.97,685.533 1671.53,685.533 1672.09,685.533 1672.65,685.533 1673.21,685.533 1673.77,685.533 1674.33,685.533 1674.89,685.533 1675.45,685.533 1676.01,685.533 1676.57,685.533 1677.13,685.533 1677.68,685.533 1678.24,685.533 1678.8,685.533 1679.36,685.533 1679.92,685.533 1680.48,685.533 1681.04,685.533 1681.6,685.533 1682.16,685.533 1682.72,685.533 1683.28,685.533 1683.84,685.533 1684.4,685.533 1684.95,685.533 1685.51,685.533 1686.07,685.533 1686.63,685.533 1687.19,685.533 1687.75,685.533 1688.31,685.533 1688.87,685.533 1689.43,685.533 1689.99,685.533 1690.55,685.533 1691.11,685.533 1691.67,685.533 1692.23,685.533 1692.78,685.533 1693.34,685.533 1693.9,685.533 1694.46,685.533 1695.02,685.533 1695.58,685.533 1696.14,685.533 1696.7,685.533 1697.26,685.533 1697.82,685.533 1698.38,685.533 1698.94,685.533 1699.5,685.533 1700.05,685.533 1700.61,685.533 1701.17,685.533 1701.73,685.533 1702.29,685.533 1702.85,685.533 1703.41,685.533 1703.97,685.533 1704.53,685.533 1705.09,685.533 1705.65,685.533 1706.21,685.533 1706.77,685.533 1707.32,685.533 1707.88,685.533 1708.44,685.533 1709,685.533 1709.56,685.533 1710.12,685.533 1710.68,685.533 1711.24,685.533 1711.8,685.533 1712.36,685.533 1712.92,685.533 1713.48,685.533 1714.04,685.533 1714.6,685.533 1715.15,685.533 1715.71,685.533 1716.27,685.533 1716.83,685.533 1717.39,685.533 1717.95,685.533 1718.51,685.533 1719.07,685.533 1719.63,685.533 1720.19,685.533 1720.75,685.533 1721.31,685.533 1721.87,685.533 1722.42,685.533 1722.98,685.533 1723.54,685.533 1724.1,685.533 1724.66,685.533 1725.22,685.533 1725.78,685.533 1726.34,685.533 1726.9,685.533 1727.46,685.533 1728.02,685.533 1728.58,685.533 1729.14,685.533 1729.69,685.533 1730.25,685.533 1730.81,685.533 1731.37,685.533 1731.93,685.533 1732.49,685.533 1733.05,685.533 1733.61,685.533 1734.17,685.533 1734.73,685.533 1735.29,685.533 1735.85,685.533 1736.41,685.533 1736.97,685.533 1737.52,685.533 1738.08,685.533 1738.64,685.533 1739.2,685.533 1739.76,685.533 1740.32,685.533 1740.88,685.533 1741.44,685.533 1742,685.533 1742.56,685.533 1743.12,685.533 1743.68,685.533 1744.24,685.533 1744.79,685.533 1745.35,685.533 1745.91,685.533 1746.47,685.533 1747.03,685.533 1747.59,685.533 1748.15,685.533 1748.71,685.533 1749.27,685.533 1749.83,685.533 1750.39,685.533 1750.95,685.533 1751.51,685.533 1752.06,685.533 1752.62,685.533 1753.18,685.533 1753.74,685.533 1754.3,685.533 1754.86,685.533 1755.42,685.533 1755.98,685.533 1756.54,685.533 1757.1,685.533 1757.66,685.533 1758.22,685.533 1758.78,685.533 1759.34,685.533 1759.89,685.533 1760.45,685.533 1761.01,685.533 1761.57,685.533 1762.13,685.533 1762.69,685.533 1763.25,685.533 1763.81,685.533 1764.37,685.533 1764.93,685.533 1765.49,685.533 1766.05,685.533 1766.61,685.533 1767.16,685.533 1767.72,685.533 1768.28,685.533 1768.84,685.533 1769.4,685.533 1769.96,685.533 1770.52,685.533 1771.08,685.533 1771.64,685.533 1772.2,685.533 1772.76,685.533 1773.32,685.533 1773.88,685.533 1774.43,685.533 1774.99,685.533 1775.55,685.533 1776.11,685.533 1776.67,685.533 1777.23,685.533 1777.79,685.533 1778.35,685.533 1778.91,685.533 1779.47,685.533 1780.03,685.533 1780.59,685.533 1781.15,685.533 1781.71,685.533 1782.26,685.533 1782.82,685.533 1783.38,685.533 1783.94,685.533 1784.5,685.533 1785.06,685.533 1785.62,685.533 1786.18,685.533 1786.74,685.533 1787.3,685.533 1787.86,685.533 1788.42,685.533 1788.98,685.533 1789.53,685.533 1790.09,685.533 1790.65,685.533 1791.21,685.533 1791.77,685.533 1792.33,685.533 1792.89,685.533 1793.45,685.533 1794.01,685.533 1794.57,685.533 1795.13,685.533 1795.69,685.533 1796.25,685.533 1796.8,685.533 1797.36,685.533 1797.92,685.533 1798.48,685.533 1799.04,685.533 1799.6,685.533 1800.16,685.533 1800.72,685.533 1801.28,685.533 1801.84,685.533 1802.4,685.533 1802.96,685.533 1803.52,685.533 1804.08,685.533 1804.63,685.533 1805.19,685.533 1805.75,685.533 1806.31,685.533 1806.87,685.533 1807.43,685.533 1807.99,685.533 1808.55,685.533 1809.11,685.533 1809.67,685.533 1810.23,685.533 1810.79,685.533 1811.35,685.533 1811.9,685.533 1812.46,685.533 1813.02,685.533 1813.58,685.533 1814.14,685.533 1814.7,685.533 1815.26,685.533 1815.82,685.533 1816.38,685.533 1816.94,685.533 1817.5,685.533 1818.06,685.533 1818.62,685.533 1819.18,685.533 1819.73,685.533 1820.29,685.533 1820.85,685.533 1821.41,685.533 1821.97,685.533 1822.53,685.533 1823.09,685.533 1823.65,685.533 1824.21,685.533 1824.77,685.533 1825.33,685.533 1825.89,685.533 1826.45,685.533 1827,685.533 1827.56,685.533 1828.12,685.533 1828.68,685.533 1829.24,685.533 1829.8,685.533 1830.36,685.533 1830.92,685.533 1831.48,685.533 1832.04,685.533 1832.6,685.533 1833.16,685.533 1833.72,685.533 1834.27,685.533 1834.83,685.533 1835.39,685.533 1835.95,685.533 1836.51,685.533 1837.07,685.533 1837.63,685.533 1838.19,685.533 \"/>\n<path clip-path=\"url(#clip303)\" d=\"M720.247 684.312 L720.806 684.312 L721.365 684.312 L721.924 684.312 L722.484 684.312 L723.043 684.312 L723.602 684.312 L724.161 684.312 L724.721 684.312 L725.28 684.312 L725.839 684.312 L726.398 684.312 L726.958 684.312 L727.517 684.312 L728.076 684.312 L728.635 684.312 L729.195 684.312 L729.754 684.312 L730.313 684.312 L730.872 684.312 L731.432 684.312 L731.991 684.312 L732.55 684.312 L733.109 684.312 L733.669 684.312 L734.228 684.312 L734.787 684.312 L735.346 684.312 L735.906 684.312 L736.465 684.312 L737.024 684.312 L737.583 684.312 L738.143 684.312 L738.702 684.312 L739.261 684.312 L739.82 684.312 L740.38 684.312 L740.939 684.312 L741.498 684.312 L742.057 684.312 L742.617 684.312 L743.176 684.312 L743.735 684.312 L744.294 684.312 L744.854 684.312 L745.413 684.312 L745.972 684.312 L746.531 684.312 L747.091 684.312 L747.65 684.312 L748.209 684.312 L748.768 684.312 L749.328 684.312 L749.887 684.312 L750.446 684.312 L751.005 684.312 L751.565 684.312 L752.124 684.312 L752.683 684.312 L753.242 684.312 L753.802 684.312 L754.361 684.312 L754.92 684.312 L755.479 684.312 L756.039 684.312 L756.598 684.312 L757.157 684.312 L757.716 684.312 L758.276 684.312 L758.835 684.312 L759.394 684.312 L759.953 684.312 L760.513 684.312 L761.072 684.312 L761.631 684.312 L762.19 684.312 L762.75 684.312 L763.309 684.312 L763.868 684.312 L764.427 684.312 L764.987 684.312 L765.546 684.312 L766.105 684.312 L766.664 684.312 L767.224 684.312 L767.783 684.312 L768.342 684.312 L768.901 684.312 L769.461 684.312 L770.02 684.312 L770.579 684.312 L771.138 684.312 L771.698 684.312 L772.257 684.312 L772.816 684.312 L773.375 684.312 L773.935 684.312 L774.494 684.312 L775.053 684.312 L775.612 684.312 L776.172 684.312 L776.731 684.312 L777.29 684.312 L777.849 684.312 L778.409 684.312 L778.968 684.312 L779.527 684.312 L780.086 684.312 L780.646 684.312 L781.205 684.312 L781.764 684.312 L782.323 684.312 L782.883 684.312 L783.442 684.312 L784.001 684.312 L784.56 684.312 L785.12 684.312 L785.679 684.312 L786.238 684.312 L786.797 684.312 L787.357 684.312 L787.916 684.312 L788.475 684.312 L789.034 684.312 L789.594 684.312 L790.153 684.312 L790.712 684.312 L791.271 684.312 L791.831 684.312 L792.39 684.312 L792.949 684.312 L793.508 684.312 L794.068 684.312 L794.627 684.312 L795.186 684.312 L795.745 684.312 L796.305 684.312 L796.864 684.312 L797.423 684.312 L797.982 684.312 L798.542 684.312 L799.101 684.312 L799.66 684.312 L800.219 684.312 L800.779 684.312 L801.338 684.312 L801.897 684.312 L802.456 684.312 L803.016 684.312 L803.575 684.312 L804.134 684.312 L804.693 684.312 L805.253 684.312 L805.812 684.312 L806.371 684.312 L806.931 684.312 L807.49 684.312 L808.049 684.312 L808.608 684.312 L809.168 684.312 L809.727 684.312 L810.286 684.312 L810.845 684.312 L811.405 684.312 L811.964 684.312 L812.523 684.312 L813.082 684.312 L813.642 684.312 L814.201 684.312 L814.76 684.312 L815.319 684.312 L815.879 684.312 L816.438 684.312 L816.997 684.312 L817.556 684.312 L818.116 684.312 L818.675 684.312 L819.234 684.312 L819.793 684.312 L820.353 684.312 L820.912 684.312 L821.471 684.312 L822.03 684.312 L822.59 684.312 L823.149 684.312 L823.708 684.312 L824.267 684.312 L824.827 684.312 L825.386 684.312 L825.945 684.312 L826.504 684.312 L827.064 684.312 L827.623 684.312 L828.182 684.312 L828.741 684.312 L829.301 684.312 L829.86 684.312 L830.419 684.312 L830.978 684.312 L831.538 684.312 L832.097 684.312 L832.656 684.312 L833.215 684.312 L833.775 684.312 L834.334 684.312 L834.893 684.312 L835.452 684.312 L836.012 684.312 L836.571 684.312 L837.13 684.312 L837.689 684.312 L838.249 684.312 L838.808 684.312 L839.367 684.312 L839.926 684.312 L840.486 684.312 L841.045 684.312 L841.604 684.312 L842.163 684.312 L842.723 684.312 L843.282 684.312 L843.841 684.312 L844.4 684.312 L844.96 684.312 L845.519 684.312 L846.078 684.312 L846.637 684.312 L847.197 684.312 L847.756 684.312 L848.315 684.312 L848.874 684.312 L849.434 684.312 L849.993 684.312 L850.552 684.312 L851.111 684.312 L851.671 684.312 L852.23 684.312 L852.789 684.312 L853.348 684.312 L853.908 684.312 L854.467 684.312 L855.026 684.312 L855.585 684.312 L856.145 684.312 L856.704 684.312 L857.263 684.312 L857.822 684.312 L858.382 684.312 L858.941 684.312 L859.5 684.312 L860.059 684.312 L860.619 684.312 L861.178 684.312 L861.737 684.312 L862.296 684.312 L862.856 684.312 L863.415 684.312 L863.974 684.312 L864.533 684.312 L865.093 684.312 L865.652 684.312 L866.211 684.312 L866.77 684.312 L867.33 684.312 L867.889 684.312 L868.448 684.312 L869.007 684.312 L869.567 684.312 L870.126 684.312 L870.685 684.312 L871.244 684.312 L871.804 684.312 L872.363 684.312 L872.922 684.312 L873.481 684.312 L874.041 684.312 L874.6 684.312 L875.159 684.312 L875.718 684.312 L876.278 684.312 L876.837 684.312 L877.396 684.312 L877.955 684.312 L878.515 684.312 L879.074 684.312 L879.633 684.312 L880.192 684.312 L880.752 684.312 L881.311 684.312 L881.87 684.312 L882.429 684.312 L882.989 684.312 L883.548 684.312 L884.107 684.312 L884.666 684.312 L885.226 684.312 L885.785 684.312 L886.344 684.312 L886.903 684.312 L887.463 684.312 L888.022 684.312 L888.581 684.312 L889.14 684.312 L889.7 684.312 L890.259 684.312 L890.818 684.312 L891.377 684.312 L891.937 684.312 L892.496 684.312 L893.055 684.312 L893.614 684.312 L894.174 684.312 L894.733 684.312 L895.292 684.312 L895.851 684.312 L896.411 684.312 L896.97 684.312 L897.529 684.312 L898.088 684.312 L898.648 684.312 L899.207 684.312 L899.766 684.312 L900.325 684.312 L900.885 684.312 L901.444 684.312 L902.003 684.312 L902.562 684.312 L903.122 684.312 L903.681 684.312 L904.24 684.312 L904.799 684.312 L905.359 684.312 L905.918 684.312 L906.477 684.312 L907.036 684.312 L907.596 684.312 L908.155 684.312 L908.714 684.312 L909.273 684.312 L909.833 684.312 L910.392 684.312 L910.951 684.312 L911.51 684.312 L912.07 684.312 L912.629 684.312 L913.188 684.312 L913.747 684.312 L914.307 684.312 L914.866 684.312 L915.425 684.312 L915.984 684.312 L916.544 684.312 L917.103 684.312 L917.662 684.312 L918.221 684.312 L918.781 684.312 L919.34 684.312 L919.899 684.312 L920.458 684.312 L921.018 684.312 L921.577 684.312 L922.136 684.312 L922.695 684.312 L923.255 684.312 L923.814 684.312 L924.373 684.312 L924.932 684.312 L925.492 684.312 L926.051 684.312 L926.61 684.312 L927.169 684.312 L927.729 684.312 L928.288 684.312 L928.847 684.312 L929.406 684.312 L929.966 684.312 L930.525 684.312 L931.084 684.312 L931.644 684.312 L932.203 684.312 L932.762 684.312 L933.321 684.312 L933.881 684.312 L934.44 684.312 L934.999 684.312 L935.558 684.312 L936.118 684.312 L936.677 684.312 L937.236 684.312 L937.795 684.312 L938.355 684.312 L938.914 684.312 L939.473 684.312 L940.032 684.312 L940.592 684.312 L941.151 684.312 L941.71 684.312 L942.269 684.312 L942.829 684.312 L943.388 684.312 L943.947 684.312 L944.506 684.312 L945.066 684.312 L945.625 684.312 L946.184 684.312 L946.743 684.312 L947.303 684.312 L947.862 684.312 L948.421 684.312 L948.98 684.312 L949.54 684.312 L950.099 684.312 L950.658 684.312 L951.217 684.312 L951.777 684.312 L952.336 684.312 L952.895 684.312 L953.454 684.312 L954.014 684.312 L954.573 684.312 L955.132 684.312 L955.691 684.312 L956.251 684.312 L956.81 684.312 L957.369 684.312 L957.928 684.312 L958.488 684.312 L959.047 684.312 L959.606 684.312 L960.165 684.312 L960.725 684.312 L961.284 684.312 L961.843 684.312 L962.402 684.312 L962.962 684.312 L963.521 684.312 L964.08 684.312 L964.639 684.312 L965.199 684.312 L965.758 684.312 L966.317 684.312 L966.876 684.312 L967.436 684.312 L967.995 684.312 L968.554 684.312 L969.113 684.312 L969.673 684.312 L970.232 684.312 L970.791 684.312 L971.35 684.312 L971.91 684.312 L972.469 684.312 L973.028 684.312 L973.587 684.312 L974.147 684.312 L974.706 684.312 L975.265 684.312 L975.824 684.312 L976.384 684.312 L976.943 684.312 L977.502 684.312 L978.061 684.312 L978.621 684.312 L979.18 684.312 L979.739 684.312 L980.298 684.312 L980.858 684.312 L981.417 684.312 L981.976 684.312 L982.535 684.312 L983.095 684.312 L983.654 684.312 L984.213 684.312 L984.772 684.312 L985.332 684.312 L985.891 684.312 L986.45 684.312 L987.009 684.312 L987.569 684.312 L988.128 684.312 L988.687 684.312 L989.246 684.312 L989.806 684.312 L990.365 684.312 L990.924 684.312 L991.483 684.312 L992.043 684.312 L992.602 684.312 L993.161 684.312 L993.72 684.312 L994.28 684.312 L994.839 684.312 L995.398 684.312 L995.957 684.312 L996.517 684.312 L997.076 684.312 L997.635 684.312 L998.194 684.312 L998.754 684.312 L999.313 684.312 L999.872 684.312 L1000.43 684.312 L1000.99 684.312 L1001.55 684.312 L1002.11 684.312 L1002.67 684.312 L1003.23 684.312 L1003.79 684.312 L1004.35 684.312 L1004.91 684.312 L1005.46 684.312 L1006.02 684.312 L1006.58 684.312 L1007.14 684.312 L1007.7 684.312 L1008.26 684.312 L1008.82 684.312 L1009.38 684.312 L1009.94 684.312 L1010.5 684.312 L1011.06 684.312 L1011.62 684.312 L1012.18 684.312 L1012.73 684.312 L1013.29 684.312 L1013.85 684.312 L1014.41 684.312 L1014.97 684.312 L1015.53 684.312 L1016.09 684.312 L1016.65 684.312 L1017.21 684.312 L1017.77 684.312 L1018.33 684.312 L1018.89 684.312 L1019.45 684.312 L1020.01 684.312 L1020.56 684.312 L1021.12 684.312 L1021.68 684.312 L1022.24 684.312 L1022.8 684.312 L1023.36 684.312 L1023.92 684.312 L1024.48 684.312 L1025.04 684.312 L1025.6 684.312 L1026.16 684.312 L1026.72 684.312 L1027.28 684.312 L1027.83 684.312 L1028.39 684.312 L1028.95 684.312 L1029.51 684.312 L1030.07 684.312 L1030.63 684.312 L1031.19 684.312 L1031.75 684.312 L1032.31 684.312 L1032.87 684.312 L1033.43 684.312 L1033.99 684.312 L1034.55 684.312 L1035.1 684.312 L1035.66 684.312 L1036.22 684.312 L1036.78 684.312 L1037.34 684.312 L1037.9 684.312 L1038.46 684.312 L1039.02 684.312 L1039.58 684.312 L1040.14 684.312 L1040.7 684.312 L1041.26 684.312 L1041.82 684.312 L1042.38 684.312 L1042.93 684.312 L1043.49 684.312 L1044.05 684.312 L1044.61 684.312 L1045.17 684.312 L1045.73 684.312 L1046.29 684.312 L1046.85 684.312 L1047.41 684.312 L1047.97 684.312 L1048.53 684.312 L1049.09 684.312 L1049.65 684.312 L1050.2 684.312 L1050.76 684.312 L1051.32 684.312 L1051.88 684.312 L1052.44 684.312 L1053 684.312 L1053.56 684.312 L1054.12 684.312 L1054.68 684.312 L1055.24 684.312 L1055.8 684.312 L1056.36 684.312 L1056.92 684.312 L1057.48 684.312 L1058.03 684.312 L1058.59 684.312 L1059.15 684.312 L1059.71 684.312 L1060.27 684.312 L1060.83 684.312 L1061.39 684.312 L1061.95 684.312 L1062.51 684.312 L1063.07 684.312 L1063.63 684.312 L1064.19 684.312 L1064.75 684.312 L1065.3 684.312 L1065.86 684.312 L1066.42 684.312 L1066.98 684.312 L1067.54 684.312 L1068.1 684.312 L1068.66 684.312 L1069.22 684.312 L1069.78 684.312 L1070.34 684.312 L1070.9 684.312 L1071.46 684.312 L1072.02 684.312 L1072.57 684.312 L1073.13 684.312 L1073.69 684.312 L1074.25 684.312 L1074.81 684.312 L1075.37 684.312 L1075.93 684.312 L1076.49 684.312 L1077.05 684.312 L1077.61 684.312 L1078.17 684.312 L1078.73 684.312 L1079.29 684.312 L1079.85 684.312 L1080.4 684.312 L1080.96 684.312 L1081.52 684.312 L1082.08 684.312 L1082.64 684.312 L1083.2 684.312 L1083.76 684.312 L1084.32 684.312 L1084.88 684.312 L1085.44 684.312 L1086 684.312 L1086.56 684.312 L1087.12 684.312 L1087.67 684.312 L1088.23 684.312 L1088.79 684.312 L1089.35 684.312 L1089.91 684.312 L1090.47 684.312 L1091.03 684.312 L1091.59 684.312 L1092.15 684.312 L1092.71 684.312 L1093.27 684.312 L1093.83 684.312 L1094.39 684.312 L1094.94 684.312 L1095.5 684.312 L1096.06 684.312 L1096.62 684.312 L1097.18 684.312 L1097.74 684.312 L1098.3 684.312 L1098.86 684.312 L1099.42 684.312 L1099.98 684.312 L1100.54 684.312 L1101.1 684.312 L1101.66 684.312 L1102.22 684.312 L1102.77 684.312 L1103.33 684.312 L1103.89 684.312 L1104.45 684.312 L1105.01 684.312 L1105.57 684.312 L1106.13 684.312 L1106.69 684.312 L1107.25 684.312 L1107.81 684.312 L1108.37 684.312 L1108.93 684.312 L1109.49 684.312 L1110.04 684.312 L1110.6 684.312 L1111.16 684.312 L1111.72 684.312 L1112.28 684.312 L1112.84 684.312 L1113.4 684.312 L1113.96 684.312 L1114.52 684.312 L1115.08 684.312 L1115.64 684.312 L1116.2 684.312 L1116.76 684.312 L1117.31 684.312 L1117.87 684.312 L1118.43 684.312 L1118.99 684.312 L1119.55 684.312 L1120.11 684.312 L1120.67 684.312 L1121.23 684.312 L1121.79 684.312 L1122.35 684.312 L1122.91 684.312 L1123.47 684.312 L1124.03 684.312 L1124.59 684.312 L1125.14 684.312 L1125.7 684.312 L1126.26 684.312 L1126.82 684.312 L1127.38 684.312 L1127.94 684.312 L1128.5 684.312 L1129.06 684.312 L1129.62 684.312 L1130.18 684.312 L1130.74 684.312 L1131.3 684.312 L1131.86 684.312 L1132.41 684.312 L1132.97 684.312 L1133.53 684.312 L1134.09 684.312 L1134.65 684.312 L1135.21 684.312 L1135.77 684.312 L1136.33 684.312 L1136.89 684.312 L1137.45 684.312 L1138.01 684.312 L1138.57 684.312 L1139.13 684.312 L1139.68 684.312 L1140.24 684.312 L1140.8 684.312 L1141.36 684.312 L1141.92 684.312 L1142.48 684.312 L1143.04 684.312 L1143.6 684.312 L1144.16 684.312 L1144.72 684.312 L1145.28 684.312 L1145.84 684.312 L1146.4 684.312 L1146.96 684.312 L1147.51 684.312 L1148.07 684.312 L1148.63 684.312 L1149.19 684.312 L1149.75 684.312 L1150.31 684.312 L1150.87 684.312 L1151.43 684.312 L1151.99 684.312 L1152.55 684.312 L1153.11 684.312 L1153.67 684.312 L1154.23 684.312 L1154.78 684.312 L1155.34 684.312 L1155.9 684.312 L1156.46 684.312 L1157.02 684.312 L1157.58 684.312 L1158.14 684.312 L1158.7 684.312 L1159.26 684.312 L1159.82 684.312 L1160.38 684.312 L1160.94 684.312 L1161.5 684.312 L1162.05 684.312 L1162.61 684.312 L1163.17 684.312 L1163.73 684.312 L1164.29 684.312 L1164.85 684.312 L1165.41 684.312 L1165.97 684.312 L1166.53 684.312 L1167.09 684.312 L1167.65 684.312 L1168.21 684.312 L1168.77 684.312 L1169.33 684.312 L1169.88 684.312 L1170.44 684.312 L1171 684.312 L1171.56 684.312 L1172.12 684.312 L1172.68 684.312 L1173.24 684.312 L1173.8 684.312 L1174.36 684.312 L1174.92 684.312 L1175.48 684.312 L1176.04 684.312 L1176.6 684.312 L1177.15 684.312 L1177.71 684.312 L1178.27 684.312 L1178.83 684.312 L1179.39 684.312 L1179.95 684.312 L1180.51 684.312 L1181.07 684.312 L1181.63 684.312 L1182.19 684.312 L1182.75 684.312 L1183.31 684.312 L1183.87 684.312 L1184.43 684.312 L1184.98 684.312 L1185.54 684.312 L1186.1 684.312 L1186.66 684.312 L1187.22 684.312 L1187.78 684.312 L1188.34 684.312 L1188.9 684.312 L1189.46 684.312 L1190.02 684.312 L1190.58 684.312 L1191.14 684.312 L1191.7 684.312 L1192.25 684.312 L1192.81 684.312 L1193.37 684.312 L1193.93 684.312 L1194.49 684.312 L1195.05 684.312 L1195.61 684.312 L1196.17 684.312 L1196.73 684.312 L1197.29 684.312 L1197.85 684.312 L1198.41 684.312 L1198.97 684.312 L1199.52 684.312 L1200.08 684.312 L1200.64 684.312 L1201.2 684.312 L1201.76 684.312 L1202.32 684.312 L1202.88 684.312 L1203.44 684.312 L1204 684.312 L1204.56 684.312 L1205.12 684.312 L1205.68 684.312 L1206.24 684.312 L1206.8 684.312 L1207.35 684.312 L1207.91 684.312 L1208.47 684.312 L1209.03 684.312 L1209.59 684.312 L1210.15 684.312 L1210.71 684.312 L1211.27 684.312 L1211.83 684.312 L1212.39 684.312 L1212.95 684.312 L1213.51 684.312 L1214.07 684.312 L1214.62 684.312 L1215.18 684.312 L1215.74 684.312 L1216.3 684.312 L1216.86 684.312 L1217.42 684.312 L1217.98 684.312 L1218.54 684.312 L1219.1 684.312 L1219.66 684.312 L1220.22 684.312 L1220.78 684.312 L1221.34 684.312 L1221.89 684.312 L1222.45 684.312 L1223.01 684.312 L1223.57 684.312 L1224.13 684.312 L1224.69 684.312 L1225.25 684.312 L1225.81 684.312 L1226.37 684.312 L1226.93 684.312 L1227.49 684.312 L1228.05 684.312 L1228.61 684.312 L1229.17 684.312 L1229.72 684.312 L1230.28 684.312 L1230.84 684.312 L1231.4 684.312 L1231.96 684.312 L1232.52 684.312 L1233.08 684.312 L1233.64 684.312 L1234.2 684.312 L1234.76 684.312 L1235.32 684.312 L1235.88 684.312 L1236.44 684.312 L1236.99 684.312 L1237.55 684.312 L1238.11 684.312 L1238.67 684.312 L1239.23 684.312 L1239.79 684.312 L1240.35 684.312 L1240.91 684.312 L1241.47 684.312 L1242.03 684.312 L1242.59 684.312 L1243.15 684.312 L1243.71 684.312 L1244.26 684.312 L1244.82 684.312 L1245.38 684.312 L1245.94 684.312 L1246.5 684.312 L1247.06 684.312 L1247.62 684.312 L1248.18 684.312 L1248.74 684.312 L1249.3 684.312 L1249.86 684.312 L1250.42 684.312 L1250.98 684.312 L1251.54 684.312 L1252.09 684.312 L1252.65 684.312 L1253.21 684.312 L1253.77 684.312 L1254.33 684.312 L1254.89 684.312 L1255.45 684.312 L1256.01 684.312 L1256.57 684.312 L1257.13 684.312 L1257.69 684.312 L1258.25 684.312 L1258.81 684.312 L1259.36 684.312 L1259.92 684.312 L1260.48 684.312 L1261.04 684.312 L1261.6 684.312 L1262.16 684.312 L1262.72 684.312 L1263.28 684.312 L1263.84 684.312 L1264.4 684.312 L1264.96 684.312 L1265.52 684.312 L1266.08 684.312 L1266.63 684.312 L1267.19 684.312 L1267.75 684.312 L1268.31 684.312 L1268.87 684.312 L1269.43 684.312 L1269.99 684.312 L1270.55 684.312 L1271.11 684.312 L1271.67 684.312 L1272.23 684.312 L1272.79 684.312 L1273.35 684.312 L1273.91 684.312 L1274.46 684.312 L1275.02 684.312 L1275.58 684.312 L1276.14 684.312 L1276.7 684.312 L1277.26 684.312 L1277.82 684.312 L1278.38 684.312 L1278.94 684.312 L1279.5 684.312 L1280.06 684.312 L1280.62 684.312 L1281.18 684.312 L1281.73 684.312 L1282.29 684.312 L1282.85 684.312 L1283.41 684.312 L1283.97 684.312 L1284.53 684.312 L1285.09 684.312 L1285.65 684.312 L1286.21 684.312 L1286.77 684.312 L1287.33 684.312 L1287.89 684.312 L1288.45 684.312 L1289 684.312 L1289.56 684.312 L1290.12 684.312 L1290.68 684.312 L1291.24 684.312 L1291.8 684.312 L1292.36 684.312 L1292.92 684.312 L1293.48 684.312 L1294.04 684.312 L1294.6 684.312 L1295.16 684.312 L1295.72 684.312 L1296.28 684.312 L1296.83 684.312 L1297.39 684.312 L1297.95 684.312 L1298.51 684.312 L1299.07 684.312 L1299.63 684.312 L1300.19 684.312 L1300.75 684.312 L1301.31 684.312 L1301.87 684.312 L1302.43 684.312 L1302.99 684.312 L1303.55 684.312 L1304.1 684.312 L1304.66 684.312 L1305.22 684.312 L1305.78 684.312 L1306.34 684.312 L1306.9 684.312 L1307.46 684.312 L1308.02 684.312 L1308.58 684.312 L1309.14 684.312 L1309.7 684.312 L1310.26 684.312 L1310.82 684.312 L1311.38 684.312 L1311.93 684.312 L1312.49 684.312 L1313.05 684.312 L1313.61 684.312 L1314.17 684.312 L1314.73 684.312 L1315.29 684.312 L1315.85 684.312 L1316.41 684.312 L1316.97 684.312 L1317.53 684.312 L1318.09 684.312 L1318.65 684.312 L1319.2 684.312 L1319.76 684.312 L1320.32 684.312 L1320.88 684.312 L1321.44 684.312 L1322 684.312 L1322.56 684.312 L1323.12 684.312 L1323.68 684.312 L1324.24 684.312 L1324.8 684.312 L1325.36 684.312 L1325.92 684.312 L1326.47 684.312 L1327.03 684.312 L1327.59 684.312 L1328.15 684.312 L1328.71 684.312 L1329.27 684.312 L1329.83 684.312 L1330.39 684.312 L1330.95 684.312 L1331.51 684.312 L1332.07 684.312 L1332.63 684.312 L1333.19 684.312 L1333.75 684.312 L1334.3 684.312 L1334.86 684.312 L1335.42 684.312 L1335.98 684.312 L1336.54 684.312 L1337.1 684.312 L1337.66 684.312 L1338.22 684.312 L1338.78 684.312 L1339.34 684.312 L1339.9 684.312 L1340.46 684.312 L1341.02 684.312 L1341.57 684.312 L1342.13 684.312 L1342.69 684.312 L1343.25 684.312 L1343.81 684.312 L1344.37 684.312 L1344.93 684.312 L1345.49 684.312 L1346.05 684.312 L1346.61 684.312 L1347.17 684.312 L1347.73 684.312 L1348.29 684.312 L1348.84 684.312 L1349.4 684.312 L1349.96 684.312 L1350.52 684.312 L1351.08 684.312 L1351.64 684.312 L1352.2 684.312 L1352.76 684.312 L1353.32 684.312 L1353.88 684.312 L1354.44 684.312 L1355 684.312 L1355.56 684.312 L1356.12 684.312 L1356.67 684.312 L1357.23 684.312 L1357.79 684.312 L1358.35 684.312 L1358.91 684.312 L1359.47 684.312 L1360.03 684.312 L1360.59 684.312 L1361.15 684.312 L1361.71 684.312 L1362.27 684.312 L1362.83 684.312 L1363.39 684.312 L1363.94 684.312 L1364.5 684.312 L1365.06 684.312 L1365.62 684.312 L1366.18 684.312 L1366.74 684.312 L1367.3 684.312 L1367.86 684.312 L1368.42 684.312 L1368.98 684.312 L1369.54 684.312 L1370.1 684.312 L1370.66 684.312 L1371.21 684.312 L1371.77 684.312 L1372.33 684.312 L1372.89 684.312 L1373.45 684.312 L1374.01 684.312 L1374.57 684.312 L1375.13 684.312 L1375.69 684.312 L1376.25 684.312 L1376.81 684.312 L1377.37 684.312 L1377.93 684.312 L1378.49 684.312 L1379.04 684.312 L1379.6 684.312 L1380.16 684.312 L1380.72 684.312 L1381.28 684.312 L1381.84 684.312 L1382.4 684.312 L1382.96 684.312 L1383.52 684.312 L1384.08 684.312 L1384.64 684.312 L1385.2 684.312 L1385.76 684.312 L1386.31 684.312 L1386.87 684.312 L1387.43 684.312 L1387.99 684.312 L1388.55 684.312 L1389.11 684.312 L1389.67 684.312 L1390.23 684.312 L1390.79 684.312 L1391.35 684.312 L1391.91 684.312 L1392.47 684.312 L1393.03 684.312 L1393.58 684.312 L1394.14 684.312 L1394.7 684.312 L1395.26 684.312 L1395.82 684.312 L1396.38 684.312 L1396.94 684.312 L1397.5 684.312 L1398.06 684.312 L1398.62 684.312 L1399.18 684.312 L1399.74 684.312 L1400.3 684.312 L1400.86 684.312 L1401.41 684.312 L1401.97 684.312 L1402.53 684.312 L1403.09 684.312 L1403.65 684.312 L1404.21 684.312 L1404.77 684.312 L1405.33 684.312 L1405.89 684.312 L1406.45 684.312 L1407.01 684.312 L1407.57 684.312 L1408.13 684.312 L1408.68 684.312 L1409.24 684.312 L1409.8 684.312 L1410.36 684.312 L1410.92 684.312 L1411.48 684.312 L1412.04 684.312 L1412.6 684.312 L1413.16 684.312 L1413.72 684.312 L1414.28 684.312 L1414.84 684.312 L1415.4 684.312 L1415.95 684.312 L1416.51 684.312 L1417.07 684.312 L1417.63 684.312 L1418.19 684.312 L1418.75 684.312 L1419.31 684.312 L1419.87 684.312 L1420.43 684.312 L1420.99 684.312 L1421.55 684.312 L1422.11 684.312 L1422.67 684.312 L1423.23 684.312 L1423.78 684.312 L1424.34 684.312 L1424.9 684.312 L1425.46 684.312 L1426.02 684.312 L1426.58 684.312 L1427.14 684.312 L1427.7 684.312 L1428.26 684.312 L1428.82 684.312 L1429.38 684.312 L1429.94 684.312 L1430.5 684.312 L1431.05 684.312 L1431.61 684.312 L1432.17 684.312 L1432.73 684.312 L1433.29 684.312 L1433.85 684.312 L1434.41 684.312 L1434.97 684.312 L1435.53 684.312 L1436.09 684.312 L1436.65 684.312 L1437.21 684.312 L1437.77 684.312 L1438.33 684.312 L1438.88 684.312 L1439.44 684.312 L1440 684.312 L1440.56 684.312 L1441.12 684.312 L1441.68 684.312 L1442.24 684.312 L1442.8 684.312 L1443.36 684.312 L1443.92 684.312 L1444.48 684.312 L1445.04 684.312 L1445.6 684.312 L1446.15 684.312 L1446.71 684.312 L1447.27 684.312 L1447.83 684.312 L1448.39 684.312 L1448.95 684.312 L1449.51 684.312 L1450.07 684.312 L1450.63 684.312 L1451.19 684.312 L1451.75 684.312 L1452.31 684.312 L1452.87 684.312 L1453.42 684.312 L1453.98 684.312 L1454.54 684.312 L1455.1 684.312 L1455.66 684.312 L1456.22 684.312 L1456.78 684.312 L1457.34 684.312 L1457.9 684.312 L1458.46 684.312 L1459.02 684.312 L1459.58 684.312 L1460.14 684.312 L1460.7 684.312 L1461.25 684.312 L1461.81 684.312 L1462.37 684.312 L1462.93 684.312 L1463.49 684.312 L1464.05 684.312 L1464.61 684.312 L1465.17 684.312 L1465.73 684.312 L1466.29 684.312 L1466.85 684.312 L1467.41 684.312 L1467.97 684.312 L1468.52 684.312 L1469.08 684.312 L1469.64 684.312 L1470.2 684.312 L1470.76 684.312 L1471.32 684.312 L1471.88 684.312 L1472.44 684.312 L1473 684.312 L1473.56 684.312 L1474.12 684.312 L1474.68 684.312 L1475.24 684.312 L1475.79 684.312 L1476.35 684.312 L1476.91 684.312 L1477.47 684.312 L1478.03 684.312 L1478.59 684.312 L1479.15 684.312 L1479.71 684.312 L1480.27 684.312 L1480.83 684.312 L1481.39 684.312 L1481.95 684.312 L1482.51 684.312 L1483.07 684.312 L1483.62 684.312 L1484.18 684.312 L1484.74 684.312 L1485.3 684.312 L1485.86 684.312 L1486.42 684.312 L1486.98 684.312 L1487.54 684.312 L1488.1 684.312 L1488.66 684.312 L1489.22 684.312 L1489.78 684.312 L1490.34 684.312 L1490.89 684.312 L1491.45 684.312 L1492.01 684.312 L1492.57 684.312 L1493.13 684.312 L1493.69 684.312 L1494.25 684.312 L1494.81 684.312 L1495.37 684.312 L1495.93 684.312 L1496.49 684.312 L1497.05 684.312 L1497.61 684.312 L1498.16 684.312 L1498.72 684.312 L1499.28 684.312 L1499.84 684.312 L1500.4 684.312 L1500.96 684.312 L1501.52 684.312 L1502.08 684.312 L1502.64 684.312 L1503.2 684.312 L1503.76 684.312 L1504.32 684.312 L1504.88 684.312 L1505.44 684.312 L1505.99 684.312 L1506.55 684.312 L1507.11 684.312 L1507.67 684.312 L1508.23 684.312 L1508.79 684.312 L1509.35 684.312 L1509.91 684.312 L1510.47 684.312 L1511.03 684.312 L1511.59 684.312 L1512.15 684.312 L1512.71 684.312 L1513.26 684.312 L1513.82 684.312 L1514.38 684.312 L1514.94 684.312 L1515.5 684.312 L1516.06 684.312 L1516.62 684.312 L1517.18 684.312 L1517.74 684.312 L1518.3 684.312 L1518.86 684.312 L1519.42 684.312 L1519.98 684.312 L1520.53 684.312 L1521.09 684.312 L1521.65 684.312 L1522.21 684.312 L1522.77 684.312 L1523.33 684.312 L1523.89 684.312 L1524.45 684.312 L1525.01 684.312 L1525.57 684.312 L1526.13 684.312 L1526.69 684.312 L1527.25 684.312 L1527.81 684.312 L1528.36 684.312 L1528.92 684.312 L1529.48 684.312 L1530.04 684.312 L1530.6 684.312 L1531.16 684.312 L1531.72 684.312 L1532.28 684.312 L1532.84 684.312 L1533.4 684.312 L1533.96 684.312 L1534.52 684.312 L1535.08 684.312 L1535.63 684.312 L1536.19 684.312 L1536.75 684.312 L1537.31 684.312 L1537.87 684.312 L1538.43 684.312 L1538.99 684.312 L1539.55 684.312 L1540.11 684.312 L1540.67 684.312 L1541.23 684.312 L1541.79 684.312 L1542.35 684.312 L1542.9 684.312 L1543.46 684.312 L1544.02 684.312 L1544.58 684.312 L1545.14 684.312 L1545.7 684.312 L1546.26 684.312 L1546.82 684.312 L1547.38 684.312 L1547.94 684.312 L1548.5 684.312 L1549.06 684.312 L1549.62 684.312 L1550.18 684.312 L1550.73 684.312 L1551.29 684.312 L1551.85 684.312 L1552.41 684.312 L1552.97 684.312 L1553.53 684.312 L1554.09 684.312 L1554.65 684.312 L1555.21 684.312 L1555.77 684.312 L1556.33 684.312 L1556.89 684.312 L1557.45 684.312 L1558 684.312 L1558.56 684.312 L1559.12 684.312 L1559.68 684.312 L1560.24 684.312 L1560.8 684.312 L1561.36 684.312 L1561.92 684.312 L1562.48 684.312 L1563.04 684.312 L1563.6 684.312 L1564.16 684.312 L1564.72 684.312 L1565.28 684.312 L1565.83 684.312 L1566.39 684.312 L1566.95 684.312 L1567.51 684.312 L1568.07 684.312 L1568.63 684.312 L1569.19 684.312 L1569.75 684.312 L1570.31 684.312 L1570.87 684.312 L1571.43 684.312 L1571.99 684.312 L1572.55 684.312 L1573.1 684.312 L1573.66 684.312 L1574.22 684.312 L1574.78 684.312 L1575.34 684.312 L1575.9 684.312 L1576.46 684.312 L1577.02 684.312 L1577.58 684.312 L1578.14 684.312 L1578.7 684.312 L1579.26 684.312 L1579.82 684.312 L1580.37 684.312 L1580.93 684.312 L1581.49 684.312 L1582.05 684.312 L1582.61 684.312 L1583.17 684.312 L1583.73 684.312 L1584.29 684.312 L1584.85 684.312 L1585.41 684.312 L1585.97 684.312 L1586.53 684.312 L1587.09 684.312 L1587.65 684.312 L1588.2 684.312 L1588.76 684.312 L1589.32 684.312 L1589.88 684.312 L1590.44 684.312 L1591 684.312 L1591.56 684.312 L1592.12 684.312 L1592.68 684.312 L1593.24 684.312 L1593.8 684.312 L1594.36 684.312 L1594.92 684.312 L1595.47 684.312 L1596.03 684.312 L1596.59 684.312 L1597.15 684.312 L1597.71 684.312 L1598.27 684.312 L1598.83 684.312 L1599.39 684.312 L1599.95 684.312 L1600.51 684.312 L1601.07 684.312 L1601.63 684.312 L1602.19 684.312 L1602.74 684.312 L1603.3 684.312 L1603.86 684.312 L1604.42 684.312 L1604.98 684.312 L1605.54 684.312 L1606.1 684.312 L1606.66 684.312 L1607.22 684.312 L1607.78 684.312 L1608.34 684.312 L1608.9 684.312 L1609.46 684.312 L1610.02 684.312 L1610.57 684.312 L1611.13 684.312 L1611.69 684.312 L1612.25 684.312 L1612.81 684.312 L1613.37 684.312 L1613.93 684.312 L1614.49 684.312 L1615.05 684.312 L1615.61 684.312 L1616.17 684.312 L1616.73 684.312 L1617.29 684.312 L1617.84 684.312 L1618.4 684.312 L1618.96 684.312 L1619.52 684.312 L1620.08 684.312 L1620.64 684.312 L1621.2 684.312 L1621.76 684.312 L1622.32 684.312 L1622.88 684.312 L1623.44 684.312 L1624 684.312 L1624.56 684.312 L1625.11 684.312 L1625.67 684.312 L1626.23 684.312 L1626.79 684.312 L1627.35 684.312 L1627.91 684.312 L1628.47 684.312 L1629.03 684.312 L1629.59 684.312 L1630.15 684.312 L1630.71 684.312 L1631.27 684.312 L1631.83 684.312 L1632.39 684.312 L1632.94 684.312 L1633.5 684.312 L1634.06 684.312 L1634.62 684.312 L1635.18 684.312 L1635.74 684.312 L1636.3 684.312 L1636.86 684.312 L1637.42 684.312 L1637.98 684.312 L1638.54 684.312 L1639.1 684.312 L1639.66 684.312 L1640.21 684.312 L1640.77 684.312 L1641.33 684.312 L1641.89 684.312 L1642.45 684.312 L1643.01 684.312 L1643.57 684.312 L1644.13 684.312 L1644.69 684.312 L1645.25 684.312 L1645.81 684.312 L1646.37 684.312 L1646.93 684.312 L1647.48 684.312 L1648.04 684.312 L1648.6 684.312 L1649.16 684.312 L1649.72 684.312 L1650.28 684.312 L1650.84 684.312 L1651.4 684.312 L1651.96 684.312 L1652.52 684.312 L1653.08 684.312 L1653.64 684.312 L1654.2 684.312 L1654.76 684.312 L1655.31 684.312 L1655.87 684.312 L1656.43 684.312 L1656.99 684.312 L1657.55 684.312 L1658.11 684.312 L1658.67 684.312 L1659.23 684.312 L1659.79 684.312 L1660.35 684.312 L1660.91 684.312 L1661.47 684.312 L1662.03 684.312 L1662.58 684.312 L1663.14 684.312 L1663.7 684.312 L1664.26 684.312 L1664.82 684.312 L1665.38 684.312 L1665.94 684.312 L1666.5 684.312 L1667.06 684.312 L1667.62 684.312 L1668.18 684.312 L1668.74 684.312 L1669.3 684.312 L1669.85 684.312 L1670.41 684.312 L1670.97 684.312 L1671.53 684.312 L1672.09 684.312 L1672.65 684.312 L1673.21 684.312 L1673.77 684.312 L1674.33 684.312 L1674.89 684.312 L1675.45 684.312 L1676.01 684.312 L1676.57 684.312 L1677.13 684.312 L1677.68 684.312 L1678.24 684.312 L1678.8 684.312 L1679.36 684.312 L1679.92 684.312 L1680.48 684.312 L1681.04 684.312 L1681.6 684.312 L1682.16 684.312 L1682.72 684.312 L1683.28 684.312 L1683.84 684.312 L1684.4 684.312 L1684.95 684.312 L1685.51 684.312 L1686.07 684.312 L1686.63 684.312 L1687.19 684.312 L1687.75 684.312 L1688.31 684.312 L1688.87 684.312 L1689.43 684.312 L1689.99 684.312 L1690.55 684.312 L1691.11 684.312 L1691.67 684.312 L1692.23 684.312 L1692.78 684.312 L1693.34 684.312 L1693.9 684.312 L1694.46 684.312 L1695.02 684.312 L1695.58 684.312 L1696.14 684.312 L1696.7 684.312 L1697.26 684.312 L1697.82 684.312 L1698.38 684.312 L1698.94 684.312 L1699.5 684.312 L1700.05 684.312 L1700.61 684.312 L1701.17 684.312 L1701.73 684.312 L1702.29 684.312 L1702.85 684.312 L1703.41 684.312 L1703.97 684.312 L1704.53 684.312 L1705.09 684.312 L1705.65 684.312 L1706.21 684.312 L1706.77 684.312 L1707.32 684.312 L1707.88 684.312 L1708.44 684.312 L1709 684.312 L1709.56 684.312 L1710.12 684.312 L1710.68 684.312 L1711.24 684.312 L1711.8 684.312 L1712.36 684.312 L1712.92 684.312 L1713.48 684.312 L1714.04 684.312 L1714.6 684.312 L1715.15 684.312 L1715.71 684.312 L1716.27 684.312 L1716.83 684.312 L1717.39 684.312 L1717.95 684.312 L1718.51 684.312 L1719.07 684.312 L1719.63 684.312 L1720.19 684.312 L1720.75 684.312 L1721.31 684.312 L1721.87 684.312 L1722.42 684.312 L1722.98 684.312 L1723.54 684.312 L1724.1 684.312 L1724.66 684.312 L1725.22 684.312 L1725.78 684.312 L1726.34 684.312 L1726.9 684.312 L1727.46 684.312 L1728.02 684.312 L1728.58 684.312 L1729.14 684.312 L1729.69 684.312 L1730.25 684.312 L1730.81 684.312 L1731.37 684.312 L1731.93 684.312 L1732.49 684.312 L1733.05 684.312 L1733.61 684.312 L1734.17 684.312 L1734.73 684.312 L1735.29 684.312 L1735.85 684.312 L1736.41 684.312 L1736.97 684.312 L1737.52 684.312 L1738.08 684.312 L1738.64 684.312 L1739.2 684.312 L1739.76 684.312 L1740.32 684.312 L1740.88 684.312 L1741.44 684.312 L1742 684.312 L1742.56 684.312 L1743.12 684.312 L1743.68 684.312 L1744.24 684.312 L1744.79 684.312 L1745.35 684.312 L1745.91 684.312 L1746.47 684.312 L1747.03 684.312 L1747.59 684.312 L1748.15 684.312 L1748.71 684.312 L1749.27 684.312 L1749.83 684.312 L1750.39 684.312 L1750.95 684.312 L1751.51 684.312 L1752.06 684.312 L1752.62 684.312 L1753.18 684.312 L1753.74 684.312 L1754.3 684.312 L1754.86 684.312 L1755.42 684.312 L1755.98 684.312 L1756.54 684.312 L1757.1 684.312 L1757.66 684.312 L1758.22 684.312 L1758.78 684.312 L1759.34 684.312 L1759.89 684.312 L1760.45 684.312 L1761.01 684.312 L1761.57 684.312 L1762.13 684.312 L1762.69 684.312 L1763.25 684.312 L1763.81 684.312 L1764.37 684.312 L1764.93 684.312 L1765.49 684.312 L1766.05 684.312 L1766.61 684.312 L1767.16 684.312 L1767.72 684.312 L1768.28 684.312 L1768.84 684.312 L1769.4 684.312 L1769.96 684.312 L1770.52 684.312 L1771.08 684.312 L1771.64 684.312 L1772.2 684.312 L1772.76 684.312 L1773.32 684.312 L1773.88 684.312 L1774.43 684.312 L1774.99 684.312 L1775.55 684.312 L1776.11 684.312 L1776.67 684.312 L1777.23 684.312 L1777.79 684.312 L1778.35 684.312 L1778.91 684.312 L1779.47 684.312 L1780.03 684.312 L1780.59 684.312 L1781.15 684.312 L1781.71 684.312 L1782.26 684.312 L1782.82 684.312 L1783.38 684.312 L1783.94 684.312 L1784.5 684.312 L1785.06 684.312 L1785.62 684.312 L1786.18 684.312 L1786.74 684.312 L1787.3 684.312 L1787.86 684.312 L1788.42 684.312 L1788.98 684.312 L1789.53 684.312 L1790.09 684.312 L1790.65 684.312 L1791.21 684.312 L1791.77 684.312 L1792.33 684.312 L1792.89 684.312 L1793.45 684.312 L1794.01 684.312 L1794.57 684.312 L1795.13 684.312 L1795.69 684.312 L1796.25 684.312 L1796.8 684.312 L1797.36 684.312 L1797.92 684.312 L1798.48 684.312 L1799.04 684.312 L1799.6 684.312 L1800.16 684.312 L1800.72 684.312 L1801.28 684.312 L1801.84 684.312 L1802.4 684.312 L1802.96 684.312 L1803.52 684.312 L1804.08 684.312 L1804.63 684.312 L1805.19 684.312 L1805.75 684.312 L1806.31 684.312 L1806.87 684.312 L1807.43 684.312 L1807.99 684.312 L1808.55 684.312 L1809.11 684.312 L1809.67 684.312 L1810.23 684.312 L1810.79 684.312 L1811.35 684.312 L1811.9 684.312 L1812.46 684.312 L1813.02 684.312 L1813.58 684.312 L1814.14 684.312 L1814.7 684.312 L1815.26 684.312 L1815.82 684.312 L1816.38 684.312 L1816.94 684.312 L1817.5 684.312 L1818.06 684.312 L1818.62 684.312 L1819.18 684.312 L1819.73 684.312 L1820.29 684.312 L1820.85 684.312 L1821.41 684.312 L1821.97 684.312 L1822.53 684.312 L1823.09 684.312 L1823.65 684.312 L1824.21 684.312 L1824.77 684.312 L1825.33 684.312 L1825.89 684.312 L1826.45 684.312 L1827 684.312 L1827.56 684.312 L1828.12 684.312 L1828.68 684.312 L1829.24 684.312 L1829.8 684.312 L1830.36 684.312 L1830.92 684.312 L1831.48 684.312 L1832.04 684.312 L1832.6 684.312 L1833.16 684.312 L1833.72 684.312 L1834.27 684.312 L1834.83 684.312 L1835.39 684.312 L1835.95 684.312 L1836.51 684.312 L1837.07 684.312 L1837.63 684.312 L1838.19 684.312 L1838.19 682.286 L1837.63 682.286 L1837.07 682.286 L1836.51 682.286 L1835.95 682.286 L1835.39 682.286 L1834.83 682.286 L1834.27 682.286 L1833.72 682.286 L1833.16 682.286 L1832.6 682.286 L1832.04 682.286 L1831.48 682.286 L1830.92 682.286 L1830.36 682.286 L1829.8 682.286 L1829.24 682.286 L1828.68 682.286 L1828.12 682.286 L1827.56 682.286 L1827 682.286 L1826.45 682.286 L1825.89 682.286 L1825.33 682.286 L1824.77 682.286 L1824.21 682.286 L1823.65 682.286 L1823.09 682.286 L1822.53 682.286 L1821.97 682.286 L1821.41 682.286 L1820.85 682.286 L1820.29 682.286 L1819.73 682.286 L1819.18 682.286 L1818.62 682.286 L1818.06 682.286 L1817.5 682.286 L1816.94 682.286 L1816.38 682.286 L1815.82 682.286 L1815.26 682.286 L1814.7 682.286 L1814.14 682.286 L1813.58 682.286 L1813.02 682.286 L1812.46 682.286 L1811.9 682.286 L1811.35 682.286 L1810.79 682.286 L1810.23 682.286 L1809.67 682.286 L1809.11 682.286 L1808.55 682.286 L1807.99 682.286 L1807.43 682.286 L1806.87 682.286 L1806.31 682.286 L1805.75 682.286 L1805.19 682.286 L1804.63 682.286 L1804.08 682.286 L1803.52 682.286 L1802.96 682.286 L1802.4 682.286 L1801.84 682.286 L1801.28 682.286 L1800.72 682.286 L1800.16 682.286 L1799.6 682.286 L1799.04 682.286 L1798.48 682.286 L1797.92 682.286 L1797.36 682.286 L1796.8 682.286 L1796.25 682.286 L1795.69 682.286 L1795.13 682.286 L1794.57 682.286 L1794.01 682.286 L1793.45 682.286 L1792.89 682.286 L1792.33 682.286 L1791.77 682.286 L1791.21 682.286 L1790.65 682.286 L1790.09 682.286 L1789.53 682.286 L1788.98 682.286 L1788.42 682.286 L1787.86 682.286 L1787.3 682.286 L1786.74 682.286 L1786.18 682.286 L1785.62 682.286 L1785.06 682.286 L1784.5 682.286 L1783.94 682.286 L1783.38 682.286 L1782.82 682.286 L1782.26 682.286 L1781.71 682.286 L1781.15 682.286 L1780.59 682.286 L1780.03 682.286 L1779.47 682.286 L1778.91 682.286 L1778.35 682.286 L1777.79 682.286 L1777.23 682.286 L1776.67 682.286 L1776.11 682.286 L1775.55 682.286 L1774.99 682.286 L1774.43 682.286 L1773.88 682.286 L1773.32 682.286 L1772.76 682.286 L1772.2 682.286 L1771.64 682.286 L1771.08 682.286 L1770.52 682.286 L1769.96 682.286 L1769.4 682.286 L1768.84 682.286 L1768.28 682.286 L1767.72 682.286 L1767.16 682.286 L1766.61 682.286 L1766.05 682.286 L1765.49 682.286 L1764.93 682.286 L1764.37 682.286 L1763.81 682.286 L1763.25 682.286 L1762.69 682.286 L1762.13 682.286 L1761.57 682.286 L1761.01 682.286 L1760.45 682.286 L1759.89 682.286 L1759.34 682.286 L1758.78 682.286 L1758.22 682.286 L1757.66 682.286 L1757.1 682.286 L1756.54 682.286 L1755.98 682.286 L1755.42 682.286 L1754.86 682.286 L1754.3 682.286 L1753.74 682.286 L1753.18 682.286 L1752.62 682.286 L1752.06 682.286 L1751.51 682.286 L1750.95 682.286 L1750.39 682.286 L1749.83 682.286 L1749.27 682.286 L1748.71 682.286 L1748.15 682.286 L1747.59 682.286 L1747.03 682.286 L1746.47 682.286 L1745.91 682.286 L1745.35 682.286 L1744.79 682.286 L1744.24 682.286 L1743.68 682.286 L1743.12 682.286 L1742.56 682.286 L1742 682.286 L1741.44 682.286 L1740.88 682.286 L1740.32 682.286 L1739.76 682.286 L1739.2 682.286 L1738.64 682.286 L1738.08 682.286 L1737.52 682.286 L1736.97 682.286 L1736.41 682.286 L1735.85 682.286 L1735.29 682.286 L1734.73 682.286 L1734.17 682.286 L1733.61 682.286 L1733.05 682.286 L1732.49 682.286 L1731.93 682.286 L1731.37 682.286 L1730.81 682.286 L1730.25 682.286 L1729.69 682.286 L1729.14 682.286 L1728.58 682.286 L1728.02 682.286 L1727.46 682.286 L1726.9 682.286 L1726.34 682.286 L1725.78 682.286 L1725.22 682.286 L1724.66 682.286 L1724.1 682.286 L1723.54 682.286 L1722.98 682.286 L1722.42 682.286 L1721.87 682.286 L1721.31 682.286 L1720.75 682.286 L1720.19 682.286 L1719.63 682.286 L1719.07 682.286 L1718.51 682.286 L1717.95 682.286 L1717.39 682.286 L1716.83 682.286 L1716.27 682.286 L1715.71 682.286 L1715.15 682.286 L1714.6 682.286 L1714.04 682.286 L1713.48 682.286 L1712.92 682.286 L1712.36 682.286 L1711.8 682.286 L1711.24 682.286 L1710.68 682.286 L1710.12 682.286 L1709.56 682.286 L1709 682.286 L1708.44 682.286 L1707.88 682.286 L1707.32 682.286 L1706.77 682.286 L1706.21 682.286 L1705.65 682.286 L1705.09 682.286 L1704.53 682.286 L1703.97 682.286 L1703.41 682.286 L1702.85 682.286 L1702.29 682.286 L1701.73 682.286 L1701.17 682.286 L1700.61 682.286 L1700.05 682.286 L1699.5 682.286 L1698.94 682.286 L1698.38 682.286 L1697.82 682.286 L1697.26 682.286 L1696.7 682.286 L1696.14 682.286 L1695.58 682.286 L1695.02 682.286 L1694.46 682.286 L1693.9 682.286 L1693.34 682.286 L1692.78 682.286 L1692.23 682.286 L1691.67 682.286 L1691.11 682.286 L1690.55 682.286 L1689.99 682.286 L1689.43 682.286 L1688.87 682.286 L1688.31 682.286 L1687.75 682.286 L1687.19 682.286 L1686.63 682.286 L1686.07 682.286 L1685.51 682.286 L1684.95 682.286 L1684.4 682.286 L1683.84 682.286 L1683.28 682.286 L1682.72 682.286 L1682.16 682.286 L1681.6 682.286 L1681.04 682.286 L1680.48 682.286 L1679.92 682.286 L1679.36 682.286 L1678.8 682.286 L1678.24 682.286 L1677.68 682.286 L1677.13 682.286 L1676.57 682.286 L1676.01 682.286 L1675.45 682.286 L1674.89 682.286 L1674.33 682.286 L1673.77 682.286 L1673.21 682.286 L1672.65 682.286 L1672.09 682.286 L1671.53 682.286 L1670.97 682.286 L1670.41 682.286 L1669.85 682.286 L1669.3 682.286 L1668.74 682.286 L1668.18 682.286 L1667.62 682.286 L1667.06 682.286 L1666.5 682.286 L1665.94 682.286 L1665.38 682.286 L1664.82 682.286 L1664.26 682.286 L1663.7 682.286 L1663.14 682.286 L1662.58 682.286 L1662.03 682.286 L1661.47 682.286 L1660.91 682.286 L1660.35 682.286 L1659.79 682.286 L1659.23 682.286 L1658.67 682.286 L1658.11 682.286 L1657.55 682.286 L1656.99 682.286 L1656.43 682.286 L1655.87 682.286 L1655.31 682.286 L1654.76 682.286 L1654.2 682.286 L1653.64 682.286 L1653.08 682.286 L1652.52 682.286 L1651.96 682.286 L1651.4 682.286 L1650.84 682.286 L1650.28 682.286 L1649.72 682.286 L1649.16 682.286 L1648.6 682.286 L1648.04 682.286 L1647.48 682.286 L1646.93 682.286 L1646.37 682.286 L1645.81 682.286 L1645.25 682.286 L1644.69 682.286 L1644.13 682.286 L1643.57 682.286 L1643.01 682.286 L1642.45 682.286 L1641.89 682.286 L1641.33 682.286 L1640.77 682.286 L1640.21 682.286 L1639.66 682.286 L1639.1 682.286 L1638.54 682.286 L1637.98 682.286 L1637.42 682.286 L1636.86 682.286 L1636.3 682.286 L1635.74 682.286 L1635.18 682.286 L1634.62 682.286 L1634.06 682.286 L1633.5 682.286 L1632.94 682.286 L1632.39 682.286 L1631.83 682.286 L1631.27 682.286 L1630.71 682.286 L1630.15 682.286 L1629.59 682.286 L1629.03 682.286 L1628.47 682.286 L1627.91 682.286 L1627.35 682.286 L1626.79 682.286 L1626.23 682.286 L1625.67 682.286 L1625.11 682.286 L1624.56 682.286 L1624 682.286 L1623.44 682.286 L1622.88 682.286 L1622.32 682.286 L1621.76 682.286 L1621.2 682.286 L1620.64 682.286 L1620.08 682.286 L1619.52 682.286 L1618.96 682.286 L1618.4 682.286 L1617.84 682.286 L1617.29 682.286 L1616.73 682.286 L1616.17 682.286 L1615.61 682.286 L1615.05 682.286 L1614.49 682.286 L1613.93 682.286 L1613.37 682.286 L1612.81 682.286 L1612.25 682.286 L1611.69 682.286 L1611.13 682.286 L1610.57 682.286 L1610.02 682.286 L1609.46 682.286 L1608.9 682.286 L1608.34 682.286 L1607.78 682.286 L1607.22 682.286 L1606.66 682.286 L1606.1 682.286 L1605.54 682.286 L1604.98 682.286 L1604.42 682.286 L1603.86 682.286 L1603.3 682.286 L1602.74 682.286 L1602.19 682.286 L1601.63 682.286 L1601.07 682.286 L1600.51 682.286 L1599.95 682.286 L1599.39 682.286 L1598.83 682.286 L1598.27 682.286 L1597.71 682.286 L1597.15 682.286 L1596.59 682.286 L1596.03 682.286 L1595.47 682.286 L1594.92 682.286 L1594.36 682.286 L1593.8 682.286 L1593.24 682.286 L1592.68 682.286 L1592.12 682.286 L1591.56 682.286 L1591 682.286 L1590.44 682.286 L1589.88 682.286 L1589.32 682.286 L1588.76 682.286 L1588.2 682.286 L1587.65 682.286 L1587.09 682.286 L1586.53 682.286 L1585.97 682.286 L1585.41 682.286 L1584.85 682.286 L1584.29 682.286 L1583.73 682.286 L1583.17 682.286 L1582.61 682.286 L1582.05 682.286 L1581.49 682.286 L1580.93 682.286 L1580.37 682.286 L1579.82 682.286 L1579.26 682.286 L1578.7 682.286 L1578.14 682.286 L1577.58 682.286 L1577.02 682.286 L1576.46 682.286 L1575.9 682.286 L1575.34 682.286 L1574.78 682.286 L1574.22 682.286 L1573.66 682.286 L1573.1 682.286 L1572.55 682.286 L1571.99 682.286 L1571.43 682.286 L1570.87 682.286 L1570.31 682.286 L1569.75 682.286 L1569.19 682.286 L1568.63 682.286 L1568.07 682.286 L1567.51 682.286 L1566.95 682.286 L1566.39 682.286 L1565.83 682.286 L1565.28 682.286 L1564.72 682.286 L1564.16 682.286 L1563.6 682.286 L1563.04 682.286 L1562.48 682.286 L1561.92 682.286 L1561.36 682.286 L1560.8 682.286 L1560.24 682.286 L1559.68 682.286 L1559.12 682.286 L1558.56 682.286 L1558 682.286 L1557.45 682.286 L1556.89 682.286 L1556.33 682.286 L1555.77 682.286 L1555.21 682.286 L1554.65 682.286 L1554.09 682.286 L1553.53 682.286 L1552.97 682.286 L1552.41 682.286 L1551.85 682.286 L1551.29 682.286 L1550.73 682.286 L1550.18 682.286 L1549.62 682.286 L1549.06 682.286 L1548.5 682.286 L1547.94 682.286 L1547.38 682.286 L1546.82 682.286 L1546.26 682.286 L1545.7 682.286 L1545.14 682.286 L1544.58 682.286 L1544.02 682.286 L1543.46 682.286 L1542.9 682.286 L1542.35 682.286 L1541.79 682.286 L1541.23 682.286 L1540.67 682.286 L1540.11 682.286 L1539.55 682.286 L1538.99 682.286 L1538.43 682.286 L1537.87 682.286 L1537.31 682.286 L1536.75 682.286 L1536.19 682.286 L1535.63 682.286 L1535.08 682.286 L1534.52 682.286 L1533.96 682.286 L1533.4 682.286 L1532.84 682.286 L1532.28 682.286 L1531.72 682.286 L1531.16 682.286 L1530.6 682.286 L1530.04 682.286 L1529.48 682.286 L1528.92 682.286 L1528.36 682.286 L1527.81 682.286 L1527.25 682.286 L1526.69 682.286 L1526.13 682.286 L1525.57 682.286 L1525.01 682.286 L1524.45 682.286 L1523.89 682.286 L1523.33 682.286 L1522.77 682.286 L1522.21 682.286 L1521.65 682.286 L1521.09 682.286 L1520.53 682.286 L1519.98 682.286 L1519.42 682.286 L1518.86 682.286 L1518.3 682.286 L1517.74 682.286 L1517.18 682.286 L1516.62 682.286 L1516.06 682.286 L1515.5 682.286 L1514.94 682.286 L1514.38 682.286 L1513.82 682.286 L1513.26 682.286 L1512.71 682.286 L1512.15 682.286 L1511.59 682.286 L1511.03 682.286 L1510.47 682.286 L1509.91 682.286 L1509.35 682.286 L1508.79 682.286 L1508.23 682.286 L1507.67 682.286 L1507.11 682.286 L1506.55 682.286 L1505.99 682.286 L1505.44 682.286 L1504.88 682.286 L1504.32 682.286 L1503.76 682.286 L1503.2 682.286 L1502.64 682.286 L1502.08 682.286 L1501.52 682.286 L1500.96 682.286 L1500.4 682.286 L1499.84 682.286 L1499.28 682.286 L1498.72 682.286 L1498.16 682.286 L1497.61 682.286 L1497.05 682.286 L1496.49 682.286 L1495.93 682.286 L1495.37 682.286 L1494.81 682.286 L1494.25 682.286 L1493.69 682.286 L1493.13 682.286 L1492.57 682.286 L1492.01 682.286 L1491.45 682.286 L1490.89 682.286 L1490.34 682.286 L1489.78 682.286 L1489.22 682.286 L1488.66 682.286 L1488.1 682.286 L1487.54 682.286 L1486.98 682.286 L1486.42 682.286 L1485.86 682.286 L1485.3 682.286 L1484.74 682.286 L1484.18 682.286 L1483.62 682.286 L1483.07 682.286 L1482.51 682.286 L1481.95 682.286 L1481.39 682.286 L1480.83 682.286 L1480.27 682.286 L1479.71 682.286 L1479.15 682.286 L1478.59 682.286 L1478.03 682.286 L1477.47 682.286 L1476.91 682.286 L1476.35 682.286 L1475.79 682.286 L1475.24 682.286 L1474.68 682.286 L1474.12 682.286 L1473.56 682.286 L1473 682.286 L1472.44 682.286 L1471.88 682.286 L1471.32 682.286 L1470.76 682.286 L1470.2 682.286 L1469.64 682.286 L1469.08 682.286 L1468.52 682.286 L1467.97 682.286 L1467.41 682.286 L1466.85 682.286 L1466.29 682.286 L1465.73 682.286 L1465.17 682.286 L1464.61 682.286 L1464.05 682.286 L1463.49 682.286 L1462.93 682.286 L1462.37 682.286 L1461.81 682.286 L1461.25 682.286 L1460.7 682.286 L1460.14 682.286 L1459.58 682.286 L1459.02 682.286 L1458.46 682.286 L1457.9 682.286 L1457.34 682.286 L1456.78 682.286 L1456.22 682.286 L1455.66 682.286 L1455.1 682.286 L1454.54 682.286 L1453.98 682.286 L1453.42 682.286 L1452.87 682.286 L1452.31 682.286 L1451.75 682.286 L1451.19 682.286 L1450.63 682.286 L1450.07 682.286 L1449.51 682.286 L1448.95 682.286 L1448.39 682.286 L1447.83 682.286 L1447.27 682.286 L1446.71 682.286 L1446.15 682.286 L1445.6 682.286 L1445.04 682.286 L1444.48 682.286 L1443.92 682.286 L1443.36 682.286 L1442.8 682.286 L1442.24 682.286 L1441.68 682.286 L1441.12 682.286 L1440.56 682.286 L1440 682.286 L1439.44 682.286 L1438.88 682.286 L1438.33 682.286 L1437.77 682.286 L1437.21 682.286 L1436.65 682.286 L1436.09 682.286 L1435.53 682.286 L1434.97 682.286 L1434.41 682.286 L1433.85 682.286 L1433.29 682.286 L1432.73 682.286 L1432.17 682.286 L1431.61 682.286 L1431.05 682.286 L1430.5 682.286 L1429.94 682.286 L1429.38 682.286 L1428.82 682.286 L1428.26 682.286 L1427.7 682.286 L1427.14 682.286 L1426.58 682.286 L1426.02 682.286 L1425.46 682.286 L1424.9 682.286 L1424.34 682.286 L1423.78 682.286 L1423.23 682.286 L1422.67 682.286 L1422.11 682.286 L1421.55 682.286 L1420.99 682.286 L1420.43 682.286 L1419.87 682.286 L1419.31 682.286 L1418.75 682.286 L1418.19 682.286 L1417.63 682.286 L1417.07 682.286 L1416.51 682.286 L1415.95 682.286 L1415.4 682.286 L1414.84 682.286 L1414.28 682.286 L1413.72 682.286 L1413.16 682.286 L1412.6 682.286 L1412.04 682.286 L1411.48 682.286 L1410.92 682.286 L1410.36 682.286 L1409.8 682.286 L1409.24 682.286 L1408.68 682.286 L1408.13 682.286 L1407.57 682.286 L1407.01 682.286 L1406.45 682.286 L1405.89 682.286 L1405.33 682.286 L1404.77 682.286 L1404.21 682.286 L1403.65 682.286 L1403.09 682.286 L1402.53 682.286 L1401.97 682.286 L1401.41 682.286 L1400.86 682.286 L1400.3 682.286 L1399.74 682.286 L1399.18 682.286 L1398.62 682.286 L1398.06 682.286 L1397.5 682.286 L1396.94 682.286 L1396.38 682.286 L1395.82 682.286 L1395.26 682.286 L1394.7 682.286 L1394.14 682.286 L1393.58 682.286 L1393.03 682.286 L1392.47 682.286 L1391.91 682.286 L1391.35 682.286 L1390.79 682.286 L1390.23 682.286 L1389.67 682.286 L1389.11 682.286 L1388.55 682.286 L1387.99 682.286 L1387.43 682.286 L1386.87 682.286 L1386.31 682.286 L1385.76 682.286 L1385.2 682.286 L1384.64 682.286 L1384.08 682.286 L1383.52 682.286 L1382.96 682.286 L1382.4 682.286 L1381.84 682.286 L1381.28 682.286 L1380.72 682.286 L1380.16 682.286 L1379.6 682.286 L1379.04 682.286 L1378.49 682.286 L1377.93 682.286 L1377.37 682.286 L1376.81 682.286 L1376.25 682.286 L1375.69 682.286 L1375.13 682.286 L1374.57 682.286 L1374.01 682.286 L1373.45 682.286 L1372.89 682.286 L1372.33 682.286 L1371.77 682.286 L1371.21 682.286 L1370.66 682.286 L1370.1 682.286 L1369.54 682.286 L1368.98 682.286 L1368.42 682.286 L1367.86 682.286 L1367.3 682.286 L1366.74 682.286 L1366.18 682.286 L1365.62 682.286 L1365.06 682.286 L1364.5 682.286 L1363.94 682.286 L1363.39 682.286 L1362.83 682.286 L1362.27 682.286 L1361.71 682.286 L1361.15 682.286 L1360.59 682.286 L1360.03 682.286 L1359.47 682.286 L1358.91 682.286 L1358.35 682.286 L1357.79 682.286 L1357.23 682.286 L1356.67 682.286 L1356.12 682.286 L1355.56 682.286 L1355 682.286 L1354.44 682.286 L1353.88 682.286 L1353.32 682.286 L1352.76 682.286 L1352.2 682.286 L1351.64 682.286 L1351.08 682.286 L1350.52 682.286 L1349.96 682.286 L1349.4 682.286 L1348.84 682.286 L1348.29 682.286 L1347.73 682.286 L1347.17 682.286 L1346.61 682.286 L1346.05 682.286 L1345.49 682.286 L1344.93 682.286 L1344.37 682.286 L1343.81 682.286 L1343.25 682.286 L1342.69 682.286 L1342.13 682.286 L1341.57 682.286 L1341.02 682.286 L1340.46 682.286 L1339.9 682.286 L1339.34 682.286 L1338.78 682.286 L1338.22 682.286 L1337.66 682.286 L1337.1 682.286 L1336.54 682.286 L1335.98 682.286 L1335.42 682.286 L1334.86 682.286 L1334.3 682.286 L1333.75 682.286 L1333.19 682.286 L1332.63 682.286 L1332.07 682.286 L1331.51 682.286 L1330.95 682.286 L1330.39 682.286 L1329.83 682.286 L1329.27 682.286 L1328.71 682.286 L1328.15 682.286 L1327.59 682.286 L1327.03 682.286 L1326.47 682.286 L1325.92 682.286 L1325.36 682.286 L1324.8 682.286 L1324.24 682.286 L1323.68 682.286 L1323.12 682.286 L1322.56 682.286 L1322 682.286 L1321.44 682.286 L1320.88 682.286 L1320.32 682.286 L1319.76 682.286 L1319.2 682.286 L1318.65 682.286 L1318.09 682.286 L1317.53 682.286 L1316.97 682.286 L1316.41 682.286 L1315.85 682.286 L1315.29 682.286 L1314.73 682.286 L1314.17 682.286 L1313.61 682.286 L1313.05 682.286 L1312.49 682.286 L1311.93 682.286 L1311.38 682.286 L1310.82 682.286 L1310.26 682.286 L1309.7 682.286 L1309.14 682.286 L1308.58 682.286 L1308.02 682.286 L1307.46 682.286 L1306.9 682.286 L1306.34 682.286 L1305.78 682.286 L1305.22 682.286 L1304.66 682.286 L1304.1 682.286 L1303.55 682.286 L1302.99 682.286 L1302.43 682.286 L1301.87 682.286 L1301.31 682.286 L1300.75 682.286 L1300.19 682.286 L1299.63 682.286 L1299.07 682.286 L1298.51 682.286 L1297.95 682.286 L1297.39 682.286 L1296.83 682.286 L1296.28 682.286 L1295.72 682.286 L1295.16 682.286 L1294.6 682.286 L1294.04 682.286 L1293.48 682.286 L1292.92 682.286 L1292.36 682.286 L1291.8 682.286 L1291.24 682.286 L1290.68 682.286 L1290.12 682.286 L1289.56 682.286 L1289 682.286 L1288.45 682.286 L1287.89 682.286 L1287.33 682.286 L1286.77 682.286 L1286.21 682.286 L1285.65 682.286 L1285.09 682.286 L1284.53 682.286 L1283.97 682.286 L1283.41 682.286 L1282.85 682.286 L1282.29 682.286 L1281.73 682.286 L1281.18 682.286 L1280.62 682.286 L1280.06 682.286 L1279.5 682.286 L1278.94 682.286 L1278.38 682.286 L1277.82 682.286 L1277.26 682.286 L1276.7 682.286 L1276.14 682.286 L1275.58 682.286 L1275.02 682.286 L1274.46 682.286 L1273.91 682.286 L1273.35 682.286 L1272.79 682.286 L1272.23 682.286 L1271.67 682.286 L1271.11 682.286 L1270.55 682.286 L1269.99 682.286 L1269.43 682.286 L1268.87 682.286 L1268.31 682.286 L1267.75 682.286 L1267.19 682.286 L1266.63 682.286 L1266.08 682.286 L1265.52 682.286 L1264.96 682.286 L1264.4 682.286 L1263.84 682.286 L1263.28 682.286 L1262.72 682.286 L1262.16 682.286 L1261.6 682.286 L1261.04 682.286 L1260.48 682.286 L1259.92 682.286 L1259.36 682.286 L1258.81 682.286 L1258.25 682.286 L1257.69 682.286 L1257.13 682.286 L1256.57 682.286 L1256.01 682.286 L1255.45 682.286 L1254.89 682.286 L1254.33 682.286 L1253.77 682.286 L1253.21 682.286 L1252.65 682.286 L1252.09 682.286 L1251.54 682.286 L1250.98 682.286 L1250.42 682.286 L1249.86 682.286 L1249.3 682.286 L1248.74 682.286 L1248.18 682.286 L1247.62 682.286 L1247.06 682.286 L1246.5 682.286 L1245.94 682.286 L1245.38 682.286 L1244.82 682.286 L1244.26 682.286 L1243.71 682.286 L1243.15 682.286 L1242.59 682.286 L1242.03 682.286 L1241.47 682.286 L1240.91 682.286 L1240.35 682.286 L1239.79 682.286 L1239.23 682.286 L1238.67 682.286 L1238.11 682.286 L1237.55 682.286 L1236.99 682.286 L1236.44 682.286 L1235.88 682.286 L1235.32 682.286 L1234.76 682.286 L1234.2 682.286 L1233.64 682.286 L1233.08 682.286 L1232.52 682.286 L1231.96 682.286 L1231.4 682.286 L1230.84 682.286 L1230.28 682.286 L1229.72 682.286 L1229.17 682.286 L1228.61 682.286 L1228.05 682.286 L1227.49 682.286 L1226.93 682.286 L1226.37 682.286 L1225.81 682.286 L1225.25 682.286 L1224.69 682.286 L1224.13 682.286 L1223.57 682.286 L1223.01 682.286 L1222.45 682.286 L1221.89 682.286 L1221.34 682.286 L1220.78 682.286 L1220.22 682.286 L1219.66 682.286 L1219.1 682.286 L1218.54 682.286 L1217.98 682.286 L1217.42 682.286 L1216.86 682.286 L1216.3 682.286 L1215.74 682.286 L1215.18 682.286 L1214.62 682.286 L1214.07 682.286 L1213.51 682.286 L1212.95 682.286 L1212.39 682.286 L1211.83 682.286 L1211.27 682.286 L1210.71 682.286 L1210.15 682.286 L1209.59 682.286 L1209.03 682.286 L1208.47 682.286 L1207.91 682.286 L1207.35 682.286 L1206.8 682.286 L1206.24 682.286 L1205.68 682.286 L1205.12 682.286 L1204.56 682.286 L1204 682.286 L1203.44 682.286 L1202.88 682.286 L1202.32 682.286 L1201.76 682.286 L1201.2 682.286 L1200.64 682.286 L1200.08 682.286 L1199.52 682.286 L1198.97 682.286 L1198.41 682.286 L1197.85 682.286 L1197.29 682.286 L1196.73 682.286 L1196.17 682.286 L1195.61 682.286 L1195.05 682.286 L1194.49 682.286 L1193.93 682.286 L1193.37 682.286 L1192.81 682.286 L1192.25 682.286 L1191.7 682.286 L1191.14 682.286 L1190.58 682.286 L1190.02 682.286 L1189.46 682.286 L1188.9 682.286 L1188.34 682.286 L1187.78 682.286 L1187.22 682.286 L1186.66 682.286 L1186.1 682.286 L1185.54 682.286 L1184.98 682.286 L1184.43 682.286 L1183.87 682.286 L1183.31 682.286 L1182.75 682.286 L1182.19 682.286 L1181.63 682.286 L1181.07 682.286 L1180.51 682.286 L1179.95 682.286 L1179.39 682.286 L1178.83 682.286 L1178.27 682.286 L1177.71 682.286 L1177.15 682.286 L1176.6 682.286 L1176.04 682.286 L1175.48 682.286 L1174.92 682.286 L1174.36 682.286 L1173.8 682.286 L1173.24 682.286 L1172.68 682.286 L1172.12 682.286 L1171.56 682.286 L1171 682.286 L1170.44 682.286 L1169.88 682.286 L1169.33 682.286 L1168.77 682.286 L1168.21 682.286 L1167.65 682.286 L1167.09 682.286 L1166.53 682.286 L1165.97 682.286 L1165.41 682.286 L1164.85 682.286 L1164.29 682.286 L1163.73 682.286 L1163.17 682.286 L1162.61 682.286 L1162.05 682.286 L1161.5 682.286 L1160.94 682.286 L1160.38 682.286 L1159.82 682.286 L1159.26 682.286 L1158.7 682.286 L1158.14 682.286 L1157.58 682.286 L1157.02 682.286 L1156.46 682.286 L1155.9 682.286 L1155.34 682.286 L1154.78 682.286 L1154.23 682.286 L1153.67 682.286 L1153.11 682.286 L1152.55 682.286 L1151.99 682.286 L1151.43 682.286 L1150.87 682.286 L1150.31 682.286 L1149.75 682.286 L1149.19 682.286 L1148.63 682.286 L1148.07 682.286 L1147.51 682.286 L1146.96 682.286 L1146.4 682.286 L1145.84 682.286 L1145.28 682.286 L1144.72 682.286 L1144.16 682.286 L1143.6 682.286 L1143.04 682.286 L1142.48 682.286 L1141.92 682.286 L1141.36 682.286 L1140.8 682.286 L1140.24 682.286 L1139.68 682.286 L1139.13 682.286 L1138.57 682.286 L1138.01 682.286 L1137.45 682.286 L1136.89 682.286 L1136.33 682.286 L1135.77 682.286 L1135.21 682.286 L1134.65 682.286 L1134.09 682.286 L1133.53 682.286 L1132.97 682.286 L1132.41 682.286 L1131.86 682.286 L1131.3 682.286 L1130.74 682.286 L1130.18 682.286 L1129.62 682.286 L1129.06 682.286 L1128.5 682.286 L1127.94 682.286 L1127.38 682.286 L1126.82 682.286 L1126.26 682.286 L1125.7 682.286 L1125.14 682.286 L1124.59 682.286 L1124.03 682.286 L1123.47 682.286 L1122.91 682.286 L1122.35 682.286 L1121.79 682.286 L1121.23 682.286 L1120.67 682.286 L1120.11 682.286 L1119.55 682.286 L1118.99 682.286 L1118.43 682.286 L1117.87 682.286 L1117.31 682.286 L1116.76 682.286 L1116.2 682.286 L1115.64 682.286 L1115.08 682.286 L1114.52 682.286 L1113.96 682.286 L1113.4 682.286 L1112.84 682.286 L1112.28 682.286 L1111.72 682.286 L1111.16 682.286 L1110.6 682.286 L1110.04 682.286 L1109.49 682.286 L1108.93 682.286 L1108.37 682.286 L1107.81 682.286 L1107.25 682.286 L1106.69 682.286 L1106.13 682.286 L1105.57 682.286 L1105.01 682.286 L1104.45 682.286 L1103.89 682.286 L1103.33 682.286 L1102.77 682.286 L1102.22 682.286 L1101.66 682.286 L1101.1 682.286 L1100.54 682.286 L1099.98 682.286 L1099.42 682.286 L1098.86 682.286 L1098.3 682.286 L1097.74 682.286 L1097.18 682.286 L1096.62 682.286 L1096.06 682.286 L1095.5 682.286 L1094.94 682.286 L1094.39 682.286 L1093.83 682.286 L1093.27 682.286 L1092.71 682.286 L1092.15 682.286 L1091.59 682.286 L1091.03 682.286 L1090.47 682.286 L1089.91 682.286 L1089.35 682.286 L1088.79 682.286 L1088.23 682.286 L1087.67 682.286 L1087.12 682.286 L1086.56 682.286 L1086 682.286 L1085.44 682.286 L1084.88 682.286 L1084.32 682.286 L1083.76 682.286 L1083.2 682.286 L1082.64 682.286 L1082.08 682.286 L1081.52 682.286 L1080.96 682.286 L1080.4 682.286 L1079.85 682.286 L1079.29 682.286 L1078.73 682.286 L1078.17 682.286 L1077.61 682.286 L1077.05 682.286 L1076.49 682.286 L1075.93 682.286 L1075.37 682.286 L1074.81 682.286 L1074.25 682.286 L1073.69 682.286 L1073.13 682.286 L1072.57 682.286 L1072.02 682.286 L1071.46 682.286 L1070.9 682.286 L1070.34 682.286 L1069.78 682.286 L1069.22 682.286 L1068.66 682.286 L1068.1 682.286 L1067.54 682.286 L1066.98 682.286 L1066.42 682.286 L1065.86 682.286 L1065.3 682.286 L1064.75 682.286 L1064.19 682.286 L1063.63 682.286 L1063.07 682.286 L1062.51 682.286 L1061.95 682.286 L1061.39 682.286 L1060.83 682.286 L1060.27 682.286 L1059.71 682.286 L1059.15 682.286 L1058.59 682.286 L1058.03 682.286 L1057.48 682.286 L1056.92 682.286 L1056.36 682.286 L1055.8 682.286 L1055.24 682.286 L1054.68 682.286 L1054.12 682.286 L1053.56 682.286 L1053 682.286 L1052.44 682.286 L1051.88 682.286 L1051.32 682.286 L1050.76 682.286 L1050.2 682.286 L1049.65 682.286 L1049.09 682.286 L1048.53 682.286 L1047.97 682.286 L1047.41 682.286 L1046.85 682.286 L1046.29 682.286 L1045.73 682.286 L1045.17 682.286 L1044.61 682.286 L1044.05 682.286 L1043.49 682.286 L1042.93 682.286 L1042.38 682.286 L1041.82 682.286 L1041.26 682.286 L1040.7 682.286 L1040.14 682.286 L1039.58 682.286 L1039.02 682.286 L1038.46 682.286 L1037.9 682.286 L1037.34 682.286 L1036.78 682.286 L1036.22 682.286 L1035.66 682.286 L1035.1 682.286 L1034.55 682.286 L1033.99 682.286 L1033.43 682.286 L1032.87 682.286 L1032.31 682.286 L1031.75 682.286 L1031.19 682.286 L1030.63 682.286 L1030.07 682.286 L1029.51 682.286 L1028.95 682.286 L1028.39 682.286 L1027.83 682.286 L1027.28 682.286 L1026.72 682.286 L1026.16 682.286 L1025.6 682.286 L1025.04 682.286 L1024.48 682.286 L1023.92 682.286 L1023.36 682.286 L1022.8 682.286 L1022.24 682.286 L1021.68 682.286 L1021.12 682.286 L1020.56 682.286 L1020.01 682.286 L1019.45 682.286 L1018.89 682.286 L1018.33 682.286 L1017.77 682.286 L1017.21 682.286 L1016.65 682.286 L1016.09 682.286 L1015.53 682.286 L1014.97 682.286 L1014.41 682.286 L1013.85 682.286 L1013.29 682.286 L1012.73 682.286 L1012.18 682.286 L1011.62 682.286 L1011.06 682.286 L1010.5 682.286 L1009.94 682.286 L1009.38 682.286 L1008.82 682.286 L1008.26 682.286 L1007.7 682.286 L1007.14 682.286 L1006.58 682.286 L1006.02 682.286 L1005.46 682.286 L1004.91 682.286 L1004.35 682.286 L1003.79 682.286 L1003.23 682.286 L1002.67 682.286 L1002.11 682.286 L1001.55 682.286 L1000.99 682.286 L1000.43 682.286 L999.872 682.286 L999.313 682.286 L998.754 682.286 L998.194 682.286 L997.635 682.286 L997.076 682.286 L996.517 682.286 L995.957 682.286 L995.398 682.286 L994.839 682.286 L994.28 682.286 L993.72 682.286 L993.161 682.286 L992.602 682.286 L992.043 682.286 L991.483 682.286 L990.924 682.286 L990.365 682.286 L989.806 682.286 L989.246 682.286 L988.687 682.286 L988.128 682.286 L987.569 682.286 L987.009 682.286 L986.45 682.286 L985.891 682.286 L985.332 682.286 L984.772 682.286 L984.213 682.286 L983.654 682.286 L983.095 682.286 L982.535 682.286 L981.976 682.286 L981.417 682.286 L980.858 682.286 L980.298 682.286 L979.739 682.286 L979.18 682.286 L978.621 682.286 L978.061 682.286 L977.502 682.286 L976.943 682.286 L976.384 682.286 L975.824 682.286 L975.265 682.286 L974.706 682.286 L974.147 682.286 L973.587 682.286 L973.028 682.286 L972.469 682.286 L971.91 682.286 L971.35 682.286 L970.791 682.286 L970.232 682.286 L969.673 682.286 L969.113 682.286 L968.554 682.286 L967.995 682.286 L967.436 682.286 L966.876 682.286 L966.317 682.286 L965.758 682.286 L965.199 682.286 L964.639 682.286 L964.08 682.286 L963.521 682.286 L962.962 682.286 L962.402 682.286 L961.843 682.286 L961.284 682.286 L960.725 682.286 L960.165 682.286 L959.606 682.286 L959.047 682.286 L958.488 682.286 L957.928 682.286 L957.369 682.286 L956.81 682.286 L956.251 682.286 L955.691 682.286 L955.132 682.286 L954.573 682.286 L954.014 682.286 L953.454 682.286 L952.895 682.286 L952.336 682.286 L951.777 682.286 L951.217 682.286 L950.658 682.286 L950.099 682.286 L949.54 682.286 L948.98 682.286 L948.421 682.286 L947.862 682.286 L947.303 682.286 L946.743 682.286 L946.184 682.286 L945.625 682.286 L945.066 682.286 L944.506 682.286 L943.947 682.286 L943.388 682.286 L942.829 682.286 L942.269 682.286 L941.71 682.286 L941.151 682.286 L940.592 682.286 L940.032 682.286 L939.473 682.286 L938.914 682.286 L938.355 682.286 L937.795 682.286 L937.236 682.286 L936.677 682.286 L936.118 682.286 L935.558 682.286 L934.999 682.286 L934.44 682.286 L933.881 682.286 L933.321 682.286 L932.762 682.286 L932.203 682.286 L931.644 682.286 L931.084 682.286 L930.525 682.286 L929.966 682.286 L929.406 682.286 L928.847 682.286 L928.288 682.286 L927.729 682.286 L927.169 682.286 L926.61 682.286 L926.051 682.286 L925.492 682.286 L924.932 682.286 L924.373 682.286 L923.814 682.286 L923.255 682.286 L922.695 682.286 L922.136 682.286 L921.577 682.286 L921.018 682.286 L920.458 682.286 L919.899 682.286 L919.34 682.286 L918.781 682.286 L918.221 682.286 L917.662 682.286 L917.103 682.286 L916.544 682.286 L915.984 682.286 L915.425 682.286 L914.866 682.286 L914.307 682.286 L913.747 682.286 L913.188 682.286 L912.629 682.286 L912.07 682.286 L911.51 682.286 L910.951 682.286 L910.392 682.286 L909.833 682.286 L909.273 682.286 L908.714 682.286 L908.155 682.286 L907.596 682.286 L907.036 682.286 L906.477 682.286 L905.918 682.286 L905.359 682.286 L904.799 682.286 L904.24 682.286 L903.681 682.286 L903.122 682.286 L902.562 682.286 L902.003 682.286 L901.444 682.286 L900.885 682.286 L900.325 682.286 L899.766 682.286 L899.207 682.286 L898.648 682.286 L898.088 682.286 L897.529 682.286 L896.97 682.286 L896.411 682.286 L895.851 682.286 L895.292 682.286 L894.733 682.286 L894.174 682.286 L893.614 682.286 L893.055 682.286 L892.496 682.286 L891.937 682.286 L891.377 682.286 L890.818 682.286 L890.259 682.286 L889.7 682.286 L889.14 682.286 L888.581 682.286 L888.022 682.286 L887.463 682.286 L886.903 682.286 L886.344 682.286 L885.785 682.286 L885.226 682.286 L884.666 682.286 L884.107 682.286 L883.548 682.286 L882.989 682.286 L882.429 682.286 L881.87 682.286 L881.311 682.286 L880.752 682.286 L880.192 682.286 L879.633 682.286 L879.074 682.286 L878.515 682.286 L877.955 682.286 L877.396 682.286 L876.837 682.286 L876.278 682.286 L875.718 682.286 L875.159 682.286 L874.6 682.286 L874.041 682.286 L873.481 682.286 L872.922 682.286 L872.363 682.286 L871.804 682.286 L871.244 682.286 L870.685 682.286 L870.126 682.286 L869.567 682.286 L869.007 682.286 L868.448 682.286 L867.889 682.286 L867.33 682.286 L866.77 682.286 L866.211 682.286 L865.652 682.286 L865.093 682.286 L864.533 682.286 L863.974 682.286 L863.415 682.286 L862.856 682.286 L862.296 682.286 L861.737 682.286 L861.178 682.286 L860.619 682.286 L860.059 682.286 L859.5 682.286 L858.941 682.286 L858.382 682.286 L857.822 682.286 L857.263 682.286 L856.704 682.286 L856.145 682.286 L855.585 682.286 L855.026 682.286 L854.467 682.286 L853.908 682.286 L853.348 682.286 L852.789 682.286 L852.23 682.286 L851.671 682.286 L851.111 682.286 L850.552 682.286 L849.993 682.286 L849.434 682.286 L848.874 682.286 L848.315 682.286 L847.756 682.286 L847.197 682.286 L846.637 682.286 L846.078 682.286 L845.519 682.286 L844.96 682.286 L844.4 682.286 L843.841 682.286 L843.282 682.286 L842.723 682.286 L842.163 682.286 L841.604 682.286 L841.045 682.286 L840.486 682.286 L839.926 682.286 L839.367 682.286 L838.808 682.286 L838.249 682.286 L837.689 682.286 L837.13 682.286 L836.571 682.286 L836.012 682.286 L835.452 682.286 L834.893 682.286 L834.334 682.286 L833.775 682.286 L833.215 682.286 L832.656 682.286 L832.097 682.286 L831.538 682.286 L830.978 682.286 L830.419 682.286 L829.86 682.286 L829.301 682.286 L828.741 682.286 L828.182 682.286 L827.623 682.286 L827.064 682.286 L826.504 682.286 L825.945 682.286 L825.386 682.286 L824.827 682.286 L824.267 682.286 L823.708 682.286 L823.149 682.286 L822.59 682.286 L822.03 682.286 L821.471 682.286 L820.912 682.286 L820.353 682.286 L819.793 682.286 L819.234 682.286 L818.675 682.286 L818.116 682.286 L817.556 682.286 L816.997 682.286 L816.438 682.286 L815.879 682.286 L815.319 682.286 L814.76 682.286 L814.201 682.286 L813.642 682.286 L813.082 682.286 L812.523 682.286 L811.964 682.286 L811.405 682.286 L810.845 682.286 L810.286 682.286 L809.727 682.286 L809.168 682.286 L808.608 682.286 L808.049 682.286 L807.49 682.286 L806.931 682.286 L806.371 682.286 L805.812 682.286 L805.253 682.286 L804.693 682.286 L804.134 682.286 L803.575 682.286 L803.016 682.286 L802.456 682.286 L801.897 682.286 L801.338 682.286 L800.779 682.286 L800.219 682.286 L799.66 682.286 L799.101 682.286 L798.542 682.286 L797.982 682.286 L797.423 682.286 L796.864 682.286 L796.305 682.286 L795.745 682.286 L795.186 682.286 L794.627 682.286 L794.068 682.286 L793.508 682.286 L792.949 682.286 L792.39 682.286 L791.831 682.286 L791.271 682.286 L790.712 682.286 L790.153 682.286 L789.594 682.286 L789.034 682.286 L788.475 682.286 L787.916 682.286 L787.357 682.286 L786.797 682.286 L786.238 682.286 L785.679 682.286 L785.12 682.286 L784.56 682.286 L784.001 682.286 L783.442 682.286 L782.883 682.286 L782.323 682.286 L781.764 682.286 L781.205 682.286 L780.646 682.286 L780.086 682.286 L779.527 682.286 L778.968 682.286 L778.409 682.286 L777.849 682.286 L777.29 682.286 L776.731 682.286 L776.172 682.286 L775.612 682.286 L775.053 682.286 L774.494 682.286 L773.935 682.286 L773.375 682.286 L772.816 682.286 L772.257 682.286 L771.698 682.286 L771.138 682.286 L770.579 682.286 L770.02 682.286 L769.461 682.286 L768.901 682.286 L768.342 682.286 L767.783 682.286 L767.224 682.286 L766.664 682.286 L766.105 682.286 L765.546 682.286 L764.987 682.286 L764.427 682.286 L763.868 682.286 L763.309 682.286 L762.75 682.286 L762.19 682.286 L761.631 682.286 L761.072 682.286 L760.513 682.286 L759.953 682.286 L759.394 682.286 L758.835 682.286 L758.276 682.286 L757.716 682.286 L757.157 682.286 L756.598 682.286 L756.039 682.286 L755.479 682.286 L754.92 682.286 L754.361 682.286 L753.802 682.286 L753.242 682.286 L752.683 682.286 L752.124 682.286 L751.565 682.286 L751.005 682.286 L750.446 682.286 L749.887 682.286 L749.328 682.286 L748.768 682.286 L748.209 682.286 L747.65 682.286 L747.091 682.286 L746.531 682.286 L745.972 682.286 L745.413 682.286 L744.854 682.286 L744.294 682.286 L743.735 682.286 L743.176 682.286 L742.617 682.286 L742.057 682.286 L741.498 682.286 L740.939 682.286 L740.38 682.286 L739.82 682.286 L739.261 682.286 L738.702 682.286 L738.143 682.286 L737.583 682.286 L737.024 682.286 L736.465 682.286 L735.906 682.286 L735.346 682.286 L734.787 682.286 L734.228 682.286 L733.669 682.286 L733.109 682.286 L732.55 682.286 L731.991 682.286 L731.432 682.286 L730.872 682.286 L730.313 682.286 L729.754 682.286 L729.195 682.286 L728.635 682.286 L728.076 682.286 L727.517 682.286 L726.958 682.286 L726.398 682.286 L725.839 682.286 L725.28 682.286 L724.721 682.286 L724.161 682.286 L723.602 682.286 L723.043 682.286 L722.484 682.286 L721.924 682.286 L721.365 682.286 L720.806 682.286 L720.247 682.286  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.314 720.806,683.314 721.365,683.314 721.924,683.314 722.484,683.314 723.043,683.314 723.602,683.314 724.161,683.314 724.721,683.314 725.28,683.314 725.839,683.314 726.398,683.314 726.958,683.314 727.517,683.314 728.076,683.314 728.635,683.314 729.195,683.314 729.754,683.314 730.313,683.314 730.872,683.314 731.432,683.314 731.991,683.314 732.55,683.314 733.109,683.314 733.669,683.314 734.228,683.314 734.787,683.314 735.346,683.314 735.906,683.314 736.465,683.314 737.024,683.314 737.583,683.314 738.143,683.314 738.702,683.314 739.261,683.314 739.82,683.314 740.38,683.314 740.939,683.314 741.498,683.314 742.057,683.314 742.617,683.314 743.176,683.314 743.735,683.314 744.294,683.314 744.854,683.314 745.413,683.314 745.972,683.314 746.531,683.314 747.091,683.314 747.65,683.314 748.209,683.314 748.768,683.314 749.328,683.314 749.887,683.314 750.446,683.314 751.005,683.314 751.565,683.314 752.124,683.314 752.683,683.314 753.242,683.314 753.802,683.314 754.361,683.314 754.92,683.314 755.479,683.314 756.039,683.314 756.598,683.314 757.157,683.314 757.716,683.314 758.276,683.314 758.835,683.314 759.394,683.314 759.953,683.314 760.513,683.314 761.072,683.314 761.631,683.314 762.19,683.314 762.75,683.314 763.309,683.314 763.868,683.314 764.427,683.314 764.987,683.314 765.546,683.314 766.105,683.314 766.664,683.314 767.224,683.314 767.783,683.314 768.342,683.314 768.901,683.314 769.461,683.314 770.02,683.314 770.579,683.314 771.138,683.314 771.698,683.314 772.257,683.314 772.816,683.314 773.375,683.314 773.935,683.314 774.494,683.314 775.053,683.314 775.612,683.314 776.172,683.314 776.731,683.314 777.29,683.314 777.849,683.314 778.409,683.314 778.968,683.314 779.527,683.314 780.086,683.314 780.646,683.314 781.205,683.314 781.764,683.314 782.323,683.314 782.883,683.314 783.442,683.314 784.001,683.314 784.56,683.314 785.12,683.314 785.679,683.314 786.238,683.314 786.797,683.314 787.357,683.314 787.916,683.314 788.475,683.314 789.034,683.314 789.594,683.314 790.153,683.314 790.712,683.314 791.271,683.314 791.831,683.314 792.39,683.314 792.949,683.314 793.508,683.314 794.068,683.314 794.627,683.314 795.186,683.314 795.745,683.314 796.305,683.314 796.864,683.314 797.423,683.314 797.982,683.314 798.542,683.314 799.101,683.314 799.66,683.314 800.219,683.314 800.779,683.314 801.338,683.314 801.897,683.314 802.456,683.314 803.016,683.314 803.575,683.314 804.134,683.314 804.693,683.314 805.253,683.314 805.812,683.314 806.371,683.314 806.931,683.314 807.49,683.314 808.049,683.314 808.608,683.314 809.168,683.314 809.727,683.314 810.286,683.314 810.845,683.314 811.405,683.314 811.964,683.314 812.523,683.314 813.082,683.314 813.642,683.314 814.201,683.314 814.76,683.314 815.319,683.314 815.879,683.314 816.438,683.314 816.997,683.314 817.556,683.314 818.116,683.314 818.675,683.314 819.234,683.314 819.793,683.314 820.353,683.314 820.912,683.314 821.471,683.314 822.03,683.314 822.59,683.314 823.149,683.314 823.708,683.314 824.267,683.314 824.827,683.314 825.386,683.314 825.945,683.314 826.504,683.314 827.064,683.314 827.623,683.314 828.182,683.314 828.741,683.314 829.301,683.314 829.86,683.314 830.419,683.314 830.978,683.314 831.538,683.314 832.097,683.314 832.656,683.314 833.215,683.314 833.775,683.314 834.334,683.314 834.893,683.314 835.452,683.314 836.012,683.314 836.571,683.314 837.13,683.314 837.689,683.314 838.249,683.314 838.808,683.314 839.367,683.314 839.926,683.314 840.486,683.314 841.045,683.314 841.604,683.314 842.163,683.314 842.723,683.314 843.282,683.314 843.841,683.314 844.4,683.314 844.96,683.314 845.519,683.314 846.078,683.314 846.637,683.314 847.197,683.314 847.756,683.314 848.315,683.314 848.874,683.314 849.434,683.314 849.993,683.314 850.552,683.314 851.111,683.314 851.671,683.314 852.23,683.314 852.789,683.314 853.348,683.314 853.908,683.314 854.467,683.314 855.026,683.314 855.585,683.314 856.145,683.314 856.704,683.314 857.263,683.314 857.822,683.314 858.382,683.314 858.941,683.314 859.5,683.314 860.059,683.314 860.619,683.314 861.178,683.314 861.737,683.314 862.296,683.314 862.856,683.314 863.415,683.314 863.974,683.314 864.533,683.314 865.093,683.314 865.652,683.314 866.211,683.314 866.77,683.314 867.33,683.314 867.889,683.314 868.448,683.314 869.007,683.314 869.567,683.314 870.126,683.314 870.685,683.314 871.244,683.314 871.804,683.314 872.363,683.314 872.922,683.314 873.481,683.314 874.041,683.314 874.6,683.314 875.159,683.314 875.718,683.314 876.278,683.314 876.837,683.314 877.396,683.314 877.955,683.314 878.515,683.314 879.074,683.314 879.633,683.314 880.192,683.314 880.752,683.314 881.311,683.314 881.87,683.314 882.429,683.314 882.989,683.314 883.548,683.314 884.107,683.314 884.666,683.314 885.226,683.314 885.785,683.314 886.344,683.314 886.903,683.314 887.463,683.314 888.022,683.314 888.581,683.314 889.14,683.314 889.7,683.314 890.259,683.314 890.818,683.314 891.377,683.314 891.937,683.314 892.496,683.314 893.055,683.314 893.614,683.314 894.174,683.314 894.733,683.314 895.292,683.314 895.851,683.314 896.411,683.314 896.97,683.314 897.529,683.314 898.088,683.314 898.648,683.314 899.207,683.314 899.766,683.314 900.325,683.314 900.885,683.314 901.444,683.314 902.003,683.314 902.562,683.314 903.122,683.314 903.681,683.314 904.24,683.314 904.799,683.314 905.359,683.314 905.918,683.314 906.477,683.314 907.036,683.314 907.596,683.314 908.155,683.314 908.714,683.314 909.273,683.314 909.833,683.314 910.392,683.314 910.951,683.314 911.51,683.314 912.07,683.314 912.629,683.314 913.188,683.314 913.747,683.314 914.307,683.314 914.866,683.314 915.425,683.314 915.984,683.314 916.544,683.314 917.103,683.314 917.662,683.314 918.221,683.314 918.781,683.314 919.34,683.314 919.899,683.314 920.458,683.314 921.018,683.314 921.577,683.314 922.136,683.314 922.695,683.314 923.255,683.314 923.814,683.314 924.373,683.314 924.932,683.314 925.492,683.314 926.051,683.314 926.61,683.314 927.169,683.314 927.729,683.314 928.288,683.314 928.847,683.314 929.406,683.314 929.966,683.314 930.525,683.314 931.084,683.314 931.644,683.314 932.203,683.314 932.762,683.314 933.321,683.314 933.881,683.314 934.44,683.314 934.999,683.314 935.558,683.314 936.118,683.314 936.677,683.314 937.236,683.314 937.795,683.314 938.355,683.314 938.914,683.314 939.473,683.314 940.032,683.314 940.592,683.314 941.151,683.314 941.71,683.314 942.269,683.314 942.829,683.314 943.388,683.314 943.947,683.314 944.506,683.314 945.066,683.314 945.625,683.314 946.184,683.314 946.743,683.314 947.303,683.314 947.862,683.314 948.421,683.314 948.98,683.314 949.54,683.314 950.099,683.314 950.658,683.314 951.217,683.314 951.777,683.314 952.336,683.314 952.895,683.314 953.454,683.314 954.014,683.314 954.573,683.314 955.132,683.314 955.691,683.314 956.251,683.314 956.81,683.314 957.369,683.314 957.928,683.314 958.488,683.314 959.047,683.314 959.606,683.314 960.165,683.314 960.725,683.314 961.284,683.314 961.843,683.314 962.402,683.314 962.962,683.314 963.521,683.314 964.08,683.314 964.639,683.314 965.199,683.314 965.758,683.314 966.317,683.314 966.876,683.314 967.436,683.314 967.995,683.314 968.554,683.314 969.113,683.314 969.673,683.314 970.232,683.314 970.791,683.314 971.35,683.314 971.91,683.314 972.469,683.314 973.028,683.314 973.587,683.314 974.147,683.314 974.706,683.314 975.265,683.314 975.824,683.314 976.384,683.314 976.943,683.314 977.502,683.314 978.061,683.314 978.621,683.314 979.18,683.314 979.739,683.314 980.298,683.314 980.858,683.314 981.417,683.314 981.976,683.314 982.535,683.314 983.095,683.314 983.654,683.314 984.213,683.314 984.772,683.314 985.332,683.314 985.891,683.314 986.45,683.314 987.009,683.314 987.569,683.314 988.128,683.314 988.687,683.314 989.246,683.314 989.806,683.314 990.365,683.314 990.924,683.314 991.483,683.314 992.043,683.314 992.602,683.314 993.161,683.314 993.72,683.314 994.28,683.314 994.839,683.314 995.398,683.314 995.957,683.314 996.517,683.314 997.076,683.314 997.635,683.314 998.194,683.314 998.754,683.314 999.313,683.314 999.872,683.314 1000.43,683.314 1000.99,683.314 1001.55,683.314 1002.11,683.314 1002.67,683.314 1003.23,683.314 1003.79,683.314 1004.35,683.314 1004.91,683.314 1005.46,683.314 1006.02,683.314 1006.58,683.314 1007.14,683.314 1007.7,683.314 1008.26,683.314 1008.82,683.314 1009.38,683.314 1009.94,683.314 1010.5,683.314 1011.06,683.314 1011.62,683.314 1012.18,683.314 1012.73,683.314 1013.29,683.314 1013.85,683.314 1014.41,683.314 1014.97,683.314 1015.53,683.314 1016.09,683.314 1016.65,683.314 1017.21,683.314 1017.77,683.314 1018.33,683.314 1018.89,683.314 1019.45,683.314 1020.01,683.314 1020.56,683.314 1021.12,683.314 1021.68,683.314 1022.24,683.314 1022.8,683.314 1023.36,683.314 1023.92,683.314 1024.48,683.314 1025.04,683.314 1025.6,683.314 1026.16,683.314 1026.72,683.314 1027.28,683.314 1027.83,683.314 1028.39,683.314 1028.95,683.314 1029.51,683.314 1030.07,683.314 1030.63,683.314 1031.19,683.314 1031.75,683.314 1032.31,683.314 1032.87,683.314 1033.43,683.314 1033.99,683.314 1034.55,683.314 1035.1,683.314 1035.66,683.314 1036.22,683.314 1036.78,683.314 1037.34,683.314 1037.9,683.314 1038.46,683.314 1039.02,683.314 1039.58,683.314 1040.14,683.314 1040.7,683.314 1041.26,683.314 1041.82,683.314 1042.38,683.314 1042.93,683.314 1043.49,683.314 1044.05,683.314 1044.61,683.314 1045.17,683.314 1045.73,683.314 1046.29,683.314 1046.85,683.314 1047.41,683.314 1047.97,683.314 1048.53,683.314 1049.09,683.314 1049.65,683.314 1050.2,683.314 1050.76,683.314 1051.32,683.314 1051.88,683.314 1052.44,683.314 1053,683.314 1053.56,683.314 1054.12,683.314 1054.68,683.314 1055.24,683.314 1055.8,683.314 1056.36,683.314 1056.92,683.314 1057.48,683.314 1058.03,683.314 1058.59,683.314 1059.15,683.314 1059.71,683.314 1060.27,683.314 1060.83,683.314 1061.39,683.314 1061.95,683.314 1062.51,683.314 1063.07,683.314 1063.63,683.314 1064.19,683.314 1064.75,683.314 1065.3,683.314 1065.86,683.314 1066.42,683.314 1066.98,683.314 1067.54,683.314 1068.1,683.314 1068.66,683.314 1069.22,683.314 1069.78,683.314 1070.34,683.314 1070.9,683.314 1071.46,683.314 1072.02,683.314 1072.57,683.314 1073.13,683.314 1073.69,683.314 1074.25,683.314 1074.81,683.314 1075.37,683.314 1075.93,683.314 1076.49,683.314 1077.05,683.314 1077.61,683.314 1078.17,683.314 1078.73,683.314 1079.29,683.314 1079.85,683.314 1080.4,683.314 1080.96,683.314 1081.52,683.314 1082.08,683.314 1082.64,683.314 1083.2,683.314 1083.76,683.314 1084.32,683.314 1084.88,683.314 1085.44,683.314 1086,683.314 1086.56,683.314 1087.12,683.314 1087.67,683.314 1088.23,683.314 1088.79,683.314 1089.35,683.314 1089.91,683.314 1090.47,683.314 1091.03,683.314 1091.59,683.314 1092.15,683.314 1092.71,683.314 1093.27,683.314 1093.83,683.314 1094.39,683.314 1094.94,683.314 1095.5,683.314 1096.06,683.314 1096.62,683.314 1097.18,683.314 1097.74,683.314 1098.3,683.314 1098.86,683.314 1099.42,683.314 1099.98,683.314 1100.54,683.314 1101.1,683.314 1101.66,683.314 1102.22,683.314 1102.77,683.314 1103.33,683.314 1103.89,683.314 1104.45,683.314 1105.01,683.314 1105.57,683.314 1106.13,683.314 1106.69,683.314 1107.25,683.314 1107.81,683.314 1108.37,683.314 1108.93,683.314 1109.49,683.314 1110.04,683.314 1110.6,683.314 1111.16,683.314 1111.72,683.314 1112.28,683.314 1112.84,683.314 1113.4,683.314 1113.96,683.314 1114.52,683.314 1115.08,683.314 1115.64,683.314 1116.2,683.314 1116.76,683.314 1117.31,683.314 1117.87,683.314 1118.43,683.314 1118.99,683.314 1119.55,683.314 1120.11,683.314 1120.67,683.314 1121.23,683.314 1121.79,683.314 1122.35,683.314 1122.91,683.314 1123.47,683.314 1124.03,683.314 1124.59,683.314 1125.14,683.314 1125.7,683.314 1126.26,683.314 1126.82,683.314 1127.38,683.314 1127.94,683.314 1128.5,683.314 1129.06,683.314 1129.62,683.314 1130.18,683.314 1130.74,683.314 1131.3,683.314 1131.86,683.314 1132.41,683.314 1132.97,683.314 1133.53,683.314 1134.09,683.314 1134.65,683.314 1135.21,683.314 1135.77,683.314 1136.33,683.314 1136.89,683.314 1137.45,683.314 1138.01,683.314 1138.57,683.314 1139.13,683.314 1139.68,683.314 1140.24,683.314 1140.8,683.314 1141.36,683.314 1141.92,683.314 1142.48,683.314 1143.04,683.314 1143.6,683.314 1144.16,683.314 1144.72,683.314 1145.28,683.314 1145.84,683.314 1146.4,683.314 1146.96,683.314 1147.51,683.314 1148.07,683.314 1148.63,683.314 1149.19,683.314 1149.75,683.314 1150.31,683.314 1150.87,683.314 1151.43,683.314 1151.99,683.314 1152.55,683.314 1153.11,683.314 1153.67,683.314 1154.23,683.314 1154.78,683.314 1155.34,683.314 1155.9,683.314 1156.46,683.314 1157.02,683.314 1157.58,683.314 1158.14,683.314 1158.7,683.314 1159.26,683.314 1159.82,683.314 1160.38,683.314 1160.94,683.314 1161.5,683.314 1162.05,683.314 1162.61,683.314 1163.17,683.314 1163.73,683.314 1164.29,683.314 1164.85,683.314 1165.41,683.314 1165.97,683.314 1166.53,683.314 1167.09,683.314 1167.65,683.314 1168.21,683.314 1168.77,683.314 1169.33,683.314 1169.88,683.314 1170.44,683.314 1171,683.314 1171.56,683.314 1172.12,683.314 1172.68,683.314 1173.24,683.314 1173.8,683.314 1174.36,683.314 1174.92,683.314 1175.48,683.314 1176.04,683.314 1176.6,683.314 1177.15,683.314 1177.71,683.314 1178.27,683.314 1178.83,683.314 1179.39,683.314 1179.95,683.314 1180.51,683.314 1181.07,683.314 1181.63,683.314 1182.19,683.314 1182.75,683.314 1183.31,683.314 1183.87,683.314 1184.43,683.314 1184.98,683.314 1185.54,683.314 1186.1,683.314 1186.66,683.314 1187.22,683.314 1187.78,683.314 1188.34,683.314 1188.9,683.314 1189.46,683.314 1190.02,683.314 1190.58,683.314 1191.14,683.314 1191.7,683.314 1192.25,683.314 1192.81,683.314 1193.37,683.314 1193.93,683.314 1194.49,683.314 1195.05,683.314 1195.61,683.314 1196.17,683.314 1196.73,683.314 1197.29,683.314 1197.85,683.314 1198.41,683.314 1198.97,683.314 1199.52,683.314 1200.08,683.314 1200.64,683.314 1201.2,683.314 1201.76,683.314 1202.32,683.314 1202.88,683.314 1203.44,683.314 1204,683.314 1204.56,683.314 1205.12,683.314 1205.68,683.314 1206.24,683.314 1206.8,683.314 1207.35,683.314 1207.91,683.314 1208.47,683.314 1209.03,683.314 1209.59,683.314 1210.15,683.314 1210.71,683.314 1211.27,683.314 1211.83,683.314 1212.39,683.314 1212.95,683.314 1213.51,683.314 1214.07,683.314 1214.62,683.314 1215.18,683.314 1215.74,683.314 1216.3,683.314 1216.86,683.314 1217.42,683.314 1217.98,683.314 1218.54,683.314 1219.1,683.314 1219.66,683.314 1220.22,683.314 1220.78,683.314 1221.34,683.314 1221.89,683.314 1222.45,683.314 1223.01,683.314 1223.57,683.314 1224.13,683.314 1224.69,683.314 1225.25,683.314 1225.81,683.314 1226.37,683.314 1226.93,683.314 1227.49,683.314 1228.05,683.314 1228.61,683.314 1229.17,683.314 1229.72,683.314 1230.28,683.314 1230.84,683.314 1231.4,683.314 1231.96,683.314 1232.52,683.314 1233.08,683.314 1233.64,683.314 1234.2,683.314 1234.76,683.314 1235.32,683.314 1235.88,683.314 1236.44,683.314 1236.99,683.314 1237.55,683.314 1238.11,683.314 1238.67,683.314 1239.23,683.314 1239.79,683.314 1240.35,683.314 1240.91,683.314 1241.47,683.314 1242.03,683.314 1242.59,683.314 1243.15,683.314 1243.71,683.314 1244.26,683.314 1244.82,683.314 1245.38,683.314 1245.94,683.314 1246.5,683.314 1247.06,683.314 1247.62,683.314 1248.18,683.314 1248.74,683.314 1249.3,683.314 1249.86,683.314 1250.42,683.314 1250.98,683.314 1251.54,683.314 1252.09,683.314 1252.65,683.314 1253.21,683.314 1253.77,683.314 1254.33,683.314 1254.89,683.314 1255.45,683.314 1256.01,683.314 1256.57,683.314 1257.13,683.314 1257.69,683.314 1258.25,683.314 1258.81,683.314 1259.36,683.314 1259.92,683.314 1260.48,683.314 1261.04,683.314 1261.6,683.314 1262.16,683.314 1262.72,683.314 1263.28,683.314 1263.84,683.314 1264.4,683.314 1264.96,683.314 1265.52,683.314 1266.08,683.314 1266.63,683.314 1267.19,683.314 1267.75,683.314 1268.31,683.314 1268.87,683.314 1269.43,683.314 1269.99,683.314 1270.55,683.314 1271.11,683.314 1271.67,683.314 1272.23,683.314 1272.79,683.314 1273.35,683.314 1273.91,683.314 1274.46,683.314 1275.02,683.314 1275.58,683.314 1276.14,683.314 1276.7,683.314 1277.26,683.314 1277.82,683.314 1278.38,683.314 1278.94,683.314 1279.5,683.314 1280.06,683.314 1280.62,683.314 1281.18,683.314 1281.73,683.314 1282.29,683.314 1282.85,683.314 1283.41,683.314 1283.97,683.314 1284.53,683.314 1285.09,683.314 1285.65,683.314 1286.21,683.314 1286.77,683.314 1287.33,683.314 1287.89,683.314 1288.45,683.314 1289,683.314 1289.56,683.314 1290.12,683.314 1290.68,683.314 1291.24,683.314 1291.8,683.314 1292.36,683.314 1292.92,683.314 1293.48,683.314 1294.04,683.314 1294.6,683.314 1295.16,683.314 1295.72,683.314 1296.28,683.314 1296.83,683.314 1297.39,683.314 1297.95,683.314 1298.51,683.314 1299.07,683.314 1299.63,683.314 1300.19,683.314 1300.75,683.314 1301.31,683.314 1301.87,683.314 1302.43,683.314 1302.99,683.314 1303.55,683.314 1304.1,683.314 1304.66,683.314 1305.22,683.314 1305.78,683.314 1306.34,683.314 1306.9,683.314 1307.46,683.314 1308.02,683.314 1308.58,683.314 1309.14,683.314 1309.7,683.314 1310.26,683.314 1310.82,683.314 1311.38,683.314 1311.93,683.314 1312.49,683.314 1313.05,683.314 1313.61,683.314 1314.17,683.314 1314.73,683.314 1315.29,683.314 1315.85,683.314 1316.41,683.314 1316.97,683.314 1317.53,683.314 1318.09,683.314 1318.65,683.314 1319.2,683.314 1319.76,683.314 1320.32,683.314 1320.88,683.314 1321.44,683.314 1322,683.314 1322.56,683.314 1323.12,683.314 1323.68,683.314 1324.24,683.314 1324.8,683.314 1325.36,683.314 1325.92,683.314 1326.47,683.314 1327.03,683.314 1327.59,683.314 1328.15,683.314 1328.71,683.314 1329.27,683.314 1329.83,683.314 1330.39,683.314 1330.95,683.314 1331.51,683.314 1332.07,683.314 1332.63,683.314 1333.19,683.314 1333.75,683.314 1334.3,683.314 1334.86,683.314 1335.42,683.314 1335.98,683.314 1336.54,683.314 1337.1,683.314 1337.66,683.314 1338.22,683.314 1338.78,683.314 1339.34,683.314 1339.9,683.314 1340.46,683.314 1341.02,683.314 1341.57,683.314 1342.13,683.314 1342.69,683.314 1343.25,683.314 1343.81,683.314 1344.37,683.314 1344.93,683.314 1345.49,683.314 1346.05,683.314 1346.61,683.314 1347.17,683.314 1347.73,683.314 1348.29,683.314 1348.84,683.314 1349.4,683.314 1349.96,683.314 1350.52,683.314 1351.08,683.314 1351.64,683.314 1352.2,683.314 1352.76,683.314 1353.32,683.314 1353.88,683.314 1354.44,683.314 1355,683.314 1355.56,683.314 1356.12,683.314 1356.67,683.314 1357.23,683.314 1357.79,683.314 1358.35,683.314 1358.91,683.314 1359.47,683.314 1360.03,683.314 1360.59,683.314 1361.15,683.314 1361.71,683.314 1362.27,683.314 1362.83,683.314 1363.39,683.314 1363.94,683.314 1364.5,683.314 1365.06,683.314 1365.62,683.314 1366.18,683.314 1366.74,683.314 1367.3,683.314 1367.86,683.314 1368.42,683.314 1368.98,683.314 1369.54,683.314 1370.1,683.314 1370.66,683.314 1371.21,683.314 1371.77,683.314 1372.33,683.314 1372.89,683.314 1373.45,683.314 1374.01,683.314 1374.57,683.314 1375.13,683.314 1375.69,683.314 1376.25,683.314 1376.81,683.314 1377.37,683.314 1377.93,683.314 1378.49,683.314 1379.04,683.314 1379.6,683.314 1380.16,683.314 1380.72,683.314 1381.28,683.314 1381.84,683.314 1382.4,683.314 1382.96,683.314 1383.52,683.314 1384.08,683.314 1384.64,683.314 1385.2,683.314 1385.76,683.314 1386.31,683.314 1386.87,683.314 1387.43,683.314 1387.99,683.314 1388.55,683.314 1389.11,683.314 1389.67,683.314 1390.23,683.314 1390.79,683.314 1391.35,683.314 1391.91,683.314 1392.47,683.314 1393.03,683.314 1393.58,683.314 1394.14,683.314 1394.7,683.314 1395.26,683.314 1395.82,683.314 1396.38,683.314 1396.94,683.314 1397.5,683.314 1398.06,683.314 1398.62,683.314 1399.18,683.314 1399.74,683.314 1400.3,683.314 1400.86,683.314 1401.41,683.314 1401.97,683.314 1402.53,683.314 1403.09,683.314 1403.65,683.314 1404.21,683.314 1404.77,683.314 1405.33,683.314 1405.89,683.314 1406.45,683.314 1407.01,683.314 1407.57,683.314 1408.13,683.314 1408.68,683.314 1409.24,683.314 1409.8,683.314 1410.36,683.314 1410.92,683.314 1411.48,683.314 1412.04,683.314 1412.6,683.314 1413.16,683.314 1413.72,683.314 1414.28,683.314 1414.84,683.314 1415.4,683.314 1415.95,683.314 1416.51,683.314 1417.07,683.314 1417.63,683.314 1418.19,683.314 1418.75,683.314 1419.31,683.314 1419.87,683.314 1420.43,683.314 1420.99,683.314 1421.55,683.314 1422.11,683.314 1422.67,683.314 1423.23,683.314 1423.78,683.314 1424.34,683.314 1424.9,683.314 1425.46,683.314 1426.02,683.314 1426.58,683.314 1427.14,683.314 1427.7,683.314 1428.26,683.314 1428.82,683.314 1429.38,683.314 1429.94,683.314 1430.5,683.314 1431.05,683.314 1431.61,683.314 1432.17,683.314 1432.73,683.314 1433.29,683.314 1433.85,683.314 1434.41,683.314 1434.97,683.314 1435.53,683.314 1436.09,683.314 1436.65,683.314 1437.21,683.314 1437.77,683.314 1438.33,683.314 1438.88,683.314 1439.44,683.314 1440,683.314 1440.56,683.314 1441.12,683.314 1441.68,683.314 1442.24,683.314 1442.8,683.314 1443.36,683.314 1443.92,683.314 1444.48,683.314 1445.04,683.314 1445.6,683.314 1446.15,683.314 1446.71,683.314 1447.27,683.314 1447.83,683.314 1448.39,683.314 1448.95,683.314 1449.51,683.314 1450.07,683.314 1450.63,683.314 1451.19,683.314 1451.75,683.314 1452.31,683.314 1452.87,683.314 1453.42,683.314 1453.98,683.314 1454.54,683.314 1455.1,683.314 1455.66,683.314 1456.22,683.314 1456.78,683.314 1457.34,683.314 1457.9,683.314 1458.46,683.314 1459.02,683.314 1459.58,683.314 1460.14,683.314 1460.7,683.314 1461.25,683.314 1461.81,683.314 1462.37,683.314 1462.93,683.314 1463.49,683.314 1464.05,683.314 1464.61,683.314 1465.17,683.314 1465.73,683.314 1466.29,683.314 1466.85,683.314 1467.41,683.314 1467.97,683.314 1468.52,683.314 1469.08,683.314 1469.64,683.314 1470.2,683.314 1470.76,683.314 1471.32,683.314 1471.88,683.314 1472.44,683.314 1473,683.314 1473.56,683.314 1474.12,683.314 1474.68,683.314 1475.24,683.314 1475.79,683.314 1476.35,683.314 1476.91,683.314 1477.47,683.314 1478.03,683.314 1478.59,683.314 1479.15,683.314 1479.71,683.314 1480.27,683.314 1480.83,683.314 1481.39,683.314 1481.95,683.314 1482.51,683.314 1483.07,683.314 1483.62,683.314 1484.18,683.314 1484.74,683.314 1485.3,683.314 1485.86,683.314 1486.42,683.314 1486.98,683.314 1487.54,683.314 1488.1,683.314 1488.66,683.314 1489.22,683.314 1489.78,683.314 1490.34,683.314 1490.89,683.314 1491.45,683.314 1492.01,683.314 1492.57,683.314 1493.13,683.314 1493.69,683.314 1494.25,683.314 1494.81,683.314 1495.37,683.314 1495.93,683.314 1496.49,683.314 1497.05,683.314 1497.61,683.314 1498.16,683.314 1498.72,683.314 1499.28,683.314 1499.84,683.314 1500.4,683.314 1500.96,683.314 1501.52,683.314 1502.08,683.314 1502.64,683.314 1503.2,683.314 1503.76,683.314 1504.32,683.314 1504.88,683.314 1505.44,683.314 1505.99,683.314 1506.55,683.314 1507.11,683.314 1507.67,683.314 1508.23,683.314 1508.79,683.314 1509.35,683.314 1509.91,683.314 1510.47,683.314 1511.03,683.314 1511.59,683.314 1512.15,683.314 1512.71,683.314 1513.26,683.314 1513.82,683.314 1514.38,683.314 1514.94,683.314 1515.5,683.314 1516.06,683.314 1516.62,683.314 1517.18,683.314 1517.74,683.314 1518.3,683.314 1518.86,683.314 1519.42,683.314 1519.98,683.314 1520.53,683.314 1521.09,683.314 1521.65,683.314 1522.21,683.314 1522.77,683.314 1523.33,683.314 1523.89,683.314 1524.45,683.314 1525.01,683.314 1525.57,683.314 1526.13,683.314 1526.69,683.314 1527.25,683.314 1527.81,683.314 1528.36,683.314 1528.92,683.314 1529.48,683.314 1530.04,683.314 1530.6,683.314 1531.16,683.314 1531.72,683.314 1532.28,683.314 1532.84,683.314 1533.4,683.314 1533.96,683.314 1534.52,683.314 1535.08,683.314 1535.63,683.314 1536.19,683.314 1536.75,683.314 1537.31,683.314 1537.87,683.314 1538.43,683.314 1538.99,683.314 1539.55,683.314 1540.11,683.314 1540.67,683.314 1541.23,683.314 1541.79,683.314 1542.35,683.314 1542.9,683.314 1543.46,683.314 1544.02,683.314 1544.58,683.314 1545.14,683.314 1545.7,683.314 1546.26,683.314 1546.82,683.314 1547.38,683.314 1547.94,683.314 1548.5,683.314 1549.06,683.314 1549.62,683.314 1550.18,683.314 1550.73,683.314 1551.29,683.314 1551.85,683.314 1552.41,683.314 1552.97,683.314 1553.53,683.314 1554.09,683.314 1554.65,683.314 1555.21,683.314 1555.77,683.314 1556.33,683.314 1556.89,683.314 1557.45,683.314 1558,683.314 1558.56,683.314 1559.12,683.314 1559.68,683.314 1560.24,683.314 1560.8,683.314 1561.36,683.314 1561.92,683.314 1562.48,683.314 1563.04,683.314 1563.6,683.314 1564.16,683.314 1564.72,683.314 1565.28,683.314 1565.83,683.314 1566.39,683.314 1566.95,683.314 1567.51,683.314 1568.07,683.314 1568.63,683.314 1569.19,683.314 1569.75,683.314 1570.31,683.314 1570.87,683.314 1571.43,683.314 1571.99,683.314 1572.55,683.314 1573.1,683.314 1573.66,683.314 1574.22,683.314 1574.78,683.314 1575.34,683.314 1575.9,683.314 1576.46,683.314 1577.02,683.314 1577.58,683.314 1578.14,683.314 1578.7,683.314 1579.26,683.314 1579.82,683.314 1580.37,683.314 1580.93,683.314 1581.49,683.314 1582.05,683.314 1582.61,683.314 1583.17,683.314 1583.73,683.314 1584.29,683.314 1584.85,683.314 1585.41,683.314 1585.97,683.314 1586.53,683.314 1587.09,683.314 1587.65,683.314 1588.2,683.314 1588.76,683.314 1589.32,683.314 1589.88,683.314 1590.44,683.314 1591,683.314 1591.56,683.314 1592.12,683.314 1592.68,683.314 1593.24,683.314 1593.8,683.314 1594.36,683.314 1594.92,683.314 1595.47,683.314 1596.03,683.314 1596.59,683.314 1597.15,683.314 1597.71,683.314 1598.27,683.314 1598.83,683.314 1599.39,683.314 1599.95,683.314 1600.51,683.314 1601.07,683.314 1601.63,683.314 1602.19,683.314 1602.74,683.314 1603.3,683.314 1603.86,683.314 1604.42,683.314 1604.98,683.314 1605.54,683.314 1606.1,683.314 1606.66,683.314 1607.22,683.314 1607.78,683.314 1608.34,683.314 1608.9,683.314 1609.46,683.314 1610.02,683.314 1610.57,683.314 1611.13,683.314 1611.69,683.314 1612.25,683.314 1612.81,683.314 1613.37,683.314 1613.93,683.314 1614.49,683.314 1615.05,683.314 1615.61,683.314 1616.17,683.314 1616.73,683.314 1617.29,683.314 1617.84,683.314 1618.4,683.314 1618.96,683.314 1619.52,683.314 1620.08,683.314 1620.64,683.314 1621.2,683.314 1621.76,683.314 1622.32,683.314 1622.88,683.314 1623.44,683.314 1624,683.314 1624.56,683.314 1625.11,683.314 1625.67,683.314 1626.23,683.314 1626.79,683.314 1627.35,683.314 1627.91,683.314 1628.47,683.314 1629.03,683.314 1629.59,683.314 1630.15,683.314 1630.71,683.314 1631.27,683.314 1631.83,683.314 1632.39,683.314 1632.94,683.314 1633.5,683.314 1634.06,683.314 1634.62,683.314 1635.18,683.314 1635.74,683.314 1636.3,683.314 1636.86,683.314 1637.42,683.314 1637.98,683.314 1638.54,683.314 1639.1,683.314 1639.66,683.314 1640.21,683.314 1640.77,683.314 1641.33,683.314 1641.89,683.314 1642.45,683.314 1643.01,683.314 1643.57,683.314 1644.13,683.314 1644.69,683.314 1645.25,683.314 1645.81,683.314 1646.37,683.314 1646.93,683.314 1647.48,683.314 1648.04,683.314 1648.6,683.314 1649.16,683.314 1649.72,683.314 1650.28,683.314 1650.84,683.314 1651.4,683.314 1651.96,683.314 1652.52,683.314 1653.08,683.314 1653.64,683.314 1654.2,683.314 1654.76,683.314 1655.31,683.314 1655.87,683.314 1656.43,683.314 1656.99,683.314 1657.55,683.314 1658.11,683.314 1658.67,683.314 1659.23,683.314 1659.79,683.314 1660.35,683.314 1660.91,683.314 1661.47,683.314 1662.03,683.314 1662.58,683.314 1663.14,683.314 1663.7,683.314 1664.26,683.314 1664.82,683.314 1665.38,683.314 1665.94,683.314 1666.5,683.314 1667.06,683.314 1667.62,683.314 1668.18,683.314 1668.74,683.314 1669.3,683.314 1669.85,683.314 1670.41,683.314 1670.97,683.314 1671.53,683.314 1672.09,683.314 1672.65,683.314 1673.21,683.314 1673.77,683.314 1674.33,683.314 1674.89,683.314 1675.45,683.314 1676.01,683.314 1676.57,683.314 1677.13,683.314 1677.68,683.314 1678.24,683.314 1678.8,683.314 1679.36,683.314 1679.92,683.314 1680.48,683.314 1681.04,683.314 1681.6,683.314 1682.16,683.314 1682.72,683.314 1683.28,683.314 1683.84,683.314 1684.4,683.314 1684.95,683.314 1685.51,683.314 1686.07,683.314 1686.63,683.314 1687.19,683.314 1687.75,683.314 1688.31,683.314 1688.87,683.314 1689.43,683.314 1689.99,683.314 1690.55,683.314 1691.11,683.314 1691.67,683.314 1692.23,683.314 1692.78,683.314 1693.34,683.314 1693.9,683.314 1694.46,683.314 1695.02,683.314 1695.58,683.314 1696.14,683.314 1696.7,683.314 1697.26,683.314 1697.82,683.314 1698.38,683.314 1698.94,683.314 1699.5,683.314 1700.05,683.314 1700.61,683.314 1701.17,683.314 1701.73,683.314 1702.29,683.314 1702.85,683.314 1703.41,683.314 1703.97,683.314 1704.53,683.314 1705.09,683.314 1705.65,683.314 1706.21,683.314 1706.77,683.314 1707.32,683.314 1707.88,683.314 1708.44,683.314 1709,683.314 1709.56,683.314 1710.12,683.314 1710.68,683.314 1711.24,683.314 1711.8,683.314 1712.36,683.314 1712.92,683.314 1713.48,683.314 1714.04,683.314 1714.6,683.314 1715.15,683.314 1715.71,683.314 1716.27,683.314 1716.83,683.314 1717.39,683.314 1717.95,683.314 1718.51,683.314 1719.07,683.314 1719.63,683.314 1720.19,683.314 1720.75,683.314 1721.31,683.314 1721.87,683.314 1722.42,683.314 1722.98,683.314 1723.54,683.314 1724.1,683.314 1724.66,683.314 1725.22,683.314 1725.78,683.314 1726.34,683.314 1726.9,683.314 1727.46,683.314 1728.02,683.314 1728.58,683.314 1729.14,683.314 1729.69,683.314 1730.25,683.314 1730.81,683.314 1731.37,683.314 1731.93,683.314 1732.49,683.314 1733.05,683.314 1733.61,683.314 1734.17,683.314 1734.73,683.314 1735.29,683.314 1735.85,683.314 1736.41,683.314 1736.97,683.314 1737.52,683.314 1738.08,683.314 1738.64,683.314 1739.2,683.314 1739.76,683.314 1740.32,683.314 1740.88,683.314 1741.44,683.314 1742,683.314 1742.56,683.314 1743.12,683.314 1743.68,683.314 1744.24,683.314 1744.79,683.314 1745.35,683.314 1745.91,683.314 1746.47,683.314 1747.03,683.314 1747.59,683.314 1748.15,683.314 1748.71,683.314 1749.27,683.314 1749.83,683.314 1750.39,683.314 1750.95,683.314 1751.51,683.314 1752.06,683.314 1752.62,683.314 1753.18,683.314 1753.74,683.314 1754.3,683.314 1754.86,683.314 1755.42,683.314 1755.98,683.314 1756.54,683.314 1757.1,683.314 1757.66,683.314 1758.22,683.314 1758.78,683.314 1759.34,683.314 1759.89,683.314 1760.45,683.314 1761.01,683.314 1761.57,683.314 1762.13,683.314 1762.69,683.314 1763.25,683.314 1763.81,683.314 1764.37,683.314 1764.93,683.314 1765.49,683.314 1766.05,683.314 1766.61,683.314 1767.16,683.314 1767.72,683.314 1768.28,683.314 1768.84,683.314 1769.4,683.314 1769.96,683.314 1770.52,683.314 1771.08,683.314 1771.64,683.314 1772.2,683.314 1772.76,683.314 1773.32,683.314 1773.88,683.314 1774.43,683.314 1774.99,683.314 1775.55,683.314 1776.11,683.314 1776.67,683.314 1777.23,683.314 1777.79,683.314 1778.35,683.314 1778.91,683.314 1779.47,683.314 1780.03,683.314 1780.59,683.314 1781.15,683.314 1781.71,683.314 1782.26,683.314 1782.82,683.314 1783.38,683.314 1783.94,683.314 1784.5,683.314 1785.06,683.314 1785.62,683.314 1786.18,683.314 1786.74,683.314 1787.3,683.314 1787.86,683.314 1788.42,683.314 1788.98,683.314 1789.53,683.314 1790.09,683.314 1790.65,683.314 1791.21,683.314 1791.77,683.314 1792.33,683.314 1792.89,683.314 1793.45,683.314 1794.01,683.314 1794.57,683.314 1795.13,683.314 1795.69,683.314 1796.25,683.314 1796.8,683.314 1797.36,683.314 1797.92,683.314 1798.48,683.314 1799.04,683.314 1799.6,683.314 1800.16,683.314 1800.72,683.314 1801.28,683.314 1801.84,683.314 1802.4,683.314 1802.96,683.314 1803.52,683.314 1804.08,683.314 1804.63,683.314 1805.19,683.314 1805.75,683.314 1806.31,683.314 1806.87,683.314 1807.43,683.314 1807.99,683.314 1808.55,683.314 1809.11,683.314 1809.67,683.314 1810.23,683.314 1810.79,683.314 1811.35,683.314 1811.9,683.314 1812.46,683.314 1813.02,683.314 1813.58,683.314 1814.14,683.314 1814.7,683.314 1815.26,683.314 1815.82,683.314 1816.38,683.314 1816.94,683.314 1817.5,683.314 1818.06,683.314 1818.62,683.314 1819.18,683.314 1819.73,683.314 1820.29,683.314 1820.85,683.314 1821.41,683.314 1821.97,683.314 1822.53,683.314 1823.09,683.314 1823.65,683.314 1824.21,683.314 1824.77,683.314 1825.33,683.314 1825.89,683.314 1826.45,683.314 1827,683.314 1827.56,683.314 1828.12,683.314 1828.68,683.314 1829.24,683.314 1829.8,683.314 1830.36,683.314 1830.92,683.314 1831.48,683.314 1832.04,683.314 1832.6,683.314 1833.16,683.314 1833.72,683.314 1834.27,683.314 1834.83,683.314 1835.39,683.314 1835.95,683.314 1836.51,683.314 1837.07,683.314 1837.63,683.314 1838.19,683.314 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.024892377418777 ± 0.02238587106611133\nProjected Energy: -4.013721909365154 ± (0.005023873867061823, 0.005177605386976758)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.457478</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3966e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1712e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.458e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.272e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.635e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.535e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613378\n -0.7590191922770817\n  0.13584182219620722\n  0.15789998694608798\n  0.876711441178136\n  1.5305929970973366\n  1.5835732611867348\n  3.0728703303258644\n  3.125672653951832\n  4.862107221562172\n  6.260694850380599\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
