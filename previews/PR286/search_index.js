var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20894829620836164 ± 0.0012013428137857532\n   G2(1) = 0.9173334580245209 ± 0.0008496311137419719\n   G2(2) = 0.9829885752174482 ± 0.0006533248962951249\n   G2(3) = 0.9904076373076997 ± 0.0008742052585244494\n   G2(4) = 0.9829885752174482 ± 0.0006533248962951249\n   G2(5) = 0.9173334580245209 ± 0.0008496311137419719\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0284163994477185 ± 0.1216249435530622\n   Replica 2: -4.010852997983086 ± 0.12729154374998802\n   Replica 3: -4.046360825711987 ± 0.12683758307700524\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip650\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip651\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip652\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.57 2211.02,1003.57 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.324 2211.02,746.324 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.077 2211.02,489.077 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.83 2211.02,231.83 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.57 423.181,1003.57 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.324 423.181,746.324 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.077 423.181,489.077 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.83 423.181,231.83 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M290.043 1016.92 L306.363 1016.92 L306.363 1020.85 L284.418 1020.85 L284.418 1016.92 Q287.08 1014.16 291.664 1009.53 Q296.27 1004.88 297.451 1003.54 Q299.696 1001.01 300.576 999.277 Q301.478 997.518 301.478 995.828 Q301.478 993.074 299.534 991.338 Q297.613 989.602 294.511 989.602 Q292.312 989.602 289.858 990.365 Q287.427 991.129 284.65 992.68 L284.65 987.958 Q287.474 986.824 289.927 986.245 Q292.381 985.666 294.418 985.666 Q299.789 985.666 302.983 988.352 Q306.177 991.037 306.177 995.527 Q306.177 997.657 305.367 999.578 Q304.58 1001.48 302.474 1004.07 Q301.895 1004.74 298.793 1007.96 Q295.691 1011.15 290.043 1016.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M316.224 986.291 L334.58 986.291 L334.58 990.227 L320.506 990.227 L320.506 998.699 Q321.524 998.351 322.543 998.189 Q323.562 998.004 324.58 998.004 Q330.367 998.004 333.747 1001.18 Q337.126 1004.35 337.126 1009.76 Q337.126 1015.34 333.654 1018.44 Q330.182 1021.52 323.862 1021.52 Q321.687 1021.52 319.418 1021.15 Q317.173 1020.78 314.765 1020.04 L314.765 1015.34 Q316.849 1016.48 319.071 1017.03 Q321.293 1017.59 323.77 1017.59 Q327.774 1017.59 330.112 1015.48 Q332.45 1013.37 332.45 1009.76 Q332.45 1006.15 330.112 1004.05 Q327.774 1001.94 323.77 1001.94 Q321.895 1001.94 320.02 1002.36 Q318.168 1002.77 316.224 1003.65 L316.224 986.291 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M356.339 989.37 Q352.728 989.37 350.899 992.935 Q349.094 996.476 349.094 1003.61 Q349.094 1010.71 350.899 1014.28 Q352.728 1017.82 356.339 1017.82 Q359.973 1017.82 361.779 1014.28 Q363.608 1010.71 363.608 1003.61 Q363.608 996.476 361.779 992.935 Q359.973 989.37 356.339 989.37 M356.339 985.666 Q362.149 985.666 365.205 990.273 Q368.284 994.856 368.284 1003.61 Q368.284 1012.33 365.205 1016.94 Q362.149 1021.52 356.339 1021.52 Q350.529 1021.52 347.45 1016.94 Q344.395 1012.33 344.395 1003.61 Q344.395 994.856 347.45 990.273 Q350.529 985.666 356.339 985.666 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M286.062 729.044 L304.418 729.044 L304.418 732.979 L290.344 732.979 L290.344 741.452 Q291.363 741.104 292.381 740.942 Q293.4 740.757 294.418 740.757 Q300.205 740.757 303.585 743.928 Q306.964 747.1 306.964 752.516 Q306.964 758.095 303.492 761.197 Q300.02 764.276 293.701 764.276 Q291.525 764.276 289.256 763.905 Q287.011 763.535 284.603 762.794 L284.603 758.095 Q286.687 759.229 288.909 759.785 Q291.131 760.34 293.608 760.34 Q297.613 760.34 299.951 758.234 Q302.288 756.127 302.288 752.516 Q302.288 748.905 299.951 746.799 Q297.613 744.692 293.608 744.692 Q291.733 744.692 289.858 745.109 Q288.006 745.526 286.062 746.405 L286.062 729.044 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M326.177 732.123 Q322.566 732.123 320.737 735.688 Q318.932 739.229 318.932 746.359 Q318.932 753.465 320.737 757.03 Q322.566 760.572 326.177 760.572 Q329.811 760.572 331.617 757.03 Q333.446 753.465 333.446 746.359 Q333.446 739.229 331.617 735.688 Q329.811 732.123 326.177 732.123 M326.177 728.419 Q331.987 728.419 335.043 733.026 Q338.122 737.609 338.122 746.359 Q338.122 755.086 335.043 759.692 Q331.987 764.276 326.177 764.276 Q320.367 764.276 317.288 759.692 Q314.233 755.086 314.233 746.359 Q314.233 737.609 317.288 733.026 Q320.367 728.419 326.177 728.419 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M356.339 732.123 Q352.728 732.123 350.899 735.688 Q349.094 739.229 349.094 746.359 Q349.094 753.465 350.899 757.03 Q352.728 760.572 356.339 760.572 Q359.973 760.572 361.779 757.03 Q363.608 753.465 363.608 746.359 Q363.608 739.229 361.779 735.688 Q359.973 732.123 356.339 732.123 M356.339 728.419 Q362.149 728.419 365.205 733.026 Q368.284 737.609 368.284 746.359 Q368.284 755.086 365.205 759.692 Q362.149 764.276 356.339 764.276 Q350.529 764.276 347.45 759.692 Q344.395 755.086 344.395 746.359 Q344.395 737.609 347.45 733.026 Q350.529 728.419 356.339 728.419 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M284.835 471.797 L307.057 471.797 L307.057 473.788 L294.511 506.357 L289.627 506.357 L301.432 475.732 L284.835 475.732 L284.835 471.797 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M316.224 471.797 L334.58 471.797 L334.58 475.732 L320.506 475.732 L320.506 484.205 Q321.524 483.857 322.543 483.695 Q323.562 483.51 324.58 483.51 Q330.367 483.51 333.747 486.681 Q337.126 489.853 337.126 495.269 Q337.126 500.848 333.654 503.95 Q330.182 507.028 323.862 507.028 Q321.687 507.028 319.418 506.658 Q317.173 506.288 314.765 505.547 L314.765 500.848 Q316.849 501.982 319.071 502.538 Q321.293 503.093 323.77 503.093 Q327.774 503.093 330.112 500.987 Q332.45 498.88 332.45 495.269 Q332.45 491.658 330.112 489.552 Q327.774 487.445 323.77 487.445 Q321.895 487.445 320.02 487.862 Q318.168 488.279 316.224 489.158 L316.224 471.797 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M356.339 474.876 Q352.728 474.876 350.899 478.441 Q349.094 481.982 349.094 489.112 Q349.094 496.218 350.899 499.783 Q352.728 503.325 356.339 503.325 Q359.973 503.325 361.779 499.783 Q363.608 496.218 363.608 489.112 Q363.608 481.982 361.779 478.441 Q359.973 474.876 356.339 474.876 M356.339 471.172 Q362.149 471.172 365.205 475.779 Q368.284 480.362 368.284 489.112 Q368.284 497.839 365.205 502.445 Q362.149 507.028 356.339 507.028 Q350.529 507.028 347.45 502.445 Q344.395 497.839 344.395 489.112 Q344.395 480.362 347.45 475.779 Q350.529 471.172 356.339 471.172 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M256.664 245.175 L264.303 245.175 L264.303 218.809 L255.992 220.476 L255.992 216.217 L264.256 214.55 L268.932 214.55 L268.932 245.175 L276.571 245.175 L276.571 249.11 L256.664 249.11 L256.664 245.175 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M296.015 217.629 Q292.404 217.629 290.576 221.194 Q288.77 224.735 288.77 231.865 Q288.77 238.971 290.576 242.536 Q292.404 246.078 296.015 246.078 Q299.65 246.078 301.455 242.536 Q303.284 238.971 303.284 231.865 Q303.284 224.735 301.455 221.194 Q299.65 217.629 296.015 217.629 M296.015 213.925 Q301.826 213.925 304.881 218.532 Q307.96 223.115 307.96 231.865 Q307.96 240.592 304.881 245.198 Q301.826 249.781 296.015 249.781 Q290.205 249.781 287.127 245.198 Q284.071 240.592 284.071 231.865 Q284.071 223.115 287.127 218.532 Q290.205 213.925 296.015 213.925 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M326.177 217.629 Q322.566 217.629 320.737 221.194 Q318.932 224.735 318.932 231.865 Q318.932 238.971 320.737 242.536 Q322.566 246.078 326.177 246.078 Q329.811 246.078 331.617 242.536 Q333.446 238.971 333.446 231.865 Q333.446 224.735 331.617 221.194 Q329.811 217.629 326.177 217.629 M326.177 213.925 Q331.987 213.925 335.043 218.532 Q338.122 223.115 338.122 231.865 Q338.122 240.592 335.043 245.198 Q331.987 249.781 326.177 249.781 Q320.367 249.781 317.288 245.198 Q314.233 240.592 314.233 231.865 Q314.233 223.115 317.288 218.532 Q320.367 213.925 326.177 213.925 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M356.339 217.629 Q352.728 217.629 350.899 221.194 Q349.094 224.735 349.094 231.865 Q349.094 238.971 350.899 242.536 Q352.728 246.078 356.339 246.078 Q359.973 246.078 361.779 242.536 Q363.608 238.971 363.608 231.865 Q363.608 224.735 361.779 221.194 Q359.973 217.629 356.339 217.629 M356.339 213.925 Q362.149 213.925 365.205 218.532 Q368.284 223.115 368.284 231.865 Q368.284 240.592 365.205 245.198 Q362.149 249.781 356.339 249.781 Q350.529 249.781 347.45 245.198 Q344.395 240.592 344.395 231.865 Q344.395 223.115 347.45 218.532 Q350.529 213.925 356.339 213.925 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip652)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.83 4017.76,231.83 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.14 457.691,1248.92 458.259,1248.62 458.828,1248.26 459.396,1247.84 459.964,1247.29 460.533,1246.68 461.101,1246.03 461.669,1243.24 462.238,1242.45 462.806,1240.54 463.375,1239.6 463.943,1238.54 464.511,1236.38 465.08,1235.15 465.648,1233.81 466.216,1232.34 466.785,1230.75 467.353,1229.06 467.921,1226.21 468.49,1224.23 469.058,1222.15 469.626,1218.9 470.195,1215.52 470.763,1211.93 471.331,1209.29 471.9,1204.38 472.468,1199.27 473.036,1195.03 473.605,1191.71 474.173,1187.14 474.741,1183.43 475.31,1179.57 475.878,1173.48 476.446,1169.22 477.015,1163.69 477.583,1156 478.152,1151.25 478.72,1145.18 479.288,1140.05 479.857,1132.65 480.425,1127.1 480.993,1121.27 481.562,1114.14 482.13,1107.88 482.698,1100.46 483.267,1092.82 483.835,1086.02 484.403,1079 484.972,1071.66 485.54,1063.22 486.108,1052.48 486.677,1043.9 487.245,1036.19 487.813,1027.21 488.382,1019.17 488.95,1008.84 489.518,999.472 490.087,991.106 490.655,981.473 491.224,970.625 491.792,961.759 492.36,950.824 492.929,942.007 493.497,931.947 494.065,922.784 494.634,910.423 495.202,898.994 495.77,887.635 496.339,878.449 496.907,868.292 497.475,856.808 498.044,844.498 498.612,833.077 499.18,823.878 499.749,812.444 500.317,801.142 500.885,791.86 501.454,779.519 502.022,766.264 502.59,755.295 503.159,746.323 503.727,736.457 504.295,725.696 504.864,716.926 505.432,703.304 506.001,694.789 506.569,684.451 507.137,675.185 507.706,666.028 508.274,658.023 508.842,649.026 509.411,638.955 509.979,629.206 510.547,620.401 511.116,612.844 511.684,606.28 512.252,595.833 512.821,586.455 513.389,578.404 513.957,570.542 514.526,564.807 515.094,553.802 515.662,544.074 516.231,532.541 516.799,524.46 517.367,518.608 517.936,511.901 518.504,505.411 519.072,497.534 519.641,492.236 520.209,486.783 520.778,481.587 521.346,475.363 521.914,468.423 522.483,461.542 523.051,453.932 523.619,449.689 524.188,443.159 524.756,439.053 525.324,434.033 525.893,430.13 526.461,422.029 527.029,419.482 527.598,413.723 528.166,408.319 528.734,404.198 529.303,402.14 529.871,397.852 530.439,394.577 531.008,389.285 531.576,385.168 532.144,380.353 532.713,376.791 533.281,373.04 533.85,369.41 534.418,366.995 534.986,365.54 535.555,360.905 536.123,358.337 536.691,355.904 537.26,353.523 537.828,352.302 538.396,350.941 538.965,348.373 539.533,345.053 540.101,341.542 540.67,339.304 541.238,336.232 541.806,332.288 542.375,329.528 542.943,325.61 543.511,321.922 544.08,319.547 544.648,317.084 545.216,314.74 545.785,312.38 546.353,309.103 546.921,305.256 547.49,303.374 548.058,300.492 548.627,299.145 549.195,297.545 549.763,297.765 550.332,296.97 550.9,297.17 551.468,294.201 552.037,293.371 552.605,292.543 553.173,292.903 553.742,291.048 554.31,290.278 554.878,290.662 555.447,289.858 556.015,287.935 556.583,286.28 557.152,283.656 557.72,284.198 558.288,282.525 558.857,282.913 559.425,281.804 559.993,276.032 560.562,273.572 561.13,275.339 561.698,274.919 562.267,274.28 562.835,271.739 563.404,271.256 563.972,269.63 564.54,267.417 565.109,264.074 565.677,264.336 566.245,263.612 566.814,264.471 567.382,264.46 567.95,263.417 568.519,264.49 569.087,264.174 569.655,264.451 570.224,263.136 570.792,263.961 571.36,264.753 571.929,263.213 572.497,261.762 573.065,260.546 573.634,259.063 574.202,257.845 574.77,256.687 575.339,256.641 575.907,256.346 576.476,256.352 577.044,257.396 577.612,257.134 578.181,257.982 578.749,257.889 579.317,256.816 579.886,257.467 580.454,257.104 581.022,258.859 581.591,257.283 582.159,258.136 582.727,256.593 583.296,255.212 583.864,250.834 584.432,252.87 585.001,252.748 585.569,252.417 586.137,250.29 586.706,247.269 587.274,245.24 587.842,245.4 588.411,244.63 588.979,243.969 589.547,243.413 590.116,243.787 590.684,244.173 591.253,243.473 591.821,242.821 592.389,243.393 592.958,242.778 593.526,243.12 594.094,243.453 594.663,244.933 595.231,246.256 595.799,244.308 596.368,244.512 596.936,241.543 597.504,240.947 598.073,241.372 598.641,240.745 599.209,243.193 599.778,241.697 600.346,240.104 600.914,242.292 601.483,245.616 602.051,244.553 602.619,242.44 603.188,242.814 603.756,243.977 604.325,244.951 604.893,244.924 605.461,243.98 606.03,243.925 606.598,242.067 607.166,242.311 607.735,243.633 608.303,240.604 608.871,239.847 609.44,237.972 610.008,237.419 610.576,238.757 611.145,240.202 611.713,241.713 612.281,243.088 612.85,242.13 613.418,242.128 613.986,240.207 614.555,239.396 615.123,241.849 615.691,240.982 616.26,241.181 616.828,240.471 617.396,241.687 617.965,240.55 618.533,238.671 619.102,240.981 619.67,239.981 620.238,240.019 620.807,240.172 621.375,240.493 621.943,239.648 622.512,239.935 623.08,240.074 623.648,239.236 624.217,240.521 624.785,240.726 625.353,241.876 625.922,240.91 626.49,240.162 627.058,241.283 627.627,239.242 628.195,239.345 628.763,239.273 629.332,241.474 629.9,241.467 630.468,239.432 631.037,239.49 631.605,237.639 632.173,236.823 632.742,237.351 633.31,237.699 633.879,238.099 634.447,237.231 635.015,237.553 635.584,237.713 636.152,234.929 636.72,238.584 637.289,239.891 637.857,240.785 638.425,240.95 638.994,240.825 639.562,241.841 640.13,239.645 640.699,238.63 641.267,240.679 641.835,239.531 642.404,239.625 642.972,240.726 643.54,239.776 644.109,238.579 644.677,237.648 645.245,236.874 645.814,237.072 646.382,238.349 646.951,236.401 647.519,236.716 648.087,237.878 648.656,241.018 649.224,241.868 649.792,240.566 650.361,240.441 650.929,242.014 651.497,241.614 652.066,240.453 652.634,240.309 653.202,238.087 653.771,238.205 654.339,240.377 654.907,239.275 655.476,239.237 656.044,239.202 656.612,239.084 657.181,235.055 657.749,236.041 658.317,234.284 658.886,233.637 659.454,234.19 660.022,233.544 660.591,234.745 661.159,233.784 661.728,231.91 662.296,233.314 662.864,233.757 663.433,234.072 664.001,234.306 664.569,232.626 665.138,232.862 665.706,233.339 666.274,233.668 666.843,233.975 667.411,236.32 667.979,235.263 668.548,234.425 669.116,234.573 669.684,235.986 670.253,237.141 670.821,237.204 671.389,236.011 671.958,237.148 672.526,235.962 673.094,236.164 673.663,236.387 674.231,235.533 674.799,233.673 675.368,233.688 675.936,237.303 676.505,236.483 677.073,236.691 677.641,235.676 678.21,237.597 678.778,237.557 679.346,237.68 679.915,237.646 680.483,236.568 681.051,236.677 681.62,235.779 682.188,234.759 682.756,236.026 683.325,235.122 683.893,234.048 684.461,235.416 685.03,234.486 685.598,235.879 686.166,236.782 686.735,237.684 687.303,236.681 687.871,234.495 688.44,232.715 689.008,234.97 689.577,239.194 690.145,238.059 690.713,235.829 691.282,236.903 691.85,239.108 692.418,237.995 692.987,238.727 693.555,238.588 694.123,238.396 694.692,235.141 695.26,234.157 695.828,234.396 696.397,232.584 696.965,232.693 697.533,231.783 698.102,232.129 698.67,231.199 699.238,230.426 699.807,230.844 700.375,233.275 700.943,231.524 701.512,233.816 702.08,232.885 702.648,234.145 703.217,232.314 703.785,231.625 704.354,234.226 704.922,233.372 705.49,234.46 706.059,236.834 706.627,238.955 707.195,238.828 707.764,238.564 708.332,239.51 708.9,238.345 709.469,235.993 710.037,235.907 710.605,237.059 711.174,236.893 711.742,235.879 712.31,235.705 712.879,235.51 713.447,236.327 714.015,235.177 714.584,236.216 715.152,237.248 715.72,238.009 716.289,238.98 716.857,238.775 717.425,240.517 717.994,239.011 718.562,238.837 719.131,239.341 719.699,238.649 720.267,238.113 720.836,238.872 721.404,239.519 721.972,238.048 722.541,238.836 723.109,238.572 723.677,239.403 724.246,239.907 724.814,241.219 725.382,238.611 725.951,237.396 726.519,237.205 727.087,236.975 727.656,235.731 728.224,235.713 728.792,238.441 729.361,238.044 729.929,237.858 730.497,239.517 731.066,237.863 731.634,237.615 732.203,237.237 732.771,233.884 733.339,231.789 733.908,230.715 734.476,231.849 735.044,232.148 735.613,232 736.181,232.198 736.749,233.263 737.318,231.14 737.886,234.438 738.454,233.169 739.023,231.997 739.591,229.958 740.159,232.201 740.728,234.391 741.296,234.235 741.864,235.251 742.433,235.036 743.001,234.874 743.569,236.365 744.138,234.029 744.706,234.781 745.274,236.523 745.843,236.15 746.411,232.887 746.98,231.756 747.548,232.782 748.116,230.731 748.685,228.856 749.253,229.095 749.821,228.287 750.39,227.676 750.958,227.869 751.526,228.264 752.095,227.686 752.663,227.785 753.231,228.182 753.8,225.475 754.368,226.889 754.936,227.215 755.505,227.599 756.073,227.015 756.641,230.427 757.21,229.509 757.778,228.701 758.346,228.167 758.915,229.492 759.483,229.696 760.052,228.908 760.62,226.295 761.188,226.761 761.757,230.687 762.325,230.697 762.893,228.911 763.462,230.446 764.03,230.684 764.598,232.038 765.167,229.125 765.735,228.505 766.303,228.91 766.872,229.141 767.44,229.482 768.008,229.109 768.577,231.482 769.145,231.611 769.713,231.832 770.282,233.981 770.85,236.042 771.418,235.755 771.987,237.763 772.555,237.554 773.123,237.147 773.692,235.864 774.26,235.697 774.829,235.718 775.397,233.519 775.965,231.731 776.534,231.874 777.102,231.075 777.67,230.239 778.239,229.541 778.807,229.864 779.375,231.135 779.944,230.455 780.512,231.668 781.08,231.759 781.649,230.956 782.217,231.175 782.785,231.157 783.354,231.385 783.922,232.543 784.49,231.387 785.059,230.521 785.627,231.82 786.195,231.968 786.764,232.228 787.332,232.308 787.9,230.424 788.469,229.585 789.037,230.941 789.606,229.106 790.174,229.353 790.742,228.805 791.311,229.362 791.879,229.617 792.447,228.821 793.016,230.619 793.584,230.072 794.152,230.595 794.721,231.931 795.289,230.97 795.857,231.336 796.426,233.522 796.994,233.817 797.562,235.111 798.131,234.118 798.699,236.376 799.267,234.219 799.836,234.237 800.404,234.298 800.972,234.67 801.541,233.701 802.109,232.811 802.678,233.838 803.246,234.062 803.814,233.146 804.383,234.472 804.951,233.519 805.519,231.581 806.088,233.924 806.656,234.179 807.224,233.267 807.793,233.274 808.361,233.104 808.929,235.295 809.498,234.31 810.066,230.189 810.634,230.393 811.203,231.755 811.771,232.956 812.339,236.05 812.908,238.139 813.476,240.97 814.044,241.455 814.613,240.953 815.181,239.364 815.749,237.851 816.318,236.536 816.886,238.367 817.455,237.088 818.023,237.705 818.591,236.268 819.16,235.003 819.728,233.743 820.296,233.767 820.865,233.844 821.433,234.581 822.001,234.499 822.57,234.447 823.138,232.145 823.706,232.43 824.275,233.517 824.843,231.393 825.411,231.605 825.98,235.783 826.548,234.537 827.116,233.582 827.685,231.521 828.253,229.406 828.821,230.832 829.39,230.984 829.958,232.154 830.526,233.286 831.095,232.26 831.663,233.419 832.232,232.477 832.8,231.446 833.368,230.421 833.937,228.448 834.505,229.761 835.073,229.026 835.642,228.419 836.21,228.75 836.778,227.008 837.347,226.346 837.915,226.75 838.483,227.436 839.052,227.948 839.62,229.364 840.188,229.766 840.757,227.959 841.325,228.37 841.893,229.865 842.462,232.29 843.03,232.602 843.598,232.812 844.167,234.011 844.735,235.238 845.304,233.012 845.872,235.095 846.44,231.746 847.009,229.906 847.577,230.274 848.145,229.416 848.714,230.585 849.282,231.893 849.85,230.077 850.419,229.218 850.987,230.778 851.555,231.048 852.124,230.122 852.692,231.353 853.26,231.401 853.829,231.384 854.397,231.553 854.965,231.688 855.534,231.218 856.102,230.146 856.67,231.279 857.239,231.599 857.807,231.833 858.375,234.139 858.944,233.156 859.512,235.254 860.081,235.303 860.649,235.288 861.217,235.208 861.786,236.308 862.354,237.053 862.922,239.079 863.491,237.65 864.059,236.529 864.627,234.151 865.196,232.81 865.764,232.814 866.332,230.645 866.901,229.822 867.469,229.116 868.037,229.532 868.606,226.596 869.174,229.092 869.742,227.096 870.311,226.61 870.879,228.992 871.447,228.198 872.016,228.599 872.584,230.204 873.152,232.58 873.721,233.634 874.289,232.78 874.858,230.809 875.426,231.898 875.994,230.986 876.563,231.504 877.131,231.942 877.699,235.18 878.268,236.058 878.836,236.993 879.404,236.843 879.973,236.669 880.541,238.486 881.109,239.163 881.678,238.805 882.246,238.255 882.814,237.991 883.383,239.782 883.951,239.166 884.519,239.759 885.088,238.229 885.656,237.92 886.224,235.523 886.793,237.259 887.361,237.968 887.93,236.798 888.498,236.575 889.066,236.464 889.635,236.182 890.203,235.922 890.771,235.662 891.34,234.465 891.908,235.435 892.476,233.978 893.045,232.976 893.613,232.984 894.181,232.961 894.75,233.815 895.318,236.841 895.886,236.649 896.455,238.458 897.023,238.114 897.591,236.571 898.16,235.45 898.728,234.052 899.296,234.989 899.865,235.661 900.433,237.112 901.001,238.708 901.57,239.165 902.138,238.558 902.707,237.939 903.275,237.442 903.843,237.132 904.412,235.489 904.98,232.87 905.548,231.649 906.117,232.448 906.685,232.445 907.253,231.462 907.822,231.705 908.39,232.449 908.958,231.116 909.527,230.891 910.095,229.943 910.663,229.08 911.232,228.101 911.8,228.353 912.368,227.518 912.937,228.793 913.505,231.104 914.073,229.155 914.642,229.362 915.21,230.579 915.779,229.607 916.347,228.563 916.915,227.778 917.484,226.714 918.052,229.181 918.62,226.424 919.189,227.796 919.757,227.001 920.325,226.372 920.894,226.841 921.462,227.348 922.03,226.718 922.599,228.109 923.167,229.439 923.735,231.652 924.304,231.96 924.872,232.911 925.44,233.084 926.009,232.004 926.577,231.924 927.145,229.877 927.714,231.008 928.282,230.045 928.85,229.257 929.419,229.227 929.987,229.589 930.556,228.774 931.124,230.066 931.692,229.131 932.261,230.541 932.829,229.754 933.397,229.874 933.966,231.331 934.534,231.41 935.102,231.421 935.671,230.525 936.239,231.663 936.807,230.79 937.376,230.766 937.944,232.109 938.512,230.253 939.081,229.302 939.649,232.9 940.217,232.112 940.786,233.032 941.354,235.12 941.922,233.006 942.491,233.987 943.059,236.1 943.627,234.677 944.196,234.746 944.764,233.798 945.333,233.805 945.901,233.609 946.469,235.341 947.038,235.006 947.606,234.884 948.174,232.726 948.743,233.854 949.311,231.719 949.879,232.669 950.448,233.823 951.016,235.628 951.584,236.549 952.153,235.328 952.721,235.036 953.289,235.736 953.858,235.623 954.426,235.534 954.994,235.121 955.563,236.022 956.131,236.902 956.699,235.611 957.268,236.384 957.836,236.021 958.405,231.311 958.973,233.453 959.541,232.129 960.11,231.048 960.678,230.042 961.246,230.066 961.815,227.207 962.383,225.716 962.951,227.433 963.52,226.501 964.088,226.878 964.656,228.312 965.225,231.677 965.793,232.803 966.361,233.461 966.93,233.153 967.498,234.053 968.066,233.984 968.635,235.991 969.203,235.788 969.771,235.483 970.34,238.202 970.908,238.758 971.476,238.251 972.045,235.751 972.613,233.266 973.182,234.151 973.75,235 974.318,232.637 974.887,232.575 975.455,231.429 976.023,231.482 976.592,230.495 977.16,231.45 977.728,231.346 978.297,231.201 978.865,229.09 979.433,229.095 980.002,233.394 980.57,230.15 981.138,229.147 981.707,228.33 982.275,228.706 982.843,229.906 983.412,231.128 983.98,232.137 984.548,233.126 985.117,231.816 985.685,234.761 986.253,238.669 986.822,240.324 987.39,241.799 987.959,239.995 988.527,239.175 989.095,238.491 989.664,240.1 990.232,239.42 990.8,237.845 991.369,235.239 991.937,234.713 992.505,233.181 993.074,231.997 993.642,232.088 994.21,233.171 994.779,233.931 995.347,234.81 995.915,234.461 996.484,233.12 997.052,230.973 997.62,229.84 998.189,228.685 998.757,227.815 999.325,226.18 999.894,226.542 1000.46,228.04 1001.03,229.167 1001.6,229.252 1002.17,230.169 1002.74,231.055 1003.3,232.257 1003.87,231.123 1004.44,230.174 1005.01,230.149 1005.58,231.969 1006.15,229.99 1006.71,229.177 1007.28,230.247 1007.85,232.315 1008.42,232.401 1008.99,233.294 1009.56,232.06 1010.12,232.922 1010.69,230.977 1011.26,230.842 1011.83,230.856 1012.4,232.065 1012.97,231.892 1013.53,231.867 1014.1,231.68 1014.67,230.807 1015.24,231.133 1015.81,231.286 1016.38,232.411 1016.94,233.248 1017.51,234.119 1018.08,234.843 1018.65,233.597 1019.22,234.379 1019.79,235.102 1020.35,230.513 1020.92,229.307 1021.49,229.497 1022.06,230.574 1022.63,231.564 1023.2,230.586 1023.76,230.337 1024.33,230.525 1024.9,228.608 1025.47,228.818 1026.04,227.956 1026.61,227.366 1027.17,227.829 1027.74,230.349 1028.31,230.548 1028.88,232.711 1029.45,232.58 1030.02,233.716 1030.58,233.627 1031.15,232.533 1031.72,232.466 1032.29,233.456 1032.86,230.33 1033.43,229.205 1033.99,228.262 1034.56,228.395 1035.13,225.639 1035.7,226.189 1036.27,227.442 1036.84,226.668 1037.4,229.019 1037.97,227.346 1038.54,229.458 1039.11,231.655 1039.68,231.777 1040.25,228.72 1040.81,229.011 1041.38,230.205 1041.95,230.084 1042.52,230.137 1043.09,230.09 1043.66,228.484 1044.22,228.716 1044.79,229.183 1045.36,228.199 1045.93,227.56 1046.5,226.76 1047.07,227.258 1047.63,228.798 1048.2,230.111 1048.77,233.33 1049.34,232.104 1049.91,231.931 1050.48,229.828 1051.05,232.146 1051.61,233.143 1052.18,234.033 1052.75,233.077 1053.32,234.119 1053.89,235.878 1054.46,233.545 1055.02,233.518 1055.59,232.224 1056.16,230.333 1056.73,228.429 1057.3,228.83 1057.87,230.296 1058.43,231.548 1059,231.738 1059.57,231.727 1060.14,233.041 1060.71,233.125 1061.28,232.288 1061.84,233.592 1062.41,234.651 1062.98,235.568 1063.55,236.433 1064.12,235.208 1064.69,234.844 1065.25,235.98 1065.82,235.65 1066.39,235.345 1066.96,233.998 1067.53,234.923 1068.1,233.871 1068.66,233.816 1069.23,233.847 1069.8,233.883 1070.37,232.626 1070.94,232.456 1071.51,233.39 1072.07,233.233 1072.64,234.072 1073.21,233.692 1073.78,232.532 1074.35,232.378 1074.92,231.462 1075.48,231.455 1076.05,234.71 1076.62,232.576 1077.19,232.485 1077.76,232.432 1078.33,231.28 1078.89,230.409 1079.46,228.359 1080.03,226.604 1080.6,224.988 1081.17,225.587 1081.74,224.044 1082.3,224.95 1082.87,224.596 1083.44,225.361 1084.01,225.787 1084.58,225.426 1085.15,224.945 1085.71,228.562 1086.28,226.874 1086.85,226.401 1087.42,225.999 1087.99,226.474 1088.56,227.931 1089.12,227.342 1089.69,229.952 1090.26,231.279 1090.83,233.5 1091.4,235.622 1091.97,235.631 1092.53,235.529 1093.1,234.515 1093.67,236.422 1094.24,235.88 1094.81,236.976 1095.38,236.723 1095.94,234.676 1096.51,235.464 1097.08,235.456 1097.65,232.188 1098.22,232.224 1098.79,233.213 1099.35,232.105 1099.92,232.158 1100.49,230.949 1101.06,231.113 1101.63,229.3 1102.2,229.372 1102.76,230.53 1103.33,231.738 1103.9,230.925 1104.47,231.093 1105.04,231.145 1105.61,234.168 1106.17,234.949 1106.74,233.881 1107.31,234.872 1107.88,234.763 1108.45,235.738 1109.02,233.591 1109.58,231.553 1110.15,231.582 1110.72,231.757 1111.29,230.741 1111.86,230.874 1112.43,232.962 1112.99,233.927 1113.56,234.939 1114.13,236.685 1114.7,237.408 1115.27,239.055 1115.84,238.602 1116.4,239.28 1116.97,238.789 1117.54,238.448 1118.11,240.943 1118.68,239.325 1119.25,236.512 1119.81,236.229 1120.38,235.015 1120.95,234.771 1121.52,234.38 1122.09,235.277 1122.66,235.933 1123.23,234.303 1123.79,234.19 1124.36,234.889 1124.93,237.767 1125.5,237.442 1126.07,236.857 1126.64,236.534 1127.2,238.986 1127.77,238.282 1128.34,237.684 1128.91,236.542 1129.48,234.988 1130.05,234.372 1130.61,232.102 1131.18,233.117 1131.75,230.944 1132.32,231.853 1132.89,232.466 1133.46,232.226 1134.02,230.233 1134.59,229.16 1135.16,227.196 1135.73,226.354 1136.3,229.465 1136.87,228.719 1137.43,228.723 1138,229.813 1138.57,227.804 1139.14,229.082 1139.71,230.431 1140.28,230.341 1140.84,229.482 1141.41,228.612 1141.98,227.494 1142.55,229.684 1143.12,228.495 1143.69,228.659 1144.25,227.874 1144.82,227.06 1145.39,227.302 1145.96,226.801 1146.53,228.028 1147.1,228.217 1147.66,227.444 1148.23,227.652 1148.8,228.966 1149.37,229.333 1149.94,227.471 1150.51,227.945 1151.07,228.378 1151.64,228.557 1152.21,226.601 1152.78,226.077 1153.35,227.507 1153.92,224.69 1154.48,224.194 1155.05,222.787 1155.62,223.548 1156.19,225.486 1156.76,227.126 1157.33,228.648 1157.89,228.808 1158.46,229.076 1159.03,227.186 1159.6,228.581 1160.17,228.778 1160.74,230.922 1161.3,232.171 1161.87,233.186 1162.44,234.283 1163.01,234.107 1163.58,231.913 1164.15,229.96 1164.71,229.934 1165.28,230.342 1165.85,230.837 1166.42,230.993 1166.99,233.148 1167.56,235.95 1168.12,236.803 1168.69,235.564 1169.26,234.505 1169.83,232.352 1170.4,235.447 1170.97,234.036 1171.53,235.13 1172.1,236.113 1172.67,231.732 1173.24,231.696 1173.81,232.639 1174.38,232.67 1174.94,234.693 1175.51,235.533 1176.08,236.596 1176.65,233.119 1177.22,235.117 1177.79,235.846 1178.35,235.425 1178.92,235.185 1179.49,236.981 1180.06,236.639 1180.63,235.368 1181.2,237.422 1181.76,238.493 1182.33,240.119 1182.9,237.569 1183.47,236.972 1184.04,238.413 1184.61,238.798 1185.17,237.261 1185.74,235.848 1186.31,234.349 1186.88,232.969 1187.45,232.801 1188.02,232.536 1188.58,232.484 1189.15,231.354 1189.72,232.296 1190.29,230.359 1190.86,229.431 1191.43,229.773 1192,231.828 1192.56,232.829 1193.13,232.669 1193.7,232.609 1194.27,231.725 1194.84,235.807 1195.41,236.506 1195.97,235.159 1196.54,233.656 1197.11,233.732 1197.68,231.38 1198.25,232.469 1198.82,232.505 1199.38,232.43 1199.95,230.326 1200.52,227.463 1201.09,228.794 1201.66,229.186 1202.23,228.152 1202.79,228.418 1203.36,225.703 1203.93,226.237 1204.5,222.448 1205.07,222.221 1205.64,225.307 1206.2,228.966 1206.77,231.269 1207.34,232.441 1207.91,232.435 1208.48,232.498 1209.05,231.443 1209.61,231.72 1210.18,230.642 1210.75,230.907 1211.32,231.228 1211.89,232.387 1212.46,230.178 1213.02,230.441 1213.59,233.636 1214.16,234.395 1214.73,234.325 1215.3,232.999 1215.87,233.757 1216.43,233.778 1217,233.611 1217.57,232.432 1218.14,233.45 1218.71,235.365 1219.28,236.073 1219.84,237.798 1220.41,236.47 1220.98,237.087 1221.55,235.89 1222.12,235.706 1222.69,234.13 1223.25,232.767 1223.82,229.749 1224.39,230.816 1224.96,230.934 1225.53,229.009 1226.1,227.172 1226.66,227.385 1227.23,226.568 1227.8,226.819 1228.37,227.129 1228.94,228.56 1229.51,230.814 1230.07,230.073 1230.64,230.344 1231.21,230.573 1231.78,232.757 1232.35,232.574 1232.92,234.564 1233.48,232.24 1234.05,231.21 1234.62,229.053 1235.19,231.209 1235.76,234.178 1236.33,235.158 1236.89,236.916 1237.46,237.555 1238.03,236.304 1238.6,235.862 1239.17,235.747 1239.74,235.588 1240.3,235.425 1240.87,235.094 1241.44,234.758 1242.01,234.467 1242.58,236.288 1243.15,235.871 1243.71,236.357 1244.28,236.024 1244.85,236.735 1245.42,236.128 1245.99,233.808 1246.56,232.779 1247.12,231.493 1247.69,234.308 1248.26,233.13 1248.83,233.859 1249.4,233.53 1249.97,232.426 1250.53,231.11 1251.1,230.976 1251.67,228.854 1252.24,229.117 1252.81,229.204 1253.38,231.313 1253.94,231.4 1254.51,231.23 1255.08,232.011 1255.65,232.846 1256.22,231.686 1256.79,231.716 1257.35,232.801 1257.92,232.393 1258.49,232.127 1259.06,231.9 1259.63,233.809 1260.2,234.526 1260.76,234.088 1261.33,231.818 1261.9,231.85 1262.47,231.628 1263.04,231.641 1263.61,231.494 1264.18,229.326 1264.74,228.416 1265.31,226.696 1265.88,227.861 1266.45,228.116 1267.02,228.188 1267.59,228.18 1268.15,228.265 1268.72,229.473 1269.29,228.332 1269.86,227.478 1270.43,228.829 1271,227.042 1271.56,228.242 1272.13,227.403 1272.7,226.809 1273.27,228.001 1273.84,224.245 1274.41,223.724 1274.97,220.128 1275.54,221.093 1276.11,219.895 1276.68,222.915 1277.25,223.389 1277.82,228.04 1278.38,228.352 1278.95,226.417 1279.52,225.861 1280.09,227.263 1280.66,227.602 1281.23,228.629 1281.79,229.101 1282.36,230.278 1282.93,230.267 1283.5,229.594 1284.07,229.946 1284.64,229.238 1285.2,232.688 1285.77,235.8 1286.34,236.616 1286.91,237.407 1287.48,236.238 1288.05,240.112 1288.61,239.708 1289.18,240.094 1289.75,240.572 1290.32,239.128 1290.89,238.544 1291.46,241.193 1292.02,241.487 1292.59,240.647 1293.16,239.302 1293.73,237.644 1294.3,235.081 1294.87,235.868 1295.43,233.457 1296,233.325 1296.57,234.377 1297.14,232.965 1297.71,233.009 1298.28,229.885 1298.84,230.028 1299.41,229.2 1299.98,231.346 1300.55,232.512 1301.12,231.525 1301.69,230.684 1302.25,229.825 1302.82,230.986 1303.39,233.203 1303.96,234.165 1304.53,234.023 1305.1,235.194 1305.66,239.226 1306.23,237.691 1306.8,237.051 1307.37,235.807 1307.94,234.127 1308.51,233.84 1309.07,233.707 1309.64,234.566 1310.21,232.195 1310.78,233.351 1311.35,230.92 1311.92,229.849 1312.48,228.955 1313.05,227.888 1313.62,228.055 1314.19,227.37 1314.76,226.828 1315.33,226.075 1315.89,227.599 1316.46,228.94 1317.03,230.133 1317.6,229.095 1318.17,229.245 1318.74,230.46 1319.3,230.575 1319.87,231.807 1320.44,231.521 1321.01,233.46 1321.58,234.311 1322.15,233.236 1322.71,234.286 1323.28,232.995 1323.85,232.874 1324.42,231.727 1324.99,230.774 1325.56,231.898 1326.12,230.996 1326.69,229.93 1327.26,231.254 1327.83,232.289 1328.4,232.324 1328.97,232.297 1329.53,235.41 1330.1,234.285 1330.67,231.94 1331.24,231.897 1331.81,231.896 1332.38,231.9 1332.94,230.957 1333.51,230.943 1334.08,229.992 1334.65,230.183 1335.22,231.188 1335.79,231.168 1336.36,232.346 1336.92,234.438 1337.49,234.454 1338.06,232.253 1338.63,235.265 1339.2,234.064 1339.77,232.754 1340.33,233.745 1340.9,232.455 1341.47,232.561 1342.04,232.67 1342.61,233.633 1343.18,231.38 1343.74,231.227 1344.31,230.286 1344.88,230.195 1345.45,231.453 1346.02,232.335 1346.59,230.141 1347.15,230.222 1347.72,230.147 1348.29,230.093 1348.86,230.224 1349.43,229.168 1350,230.23 1350.56,231.527 1351.13,231.572 1351.7,232.305 1352.27,232.417 1352.84,231.433 1353.41,230.461 1353.97,230.442 1354.54,231.531 1355.11,231.65 1355.68,232.663 1356.25,233.64 1356.82,230.426 1357.38,230.814 1357.95,229.971 1358.52,230.11 1359.09,231.556 1359.66,230.7 1360.23,231.031 1360.79,232.27 1361.36,231.039 1361.93,231.216 1362.5,232.131 1363.07,232.303 1363.64,233.126 1364.2,233.064 1364.77,233.023 1365.34,234.047 1365.91,232.799 1366.48,232.697 1367.05,232.707 1367.61,231.503 1368.18,233.507 1368.75,233.421 1369.32,231.115 1369.89,231.009 1370.46,232.089 1371.02,227.994 1371.59,228.427 1372.16,228.42 1372.73,225.602 1373.3,228.909 1373.87,230.239 1374.43,230.537 1375,229.433 1375.57,230.354 1376.14,229.632 1376.71,230.783 1377.28,231.99 1377.84,231.9 1378.41,232.865 1378.98,235.912 1379.55,237.63 1380.12,237.294 1380.69,234.643 1381.25,233.364 1381.82,231.216 1382.39,231.44 1382.96,229.609 1383.53,229.641 1384.1,229.742 1384.66,230.816 1385.23,231.84 1385.8,231.736 1386.37,230.72 1386.94,232.864 1387.51,233.899 1388.07,233.596 1388.64,232.374 1389.21,232.418 1389.78,230.413 1390.35,230.424 1390.92,229.47 1391.48,231.78 1392.05,232.803 1392.62,232.785 1393.19,233.687 1393.76,233.62 1394.33,233.512 1394.89,233.037 1395.46,229.846 1396.03,230.998 1396.6,230.994 1397.17,231.064 1397.74,230.025 1398.3,231.26 1398.87,232.295 1399.44,231.246 1400.01,231.492 1400.58,231.655 1401.15,231.652 1401.71,231.534 1402.28,229.428 1402.85,232.667 1403.42,232.535 1403.99,232.503 1404.56,235.503 1405.13,235.238 1405.69,231.945 1406.26,233.101 1406.83,232.998 1407.4,232.76 1407.97,230.682 1408.54,231.884 1409.1,232.906 1409.67,234.92 1410.24,233.669 1410.81,230.34 1411.38,230.589 1411.95,228.609 1412.51,228.753 1413.08,226.036 1413.65,226.336 1414.22,224.51 1414.79,223.951 1415.36,225.482 1415.92,228.14 1416.49,229.531 1417.06,230.463 1417.63,229.635 1418.2,230.864 1418.77,230.778 1419.33,232.883 1419.9,232.926 1420.47,236.186 1421.04,235.985 1421.61,233.608 1422.18,235.581 1422.74,234.246 1423.31,231.104 1423.88,230.125 1424.45,229.142 1425.02,230.596 1425.59,231.867 1426.15,230.684 1426.72,234.095 1427.29,230.801 1427.86,228.893 1428.43,229.952 1429,227.949 1429.56,226.957 1430.13,226.282 1430.7,227.899 1431.27,227.182 1431.84,227.352 1432.41,226.58 1432.97,226.873 1433.54,227.278 1434.11,228.644 1434.68,228.015 1435.25,229.426 1435.82,229.701 1436.38,229.728 1436.95,232.138 1437.52,233.127 1438.09,234.238 1438.66,236.142 1439.23,235.654 1439.79,236.596 1440.36,235.222 1440.93,232.944 1441.5,231.952 1442.07,233.903 1442.64,234.989 1443.2,234.813 1443.77,233.778 1444.34,233.619 1444.91,234.772 1445.48,235.691 1446.05,235.98 1446.61,236.793 1447.18,234.421 1447.75,235.246 1448.32,235.087 1448.89,233.912 1449.46,233.643 1450.02,236.666 1450.59,239.415 1451.16,235.788 1451.73,237.789 1452.3,235.434 1452.87,235.05 1453.43,232.801 1454,232.824 1454.57,232.977 1455.14,234.886 1455.71,234.622 1456.28,235.56 1456.84,236.118 1457.41,237.761 1457.98,238.382 1458.55,238.848 1459.12,240.367 1459.69,237.731 1460.25,237.01 1460.82,236.718 1461.39,235.422 1461.96,236.211 1462.53,233.91 1463.1,233.805 1463.66,236.681 1464.23,235.086 1464.8,231.709 1465.37,230.828 1465.94,231.832 1466.51,230.741 1467.07,229.845 1467.64,228.779 1468.21,228.998 1468.78,231.194 1469.35,229.087 1469.92,227.214 1470.48,225.477 1471.05,226.86 1471.62,227.116 1472.19,226.24 1472.76,226.583 1473.33,227.054 1473.89,225.294 1474.46,223.647 1475.03,225.237 1475.6,225.766 1476.17,226.942 1476.74,227.149 1477.31,227.71 1477.87,227.903 1478.44,230.309 1479.01,231.439 1479.58,231.375 1480.15,231.414 1480.72,230.54 1481.28,232.722 1481.85,231.544 1482.42,230.44 1482.99,230.614 1483.56,232.006 1484.13,233.229 1484.69,234.125 1485.26,233.841 1485.83,234.659 1486.4,234.732 1486.97,234.565 1487.54,234.223 1488.1,234.125 1488.67,236.057 1489.24,234.71 1489.81,237.418 1490.38,233.067 1490.95,232.775 1491.51,229.658 1492.08,229.715 1492.65,231.678 1493.22,230.776 1493.79,230.949 1494.36,230.029 1494.92,229.132 1495.49,229.299 1496.06,228.38 1496.63,228.623 1497.2,229.834 1497.77,227.919 1498.33,228.448 1498.9,224.463 1499.47,224.749 1500.04,227.109 1500.61,228.5 1501.18,227.644 1501.74,226.892 1502.31,226.116 1502.88,227.711 1503.45,228.061 1504.02,228.241 1504.59,228.43 1505.15,227.786 1505.72,227.987 1506.29,227.336 1506.86,227.791 1507.43,229.229 1508,230.367 1508.56,230.678 1509.13,231.077 1509.7,232.408 1510.27,231.49 1510.84,231.453 1511.41,231.546 1511.97,232.578 1512.54,233.768 1513.11,235.783 1513.68,237.599 1514.25,237.385 1514.82,234.002 1515.38,232.868 1515.95,234.984 1516.52,233.786 1517.09,234.639 1517.66,236.478 1518.23,234.478 1518.79,234.321 1519.36,234.368 1519.93,234.115 1520.5,233.153 1521.07,233.094 1521.64,233.134 1522.2,231.979 1522.77,234.024 1523.34,232.954 1523.91,232.998 1524.48,233.133 1525.05,232.862 1525.61,231.744 1526.18,231.743 1526.75,231.027 1527.32,230.022 1527.89,229.151 1528.46,229.265 1529.02,230.485 1529.59,229.631 1530.16,232.961 1530.73,230.873 1531.3,230.985 1531.87,232.028 1532.43,231.942 1533,231.037 1533.57,230.015 1534.14,229.13 1534.71,230.054 1535.28,230.174 1535.84,229.196 1536.41,229.468 1536.98,229.53 1537.55,230.768 1538.12,230.243 1538.69,228.454 1539.25,227.847 1539.82,229.224 1540.39,227.421 1540.96,231.712 1541.53,230.832 1542.1,230.958 1542.66,231.146 1543.23,232.168 1543.8,232.116 1544.37,230.018 1544.94,229.348 1545.51,228.648 1546.08,227.822 1546.64,230.171 1547.21,232.436 1547.78,233.416 1548.35,233.625 1548.92,234.627 1549.49,233.349 1550.05,235.235 1550.62,235.26 1551.19,237.049 1551.76,238.839 1552.33,237.391 1552.9,236.09 1553.46,233.807 1554.03,233.705 1554.6,235.592 1555.17,235.404 1555.74,233.395 1556.31,233.277 1556.87,234.936 1557.44,233.725 1558.01,232.462 1558.58,231.374 1559.15,233.588 1559.72,234.674 1560.28,236.746 1560.85,235.294 1561.42,233.139 1561.99,234.192 1562.56,234.037 1563.13,235.963 1563.69,237.863 1564.26,239.616 1564.83,238.157 1565.4,237.638 1565.97,238.318 1566.54,235.935 1567.1,234.385 1567.67,234.124 1568.24,232.873 1568.81,231.754 1569.38,231.863 1569.95,230.79 1570.51,230.764 1571.08,230.434 1571.65,229.614 1572.22,226.479 1572.79,226.898 1573.36,226.132 1573.92,227.545 1574.49,226.742 1575.06,228.104 1575.63,229.392 1576.2,228.492 1576.77,229.909 1577.33,230.162 1577.9,229.279 1578.47,229.345 1579.04,230.599 1579.61,231.796 1580.18,230.899 1580.74,230.173 1581.31,229.273 1581.88,233.605 1582.45,234.513 1583.02,235.477 1583.59,236.052 1584.15,234.652 1584.72,237.483 1585.29,236.226 1585.86,237.953 1586.43,237.518 1587,239.587 1587.56,238.193 1588.13,238.518 1588.7,237.987 1589.27,236.66 1589.84,234.158 1590.41,232.975 1590.97,233.817 1591.54,234.677 1592.11,236.621 1592.68,236.109 1593.25,236.635 1593.82,235.211 1594.38,235.747 1594.95,235.427 1595.52,235.094 1596.09,234.595 1596.66,237.202 1597.23,237.795 1597.79,240.273 1598.36,236.625 1598.93,234.121 1599.5,233.786 1600.07,234.47 1600.64,233.921 1601.2,229.54 1601.77,230.648 1602.34,230.605 1602.91,230.641 1603.48,231.543 1604.05,231.538 1604.61,232.664 1605.18,232.555 1605.75,232.488 1606.32,233.175 1606.89,232.842 1607.46,230.665 1608.02,230.508 1608.59,230.419 1609.16,232.588 1609.73,229.319 1610.3,229.262 1610.87,226.105 1611.43,225.41 1612,224.696 1612.57,226.313 1613.14,227.557 1613.71,225.636 1614.28,227.037 1614.84,225.363 1615.41,224.816 1615.98,226.402 1616.55,226.926 1617.12,228.265 1617.69,228.371 1618.26,231.64 1618.82,231.638 1619.39,231.7 1619.96,229.96 1620.53,229.97 1621.1,229.953 1621.67,227.033 1622.23,227.347 1622.8,229.752 1623.37,233.209 1623.94,235.1 1624.51,234.838 1625.08,234.685 1625.64,233.629 1626.21,231.451 1626.78,233.404 1627.35,232.01 1627.92,235.055 1628.49,235.806 1629.05,235.466 1629.62,234.139 1630.19,234.882 1630.76,233.728 1631.33,235.647 1631.9,235.053 1632.46,234.493 1633.03,234.356 1633.6,233.148 1634.17,234.089 1634.74,231.751 1635.31,231.699 1635.87,231.657 1636.44,230.629 1637.01,231.894 1637.58,231.946 1638.15,230.641 1638.72,230.33 1639.28,230.542 1639.85,230.576 1640.42,231.634 1640.99,232.497 1641.56,232.271 1642.13,232.127 1642.69,232.971 1643.26,232.644 1643.83,231.441 1644.4,230.248 1644.97,231.439 1645.54,230.186 1646.1,230.382 1646.67,230.555 1647.24,230.652 1647.81,231.699 1648.38,231.702 1648.95,231.734 1649.51,230.629 1650.08,231.754 1650.65,229.665 1651.22,228.821 1651.79,230.836 1652.36,230.987 1652.92,229.06 1653.49,230.111 1654.06,229.29 1654.63,229.517 1655.2,229.581 1655.77,229.733 1656.33,226.839 1656.9,226.136 1657.47,226.553 1658.04,225.907 1658.61,225.211 1659.18,225.643 1659.74,225.145 1660.31,225.772 1660.88,227.253 1661.45,226.441 1662.02,225.829 1662.59,226.114 1663.15,226.558 1663.72,223.983 1664.29,225.834 1664.86,226.348 1665.43,226.835 1666,228.145 1666.56,230.566 1667.13,232.906 1667.7,232.069 1668.27,234.251 1668.84,235.174 1669.41,233.088 1669.97,234.211 1670.54,232.227 1671.11,232.301 1671.68,229.36 1672.25,228.673 1672.82,229.762 1673.38,230.888 1673.95,231.1 1674.52,230.284 1675.09,230.523 1675.66,234.072 1676.23,232.883 1676.79,234.974 1677.36,233.667 1677.93,232.629 1678.5,236.849 1679.07,235.561 1679.64,234.354 1680.2,235.234 1680.77,234.833 1681.34,235.75 1681.91,233.539 1682.48,232.502 1683.05,233.62 1683.61,231.502 1684.18,230.478 1684.75,230.647 1685.32,231.813 1685.89,231.804 1686.46,231.944 1687.02,232.902 1687.59,234.988 1688.16,235.9 1688.73,234.6 1689.3,234.553 1689.87,234.448 1690.44,235.433 1691,236.327 1691.57,236.088 1692.14,235.77 1692.71,235.681 1693.28,236.385 1693.85,237.979 1694.41,237.529 1694.98,234.91 1695.55,237.718 1696.12,234.86 1696.69,235.682 1697.26,236.357 1697.82,234.932 1698.39,236.729 1698.96,233.461 1699.53,233.242 1700.1,234.08 1700.67,232.736 1701.23,232.695 1701.8,231.395 1702.37,232.571 1702.94,233.628 1703.51,233.159 1704.08,231.894 1704.64,231.994 1705.21,231.726 1705.78,233.699 1706.35,235.714 1706.92,234.339 1707.49,233.057 1708.05,231.782 1708.62,232.937 1709.19,231.737 1709.76,230.762 1710.33,232.823 1710.9,233.768 1711.46,233.63 1712.03,233.538 1712.6,233.318 1713.17,231.22 1713.74,233.332 1714.31,233.066 1714.87,231.945 1715.44,229.923 1716.01,231.941 1716.58,233.914 1717.15,230.735 1717.72,229.648 1718.28,229.961 1718.85,229.01 1719.42,228.206 1719.99,228.432 1720.56,227.666 1721.13,226.931 1721.69,226.241 1722.26,225.305 1722.83,225.713 1723.4,228.254 1723.97,228.524 1724.54,228.833 1725.1,229.242 1725.67,229.533 1726.24,228.715 1726.81,229.179 1727.38,230.468 1727.95,230.52 1728.51,232.569 1729.08,232.323 1729.65,234.147 1730.22,235.013 1730.79,235.562 1731.36,236.571 1731.92,236.106 1732.49,234.553 1733.06,234.258 1733.63,233.96 1734.2,233.771 1734.77,230.331 1735.33,230.527 1735.9,230.508 1736.47,227.481 1737.04,228.936 1737.61,229.319 1738.18,228.417 1738.74,229.338 1739.31,230.747 1739.88,231.025 1740.45,228.026 1741.02,227.313 1741.59,228.6 1742.15,228.78 1742.72,228.943 1743.29,229.225 1743.86,230.349 1744.43,229.283 1745,229.705 1745.56,230.01 1746.13,232.267 1746.7,232.236 1747.27,233.336 1747.84,232.064 1748.41,229.915 1748.97,229.005 1749.54,227.116 1750.11,227.632 1750.68,228.065 1751.25,227.361 1751.82,229.681 1752.38,229.065 1752.95,227.249 1753.52,229.51 1754.09,230.886 1754.66,229.831 1755.23,231.115 1755.79,231.011 1756.36,231.097 1756.93,231.169 1757.5,231.198 1758.07,233.596 1758.64,232.483 1759.21,232.462 1759.77,232.494 1760.34,231.317 1760.91,230.341 1761.48,229.801 1762.05,228.948 1762.62,229.204 1763.18,230.465 1763.75,230.63 1764.32,230.691 1764.89,230.71 1765.46,230.941 1766.03,233.09 1766.59,231.949 1767.16,230.823 1767.73,229.935 1768.3,229.945 1768.87,229.071 1769.44,229.402 1770,229.702 1770.57,229.903 1771.14,227.13 1771.71,228.702 1772.28,228.917 1772.85,230.326 1773.41,229.063 1773.98,226.184 1774.55,225.585 1775.12,227.194 1775.69,229.676 1776.26,230.043 1776.82,229.381 1777.39,230.722 1777.96,231.872 1778.53,230.702 1779.1,231.943 1779.67,232.833 1780.23,233.832 1780.8,231.864 1781.37,231.018 1781.94,232.162 1782.51,231.233 1783.08,230.503 1783.64,228.842 1784.21,231.049 1784.78,231.284 1785.35,231.462 1785.92,232.908 1786.49,231.051 1787.05,231.288 1787.62,231.464 1788.19,231.586 1788.76,231.62 1789.33,232.835 1789.9,234.191 1790.46,235.054 1791.03,236.019 1791.6,235.751 1792.17,236.731 1792.74,236.402 1793.31,237.274 1793.87,236.077 1794.44,233.837 1795.01,233.963 1795.58,230.969 1796.15,231.983 1796.72,232.022 1797.28,231.275 1797.85,231.556 1798.42,234.782 1798.99,234.713 1799.56,236.552 1800.13,235.303 1800.69,236.001 1801.26,236.078 1801.83,236.898 1802.4,236.568 1802.97,235.555 1803.54,235.539 1804.1,234.394 1804.67,233.231 1805.24,233.168 1805.81,233.014 1806.38,231.976 1806.95,233.052 1807.51,232.864 1808.08,233.844 1808.65,231.747 1809.22,233.048 1809.79,232.876 1810.36,234.051 1810.92,234.045 1811.49,233.795 1812.06,233.734 1812.63,233.663 1813.2,232.631 1813.77,232.749 1814.33,232.624 1814.9,234.683 1815.47,234.512 1816.04,231.274 1816.61,230.21 1817.18,230.546 1817.74,230.8 1818.31,234.844 1818.88,235.611 1819.45,235.103 1820.02,234.889 1820.59,233.629 1821.15,232.376 1821.72,232.409 1822.29,232.361 1822.86,232.364 1823.43,232.306 1824,232.518 1824.56,234.511 1825.13,233.384 1825.7,233.292 1826.27,231.101 1826.84,230.229 1827.41,230.406 1827.97,231.46 1828.54,233.667 1829.11,232.396 1829.68,230.463 1830.25,229.648 1830.82,231.81 1831.39,232.857 1831.95,232.517 1832.52,232.323 1833.09,231.161 1833.66,232.142 1834.23,232.021 1834.8,232.914 1835.36,231.887 1835.93,230.854 1836.5,232.041 1837.07,233.195 1837.64,235.017 1838.21,236.888 1838.77,235.507 1839.34,235.148 1839.91,234.723 1840.48,234.465 1841.05,233.344 1841.62,233.223 1842.18,230.954 1842.75,233.096 1843.32,236.055 1843.89,234.75 1844.46,233.354 1845.03,235.203 1845.59,232.802 1846.16,232.85 1846.73,233.674 1847.3,233.488 1847.87,233.399 1848.44,235.479 1849,234.172 1849.57,232.8 1850.14,233.859 1850.71,233.563 1851.28,233.446 1851.85,235.345 1852.41,235.21 1852.98,232.941 1853.55,233.705 1854.12,234.509 1854.69,235.104 1855.26,232.837 1855.82,232.733 1856.39,231.631 1856.96,231.683 1857.53,232.863 1858.1,234.663 1858.67,236.286 1859.23,234.952 1859.8,233.798 1860.37,234.698 1860.94,235.385 1861.51,233.964 1862.08,233.594 1862.64,233.333 1863.21,231.878 1863.78,231.593 1864.35,233.347 1864.92,236.125 1865.49,235.596 1866.05,233.094 1866.62,231.98 1867.19,232.777 1867.76,231.566 1868.33,232.226 1868.9,230.957 1869.46,233.101 1870.03,233.106 1870.6,233.941 1871.17,233.352 1871.74,236.05 1872.31,235.29 1872.87,235.813 1873.44,235.374 1874.01,234.934 1874.58,235.587 1875.15,235.3 1875.72,234.933 1876.28,234.647 1876.85,232.271 1877.42,228.917 1877.99,227.839 1878.56,228.908 1879.13,228.605 1879.69,227.643 1880.26,226.887 1880.83,228.281 1881.4,228.118 1881.97,229.046 1882.54,228.118 1883.1,229.187 1883.67,230.633 1884.24,230.802 1884.81,231.697 1885.38,230.575 1885.95,230.514 1886.51,231.381 1887.08,230.368 1887.65,228.288 1888.22,227.236 1888.79,226.692 1889.36,226.097 1889.92,226.42 1890.49,225.636 1891.06,226.985 1891.63,226.393 1892.2,226.642 1892.77,231.016 1893.33,230.882 1893.9,230.916 1894.47,231.849 1895.04,230.819 1895.61,230.833 1896.18,231.847 1896.74,231.027 1897.31,231.074 1897.88,232.937 1898.45,232.953 1899.02,233.913 1899.59,233.713 1900.16,234.357 1900.72,232.974 1901.29,232.777 1901.86,231.515 1902.43,230.422 1903,232.658 1903.57,232.472 1904.13,234.332 1904.7,233.2 1905.27,232.867 1905.84,230.585 1906.41,230.861 1906.98,230.83 1907.54,232.01 1908.11,231.82 1908.68,231.967 1909.25,231.032 1909.82,233.138 1910.39,233.166 1910.95,231.033 1911.52,229.013 1912.09,228.245 1912.66,228.427 1913.23,226.561 1913.8,228.891 1914.36,227.244 1914.93,229.655 1915.5,230.885 1916.07,231.183 1916.64,231.144 1917.21,228.955 1917.77,228.971 1918.34,233.426 1918.91,234.297 1919.48,234.166 1920.05,235.022 1920.62,234.739 1921.18,232.405 1921.75,233.19 1922.32,235.168 1922.89,234.77 1923.46,234.53 1924.03,231.288 1924.59,232.143 1925.16,233.231 1925.73,234.124 1926.3,234.939 1926.87,233.652 1927.44,233.514 1928,233.372 1928.57,233.311 1929.14,233.239 1929.71,234.304 1930.28,231.966 1930.85,228.729 1931.41,226.845 1931.98,224.05 1932.55,222.592 1933.12,224.256 1933.69,224.796 1934.26,226.273 1934.82,229.748 1935.39,229.971 1935.96,231.237 1936.53,229.89 1937.1,226.939 1937.67,227.977 1938.23,229.108 1938.8,228.281 1939.37,226.385 1939.94,225.988 1940.51,226.31 1941.08,227.778 1941.64,228.25 1942.21,227.659 1942.78,228.05 1943.35,227.41 1943.92,227.803 1944.49,228.99 1945.05,228.479 1945.62,228.618 1946.19,226.839 1946.76,228.277 1947.33,228.435 1947.9,225.486 1948.46,225.879 1949.03,226.403 1949.6,226.986 1950.17,227.473 1950.74,228.768 1951.31,228.146 1951.87,227.642 1952.44,225.929 1953.01,226.583 1953.58,224.819 1954.15,225.284 1954.72,229.91 1955.28,230.243 1955.85,230.538 1956.42,232.919 1956.99,232.948 1957.56,232.067 1958.13,231.126 1958.69,231.668 1959.26,232.115 1959.83,231.037 1960.4,231.194 1960.97,230.32 1961.54,230.715 1962.1,234.131 1962.67,234.358 1963.24,232.319 1963.81,232.348 1964.38,233.362 1964.95,234.461 1965.51,236.637 1966.08,234.554 1966.65,234.772 1967.22,237.687 1967.79,237.252 1968.36,235.722 1968.92,237.557 1969.49,235.013 1970.06,234.1 1970.63,234.058 1971.2,233.014 1971.77,232.716 1972.34,231.699 1972.9,231.738 1973.47,231.857 1974.04,233.911 1974.61,232.936 1975.18,231.852 1975.75,231.177 1976.31,232.198 1976.88,229.112 1977.45,229.426 1978.02,230.671 1978.59,230.685 1979.16,229.766 1979.72,231.018 1980.29,231.171 1980.86,232.363 1981.43,233.414 1982,231.395 1982.57,233.598 1983.13,234.76 1983.7,236.463 1984.27,235.366 1984.84,236.32 1985.41,237.238 1985.98,236.952 1986.54,236.371 1987.11,237.108 1987.68,236.716 1988.25,235.481 1988.82,235 1989.39,235.938 1989.95,235.757 1990.52,233.456 1991.09,235.237 1991.66,232.799 1992.23,232.566 1992.8,239.85 1993.36,239.376 1993.93,237.887 1994.5,236.595 1995.07,236.269 1995.64,234.877 1996.21,236.556 1996.77,236.231 1997.34,234.81 1997.91,232.426 1998.48,231.298 1999.05,229.298 1999.62,229.532 2000.18,227.381 2000.75,228.724 2001.32,228.963 2001.89,227.184 2002.46,226.356 2003.03,228.868 2003.59,227.234 2004.16,227.516 2004.73,226.908 2005.3,228.267 2005.87,228.446 2006.44,227.851 2007,229.044 2007.57,229.172 2008.14,229.458 2008.71,229.695 2009.28,230.952 2009.85,231.041 2010.41,232.053 2010.98,233.124 2011.55,231.915 2012.12,231.791 2012.69,230.913 2013.26,233.038 2013.82,232.699 2014.39,233.711 2014.96,232.332 2015.53,233.436 2016.1,235.286 2016.67,235.117 2017.23,237.013 2017.8,234.825 2018.37,235.733 2018.94,234.413 2019.51,234.31 2020.08,234.112 2020.64,233.914 2021.21,233.443 2021.78,234.35 2022.35,234.102 2022.92,230.703 2023.49,231.64 2024.05,230.676 2024.62,228.596 2025.19,227.726 2025.76,228.168 2026.33,230.548 2026.9,230.669 2027.46,230.628 2028.03,230.445 2028.6,229.449 2029.17,230.944 2029.74,231.205 2030.31,233.247 2030.87,233.212 2031.44,233.18 2032.01,233.273 2032.58,234.262 2033.15,234.168 2033.72,234.836 2034.28,236.697 2034.85,237.302 2035.42,236.822 2035.99,237.526 2036.56,239.278 2037.13,238.637 2037.69,238.044 2038.26,238.433 2038.83,235.966 2039.4,235.785 2039.97,238.654 2040.54,237.137 2041.11,235.607 2041.67,234.364 2042.24,232.754 2042.81,233.69 2043.38,234.514 2043.95,234.324 2044.52,231.756 2045.08,230.709 2045.65,230.61 2046.22,230.766 2046.79,231.87 2047.36,231.885 2047.93,235.916 2048.49,234.41 2049.06,233.952 2049.63,232.633 2050.2,232.558 2050.77,232.683 2051.34,232.647 2051.9,232.35 2052.47,231.131 2053.04,230.834 2053.61,231.973 2054.18,230.681 2054.75,229.663 2055.31,229.503 2055.88,230.49 2056.45,230.452 2057.02,229.351 2057.59,229.169 2058.16,229.373 2058.72,229.569 2059.29,231.851 2059.86,232.913 2060.43,230.59 2061,229.778 2061.57,230.833 2062.13,230.125 2062.7,229.236 2063.27,228.523 2063.84,230.666 2064.41,229.557 2064.98,229.657 2065.54,228.695 2066.11,228.034 2066.68,228.178 2067.25,227.323 2067.82,226.695 2068.39,224.966 2068.95,226.593 2069.52,224.722 2070.09,225.219 2070.66,226.771 2071.23,228.263 2071.8,229.538 2072.36,229.651 2072.93,227.793 2073.5,226.935 2074.07,227.418 2074.64,227.608 2075.21,228.805 2075.77,231.206 2076.34,231.684 2076.91,232.874 2077.48,233.854 2078.05,232.571 2078.62,232.692 2079.18,231.697 2079.75,231.643 2080.32,232.696 2080.89,229.575 2081.46,229.598 2082.03,230.203 2082.59,231.583 2083.16,231.723 2083.73,232.786 2084.3,230.787 2084.87,230.978 2085.44,230.125 2086,231.079 2086.57,233.228 2087.14,233.227 2087.71,233.159 2088.28,231.258 2088.85,229.225 2089.41,231.592 2089.98,230.644 2090.55,229.747 2091.12,230.221 2091.69,231.489 2092.26,230.565 2092.82,231.626 2093.39,232.577 2093.96,231.391 2094.53,231.276 2095.1,233.318 2095.67,234.489 2096.23,234.365 2096.8,234.167 2097.37,235.086 2097.94,234.617 2098.51,234.57 2099.08,234.293 2099.64,235.254 2100.21,232.976 2100.78,232.986 2101.35,231.809 2101.92,232.871 2102.49,234.815 2103.05,234.542 2103.62,234.324 2104.19,234.249 2104.76,235.032 2105.33,235.111 2105.9,235.796 2106.46,236.332 2107.03,237.108 2107.6,236.809 2108.17,237.358 2108.74,235.863 2109.31,233.291 2109.87,232.071 2110.44,232.091 2111.01,233.088 2111.58,230.908 2112.15,229.961 2112.72,230.12 2113.29,229.332 2113.85,230.425 2114.42,232.573 2114.99,232.58 2115.56,232.456 2116.13,233.326 2116.7,235.4 2117.26,235.167 2117.83,232.839 2118.4,235.822 2118.97,234.326 2119.54,233.192 2120.11,233.187 2120.67,231.858 2121.24,231.823 2121.81,231.818 2122.38,232.55 2122.95,233.46 2123.52,233.411 2124.08,232.145 2124.65,232.362 2125.22,232.238 2125.79,232.176 2126.36,231.25 2126.93,230.288 2127.49,233.384 2128.06,231.809 2128.63,230.689 2129.2,230.566 2129.77,230.498 2130.34,230.234 2130.9,229.033 2131.47,229.124 2132.04,228.066 2132.61,226.959 2133.18,226.177 2133.75,226.708 2134.31,226.947 2134.88,228.014 2135.45,230.468 2136.02,231.502 2136.59,229.516 2137.16,229.77 2137.72,232.003 2138.29,231.834 2138.86,231.754 2139.43,229.834 2140,229.984 2140.57,230.045 2141.13,234.38 2141.7,234.103 2142.27,234.829 2142.84,235.507 2143.41,236.209 2143.98,237.876 2144.54,238.711 2145.11,239.385 2145.68,238.761 2146.25,238.016 2146.82,235.34 2147.39,236.186 2147.95,236.97 2148.52,236.397 2149.09,235.976 2149.66,235.508 2150.23,236.292 2150.8,236.935 2151.36,237.385 2151.93,235.851 2152.5,235.404 2153.07,235.121 2153.64,235.671 2154.21,235.973 2154.77,233.764 2155.34,233.779 2155.91,235.511 2156.48,234.154 2157.05,232.823 2157.62,232.601 2158.18,233.394 2158.75,233.251 2159.32,234.008 2159.89,232.865 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.023 ± 0.022\n  with uncertainty of ± 0.002018654757335155\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01568 ± (0.00210316, 0.00211014) (MC)\n  95% confidence interval: [-4.01975, -4.01162]) (MC)\n  linear error propagation: -4.01575 ± 0.00203441\n  |δ_y| = |0.00135911| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015679543284401, val_l = 0.004069353040806689, val_u = 0.00406147043773597)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip680\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip680)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip681\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip680)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip682\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1145.86 2211.02,1145.86 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,975.26 2211.02,975.26 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,804.664 2211.02,804.664 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,634.067 2211.02,634.067 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,463.47 2211.02,463.47 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,292.873 2211.02,292.873 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1145.86 365.751,1145.86 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,975.26 365.751,975.26 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,804.664 365.751,804.664 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,634.067 365.751,634.067 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,463.47 365.751,463.47 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,292.873 365.751,292.873 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M298.909 1131.66 Q295.298 1131.66 293.469 1135.22 Q291.664 1138.76 291.664 1145.89 Q291.664 1153 293.469 1156.56 Q295.298 1160.11 298.909 1160.11 Q302.543 1160.11 304.349 1156.56 Q306.177 1153 306.177 1145.89 Q306.177 1138.76 304.349 1135.22 Q302.543 1131.66 298.909 1131.66 M298.909 1127.95 Q304.719 1127.95 307.775 1132.56 Q310.853 1137.14 310.853 1145.89 Q310.853 1154.62 307.775 1159.23 Q304.719 1163.81 298.909 1163.81 Q293.099 1163.81 290.02 1159.23 Q286.964 1154.62 286.964 1145.89 Q286.964 1137.14 290.02 1132.56 Q293.099 1127.95 298.909 1127.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M259.557 988.605 L267.196 988.605 L267.196 962.24 L258.886 963.906 L258.886 959.647 L267.15 957.98 L271.826 957.98 L271.826 988.605 L279.465 988.605 L279.465 992.54 L259.557 992.54 L259.557 988.605 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 961.059 Q295.298 961.059 293.469 964.624 Q291.664 968.166 291.664 975.295 Q291.664 982.402 293.469 985.966 Q295.298 989.508 298.909 989.508 Q302.543 989.508 304.349 985.966 Q306.177 982.402 306.177 975.295 Q306.177 968.166 304.349 964.624 Q302.543 961.059 298.909 961.059 M298.909 957.355 Q304.719 957.355 307.775 961.962 Q310.853 966.545 310.853 975.295 Q310.853 984.022 307.775 988.628 Q304.719 993.212 298.909 993.212 Q293.099 993.212 290.02 988.628 Q286.964 984.022 286.964 975.295 Q286.964 966.545 290.02 961.962 Q293.099 957.355 298.909 957.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M262.775 818.008 L279.094 818.008 L279.094 821.944 L257.15 821.944 L257.15 818.008 Q259.812 815.254 264.395 810.624 Q269.002 805.971 270.182 804.629 Q272.428 802.106 273.307 800.37 Q274.21 798.61 274.21 796.92 Q274.21 794.166 272.266 792.43 Q270.344 790.694 267.242 790.694 Q265.043 790.694 262.59 791.458 Q260.159 792.221 257.381 793.772 L257.381 789.05 Q260.205 787.916 262.659 787.337 Q265.113 786.759 267.15 786.759 Q272.52 786.759 275.715 789.444 Q278.909 792.129 278.909 796.62 Q278.909 798.749 278.099 800.67 Q277.312 802.569 275.205 805.161 Q274.627 805.832 271.525 809.05 Q268.423 812.244 262.775 818.008 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 790.462 Q295.298 790.462 293.469 794.027 Q291.664 797.569 291.664 804.698 Q291.664 811.805 293.469 815.369 Q295.298 818.911 298.909 818.911 Q302.543 818.911 304.349 815.369 Q306.177 811.805 306.177 804.698 Q306.177 797.569 304.349 794.027 Q302.543 790.462 298.909 790.462 M298.909 786.759 Q304.719 786.759 307.775 791.365 Q310.853 795.948 310.853 804.698 Q310.853 813.425 307.775 818.031 Q304.719 822.615 298.909 822.615 Q293.099 822.615 290.02 818.031 Q286.964 813.425 286.964 804.698 Q286.964 795.948 290.02 791.365 Q293.099 786.759 298.909 786.759 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M272.914 632.712 Q276.27 633.43 278.145 635.698 Q280.043 637.967 280.043 641.3 Q280.043 646.416 276.525 649.217 Q273.006 652.018 266.525 652.018 Q264.349 652.018 262.034 651.578 Q259.742 651.161 257.289 650.305 L257.289 645.791 Q259.233 646.925 261.548 647.504 Q263.863 648.083 266.386 648.083 Q270.784 648.083 273.076 646.347 Q275.39 644.61 275.39 641.3 Q275.39 638.245 273.238 636.532 Q271.108 634.796 267.289 634.796 L263.261 634.796 L263.261 630.953 L267.474 630.953 Q270.923 630.953 272.752 629.587 Q274.58 628.199 274.58 625.606 Q274.58 622.944 272.682 621.532 Q270.807 620.097 267.289 620.097 Q265.367 620.097 263.168 620.513 Q260.969 620.93 258.33 621.81 L258.33 617.643 Q260.992 616.902 263.307 616.532 Q265.645 616.162 267.705 616.162 Q273.029 616.162 276.131 618.592 Q279.233 620.999 279.233 625.12 Q279.233 627.99 277.59 629.981 Q275.946 631.949 272.914 632.712 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 619.865 Q295.298 619.865 293.469 623.43 Q291.664 626.972 291.664 634.101 Q291.664 641.208 293.469 644.773 Q295.298 648.314 298.909 648.314 Q302.543 648.314 304.349 644.773 Q306.177 641.208 306.177 634.101 Q306.177 626.972 304.349 623.43 Q302.543 619.865 298.909 619.865 M298.909 616.162 Q304.719 616.162 307.775 620.768 Q310.853 625.351 310.853 634.101 Q310.853 642.828 307.775 647.435 Q304.719 652.018 298.909 652.018 Q293.099 652.018 290.02 647.435 Q286.964 642.828 286.964 634.101 Q286.964 625.351 290.02 620.768 Q293.099 616.162 298.909 616.162 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M271.594 450.264 L259.789 468.713 L271.594 468.713 L271.594 450.264 M270.367 446.19 L276.247 446.19 L276.247 468.713 L281.177 468.713 L281.177 472.602 L276.247 472.602 L276.247 480.75 L271.594 480.75 L271.594 472.602 L255.992 472.602 L255.992 468.088 L270.367 446.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 449.268 Q295.298 449.268 293.469 452.833 Q291.664 456.375 291.664 463.504 Q291.664 470.611 293.469 474.176 Q295.298 477.717 298.909 477.717 Q302.543 477.717 304.349 474.176 Q306.177 470.611 306.177 463.504 Q306.177 456.375 304.349 452.833 Q302.543 449.268 298.909 449.268 M298.909 445.565 Q304.719 445.565 307.775 450.171 Q310.853 454.754 310.853 463.504 Q310.853 472.231 307.775 476.838 Q304.719 481.421 298.909 481.421 Q293.099 481.421 290.02 476.838 Q286.964 472.231 286.964 463.504 Q286.964 454.754 290.02 450.171 Q293.099 445.565 298.909 445.565 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M258.793 275.593 L277.15 275.593 L277.15 279.528 L263.076 279.528 L263.076 288 Q264.094 287.653 265.113 287.491 Q266.131 287.306 267.15 287.306 Q272.937 287.306 276.316 290.477 Q279.696 293.648 279.696 299.065 Q279.696 304.643 276.224 307.745 Q272.752 310.824 266.432 310.824 Q264.256 310.824 261.988 310.454 Q259.742 310.083 257.335 309.342 L257.335 304.643 Q259.418 305.778 261.641 306.333 Q263.863 306.889 266.34 306.889 Q270.344 306.889 272.682 304.782 Q275.02 302.676 275.02 299.065 Q275.02 295.454 272.682 293.347 Q270.344 291.241 266.34 291.241 Q264.465 291.241 262.59 291.657 Q260.738 292.074 258.793 292.954 L258.793 275.593 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 278.671 Q295.298 278.671 293.469 282.236 Q291.664 285.778 291.664 292.907 Q291.664 300.014 293.469 303.579 Q295.298 307.12 298.909 307.12 Q302.543 307.12 304.349 303.579 Q306.177 300.014 306.177 292.907 Q306.177 285.778 304.349 282.236 Q302.543 278.671 298.909 278.671 M298.909 274.968 Q304.719 274.968 307.775 279.574 Q310.853 284.157 310.853 292.907 Q310.853 301.634 307.775 306.241 Q304.719 310.824 298.909 310.824 Q293.099 310.824 290.02 306.241 Q286.964 301.634 286.964 292.907 Q286.964 284.157 290.02 279.574 Q293.099 274.968 298.909 274.968 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip682)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1020.16 400.199,904.676 400.786,928.718 401.372,823.021 401.958,726.154 402.545,639.223 403.131,558.194 403.718,484.364 404.304,422.919 404.891,365.319 405.477,311.548 406.063,436.483 406.65,386.604 407.236,413.884 407.823,370.03 408.409,332.168 408.995,356.02 409.582,322.272 410.168,292.605 410.755,267.063 411.341,244.557 411.927,224.172 412.514,248.836 413.1,233.827 413.687,219.895 414.273,242.366 414.86,263.17 415.446,283.979 416.032,274.021 416.619,319.065 417.205,360.363 417.792,376.272 418.378,369.708 418.964,385.289 419.551,381.61 420.137,378.711 420.724,410.041 421.31,409.094 421.896,424.608 422.483,466.227 423.069,465.676 423.656,479.488 424.242,480.3 424.829,504.639 425.415,506.813 426.001,510.498 426.588,525.289 427.174,530.323 427.761,544.272 428.347,558.319 428.933,564.022 429.52,570.511 430.106,578.286 430.693,592.766 431.279,621.432 431.865,634.01 432.452,640.169 433.038,653.166 433.625,659.808 434.211,678.501 434.798,690.939 435.384,697.395 435.97,709.696 436.557,727.141 437.143,734.485 437.73,750.751 438.316,757.042 438.902,768.307 439.489,775.425 440.075,795.036 440.662,810.314 441.248,824.816 441.835,830.982 442.421,840.456 443.007,854.295 443.594,870.558 444.18,883.532 444.767,889.195 445.353,901.774 445.939,913.754 446.526,919.588 447.112,934.298 447.699,951.378 448.285,961.918 448.871,967.007 449.458,974.528 450.044,984.405 450.631,989.188 451.217,1006.22 451.804,1010.59 452.39,1019.48 452.976,1025.86 453.563,1032.07 454.149,1035.72 454.736,1041.75 455.322,1050.28 455.908,1058.19 456.495,1064.14 457.081,1067.53 457.668,1068.94 458.254,1078.63 458.84,1086.21 459.427,1091.2 460.013,1095.93 460.6,1096.55 461.186,1107.72 461.773,1116.5 462.359,1128.85 462.945,1134.78 463.532,1136.66 464.118,1140.27 464.705,1143.61 465.291,1149.61 465.877,1151.09 466.464,1152.97 467.05,1154.51 467.637,1157.99 468.223,1162.87 468.809,1167.77 469.396,1174.07 469.982,1174.73 470.569,1179.4 471.155,1180.1 471.742,1182.44 472.328,1183.02 472.914,1190.69 473.501,1189.33 474.087,1193.33 474.674,1196.88 475.26,1198.45 475.846,1196.79 476.433,1198.78 477.019,1199.25 477.606,1203.03 478.192,1205.06 478.778,1208.29 479.365,1209.66 479.951,1211.41 480.538,1213.06 481.124,1212.91 481.711,1211.33 482.297,1214.71 482.883,1215.02 483.47,1215.19 484.056,1215.34 484.643,1213.78 485.229,1212.46 485.815,1213.03 486.402,1214.8 486.988,1216.95 487.575,1217.25 488.161,1218.88 488.748,1221.88 489.334,1223.21 489.92,1226.33 490.507,1229.2 491.093,1230.22 491.68,1231.42 492.266,1232.52 492.852,1233.69 493.439,1236.27 494.025,1239.75 494.612,1240.47 495.198,1242.69 495.784,1242.75 496.371,1243.22 496.957,1241.1 497.544,1240.44 498.13,1238.37 498.717,1240.86 499.303,1240.35 499.889,1239.86 500.476,1237.68 501.062,1238.67 501.649,1238.16 502.235,1236.01 502.821,1235.56 503.408,1236.73 503.994,1237.57 504.581,1239.83 505.167,1237.64 505.753,1238.6 506.34,1236.67 506.926,1236.86 507.513,1243.68 508.099,1245.96 508.686,1242.33 509.272,1241.74 509.858,1241.48 510.445,1243.91 511.031,1243.51 511.618,1244.73 512.204,1246.81 512.79,1250.53 513.377,1249.29 513.963,1249.43 514.55,1247.37 515.136,1246.51 515.722,1247.08 516.309,1244.73 516.895,1244.3 517.482,1243.04 518.068,1243.99 518.655,1242 519.241,1240.03 519.827,1241.29 520.414,1242.47 521,1243.35 521.587,1244.64 522.173,1245.6 522.759,1246.51 523.346,1245.91 523.932,1245.65 524.519,1244.98 525.105,1242.88 525.691,1242.56 526.278,1240.7 526.864,1240.12 527.451,1240.91 528.037,1239.34 528.624,1239.15 529.21,1236.04 529.796,1237.5 530.383,1235.63 530.969,1237.07 531.556,1238.32 532.142,1243.74 532.728,1240.42 533.315,1240.02 533.901,1239.92 534.488,1242.3 535.074,1245.96 535.661,1248.33 536.247,1247.75 536.833,1248.45 537.42,1249.01 538.006,1249.45 538.593,1248.63 539.179,1247.78 539.765,1248.41 540.352,1248.99 540.938,1247.91 541.525,1248.45 542.111,1247.69 542.697,1246.93 543.284,1244.59 543.87,1242.43 544.457,1244.71 545.043,1244.1 545.63,1247.83 546.216,1248.38 546.802,1247.56 547.389,1248.16 547.975,1244.58 548.562,1246.32 549.148,1248.23 549.734,1245.02 550.321,1240.19 550.907,1241.28 551.494,1243.83 552.08,1243.04 552.666,1241.15 553.253,1239.5 553.839,1239.18 554.426,1240.13 555.012,1239.88 555.599,1242.1 556.185,1241.49 556.771,1239.4 557.358,1243.23 557.944,1244.02 558.531,1246.37 559.117,1246.95 559.703,1244.98 560.29,1242.83 560.876,1240.55 561.463,1238.4 562.049,1239.41 562.635,1239.14 563.222,1241.49 563.808,1242.37 564.395,1238.82 564.981,1239.74 565.568,1239.22 566.154,1239.94 566.74,1238.05 567.327,1239.34 567.913,1241.67 568.5,1238.34 569.086,1239.46 569.672,1239.19 570.259,1238.76 570.845,1238.11 571.432,1239.03 572.018,1238.43 572.605,1238.02 573.191,1238.94 573.777,1237 574.364,1236.48 574.95,1234.68 575.537,1235.73 576.123,1236.51 576.709,1234.75 577.296,1237.29 577.882,1236.95 578.469,1236.85 579.055,1233.65 579.641,1233.4 580.228,1235.92 580.814,1235.64 581.401,1237.95 581.987,1238.91 582.574,1238.06 583.16,1237.44 583.746,1236.74 584.333,1237.75 584.919,1237.17 585.506,1236.8 586.092,1240.43 586.678,1235.38 587.265,1233.41 587.851,1231.98 588.438,1231.52 589.024,1231.45 589.61,1229.82 590.197,1232.55 590.783,1233.72 591.37,1230.75 591.956,1232.08 592.543,1231.75 593.129,1230.04 593.715,1231.1 594.302,1232.51 594.888,1233.6 595.475,1234.5 596.061,1234.1 596.647,1232.22 597.234,1234.7 597.82,1234.15 598.407,1232.44 598.993,1227.99 599.579,1226.59 600.166,1228.1 600.752,1228.04 601.339,1225.66 601.925,1225.94 602.512,1227.26 603.098,1227.23 603.684,1230.03 604.271,1229.7 604.857,1226.57 605.444,1227.85 606.03,1227.7 606.616,1227.55 607.203,1227.51 607.789,1232.8 608.376,1231.38 608.962,1233.65 609.548,1234.46 610.135,1233.66 610.721,1234.48 611.308,1232.8 611.894,1234.03 612.481,1236.51 613.067,1234.61 613.653,1233.97 614.24,1233.49 614.826,1233.12 615.413,1235.33 615.999,1234.99 616.585,1234.31 617.172,1233.83 617.758,1233.36 618.345,1230.12 618.931,1231.44 619.518,1232.48 620.104,1232.21 620.69,1230.22 621.277,1228.54 621.863,1228.32 622.45,1229.8 623.036,1228.14 623.622,1229.61 624.209,1229.22 624.795,1228.81 625.382,1229.85 625.968,1232.27 626.554,1232.2 627.141,1227.24 627.727,1228.21 628.314,1227.81 628.9,1229.06 629.487,1226.34 630.073,1226.24 630.659,1225.92 631.246,1225.81 631.832,1227.13 632.419,1226.85 633.005,1227.94 633.591,1229.22 634.178,1227.42 634.764,1228.54 635.351,1229.91 635.937,1228 636.523,1229.16 637.11,1227.2 637.696,1225.87 638.283,1224.51 638.869,1225.72 639.456,1228.55 640.042,1230.9 640.628,1227.82 641.215,1221.99 641.801,1223.34 642.388,1226.2 642.974,1224.64 643.56,1221.5 644.147,1222.83 644.733,1221.67 645.32,1221.67 645.906,1221.75 646.492,1226 647.079,1227.25 647.665,1226.86 648.252,1229.25 648.838,1229.08 649.425,1230.29 650.011,1229.82 650.597,1231.07 651.184,1232.14 651.77,1231.61 652.357,1228.35 652.943,1230.68 653.529,1227.58 654.116,1228.79 654.702,1227.05 655.289,1229.47 655.875,1230.39 656.462,1226.88 657.048,1227.97 657.634,1226.45 658.221,1223.16 658.807,1220.14 659.394,1220.12 659.98,1220.3 660.566,1218.83 661.153,1220.21 661.739,1223.24 662.326,1223.24 662.912,1221.57 663.498,1221.66 664.085,1222.9 664.671,1223.03 665.258,1223.19 665.844,1221.98 666.431,1223.43 667.017,1221.92 667.603,1220.41 668.19,1219.23 668.776,1217.74 669.363,1217.83 669.949,1215.27 670.535,1217.09 671.122,1217.14 671.708,1216.26 672.295,1217.01 672.881,1217.55 673.467,1216.35 674.054,1215.29 674.64,1217.08 675.227,1215.84 675.813,1216.02 676.4,1214.71 676.986,1213.82 677.572,1211.81 678.159,1215.12 678.745,1216.59 679.332,1216.7 679.918,1216.87 680.504,1218.43 681.091,1218.35 681.677,1214.54 682.264,1214.9 682.85,1214.99 683.436,1212.57 684.023,1214.62 684.609,1214.79 685.196,1215.15 685.782,1219.56 686.369,1222.34 686.955,1223.8 687.541,1222.29 688.128,1221.89 688.714,1222.08 689.301,1221.81 689.887,1220.36 690.473,1223.19 691.06,1218.74 691.646,1220.39 692.233,1221.95 692.819,1224.7 693.405,1221.72 693.992,1218.74 694.578,1218.88 695.165,1217.44 695.751,1217.64 696.338,1217.77 696.924,1215.67 697.51,1218.72 698.097,1217.64 698.683,1215.2 699.27,1215.58 699.856,1219.89 700.442,1221.39 701.029,1220.01 701.615,1222.76 702.202,1225.32 702.788,1225.07 703.375,1226.24 703.961,1227.15 704.547,1227 705.134,1226.57 705.72,1227.45 706.307,1227.42 706.893,1227 707.479,1230.74 708.066,1229 708.652,1228.7 709.239,1228.3 709.825,1229.2 710.411,1224.72 710.998,1226 711.584,1227.15 712.171,1227.95 712.757,1226.27 713.344,1226.05 713.93,1227.17 714.516,1230.77 715.103,1230.29 715.689,1225.13 716.276,1225.14 716.862,1227.59 717.448,1225.59 718.035,1225.31 718.621,1223.51 719.208,1227.44 719.794,1228.34 720.38,1227.89 720.967,1227.65 721.553,1227.26 722.14,1227.83 722.726,1224.69 723.313,1224.53 723.899,1224.24 724.485,1221.33 725.072,1218.47 725.658,1218.75 726.245,1215.92 726.831,1216.04 727.417,1216.44 728.004,1218.05 728.59,1218.17 729.177,1218.03 729.763,1220.91 730.349,1223.29 730.936,1223.1 731.522,1224.18 732.109,1225.33 732.695,1226.31 733.282,1225.94 733.868,1224.27 734.454,1225.21 735.041,1223.61 735.627,1223.49 736.214,1224.58 736.8,1224.3 737.386,1224.34 737.973,1224.05 738.559,1222.5 739.146,1224.04 739.732,1225.23 740.318,1223.51 740.905,1223.3 741.491,1222.95 742.078,1222.83 742.664,1225.37 743.251,1226.54 743.837,1224.76 744.423,1227.27 745.01,1227 745.596,1227.81 746.183,1227.14 746.769,1226.86 747.355,1227.99 747.942,1225.64 748.528,1226.42 749.115,1225.75 749.701,1223.98 750.288,1225.28 750.874,1224.81 751.46,1221.86 752.047,1221.42 752.633,1219.61 753.22,1220.87 753.806,1217.74 754.392,1220.55 754.979,1220.46 755.565,1220.31 756.152,1219.74 756.738,1220.98 757.324,1222.14 757.911,1220.72 758.497,1220.36 759.084,1221.55 759.67,1219.71 760.257,1220.94 760.843,1223.52 761.429,1220.35 762.016,1219.95 762.602,1221.12 763.189,1221.07 763.775,1221.27 764.361,1218.26 764.948,1219.51 765.534,1225.02 766.121,1224.78 766.707,1222.98 767.293,1221.36 767.88,1217.13 768.466,1214.18 769.053,1210.15 769.639,1209.25 770.226,1209.68 770.812,1211.6 771.398,1213.46 771.985,1215.09 772.571,1212.47 773.158,1214.04 773.744,1213.06 774.33,1214.86 774.917,1216.46 775.503,1218.08 776.09,1218 776.676,1217.84 777.262,1216.79 777.849,1216.83 778.435,1216.83 779.022,1219.88 779.608,1219.48 780.195,1217.99 780.781,1220.82 781.367,1220.55 781.954,1214.89 782.54,1216.48 783.127,1217.7 783.713,1220.44 784.299,1223.31 784.886,1221.45 785.472,1221.27 786.059,1219.71 786.645,1218.17 787.232,1219.52 787.818,1217.94 788.404,1219.17 788.991,1220.55 789.577,1221.94 790.164,1224.65 790.75,1222.96 791.336,1224.01 791.923,1224.9 792.509,1224.55 793.096,1226.98 793.682,1227.99 794.268,1227.6 794.855,1226.81 795.441,1226.23 796.028,1224.43 796.614,1223.95 797.201,1226.44 797.787,1225.99 798.373,1224.06 798.96,1220.84 799.546,1220.4 800.133,1220.1 800.719,1218.45 801.305,1216.73 801.892,1219.65 802.478,1216.8 803.065,1221.25 803.651,1223.74 804.237,1223.29 804.824,1224.49 805.41,1222.98 805.997,1221.24 806.583,1223.69 807.17,1224.9 807.756,1222.86 808.342,1222.53 808.929,1223.8 809.515,1222.18 810.102,1222.13 810.688,1222.16 811.274,1221.95 811.861,1221.77 812.447,1222.41 813.034,1223.87 813.62,1222.39 814.206,1221.97 814.793,1221.66 815.379,1218.54 815.966,1219.81 816.552,1216.93 817.139,1216.77 817.725,1216.7 818.311,1216.71 818.898,1215.13 819.484,1214 820.071,1211.1 820.657,1212.85 821.243,1214.22 821.83,1217.33 822.416,1219.08 823.003,1219.05 823.589,1221.96 824.175,1223.1 824.762,1224.11 825.348,1223.62 825.935,1227.64 826.521,1224.41 827.108,1227.18 827.694,1227.95 828.28,1224.88 828.867,1226.03 829.453,1225.59 830.04,1223.5 830.626,1220.33 831.212,1218.89 831.799,1220 832.385,1222.64 832.972,1221.19 833.558,1222.42 834.145,1221.74 834.731,1221.16 835.317,1216.77 835.904,1215.49 836.49,1214.11 837.077,1214.17 837.663,1214.28 838.249,1211.68 838.836,1210.58 839.422,1210.87 840.009,1211.43 840.595,1211.62 841.181,1209.02 841.768,1209.64 842.354,1208.64 842.941,1210.51 843.527,1210.76 844.114,1213.86 844.7,1211.4 845.286,1210.29 845.873,1211.72 846.459,1211.89 847.046,1211.92 847.632,1212.18 848.218,1212.42 848.805,1212.66 849.391,1214.18 849.978,1212.8 850.564,1214.68 851.15,1215.98 851.737,1215.94 852.323,1215.94 852.91,1214.75 853.496,1210.59 854.083,1210.72 854.669,1208.13 855.255,1208.42 855.842,1210.35 856.428,1211.75 857.015,1213.55 857.601,1212.22 858.187,1211.22 858.774,1209.15 859.36,1206.84 859.947,1206.03 860.533,1206.66 861.119,1207.33 861.706,1207.84 862.292,1208.11 862.879,1210.2 863.465,1213.66 864.052,1215.28 864.638,1214.21 865.224,1214.19 865.811,1215.51 866.397,1215.19 866.984,1214.19 867.57,1215.97 868.156,1216.3 868.743,1217.6 869.329,1218.82 869.916,1220.21 870.502,1219.97 871.089,1221.19 871.675,1219.58 872.261,1216.54 872.848,1219.19 873.434,1218.98 874.021,1217.41 874.607,1218.75 875.193,1220.22 875.78,1221.36 876.366,1222.9 876.953,1219.72 877.539,1223.5 878.125,1221.8 878.712,1222.97 879.298,1223.95 879.885,1223.46 880.471,1222.91 881.058,1223.88 881.644,1222.14 882.23,1220.44 882.817,1217.52 883.403,1217.1 883.99,1215.81 884.576,1215.55 885.162,1216.98 885.749,1217.08 886.335,1219.85 886.922,1218.37 887.508,1219.69 888.094,1220.8 888.681,1220.91 889.267,1220.49 889.854,1221.65 890.44,1219.99 891.027,1221.3 891.613,1219.47 892.199,1220.56 892.786,1220.46 893.372,1218.54 893.959,1218.45 894.545,1218.44 895.131,1219.67 895.718,1218.16 896.304,1219.35 896.891,1219.41 897.477,1217.62 898.063,1220.12 898.65,1221.45 899.236,1216.65 899.823,1217.69 900.409,1216.43 900.996,1213.57 901.582,1216.35 902.168,1214.99 902.755,1212.06 903.341,1213.88 903.928,1213.71 904.514,1214.92 905.1,1214.86 905.687,1215.07 906.273,1212.68 906.86,1213.04 907.446,1213.12 908.032,1215.96 908.619,1214.41 909.205,1217.25 909.792,1215.97 910.378,1214.38 910.965,1211.88 911.551,1210.53 912.137,1212.06 912.724,1212.36 913.31,1211.33 913.897,1211.38 914.483,1211.4 915.069,1211.86 915.656,1210.55 916.242,1209.24 916.829,1210.86 917.415,1209.71 918.002,1210.08 918.588,1216.35 919.174,1213.47 919.761,1215.22 920.347,1216.67 920.934,1218.05 921.52,1218.07 922.106,1221.97 922.693,1224.1 923.279,1221.95 923.866,1223.32 924.452,1222.95 925.038,1221.15 925.625,1216.7 926.211,1215.18 926.798,1214.27 927.384,1214.64 927.971,1213.38 928.557,1213.42 929.143,1210.64 929.73,1210.8 930.316,1211.11 930.903,1207.32 931.489,1206.39 932.075,1206.9 932.662,1210.13 933.248,1213.39 933.835,1212.15 934.421,1210.94 935.007,1214.06 935.594,1214.12 936.18,1215.65 936.767,1215.59 937.353,1216.94 937.94,1215.68 938.526,1215.83 939.112,1216.04 939.699,1218.91 940.285,1218.97 940.872,1213.23 941.458,1217.58 942.044,1218.98 942.631,1220.15 943.217,1219.74 943.804,1218.2 944.39,1216.6 944.976,1215.25 945.563,1213.91 946.149,1215.65 946.736,1211.66 947.322,1206.27 947.909,1203.83 948.495,1201.59 949.081,1203.79 949.668,1204.69 950.254,1205.42 950.841,1203.05 951.427,1203.76 952.013,1205.7 952.6,1209.08 953.186,1209.71 953.773,1211.71 954.359,1213.28 954.945,1213.15 955.532,1211.67 956.118,1210.61 956.705,1209.36 957.291,1209.75 957.878,1211.5 958.464,1214.37 959.05,1215.93 959.637,1217.54 960.223,1218.79 960.81,1221.1 961.396,1220.76 961.982,1218.89 962.569,1217.47 963.155,1217.42 963.742,1216.25 964.328,1215.1 964.915,1213.5 965.501,1215.02 966.087,1216.32 966.674,1216.4 967.26,1213.98 967.847,1216.65 968.433,1217.8 969.019,1216.42 969.606,1213.67 970.192,1213.54 970.779,1212.32 971.365,1213.95 971.951,1212.78 972.538,1215.38 973.124,1215.58 973.711,1215.59 974.297,1213.98 974.884,1214.21 975.47,1214.24 976.056,1214.49 976.643,1215.68 977.229,1215.26 977.816,1215.08 978.402,1213.57 978.988,1212.42 979.575,1211.2 980.161,1210.16 980.748,1211.77 981.334,1210.66 981.92,1209.61 982.507,1215.74 983.093,1217.4 983.68,1217.21 984.266,1215.82 984.853,1214.52 985.439,1215.85 986.025,1216.21 986.612,1216 987.198,1218.62 987.785,1218.42 988.371,1219.67 988.957,1220.56 989.544,1220.06 990.13,1216.76 990.717,1216.54 991.303,1213.64 991.889,1213.8 992.476,1212.24 993.062,1212.31 993.649,1213.74 994.235,1213.81 994.822,1212.46 995.408,1216.64 995.994,1218.2 996.581,1219.54 997.167,1219.46 997.754,1223.26 998.34,1222.69 998.926,1221.15 999.513,1222.31 1000.1,1219.27 1000.69,1221.6 1001.27,1218.87 1001.86,1215.97 1002.44,1215.81 1003.03,1219.94 1003.62,1219.63 1004.2,1218.09 1004.79,1218.3 1005.38,1218.27 1005.96,1218.38 1006.55,1220.59 1007.14,1220.37 1007.72,1219.82 1008.31,1221.22 1008.9,1222.18 1009.48,1223.37 1010.07,1222.83 1010.65,1220.88 1011.24,1219.18 1011.83,1214.88 1012.41,1216.5 1013,1216.72 1013.59,1219.56 1014.17,1216.48 1014.76,1215.12 1015.35,1213.88 1015.93,1215.12 1016.52,1213.68 1017.11,1211.23 1017.69,1214.29 1018.28,1214.28 1018.86,1215.98 1019.45,1218.53 1020.04,1221.14 1020.62,1220.69 1021.21,1218.79 1021.8,1217.14 1022.38,1216.89 1022.97,1216.91 1023.56,1215.13 1024.14,1214.98 1024.73,1216.08 1025.32,1214.3 1025.9,1212.82 1026.49,1211.5 1027.07,1210.23 1027.66,1211.77 1028.25,1212.17 1028.83,1210.55 1029.42,1210.89 1030.01,1211.2 1030.59,1212.94 1031.18,1211.62 1031.77,1212.97 1032.35,1212.99 1032.94,1212.89 1033.52,1212.79 1034.11,1214.44 1034.7,1214.65 1035.28,1213.37 1035.87,1213.54 1036.46,1212.36 1037.04,1212.82 1037.63,1214.34 1038.22,1214.53 1038.8,1215.76 1039.39,1215.78 1039.98,1211.38 1040.56,1214.19 1041.15,1214.3 1041.73,1214.35 1042.32,1215.89 1042.91,1217.08 1043.49,1219.89 1044.08,1222.35 1044.67,1224.66 1045.25,1224.03 1045.84,1226.27 1046.43,1225.26 1047.01,1225.92 1047.6,1225.08 1048.19,1224.68 1048.77,1225.32 1049.36,1226.14 1049.94,1221.45 1050.53,1223.81 1051.12,1224.58 1051.7,1225.27 1052.29,1224.78 1052.88,1222.96 1053.46,1223.86 1054.05,1220.46 1054.64,1218.71 1055.22,1215.72 1055.81,1212.8 1056.39,1212.69 1056.98,1212.72 1057.57,1214 1058.15,1211.34 1058.74,1211.95 1059.33,1210.36 1059.91,1210.56 1060.5,1213.21 1061.09,1212.07 1061.67,1211.98 1062.26,1216.32 1062.85,1216.26 1063.43,1214.91 1064.02,1216.37 1064.6,1216.29 1065.19,1217.92 1065.78,1217.72 1066.36,1220.19 1066.95,1220.16 1067.54,1218.66 1068.12,1217.06 1068.71,1218.16 1069.3,1217.96 1069.88,1217.91 1070.47,1213.83 1071.06,1212.71 1071.64,1214.08 1072.23,1212.68 1072.81,1212.75 1073.4,1211.35 1073.99,1214.16 1074.57,1216.87 1075.16,1216.84 1075.75,1216.6 1076.33,1217.98 1076.92,1217.83 1077.51,1215.03 1078.09,1213.69 1078.68,1212.27 1079.26,1209.81 1079.85,1208.7 1080.44,1206.31 1081.02,1206.73 1081.61,1205.63 1082.2,1206.1 1082.78,1206.38 1083.37,1202.8 1083.96,1204.76 1084.54,1208.39 1085.13,1208.65 1085.72,1210.19 1086.3,1210.43 1086.89,1210.88 1087.47,1209.6 1088.06,1208.62 1088.65,1210.72 1089.23,1210.81 1089.82,1209.8 1090.41,1205.81 1090.99,1206.09 1091.58,1206.74 1092.17,1207.04 1092.75,1203.58 1093.34,1204.35 1093.93,1204.99 1094.51,1206.39 1095.1,1208.37 1095.68,1209.12 1096.27,1212.13 1096.86,1210.75 1097.44,1213.66 1098.03,1212.45 1098.62,1211.62 1099.2,1211.93 1099.79,1214.61 1100.38,1216.1 1100.96,1218.82 1101.55,1220.08 1102.14,1216.03 1102.72,1217.1 1103.31,1217.18 1103.89,1215.79 1104.48,1218.55 1105.07,1216.93 1105.65,1215.19 1106.24,1215.34 1106.83,1216.54 1107.41,1217.78 1108,1219.37 1108.59,1216.53 1109.17,1218.19 1109.76,1218.06 1110.34,1219.2 1110.93,1220.41 1111.52,1220.21 1112.1,1221 1112.69,1219.48 1113.28,1219.33 1113.86,1220.46 1114.45,1220.3 1115.04,1218.64 1115.62,1218.22 1116.21,1220.8 1116.8,1220.27 1117.38,1219.79 1117.97,1219.64 1118.55,1222.36 1119.14,1223.21 1119.73,1221.43 1120.31,1225.34 1120.9,1226.19 1121.49,1228.28 1122.07,1227.5 1122.66,1225.12 1123.25,1223.08 1123.83,1221.15 1124.42,1221.02 1125.01,1220.74 1125.59,1223.36 1126.18,1221.6 1126.76,1221.42 1127.35,1218.61 1127.94,1216.94 1128.52,1215.56 1129.11,1214.04 1129.7,1214.21 1130.28,1217.12 1130.87,1219.76 1131.46,1219.84 1132.04,1219.34 1132.63,1218.71 1133.21,1218.53 1133.8,1215.63 1134.39,1211.8 1134.97,1210.53 1135.56,1212.08 1136.15,1213.42 1136.73,1216.27 1137.32,1212.06 1137.91,1213.87 1138.49,1212.33 1139.08,1210.91 1139.67,1216.73 1140.25,1216.79 1140.84,1215.51 1141.42,1215.45 1142.01,1212.69 1142.6,1211.47 1143.18,1209.93 1143.77,1214.52 1144.36,1211.78 1144.94,1210.7 1145.53,1211.16 1146.12,1211.39 1146.7,1208.87 1147.29,1209.19 1147.88,1210.79 1148.46,1207.91 1149.05,1206.3 1149.63,1203.91 1150.22,1207.16 1150.81,1207.82 1151.39,1205.72 1151.98,1205.02 1152.57,1206.93 1153.15,1208.7 1153.74,1210.63 1154.33,1212.43 1154.91,1212.63 1155.5,1212.97 1156.09,1213.02 1156.67,1214.53 1157.26,1213.27 1157.84,1215.87 1158.43,1217.17 1159.02,1216.77 1159.6,1214.05 1160.19,1212.69 1160.78,1212.88 1161.36,1212.94 1161.95,1214.11 1162.54,1208.58 1163.12,1207.53 1163.71,1209.23 1164.29,1211.18 1164.88,1211.03 1165.47,1214.17 1166.05,1212.71 1166.64,1212.64 1167.23,1212.72 1167.81,1215.55 1168.4,1219.45 1168.99,1217.78 1169.57,1217.33 1170.16,1218.79 1170.75,1218.53 1171.33,1222.28 1171.92,1221.72 1172.5,1226.96 1173.09,1227.51 1173.68,1223.62 1174.26,1218.87 1174.85,1215.83 1175.44,1214.26 1176.02,1214.25 1176.61,1214.15 1177.2,1215.56 1177.78,1215.2 1178.37,1216.66 1178.96,1216.33 1179.54,1215.92 1180.13,1214.37 1180.71,1217.34 1181.3,1217.03 1181.89,1212.74 1182.47,1211.67 1183.06,1211.69 1183.65,1213.42 1184.23,1212.37 1184.82,1212.29 1185.41,1212.46 1185.99,1214.01 1186.58,1212.62 1187.16,1209.98 1187.75,1208.92 1188.34,1206.46 1188.92,1208.11 1189.51,1207.15 1190.1,1208.63 1190.68,1208.78 1191.27,1210.81 1191.86,1212.6 1192.44,1216.65 1193.03,1215.27 1193.62,1215.13 1194.2,1217.76 1194.79,1220.31 1195.37,1220.14 1195.96,1221.36 1196.55,1221.16 1197.13,1220.88 1197.72,1219.07 1198.31,1216.12 1198.89,1217.15 1199.48,1216.83 1200.07,1216.56 1200.65,1213.64 1201.24,1213.86 1201.83,1211.14 1202.41,1214.22 1203,1215.6 1203.58,1218.53 1204.17,1215.69 1204.76,1211.69 1205.34,1210.3 1205.93,1207.82 1206.52,1206.82 1207.1,1208.37 1207.69,1208.85 1208.28,1208.9 1208.86,1209.01 1209.45,1209.13 1210.03,1209.48 1210.62,1209.85 1211.21,1210.17 1211.79,1207.63 1212.38,1208.08 1212.97,1207.31 1213.55,1207.64 1214.14,1206.56 1214.73,1207.26 1215.31,1210.29 1215.9,1211.63 1216.49,1213.35 1217.07,1209.54 1217.66,1211.07 1218.24,1210.05 1218.83,1210.44 1219.42,1211.89 1220,1213.66 1220.59,1213.86 1221.18,1216.75 1221.76,1216.47 1222.35,1216.43 1222.94,1213.65 1223.52,1213.54 1224.11,1213.78 1224.7,1212.74 1225.28,1211.61 1225.87,1213.15 1226.45,1213.11 1227.04,1211.65 1227.63,1212.18 1228.21,1212.52 1228.8,1212.82 1229.39,1210.23 1229.97,1209.21 1230.56,1209.73 1231.15,1212.74 1231.73,1212.7 1232.32,1213 1232.91,1212.99 1233.49,1213.19 1234.08,1216.13 1234.66,1217.42 1235.25,1219.83 1235.84,1218.4 1236.42,1218.16 1237.01,1218.16 1237.6,1218.27 1238.18,1218.25 1238.77,1216.72 1239.36,1218.32 1239.94,1219.56 1240.53,1217.86 1241.11,1220.34 1241.7,1218.85 1242.29,1220.08 1242.87,1221 1243.46,1219.52 1244.05,1224.68 1244.63,1225.58 1245.22,1230.61 1245.81,1229.63 1246.39,1231.51 1246.98,1227.78 1247.57,1227.38 1248.15,1221.35 1248.74,1221.03 1249.32,1223.73 1249.91,1224.62 1250.5,1222.89 1251.08,1222.56 1251.67,1221.28 1252.26,1220.73 1252.84,1219.22 1253.43,1219.27 1254.02,1220.22 1254.6,1219.81 1255.19,1220.81 1255.78,1216.22 1256.36,1211.97 1256.95,1210.76 1257.53,1209.56 1258.12,1211 1258.71,1205.61 1259.29,1205.94 1259.88,1205.2 1260.47,1204.33 1261.05,1206.06 1261.64,1206.67 1262.23,1202.88 1262.81,1202.22 1263.4,1203.11 1263.98,1204.71 1264.57,1206.77 1265.16,1210.1 1265.74,1208.95 1266.33,1212.11 1266.92,1212.24 1267.5,1210.78 1268.09,1212.63 1268.68,1212.54 1269.26,1216.73 1269.85,1216.59 1270.44,1217.75 1271.02,1214.92 1271.61,1213.36 1272.19,1214.68 1272.78,1215.82 1273.37,1217.01 1273.95,1215.5 1274.54,1212.52 1275.13,1211.18 1275.71,1211.31 1276.3,1209.66 1276.89,1204.09 1277.47,1205.98 1278.06,1206.7 1278.65,1208.25 1279.23,1210.42 1279.82,1210.75 1280.4,1210.88 1280.99,1209.66 1281.58,1212.8 1282.16,1211.23 1282.75,1214.48 1283.34,1215.95 1283.92,1217.21 1284.51,1218.72 1285.1,1218.6 1285.68,1219.63 1286.27,1220.47 1286.86,1221.62 1287.44,1219.72 1288.03,1218.02 1288.61,1216.49 1289.2,1217.94 1289.79,1217.8 1290.37,1216.23 1290.96,1216.11 1291.55,1214.48 1292.13,1214.87 1292.72,1212.25 1293.31,1211.06 1293.89,1212.45 1294.48,1210.99 1295.06,1212.67 1295.65,1212.8 1296.24,1214.33 1296.82,1215.62 1297.41,1214.13 1298,1215.35 1298.58,1216.81 1299.17,1215.07 1299.76,1213.68 1300.34,1213.63 1300.93,1213.65 1301.52,1209.42 1302.1,1210.85 1302.69,1213.96 1303.27,1214.01 1303.86,1214.01 1304.45,1214.01 1305.03,1215.28 1305.62,1215.32 1306.21,1216.63 1306.79,1216.42 1307.38,1215.11 1307.97,1215.15 1308.55,1213.58 1309.14,1210.73 1309.73,1210.64 1310.31,1213.55 1310.9,1209.45 1311.48,1210.99 1312.07,1212.71 1312.66,1211.34 1313.24,1213.04 1313.83,1212.88 1314.42,1212.71 1315,1211.38 1315.59,1214.39 1316.18,1214.6 1316.76,1215.89 1317.35,1216.06 1317.93,1214.4 1318.52,1213.22 1319.11,1216.17 1319.69,1216.11 1320.28,1216.25 1320.87,1216.37 1321.45,1216.23 1322.04,1217.7 1322.63,1216.34 1323.21,1214.63 1323.8,1214.58 1324.39,1213.59 1324.97,1213.43 1325.56,1214.74 1326.14,1216.07 1326.73,1216.13 1327.32,1214.69 1327.9,1214.54 1328.49,1213.17 1329.08,1211.83 1329.66,1216.13 1330.25,1215.64 1330.84,1216.81 1331.42,1216.67 1332.01,1214.76 1332.6,1215.93 1333.18,1215.51 1333.77,1213.85 1334.35,1215.51 1334.94,1215.29 1335.53,1214.07 1336.11,1213.83 1336.7,1212.7 1337.29,1212.75 1337.87,1212.77 1338.46,1211.35 1339.05,1212.99 1339.63,1213.1 1340.22,1213.06 1340.8,1214.67 1341.39,1211.96 1341.98,1212.03 1342.56,1215.11 1343.15,1215.28 1343.74,1213.84 1344.32,1219.36 1344.91,1218.88 1345.5,1218.98 1346.08,1222.86 1346.67,1218.57 1347.26,1216.86 1347.84,1216.5 1348.43,1218.02 1349.01,1216.84 1349.6,1217.85 1350.19,1216.36 1350.77,1214.75 1351.36,1214.87 1351.95,1213.56 1352.53,1209.4 1353.12,1206.96 1353.71,1207.26 1354.29,1210.72 1354.88,1212.38 1355.47,1215.24 1356.05,1214.96 1356.64,1217.44 1357.22,1217.46 1357.81,1217.38 1358.4,1215.98 1358.98,1214.62 1359.57,1214.77 1360.16,1216.14 1360.74,1213.27 1361.33,1211.84 1361.92,1212.2 1362.5,1213.81 1363.09,1213.73 1363.68,1216.43 1364.26,1216.45 1364.85,1217.77 1365.43,1214.72 1366.02,1213.33 1366.61,1213.33 1367.19,1212.08 1367.78,1212.13 1368.37,1212.22 1368.95,1212.82 1369.54,1217.11 1370.13,1215.6 1370.71,1215.63 1371.3,1215.56 1371.88,1216.98 1372.47,1215.36 1373.06,1213.98 1373.64,1215.38 1374.23,1215.07 1374.82,1214.85 1375.4,1214.86 1375.99,1215.03 1376.58,1217.88 1377.16,1213.56 1377.75,1213.72 1378.34,1213.75 1378.92,1209.66 1379.51,1209.92 1380.09,1214.3 1380.68,1212.73 1381.27,1212.83 1381.85,1213.12 1382.44,1215.91 1383.03,1214.32 1383.61,1212.93 1384.2,1210.17 1384.79,1211.79 1385.37,1216.24 1385.96,1215.95 1386.55,1218.65 1387.13,1218.54 1387.72,1222.28 1388.3,1222.03 1388.89,1224.63 1389.48,1225.58 1390.06,1223.73 1390.65,1220.32 1391.24,1218.54 1391.82,1217.34 1392.41,1218.5 1393,1216.9 1393.58,1217.04 1394.17,1214.22 1394.75,1214.13 1395.34,1209.68 1395.93,1209.84 1396.51,1212.95 1397.1,1210.23 1397.69,1211.94 1398.27,1216.13 1398.86,1217.47 1399.45,1218.84 1400.03,1216.95 1400.62,1215.27 1401.21,1216.86 1401.79,1212.28 1402.38,1216.68 1402.96,1219.28 1403.55,1217.93 1404.14,1220.68 1404.72,1222.12 1405.31,1223.16 1405.9,1221.13 1406.48,1222.2 1407.07,1222.09 1407.66,1223.25 1408.24,1222.99 1408.83,1222.58 1409.42,1220.86 1410,1221.79 1410.59,1219.99 1411.17,1219.68 1411.76,1219.7 1412.35,1216.5 1412.93,1215.15 1413.52,1213.61 1414.11,1210.96 1414.69,1211.51 1415.28,1210.13 1415.87,1211.87 1416.45,1214.87 1417.04,1216.18 1417.63,1213.54 1418.21,1212.01 1418.8,1212.16 1419.38,1213.49 1419.97,1213.65 1420.56,1212.04 1421.14,1210.72 1421.73,1210.22 1422.32,1209.01 1422.9,1212.09 1423.49,1210.91 1424.08,1211.03 1424.66,1212.54 1425.25,1212.85 1425.83,1208.7 1426.42,1204.83 1427.01,1209.56 1427.59,1206.73 1428.18,1209.78 1428.77,1210.2 1429.35,1213.16 1429.94,1213.11 1430.53,1212.87 1431.11,1210.26 1431.7,1210.53 1432.29,1209.18 1432.87,1208.33 1433.46,1205.98 1434.04,1204.98 1434.63,1204.17 1435.22,1201.91 1435.8,1205.27 1436.39,1206.1 1436.98,1206.36 1437.56,1207.99 1438.15,1206.82 1438.74,1209.83 1439.32,1209.91 1439.91,1205.96 1440.5,1208 1441.08,1212.49 1441.67,1213.68 1442.25,1212.35 1442.84,1213.82 1443.43,1215.06 1444.01,1216.55 1444.6,1216.34 1445.19,1213.45 1445.77,1216.31 1446.36,1218.91 1446.95,1221.37 1447.53,1219.68 1448.12,1219.46 1448.7,1220.77 1449.29,1220.45 1449.88,1219.96 1450.46,1222.45 1451.05,1224.84 1451.64,1222.92 1452.22,1222.38 1452.81,1220.96 1453.4,1220.81 1453.98,1220.18 1454.57,1220.03 1455.16,1216.88 1455.74,1215.4 1456.33,1215.49 1456.91,1215.45 1457.5,1216.65 1458.09,1213.73 1458.67,1215.3 1459.26,1216.8 1459.85,1216.6 1460.43,1214.75 1461.02,1213.09 1461.61,1211.84 1462.19,1212.16 1462.78,1211 1463.37,1210.83 1463.95,1210.98 1464.54,1211.37 1465.12,1211.44 1465.71,1208.75 1466.3,1210.47 1466.88,1206.71 1467.47,1212.47 1468.06,1212.83 1468.64,1217.02 1469.23,1217 1469.82,1214.41 1470.4,1215.63 1470.99,1215.42 1471.57,1216.69 1472.16,1217.95 1472.75,1217.8 1473.33,1219.1 1473.92,1218.87 1474.51,1217.32 1475.09,1219.95 1475.68,1219.34 1476.27,1224.8 1476.85,1224.61 1477.44,1221.62 1478.03,1219.87 1478.61,1221.11 1479.2,1222.24 1479.78,1223.41 1480.37,1221.41 1480.96,1221.05 1481.54,1220.91 1482.13,1220.75 1482.72,1221.71 1483.3,1221.54 1483.89,1222.52 1484.48,1222.03 1485.06,1220.2 1485.65,1218.73 1486.24,1218.35 1486.82,1217.84 1487.41,1216.06 1487.99,1217.28 1488.58,1217.34 1489.17,1217.23 1489.75,1215.84 1490.34,1214.21 1490.93,1211.42 1491.51,1208.85 1492.1,1208.99 1492.69,1213.43 1493.27,1214.91 1493.86,1212.02 1494.45,1213.56 1495.03,1212.35 1495.62,1209.78 1496.2,1212.37 1496.79,1212.51 1497.38,1212.38 1497.96,1212.66 1498.55,1213.9 1499.14,1213.94 1499.72,1213.86 1500.31,1215.38 1500.9,1212.61 1501.48,1214 1502.07,1213.91 1502.65,1213.7 1503.24,1214.03 1503.83,1215.52 1504.41,1215.52 1505,1216.49 1505.59,1217.87 1506.17,1219.09 1506.76,1219.01 1507.35,1217.43 1507.93,1218.62 1508.52,1214.18 1509.11,1216.97 1509.69,1216.85 1510.28,1215.46 1510.86,1215.57 1511.45,1216.79 1512.04,1218.19 1512.62,1219.43 1513.21,1218.26 1513.8,1218.14 1514.38,1219.51 1514.97,1219.21 1515.56,1219.19 1516.14,1217.58 1516.73,1218.32 1517.32,1220.77 1517.9,1221.68 1518.49,1219.93 1519.07,1222.43 1519.66,1216.75 1520.25,1217.95 1520.83,1217.8 1521.42,1217.57 1522.01,1216.21 1522.59,1216.27 1523.18,1219.1 1523.77,1220.05 1524.35,1221.06 1524.94,1222.26 1525.52,1219.19 1526.11,1216.18 1526.7,1214.83 1527.28,1214.51 1527.87,1213.1 1528.46,1214.76 1529.04,1212.16 1529.63,1212.04 1530.22,1209.52 1530.8,1206.94 1531.39,1208.72 1531.98,1210.35 1532.56,1213.33 1533.15,1213.42 1533.73,1210.81 1534.32,1210.96 1534.91,1213.59 1535.49,1213.71 1536.08,1211.42 1536.67,1212.98 1537.25,1214.64 1537.84,1216.1 1538.43,1213.11 1539.01,1211.59 1539.6,1208.7 1540.19,1210.55 1540.77,1213.38 1541.36,1211.91 1541.94,1212.06 1542.53,1209.39 1543.12,1206.7 1543.7,1204.15 1544.29,1205.93 1544.88,1206.47 1545.46,1205.39 1546.05,1208.45 1546.64,1210.45 1547.22,1210.73 1547.81,1212.37 1548.4,1213.86 1548.98,1213.71 1549.57,1215.16 1550.15,1215.22 1550.74,1215.7 1551.33,1216.84 1551.91,1221.13 1552.5,1220.7 1553.09,1221.86 1553.67,1220.11 1554.26,1221.31 1554.85,1219.61 1555.43,1217.97 1556.02,1219.25 1556.6,1217.43 1557.19,1217.13 1557.78,1218.37 1558.36,1218.35 1558.95,1216.72 1559.54,1215.14 1560.12,1216.35 1560.71,1217.35 1561.3,1218.61 1561.88,1212.82 1562.47,1211.54 1563.06,1210.16 1563.64,1209.29 1564.23,1211.08 1564.81,1207.15 1565.4,1208.71 1565.99,1206.25 1566.57,1206.68 1567.16,1203.71 1567.75,1205.4 1568.33,1204.79 1568.92,1205.33 1569.51,1206.97 1570.09,1210.24 1570.68,1211.78 1571.27,1210.61 1571.85,1209.39 1572.44,1206.68 1573.02,1207.25 1573.61,1206.42 1574.2,1208.23 1574.78,1207.41 1575.37,1207.74 1575.96,1208.09 1576.54,1208.69 1577.13,1205.07 1577.72,1204.12 1578.3,1200.59 1578.89,1205.33 1579.47,1208.6 1580.06,1208.99 1580.65,1208.01 1581.23,1208.69 1581.82,1214.56 1582.41,1213.12 1582.99,1213.21 1583.58,1213.2 1584.17,1212.01 1584.75,1212.02 1585.34,1210.51 1585.93,1210.63 1586.51,1210.7 1587.1,1209.76 1587.68,1210.17 1588.27,1213.09 1588.86,1213.33 1589.44,1213.49 1590.03,1210.59 1590.62,1214.99 1591.2,1215.13 1591.79,1219.46 1592.38,1220.54 1592.96,1221.67 1593.55,1219.69 1594.14,1218.16 1594.72,1220.86 1595.31,1219.13 1595.89,1221.51 1596.48,1222.42 1597.07,1220.47 1597.65,1219.91 1598.24,1218.24 1598.83,1218.19 1599.41,1213.87 1600,1213.87 1600.59,1213.79 1601.17,1216.15 1601.76,1216.18 1602.34,1216.26 1602.93,1220.25 1603.52,1219.95 1604.1,1216.82 1604.69,1212.2 1605.28,1209.6 1605.86,1209.87 1606.45,1210 1607.04,1211.36 1607.62,1214.26 1608.21,1211.62 1608.8,1213.47 1609.38,1209.34 1609.97,1208.23 1610.55,1208.59 1611.14,1210.29 1611.73,1209.22 1612.31,1210.71 1612.9,1208.05 1613.49,1208.76 1614.07,1209.43 1614.66,1209.55 1615.25,1211.12 1615.83,1209.81 1616.42,1212.91 1617.01,1212.99 1617.59,1213.05 1618.18,1214.44 1618.76,1212.76 1619.35,1212.69 1619.94,1214.45 1620.52,1214.9 1621.11,1214.66 1621.7,1214.64 1622.28,1213.25 1622.87,1212.09 1623.46,1212.37 1624.04,1212.56 1624.63,1211.41 1625.22,1211.82 1625.8,1213.42 1626.39,1215.05 1626.97,1213.48 1627.56,1215.18 1628.15,1214.96 1628.73,1214.77 1629.32,1214.67 1629.91,1213.29 1630.49,1213.29 1631.08,1213.25 1631.67,1214.74 1632.25,1213.25 1632.84,1216.08 1633.42,1217.27 1634.01,1214.63 1634.6,1214.45 1635.18,1217.08 1635.77,1215.73 1636.36,1216.89 1636.94,1216.65 1637.53,1216.62 1638.12,1216.48 1638.7,1220.44 1639.29,1221.51 1639.88,1221.1 1640.46,1222.11 1641.05,1223.21 1641.63,1222.8 1642.22,1223.63 1642.81,1222.97 1643.39,1221.13 1643.98,1222.35 1644.57,1223.31 1645.15,1223.09 1645.74,1222.64 1646.33,1226.24 1646.91,1223.96 1647.5,1223.43 1648.09,1222.92 1648.67,1221.29 1649.26,1218.12 1649.84,1214.99 1650.43,1216.09 1651.02,1213.13 1651.6,1211.81 1652.19,1214.55 1652.78,1213 1653.36,1215.62 1653.95,1215.51 1654.54,1219.47 1655.12,1220.46 1655.71,1219.08 1656.29,1217.61 1656.88,1217.35 1657.47,1218.47 1658.05,1218.19 1658.64,1213.42 1659.23,1214.97 1659.81,1212.11 1660.4,1213.8 1660.99,1215.16 1661.57,1209.41 1662.16,1211.03 1662.75,1212.57 1663.33,1211.31 1663.92,1211.76 1664.5,1210.43 1665.09,1213.33 1665.68,1214.69 1666.26,1213.16 1666.85,1215.98 1667.44,1217.37 1668.02,1217.18 1668.61,1215.63 1669.2,1215.64 1669.78,1215.46 1670.37,1214.16 1670.96,1211.3 1671.54,1209.98 1672.13,1211.63 1672.71,1211.62 1673.3,1211.69 1673.89,1210.29 1674.47,1208.98 1675.06,1209.18 1675.65,1209.5 1676.23,1209.52 1676.82,1208.46 1677.41,1206.17 1677.99,1206.62 1678.58,1210.03 1679.17,1206.13 1679.75,1209.86 1680.34,1208.66 1680.92,1207.64 1681.51,1209.45 1682.1,1206.93 1682.68,1211.24 1683.27,1211.49 1683.86,1210.32 1684.44,1212.08 1685.03,1212.11 1685.62,1213.84 1686.2,1212.27 1686.79,1210.81 1687.37,1211.4 1687.96,1213.08 1688.55,1212.94 1689.13,1213.3 1689.72,1210.63 1690.31,1207.85 1690.89,1209.61 1691.48,1211.28 1692.07,1212.98 1692.65,1211.41 1693.24,1213.01 1693.83,1214.33 1694.41,1211.57 1695,1210.26 1695.58,1210.4 1696.17,1210.47 1696.76,1210.73 1697.34,1213.53 1697.93,1210.69 1698.52,1211.01 1699.1,1212.49 1699.69,1215.22 1700.28,1212.54 1700.86,1209.87 1701.45,1214.12 1702.04,1215.61 1702.62,1215.25 1703.21,1216.58 1703.79,1217.74 1704.38,1217.53 1704.97,1218.65 1705.55,1219.75 1706.14,1220.81 1706.73,1222.22 1707.31,1221.84 1707.9,1218.58 1708.49,1218.31 1709.07,1217.99 1709.66,1217.51 1710.24,1217.19 1710.83,1218.35 1711.42,1217.81 1712,1216.14 1712.59,1216.11 1713.18,1213.37 1713.76,1213.68 1714.35,1211.2 1714.94,1209.96 1715.52,1209.13 1716.11,1207.66 1716.7,1208.17 1717.28,1210.16 1717.87,1210.49 1718.45,1210.83 1719.04,1211.03 1719.63,1215.63 1720.21,1215.41 1720.8,1215.47 1721.39,1219.59 1721.97,1217.74 1722.56,1217.3 1723.15,1218.58 1723.73,1217.43 1724.32,1215.6 1724.91,1215.25 1725.49,1219.32 1726.08,1220.38 1726.66,1218.76 1727.25,1218.61 1727.84,1218.47 1728.42,1218.16 1729.01,1216.71 1729.6,1218.19 1730.18,1217.69 1730.77,1217.34 1731.36,1214.33 1731.94,1214.36 1732.53,1212.86 1733.11,1214.55 1733.7,1217.44 1734.29,1218.72 1734.87,1221.34 1735.46,1220.77 1736.05,1220.3 1736.63,1221.35 1737.22,1218.34 1737.81,1219.23 1738.39,1221.75 1738.98,1218.82 1739.57,1217.02 1740.15,1218.48 1740.74,1216.79 1741.32,1216.95 1741.91,1216.86 1742.5,1216.78 1743.08,1216.76 1743.67,1213.53 1744.26,1214.99 1744.84,1215 1745.43,1214.94 1746.02,1216.52 1746.6,1217.85 1747.19,1218.62 1747.78,1219.82 1748.36,1219.55 1748.95,1217.92 1749.53,1217.73 1750.12,1217.68 1750.71,1217.69 1751.29,1217.4 1751.88,1214.52 1752.47,1216.03 1753.05,1217.55 1753.64,1218.78 1754.23,1218.81 1754.81,1220.04 1755.4,1219.67 1755.99,1219.33 1756.57,1219.11 1757.16,1222.91 1757.74,1220.91 1758.33,1220.7 1758.92,1218.88 1759.5,1220.62 1760.09,1224.58 1760.68,1225.53 1761.26,1223.53 1761.85,1220.31 1762.44,1219.87 1763.02,1220.81 1763.61,1219.06 1764.19,1217.54 1764.78,1219.12 1765.37,1217.47 1765.95,1216.26 1766.54,1214.88 1767.13,1217.49 1767.71,1218.64 1768.3,1217.11 1768.89,1218.36 1769.47,1219.36 1770.06,1221.64 1770.65,1218.74 1771.23,1218.44 1771.82,1218.22 1772.4,1216.27 1772.99,1218.75 1773.58,1218.45 1774.16,1218.23 1774.75,1218.07 1775.34,1218.03 1775.92,1216.4 1776.51,1214.53 1777.1,1213.3 1777.68,1211.9 1778.27,1212.15 1778.86,1210.72 1779.44,1211.04 1780.03,1209.73 1780.61,1211.21 1781.2,1214.14 1781.79,1213.91 1782.37,1217.91 1782.96,1216.56 1783.55,1216.5 1784.13,1217.51 1784.72,1217.14 1785.31,1212.78 1785.89,1212.8 1786.48,1210.22 1787.06,1211.79 1787.65,1210.75 1788.24,1210.54 1788.82,1209.31 1789.41,1209.63 1790,1210.88 1790.58,1210.8 1791.17,1212.25 1791.76,1213.76 1792.34,1213.81 1792.93,1213.98 1793.52,1215.36 1794.1,1213.9 1794.69,1214.12 1795.27,1212.76 1795.86,1215.55 1796.45,1213.79 1797.03,1213.99 1797.62,1212.37 1798.21,1212.32 1798.79,1212.6 1799.38,1212.63 1799.97,1212.68 1800.55,1214.03 1801.14,1213.85 1801.73,1213.99 1802.31,1211.18 1802.9,1211.33 1803.48,1215.65 1804.07,1217.1 1804.66,1216.69 1805.24,1216.38 1805.83,1210.93 1806.42,1209.81 1807,1210.4 1807.59,1210.6 1808.18,1212.23 1808.76,1213.88 1809.35,1213.82 1809.94,1213.87 1810.52,1213.85 1811.11,1213.92 1811.69,1213.62 1812.28,1210.9 1812.87,1212.35 1813.45,1212.44 1814.04,1215.36 1814.63,1216.56 1815.21,1216.37 1815.8,1214.98 1816.39,1212 1816.97,1213.67 1817.56,1216.27 1818.14,1217.41 1818.73,1214.55 1819.32,1213.13 1819.9,1213.56 1820.49,1213.81 1821.08,1215.37 1821.66,1214.06 1822.25,1214.21 1822.84,1213 1823.42,1214.36 1824.01,1215.75 1824.6,1214.18 1825.18,1212.61 1825.77,1210.1 1826.35,1207.47 1826.94,1209.22 1827.53,1209.61 1828.11,1210.09 1828.7,1210.37 1829.29,1211.82 1829.87,1211.94 1830.46,1214.97 1831.05,1212.1 1831.63,1208.05 1832.22,1209.71 1832.81,1211.53 1833.39,1208.98 1833.98,1212.14 1834.56,1212.05 1835.15,1210.91 1835.74,1211.11 1836.32,1211.19 1836.91,1208.33 1837.5,1210 1838.08,1211.8 1838.67,1210.34 1839.26,1210.69 1839.84,1210.8 1840.43,1208.18 1841.01,1208.27 1841.6,1211.26 1842.19,1210.19 1842.77,1209.05 1843.36,1208.17 1843.95,1211.16 1844.53,1211.27 1845.12,1212.74 1845.71,1212.68 1846.29,1211.08 1846.88,1208.62 1847.47,1206.34 1848.05,1208.03 1848.64,1209.51 1849.22,1208.24 1849.81,1207.23 1850.4,1209.06 1850.98,1209.51 1851.57,1209.82 1852.16,1211.75 1852.74,1212.13 1853.33,1209.76 1853.92,1205.95 1854.5,1206.56 1855.09,1209.85 1855.68,1211.33 1856.26,1210.24 1856.85,1211.86 1857.43,1210.97 1858.02,1212.68 1858.61,1209.8 1859.19,1209.76 1859.78,1208.59 1860.37,1209.33 1860.95,1205.63 1861.54,1206.55 1862.13,1205.75 1862.71,1206.24 1863.3,1206.75 1863.88,1205.78 1864.47,1206.07 1865.06,1206.47 1865.64,1206.78 1866.23,1209.92 1866.82,1214.44 1867.4,1215.97 1867.99,1214.64 1868.58,1215.12 1869.16,1216.51 1869.75,1217.64 1870.34,1215.89 1870.92,1216.2 1871.51,1215.05 1872.09,1216.37 1872.68,1215.03 1873.27,1213.15 1873.85,1212.95 1874.44,1211.77 1875.03,1213.29 1875.61,1213.4 1876.2,1212.27 1876.79,1213.65 1877.37,1216.49 1877.96,1218.01 1878.55,1218.86 1879.13,1219.8 1879.72,1219.51 1880.3,1220.71 1880.89,1219.06 1881.48,1219.99 1882.06,1219.79 1882.65,1214.03 1883.24,1214.23 1883.82,1214.21 1884.41,1212.98 1885,1214.37 1885.58,1214.38 1886.17,1213.03 1886.76,1214.14 1887.34,1214.1 1887.93,1211.6 1888.51,1211.55 1889.1,1210.21 1889.69,1210.43 1890.27,1209.51 1890.86,1211.31 1891.45,1211.55 1892.03,1213.23 1892.62,1214.72 1893.21,1211.73 1893.79,1211.96 1894.38,1209.42 1894.96,1210.89 1895.55,1211.31 1896.14,1214.37 1896.72,1214.03 1897.31,1214.09 1897.9,1212.53 1898.48,1212.78 1899.07,1212.58 1899.66,1213.84 1900.24,1211.01 1900.83,1210.94 1901.42,1213.79 1902,1216.54 1902.59,1217.65 1903.17,1217.5 1903.76,1220.1 1904.35,1217.1 1904.93,1219.4 1905.52,1216.27 1906.11,1214.67 1906.69,1214.29 1907.28,1214.36 1907.87,1217.33 1908.45,1217.39 1909.04,1211.44 1909.63,1210.22 1910.21,1210.33 1910.8,1209.11 1911.38,1209.41 1911.97,1212.49 1912.56,1211.41 1913.14,1208.69 1913.73,1209.15 1914.32,1209.39 1914.9,1213.71 1915.49,1212.57 1916.08,1211.09 1916.66,1209.84 1917.25,1208.68 1917.83,1210.34 1918.42,1210.48 1919.01,1210.62 1919.59,1210.67 1920.18,1210.72 1920.77,1209.24 1921.35,1212.34 1921.94,1216.71 1922.53,1219.33 1923.11,1223.22 1923.7,1225.39 1924.29,1223.4 1924.87,1222.87 1925.46,1221.07 1926.04,1216.54 1926.63,1216.29 1927.22,1214.63 1927.8,1216.46 1928.39,1220.49 1928.98,1219.22 1929.56,1217.8 1930.15,1218.99 1930.74,1221.64 1931.32,1222.32 1931.91,1222.04 1932.5,1220.21 1933.08,1219.68 1933.67,1220.57 1934.25,1220.15 1934.84,1221.11 1935.43,1220.7 1936.01,1219.21 1936.6,1219.97 1937.19,1219.87 1937.77,1222.36 1938.36,1220.55 1938.95,1220.43 1939.53,1224.49 1940.12,1224.13 1940.71,1223.58 1941.29,1222.94 1941.88,1222.42 1942.46,1220.78 1943.05,1221.71 1943.64,1222.48 1944.22,1224.9 1944.81,1224.17 1945.4,1226.69 1945.98,1226.25 1946.57,1220.19 1947.16,1219.79 1947.74,1219.43 1948.33,1216.24 1948.91,1216.18 1949.5,1217.34 1950.09,1218.61 1950.67,1217.89 1951.26,1217.29 1951.85,1218.74 1952.43,1218.55 1953.02,1219.75 1953.61,1219.26 1954.19,1214.66 1954.78,1214.29 1955.37,1216.99 1955.95,1216.93 1956.54,1215.55 1957.12,1214.02 1957.71,1210.99 1958.3,1213.69 1958.88,1213.32 1959.47,1209.29 1960.06,1209.72 1960.64,1211.66 1961.23,1209.06 1961.82,1212.36 1962.4,1213.52 1962.99,1213.52 1963.58,1214.87 1964.16,1215.24 1964.75,1216.6 1965.33,1216.55 1965.92,1216.39 1966.51,1213.61 1967.09,1214.87 1967.68,1216.31 1968.27,1217.22 1968.85,1215.86 1969.44,1220.02 1970.03,1219.67 1970.61,1218.05 1971.2,1218.06 1971.78,1219.33 1972.37,1217.69 1972.96,1217.51 1973.54,1215.91 1974.13,1214.48 1974.72,1217.17 1975.3,1214.2 1975.89,1212.57 1976.48,1210.19 1977.06,1211.55 1977.65,1210.16 1978.24,1208.79 1978.82,1209.04 1979.41,1209.69 1979.99,1208.57 1980.58,1208.96 1981.17,1210.51 1981.75,1211.07 1982.34,1209.71 1982.93,1209.85 1983.51,1212.86 1984.1,1210.4 1984.69,1213.62 1985.27,1213.91 1985.86,1203.99 1986.45,1204.43 1987.03,1206.25 1987.62,1207.85 1988.2,1208.16 1988.79,1209.94 1989.38,1207.58 1989.96,1207.89 1990.55,1209.7 1991.14,1212.86 1991.72,1214.37 1992.31,1217.08 1992.9,1216.83 1993.48,1219.8 1994.07,1218.1 1994.65,1217.86 1995.24,1220.34 1995.83,1221.57 1996.41,1218.33 1997,1220.62 1997.59,1220.36 1998.17,1221.29 1998.76,1219.59 1999.35,1219.44 1999.93,1220.33 2000.52,1218.83 2001.11,1218.73 2001.69,1218.42 2002.28,1218.16 2002.86,1216.52 2003.45,1216.42 2004.04,1215.07 2004.62,1213.62 2005.21,1215.22 2005.8,1215.39 2006.38,1216.57 2006.97,1213.72 2007.56,1214.15 2008.14,1212.75 2008.73,1214.57 2009.32,1213.06 2009.9,1210.51 2010.49,1210.65 2011.07,1207.99 2011.66,1210.82 2012.25,1209.51 2012.83,1211.2 2013.42,1211.27 2014.01,1211.47 2014.59,1211.68 2015.18,1212.26 2015.77,1210.99 2016.35,1211.26 2016.94,1215.8 2017.53,1214.56 2018.11,1215.87 2018.7,1218.71 2019.28,1219.97 2019.87,1219.48 2020.46,1216.37 2021.04,1216.24 2021.63,1216.32 2022.22,1216.6 2022.8,1217.98 2023.39,1216.03 2023.98,1215.7 2024.56,1212.95 2025.15,1212.96 2025.73,1212.97 2026.32,1212.81 2026.91,1211.43 2027.49,1211.49 2028.08,1210.52 2028.67,1207.91 2029.25,1206.96 2029.84,1207.47 2030.43,1206.38 2031.01,1203.84 2031.6,1204.52 2032.19,1205.14 2032.77,1204.45 2033.36,1207.63 2033.94,1207.76 2034.53,1203.76 2035.12,1205.64 2035.7,1207.58 2036.29,1209.16 2036.88,1211.28 2037.46,1209.99 2038.05,1208.82 2038.64,1209.01 2039.22,1212.42 2039.81,1213.84 2040.4,1214 2040.98,1213.82 2041.57,1212.36 2042.15,1212.33 2042.74,1206.87 2043.33,1208.8 2043.91,1209.36 2044.5,1211.09 2045.09,1211.17 2045.67,1210.98 2046.26,1211.01 2046.85,1211.38 2047.43,1213.02 2048.02,1213.44 2048.6,1211.93 2049.19,1213.67 2049.78,1215.07 2050.36,1215.35 2050.95,1214.08 2051.54,1214.16 2052.12,1215.69 2052.71,1216 2053.3,1215.79 2053.88,1215.59 2054.47,1212.57 2055.06,1211.13 2055.64,1214.25 2056.23,1215.38 2056.81,1214 2057.4,1214.99 2057.99,1216.23 2058.57,1217.26 2059.16,1214.46 2059.75,1215.99 2060.33,1215.91 2060.92,1217.27 2061.51,1218.24 2062.09,1218.15 2062.68,1219.4 2063.27,1220.36 2063.85,1222.82 2064.44,1220.82 2065.02,1223.47 2065.61,1222.99 2066.2,1221.08 2066.78,1219.2 2067.37,1217.58 2067.96,1217.49 2068.54,1220.05 2069.13,1221.31 2069.72,1220.79 2070.3,1220.65 2070.89,1219.15 2071.48,1215.99 2072.06,1215.36 2072.65,1213.75 2073.23,1212.4 2073.82,1214.08 2074.41,1213.9 2074.99,1215.22 2075.58,1215.3 2076.17,1213.88 2076.75,1218.07 2077.34,1218.1 2077.93,1217.34 2078.51,1215.52 2079.1,1215.34 2079.68,1213.9 2080.27,1216.58 2080.86,1216.35 2081.44,1217.53 2082.03,1216.28 2082.62,1213.39 2083.2,1213.36 2083.79,1213.41 2084.38,1215.95 2084.96,1218.71 2085.55,1215.58 2086.14,1216.87 2086.72,1218.11 2087.31,1217.53 2087.89,1215.86 2088.48,1217.12 2089.07,1215.72 2089.65,1214.43 2090.24,1216.02 2090.83,1216.19 2091.41,1213.44 2092,1211.81 2092.59,1211.91 2093.17,1212.11 2093.76,1210.8 2094.35,1211.35 2094.93,1211.34 2095.52,1211.64 2096.1,1210.27 2096.69,1213.27 2097.28,1213.23 2097.86,1214.79 2098.45,1213.35 2099.04,1210.69 2099.62,1210.98 2100.21,1211.2 2100.8,1211.24 2101.38,1210.11 2101.97,1209.92 2102.55,1208.9 2103.14,1208.07 2103.73,1206.9 2104.31,1207.16 2104.9,1206.28 2105.49,1208.17 2106.07,1211.55 2106.66,1213.16 2107.25,1213.13 2107.83,1211.77 2108.42,1214.69 2109.01,1215.99 2109.59,1215.83 2110.18,1216.94 2110.76,1215.53 2111.35,1212.66 2111.94,1212.63 2112.52,1212.78 2113.11,1211.58 2113.7,1208.73 2114.28,1208.95 2114.87,1212.02 2115.46,1207.95 2116.04,1209.87 2116.63,1211.34 2117.22,1211.31 2117.8,1213.08 2118.39,1213.12 2118.97,1213.13 2119.56,1212.14 2120.15,1210.89 2120.73,1210.91 2121.32,1212.58 2121.91,1212.28 2122.49,1212.43 2123.08,1212.51 2123.67,1213.75 2124.25,1215.07 2124.84,1210.92 2125.42,1213.01 2126.01,1214.53 2126.6,1214.72 2127.18,1214.85 2127.77,1215.24 2128.36,1216.9 2128.94,1216.86 2129.53,1218.35 2130.12,1219.94 2130.7,1221.13 2131.29,1220.56 2131.88,1220.37 2132.46,1219.07 2133.05,1215.86 2133.63,1214.49 2134.22,1217.19 2134.81,1216.9 2135.39,1213.94 2135.98,1214.16 2136.57,1214.27 2137.15,1216.87 2137.74,1216.72 2138.33,1216.69 2138.91,1210.87 2139.5,1211.18 2140.09,1210.13 2140.67,1209.13 2141.26,1208.08 2141.84,1205.7 2142.43,1204.4 2143.02,1203.3 2143.6,1203.95 2144.19,1204.78 2144.78,1208.25 2145.36,1207.01 2145.95,1205.82 2146.54,1206.47 2147.12,1206.92 2147.71,1207.44 2148.3,1206.28 2148.88,1205.29 2149.47,1204.54 2150.05,1206.48 2150.64,1206.98 2151.23,1207.27 2151.81,1206.43 2152.4,1205.92 2152.99,1208.81 2153.57,1208.74 2154.16,1206.33 2154.75,1208.08 2155.33,1209.82 2155.92,1210.09 2156.5,1209 2157.09,1209.15 2157.68,1208.09 2158.26,1209.58 \"/>\n<path clip-path=\"url(#clip682)\" d=\"M986.025 1214.88 L986.612 1214.88 L987.198 1214.88 L987.785 1214.88 L988.371 1214.88 L988.957 1214.88 L989.544 1214.88 L990.13 1214.88 L990.717 1214.88 L991.303 1214.88 L991.889 1214.88 L992.476 1214.88 L993.062 1214.88 L993.649 1214.88 L994.235 1214.88 L994.822 1214.88 L995.408 1214.88 L995.994 1214.88 L996.581 1214.88 L997.167 1214.88 L997.754 1214.88 L998.34 1214.88 L998.926 1214.88 L999.513 1214.88 L1000.1 1214.88 L1000.69 1214.88 L1001.27 1214.88 L1001.86 1214.88 L1002.44 1214.88 L1003.03 1214.88 L1003.62 1214.88 L1004.2 1214.88 L1004.79 1214.88 L1005.38 1214.88 L1005.96 1214.88 L1006.55 1214.88 L1007.14 1214.88 L1007.72 1214.88 L1008.31 1214.88 L1008.9 1214.88 L1009.48 1214.88 L1010.07 1214.88 L1010.65 1214.88 L1011.24 1214.88 L1011.83 1214.88 L1012.41 1214.88 L1013 1214.88 L1013.59 1214.88 L1014.17 1214.88 L1014.76 1214.88 L1015.35 1214.88 L1015.93 1214.88 L1016.52 1214.88 L1017.11 1214.88 L1017.69 1214.88 L1018.28 1214.88 L1018.86 1214.88 L1019.45 1214.88 L1020.04 1214.88 L1020.62 1214.88 L1021.21 1214.88 L1021.8 1214.88 L1022.38 1214.88 L1022.97 1214.88 L1023.56 1214.88 L1024.14 1214.88 L1024.73 1214.88 L1025.32 1214.88 L1025.9 1214.88 L1026.49 1214.88 L1027.07 1214.88 L1027.66 1214.88 L1028.25 1214.88 L1028.83 1214.88 L1029.42 1214.88 L1030.01 1214.88 L1030.59 1214.88 L1031.18 1214.88 L1031.77 1214.88 L1032.35 1214.88 L1032.94 1214.88 L1033.52 1214.88 L1034.11 1214.88 L1034.7 1214.88 L1035.28 1214.88 L1035.87 1214.88 L1036.46 1214.88 L1037.04 1214.88 L1037.63 1214.88 L1038.22 1214.88 L1038.8 1214.88 L1039.39 1214.88 L1039.98 1214.88 L1040.56 1214.88 L1041.15 1214.88 L1041.73 1214.88 L1042.32 1214.88 L1042.91 1214.88 L1043.49 1214.88 L1044.08 1214.88 L1044.67 1214.88 L1045.25 1214.88 L1045.84 1214.88 L1046.43 1214.88 L1047.01 1214.88 L1047.6 1214.88 L1048.19 1214.88 L1048.77 1214.88 L1049.36 1214.88 L1049.94 1214.88 L1050.53 1214.88 L1051.12 1214.88 L1051.7 1214.88 L1052.29 1214.88 L1052.88 1214.88 L1053.46 1214.88 L1054.05 1214.88 L1054.64 1214.88 L1055.22 1214.88 L1055.81 1214.88 L1056.39 1214.88 L1056.98 1214.88 L1057.57 1214.88 L1058.15 1214.88 L1058.74 1214.88 L1059.33 1214.88 L1059.91 1214.88 L1060.5 1214.88 L1061.09 1214.88 L1061.67 1214.88 L1062.26 1214.88 L1062.85 1214.88 L1063.43 1214.88 L1064.02 1214.88 L1064.6 1214.88 L1065.19 1214.88 L1065.78 1214.88 L1066.36 1214.88 L1066.95 1214.88 L1067.54 1214.88 L1068.12 1214.88 L1068.71 1214.88 L1069.3 1214.88 L1069.88 1214.88 L1070.47 1214.88 L1071.06 1214.88 L1071.64 1214.88 L1072.23 1214.88 L1072.81 1214.88 L1073.4 1214.88 L1073.99 1214.88 L1074.57 1214.88 L1075.16 1214.88 L1075.75 1214.88 L1076.33 1214.88 L1076.92 1214.88 L1077.51 1214.88 L1078.09 1214.88 L1078.68 1214.88 L1079.26 1214.88 L1079.85 1214.88 L1080.44 1214.88 L1081.02 1214.88 L1081.61 1214.88 L1082.2 1214.88 L1082.78 1214.88 L1083.37 1214.88 L1083.96 1214.88 L1084.54 1214.88 L1085.13 1214.88 L1085.72 1214.88 L1086.3 1214.88 L1086.89 1214.88 L1087.47 1214.88 L1088.06 1214.88 L1088.65 1214.88 L1089.23 1214.88 L1089.82 1214.88 L1090.41 1214.88 L1090.99 1214.88 L1091.58 1214.88 L1092.17 1214.88 L1092.75 1214.88 L1093.34 1214.88 L1093.93 1214.88 L1094.51 1214.88 L1095.1 1214.88 L1095.68 1214.88 L1096.27 1214.88 L1096.86 1214.88 L1097.44 1214.88 L1098.03 1214.88 L1098.62 1214.88 L1099.2 1214.88 L1099.79 1214.88 L1100.38 1214.88 L1100.96 1214.88 L1101.55 1214.88 L1102.14 1214.88 L1102.72 1214.88 L1103.31 1214.88 L1103.89 1214.88 L1104.48 1214.88 L1105.07 1214.88 L1105.65 1214.88 L1106.24 1214.88 L1106.83 1214.88 L1107.41 1214.88 L1108 1214.88 L1108.59 1214.88 L1109.17 1214.88 L1109.76 1214.88 L1110.34 1214.88 L1110.93 1214.88 L1111.52 1214.88 L1112.1 1214.88 L1112.69 1214.88 L1113.28 1214.88 L1113.86 1214.88 L1114.45 1214.88 L1115.04 1214.88 L1115.62 1214.88 L1116.21 1214.88 L1116.8 1214.88 L1117.38 1214.88 L1117.97 1214.88 L1118.55 1214.88 L1119.14 1214.88 L1119.73 1214.88 L1120.31 1214.88 L1120.9 1214.88 L1121.49 1214.88 L1122.07 1214.88 L1122.66 1214.88 L1123.25 1214.88 L1123.83 1214.88 L1124.42 1214.88 L1125.01 1214.88 L1125.59 1214.88 L1126.18 1214.88 L1126.76 1214.88 L1127.35 1214.88 L1127.94 1214.88 L1128.52 1214.88 L1129.11 1214.88 L1129.7 1214.88 L1130.28 1214.88 L1130.87 1214.88 L1131.46 1214.88 L1132.04 1214.88 L1132.63 1214.88 L1133.21 1214.88 L1133.8 1214.88 L1134.39 1214.88 L1134.97 1214.88 L1135.56 1214.88 L1136.15 1214.88 L1136.73 1214.88 L1137.32 1214.88 L1137.91 1214.88 L1138.49 1214.88 L1139.08 1214.88 L1139.67 1214.88 L1140.25 1214.88 L1140.84 1214.88 L1141.42 1214.88 L1142.01 1214.88 L1142.6 1214.88 L1143.18 1214.88 L1143.77 1214.88 L1144.36 1214.88 L1144.94 1214.88 L1145.53 1214.88 L1146.12 1214.88 L1146.7 1214.88 L1147.29 1214.88 L1147.88 1214.88 L1148.46 1214.88 L1149.05 1214.88 L1149.63 1214.88 L1150.22 1214.88 L1150.81 1214.88 L1151.39 1214.88 L1151.98 1214.88 L1152.57 1214.88 L1153.15 1214.88 L1153.74 1214.88 L1154.33 1214.88 L1154.91 1214.88 L1155.5 1214.88 L1156.09 1214.88 L1156.67 1214.88 L1157.26 1214.88 L1157.84 1214.88 L1158.43 1214.88 L1159.02 1214.88 L1159.6 1214.88 L1160.19 1214.88 L1160.78 1214.88 L1161.36 1214.88 L1161.95 1214.88 L1162.54 1214.88 L1163.12 1214.88 L1163.71 1214.88 L1164.29 1214.88 L1164.88 1214.88 L1165.47 1214.88 L1166.05 1214.88 L1166.64 1214.88 L1167.23 1214.88 L1167.81 1214.88 L1168.4 1214.88 L1168.99 1214.88 L1169.57 1214.88 L1170.16 1214.88 L1170.75 1214.88 L1171.33 1214.88 L1171.92 1214.88 L1172.5 1214.88 L1173.09 1214.88 L1173.68 1214.88 L1174.26 1214.88 L1174.85 1214.88 L1175.44 1214.88 L1176.02 1214.88 L1176.61 1214.88 L1177.2 1214.88 L1177.78 1214.88 L1178.37 1214.88 L1178.96 1214.88 L1179.54 1214.88 L1180.13 1214.88 L1180.71 1214.88 L1181.3 1214.88 L1181.89 1214.88 L1182.47 1214.88 L1183.06 1214.88 L1183.65 1214.88 L1184.23 1214.88 L1184.82 1214.88 L1185.41 1214.88 L1185.99 1214.88 L1186.58 1214.88 L1187.16 1214.88 L1187.75 1214.88 L1188.34 1214.88 L1188.92 1214.88 L1189.51 1214.88 L1190.1 1214.88 L1190.68 1214.88 L1191.27 1214.88 L1191.86 1214.88 L1192.44 1214.88 L1193.03 1214.88 L1193.62 1214.88 L1194.2 1214.88 L1194.79 1214.88 L1195.37 1214.88 L1195.96 1214.88 L1196.55 1214.88 L1197.13 1214.88 L1197.72 1214.88 L1198.31 1214.88 L1198.89 1214.88 L1199.48 1214.88 L1200.07 1214.88 L1200.65 1214.88 L1201.24 1214.88 L1201.83 1214.88 L1202.41 1214.88 L1203 1214.88 L1203.58 1214.88 L1204.17 1214.88 L1204.76 1214.88 L1205.34 1214.88 L1205.93 1214.88 L1206.52 1214.88 L1207.1 1214.88 L1207.69 1214.88 L1208.28 1214.88 L1208.86 1214.88 L1209.45 1214.88 L1210.03 1214.88 L1210.62 1214.88 L1211.21 1214.88 L1211.79 1214.88 L1212.38 1214.88 L1212.97 1214.88 L1213.55 1214.88 L1214.14 1214.88 L1214.73 1214.88 L1215.31 1214.88 L1215.9 1214.88 L1216.49 1214.88 L1217.07 1214.88 L1217.66 1214.88 L1218.24 1214.88 L1218.83 1214.88 L1219.42 1214.88 L1220 1214.88 L1220.59 1214.88 L1221.18 1214.88 L1221.76 1214.88 L1222.35 1214.88 L1222.94 1214.88 L1223.52 1214.88 L1224.11 1214.88 L1224.7 1214.88 L1225.28 1214.88 L1225.87 1214.88 L1226.45 1214.88 L1227.04 1214.88 L1227.63 1214.88 L1228.21 1214.88 L1228.8 1214.88 L1229.39 1214.88 L1229.97 1214.88 L1230.56 1214.88 L1231.15 1214.88 L1231.73 1214.88 L1232.32 1214.88 L1232.91 1214.88 L1233.49 1214.88 L1234.08 1214.88 L1234.66 1214.88 L1235.25 1214.88 L1235.84 1214.88 L1236.42 1214.88 L1237.01 1214.88 L1237.6 1214.88 L1238.18 1214.88 L1238.77 1214.88 L1239.36 1214.88 L1239.94 1214.88 L1240.53 1214.88 L1241.11 1214.88 L1241.7 1214.88 L1242.29 1214.88 L1242.87 1214.88 L1243.46 1214.88 L1244.05 1214.88 L1244.63 1214.88 L1245.22 1214.88 L1245.81 1214.88 L1246.39 1214.88 L1246.98 1214.88 L1247.57 1214.88 L1248.15 1214.88 L1248.74 1214.88 L1249.32 1214.88 L1249.91 1214.88 L1250.5 1214.88 L1251.08 1214.88 L1251.67 1214.88 L1252.26 1214.88 L1252.84 1214.88 L1253.43 1214.88 L1254.02 1214.88 L1254.6 1214.88 L1255.19 1214.88 L1255.78 1214.88 L1256.36 1214.88 L1256.95 1214.88 L1257.53 1214.88 L1258.12 1214.88 L1258.71 1214.88 L1259.29 1214.88 L1259.88 1214.88 L1260.47 1214.88 L1261.05 1214.88 L1261.64 1214.88 L1262.23 1214.88 L1262.81 1214.88 L1263.4 1214.88 L1263.98 1214.88 L1264.57 1214.88 L1265.16 1214.88 L1265.74 1214.88 L1266.33 1214.88 L1266.92 1214.88 L1267.5 1214.88 L1268.09 1214.88 L1268.68 1214.88 L1269.26 1214.88 L1269.85 1214.88 L1270.44 1214.88 L1271.02 1214.88 L1271.61 1214.88 L1272.19 1214.88 L1272.78 1214.88 L1273.37 1214.88 L1273.95 1214.88 L1274.54 1214.88 L1275.13 1214.88 L1275.71 1214.88 L1276.3 1214.88 L1276.89 1214.88 L1277.47 1214.88 L1278.06 1214.88 L1278.65 1214.88 L1279.23 1214.88 L1279.82 1214.88 L1280.4 1214.88 L1280.99 1214.88 L1281.58 1214.88 L1282.16 1214.88 L1282.75 1214.88 L1283.34 1214.88 L1283.92 1214.88 L1284.51 1214.88 L1285.1 1214.88 L1285.68 1214.88 L1286.27 1214.88 L1286.86 1214.88 L1287.44 1214.88 L1288.03 1214.88 L1288.61 1214.88 L1289.2 1214.88 L1289.79 1214.88 L1290.37 1214.88 L1290.96 1214.88 L1291.55 1214.88 L1292.13 1214.88 L1292.72 1214.88 L1293.31 1214.88 L1293.89 1214.88 L1294.48 1214.88 L1295.06 1214.88 L1295.65 1214.88 L1296.24 1214.88 L1296.82 1214.88 L1297.41 1214.88 L1298 1214.88 L1298.58 1214.88 L1299.17 1214.88 L1299.76 1214.88 L1300.34 1214.88 L1300.93 1214.88 L1301.52 1214.88 L1302.1 1214.88 L1302.69 1214.88 L1303.27 1214.88 L1303.86 1214.88 L1304.45 1214.88 L1305.03 1214.88 L1305.62 1214.88 L1306.21 1214.88 L1306.79 1214.88 L1307.38 1214.88 L1307.97 1214.88 L1308.55 1214.88 L1309.14 1214.88 L1309.73 1214.88 L1310.31 1214.88 L1310.9 1214.88 L1311.48 1214.88 L1312.07 1214.88 L1312.66 1214.88 L1313.24 1214.88 L1313.83 1214.88 L1314.42 1214.88 L1315 1214.88 L1315.59 1214.88 L1316.18 1214.88 L1316.76 1214.88 L1317.35 1214.88 L1317.93 1214.88 L1318.52 1214.88 L1319.11 1214.88 L1319.69 1214.88 L1320.28 1214.88 L1320.87 1214.88 L1321.45 1214.88 L1322.04 1214.88 L1322.63 1214.88 L1323.21 1214.88 L1323.8 1214.88 L1324.39 1214.88 L1324.97 1214.88 L1325.56 1214.88 L1326.14 1214.88 L1326.73 1214.88 L1327.32 1214.88 L1327.9 1214.88 L1328.49 1214.88 L1329.08 1214.88 L1329.66 1214.88 L1330.25 1214.88 L1330.84 1214.88 L1331.42 1214.88 L1332.01 1214.88 L1332.6 1214.88 L1333.18 1214.88 L1333.77 1214.88 L1334.35 1214.88 L1334.94 1214.88 L1335.53 1214.88 L1336.11 1214.88 L1336.7 1214.88 L1337.29 1214.88 L1337.87 1214.88 L1338.46 1214.88 L1339.05 1214.88 L1339.63 1214.88 L1340.22 1214.88 L1340.8 1214.88 L1341.39 1214.88 L1341.98 1214.88 L1342.56 1214.88 L1343.15 1214.88 L1343.74 1214.88 L1344.32 1214.88 L1344.91 1214.88 L1345.5 1214.88 L1346.08 1214.88 L1346.67 1214.88 L1347.26 1214.88 L1347.84 1214.88 L1348.43 1214.88 L1349.01 1214.88 L1349.6 1214.88 L1350.19 1214.88 L1350.77 1214.88 L1351.36 1214.88 L1351.95 1214.88 L1352.53 1214.88 L1353.12 1214.88 L1353.71 1214.88 L1354.29 1214.88 L1354.88 1214.88 L1355.47 1214.88 L1356.05 1214.88 L1356.64 1214.88 L1357.22 1214.88 L1357.81 1214.88 L1358.4 1214.88 L1358.98 1214.88 L1359.57 1214.88 L1360.16 1214.88 L1360.74 1214.88 L1361.33 1214.88 L1361.92 1214.88 L1362.5 1214.88 L1363.09 1214.88 L1363.68 1214.88 L1364.26 1214.88 L1364.85 1214.88 L1365.43 1214.88 L1366.02 1214.88 L1366.61 1214.88 L1367.19 1214.88 L1367.78 1214.88 L1368.37 1214.88 L1368.95 1214.88 L1369.54 1214.88 L1370.13 1214.88 L1370.71 1214.88 L1371.3 1214.88 L1371.88 1214.88 L1372.47 1214.88 L1373.06 1214.88 L1373.64 1214.88 L1374.23 1214.88 L1374.82 1214.88 L1375.4 1214.88 L1375.99 1214.88 L1376.58 1214.88 L1377.16 1214.88 L1377.75 1214.88 L1378.34 1214.88 L1378.92 1214.88 L1379.51 1214.88 L1380.09 1214.88 L1380.68 1214.88 L1381.27 1214.88 L1381.85 1214.88 L1382.44 1214.88 L1383.03 1214.88 L1383.61 1214.88 L1384.2 1214.88 L1384.79 1214.88 L1385.37 1214.88 L1385.96 1214.88 L1386.55 1214.88 L1387.13 1214.88 L1387.72 1214.88 L1388.3 1214.88 L1388.89 1214.88 L1389.48 1214.88 L1390.06 1214.88 L1390.65 1214.88 L1391.24 1214.88 L1391.82 1214.88 L1392.41 1214.88 L1393 1214.88 L1393.58 1214.88 L1394.17 1214.88 L1394.75 1214.88 L1395.34 1214.88 L1395.93 1214.88 L1396.51 1214.88 L1397.1 1214.88 L1397.69 1214.88 L1398.27 1214.88 L1398.86 1214.88 L1399.45 1214.88 L1400.03 1214.88 L1400.62 1214.88 L1401.21 1214.88 L1401.79 1214.88 L1402.38 1214.88 L1402.96 1214.88 L1403.55 1214.88 L1404.14 1214.88 L1404.72 1214.88 L1405.31 1214.88 L1405.9 1214.88 L1406.48 1214.88 L1407.07 1214.88 L1407.66 1214.88 L1408.24 1214.88 L1408.83 1214.88 L1409.42 1214.88 L1410 1214.88 L1410.59 1214.88 L1411.17 1214.88 L1411.76 1214.88 L1412.35 1214.88 L1412.93 1214.88 L1413.52 1214.88 L1414.11 1214.88 L1414.69 1214.88 L1415.28 1214.88 L1415.87 1214.88 L1416.45 1214.88 L1417.04 1214.88 L1417.63 1214.88 L1418.21 1214.88 L1418.8 1214.88 L1419.38 1214.88 L1419.97 1214.88 L1420.56 1214.88 L1421.14 1214.88 L1421.73 1214.88 L1422.32 1214.88 L1422.9 1214.88 L1423.49 1214.88 L1424.08 1214.88 L1424.66 1214.88 L1425.25 1214.88 L1425.83 1214.88 L1426.42 1214.88 L1427.01 1214.88 L1427.59 1214.88 L1428.18 1214.88 L1428.77 1214.88 L1429.35 1214.88 L1429.94 1214.88 L1430.53 1214.88 L1431.11 1214.88 L1431.7 1214.88 L1432.29 1214.88 L1432.87 1214.88 L1433.46 1214.88 L1434.04 1214.88 L1434.63 1214.88 L1435.22 1214.88 L1435.8 1214.88 L1436.39 1214.88 L1436.98 1214.88 L1437.56 1214.88 L1438.15 1214.88 L1438.74 1214.88 L1439.32 1214.88 L1439.91 1214.88 L1440.5 1214.88 L1441.08 1214.88 L1441.67 1214.88 L1442.25 1214.88 L1442.84 1214.88 L1443.43 1214.88 L1444.01 1214.88 L1444.6 1214.88 L1445.19 1214.88 L1445.77 1214.88 L1446.36 1214.88 L1446.95 1214.88 L1447.53 1214.88 L1448.12 1214.88 L1448.7 1214.88 L1449.29 1214.88 L1449.88 1214.88 L1450.46 1214.88 L1451.05 1214.88 L1451.64 1214.88 L1452.22 1214.88 L1452.81 1214.88 L1453.4 1214.88 L1453.98 1214.88 L1454.57 1214.88 L1455.16 1214.88 L1455.74 1214.88 L1456.33 1214.88 L1456.91 1214.88 L1457.5 1214.88 L1458.09 1214.88 L1458.67 1214.88 L1459.26 1214.88 L1459.85 1214.88 L1460.43 1214.88 L1461.02 1214.88 L1461.61 1214.88 L1462.19 1214.88 L1462.78 1214.88 L1463.37 1214.88 L1463.95 1214.88 L1464.54 1214.88 L1465.12 1214.88 L1465.71 1214.88 L1466.3 1214.88 L1466.88 1214.88 L1467.47 1214.88 L1468.06 1214.88 L1468.64 1214.88 L1469.23 1214.88 L1469.82 1214.88 L1470.4 1214.88 L1470.99 1214.88 L1471.57 1214.88 L1472.16 1214.88 L1472.75 1214.88 L1473.33 1214.88 L1473.92 1214.88 L1474.51 1214.88 L1475.09 1214.88 L1475.68 1214.88 L1476.27 1214.88 L1476.85 1214.88 L1477.44 1214.88 L1478.03 1214.88 L1478.61 1214.88 L1479.2 1214.88 L1479.78 1214.88 L1480.37 1214.88 L1480.96 1214.88 L1481.54 1214.88 L1482.13 1214.88 L1482.72 1214.88 L1483.3 1214.88 L1483.89 1214.88 L1484.48 1214.88 L1485.06 1214.88 L1485.65 1214.88 L1486.24 1214.88 L1486.82 1214.88 L1487.41 1214.88 L1487.99 1214.88 L1488.58 1214.88 L1489.17 1214.88 L1489.75 1214.88 L1490.34 1214.88 L1490.93 1214.88 L1491.51 1214.88 L1492.1 1214.88 L1492.69 1214.88 L1493.27 1214.88 L1493.86 1214.88 L1494.45 1214.88 L1495.03 1214.88 L1495.62 1214.88 L1496.2 1214.88 L1496.79 1214.88 L1497.38 1214.88 L1497.96 1214.88 L1498.55 1214.88 L1499.14 1214.88 L1499.72 1214.88 L1500.31 1214.88 L1500.9 1214.88 L1501.48 1214.88 L1502.07 1214.88 L1502.65 1214.88 L1503.24 1214.88 L1503.83 1214.88 L1504.41 1214.88 L1505 1214.88 L1505.59 1214.88 L1506.17 1214.88 L1506.76 1214.88 L1507.35 1214.88 L1507.93 1214.88 L1508.52 1214.88 L1509.11 1214.88 L1509.69 1214.88 L1510.28 1214.88 L1510.86 1214.88 L1511.45 1214.88 L1512.04 1214.88 L1512.62 1214.88 L1513.21 1214.88 L1513.8 1214.88 L1514.38 1214.88 L1514.97 1214.88 L1515.56 1214.88 L1516.14 1214.88 L1516.73 1214.88 L1517.32 1214.88 L1517.9 1214.88 L1518.49 1214.88 L1519.07 1214.88 L1519.66 1214.88 L1520.25 1214.88 L1520.83 1214.88 L1521.42 1214.88 L1522.01 1214.88 L1522.59 1214.88 L1523.18 1214.88 L1523.77 1214.88 L1524.35 1214.88 L1524.94 1214.88 L1525.52 1214.88 L1526.11 1214.88 L1526.7 1214.88 L1527.28 1214.88 L1527.87 1214.88 L1528.46 1214.88 L1529.04 1214.88 L1529.63 1214.88 L1530.22 1214.88 L1530.8 1214.88 L1531.39 1214.88 L1531.98 1214.88 L1532.56 1214.88 L1533.15 1214.88 L1533.73 1214.88 L1534.32 1214.88 L1534.91 1214.88 L1535.49 1214.88 L1536.08 1214.88 L1536.67 1214.88 L1537.25 1214.88 L1537.84 1214.88 L1538.43 1214.88 L1539.01 1214.88 L1539.6 1214.88 L1540.19 1214.88 L1540.77 1214.88 L1541.36 1214.88 L1541.94 1214.88 L1542.53 1214.88 L1543.12 1214.88 L1543.7 1214.88 L1544.29 1214.88 L1544.88 1214.88 L1545.46 1214.88 L1546.05 1214.88 L1546.64 1214.88 L1547.22 1214.88 L1547.81 1214.88 L1548.4 1214.88 L1548.98 1214.88 L1549.57 1214.88 L1550.15 1214.88 L1550.74 1214.88 L1551.33 1214.88 L1551.91 1214.88 L1552.5 1214.88 L1553.09 1214.88 L1553.67 1214.88 L1554.26 1214.88 L1554.85 1214.88 L1555.43 1214.88 L1556.02 1214.88 L1556.6 1214.88 L1557.19 1214.88 L1557.78 1214.88 L1558.36 1214.88 L1558.95 1214.88 L1559.54 1214.88 L1560.12 1214.88 L1560.71 1214.88 L1561.3 1214.88 L1561.88 1214.88 L1562.47 1214.88 L1563.06 1214.88 L1563.64 1214.88 L1564.23 1214.88 L1564.81 1214.88 L1565.4 1214.88 L1565.99 1214.88 L1566.57 1214.88 L1567.16 1214.88 L1567.75 1214.88 L1568.33 1214.88 L1568.92 1214.88 L1569.51 1214.88 L1570.09 1214.88 L1570.68 1214.88 L1571.27 1214.88 L1571.85 1214.88 L1572.44 1214.88 L1573.02 1214.88 L1573.61 1214.88 L1574.2 1214.88 L1574.78 1214.88 L1575.37 1214.88 L1575.96 1214.88 L1576.54 1214.88 L1577.13 1214.88 L1577.72 1214.88 L1578.3 1214.88 L1578.89 1214.88 L1579.47 1214.88 L1580.06 1214.88 L1580.65 1214.88 L1581.23 1214.88 L1581.82 1214.88 L1582.41 1214.88 L1582.99 1214.88 L1583.58 1214.88 L1584.17 1214.88 L1584.75 1214.88 L1585.34 1214.88 L1585.93 1214.88 L1586.51 1214.88 L1587.1 1214.88 L1587.68 1214.88 L1588.27 1214.88 L1588.86 1214.88 L1589.44 1214.88 L1590.03 1214.88 L1590.62 1214.88 L1591.2 1214.88 L1591.79 1214.88 L1592.38 1214.88 L1592.96 1214.88 L1593.55 1214.88 L1594.14 1214.88 L1594.72 1214.88 L1595.31 1214.88 L1595.89 1214.88 L1596.48 1214.88 L1597.07 1214.88 L1597.65 1214.88 L1598.24 1214.88 L1598.83 1214.88 L1599.41 1214.88 L1600 1214.88 L1600.59 1214.88 L1601.17 1214.88 L1601.76 1214.88 L1602.34 1214.88 L1602.93 1214.88 L1603.52 1214.88 L1604.1 1214.88 L1604.69 1214.88 L1605.28 1214.88 L1605.86 1214.88 L1606.45 1214.88 L1607.04 1214.88 L1607.62 1214.88 L1608.21 1214.88 L1608.8 1214.88 L1609.38 1214.88 L1609.97 1214.88 L1610.55 1214.88 L1611.14 1214.88 L1611.73 1214.88 L1612.31 1214.88 L1612.9 1214.88 L1613.49 1214.88 L1614.07 1214.88 L1614.66 1214.88 L1615.25 1214.88 L1615.83 1214.88 L1616.42 1214.88 L1617.01 1214.88 L1617.59 1214.88 L1618.18 1214.88 L1618.76 1214.88 L1619.35 1214.88 L1619.94 1214.88 L1620.52 1214.88 L1621.11 1214.88 L1621.7 1214.88 L1622.28 1214.88 L1622.87 1214.88 L1623.46 1214.88 L1624.04 1214.88 L1624.63 1214.88 L1625.22 1214.88 L1625.8 1214.88 L1626.39 1214.88 L1626.97 1214.88 L1627.56 1214.88 L1628.15 1214.88 L1628.73 1214.88 L1629.32 1214.88 L1629.91 1214.88 L1630.49 1214.88 L1631.08 1214.88 L1631.67 1214.88 L1632.25 1214.88 L1632.84 1214.88 L1633.42 1214.88 L1634.01 1214.88 L1634.6 1214.88 L1635.18 1214.88 L1635.77 1214.88 L1636.36 1214.88 L1636.94 1214.88 L1637.53 1214.88 L1638.12 1214.88 L1638.7 1214.88 L1639.29 1214.88 L1639.88 1214.88 L1640.46 1214.88 L1641.05 1214.88 L1641.63 1214.88 L1642.22 1214.88 L1642.81 1214.88 L1643.39 1214.88 L1643.98 1214.88 L1644.57 1214.88 L1645.15 1214.88 L1645.74 1214.88 L1646.33 1214.88 L1646.91 1214.88 L1647.5 1214.88 L1648.09 1214.88 L1648.67 1214.88 L1649.26 1214.88 L1649.84 1214.88 L1650.43 1214.88 L1651.02 1214.88 L1651.6 1214.88 L1652.19 1214.88 L1652.78 1214.88 L1653.36 1214.88 L1653.95 1214.88 L1654.54 1214.88 L1655.12 1214.88 L1655.71 1214.88 L1656.29 1214.88 L1656.88 1214.88 L1657.47 1214.88 L1658.05 1214.88 L1658.64 1214.88 L1659.23 1214.88 L1659.81 1214.88 L1660.4 1214.88 L1660.99 1214.88 L1661.57 1214.88 L1662.16 1214.88 L1662.75 1214.88 L1663.33 1214.88 L1663.92 1214.88 L1664.5 1214.88 L1665.09 1214.88 L1665.68 1214.88 L1666.26 1214.88 L1666.85 1214.88 L1667.44 1214.88 L1668.02 1214.88 L1668.61 1214.88 L1669.2 1214.88 L1669.78 1214.88 L1670.37 1214.88 L1670.96 1214.88 L1671.54 1214.88 L1672.13 1214.88 L1672.71 1214.88 L1673.3 1214.88 L1673.89 1214.88 L1674.47 1214.88 L1675.06 1214.88 L1675.65 1214.88 L1676.23 1214.88 L1676.82 1214.88 L1677.41 1214.88 L1677.99 1214.88 L1678.58 1214.88 L1679.17 1214.88 L1679.75 1214.88 L1680.34 1214.88 L1680.92 1214.88 L1681.51 1214.88 L1682.1 1214.88 L1682.68 1214.88 L1683.27 1214.88 L1683.86 1214.88 L1684.44 1214.88 L1685.03 1214.88 L1685.62 1214.88 L1686.2 1214.88 L1686.79 1214.88 L1687.37 1214.88 L1687.96 1214.88 L1688.55 1214.88 L1689.13 1214.88 L1689.72 1214.88 L1690.31 1214.88 L1690.89 1214.88 L1691.48 1214.88 L1692.07 1214.88 L1692.65 1214.88 L1693.24 1214.88 L1693.83 1214.88 L1694.41 1214.88 L1695 1214.88 L1695.58 1214.88 L1696.17 1214.88 L1696.76 1214.88 L1697.34 1214.88 L1697.93 1214.88 L1698.52 1214.88 L1699.1 1214.88 L1699.69 1214.88 L1700.28 1214.88 L1700.86 1214.88 L1701.45 1214.88 L1702.04 1214.88 L1702.62 1214.88 L1703.21 1214.88 L1703.79 1214.88 L1704.38 1214.88 L1704.97 1214.88 L1705.55 1214.88 L1706.14 1214.88 L1706.73 1214.88 L1707.31 1214.88 L1707.9 1214.88 L1708.49 1214.88 L1709.07 1214.88 L1709.66 1214.88 L1710.24 1214.88 L1710.83 1214.88 L1711.42 1214.88 L1712 1214.88 L1712.59 1214.88 L1713.18 1214.88 L1713.76 1214.88 L1714.35 1214.88 L1714.94 1214.88 L1715.52 1214.88 L1716.11 1214.88 L1716.7 1214.88 L1717.28 1214.88 L1717.87 1214.88 L1718.45 1214.88 L1719.04 1214.88 L1719.63 1214.88 L1720.21 1214.88 L1720.8 1214.88 L1721.39 1214.88 L1721.97 1214.88 L1722.56 1214.88 L1723.15 1214.88 L1723.73 1214.88 L1724.32 1214.88 L1724.91 1214.88 L1725.49 1214.88 L1726.08 1214.88 L1726.66 1214.88 L1727.25 1214.88 L1727.84 1214.88 L1728.42 1214.88 L1729.01 1214.88 L1729.6 1214.88 L1730.18 1214.88 L1730.77 1214.88 L1731.36 1214.88 L1731.94 1214.88 L1732.53 1214.88 L1733.11 1214.88 L1733.7 1214.88 L1734.29 1214.88 L1734.87 1214.88 L1735.46 1214.88 L1736.05 1214.88 L1736.63 1214.88 L1737.22 1214.88 L1737.81 1214.88 L1738.39 1214.88 L1738.98 1214.88 L1739.57 1214.88 L1740.15 1214.88 L1740.74 1214.88 L1741.32 1214.88 L1741.91 1214.88 L1742.5 1214.88 L1743.08 1214.88 L1743.67 1214.88 L1744.26 1214.88 L1744.84 1214.88 L1745.43 1214.88 L1746.02 1214.88 L1746.6 1214.88 L1747.19 1214.88 L1747.78 1214.88 L1748.36 1214.88 L1748.95 1214.88 L1749.53 1214.88 L1750.12 1214.88 L1750.71 1214.88 L1751.29 1214.88 L1751.88 1214.88 L1752.47 1214.88 L1753.05 1214.88 L1753.64 1214.88 L1754.23 1214.88 L1754.81 1214.88 L1755.4 1214.88 L1755.99 1214.88 L1756.57 1214.88 L1757.16 1214.88 L1757.74 1214.88 L1758.33 1214.88 L1758.92 1214.88 L1759.5 1214.88 L1760.09 1214.88 L1760.68 1214.88 L1761.26 1214.88 L1761.85 1214.88 L1762.44 1214.88 L1763.02 1214.88 L1763.61 1214.88 L1764.19 1214.88 L1764.78 1214.88 L1765.37 1214.88 L1765.95 1214.88 L1766.54 1214.88 L1767.13 1214.88 L1767.71 1214.88 L1768.3 1214.88 L1768.89 1214.88 L1769.47 1214.88 L1770.06 1214.88 L1770.65 1214.88 L1771.23 1214.88 L1771.82 1214.88 L1772.4 1214.88 L1772.99 1214.88 L1773.58 1214.88 L1774.16 1214.88 L1774.75 1214.88 L1775.34 1214.88 L1775.92 1214.88 L1776.51 1214.88 L1777.1 1214.88 L1777.68 1214.88 L1778.27 1214.88 L1778.86 1214.88 L1779.44 1214.88 L1780.03 1214.88 L1780.61 1214.88 L1781.2 1214.88 L1781.79 1214.88 L1782.37 1214.88 L1782.96 1214.88 L1783.55 1214.88 L1784.13 1214.88 L1784.72 1214.88 L1785.31 1214.88 L1785.89 1214.88 L1786.48 1214.88 L1787.06 1214.88 L1787.65 1214.88 L1788.24 1214.88 L1788.82 1214.88 L1789.41 1214.88 L1790 1214.88 L1790.58 1214.88 L1791.17 1214.88 L1791.76 1214.88 L1792.34 1214.88 L1792.93 1214.88 L1793.52 1214.88 L1794.1 1214.88 L1794.69 1214.88 L1795.27 1214.88 L1795.86 1214.88 L1796.45 1214.88 L1797.03 1214.88 L1797.62 1214.88 L1798.21 1214.88 L1798.79 1214.88 L1799.38 1214.88 L1799.97 1214.88 L1800.55 1214.88 L1801.14 1214.88 L1801.73 1214.88 L1802.31 1214.88 L1802.9 1214.88 L1803.48 1214.88 L1804.07 1214.88 L1804.66 1214.88 L1805.24 1214.88 L1805.83 1214.88 L1806.42 1214.88 L1807 1214.88 L1807.59 1214.88 L1808.18 1214.88 L1808.76 1214.88 L1809.35 1214.88 L1809.94 1214.88 L1810.52 1214.88 L1811.11 1214.88 L1811.69 1214.88 L1812.28 1214.88 L1812.87 1214.88 L1813.45 1214.88 L1814.04 1214.88 L1814.63 1214.88 L1815.21 1214.88 L1815.8 1214.88 L1816.39 1214.88 L1816.97 1214.88 L1817.56 1214.88 L1818.14 1214.88 L1818.73 1214.88 L1819.32 1214.88 L1819.9 1214.88 L1820.49 1214.88 L1821.08 1214.88 L1821.66 1214.88 L1822.25 1214.88 L1822.84 1214.88 L1823.42 1214.88 L1824.01 1214.88 L1824.6 1214.88 L1825.18 1214.88 L1825.77 1214.88 L1826.35 1214.88 L1826.94 1214.88 L1827.53 1214.88 L1828.11 1214.88 L1828.7 1214.88 L1829.29 1214.88 L1829.87 1214.88 L1830.46 1214.88 L1831.05 1214.88 L1831.63 1214.88 L1832.22 1214.88 L1832.81 1214.88 L1833.39 1214.88 L1833.98 1214.88 L1834.56 1214.88 L1835.15 1214.88 L1835.74 1214.88 L1836.32 1214.88 L1836.91 1214.88 L1837.5 1214.88 L1838.08 1214.88 L1838.67 1214.88 L1839.26 1214.88 L1839.84 1214.88 L1840.43 1214.88 L1841.01 1214.88 L1841.6 1214.88 L1842.19 1214.88 L1842.77 1214.88 L1843.36 1214.88 L1843.95 1214.88 L1844.53 1214.88 L1845.12 1214.88 L1845.71 1214.88 L1846.29 1214.88 L1846.88 1214.88 L1847.47 1214.88 L1848.05 1214.88 L1848.64 1214.88 L1849.22 1214.88 L1849.81 1214.88 L1850.4 1214.88 L1850.98 1214.88 L1851.57 1214.88 L1852.16 1214.88 L1852.74 1214.88 L1853.33 1214.88 L1853.92 1214.88 L1854.5 1214.88 L1855.09 1214.88 L1855.68 1214.88 L1856.26 1214.88 L1856.85 1214.88 L1857.43 1214.88 L1858.02 1214.88 L1858.61 1214.88 L1859.19 1214.88 L1859.78 1214.88 L1860.37 1214.88 L1860.95 1214.88 L1861.54 1214.88 L1862.13 1214.88 L1862.71 1214.88 L1863.3 1214.88 L1863.88 1214.88 L1864.47 1214.88 L1865.06 1214.88 L1865.64 1214.88 L1866.23 1214.88 L1866.82 1214.88 L1867.4 1214.88 L1867.99 1214.88 L1868.58 1214.88 L1869.16 1214.88 L1869.75 1214.88 L1870.34 1214.88 L1870.92 1214.88 L1871.51 1214.88 L1872.09 1214.88 L1872.68 1214.88 L1873.27 1214.88 L1873.85 1214.88 L1874.44 1214.88 L1875.03 1214.88 L1875.61 1214.88 L1876.2 1214.88 L1876.79 1214.88 L1877.37 1214.88 L1877.96 1214.88 L1878.55 1214.88 L1879.13 1214.88 L1879.72 1214.88 L1880.3 1214.88 L1880.89 1214.88 L1881.48 1214.88 L1882.06 1214.88 L1882.65 1214.88 L1883.24 1214.88 L1883.82 1214.88 L1884.41 1214.88 L1885 1214.88 L1885.58 1214.88 L1886.17 1214.88 L1886.76 1214.88 L1887.34 1214.88 L1887.93 1214.88 L1888.51 1214.88 L1889.1 1214.88 L1889.69 1214.88 L1890.27 1214.88 L1890.86 1214.88 L1891.45 1214.88 L1892.03 1214.88 L1892.62 1214.88 L1893.21 1214.88 L1893.79 1214.88 L1894.38 1214.88 L1894.96 1214.88 L1895.55 1214.88 L1896.14 1214.88 L1896.72 1214.88 L1897.31 1214.88 L1897.9 1214.88 L1898.48 1214.88 L1899.07 1214.88 L1899.66 1214.88 L1900.24 1214.88 L1900.83 1214.88 L1901.42 1214.88 L1902 1214.88 L1902.59 1214.88 L1903.17 1214.88 L1903.76 1214.88 L1904.35 1214.88 L1904.93 1214.88 L1905.52 1214.88 L1906.11 1214.88 L1906.69 1214.88 L1907.28 1214.88 L1907.87 1214.88 L1908.45 1214.88 L1909.04 1214.88 L1909.63 1214.88 L1910.21 1214.88 L1910.8 1214.88 L1911.38 1214.88 L1911.97 1214.88 L1912.56 1214.88 L1913.14 1214.88 L1913.73 1214.88 L1914.32 1214.88 L1914.9 1214.88 L1915.49 1214.88 L1916.08 1214.88 L1916.66 1214.88 L1917.25 1214.88 L1917.83 1214.88 L1918.42 1214.88 L1919.01 1214.88 L1919.59 1214.88 L1920.18 1214.88 L1920.77 1214.88 L1921.35 1214.88 L1921.94 1214.88 L1922.53 1214.88 L1923.11 1214.88 L1923.7 1214.88 L1924.29 1214.88 L1924.87 1214.88 L1925.46 1214.88 L1926.04 1214.88 L1926.63 1214.88 L1927.22 1214.88 L1927.8 1214.88 L1928.39 1214.88 L1928.98 1214.88 L1929.56 1214.88 L1930.15 1214.88 L1930.74 1214.88 L1931.32 1214.88 L1931.91 1214.88 L1932.5 1214.88 L1933.08 1214.88 L1933.67 1214.88 L1934.25 1214.88 L1934.84 1214.88 L1935.43 1214.88 L1936.01 1214.88 L1936.6 1214.88 L1937.19 1214.88 L1937.77 1214.88 L1938.36 1214.88 L1938.95 1214.88 L1939.53 1214.88 L1940.12 1214.88 L1940.71 1214.88 L1941.29 1214.88 L1941.88 1214.88 L1942.46 1214.88 L1943.05 1214.88 L1943.64 1214.88 L1944.22 1214.88 L1944.81 1214.88 L1945.4 1214.88 L1945.98 1214.88 L1946.57 1214.88 L1947.16 1214.88 L1947.74 1214.88 L1948.33 1214.88 L1948.91 1214.88 L1949.5 1214.88 L1950.09 1214.88 L1950.67 1214.88 L1951.26 1214.88 L1951.85 1214.88 L1952.43 1214.88 L1953.02 1214.88 L1953.61 1214.88 L1954.19 1214.88 L1954.78 1214.88 L1955.37 1214.88 L1955.95 1214.88 L1956.54 1214.88 L1957.12 1214.88 L1957.71 1214.88 L1958.3 1214.88 L1958.88 1214.88 L1959.47 1214.88 L1960.06 1214.88 L1960.64 1214.88 L1961.23 1214.88 L1961.82 1214.88 L1962.4 1214.88 L1962.99 1214.88 L1963.58 1214.88 L1964.16 1214.88 L1964.75 1214.88 L1965.33 1214.88 L1965.92 1214.88 L1966.51 1214.88 L1967.09 1214.88 L1967.68 1214.88 L1968.27 1214.88 L1968.85 1214.88 L1969.44 1214.88 L1970.03 1214.88 L1970.61 1214.88 L1971.2 1214.88 L1971.78 1214.88 L1972.37 1214.88 L1972.96 1214.88 L1973.54 1214.88 L1974.13 1214.88 L1974.72 1214.88 L1975.3 1214.88 L1975.89 1214.88 L1976.48 1214.88 L1977.06 1214.88 L1977.65 1214.88 L1978.24 1214.88 L1978.82 1214.88 L1979.41 1214.88 L1979.99 1214.88 L1980.58 1214.88 L1981.17 1214.88 L1981.75 1214.88 L1982.34 1214.88 L1982.93 1214.88 L1983.51 1214.88 L1984.1 1214.88 L1984.69 1214.88 L1985.27 1214.88 L1985.86 1214.88 L1986.45 1214.88 L1987.03 1214.88 L1987.62 1214.88 L1988.2 1214.88 L1988.79 1214.88 L1989.38 1214.88 L1989.96 1214.88 L1990.55 1214.88 L1991.14 1214.88 L1991.72 1214.88 L1992.31 1214.88 L1992.9 1214.88 L1993.48 1214.88 L1994.07 1214.88 L1994.65 1214.88 L1995.24 1214.88 L1995.83 1214.88 L1996.41 1214.88 L1997 1214.88 L1997.59 1214.88 L1998.17 1214.88 L1998.76 1214.88 L1999.35 1214.88 L1999.93 1214.88 L2000.52 1214.88 L2001.11 1214.88 L2001.69 1214.88 L2002.28 1214.88 L2002.86 1214.88 L2003.45 1214.88 L2004.04 1214.88 L2004.62 1214.88 L2005.21 1214.88 L2005.8 1214.88 L2006.38 1214.88 L2006.97 1214.88 L2007.56 1214.88 L2008.14 1214.88 L2008.73 1214.88 L2009.32 1214.88 L2009.9 1214.88 L2010.49 1214.88 L2011.07 1214.88 L2011.66 1214.88 L2012.25 1214.88 L2012.83 1214.88 L2013.42 1214.88 L2014.01 1214.88 L2014.59 1214.88 L2015.18 1214.88 L2015.77 1214.88 L2016.35 1214.88 L2016.94 1214.88 L2017.53 1214.88 L2018.11 1214.88 L2018.7 1214.88 L2019.28 1214.88 L2019.87 1214.88 L2020.46 1214.88 L2021.04 1214.88 L2021.63 1214.88 L2022.22 1214.88 L2022.8 1214.88 L2023.39 1214.88 L2023.98 1214.88 L2024.56 1214.88 L2025.15 1214.88 L2025.73 1214.88 L2026.32 1214.88 L2026.91 1214.88 L2027.49 1214.88 L2028.08 1214.88 L2028.67 1214.88 L2029.25 1214.88 L2029.84 1214.88 L2030.43 1214.88 L2031.01 1214.88 L2031.6 1214.88 L2032.19 1214.88 L2032.77 1214.88 L2033.36 1214.88 L2033.94 1214.88 L2034.53 1214.88 L2035.12 1214.88 L2035.7 1214.88 L2036.29 1214.88 L2036.88 1214.88 L2037.46 1214.88 L2038.05 1214.88 L2038.64 1214.88 L2039.22 1214.88 L2039.81 1214.88 L2040.4 1214.88 L2040.98 1214.88 L2041.57 1214.88 L2042.15 1214.88 L2042.74 1214.88 L2043.33 1214.88 L2043.91 1214.88 L2044.5 1214.88 L2045.09 1214.88 L2045.67 1214.88 L2046.26 1214.88 L2046.85 1214.88 L2047.43 1214.88 L2048.02 1214.88 L2048.6 1214.88 L2049.19 1214.88 L2049.78 1214.88 L2050.36 1214.88 L2050.95 1214.88 L2051.54 1214.88 L2052.12 1214.88 L2052.71 1214.88 L2053.3 1214.88 L2053.88 1214.88 L2054.47 1214.88 L2055.06 1214.88 L2055.64 1214.88 L2056.23 1214.88 L2056.81 1214.88 L2057.4 1214.88 L2057.99 1214.88 L2058.57 1214.88 L2059.16 1214.88 L2059.75 1214.88 L2060.33 1214.88 L2060.92 1214.88 L2061.51 1214.88 L2062.09 1214.88 L2062.68 1214.88 L2063.27 1214.88 L2063.85 1214.88 L2064.44 1214.88 L2065.02 1214.88 L2065.61 1214.88 L2066.2 1214.88 L2066.78 1214.88 L2067.37 1214.88 L2067.96 1214.88 L2068.54 1214.88 L2069.13 1214.88 L2069.72 1214.88 L2070.3 1214.88 L2070.89 1214.88 L2071.48 1214.88 L2072.06 1214.88 L2072.65 1214.88 L2073.23 1214.88 L2073.82 1214.88 L2074.41 1214.88 L2074.99 1214.88 L2075.58 1214.88 L2076.17 1214.88 L2076.75 1214.88 L2077.34 1214.88 L2077.93 1214.88 L2078.51 1214.88 L2079.1 1214.88 L2079.68 1214.88 L2080.27 1214.88 L2080.86 1214.88 L2081.44 1214.88 L2082.03 1214.88 L2082.62 1214.88 L2083.2 1214.88 L2083.79 1214.88 L2084.38 1214.88 L2084.96 1214.88 L2085.55 1214.88 L2086.14 1214.88 L2086.72 1214.88 L2087.31 1214.88 L2087.89 1214.88 L2088.48 1214.88 L2089.07 1214.88 L2089.65 1214.88 L2090.24 1214.88 L2090.83 1214.88 L2091.41 1214.88 L2092 1214.88 L2092.59 1214.88 L2093.17 1214.88 L2093.76 1214.88 L2094.35 1214.88 L2094.93 1214.88 L2095.52 1214.88 L2096.1 1214.88 L2096.69 1214.88 L2097.28 1214.88 L2097.86 1214.88 L2098.45 1214.88 L2099.04 1214.88 L2099.62 1214.88 L2100.21 1214.88 L2100.8 1214.88 L2101.38 1214.88 L2101.97 1214.88 L2102.55 1214.88 L2103.14 1214.88 L2103.73 1214.88 L2104.31 1214.88 L2104.9 1214.88 L2105.49 1214.88 L2106.07 1214.88 L2106.66 1214.88 L2107.25 1214.88 L2107.83 1214.88 L2108.42 1214.88 L2109.01 1214.88 L2109.59 1214.88 L2110.18 1214.88 L2110.76 1214.88 L2111.35 1214.88 L2111.94 1214.88 L2112.52 1214.88 L2113.11 1214.88 L2113.7 1214.88 L2114.28 1214.88 L2114.87 1214.88 L2115.46 1214.88 L2116.04 1214.88 L2116.63 1214.88 L2117.22 1214.88 L2117.8 1214.88 L2118.39 1214.88 L2118.97 1214.88 L2119.56 1214.88 L2120.15 1214.88 L2120.73 1214.88 L2121.32 1214.88 L2121.91 1214.88 L2122.49 1214.88 L2123.08 1214.88 L2123.67 1214.88 L2124.25 1214.88 L2124.84 1214.88 L2125.42 1214.88 L2126.01 1214.88 L2126.6 1214.88 L2127.18 1214.88 L2127.77 1214.88 L2128.36 1214.88 L2128.94 1214.88 L2129.53 1214.88 L2130.12 1214.88 L2130.7 1214.88 L2131.29 1214.88 L2131.88 1214.88 L2132.46 1214.88 L2133.05 1214.88 L2133.63 1214.88 L2134.22 1214.88 L2134.81 1214.88 L2135.39 1214.88 L2135.98 1214.88 L2136.57 1214.88 L2137.15 1214.88 L2137.74 1214.88 L2138.33 1214.88 L2138.91 1214.88 L2139.5 1214.88 L2140.09 1214.88 L2140.67 1214.88 L2141.26 1214.88 L2141.84 1214.88 L2142.43 1214.88 L2143.02 1214.88 L2143.6 1214.88 L2144.19 1214.88 L2144.78 1214.88 L2145.36 1214.88 L2145.95 1214.88 L2146.54 1214.88 L2147.12 1214.88 L2147.71 1214.88 L2148.3 1214.88 L2148.88 1214.88 L2149.47 1214.88 L2150.05 1214.88 L2150.64 1214.88 L2151.23 1214.88 L2151.81 1214.88 L2152.4 1214.88 L2152.99 1214.88 L2153.57 1214.88 L2154.16 1214.88 L2154.75 1214.88 L2155.33 1214.88 L2155.92 1214.88 L2156.5 1214.88 L2157.09 1214.88 L2157.68 1214.88 L2158.26 1214.88 L2158.26 1214.12 L2157.68 1214.12 L2157.09 1214.12 L2156.5 1214.12 L2155.92 1214.12 L2155.33 1214.12 L2154.75 1214.12 L2154.16 1214.12 L2153.57 1214.12 L2152.99 1214.12 L2152.4 1214.12 L2151.81 1214.12 L2151.23 1214.12 L2150.64 1214.12 L2150.05 1214.12 L2149.47 1214.12 L2148.88 1214.12 L2148.3 1214.12 L2147.71 1214.12 L2147.12 1214.12 L2146.54 1214.12 L2145.95 1214.12 L2145.36 1214.12 L2144.78 1214.12 L2144.19 1214.12 L2143.6 1214.12 L2143.02 1214.12 L2142.43 1214.12 L2141.84 1214.12 L2141.26 1214.12 L2140.67 1214.12 L2140.09 1214.12 L2139.5 1214.12 L2138.91 1214.12 L2138.33 1214.12 L2137.74 1214.12 L2137.15 1214.12 L2136.57 1214.12 L2135.98 1214.12 L2135.39 1214.12 L2134.81 1214.12 L2134.22 1214.12 L2133.63 1214.12 L2133.05 1214.12 L2132.46 1214.12 L2131.88 1214.12 L2131.29 1214.12 L2130.7 1214.12 L2130.12 1214.12 L2129.53 1214.12 L2128.94 1214.12 L2128.36 1214.12 L2127.77 1214.12 L2127.18 1214.12 L2126.6 1214.12 L2126.01 1214.12 L2125.42 1214.12 L2124.84 1214.12 L2124.25 1214.12 L2123.67 1214.12 L2123.08 1214.12 L2122.49 1214.12 L2121.91 1214.12 L2121.32 1214.12 L2120.73 1214.12 L2120.15 1214.12 L2119.56 1214.12 L2118.97 1214.12 L2118.39 1214.12 L2117.8 1214.12 L2117.22 1214.12 L2116.63 1214.12 L2116.04 1214.12 L2115.46 1214.12 L2114.87 1214.12 L2114.28 1214.12 L2113.7 1214.12 L2113.11 1214.12 L2112.52 1214.12 L2111.94 1214.12 L2111.35 1214.12 L2110.76 1214.12 L2110.18 1214.12 L2109.59 1214.12 L2109.01 1214.12 L2108.42 1214.12 L2107.83 1214.12 L2107.25 1214.12 L2106.66 1214.12 L2106.07 1214.12 L2105.49 1214.12 L2104.9 1214.12 L2104.31 1214.12 L2103.73 1214.12 L2103.14 1214.12 L2102.55 1214.12 L2101.97 1214.12 L2101.38 1214.12 L2100.8 1214.12 L2100.21 1214.12 L2099.62 1214.12 L2099.04 1214.12 L2098.45 1214.12 L2097.86 1214.12 L2097.28 1214.12 L2096.69 1214.12 L2096.1 1214.12 L2095.52 1214.12 L2094.93 1214.12 L2094.35 1214.12 L2093.76 1214.12 L2093.17 1214.12 L2092.59 1214.12 L2092 1214.12 L2091.41 1214.12 L2090.83 1214.12 L2090.24 1214.12 L2089.65 1214.12 L2089.07 1214.12 L2088.48 1214.12 L2087.89 1214.12 L2087.31 1214.12 L2086.72 1214.12 L2086.14 1214.12 L2085.55 1214.12 L2084.96 1214.12 L2084.38 1214.12 L2083.79 1214.12 L2083.2 1214.12 L2082.62 1214.12 L2082.03 1214.12 L2081.44 1214.12 L2080.86 1214.12 L2080.27 1214.12 L2079.68 1214.12 L2079.1 1214.12 L2078.51 1214.12 L2077.93 1214.12 L2077.34 1214.12 L2076.75 1214.12 L2076.17 1214.12 L2075.58 1214.12 L2074.99 1214.12 L2074.41 1214.12 L2073.82 1214.12 L2073.23 1214.12 L2072.65 1214.12 L2072.06 1214.12 L2071.48 1214.12 L2070.89 1214.12 L2070.3 1214.12 L2069.72 1214.12 L2069.13 1214.12 L2068.54 1214.12 L2067.96 1214.12 L2067.37 1214.12 L2066.78 1214.12 L2066.2 1214.12 L2065.61 1214.12 L2065.02 1214.12 L2064.44 1214.12 L2063.85 1214.12 L2063.27 1214.12 L2062.68 1214.12 L2062.09 1214.12 L2061.51 1214.12 L2060.92 1214.12 L2060.33 1214.12 L2059.75 1214.12 L2059.16 1214.12 L2058.57 1214.12 L2057.99 1214.12 L2057.4 1214.12 L2056.81 1214.12 L2056.23 1214.12 L2055.64 1214.12 L2055.06 1214.12 L2054.47 1214.12 L2053.88 1214.12 L2053.3 1214.12 L2052.71 1214.12 L2052.12 1214.12 L2051.54 1214.12 L2050.95 1214.12 L2050.36 1214.12 L2049.78 1214.12 L2049.19 1214.12 L2048.6 1214.12 L2048.02 1214.12 L2047.43 1214.12 L2046.85 1214.12 L2046.26 1214.12 L2045.67 1214.12 L2045.09 1214.12 L2044.5 1214.12 L2043.91 1214.12 L2043.33 1214.12 L2042.74 1214.12 L2042.15 1214.12 L2041.57 1214.12 L2040.98 1214.12 L2040.4 1214.12 L2039.81 1214.12 L2039.22 1214.12 L2038.64 1214.12 L2038.05 1214.12 L2037.46 1214.12 L2036.88 1214.12 L2036.29 1214.12 L2035.7 1214.12 L2035.12 1214.12 L2034.53 1214.12 L2033.94 1214.12 L2033.36 1214.12 L2032.77 1214.12 L2032.19 1214.12 L2031.6 1214.12 L2031.01 1214.12 L2030.43 1214.12 L2029.84 1214.12 L2029.25 1214.12 L2028.67 1214.12 L2028.08 1214.12 L2027.49 1214.12 L2026.91 1214.12 L2026.32 1214.12 L2025.73 1214.12 L2025.15 1214.12 L2024.56 1214.12 L2023.98 1214.12 L2023.39 1214.12 L2022.8 1214.12 L2022.22 1214.12 L2021.63 1214.12 L2021.04 1214.12 L2020.46 1214.12 L2019.87 1214.12 L2019.28 1214.12 L2018.7 1214.12 L2018.11 1214.12 L2017.53 1214.12 L2016.94 1214.12 L2016.35 1214.12 L2015.77 1214.12 L2015.18 1214.12 L2014.59 1214.12 L2014.01 1214.12 L2013.42 1214.12 L2012.83 1214.12 L2012.25 1214.12 L2011.66 1214.12 L2011.07 1214.12 L2010.49 1214.12 L2009.9 1214.12 L2009.32 1214.12 L2008.73 1214.12 L2008.14 1214.12 L2007.56 1214.12 L2006.97 1214.12 L2006.38 1214.12 L2005.8 1214.12 L2005.21 1214.12 L2004.62 1214.12 L2004.04 1214.12 L2003.45 1214.12 L2002.86 1214.12 L2002.28 1214.12 L2001.69 1214.12 L2001.11 1214.12 L2000.52 1214.12 L1999.93 1214.12 L1999.35 1214.12 L1998.76 1214.12 L1998.17 1214.12 L1997.59 1214.12 L1997 1214.12 L1996.41 1214.12 L1995.83 1214.12 L1995.24 1214.12 L1994.65 1214.12 L1994.07 1214.12 L1993.48 1214.12 L1992.9 1214.12 L1992.31 1214.12 L1991.72 1214.12 L1991.14 1214.12 L1990.55 1214.12 L1989.96 1214.12 L1989.38 1214.12 L1988.79 1214.12 L1988.2 1214.12 L1987.62 1214.12 L1987.03 1214.12 L1986.45 1214.12 L1985.86 1214.12 L1985.27 1214.12 L1984.69 1214.12 L1984.1 1214.12 L1983.51 1214.12 L1982.93 1214.12 L1982.34 1214.12 L1981.75 1214.12 L1981.17 1214.12 L1980.58 1214.12 L1979.99 1214.12 L1979.41 1214.12 L1978.82 1214.12 L1978.24 1214.12 L1977.65 1214.12 L1977.06 1214.12 L1976.48 1214.12 L1975.89 1214.12 L1975.3 1214.12 L1974.72 1214.12 L1974.13 1214.12 L1973.54 1214.12 L1972.96 1214.12 L1972.37 1214.12 L1971.78 1214.12 L1971.2 1214.12 L1970.61 1214.12 L1970.03 1214.12 L1969.44 1214.12 L1968.85 1214.12 L1968.27 1214.12 L1967.68 1214.12 L1967.09 1214.12 L1966.51 1214.12 L1965.92 1214.12 L1965.33 1214.12 L1964.75 1214.12 L1964.16 1214.12 L1963.58 1214.12 L1962.99 1214.12 L1962.4 1214.12 L1961.82 1214.12 L1961.23 1214.12 L1960.64 1214.12 L1960.06 1214.12 L1959.47 1214.12 L1958.88 1214.12 L1958.3 1214.12 L1957.71 1214.12 L1957.12 1214.12 L1956.54 1214.12 L1955.95 1214.12 L1955.37 1214.12 L1954.78 1214.12 L1954.19 1214.12 L1953.61 1214.12 L1953.02 1214.12 L1952.43 1214.12 L1951.85 1214.12 L1951.26 1214.12 L1950.67 1214.12 L1950.09 1214.12 L1949.5 1214.12 L1948.91 1214.12 L1948.33 1214.12 L1947.74 1214.12 L1947.16 1214.12 L1946.57 1214.12 L1945.98 1214.12 L1945.4 1214.12 L1944.81 1214.12 L1944.22 1214.12 L1943.64 1214.12 L1943.05 1214.12 L1942.46 1214.12 L1941.88 1214.12 L1941.29 1214.12 L1940.71 1214.12 L1940.12 1214.12 L1939.53 1214.12 L1938.95 1214.12 L1938.36 1214.12 L1937.77 1214.12 L1937.19 1214.12 L1936.6 1214.12 L1936.01 1214.12 L1935.43 1214.12 L1934.84 1214.12 L1934.25 1214.12 L1933.67 1214.12 L1933.08 1214.12 L1932.5 1214.12 L1931.91 1214.12 L1931.32 1214.12 L1930.74 1214.12 L1930.15 1214.12 L1929.56 1214.12 L1928.98 1214.12 L1928.39 1214.12 L1927.8 1214.12 L1927.22 1214.12 L1926.63 1214.12 L1926.04 1214.12 L1925.46 1214.12 L1924.87 1214.12 L1924.29 1214.12 L1923.7 1214.12 L1923.11 1214.12 L1922.53 1214.12 L1921.94 1214.12 L1921.35 1214.12 L1920.77 1214.12 L1920.18 1214.12 L1919.59 1214.12 L1919.01 1214.12 L1918.42 1214.12 L1917.83 1214.12 L1917.25 1214.12 L1916.66 1214.12 L1916.08 1214.12 L1915.49 1214.12 L1914.9 1214.12 L1914.32 1214.12 L1913.73 1214.12 L1913.14 1214.12 L1912.56 1214.12 L1911.97 1214.12 L1911.38 1214.12 L1910.8 1214.12 L1910.21 1214.12 L1909.63 1214.12 L1909.04 1214.12 L1908.45 1214.12 L1907.87 1214.12 L1907.28 1214.12 L1906.69 1214.12 L1906.11 1214.12 L1905.52 1214.12 L1904.93 1214.12 L1904.35 1214.12 L1903.76 1214.12 L1903.17 1214.12 L1902.59 1214.12 L1902 1214.12 L1901.42 1214.12 L1900.83 1214.12 L1900.24 1214.12 L1899.66 1214.12 L1899.07 1214.12 L1898.48 1214.12 L1897.9 1214.12 L1897.31 1214.12 L1896.72 1214.12 L1896.14 1214.12 L1895.55 1214.12 L1894.96 1214.12 L1894.38 1214.12 L1893.79 1214.12 L1893.21 1214.12 L1892.62 1214.12 L1892.03 1214.12 L1891.45 1214.12 L1890.86 1214.12 L1890.27 1214.12 L1889.69 1214.12 L1889.1 1214.12 L1888.51 1214.12 L1887.93 1214.12 L1887.34 1214.12 L1886.76 1214.12 L1886.17 1214.12 L1885.58 1214.12 L1885 1214.12 L1884.41 1214.12 L1883.82 1214.12 L1883.24 1214.12 L1882.65 1214.12 L1882.06 1214.12 L1881.48 1214.12 L1880.89 1214.12 L1880.3 1214.12 L1879.72 1214.12 L1879.13 1214.12 L1878.55 1214.12 L1877.96 1214.12 L1877.37 1214.12 L1876.79 1214.12 L1876.2 1214.12 L1875.61 1214.12 L1875.03 1214.12 L1874.44 1214.12 L1873.85 1214.12 L1873.27 1214.12 L1872.68 1214.12 L1872.09 1214.12 L1871.51 1214.12 L1870.92 1214.12 L1870.34 1214.12 L1869.75 1214.12 L1869.16 1214.12 L1868.58 1214.12 L1867.99 1214.12 L1867.4 1214.12 L1866.82 1214.12 L1866.23 1214.12 L1865.64 1214.12 L1865.06 1214.12 L1864.47 1214.12 L1863.88 1214.12 L1863.3 1214.12 L1862.71 1214.12 L1862.13 1214.12 L1861.54 1214.12 L1860.95 1214.12 L1860.37 1214.12 L1859.78 1214.12 L1859.19 1214.12 L1858.61 1214.12 L1858.02 1214.12 L1857.43 1214.12 L1856.85 1214.12 L1856.26 1214.12 L1855.68 1214.12 L1855.09 1214.12 L1854.5 1214.12 L1853.92 1214.12 L1853.33 1214.12 L1852.74 1214.12 L1852.16 1214.12 L1851.57 1214.12 L1850.98 1214.12 L1850.4 1214.12 L1849.81 1214.12 L1849.22 1214.12 L1848.64 1214.12 L1848.05 1214.12 L1847.47 1214.12 L1846.88 1214.12 L1846.29 1214.12 L1845.71 1214.12 L1845.12 1214.12 L1844.53 1214.12 L1843.95 1214.12 L1843.36 1214.12 L1842.77 1214.12 L1842.19 1214.12 L1841.6 1214.12 L1841.01 1214.12 L1840.43 1214.12 L1839.84 1214.12 L1839.26 1214.12 L1838.67 1214.12 L1838.08 1214.12 L1837.5 1214.12 L1836.91 1214.12 L1836.32 1214.12 L1835.74 1214.12 L1835.15 1214.12 L1834.56 1214.12 L1833.98 1214.12 L1833.39 1214.12 L1832.81 1214.12 L1832.22 1214.12 L1831.63 1214.12 L1831.05 1214.12 L1830.46 1214.12 L1829.87 1214.12 L1829.29 1214.12 L1828.7 1214.12 L1828.11 1214.12 L1827.53 1214.12 L1826.94 1214.12 L1826.35 1214.12 L1825.77 1214.12 L1825.18 1214.12 L1824.6 1214.12 L1824.01 1214.12 L1823.42 1214.12 L1822.84 1214.12 L1822.25 1214.12 L1821.66 1214.12 L1821.08 1214.12 L1820.49 1214.12 L1819.9 1214.12 L1819.32 1214.12 L1818.73 1214.12 L1818.14 1214.12 L1817.56 1214.12 L1816.97 1214.12 L1816.39 1214.12 L1815.8 1214.12 L1815.21 1214.12 L1814.63 1214.12 L1814.04 1214.12 L1813.45 1214.12 L1812.87 1214.12 L1812.28 1214.12 L1811.69 1214.12 L1811.11 1214.12 L1810.52 1214.12 L1809.94 1214.12 L1809.35 1214.12 L1808.76 1214.12 L1808.18 1214.12 L1807.59 1214.12 L1807 1214.12 L1806.42 1214.12 L1805.83 1214.12 L1805.24 1214.12 L1804.66 1214.12 L1804.07 1214.12 L1803.48 1214.12 L1802.9 1214.12 L1802.31 1214.12 L1801.73 1214.12 L1801.14 1214.12 L1800.55 1214.12 L1799.97 1214.12 L1799.38 1214.12 L1798.79 1214.12 L1798.21 1214.12 L1797.62 1214.12 L1797.03 1214.12 L1796.45 1214.12 L1795.86 1214.12 L1795.27 1214.12 L1794.69 1214.12 L1794.1 1214.12 L1793.52 1214.12 L1792.93 1214.12 L1792.34 1214.12 L1791.76 1214.12 L1791.17 1214.12 L1790.58 1214.12 L1790 1214.12 L1789.41 1214.12 L1788.82 1214.12 L1788.24 1214.12 L1787.65 1214.12 L1787.06 1214.12 L1786.48 1214.12 L1785.89 1214.12 L1785.31 1214.12 L1784.72 1214.12 L1784.13 1214.12 L1783.55 1214.12 L1782.96 1214.12 L1782.37 1214.12 L1781.79 1214.12 L1781.2 1214.12 L1780.61 1214.12 L1780.03 1214.12 L1779.44 1214.12 L1778.86 1214.12 L1778.27 1214.12 L1777.68 1214.12 L1777.1 1214.12 L1776.51 1214.12 L1775.92 1214.12 L1775.34 1214.12 L1774.75 1214.12 L1774.16 1214.12 L1773.58 1214.12 L1772.99 1214.12 L1772.4 1214.12 L1771.82 1214.12 L1771.23 1214.12 L1770.65 1214.12 L1770.06 1214.12 L1769.47 1214.12 L1768.89 1214.12 L1768.3 1214.12 L1767.71 1214.12 L1767.13 1214.12 L1766.54 1214.12 L1765.95 1214.12 L1765.37 1214.12 L1764.78 1214.12 L1764.19 1214.12 L1763.61 1214.12 L1763.02 1214.12 L1762.44 1214.12 L1761.85 1214.12 L1761.26 1214.12 L1760.68 1214.12 L1760.09 1214.12 L1759.5 1214.12 L1758.92 1214.12 L1758.33 1214.12 L1757.74 1214.12 L1757.16 1214.12 L1756.57 1214.12 L1755.99 1214.12 L1755.4 1214.12 L1754.81 1214.12 L1754.23 1214.12 L1753.64 1214.12 L1753.05 1214.12 L1752.47 1214.12 L1751.88 1214.12 L1751.29 1214.12 L1750.71 1214.12 L1750.12 1214.12 L1749.53 1214.12 L1748.95 1214.12 L1748.36 1214.12 L1747.78 1214.12 L1747.19 1214.12 L1746.6 1214.12 L1746.02 1214.12 L1745.43 1214.12 L1744.84 1214.12 L1744.26 1214.12 L1743.67 1214.12 L1743.08 1214.12 L1742.5 1214.12 L1741.91 1214.12 L1741.32 1214.12 L1740.74 1214.12 L1740.15 1214.12 L1739.57 1214.12 L1738.98 1214.12 L1738.39 1214.12 L1737.81 1214.12 L1737.22 1214.12 L1736.63 1214.12 L1736.05 1214.12 L1735.46 1214.12 L1734.87 1214.12 L1734.29 1214.12 L1733.7 1214.12 L1733.11 1214.12 L1732.53 1214.12 L1731.94 1214.12 L1731.36 1214.12 L1730.77 1214.12 L1730.18 1214.12 L1729.6 1214.12 L1729.01 1214.12 L1728.42 1214.12 L1727.84 1214.12 L1727.25 1214.12 L1726.66 1214.12 L1726.08 1214.12 L1725.49 1214.12 L1724.91 1214.12 L1724.32 1214.12 L1723.73 1214.12 L1723.15 1214.12 L1722.56 1214.12 L1721.97 1214.12 L1721.39 1214.12 L1720.8 1214.12 L1720.21 1214.12 L1719.63 1214.12 L1719.04 1214.12 L1718.45 1214.12 L1717.87 1214.12 L1717.28 1214.12 L1716.7 1214.12 L1716.11 1214.12 L1715.52 1214.12 L1714.94 1214.12 L1714.35 1214.12 L1713.76 1214.12 L1713.18 1214.12 L1712.59 1214.12 L1712 1214.12 L1711.42 1214.12 L1710.83 1214.12 L1710.24 1214.12 L1709.66 1214.12 L1709.07 1214.12 L1708.49 1214.12 L1707.9 1214.12 L1707.31 1214.12 L1706.73 1214.12 L1706.14 1214.12 L1705.55 1214.12 L1704.97 1214.12 L1704.38 1214.12 L1703.79 1214.12 L1703.21 1214.12 L1702.62 1214.12 L1702.04 1214.12 L1701.45 1214.12 L1700.86 1214.12 L1700.28 1214.12 L1699.69 1214.12 L1699.1 1214.12 L1698.52 1214.12 L1697.93 1214.12 L1697.34 1214.12 L1696.76 1214.12 L1696.17 1214.12 L1695.58 1214.12 L1695 1214.12 L1694.41 1214.12 L1693.83 1214.12 L1693.24 1214.12 L1692.65 1214.12 L1692.07 1214.12 L1691.48 1214.12 L1690.89 1214.12 L1690.31 1214.12 L1689.72 1214.12 L1689.13 1214.12 L1688.55 1214.12 L1687.96 1214.12 L1687.37 1214.12 L1686.79 1214.12 L1686.2 1214.12 L1685.62 1214.12 L1685.03 1214.12 L1684.44 1214.12 L1683.86 1214.12 L1683.27 1214.12 L1682.68 1214.12 L1682.1 1214.12 L1681.51 1214.12 L1680.92 1214.12 L1680.34 1214.12 L1679.75 1214.12 L1679.17 1214.12 L1678.58 1214.12 L1677.99 1214.12 L1677.41 1214.12 L1676.82 1214.12 L1676.23 1214.12 L1675.65 1214.12 L1675.06 1214.12 L1674.47 1214.12 L1673.89 1214.12 L1673.3 1214.12 L1672.71 1214.12 L1672.13 1214.12 L1671.54 1214.12 L1670.96 1214.12 L1670.37 1214.12 L1669.78 1214.12 L1669.2 1214.12 L1668.61 1214.12 L1668.02 1214.12 L1667.44 1214.12 L1666.85 1214.12 L1666.26 1214.12 L1665.68 1214.12 L1665.09 1214.12 L1664.5 1214.12 L1663.92 1214.12 L1663.33 1214.12 L1662.75 1214.12 L1662.16 1214.12 L1661.57 1214.12 L1660.99 1214.12 L1660.4 1214.12 L1659.81 1214.12 L1659.23 1214.12 L1658.64 1214.12 L1658.05 1214.12 L1657.47 1214.12 L1656.88 1214.12 L1656.29 1214.12 L1655.71 1214.12 L1655.12 1214.12 L1654.54 1214.12 L1653.95 1214.12 L1653.36 1214.12 L1652.78 1214.12 L1652.19 1214.12 L1651.6 1214.12 L1651.02 1214.12 L1650.43 1214.12 L1649.84 1214.12 L1649.26 1214.12 L1648.67 1214.12 L1648.09 1214.12 L1647.5 1214.12 L1646.91 1214.12 L1646.33 1214.12 L1645.74 1214.12 L1645.15 1214.12 L1644.57 1214.12 L1643.98 1214.12 L1643.39 1214.12 L1642.81 1214.12 L1642.22 1214.12 L1641.63 1214.12 L1641.05 1214.12 L1640.46 1214.12 L1639.88 1214.12 L1639.29 1214.12 L1638.7 1214.12 L1638.12 1214.12 L1637.53 1214.12 L1636.94 1214.12 L1636.36 1214.12 L1635.77 1214.12 L1635.18 1214.12 L1634.6 1214.12 L1634.01 1214.12 L1633.42 1214.12 L1632.84 1214.12 L1632.25 1214.12 L1631.67 1214.12 L1631.08 1214.12 L1630.49 1214.12 L1629.91 1214.12 L1629.32 1214.12 L1628.73 1214.12 L1628.15 1214.12 L1627.56 1214.12 L1626.97 1214.12 L1626.39 1214.12 L1625.8 1214.12 L1625.22 1214.12 L1624.63 1214.12 L1624.04 1214.12 L1623.46 1214.12 L1622.87 1214.12 L1622.28 1214.12 L1621.7 1214.12 L1621.11 1214.12 L1620.52 1214.12 L1619.94 1214.12 L1619.35 1214.12 L1618.76 1214.12 L1618.18 1214.12 L1617.59 1214.12 L1617.01 1214.12 L1616.42 1214.12 L1615.83 1214.12 L1615.25 1214.12 L1614.66 1214.12 L1614.07 1214.12 L1613.49 1214.12 L1612.9 1214.12 L1612.31 1214.12 L1611.73 1214.12 L1611.14 1214.12 L1610.55 1214.12 L1609.97 1214.12 L1609.38 1214.12 L1608.8 1214.12 L1608.21 1214.12 L1607.62 1214.12 L1607.04 1214.12 L1606.45 1214.12 L1605.86 1214.12 L1605.28 1214.12 L1604.69 1214.12 L1604.1 1214.12 L1603.52 1214.12 L1602.93 1214.12 L1602.34 1214.12 L1601.76 1214.12 L1601.17 1214.12 L1600.59 1214.12 L1600 1214.12 L1599.41 1214.12 L1598.83 1214.12 L1598.24 1214.12 L1597.65 1214.12 L1597.07 1214.12 L1596.48 1214.12 L1595.89 1214.12 L1595.31 1214.12 L1594.72 1214.12 L1594.14 1214.12 L1593.55 1214.12 L1592.96 1214.12 L1592.38 1214.12 L1591.79 1214.12 L1591.2 1214.12 L1590.62 1214.12 L1590.03 1214.12 L1589.44 1214.12 L1588.86 1214.12 L1588.27 1214.12 L1587.68 1214.12 L1587.1 1214.12 L1586.51 1214.12 L1585.93 1214.12 L1585.34 1214.12 L1584.75 1214.12 L1584.17 1214.12 L1583.58 1214.12 L1582.99 1214.12 L1582.41 1214.12 L1581.82 1214.12 L1581.23 1214.12 L1580.65 1214.12 L1580.06 1214.12 L1579.47 1214.12 L1578.89 1214.12 L1578.3 1214.12 L1577.72 1214.12 L1577.13 1214.12 L1576.54 1214.12 L1575.96 1214.12 L1575.37 1214.12 L1574.78 1214.12 L1574.2 1214.12 L1573.61 1214.12 L1573.02 1214.12 L1572.44 1214.12 L1571.85 1214.12 L1571.27 1214.12 L1570.68 1214.12 L1570.09 1214.12 L1569.51 1214.12 L1568.92 1214.12 L1568.33 1214.12 L1567.75 1214.12 L1567.16 1214.12 L1566.57 1214.12 L1565.99 1214.12 L1565.4 1214.12 L1564.81 1214.12 L1564.23 1214.12 L1563.64 1214.12 L1563.06 1214.12 L1562.47 1214.12 L1561.88 1214.12 L1561.3 1214.12 L1560.71 1214.12 L1560.12 1214.12 L1559.54 1214.12 L1558.95 1214.12 L1558.36 1214.12 L1557.78 1214.12 L1557.19 1214.12 L1556.6 1214.12 L1556.02 1214.12 L1555.43 1214.12 L1554.85 1214.12 L1554.26 1214.12 L1553.67 1214.12 L1553.09 1214.12 L1552.5 1214.12 L1551.91 1214.12 L1551.33 1214.12 L1550.74 1214.12 L1550.15 1214.12 L1549.57 1214.12 L1548.98 1214.12 L1548.4 1214.12 L1547.81 1214.12 L1547.22 1214.12 L1546.64 1214.12 L1546.05 1214.12 L1545.46 1214.12 L1544.88 1214.12 L1544.29 1214.12 L1543.7 1214.12 L1543.12 1214.12 L1542.53 1214.12 L1541.94 1214.12 L1541.36 1214.12 L1540.77 1214.12 L1540.19 1214.12 L1539.6 1214.12 L1539.01 1214.12 L1538.43 1214.12 L1537.84 1214.12 L1537.25 1214.12 L1536.67 1214.12 L1536.08 1214.12 L1535.49 1214.12 L1534.91 1214.12 L1534.32 1214.12 L1533.73 1214.12 L1533.15 1214.12 L1532.56 1214.12 L1531.98 1214.12 L1531.39 1214.12 L1530.8 1214.12 L1530.22 1214.12 L1529.63 1214.12 L1529.04 1214.12 L1528.46 1214.12 L1527.87 1214.12 L1527.28 1214.12 L1526.7 1214.12 L1526.11 1214.12 L1525.52 1214.12 L1524.94 1214.12 L1524.35 1214.12 L1523.77 1214.12 L1523.18 1214.12 L1522.59 1214.12 L1522.01 1214.12 L1521.42 1214.12 L1520.83 1214.12 L1520.25 1214.12 L1519.66 1214.12 L1519.07 1214.12 L1518.49 1214.12 L1517.9 1214.12 L1517.32 1214.12 L1516.73 1214.12 L1516.14 1214.12 L1515.56 1214.12 L1514.97 1214.12 L1514.38 1214.12 L1513.8 1214.12 L1513.21 1214.12 L1512.62 1214.12 L1512.04 1214.12 L1511.45 1214.12 L1510.86 1214.12 L1510.28 1214.12 L1509.69 1214.12 L1509.11 1214.12 L1508.52 1214.12 L1507.93 1214.12 L1507.35 1214.12 L1506.76 1214.12 L1506.17 1214.12 L1505.59 1214.12 L1505 1214.12 L1504.41 1214.12 L1503.83 1214.12 L1503.24 1214.12 L1502.65 1214.12 L1502.07 1214.12 L1501.48 1214.12 L1500.9 1214.12 L1500.31 1214.12 L1499.72 1214.12 L1499.14 1214.12 L1498.55 1214.12 L1497.96 1214.12 L1497.38 1214.12 L1496.79 1214.12 L1496.2 1214.12 L1495.62 1214.12 L1495.03 1214.12 L1494.45 1214.12 L1493.86 1214.12 L1493.27 1214.12 L1492.69 1214.12 L1492.1 1214.12 L1491.51 1214.12 L1490.93 1214.12 L1490.34 1214.12 L1489.75 1214.12 L1489.17 1214.12 L1488.58 1214.12 L1487.99 1214.12 L1487.41 1214.12 L1486.82 1214.12 L1486.24 1214.12 L1485.65 1214.12 L1485.06 1214.12 L1484.48 1214.12 L1483.89 1214.12 L1483.3 1214.12 L1482.72 1214.12 L1482.13 1214.12 L1481.54 1214.12 L1480.96 1214.12 L1480.37 1214.12 L1479.78 1214.12 L1479.2 1214.12 L1478.61 1214.12 L1478.03 1214.12 L1477.44 1214.12 L1476.85 1214.12 L1476.27 1214.12 L1475.68 1214.12 L1475.09 1214.12 L1474.51 1214.12 L1473.92 1214.12 L1473.33 1214.12 L1472.75 1214.12 L1472.16 1214.12 L1471.57 1214.12 L1470.99 1214.12 L1470.4 1214.12 L1469.82 1214.12 L1469.23 1214.12 L1468.64 1214.12 L1468.06 1214.12 L1467.47 1214.12 L1466.88 1214.12 L1466.3 1214.12 L1465.71 1214.12 L1465.12 1214.12 L1464.54 1214.12 L1463.95 1214.12 L1463.37 1214.12 L1462.78 1214.12 L1462.19 1214.12 L1461.61 1214.12 L1461.02 1214.12 L1460.43 1214.12 L1459.85 1214.12 L1459.26 1214.12 L1458.67 1214.12 L1458.09 1214.12 L1457.5 1214.12 L1456.91 1214.12 L1456.33 1214.12 L1455.74 1214.12 L1455.16 1214.12 L1454.57 1214.12 L1453.98 1214.12 L1453.4 1214.12 L1452.81 1214.12 L1452.22 1214.12 L1451.64 1214.12 L1451.05 1214.12 L1450.46 1214.12 L1449.88 1214.12 L1449.29 1214.12 L1448.7 1214.12 L1448.12 1214.12 L1447.53 1214.12 L1446.95 1214.12 L1446.36 1214.12 L1445.77 1214.12 L1445.19 1214.12 L1444.6 1214.12 L1444.01 1214.12 L1443.43 1214.12 L1442.84 1214.12 L1442.25 1214.12 L1441.67 1214.12 L1441.08 1214.12 L1440.5 1214.12 L1439.91 1214.12 L1439.32 1214.12 L1438.74 1214.12 L1438.15 1214.12 L1437.56 1214.12 L1436.98 1214.12 L1436.39 1214.12 L1435.8 1214.12 L1435.22 1214.12 L1434.63 1214.12 L1434.04 1214.12 L1433.46 1214.12 L1432.87 1214.12 L1432.29 1214.12 L1431.7 1214.12 L1431.11 1214.12 L1430.53 1214.12 L1429.94 1214.12 L1429.35 1214.12 L1428.77 1214.12 L1428.18 1214.12 L1427.59 1214.12 L1427.01 1214.12 L1426.42 1214.12 L1425.83 1214.12 L1425.25 1214.12 L1424.66 1214.12 L1424.08 1214.12 L1423.49 1214.12 L1422.9 1214.12 L1422.32 1214.12 L1421.73 1214.12 L1421.14 1214.12 L1420.56 1214.12 L1419.97 1214.12 L1419.38 1214.12 L1418.8 1214.12 L1418.21 1214.12 L1417.63 1214.12 L1417.04 1214.12 L1416.45 1214.12 L1415.87 1214.12 L1415.28 1214.12 L1414.69 1214.12 L1414.11 1214.12 L1413.52 1214.12 L1412.93 1214.12 L1412.35 1214.12 L1411.76 1214.12 L1411.17 1214.12 L1410.59 1214.12 L1410 1214.12 L1409.42 1214.12 L1408.83 1214.12 L1408.24 1214.12 L1407.66 1214.12 L1407.07 1214.12 L1406.48 1214.12 L1405.9 1214.12 L1405.31 1214.12 L1404.72 1214.12 L1404.14 1214.12 L1403.55 1214.12 L1402.96 1214.12 L1402.38 1214.12 L1401.79 1214.12 L1401.21 1214.12 L1400.62 1214.12 L1400.03 1214.12 L1399.45 1214.12 L1398.86 1214.12 L1398.27 1214.12 L1397.69 1214.12 L1397.1 1214.12 L1396.51 1214.12 L1395.93 1214.12 L1395.34 1214.12 L1394.75 1214.12 L1394.17 1214.12 L1393.58 1214.12 L1393 1214.12 L1392.41 1214.12 L1391.82 1214.12 L1391.24 1214.12 L1390.65 1214.12 L1390.06 1214.12 L1389.48 1214.12 L1388.89 1214.12 L1388.3 1214.12 L1387.72 1214.12 L1387.13 1214.12 L1386.55 1214.12 L1385.96 1214.12 L1385.37 1214.12 L1384.79 1214.12 L1384.2 1214.12 L1383.61 1214.12 L1383.03 1214.12 L1382.44 1214.12 L1381.85 1214.12 L1381.27 1214.12 L1380.68 1214.12 L1380.09 1214.12 L1379.51 1214.12 L1378.92 1214.12 L1378.34 1214.12 L1377.75 1214.12 L1377.16 1214.12 L1376.58 1214.12 L1375.99 1214.12 L1375.4 1214.12 L1374.82 1214.12 L1374.23 1214.12 L1373.64 1214.12 L1373.06 1214.12 L1372.47 1214.12 L1371.88 1214.12 L1371.3 1214.12 L1370.71 1214.12 L1370.13 1214.12 L1369.54 1214.12 L1368.95 1214.12 L1368.37 1214.12 L1367.78 1214.12 L1367.19 1214.12 L1366.61 1214.12 L1366.02 1214.12 L1365.43 1214.12 L1364.85 1214.12 L1364.26 1214.12 L1363.68 1214.12 L1363.09 1214.12 L1362.5 1214.12 L1361.92 1214.12 L1361.33 1214.12 L1360.74 1214.12 L1360.16 1214.12 L1359.57 1214.12 L1358.98 1214.12 L1358.4 1214.12 L1357.81 1214.12 L1357.22 1214.12 L1356.64 1214.12 L1356.05 1214.12 L1355.47 1214.12 L1354.88 1214.12 L1354.29 1214.12 L1353.71 1214.12 L1353.12 1214.12 L1352.53 1214.12 L1351.95 1214.12 L1351.36 1214.12 L1350.77 1214.12 L1350.19 1214.12 L1349.6 1214.12 L1349.01 1214.12 L1348.43 1214.12 L1347.84 1214.12 L1347.26 1214.12 L1346.67 1214.12 L1346.08 1214.12 L1345.5 1214.12 L1344.91 1214.12 L1344.32 1214.12 L1343.74 1214.12 L1343.15 1214.12 L1342.56 1214.12 L1341.98 1214.12 L1341.39 1214.12 L1340.8 1214.12 L1340.22 1214.12 L1339.63 1214.12 L1339.05 1214.12 L1338.46 1214.12 L1337.87 1214.12 L1337.29 1214.12 L1336.7 1214.12 L1336.11 1214.12 L1335.53 1214.12 L1334.94 1214.12 L1334.35 1214.12 L1333.77 1214.12 L1333.18 1214.12 L1332.6 1214.12 L1332.01 1214.12 L1331.42 1214.12 L1330.84 1214.12 L1330.25 1214.12 L1329.66 1214.12 L1329.08 1214.12 L1328.49 1214.12 L1327.9 1214.12 L1327.32 1214.12 L1326.73 1214.12 L1326.14 1214.12 L1325.56 1214.12 L1324.97 1214.12 L1324.39 1214.12 L1323.8 1214.12 L1323.21 1214.12 L1322.63 1214.12 L1322.04 1214.12 L1321.45 1214.12 L1320.87 1214.12 L1320.28 1214.12 L1319.69 1214.12 L1319.11 1214.12 L1318.52 1214.12 L1317.93 1214.12 L1317.35 1214.12 L1316.76 1214.12 L1316.18 1214.12 L1315.59 1214.12 L1315 1214.12 L1314.42 1214.12 L1313.83 1214.12 L1313.24 1214.12 L1312.66 1214.12 L1312.07 1214.12 L1311.48 1214.12 L1310.9 1214.12 L1310.31 1214.12 L1309.73 1214.12 L1309.14 1214.12 L1308.55 1214.12 L1307.97 1214.12 L1307.38 1214.12 L1306.79 1214.12 L1306.21 1214.12 L1305.62 1214.12 L1305.03 1214.12 L1304.45 1214.12 L1303.86 1214.12 L1303.27 1214.12 L1302.69 1214.12 L1302.1 1214.12 L1301.52 1214.12 L1300.93 1214.12 L1300.34 1214.12 L1299.76 1214.12 L1299.17 1214.12 L1298.58 1214.12 L1298 1214.12 L1297.41 1214.12 L1296.82 1214.12 L1296.24 1214.12 L1295.65 1214.12 L1295.06 1214.12 L1294.48 1214.12 L1293.89 1214.12 L1293.31 1214.12 L1292.72 1214.12 L1292.13 1214.12 L1291.55 1214.12 L1290.96 1214.12 L1290.37 1214.12 L1289.79 1214.12 L1289.2 1214.12 L1288.61 1214.12 L1288.03 1214.12 L1287.44 1214.12 L1286.86 1214.12 L1286.27 1214.12 L1285.68 1214.12 L1285.1 1214.12 L1284.51 1214.12 L1283.92 1214.12 L1283.34 1214.12 L1282.75 1214.12 L1282.16 1214.12 L1281.58 1214.12 L1280.99 1214.12 L1280.4 1214.12 L1279.82 1214.12 L1279.23 1214.12 L1278.65 1214.12 L1278.06 1214.12 L1277.47 1214.12 L1276.89 1214.12 L1276.3 1214.12 L1275.71 1214.12 L1275.13 1214.12 L1274.54 1214.12 L1273.95 1214.12 L1273.37 1214.12 L1272.78 1214.12 L1272.19 1214.12 L1271.61 1214.12 L1271.02 1214.12 L1270.44 1214.12 L1269.85 1214.12 L1269.26 1214.12 L1268.68 1214.12 L1268.09 1214.12 L1267.5 1214.12 L1266.92 1214.12 L1266.33 1214.12 L1265.74 1214.12 L1265.16 1214.12 L1264.57 1214.12 L1263.98 1214.12 L1263.4 1214.12 L1262.81 1214.12 L1262.23 1214.12 L1261.64 1214.12 L1261.05 1214.12 L1260.47 1214.12 L1259.88 1214.12 L1259.29 1214.12 L1258.71 1214.12 L1258.12 1214.12 L1257.53 1214.12 L1256.95 1214.12 L1256.36 1214.12 L1255.78 1214.12 L1255.19 1214.12 L1254.6 1214.12 L1254.02 1214.12 L1253.43 1214.12 L1252.84 1214.12 L1252.26 1214.12 L1251.67 1214.12 L1251.08 1214.12 L1250.5 1214.12 L1249.91 1214.12 L1249.32 1214.12 L1248.74 1214.12 L1248.15 1214.12 L1247.57 1214.12 L1246.98 1214.12 L1246.39 1214.12 L1245.81 1214.12 L1245.22 1214.12 L1244.63 1214.12 L1244.05 1214.12 L1243.46 1214.12 L1242.87 1214.12 L1242.29 1214.12 L1241.7 1214.12 L1241.11 1214.12 L1240.53 1214.12 L1239.94 1214.12 L1239.36 1214.12 L1238.77 1214.12 L1238.18 1214.12 L1237.6 1214.12 L1237.01 1214.12 L1236.42 1214.12 L1235.84 1214.12 L1235.25 1214.12 L1234.66 1214.12 L1234.08 1214.12 L1233.49 1214.12 L1232.91 1214.12 L1232.32 1214.12 L1231.73 1214.12 L1231.15 1214.12 L1230.56 1214.12 L1229.97 1214.12 L1229.39 1214.12 L1228.8 1214.12 L1228.21 1214.12 L1227.63 1214.12 L1227.04 1214.12 L1226.45 1214.12 L1225.87 1214.12 L1225.28 1214.12 L1224.7 1214.12 L1224.11 1214.12 L1223.52 1214.12 L1222.94 1214.12 L1222.35 1214.12 L1221.76 1214.12 L1221.18 1214.12 L1220.59 1214.12 L1220 1214.12 L1219.42 1214.12 L1218.83 1214.12 L1218.24 1214.12 L1217.66 1214.12 L1217.07 1214.12 L1216.49 1214.12 L1215.9 1214.12 L1215.31 1214.12 L1214.73 1214.12 L1214.14 1214.12 L1213.55 1214.12 L1212.97 1214.12 L1212.38 1214.12 L1211.79 1214.12 L1211.21 1214.12 L1210.62 1214.12 L1210.03 1214.12 L1209.45 1214.12 L1208.86 1214.12 L1208.28 1214.12 L1207.69 1214.12 L1207.1 1214.12 L1206.52 1214.12 L1205.93 1214.12 L1205.34 1214.12 L1204.76 1214.12 L1204.17 1214.12 L1203.58 1214.12 L1203 1214.12 L1202.41 1214.12 L1201.83 1214.12 L1201.24 1214.12 L1200.65 1214.12 L1200.07 1214.12 L1199.48 1214.12 L1198.89 1214.12 L1198.31 1214.12 L1197.72 1214.12 L1197.13 1214.12 L1196.55 1214.12 L1195.96 1214.12 L1195.37 1214.12 L1194.79 1214.12 L1194.2 1214.12 L1193.62 1214.12 L1193.03 1214.12 L1192.44 1214.12 L1191.86 1214.12 L1191.27 1214.12 L1190.68 1214.12 L1190.1 1214.12 L1189.51 1214.12 L1188.92 1214.12 L1188.34 1214.12 L1187.75 1214.12 L1187.16 1214.12 L1186.58 1214.12 L1185.99 1214.12 L1185.41 1214.12 L1184.82 1214.12 L1184.23 1214.12 L1183.65 1214.12 L1183.06 1214.12 L1182.47 1214.12 L1181.89 1214.12 L1181.3 1214.12 L1180.71 1214.12 L1180.13 1214.12 L1179.54 1214.12 L1178.96 1214.12 L1178.37 1214.12 L1177.78 1214.12 L1177.2 1214.12 L1176.61 1214.12 L1176.02 1214.12 L1175.44 1214.12 L1174.85 1214.12 L1174.26 1214.12 L1173.68 1214.12 L1173.09 1214.12 L1172.5 1214.12 L1171.92 1214.12 L1171.33 1214.12 L1170.75 1214.12 L1170.16 1214.12 L1169.57 1214.12 L1168.99 1214.12 L1168.4 1214.12 L1167.81 1214.12 L1167.23 1214.12 L1166.64 1214.12 L1166.05 1214.12 L1165.47 1214.12 L1164.88 1214.12 L1164.29 1214.12 L1163.71 1214.12 L1163.12 1214.12 L1162.54 1214.12 L1161.95 1214.12 L1161.36 1214.12 L1160.78 1214.12 L1160.19 1214.12 L1159.6 1214.12 L1159.02 1214.12 L1158.43 1214.12 L1157.84 1214.12 L1157.26 1214.12 L1156.67 1214.12 L1156.09 1214.12 L1155.5 1214.12 L1154.91 1214.12 L1154.33 1214.12 L1153.74 1214.12 L1153.15 1214.12 L1152.57 1214.12 L1151.98 1214.12 L1151.39 1214.12 L1150.81 1214.12 L1150.22 1214.12 L1149.63 1214.12 L1149.05 1214.12 L1148.46 1214.12 L1147.88 1214.12 L1147.29 1214.12 L1146.7 1214.12 L1146.12 1214.12 L1145.53 1214.12 L1144.94 1214.12 L1144.36 1214.12 L1143.77 1214.12 L1143.18 1214.12 L1142.6 1214.12 L1142.01 1214.12 L1141.42 1214.12 L1140.84 1214.12 L1140.25 1214.12 L1139.67 1214.12 L1139.08 1214.12 L1138.49 1214.12 L1137.91 1214.12 L1137.32 1214.12 L1136.73 1214.12 L1136.15 1214.12 L1135.56 1214.12 L1134.97 1214.12 L1134.39 1214.12 L1133.8 1214.12 L1133.21 1214.12 L1132.63 1214.12 L1132.04 1214.12 L1131.46 1214.12 L1130.87 1214.12 L1130.28 1214.12 L1129.7 1214.12 L1129.11 1214.12 L1128.52 1214.12 L1127.94 1214.12 L1127.35 1214.12 L1126.76 1214.12 L1126.18 1214.12 L1125.59 1214.12 L1125.01 1214.12 L1124.42 1214.12 L1123.83 1214.12 L1123.25 1214.12 L1122.66 1214.12 L1122.07 1214.12 L1121.49 1214.12 L1120.9 1214.12 L1120.31 1214.12 L1119.73 1214.12 L1119.14 1214.12 L1118.55 1214.12 L1117.97 1214.12 L1117.38 1214.12 L1116.8 1214.12 L1116.21 1214.12 L1115.62 1214.12 L1115.04 1214.12 L1114.45 1214.12 L1113.86 1214.12 L1113.28 1214.12 L1112.69 1214.12 L1112.1 1214.12 L1111.52 1214.12 L1110.93 1214.12 L1110.34 1214.12 L1109.76 1214.12 L1109.17 1214.12 L1108.59 1214.12 L1108 1214.12 L1107.41 1214.12 L1106.83 1214.12 L1106.24 1214.12 L1105.65 1214.12 L1105.07 1214.12 L1104.48 1214.12 L1103.89 1214.12 L1103.31 1214.12 L1102.72 1214.12 L1102.14 1214.12 L1101.55 1214.12 L1100.96 1214.12 L1100.38 1214.12 L1099.79 1214.12 L1099.2 1214.12 L1098.62 1214.12 L1098.03 1214.12 L1097.44 1214.12 L1096.86 1214.12 L1096.27 1214.12 L1095.68 1214.12 L1095.1 1214.12 L1094.51 1214.12 L1093.93 1214.12 L1093.34 1214.12 L1092.75 1214.12 L1092.17 1214.12 L1091.58 1214.12 L1090.99 1214.12 L1090.41 1214.12 L1089.82 1214.12 L1089.23 1214.12 L1088.65 1214.12 L1088.06 1214.12 L1087.47 1214.12 L1086.89 1214.12 L1086.3 1214.12 L1085.72 1214.12 L1085.13 1214.12 L1084.54 1214.12 L1083.96 1214.12 L1083.37 1214.12 L1082.78 1214.12 L1082.2 1214.12 L1081.61 1214.12 L1081.02 1214.12 L1080.44 1214.12 L1079.85 1214.12 L1079.26 1214.12 L1078.68 1214.12 L1078.09 1214.12 L1077.51 1214.12 L1076.92 1214.12 L1076.33 1214.12 L1075.75 1214.12 L1075.16 1214.12 L1074.57 1214.12 L1073.99 1214.12 L1073.4 1214.12 L1072.81 1214.12 L1072.23 1214.12 L1071.64 1214.12 L1071.06 1214.12 L1070.47 1214.12 L1069.88 1214.12 L1069.3 1214.12 L1068.71 1214.12 L1068.12 1214.12 L1067.54 1214.12 L1066.95 1214.12 L1066.36 1214.12 L1065.78 1214.12 L1065.19 1214.12 L1064.6 1214.12 L1064.02 1214.12 L1063.43 1214.12 L1062.85 1214.12 L1062.26 1214.12 L1061.67 1214.12 L1061.09 1214.12 L1060.5 1214.12 L1059.91 1214.12 L1059.33 1214.12 L1058.74 1214.12 L1058.15 1214.12 L1057.57 1214.12 L1056.98 1214.12 L1056.39 1214.12 L1055.81 1214.12 L1055.22 1214.12 L1054.64 1214.12 L1054.05 1214.12 L1053.46 1214.12 L1052.88 1214.12 L1052.29 1214.12 L1051.7 1214.12 L1051.12 1214.12 L1050.53 1214.12 L1049.94 1214.12 L1049.36 1214.12 L1048.77 1214.12 L1048.19 1214.12 L1047.6 1214.12 L1047.01 1214.12 L1046.43 1214.12 L1045.84 1214.12 L1045.25 1214.12 L1044.67 1214.12 L1044.08 1214.12 L1043.49 1214.12 L1042.91 1214.12 L1042.32 1214.12 L1041.73 1214.12 L1041.15 1214.12 L1040.56 1214.12 L1039.98 1214.12 L1039.39 1214.12 L1038.8 1214.12 L1038.22 1214.12 L1037.63 1214.12 L1037.04 1214.12 L1036.46 1214.12 L1035.87 1214.12 L1035.28 1214.12 L1034.7 1214.12 L1034.11 1214.12 L1033.52 1214.12 L1032.94 1214.12 L1032.35 1214.12 L1031.77 1214.12 L1031.18 1214.12 L1030.59 1214.12 L1030.01 1214.12 L1029.42 1214.12 L1028.83 1214.12 L1028.25 1214.12 L1027.66 1214.12 L1027.07 1214.12 L1026.49 1214.12 L1025.9 1214.12 L1025.32 1214.12 L1024.73 1214.12 L1024.14 1214.12 L1023.56 1214.12 L1022.97 1214.12 L1022.38 1214.12 L1021.8 1214.12 L1021.21 1214.12 L1020.62 1214.12 L1020.04 1214.12 L1019.45 1214.12 L1018.86 1214.12 L1018.28 1214.12 L1017.69 1214.12 L1017.11 1214.12 L1016.52 1214.12 L1015.93 1214.12 L1015.35 1214.12 L1014.76 1214.12 L1014.17 1214.12 L1013.59 1214.12 L1013 1214.12 L1012.41 1214.12 L1011.83 1214.12 L1011.24 1214.12 L1010.65 1214.12 L1010.07 1214.12 L1009.48 1214.12 L1008.9 1214.12 L1008.31 1214.12 L1007.72 1214.12 L1007.14 1214.12 L1006.55 1214.12 L1005.96 1214.12 L1005.38 1214.12 L1004.79 1214.12 L1004.2 1214.12 L1003.62 1214.12 L1003.03 1214.12 L1002.44 1214.12 L1001.86 1214.12 L1001.27 1214.12 L1000.69 1214.12 L1000.1 1214.12 L999.513 1214.12 L998.926 1214.12 L998.34 1214.12 L997.754 1214.12 L997.167 1214.12 L996.581 1214.12 L995.994 1214.12 L995.408 1214.12 L994.822 1214.12 L994.235 1214.12 L993.649 1214.12 L993.062 1214.12 L992.476 1214.12 L991.889 1214.12 L991.303 1214.12 L990.717 1214.12 L990.13 1214.12 L989.544 1214.12 L988.957 1214.12 L988.371 1214.12 L987.785 1214.12 L987.198 1214.12 L986.612 1214.12 L986.025 1214.12  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.5 986.612,1214.5 987.198,1214.5 987.785,1214.5 988.371,1214.5 988.957,1214.5 989.544,1214.5 990.13,1214.5 990.717,1214.5 991.303,1214.5 991.889,1214.5 992.476,1214.5 993.062,1214.5 993.649,1214.5 994.235,1214.5 994.822,1214.5 995.408,1214.5 995.994,1214.5 996.581,1214.5 997.167,1214.5 997.754,1214.5 998.34,1214.5 998.926,1214.5 999.513,1214.5 1000.1,1214.5 1000.69,1214.5 1001.27,1214.5 1001.86,1214.5 1002.44,1214.5 1003.03,1214.5 1003.62,1214.5 1004.2,1214.5 1004.79,1214.5 1005.38,1214.5 1005.96,1214.5 1006.55,1214.5 1007.14,1214.5 1007.72,1214.5 1008.31,1214.5 1008.9,1214.5 1009.48,1214.5 1010.07,1214.5 1010.65,1214.5 1011.24,1214.5 1011.83,1214.5 1012.41,1214.5 1013,1214.5 1013.59,1214.5 1014.17,1214.5 1014.76,1214.5 1015.35,1214.5 1015.93,1214.5 1016.52,1214.5 1017.11,1214.5 1017.69,1214.5 1018.28,1214.5 1018.86,1214.5 1019.45,1214.5 1020.04,1214.5 1020.62,1214.5 1021.21,1214.5 1021.8,1214.5 1022.38,1214.5 1022.97,1214.5 1023.56,1214.5 1024.14,1214.5 1024.73,1214.5 1025.32,1214.5 1025.9,1214.5 1026.49,1214.5 1027.07,1214.5 1027.66,1214.5 1028.25,1214.5 1028.83,1214.5 1029.42,1214.5 1030.01,1214.5 1030.59,1214.5 1031.18,1214.5 1031.77,1214.5 1032.35,1214.5 1032.94,1214.5 1033.52,1214.5 1034.11,1214.5 1034.7,1214.5 1035.28,1214.5 1035.87,1214.5 1036.46,1214.5 1037.04,1214.5 1037.63,1214.5 1038.22,1214.5 1038.8,1214.5 1039.39,1214.5 1039.98,1214.5 1040.56,1214.5 1041.15,1214.5 1041.73,1214.5 1042.32,1214.5 1042.91,1214.5 1043.49,1214.5 1044.08,1214.5 1044.67,1214.5 1045.25,1214.5 1045.84,1214.5 1046.43,1214.5 1047.01,1214.5 1047.6,1214.5 1048.19,1214.5 1048.77,1214.5 1049.36,1214.5 1049.94,1214.5 1050.53,1214.5 1051.12,1214.5 1051.7,1214.5 1052.29,1214.5 1052.88,1214.5 1053.46,1214.5 1054.05,1214.5 1054.64,1214.5 1055.22,1214.5 1055.81,1214.5 1056.39,1214.5 1056.98,1214.5 1057.57,1214.5 1058.15,1214.5 1058.74,1214.5 1059.33,1214.5 1059.91,1214.5 1060.5,1214.5 1061.09,1214.5 1061.67,1214.5 1062.26,1214.5 1062.85,1214.5 1063.43,1214.5 1064.02,1214.5 1064.6,1214.5 1065.19,1214.5 1065.78,1214.5 1066.36,1214.5 1066.95,1214.5 1067.54,1214.5 1068.12,1214.5 1068.71,1214.5 1069.3,1214.5 1069.88,1214.5 1070.47,1214.5 1071.06,1214.5 1071.64,1214.5 1072.23,1214.5 1072.81,1214.5 1073.4,1214.5 1073.99,1214.5 1074.57,1214.5 1075.16,1214.5 1075.75,1214.5 1076.33,1214.5 1076.92,1214.5 1077.51,1214.5 1078.09,1214.5 1078.68,1214.5 1079.26,1214.5 1079.85,1214.5 1080.44,1214.5 1081.02,1214.5 1081.61,1214.5 1082.2,1214.5 1082.78,1214.5 1083.37,1214.5 1083.96,1214.5 1084.54,1214.5 1085.13,1214.5 1085.72,1214.5 1086.3,1214.5 1086.89,1214.5 1087.47,1214.5 1088.06,1214.5 1088.65,1214.5 1089.23,1214.5 1089.82,1214.5 1090.41,1214.5 1090.99,1214.5 1091.58,1214.5 1092.17,1214.5 1092.75,1214.5 1093.34,1214.5 1093.93,1214.5 1094.51,1214.5 1095.1,1214.5 1095.68,1214.5 1096.27,1214.5 1096.86,1214.5 1097.44,1214.5 1098.03,1214.5 1098.62,1214.5 1099.2,1214.5 1099.79,1214.5 1100.38,1214.5 1100.96,1214.5 1101.55,1214.5 1102.14,1214.5 1102.72,1214.5 1103.31,1214.5 1103.89,1214.5 1104.48,1214.5 1105.07,1214.5 1105.65,1214.5 1106.24,1214.5 1106.83,1214.5 1107.41,1214.5 1108,1214.5 1108.59,1214.5 1109.17,1214.5 1109.76,1214.5 1110.34,1214.5 1110.93,1214.5 1111.52,1214.5 1112.1,1214.5 1112.69,1214.5 1113.28,1214.5 1113.86,1214.5 1114.45,1214.5 1115.04,1214.5 1115.62,1214.5 1116.21,1214.5 1116.8,1214.5 1117.38,1214.5 1117.97,1214.5 1118.55,1214.5 1119.14,1214.5 1119.73,1214.5 1120.31,1214.5 1120.9,1214.5 1121.49,1214.5 1122.07,1214.5 1122.66,1214.5 1123.25,1214.5 1123.83,1214.5 1124.42,1214.5 1125.01,1214.5 1125.59,1214.5 1126.18,1214.5 1126.76,1214.5 1127.35,1214.5 1127.94,1214.5 1128.52,1214.5 1129.11,1214.5 1129.7,1214.5 1130.28,1214.5 1130.87,1214.5 1131.46,1214.5 1132.04,1214.5 1132.63,1214.5 1133.21,1214.5 1133.8,1214.5 1134.39,1214.5 1134.97,1214.5 1135.56,1214.5 1136.15,1214.5 1136.73,1214.5 1137.32,1214.5 1137.91,1214.5 1138.49,1214.5 1139.08,1214.5 1139.67,1214.5 1140.25,1214.5 1140.84,1214.5 1141.42,1214.5 1142.01,1214.5 1142.6,1214.5 1143.18,1214.5 1143.77,1214.5 1144.36,1214.5 1144.94,1214.5 1145.53,1214.5 1146.12,1214.5 1146.7,1214.5 1147.29,1214.5 1147.88,1214.5 1148.46,1214.5 1149.05,1214.5 1149.63,1214.5 1150.22,1214.5 1150.81,1214.5 1151.39,1214.5 1151.98,1214.5 1152.57,1214.5 1153.15,1214.5 1153.74,1214.5 1154.33,1214.5 1154.91,1214.5 1155.5,1214.5 1156.09,1214.5 1156.67,1214.5 1157.26,1214.5 1157.84,1214.5 1158.43,1214.5 1159.02,1214.5 1159.6,1214.5 1160.19,1214.5 1160.78,1214.5 1161.36,1214.5 1161.95,1214.5 1162.54,1214.5 1163.12,1214.5 1163.71,1214.5 1164.29,1214.5 1164.88,1214.5 1165.47,1214.5 1166.05,1214.5 1166.64,1214.5 1167.23,1214.5 1167.81,1214.5 1168.4,1214.5 1168.99,1214.5 1169.57,1214.5 1170.16,1214.5 1170.75,1214.5 1171.33,1214.5 1171.92,1214.5 1172.5,1214.5 1173.09,1214.5 1173.68,1214.5 1174.26,1214.5 1174.85,1214.5 1175.44,1214.5 1176.02,1214.5 1176.61,1214.5 1177.2,1214.5 1177.78,1214.5 1178.37,1214.5 1178.96,1214.5 1179.54,1214.5 1180.13,1214.5 1180.71,1214.5 1181.3,1214.5 1181.89,1214.5 1182.47,1214.5 1183.06,1214.5 1183.65,1214.5 1184.23,1214.5 1184.82,1214.5 1185.41,1214.5 1185.99,1214.5 1186.58,1214.5 1187.16,1214.5 1187.75,1214.5 1188.34,1214.5 1188.92,1214.5 1189.51,1214.5 1190.1,1214.5 1190.68,1214.5 1191.27,1214.5 1191.86,1214.5 1192.44,1214.5 1193.03,1214.5 1193.62,1214.5 1194.2,1214.5 1194.79,1214.5 1195.37,1214.5 1195.96,1214.5 1196.55,1214.5 1197.13,1214.5 1197.72,1214.5 1198.31,1214.5 1198.89,1214.5 1199.48,1214.5 1200.07,1214.5 1200.65,1214.5 1201.24,1214.5 1201.83,1214.5 1202.41,1214.5 1203,1214.5 1203.58,1214.5 1204.17,1214.5 1204.76,1214.5 1205.34,1214.5 1205.93,1214.5 1206.52,1214.5 1207.1,1214.5 1207.69,1214.5 1208.28,1214.5 1208.86,1214.5 1209.45,1214.5 1210.03,1214.5 1210.62,1214.5 1211.21,1214.5 1211.79,1214.5 1212.38,1214.5 1212.97,1214.5 1213.55,1214.5 1214.14,1214.5 1214.73,1214.5 1215.31,1214.5 1215.9,1214.5 1216.49,1214.5 1217.07,1214.5 1217.66,1214.5 1218.24,1214.5 1218.83,1214.5 1219.42,1214.5 1220,1214.5 1220.59,1214.5 1221.18,1214.5 1221.76,1214.5 1222.35,1214.5 1222.94,1214.5 1223.52,1214.5 1224.11,1214.5 1224.7,1214.5 1225.28,1214.5 1225.87,1214.5 1226.45,1214.5 1227.04,1214.5 1227.63,1214.5 1228.21,1214.5 1228.8,1214.5 1229.39,1214.5 1229.97,1214.5 1230.56,1214.5 1231.15,1214.5 1231.73,1214.5 1232.32,1214.5 1232.91,1214.5 1233.49,1214.5 1234.08,1214.5 1234.66,1214.5 1235.25,1214.5 1235.84,1214.5 1236.42,1214.5 1237.01,1214.5 1237.6,1214.5 1238.18,1214.5 1238.77,1214.5 1239.36,1214.5 1239.94,1214.5 1240.53,1214.5 1241.11,1214.5 1241.7,1214.5 1242.29,1214.5 1242.87,1214.5 1243.46,1214.5 1244.05,1214.5 1244.63,1214.5 1245.22,1214.5 1245.81,1214.5 1246.39,1214.5 1246.98,1214.5 1247.57,1214.5 1248.15,1214.5 1248.74,1214.5 1249.32,1214.5 1249.91,1214.5 1250.5,1214.5 1251.08,1214.5 1251.67,1214.5 1252.26,1214.5 1252.84,1214.5 1253.43,1214.5 1254.02,1214.5 1254.6,1214.5 1255.19,1214.5 1255.78,1214.5 1256.36,1214.5 1256.95,1214.5 1257.53,1214.5 1258.12,1214.5 1258.71,1214.5 1259.29,1214.5 1259.88,1214.5 1260.47,1214.5 1261.05,1214.5 1261.64,1214.5 1262.23,1214.5 1262.81,1214.5 1263.4,1214.5 1263.98,1214.5 1264.57,1214.5 1265.16,1214.5 1265.74,1214.5 1266.33,1214.5 1266.92,1214.5 1267.5,1214.5 1268.09,1214.5 1268.68,1214.5 1269.26,1214.5 1269.85,1214.5 1270.44,1214.5 1271.02,1214.5 1271.61,1214.5 1272.19,1214.5 1272.78,1214.5 1273.37,1214.5 1273.95,1214.5 1274.54,1214.5 1275.13,1214.5 1275.71,1214.5 1276.3,1214.5 1276.89,1214.5 1277.47,1214.5 1278.06,1214.5 1278.65,1214.5 1279.23,1214.5 1279.82,1214.5 1280.4,1214.5 1280.99,1214.5 1281.58,1214.5 1282.16,1214.5 1282.75,1214.5 1283.34,1214.5 1283.92,1214.5 1284.51,1214.5 1285.1,1214.5 1285.68,1214.5 1286.27,1214.5 1286.86,1214.5 1287.44,1214.5 1288.03,1214.5 1288.61,1214.5 1289.2,1214.5 1289.79,1214.5 1290.37,1214.5 1290.96,1214.5 1291.55,1214.5 1292.13,1214.5 1292.72,1214.5 1293.31,1214.5 1293.89,1214.5 1294.48,1214.5 1295.06,1214.5 1295.65,1214.5 1296.24,1214.5 1296.82,1214.5 1297.41,1214.5 1298,1214.5 1298.58,1214.5 1299.17,1214.5 1299.76,1214.5 1300.34,1214.5 1300.93,1214.5 1301.52,1214.5 1302.1,1214.5 1302.69,1214.5 1303.27,1214.5 1303.86,1214.5 1304.45,1214.5 1305.03,1214.5 1305.62,1214.5 1306.21,1214.5 1306.79,1214.5 1307.38,1214.5 1307.97,1214.5 1308.55,1214.5 1309.14,1214.5 1309.73,1214.5 1310.31,1214.5 1310.9,1214.5 1311.48,1214.5 1312.07,1214.5 1312.66,1214.5 1313.24,1214.5 1313.83,1214.5 1314.42,1214.5 1315,1214.5 1315.59,1214.5 1316.18,1214.5 1316.76,1214.5 1317.35,1214.5 1317.93,1214.5 1318.52,1214.5 1319.11,1214.5 1319.69,1214.5 1320.28,1214.5 1320.87,1214.5 1321.45,1214.5 1322.04,1214.5 1322.63,1214.5 1323.21,1214.5 1323.8,1214.5 1324.39,1214.5 1324.97,1214.5 1325.56,1214.5 1326.14,1214.5 1326.73,1214.5 1327.32,1214.5 1327.9,1214.5 1328.49,1214.5 1329.08,1214.5 1329.66,1214.5 1330.25,1214.5 1330.84,1214.5 1331.42,1214.5 1332.01,1214.5 1332.6,1214.5 1333.18,1214.5 1333.77,1214.5 1334.35,1214.5 1334.94,1214.5 1335.53,1214.5 1336.11,1214.5 1336.7,1214.5 1337.29,1214.5 1337.87,1214.5 1338.46,1214.5 1339.05,1214.5 1339.63,1214.5 1340.22,1214.5 1340.8,1214.5 1341.39,1214.5 1341.98,1214.5 1342.56,1214.5 1343.15,1214.5 1343.74,1214.5 1344.32,1214.5 1344.91,1214.5 1345.5,1214.5 1346.08,1214.5 1346.67,1214.5 1347.26,1214.5 1347.84,1214.5 1348.43,1214.5 1349.01,1214.5 1349.6,1214.5 1350.19,1214.5 1350.77,1214.5 1351.36,1214.5 1351.95,1214.5 1352.53,1214.5 1353.12,1214.5 1353.71,1214.5 1354.29,1214.5 1354.88,1214.5 1355.47,1214.5 1356.05,1214.5 1356.64,1214.5 1357.22,1214.5 1357.81,1214.5 1358.4,1214.5 1358.98,1214.5 1359.57,1214.5 1360.16,1214.5 1360.74,1214.5 1361.33,1214.5 1361.92,1214.5 1362.5,1214.5 1363.09,1214.5 1363.68,1214.5 1364.26,1214.5 1364.85,1214.5 1365.43,1214.5 1366.02,1214.5 1366.61,1214.5 1367.19,1214.5 1367.78,1214.5 1368.37,1214.5 1368.95,1214.5 1369.54,1214.5 1370.13,1214.5 1370.71,1214.5 1371.3,1214.5 1371.88,1214.5 1372.47,1214.5 1373.06,1214.5 1373.64,1214.5 1374.23,1214.5 1374.82,1214.5 1375.4,1214.5 1375.99,1214.5 1376.58,1214.5 1377.16,1214.5 1377.75,1214.5 1378.34,1214.5 1378.92,1214.5 1379.51,1214.5 1380.09,1214.5 1380.68,1214.5 1381.27,1214.5 1381.85,1214.5 1382.44,1214.5 1383.03,1214.5 1383.61,1214.5 1384.2,1214.5 1384.79,1214.5 1385.37,1214.5 1385.96,1214.5 1386.55,1214.5 1387.13,1214.5 1387.72,1214.5 1388.3,1214.5 1388.89,1214.5 1389.48,1214.5 1390.06,1214.5 1390.65,1214.5 1391.24,1214.5 1391.82,1214.5 1392.41,1214.5 1393,1214.5 1393.58,1214.5 1394.17,1214.5 1394.75,1214.5 1395.34,1214.5 1395.93,1214.5 1396.51,1214.5 1397.1,1214.5 1397.69,1214.5 1398.27,1214.5 1398.86,1214.5 1399.45,1214.5 1400.03,1214.5 1400.62,1214.5 1401.21,1214.5 1401.79,1214.5 1402.38,1214.5 1402.96,1214.5 1403.55,1214.5 1404.14,1214.5 1404.72,1214.5 1405.31,1214.5 1405.9,1214.5 1406.48,1214.5 1407.07,1214.5 1407.66,1214.5 1408.24,1214.5 1408.83,1214.5 1409.42,1214.5 1410,1214.5 1410.59,1214.5 1411.17,1214.5 1411.76,1214.5 1412.35,1214.5 1412.93,1214.5 1413.52,1214.5 1414.11,1214.5 1414.69,1214.5 1415.28,1214.5 1415.87,1214.5 1416.45,1214.5 1417.04,1214.5 1417.63,1214.5 1418.21,1214.5 1418.8,1214.5 1419.38,1214.5 1419.97,1214.5 1420.56,1214.5 1421.14,1214.5 1421.73,1214.5 1422.32,1214.5 1422.9,1214.5 1423.49,1214.5 1424.08,1214.5 1424.66,1214.5 1425.25,1214.5 1425.83,1214.5 1426.42,1214.5 1427.01,1214.5 1427.59,1214.5 1428.18,1214.5 1428.77,1214.5 1429.35,1214.5 1429.94,1214.5 1430.53,1214.5 1431.11,1214.5 1431.7,1214.5 1432.29,1214.5 1432.87,1214.5 1433.46,1214.5 1434.04,1214.5 1434.63,1214.5 1435.22,1214.5 1435.8,1214.5 1436.39,1214.5 1436.98,1214.5 1437.56,1214.5 1438.15,1214.5 1438.74,1214.5 1439.32,1214.5 1439.91,1214.5 1440.5,1214.5 1441.08,1214.5 1441.67,1214.5 1442.25,1214.5 1442.84,1214.5 1443.43,1214.5 1444.01,1214.5 1444.6,1214.5 1445.19,1214.5 1445.77,1214.5 1446.36,1214.5 1446.95,1214.5 1447.53,1214.5 1448.12,1214.5 1448.7,1214.5 1449.29,1214.5 1449.88,1214.5 1450.46,1214.5 1451.05,1214.5 1451.64,1214.5 1452.22,1214.5 1452.81,1214.5 1453.4,1214.5 1453.98,1214.5 1454.57,1214.5 1455.16,1214.5 1455.74,1214.5 1456.33,1214.5 1456.91,1214.5 1457.5,1214.5 1458.09,1214.5 1458.67,1214.5 1459.26,1214.5 1459.85,1214.5 1460.43,1214.5 1461.02,1214.5 1461.61,1214.5 1462.19,1214.5 1462.78,1214.5 1463.37,1214.5 1463.95,1214.5 1464.54,1214.5 1465.12,1214.5 1465.71,1214.5 1466.3,1214.5 1466.88,1214.5 1467.47,1214.5 1468.06,1214.5 1468.64,1214.5 1469.23,1214.5 1469.82,1214.5 1470.4,1214.5 1470.99,1214.5 1471.57,1214.5 1472.16,1214.5 1472.75,1214.5 1473.33,1214.5 1473.92,1214.5 1474.51,1214.5 1475.09,1214.5 1475.68,1214.5 1476.27,1214.5 1476.85,1214.5 1477.44,1214.5 1478.03,1214.5 1478.61,1214.5 1479.2,1214.5 1479.78,1214.5 1480.37,1214.5 1480.96,1214.5 1481.54,1214.5 1482.13,1214.5 1482.72,1214.5 1483.3,1214.5 1483.89,1214.5 1484.48,1214.5 1485.06,1214.5 1485.65,1214.5 1486.24,1214.5 1486.82,1214.5 1487.41,1214.5 1487.99,1214.5 1488.58,1214.5 1489.17,1214.5 1489.75,1214.5 1490.34,1214.5 1490.93,1214.5 1491.51,1214.5 1492.1,1214.5 1492.69,1214.5 1493.27,1214.5 1493.86,1214.5 1494.45,1214.5 1495.03,1214.5 1495.62,1214.5 1496.2,1214.5 1496.79,1214.5 1497.38,1214.5 1497.96,1214.5 1498.55,1214.5 1499.14,1214.5 1499.72,1214.5 1500.31,1214.5 1500.9,1214.5 1501.48,1214.5 1502.07,1214.5 1502.65,1214.5 1503.24,1214.5 1503.83,1214.5 1504.41,1214.5 1505,1214.5 1505.59,1214.5 1506.17,1214.5 1506.76,1214.5 1507.35,1214.5 1507.93,1214.5 1508.52,1214.5 1509.11,1214.5 1509.69,1214.5 1510.28,1214.5 1510.86,1214.5 1511.45,1214.5 1512.04,1214.5 1512.62,1214.5 1513.21,1214.5 1513.8,1214.5 1514.38,1214.5 1514.97,1214.5 1515.56,1214.5 1516.14,1214.5 1516.73,1214.5 1517.32,1214.5 1517.9,1214.5 1518.49,1214.5 1519.07,1214.5 1519.66,1214.5 1520.25,1214.5 1520.83,1214.5 1521.42,1214.5 1522.01,1214.5 1522.59,1214.5 1523.18,1214.5 1523.77,1214.5 1524.35,1214.5 1524.94,1214.5 1525.52,1214.5 1526.11,1214.5 1526.7,1214.5 1527.28,1214.5 1527.87,1214.5 1528.46,1214.5 1529.04,1214.5 1529.63,1214.5 1530.22,1214.5 1530.8,1214.5 1531.39,1214.5 1531.98,1214.5 1532.56,1214.5 1533.15,1214.5 1533.73,1214.5 1534.32,1214.5 1534.91,1214.5 1535.49,1214.5 1536.08,1214.5 1536.67,1214.5 1537.25,1214.5 1537.84,1214.5 1538.43,1214.5 1539.01,1214.5 1539.6,1214.5 1540.19,1214.5 1540.77,1214.5 1541.36,1214.5 1541.94,1214.5 1542.53,1214.5 1543.12,1214.5 1543.7,1214.5 1544.29,1214.5 1544.88,1214.5 1545.46,1214.5 1546.05,1214.5 1546.64,1214.5 1547.22,1214.5 1547.81,1214.5 1548.4,1214.5 1548.98,1214.5 1549.57,1214.5 1550.15,1214.5 1550.74,1214.5 1551.33,1214.5 1551.91,1214.5 1552.5,1214.5 1553.09,1214.5 1553.67,1214.5 1554.26,1214.5 1554.85,1214.5 1555.43,1214.5 1556.02,1214.5 1556.6,1214.5 1557.19,1214.5 1557.78,1214.5 1558.36,1214.5 1558.95,1214.5 1559.54,1214.5 1560.12,1214.5 1560.71,1214.5 1561.3,1214.5 1561.88,1214.5 1562.47,1214.5 1563.06,1214.5 1563.64,1214.5 1564.23,1214.5 1564.81,1214.5 1565.4,1214.5 1565.99,1214.5 1566.57,1214.5 1567.16,1214.5 1567.75,1214.5 1568.33,1214.5 1568.92,1214.5 1569.51,1214.5 1570.09,1214.5 1570.68,1214.5 1571.27,1214.5 1571.85,1214.5 1572.44,1214.5 1573.02,1214.5 1573.61,1214.5 1574.2,1214.5 1574.78,1214.5 1575.37,1214.5 1575.96,1214.5 1576.54,1214.5 1577.13,1214.5 1577.72,1214.5 1578.3,1214.5 1578.89,1214.5 1579.47,1214.5 1580.06,1214.5 1580.65,1214.5 1581.23,1214.5 1581.82,1214.5 1582.41,1214.5 1582.99,1214.5 1583.58,1214.5 1584.17,1214.5 1584.75,1214.5 1585.34,1214.5 1585.93,1214.5 1586.51,1214.5 1587.1,1214.5 1587.68,1214.5 1588.27,1214.5 1588.86,1214.5 1589.44,1214.5 1590.03,1214.5 1590.62,1214.5 1591.2,1214.5 1591.79,1214.5 1592.38,1214.5 1592.96,1214.5 1593.55,1214.5 1594.14,1214.5 1594.72,1214.5 1595.31,1214.5 1595.89,1214.5 1596.48,1214.5 1597.07,1214.5 1597.65,1214.5 1598.24,1214.5 1598.83,1214.5 1599.41,1214.5 1600,1214.5 1600.59,1214.5 1601.17,1214.5 1601.76,1214.5 1602.34,1214.5 1602.93,1214.5 1603.52,1214.5 1604.1,1214.5 1604.69,1214.5 1605.28,1214.5 1605.86,1214.5 1606.45,1214.5 1607.04,1214.5 1607.62,1214.5 1608.21,1214.5 1608.8,1214.5 1609.38,1214.5 1609.97,1214.5 1610.55,1214.5 1611.14,1214.5 1611.73,1214.5 1612.31,1214.5 1612.9,1214.5 1613.49,1214.5 1614.07,1214.5 1614.66,1214.5 1615.25,1214.5 1615.83,1214.5 1616.42,1214.5 1617.01,1214.5 1617.59,1214.5 1618.18,1214.5 1618.76,1214.5 1619.35,1214.5 1619.94,1214.5 1620.52,1214.5 1621.11,1214.5 1621.7,1214.5 1622.28,1214.5 1622.87,1214.5 1623.46,1214.5 1624.04,1214.5 1624.63,1214.5 1625.22,1214.5 1625.8,1214.5 1626.39,1214.5 1626.97,1214.5 1627.56,1214.5 1628.15,1214.5 1628.73,1214.5 1629.32,1214.5 1629.91,1214.5 1630.49,1214.5 1631.08,1214.5 1631.67,1214.5 1632.25,1214.5 1632.84,1214.5 1633.42,1214.5 1634.01,1214.5 1634.6,1214.5 1635.18,1214.5 1635.77,1214.5 1636.36,1214.5 1636.94,1214.5 1637.53,1214.5 1638.12,1214.5 1638.7,1214.5 1639.29,1214.5 1639.88,1214.5 1640.46,1214.5 1641.05,1214.5 1641.63,1214.5 1642.22,1214.5 1642.81,1214.5 1643.39,1214.5 1643.98,1214.5 1644.57,1214.5 1645.15,1214.5 1645.74,1214.5 1646.33,1214.5 1646.91,1214.5 1647.5,1214.5 1648.09,1214.5 1648.67,1214.5 1649.26,1214.5 1649.84,1214.5 1650.43,1214.5 1651.02,1214.5 1651.6,1214.5 1652.19,1214.5 1652.78,1214.5 1653.36,1214.5 1653.95,1214.5 1654.54,1214.5 1655.12,1214.5 1655.71,1214.5 1656.29,1214.5 1656.88,1214.5 1657.47,1214.5 1658.05,1214.5 1658.64,1214.5 1659.23,1214.5 1659.81,1214.5 1660.4,1214.5 1660.99,1214.5 1661.57,1214.5 1662.16,1214.5 1662.75,1214.5 1663.33,1214.5 1663.92,1214.5 1664.5,1214.5 1665.09,1214.5 1665.68,1214.5 1666.26,1214.5 1666.85,1214.5 1667.44,1214.5 1668.02,1214.5 1668.61,1214.5 1669.2,1214.5 1669.78,1214.5 1670.37,1214.5 1670.96,1214.5 1671.54,1214.5 1672.13,1214.5 1672.71,1214.5 1673.3,1214.5 1673.89,1214.5 1674.47,1214.5 1675.06,1214.5 1675.65,1214.5 1676.23,1214.5 1676.82,1214.5 1677.41,1214.5 1677.99,1214.5 1678.58,1214.5 1679.17,1214.5 1679.75,1214.5 1680.34,1214.5 1680.92,1214.5 1681.51,1214.5 1682.1,1214.5 1682.68,1214.5 1683.27,1214.5 1683.86,1214.5 1684.44,1214.5 1685.03,1214.5 1685.62,1214.5 1686.2,1214.5 1686.79,1214.5 1687.37,1214.5 1687.96,1214.5 1688.55,1214.5 1689.13,1214.5 1689.72,1214.5 1690.31,1214.5 1690.89,1214.5 1691.48,1214.5 1692.07,1214.5 1692.65,1214.5 1693.24,1214.5 1693.83,1214.5 1694.41,1214.5 1695,1214.5 1695.58,1214.5 1696.17,1214.5 1696.76,1214.5 1697.34,1214.5 1697.93,1214.5 1698.52,1214.5 1699.1,1214.5 1699.69,1214.5 1700.28,1214.5 1700.86,1214.5 1701.45,1214.5 1702.04,1214.5 1702.62,1214.5 1703.21,1214.5 1703.79,1214.5 1704.38,1214.5 1704.97,1214.5 1705.55,1214.5 1706.14,1214.5 1706.73,1214.5 1707.31,1214.5 1707.9,1214.5 1708.49,1214.5 1709.07,1214.5 1709.66,1214.5 1710.24,1214.5 1710.83,1214.5 1711.42,1214.5 1712,1214.5 1712.59,1214.5 1713.18,1214.5 1713.76,1214.5 1714.35,1214.5 1714.94,1214.5 1715.52,1214.5 1716.11,1214.5 1716.7,1214.5 1717.28,1214.5 1717.87,1214.5 1718.45,1214.5 1719.04,1214.5 1719.63,1214.5 1720.21,1214.5 1720.8,1214.5 1721.39,1214.5 1721.97,1214.5 1722.56,1214.5 1723.15,1214.5 1723.73,1214.5 1724.32,1214.5 1724.91,1214.5 1725.49,1214.5 1726.08,1214.5 1726.66,1214.5 1727.25,1214.5 1727.84,1214.5 1728.42,1214.5 1729.01,1214.5 1729.6,1214.5 1730.18,1214.5 1730.77,1214.5 1731.36,1214.5 1731.94,1214.5 1732.53,1214.5 1733.11,1214.5 1733.7,1214.5 1734.29,1214.5 1734.87,1214.5 1735.46,1214.5 1736.05,1214.5 1736.63,1214.5 1737.22,1214.5 1737.81,1214.5 1738.39,1214.5 1738.98,1214.5 1739.57,1214.5 1740.15,1214.5 1740.74,1214.5 1741.32,1214.5 1741.91,1214.5 1742.5,1214.5 1743.08,1214.5 1743.67,1214.5 1744.26,1214.5 1744.84,1214.5 1745.43,1214.5 1746.02,1214.5 1746.6,1214.5 1747.19,1214.5 1747.78,1214.5 1748.36,1214.5 1748.95,1214.5 1749.53,1214.5 1750.12,1214.5 1750.71,1214.5 1751.29,1214.5 1751.88,1214.5 1752.47,1214.5 1753.05,1214.5 1753.64,1214.5 1754.23,1214.5 1754.81,1214.5 1755.4,1214.5 1755.99,1214.5 1756.57,1214.5 1757.16,1214.5 1757.74,1214.5 1758.33,1214.5 1758.92,1214.5 1759.5,1214.5 1760.09,1214.5 1760.68,1214.5 1761.26,1214.5 1761.85,1214.5 1762.44,1214.5 1763.02,1214.5 1763.61,1214.5 1764.19,1214.5 1764.78,1214.5 1765.37,1214.5 1765.95,1214.5 1766.54,1214.5 1767.13,1214.5 1767.71,1214.5 1768.3,1214.5 1768.89,1214.5 1769.47,1214.5 1770.06,1214.5 1770.65,1214.5 1771.23,1214.5 1771.82,1214.5 1772.4,1214.5 1772.99,1214.5 1773.58,1214.5 1774.16,1214.5 1774.75,1214.5 1775.34,1214.5 1775.92,1214.5 1776.51,1214.5 1777.1,1214.5 1777.68,1214.5 1778.27,1214.5 1778.86,1214.5 1779.44,1214.5 1780.03,1214.5 1780.61,1214.5 1781.2,1214.5 1781.79,1214.5 1782.37,1214.5 1782.96,1214.5 1783.55,1214.5 1784.13,1214.5 1784.72,1214.5 1785.31,1214.5 1785.89,1214.5 1786.48,1214.5 1787.06,1214.5 1787.65,1214.5 1788.24,1214.5 1788.82,1214.5 1789.41,1214.5 1790,1214.5 1790.58,1214.5 1791.17,1214.5 1791.76,1214.5 1792.34,1214.5 1792.93,1214.5 1793.52,1214.5 1794.1,1214.5 1794.69,1214.5 1795.27,1214.5 1795.86,1214.5 1796.45,1214.5 1797.03,1214.5 1797.62,1214.5 1798.21,1214.5 1798.79,1214.5 1799.38,1214.5 1799.97,1214.5 1800.55,1214.5 1801.14,1214.5 1801.73,1214.5 1802.31,1214.5 1802.9,1214.5 1803.48,1214.5 1804.07,1214.5 1804.66,1214.5 1805.24,1214.5 1805.83,1214.5 1806.42,1214.5 1807,1214.5 1807.59,1214.5 1808.18,1214.5 1808.76,1214.5 1809.35,1214.5 1809.94,1214.5 1810.52,1214.5 1811.11,1214.5 1811.69,1214.5 1812.28,1214.5 1812.87,1214.5 1813.45,1214.5 1814.04,1214.5 1814.63,1214.5 1815.21,1214.5 1815.8,1214.5 1816.39,1214.5 1816.97,1214.5 1817.56,1214.5 1818.14,1214.5 1818.73,1214.5 1819.32,1214.5 1819.9,1214.5 1820.49,1214.5 1821.08,1214.5 1821.66,1214.5 1822.25,1214.5 1822.84,1214.5 1823.42,1214.5 1824.01,1214.5 1824.6,1214.5 1825.18,1214.5 1825.77,1214.5 1826.35,1214.5 1826.94,1214.5 1827.53,1214.5 1828.11,1214.5 1828.7,1214.5 1829.29,1214.5 1829.87,1214.5 1830.46,1214.5 1831.05,1214.5 1831.63,1214.5 1832.22,1214.5 1832.81,1214.5 1833.39,1214.5 1833.98,1214.5 1834.56,1214.5 1835.15,1214.5 1835.74,1214.5 1836.32,1214.5 1836.91,1214.5 1837.5,1214.5 1838.08,1214.5 1838.67,1214.5 1839.26,1214.5 1839.84,1214.5 1840.43,1214.5 1841.01,1214.5 1841.6,1214.5 1842.19,1214.5 1842.77,1214.5 1843.36,1214.5 1843.95,1214.5 1844.53,1214.5 1845.12,1214.5 1845.71,1214.5 1846.29,1214.5 1846.88,1214.5 1847.47,1214.5 1848.05,1214.5 1848.64,1214.5 1849.22,1214.5 1849.81,1214.5 1850.4,1214.5 1850.98,1214.5 1851.57,1214.5 1852.16,1214.5 1852.74,1214.5 1853.33,1214.5 1853.92,1214.5 1854.5,1214.5 1855.09,1214.5 1855.68,1214.5 1856.26,1214.5 1856.85,1214.5 1857.43,1214.5 1858.02,1214.5 1858.61,1214.5 1859.19,1214.5 1859.78,1214.5 1860.37,1214.5 1860.95,1214.5 1861.54,1214.5 1862.13,1214.5 1862.71,1214.5 1863.3,1214.5 1863.88,1214.5 1864.47,1214.5 1865.06,1214.5 1865.64,1214.5 1866.23,1214.5 1866.82,1214.5 1867.4,1214.5 1867.99,1214.5 1868.58,1214.5 1869.16,1214.5 1869.75,1214.5 1870.34,1214.5 1870.92,1214.5 1871.51,1214.5 1872.09,1214.5 1872.68,1214.5 1873.27,1214.5 1873.85,1214.5 1874.44,1214.5 1875.03,1214.5 1875.61,1214.5 1876.2,1214.5 1876.79,1214.5 1877.37,1214.5 1877.96,1214.5 1878.55,1214.5 1879.13,1214.5 1879.72,1214.5 1880.3,1214.5 1880.89,1214.5 1881.48,1214.5 1882.06,1214.5 1882.65,1214.5 1883.24,1214.5 1883.82,1214.5 1884.41,1214.5 1885,1214.5 1885.58,1214.5 1886.17,1214.5 1886.76,1214.5 1887.34,1214.5 1887.93,1214.5 1888.51,1214.5 1889.1,1214.5 1889.69,1214.5 1890.27,1214.5 1890.86,1214.5 1891.45,1214.5 1892.03,1214.5 1892.62,1214.5 1893.21,1214.5 1893.79,1214.5 1894.38,1214.5 1894.96,1214.5 1895.55,1214.5 1896.14,1214.5 1896.72,1214.5 1897.31,1214.5 1897.9,1214.5 1898.48,1214.5 1899.07,1214.5 1899.66,1214.5 1900.24,1214.5 1900.83,1214.5 1901.42,1214.5 1902,1214.5 1902.59,1214.5 1903.17,1214.5 1903.76,1214.5 1904.35,1214.5 1904.93,1214.5 1905.52,1214.5 1906.11,1214.5 1906.69,1214.5 1907.28,1214.5 1907.87,1214.5 1908.45,1214.5 1909.04,1214.5 1909.63,1214.5 1910.21,1214.5 1910.8,1214.5 1911.38,1214.5 1911.97,1214.5 1912.56,1214.5 1913.14,1214.5 1913.73,1214.5 1914.32,1214.5 1914.9,1214.5 1915.49,1214.5 1916.08,1214.5 1916.66,1214.5 1917.25,1214.5 1917.83,1214.5 1918.42,1214.5 1919.01,1214.5 1919.59,1214.5 1920.18,1214.5 1920.77,1214.5 1921.35,1214.5 1921.94,1214.5 1922.53,1214.5 1923.11,1214.5 1923.7,1214.5 1924.29,1214.5 1924.87,1214.5 1925.46,1214.5 1926.04,1214.5 1926.63,1214.5 1927.22,1214.5 1927.8,1214.5 1928.39,1214.5 1928.98,1214.5 1929.56,1214.5 1930.15,1214.5 1930.74,1214.5 1931.32,1214.5 1931.91,1214.5 1932.5,1214.5 1933.08,1214.5 1933.67,1214.5 1934.25,1214.5 1934.84,1214.5 1935.43,1214.5 1936.01,1214.5 1936.6,1214.5 1937.19,1214.5 1937.77,1214.5 1938.36,1214.5 1938.95,1214.5 1939.53,1214.5 1940.12,1214.5 1940.71,1214.5 1941.29,1214.5 1941.88,1214.5 1942.46,1214.5 1943.05,1214.5 1943.64,1214.5 1944.22,1214.5 1944.81,1214.5 1945.4,1214.5 1945.98,1214.5 1946.57,1214.5 1947.16,1214.5 1947.74,1214.5 1948.33,1214.5 1948.91,1214.5 1949.5,1214.5 1950.09,1214.5 1950.67,1214.5 1951.26,1214.5 1951.85,1214.5 1952.43,1214.5 1953.02,1214.5 1953.61,1214.5 1954.19,1214.5 1954.78,1214.5 1955.37,1214.5 1955.95,1214.5 1956.54,1214.5 1957.12,1214.5 1957.71,1214.5 1958.3,1214.5 1958.88,1214.5 1959.47,1214.5 1960.06,1214.5 1960.64,1214.5 1961.23,1214.5 1961.82,1214.5 1962.4,1214.5 1962.99,1214.5 1963.58,1214.5 1964.16,1214.5 1964.75,1214.5 1965.33,1214.5 1965.92,1214.5 1966.51,1214.5 1967.09,1214.5 1967.68,1214.5 1968.27,1214.5 1968.85,1214.5 1969.44,1214.5 1970.03,1214.5 1970.61,1214.5 1971.2,1214.5 1971.78,1214.5 1972.37,1214.5 1972.96,1214.5 1973.54,1214.5 1974.13,1214.5 1974.72,1214.5 1975.3,1214.5 1975.89,1214.5 1976.48,1214.5 1977.06,1214.5 1977.65,1214.5 1978.24,1214.5 1978.82,1214.5 1979.41,1214.5 1979.99,1214.5 1980.58,1214.5 1981.17,1214.5 1981.75,1214.5 1982.34,1214.5 1982.93,1214.5 1983.51,1214.5 1984.1,1214.5 1984.69,1214.5 1985.27,1214.5 1985.86,1214.5 1986.45,1214.5 1987.03,1214.5 1987.62,1214.5 1988.2,1214.5 1988.79,1214.5 1989.38,1214.5 1989.96,1214.5 1990.55,1214.5 1991.14,1214.5 1991.72,1214.5 1992.31,1214.5 1992.9,1214.5 1993.48,1214.5 1994.07,1214.5 1994.65,1214.5 1995.24,1214.5 1995.83,1214.5 1996.41,1214.5 1997,1214.5 1997.59,1214.5 1998.17,1214.5 1998.76,1214.5 1999.35,1214.5 1999.93,1214.5 2000.52,1214.5 2001.11,1214.5 2001.69,1214.5 2002.28,1214.5 2002.86,1214.5 2003.45,1214.5 2004.04,1214.5 2004.62,1214.5 2005.21,1214.5 2005.8,1214.5 2006.38,1214.5 2006.97,1214.5 2007.56,1214.5 2008.14,1214.5 2008.73,1214.5 2009.32,1214.5 2009.9,1214.5 2010.49,1214.5 2011.07,1214.5 2011.66,1214.5 2012.25,1214.5 2012.83,1214.5 2013.42,1214.5 2014.01,1214.5 2014.59,1214.5 2015.18,1214.5 2015.77,1214.5 2016.35,1214.5 2016.94,1214.5 2017.53,1214.5 2018.11,1214.5 2018.7,1214.5 2019.28,1214.5 2019.87,1214.5 2020.46,1214.5 2021.04,1214.5 2021.63,1214.5 2022.22,1214.5 2022.8,1214.5 2023.39,1214.5 2023.98,1214.5 2024.56,1214.5 2025.15,1214.5 2025.73,1214.5 2026.32,1214.5 2026.91,1214.5 2027.49,1214.5 2028.08,1214.5 2028.67,1214.5 2029.25,1214.5 2029.84,1214.5 2030.43,1214.5 2031.01,1214.5 2031.6,1214.5 2032.19,1214.5 2032.77,1214.5 2033.36,1214.5 2033.94,1214.5 2034.53,1214.5 2035.12,1214.5 2035.7,1214.5 2036.29,1214.5 2036.88,1214.5 2037.46,1214.5 2038.05,1214.5 2038.64,1214.5 2039.22,1214.5 2039.81,1214.5 2040.4,1214.5 2040.98,1214.5 2041.57,1214.5 2042.15,1214.5 2042.74,1214.5 2043.33,1214.5 2043.91,1214.5 2044.5,1214.5 2045.09,1214.5 2045.67,1214.5 2046.26,1214.5 2046.85,1214.5 2047.43,1214.5 2048.02,1214.5 2048.6,1214.5 2049.19,1214.5 2049.78,1214.5 2050.36,1214.5 2050.95,1214.5 2051.54,1214.5 2052.12,1214.5 2052.71,1214.5 2053.3,1214.5 2053.88,1214.5 2054.47,1214.5 2055.06,1214.5 2055.64,1214.5 2056.23,1214.5 2056.81,1214.5 2057.4,1214.5 2057.99,1214.5 2058.57,1214.5 2059.16,1214.5 2059.75,1214.5 2060.33,1214.5 2060.92,1214.5 2061.51,1214.5 2062.09,1214.5 2062.68,1214.5 2063.27,1214.5 2063.85,1214.5 2064.44,1214.5 2065.02,1214.5 2065.61,1214.5 2066.2,1214.5 2066.78,1214.5 2067.37,1214.5 2067.96,1214.5 2068.54,1214.5 2069.13,1214.5 2069.72,1214.5 2070.3,1214.5 2070.89,1214.5 2071.48,1214.5 2072.06,1214.5 2072.65,1214.5 2073.23,1214.5 2073.82,1214.5 2074.41,1214.5 2074.99,1214.5 2075.58,1214.5 2076.17,1214.5 2076.75,1214.5 2077.34,1214.5 2077.93,1214.5 2078.51,1214.5 2079.1,1214.5 2079.68,1214.5 2080.27,1214.5 2080.86,1214.5 2081.44,1214.5 2082.03,1214.5 2082.62,1214.5 2083.2,1214.5 2083.79,1214.5 2084.38,1214.5 2084.96,1214.5 2085.55,1214.5 2086.14,1214.5 2086.72,1214.5 2087.31,1214.5 2087.89,1214.5 2088.48,1214.5 2089.07,1214.5 2089.65,1214.5 2090.24,1214.5 2090.83,1214.5 2091.41,1214.5 2092,1214.5 2092.59,1214.5 2093.17,1214.5 2093.76,1214.5 2094.35,1214.5 2094.93,1214.5 2095.52,1214.5 2096.1,1214.5 2096.69,1214.5 2097.28,1214.5 2097.86,1214.5 2098.45,1214.5 2099.04,1214.5 2099.62,1214.5 2100.21,1214.5 2100.8,1214.5 2101.38,1214.5 2101.97,1214.5 2102.55,1214.5 2103.14,1214.5 2103.73,1214.5 2104.31,1214.5 2104.9,1214.5 2105.49,1214.5 2106.07,1214.5 2106.66,1214.5 2107.25,1214.5 2107.83,1214.5 2108.42,1214.5 2109.01,1214.5 2109.59,1214.5 2110.18,1214.5 2110.76,1214.5 2111.35,1214.5 2111.94,1214.5 2112.52,1214.5 2113.11,1214.5 2113.7,1214.5 2114.28,1214.5 2114.87,1214.5 2115.46,1214.5 2116.04,1214.5 2116.63,1214.5 2117.22,1214.5 2117.8,1214.5 2118.39,1214.5 2118.97,1214.5 2119.56,1214.5 2120.15,1214.5 2120.73,1214.5 2121.32,1214.5 2121.91,1214.5 2122.49,1214.5 2123.08,1214.5 2123.67,1214.5 2124.25,1214.5 2124.84,1214.5 2125.42,1214.5 2126.01,1214.5 2126.6,1214.5 2127.18,1214.5 2127.77,1214.5 2128.36,1214.5 2128.94,1214.5 2129.53,1214.5 2130.12,1214.5 2130.7,1214.5 2131.29,1214.5 2131.88,1214.5 2132.46,1214.5 2133.05,1214.5 2133.63,1214.5 2134.22,1214.5 2134.81,1214.5 2135.39,1214.5 2135.98,1214.5 2136.57,1214.5 2137.15,1214.5 2137.74,1214.5 2138.33,1214.5 2138.91,1214.5 2139.5,1214.5 2140.09,1214.5 2140.67,1214.5 2141.26,1214.5 2141.84,1214.5 2142.43,1214.5 2143.02,1214.5 2143.6,1214.5 2144.19,1214.5 2144.78,1214.5 2145.36,1214.5 2145.95,1214.5 2146.54,1214.5 2147.12,1214.5 2147.71,1214.5 2148.3,1214.5 2148.88,1214.5 2149.47,1214.5 2150.05,1214.5 2150.64,1214.5 2151.23,1214.5 2151.81,1214.5 2152.4,1214.5 2152.99,1214.5 2153.57,1214.5 2154.16,1214.5 2154.75,1214.5 2155.33,1214.5 2155.92,1214.5 2156.5,1214.5 2157.09,1214.5 2157.68,1214.5 2158.26,1214.5 \"/>\n<path clip-path=\"url(#clip682)\" d=\"M986.025 1214.43 L986.612 1214.43 L987.198 1214.43 L987.785 1214.43 L988.371 1214.43 L988.957 1214.43 L989.544 1214.43 L990.13 1214.43 L990.717 1214.43 L991.303 1214.43 L991.889 1214.43 L992.476 1214.43 L993.062 1214.43 L993.649 1214.43 L994.235 1214.43 L994.822 1214.43 L995.408 1214.43 L995.994 1214.43 L996.581 1214.43 L997.167 1214.43 L997.754 1214.43 L998.34 1214.43 L998.926 1214.43 L999.513 1214.43 L1000.1 1214.43 L1000.69 1214.43 L1001.27 1214.43 L1001.86 1214.43 L1002.44 1214.43 L1003.03 1214.43 L1003.62 1214.43 L1004.2 1214.43 L1004.79 1214.43 L1005.38 1214.43 L1005.96 1214.43 L1006.55 1214.43 L1007.14 1214.43 L1007.72 1214.43 L1008.31 1214.43 L1008.9 1214.43 L1009.48 1214.43 L1010.07 1214.43 L1010.65 1214.43 L1011.24 1214.43 L1011.83 1214.43 L1012.41 1214.43 L1013 1214.43 L1013.59 1214.43 L1014.17 1214.43 L1014.76 1214.43 L1015.35 1214.43 L1015.93 1214.43 L1016.52 1214.43 L1017.11 1214.43 L1017.69 1214.43 L1018.28 1214.43 L1018.86 1214.43 L1019.45 1214.43 L1020.04 1214.43 L1020.62 1214.43 L1021.21 1214.43 L1021.8 1214.43 L1022.38 1214.43 L1022.97 1214.43 L1023.56 1214.43 L1024.14 1214.43 L1024.73 1214.43 L1025.32 1214.43 L1025.9 1214.43 L1026.49 1214.43 L1027.07 1214.43 L1027.66 1214.43 L1028.25 1214.43 L1028.83 1214.43 L1029.42 1214.43 L1030.01 1214.43 L1030.59 1214.43 L1031.18 1214.43 L1031.77 1214.43 L1032.35 1214.43 L1032.94 1214.43 L1033.52 1214.43 L1034.11 1214.43 L1034.7 1214.43 L1035.28 1214.43 L1035.87 1214.43 L1036.46 1214.43 L1037.04 1214.43 L1037.63 1214.43 L1038.22 1214.43 L1038.8 1214.43 L1039.39 1214.43 L1039.98 1214.43 L1040.56 1214.43 L1041.15 1214.43 L1041.73 1214.43 L1042.32 1214.43 L1042.91 1214.43 L1043.49 1214.43 L1044.08 1214.43 L1044.67 1214.43 L1045.25 1214.43 L1045.84 1214.43 L1046.43 1214.43 L1047.01 1214.43 L1047.6 1214.43 L1048.19 1214.43 L1048.77 1214.43 L1049.36 1214.43 L1049.94 1214.43 L1050.53 1214.43 L1051.12 1214.43 L1051.7 1214.43 L1052.29 1214.43 L1052.88 1214.43 L1053.46 1214.43 L1054.05 1214.43 L1054.64 1214.43 L1055.22 1214.43 L1055.81 1214.43 L1056.39 1214.43 L1056.98 1214.43 L1057.57 1214.43 L1058.15 1214.43 L1058.74 1214.43 L1059.33 1214.43 L1059.91 1214.43 L1060.5 1214.43 L1061.09 1214.43 L1061.67 1214.43 L1062.26 1214.43 L1062.85 1214.43 L1063.43 1214.43 L1064.02 1214.43 L1064.6 1214.43 L1065.19 1214.43 L1065.78 1214.43 L1066.36 1214.43 L1066.95 1214.43 L1067.54 1214.43 L1068.12 1214.43 L1068.71 1214.43 L1069.3 1214.43 L1069.88 1214.43 L1070.47 1214.43 L1071.06 1214.43 L1071.64 1214.43 L1072.23 1214.43 L1072.81 1214.43 L1073.4 1214.43 L1073.99 1214.43 L1074.57 1214.43 L1075.16 1214.43 L1075.75 1214.43 L1076.33 1214.43 L1076.92 1214.43 L1077.51 1214.43 L1078.09 1214.43 L1078.68 1214.43 L1079.26 1214.43 L1079.85 1214.43 L1080.44 1214.43 L1081.02 1214.43 L1081.61 1214.43 L1082.2 1214.43 L1082.78 1214.43 L1083.37 1214.43 L1083.96 1214.43 L1084.54 1214.43 L1085.13 1214.43 L1085.72 1214.43 L1086.3 1214.43 L1086.89 1214.43 L1087.47 1214.43 L1088.06 1214.43 L1088.65 1214.43 L1089.23 1214.43 L1089.82 1214.43 L1090.41 1214.43 L1090.99 1214.43 L1091.58 1214.43 L1092.17 1214.43 L1092.75 1214.43 L1093.34 1214.43 L1093.93 1214.43 L1094.51 1214.43 L1095.1 1214.43 L1095.68 1214.43 L1096.27 1214.43 L1096.86 1214.43 L1097.44 1214.43 L1098.03 1214.43 L1098.62 1214.43 L1099.2 1214.43 L1099.79 1214.43 L1100.38 1214.43 L1100.96 1214.43 L1101.55 1214.43 L1102.14 1214.43 L1102.72 1214.43 L1103.31 1214.43 L1103.89 1214.43 L1104.48 1214.43 L1105.07 1214.43 L1105.65 1214.43 L1106.24 1214.43 L1106.83 1214.43 L1107.41 1214.43 L1108 1214.43 L1108.59 1214.43 L1109.17 1214.43 L1109.76 1214.43 L1110.34 1214.43 L1110.93 1214.43 L1111.52 1214.43 L1112.1 1214.43 L1112.69 1214.43 L1113.28 1214.43 L1113.86 1214.43 L1114.45 1214.43 L1115.04 1214.43 L1115.62 1214.43 L1116.21 1214.43 L1116.8 1214.43 L1117.38 1214.43 L1117.97 1214.43 L1118.55 1214.43 L1119.14 1214.43 L1119.73 1214.43 L1120.31 1214.43 L1120.9 1214.43 L1121.49 1214.43 L1122.07 1214.43 L1122.66 1214.43 L1123.25 1214.43 L1123.83 1214.43 L1124.42 1214.43 L1125.01 1214.43 L1125.59 1214.43 L1126.18 1214.43 L1126.76 1214.43 L1127.35 1214.43 L1127.94 1214.43 L1128.52 1214.43 L1129.11 1214.43 L1129.7 1214.43 L1130.28 1214.43 L1130.87 1214.43 L1131.46 1214.43 L1132.04 1214.43 L1132.63 1214.43 L1133.21 1214.43 L1133.8 1214.43 L1134.39 1214.43 L1134.97 1214.43 L1135.56 1214.43 L1136.15 1214.43 L1136.73 1214.43 L1137.32 1214.43 L1137.91 1214.43 L1138.49 1214.43 L1139.08 1214.43 L1139.67 1214.43 L1140.25 1214.43 L1140.84 1214.43 L1141.42 1214.43 L1142.01 1214.43 L1142.6 1214.43 L1143.18 1214.43 L1143.77 1214.43 L1144.36 1214.43 L1144.94 1214.43 L1145.53 1214.43 L1146.12 1214.43 L1146.7 1214.43 L1147.29 1214.43 L1147.88 1214.43 L1148.46 1214.43 L1149.05 1214.43 L1149.63 1214.43 L1150.22 1214.43 L1150.81 1214.43 L1151.39 1214.43 L1151.98 1214.43 L1152.57 1214.43 L1153.15 1214.43 L1153.74 1214.43 L1154.33 1214.43 L1154.91 1214.43 L1155.5 1214.43 L1156.09 1214.43 L1156.67 1214.43 L1157.26 1214.43 L1157.84 1214.43 L1158.43 1214.43 L1159.02 1214.43 L1159.6 1214.43 L1160.19 1214.43 L1160.78 1214.43 L1161.36 1214.43 L1161.95 1214.43 L1162.54 1214.43 L1163.12 1214.43 L1163.71 1214.43 L1164.29 1214.43 L1164.88 1214.43 L1165.47 1214.43 L1166.05 1214.43 L1166.64 1214.43 L1167.23 1214.43 L1167.81 1214.43 L1168.4 1214.43 L1168.99 1214.43 L1169.57 1214.43 L1170.16 1214.43 L1170.75 1214.43 L1171.33 1214.43 L1171.92 1214.43 L1172.5 1214.43 L1173.09 1214.43 L1173.68 1214.43 L1174.26 1214.43 L1174.85 1214.43 L1175.44 1214.43 L1176.02 1214.43 L1176.61 1214.43 L1177.2 1214.43 L1177.78 1214.43 L1178.37 1214.43 L1178.96 1214.43 L1179.54 1214.43 L1180.13 1214.43 L1180.71 1214.43 L1181.3 1214.43 L1181.89 1214.43 L1182.47 1214.43 L1183.06 1214.43 L1183.65 1214.43 L1184.23 1214.43 L1184.82 1214.43 L1185.41 1214.43 L1185.99 1214.43 L1186.58 1214.43 L1187.16 1214.43 L1187.75 1214.43 L1188.34 1214.43 L1188.92 1214.43 L1189.51 1214.43 L1190.1 1214.43 L1190.68 1214.43 L1191.27 1214.43 L1191.86 1214.43 L1192.44 1214.43 L1193.03 1214.43 L1193.62 1214.43 L1194.2 1214.43 L1194.79 1214.43 L1195.37 1214.43 L1195.96 1214.43 L1196.55 1214.43 L1197.13 1214.43 L1197.72 1214.43 L1198.31 1214.43 L1198.89 1214.43 L1199.48 1214.43 L1200.07 1214.43 L1200.65 1214.43 L1201.24 1214.43 L1201.83 1214.43 L1202.41 1214.43 L1203 1214.43 L1203.58 1214.43 L1204.17 1214.43 L1204.76 1214.43 L1205.34 1214.43 L1205.93 1214.43 L1206.52 1214.43 L1207.1 1214.43 L1207.69 1214.43 L1208.28 1214.43 L1208.86 1214.43 L1209.45 1214.43 L1210.03 1214.43 L1210.62 1214.43 L1211.21 1214.43 L1211.79 1214.43 L1212.38 1214.43 L1212.97 1214.43 L1213.55 1214.43 L1214.14 1214.43 L1214.73 1214.43 L1215.31 1214.43 L1215.9 1214.43 L1216.49 1214.43 L1217.07 1214.43 L1217.66 1214.43 L1218.24 1214.43 L1218.83 1214.43 L1219.42 1214.43 L1220 1214.43 L1220.59 1214.43 L1221.18 1214.43 L1221.76 1214.43 L1222.35 1214.43 L1222.94 1214.43 L1223.52 1214.43 L1224.11 1214.43 L1224.7 1214.43 L1225.28 1214.43 L1225.87 1214.43 L1226.45 1214.43 L1227.04 1214.43 L1227.63 1214.43 L1228.21 1214.43 L1228.8 1214.43 L1229.39 1214.43 L1229.97 1214.43 L1230.56 1214.43 L1231.15 1214.43 L1231.73 1214.43 L1232.32 1214.43 L1232.91 1214.43 L1233.49 1214.43 L1234.08 1214.43 L1234.66 1214.43 L1235.25 1214.43 L1235.84 1214.43 L1236.42 1214.43 L1237.01 1214.43 L1237.6 1214.43 L1238.18 1214.43 L1238.77 1214.43 L1239.36 1214.43 L1239.94 1214.43 L1240.53 1214.43 L1241.11 1214.43 L1241.7 1214.43 L1242.29 1214.43 L1242.87 1214.43 L1243.46 1214.43 L1244.05 1214.43 L1244.63 1214.43 L1245.22 1214.43 L1245.81 1214.43 L1246.39 1214.43 L1246.98 1214.43 L1247.57 1214.43 L1248.15 1214.43 L1248.74 1214.43 L1249.32 1214.43 L1249.91 1214.43 L1250.5 1214.43 L1251.08 1214.43 L1251.67 1214.43 L1252.26 1214.43 L1252.84 1214.43 L1253.43 1214.43 L1254.02 1214.43 L1254.6 1214.43 L1255.19 1214.43 L1255.78 1214.43 L1256.36 1214.43 L1256.95 1214.43 L1257.53 1214.43 L1258.12 1214.43 L1258.71 1214.43 L1259.29 1214.43 L1259.88 1214.43 L1260.47 1214.43 L1261.05 1214.43 L1261.64 1214.43 L1262.23 1214.43 L1262.81 1214.43 L1263.4 1214.43 L1263.98 1214.43 L1264.57 1214.43 L1265.16 1214.43 L1265.74 1214.43 L1266.33 1214.43 L1266.92 1214.43 L1267.5 1214.43 L1268.09 1214.43 L1268.68 1214.43 L1269.26 1214.43 L1269.85 1214.43 L1270.44 1214.43 L1271.02 1214.43 L1271.61 1214.43 L1272.19 1214.43 L1272.78 1214.43 L1273.37 1214.43 L1273.95 1214.43 L1274.54 1214.43 L1275.13 1214.43 L1275.71 1214.43 L1276.3 1214.43 L1276.89 1214.43 L1277.47 1214.43 L1278.06 1214.43 L1278.65 1214.43 L1279.23 1214.43 L1279.82 1214.43 L1280.4 1214.43 L1280.99 1214.43 L1281.58 1214.43 L1282.16 1214.43 L1282.75 1214.43 L1283.34 1214.43 L1283.92 1214.43 L1284.51 1214.43 L1285.1 1214.43 L1285.68 1214.43 L1286.27 1214.43 L1286.86 1214.43 L1287.44 1214.43 L1288.03 1214.43 L1288.61 1214.43 L1289.2 1214.43 L1289.79 1214.43 L1290.37 1214.43 L1290.96 1214.43 L1291.55 1214.43 L1292.13 1214.43 L1292.72 1214.43 L1293.31 1214.43 L1293.89 1214.43 L1294.48 1214.43 L1295.06 1214.43 L1295.65 1214.43 L1296.24 1214.43 L1296.82 1214.43 L1297.41 1214.43 L1298 1214.43 L1298.58 1214.43 L1299.17 1214.43 L1299.76 1214.43 L1300.34 1214.43 L1300.93 1214.43 L1301.52 1214.43 L1302.1 1214.43 L1302.69 1214.43 L1303.27 1214.43 L1303.86 1214.43 L1304.45 1214.43 L1305.03 1214.43 L1305.62 1214.43 L1306.21 1214.43 L1306.79 1214.43 L1307.38 1214.43 L1307.97 1214.43 L1308.55 1214.43 L1309.14 1214.43 L1309.73 1214.43 L1310.31 1214.43 L1310.9 1214.43 L1311.48 1214.43 L1312.07 1214.43 L1312.66 1214.43 L1313.24 1214.43 L1313.83 1214.43 L1314.42 1214.43 L1315 1214.43 L1315.59 1214.43 L1316.18 1214.43 L1316.76 1214.43 L1317.35 1214.43 L1317.93 1214.43 L1318.52 1214.43 L1319.11 1214.43 L1319.69 1214.43 L1320.28 1214.43 L1320.87 1214.43 L1321.45 1214.43 L1322.04 1214.43 L1322.63 1214.43 L1323.21 1214.43 L1323.8 1214.43 L1324.39 1214.43 L1324.97 1214.43 L1325.56 1214.43 L1326.14 1214.43 L1326.73 1214.43 L1327.32 1214.43 L1327.9 1214.43 L1328.49 1214.43 L1329.08 1214.43 L1329.66 1214.43 L1330.25 1214.43 L1330.84 1214.43 L1331.42 1214.43 L1332.01 1214.43 L1332.6 1214.43 L1333.18 1214.43 L1333.77 1214.43 L1334.35 1214.43 L1334.94 1214.43 L1335.53 1214.43 L1336.11 1214.43 L1336.7 1214.43 L1337.29 1214.43 L1337.87 1214.43 L1338.46 1214.43 L1339.05 1214.43 L1339.63 1214.43 L1340.22 1214.43 L1340.8 1214.43 L1341.39 1214.43 L1341.98 1214.43 L1342.56 1214.43 L1343.15 1214.43 L1343.74 1214.43 L1344.32 1214.43 L1344.91 1214.43 L1345.5 1214.43 L1346.08 1214.43 L1346.67 1214.43 L1347.26 1214.43 L1347.84 1214.43 L1348.43 1214.43 L1349.01 1214.43 L1349.6 1214.43 L1350.19 1214.43 L1350.77 1214.43 L1351.36 1214.43 L1351.95 1214.43 L1352.53 1214.43 L1353.12 1214.43 L1353.71 1214.43 L1354.29 1214.43 L1354.88 1214.43 L1355.47 1214.43 L1356.05 1214.43 L1356.64 1214.43 L1357.22 1214.43 L1357.81 1214.43 L1358.4 1214.43 L1358.98 1214.43 L1359.57 1214.43 L1360.16 1214.43 L1360.74 1214.43 L1361.33 1214.43 L1361.92 1214.43 L1362.5 1214.43 L1363.09 1214.43 L1363.68 1214.43 L1364.26 1214.43 L1364.85 1214.43 L1365.43 1214.43 L1366.02 1214.43 L1366.61 1214.43 L1367.19 1214.43 L1367.78 1214.43 L1368.37 1214.43 L1368.95 1214.43 L1369.54 1214.43 L1370.13 1214.43 L1370.71 1214.43 L1371.3 1214.43 L1371.88 1214.43 L1372.47 1214.43 L1373.06 1214.43 L1373.64 1214.43 L1374.23 1214.43 L1374.82 1214.43 L1375.4 1214.43 L1375.99 1214.43 L1376.58 1214.43 L1377.16 1214.43 L1377.75 1214.43 L1378.34 1214.43 L1378.92 1214.43 L1379.51 1214.43 L1380.09 1214.43 L1380.68 1214.43 L1381.27 1214.43 L1381.85 1214.43 L1382.44 1214.43 L1383.03 1214.43 L1383.61 1214.43 L1384.2 1214.43 L1384.79 1214.43 L1385.37 1214.43 L1385.96 1214.43 L1386.55 1214.43 L1387.13 1214.43 L1387.72 1214.43 L1388.3 1214.43 L1388.89 1214.43 L1389.48 1214.43 L1390.06 1214.43 L1390.65 1214.43 L1391.24 1214.43 L1391.82 1214.43 L1392.41 1214.43 L1393 1214.43 L1393.58 1214.43 L1394.17 1214.43 L1394.75 1214.43 L1395.34 1214.43 L1395.93 1214.43 L1396.51 1214.43 L1397.1 1214.43 L1397.69 1214.43 L1398.27 1214.43 L1398.86 1214.43 L1399.45 1214.43 L1400.03 1214.43 L1400.62 1214.43 L1401.21 1214.43 L1401.79 1214.43 L1402.38 1214.43 L1402.96 1214.43 L1403.55 1214.43 L1404.14 1214.43 L1404.72 1214.43 L1405.31 1214.43 L1405.9 1214.43 L1406.48 1214.43 L1407.07 1214.43 L1407.66 1214.43 L1408.24 1214.43 L1408.83 1214.43 L1409.42 1214.43 L1410 1214.43 L1410.59 1214.43 L1411.17 1214.43 L1411.76 1214.43 L1412.35 1214.43 L1412.93 1214.43 L1413.52 1214.43 L1414.11 1214.43 L1414.69 1214.43 L1415.28 1214.43 L1415.87 1214.43 L1416.45 1214.43 L1417.04 1214.43 L1417.63 1214.43 L1418.21 1214.43 L1418.8 1214.43 L1419.38 1214.43 L1419.97 1214.43 L1420.56 1214.43 L1421.14 1214.43 L1421.73 1214.43 L1422.32 1214.43 L1422.9 1214.43 L1423.49 1214.43 L1424.08 1214.43 L1424.66 1214.43 L1425.25 1214.43 L1425.83 1214.43 L1426.42 1214.43 L1427.01 1214.43 L1427.59 1214.43 L1428.18 1214.43 L1428.77 1214.43 L1429.35 1214.43 L1429.94 1214.43 L1430.53 1214.43 L1431.11 1214.43 L1431.7 1214.43 L1432.29 1214.43 L1432.87 1214.43 L1433.46 1214.43 L1434.04 1214.43 L1434.63 1214.43 L1435.22 1214.43 L1435.8 1214.43 L1436.39 1214.43 L1436.98 1214.43 L1437.56 1214.43 L1438.15 1214.43 L1438.74 1214.43 L1439.32 1214.43 L1439.91 1214.43 L1440.5 1214.43 L1441.08 1214.43 L1441.67 1214.43 L1442.25 1214.43 L1442.84 1214.43 L1443.43 1214.43 L1444.01 1214.43 L1444.6 1214.43 L1445.19 1214.43 L1445.77 1214.43 L1446.36 1214.43 L1446.95 1214.43 L1447.53 1214.43 L1448.12 1214.43 L1448.7 1214.43 L1449.29 1214.43 L1449.88 1214.43 L1450.46 1214.43 L1451.05 1214.43 L1451.64 1214.43 L1452.22 1214.43 L1452.81 1214.43 L1453.4 1214.43 L1453.98 1214.43 L1454.57 1214.43 L1455.16 1214.43 L1455.74 1214.43 L1456.33 1214.43 L1456.91 1214.43 L1457.5 1214.43 L1458.09 1214.43 L1458.67 1214.43 L1459.26 1214.43 L1459.85 1214.43 L1460.43 1214.43 L1461.02 1214.43 L1461.61 1214.43 L1462.19 1214.43 L1462.78 1214.43 L1463.37 1214.43 L1463.95 1214.43 L1464.54 1214.43 L1465.12 1214.43 L1465.71 1214.43 L1466.3 1214.43 L1466.88 1214.43 L1467.47 1214.43 L1468.06 1214.43 L1468.64 1214.43 L1469.23 1214.43 L1469.82 1214.43 L1470.4 1214.43 L1470.99 1214.43 L1471.57 1214.43 L1472.16 1214.43 L1472.75 1214.43 L1473.33 1214.43 L1473.92 1214.43 L1474.51 1214.43 L1475.09 1214.43 L1475.68 1214.43 L1476.27 1214.43 L1476.85 1214.43 L1477.44 1214.43 L1478.03 1214.43 L1478.61 1214.43 L1479.2 1214.43 L1479.78 1214.43 L1480.37 1214.43 L1480.96 1214.43 L1481.54 1214.43 L1482.13 1214.43 L1482.72 1214.43 L1483.3 1214.43 L1483.89 1214.43 L1484.48 1214.43 L1485.06 1214.43 L1485.65 1214.43 L1486.24 1214.43 L1486.82 1214.43 L1487.41 1214.43 L1487.99 1214.43 L1488.58 1214.43 L1489.17 1214.43 L1489.75 1214.43 L1490.34 1214.43 L1490.93 1214.43 L1491.51 1214.43 L1492.1 1214.43 L1492.69 1214.43 L1493.27 1214.43 L1493.86 1214.43 L1494.45 1214.43 L1495.03 1214.43 L1495.62 1214.43 L1496.2 1214.43 L1496.79 1214.43 L1497.38 1214.43 L1497.96 1214.43 L1498.55 1214.43 L1499.14 1214.43 L1499.72 1214.43 L1500.31 1214.43 L1500.9 1214.43 L1501.48 1214.43 L1502.07 1214.43 L1502.65 1214.43 L1503.24 1214.43 L1503.83 1214.43 L1504.41 1214.43 L1505 1214.43 L1505.59 1214.43 L1506.17 1214.43 L1506.76 1214.43 L1507.35 1214.43 L1507.93 1214.43 L1508.52 1214.43 L1509.11 1214.43 L1509.69 1214.43 L1510.28 1214.43 L1510.86 1214.43 L1511.45 1214.43 L1512.04 1214.43 L1512.62 1214.43 L1513.21 1214.43 L1513.8 1214.43 L1514.38 1214.43 L1514.97 1214.43 L1515.56 1214.43 L1516.14 1214.43 L1516.73 1214.43 L1517.32 1214.43 L1517.9 1214.43 L1518.49 1214.43 L1519.07 1214.43 L1519.66 1214.43 L1520.25 1214.43 L1520.83 1214.43 L1521.42 1214.43 L1522.01 1214.43 L1522.59 1214.43 L1523.18 1214.43 L1523.77 1214.43 L1524.35 1214.43 L1524.94 1214.43 L1525.52 1214.43 L1526.11 1214.43 L1526.7 1214.43 L1527.28 1214.43 L1527.87 1214.43 L1528.46 1214.43 L1529.04 1214.43 L1529.63 1214.43 L1530.22 1214.43 L1530.8 1214.43 L1531.39 1214.43 L1531.98 1214.43 L1532.56 1214.43 L1533.15 1214.43 L1533.73 1214.43 L1534.32 1214.43 L1534.91 1214.43 L1535.49 1214.43 L1536.08 1214.43 L1536.67 1214.43 L1537.25 1214.43 L1537.84 1214.43 L1538.43 1214.43 L1539.01 1214.43 L1539.6 1214.43 L1540.19 1214.43 L1540.77 1214.43 L1541.36 1214.43 L1541.94 1214.43 L1542.53 1214.43 L1543.12 1214.43 L1543.7 1214.43 L1544.29 1214.43 L1544.88 1214.43 L1545.46 1214.43 L1546.05 1214.43 L1546.64 1214.43 L1547.22 1214.43 L1547.81 1214.43 L1548.4 1214.43 L1548.98 1214.43 L1549.57 1214.43 L1550.15 1214.43 L1550.74 1214.43 L1551.33 1214.43 L1551.91 1214.43 L1552.5 1214.43 L1553.09 1214.43 L1553.67 1214.43 L1554.26 1214.43 L1554.85 1214.43 L1555.43 1214.43 L1556.02 1214.43 L1556.6 1214.43 L1557.19 1214.43 L1557.78 1214.43 L1558.36 1214.43 L1558.95 1214.43 L1559.54 1214.43 L1560.12 1214.43 L1560.71 1214.43 L1561.3 1214.43 L1561.88 1214.43 L1562.47 1214.43 L1563.06 1214.43 L1563.64 1214.43 L1564.23 1214.43 L1564.81 1214.43 L1565.4 1214.43 L1565.99 1214.43 L1566.57 1214.43 L1567.16 1214.43 L1567.75 1214.43 L1568.33 1214.43 L1568.92 1214.43 L1569.51 1214.43 L1570.09 1214.43 L1570.68 1214.43 L1571.27 1214.43 L1571.85 1214.43 L1572.44 1214.43 L1573.02 1214.43 L1573.61 1214.43 L1574.2 1214.43 L1574.78 1214.43 L1575.37 1214.43 L1575.96 1214.43 L1576.54 1214.43 L1577.13 1214.43 L1577.72 1214.43 L1578.3 1214.43 L1578.89 1214.43 L1579.47 1214.43 L1580.06 1214.43 L1580.65 1214.43 L1581.23 1214.43 L1581.82 1214.43 L1582.41 1214.43 L1582.99 1214.43 L1583.58 1214.43 L1584.17 1214.43 L1584.75 1214.43 L1585.34 1214.43 L1585.93 1214.43 L1586.51 1214.43 L1587.1 1214.43 L1587.68 1214.43 L1588.27 1214.43 L1588.86 1214.43 L1589.44 1214.43 L1590.03 1214.43 L1590.62 1214.43 L1591.2 1214.43 L1591.79 1214.43 L1592.38 1214.43 L1592.96 1214.43 L1593.55 1214.43 L1594.14 1214.43 L1594.72 1214.43 L1595.31 1214.43 L1595.89 1214.43 L1596.48 1214.43 L1597.07 1214.43 L1597.65 1214.43 L1598.24 1214.43 L1598.83 1214.43 L1599.41 1214.43 L1600 1214.43 L1600.59 1214.43 L1601.17 1214.43 L1601.76 1214.43 L1602.34 1214.43 L1602.93 1214.43 L1603.52 1214.43 L1604.1 1214.43 L1604.69 1214.43 L1605.28 1214.43 L1605.86 1214.43 L1606.45 1214.43 L1607.04 1214.43 L1607.62 1214.43 L1608.21 1214.43 L1608.8 1214.43 L1609.38 1214.43 L1609.97 1214.43 L1610.55 1214.43 L1611.14 1214.43 L1611.73 1214.43 L1612.31 1214.43 L1612.9 1214.43 L1613.49 1214.43 L1614.07 1214.43 L1614.66 1214.43 L1615.25 1214.43 L1615.83 1214.43 L1616.42 1214.43 L1617.01 1214.43 L1617.59 1214.43 L1618.18 1214.43 L1618.76 1214.43 L1619.35 1214.43 L1619.94 1214.43 L1620.52 1214.43 L1621.11 1214.43 L1621.7 1214.43 L1622.28 1214.43 L1622.87 1214.43 L1623.46 1214.43 L1624.04 1214.43 L1624.63 1214.43 L1625.22 1214.43 L1625.8 1214.43 L1626.39 1214.43 L1626.97 1214.43 L1627.56 1214.43 L1628.15 1214.43 L1628.73 1214.43 L1629.32 1214.43 L1629.91 1214.43 L1630.49 1214.43 L1631.08 1214.43 L1631.67 1214.43 L1632.25 1214.43 L1632.84 1214.43 L1633.42 1214.43 L1634.01 1214.43 L1634.6 1214.43 L1635.18 1214.43 L1635.77 1214.43 L1636.36 1214.43 L1636.94 1214.43 L1637.53 1214.43 L1638.12 1214.43 L1638.7 1214.43 L1639.29 1214.43 L1639.88 1214.43 L1640.46 1214.43 L1641.05 1214.43 L1641.63 1214.43 L1642.22 1214.43 L1642.81 1214.43 L1643.39 1214.43 L1643.98 1214.43 L1644.57 1214.43 L1645.15 1214.43 L1645.74 1214.43 L1646.33 1214.43 L1646.91 1214.43 L1647.5 1214.43 L1648.09 1214.43 L1648.67 1214.43 L1649.26 1214.43 L1649.84 1214.43 L1650.43 1214.43 L1651.02 1214.43 L1651.6 1214.43 L1652.19 1214.43 L1652.78 1214.43 L1653.36 1214.43 L1653.95 1214.43 L1654.54 1214.43 L1655.12 1214.43 L1655.71 1214.43 L1656.29 1214.43 L1656.88 1214.43 L1657.47 1214.43 L1658.05 1214.43 L1658.64 1214.43 L1659.23 1214.43 L1659.81 1214.43 L1660.4 1214.43 L1660.99 1214.43 L1661.57 1214.43 L1662.16 1214.43 L1662.75 1214.43 L1663.33 1214.43 L1663.92 1214.43 L1664.5 1214.43 L1665.09 1214.43 L1665.68 1214.43 L1666.26 1214.43 L1666.85 1214.43 L1667.44 1214.43 L1668.02 1214.43 L1668.61 1214.43 L1669.2 1214.43 L1669.78 1214.43 L1670.37 1214.43 L1670.96 1214.43 L1671.54 1214.43 L1672.13 1214.43 L1672.71 1214.43 L1673.3 1214.43 L1673.89 1214.43 L1674.47 1214.43 L1675.06 1214.43 L1675.65 1214.43 L1676.23 1214.43 L1676.82 1214.43 L1677.41 1214.43 L1677.99 1214.43 L1678.58 1214.43 L1679.17 1214.43 L1679.75 1214.43 L1680.34 1214.43 L1680.92 1214.43 L1681.51 1214.43 L1682.1 1214.43 L1682.68 1214.43 L1683.27 1214.43 L1683.86 1214.43 L1684.44 1214.43 L1685.03 1214.43 L1685.62 1214.43 L1686.2 1214.43 L1686.79 1214.43 L1687.37 1214.43 L1687.96 1214.43 L1688.55 1214.43 L1689.13 1214.43 L1689.72 1214.43 L1690.31 1214.43 L1690.89 1214.43 L1691.48 1214.43 L1692.07 1214.43 L1692.65 1214.43 L1693.24 1214.43 L1693.83 1214.43 L1694.41 1214.43 L1695 1214.43 L1695.58 1214.43 L1696.17 1214.43 L1696.76 1214.43 L1697.34 1214.43 L1697.93 1214.43 L1698.52 1214.43 L1699.1 1214.43 L1699.69 1214.43 L1700.28 1214.43 L1700.86 1214.43 L1701.45 1214.43 L1702.04 1214.43 L1702.62 1214.43 L1703.21 1214.43 L1703.79 1214.43 L1704.38 1214.43 L1704.97 1214.43 L1705.55 1214.43 L1706.14 1214.43 L1706.73 1214.43 L1707.31 1214.43 L1707.9 1214.43 L1708.49 1214.43 L1709.07 1214.43 L1709.66 1214.43 L1710.24 1214.43 L1710.83 1214.43 L1711.42 1214.43 L1712 1214.43 L1712.59 1214.43 L1713.18 1214.43 L1713.76 1214.43 L1714.35 1214.43 L1714.94 1214.43 L1715.52 1214.43 L1716.11 1214.43 L1716.7 1214.43 L1717.28 1214.43 L1717.87 1214.43 L1718.45 1214.43 L1719.04 1214.43 L1719.63 1214.43 L1720.21 1214.43 L1720.8 1214.43 L1721.39 1214.43 L1721.97 1214.43 L1722.56 1214.43 L1723.15 1214.43 L1723.73 1214.43 L1724.32 1214.43 L1724.91 1214.43 L1725.49 1214.43 L1726.08 1214.43 L1726.66 1214.43 L1727.25 1214.43 L1727.84 1214.43 L1728.42 1214.43 L1729.01 1214.43 L1729.6 1214.43 L1730.18 1214.43 L1730.77 1214.43 L1731.36 1214.43 L1731.94 1214.43 L1732.53 1214.43 L1733.11 1214.43 L1733.7 1214.43 L1734.29 1214.43 L1734.87 1214.43 L1735.46 1214.43 L1736.05 1214.43 L1736.63 1214.43 L1737.22 1214.43 L1737.81 1214.43 L1738.39 1214.43 L1738.98 1214.43 L1739.57 1214.43 L1740.15 1214.43 L1740.74 1214.43 L1741.32 1214.43 L1741.91 1214.43 L1742.5 1214.43 L1743.08 1214.43 L1743.67 1214.43 L1744.26 1214.43 L1744.84 1214.43 L1745.43 1214.43 L1746.02 1214.43 L1746.6 1214.43 L1747.19 1214.43 L1747.78 1214.43 L1748.36 1214.43 L1748.95 1214.43 L1749.53 1214.43 L1750.12 1214.43 L1750.71 1214.43 L1751.29 1214.43 L1751.88 1214.43 L1752.47 1214.43 L1753.05 1214.43 L1753.64 1214.43 L1754.23 1214.43 L1754.81 1214.43 L1755.4 1214.43 L1755.99 1214.43 L1756.57 1214.43 L1757.16 1214.43 L1757.74 1214.43 L1758.33 1214.43 L1758.92 1214.43 L1759.5 1214.43 L1760.09 1214.43 L1760.68 1214.43 L1761.26 1214.43 L1761.85 1214.43 L1762.44 1214.43 L1763.02 1214.43 L1763.61 1214.43 L1764.19 1214.43 L1764.78 1214.43 L1765.37 1214.43 L1765.95 1214.43 L1766.54 1214.43 L1767.13 1214.43 L1767.71 1214.43 L1768.3 1214.43 L1768.89 1214.43 L1769.47 1214.43 L1770.06 1214.43 L1770.65 1214.43 L1771.23 1214.43 L1771.82 1214.43 L1772.4 1214.43 L1772.99 1214.43 L1773.58 1214.43 L1774.16 1214.43 L1774.75 1214.43 L1775.34 1214.43 L1775.92 1214.43 L1776.51 1214.43 L1777.1 1214.43 L1777.68 1214.43 L1778.27 1214.43 L1778.86 1214.43 L1779.44 1214.43 L1780.03 1214.43 L1780.61 1214.43 L1781.2 1214.43 L1781.79 1214.43 L1782.37 1214.43 L1782.96 1214.43 L1783.55 1214.43 L1784.13 1214.43 L1784.72 1214.43 L1785.31 1214.43 L1785.89 1214.43 L1786.48 1214.43 L1787.06 1214.43 L1787.65 1214.43 L1788.24 1214.43 L1788.82 1214.43 L1789.41 1214.43 L1790 1214.43 L1790.58 1214.43 L1791.17 1214.43 L1791.76 1214.43 L1792.34 1214.43 L1792.93 1214.43 L1793.52 1214.43 L1794.1 1214.43 L1794.69 1214.43 L1795.27 1214.43 L1795.86 1214.43 L1796.45 1214.43 L1797.03 1214.43 L1797.62 1214.43 L1798.21 1214.43 L1798.79 1214.43 L1799.38 1214.43 L1799.97 1214.43 L1800.55 1214.43 L1801.14 1214.43 L1801.73 1214.43 L1802.31 1214.43 L1802.9 1214.43 L1803.48 1214.43 L1804.07 1214.43 L1804.66 1214.43 L1805.24 1214.43 L1805.83 1214.43 L1806.42 1214.43 L1807 1214.43 L1807.59 1214.43 L1808.18 1214.43 L1808.76 1214.43 L1809.35 1214.43 L1809.94 1214.43 L1810.52 1214.43 L1811.11 1214.43 L1811.69 1214.43 L1812.28 1214.43 L1812.87 1214.43 L1813.45 1214.43 L1814.04 1214.43 L1814.63 1214.43 L1815.21 1214.43 L1815.8 1214.43 L1816.39 1214.43 L1816.97 1214.43 L1817.56 1214.43 L1818.14 1214.43 L1818.73 1214.43 L1819.32 1214.43 L1819.9 1214.43 L1820.49 1214.43 L1821.08 1214.43 L1821.66 1214.43 L1822.25 1214.43 L1822.84 1214.43 L1823.42 1214.43 L1824.01 1214.43 L1824.6 1214.43 L1825.18 1214.43 L1825.77 1214.43 L1826.35 1214.43 L1826.94 1214.43 L1827.53 1214.43 L1828.11 1214.43 L1828.7 1214.43 L1829.29 1214.43 L1829.87 1214.43 L1830.46 1214.43 L1831.05 1214.43 L1831.63 1214.43 L1832.22 1214.43 L1832.81 1214.43 L1833.39 1214.43 L1833.98 1214.43 L1834.56 1214.43 L1835.15 1214.43 L1835.74 1214.43 L1836.32 1214.43 L1836.91 1214.43 L1837.5 1214.43 L1838.08 1214.43 L1838.67 1214.43 L1839.26 1214.43 L1839.84 1214.43 L1840.43 1214.43 L1841.01 1214.43 L1841.6 1214.43 L1842.19 1214.43 L1842.77 1214.43 L1843.36 1214.43 L1843.95 1214.43 L1844.53 1214.43 L1845.12 1214.43 L1845.71 1214.43 L1846.29 1214.43 L1846.88 1214.43 L1847.47 1214.43 L1848.05 1214.43 L1848.64 1214.43 L1849.22 1214.43 L1849.81 1214.43 L1850.4 1214.43 L1850.98 1214.43 L1851.57 1214.43 L1852.16 1214.43 L1852.74 1214.43 L1853.33 1214.43 L1853.92 1214.43 L1854.5 1214.43 L1855.09 1214.43 L1855.68 1214.43 L1856.26 1214.43 L1856.85 1214.43 L1857.43 1214.43 L1858.02 1214.43 L1858.61 1214.43 L1859.19 1214.43 L1859.78 1214.43 L1860.37 1214.43 L1860.95 1214.43 L1861.54 1214.43 L1862.13 1214.43 L1862.71 1214.43 L1863.3 1214.43 L1863.88 1214.43 L1864.47 1214.43 L1865.06 1214.43 L1865.64 1214.43 L1866.23 1214.43 L1866.82 1214.43 L1867.4 1214.43 L1867.99 1214.43 L1868.58 1214.43 L1869.16 1214.43 L1869.75 1214.43 L1870.34 1214.43 L1870.92 1214.43 L1871.51 1214.43 L1872.09 1214.43 L1872.68 1214.43 L1873.27 1214.43 L1873.85 1214.43 L1874.44 1214.43 L1875.03 1214.43 L1875.61 1214.43 L1876.2 1214.43 L1876.79 1214.43 L1877.37 1214.43 L1877.96 1214.43 L1878.55 1214.43 L1879.13 1214.43 L1879.72 1214.43 L1880.3 1214.43 L1880.89 1214.43 L1881.48 1214.43 L1882.06 1214.43 L1882.65 1214.43 L1883.24 1214.43 L1883.82 1214.43 L1884.41 1214.43 L1885 1214.43 L1885.58 1214.43 L1886.17 1214.43 L1886.76 1214.43 L1887.34 1214.43 L1887.93 1214.43 L1888.51 1214.43 L1889.1 1214.43 L1889.69 1214.43 L1890.27 1214.43 L1890.86 1214.43 L1891.45 1214.43 L1892.03 1214.43 L1892.62 1214.43 L1893.21 1214.43 L1893.79 1214.43 L1894.38 1214.43 L1894.96 1214.43 L1895.55 1214.43 L1896.14 1214.43 L1896.72 1214.43 L1897.31 1214.43 L1897.9 1214.43 L1898.48 1214.43 L1899.07 1214.43 L1899.66 1214.43 L1900.24 1214.43 L1900.83 1214.43 L1901.42 1214.43 L1902 1214.43 L1902.59 1214.43 L1903.17 1214.43 L1903.76 1214.43 L1904.35 1214.43 L1904.93 1214.43 L1905.52 1214.43 L1906.11 1214.43 L1906.69 1214.43 L1907.28 1214.43 L1907.87 1214.43 L1908.45 1214.43 L1909.04 1214.43 L1909.63 1214.43 L1910.21 1214.43 L1910.8 1214.43 L1911.38 1214.43 L1911.97 1214.43 L1912.56 1214.43 L1913.14 1214.43 L1913.73 1214.43 L1914.32 1214.43 L1914.9 1214.43 L1915.49 1214.43 L1916.08 1214.43 L1916.66 1214.43 L1917.25 1214.43 L1917.83 1214.43 L1918.42 1214.43 L1919.01 1214.43 L1919.59 1214.43 L1920.18 1214.43 L1920.77 1214.43 L1921.35 1214.43 L1921.94 1214.43 L1922.53 1214.43 L1923.11 1214.43 L1923.7 1214.43 L1924.29 1214.43 L1924.87 1214.43 L1925.46 1214.43 L1926.04 1214.43 L1926.63 1214.43 L1927.22 1214.43 L1927.8 1214.43 L1928.39 1214.43 L1928.98 1214.43 L1929.56 1214.43 L1930.15 1214.43 L1930.74 1214.43 L1931.32 1214.43 L1931.91 1214.43 L1932.5 1214.43 L1933.08 1214.43 L1933.67 1214.43 L1934.25 1214.43 L1934.84 1214.43 L1935.43 1214.43 L1936.01 1214.43 L1936.6 1214.43 L1937.19 1214.43 L1937.77 1214.43 L1938.36 1214.43 L1938.95 1214.43 L1939.53 1214.43 L1940.12 1214.43 L1940.71 1214.43 L1941.29 1214.43 L1941.88 1214.43 L1942.46 1214.43 L1943.05 1214.43 L1943.64 1214.43 L1944.22 1214.43 L1944.81 1214.43 L1945.4 1214.43 L1945.98 1214.43 L1946.57 1214.43 L1947.16 1214.43 L1947.74 1214.43 L1948.33 1214.43 L1948.91 1214.43 L1949.5 1214.43 L1950.09 1214.43 L1950.67 1214.43 L1951.26 1214.43 L1951.85 1214.43 L1952.43 1214.43 L1953.02 1214.43 L1953.61 1214.43 L1954.19 1214.43 L1954.78 1214.43 L1955.37 1214.43 L1955.95 1214.43 L1956.54 1214.43 L1957.12 1214.43 L1957.71 1214.43 L1958.3 1214.43 L1958.88 1214.43 L1959.47 1214.43 L1960.06 1214.43 L1960.64 1214.43 L1961.23 1214.43 L1961.82 1214.43 L1962.4 1214.43 L1962.99 1214.43 L1963.58 1214.43 L1964.16 1214.43 L1964.75 1214.43 L1965.33 1214.43 L1965.92 1214.43 L1966.51 1214.43 L1967.09 1214.43 L1967.68 1214.43 L1968.27 1214.43 L1968.85 1214.43 L1969.44 1214.43 L1970.03 1214.43 L1970.61 1214.43 L1971.2 1214.43 L1971.78 1214.43 L1972.37 1214.43 L1972.96 1214.43 L1973.54 1214.43 L1974.13 1214.43 L1974.72 1214.43 L1975.3 1214.43 L1975.89 1214.43 L1976.48 1214.43 L1977.06 1214.43 L1977.65 1214.43 L1978.24 1214.43 L1978.82 1214.43 L1979.41 1214.43 L1979.99 1214.43 L1980.58 1214.43 L1981.17 1214.43 L1981.75 1214.43 L1982.34 1214.43 L1982.93 1214.43 L1983.51 1214.43 L1984.1 1214.43 L1984.69 1214.43 L1985.27 1214.43 L1985.86 1214.43 L1986.45 1214.43 L1987.03 1214.43 L1987.62 1214.43 L1988.2 1214.43 L1988.79 1214.43 L1989.38 1214.43 L1989.96 1214.43 L1990.55 1214.43 L1991.14 1214.43 L1991.72 1214.43 L1992.31 1214.43 L1992.9 1214.43 L1993.48 1214.43 L1994.07 1214.43 L1994.65 1214.43 L1995.24 1214.43 L1995.83 1214.43 L1996.41 1214.43 L1997 1214.43 L1997.59 1214.43 L1998.17 1214.43 L1998.76 1214.43 L1999.35 1214.43 L1999.93 1214.43 L2000.52 1214.43 L2001.11 1214.43 L2001.69 1214.43 L2002.28 1214.43 L2002.86 1214.43 L2003.45 1214.43 L2004.04 1214.43 L2004.62 1214.43 L2005.21 1214.43 L2005.8 1214.43 L2006.38 1214.43 L2006.97 1214.43 L2007.56 1214.43 L2008.14 1214.43 L2008.73 1214.43 L2009.32 1214.43 L2009.9 1214.43 L2010.49 1214.43 L2011.07 1214.43 L2011.66 1214.43 L2012.25 1214.43 L2012.83 1214.43 L2013.42 1214.43 L2014.01 1214.43 L2014.59 1214.43 L2015.18 1214.43 L2015.77 1214.43 L2016.35 1214.43 L2016.94 1214.43 L2017.53 1214.43 L2018.11 1214.43 L2018.7 1214.43 L2019.28 1214.43 L2019.87 1214.43 L2020.46 1214.43 L2021.04 1214.43 L2021.63 1214.43 L2022.22 1214.43 L2022.8 1214.43 L2023.39 1214.43 L2023.98 1214.43 L2024.56 1214.43 L2025.15 1214.43 L2025.73 1214.43 L2026.32 1214.43 L2026.91 1214.43 L2027.49 1214.43 L2028.08 1214.43 L2028.67 1214.43 L2029.25 1214.43 L2029.84 1214.43 L2030.43 1214.43 L2031.01 1214.43 L2031.6 1214.43 L2032.19 1214.43 L2032.77 1214.43 L2033.36 1214.43 L2033.94 1214.43 L2034.53 1214.43 L2035.12 1214.43 L2035.7 1214.43 L2036.29 1214.43 L2036.88 1214.43 L2037.46 1214.43 L2038.05 1214.43 L2038.64 1214.43 L2039.22 1214.43 L2039.81 1214.43 L2040.4 1214.43 L2040.98 1214.43 L2041.57 1214.43 L2042.15 1214.43 L2042.74 1214.43 L2043.33 1214.43 L2043.91 1214.43 L2044.5 1214.43 L2045.09 1214.43 L2045.67 1214.43 L2046.26 1214.43 L2046.85 1214.43 L2047.43 1214.43 L2048.02 1214.43 L2048.6 1214.43 L2049.19 1214.43 L2049.78 1214.43 L2050.36 1214.43 L2050.95 1214.43 L2051.54 1214.43 L2052.12 1214.43 L2052.71 1214.43 L2053.3 1214.43 L2053.88 1214.43 L2054.47 1214.43 L2055.06 1214.43 L2055.64 1214.43 L2056.23 1214.43 L2056.81 1214.43 L2057.4 1214.43 L2057.99 1214.43 L2058.57 1214.43 L2059.16 1214.43 L2059.75 1214.43 L2060.33 1214.43 L2060.92 1214.43 L2061.51 1214.43 L2062.09 1214.43 L2062.68 1214.43 L2063.27 1214.43 L2063.85 1214.43 L2064.44 1214.43 L2065.02 1214.43 L2065.61 1214.43 L2066.2 1214.43 L2066.78 1214.43 L2067.37 1214.43 L2067.96 1214.43 L2068.54 1214.43 L2069.13 1214.43 L2069.72 1214.43 L2070.3 1214.43 L2070.89 1214.43 L2071.48 1214.43 L2072.06 1214.43 L2072.65 1214.43 L2073.23 1214.43 L2073.82 1214.43 L2074.41 1214.43 L2074.99 1214.43 L2075.58 1214.43 L2076.17 1214.43 L2076.75 1214.43 L2077.34 1214.43 L2077.93 1214.43 L2078.51 1214.43 L2079.1 1214.43 L2079.68 1214.43 L2080.27 1214.43 L2080.86 1214.43 L2081.44 1214.43 L2082.03 1214.43 L2082.62 1214.43 L2083.2 1214.43 L2083.79 1214.43 L2084.38 1214.43 L2084.96 1214.43 L2085.55 1214.43 L2086.14 1214.43 L2086.72 1214.43 L2087.31 1214.43 L2087.89 1214.43 L2088.48 1214.43 L2089.07 1214.43 L2089.65 1214.43 L2090.24 1214.43 L2090.83 1214.43 L2091.41 1214.43 L2092 1214.43 L2092.59 1214.43 L2093.17 1214.43 L2093.76 1214.43 L2094.35 1214.43 L2094.93 1214.43 L2095.52 1214.43 L2096.1 1214.43 L2096.69 1214.43 L2097.28 1214.43 L2097.86 1214.43 L2098.45 1214.43 L2099.04 1214.43 L2099.62 1214.43 L2100.21 1214.43 L2100.8 1214.43 L2101.38 1214.43 L2101.97 1214.43 L2102.55 1214.43 L2103.14 1214.43 L2103.73 1214.43 L2104.31 1214.43 L2104.9 1214.43 L2105.49 1214.43 L2106.07 1214.43 L2106.66 1214.43 L2107.25 1214.43 L2107.83 1214.43 L2108.42 1214.43 L2109.01 1214.43 L2109.59 1214.43 L2110.18 1214.43 L2110.76 1214.43 L2111.35 1214.43 L2111.94 1214.43 L2112.52 1214.43 L2113.11 1214.43 L2113.7 1214.43 L2114.28 1214.43 L2114.87 1214.43 L2115.46 1214.43 L2116.04 1214.43 L2116.63 1214.43 L2117.22 1214.43 L2117.8 1214.43 L2118.39 1214.43 L2118.97 1214.43 L2119.56 1214.43 L2120.15 1214.43 L2120.73 1214.43 L2121.32 1214.43 L2121.91 1214.43 L2122.49 1214.43 L2123.08 1214.43 L2123.67 1214.43 L2124.25 1214.43 L2124.84 1214.43 L2125.42 1214.43 L2126.01 1214.43 L2126.6 1214.43 L2127.18 1214.43 L2127.77 1214.43 L2128.36 1214.43 L2128.94 1214.43 L2129.53 1214.43 L2130.12 1214.43 L2130.7 1214.43 L2131.29 1214.43 L2131.88 1214.43 L2132.46 1214.43 L2133.05 1214.43 L2133.63 1214.43 L2134.22 1214.43 L2134.81 1214.43 L2135.39 1214.43 L2135.98 1214.43 L2136.57 1214.43 L2137.15 1214.43 L2137.74 1214.43 L2138.33 1214.43 L2138.91 1214.43 L2139.5 1214.43 L2140.09 1214.43 L2140.67 1214.43 L2141.26 1214.43 L2141.84 1214.43 L2142.43 1214.43 L2143.02 1214.43 L2143.6 1214.43 L2144.19 1214.43 L2144.78 1214.43 L2145.36 1214.43 L2145.95 1214.43 L2146.54 1214.43 L2147.12 1214.43 L2147.71 1214.43 L2148.3 1214.43 L2148.88 1214.43 L2149.47 1214.43 L2150.05 1214.43 L2150.64 1214.43 L2151.23 1214.43 L2151.81 1214.43 L2152.4 1214.43 L2152.99 1214.43 L2153.57 1214.43 L2154.16 1214.43 L2154.75 1214.43 L2155.33 1214.43 L2155.92 1214.43 L2156.5 1214.43 L2157.09 1214.43 L2157.68 1214.43 L2158.26 1214.43 L2158.26 1214.29 L2157.68 1214.29 L2157.09 1214.29 L2156.5 1214.29 L2155.92 1214.29 L2155.33 1214.29 L2154.75 1214.29 L2154.16 1214.29 L2153.57 1214.29 L2152.99 1214.29 L2152.4 1214.29 L2151.81 1214.29 L2151.23 1214.29 L2150.64 1214.29 L2150.05 1214.29 L2149.47 1214.29 L2148.88 1214.29 L2148.3 1214.29 L2147.71 1214.29 L2147.12 1214.29 L2146.54 1214.29 L2145.95 1214.29 L2145.36 1214.29 L2144.78 1214.29 L2144.19 1214.29 L2143.6 1214.29 L2143.02 1214.29 L2142.43 1214.29 L2141.84 1214.29 L2141.26 1214.29 L2140.67 1214.29 L2140.09 1214.29 L2139.5 1214.29 L2138.91 1214.29 L2138.33 1214.29 L2137.74 1214.29 L2137.15 1214.29 L2136.57 1214.29 L2135.98 1214.29 L2135.39 1214.29 L2134.81 1214.29 L2134.22 1214.29 L2133.63 1214.29 L2133.05 1214.29 L2132.46 1214.29 L2131.88 1214.29 L2131.29 1214.29 L2130.7 1214.29 L2130.12 1214.29 L2129.53 1214.29 L2128.94 1214.29 L2128.36 1214.29 L2127.77 1214.29 L2127.18 1214.29 L2126.6 1214.29 L2126.01 1214.29 L2125.42 1214.29 L2124.84 1214.29 L2124.25 1214.29 L2123.67 1214.29 L2123.08 1214.29 L2122.49 1214.29 L2121.91 1214.29 L2121.32 1214.29 L2120.73 1214.29 L2120.15 1214.29 L2119.56 1214.29 L2118.97 1214.29 L2118.39 1214.29 L2117.8 1214.29 L2117.22 1214.29 L2116.63 1214.29 L2116.04 1214.29 L2115.46 1214.29 L2114.87 1214.29 L2114.28 1214.29 L2113.7 1214.29 L2113.11 1214.29 L2112.52 1214.29 L2111.94 1214.29 L2111.35 1214.29 L2110.76 1214.29 L2110.18 1214.29 L2109.59 1214.29 L2109.01 1214.29 L2108.42 1214.29 L2107.83 1214.29 L2107.25 1214.29 L2106.66 1214.29 L2106.07 1214.29 L2105.49 1214.29 L2104.9 1214.29 L2104.31 1214.29 L2103.73 1214.29 L2103.14 1214.29 L2102.55 1214.29 L2101.97 1214.29 L2101.38 1214.29 L2100.8 1214.29 L2100.21 1214.29 L2099.62 1214.29 L2099.04 1214.29 L2098.45 1214.29 L2097.86 1214.29 L2097.28 1214.29 L2096.69 1214.29 L2096.1 1214.29 L2095.52 1214.29 L2094.93 1214.29 L2094.35 1214.29 L2093.76 1214.29 L2093.17 1214.29 L2092.59 1214.29 L2092 1214.29 L2091.41 1214.29 L2090.83 1214.29 L2090.24 1214.29 L2089.65 1214.29 L2089.07 1214.29 L2088.48 1214.29 L2087.89 1214.29 L2087.31 1214.29 L2086.72 1214.29 L2086.14 1214.29 L2085.55 1214.29 L2084.96 1214.29 L2084.38 1214.29 L2083.79 1214.29 L2083.2 1214.29 L2082.62 1214.29 L2082.03 1214.29 L2081.44 1214.29 L2080.86 1214.29 L2080.27 1214.29 L2079.68 1214.29 L2079.1 1214.29 L2078.51 1214.29 L2077.93 1214.29 L2077.34 1214.29 L2076.75 1214.29 L2076.17 1214.29 L2075.58 1214.29 L2074.99 1214.29 L2074.41 1214.29 L2073.82 1214.29 L2073.23 1214.29 L2072.65 1214.29 L2072.06 1214.29 L2071.48 1214.29 L2070.89 1214.29 L2070.3 1214.29 L2069.72 1214.29 L2069.13 1214.29 L2068.54 1214.29 L2067.96 1214.29 L2067.37 1214.29 L2066.78 1214.29 L2066.2 1214.29 L2065.61 1214.29 L2065.02 1214.29 L2064.44 1214.29 L2063.85 1214.29 L2063.27 1214.29 L2062.68 1214.29 L2062.09 1214.29 L2061.51 1214.29 L2060.92 1214.29 L2060.33 1214.29 L2059.75 1214.29 L2059.16 1214.29 L2058.57 1214.29 L2057.99 1214.29 L2057.4 1214.29 L2056.81 1214.29 L2056.23 1214.29 L2055.64 1214.29 L2055.06 1214.29 L2054.47 1214.29 L2053.88 1214.29 L2053.3 1214.29 L2052.71 1214.29 L2052.12 1214.29 L2051.54 1214.29 L2050.95 1214.29 L2050.36 1214.29 L2049.78 1214.29 L2049.19 1214.29 L2048.6 1214.29 L2048.02 1214.29 L2047.43 1214.29 L2046.85 1214.29 L2046.26 1214.29 L2045.67 1214.29 L2045.09 1214.29 L2044.5 1214.29 L2043.91 1214.29 L2043.33 1214.29 L2042.74 1214.29 L2042.15 1214.29 L2041.57 1214.29 L2040.98 1214.29 L2040.4 1214.29 L2039.81 1214.29 L2039.22 1214.29 L2038.64 1214.29 L2038.05 1214.29 L2037.46 1214.29 L2036.88 1214.29 L2036.29 1214.29 L2035.7 1214.29 L2035.12 1214.29 L2034.53 1214.29 L2033.94 1214.29 L2033.36 1214.29 L2032.77 1214.29 L2032.19 1214.29 L2031.6 1214.29 L2031.01 1214.29 L2030.43 1214.29 L2029.84 1214.29 L2029.25 1214.29 L2028.67 1214.29 L2028.08 1214.29 L2027.49 1214.29 L2026.91 1214.29 L2026.32 1214.29 L2025.73 1214.29 L2025.15 1214.29 L2024.56 1214.29 L2023.98 1214.29 L2023.39 1214.29 L2022.8 1214.29 L2022.22 1214.29 L2021.63 1214.29 L2021.04 1214.29 L2020.46 1214.29 L2019.87 1214.29 L2019.28 1214.29 L2018.7 1214.29 L2018.11 1214.29 L2017.53 1214.29 L2016.94 1214.29 L2016.35 1214.29 L2015.77 1214.29 L2015.18 1214.29 L2014.59 1214.29 L2014.01 1214.29 L2013.42 1214.29 L2012.83 1214.29 L2012.25 1214.29 L2011.66 1214.29 L2011.07 1214.29 L2010.49 1214.29 L2009.9 1214.29 L2009.32 1214.29 L2008.73 1214.29 L2008.14 1214.29 L2007.56 1214.29 L2006.97 1214.29 L2006.38 1214.29 L2005.8 1214.29 L2005.21 1214.29 L2004.62 1214.29 L2004.04 1214.29 L2003.45 1214.29 L2002.86 1214.29 L2002.28 1214.29 L2001.69 1214.29 L2001.11 1214.29 L2000.52 1214.29 L1999.93 1214.29 L1999.35 1214.29 L1998.76 1214.29 L1998.17 1214.29 L1997.59 1214.29 L1997 1214.29 L1996.41 1214.29 L1995.83 1214.29 L1995.24 1214.29 L1994.65 1214.29 L1994.07 1214.29 L1993.48 1214.29 L1992.9 1214.29 L1992.31 1214.29 L1991.72 1214.29 L1991.14 1214.29 L1990.55 1214.29 L1989.96 1214.29 L1989.38 1214.29 L1988.79 1214.29 L1988.2 1214.29 L1987.62 1214.29 L1987.03 1214.29 L1986.45 1214.29 L1985.86 1214.29 L1985.27 1214.29 L1984.69 1214.29 L1984.1 1214.29 L1983.51 1214.29 L1982.93 1214.29 L1982.34 1214.29 L1981.75 1214.29 L1981.17 1214.29 L1980.58 1214.29 L1979.99 1214.29 L1979.41 1214.29 L1978.82 1214.29 L1978.24 1214.29 L1977.65 1214.29 L1977.06 1214.29 L1976.48 1214.29 L1975.89 1214.29 L1975.3 1214.29 L1974.72 1214.29 L1974.13 1214.29 L1973.54 1214.29 L1972.96 1214.29 L1972.37 1214.29 L1971.78 1214.29 L1971.2 1214.29 L1970.61 1214.29 L1970.03 1214.29 L1969.44 1214.29 L1968.85 1214.29 L1968.27 1214.29 L1967.68 1214.29 L1967.09 1214.29 L1966.51 1214.29 L1965.92 1214.29 L1965.33 1214.29 L1964.75 1214.29 L1964.16 1214.29 L1963.58 1214.29 L1962.99 1214.29 L1962.4 1214.29 L1961.82 1214.29 L1961.23 1214.29 L1960.64 1214.29 L1960.06 1214.29 L1959.47 1214.29 L1958.88 1214.29 L1958.3 1214.29 L1957.71 1214.29 L1957.12 1214.29 L1956.54 1214.29 L1955.95 1214.29 L1955.37 1214.29 L1954.78 1214.29 L1954.19 1214.29 L1953.61 1214.29 L1953.02 1214.29 L1952.43 1214.29 L1951.85 1214.29 L1951.26 1214.29 L1950.67 1214.29 L1950.09 1214.29 L1949.5 1214.29 L1948.91 1214.29 L1948.33 1214.29 L1947.74 1214.29 L1947.16 1214.29 L1946.57 1214.29 L1945.98 1214.29 L1945.4 1214.29 L1944.81 1214.29 L1944.22 1214.29 L1943.64 1214.29 L1943.05 1214.29 L1942.46 1214.29 L1941.88 1214.29 L1941.29 1214.29 L1940.71 1214.29 L1940.12 1214.29 L1939.53 1214.29 L1938.95 1214.29 L1938.36 1214.29 L1937.77 1214.29 L1937.19 1214.29 L1936.6 1214.29 L1936.01 1214.29 L1935.43 1214.29 L1934.84 1214.29 L1934.25 1214.29 L1933.67 1214.29 L1933.08 1214.29 L1932.5 1214.29 L1931.91 1214.29 L1931.32 1214.29 L1930.74 1214.29 L1930.15 1214.29 L1929.56 1214.29 L1928.98 1214.29 L1928.39 1214.29 L1927.8 1214.29 L1927.22 1214.29 L1926.63 1214.29 L1926.04 1214.29 L1925.46 1214.29 L1924.87 1214.29 L1924.29 1214.29 L1923.7 1214.29 L1923.11 1214.29 L1922.53 1214.29 L1921.94 1214.29 L1921.35 1214.29 L1920.77 1214.29 L1920.18 1214.29 L1919.59 1214.29 L1919.01 1214.29 L1918.42 1214.29 L1917.83 1214.29 L1917.25 1214.29 L1916.66 1214.29 L1916.08 1214.29 L1915.49 1214.29 L1914.9 1214.29 L1914.32 1214.29 L1913.73 1214.29 L1913.14 1214.29 L1912.56 1214.29 L1911.97 1214.29 L1911.38 1214.29 L1910.8 1214.29 L1910.21 1214.29 L1909.63 1214.29 L1909.04 1214.29 L1908.45 1214.29 L1907.87 1214.29 L1907.28 1214.29 L1906.69 1214.29 L1906.11 1214.29 L1905.52 1214.29 L1904.93 1214.29 L1904.35 1214.29 L1903.76 1214.29 L1903.17 1214.29 L1902.59 1214.29 L1902 1214.29 L1901.42 1214.29 L1900.83 1214.29 L1900.24 1214.29 L1899.66 1214.29 L1899.07 1214.29 L1898.48 1214.29 L1897.9 1214.29 L1897.31 1214.29 L1896.72 1214.29 L1896.14 1214.29 L1895.55 1214.29 L1894.96 1214.29 L1894.38 1214.29 L1893.79 1214.29 L1893.21 1214.29 L1892.62 1214.29 L1892.03 1214.29 L1891.45 1214.29 L1890.86 1214.29 L1890.27 1214.29 L1889.69 1214.29 L1889.1 1214.29 L1888.51 1214.29 L1887.93 1214.29 L1887.34 1214.29 L1886.76 1214.29 L1886.17 1214.29 L1885.58 1214.29 L1885 1214.29 L1884.41 1214.29 L1883.82 1214.29 L1883.24 1214.29 L1882.65 1214.29 L1882.06 1214.29 L1881.48 1214.29 L1880.89 1214.29 L1880.3 1214.29 L1879.72 1214.29 L1879.13 1214.29 L1878.55 1214.29 L1877.96 1214.29 L1877.37 1214.29 L1876.79 1214.29 L1876.2 1214.29 L1875.61 1214.29 L1875.03 1214.29 L1874.44 1214.29 L1873.85 1214.29 L1873.27 1214.29 L1872.68 1214.29 L1872.09 1214.29 L1871.51 1214.29 L1870.92 1214.29 L1870.34 1214.29 L1869.75 1214.29 L1869.16 1214.29 L1868.58 1214.29 L1867.99 1214.29 L1867.4 1214.29 L1866.82 1214.29 L1866.23 1214.29 L1865.64 1214.29 L1865.06 1214.29 L1864.47 1214.29 L1863.88 1214.29 L1863.3 1214.29 L1862.71 1214.29 L1862.13 1214.29 L1861.54 1214.29 L1860.95 1214.29 L1860.37 1214.29 L1859.78 1214.29 L1859.19 1214.29 L1858.61 1214.29 L1858.02 1214.29 L1857.43 1214.29 L1856.85 1214.29 L1856.26 1214.29 L1855.68 1214.29 L1855.09 1214.29 L1854.5 1214.29 L1853.92 1214.29 L1853.33 1214.29 L1852.74 1214.29 L1852.16 1214.29 L1851.57 1214.29 L1850.98 1214.29 L1850.4 1214.29 L1849.81 1214.29 L1849.22 1214.29 L1848.64 1214.29 L1848.05 1214.29 L1847.47 1214.29 L1846.88 1214.29 L1846.29 1214.29 L1845.71 1214.29 L1845.12 1214.29 L1844.53 1214.29 L1843.95 1214.29 L1843.36 1214.29 L1842.77 1214.29 L1842.19 1214.29 L1841.6 1214.29 L1841.01 1214.29 L1840.43 1214.29 L1839.84 1214.29 L1839.26 1214.29 L1838.67 1214.29 L1838.08 1214.29 L1837.5 1214.29 L1836.91 1214.29 L1836.32 1214.29 L1835.74 1214.29 L1835.15 1214.29 L1834.56 1214.29 L1833.98 1214.29 L1833.39 1214.29 L1832.81 1214.29 L1832.22 1214.29 L1831.63 1214.29 L1831.05 1214.29 L1830.46 1214.29 L1829.87 1214.29 L1829.29 1214.29 L1828.7 1214.29 L1828.11 1214.29 L1827.53 1214.29 L1826.94 1214.29 L1826.35 1214.29 L1825.77 1214.29 L1825.18 1214.29 L1824.6 1214.29 L1824.01 1214.29 L1823.42 1214.29 L1822.84 1214.29 L1822.25 1214.29 L1821.66 1214.29 L1821.08 1214.29 L1820.49 1214.29 L1819.9 1214.29 L1819.32 1214.29 L1818.73 1214.29 L1818.14 1214.29 L1817.56 1214.29 L1816.97 1214.29 L1816.39 1214.29 L1815.8 1214.29 L1815.21 1214.29 L1814.63 1214.29 L1814.04 1214.29 L1813.45 1214.29 L1812.87 1214.29 L1812.28 1214.29 L1811.69 1214.29 L1811.11 1214.29 L1810.52 1214.29 L1809.94 1214.29 L1809.35 1214.29 L1808.76 1214.29 L1808.18 1214.29 L1807.59 1214.29 L1807 1214.29 L1806.42 1214.29 L1805.83 1214.29 L1805.24 1214.29 L1804.66 1214.29 L1804.07 1214.29 L1803.48 1214.29 L1802.9 1214.29 L1802.31 1214.29 L1801.73 1214.29 L1801.14 1214.29 L1800.55 1214.29 L1799.97 1214.29 L1799.38 1214.29 L1798.79 1214.29 L1798.21 1214.29 L1797.62 1214.29 L1797.03 1214.29 L1796.45 1214.29 L1795.86 1214.29 L1795.27 1214.29 L1794.69 1214.29 L1794.1 1214.29 L1793.52 1214.29 L1792.93 1214.29 L1792.34 1214.29 L1791.76 1214.29 L1791.17 1214.29 L1790.58 1214.29 L1790 1214.29 L1789.41 1214.29 L1788.82 1214.29 L1788.24 1214.29 L1787.65 1214.29 L1787.06 1214.29 L1786.48 1214.29 L1785.89 1214.29 L1785.31 1214.29 L1784.72 1214.29 L1784.13 1214.29 L1783.55 1214.29 L1782.96 1214.29 L1782.37 1214.29 L1781.79 1214.29 L1781.2 1214.29 L1780.61 1214.29 L1780.03 1214.29 L1779.44 1214.29 L1778.86 1214.29 L1778.27 1214.29 L1777.68 1214.29 L1777.1 1214.29 L1776.51 1214.29 L1775.92 1214.29 L1775.34 1214.29 L1774.75 1214.29 L1774.16 1214.29 L1773.58 1214.29 L1772.99 1214.29 L1772.4 1214.29 L1771.82 1214.29 L1771.23 1214.29 L1770.65 1214.29 L1770.06 1214.29 L1769.47 1214.29 L1768.89 1214.29 L1768.3 1214.29 L1767.71 1214.29 L1767.13 1214.29 L1766.54 1214.29 L1765.95 1214.29 L1765.37 1214.29 L1764.78 1214.29 L1764.19 1214.29 L1763.61 1214.29 L1763.02 1214.29 L1762.44 1214.29 L1761.85 1214.29 L1761.26 1214.29 L1760.68 1214.29 L1760.09 1214.29 L1759.5 1214.29 L1758.92 1214.29 L1758.33 1214.29 L1757.74 1214.29 L1757.16 1214.29 L1756.57 1214.29 L1755.99 1214.29 L1755.4 1214.29 L1754.81 1214.29 L1754.23 1214.29 L1753.64 1214.29 L1753.05 1214.29 L1752.47 1214.29 L1751.88 1214.29 L1751.29 1214.29 L1750.71 1214.29 L1750.12 1214.29 L1749.53 1214.29 L1748.95 1214.29 L1748.36 1214.29 L1747.78 1214.29 L1747.19 1214.29 L1746.6 1214.29 L1746.02 1214.29 L1745.43 1214.29 L1744.84 1214.29 L1744.26 1214.29 L1743.67 1214.29 L1743.08 1214.29 L1742.5 1214.29 L1741.91 1214.29 L1741.32 1214.29 L1740.74 1214.29 L1740.15 1214.29 L1739.57 1214.29 L1738.98 1214.29 L1738.39 1214.29 L1737.81 1214.29 L1737.22 1214.29 L1736.63 1214.29 L1736.05 1214.29 L1735.46 1214.29 L1734.87 1214.29 L1734.29 1214.29 L1733.7 1214.29 L1733.11 1214.29 L1732.53 1214.29 L1731.94 1214.29 L1731.36 1214.29 L1730.77 1214.29 L1730.18 1214.29 L1729.6 1214.29 L1729.01 1214.29 L1728.42 1214.29 L1727.84 1214.29 L1727.25 1214.29 L1726.66 1214.29 L1726.08 1214.29 L1725.49 1214.29 L1724.91 1214.29 L1724.32 1214.29 L1723.73 1214.29 L1723.15 1214.29 L1722.56 1214.29 L1721.97 1214.29 L1721.39 1214.29 L1720.8 1214.29 L1720.21 1214.29 L1719.63 1214.29 L1719.04 1214.29 L1718.45 1214.29 L1717.87 1214.29 L1717.28 1214.29 L1716.7 1214.29 L1716.11 1214.29 L1715.52 1214.29 L1714.94 1214.29 L1714.35 1214.29 L1713.76 1214.29 L1713.18 1214.29 L1712.59 1214.29 L1712 1214.29 L1711.42 1214.29 L1710.83 1214.29 L1710.24 1214.29 L1709.66 1214.29 L1709.07 1214.29 L1708.49 1214.29 L1707.9 1214.29 L1707.31 1214.29 L1706.73 1214.29 L1706.14 1214.29 L1705.55 1214.29 L1704.97 1214.29 L1704.38 1214.29 L1703.79 1214.29 L1703.21 1214.29 L1702.62 1214.29 L1702.04 1214.29 L1701.45 1214.29 L1700.86 1214.29 L1700.28 1214.29 L1699.69 1214.29 L1699.1 1214.29 L1698.52 1214.29 L1697.93 1214.29 L1697.34 1214.29 L1696.76 1214.29 L1696.17 1214.29 L1695.58 1214.29 L1695 1214.29 L1694.41 1214.29 L1693.83 1214.29 L1693.24 1214.29 L1692.65 1214.29 L1692.07 1214.29 L1691.48 1214.29 L1690.89 1214.29 L1690.31 1214.29 L1689.72 1214.29 L1689.13 1214.29 L1688.55 1214.29 L1687.96 1214.29 L1687.37 1214.29 L1686.79 1214.29 L1686.2 1214.29 L1685.62 1214.29 L1685.03 1214.29 L1684.44 1214.29 L1683.86 1214.29 L1683.27 1214.29 L1682.68 1214.29 L1682.1 1214.29 L1681.51 1214.29 L1680.92 1214.29 L1680.34 1214.29 L1679.75 1214.29 L1679.17 1214.29 L1678.58 1214.29 L1677.99 1214.29 L1677.41 1214.29 L1676.82 1214.29 L1676.23 1214.29 L1675.65 1214.29 L1675.06 1214.29 L1674.47 1214.29 L1673.89 1214.29 L1673.3 1214.29 L1672.71 1214.29 L1672.13 1214.29 L1671.54 1214.29 L1670.96 1214.29 L1670.37 1214.29 L1669.78 1214.29 L1669.2 1214.29 L1668.61 1214.29 L1668.02 1214.29 L1667.44 1214.29 L1666.85 1214.29 L1666.26 1214.29 L1665.68 1214.29 L1665.09 1214.29 L1664.5 1214.29 L1663.92 1214.29 L1663.33 1214.29 L1662.75 1214.29 L1662.16 1214.29 L1661.57 1214.29 L1660.99 1214.29 L1660.4 1214.29 L1659.81 1214.29 L1659.23 1214.29 L1658.64 1214.29 L1658.05 1214.29 L1657.47 1214.29 L1656.88 1214.29 L1656.29 1214.29 L1655.71 1214.29 L1655.12 1214.29 L1654.54 1214.29 L1653.95 1214.29 L1653.36 1214.29 L1652.78 1214.29 L1652.19 1214.29 L1651.6 1214.29 L1651.02 1214.29 L1650.43 1214.29 L1649.84 1214.29 L1649.26 1214.29 L1648.67 1214.29 L1648.09 1214.29 L1647.5 1214.29 L1646.91 1214.29 L1646.33 1214.29 L1645.74 1214.29 L1645.15 1214.29 L1644.57 1214.29 L1643.98 1214.29 L1643.39 1214.29 L1642.81 1214.29 L1642.22 1214.29 L1641.63 1214.29 L1641.05 1214.29 L1640.46 1214.29 L1639.88 1214.29 L1639.29 1214.29 L1638.7 1214.29 L1638.12 1214.29 L1637.53 1214.29 L1636.94 1214.29 L1636.36 1214.29 L1635.77 1214.29 L1635.18 1214.29 L1634.6 1214.29 L1634.01 1214.29 L1633.42 1214.29 L1632.84 1214.29 L1632.25 1214.29 L1631.67 1214.29 L1631.08 1214.29 L1630.49 1214.29 L1629.91 1214.29 L1629.32 1214.29 L1628.73 1214.29 L1628.15 1214.29 L1627.56 1214.29 L1626.97 1214.29 L1626.39 1214.29 L1625.8 1214.29 L1625.22 1214.29 L1624.63 1214.29 L1624.04 1214.29 L1623.46 1214.29 L1622.87 1214.29 L1622.28 1214.29 L1621.7 1214.29 L1621.11 1214.29 L1620.52 1214.29 L1619.94 1214.29 L1619.35 1214.29 L1618.76 1214.29 L1618.18 1214.29 L1617.59 1214.29 L1617.01 1214.29 L1616.42 1214.29 L1615.83 1214.29 L1615.25 1214.29 L1614.66 1214.29 L1614.07 1214.29 L1613.49 1214.29 L1612.9 1214.29 L1612.31 1214.29 L1611.73 1214.29 L1611.14 1214.29 L1610.55 1214.29 L1609.97 1214.29 L1609.38 1214.29 L1608.8 1214.29 L1608.21 1214.29 L1607.62 1214.29 L1607.04 1214.29 L1606.45 1214.29 L1605.86 1214.29 L1605.28 1214.29 L1604.69 1214.29 L1604.1 1214.29 L1603.52 1214.29 L1602.93 1214.29 L1602.34 1214.29 L1601.76 1214.29 L1601.17 1214.29 L1600.59 1214.29 L1600 1214.29 L1599.41 1214.29 L1598.83 1214.29 L1598.24 1214.29 L1597.65 1214.29 L1597.07 1214.29 L1596.48 1214.29 L1595.89 1214.29 L1595.31 1214.29 L1594.72 1214.29 L1594.14 1214.29 L1593.55 1214.29 L1592.96 1214.29 L1592.38 1214.29 L1591.79 1214.29 L1591.2 1214.29 L1590.62 1214.29 L1590.03 1214.29 L1589.44 1214.29 L1588.86 1214.29 L1588.27 1214.29 L1587.68 1214.29 L1587.1 1214.29 L1586.51 1214.29 L1585.93 1214.29 L1585.34 1214.29 L1584.75 1214.29 L1584.17 1214.29 L1583.58 1214.29 L1582.99 1214.29 L1582.41 1214.29 L1581.82 1214.29 L1581.23 1214.29 L1580.65 1214.29 L1580.06 1214.29 L1579.47 1214.29 L1578.89 1214.29 L1578.3 1214.29 L1577.72 1214.29 L1577.13 1214.29 L1576.54 1214.29 L1575.96 1214.29 L1575.37 1214.29 L1574.78 1214.29 L1574.2 1214.29 L1573.61 1214.29 L1573.02 1214.29 L1572.44 1214.29 L1571.85 1214.29 L1571.27 1214.29 L1570.68 1214.29 L1570.09 1214.29 L1569.51 1214.29 L1568.92 1214.29 L1568.33 1214.29 L1567.75 1214.29 L1567.16 1214.29 L1566.57 1214.29 L1565.99 1214.29 L1565.4 1214.29 L1564.81 1214.29 L1564.23 1214.29 L1563.64 1214.29 L1563.06 1214.29 L1562.47 1214.29 L1561.88 1214.29 L1561.3 1214.29 L1560.71 1214.29 L1560.12 1214.29 L1559.54 1214.29 L1558.95 1214.29 L1558.36 1214.29 L1557.78 1214.29 L1557.19 1214.29 L1556.6 1214.29 L1556.02 1214.29 L1555.43 1214.29 L1554.85 1214.29 L1554.26 1214.29 L1553.67 1214.29 L1553.09 1214.29 L1552.5 1214.29 L1551.91 1214.29 L1551.33 1214.29 L1550.74 1214.29 L1550.15 1214.29 L1549.57 1214.29 L1548.98 1214.29 L1548.4 1214.29 L1547.81 1214.29 L1547.22 1214.29 L1546.64 1214.29 L1546.05 1214.29 L1545.46 1214.29 L1544.88 1214.29 L1544.29 1214.29 L1543.7 1214.29 L1543.12 1214.29 L1542.53 1214.29 L1541.94 1214.29 L1541.36 1214.29 L1540.77 1214.29 L1540.19 1214.29 L1539.6 1214.29 L1539.01 1214.29 L1538.43 1214.29 L1537.84 1214.29 L1537.25 1214.29 L1536.67 1214.29 L1536.08 1214.29 L1535.49 1214.29 L1534.91 1214.29 L1534.32 1214.29 L1533.73 1214.29 L1533.15 1214.29 L1532.56 1214.29 L1531.98 1214.29 L1531.39 1214.29 L1530.8 1214.29 L1530.22 1214.29 L1529.63 1214.29 L1529.04 1214.29 L1528.46 1214.29 L1527.87 1214.29 L1527.28 1214.29 L1526.7 1214.29 L1526.11 1214.29 L1525.52 1214.29 L1524.94 1214.29 L1524.35 1214.29 L1523.77 1214.29 L1523.18 1214.29 L1522.59 1214.29 L1522.01 1214.29 L1521.42 1214.29 L1520.83 1214.29 L1520.25 1214.29 L1519.66 1214.29 L1519.07 1214.29 L1518.49 1214.29 L1517.9 1214.29 L1517.32 1214.29 L1516.73 1214.29 L1516.14 1214.29 L1515.56 1214.29 L1514.97 1214.29 L1514.38 1214.29 L1513.8 1214.29 L1513.21 1214.29 L1512.62 1214.29 L1512.04 1214.29 L1511.45 1214.29 L1510.86 1214.29 L1510.28 1214.29 L1509.69 1214.29 L1509.11 1214.29 L1508.52 1214.29 L1507.93 1214.29 L1507.35 1214.29 L1506.76 1214.29 L1506.17 1214.29 L1505.59 1214.29 L1505 1214.29 L1504.41 1214.29 L1503.83 1214.29 L1503.24 1214.29 L1502.65 1214.29 L1502.07 1214.29 L1501.48 1214.29 L1500.9 1214.29 L1500.31 1214.29 L1499.72 1214.29 L1499.14 1214.29 L1498.55 1214.29 L1497.96 1214.29 L1497.38 1214.29 L1496.79 1214.29 L1496.2 1214.29 L1495.62 1214.29 L1495.03 1214.29 L1494.45 1214.29 L1493.86 1214.29 L1493.27 1214.29 L1492.69 1214.29 L1492.1 1214.29 L1491.51 1214.29 L1490.93 1214.29 L1490.34 1214.29 L1489.75 1214.29 L1489.17 1214.29 L1488.58 1214.29 L1487.99 1214.29 L1487.41 1214.29 L1486.82 1214.29 L1486.24 1214.29 L1485.65 1214.29 L1485.06 1214.29 L1484.48 1214.29 L1483.89 1214.29 L1483.3 1214.29 L1482.72 1214.29 L1482.13 1214.29 L1481.54 1214.29 L1480.96 1214.29 L1480.37 1214.29 L1479.78 1214.29 L1479.2 1214.29 L1478.61 1214.29 L1478.03 1214.29 L1477.44 1214.29 L1476.85 1214.29 L1476.27 1214.29 L1475.68 1214.29 L1475.09 1214.29 L1474.51 1214.29 L1473.92 1214.29 L1473.33 1214.29 L1472.75 1214.29 L1472.16 1214.29 L1471.57 1214.29 L1470.99 1214.29 L1470.4 1214.29 L1469.82 1214.29 L1469.23 1214.29 L1468.64 1214.29 L1468.06 1214.29 L1467.47 1214.29 L1466.88 1214.29 L1466.3 1214.29 L1465.71 1214.29 L1465.12 1214.29 L1464.54 1214.29 L1463.95 1214.29 L1463.37 1214.29 L1462.78 1214.29 L1462.19 1214.29 L1461.61 1214.29 L1461.02 1214.29 L1460.43 1214.29 L1459.85 1214.29 L1459.26 1214.29 L1458.67 1214.29 L1458.09 1214.29 L1457.5 1214.29 L1456.91 1214.29 L1456.33 1214.29 L1455.74 1214.29 L1455.16 1214.29 L1454.57 1214.29 L1453.98 1214.29 L1453.4 1214.29 L1452.81 1214.29 L1452.22 1214.29 L1451.64 1214.29 L1451.05 1214.29 L1450.46 1214.29 L1449.88 1214.29 L1449.29 1214.29 L1448.7 1214.29 L1448.12 1214.29 L1447.53 1214.29 L1446.95 1214.29 L1446.36 1214.29 L1445.77 1214.29 L1445.19 1214.29 L1444.6 1214.29 L1444.01 1214.29 L1443.43 1214.29 L1442.84 1214.29 L1442.25 1214.29 L1441.67 1214.29 L1441.08 1214.29 L1440.5 1214.29 L1439.91 1214.29 L1439.32 1214.29 L1438.74 1214.29 L1438.15 1214.29 L1437.56 1214.29 L1436.98 1214.29 L1436.39 1214.29 L1435.8 1214.29 L1435.22 1214.29 L1434.63 1214.29 L1434.04 1214.29 L1433.46 1214.29 L1432.87 1214.29 L1432.29 1214.29 L1431.7 1214.29 L1431.11 1214.29 L1430.53 1214.29 L1429.94 1214.29 L1429.35 1214.29 L1428.77 1214.29 L1428.18 1214.29 L1427.59 1214.29 L1427.01 1214.29 L1426.42 1214.29 L1425.83 1214.29 L1425.25 1214.29 L1424.66 1214.29 L1424.08 1214.29 L1423.49 1214.29 L1422.9 1214.29 L1422.32 1214.29 L1421.73 1214.29 L1421.14 1214.29 L1420.56 1214.29 L1419.97 1214.29 L1419.38 1214.29 L1418.8 1214.29 L1418.21 1214.29 L1417.63 1214.29 L1417.04 1214.29 L1416.45 1214.29 L1415.87 1214.29 L1415.28 1214.29 L1414.69 1214.29 L1414.11 1214.29 L1413.52 1214.29 L1412.93 1214.29 L1412.35 1214.29 L1411.76 1214.29 L1411.17 1214.29 L1410.59 1214.29 L1410 1214.29 L1409.42 1214.29 L1408.83 1214.29 L1408.24 1214.29 L1407.66 1214.29 L1407.07 1214.29 L1406.48 1214.29 L1405.9 1214.29 L1405.31 1214.29 L1404.72 1214.29 L1404.14 1214.29 L1403.55 1214.29 L1402.96 1214.29 L1402.38 1214.29 L1401.79 1214.29 L1401.21 1214.29 L1400.62 1214.29 L1400.03 1214.29 L1399.45 1214.29 L1398.86 1214.29 L1398.27 1214.29 L1397.69 1214.29 L1397.1 1214.29 L1396.51 1214.29 L1395.93 1214.29 L1395.34 1214.29 L1394.75 1214.29 L1394.17 1214.29 L1393.58 1214.29 L1393 1214.29 L1392.41 1214.29 L1391.82 1214.29 L1391.24 1214.29 L1390.65 1214.29 L1390.06 1214.29 L1389.48 1214.29 L1388.89 1214.29 L1388.3 1214.29 L1387.72 1214.29 L1387.13 1214.29 L1386.55 1214.29 L1385.96 1214.29 L1385.37 1214.29 L1384.79 1214.29 L1384.2 1214.29 L1383.61 1214.29 L1383.03 1214.29 L1382.44 1214.29 L1381.85 1214.29 L1381.27 1214.29 L1380.68 1214.29 L1380.09 1214.29 L1379.51 1214.29 L1378.92 1214.29 L1378.34 1214.29 L1377.75 1214.29 L1377.16 1214.29 L1376.58 1214.29 L1375.99 1214.29 L1375.4 1214.29 L1374.82 1214.29 L1374.23 1214.29 L1373.64 1214.29 L1373.06 1214.29 L1372.47 1214.29 L1371.88 1214.29 L1371.3 1214.29 L1370.71 1214.29 L1370.13 1214.29 L1369.54 1214.29 L1368.95 1214.29 L1368.37 1214.29 L1367.78 1214.29 L1367.19 1214.29 L1366.61 1214.29 L1366.02 1214.29 L1365.43 1214.29 L1364.85 1214.29 L1364.26 1214.29 L1363.68 1214.29 L1363.09 1214.29 L1362.5 1214.29 L1361.92 1214.29 L1361.33 1214.29 L1360.74 1214.29 L1360.16 1214.29 L1359.57 1214.29 L1358.98 1214.29 L1358.4 1214.29 L1357.81 1214.29 L1357.22 1214.29 L1356.64 1214.29 L1356.05 1214.29 L1355.47 1214.29 L1354.88 1214.29 L1354.29 1214.29 L1353.71 1214.29 L1353.12 1214.29 L1352.53 1214.29 L1351.95 1214.29 L1351.36 1214.29 L1350.77 1214.29 L1350.19 1214.29 L1349.6 1214.29 L1349.01 1214.29 L1348.43 1214.29 L1347.84 1214.29 L1347.26 1214.29 L1346.67 1214.29 L1346.08 1214.29 L1345.5 1214.29 L1344.91 1214.29 L1344.32 1214.29 L1343.74 1214.29 L1343.15 1214.29 L1342.56 1214.29 L1341.98 1214.29 L1341.39 1214.29 L1340.8 1214.29 L1340.22 1214.29 L1339.63 1214.29 L1339.05 1214.29 L1338.46 1214.29 L1337.87 1214.29 L1337.29 1214.29 L1336.7 1214.29 L1336.11 1214.29 L1335.53 1214.29 L1334.94 1214.29 L1334.35 1214.29 L1333.77 1214.29 L1333.18 1214.29 L1332.6 1214.29 L1332.01 1214.29 L1331.42 1214.29 L1330.84 1214.29 L1330.25 1214.29 L1329.66 1214.29 L1329.08 1214.29 L1328.49 1214.29 L1327.9 1214.29 L1327.32 1214.29 L1326.73 1214.29 L1326.14 1214.29 L1325.56 1214.29 L1324.97 1214.29 L1324.39 1214.29 L1323.8 1214.29 L1323.21 1214.29 L1322.63 1214.29 L1322.04 1214.29 L1321.45 1214.29 L1320.87 1214.29 L1320.28 1214.29 L1319.69 1214.29 L1319.11 1214.29 L1318.52 1214.29 L1317.93 1214.29 L1317.35 1214.29 L1316.76 1214.29 L1316.18 1214.29 L1315.59 1214.29 L1315 1214.29 L1314.42 1214.29 L1313.83 1214.29 L1313.24 1214.29 L1312.66 1214.29 L1312.07 1214.29 L1311.48 1214.29 L1310.9 1214.29 L1310.31 1214.29 L1309.73 1214.29 L1309.14 1214.29 L1308.55 1214.29 L1307.97 1214.29 L1307.38 1214.29 L1306.79 1214.29 L1306.21 1214.29 L1305.62 1214.29 L1305.03 1214.29 L1304.45 1214.29 L1303.86 1214.29 L1303.27 1214.29 L1302.69 1214.29 L1302.1 1214.29 L1301.52 1214.29 L1300.93 1214.29 L1300.34 1214.29 L1299.76 1214.29 L1299.17 1214.29 L1298.58 1214.29 L1298 1214.29 L1297.41 1214.29 L1296.82 1214.29 L1296.24 1214.29 L1295.65 1214.29 L1295.06 1214.29 L1294.48 1214.29 L1293.89 1214.29 L1293.31 1214.29 L1292.72 1214.29 L1292.13 1214.29 L1291.55 1214.29 L1290.96 1214.29 L1290.37 1214.29 L1289.79 1214.29 L1289.2 1214.29 L1288.61 1214.29 L1288.03 1214.29 L1287.44 1214.29 L1286.86 1214.29 L1286.27 1214.29 L1285.68 1214.29 L1285.1 1214.29 L1284.51 1214.29 L1283.92 1214.29 L1283.34 1214.29 L1282.75 1214.29 L1282.16 1214.29 L1281.58 1214.29 L1280.99 1214.29 L1280.4 1214.29 L1279.82 1214.29 L1279.23 1214.29 L1278.65 1214.29 L1278.06 1214.29 L1277.47 1214.29 L1276.89 1214.29 L1276.3 1214.29 L1275.71 1214.29 L1275.13 1214.29 L1274.54 1214.29 L1273.95 1214.29 L1273.37 1214.29 L1272.78 1214.29 L1272.19 1214.29 L1271.61 1214.29 L1271.02 1214.29 L1270.44 1214.29 L1269.85 1214.29 L1269.26 1214.29 L1268.68 1214.29 L1268.09 1214.29 L1267.5 1214.29 L1266.92 1214.29 L1266.33 1214.29 L1265.74 1214.29 L1265.16 1214.29 L1264.57 1214.29 L1263.98 1214.29 L1263.4 1214.29 L1262.81 1214.29 L1262.23 1214.29 L1261.64 1214.29 L1261.05 1214.29 L1260.47 1214.29 L1259.88 1214.29 L1259.29 1214.29 L1258.71 1214.29 L1258.12 1214.29 L1257.53 1214.29 L1256.95 1214.29 L1256.36 1214.29 L1255.78 1214.29 L1255.19 1214.29 L1254.6 1214.29 L1254.02 1214.29 L1253.43 1214.29 L1252.84 1214.29 L1252.26 1214.29 L1251.67 1214.29 L1251.08 1214.29 L1250.5 1214.29 L1249.91 1214.29 L1249.32 1214.29 L1248.74 1214.29 L1248.15 1214.29 L1247.57 1214.29 L1246.98 1214.29 L1246.39 1214.29 L1245.81 1214.29 L1245.22 1214.29 L1244.63 1214.29 L1244.05 1214.29 L1243.46 1214.29 L1242.87 1214.29 L1242.29 1214.29 L1241.7 1214.29 L1241.11 1214.29 L1240.53 1214.29 L1239.94 1214.29 L1239.36 1214.29 L1238.77 1214.29 L1238.18 1214.29 L1237.6 1214.29 L1237.01 1214.29 L1236.42 1214.29 L1235.84 1214.29 L1235.25 1214.29 L1234.66 1214.29 L1234.08 1214.29 L1233.49 1214.29 L1232.91 1214.29 L1232.32 1214.29 L1231.73 1214.29 L1231.15 1214.29 L1230.56 1214.29 L1229.97 1214.29 L1229.39 1214.29 L1228.8 1214.29 L1228.21 1214.29 L1227.63 1214.29 L1227.04 1214.29 L1226.45 1214.29 L1225.87 1214.29 L1225.28 1214.29 L1224.7 1214.29 L1224.11 1214.29 L1223.52 1214.29 L1222.94 1214.29 L1222.35 1214.29 L1221.76 1214.29 L1221.18 1214.29 L1220.59 1214.29 L1220 1214.29 L1219.42 1214.29 L1218.83 1214.29 L1218.24 1214.29 L1217.66 1214.29 L1217.07 1214.29 L1216.49 1214.29 L1215.9 1214.29 L1215.31 1214.29 L1214.73 1214.29 L1214.14 1214.29 L1213.55 1214.29 L1212.97 1214.29 L1212.38 1214.29 L1211.79 1214.29 L1211.21 1214.29 L1210.62 1214.29 L1210.03 1214.29 L1209.45 1214.29 L1208.86 1214.29 L1208.28 1214.29 L1207.69 1214.29 L1207.1 1214.29 L1206.52 1214.29 L1205.93 1214.29 L1205.34 1214.29 L1204.76 1214.29 L1204.17 1214.29 L1203.58 1214.29 L1203 1214.29 L1202.41 1214.29 L1201.83 1214.29 L1201.24 1214.29 L1200.65 1214.29 L1200.07 1214.29 L1199.48 1214.29 L1198.89 1214.29 L1198.31 1214.29 L1197.72 1214.29 L1197.13 1214.29 L1196.55 1214.29 L1195.96 1214.29 L1195.37 1214.29 L1194.79 1214.29 L1194.2 1214.29 L1193.62 1214.29 L1193.03 1214.29 L1192.44 1214.29 L1191.86 1214.29 L1191.27 1214.29 L1190.68 1214.29 L1190.1 1214.29 L1189.51 1214.29 L1188.92 1214.29 L1188.34 1214.29 L1187.75 1214.29 L1187.16 1214.29 L1186.58 1214.29 L1185.99 1214.29 L1185.41 1214.29 L1184.82 1214.29 L1184.23 1214.29 L1183.65 1214.29 L1183.06 1214.29 L1182.47 1214.29 L1181.89 1214.29 L1181.3 1214.29 L1180.71 1214.29 L1180.13 1214.29 L1179.54 1214.29 L1178.96 1214.29 L1178.37 1214.29 L1177.78 1214.29 L1177.2 1214.29 L1176.61 1214.29 L1176.02 1214.29 L1175.44 1214.29 L1174.85 1214.29 L1174.26 1214.29 L1173.68 1214.29 L1173.09 1214.29 L1172.5 1214.29 L1171.92 1214.29 L1171.33 1214.29 L1170.75 1214.29 L1170.16 1214.29 L1169.57 1214.29 L1168.99 1214.29 L1168.4 1214.29 L1167.81 1214.29 L1167.23 1214.29 L1166.64 1214.29 L1166.05 1214.29 L1165.47 1214.29 L1164.88 1214.29 L1164.29 1214.29 L1163.71 1214.29 L1163.12 1214.29 L1162.54 1214.29 L1161.95 1214.29 L1161.36 1214.29 L1160.78 1214.29 L1160.19 1214.29 L1159.6 1214.29 L1159.02 1214.29 L1158.43 1214.29 L1157.84 1214.29 L1157.26 1214.29 L1156.67 1214.29 L1156.09 1214.29 L1155.5 1214.29 L1154.91 1214.29 L1154.33 1214.29 L1153.74 1214.29 L1153.15 1214.29 L1152.57 1214.29 L1151.98 1214.29 L1151.39 1214.29 L1150.81 1214.29 L1150.22 1214.29 L1149.63 1214.29 L1149.05 1214.29 L1148.46 1214.29 L1147.88 1214.29 L1147.29 1214.29 L1146.7 1214.29 L1146.12 1214.29 L1145.53 1214.29 L1144.94 1214.29 L1144.36 1214.29 L1143.77 1214.29 L1143.18 1214.29 L1142.6 1214.29 L1142.01 1214.29 L1141.42 1214.29 L1140.84 1214.29 L1140.25 1214.29 L1139.67 1214.29 L1139.08 1214.29 L1138.49 1214.29 L1137.91 1214.29 L1137.32 1214.29 L1136.73 1214.29 L1136.15 1214.29 L1135.56 1214.29 L1134.97 1214.29 L1134.39 1214.29 L1133.8 1214.29 L1133.21 1214.29 L1132.63 1214.29 L1132.04 1214.29 L1131.46 1214.29 L1130.87 1214.29 L1130.28 1214.29 L1129.7 1214.29 L1129.11 1214.29 L1128.52 1214.29 L1127.94 1214.29 L1127.35 1214.29 L1126.76 1214.29 L1126.18 1214.29 L1125.59 1214.29 L1125.01 1214.29 L1124.42 1214.29 L1123.83 1214.29 L1123.25 1214.29 L1122.66 1214.29 L1122.07 1214.29 L1121.49 1214.29 L1120.9 1214.29 L1120.31 1214.29 L1119.73 1214.29 L1119.14 1214.29 L1118.55 1214.29 L1117.97 1214.29 L1117.38 1214.29 L1116.8 1214.29 L1116.21 1214.29 L1115.62 1214.29 L1115.04 1214.29 L1114.45 1214.29 L1113.86 1214.29 L1113.28 1214.29 L1112.69 1214.29 L1112.1 1214.29 L1111.52 1214.29 L1110.93 1214.29 L1110.34 1214.29 L1109.76 1214.29 L1109.17 1214.29 L1108.59 1214.29 L1108 1214.29 L1107.41 1214.29 L1106.83 1214.29 L1106.24 1214.29 L1105.65 1214.29 L1105.07 1214.29 L1104.48 1214.29 L1103.89 1214.29 L1103.31 1214.29 L1102.72 1214.29 L1102.14 1214.29 L1101.55 1214.29 L1100.96 1214.29 L1100.38 1214.29 L1099.79 1214.29 L1099.2 1214.29 L1098.62 1214.29 L1098.03 1214.29 L1097.44 1214.29 L1096.86 1214.29 L1096.27 1214.29 L1095.68 1214.29 L1095.1 1214.29 L1094.51 1214.29 L1093.93 1214.29 L1093.34 1214.29 L1092.75 1214.29 L1092.17 1214.29 L1091.58 1214.29 L1090.99 1214.29 L1090.41 1214.29 L1089.82 1214.29 L1089.23 1214.29 L1088.65 1214.29 L1088.06 1214.29 L1087.47 1214.29 L1086.89 1214.29 L1086.3 1214.29 L1085.72 1214.29 L1085.13 1214.29 L1084.54 1214.29 L1083.96 1214.29 L1083.37 1214.29 L1082.78 1214.29 L1082.2 1214.29 L1081.61 1214.29 L1081.02 1214.29 L1080.44 1214.29 L1079.85 1214.29 L1079.26 1214.29 L1078.68 1214.29 L1078.09 1214.29 L1077.51 1214.29 L1076.92 1214.29 L1076.33 1214.29 L1075.75 1214.29 L1075.16 1214.29 L1074.57 1214.29 L1073.99 1214.29 L1073.4 1214.29 L1072.81 1214.29 L1072.23 1214.29 L1071.64 1214.29 L1071.06 1214.29 L1070.47 1214.29 L1069.88 1214.29 L1069.3 1214.29 L1068.71 1214.29 L1068.12 1214.29 L1067.54 1214.29 L1066.95 1214.29 L1066.36 1214.29 L1065.78 1214.29 L1065.19 1214.29 L1064.6 1214.29 L1064.02 1214.29 L1063.43 1214.29 L1062.85 1214.29 L1062.26 1214.29 L1061.67 1214.29 L1061.09 1214.29 L1060.5 1214.29 L1059.91 1214.29 L1059.33 1214.29 L1058.74 1214.29 L1058.15 1214.29 L1057.57 1214.29 L1056.98 1214.29 L1056.39 1214.29 L1055.81 1214.29 L1055.22 1214.29 L1054.64 1214.29 L1054.05 1214.29 L1053.46 1214.29 L1052.88 1214.29 L1052.29 1214.29 L1051.7 1214.29 L1051.12 1214.29 L1050.53 1214.29 L1049.94 1214.29 L1049.36 1214.29 L1048.77 1214.29 L1048.19 1214.29 L1047.6 1214.29 L1047.01 1214.29 L1046.43 1214.29 L1045.84 1214.29 L1045.25 1214.29 L1044.67 1214.29 L1044.08 1214.29 L1043.49 1214.29 L1042.91 1214.29 L1042.32 1214.29 L1041.73 1214.29 L1041.15 1214.29 L1040.56 1214.29 L1039.98 1214.29 L1039.39 1214.29 L1038.8 1214.29 L1038.22 1214.29 L1037.63 1214.29 L1037.04 1214.29 L1036.46 1214.29 L1035.87 1214.29 L1035.28 1214.29 L1034.7 1214.29 L1034.11 1214.29 L1033.52 1214.29 L1032.94 1214.29 L1032.35 1214.29 L1031.77 1214.29 L1031.18 1214.29 L1030.59 1214.29 L1030.01 1214.29 L1029.42 1214.29 L1028.83 1214.29 L1028.25 1214.29 L1027.66 1214.29 L1027.07 1214.29 L1026.49 1214.29 L1025.9 1214.29 L1025.32 1214.29 L1024.73 1214.29 L1024.14 1214.29 L1023.56 1214.29 L1022.97 1214.29 L1022.38 1214.29 L1021.8 1214.29 L1021.21 1214.29 L1020.62 1214.29 L1020.04 1214.29 L1019.45 1214.29 L1018.86 1214.29 L1018.28 1214.29 L1017.69 1214.29 L1017.11 1214.29 L1016.52 1214.29 L1015.93 1214.29 L1015.35 1214.29 L1014.76 1214.29 L1014.17 1214.29 L1013.59 1214.29 L1013 1214.29 L1012.41 1214.29 L1011.83 1214.29 L1011.24 1214.29 L1010.65 1214.29 L1010.07 1214.29 L1009.48 1214.29 L1008.9 1214.29 L1008.31 1214.29 L1007.72 1214.29 L1007.14 1214.29 L1006.55 1214.29 L1005.96 1214.29 L1005.38 1214.29 L1004.79 1214.29 L1004.2 1214.29 L1003.62 1214.29 L1003.03 1214.29 L1002.44 1214.29 L1001.86 1214.29 L1001.27 1214.29 L1000.69 1214.29 L1000.1 1214.29 L999.513 1214.29 L998.926 1214.29 L998.34 1214.29 L997.754 1214.29 L997.167 1214.29 L996.581 1214.29 L995.994 1214.29 L995.408 1214.29 L994.822 1214.29 L994.235 1214.29 L993.649 1214.29 L993.062 1214.29 L992.476 1214.29 L991.889 1214.29 L991.303 1214.29 L990.717 1214.29 L990.13 1214.29 L989.544 1214.29 L988.957 1214.29 L988.371 1214.29 L987.785 1214.29 L987.198 1214.29 L986.612 1214.29 L986.025 1214.29  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.36 986.612,1214.36 987.198,1214.36 987.785,1214.36 988.371,1214.36 988.957,1214.36 989.544,1214.36 990.13,1214.36 990.717,1214.36 991.303,1214.36 991.889,1214.36 992.476,1214.36 993.062,1214.36 993.649,1214.36 994.235,1214.36 994.822,1214.36 995.408,1214.36 995.994,1214.36 996.581,1214.36 997.167,1214.36 997.754,1214.36 998.34,1214.36 998.926,1214.36 999.513,1214.36 1000.1,1214.36 1000.69,1214.36 1001.27,1214.36 1001.86,1214.36 1002.44,1214.36 1003.03,1214.36 1003.62,1214.36 1004.2,1214.36 1004.79,1214.36 1005.38,1214.36 1005.96,1214.36 1006.55,1214.36 1007.14,1214.36 1007.72,1214.36 1008.31,1214.36 1008.9,1214.36 1009.48,1214.36 1010.07,1214.36 1010.65,1214.36 1011.24,1214.36 1011.83,1214.36 1012.41,1214.36 1013,1214.36 1013.59,1214.36 1014.17,1214.36 1014.76,1214.36 1015.35,1214.36 1015.93,1214.36 1016.52,1214.36 1017.11,1214.36 1017.69,1214.36 1018.28,1214.36 1018.86,1214.36 1019.45,1214.36 1020.04,1214.36 1020.62,1214.36 1021.21,1214.36 1021.8,1214.36 1022.38,1214.36 1022.97,1214.36 1023.56,1214.36 1024.14,1214.36 1024.73,1214.36 1025.32,1214.36 1025.9,1214.36 1026.49,1214.36 1027.07,1214.36 1027.66,1214.36 1028.25,1214.36 1028.83,1214.36 1029.42,1214.36 1030.01,1214.36 1030.59,1214.36 1031.18,1214.36 1031.77,1214.36 1032.35,1214.36 1032.94,1214.36 1033.52,1214.36 1034.11,1214.36 1034.7,1214.36 1035.28,1214.36 1035.87,1214.36 1036.46,1214.36 1037.04,1214.36 1037.63,1214.36 1038.22,1214.36 1038.8,1214.36 1039.39,1214.36 1039.98,1214.36 1040.56,1214.36 1041.15,1214.36 1041.73,1214.36 1042.32,1214.36 1042.91,1214.36 1043.49,1214.36 1044.08,1214.36 1044.67,1214.36 1045.25,1214.36 1045.84,1214.36 1046.43,1214.36 1047.01,1214.36 1047.6,1214.36 1048.19,1214.36 1048.77,1214.36 1049.36,1214.36 1049.94,1214.36 1050.53,1214.36 1051.12,1214.36 1051.7,1214.36 1052.29,1214.36 1052.88,1214.36 1053.46,1214.36 1054.05,1214.36 1054.64,1214.36 1055.22,1214.36 1055.81,1214.36 1056.39,1214.36 1056.98,1214.36 1057.57,1214.36 1058.15,1214.36 1058.74,1214.36 1059.33,1214.36 1059.91,1214.36 1060.5,1214.36 1061.09,1214.36 1061.67,1214.36 1062.26,1214.36 1062.85,1214.36 1063.43,1214.36 1064.02,1214.36 1064.6,1214.36 1065.19,1214.36 1065.78,1214.36 1066.36,1214.36 1066.95,1214.36 1067.54,1214.36 1068.12,1214.36 1068.71,1214.36 1069.3,1214.36 1069.88,1214.36 1070.47,1214.36 1071.06,1214.36 1071.64,1214.36 1072.23,1214.36 1072.81,1214.36 1073.4,1214.36 1073.99,1214.36 1074.57,1214.36 1075.16,1214.36 1075.75,1214.36 1076.33,1214.36 1076.92,1214.36 1077.51,1214.36 1078.09,1214.36 1078.68,1214.36 1079.26,1214.36 1079.85,1214.36 1080.44,1214.36 1081.02,1214.36 1081.61,1214.36 1082.2,1214.36 1082.78,1214.36 1083.37,1214.36 1083.96,1214.36 1084.54,1214.36 1085.13,1214.36 1085.72,1214.36 1086.3,1214.36 1086.89,1214.36 1087.47,1214.36 1088.06,1214.36 1088.65,1214.36 1089.23,1214.36 1089.82,1214.36 1090.41,1214.36 1090.99,1214.36 1091.58,1214.36 1092.17,1214.36 1092.75,1214.36 1093.34,1214.36 1093.93,1214.36 1094.51,1214.36 1095.1,1214.36 1095.68,1214.36 1096.27,1214.36 1096.86,1214.36 1097.44,1214.36 1098.03,1214.36 1098.62,1214.36 1099.2,1214.36 1099.79,1214.36 1100.38,1214.36 1100.96,1214.36 1101.55,1214.36 1102.14,1214.36 1102.72,1214.36 1103.31,1214.36 1103.89,1214.36 1104.48,1214.36 1105.07,1214.36 1105.65,1214.36 1106.24,1214.36 1106.83,1214.36 1107.41,1214.36 1108,1214.36 1108.59,1214.36 1109.17,1214.36 1109.76,1214.36 1110.34,1214.36 1110.93,1214.36 1111.52,1214.36 1112.1,1214.36 1112.69,1214.36 1113.28,1214.36 1113.86,1214.36 1114.45,1214.36 1115.04,1214.36 1115.62,1214.36 1116.21,1214.36 1116.8,1214.36 1117.38,1214.36 1117.97,1214.36 1118.55,1214.36 1119.14,1214.36 1119.73,1214.36 1120.31,1214.36 1120.9,1214.36 1121.49,1214.36 1122.07,1214.36 1122.66,1214.36 1123.25,1214.36 1123.83,1214.36 1124.42,1214.36 1125.01,1214.36 1125.59,1214.36 1126.18,1214.36 1126.76,1214.36 1127.35,1214.36 1127.94,1214.36 1128.52,1214.36 1129.11,1214.36 1129.7,1214.36 1130.28,1214.36 1130.87,1214.36 1131.46,1214.36 1132.04,1214.36 1132.63,1214.36 1133.21,1214.36 1133.8,1214.36 1134.39,1214.36 1134.97,1214.36 1135.56,1214.36 1136.15,1214.36 1136.73,1214.36 1137.32,1214.36 1137.91,1214.36 1138.49,1214.36 1139.08,1214.36 1139.67,1214.36 1140.25,1214.36 1140.84,1214.36 1141.42,1214.36 1142.01,1214.36 1142.6,1214.36 1143.18,1214.36 1143.77,1214.36 1144.36,1214.36 1144.94,1214.36 1145.53,1214.36 1146.12,1214.36 1146.7,1214.36 1147.29,1214.36 1147.88,1214.36 1148.46,1214.36 1149.05,1214.36 1149.63,1214.36 1150.22,1214.36 1150.81,1214.36 1151.39,1214.36 1151.98,1214.36 1152.57,1214.36 1153.15,1214.36 1153.74,1214.36 1154.33,1214.36 1154.91,1214.36 1155.5,1214.36 1156.09,1214.36 1156.67,1214.36 1157.26,1214.36 1157.84,1214.36 1158.43,1214.36 1159.02,1214.36 1159.6,1214.36 1160.19,1214.36 1160.78,1214.36 1161.36,1214.36 1161.95,1214.36 1162.54,1214.36 1163.12,1214.36 1163.71,1214.36 1164.29,1214.36 1164.88,1214.36 1165.47,1214.36 1166.05,1214.36 1166.64,1214.36 1167.23,1214.36 1167.81,1214.36 1168.4,1214.36 1168.99,1214.36 1169.57,1214.36 1170.16,1214.36 1170.75,1214.36 1171.33,1214.36 1171.92,1214.36 1172.5,1214.36 1173.09,1214.36 1173.68,1214.36 1174.26,1214.36 1174.85,1214.36 1175.44,1214.36 1176.02,1214.36 1176.61,1214.36 1177.2,1214.36 1177.78,1214.36 1178.37,1214.36 1178.96,1214.36 1179.54,1214.36 1180.13,1214.36 1180.71,1214.36 1181.3,1214.36 1181.89,1214.36 1182.47,1214.36 1183.06,1214.36 1183.65,1214.36 1184.23,1214.36 1184.82,1214.36 1185.41,1214.36 1185.99,1214.36 1186.58,1214.36 1187.16,1214.36 1187.75,1214.36 1188.34,1214.36 1188.92,1214.36 1189.51,1214.36 1190.1,1214.36 1190.68,1214.36 1191.27,1214.36 1191.86,1214.36 1192.44,1214.36 1193.03,1214.36 1193.62,1214.36 1194.2,1214.36 1194.79,1214.36 1195.37,1214.36 1195.96,1214.36 1196.55,1214.36 1197.13,1214.36 1197.72,1214.36 1198.31,1214.36 1198.89,1214.36 1199.48,1214.36 1200.07,1214.36 1200.65,1214.36 1201.24,1214.36 1201.83,1214.36 1202.41,1214.36 1203,1214.36 1203.58,1214.36 1204.17,1214.36 1204.76,1214.36 1205.34,1214.36 1205.93,1214.36 1206.52,1214.36 1207.1,1214.36 1207.69,1214.36 1208.28,1214.36 1208.86,1214.36 1209.45,1214.36 1210.03,1214.36 1210.62,1214.36 1211.21,1214.36 1211.79,1214.36 1212.38,1214.36 1212.97,1214.36 1213.55,1214.36 1214.14,1214.36 1214.73,1214.36 1215.31,1214.36 1215.9,1214.36 1216.49,1214.36 1217.07,1214.36 1217.66,1214.36 1218.24,1214.36 1218.83,1214.36 1219.42,1214.36 1220,1214.36 1220.59,1214.36 1221.18,1214.36 1221.76,1214.36 1222.35,1214.36 1222.94,1214.36 1223.52,1214.36 1224.11,1214.36 1224.7,1214.36 1225.28,1214.36 1225.87,1214.36 1226.45,1214.36 1227.04,1214.36 1227.63,1214.36 1228.21,1214.36 1228.8,1214.36 1229.39,1214.36 1229.97,1214.36 1230.56,1214.36 1231.15,1214.36 1231.73,1214.36 1232.32,1214.36 1232.91,1214.36 1233.49,1214.36 1234.08,1214.36 1234.66,1214.36 1235.25,1214.36 1235.84,1214.36 1236.42,1214.36 1237.01,1214.36 1237.6,1214.36 1238.18,1214.36 1238.77,1214.36 1239.36,1214.36 1239.94,1214.36 1240.53,1214.36 1241.11,1214.36 1241.7,1214.36 1242.29,1214.36 1242.87,1214.36 1243.46,1214.36 1244.05,1214.36 1244.63,1214.36 1245.22,1214.36 1245.81,1214.36 1246.39,1214.36 1246.98,1214.36 1247.57,1214.36 1248.15,1214.36 1248.74,1214.36 1249.32,1214.36 1249.91,1214.36 1250.5,1214.36 1251.08,1214.36 1251.67,1214.36 1252.26,1214.36 1252.84,1214.36 1253.43,1214.36 1254.02,1214.36 1254.6,1214.36 1255.19,1214.36 1255.78,1214.36 1256.36,1214.36 1256.95,1214.36 1257.53,1214.36 1258.12,1214.36 1258.71,1214.36 1259.29,1214.36 1259.88,1214.36 1260.47,1214.36 1261.05,1214.36 1261.64,1214.36 1262.23,1214.36 1262.81,1214.36 1263.4,1214.36 1263.98,1214.36 1264.57,1214.36 1265.16,1214.36 1265.74,1214.36 1266.33,1214.36 1266.92,1214.36 1267.5,1214.36 1268.09,1214.36 1268.68,1214.36 1269.26,1214.36 1269.85,1214.36 1270.44,1214.36 1271.02,1214.36 1271.61,1214.36 1272.19,1214.36 1272.78,1214.36 1273.37,1214.36 1273.95,1214.36 1274.54,1214.36 1275.13,1214.36 1275.71,1214.36 1276.3,1214.36 1276.89,1214.36 1277.47,1214.36 1278.06,1214.36 1278.65,1214.36 1279.23,1214.36 1279.82,1214.36 1280.4,1214.36 1280.99,1214.36 1281.58,1214.36 1282.16,1214.36 1282.75,1214.36 1283.34,1214.36 1283.92,1214.36 1284.51,1214.36 1285.1,1214.36 1285.68,1214.36 1286.27,1214.36 1286.86,1214.36 1287.44,1214.36 1288.03,1214.36 1288.61,1214.36 1289.2,1214.36 1289.79,1214.36 1290.37,1214.36 1290.96,1214.36 1291.55,1214.36 1292.13,1214.36 1292.72,1214.36 1293.31,1214.36 1293.89,1214.36 1294.48,1214.36 1295.06,1214.36 1295.65,1214.36 1296.24,1214.36 1296.82,1214.36 1297.41,1214.36 1298,1214.36 1298.58,1214.36 1299.17,1214.36 1299.76,1214.36 1300.34,1214.36 1300.93,1214.36 1301.52,1214.36 1302.1,1214.36 1302.69,1214.36 1303.27,1214.36 1303.86,1214.36 1304.45,1214.36 1305.03,1214.36 1305.62,1214.36 1306.21,1214.36 1306.79,1214.36 1307.38,1214.36 1307.97,1214.36 1308.55,1214.36 1309.14,1214.36 1309.73,1214.36 1310.31,1214.36 1310.9,1214.36 1311.48,1214.36 1312.07,1214.36 1312.66,1214.36 1313.24,1214.36 1313.83,1214.36 1314.42,1214.36 1315,1214.36 1315.59,1214.36 1316.18,1214.36 1316.76,1214.36 1317.35,1214.36 1317.93,1214.36 1318.52,1214.36 1319.11,1214.36 1319.69,1214.36 1320.28,1214.36 1320.87,1214.36 1321.45,1214.36 1322.04,1214.36 1322.63,1214.36 1323.21,1214.36 1323.8,1214.36 1324.39,1214.36 1324.97,1214.36 1325.56,1214.36 1326.14,1214.36 1326.73,1214.36 1327.32,1214.36 1327.9,1214.36 1328.49,1214.36 1329.08,1214.36 1329.66,1214.36 1330.25,1214.36 1330.84,1214.36 1331.42,1214.36 1332.01,1214.36 1332.6,1214.36 1333.18,1214.36 1333.77,1214.36 1334.35,1214.36 1334.94,1214.36 1335.53,1214.36 1336.11,1214.36 1336.7,1214.36 1337.29,1214.36 1337.87,1214.36 1338.46,1214.36 1339.05,1214.36 1339.63,1214.36 1340.22,1214.36 1340.8,1214.36 1341.39,1214.36 1341.98,1214.36 1342.56,1214.36 1343.15,1214.36 1343.74,1214.36 1344.32,1214.36 1344.91,1214.36 1345.5,1214.36 1346.08,1214.36 1346.67,1214.36 1347.26,1214.36 1347.84,1214.36 1348.43,1214.36 1349.01,1214.36 1349.6,1214.36 1350.19,1214.36 1350.77,1214.36 1351.36,1214.36 1351.95,1214.36 1352.53,1214.36 1353.12,1214.36 1353.71,1214.36 1354.29,1214.36 1354.88,1214.36 1355.47,1214.36 1356.05,1214.36 1356.64,1214.36 1357.22,1214.36 1357.81,1214.36 1358.4,1214.36 1358.98,1214.36 1359.57,1214.36 1360.16,1214.36 1360.74,1214.36 1361.33,1214.36 1361.92,1214.36 1362.5,1214.36 1363.09,1214.36 1363.68,1214.36 1364.26,1214.36 1364.85,1214.36 1365.43,1214.36 1366.02,1214.36 1366.61,1214.36 1367.19,1214.36 1367.78,1214.36 1368.37,1214.36 1368.95,1214.36 1369.54,1214.36 1370.13,1214.36 1370.71,1214.36 1371.3,1214.36 1371.88,1214.36 1372.47,1214.36 1373.06,1214.36 1373.64,1214.36 1374.23,1214.36 1374.82,1214.36 1375.4,1214.36 1375.99,1214.36 1376.58,1214.36 1377.16,1214.36 1377.75,1214.36 1378.34,1214.36 1378.92,1214.36 1379.51,1214.36 1380.09,1214.36 1380.68,1214.36 1381.27,1214.36 1381.85,1214.36 1382.44,1214.36 1383.03,1214.36 1383.61,1214.36 1384.2,1214.36 1384.79,1214.36 1385.37,1214.36 1385.96,1214.36 1386.55,1214.36 1387.13,1214.36 1387.72,1214.36 1388.3,1214.36 1388.89,1214.36 1389.48,1214.36 1390.06,1214.36 1390.65,1214.36 1391.24,1214.36 1391.82,1214.36 1392.41,1214.36 1393,1214.36 1393.58,1214.36 1394.17,1214.36 1394.75,1214.36 1395.34,1214.36 1395.93,1214.36 1396.51,1214.36 1397.1,1214.36 1397.69,1214.36 1398.27,1214.36 1398.86,1214.36 1399.45,1214.36 1400.03,1214.36 1400.62,1214.36 1401.21,1214.36 1401.79,1214.36 1402.38,1214.36 1402.96,1214.36 1403.55,1214.36 1404.14,1214.36 1404.72,1214.36 1405.31,1214.36 1405.9,1214.36 1406.48,1214.36 1407.07,1214.36 1407.66,1214.36 1408.24,1214.36 1408.83,1214.36 1409.42,1214.36 1410,1214.36 1410.59,1214.36 1411.17,1214.36 1411.76,1214.36 1412.35,1214.36 1412.93,1214.36 1413.52,1214.36 1414.11,1214.36 1414.69,1214.36 1415.28,1214.36 1415.87,1214.36 1416.45,1214.36 1417.04,1214.36 1417.63,1214.36 1418.21,1214.36 1418.8,1214.36 1419.38,1214.36 1419.97,1214.36 1420.56,1214.36 1421.14,1214.36 1421.73,1214.36 1422.32,1214.36 1422.9,1214.36 1423.49,1214.36 1424.08,1214.36 1424.66,1214.36 1425.25,1214.36 1425.83,1214.36 1426.42,1214.36 1427.01,1214.36 1427.59,1214.36 1428.18,1214.36 1428.77,1214.36 1429.35,1214.36 1429.94,1214.36 1430.53,1214.36 1431.11,1214.36 1431.7,1214.36 1432.29,1214.36 1432.87,1214.36 1433.46,1214.36 1434.04,1214.36 1434.63,1214.36 1435.22,1214.36 1435.8,1214.36 1436.39,1214.36 1436.98,1214.36 1437.56,1214.36 1438.15,1214.36 1438.74,1214.36 1439.32,1214.36 1439.91,1214.36 1440.5,1214.36 1441.08,1214.36 1441.67,1214.36 1442.25,1214.36 1442.84,1214.36 1443.43,1214.36 1444.01,1214.36 1444.6,1214.36 1445.19,1214.36 1445.77,1214.36 1446.36,1214.36 1446.95,1214.36 1447.53,1214.36 1448.12,1214.36 1448.7,1214.36 1449.29,1214.36 1449.88,1214.36 1450.46,1214.36 1451.05,1214.36 1451.64,1214.36 1452.22,1214.36 1452.81,1214.36 1453.4,1214.36 1453.98,1214.36 1454.57,1214.36 1455.16,1214.36 1455.74,1214.36 1456.33,1214.36 1456.91,1214.36 1457.5,1214.36 1458.09,1214.36 1458.67,1214.36 1459.26,1214.36 1459.85,1214.36 1460.43,1214.36 1461.02,1214.36 1461.61,1214.36 1462.19,1214.36 1462.78,1214.36 1463.37,1214.36 1463.95,1214.36 1464.54,1214.36 1465.12,1214.36 1465.71,1214.36 1466.3,1214.36 1466.88,1214.36 1467.47,1214.36 1468.06,1214.36 1468.64,1214.36 1469.23,1214.36 1469.82,1214.36 1470.4,1214.36 1470.99,1214.36 1471.57,1214.36 1472.16,1214.36 1472.75,1214.36 1473.33,1214.36 1473.92,1214.36 1474.51,1214.36 1475.09,1214.36 1475.68,1214.36 1476.27,1214.36 1476.85,1214.36 1477.44,1214.36 1478.03,1214.36 1478.61,1214.36 1479.2,1214.36 1479.78,1214.36 1480.37,1214.36 1480.96,1214.36 1481.54,1214.36 1482.13,1214.36 1482.72,1214.36 1483.3,1214.36 1483.89,1214.36 1484.48,1214.36 1485.06,1214.36 1485.65,1214.36 1486.24,1214.36 1486.82,1214.36 1487.41,1214.36 1487.99,1214.36 1488.58,1214.36 1489.17,1214.36 1489.75,1214.36 1490.34,1214.36 1490.93,1214.36 1491.51,1214.36 1492.1,1214.36 1492.69,1214.36 1493.27,1214.36 1493.86,1214.36 1494.45,1214.36 1495.03,1214.36 1495.62,1214.36 1496.2,1214.36 1496.79,1214.36 1497.38,1214.36 1497.96,1214.36 1498.55,1214.36 1499.14,1214.36 1499.72,1214.36 1500.31,1214.36 1500.9,1214.36 1501.48,1214.36 1502.07,1214.36 1502.65,1214.36 1503.24,1214.36 1503.83,1214.36 1504.41,1214.36 1505,1214.36 1505.59,1214.36 1506.17,1214.36 1506.76,1214.36 1507.35,1214.36 1507.93,1214.36 1508.52,1214.36 1509.11,1214.36 1509.69,1214.36 1510.28,1214.36 1510.86,1214.36 1511.45,1214.36 1512.04,1214.36 1512.62,1214.36 1513.21,1214.36 1513.8,1214.36 1514.38,1214.36 1514.97,1214.36 1515.56,1214.36 1516.14,1214.36 1516.73,1214.36 1517.32,1214.36 1517.9,1214.36 1518.49,1214.36 1519.07,1214.36 1519.66,1214.36 1520.25,1214.36 1520.83,1214.36 1521.42,1214.36 1522.01,1214.36 1522.59,1214.36 1523.18,1214.36 1523.77,1214.36 1524.35,1214.36 1524.94,1214.36 1525.52,1214.36 1526.11,1214.36 1526.7,1214.36 1527.28,1214.36 1527.87,1214.36 1528.46,1214.36 1529.04,1214.36 1529.63,1214.36 1530.22,1214.36 1530.8,1214.36 1531.39,1214.36 1531.98,1214.36 1532.56,1214.36 1533.15,1214.36 1533.73,1214.36 1534.32,1214.36 1534.91,1214.36 1535.49,1214.36 1536.08,1214.36 1536.67,1214.36 1537.25,1214.36 1537.84,1214.36 1538.43,1214.36 1539.01,1214.36 1539.6,1214.36 1540.19,1214.36 1540.77,1214.36 1541.36,1214.36 1541.94,1214.36 1542.53,1214.36 1543.12,1214.36 1543.7,1214.36 1544.29,1214.36 1544.88,1214.36 1545.46,1214.36 1546.05,1214.36 1546.64,1214.36 1547.22,1214.36 1547.81,1214.36 1548.4,1214.36 1548.98,1214.36 1549.57,1214.36 1550.15,1214.36 1550.74,1214.36 1551.33,1214.36 1551.91,1214.36 1552.5,1214.36 1553.09,1214.36 1553.67,1214.36 1554.26,1214.36 1554.85,1214.36 1555.43,1214.36 1556.02,1214.36 1556.6,1214.36 1557.19,1214.36 1557.78,1214.36 1558.36,1214.36 1558.95,1214.36 1559.54,1214.36 1560.12,1214.36 1560.71,1214.36 1561.3,1214.36 1561.88,1214.36 1562.47,1214.36 1563.06,1214.36 1563.64,1214.36 1564.23,1214.36 1564.81,1214.36 1565.4,1214.36 1565.99,1214.36 1566.57,1214.36 1567.16,1214.36 1567.75,1214.36 1568.33,1214.36 1568.92,1214.36 1569.51,1214.36 1570.09,1214.36 1570.68,1214.36 1571.27,1214.36 1571.85,1214.36 1572.44,1214.36 1573.02,1214.36 1573.61,1214.36 1574.2,1214.36 1574.78,1214.36 1575.37,1214.36 1575.96,1214.36 1576.54,1214.36 1577.13,1214.36 1577.72,1214.36 1578.3,1214.36 1578.89,1214.36 1579.47,1214.36 1580.06,1214.36 1580.65,1214.36 1581.23,1214.36 1581.82,1214.36 1582.41,1214.36 1582.99,1214.36 1583.58,1214.36 1584.17,1214.36 1584.75,1214.36 1585.34,1214.36 1585.93,1214.36 1586.51,1214.36 1587.1,1214.36 1587.68,1214.36 1588.27,1214.36 1588.86,1214.36 1589.44,1214.36 1590.03,1214.36 1590.62,1214.36 1591.2,1214.36 1591.79,1214.36 1592.38,1214.36 1592.96,1214.36 1593.55,1214.36 1594.14,1214.36 1594.72,1214.36 1595.31,1214.36 1595.89,1214.36 1596.48,1214.36 1597.07,1214.36 1597.65,1214.36 1598.24,1214.36 1598.83,1214.36 1599.41,1214.36 1600,1214.36 1600.59,1214.36 1601.17,1214.36 1601.76,1214.36 1602.34,1214.36 1602.93,1214.36 1603.52,1214.36 1604.1,1214.36 1604.69,1214.36 1605.28,1214.36 1605.86,1214.36 1606.45,1214.36 1607.04,1214.36 1607.62,1214.36 1608.21,1214.36 1608.8,1214.36 1609.38,1214.36 1609.97,1214.36 1610.55,1214.36 1611.14,1214.36 1611.73,1214.36 1612.31,1214.36 1612.9,1214.36 1613.49,1214.36 1614.07,1214.36 1614.66,1214.36 1615.25,1214.36 1615.83,1214.36 1616.42,1214.36 1617.01,1214.36 1617.59,1214.36 1618.18,1214.36 1618.76,1214.36 1619.35,1214.36 1619.94,1214.36 1620.52,1214.36 1621.11,1214.36 1621.7,1214.36 1622.28,1214.36 1622.87,1214.36 1623.46,1214.36 1624.04,1214.36 1624.63,1214.36 1625.22,1214.36 1625.8,1214.36 1626.39,1214.36 1626.97,1214.36 1627.56,1214.36 1628.15,1214.36 1628.73,1214.36 1629.32,1214.36 1629.91,1214.36 1630.49,1214.36 1631.08,1214.36 1631.67,1214.36 1632.25,1214.36 1632.84,1214.36 1633.42,1214.36 1634.01,1214.36 1634.6,1214.36 1635.18,1214.36 1635.77,1214.36 1636.36,1214.36 1636.94,1214.36 1637.53,1214.36 1638.12,1214.36 1638.7,1214.36 1639.29,1214.36 1639.88,1214.36 1640.46,1214.36 1641.05,1214.36 1641.63,1214.36 1642.22,1214.36 1642.81,1214.36 1643.39,1214.36 1643.98,1214.36 1644.57,1214.36 1645.15,1214.36 1645.74,1214.36 1646.33,1214.36 1646.91,1214.36 1647.5,1214.36 1648.09,1214.36 1648.67,1214.36 1649.26,1214.36 1649.84,1214.36 1650.43,1214.36 1651.02,1214.36 1651.6,1214.36 1652.19,1214.36 1652.78,1214.36 1653.36,1214.36 1653.95,1214.36 1654.54,1214.36 1655.12,1214.36 1655.71,1214.36 1656.29,1214.36 1656.88,1214.36 1657.47,1214.36 1658.05,1214.36 1658.64,1214.36 1659.23,1214.36 1659.81,1214.36 1660.4,1214.36 1660.99,1214.36 1661.57,1214.36 1662.16,1214.36 1662.75,1214.36 1663.33,1214.36 1663.92,1214.36 1664.5,1214.36 1665.09,1214.36 1665.68,1214.36 1666.26,1214.36 1666.85,1214.36 1667.44,1214.36 1668.02,1214.36 1668.61,1214.36 1669.2,1214.36 1669.78,1214.36 1670.37,1214.36 1670.96,1214.36 1671.54,1214.36 1672.13,1214.36 1672.71,1214.36 1673.3,1214.36 1673.89,1214.36 1674.47,1214.36 1675.06,1214.36 1675.65,1214.36 1676.23,1214.36 1676.82,1214.36 1677.41,1214.36 1677.99,1214.36 1678.58,1214.36 1679.17,1214.36 1679.75,1214.36 1680.34,1214.36 1680.92,1214.36 1681.51,1214.36 1682.1,1214.36 1682.68,1214.36 1683.27,1214.36 1683.86,1214.36 1684.44,1214.36 1685.03,1214.36 1685.62,1214.36 1686.2,1214.36 1686.79,1214.36 1687.37,1214.36 1687.96,1214.36 1688.55,1214.36 1689.13,1214.36 1689.72,1214.36 1690.31,1214.36 1690.89,1214.36 1691.48,1214.36 1692.07,1214.36 1692.65,1214.36 1693.24,1214.36 1693.83,1214.36 1694.41,1214.36 1695,1214.36 1695.58,1214.36 1696.17,1214.36 1696.76,1214.36 1697.34,1214.36 1697.93,1214.36 1698.52,1214.36 1699.1,1214.36 1699.69,1214.36 1700.28,1214.36 1700.86,1214.36 1701.45,1214.36 1702.04,1214.36 1702.62,1214.36 1703.21,1214.36 1703.79,1214.36 1704.38,1214.36 1704.97,1214.36 1705.55,1214.36 1706.14,1214.36 1706.73,1214.36 1707.31,1214.36 1707.9,1214.36 1708.49,1214.36 1709.07,1214.36 1709.66,1214.36 1710.24,1214.36 1710.83,1214.36 1711.42,1214.36 1712,1214.36 1712.59,1214.36 1713.18,1214.36 1713.76,1214.36 1714.35,1214.36 1714.94,1214.36 1715.52,1214.36 1716.11,1214.36 1716.7,1214.36 1717.28,1214.36 1717.87,1214.36 1718.45,1214.36 1719.04,1214.36 1719.63,1214.36 1720.21,1214.36 1720.8,1214.36 1721.39,1214.36 1721.97,1214.36 1722.56,1214.36 1723.15,1214.36 1723.73,1214.36 1724.32,1214.36 1724.91,1214.36 1725.49,1214.36 1726.08,1214.36 1726.66,1214.36 1727.25,1214.36 1727.84,1214.36 1728.42,1214.36 1729.01,1214.36 1729.6,1214.36 1730.18,1214.36 1730.77,1214.36 1731.36,1214.36 1731.94,1214.36 1732.53,1214.36 1733.11,1214.36 1733.7,1214.36 1734.29,1214.36 1734.87,1214.36 1735.46,1214.36 1736.05,1214.36 1736.63,1214.36 1737.22,1214.36 1737.81,1214.36 1738.39,1214.36 1738.98,1214.36 1739.57,1214.36 1740.15,1214.36 1740.74,1214.36 1741.32,1214.36 1741.91,1214.36 1742.5,1214.36 1743.08,1214.36 1743.67,1214.36 1744.26,1214.36 1744.84,1214.36 1745.43,1214.36 1746.02,1214.36 1746.6,1214.36 1747.19,1214.36 1747.78,1214.36 1748.36,1214.36 1748.95,1214.36 1749.53,1214.36 1750.12,1214.36 1750.71,1214.36 1751.29,1214.36 1751.88,1214.36 1752.47,1214.36 1753.05,1214.36 1753.64,1214.36 1754.23,1214.36 1754.81,1214.36 1755.4,1214.36 1755.99,1214.36 1756.57,1214.36 1757.16,1214.36 1757.74,1214.36 1758.33,1214.36 1758.92,1214.36 1759.5,1214.36 1760.09,1214.36 1760.68,1214.36 1761.26,1214.36 1761.85,1214.36 1762.44,1214.36 1763.02,1214.36 1763.61,1214.36 1764.19,1214.36 1764.78,1214.36 1765.37,1214.36 1765.95,1214.36 1766.54,1214.36 1767.13,1214.36 1767.71,1214.36 1768.3,1214.36 1768.89,1214.36 1769.47,1214.36 1770.06,1214.36 1770.65,1214.36 1771.23,1214.36 1771.82,1214.36 1772.4,1214.36 1772.99,1214.36 1773.58,1214.36 1774.16,1214.36 1774.75,1214.36 1775.34,1214.36 1775.92,1214.36 1776.51,1214.36 1777.1,1214.36 1777.68,1214.36 1778.27,1214.36 1778.86,1214.36 1779.44,1214.36 1780.03,1214.36 1780.61,1214.36 1781.2,1214.36 1781.79,1214.36 1782.37,1214.36 1782.96,1214.36 1783.55,1214.36 1784.13,1214.36 1784.72,1214.36 1785.31,1214.36 1785.89,1214.36 1786.48,1214.36 1787.06,1214.36 1787.65,1214.36 1788.24,1214.36 1788.82,1214.36 1789.41,1214.36 1790,1214.36 1790.58,1214.36 1791.17,1214.36 1791.76,1214.36 1792.34,1214.36 1792.93,1214.36 1793.52,1214.36 1794.1,1214.36 1794.69,1214.36 1795.27,1214.36 1795.86,1214.36 1796.45,1214.36 1797.03,1214.36 1797.62,1214.36 1798.21,1214.36 1798.79,1214.36 1799.38,1214.36 1799.97,1214.36 1800.55,1214.36 1801.14,1214.36 1801.73,1214.36 1802.31,1214.36 1802.9,1214.36 1803.48,1214.36 1804.07,1214.36 1804.66,1214.36 1805.24,1214.36 1805.83,1214.36 1806.42,1214.36 1807,1214.36 1807.59,1214.36 1808.18,1214.36 1808.76,1214.36 1809.35,1214.36 1809.94,1214.36 1810.52,1214.36 1811.11,1214.36 1811.69,1214.36 1812.28,1214.36 1812.87,1214.36 1813.45,1214.36 1814.04,1214.36 1814.63,1214.36 1815.21,1214.36 1815.8,1214.36 1816.39,1214.36 1816.97,1214.36 1817.56,1214.36 1818.14,1214.36 1818.73,1214.36 1819.32,1214.36 1819.9,1214.36 1820.49,1214.36 1821.08,1214.36 1821.66,1214.36 1822.25,1214.36 1822.84,1214.36 1823.42,1214.36 1824.01,1214.36 1824.6,1214.36 1825.18,1214.36 1825.77,1214.36 1826.35,1214.36 1826.94,1214.36 1827.53,1214.36 1828.11,1214.36 1828.7,1214.36 1829.29,1214.36 1829.87,1214.36 1830.46,1214.36 1831.05,1214.36 1831.63,1214.36 1832.22,1214.36 1832.81,1214.36 1833.39,1214.36 1833.98,1214.36 1834.56,1214.36 1835.15,1214.36 1835.74,1214.36 1836.32,1214.36 1836.91,1214.36 1837.5,1214.36 1838.08,1214.36 1838.67,1214.36 1839.26,1214.36 1839.84,1214.36 1840.43,1214.36 1841.01,1214.36 1841.6,1214.36 1842.19,1214.36 1842.77,1214.36 1843.36,1214.36 1843.95,1214.36 1844.53,1214.36 1845.12,1214.36 1845.71,1214.36 1846.29,1214.36 1846.88,1214.36 1847.47,1214.36 1848.05,1214.36 1848.64,1214.36 1849.22,1214.36 1849.81,1214.36 1850.4,1214.36 1850.98,1214.36 1851.57,1214.36 1852.16,1214.36 1852.74,1214.36 1853.33,1214.36 1853.92,1214.36 1854.5,1214.36 1855.09,1214.36 1855.68,1214.36 1856.26,1214.36 1856.85,1214.36 1857.43,1214.36 1858.02,1214.36 1858.61,1214.36 1859.19,1214.36 1859.78,1214.36 1860.37,1214.36 1860.95,1214.36 1861.54,1214.36 1862.13,1214.36 1862.71,1214.36 1863.3,1214.36 1863.88,1214.36 1864.47,1214.36 1865.06,1214.36 1865.64,1214.36 1866.23,1214.36 1866.82,1214.36 1867.4,1214.36 1867.99,1214.36 1868.58,1214.36 1869.16,1214.36 1869.75,1214.36 1870.34,1214.36 1870.92,1214.36 1871.51,1214.36 1872.09,1214.36 1872.68,1214.36 1873.27,1214.36 1873.85,1214.36 1874.44,1214.36 1875.03,1214.36 1875.61,1214.36 1876.2,1214.36 1876.79,1214.36 1877.37,1214.36 1877.96,1214.36 1878.55,1214.36 1879.13,1214.36 1879.72,1214.36 1880.3,1214.36 1880.89,1214.36 1881.48,1214.36 1882.06,1214.36 1882.65,1214.36 1883.24,1214.36 1883.82,1214.36 1884.41,1214.36 1885,1214.36 1885.58,1214.36 1886.17,1214.36 1886.76,1214.36 1887.34,1214.36 1887.93,1214.36 1888.51,1214.36 1889.1,1214.36 1889.69,1214.36 1890.27,1214.36 1890.86,1214.36 1891.45,1214.36 1892.03,1214.36 1892.62,1214.36 1893.21,1214.36 1893.79,1214.36 1894.38,1214.36 1894.96,1214.36 1895.55,1214.36 1896.14,1214.36 1896.72,1214.36 1897.31,1214.36 1897.9,1214.36 1898.48,1214.36 1899.07,1214.36 1899.66,1214.36 1900.24,1214.36 1900.83,1214.36 1901.42,1214.36 1902,1214.36 1902.59,1214.36 1903.17,1214.36 1903.76,1214.36 1904.35,1214.36 1904.93,1214.36 1905.52,1214.36 1906.11,1214.36 1906.69,1214.36 1907.28,1214.36 1907.87,1214.36 1908.45,1214.36 1909.04,1214.36 1909.63,1214.36 1910.21,1214.36 1910.8,1214.36 1911.38,1214.36 1911.97,1214.36 1912.56,1214.36 1913.14,1214.36 1913.73,1214.36 1914.32,1214.36 1914.9,1214.36 1915.49,1214.36 1916.08,1214.36 1916.66,1214.36 1917.25,1214.36 1917.83,1214.36 1918.42,1214.36 1919.01,1214.36 1919.59,1214.36 1920.18,1214.36 1920.77,1214.36 1921.35,1214.36 1921.94,1214.36 1922.53,1214.36 1923.11,1214.36 1923.7,1214.36 1924.29,1214.36 1924.87,1214.36 1925.46,1214.36 1926.04,1214.36 1926.63,1214.36 1927.22,1214.36 1927.8,1214.36 1928.39,1214.36 1928.98,1214.36 1929.56,1214.36 1930.15,1214.36 1930.74,1214.36 1931.32,1214.36 1931.91,1214.36 1932.5,1214.36 1933.08,1214.36 1933.67,1214.36 1934.25,1214.36 1934.84,1214.36 1935.43,1214.36 1936.01,1214.36 1936.6,1214.36 1937.19,1214.36 1937.77,1214.36 1938.36,1214.36 1938.95,1214.36 1939.53,1214.36 1940.12,1214.36 1940.71,1214.36 1941.29,1214.36 1941.88,1214.36 1942.46,1214.36 1943.05,1214.36 1943.64,1214.36 1944.22,1214.36 1944.81,1214.36 1945.4,1214.36 1945.98,1214.36 1946.57,1214.36 1947.16,1214.36 1947.74,1214.36 1948.33,1214.36 1948.91,1214.36 1949.5,1214.36 1950.09,1214.36 1950.67,1214.36 1951.26,1214.36 1951.85,1214.36 1952.43,1214.36 1953.02,1214.36 1953.61,1214.36 1954.19,1214.36 1954.78,1214.36 1955.37,1214.36 1955.95,1214.36 1956.54,1214.36 1957.12,1214.36 1957.71,1214.36 1958.3,1214.36 1958.88,1214.36 1959.47,1214.36 1960.06,1214.36 1960.64,1214.36 1961.23,1214.36 1961.82,1214.36 1962.4,1214.36 1962.99,1214.36 1963.58,1214.36 1964.16,1214.36 1964.75,1214.36 1965.33,1214.36 1965.92,1214.36 1966.51,1214.36 1967.09,1214.36 1967.68,1214.36 1968.27,1214.36 1968.85,1214.36 1969.44,1214.36 1970.03,1214.36 1970.61,1214.36 1971.2,1214.36 1971.78,1214.36 1972.37,1214.36 1972.96,1214.36 1973.54,1214.36 1974.13,1214.36 1974.72,1214.36 1975.3,1214.36 1975.89,1214.36 1976.48,1214.36 1977.06,1214.36 1977.65,1214.36 1978.24,1214.36 1978.82,1214.36 1979.41,1214.36 1979.99,1214.36 1980.58,1214.36 1981.17,1214.36 1981.75,1214.36 1982.34,1214.36 1982.93,1214.36 1983.51,1214.36 1984.1,1214.36 1984.69,1214.36 1985.27,1214.36 1985.86,1214.36 1986.45,1214.36 1987.03,1214.36 1987.62,1214.36 1988.2,1214.36 1988.79,1214.36 1989.38,1214.36 1989.96,1214.36 1990.55,1214.36 1991.14,1214.36 1991.72,1214.36 1992.31,1214.36 1992.9,1214.36 1993.48,1214.36 1994.07,1214.36 1994.65,1214.36 1995.24,1214.36 1995.83,1214.36 1996.41,1214.36 1997,1214.36 1997.59,1214.36 1998.17,1214.36 1998.76,1214.36 1999.35,1214.36 1999.93,1214.36 2000.52,1214.36 2001.11,1214.36 2001.69,1214.36 2002.28,1214.36 2002.86,1214.36 2003.45,1214.36 2004.04,1214.36 2004.62,1214.36 2005.21,1214.36 2005.8,1214.36 2006.38,1214.36 2006.97,1214.36 2007.56,1214.36 2008.14,1214.36 2008.73,1214.36 2009.32,1214.36 2009.9,1214.36 2010.49,1214.36 2011.07,1214.36 2011.66,1214.36 2012.25,1214.36 2012.83,1214.36 2013.42,1214.36 2014.01,1214.36 2014.59,1214.36 2015.18,1214.36 2015.77,1214.36 2016.35,1214.36 2016.94,1214.36 2017.53,1214.36 2018.11,1214.36 2018.7,1214.36 2019.28,1214.36 2019.87,1214.36 2020.46,1214.36 2021.04,1214.36 2021.63,1214.36 2022.22,1214.36 2022.8,1214.36 2023.39,1214.36 2023.98,1214.36 2024.56,1214.36 2025.15,1214.36 2025.73,1214.36 2026.32,1214.36 2026.91,1214.36 2027.49,1214.36 2028.08,1214.36 2028.67,1214.36 2029.25,1214.36 2029.84,1214.36 2030.43,1214.36 2031.01,1214.36 2031.6,1214.36 2032.19,1214.36 2032.77,1214.36 2033.36,1214.36 2033.94,1214.36 2034.53,1214.36 2035.12,1214.36 2035.7,1214.36 2036.29,1214.36 2036.88,1214.36 2037.46,1214.36 2038.05,1214.36 2038.64,1214.36 2039.22,1214.36 2039.81,1214.36 2040.4,1214.36 2040.98,1214.36 2041.57,1214.36 2042.15,1214.36 2042.74,1214.36 2043.33,1214.36 2043.91,1214.36 2044.5,1214.36 2045.09,1214.36 2045.67,1214.36 2046.26,1214.36 2046.85,1214.36 2047.43,1214.36 2048.02,1214.36 2048.6,1214.36 2049.19,1214.36 2049.78,1214.36 2050.36,1214.36 2050.95,1214.36 2051.54,1214.36 2052.12,1214.36 2052.71,1214.36 2053.3,1214.36 2053.88,1214.36 2054.47,1214.36 2055.06,1214.36 2055.64,1214.36 2056.23,1214.36 2056.81,1214.36 2057.4,1214.36 2057.99,1214.36 2058.57,1214.36 2059.16,1214.36 2059.75,1214.36 2060.33,1214.36 2060.92,1214.36 2061.51,1214.36 2062.09,1214.36 2062.68,1214.36 2063.27,1214.36 2063.85,1214.36 2064.44,1214.36 2065.02,1214.36 2065.61,1214.36 2066.2,1214.36 2066.78,1214.36 2067.37,1214.36 2067.96,1214.36 2068.54,1214.36 2069.13,1214.36 2069.72,1214.36 2070.3,1214.36 2070.89,1214.36 2071.48,1214.36 2072.06,1214.36 2072.65,1214.36 2073.23,1214.36 2073.82,1214.36 2074.41,1214.36 2074.99,1214.36 2075.58,1214.36 2076.17,1214.36 2076.75,1214.36 2077.34,1214.36 2077.93,1214.36 2078.51,1214.36 2079.1,1214.36 2079.68,1214.36 2080.27,1214.36 2080.86,1214.36 2081.44,1214.36 2082.03,1214.36 2082.62,1214.36 2083.2,1214.36 2083.79,1214.36 2084.38,1214.36 2084.96,1214.36 2085.55,1214.36 2086.14,1214.36 2086.72,1214.36 2087.31,1214.36 2087.89,1214.36 2088.48,1214.36 2089.07,1214.36 2089.65,1214.36 2090.24,1214.36 2090.83,1214.36 2091.41,1214.36 2092,1214.36 2092.59,1214.36 2093.17,1214.36 2093.76,1214.36 2094.35,1214.36 2094.93,1214.36 2095.52,1214.36 2096.1,1214.36 2096.69,1214.36 2097.28,1214.36 2097.86,1214.36 2098.45,1214.36 2099.04,1214.36 2099.62,1214.36 2100.21,1214.36 2100.8,1214.36 2101.38,1214.36 2101.97,1214.36 2102.55,1214.36 2103.14,1214.36 2103.73,1214.36 2104.31,1214.36 2104.9,1214.36 2105.49,1214.36 2106.07,1214.36 2106.66,1214.36 2107.25,1214.36 2107.83,1214.36 2108.42,1214.36 2109.01,1214.36 2109.59,1214.36 2110.18,1214.36 2110.76,1214.36 2111.35,1214.36 2111.94,1214.36 2112.52,1214.36 2113.11,1214.36 2113.7,1214.36 2114.28,1214.36 2114.87,1214.36 2115.46,1214.36 2116.04,1214.36 2116.63,1214.36 2117.22,1214.36 2117.8,1214.36 2118.39,1214.36 2118.97,1214.36 2119.56,1214.36 2120.15,1214.36 2120.73,1214.36 2121.32,1214.36 2121.91,1214.36 2122.49,1214.36 2123.08,1214.36 2123.67,1214.36 2124.25,1214.36 2124.84,1214.36 2125.42,1214.36 2126.01,1214.36 2126.6,1214.36 2127.18,1214.36 2127.77,1214.36 2128.36,1214.36 2128.94,1214.36 2129.53,1214.36 2130.12,1214.36 2130.7,1214.36 2131.29,1214.36 2131.88,1214.36 2132.46,1214.36 2133.05,1214.36 2133.63,1214.36 2134.22,1214.36 2134.81,1214.36 2135.39,1214.36 2135.98,1214.36 2136.57,1214.36 2137.15,1214.36 2137.74,1214.36 2138.33,1214.36 2138.91,1214.36 2139.5,1214.36 2140.09,1214.36 2140.67,1214.36 2141.26,1214.36 2141.84,1214.36 2142.43,1214.36 2143.02,1214.36 2143.6,1214.36 2144.19,1214.36 2144.78,1214.36 2145.36,1214.36 2145.95,1214.36 2146.54,1214.36 2147.12,1214.36 2147.71,1214.36 2148.3,1214.36 2148.88,1214.36 2149.47,1214.36 2150.05,1214.36 2150.64,1214.36 2151.23,1214.36 2151.81,1214.36 2152.4,1214.36 2152.99,1214.36 2153.57,1214.36 2154.16,1214.36 2154.75,1214.36 2155.33,1214.36 2155.92,1214.36 2156.5,1214.36 2157.09,1214.36 2157.68,1214.36 2158.26,1214.36 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.55,1195.33 1398.9,899.083 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.86 985.439,1195.33 2158.26,1195.33 2158.26,1232.86 985.439,1232.86 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip680)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip680)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip683\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip683)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3872.82 163.232,-5000.67 163.792,-6012.83 164.351,-6956.27 164.91,-7815.9 165.469,-8531.32 166.029,-9201.98 166.588,-9828.05 167.147,-8373.4 167.706,-8954.16 168.266,-8636.52 168.825,-9147.13 169.384,-9587.97 169.943,-9310.24 170.503,-9703.19 171.062,-10048.6 171.621,-10346 172.18,-10608 172.74,-10845.4 173.299,-10558.2 173.858,-10733 174.417,-10895.2 174.977,-10633.6 175.536,-10391.3 176.095,-10149 176.655,-10265 177.214,-9740.53 177.773,-9259.69 178.332,-9074.44 178.892,-9150.87 179.451,-8969.46 180.01,-9012.3 180.569,-9046.06 181.129,-8681.27 181.688,-8692.29 182.247,-8511.65 182.806,-8027.07 183.366,-8033.49 183.925,-7872.68 184.484,-7863.22 185.043,-7579.83 185.603,-7554.52 186.162,-7511.62 186.721,-7339.4 187.28,-7280.79 187.84,-7118.38 188.399,-6954.83 188.958,-6888.42 189.517,-6812.86 190.077,-6722.35 190.636,-6553.74 191.195,-6219.97 191.754,-6073.52 192.314,-6001.82 192.873,-5850.48 193.432,-5773.15 193.991,-5555.51 194.551,-5410.68 195.11,-5335.52 195.669,-5192.29 196.228,-4989.17 196.788,-4903.66 197.347,-4714.28 197.906,-4641.03 198.465,-4509.87 199.025,-4426.99 199.584,-4198.66 200.143,-4020.77 200.702,-3851.91 201.262,-3780.13 201.821,-3669.82 202.38,-3508.68 202.939,-3319.32 203.499,-3168.27 204.058,-3102.33 204.617,-2955.87 205.176,-2816.38 205.736,-2748.46 206.295,-2577.18 206.854,-2378.32 207.413,-2255.6 207.973,-2196.35 208.532,-2108.78 209.091,-1993.77 209.65,-1938.08 210.21,-1739.77 210.769,-1688.85 211.328,-1585.44 211.887,-1511.13 212.447,-1438.79 213.006,-1396.3 213.565,-1326.13 214.124,-1226.74 214.684,-1134.67 215.243,-1065.38 215.802,-1025.94 216.361,-1009.56 216.921,-896.666 217.48,-808.441 218.039,-750.37 218.598,-695.227 219.158,-688.002 219.717,-557.991 220.276,-455.771 220.835,-311.947 221.395,-242.955 221.954,-221.001 222.513,-179.011 223.072,-140.126 223.632,-70.2151 224.191,-53.0278 224.75,-31.1777 225.309,-13.2239 225.869,27.3693 226.428,84.1313 226.987,141.226 227.546,214.537 228.106,222.261 228.665,276.63 229.224,284.758 229.783,311.987 230.343,318.799 230.902,408.055 231.461,392.249 232.02,438.824 232.58,480.087 233.139,498.445 233.698,479.083 234.257,502.309 234.817,507.775 235.376,551.779 235.935,575.394 236.494,612.982 237.054,628.884 237.613,649.264 238.172,668.487 238.731,666.729 239.291,648.327 239.85,687.786 240.409,691.374 240.968,693.326 241.528,695.087 242.087,676.876 242.646,661.557 243.205,668.141 243.765,688.812 244.324,713.794 244.883,717.367 245.442,736.26 246.002,771.247 246.561,786.702 247.12,823.042 247.679,856.474 248.239,868.3 248.798,882.332 249.357,895.051 249.916,908.74 250.476,938.736 251.035,979.323 251.594,987.676 252.153,1013.5 252.713,1014.26 253.272,1019.71 253.831,995.032 254.39,987.356 254.95,963.217 255.509,992.228 256.068,986.258 256.627,980.534 257.187,955.177 257.746,966.766 258.305,960.779 258.864,935.795 259.424,930.509 259.983,944.121 260.542,953.853 261.101,980.158 261.661,954.75 262.22,965.887 262.779,943.405 263.338,945.584 263.898,1025.04 264.457,1051.54 265.016,1009.33 265.575,1002.51 266.135,999.416 266.694,1027.72 267.253,1023.07 267.812,1037.26 268.372,1061.51 268.931,1104.78 269.49,1090.39 270.049,1091.97 270.609,1068.03 271.168,1057.96 271.727,1064.68 272.286,1037.32 272.846,1032.22 273.405,1017.56 273.964,1028.7 274.523,1005.47 275.083,982.498 275.642,997.216 276.201,1010.93 276.76,1021.25 277.32,1036.27 277.879,1047.45 278.438,1058.01 278.997,1050.98 279.557,1047.99 280.116,1040.23 280.675,1015.71 281.234,1011.94 281.794,990.33 282.353,983.644 282.912,992.834 283.471,974.503 284.031,972.352 284.59,936.085 285.149,953.095 285.708,931.346 286.268,948.045 286.827,962.583 287.386,1025.68 287.945,987.051 288.505,982.453 289.064,981.239 289.623,1008.98 290.182,1051.6 290.742,1079.21 291.301,1072.49 291.86,1080.55 292.419,1087.12 292.979,1092.21 293.538,1082.65 294.097,1072.79 294.656,1080.11 295.216,1086.88 295.775,1074.35 296.334,1080.55 296.893,1071.7 297.453,1062.9 298.012,1035.69 298.571,1010.49 299.13,1037.09 299.69,1029.97 300.249,1073.31 300.808,1079.76 301.368,1070.19 301.927,1077.19 302.486,1035.47 303.045,1055.76 303.605,1078.01 304.164,1040.67 304.723,984.439 305.282,997.107 305.842,1026.82 306.401,1017.58 306.96,995.641 307.519,976.327 308.079,972.675 308.638,983.672 309.197,980.767 309.756,1006.6 310.316,999.534 310.875,975.23 311.434,1019.75 311.993,1029.05 312.553,1056.32 313.112,1063.16 313.671,1040.24 314.23,1015.16 314.79,988.551 315.349,963.595 315.908,975.354 316.467,972.184 317.027,999.53 317.586,1009.79 318.145,968.478 318.704,979.16 319.264,973.159 319.823,981.543 320.382,959.531 320.941,974.541 321.501,1001.66 322.06,962.867 322.619,975.923 323.178,972.79 323.738,967.809 324.297,960.137 324.856,970.858 325.415,963.878 325.975,959.169 326.534,969.906 327.093,947.213 327.652,941.257 328.212,920.217 328.771,932.45 329.33,941.528 329.889,921.12 330.449,950.615 331.008,946.674 331.567,945.496 332.126,908.222 332.686,905.336 333.245,934.679 333.804,931.4 334.363,958.371 334.923,969.498 335.482,959.593 336.041,952.374 336.6,944.206 337.16,956.026 337.719,949.247 338.278,944.942 338.837,987.166 339.397,928.361 339.956,905.519 340.515,888.83 341.074,883.429 341.634,882.587 342.193,863.644 342.752,895.435 343.311,909.109 343.871,874.484 344.43,889.955 344.989,886.08 345.548,866.181 346.108,878.514 346.667,895.034 347.226,907.707 347.785,918.152 348.345,913.452 348.904,891.607 349.463,920.431 350.022,914.039 350.582,894.126 351.141,842.412 351.7,826.058 352.259,843.643 352.819,842.904 353.378,815.241 353.937,818.436 354.496,833.86 355.056,833.464 355.615,866.095 356.174,862.274 356.733,825.838 357.293,840.684 357.852,838.982 358.411,837.245 358.97,836.824 359.53,898.371 360.089,881.788 360.648,908.247 361.207,917.698 361.767,908.407 362.326,917.871 362.885,898.385 363.444,912.652 364.004,941.598 364.563,919.45 365.122,911.995 365.681,906.428 366.241,902.043 366.8,927.785 367.359,923.815 367.918,915.978 368.478,910.315 369.037,904.905 369.596,867.183 370.155,882.509 370.715,894.687 371.274,891.548 371.833,868.37 372.392,848.801 372.952,846.155 373.511,863.381 374.07,844.092 374.629,861.213 375.189,856.731 375.748,851.859 376.307,863.96 376.866,892.193 377.426,891.382 377.985,833.669 378.544,844.95 379.103,840.22 379.663,854.773 380.222,823.171 380.781,822.032 381.34,818.306 381.9,817.032 382.459,832.293 383.018,829.099 383.577,841.815 384.137,856.717 384.696,835.769 385.255,848.776 385.814,864.709 386.374,842.423 386.933,856.01 387.492,833.172 388.051,817.631 388.611,801.813 389.17,815.876 389.729,848.937 390.288,876.205 390.848,840.331 391.407,772.497 391.966,788.209 392.525,821.57 393.085,803.352 393.644,766.835 394.203,782.224 394.762,768.718 395.322,768.783 395.881,769.721 396.44,819.214 396.999,833.728 397.559,829.245 398.118,857.027 398.677,855.085 399.236,869.154 399.796,863.716 400.355,878.272 400.914,890.639 401.473,884.481 402.033,846.498 402.592,873.64 403.151,837.604 403.71,851.682 404.27,831.464 404.829,859.64 405.388,870.339 405.947,829.392 406.507,842.124 407.066,824.471 407.625,786.131 408.184,750.972 408.744,750.775 409.303,752.8 409.862,735.697 410.421,751.801 410.981,787.029 411.54,787.095 412.099,767.608 412.658,768.611 413.218,783.096 413.777,784.59 414.336,786.475 414.895,772.417 415.455,789.209 416.014,771.742 416.573,754.054 417.132,740.317 417.692,723.012 418.251,724.047 418.81,694.238 419.369,715.458 419.929,715.989 420.488,705.831 421.047,714.473 421.606,720.849 422.166,706.882 422.725,694.431 423.284,715.369 423.843,700.948 424.403,702.973 424.962,687.693 425.521,677.347 426.08,654.01 426.64,692.502 427.199,709.647 427.758,710.946 428.318,712.921 428.877,731.015 429.436,730.098 429.995,685.707 430.555,689.941 431.114,690.966 431.673,662.8 432.232,686.63 432.792,688.696 433.351,692.886 433.91,744.234 434.469,776.624 435.029,793.548 435.588,776.035 436.147,771.316 436.706,773.555 437.266,770.381 437.825,753.471 438.384,786.482 438.943,734.705 439.503,753.915 440.062,771.986 440.621,804.027 441.18,769.297 441.74,734.632 442.299,736.31 442.858,719.508 443.417,721.859 443.977,723.417 444.536,698.902 445.095,734.42 445.654,721.861 446.214,693.407 446.773,697.853 447.332,748.059 447.891,765.546 448.451,749.399 449.01,781.414 449.569,811.224 450.128,808.394 450.688,821.931 451.247,832.603 451.806,830.861 452.365,825.878 452.925,836.052 453.484,835.771 454.043,830.796 454.602,874.358 455.162,854.153 455.721,850.572 456.28,845.973 456.839,856.427 457.399,804.333 457.958,819.197 458.517,832.6 459.076,841.951 459.636,822.274 460.195,819.797 460.754,832.823 461.313,874.729 461.873,869.122 462.432,809.037 462.991,809.231 463.55,837.653 464.11,814.424 464.669,811.112 465.228,790.148 465.787,835.902 466.347,846.477 466.906,841.141 467.465,838.413 468.024,833.896 468.584,840.474 469.143,803.988 469.702,802.067 470.261,798.659 470.821,764.761 471.38,731.541 471.939,734.768 472.498,701.781 473.058,703.251 473.617,707.921 474.176,726.572 474.735,727.974 475.295,726.447 475.854,759.974 476.413,787.636 476.972,785.409 477.532,797.973 478.091,811.363 478.65,822.835 479.209,818.466 479.769,799.066 480.328,809.994 480.887,791.322 481.446,789.94 482.006,802.603 482.565,799.417 483.124,799.915 483.683,796.52 484.243,778.423 484.802,796.418 485.361,810.174 485.92,790.141 486.48,787.806 487.039,783.662 487.598,782.281 488.157,811.805 488.717,825.43 489.276,804.784 489.835,833.926 490.394,830.872 490.954,840.246 491.513,832.43 492.072,829.196 492.631,842.377 493.191,815.048 493.75,824.021 494.309,816.329 494.868,795.681 495.428,810.778 495.987,805.294 496.546,770.995 497.105,765.807 497.665,744.756 498.224,759.428 498.783,723.032 499.342,755.721 499.902,754.703 500.461,752.986 501.02,746.353 501.579,760.773 502.139,774.226 502.698,757.734 503.257,753.567 503.816,767.332 504.376,746.004 504.935,760.226 505.494,790.255 506.053,753.385 506.613,748.72 507.172,762.389 507.731,761.829 508.29,764.068 508.85,729.088 509.409,743.573 509.968,807.743 510.527,805.04 511.087,784.038 511.646,765.136 512.205,715.925 512.764,681.547 513.324,634.663 513.883,624.119 514.442,629.112 515.001,651.518 515.561,673.178 516.12,692.124 516.679,661.67 517.238,679.905 517.798,668.51 518.357,689.444 518.916,708.062 519.475,726.973 520.035,726.009 520.594,724.191 521.153,711.928 521.712,712.384 522.272,712.376 522.831,747.875 523.39,743.292 523.949,725.968 524.509,758.917 525.068,755.708 525.627,689.859 526.186,708.322 526.746,722.567 527.305,754.507 527.864,787.879 528.423,766.202 528.983,764.119 529.542,745.951 530.101,727.997 530.66,743.722 531.22,725.314 531.779,739.677 532.338,755.731 532.897,771.974 533.457,803.418 534.016,783.825 534.575,796.016 535.134,806.411 535.694,802.279 536.253,830.562 536.812,842.415 537.371,837.777 537.931,828.585 538.49,821.911 539.049,800.873 539.608,795.314 540.168,824.332 540.727,819.074 541.286,796.651 541.845,759.087 542.405,754.022 542.964,750.485 543.523,731.257 544.082,711.211 544.642,745.293 545.201,712.053 545.76,763.867 546.319,792.849 546.879,787.662 547.438,801.62 547.997,783.994 548.556,763.786 549.116,792.348 549.675,806.384 550.234,782.67 550.793,778.749 551.353,793.544 551.912,774.712 552.471,774.107 553.031,774.507 553.59,771.982 554.149,769.945 554.708,777.376 555.268,794.44 555.827,777.126 556.386,772.268 556.945,768.652 557.505,732.279 558.064,747.082 558.623,713.539 559.182,711.709 559.742,710.869 560.301,711.069 560.86,692.629 561.419,679.462 561.979,645.735 562.538,666.13 563.097,682.075 563.656,718.212 564.216,738.652 564.775,738.281 565.334,772.139 565.893,785.461 566.453,797.174 567.012,791.473 567.571,838.263 568.13,800.704 568.69,832.88 569.249,841.949 569.808,806.181 570.367,819.531 570.927,814.361 571.486,790.128 572.045,753.216 572.604,736.366 573.164,749.283 573.723,780.027 574.282,763.205 574.841,777.539 575.401,769.64 575.96,762.841 576.519,711.721 577.078,696.812 577.638,680.709 578.197,681.471 578.756,682.682 579.315,652.399 579.875,639.601 580.434,642.999 580.993,649.572 581.552,651.76 582.112,621.442 582.671,628.76 583.23,617.068 583.789,638.878 584.349,641.797 584.908,677.837 585.467,649.24 586.026,636.321 586.586,652.953 587.145,654.946 587.704,655.235 588.263,658.259 588.823,661.025 589.382,663.86 589.941,681.598 590.5,665.45 591.06,687.354 591.619,702.501 592.178,702.019 592.737,702.02 593.297,688.196 593.856,639.76 594.415,641.245 594.974,611.096 595.534,614.506 596.093,636.991 596.652,653.256 597.211,674.213 597.771,658.725 598.33,647.126 598.889,622.998 599.448,596.072 600.008,586.69 600.567,594.034 601.126,601.76 601.685,607.755 602.245,610.914 602.804,635.274 603.363,675.486 603.922,694.405 604.482,681.877 605.041,681.727 605.6,697.027 606.159,693.308 606.719,681.629 607.278,702.425 607.837,706.192 608.396,721.398 608.956,735.539 609.515,751.764 610.074,748.96 610.633,763.136 611.193,744.456 611.752,709.052 612.311,739.917 612.87,737.493 613.43,719.121 613.989,734.8 614.548,751.883 615.107,765.216 615.667,783.146 616.226,746.012 616.785,790.083 617.344,770.229 617.904,783.941 618.463,795.299 619.022,789.621 619.581,783.213 620.141,794.477 620.7,774.232 621.259,754.487 621.818,720.414 622.378,715.62 622.937,700.589 623.496,697.52 624.055,714.159 624.615,715.361 625.174,747.554 625.733,730.366 626.292,745.762 626.852,758.697 627.411,759.972 627.97,755.089 628.529,768.577 629.089,749.224 629.648,764.466 630.207,743.127 630.766,755.897 631.326,754.655 631.885,732.337 632.444,731.237 633.003,731.193 633.563,745.43 634.122,727.925 634.681,741.719 635.24,742.41 635.8,721.6 636.359,750.719 636.918,766.166 637.477,710.308 638.037,722.4 638.596,707.806 639.155,674.477 639.714,706.836 640.274,690.995 640.833,656.931 641.392,678.098 641.951,676.133 642.511,690.197 643.07,689.482 643.629,691.958 644.188,664.067 644.748,668.276 645.307,669.208 645.866,702.32 646.425,684.26 646.985,717.295 647.544,702.364 648.103,683.903 648.662,654.761 649.222,639.018 649.781,656.878 650.34,660.402 650.899,648.357 651.459,648.931 652.018,649.164 652.577,654.546 653.136,639.278 653.696,624.061 654.255,642.905 654.814,629.519 655.373,633.847 655.933,706.881 656.492,673.282 657.051,693.644 657.61,710.583 658.17,726.644 658.729,726.828 659.288,772.267 659.847,797.055 660.407,772.028 660.966,787.993 661.525,783.721 662.084,762.758 662.644,710.939 663.203,693.24 663.762,682.559 664.321,686.905 664.881,672.303 665.44,672.703 665.999,640.319 666.558,642.241 667.118,645.844 667.677,601.684 668.236,590.884 668.795,596.785 669.355,634.365 669.914,672.393 670.473,657.985 671.032,643.869 671.592,680.175 672.151,680.9 672.71,698.723 673.269,698.022 673.829,713.652 674.388,699.04 674.947,700.799 675.506,703.228 676.066,736.619 676.625,737.39 677.184,670.557 677.743,721.167 678.303,737.45 678.862,751.107 679.421,746.286 679.981,728.385 680.54,709.766 681.099,694.08 681.658,678.402 682.218,698.647 682.777,652.204 683.336,589.437 683.895,561.05 684.455,534.984 685.014,560.553 685.573,571.042 686.132,579.6 686.692,552.015 687.251,560.241 687.81,582.87 688.369,622.233 688.929,629.491 689.488,652.788 690.047,671.033 690.606,669.55 691.166,652.391 691.725,639.989 692.284,625.452 692.843,630.041 693.403,650.403 693.962,683.82 694.521,701.915 695.08,720.666 695.64,735.298 696.199,762.172 696.758,758.235 697.317,736.375 697.877,719.848 698.436,719.332 698.995,705.711 699.554,692.287 700.114,673.597 700.673,691.33 701.232,706.481 701.791,707.371 702.351,679.254 702.91,710.355 703.469,723.707 704.028,707.695 704.588,675.628 705.147,674.127 705.706,659.874 706.265,678.877 706.825,665.21 707.384,695.519 707.943,697.908 708.502,697.99 709.062,679.252 709.621,681.898 710.18,682.275 710.739,685.207 711.299,698.996 711.858,694.188 712.417,691.988 712.976,674.444 713.536,661.071 714.095,646.886 714.654,634.748 715.213,653.479 715.773,640.591 716.332,628.387 716.891,699.727 717.45,719.084 718.01,716.886 718.569,700.672 719.128,685.481 719.687,700.951 720.247,705.254 720.806,702.758 721.365,733.284 721.924,730.983 722.484,745.445 723.043,755.901 723.602,750.012 724.161,711.65 724.721,708.985 725.28,675.309 725.839,677.109 726.398,658.949 726.958,659.77 727.517,676.48 728.076,677.313 728.635,661.502 729.195,710.249 729.754,728.387 730.313,744.017 730.872,743.022 731.432,787.291 731.991,780.591 732.55,762.685 733.109,776.168 733.669,740.867 734.228,767.992 734.787,736.22 735.346,702.385 735.906,700.523 736.465,748.62 737.024,745.012 737.583,727.109 738.143,729.508 738.702,729.213 739.261,730.489 739.82,756.25 740.38,753.636 740.939,747.268 741.498,763.529 742.057,774.686 742.617,788.541 743.176,782.29 743.735,759.54 744.294,739.831 744.854,689.663 745.413,708.526 745.972,711.175 746.531,744.245 747.091,708.38 747.65,692.554 748.209,678.106 748.768,692.515 749.328,675.692 749.887,647.181 750.446,682.788 751.005,682.68 751.565,702.57 752.124,732.213 752.683,762.593 753.242,757.341 753.802,735.235 754.361,715.993 754.92,713.09 755.479,713.295 756.039,692.613 756.598,690.915 757.157,703.719 757.716,683.005 758.276,665.753 758.835,650.39 759.394,635.554 759.953,653.492 760.513,658.198 761.072,639.316 761.631,643.24 762.19,646.892 762.75,667.075 763.309,651.797 763.868,667.449 764.427,667.696 764.987,666.578 765.546,665.389 766.105,684.579 766.664,687.019 767.224,672.106 767.783,674.09 768.342,660.426 768.901,665.732 769.461,683.445 770.02,685.649 770.579,699.92 771.138,700.141 771.698,648.923 772.257,681.711 772.816,682.91 773.375,683.542 773.935,701.493 774.494,715.372 775.053,748.035 775.612,776.636 776.172,803.539 776.731,796.274 777.29,822.344 777.849,810.561 778.409,818.225 778.968,808.477 779.527,803.802 780.086,811.305 780.646,820.812 781.205,766.236 781.764,793.733 782.323,802.667 782.883,810.632 783.442,804.988 784.001,783.795 784.56,794.237 785.12,754.636 785.679,734.336 786.238,699.508 786.797,665.469 787.357,664.16 787.916,664.592 788.475,679.466 789.034,648.5 789.594,655.648 790.153,637.052 790.712,639.463 791.271,670.314 791.831,656.976 792.39,655.98 792.949,706.44 793.508,705.766 794.068,690.044 794.627,707.088 795.186,706.171 795.745,725.105 796.305,722.799 796.864,751.524 797.423,751.175 797.982,733.728 798.542,715.109 799.101,727.947 799.66,725.582 800.219,724.986 800.779,677.54 801.338,664.486 801.897,680.393 802.456,664.108 803.016,664.884 803.575,648.562 804.134,681.275 804.693,712.859 805.253,712.478 805.812,709.797 806.371,725.82 806.931,724.059 807.49,691.472 808.049,675.897 808.608,659.268 809.168,630.694 809.727,617.748 810.286,589.913 810.845,594.861 811.405,581.995 811.964,587.484 812.523,590.737 813.082,549.077 813.642,571.942 814.201,614.2 814.76,617.223 815.319,635.058 815.879,637.922 816.438,643.195 816.997,628.227 817.556,616.797 818.116,641.288 818.675,642.307 819.234,630.537 819.793,584.052 820.353,587.355 820.912,594.894 821.471,598.446 822.03,558.135 822.59,567.081 823.149,574.554 823.708,590.829 824.267,613.948 824.827,622.699 825.386,657.714 825.945,641.624 826.504,675.469 827.064,661.43 827.623,651.764 828.182,655.342 828.741,686.596 829.301,703.961 829.86,735.617 830.419,750.234 830.978,703.1 831.538,715.561 832.097,716.454 832.656,700.283 833.215,732.458 833.775,713.636 834.334,693.278 834.893,695.124 835.452,709.091 836.012,723.476 836.571,742.027 837.13,708.969 837.689,728.305 838.249,726.758 838.808,740.062 839.367,754.053 839.926,751.73 840.486,760.974 841.045,743.286 841.604,741.486 842.163,754.731 842.723,752.823 843.282,733.484 843.841,728.593 844.4,758.598 844.96,752.502 845.519,746.914 846.078,745.162 846.637,776.853 847.197,786.679 847.756,766.027 848.315,811.487 848.874,821.44 849.434,845.777 849.993,836.668 850.552,808.915 851.111,785.163 851.671,762.731 852.23,761.21 852.789,757.934 853.348,788.436 853.908,767.976 854.467,765.887 855.026,733.12 855.585,713.735 856.145,697.635 856.704,679.894 857.263,681.921 857.822,715.822 858.382,746.519 858.941,747.504 859.5,741.684 860.059,734.348 860.619,732.21 861.178,698.502 861.737,653.843 862.296,639.07 862.856,657.129 863.415,672.716 863.974,705.857 864.533,656.838 865.093,678.005 865.652,660.05 866.211,643.494 866.77,711.311 867.33,711.91 867.889,697.098 868.448,696.354 869.007,664.168 869.567,650.007 870.126,632.051 870.685,685.504 871.244,653.565 871.804,641.028 872.363,646.436 872.922,649.127 873.481,619.683 874.041,623.493 874.6,642.111 875.159,608.516 875.718,589.812 876.278,561.954 876.837,599.822 877.396,607.498 877.955,583.071 878.515,574.93 879.074,597.13 879.633,617.805 880.192,640.25 880.752,661.245 881.311,663.552 881.87,667.42 882.429,668.016 882.989,685.629 883.548,670.933 884.107,701.282 884.666,716.323 885.226,711.695 885.785,679.993 886.344,664.22 886.903,666.431 887.463,667.111 888.022,680.797 888.581,616.41 889.14,604.122 889.7,623.984 890.259,646.68 890.818,644.926 891.377,681.412 891.937,664.397 892.496,663.623 893.055,664.603 893.614,697.545 894.174,742.983 894.733,723.437 895.292,718.21 895.851,735.261 896.411,732.219 896.97,775.836 897.529,769.371 898.088,830.336 898.648,836.766 899.207,791.492 899.766,736.122 900.325,700.796 900.885,682.501 901.444,682.408 902.003,681.234 902.562,697.644 903.122,693.4 903.681,710.411 904.24,706.6 904.799,701.832 905.359,683.77 905.918,718.365 906.477,714.739 907.036,664.839 907.596,652.293 908.155,652.615 908.714,672.757 909.273,660.44 909.833,659.512 910.392,661.55 910.951,679.585 911.51,663.347 912.07,632.616 912.629,620.322 913.188,591.694 913.747,610.884 914.307,599.674 914.866,616.989 915.425,618.646 915.984,642.339 916.544,663.142 917.103,710.354 917.662,694.225 918.221,692.679 918.781,723.221 919.34,752.925 919.899,751.009 920.458,765.188 921.018,762.88 921.577,759.562 922.136,738.557 922.695,704.136 923.255,716.115 923.814,712.382 924.373,709.238 924.932,675.234 925.492,677.835 926.051,646.208 926.61,682.017 927.169,698.125 927.729,732.228 928.288,699.186 928.847,652.571 929.406,636.37 929.966,607.532 930.525,595.842 931.084,613.868 931.644,619.467 932.203,620.046 932.762,621.337 933.321,622.76 933.881,626.875 934.44,631.183 934.999,634.859 935.558,605.261 936.118,610.489 936.677,601.541 937.236,605.409 937.795,592.861 938.355,600.953 938.914,636.281 939.473,651.899 940.032,671.866 940.592,627.586 941.151,645.405 941.71,633.496 942.269,638.072 942.829,654.946 943.388,675.499 943.947,677.83 944.506,711.455 945.066,708.238 945.625,707.705 946.184,675.355 946.743,674.139 947.303,676.95 947.862,664.837 948.421,651.621 948.98,669.577 949.54,669.15 950.099,652.092 950.658,658.23 951.217,662.251 951.777,665.723 952.336,635.608 952.895,623.668 953.454,629.754 954.014,664.848 954.573,664.361 955.132,667.842 955.691,667.708 956.251,670.079 956.81,704.277 957.369,719.345 957.928,747.384 958.488,730.694 959.047,727.916 959.606,727.924 960.165,729.174 960.725,728.967 961.284,711.095 961.843,729.739 962.402,744.221 962.962,724.366 963.521,753.334 964.08,735.97 964.639,750.251 965.199,760.932 965.758,743.779 966.317,803.796 966.876,814.27 967.436,872.877 967.995,861.427 968.554,883.386 969.113,839.965 969.673,835.307 970.232,765.064 970.791,761.345 971.35,792.762 971.91,803.145 972.469,783.004 973.028,779.092 973.587,764.279 974.147,757.85 974.706,740.19 975.265,740.853 975.824,751.903 976.384,747.074 976.943,758.772 977.502,705.278 978.061,655.873 978.621,641.736 979.18,627.741 979.739,644.507 980.298,581.753 980.858,585.597 981.417,577.03 981.976,566.864 982.535,587.076 983.095,594.083 983.654,549.946 984.213,542.363 984.772,552.72 985.332,571.349 985.891,595.317 986.45,634.058 987.009,620.618 987.569,657.443 988.128,659.026 988.687,641.968 989.246,663.46 989.806,662.415 990.365,711.239 990.924,709.582 991.483,723.16 992.043,690.219 992.602,672.003 993.161,687.337 993.72,700.677 994.28,714.527 994.839,696.894 995.398,662.222 995.957,646.61 996.517,648.131 997.076,628.962 997.635,564.071 998.194,586.115 998.754,594.433 999.313,612.501 999.872,637.814 1000.43,641.642 1000.99,643.11 1001.55,628.977 1002.11,665.531 1002.67,647.202 1003.23,685.022 1003.79,702.152 1004.35,716.821 1004.91,734.45 1005.46,733.056 1006.02,744.963 1006.58,754.829 1007.14,768.17 1007.7,746.059 1008.26,726.314 1008.82,708.449 1009.38,725.291 1009.94,723.771 1010.5,705.48 1011.06,704.088 1011.62,685.08 1012.18,689.592 1012.73,659.132 1013.29,645.182 1013.85,661.382 1014.41,644.374 1014.97,664 1015.53,665.55 1016.09,683.294 1016.65,698.325 1017.21,680.958 1017.77,695.148 1018.33,712.16 1018.89,691.92 1019.45,675.798 1020.01,675.105 1020.56,675.377 1021.12,626.096 1021.68,642.775 1022.24,678.992 1022.8,679.628 1023.36,679.636 1023.92,679.546 1024.48,694.373 1025.04,694.859 1025.6,710.097 1026.16,707.659 1026.72,692.358 1027.28,692.87 1027.83,674.522 1028.39,641.363 1028.95,640.295 1029.51,674.208 1030.07,626.547 1030.63,644.448 1031.19,664.428 1031.75,648.516 1032.31,668.269 1032.87,666.405 1033.43,664.455 1033.99,649.008 1034.55,683.968 1035.1,686.507 1035.66,701.509 1036.22,703.404 1036.78,684.122 1037.34,670.334 1037.9,704.722 1038.46,703.979 1039.02,705.65 1039.58,707.015 1040.14,705.487 1040.7,722.581 1041.26,706.709 1041.82,686.798 1042.38,686.185 1042.93,674.708 1043.49,672.811 1044.05,688.115 1044.61,703.544 1045.17,704.262 1045.73,687.548 1046.29,685.776 1046.85,669.859 1047.41,654.194 1047.97,704.274 1048.53,698.604 1049.09,712.179 1049.65,710.567 1050.2,688.336 1050.76,701.895 1051.32,697.036 1051.88,677.773 1052.44,697.026 1053,694.485 1053.56,680.268 1054.12,677.453 1054.68,664.334 1055.24,664.921 1055.8,665.173 1056.36,648.663 1056.92,667.653 1057.48,668.975 1058.03,668.546 1058.59,687.236 1059.15,655.752 1059.71,656.587 1060.27,692.448 1060.83,694.337 1061.39,677.574 1061.95,741.883 1062.51,736.27 1063.07,737.434 1063.63,782.66 1064.19,732.728 1064.75,712.719 1065.3,708.525 1065.86,726.282 1066.42,712.54 1066.98,724.343 1067.54,706.927 1068.1,688.242 1068.66,689.612 1069.22,674.39 1069.78,625.951 1070.34,597.49 1070.9,601.021 1071.46,641.257 1072.02,660.568 1072.57,693.945 1073.13,690.603 1073.69,719.537 1074.25,719.717 1074.81,718.8 1075.37,702.559 1075.93,686.744 1076.49,688.384 1077.05,704.403 1077.61,670.977 1078.17,654.339 1078.73,658.479 1079.29,677.202 1079.85,676.336 1080.4,707.722 1080.96,707.996 1081.52,723.42 1082.08,687.804 1082.64,671.708 1083.2,671.68 1083.76,657.157 1084.32,657.653 1084.88,658.795 1085.44,665.77 1086,715.645 1086.56,698.132 1087.12,698.452 1087.67,697.61 1088.23,714.188 1088.79,695.321 1089.35,679.183 1089.91,695.567 1090.47,691.876 1091.03,689.417 1091.59,689.512 1092.15,691.43 1092.71,724.644 1093.27,674.404 1093.83,676.225 1094.39,676.516 1094.94,628.954 1095.5,632.002 1096.06,682.918 1096.62,664.65 1097.18,665.891 1097.74,669.274 1098.3,701.724 1098.86,683.15 1099.42,667.031 1099.98,634.906 1100.54,653.707 1101.1,705.576 1101.66,702.122 1102.22,733.635 1102.77,732.366 1103.33,775.926 1103.89,773.003 1104.45,803.287 1105.01,814.276 1105.57,792.757 1106.13,753.037 1106.69,732.333 1107.25,718.385 1107.81,731.829 1108.37,713.178 1108.93,714.831 1109.49,681.997 1110.04,680.991 1110.6,629.171 1111.16,631.005 1111.72,667.266 1112.28,635.555 1112.84,655.484 1113.4,704.268 1113.96,719.896 1114.52,735.866 1115.08,713.845 1115.64,694.21 1116.2,712.823 1116.76,659.422 1117.31,710.646 1117.87,740.953 1118.43,725.212 1118.99,757.264 1119.55,774.011 1120.11,786.088 1120.67,762.452 1121.23,774.91 1121.79,773.674 1122.35,787.157 1122.91,784.177 1123.47,779.364 1124.03,759.326 1124.59,770.18 1125.14,749.208 1125.7,745.613 1126.26,745.854 1126.82,708.571 1127.38,692.893 1127.94,674.954 1128.5,644.122 1129.06,650.506 1129.62,634.413 1130.18,654.678 1130.74,689.591 1131.3,704.88 1131.86,674.068 1132.41,656.291 1132.97,658.085 1133.53,673.511 1134.09,675.415 1134.65,656.66 1135.21,641.23 1135.77,635.457 1136.33,621.313 1136.89,657.273 1137.45,643.441 1138.01,644.897 1138.57,662.438 1139.13,666.05 1139.68,617.712 1140.24,572.655 1140.8,627.749 1141.36,594.863 1141.92,630.289 1142.48,635.238 1143.04,669.737 1143.6,669.083 1144.16,666.358 1144.72,635.869 1145.28,639.094 1145.84,623.404 1146.4,613.429 1146.96,586.092 1147.51,574.416 1148.07,564.99 1148.63,538.711 1149.19,577.879 1149.75,587.47 1150.31,590.495 1150.87,609.471 1151.43,595.885 1151.99,630.889 1152.55,631.902 1153.11,585.833 1153.67,609.565 1154.23,661.835 1154.78,675.732 1155.34,660.243 1155.9,677.418 1156.46,691.842 1157.02,709.209 1157.58,706.699 1158.14,673.041 1158.7,706.38 1159.26,736.62 1159.82,765.265 1160.38,745.552 1160.94,743.067 1161.5,758.251 1162.05,754.592 1162.61,748.833 1163.17,777.871 1163.73,805.643 1164.29,783.303 1164.85,777.05 1165.41,760.492 1165.97,758.748 1166.53,751.387 1167.09,749.626 1167.65,713.04 1168.21,695.738 1168.77,696.862 1169.33,696.392 1169.88,710.268 1170.44,676.297 1171,694.591 1171.56,712.048 1172.12,709.741 1172.68,688.207 1173.24,668.874 1173.8,654.295 1174.36,658.072 1174.92,644.538 1175.48,642.502 1176.04,644.25 1176.6,648.803 1177.15,649.604 1177.71,618.373 1178.27,638.357 1178.83,594.629 1179.39,661.666 1179.95,665.887 1180.51,714.663 1181.07,714.44 1181.63,684.201 1182.19,698.457 1182.75,696.05 1183.31,710.793 1183.87,725.449 1184.43,723.664 1184.98,738.883 1185.54,736.125 1186.1,718.089 1186.66,748.777 1187.22,741.688 1187.78,805.169 1188.34,802.971 1188.9,768.184 1189.46,747.805 1190.02,762.28 1190.58,775.356 1191.14,789.034 1191.7,765.785 1192.25,761.571 1192.81,759.913 1193.37,758.041 1193.93,769.206 1194.49,767.295 1195.05,778.689 1195.61,772.941 1196.17,751.607 1196.73,734.517 1197.29,730.081 1197.85,724.161 1198.41,703.419 1198.97,717.708 1199.52,718.401 1200.08,717.04 1200.64,700.871 1201.2,681.87 1201.76,649.446 1202.32,619.482 1202.88,621.081 1203.44,672.852 1204,690.068 1204.56,656.36 1205.12,674.293 1205.68,660.223 1206.24,630.284 1206.8,660.459 1207.35,662.122 1207.91,660.61 1208.47,663.809 1209.03,678.288 1209.59,678.803 1210.15,677.788 1210.71,695.594 1211.27,663.294 1211.83,679.496 1212.39,678.462 1212.95,675.972 1213.51,679.844 1214.07,697.134 1214.62,697.188 1215.18,708.482 1215.74,724.536 1216.3,738.791 1216.86,737.828 1217.42,719.431 1217.98,733.277 1218.54,681.538 1219.1,714.08 1219.66,712.605 1220.22,696.442 1220.78,697.736 1221.34,711.957 1221.89,728.276 1222.45,742.748 1223.01,729.057 1223.57,727.71 1224.13,743.601 1224.69,740.139 1225.25,739.895 1225.81,721.14 1226.37,729.727 1226.93,758.328 1227.49,768.898 1228.05,748.496 1228.61,777.609 1229.17,711.527 1229.72,725.406 1230.28,723.74 1230.84,721.05 1231.4,705.164 1231.96,705.876 1232.52,738.811 1233.08,749.907 1233.64,761.662 1234.2,775.607 1234.76,739.943 1235.32,704.803 1235.88,689.155 1236.44,685.369 1236.99,668.998 1237.55,688.308 1238.11,658.059 1238.67,656.603 1239.23,627.249 1239.79,597.27 1240.35,618.05 1240.91,636.923 1241.47,671.664 1242.03,672.674 1242.59,642.282 1243.15,644.093 1243.71,674.702 1244.26,676.079 1244.82,649.445 1245.38,667.614 1245.94,686.944 1246.5,703.886 1247.06,669.125 1247.62,651.445 1248.18,617.799 1248.74,639.244 1249.3,672.205 1249.86,655.176 1250.42,656.893 1250.98,625.783 1251.54,594.432 1252.09,564.763 1252.65,585.487 1253.21,591.753 1253.77,579.175 1254.33,614.889 1254.89,638.11 1255.45,641.45 1256.01,660.472 1256.57,677.787 1257.13,676.1 1257.69,692.972 1258.25,693.702 1258.81,699.221 1259.36,712.559 1259.92,762.439 1260.48,757.525 1261.04,771.042 1261.6,750.646 1262.16,764.564 1262.72,744.758 1263.28,725.684 1263.84,740.57 1264.4,719.348 1264.96,715.961 1265.52,730.345 1266.08,730.1 1266.63,711.15 1267.19,692.686 1267.75,706.824 1268.31,718.526 1268.87,733.191 1269.43,665.76 1269.99,650.884 1270.55,634.815 1271.11,624.596 1271.67,645.419 1272.23,599.765 1272.79,617.916 1273.35,589.21 1273.91,594.206 1274.46,559.637 1275.02,579.354 1275.58,572.223 1276.14,578.576 1276.7,597.674 1277.26,635.73 1277.82,653.675 1278.38,640.035 1278.94,625.843 1279.5,594.228 1280.06,600.848 1280.62,591.196 1281.18,612.23 1281.73,602.707 1282.29,606.555 1282.85,610.714 1283.41,617.589 1283.97,575.509 1284.53,564.445 1285.09,523.288 1285.65,578.511 1286.21,616.6 1286.77,621.177 1287.33,609.769 1287.89,617.626 1288.45,685.982 1289,669.266 1289.56,670.302 1290.12,670.12 1290.68,656.286 1291.24,656.457 1291.8,638.798 1292.36,640.268 1292.92,641.092 1293.48,630.059 1294.04,634.903 1294.6,668.873 1295.16,671.709 1295.72,673.509 1296.28,639.794 1296.83,691.005 1297.39,692.68 1297.95,742.996 1298.51,755.65 1299.07,768.797 1299.63,745.676 1300.19,727.878 1300.75,759.292 1301.31,739.245 1301.87,766.954 1302.43,777.501 1302.99,754.834 1303.55,748.295 1304.1,728.796 1304.66,728.23 1305.22,677.899 1305.78,677.996 1306.34,677.073 1306.9,704.493 1307.46,704.906 1308.02,705.746 1308.58,752.183 1309.14,748.727 1309.7,712.348 1310.26,658.56 1310.82,628.277 1311.38,631.409 1311.93,632.897 1312.49,648.674 1313.05,682.46 1313.61,651.785 1314.17,673.288 1314.73,625.191 1315.29,612.31 1315.85,616.455 1316.41,636.295 1316.97,623.85 1317.53,641.133 1318.09,610.236 1318.65,618.441 1319.2,626.281 1319.76,627.625 1320.32,645.912 1320.88,630.651 1321.44,666.825 1322,667.671 1322.56,668.364 1323.12,684.597 1323.68,665.057 1324.24,664.225 1324.8,684.73 1325.36,689.982 1325.92,687.116 1326.47,686.973 1327.03,670.705 1327.59,657.175 1328.15,660.532 1328.71,662.664 1329.27,649.273 1329.83,654.068 1330.39,672.769 1330.95,691.663 1331.51,673.413 1332.07,693.249 1332.63,690.681 1333.19,688.409 1333.75,687.269 1334.3,671.157 1334.86,671.144 1335.42,670.679 1335.98,688.112 1336.54,670.765 1337.1,703.658 1337.66,717.583 1338.22,686.838 1338.78,684.761 1339.34,715.322 1339.9,699.661 1340.46,713.098 1341.02,710.314 1341.57,710.03 1342.13,708.33 1342.69,754.405 1343.25,766.961 1343.81,762.186 1344.37,773.932 1344.93,786.649 1345.49,781.926 1346.05,791.622 1346.61,783.862 1347.17,762.519 1347.73,776.656 1348.29,787.911 1348.84,785.293 1349.4,780.091 1349.96,822.027 1350.52,795.476 1351.08,789.265 1351.64,783.327 1352.2,764.318 1352.76,727.411 1353.32,690.95 1353.88,703.815 1354.44,669.318 1355,653.987 1355.56,685.893 1356.12,667.772 1356.67,698.33 1357.23,697.049 1357.79,743.178 1358.35,754.73 1358.91,738.605 1359.47,721.523 1360.03,718.477 1360.59,731.547 1361.15,728.257 1361.71,672.745 1362.27,690.806 1362.83,657.476 1363.39,677.132 1363.94,692.937 1364.5,626.032 1365.06,644.849 1365.62,662.765 1366.18,648.091 1366.74,653.376 1367.3,637.949 1367.86,671.655 1368.42,687.484 1368.98,669.648 1369.54,702.482 1370.1,718.695 1370.66,716.462 1371.21,698.461 1371.77,698.616 1372.33,696.422 1372.89,681.281 1373.45,648.02 1374.01,632.633 1374.57,651.914 1375.13,651.803 1375.69,652.626 1376.25,636.246 1376.81,620.992 1377.37,623.382 1377.93,627.096 1378.49,627.284 1379.04,614.96 1379.6,588.299 1380.16,593.534 1380.72,633.194 1381.28,587.819 1381.84,631.209 1382.4,617.285 1382.96,605.412 1383.52,626.536 1384.08,597.166 1384.64,647.297 1385.2,650.238 1385.76,636.573 1386.31,657.082 1386.87,657.448 1387.43,677.663 1387.99,659.271 1388.55,642.379 1389.11,649.214 1389.67,668.752 1390.23,667.149 1390.79,671.318 1391.35,640.25 1391.91,607.845 1392.47,628.368 1393.03,647.824 1393.58,667.535 1394.14,649.354 1394.7,667.913 1395.26,683.294 1395.82,651.172 1396.38,635.956 1396.94,637.524 1397.5,638.422 1398.06,641.369 1398.62,673.973 1399.18,640.874 1399.74,644.613 1400.3,661.893 1400.86,693.677 1401.41,662.505 1401.97,631.368 1402.53,680.822 1403.09,698.257 1403.65,694.004 1404.21,709.531 1404.77,723.026 1405.33,720.586 1405.89,733.658 1406.45,746.464 1407.01,758.787 1407.57,775.175 1408.13,770.794 1408.68,732.835 1409.24,729.698 1409.8,725.869 1410.36,720.373 1410.92,716.604 1411.48,730.149 1412.04,723.825 1412.6,704.383 1413.16,703.988 1413.72,672.125 1414.28,675.776 1414.84,646.842 1415.4,632.448 1415.95,622.8 1416.51,605.677 1417.07,611.564 1417.63,634.795 1418.19,638.609 1418.75,642.554 1419.31,644.884 1419.87,698.486 1420.43,695.863 1420.99,696.564 1421.55,744.523 1422.11,723.023 1422.67,717.903 1423.23,732.843 1423.78,719.424 1424.34,698.041 1424.9,694 1425.46,741.38 1426.02,753.735 1426.58,734.933 1427.14,733.108 1427.7,731.482 1428.26,727.951 1428.82,711.08 1429.38,728.297 1429.94,722.447 1430.5,718.311 1431.05,683.344 1431.61,683.702 1432.17,666.223 1432.73,685.821 1433.29,719.561 1433.85,734.465 1434.41,764.984 1434.97,758.33 1435.53,752.844 1436.09,765.049 1436.65,729.995 1437.21,740.33 1437.77,769.688 1438.33,735.613 1438.88,714.681 1439.44,731.575 1440,711.995 1440.56,713.853 1441.12,712.749 1441.68,711.833 1442.24,711.584 1442.8,673.99 1443.36,690.991 1443.92,691.116 1444.48,690.417 1445.04,708.765 1445.6,724.283 1446.15,733.223 1446.71,747.25 1447.27,744.119 1447.83,725.114 1448.39,722.93 1448.95,722.347 1449.51,722.394 1450.07,719.109 1450.63,685.533 1451.19,703.116 1451.75,720.819 1452.31,735.089 1452.87,735.523 1453.42,749.831 1453.98,745.496 1454.54,741.522 1455.1,739.019 1455.66,783.159 1456.22,759.939 1456.78,757.517 1457.34,736.273 1457.9,756.591 1458.46,802.613 1459.02,813.726 1459.58,790.437 1460.14,752.906 1460.7,747.791 1461.25,758.76 1461.81,738.426 1462.37,720.667 1462.93,739.07 1463.49,719.874 1464.05,705.818 1464.61,689.741 1465.17,720.158 1465.73,733.472 1466.29,715.709 1466.85,730.24 1467.41,741.9 1467.97,768.422 1468.52,734.643 1469.08,731.183 1469.64,728.548 1470.2,705.883 1470.76,734.8 1471.32,731.316 1471.88,728.707 1472.44,726.909 1473,726.441 1473.56,707.369 1474.12,685.656 1474.68,671.303 1475.24,655.039 1475.79,657.985 1476.35,641.273 1476.91,644.954 1477.47,629.743 1478.03,646.998 1478.59,681.067 1479.15,678.471 1479.71,724.995 1480.27,709.287 1480.83,708.63 1481.39,720.331 1481.95,716.079 1482.51,665.289 1483.07,665.458 1483.62,635.495 1484.18,653.792 1484.74,641.677 1485.3,639.17 1485.86,624.883 1486.42,628.532 1486.98,643.091 1487.54,642.185 1488.1,659.134 1488.66,676.699 1489.22,677.254 1489.78,679.269 1490.34,695.263 1490.89,678.267 1491.45,680.854 1492.01,665.07 1492.57,697.503 1493.13,677.029 1493.69,679.363 1494.25,660.501 1494.81,659.908 1495.37,663.173 1495.93,663.522 1496.49,664.065 1497.05,679.775 1497.61,677.667 1498.16,679.351 1498.72,646.612 1499.28,648.435 1499.84,698.661 1500.4,715.58 1500.96,710.787 1501.52,707.19 1502.08,643.744 1502.64,630.697 1503.2,637.547 1503.76,639.915 1504.32,658.869 1504.88,678.076 1505.44,677.389 1505.99,677.96 1506.55,677.749 1507.11,678.493 1507.67,675.008 1508.23,643.35 1508.79,660.315 1509.35,661.281 1509.91,695.355 1510.47,709.305 1511.03,707.018 1511.59,690.867 1512.15,656.186 1512.71,675.668 1513.26,705.923 1513.82,719.162 1514.38,685.82 1514.94,669.323 1515.5,674.373 1516.06,677.219 1516.62,695.362 1517.18,680.122 1517.74,681.935 1518.3,667.798 1518.86,683.641 1519.42,699.897 1519.98,681.508 1520.53,663.245 1521.09,634.07 1521.65,603.493 1522.21,623.769 1522.77,628.307 1523.33,633.985 1523.89,637.165 1524.45,654.053 1525.01,655.488 1525.57,690.803 1526.13,657.327 1526.69,610.206 1527.25,629.533 1527.81,650.657 1528.36,620.993 1528.92,657.86 1529.48,656.79 1530.04,643.478 1530.6,645.847 1531.16,646.733 1531.72,613.406 1532.28,632.928 1532.84,653.85 1533.4,636.85 1533.96,640.89 1534.52,642.194 1535.08,611.714 1535.63,612.751 1536.19,647.528 1536.75,635.132 1537.31,621.861 1537.87,611.634 1538.43,646.4 1538.99,647.737 1539.55,664.824 1540.11,664.06 1540.67,645.515 1541.23,616.792 1541.79,590.254 1542.35,609.96 1542.9,627.223 1543.46,612.41 1544.02,600.664 1544.58,622.005 1545.14,627.193 1545.7,630.756 1546.26,653.226 1546.82,657.698 1547.38,630.136 1547.94,585.784 1548.5,592.819 1549.06,631.166 1549.62,648.327 1550.18,635.727 1550.73,654.511 1551.29,644.191 1551.85,664.052 1552.41,630.544 1552.97,630.084 1553.53,616.511 1554.09,625.147 1554.65,582.062 1555.21,592.774 1555.77,583.436 1556.33,589.142 1556.89,595.005 1557.45,583.719 1558,587.092 1558.56,591.821 1559.12,595.37 1559.68,631.989 1560.24,684.616 1560.8,702.452 1561.36,686.897 1561.92,692.546 1562.48,708.648 1563.04,721.795 1563.6,701.445 1564.16,705.094 1564.72,691.672 1565.28,707.102 1565.83,691.466 1566.39,669.546 1566.95,667.245 1567.51,653.478 1568.07,671.176 1568.63,672.523 1569.19,659.291 1569.75,675.376 1570.31,708.51 1570.87,726.105 1571.43,736.049 1571.99,746.952 1572.55,743.657 1573.1,757.612 1573.66,738.384 1574.22,749.155 1574.78,746.917 1575.34,679.815 1575.9,682.189 1576.46,681.944 1577.02,667.536 1577.58,683.748 1578.14,683.84 1578.7,668.174 1579.26,681.091 1579.82,680.591 1580.37,651.482 1580.93,650.886 1581.49,635.394 1582.05,637.908 1582.61,627.156 1583.17,648.193 1583.73,650.957 1584.29,670.546 1584.85,687.844 1585.41,653.069 1585.97,655.746 1586.53,626.2 1587.09,643.288 1587.65,648.115 1588.2,683.739 1588.76,679.776 1589.32,680.567 1589.88,662.304 1590.44,665.236 1591,662.917 1591.56,677.606 1592.12,644.676 1592.68,643.822 1593.24,677.02 1593.8,709.023 1594.36,721.953 1594.92,720.208 1595.47,750.528 1596.03,715.586 1596.59,742.344 1597.15,705.905 1597.71,687.236 1598.27,682.827 1598.83,683.649 1599.39,718.271 1599.95,718.912 1600.51,649.66 1601.07,635.428 1601.63,636.729 1602.19,622.491 1602.74,625.979 1603.3,661.896 1603.86,649.35 1604.42,617.7 1604.98,622.945 1605.54,625.833 1606.1,676.111 1606.66,662.812 1607.22,645.564 1607.78,631.053 1608.34,617.473 1608.9,636.832 1609.46,638.443 1610.02,640.161 1610.57,640.651 1611.13,641.315 1611.69,624.074 1612.25,660.196 1612.81,711.067 1613.37,741.577 1613.93,786.87 1614.49,812.042 1615.05,788.875 1615.61,782.76 1616.17,761.812 1616.73,708.99 1617.29,706.118 1617.84,686.779 1618.4,708.148 1618.96,755.083 1619.52,740.3 1620.08,723.734 1620.64,737.56 1621.2,768.39 1621.76,776.293 1622.32,773.044 1622.88,751.721 1623.44,745.573 1624,755.955 1624.56,751.102 1625.11,762.307 1625.67,757.501 1626.23,740.113 1626.79,749.004 1627.35,747.859 1627.91,776.757 1628.47,755.749 1629.03,754.355 1629.59,801.633 1630.15,797.438 1630.71,791.061 1631.27,783.591 1631.83,777.452 1632.39,758.468 1632.94,769.181 1633.5,778.223 1634.06,806.37 1634.62,797.932 1635.18,827.171 1635.74,822.054 1636.3,751.496 1636.86,746.855 1637.42,742.706 1637.98,705.597 1638.54,704.818 1639.1,718.356 1639.66,733.105 1640.21,724.784 1640.77,717.783 1641.33,734.682 1641.89,732.447 1642.45,746.397 1643.01,740.658 1643.57,687.155 1644.13,682.857 1644.69,714.247 1645.25,713.635 1645.81,697.496 1646.37,679.665 1646.93,644.457 1647.48,675.894 1648.04,671.606 1648.6,624.593 1649.16,629.667 1649.72,652.203 1650.28,621.953 1650.84,660.419 1651.4,673.868 1651.96,673.825 1652.52,689.601 1653.08,693.94 1653.64,709.686 1654.2,709.116 1654.76,707.265 1655.31,674.88 1655.87,689.61 1656.43,706.352 1656.99,716.98 1657.55,701.099 1658.11,749.542 1658.67,745.436 1659.23,726.601 1659.79,726.746 1660.35,741.554 1660.91,722.49 1661.47,720.338 1662.03,701.762 1662.58,685.034 1663.14,716.367 1663.7,681.771 1664.26,662.874 1664.82,635.055 1665.38,650.965 1665.94,634.786 1666.5,618.86 1667.06,621.719 1667.62,629.323 1668.18,616.255 1668.74,620.834 1669.3,638.848 1669.85,645.314 1670.41,629.516 1670.97,631.108 1671.53,666.233 1672.09,637.609 1672.65,675.041 1673.21,678.416 1673.77,562.963 1674.33,567.997 1674.89,589.265 1675.45,607.853 1676.01,611.527 1676.57,632.164 1677.13,604.668 1677.68,608.345 1678.24,629.451 1678.8,666.154 1679.36,683.735 1679.92,715.349 1680.48,712.465 1681.04,746.945 1681.6,727.237 1682.16,724.434 1682.72,753.237 1683.28,767.648 1683.84,729.928 1684.4,756.494 1684.95,753.483 1685.51,764.346 1686.07,744.538 1686.63,742.825 1687.19,753.221 1687.75,735.717 1688.31,734.558 1688.87,730.889 1689.43,727.896 1689.99,708.788 1690.55,707.649 1691.11,691.959 1691.67,675.013 1692.23,693.665 1692.78,695.595 1693.34,709.425 1693.9,676.234 1694.46,681.205 1695.02,664.967 1695.58,686.133 1696.14,668.578 1696.7,638.867 1697.26,640.47 1697.82,609.462 1698.38,642.458 1698.94,627.179 1699.5,646.838 1700.05,647.658 1700.61,650.017 1701.17,652.436 1701.73,659.228 1702.29,644.42 1702.85,647.557 1703.41,700.422 1703.97,686.023 1704.53,701.252 1705.09,734.306 1705.65,748.958 1706.21,743.288 1706.77,707.02 1707.32,705.498 1707.88,706.501 1708.44,709.764 1709,725.849 1709.56,703.069 1710.12,699.23 1710.68,667.245 1711.24,667.37 1711.8,667.445 1712.36,665.556 1712.92,649.509 1713.48,650.237 1714.04,638.957 1714.6,608.608 1715.15,597.516 1715.71,603.421 1716.27,590.738 1716.83,561.195 1717.39,569.048 1717.95,576.342 1718.51,568.25 1719.07,605.278 1719.63,606.846 1720.19,560.198 1720.75,582.121 1721.31,604.68 1721.87,623.161 1722.42,647.777 1722.98,632.726 1723.54,619.145 1724.1,621.32 1724.66,661.039 1725.22,677.553 1725.78,679.445 1726.34,677.373 1726.9,660.324 1727.46,660.071 1728.02,596.437 1728.58,618.963 1729.14,625.391 1729.69,645.551 1730.25,646.48 1730.81,644.281 1731.37,644.599 1731.93,649.017 1732.49,668.066 1733.05,672.953 1733.61,655.323 1734.17,675.627 1734.73,691.983 1735.29,695.163 1735.85,680.372 1736.41,681.375 1736.97,699.107 1737.52,702.733 1738.08,700.357 1738.64,698.038 1739.2,662.829 1739.76,646.084 1740.32,682.33 1740.88,695.489 1741.44,679.52 1742,690.972 1742.56,705.471 1743.12,717.471 1743.68,684.809 1744.24,702.606 1744.79,701.742 1745.35,717.517 1745.91,728.866 1746.47,727.778 1747.03,742.322 1747.59,753.545 1748.15,782.204 1748.71,758.837 1749.27,789.753 1749.83,784.156 1750.39,761.89 1750.95,740.052 1751.51,721.123 1752.06,720.055 1752.62,749.902 1753.18,764.596 1753.74,758.531 1754.3,756.911 1754.86,739.434 1755.42,702.607 1755.98,695.278 1756.54,676.563 1757.1,660.782 1757.66,680.397 1758.22,678.258 1758.78,693.674 1759.34,694.57 1759.89,678.031 1760.45,726.896 1761.01,727.226 1761.57,718.397 1762.13,697.179 1762.69,695.051 1763.25,678.345 1763.81,709.524 1764.37,706.847 1764.93,720.523 1765.49,706.042 1766.05,672.412 1766.61,672.007 1767.16,672.637 1767.72,702.184 1768.28,734.331 1768.84,697.903 1769.4,712.902 1769.96,727.375 1770.52,720.57 1771.08,701.102 1771.64,715.76 1772.2,699.438 1772.76,684.522 1773.32,702.974 1773.88,704.924 1774.43,672.91 1774.99,653.978 1775.55,655.114 1776.11,657.454 1776.67,642.206 1777.23,648.608 1777.79,648.488 1778.35,652.027 1778.91,636.078 1779.47,670.98 1780.03,670.476 1780.59,688.659 1781.15,671.935 1781.71,640.933 1782.26,644.327 1782.82,646.918 1783.38,647.335 1783.94,634.223 1784.5,631.978 1785.06,620.137 1785.62,610.442 1786.18,596.767 1786.74,599.853 1787.3,589.622 1787.86,611.574 1788.42,650.94 1788.98,669.726 1789.53,669.335 1790.09,653.544 1790.65,687.5 1791.21,702.675 1791.77,700.75 1792.33,713.667 1792.89,697.262 1793.45,663.869 1794.01,663.53 1794.57,665.249 1795.13,651.333 1795.69,618.125 1796.25,620.703 1796.8,656.414 1797.36,609.005 1797.92,631.403 1798.48,648.525 1799.04,648.195 1799.6,668.713 1800.16,669.263 1800.72,669.349 1801.28,657.806 1801.84,643.245 1802.4,643.502 1802.96,662.979 1803.52,659.457 1804.08,661.247 1804.63,662.099 1805.19,676.575 1805.75,691.904 1806.31,643.6 1806.87,667.956 1807.43,685.587 1807.99,687.876 1808.55,689.346 1809.11,693.902 1809.67,713.273 1810.23,712.712 1810.79,730.146 1811.35,748.675 1811.9,762.437 1812.46,755.852 1813.02,753.685 1813.58,738.453 1814.14,701.07 1814.7,685.219 1815.26,716.57 1815.82,713.288 1816.38,678.778 1816.94,681.381 1817.5,682.648 1818.06,712.887 1818.62,711.135 1819.18,710.751 1819.73,642.987 1820.29,646.581 1820.85,634.414 1821.41,622.763 1821.97,610.535 1822.53,582.783 1823.09,567.675 1823.65,554.855 1824.21,562.405 1824.77,572.076 1825.33,612.503 1825.89,598.034 1826.45,584.281 1827,591.77 1827.56,597.007 1828.12,603.127 1828.68,589.594 1829.24,578.04 1829.8,569.319 1830.36,591.876 1830.92,597.698 1831.48,601.076 1832.04,591.356 1832.6,585.389 1833.16,619.008 1833.72,618.185 1834.27,590.217 1834.83,610.516 1835.39,630.8 1835.95,633.999 1836.51,621.249 1837.07,623.021 1837.63,610.639 1838.19,627.992 \"/>\n<path clip-path=\"url(#clip683)\" d=\"M720.247 689.671 L720.806 689.671 L721.365 689.671 L721.924 689.671 L722.484 689.671 L723.043 689.671 L723.602 689.671 L724.161 689.671 L724.721 689.671 L725.28 689.671 L725.839 689.671 L726.398 689.671 L726.958 689.671 L727.517 689.671 L728.076 689.671 L728.635 689.671 L729.195 689.671 L729.754 689.671 L730.313 689.671 L730.872 689.671 L731.432 689.671 L731.991 689.671 L732.55 689.671 L733.109 689.671 L733.669 689.671 L734.228 689.671 L734.787 689.671 L735.346 689.671 L735.906 689.671 L736.465 689.671 L737.024 689.671 L737.583 689.671 L738.143 689.671 L738.702 689.671 L739.261 689.671 L739.82 689.671 L740.38 689.671 L740.939 689.671 L741.498 689.671 L742.057 689.671 L742.617 689.671 L743.176 689.671 L743.735 689.671 L744.294 689.671 L744.854 689.671 L745.413 689.671 L745.972 689.671 L746.531 689.671 L747.091 689.671 L747.65 689.671 L748.209 689.671 L748.768 689.671 L749.328 689.671 L749.887 689.671 L750.446 689.671 L751.005 689.671 L751.565 689.671 L752.124 689.671 L752.683 689.671 L753.242 689.671 L753.802 689.671 L754.361 689.671 L754.92 689.671 L755.479 689.671 L756.039 689.671 L756.598 689.671 L757.157 689.671 L757.716 689.671 L758.276 689.671 L758.835 689.671 L759.394 689.671 L759.953 689.671 L760.513 689.671 L761.072 689.671 L761.631 689.671 L762.19 689.671 L762.75 689.671 L763.309 689.671 L763.868 689.671 L764.427 689.671 L764.987 689.671 L765.546 689.671 L766.105 689.671 L766.664 689.671 L767.224 689.671 L767.783 689.671 L768.342 689.671 L768.901 689.671 L769.461 689.671 L770.02 689.671 L770.579 689.671 L771.138 689.671 L771.698 689.671 L772.257 689.671 L772.816 689.671 L773.375 689.671 L773.935 689.671 L774.494 689.671 L775.053 689.671 L775.612 689.671 L776.172 689.671 L776.731 689.671 L777.29 689.671 L777.849 689.671 L778.409 689.671 L778.968 689.671 L779.527 689.671 L780.086 689.671 L780.646 689.671 L781.205 689.671 L781.764 689.671 L782.323 689.671 L782.883 689.671 L783.442 689.671 L784.001 689.671 L784.56 689.671 L785.12 689.671 L785.679 689.671 L786.238 689.671 L786.797 689.671 L787.357 689.671 L787.916 689.671 L788.475 689.671 L789.034 689.671 L789.594 689.671 L790.153 689.671 L790.712 689.671 L791.271 689.671 L791.831 689.671 L792.39 689.671 L792.949 689.671 L793.508 689.671 L794.068 689.671 L794.627 689.671 L795.186 689.671 L795.745 689.671 L796.305 689.671 L796.864 689.671 L797.423 689.671 L797.982 689.671 L798.542 689.671 L799.101 689.671 L799.66 689.671 L800.219 689.671 L800.779 689.671 L801.338 689.671 L801.897 689.671 L802.456 689.671 L803.016 689.671 L803.575 689.671 L804.134 689.671 L804.693 689.671 L805.253 689.671 L805.812 689.671 L806.371 689.671 L806.931 689.671 L807.49 689.671 L808.049 689.671 L808.608 689.671 L809.168 689.671 L809.727 689.671 L810.286 689.671 L810.845 689.671 L811.405 689.671 L811.964 689.671 L812.523 689.671 L813.082 689.671 L813.642 689.671 L814.201 689.671 L814.76 689.671 L815.319 689.671 L815.879 689.671 L816.438 689.671 L816.997 689.671 L817.556 689.671 L818.116 689.671 L818.675 689.671 L819.234 689.671 L819.793 689.671 L820.353 689.671 L820.912 689.671 L821.471 689.671 L822.03 689.671 L822.59 689.671 L823.149 689.671 L823.708 689.671 L824.267 689.671 L824.827 689.671 L825.386 689.671 L825.945 689.671 L826.504 689.671 L827.064 689.671 L827.623 689.671 L828.182 689.671 L828.741 689.671 L829.301 689.671 L829.86 689.671 L830.419 689.671 L830.978 689.671 L831.538 689.671 L832.097 689.671 L832.656 689.671 L833.215 689.671 L833.775 689.671 L834.334 689.671 L834.893 689.671 L835.452 689.671 L836.012 689.671 L836.571 689.671 L837.13 689.671 L837.689 689.671 L838.249 689.671 L838.808 689.671 L839.367 689.671 L839.926 689.671 L840.486 689.671 L841.045 689.671 L841.604 689.671 L842.163 689.671 L842.723 689.671 L843.282 689.671 L843.841 689.671 L844.4 689.671 L844.96 689.671 L845.519 689.671 L846.078 689.671 L846.637 689.671 L847.197 689.671 L847.756 689.671 L848.315 689.671 L848.874 689.671 L849.434 689.671 L849.993 689.671 L850.552 689.671 L851.111 689.671 L851.671 689.671 L852.23 689.671 L852.789 689.671 L853.348 689.671 L853.908 689.671 L854.467 689.671 L855.026 689.671 L855.585 689.671 L856.145 689.671 L856.704 689.671 L857.263 689.671 L857.822 689.671 L858.382 689.671 L858.941 689.671 L859.5 689.671 L860.059 689.671 L860.619 689.671 L861.178 689.671 L861.737 689.671 L862.296 689.671 L862.856 689.671 L863.415 689.671 L863.974 689.671 L864.533 689.671 L865.093 689.671 L865.652 689.671 L866.211 689.671 L866.77 689.671 L867.33 689.671 L867.889 689.671 L868.448 689.671 L869.007 689.671 L869.567 689.671 L870.126 689.671 L870.685 689.671 L871.244 689.671 L871.804 689.671 L872.363 689.671 L872.922 689.671 L873.481 689.671 L874.041 689.671 L874.6 689.671 L875.159 689.671 L875.718 689.671 L876.278 689.671 L876.837 689.671 L877.396 689.671 L877.955 689.671 L878.515 689.671 L879.074 689.671 L879.633 689.671 L880.192 689.671 L880.752 689.671 L881.311 689.671 L881.87 689.671 L882.429 689.671 L882.989 689.671 L883.548 689.671 L884.107 689.671 L884.666 689.671 L885.226 689.671 L885.785 689.671 L886.344 689.671 L886.903 689.671 L887.463 689.671 L888.022 689.671 L888.581 689.671 L889.14 689.671 L889.7 689.671 L890.259 689.671 L890.818 689.671 L891.377 689.671 L891.937 689.671 L892.496 689.671 L893.055 689.671 L893.614 689.671 L894.174 689.671 L894.733 689.671 L895.292 689.671 L895.851 689.671 L896.411 689.671 L896.97 689.671 L897.529 689.671 L898.088 689.671 L898.648 689.671 L899.207 689.671 L899.766 689.671 L900.325 689.671 L900.885 689.671 L901.444 689.671 L902.003 689.671 L902.562 689.671 L903.122 689.671 L903.681 689.671 L904.24 689.671 L904.799 689.671 L905.359 689.671 L905.918 689.671 L906.477 689.671 L907.036 689.671 L907.596 689.671 L908.155 689.671 L908.714 689.671 L909.273 689.671 L909.833 689.671 L910.392 689.671 L910.951 689.671 L911.51 689.671 L912.07 689.671 L912.629 689.671 L913.188 689.671 L913.747 689.671 L914.307 689.671 L914.866 689.671 L915.425 689.671 L915.984 689.671 L916.544 689.671 L917.103 689.671 L917.662 689.671 L918.221 689.671 L918.781 689.671 L919.34 689.671 L919.899 689.671 L920.458 689.671 L921.018 689.671 L921.577 689.671 L922.136 689.671 L922.695 689.671 L923.255 689.671 L923.814 689.671 L924.373 689.671 L924.932 689.671 L925.492 689.671 L926.051 689.671 L926.61 689.671 L927.169 689.671 L927.729 689.671 L928.288 689.671 L928.847 689.671 L929.406 689.671 L929.966 689.671 L930.525 689.671 L931.084 689.671 L931.644 689.671 L932.203 689.671 L932.762 689.671 L933.321 689.671 L933.881 689.671 L934.44 689.671 L934.999 689.671 L935.558 689.671 L936.118 689.671 L936.677 689.671 L937.236 689.671 L937.795 689.671 L938.355 689.671 L938.914 689.671 L939.473 689.671 L940.032 689.671 L940.592 689.671 L941.151 689.671 L941.71 689.671 L942.269 689.671 L942.829 689.671 L943.388 689.671 L943.947 689.671 L944.506 689.671 L945.066 689.671 L945.625 689.671 L946.184 689.671 L946.743 689.671 L947.303 689.671 L947.862 689.671 L948.421 689.671 L948.98 689.671 L949.54 689.671 L950.099 689.671 L950.658 689.671 L951.217 689.671 L951.777 689.671 L952.336 689.671 L952.895 689.671 L953.454 689.671 L954.014 689.671 L954.573 689.671 L955.132 689.671 L955.691 689.671 L956.251 689.671 L956.81 689.671 L957.369 689.671 L957.928 689.671 L958.488 689.671 L959.047 689.671 L959.606 689.671 L960.165 689.671 L960.725 689.671 L961.284 689.671 L961.843 689.671 L962.402 689.671 L962.962 689.671 L963.521 689.671 L964.08 689.671 L964.639 689.671 L965.199 689.671 L965.758 689.671 L966.317 689.671 L966.876 689.671 L967.436 689.671 L967.995 689.671 L968.554 689.671 L969.113 689.671 L969.673 689.671 L970.232 689.671 L970.791 689.671 L971.35 689.671 L971.91 689.671 L972.469 689.671 L973.028 689.671 L973.587 689.671 L974.147 689.671 L974.706 689.671 L975.265 689.671 L975.824 689.671 L976.384 689.671 L976.943 689.671 L977.502 689.671 L978.061 689.671 L978.621 689.671 L979.18 689.671 L979.739 689.671 L980.298 689.671 L980.858 689.671 L981.417 689.671 L981.976 689.671 L982.535 689.671 L983.095 689.671 L983.654 689.671 L984.213 689.671 L984.772 689.671 L985.332 689.671 L985.891 689.671 L986.45 689.671 L987.009 689.671 L987.569 689.671 L988.128 689.671 L988.687 689.671 L989.246 689.671 L989.806 689.671 L990.365 689.671 L990.924 689.671 L991.483 689.671 L992.043 689.671 L992.602 689.671 L993.161 689.671 L993.72 689.671 L994.28 689.671 L994.839 689.671 L995.398 689.671 L995.957 689.671 L996.517 689.671 L997.076 689.671 L997.635 689.671 L998.194 689.671 L998.754 689.671 L999.313 689.671 L999.872 689.671 L1000.43 689.671 L1000.99 689.671 L1001.55 689.671 L1002.11 689.671 L1002.67 689.671 L1003.23 689.671 L1003.79 689.671 L1004.35 689.671 L1004.91 689.671 L1005.46 689.671 L1006.02 689.671 L1006.58 689.671 L1007.14 689.671 L1007.7 689.671 L1008.26 689.671 L1008.82 689.671 L1009.38 689.671 L1009.94 689.671 L1010.5 689.671 L1011.06 689.671 L1011.62 689.671 L1012.18 689.671 L1012.73 689.671 L1013.29 689.671 L1013.85 689.671 L1014.41 689.671 L1014.97 689.671 L1015.53 689.671 L1016.09 689.671 L1016.65 689.671 L1017.21 689.671 L1017.77 689.671 L1018.33 689.671 L1018.89 689.671 L1019.45 689.671 L1020.01 689.671 L1020.56 689.671 L1021.12 689.671 L1021.68 689.671 L1022.24 689.671 L1022.8 689.671 L1023.36 689.671 L1023.92 689.671 L1024.48 689.671 L1025.04 689.671 L1025.6 689.671 L1026.16 689.671 L1026.72 689.671 L1027.28 689.671 L1027.83 689.671 L1028.39 689.671 L1028.95 689.671 L1029.51 689.671 L1030.07 689.671 L1030.63 689.671 L1031.19 689.671 L1031.75 689.671 L1032.31 689.671 L1032.87 689.671 L1033.43 689.671 L1033.99 689.671 L1034.55 689.671 L1035.1 689.671 L1035.66 689.671 L1036.22 689.671 L1036.78 689.671 L1037.34 689.671 L1037.9 689.671 L1038.46 689.671 L1039.02 689.671 L1039.58 689.671 L1040.14 689.671 L1040.7 689.671 L1041.26 689.671 L1041.82 689.671 L1042.38 689.671 L1042.93 689.671 L1043.49 689.671 L1044.05 689.671 L1044.61 689.671 L1045.17 689.671 L1045.73 689.671 L1046.29 689.671 L1046.85 689.671 L1047.41 689.671 L1047.97 689.671 L1048.53 689.671 L1049.09 689.671 L1049.65 689.671 L1050.2 689.671 L1050.76 689.671 L1051.32 689.671 L1051.88 689.671 L1052.44 689.671 L1053 689.671 L1053.56 689.671 L1054.12 689.671 L1054.68 689.671 L1055.24 689.671 L1055.8 689.671 L1056.36 689.671 L1056.92 689.671 L1057.48 689.671 L1058.03 689.671 L1058.59 689.671 L1059.15 689.671 L1059.71 689.671 L1060.27 689.671 L1060.83 689.671 L1061.39 689.671 L1061.95 689.671 L1062.51 689.671 L1063.07 689.671 L1063.63 689.671 L1064.19 689.671 L1064.75 689.671 L1065.3 689.671 L1065.86 689.671 L1066.42 689.671 L1066.98 689.671 L1067.54 689.671 L1068.1 689.671 L1068.66 689.671 L1069.22 689.671 L1069.78 689.671 L1070.34 689.671 L1070.9 689.671 L1071.46 689.671 L1072.02 689.671 L1072.57 689.671 L1073.13 689.671 L1073.69 689.671 L1074.25 689.671 L1074.81 689.671 L1075.37 689.671 L1075.93 689.671 L1076.49 689.671 L1077.05 689.671 L1077.61 689.671 L1078.17 689.671 L1078.73 689.671 L1079.29 689.671 L1079.85 689.671 L1080.4 689.671 L1080.96 689.671 L1081.52 689.671 L1082.08 689.671 L1082.64 689.671 L1083.2 689.671 L1083.76 689.671 L1084.32 689.671 L1084.88 689.671 L1085.44 689.671 L1086 689.671 L1086.56 689.671 L1087.12 689.671 L1087.67 689.671 L1088.23 689.671 L1088.79 689.671 L1089.35 689.671 L1089.91 689.671 L1090.47 689.671 L1091.03 689.671 L1091.59 689.671 L1092.15 689.671 L1092.71 689.671 L1093.27 689.671 L1093.83 689.671 L1094.39 689.671 L1094.94 689.671 L1095.5 689.671 L1096.06 689.671 L1096.62 689.671 L1097.18 689.671 L1097.74 689.671 L1098.3 689.671 L1098.86 689.671 L1099.42 689.671 L1099.98 689.671 L1100.54 689.671 L1101.1 689.671 L1101.66 689.671 L1102.22 689.671 L1102.77 689.671 L1103.33 689.671 L1103.89 689.671 L1104.45 689.671 L1105.01 689.671 L1105.57 689.671 L1106.13 689.671 L1106.69 689.671 L1107.25 689.671 L1107.81 689.671 L1108.37 689.671 L1108.93 689.671 L1109.49 689.671 L1110.04 689.671 L1110.6 689.671 L1111.16 689.671 L1111.72 689.671 L1112.28 689.671 L1112.84 689.671 L1113.4 689.671 L1113.96 689.671 L1114.52 689.671 L1115.08 689.671 L1115.64 689.671 L1116.2 689.671 L1116.76 689.671 L1117.31 689.671 L1117.87 689.671 L1118.43 689.671 L1118.99 689.671 L1119.55 689.671 L1120.11 689.671 L1120.67 689.671 L1121.23 689.671 L1121.79 689.671 L1122.35 689.671 L1122.91 689.671 L1123.47 689.671 L1124.03 689.671 L1124.59 689.671 L1125.14 689.671 L1125.7 689.671 L1126.26 689.671 L1126.82 689.671 L1127.38 689.671 L1127.94 689.671 L1128.5 689.671 L1129.06 689.671 L1129.62 689.671 L1130.18 689.671 L1130.74 689.671 L1131.3 689.671 L1131.86 689.671 L1132.41 689.671 L1132.97 689.671 L1133.53 689.671 L1134.09 689.671 L1134.65 689.671 L1135.21 689.671 L1135.77 689.671 L1136.33 689.671 L1136.89 689.671 L1137.45 689.671 L1138.01 689.671 L1138.57 689.671 L1139.13 689.671 L1139.68 689.671 L1140.24 689.671 L1140.8 689.671 L1141.36 689.671 L1141.92 689.671 L1142.48 689.671 L1143.04 689.671 L1143.6 689.671 L1144.16 689.671 L1144.72 689.671 L1145.28 689.671 L1145.84 689.671 L1146.4 689.671 L1146.96 689.671 L1147.51 689.671 L1148.07 689.671 L1148.63 689.671 L1149.19 689.671 L1149.75 689.671 L1150.31 689.671 L1150.87 689.671 L1151.43 689.671 L1151.99 689.671 L1152.55 689.671 L1153.11 689.671 L1153.67 689.671 L1154.23 689.671 L1154.78 689.671 L1155.34 689.671 L1155.9 689.671 L1156.46 689.671 L1157.02 689.671 L1157.58 689.671 L1158.14 689.671 L1158.7 689.671 L1159.26 689.671 L1159.82 689.671 L1160.38 689.671 L1160.94 689.671 L1161.5 689.671 L1162.05 689.671 L1162.61 689.671 L1163.17 689.671 L1163.73 689.671 L1164.29 689.671 L1164.85 689.671 L1165.41 689.671 L1165.97 689.671 L1166.53 689.671 L1167.09 689.671 L1167.65 689.671 L1168.21 689.671 L1168.77 689.671 L1169.33 689.671 L1169.88 689.671 L1170.44 689.671 L1171 689.671 L1171.56 689.671 L1172.12 689.671 L1172.68 689.671 L1173.24 689.671 L1173.8 689.671 L1174.36 689.671 L1174.92 689.671 L1175.48 689.671 L1176.04 689.671 L1176.6 689.671 L1177.15 689.671 L1177.71 689.671 L1178.27 689.671 L1178.83 689.671 L1179.39 689.671 L1179.95 689.671 L1180.51 689.671 L1181.07 689.671 L1181.63 689.671 L1182.19 689.671 L1182.75 689.671 L1183.31 689.671 L1183.87 689.671 L1184.43 689.671 L1184.98 689.671 L1185.54 689.671 L1186.1 689.671 L1186.66 689.671 L1187.22 689.671 L1187.78 689.671 L1188.34 689.671 L1188.9 689.671 L1189.46 689.671 L1190.02 689.671 L1190.58 689.671 L1191.14 689.671 L1191.7 689.671 L1192.25 689.671 L1192.81 689.671 L1193.37 689.671 L1193.93 689.671 L1194.49 689.671 L1195.05 689.671 L1195.61 689.671 L1196.17 689.671 L1196.73 689.671 L1197.29 689.671 L1197.85 689.671 L1198.41 689.671 L1198.97 689.671 L1199.52 689.671 L1200.08 689.671 L1200.64 689.671 L1201.2 689.671 L1201.76 689.671 L1202.32 689.671 L1202.88 689.671 L1203.44 689.671 L1204 689.671 L1204.56 689.671 L1205.12 689.671 L1205.68 689.671 L1206.24 689.671 L1206.8 689.671 L1207.35 689.671 L1207.91 689.671 L1208.47 689.671 L1209.03 689.671 L1209.59 689.671 L1210.15 689.671 L1210.71 689.671 L1211.27 689.671 L1211.83 689.671 L1212.39 689.671 L1212.95 689.671 L1213.51 689.671 L1214.07 689.671 L1214.62 689.671 L1215.18 689.671 L1215.74 689.671 L1216.3 689.671 L1216.86 689.671 L1217.42 689.671 L1217.98 689.671 L1218.54 689.671 L1219.1 689.671 L1219.66 689.671 L1220.22 689.671 L1220.78 689.671 L1221.34 689.671 L1221.89 689.671 L1222.45 689.671 L1223.01 689.671 L1223.57 689.671 L1224.13 689.671 L1224.69 689.671 L1225.25 689.671 L1225.81 689.671 L1226.37 689.671 L1226.93 689.671 L1227.49 689.671 L1228.05 689.671 L1228.61 689.671 L1229.17 689.671 L1229.72 689.671 L1230.28 689.671 L1230.84 689.671 L1231.4 689.671 L1231.96 689.671 L1232.52 689.671 L1233.08 689.671 L1233.64 689.671 L1234.2 689.671 L1234.76 689.671 L1235.32 689.671 L1235.88 689.671 L1236.44 689.671 L1236.99 689.671 L1237.55 689.671 L1238.11 689.671 L1238.67 689.671 L1239.23 689.671 L1239.79 689.671 L1240.35 689.671 L1240.91 689.671 L1241.47 689.671 L1242.03 689.671 L1242.59 689.671 L1243.15 689.671 L1243.71 689.671 L1244.26 689.671 L1244.82 689.671 L1245.38 689.671 L1245.94 689.671 L1246.5 689.671 L1247.06 689.671 L1247.62 689.671 L1248.18 689.671 L1248.74 689.671 L1249.3 689.671 L1249.86 689.671 L1250.42 689.671 L1250.98 689.671 L1251.54 689.671 L1252.09 689.671 L1252.65 689.671 L1253.21 689.671 L1253.77 689.671 L1254.33 689.671 L1254.89 689.671 L1255.45 689.671 L1256.01 689.671 L1256.57 689.671 L1257.13 689.671 L1257.69 689.671 L1258.25 689.671 L1258.81 689.671 L1259.36 689.671 L1259.92 689.671 L1260.48 689.671 L1261.04 689.671 L1261.6 689.671 L1262.16 689.671 L1262.72 689.671 L1263.28 689.671 L1263.84 689.671 L1264.4 689.671 L1264.96 689.671 L1265.52 689.671 L1266.08 689.671 L1266.63 689.671 L1267.19 689.671 L1267.75 689.671 L1268.31 689.671 L1268.87 689.671 L1269.43 689.671 L1269.99 689.671 L1270.55 689.671 L1271.11 689.671 L1271.67 689.671 L1272.23 689.671 L1272.79 689.671 L1273.35 689.671 L1273.91 689.671 L1274.46 689.671 L1275.02 689.671 L1275.58 689.671 L1276.14 689.671 L1276.7 689.671 L1277.26 689.671 L1277.82 689.671 L1278.38 689.671 L1278.94 689.671 L1279.5 689.671 L1280.06 689.671 L1280.62 689.671 L1281.18 689.671 L1281.73 689.671 L1282.29 689.671 L1282.85 689.671 L1283.41 689.671 L1283.97 689.671 L1284.53 689.671 L1285.09 689.671 L1285.65 689.671 L1286.21 689.671 L1286.77 689.671 L1287.33 689.671 L1287.89 689.671 L1288.45 689.671 L1289 689.671 L1289.56 689.671 L1290.12 689.671 L1290.68 689.671 L1291.24 689.671 L1291.8 689.671 L1292.36 689.671 L1292.92 689.671 L1293.48 689.671 L1294.04 689.671 L1294.6 689.671 L1295.16 689.671 L1295.72 689.671 L1296.28 689.671 L1296.83 689.671 L1297.39 689.671 L1297.95 689.671 L1298.51 689.671 L1299.07 689.671 L1299.63 689.671 L1300.19 689.671 L1300.75 689.671 L1301.31 689.671 L1301.87 689.671 L1302.43 689.671 L1302.99 689.671 L1303.55 689.671 L1304.1 689.671 L1304.66 689.671 L1305.22 689.671 L1305.78 689.671 L1306.34 689.671 L1306.9 689.671 L1307.46 689.671 L1308.02 689.671 L1308.58 689.671 L1309.14 689.671 L1309.7 689.671 L1310.26 689.671 L1310.82 689.671 L1311.38 689.671 L1311.93 689.671 L1312.49 689.671 L1313.05 689.671 L1313.61 689.671 L1314.17 689.671 L1314.73 689.671 L1315.29 689.671 L1315.85 689.671 L1316.41 689.671 L1316.97 689.671 L1317.53 689.671 L1318.09 689.671 L1318.65 689.671 L1319.2 689.671 L1319.76 689.671 L1320.32 689.671 L1320.88 689.671 L1321.44 689.671 L1322 689.671 L1322.56 689.671 L1323.12 689.671 L1323.68 689.671 L1324.24 689.671 L1324.8 689.671 L1325.36 689.671 L1325.92 689.671 L1326.47 689.671 L1327.03 689.671 L1327.59 689.671 L1328.15 689.671 L1328.71 689.671 L1329.27 689.671 L1329.83 689.671 L1330.39 689.671 L1330.95 689.671 L1331.51 689.671 L1332.07 689.671 L1332.63 689.671 L1333.19 689.671 L1333.75 689.671 L1334.3 689.671 L1334.86 689.671 L1335.42 689.671 L1335.98 689.671 L1336.54 689.671 L1337.1 689.671 L1337.66 689.671 L1338.22 689.671 L1338.78 689.671 L1339.34 689.671 L1339.9 689.671 L1340.46 689.671 L1341.02 689.671 L1341.57 689.671 L1342.13 689.671 L1342.69 689.671 L1343.25 689.671 L1343.81 689.671 L1344.37 689.671 L1344.93 689.671 L1345.49 689.671 L1346.05 689.671 L1346.61 689.671 L1347.17 689.671 L1347.73 689.671 L1348.29 689.671 L1348.84 689.671 L1349.4 689.671 L1349.96 689.671 L1350.52 689.671 L1351.08 689.671 L1351.64 689.671 L1352.2 689.671 L1352.76 689.671 L1353.32 689.671 L1353.88 689.671 L1354.44 689.671 L1355 689.671 L1355.56 689.671 L1356.12 689.671 L1356.67 689.671 L1357.23 689.671 L1357.79 689.671 L1358.35 689.671 L1358.91 689.671 L1359.47 689.671 L1360.03 689.671 L1360.59 689.671 L1361.15 689.671 L1361.71 689.671 L1362.27 689.671 L1362.83 689.671 L1363.39 689.671 L1363.94 689.671 L1364.5 689.671 L1365.06 689.671 L1365.62 689.671 L1366.18 689.671 L1366.74 689.671 L1367.3 689.671 L1367.86 689.671 L1368.42 689.671 L1368.98 689.671 L1369.54 689.671 L1370.1 689.671 L1370.66 689.671 L1371.21 689.671 L1371.77 689.671 L1372.33 689.671 L1372.89 689.671 L1373.45 689.671 L1374.01 689.671 L1374.57 689.671 L1375.13 689.671 L1375.69 689.671 L1376.25 689.671 L1376.81 689.671 L1377.37 689.671 L1377.93 689.671 L1378.49 689.671 L1379.04 689.671 L1379.6 689.671 L1380.16 689.671 L1380.72 689.671 L1381.28 689.671 L1381.84 689.671 L1382.4 689.671 L1382.96 689.671 L1383.52 689.671 L1384.08 689.671 L1384.64 689.671 L1385.2 689.671 L1385.76 689.671 L1386.31 689.671 L1386.87 689.671 L1387.43 689.671 L1387.99 689.671 L1388.55 689.671 L1389.11 689.671 L1389.67 689.671 L1390.23 689.671 L1390.79 689.671 L1391.35 689.671 L1391.91 689.671 L1392.47 689.671 L1393.03 689.671 L1393.58 689.671 L1394.14 689.671 L1394.7 689.671 L1395.26 689.671 L1395.82 689.671 L1396.38 689.671 L1396.94 689.671 L1397.5 689.671 L1398.06 689.671 L1398.62 689.671 L1399.18 689.671 L1399.74 689.671 L1400.3 689.671 L1400.86 689.671 L1401.41 689.671 L1401.97 689.671 L1402.53 689.671 L1403.09 689.671 L1403.65 689.671 L1404.21 689.671 L1404.77 689.671 L1405.33 689.671 L1405.89 689.671 L1406.45 689.671 L1407.01 689.671 L1407.57 689.671 L1408.13 689.671 L1408.68 689.671 L1409.24 689.671 L1409.8 689.671 L1410.36 689.671 L1410.92 689.671 L1411.48 689.671 L1412.04 689.671 L1412.6 689.671 L1413.16 689.671 L1413.72 689.671 L1414.28 689.671 L1414.84 689.671 L1415.4 689.671 L1415.95 689.671 L1416.51 689.671 L1417.07 689.671 L1417.63 689.671 L1418.19 689.671 L1418.75 689.671 L1419.31 689.671 L1419.87 689.671 L1420.43 689.671 L1420.99 689.671 L1421.55 689.671 L1422.11 689.671 L1422.67 689.671 L1423.23 689.671 L1423.78 689.671 L1424.34 689.671 L1424.9 689.671 L1425.46 689.671 L1426.02 689.671 L1426.58 689.671 L1427.14 689.671 L1427.7 689.671 L1428.26 689.671 L1428.82 689.671 L1429.38 689.671 L1429.94 689.671 L1430.5 689.671 L1431.05 689.671 L1431.61 689.671 L1432.17 689.671 L1432.73 689.671 L1433.29 689.671 L1433.85 689.671 L1434.41 689.671 L1434.97 689.671 L1435.53 689.671 L1436.09 689.671 L1436.65 689.671 L1437.21 689.671 L1437.77 689.671 L1438.33 689.671 L1438.88 689.671 L1439.44 689.671 L1440 689.671 L1440.56 689.671 L1441.12 689.671 L1441.68 689.671 L1442.24 689.671 L1442.8 689.671 L1443.36 689.671 L1443.92 689.671 L1444.48 689.671 L1445.04 689.671 L1445.6 689.671 L1446.15 689.671 L1446.71 689.671 L1447.27 689.671 L1447.83 689.671 L1448.39 689.671 L1448.95 689.671 L1449.51 689.671 L1450.07 689.671 L1450.63 689.671 L1451.19 689.671 L1451.75 689.671 L1452.31 689.671 L1452.87 689.671 L1453.42 689.671 L1453.98 689.671 L1454.54 689.671 L1455.1 689.671 L1455.66 689.671 L1456.22 689.671 L1456.78 689.671 L1457.34 689.671 L1457.9 689.671 L1458.46 689.671 L1459.02 689.671 L1459.58 689.671 L1460.14 689.671 L1460.7 689.671 L1461.25 689.671 L1461.81 689.671 L1462.37 689.671 L1462.93 689.671 L1463.49 689.671 L1464.05 689.671 L1464.61 689.671 L1465.17 689.671 L1465.73 689.671 L1466.29 689.671 L1466.85 689.671 L1467.41 689.671 L1467.97 689.671 L1468.52 689.671 L1469.08 689.671 L1469.64 689.671 L1470.2 689.671 L1470.76 689.671 L1471.32 689.671 L1471.88 689.671 L1472.44 689.671 L1473 689.671 L1473.56 689.671 L1474.12 689.671 L1474.68 689.671 L1475.24 689.671 L1475.79 689.671 L1476.35 689.671 L1476.91 689.671 L1477.47 689.671 L1478.03 689.671 L1478.59 689.671 L1479.15 689.671 L1479.71 689.671 L1480.27 689.671 L1480.83 689.671 L1481.39 689.671 L1481.95 689.671 L1482.51 689.671 L1483.07 689.671 L1483.62 689.671 L1484.18 689.671 L1484.74 689.671 L1485.3 689.671 L1485.86 689.671 L1486.42 689.671 L1486.98 689.671 L1487.54 689.671 L1488.1 689.671 L1488.66 689.671 L1489.22 689.671 L1489.78 689.671 L1490.34 689.671 L1490.89 689.671 L1491.45 689.671 L1492.01 689.671 L1492.57 689.671 L1493.13 689.671 L1493.69 689.671 L1494.25 689.671 L1494.81 689.671 L1495.37 689.671 L1495.93 689.671 L1496.49 689.671 L1497.05 689.671 L1497.61 689.671 L1498.16 689.671 L1498.72 689.671 L1499.28 689.671 L1499.84 689.671 L1500.4 689.671 L1500.96 689.671 L1501.52 689.671 L1502.08 689.671 L1502.64 689.671 L1503.2 689.671 L1503.76 689.671 L1504.32 689.671 L1504.88 689.671 L1505.44 689.671 L1505.99 689.671 L1506.55 689.671 L1507.11 689.671 L1507.67 689.671 L1508.23 689.671 L1508.79 689.671 L1509.35 689.671 L1509.91 689.671 L1510.47 689.671 L1511.03 689.671 L1511.59 689.671 L1512.15 689.671 L1512.71 689.671 L1513.26 689.671 L1513.82 689.671 L1514.38 689.671 L1514.94 689.671 L1515.5 689.671 L1516.06 689.671 L1516.62 689.671 L1517.18 689.671 L1517.74 689.671 L1518.3 689.671 L1518.86 689.671 L1519.42 689.671 L1519.98 689.671 L1520.53 689.671 L1521.09 689.671 L1521.65 689.671 L1522.21 689.671 L1522.77 689.671 L1523.33 689.671 L1523.89 689.671 L1524.45 689.671 L1525.01 689.671 L1525.57 689.671 L1526.13 689.671 L1526.69 689.671 L1527.25 689.671 L1527.81 689.671 L1528.36 689.671 L1528.92 689.671 L1529.48 689.671 L1530.04 689.671 L1530.6 689.671 L1531.16 689.671 L1531.72 689.671 L1532.28 689.671 L1532.84 689.671 L1533.4 689.671 L1533.96 689.671 L1534.52 689.671 L1535.08 689.671 L1535.63 689.671 L1536.19 689.671 L1536.75 689.671 L1537.31 689.671 L1537.87 689.671 L1538.43 689.671 L1538.99 689.671 L1539.55 689.671 L1540.11 689.671 L1540.67 689.671 L1541.23 689.671 L1541.79 689.671 L1542.35 689.671 L1542.9 689.671 L1543.46 689.671 L1544.02 689.671 L1544.58 689.671 L1545.14 689.671 L1545.7 689.671 L1546.26 689.671 L1546.82 689.671 L1547.38 689.671 L1547.94 689.671 L1548.5 689.671 L1549.06 689.671 L1549.62 689.671 L1550.18 689.671 L1550.73 689.671 L1551.29 689.671 L1551.85 689.671 L1552.41 689.671 L1552.97 689.671 L1553.53 689.671 L1554.09 689.671 L1554.65 689.671 L1555.21 689.671 L1555.77 689.671 L1556.33 689.671 L1556.89 689.671 L1557.45 689.671 L1558 689.671 L1558.56 689.671 L1559.12 689.671 L1559.68 689.671 L1560.24 689.671 L1560.8 689.671 L1561.36 689.671 L1561.92 689.671 L1562.48 689.671 L1563.04 689.671 L1563.6 689.671 L1564.16 689.671 L1564.72 689.671 L1565.28 689.671 L1565.83 689.671 L1566.39 689.671 L1566.95 689.671 L1567.51 689.671 L1568.07 689.671 L1568.63 689.671 L1569.19 689.671 L1569.75 689.671 L1570.31 689.671 L1570.87 689.671 L1571.43 689.671 L1571.99 689.671 L1572.55 689.671 L1573.1 689.671 L1573.66 689.671 L1574.22 689.671 L1574.78 689.671 L1575.34 689.671 L1575.9 689.671 L1576.46 689.671 L1577.02 689.671 L1577.58 689.671 L1578.14 689.671 L1578.7 689.671 L1579.26 689.671 L1579.82 689.671 L1580.37 689.671 L1580.93 689.671 L1581.49 689.671 L1582.05 689.671 L1582.61 689.671 L1583.17 689.671 L1583.73 689.671 L1584.29 689.671 L1584.85 689.671 L1585.41 689.671 L1585.97 689.671 L1586.53 689.671 L1587.09 689.671 L1587.65 689.671 L1588.2 689.671 L1588.76 689.671 L1589.32 689.671 L1589.88 689.671 L1590.44 689.671 L1591 689.671 L1591.56 689.671 L1592.12 689.671 L1592.68 689.671 L1593.24 689.671 L1593.8 689.671 L1594.36 689.671 L1594.92 689.671 L1595.47 689.671 L1596.03 689.671 L1596.59 689.671 L1597.15 689.671 L1597.71 689.671 L1598.27 689.671 L1598.83 689.671 L1599.39 689.671 L1599.95 689.671 L1600.51 689.671 L1601.07 689.671 L1601.63 689.671 L1602.19 689.671 L1602.74 689.671 L1603.3 689.671 L1603.86 689.671 L1604.42 689.671 L1604.98 689.671 L1605.54 689.671 L1606.1 689.671 L1606.66 689.671 L1607.22 689.671 L1607.78 689.671 L1608.34 689.671 L1608.9 689.671 L1609.46 689.671 L1610.02 689.671 L1610.57 689.671 L1611.13 689.671 L1611.69 689.671 L1612.25 689.671 L1612.81 689.671 L1613.37 689.671 L1613.93 689.671 L1614.49 689.671 L1615.05 689.671 L1615.61 689.671 L1616.17 689.671 L1616.73 689.671 L1617.29 689.671 L1617.84 689.671 L1618.4 689.671 L1618.96 689.671 L1619.52 689.671 L1620.08 689.671 L1620.64 689.671 L1621.2 689.671 L1621.76 689.671 L1622.32 689.671 L1622.88 689.671 L1623.44 689.671 L1624 689.671 L1624.56 689.671 L1625.11 689.671 L1625.67 689.671 L1626.23 689.671 L1626.79 689.671 L1627.35 689.671 L1627.91 689.671 L1628.47 689.671 L1629.03 689.671 L1629.59 689.671 L1630.15 689.671 L1630.71 689.671 L1631.27 689.671 L1631.83 689.671 L1632.39 689.671 L1632.94 689.671 L1633.5 689.671 L1634.06 689.671 L1634.62 689.671 L1635.18 689.671 L1635.74 689.671 L1636.3 689.671 L1636.86 689.671 L1637.42 689.671 L1637.98 689.671 L1638.54 689.671 L1639.1 689.671 L1639.66 689.671 L1640.21 689.671 L1640.77 689.671 L1641.33 689.671 L1641.89 689.671 L1642.45 689.671 L1643.01 689.671 L1643.57 689.671 L1644.13 689.671 L1644.69 689.671 L1645.25 689.671 L1645.81 689.671 L1646.37 689.671 L1646.93 689.671 L1647.48 689.671 L1648.04 689.671 L1648.6 689.671 L1649.16 689.671 L1649.72 689.671 L1650.28 689.671 L1650.84 689.671 L1651.4 689.671 L1651.96 689.671 L1652.52 689.671 L1653.08 689.671 L1653.64 689.671 L1654.2 689.671 L1654.76 689.671 L1655.31 689.671 L1655.87 689.671 L1656.43 689.671 L1656.99 689.671 L1657.55 689.671 L1658.11 689.671 L1658.67 689.671 L1659.23 689.671 L1659.79 689.671 L1660.35 689.671 L1660.91 689.671 L1661.47 689.671 L1662.03 689.671 L1662.58 689.671 L1663.14 689.671 L1663.7 689.671 L1664.26 689.671 L1664.82 689.671 L1665.38 689.671 L1665.94 689.671 L1666.5 689.671 L1667.06 689.671 L1667.62 689.671 L1668.18 689.671 L1668.74 689.671 L1669.3 689.671 L1669.85 689.671 L1670.41 689.671 L1670.97 689.671 L1671.53 689.671 L1672.09 689.671 L1672.65 689.671 L1673.21 689.671 L1673.77 689.671 L1674.33 689.671 L1674.89 689.671 L1675.45 689.671 L1676.01 689.671 L1676.57 689.671 L1677.13 689.671 L1677.68 689.671 L1678.24 689.671 L1678.8 689.671 L1679.36 689.671 L1679.92 689.671 L1680.48 689.671 L1681.04 689.671 L1681.6 689.671 L1682.16 689.671 L1682.72 689.671 L1683.28 689.671 L1683.84 689.671 L1684.4 689.671 L1684.95 689.671 L1685.51 689.671 L1686.07 689.671 L1686.63 689.671 L1687.19 689.671 L1687.75 689.671 L1688.31 689.671 L1688.87 689.671 L1689.43 689.671 L1689.99 689.671 L1690.55 689.671 L1691.11 689.671 L1691.67 689.671 L1692.23 689.671 L1692.78 689.671 L1693.34 689.671 L1693.9 689.671 L1694.46 689.671 L1695.02 689.671 L1695.58 689.671 L1696.14 689.671 L1696.7 689.671 L1697.26 689.671 L1697.82 689.671 L1698.38 689.671 L1698.94 689.671 L1699.5 689.671 L1700.05 689.671 L1700.61 689.671 L1701.17 689.671 L1701.73 689.671 L1702.29 689.671 L1702.85 689.671 L1703.41 689.671 L1703.97 689.671 L1704.53 689.671 L1705.09 689.671 L1705.65 689.671 L1706.21 689.671 L1706.77 689.671 L1707.32 689.671 L1707.88 689.671 L1708.44 689.671 L1709 689.671 L1709.56 689.671 L1710.12 689.671 L1710.68 689.671 L1711.24 689.671 L1711.8 689.671 L1712.36 689.671 L1712.92 689.671 L1713.48 689.671 L1714.04 689.671 L1714.6 689.671 L1715.15 689.671 L1715.71 689.671 L1716.27 689.671 L1716.83 689.671 L1717.39 689.671 L1717.95 689.671 L1718.51 689.671 L1719.07 689.671 L1719.63 689.671 L1720.19 689.671 L1720.75 689.671 L1721.31 689.671 L1721.87 689.671 L1722.42 689.671 L1722.98 689.671 L1723.54 689.671 L1724.1 689.671 L1724.66 689.671 L1725.22 689.671 L1725.78 689.671 L1726.34 689.671 L1726.9 689.671 L1727.46 689.671 L1728.02 689.671 L1728.58 689.671 L1729.14 689.671 L1729.69 689.671 L1730.25 689.671 L1730.81 689.671 L1731.37 689.671 L1731.93 689.671 L1732.49 689.671 L1733.05 689.671 L1733.61 689.671 L1734.17 689.671 L1734.73 689.671 L1735.29 689.671 L1735.85 689.671 L1736.41 689.671 L1736.97 689.671 L1737.52 689.671 L1738.08 689.671 L1738.64 689.671 L1739.2 689.671 L1739.76 689.671 L1740.32 689.671 L1740.88 689.671 L1741.44 689.671 L1742 689.671 L1742.56 689.671 L1743.12 689.671 L1743.68 689.671 L1744.24 689.671 L1744.79 689.671 L1745.35 689.671 L1745.91 689.671 L1746.47 689.671 L1747.03 689.671 L1747.59 689.671 L1748.15 689.671 L1748.71 689.671 L1749.27 689.671 L1749.83 689.671 L1750.39 689.671 L1750.95 689.671 L1751.51 689.671 L1752.06 689.671 L1752.62 689.671 L1753.18 689.671 L1753.74 689.671 L1754.3 689.671 L1754.86 689.671 L1755.42 689.671 L1755.98 689.671 L1756.54 689.671 L1757.1 689.671 L1757.66 689.671 L1758.22 689.671 L1758.78 689.671 L1759.34 689.671 L1759.89 689.671 L1760.45 689.671 L1761.01 689.671 L1761.57 689.671 L1762.13 689.671 L1762.69 689.671 L1763.25 689.671 L1763.81 689.671 L1764.37 689.671 L1764.93 689.671 L1765.49 689.671 L1766.05 689.671 L1766.61 689.671 L1767.16 689.671 L1767.72 689.671 L1768.28 689.671 L1768.84 689.671 L1769.4 689.671 L1769.96 689.671 L1770.52 689.671 L1771.08 689.671 L1771.64 689.671 L1772.2 689.671 L1772.76 689.671 L1773.32 689.671 L1773.88 689.671 L1774.43 689.671 L1774.99 689.671 L1775.55 689.671 L1776.11 689.671 L1776.67 689.671 L1777.23 689.671 L1777.79 689.671 L1778.35 689.671 L1778.91 689.671 L1779.47 689.671 L1780.03 689.671 L1780.59 689.671 L1781.15 689.671 L1781.71 689.671 L1782.26 689.671 L1782.82 689.671 L1783.38 689.671 L1783.94 689.671 L1784.5 689.671 L1785.06 689.671 L1785.62 689.671 L1786.18 689.671 L1786.74 689.671 L1787.3 689.671 L1787.86 689.671 L1788.42 689.671 L1788.98 689.671 L1789.53 689.671 L1790.09 689.671 L1790.65 689.671 L1791.21 689.671 L1791.77 689.671 L1792.33 689.671 L1792.89 689.671 L1793.45 689.671 L1794.01 689.671 L1794.57 689.671 L1795.13 689.671 L1795.69 689.671 L1796.25 689.671 L1796.8 689.671 L1797.36 689.671 L1797.92 689.671 L1798.48 689.671 L1799.04 689.671 L1799.6 689.671 L1800.16 689.671 L1800.72 689.671 L1801.28 689.671 L1801.84 689.671 L1802.4 689.671 L1802.96 689.671 L1803.52 689.671 L1804.08 689.671 L1804.63 689.671 L1805.19 689.671 L1805.75 689.671 L1806.31 689.671 L1806.87 689.671 L1807.43 689.671 L1807.99 689.671 L1808.55 689.671 L1809.11 689.671 L1809.67 689.671 L1810.23 689.671 L1810.79 689.671 L1811.35 689.671 L1811.9 689.671 L1812.46 689.671 L1813.02 689.671 L1813.58 689.671 L1814.14 689.671 L1814.7 689.671 L1815.26 689.671 L1815.82 689.671 L1816.38 689.671 L1816.94 689.671 L1817.5 689.671 L1818.06 689.671 L1818.62 689.671 L1819.18 689.671 L1819.73 689.671 L1820.29 689.671 L1820.85 689.671 L1821.41 689.671 L1821.97 689.671 L1822.53 689.671 L1823.09 689.671 L1823.65 689.671 L1824.21 689.671 L1824.77 689.671 L1825.33 689.671 L1825.89 689.671 L1826.45 689.671 L1827 689.671 L1827.56 689.671 L1828.12 689.671 L1828.68 689.671 L1829.24 689.671 L1829.8 689.671 L1830.36 689.671 L1830.92 689.671 L1831.48 689.671 L1832.04 689.671 L1832.6 689.671 L1833.16 689.671 L1833.72 689.671 L1834.27 689.671 L1834.83 689.671 L1835.39 689.671 L1835.95 689.671 L1836.51 689.671 L1837.07 689.671 L1837.63 689.671 L1838.19 689.671 L1838.19 680.813 L1837.63 680.813 L1837.07 680.813 L1836.51 680.813 L1835.95 680.813 L1835.39 680.813 L1834.83 680.813 L1834.27 680.813 L1833.72 680.813 L1833.16 680.813 L1832.6 680.813 L1832.04 680.813 L1831.48 680.813 L1830.92 680.813 L1830.36 680.813 L1829.8 680.813 L1829.24 680.813 L1828.68 680.813 L1828.12 680.813 L1827.56 680.813 L1827 680.813 L1826.45 680.813 L1825.89 680.813 L1825.33 680.813 L1824.77 680.813 L1824.21 680.813 L1823.65 680.813 L1823.09 680.813 L1822.53 680.813 L1821.97 680.813 L1821.41 680.813 L1820.85 680.813 L1820.29 680.813 L1819.73 680.813 L1819.18 680.813 L1818.62 680.813 L1818.06 680.813 L1817.5 680.813 L1816.94 680.813 L1816.38 680.813 L1815.82 680.813 L1815.26 680.813 L1814.7 680.813 L1814.14 680.813 L1813.58 680.813 L1813.02 680.813 L1812.46 680.813 L1811.9 680.813 L1811.35 680.813 L1810.79 680.813 L1810.23 680.813 L1809.67 680.813 L1809.11 680.813 L1808.55 680.813 L1807.99 680.813 L1807.43 680.813 L1806.87 680.813 L1806.31 680.813 L1805.75 680.813 L1805.19 680.813 L1804.63 680.813 L1804.08 680.813 L1803.52 680.813 L1802.96 680.813 L1802.4 680.813 L1801.84 680.813 L1801.28 680.813 L1800.72 680.813 L1800.16 680.813 L1799.6 680.813 L1799.04 680.813 L1798.48 680.813 L1797.92 680.813 L1797.36 680.813 L1796.8 680.813 L1796.25 680.813 L1795.69 680.813 L1795.13 680.813 L1794.57 680.813 L1794.01 680.813 L1793.45 680.813 L1792.89 680.813 L1792.33 680.813 L1791.77 680.813 L1791.21 680.813 L1790.65 680.813 L1790.09 680.813 L1789.53 680.813 L1788.98 680.813 L1788.42 680.813 L1787.86 680.813 L1787.3 680.813 L1786.74 680.813 L1786.18 680.813 L1785.62 680.813 L1785.06 680.813 L1784.5 680.813 L1783.94 680.813 L1783.38 680.813 L1782.82 680.813 L1782.26 680.813 L1781.71 680.813 L1781.15 680.813 L1780.59 680.813 L1780.03 680.813 L1779.47 680.813 L1778.91 680.813 L1778.35 680.813 L1777.79 680.813 L1777.23 680.813 L1776.67 680.813 L1776.11 680.813 L1775.55 680.813 L1774.99 680.813 L1774.43 680.813 L1773.88 680.813 L1773.32 680.813 L1772.76 680.813 L1772.2 680.813 L1771.64 680.813 L1771.08 680.813 L1770.52 680.813 L1769.96 680.813 L1769.4 680.813 L1768.84 680.813 L1768.28 680.813 L1767.72 680.813 L1767.16 680.813 L1766.61 680.813 L1766.05 680.813 L1765.49 680.813 L1764.93 680.813 L1764.37 680.813 L1763.81 680.813 L1763.25 680.813 L1762.69 680.813 L1762.13 680.813 L1761.57 680.813 L1761.01 680.813 L1760.45 680.813 L1759.89 680.813 L1759.34 680.813 L1758.78 680.813 L1758.22 680.813 L1757.66 680.813 L1757.1 680.813 L1756.54 680.813 L1755.98 680.813 L1755.42 680.813 L1754.86 680.813 L1754.3 680.813 L1753.74 680.813 L1753.18 680.813 L1752.62 680.813 L1752.06 680.813 L1751.51 680.813 L1750.95 680.813 L1750.39 680.813 L1749.83 680.813 L1749.27 680.813 L1748.71 680.813 L1748.15 680.813 L1747.59 680.813 L1747.03 680.813 L1746.47 680.813 L1745.91 680.813 L1745.35 680.813 L1744.79 680.813 L1744.24 680.813 L1743.68 680.813 L1743.12 680.813 L1742.56 680.813 L1742 680.813 L1741.44 680.813 L1740.88 680.813 L1740.32 680.813 L1739.76 680.813 L1739.2 680.813 L1738.64 680.813 L1738.08 680.813 L1737.52 680.813 L1736.97 680.813 L1736.41 680.813 L1735.85 680.813 L1735.29 680.813 L1734.73 680.813 L1734.17 680.813 L1733.61 680.813 L1733.05 680.813 L1732.49 680.813 L1731.93 680.813 L1731.37 680.813 L1730.81 680.813 L1730.25 680.813 L1729.69 680.813 L1729.14 680.813 L1728.58 680.813 L1728.02 680.813 L1727.46 680.813 L1726.9 680.813 L1726.34 680.813 L1725.78 680.813 L1725.22 680.813 L1724.66 680.813 L1724.1 680.813 L1723.54 680.813 L1722.98 680.813 L1722.42 680.813 L1721.87 680.813 L1721.31 680.813 L1720.75 680.813 L1720.19 680.813 L1719.63 680.813 L1719.07 680.813 L1718.51 680.813 L1717.95 680.813 L1717.39 680.813 L1716.83 680.813 L1716.27 680.813 L1715.71 680.813 L1715.15 680.813 L1714.6 680.813 L1714.04 680.813 L1713.48 680.813 L1712.92 680.813 L1712.36 680.813 L1711.8 680.813 L1711.24 680.813 L1710.68 680.813 L1710.12 680.813 L1709.56 680.813 L1709 680.813 L1708.44 680.813 L1707.88 680.813 L1707.32 680.813 L1706.77 680.813 L1706.21 680.813 L1705.65 680.813 L1705.09 680.813 L1704.53 680.813 L1703.97 680.813 L1703.41 680.813 L1702.85 680.813 L1702.29 680.813 L1701.73 680.813 L1701.17 680.813 L1700.61 680.813 L1700.05 680.813 L1699.5 680.813 L1698.94 680.813 L1698.38 680.813 L1697.82 680.813 L1697.26 680.813 L1696.7 680.813 L1696.14 680.813 L1695.58 680.813 L1695.02 680.813 L1694.46 680.813 L1693.9 680.813 L1693.34 680.813 L1692.78 680.813 L1692.23 680.813 L1691.67 680.813 L1691.11 680.813 L1690.55 680.813 L1689.99 680.813 L1689.43 680.813 L1688.87 680.813 L1688.31 680.813 L1687.75 680.813 L1687.19 680.813 L1686.63 680.813 L1686.07 680.813 L1685.51 680.813 L1684.95 680.813 L1684.4 680.813 L1683.84 680.813 L1683.28 680.813 L1682.72 680.813 L1682.16 680.813 L1681.6 680.813 L1681.04 680.813 L1680.48 680.813 L1679.92 680.813 L1679.36 680.813 L1678.8 680.813 L1678.24 680.813 L1677.68 680.813 L1677.13 680.813 L1676.57 680.813 L1676.01 680.813 L1675.45 680.813 L1674.89 680.813 L1674.33 680.813 L1673.77 680.813 L1673.21 680.813 L1672.65 680.813 L1672.09 680.813 L1671.53 680.813 L1670.97 680.813 L1670.41 680.813 L1669.85 680.813 L1669.3 680.813 L1668.74 680.813 L1668.18 680.813 L1667.62 680.813 L1667.06 680.813 L1666.5 680.813 L1665.94 680.813 L1665.38 680.813 L1664.82 680.813 L1664.26 680.813 L1663.7 680.813 L1663.14 680.813 L1662.58 680.813 L1662.03 680.813 L1661.47 680.813 L1660.91 680.813 L1660.35 680.813 L1659.79 680.813 L1659.23 680.813 L1658.67 680.813 L1658.11 680.813 L1657.55 680.813 L1656.99 680.813 L1656.43 680.813 L1655.87 680.813 L1655.31 680.813 L1654.76 680.813 L1654.2 680.813 L1653.64 680.813 L1653.08 680.813 L1652.52 680.813 L1651.96 680.813 L1651.4 680.813 L1650.84 680.813 L1650.28 680.813 L1649.72 680.813 L1649.16 680.813 L1648.6 680.813 L1648.04 680.813 L1647.48 680.813 L1646.93 680.813 L1646.37 680.813 L1645.81 680.813 L1645.25 680.813 L1644.69 680.813 L1644.13 680.813 L1643.57 680.813 L1643.01 680.813 L1642.45 680.813 L1641.89 680.813 L1641.33 680.813 L1640.77 680.813 L1640.21 680.813 L1639.66 680.813 L1639.1 680.813 L1638.54 680.813 L1637.98 680.813 L1637.42 680.813 L1636.86 680.813 L1636.3 680.813 L1635.74 680.813 L1635.18 680.813 L1634.62 680.813 L1634.06 680.813 L1633.5 680.813 L1632.94 680.813 L1632.39 680.813 L1631.83 680.813 L1631.27 680.813 L1630.71 680.813 L1630.15 680.813 L1629.59 680.813 L1629.03 680.813 L1628.47 680.813 L1627.91 680.813 L1627.35 680.813 L1626.79 680.813 L1626.23 680.813 L1625.67 680.813 L1625.11 680.813 L1624.56 680.813 L1624 680.813 L1623.44 680.813 L1622.88 680.813 L1622.32 680.813 L1621.76 680.813 L1621.2 680.813 L1620.64 680.813 L1620.08 680.813 L1619.52 680.813 L1618.96 680.813 L1618.4 680.813 L1617.84 680.813 L1617.29 680.813 L1616.73 680.813 L1616.17 680.813 L1615.61 680.813 L1615.05 680.813 L1614.49 680.813 L1613.93 680.813 L1613.37 680.813 L1612.81 680.813 L1612.25 680.813 L1611.69 680.813 L1611.13 680.813 L1610.57 680.813 L1610.02 680.813 L1609.46 680.813 L1608.9 680.813 L1608.34 680.813 L1607.78 680.813 L1607.22 680.813 L1606.66 680.813 L1606.1 680.813 L1605.54 680.813 L1604.98 680.813 L1604.42 680.813 L1603.86 680.813 L1603.3 680.813 L1602.74 680.813 L1602.19 680.813 L1601.63 680.813 L1601.07 680.813 L1600.51 680.813 L1599.95 680.813 L1599.39 680.813 L1598.83 680.813 L1598.27 680.813 L1597.71 680.813 L1597.15 680.813 L1596.59 680.813 L1596.03 680.813 L1595.47 680.813 L1594.92 680.813 L1594.36 680.813 L1593.8 680.813 L1593.24 680.813 L1592.68 680.813 L1592.12 680.813 L1591.56 680.813 L1591 680.813 L1590.44 680.813 L1589.88 680.813 L1589.32 680.813 L1588.76 680.813 L1588.2 680.813 L1587.65 680.813 L1587.09 680.813 L1586.53 680.813 L1585.97 680.813 L1585.41 680.813 L1584.85 680.813 L1584.29 680.813 L1583.73 680.813 L1583.17 680.813 L1582.61 680.813 L1582.05 680.813 L1581.49 680.813 L1580.93 680.813 L1580.37 680.813 L1579.82 680.813 L1579.26 680.813 L1578.7 680.813 L1578.14 680.813 L1577.58 680.813 L1577.02 680.813 L1576.46 680.813 L1575.9 680.813 L1575.34 680.813 L1574.78 680.813 L1574.22 680.813 L1573.66 680.813 L1573.1 680.813 L1572.55 680.813 L1571.99 680.813 L1571.43 680.813 L1570.87 680.813 L1570.31 680.813 L1569.75 680.813 L1569.19 680.813 L1568.63 680.813 L1568.07 680.813 L1567.51 680.813 L1566.95 680.813 L1566.39 680.813 L1565.83 680.813 L1565.28 680.813 L1564.72 680.813 L1564.16 680.813 L1563.6 680.813 L1563.04 680.813 L1562.48 680.813 L1561.92 680.813 L1561.36 680.813 L1560.8 680.813 L1560.24 680.813 L1559.68 680.813 L1559.12 680.813 L1558.56 680.813 L1558 680.813 L1557.45 680.813 L1556.89 680.813 L1556.33 680.813 L1555.77 680.813 L1555.21 680.813 L1554.65 680.813 L1554.09 680.813 L1553.53 680.813 L1552.97 680.813 L1552.41 680.813 L1551.85 680.813 L1551.29 680.813 L1550.73 680.813 L1550.18 680.813 L1549.62 680.813 L1549.06 680.813 L1548.5 680.813 L1547.94 680.813 L1547.38 680.813 L1546.82 680.813 L1546.26 680.813 L1545.7 680.813 L1545.14 680.813 L1544.58 680.813 L1544.02 680.813 L1543.46 680.813 L1542.9 680.813 L1542.35 680.813 L1541.79 680.813 L1541.23 680.813 L1540.67 680.813 L1540.11 680.813 L1539.55 680.813 L1538.99 680.813 L1538.43 680.813 L1537.87 680.813 L1537.31 680.813 L1536.75 680.813 L1536.19 680.813 L1535.63 680.813 L1535.08 680.813 L1534.52 680.813 L1533.96 680.813 L1533.4 680.813 L1532.84 680.813 L1532.28 680.813 L1531.72 680.813 L1531.16 680.813 L1530.6 680.813 L1530.04 680.813 L1529.48 680.813 L1528.92 680.813 L1528.36 680.813 L1527.81 680.813 L1527.25 680.813 L1526.69 680.813 L1526.13 680.813 L1525.57 680.813 L1525.01 680.813 L1524.45 680.813 L1523.89 680.813 L1523.33 680.813 L1522.77 680.813 L1522.21 680.813 L1521.65 680.813 L1521.09 680.813 L1520.53 680.813 L1519.98 680.813 L1519.42 680.813 L1518.86 680.813 L1518.3 680.813 L1517.74 680.813 L1517.18 680.813 L1516.62 680.813 L1516.06 680.813 L1515.5 680.813 L1514.94 680.813 L1514.38 680.813 L1513.82 680.813 L1513.26 680.813 L1512.71 680.813 L1512.15 680.813 L1511.59 680.813 L1511.03 680.813 L1510.47 680.813 L1509.91 680.813 L1509.35 680.813 L1508.79 680.813 L1508.23 680.813 L1507.67 680.813 L1507.11 680.813 L1506.55 680.813 L1505.99 680.813 L1505.44 680.813 L1504.88 680.813 L1504.32 680.813 L1503.76 680.813 L1503.2 680.813 L1502.64 680.813 L1502.08 680.813 L1501.52 680.813 L1500.96 680.813 L1500.4 680.813 L1499.84 680.813 L1499.28 680.813 L1498.72 680.813 L1498.16 680.813 L1497.61 680.813 L1497.05 680.813 L1496.49 680.813 L1495.93 680.813 L1495.37 680.813 L1494.81 680.813 L1494.25 680.813 L1493.69 680.813 L1493.13 680.813 L1492.57 680.813 L1492.01 680.813 L1491.45 680.813 L1490.89 680.813 L1490.34 680.813 L1489.78 680.813 L1489.22 680.813 L1488.66 680.813 L1488.1 680.813 L1487.54 680.813 L1486.98 680.813 L1486.42 680.813 L1485.86 680.813 L1485.3 680.813 L1484.74 680.813 L1484.18 680.813 L1483.62 680.813 L1483.07 680.813 L1482.51 680.813 L1481.95 680.813 L1481.39 680.813 L1480.83 680.813 L1480.27 680.813 L1479.71 680.813 L1479.15 680.813 L1478.59 680.813 L1478.03 680.813 L1477.47 680.813 L1476.91 680.813 L1476.35 680.813 L1475.79 680.813 L1475.24 680.813 L1474.68 680.813 L1474.12 680.813 L1473.56 680.813 L1473 680.813 L1472.44 680.813 L1471.88 680.813 L1471.32 680.813 L1470.76 680.813 L1470.2 680.813 L1469.64 680.813 L1469.08 680.813 L1468.52 680.813 L1467.97 680.813 L1467.41 680.813 L1466.85 680.813 L1466.29 680.813 L1465.73 680.813 L1465.17 680.813 L1464.61 680.813 L1464.05 680.813 L1463.49 680.813 L1462.93 680.813 L1462.37 680.813 L1461.81 680.813 L1461.25 680.813 L1460.7 680.813 L1460.14 680.813 L1459.58 680.813 L1459.02 680.813 L1458.46 680.813 L1457.9 680.813 L1457.34 680.813 L1456.78 680.813 L1456.22 680.813 L1455.66 680.813 L1455.1 680.813 L1454.54 680.813 L1453.98 680.813 L1453.42 680.813 L1452.87 680.813 L1452.31 680.813 L1451.75 680.813 L1451.19 680.813 L1450.63 680.813 L1450.07 680.813 L1449.51 680.813 L1448.95 680.813 L1448.39 680.813 L1447.83 680.813 L1447.27 680.813 L1446.71 680.813 L1446.15 680.813 L1445.6 680.813 L1445.04 680.813 L1444.48 680.813 L1443.92 680.813 L1443.36 680.813 L1442.8 680.813 L1442.24 680.813 L1441.68 680.813 L1441.12 680.813 L1440.56 680.813 L1440 680.813 L1439.44 680.813 L1438.88 680.813 L1438.33 680.813 L1437.77 680.813 L1437.21 680.813 L1436.65 680.813 L1436.09 680.813 L1435.53 680.813 L1434.97 680.813 L1434.41 680.813 L1433.85 680.813 L1433.29 680.813 L1432.73 680.813 L1432.17 680.813 L1431.61 680.813 L1431.05 680.813 L1430.5 680.813 L1429.94 680.813 L1429.38 680.813 L1428.82 680.813 L1428.26 680.813 L1427.7 680.813 L1427.14 680.813 L1426.58 680.813 L1426.02 680.813 L1425.46 680.813 L1424.9 680.813 L1424.34 680.813 L1423.78 680.813 L1423.23 680.813 L1422.67 680.813 L1422.11 680.813 L1421.55 680.813 L1420.99 680.813 L1420.43 680.813 L1419.87 680.813 L1419.31 680.813 L1418.75 680.813 L1418.19 680.813 L1417.63 680.813 L1417.07 680.813 L1416.51 680.813 L1415.95 680.813 L1415.4 680.813 L1414.84 680.813 L1414.28 680.813 L1413.72 680.813 L1413.16 680.813 L1412.6 680.813 L1412.04 680.813 L1411.48 680.813 L1410.92 680.813 L1410.36 680.813 L1409.8 680.813 L1409.24 680.813 L1408.68 680.813 L1408.13 680.813 L1407.57 680.813 L1407.01 680.813 L1406.45 680.813 L1405.89 680.813 L1405.33 680.813 L1404.77 680.813 L1404.21 680.813 L1403.65 680.813 L1403.09 680.813 L1402.53 680.813 L1401.97 680.813 L1401.41 680.813 L1400.86 680.813 L1400.3 680.813 L1399.74 680.813 L1399.18 680.813 L1398.62 680.813 L1398.06 680.813 L1397.5 680.813 L1396.94 680.813 L1396.38 680.813 L1395.82 680.813 L1395.26 680.813 L1394.7 680.813 L1394.14 680.813 L1393.58 680.813 L1393.03 680.813 L1392.47 680.813 L1391.91 680.813 L1391.35 680.813 L1390.79 680.813 L1390.23 680.813 L1389.67 680.813 L1389.11 680.813 L1388.55 680.813 L1387.99 680.813 L1387.43 680.813 L1386.87 680.813 L1386.31 680.813 L1385.76 680.813 L1385.2 680.813 L1384.64 680.813 L1384.08 680.813 L1383.52 680.813 L1382.96 680.813 L1382.4 680.813 L1381.84 680.813 L1381.28 680.813 L1380.72 680.813 L1380.16 680.813 L1379.6 680.813 L1379.04 680.813 L1378.49 680.813 L1377.93 680.813 L1377.37 680.813 L1376.81 680.813 L1376.25 680.813 L1375.69 680.813 L1375.13 680.813 L1374.57 680.813 L1374.01 680.813 L1373.45 680.813 L1372.89 680.813 L1372.33 680.813 L1371.77 680.813 L1371.21 680.813 L1370.66 680.813 L1370.1 680.813 L1369.54 680.813 L1368.98 680.813 L1368.42 680.813 L1367.86 680.813 L1367.3 680.813 L1366.74 680.813 L1366.18 680.813 L1365.62 680.813 L1365.06 680.813 L1364.5 680.813 L1363.94 680.813 L1363.39 680.813 L1362.83 680.813 L1362.27 680.813 L1361.71 680.813 L1361.15 680.813 L1360.59 680.813 L1360.03 680.813 L1359.47 680.813 L1358.91 680.813 L1358.35 680.813 L1357.79 680.813 L1357.23 680.813 L1356.67 680.813 L1356.12 680.813 L1355.56 680.813 L1355 680.813 L1354.44 680.813 L1353.88 680.813 L1353.32 680.813 L1352.76 680.813 L1352.2 680.813 L1351.64 680.813 L1351.08 680.813 L1350.52 680.813 L1349.96 680.813 L1349.4 680.813 L1348.84 680.813 L1348.29 680.813 L1347.73 680.813 L1347.17 680.813 L1346.61 680.813 L1346.05 680.813 L1345.49 680.813 L1344.93 680.813 L1344.37 680.813 L1343.81 680.813 L1343.25 680.813 L1342.69 680.813 L1342.13 680.813 L1341.57 680.813 L1341.02 680.813 L1340.46 680.813 L1339.9 680.813 L1339.34 680.813 L1338.78 680.813 L1338.22 680.813 L1337.66 680.813 L1337.1 680.813 L1336.54 680.813 L1335.98 680.813 L1335.42 680.813 L1334.86 680.813 L1334.3 680.813 L1333.75 680.813 L1333.19 680.813 L1332.63 680.813 L1332.07 680.813 L1331.51 680.813 L1330.95 680.813 L1330.39 680.813 L1329.83 680.813 L1329.27 680.813 L1328.71 680.813 L1328.15 680.813 L1327.59 680.813 L1327.03 680.813 L1326.47 680.813 L1325.92 680.813 L1325.36 680.813 L1324.8 680.813 L1324.24 680.813 L1323.68 680.813 L1323.12 680.813 L1322.56 680.813 L1322 680.813 L1321.44 680.813 L1320.88 680.813 L1320.32 680.813 L1319.76 680.813 L1319.2 680.813 L1318.65 680.813 L1318.09 680.813 L1317.53 680.813 L1316.97 680.813 L1316.41 680.813 L1315.85 680.813 L1315.29 680.813 L1314.73 680.813 L1314.17 680.813 L1313.61 680.813 L1313.05 680.813 L1312.49 680.813 L1311.93 680.813 L1311.38 680.813 L1310.82 680.813 L1310.26 680.813 L1309.7 680.813 L1309.14 680.813 L1308.58 680.813 L1308.02 680.813 L1307.46 680.813 L1306.9 680.813 L1306.34 680.813 L1305.78 680.813 L1305.22 680.813 L1304.66 680.813 L1304.1 680.813 L1303.55 680.813 L1302.99 680.813 L1302.43 680.813 L1301.87 680.813 L1301.31 680.813 L1300.75 680.813 L1300.19 680.813 L1299.63 680.813 L1299.07 680.813 L1298.51 680.813 L1297.95 680.813 L1297.39 680.813 L1296.83 680.813 L1296.28 680.813 L1295.72 680.813 L1295.16 680.813 L1294.6 680.813 L1294.04 680.813 L1293.48 680.813 L1292.92 680.813 L1292.36 680.813 L1291.8 680.813 L1291.24 680.813 L1290.68 680.813 L1290.12 680.813 L1289.56 680.813 L1289 680.813 L1288.45 680.813 L1287.89 680.813 L1287.33 680.813 L1286.77 680.813 L1286.21 680.813 L1285.65 680.813 L1285.09 680.813 L1284.53 680.813 L1283.97 680.813 L1283.41 680.813 L1282.85 680.813 L1282.29 680.813 L1281.73 680.813 L1281.18 680.813 L1280.62 680.813 L1280.06 680.813 L1279.5 680.813 L1278.94 680.813 L1278.38 680.813 L1277.82 680.813 L1277.26 680.813 L1276.7 680.813 L1276.14 680.813 L1275.58 680.813 L1275.02 680.813 L1274.46 680.813 L1273.91 680.813 L1273.35 680.813 L1272.79 680.813 L1272.23 680.813 L1271.67 680.813 L1271.11 680.813 L1270.55 680.813 L1269.99 680.813 L1269.43 680.813 L1268.87 680.813 L1268.31 680.813 L1267.75 680.813 L1267.19 680.813 L1266.63 680.813 L1266.08 680.813 L1265.52 680.813 L1264.96 680.813 L1264.4 680.813 L1263.84 680.813 L1263.28 680.813 L1262.72 680.813 L1262.16 680.813 L1261.6 680.813 L1261.04 680.813 L1260.48 680.813 L1259.92 680.813 L1259.36 680.813 L1258.81 680.813 L1258.25 680.813 L1257.69 680.813 L1257.13 680.813 L1256.57 680.813 L1256.01 680.813 L1255.45 680.813 L1254.89 680.813 L1254.33 680.813 L1253.77 680.813 L1253.21 680.813 L1252.65 680.813 L1252.09 680.813 L1251.54 680.813 L1250.98 680.813 L1250.42 680.813 L1249.86 680.813 L1249.3 680.813 L1248.74 680.813 L1248.18 680.813 L1247.62 680.813 L1247.06 680.813 L1246.5 680.813 L1245.94 680.813 L1245.38 680.813 L1244.82 680.813 L1244.26 680.813 L1243.71 680.813 L1243.15 680.813 L1242.59 680.813 L1242.03 680.813 L1241.47 680.813 L1240.91 680.813 L1240.35 680.813 L1239.79 680.813 L1239.23 680.813 L1238.67 680.813 L1238.11 680.813 L1237.55 680.813 L1236.99 680.813 L1236.44 680.813 L1235.88 680.813 L1235.32 680.813 L1234.76 680.813 L1234.2 680.813 L1233.64 680.813 L1233.08 680.813 L1232.52 680.813 L1231.96 680.813 L1231.4 680.813 L1230.84 680.813 L1230.28 680.813 L1229.72 680.813 L1229.17 680.813 L1228.61 680.813 L1228.05 680.813 L1227.49 680.813 L1226.93 680.813 L1226.37 680.813 L1225.81 680.813 L1225.25 680.813 L1224.69 680.813 L1224.13 680.813 L1223.57 680.813 L1223.01 680.813 L1222.45 680.813 L1221.89 680.813 L1221.34 680.813 L1220.78 680.813 L1220.22 680.813 L1219.66 680.813 L1219.1 680.813 L1218.54 680.813 L1217.98 680.813 L1217.42 680.813 L1216.86 680.813 L1216.3 680.813 L1215.74 680.813 L1215.18 680.813 L1214.62 680.813 L1214.07 680.813 L1213.51 680.813 L1212.95 680.813 L1212.39 680.813 L1211.83 680.813 L1211.27 680.813 L1210.71 680.813 L1210.15 680.813 L1209.59 680.813 L1209.03 680.813 L1208.47 680.813 L1207.91 680.813 L1207.35 680.813 L1206.8 680.813 L1206.24 680.813 L1205.68 680.813 L1205.12 680.813 L1204.56 680.813 L1204 680.813 L1203.44 680.813 L1202.88 680.813 L1202.32 680.813 L1201.76 680.813 L1201.2 680.813 L1200.64 680.813 L1200.08 680.813 L1199.52 680.813 L1198.97 680.813 L1198.41 680.813 L1197.85 680.813 L1197.29 680.813 L1196.73 680.813 L1196.17 680.813 L1195.61 680.813 L1195.05 680.813 L1194.49 680.813 L1193.93 680.813 L1193.37 680.813 L1192.81 680.813 L1192.25 680.813 L1191.7 680.813 L1191.14 680.813 L1190.58 680.813 L1190.02 680.813 L1189.46 680.813 L1188.9 680.813 L1188.34 680.813 L1187.78 680.813 L1187.22 680.813 L1186.66 680.813 L1186.1 680.813 L1185.54 680.813 L1184.98 680.813 L1184.43 680.813 L1183.87 680.813 L1183.31 680.813 L1182.75 680.813 L1182.19 680.813 L1181.63 680.813 L1181.07 680.813 L1180.51 680.813 L1179.95 680.813 L1179.39 680.813 L1178.83 680.813 L1178.27 680.813 L1177.71 680.813 L1177.15 680.813 L1176.6 680.813 L1176.04 680.813 L1175.48 680.813 L1174.92 680.813 L1174.36 680.813 L1173.8 680.813 L1173.24 680.813 L1172.68 680.813 L1172.12 680.813 L1171.56 680.813 L1171 680.813 L1170.44 680.813 L1169.88 680.813 L1169.33 680.813 L1168.77 680.813 L1168.21 680.813 L1167.65 680.813 L1167.09 680.813 L1166.53 680.813 L1165.97 680.813 L1165.41 680.813 L1164.85 680.813 L1164.29 680.813 L1163.73 680.813 L1163.17 680.813 L1162.61 680.813 L1162.05 680.813 L1161.5 680.813 L1160.94 680.813 L1160.38 680.813 L1159.82 680.813 L1159.26 680.813 L1158.7 680.813 L1158.14 680.813 L1157.58 680.813 L1157.02 680.813 L1156.46 680.813 L1155.9 680.813 L1155.34 680.813 L1154.78 680.813 L1154.23 680.813 L1153.67 680.813 L1153.11 680.813 L1152.55 680.813 L1151.99 680.813 L1151.43 680.813 L1150.87 680.813 L1150.31 680.813 L1149.75 680.813 L1149.19 680.813 L1148.63 680.813 L1148.07 680.813 L1147.51 680.813 L1146.96 680.813 L1146.4 680.813 L1145.84 680.813 L1145.28 680.813 L1144.72 680.813 L1144.16 680.813 L1143.6 680.813 L1143.04 680.813 L1142.48 680.813 L1141.92 680.813 L1141.36 680.813 L1140.8 680.813 L1140.24 680.813 L1139.68 680.813 L1139.13 680.813 L1138.57 680.813 L1138.01 680.813 L1137.45 680.813 L1136.89 680.813 L1136.33 680.813 L1135.77 680.813 L1135.21 680.813 L1134.65 680.813 L1134.09 680.813 L1133.53 680.813 L1132.97 680.813 L1132.41 680.813 L1131.86 680.813 L1131.3 680.813 L1130.74 680.813 L1130.18 680.813 L1129.62 680.813 L1129.06 680.813 L1128.5 680.813 L1127.94 680.813 L1127.38 680.813 L1126.82 680.813 L1126.26 680.813 L1125.7 680.813 L1125.14 680.813 L1124.59 680.813 L1124.03 680.813 L1123.47 680.813 L1122.91 680.813 L1122.35 680.813 L1121.79 680.813 L1121.23 680.813 L1120.67 680.813 L1120.11 680.813 L1119.55 680.813 L1118.99 680.813 L1118.43 680.813 L1117.87 680.813 L1117.31 680.813 L1116.76 680.813 L1116.2 680.813 L1115.64 680.813 L1115.08 680.813 L1114.52 680.813 L1113.96 680.813 L1113.4 680.813 L1112.84 680.813 L1112.28 680.813 L1111.72 680.813 L1111.16 680.813 L1110.6 680.813 L1110.04 680.813 L1109.49 680.813 L1108.93 680.813 L1108.37 680.813 L1107.81 680.813 L1107.25 680.813 L1106.69 680.813 L1106.13 680.813 L1105.57 680.813 L1105.01 680.813 L1104.45 680.813 L1103.89 680.813 L1103.33 680.813 L1102.77 680.813 L1102.22 680.813 L1101.66 680.813 L1101.1 680.813 L1100.54 680.813 L1099.98 680.813 L1099.42 680.813 L1098.86 680.813 L1098.3 680.813 L1097.74 680.813 L1097.18 680.813 L1096.62 680.813 L1096.06 680.813 L1095.5 680.813 L1094.94 680.813 L1094.39 680.813 L1093.83 680.813 L1093.27 680.813 L1092.71 680.813 L1092.15 680.813 L1091.59 680.813 L1091.03 680.813 L1090.47 680.813 L1089.91 680.813 L1089.35 680.813 L1088.79 680.813 L1088.23 680.813 L1087.67 680.813 L1087.12 680.813 L1086.56 680.813 L1086 680.813 L1085.44 680.813 L1084.88 680.813 L1084.32 680.813 L1083.76 680.813 L1083.2 680.813 L1082.64 680.813 L1082.08 680.813 L1081.52 680.813 L1080.96 680.813 L1080.4 680.813 L1079.85 680.813 L1079.29 680.813 L1078.73 680.813 L1078.17 680.813 L1077.61 680.813 L1077.05 680.813 L1076.49 680.813 L1075.93 680.813 L1075.37 680.813 L1074.81 680.813 L1074.25 680.813 L1073.69 680.813 L1073.13 680.813 L1072.57 680.813 L1072.02 680.813 L1071.46 680.813 L1070.9 680.813 L1070.34 680.813 L1069.78 680.813 L1069.22 680.813 L1068.66 680.813 L1068.1 680.813 L1067.54 680.813 L1066.98 680.813 L1066.42 680.813 L1065.86 680.813 L1065.3 680.813 L1064.75 680.813 L1064.19 680.813 L1063.63 680.813 L1063.07 680.813 L1062.51 680.813 L1061.95 680.813 L1061.39 680.813 L1060.83 680.813 L1060.27 680.813 L1059.71 680.813 L1059.15 680.813 L1058.59 680.813 L1058.03 680.813 L1057.48 680.813 L1056.92 680.813 L1056.36 680.813 L1055.8 680.813 L1055.24 680.813 L1054.68 680.813 L1054.12 680.813 L1053.56 680.813 L1053 680.813 L1052.44 680.813 L1051.88 680.813 L1051.32 680.813 L1050.76 680.813 L1050.2 680.813 L1049.65 680.813 L1049.09 680.813 L1048.53 680.813 L1047.97 680.813 L1047.41 680.813 L1046.85 680.813 L1046.29 680.813 L1045.73 680.813 L1045.17 680.813 L1044.61 680.813 L1044.05 680.813 L1043.49 680.813 L1042.93 680.813 L1042.38 680.813 L1041.82 680.813 L1041.26 680.813 L1040.7 680.813 L1040.14 680.813 L1039.58 680.813 L1039.02 680.813 L1038.46 680.813 L1037.9 680.813 L1037.34 680.813 L1036.78 680.813 L1036.22 680.813 L1035.66 680.813 L1035.1 680.813 L1034.55 680.813 L1033.99 680.813 L1033.43 680.813 L1032.87 680.813 L1032.31 680.813 L1031.75 680.813 L1031.19 680.813 L1030.63 680.813 L1030.07 680.813 L1029.51 680.813 L1028.95 680.813 L1028.39 680.813 L1027.83 680.813 L1027.28 680.813 L1026.72 680.813 L1026.16 680.813 L1025.6 680.813 L1025.04 680.813 L1024.48 680.813 L1023.92 680.813 L1023.36 680.813 L1022.8 680.813 L1022.24 680.813 L1021.68 680.813 L1021.12 680.813 L1020.56 680.813 L1020.01 680.813 L1019.45 680.813 L1018.89 680.813 L1018.33 680.813 L1017.77 680.813 L1017.21 680.813 L1016.65 680.813 L1016.09 680.813 L1015.53 680.813 L1014.97 680.813 L1014.41 680.813 L1013.85 680.813 L1013.29 680.813 L1012.73 680.813 L1012.18 680.813 L1011.62 680.813 L1011.06 680.813 L1010.5 680.813 L1009.94 680.813 L1009.38 680.813 L1008.82 680.813 L1008.26 680.813 L1007.7 680.813 L1007.14 680.813 L1006.58 680.813 L1006.02 680.813 L1005.46 680.813 L1004.91 680.813 L1004.35 680.813 L1003.79 680.813 L1003.23 680.813 L1002.67 680.813 L1002.11 680.813 L1001.55 680.813 L1000.99 680.813 L1000.43 680.813 L999.872 680.813 L999.313 680.813 L998.754 680.813 L998.194 680.813 L997.635 680.813 L997.076 680.813 L996.517 680.813 L995.957 680.813 L995.398 680.813 L994.839 680.813 L994.28 680.813 L993.72 680.813 L993.161 680.813 L992.602 680.813 L992.043 680.813 L991.483 680.813 L990.924 680.813 L990.365 680.813 L989.806 680.813 L989.246 680.813 L988.687 680.813 L988.128 680.813 L987.569 680.813 L987.009 680.813 L986.45 680.813 L985.891 680.813 L985.332 680.813 L984.772 680.813 L984.213 680.813 L983.654 680.813 L983.095 680.813 L982.535 680.813 L981.976 680.813 L981.417 680.813 L980.858 680.813 L980.298 680.813 L979.739 680.813 L979.18 680.813 L978.621 680.813 L978.061 680.813 L977.502 680.813 L976.943 680.813 L976.384 680.813 L975.824 680.813 L975.265 680.813 L974.706 680.813 L974.147 680.813 L973.587 680.813 L973.028 680.813 L972.469 680.813 L971.91 680.813 L971.35 680.813 L970.791 680.813 L970.232 680.813 L969.673 680.813 L969.113 680.813 L968.554 680.813 L967.995 680.813 L967.436 680.813 L966.876 680.813 L966.317 680.813 L965.758 680.813 L965.199 680.813 L964.639 680.813 L964.08 680.813 L963.521 680.813 L962.962 680.813 L962.402 680.813 L961.843 680.813 L961.284 680.813 L960.725 680.813 L960.165 680.813 L959.606 680.813 L959.047 680.813 L958.488 680.813 L957.928 680.813 L957.369 680.813 L956.81 680.813 L956.251 680.813 L955.691 680.813 L955.132 680.813 L954.573 680.813 L954.014 680.813 L953.454 680.813 L952.895 680.813 L952.336 680.813 L951.777 680.813 L951.217 680.813 L950.658 680.813 L950.099 680.813 L949.54 680.813 L948.98 680.813 L948.421 680.813 L947.862 680.813 L947.303 680.813 L946.743 680.813 L946.184 680.813 L945.625 680.813 L945.066 680.813 L944.506 680.813 L943.947 680.813 L943.388 680.813 L942.829 680.813 L942.269 680.813 L941.71 680.813 L941.151 680.813 L940.592 680.813 L940.032 680.813 L939.473 680.813 L938.914 680.813 L938.355 680.813 L937.795 680.813 L937.236 680.813 L936.677 680.813 L936.118 680.813 L935.558 680.813 L934.999 680.813 L934.44 680.813 L933.881 680.813 L933.321 680.813 L932.762 680.813 L932.203 680.813 L931.644 680.813 L931.084 680.813 L930.525 680.813 L929.966 680.813 L929.406 680.813 L928.847 680.813 L928.288 680.813 L927.729 680.813 L927.169 680.813 L926.61 680.813 L926.051 680.813 L925.492 680.813 L924.932 680.813 L924.373 680.813 L923.814 680.813 L923.255 680.813 L922.695 680.813 L922.136 680.813 L921.577 680.813 L921.018 680.813 L920.458 680.813 L919.899 680.813 L919.34 680.813 L918.781 680.813 L918.221 680.813 L917.662 680.813 L917.103 680.813 L916.544 680.813 L915.984 680.813 L915.425 680.813 L914.866 680.813 L914.307 680.813 L913.747 680.813 L913.188 680.813 L912.629 680.813 L912.07 680.813 L911.51 680.813 L910.951 680.813 L910.392 680.813 L909.833 680.813 L909.273 680.813 L908.714 680.813 L908.155 680.813 L907.596 680.813 L907.036 680.813 L906.477 680.813 L905.918 680.813 L905.359 680.813 L904.799 680.813 L904.24 680.813 L903.681 680.813 L903.122 680.813 L902.562 680.813 L902.003 680.813 L901.444 680.813 L900.885 680.813 L900.325 680.813 L899.766 680.813 L899.207 680.813 L898.648 680.813 L898.088 680.813 L897.529 680.813 L896.97 680.813 L896.411 680.813 L895.851 680.813 L895.292 680.813 L894.733 680.813 L894.174 680.813 L893.614 680.813 L893.055 680.813 L892.496 680.813 L891.937 680.813 L891.377 680.813 L890.818 680.813 L890.259 680.813 L889.7 680.813 L889.14 680.813 L888.581 680.813 L888.022 680.813 L887.463 680.813 L886.903 680.813 L886.344 680.813 L885.785 680.813 L885.226 680.813 L884.666 680.813 L884.107 680.813 L883.548 680.813 L882.989 680.813 L882.429 680.813 L881.87 680.813 L881.311 680.813 L880.752 680.813 L880.192 680.813 L879.633 680.813 L879.074 680.813 L878.515 680.813 L877.955 680.813 L877.396 680.813 L876.837 680.813 L876.278 680.813 L875.718 680.813 L875.159 680.813 L874.6 680.813 L874.041 680.813 L873.481 680.813 L872.922 680.813 L872.363 680.813 L871.804 680.813 L871.244 680.813 L870.685 680.813 L870.126 680.813 L869.567 680.813 L869.007 680.813 L868.448 680.813 L867.889 680.813 L867.33 680.813 L866.77 680.813 L866.211 680.813 L865.652 680.813 L865.093 680.813 L864.533 680.813 L863.974 680.813 L863.415 680.813 L862.856 680.813 L862.296 680.813 L861.737 680.813 L861.178 680.813 L860.619 680.813 L860.059 680.813 L859.5 680.813 L858.941 680.813 L858.382 680.813 L857.822 680.813 L857.263 680.813 L856.704 680.813 L856.145 680.813 L855.585 680.813 L855.026 680.813 L854.467 680.813 L853.908 680.813 L853.348 680.813 L852.789 680.813 L852.23 680.813 L851.671 680.813 L851.111 680.813 L850.552 680.813 L849.993 680.813 L849.434 680.813 L848.874 680.813 L848.315 680.813 L847.756 680.813 L847.197 680.813 L846.637 680.813 L846.078 680.813 L845.519 680.813 L844.96 680.813 L844.4 680.813 L843.841 680.813 L843.282 680.813 L842.723 680.813 L842.163 680.813 L841.604 680.813 L841.045 680.813 L840.486 680.813 L839.926 680.813 L839.367 680.813 L838.808 680.813 L838.249 680.813 L837.689 680.813 L837.13 680.813 L836.571 680.813 L836.012 680.813 L835.452 680.813 L834.893 680.813 L834.334 680.813 L833.775 680.813 L833.215 680.813 L832.656 680.813 L832.097 680.813 L831.538 680.813 L830.978 680.813 L830.419 680.813 L829.86 680.813 L829.301 680.813 L828.741 680.813 L828.182 680.813 L827.623 680.813 L827.064 680.813 L826.504 680.813 L825.945 680.813 L825.386 680.813 L824.827 680.813 L824.267 680.813 L823.708 680.813 L823.149 680.813 L822.59 680.813 L822.03 680.813 L821.471 680.813 L820.912 680.813 L820.353 680.813 L819.793 680.813 L819.234 680.813 L818.675 680.813 L818.116 680.813 L817.556 680.813 L816.997 680.813 L816.438 680.813 L815.879 680.813 L815.319 680.813 L814.76 680.813 L814.201 680.813 L813.642 680.813 L813.082 680.813 L812.523 680.813 L811.964 680.813 L811.405 680.813 L810.845 680.813 L810.286 680.813 L809.727 680.813 L809.168 680.813 L808.608 680.813 L808.049 680.813 L807.49 680.813 L806.931 680.813 L806.371 680.813 L805.812 680.813 L805.253 680.813 L804.693 680.813 L804.134 680.813 L803.575 680.813 L803.016 680.813 L802.456 680.813 L801.897 680.813 L801.338 680.813 L800.779 680.813 L800.219 680.813 L799.66 680.813 L799.101 680.813 L798.542 680.813 L797.982 680.813 L797.423 680.813 L796.864 680.813 L796.305 680.813 L795.745 680.813 L795.186 680.813 L794.627 680.813 L794.068 680.813 L793.508 680.813 L792.949 680.813 L792.39 680.813 L791.831 680.813 L791.271 680.813 L790.712 680.813 L790.153 680.813 L789.594 680.813 L789.034 680.813 L788.475 680.813 L787.916 680.813 L787.357 680.813 L786.797 680.813 L786.238 680.813 L785.679 680.813 L785.12 680.813 L784.56 680.813 L784.001 680.813 L783.442 680.813 L782.883 680.813 L782.323 680.813 L781.764 680.813 L781.205 680.813 L780.646 680.813 L780.086 680.813 L779.527 680.813 L778.968 680.813 L778.409 680.813 L777.849 680.813 L777.29 680.813 L776.731 680.813 L776.172 680.813 L775.612 680.813 L775.053 680.813 L774.494 680.813 L773.935 680.813 L773.375 680.813 L772.816 680.813 L772.257 680.813 L771.698 680.813 L771.138 680.813 L770.579 680.813 L770.02 680.813 L769.461 680.813 L768.901 680.813 L768.342 680.813 L767.783 680.813 L767.224 680.813 L766.664 680.813 L766.105 680.813 L765.546 680.813 L764.987 680.813 L764.427 680.813 L763.868 680.813 L763.309 680.813 L762.75 680.813 L762.19 680.813 L761.631 680.813 L761.072 680.813 L760.513 680.813 L759.953 680.813 L759.394 680.813 L758.835 680.813 L758.276 680.813 L757.716 680.813 L757.157 680.813 L756.598 680.813 L756.039 680.813 L755.479 680.813 L754.92 680.813 L754.361 680.813 L753.802 680.813 L753.242 680.813 L752.683 680.813 L752.124 680.813 L751.565 680.813 L751.005 680.813 L750.446 680.813 L749.887 680.813 L749.328 680.813 L748.768 680.813 L748.209 680.813 L747.65 680.813 L747.091 680.813 L746.531 680.813 L745.972 680.813 L745.413 680.813 L744.854 680.813 L744.294 680.813 L743.735 680.813 L743.176 680.813 L742.617 680.813 L742.057 680.813 L741.498 680.813 L740.939 680.813 L740.38 680.813 L739.82 680.813 L739.261 680.813 L738.702 680.813 L738.143 680.813 L737.583 680.813 L737.024 680.813 L736.465 680.813 L735.906 680.813 L735.346 680.813 L734.787 680.813 L734.228 680.813 L733.669 680.813 L733.109 680.813 L732.55 680.813 L731.991 680.813 L731.432 680.813 L730.872 680.813 L730.313 680.813 L729.754 680.813 L729.195 680.813 L728.635 680.813 L728.076 680.813 L727.517 680.813 L726.958 680.813 L726.398 680.813 L725.839 680.813 L725.28 680.813 L724.721 680.813 L724.161 680.813 L723.602 680.813 L723.043 680.813 L722.484 680.813 L721.924 680.813 L721.365 680.813 L720.806 680.813 L720.247 680.813  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.242 720.806,685.242 721.365,685.242 721.924,685.242 722.484,685.242 723.043,685.242 723.602,685.242 724.161,685.242 724.721,685.242 725.28,685.242 725.839,685.242 726.398,685.242 726.958,685.242 727.517,685.242 728.076,685.242 728.635,685.242 729.195,685.242 729.754,685.242 730.313,685.242 730.872,685.242 731.432,685.242 731.991,685.242 732.55,685.242 733.109,685.242 733.669,685.242 734.228,685.242 734.787,685.242 735.346,685.242 735.906,685.242 736.465,685.242 737.024,685.242 737.583,685.242 738.143,685.242 738.702,685.242 739.261,685.242 739.82,685.242 740.38,685.242 740.939,685.242 741.498,685.242 742.057,685.242 742.617,685.242 743.176,685.242 743.735,685.242 744.294,685.242 744.854,685.242 745.413,685.242 745.972,685.242 746.531,685.242 747.091,685.242 747.65,685.242 748.209,685.242 748.768,685.242 749.328,685.242 749.887,685.242 750.446,685.242 751.005,685.242 751.565,685.242 752.124,685.242 752.683,685.242 753.242,685.242 753.802,685.242 754.361,685.242 754.92,685.242 755.479,685.242 756.039,685.242 756.598,685.242 757.157,685.242 757.716,685.242 758.276,685.242 758.835,685.242 759.394,685.242 759.953,685.242 760.513,685.242 761.072,685.242 761.631,685.242 762.19,685.242 762.75,685.242 763.309,685.242 763.868,685.242 764.427,685.242 764.987,685.242 765.546,685.242 766.105,685.242 766.664,685.242 767.224,685.242 767.783,685.242 768.342,685.242 768.901,685.242 769.461,685.242 770.02,685.242 770.579,685.242 771.138,685.242 771.698,685.242 772.257,685.242 772.816,685.242 773.375,685.242 773.935,685.242 774.494,685.242 775.053,685.242 775.612,685.242 776.172,685.242 776.731,685.242 777.29,685.242 777.849,685.242 778.409,685.242 778.968,685.242 779.527,685.242 780.086,685.242 780.646,685.242 781.205,685.242 781.764,685.242 782.323,685.242 782.883,685.242 783.442,685.242 784.001,685.242 784.56,685.242 785.12,685.242 785.679,685.242 786.238,685.242 786.797,685.242 787.357,685.242 787.916,685.242 788.475,685.242 789.034,685.242 789.594,685.242 790.153,685.242 790.712,685.242 791.271,685.242 791.831,685.242 792.39,685.242 792.949,685.242 793.508,685.242 794.068,685.242 794.627,685.242 795.186,685.242 795.745,685.242 796.305,685.242 796.864,685.242 797.423,685.242 797.982,685.242 798.542,685.242 799.101,685.242 799.66,685.242 800.219,685.242 800.779,685.242 801.338,685.242 801.897,685.242 802.456,685.242 803.016,685.242 803.575,685.242 804.134,685.242 804.693,685.242 805.253,685.242 805.812,685.242 806.371,685.242 806.931,685.242 807.49,685.242 808.049,685.242 808.608,685.242 809.168,685.242 809.727,685.242 810.286,685.242 810.845,685.242 811.405,685.242 811.964,685.242 812.523,685.242 813.082,685.242 813.642,685.242 814.201,685.242 814.76,685.242 815.319,685.242 815.879,685.242 816.438,685.242 816.997,685.242 817.556,685.242 818.116,685.242 818.675,685.242 819.234,685.242 819.793,685.242 820.353,685.242 820.912,685.242 821.471,685.242 822.03,685.242 822.59,685.242 823.149,685.242 823.708,685.242 824.267,685.242 824.827,685.242 825.386,685.242 825.945,685.242 826.504,685.242 827.064,685.242 827.623,685.242 828.182,685.242 828.741,685.242 829.301,685.242 829.86,685.242 830.419,685.242 830.978,685.242 831.538,685.242 832.097,685.242 832.656,685.242 833.215,685.242 833.775,685.242 834.334,685.242 834.893,685.242 835.452,685.242 836.012,685.242 836.571,685.242 837.13,685.242 837.689,685.242 838.249,685.242 838.808,685.242 839.367,685.242 839.926,685.242 840.486,685.242 841.045,685.242 841.604,685.242 842.163,685.242 842.723,685.242 843.282,685.242 843.841,685.242 844.4,685.242 844.96,685.242 845.519,685.242 846.078,685.242 846.637,685.242 847.197,685.242 847.756,685.242 848.315,685.242 848.874,685.242 849.434,685.242 849.993,685.242 850.552,685.242 851.111,685.242 851.671,685.242 852.23,685.242 852.789,685.242 853.348,685.242 853.908,685.242 854.467,685.242 855.026,685.242 855.585,685.242 856.145,685.242 856.704,685.242 857.263,685.242 857.822,685.242 858.382,685.242 858.941,685.242 859.5,685.242 860.059,685.242 860.619,685.242 861.178,685.242 861.737,685.242 862.296,685.242 862.856,685.242 863.415,685.242 863.974,685.242 864.533,685.242 865.093,685.242 865.652,685.242 866.211,685.242 866.77,685.242 867.33,685.242 867.889,685.242 868.448,685.242 869.007,685.242 869.567,685.242 870.126,685.242 870.685,685.242 871.244,685.242 871.804,685.242 872.363,685.242 872.922,685.242 873.481,685.242 874.041,685.242 874.6,685.242 875.159,685.242 875.718,685.242 876.278,685.242 876.837,685.242 877.396,685.242 877.955,685.242 878.515,685.242 879.074,685.242 879.633,685.242 880.192,685.242 880.752,685.242 881.311,685.242 881.87,685.242 882.429,685.242 882.989,685.242 883.548,685.242 884.107,685.242 884.666,685.242 885.226,685.242 885.785,685.242 886.344,685.242 886.903,685.242 887.463,685.242 888.022,685.242 888.581,685.242 889.14,685.242 889.7,685.242 890.259,685.242 890.818,685.242 891.377,685.242 891.937,685.242 892.496,685.242 893.055,685.242 893.614,685.242 894.174,685.242 894.733,685.242 895.292,685.242 895.851,685.242 896.411,685.242 896.97,685.242 897.529,685.242 898.088,685.242 898.648,685.242 899.207,685.242 899.766,685.242 900.325,685.242 900.885,685.242 901.444,685.242 902.003,685.242 902.562,685.242 903.122,685.242 903.681,685.242 904.24,685.242 904.799,685.242 905.359,685.242 905.918,685.242 906.477,685.242 907.036,685.242 907.596,685.242 908.155,685.242 908.714,685.242 909.273,685.242 909.833,685.242 910.392,685.242 910.951,685.242 911.51,685.242 912.07,685.242 912.629,685.242 913.188,685.242 913.747,685.242 914.307,685.242 914.866,685.242 915.425,685.242 915.984,685.242 916.544,685.242 917.103,685.242 917.662,685.242 918.221,685.242 918.781,685.242 919.34,685.242 919.899,685.242 920.458,685.242 921.018,685.242 921.577,685.242 922.136,685.242 922.695,685.242 923.255,685.242 923.814,685.242 924.373,685.242 924.932,685.242 925.492,685.242 926.051,685.242 926.61,685.242 927.169,685.242 927.729,685.242 928.288,685.242 928.847,685.242 929.406,685.242 929.966,685.242 930.525,685.242 931.084,685.242 931.644,685.242 932.203,685.242 932.762,685.242 933.321,685.242 933.881,685.242 934.44,685.242 934.999,685.242 935.558,685.242 936.118,685.242 936.677,685.242 937.236,685.242 937.795,685.242 938.355,685.242 938.914,685.242 939.473,685.242 940.032,685.242 940.592,685.242 941.151,685.242 941.71,685.242 942.269,685.242 942.829,685.242 943.388,685.242 943.947,685.242 944.506,685.242 945.066,685.242 945.625,685.242 946.184,685.242 946.743,685.242 947.303,685.242 947.862,685.242 948.421,685.242 948.98,685.242 949.54,685.242 950.099,685.242 950.658,685.242 951.217,685.242 951.777,685.242 952.336,685.242 952.895,685.242 953.454,685.242 954.014,685.242 954.573,685.242 955.132,685.242 955.691,685.242 956.251,685.242 956.81,685.242 957.369,685.242 957.928,685.242 958.488,685.242 959.047,685.242 959.606,685.242 960.165,685.242 960.725,685.242 961.284,685.242 961.843,685.242 962.402,685.242 962.962,685.242 963.521,685.242 964.08,685.242 964.639,685.242 965.199,685.242 965.758,685.242 966.317,685.242 966.876,685.242 967.436,685.242 967.995,685.242 968.554,685.242 969.113,685.242 969.673,685.242 970.232,685.242 970.791,685.242 971.35,685.242 971.91,685.242 972.469,685.242 973.028,685.242 973.587,685.242 974.147,685.242 974.706,685.242 975.265,685.242 975.824,685.242 976.384,685.242 976.943,685.242 977.502,685.242 978.061,685.242 978.621,685.242 979.18,685.242 979.739,685.242 980.298,685.242 980.858,685.242 981.417,685.242 981.976,685.242 982.535,685.242 983.095,685.242 983.654,685.242 984.213,685.242 984.772,685.242 985.332,685.242 985.891,685.242 986.45,685.242 987.009,685.242 987.569,685.242 988.128,685.242 988.687,685.242 989.246,685.242 989.806,685.242 990.365,685.242 990.924,685.242 991.483,685.242 992.043,685.242 992.602,685.242 993.161,685.242 993.72,685.242 994.28,685.242 994.839,685.242 995.398,685.242 995.957,685.242 996.517,685.242 997.076,685.242 997.635,685.242 998.194,685.242 998.754,685.242 999.313,685.242 999.872,685.242 1000.43,685.242 1000.99,685.242 1001.55,685.242 1002.11,685.242 1002.67,685.242 1003.23,685.242 1003.79,685.242 1004.35,685.242 1004.91,685.242 1005.46,685.242 1006.02,685.242 1006.58,685.242 1007.14,685.242 1007.7,685.242 1008.26,685.242 1008.82,685.242 1009.38,685.242 1009.94,685.242 1010.5,685.242 1011.06,685.242 1011.62,685.242 1012.18,685.242 1012.73,685.242 1013.29,685.242 1013.85,685.242 1014.41,685.242 1014.97,685.242 1015.53,685.242 1016.09,685.242 1016.65,685.242 1017.21,685.242 1017.77,685.242 1018.33,685.242 1018.89,685.242 1019.45,685.242 1020.01,685.242 1020.56,685.242 1021.12,685.242 1021.68,685.242 1022.24,685.242 1022.8,685.242 1023.36,685.242 1023.92,685.242 1024.48,685.242 1025.04,685.242 1025.6,685.242 1026.16,685.242 1026.72,685.242 1027.28,685.242 1027.83,685.242 1028.39,685.242 1028.95,685.242 1029.51,685.242 1030.07,685.242 1030.63,685.242 1031.19,685.242 1031.75,685.242 1032.31,685.242 1032.87,685.242 1033.43,685.242 1033.99,685.242 1034.55,685.242 1035.1,685.242 1035.66,685.242 1036.22,685.242 1036.78,685.242 1037.34,685.242 1037.9,685.242 1038.46,685.242 1039.02,685.242 1039.58,685.242 1040.14,685.242 1040.7,685.242 1041.26,685.242 1041.82,685.242 1042.38,685.242 1042.93,685.242 1043.49,685.242 1044.05,685.242 1044.61,685.242 1045.17,685.242 1045.73,685.242 1046.29,685.242 1046.85,685.242 1047.41,685.242 1047.97,685.242 1048.53,685.242 1049.09,685.242 1049.65,685.242 1050.2,685.242 1050.76,685.242 1051.32,685.242 1051.88,685.242 1052.44,685.242 1053,685.242 1053.56,685.242 1054.12,685.242 1054.68,685.242 1055.24,685.242 1055.8,685.242 1056.36,685.242 1056.92,685.242 1057.48,685.242 1058.03,685.242 1058.59,685.242 1059.15,685.242 1059.71,685.242 1060.27,685.242 1060.83,685.242 1061.39,685.242 1061.95,685.242 1062.51,685.242 1063.07,685.242 1063.63,685.242 1064.19,685.242 1064.75,685.242 1065.3,685.242 1065.86,685.242 1066.42,685.242 1066.98,685.242 1067.54,685.242 1068.1,685.242 1068.66,685.242 1069.22,685.242 1069.78,685.242 1070.34,685.242 1070.9,685.242 1071.46,685.242 1072.02,685.242 1072.57,685.242 1073.13,685.242 1073.69,685.242 1074.25,685.242 1074.81,685.242 1075.37,685.242 1075.93,685.242 1076.49,685.242 1077.05,685.242 1077.61,685.242 1078.17,685.242 1078.73,685.242 1079.29,685.242 1079.85,685.242 1080.4,685.242 1080.96,685.242 1081.52,685.242 1082.08,685.242 1082.64,685.242 1083.2,685.242 1083.76,685.242 1084.32,685.242 1084.88,685.242 1085.44,685.242 1086,685.242 1086.56,685.242 1087.12,685.242 1087.67,685.242 1088.23,685.242 1088.79,685.242 1089.35,685.242 1089.91,685.242 1090.47,685.242 1091.03,685.242 1091.59,685.242 1092.15,685.242 1092.71,685.242 1093.27,685.242 1093.83,685.242 1094.39,685.242 1094.94,685.242 1095.5,685.242 1096.06,685.242 1096.62,685.242 1097.18,685.242 1097.74,685.242 1098.3,685.242 1098.86,685.242 1099.42,685.242 1099.98,685.242 1100.54,685.242 1101.1,685.242 1101.66,685.242 1102.22,685.242 1102.77,685.242 1103.33,685.242 1103.89,685.242 1104.45,685.242 1105.01,685.242 1105.57,685.242 1106.13,685.242 1106.69,685.242 1107.25,685.242 1107.81,685.242 1108.37,685.242 1108.93,685.242 1109.49,685.242 1110.04,685.242 1110.6,685.242 1111.16,685.242 1111.72,685.242 1112.28,685.242 1112.84,685.242 1113.4,685.242 1113.96,685.242 1114.52,685.242 1115.08,685.242 1115.64,685.242 1116.2,685.242 1116.76,685.242 1117.31,685.242 1117.87,685.242 1118.43,685.242 1118.99,685.242 1119.55,685.242 1120.11,685.242 1120.67,685.242 1121.23,685.242 1121.79,685.242 1122.35,685.242 1122.91,685.242 1123.47,685.242 1124.03,685.242 1124.59,685.242 1125.14,685.242 1125.7,685.242 1126.26,685.242 1126.82,685.242 1127.38,685.242 1127.94,685.242 1128.5,685.242 1129.06,685.242 1129.62,685.242 1130.18,685.242 1130.74,685.242 1131.3,685.242 1131.86,685.242 1132.41,685.242 1132.97,685.242 1133.53,685.242 1134.09,685.242 1134.65,685.242 1135.21,685.242 1135.77,685.242 1136.33,685.242 1136.89,685.242 1137.45,685.242 1138.01,685.242 1138.57,685.242 1139.13,685.242 1139.68,685.242 1140.24,685.242 1140.8,685.242 1141.36,685.242 1141.92,685.242 1142.48,685.242 1143.04,685.242 1143.6,685.242 1144.16,685.242 1144.72,685.242 1145.28,685.242 1145.84,685.242 1146.4,685.242 1146.96,685.242 1147.51,685.242 1148.07,685.242 1148.63,685.242 1149.19,685.242 1149.75,685.242 1150.31,685.242 1150.87,685.242 1151.43,685.242 1151.99,685.242 1152.55,685.242 1153.11,685.242 1153.67,685.242 1154.23,685.242 1154.78,685.242 1155.34,685.242 1155.9,685.242 1156.46,685.242 1157.02,685.242 1157.58,685.242 1158.14,685.242 1158.7,685.242 1159.26,685.242 1159.82,685.242 1160.38,685.242 1160.94,685.242 1161.5,685.242 1162.05,685.242 1162.61,685.242 1163.17,685.242 1163.73,685.242 1164.29,685.242 1164.85,685.242 1165.41,685.242 1165.97,685.242 1166.53,685.242 1167.09,685.242 1167.65,685.242 1168.21,685.242 1168.77,685.242 1169.33,685.242 1169.88,685.242 1170.44,685.242 1171,685.242 1171.56,685.242 1172.12,685.242 1172.68,685.242 1173.24,685.242 1173.8,685.242 1174.36,685.242 1174.92,685.242 1175.48,685.242 1176.04,685.242 1176.6,685.242 1177.15,685.242 1177.71,685.242 1178.27,685.242 1178.83,685.242 1179.39,685.242 1179.95,685.242 1180.51,685.242 1181.07,685.242 1181.63,685.242 1182.19,685.242 1182.75,685.242 1183.31,685.242 1183.87,685.242 1184.43,685.242 1184.98,685.242 1185.54,685.242 1186.1,685.242 1186.66,685.242 1187.22,685.242 1187.78,685.242 1188.34,685.242 1188.9,685.242 1189.46,685.242 1190.02,685.242 1190.58,685.242 1191.14,685.242 1191.7,685.242 1192.25,685.242 1192.81,685.242 1193.37,685.242 1193.93,685.242 1194.49,685.242 1195.05,685.242 1195.61,685.242 1196.17,685.242 1196.73,685.242 1197.29,685.242 1197.85,685.242 1198.41,685.242 1198.97,685.242 1199.52,685.242 1200.08,685.242 1200.64,685.242 1201.2,685.242 1201.76,685.242 1202.32,685.242 1202.88,685.242 1203.44,685.242 1204,685.242 1204.56,685.242 1205.12,685.242 1205.68,685.242 1206.24,685.242 1206.8,685.242 1207.35,685.242 1207.91,685.242 1208.47,685.242 1209.03,685.242 1209.59,685.242 1210.15,685.242 1210.71,685.242 1211.27,685.242 1211.83,685.242 1212.39,685.242 1212.95,685.242 1213.51,685.242 1214.07,685.242 1214.62,685.242 1215.18,685.242 1215.74,685.242 1216.3,685.242 1216.86,685.242 1217.42,685.242 1217.98,685.242 1218.54,685.242 1219.1,685.242 1219.66,685.242 1220.22,685.242 1220.78,685.242 1221.34,685.242 1221.89,685.242 1222.45,685.242 1223.01,685.242 1223.57,685.242 1224.13,685.242 1224.69,685.242 1225.25,685.242 1225.81,685.242 1226.37,685.242 1226.93,685.242 1227.49,685.242 1228.05,685.242 1228.61,685.242 1229.17,685.242 1229.72,685.242 1230.28,685.242 1230.84,685.242 1231.4,685.242 1231.96,685.242 1232.52,685.242 1233.08,685.242 1233.64,685.242 1234.2,685.242 1234.76,685.242 1235.32,685.242 1235.88,685.242 1236.44,685.242 1236.99,685.242 1237.55,685.242 1238.11,685.242 1238.67,685.242 1239.23,685.242 1239.79,685.242 1240.35,685.242 1240.91,685.242 1241.47,685.242 1242.03,685.242 1242.59,685.242 1243.15,685.242 1243.71,685.242 1244.26,685.242 1244.82,685.242 1245.38,685.242 1245.94,685.242 1246.5,685.242 1247.06,685.242 1247.62,685.242 1248.18,685.242 1248.74,685.242 1249.3,685.242 1249.86,685.242 1250.42,685.242 1250.98,685.242 1251.54,685.242 1252.09,685.242 1252.65,685.242 1253.21,685.242 1253.77,685.242 1254.33,685.242 1254.89,685.242 1255.45,685.242 1256.01,685.242 1256.57,685.242 1257.13,685.242 1257.69,685.242 1258.25,685.242 1258.81,685.242 1259.36,685.242 1259.92,685.242 1260.48,685.242 1261.04,685.242 1261.6,685.242 1262.16,685.242 1262.72,685.242 1263.28,685.242 1263.84,685.242 1264.4,685.242 1264.96,685.242 1265.52,685.242 1266.08,685.242 1266.63,685.242 1267.19,685.242 1267.75,685.242 1268.31,685.242 1268.87,685.242 1269.43,685.242 1269.99,685.242 1270.55,685.242 1271.11,685.242 1271.67,685.242 1272.23,685.242 1272.79,685.242 1273.35,685.242 1273.91,685.242 1274.46,685.242 1275.02,685.242 1275.58,685.242 1276.14,685.242 1276.7,685.242 1277.26,685.242 1277.82,685.242 1278.38,685.242 1278.94,685.242 1279.5,685.242 1280.06,685.242 1280.62,685.242 1281.18,685.242 1281.73,685.242 1282.29,685.242 1282.85,685.242 1283.41,685.242 1283.97,685.242 1284.53,685.242 1285.09,685.242 1285.65,685.242 1286.21,685.242 1286.77,685.242 1287.33,685.242 1287.89,685.242 1288.45,685.242 1289,685.242 1289.56,685.242 1290.12,685.242 1290.68,685.242 1291.24,685.242 1291.8,685.242 1292.36,685.242 1292.92,685.242 1293.48,685.242 1294.04,685.242 1294.6,685.242 1295.16,685.242 1295.72,685.242 1296.28,685.242 1296.83,685.242 1297.39,685.242 1297.95,685.242 1298.51,685.242 1299.07,685.242 1299.63,685.242 1300.19,685.242 1300.75,685.242 1301.31,685.242 1301.87,685.242 1302.43,685.242 1302.99,685.242 1303.55,685.242 1304.1,685.242 1304.66,685.242 1305.22,685.242 1305.78,685.242 1306.34,685.242 1306.9,685.242 1307.46,685.242 1308.02,685.242 1308.58,685.242 1309.14,685.242 1309.7,685.242 1310.26,685.242 1310.82,685.242 1311.38,685.242 1311.93,685.242 1312.49,685.242 1313.05,685.242 1313.61,685.242 1314.17,685.242 1314.73,685.242 1315.29,685.242 1315.85,685.242 1316.41,685.242 1316.97,685.242 1317.53,685.242 1318.09,685.242 1318.65,685.242 1319.2,685.242 1319.76,685.242 1320.32,685.242 1320.88,685.242 1321.44,685.242 1322,685.242 1322.56,685.242 1323.12,685.242 1323.68,685.242 1324.24,685.242 1324.8,685.242 1325.36,685.242 1325.92,685.242 1326.47,685.242 1327.03,685.242 1327.59,685.242 1328.15,685.242 1328.71,685.242 1329.27,685.242 1329.83,685.242 1330.39,685.242 1330.95,685.242 1331.51,685.242 1332.07,685.242 1332.63,685.242 1333.19,685.242 1333.75,685.242 1334.3,685.242 1334.86,685.242 1335.42,685.242 1335.98,685.242 1336.54,685.242 1337.1,685.242 1337.66,685.242 1338.22,685.242 1338.78,685.242 1339.34,685.242 1339.9,685.242 1340.46,685.242 1341.02,685.242 1341.57,685.242 1342.13,685.242 1342.69,685.242 1343.25,685.242 1343.81,685.242 1344.37,685.242 1344.93,685.242 1345.49,685.242 1346.05,685.242 1346.61,685.242 1347.17,685.242 1347.73,685.242 1348.29,685.242 1348.84,685.242 1349.4,685.242 1349.96,685.242 1350.52,685.242 1351.08,685.242 1351.64,685.242 1352.2,685.242 1352.76,685.242 1353.32,685.242 1353.88,685.242 1354.44,685.242 1355,685.242 1355.56,685.242 1356.12,685.242 1356.67,685.242 1357.23,685.242 1357.79,685.242 1358.35,685.242 1358.91,685.242 1359.47,685.242 1360.03,685.242 1360.59,685.242 1361.15,685.242 1361.71,685.242 1362.27,685.242 1362.83,685.242 1363.39,685.242 1363.94,685.242 1364.5,685.242 1365.06,685.242 1365.62,685.242 1366.18,685.242 1366.74,685.242 1367.3,685.242 1367.86,685.242 1368.42,685.242 1368.98,685.242 1369.54,685.242 1370.1,685.242 1370.66,685.242 1371.21,685.242 1371.77,685.242 1372.33,685.242 1372.89,685.242 1373.45,685.242 1374.01,685.242 1374.57,685.242 1375.13,685.242 1375.69,685.242 1376.25,685.242 1376.81,685.242 1377.37,685.242 1377.93,685.242 1378.49,685.242 1379.04,685.242 1379.6,685.242 1380.16,685.242 1380.72,685.242 1381.28,685.242 1381.84,685.242 1382.4,685.242 1382.96,685.242 1383.52,685.242 1384.08,685.242 1384.64,685.242 1385.2,685.242 1385.76,685.242 1386.31,685.242 1386.87,685.242 1387.43,685.242 1387.99,685.242 1388.55,685.242 1389.11,685.242 1389.67,685.242 1390.23,685.242 1390.79,685.242 1391.35,685.242 1391.91,685.242 1392.47,685.242 1393.03,685.242 1393.58,685.242 1394.14,685.242 1394.7,685.242 1395.26,685.242 1395.82,685.242 1396.38,685.242 1396.94,685.242 1397.5,685.242 1398.06,685.242 1398.62,685.242 1399.18,685.242 1399.74,685.242 1400.3,685.242 1400.86,685.242 1401.41,685.242 1401.97,685.242 1402.53,685.242 1403.09,685.242 1403.65,685.242 1404.21,685.242 1404.77,685.242 1405.33,685.242 1405.89,685.242 1406.45,685.242 1407.01,685.242 1407.57,685.242 1408.13,685.242 1408.68,685.242 1409.24,685.242 1409.8,685.242 1410.36,685.242 1410.92,685.242 1411.48,685.242 1412.04,685.242 1412.6,685.242 1413.16,685.242 1413.72,685.242 1414.28,685.242 1414.84,685.242 1415.4,685.242 1415.95,685.242 1416.51,685.242 1417.07,685.242 1417.63,685.242 1418.19,685.242 1418.75,685.242 1419.31,685.242 1419.87,685.242 1420.43,685.242 1420.99,685.242 1421.55,685.242 1422.11,685.242 1422.67,685.242 1423.23,685.242 1423.78,685.242 1424.34,685.242 1424.9,685.242 1425.46,685.242 1426.02,685.242 1426.58,685.242 1427.14,685.242 1427.7,685.242 1428.26,685.242 1428.82,685.242 1429.38,685.242 1429.94,685.242 1430.5,685.242 1431.05,685.242 1431.61,685.242 1432.17,685.242 1432.73,685.242 1433.29,685.242 1433.85,685.242 1434.41,685.242 1434.97,685.242 1435.53,685.242 1436.09,685.242 1436.65,685.242 1437.21,685.242 1437.77,685.242 1438.33,685.242 1438.88,685.242 1439.44,685.242 1440,685.242 1440.56,685.242 1441.12,685.242 1441.68,685.242 1442.24,685.242 1442.8,685.242 1443.36,685.242 1443.92,685.242 1444.48,685.242 1445.04,685.242 1445.6,685.242 1446.15,685.242 1446.71,685.242 1447.27,685.242 1447.83,685.242 1448.39,685.242 1448.95,685.242 1449.51,685.242 1450.07,685.242 1450.63,685.242 1451.19,685.242 1451.75,685.242 1452.31,685.242 1452.87,685.242 1453.42,685.242 1453.98,685.242 1454.54,685.242 1455.1,685.242 1455.66,685.242 1456.22,685.242 1456.78,685.242 1457.34,685.242 1457.9,685.242 1458.46,685.242 1459.02,685.242 1459.58,685.242 1460.14,685.242 1460.7,685.242 1461.25,685.242 1461.81,685.242 1462.37,685.242 1462.93,685.242 1463.49,685.242 1464.05,685.242 1464.61,685.242 1465.17,685.242 1465.73,685.242 1466.29,685.242 1466.85,685.242 1467.41,685.242 1467.97,685.242 1468.52,685.242 1469.08,685.242 1469.64,685.242 1470.2,685.242 1470.76,685.242 1471.32,685.242 1471.88,685.242 1472.44,685.242 1473,685.242 1473.56,685.242 1474.12,685.242 1474.68,685.242 1475.24,685.242 1475.79,685.242 1476.35,685.242 1476.91,685.242 1477.47,685.242 1478.03,685.242 1478.59,685.242 1479.15,685.242 1479.71,685.242 1480.27,685.242 1480.83,685.242 1481.39,685.242 1481.95,685.242 1482.51,685.242 1483.07,685.242 1483.62,685.242 1484.18,685.242 1484.74,685.242 1485.3,685.242 1485.86,685.242 1486.42,685.242 1486.98,685.242 1487.54,685.242 1488.1,685.242 1488.66,685.242 1489.22,685.242 1489.78,685.242 1490.34,685.242 1490.89,685.242 1491.45,685.242 1492.01,685.242 1492.57,685.242 1493.13,685.242 1493.69,685.242 1494.25,685.242 1494.81,685.242 1495.37,685.242 1495.93,685.242 1496.49,685.242 1497.05,685.242 1497.61,685.242 1498.16,685.242 1498.72,685.242 1499.28,685.242 1499.84,685.242 1500.4,685.242 1500.96,685.242 1501.52,685.242 1502.08,685.242 1502.64,685.242 1503.2,685.242 1503.76,685.242 1504.32,685.242 1504.88,685.242 1505.44,685.242 1505.99,685.242 1506.55,685.242 1507.11,685.242 1507.67,685.242 1508.23,685.242 1508.79,685.242 1509.35,685.242 1509.91,685.242 1510.47,685.242 1511.03,685.242 1511.59,685.242 1512.15,685.242 1512.71,685.242 1513.26,685.242 1513.82,685.242 1514.38,685.242 1514.94,685.242 1515.5,685.242 1516.06,685.242 1516.62,685.242 1517.18,685.242 1517.74,685.242 1518.3,685.242 1518.86,685.242 1519.42,685.242 1519.98,685.242 1520.53,685.242 1521.09,685.242 1521.65,685.242 1522.21,685.242 1522.77,685.242 1523.33,685.242 1523.89,685.242 1524.45,685.242 1525.01,685.242 1525.57,685.242 1526.13,685.242 1526.69,685.242 1527.25,685.242 1527.81,685.242 1528.36,685.242 1528.92,685.242 1529.48,685.242 1530.04,685.242 1530.6,685.242 1531.16,685.242 1531.72,685.242 1532.28,685.242 1532.84,685.242 1533.4,685.242 1533.96,685.242 1534.52,685.242 1535.08,685.242 1535.63,685.242 1536.19,685.242 1536.75,685.242 1537.31,685.242 1537.87,685.242 1538.43,685.242 1538.99,685.242 1539.55,685.242 1540.11,685.242 1540.67,685.242 1541.23,685.242 1541.79,685.242 1542.35,685.242 1542.9,685.242 1543.46,685.242 1544.02,685.242 1544.58,685.242 1545.14,685.242 1545.7,685.242 1546.26,685.242 1546.82,685.242 1547.38,685.242 1547.94,685.242 1548.5,685.242 1549.06,685.242 1549.62,685.242 1550.18,685.242 1550.73,685.242 1551.29,685.242 1551.85,685.242 1552.41,685.242 1552.97,685.242 1553.53,685.242 1554.09,685.242 1554.65,685.242 1555.21,685.242 1555.77,685.242 1556.33,685.242 1556.89,685.242 1557.45,685.242 1558,685.242 1558.56,685.242 1559.12,685.242 1559.68,685.242 1560.24,685.242 1560.8,685.242 1561.36,685.242 1561.92,685.242 1562.48,685.242 1563.04,685.242 1563.6,685.242 1564.16,685.242 1564.72,685.242 1565.28,685.242 1565.83,685.242 1566.39,685.242 1566.95,685.242 1567.51,685.242 1568.07,685.242 1568.63,685.242 1569.19,685.242 1569.75,685.242 1570.31,685.242 1570.87,685.242 1571.43,685.242 1571.99,685.242 1572.55,685.242 1573.1,685.242 1573.66,685.242 1574.22,685.242 1574.78,685.242 1575.34,685.242 1575.9,685.242 1576.46,685.242 1577.02,685.242 1577.58,685.242 1578.14,685.242 1578.7,685.242 1579.26,685.242 1579.82,685.242 1580.37,685.242 1580.93,685.242 1581.49,685.242 1582.05,685.242 1582.61,685.242 1583.17,685.242 1583.73,685.242 1584.29,685.242 1584.85,685.242 1585.41,685.242 1585.97,685.242 1586.53,685.242 1587.09,685.242 1587.65,685.242 1588.2,685.242 1588.76,685.242 1589.32,685.242 1589.88,685.242 1590.44,685.242 1591,685.242 1591.56,685.242 1592.12,685.242 1592.68,685.242 1593.24,685.242 1593.8,685.242 1594.36,685.242 1594.92,685.242 1595.47,685.242 1596.03,685.242 1596.59,685.242 1597.15,685.242 1597.71,685.242 1598.27,685.242 1598.83,685.242 1599.39,685.242 1599.95,685.242 1600.51,685.242 1601.07,685.242 1601.63,685.242 1602.19,685.242 1602.74,685.242 1603.3,685.242 1603.86,685.242 1604.42,685.242 1604.98,685.242 1605.54,685.242 1606.1,685.242 1606.66,685.242 1607.22,685.242 1607.78,685.242 1608.34,685.242 1608.9,685.242 1609.46,685.242 1610.02,685.242 1610.57,685.242 1611.13,685.242 1611.69,685.242 1612.25,685.242 1612.81,685.242 1613.37,685.242 1613.93,685.242 1614.49,685.242 1615.05,685.242 1615.61,685.242 1616.17,685.242 1616.73,685.242 1617.29,685.242 1617.84,685.242 1618.4,685.242 1618.96,685.242 1619.52,685.242 1620.08,685.242 1620.64,685.242 1621.2,685.242 1621.76,685.242 1622.32,685.242 1622.88,685.242 1623.44,685.242 1624,685.242 1624.56,685.242 1625.11,685.242 1625.67,685.242 1626.23,685.242 1626.79,685.242 1627.35,685.242 1627.91,685.242 1628.47,685.242 1629.03,685.242 1629.59,685.242 1630.15,685.242 1630.71,685.242 1631.27,685.242 1631.83,685.242 1632.39,685.242 1632.94,685.242 1633.5,685.242 1634.06,685.242 1634.62,685.242 1635.18,685.242 1635.74,685.242 1636.3,685.242 1636.86,685.242 1637.42,685.242 1637.98,685.242 1638.54,685.242 1639.1,685.242 1639.66,685.242 1640.21,685.242 1640.77,685.242 1641.33,685.242 1641.89,685.242 1642.45,685.242 1643.01,685.242 1643.57,685.242 1644.13,685.242 1644.69,685.242 1645.25,685.242 1645.81,685.242 1646.37,685.242 1646.93,685.242 1647.48,685.242 1648.04,685.242 1648.6,685.242 1649.16,685.242 1649.72,685.242 1650.28,685.242 1650.84,685.242 1651.4,685.242 1651.96,685.242 1652.52,685.242 1653.08,685.242 1653.64,685.242 1654.2,685.242 1654.76,685.242 1655.31,685.242 1655.87,685.242 1656.43,685.242 1656.99,685.242 1657.55,685.242 1658.11,685.242 1658.67,685.242 1659.23,685.242 1659.79,685.242 1660.35,685.242 1660.91,685.242 1661.47,685.242 1662.03,685.242 1662.58,685.242 1663.14,685.242 1663.7,685.242 1664.26,685.242 1664.82,685.242 1665.38,685.242 1665.94,685.242 1666.5,685.242 1667.06,685.242 1667.62,685.242 1668.18,685.242 1668.74,685.242 1669.3,685.242 1669.85,685.242 1670.41,685.242 1670.97,685.242 1671.53,685.242 1672.09,685.242 1672.65,685.242 1673.21,685.242 1673.77,685.242 1674.33,685.242 1674.89,685.242 1675.45,685.242 1676.01,685.242 1676.57,685.242 1677.13,685.242 1677.68,685.242 1678.24,685.242 1678.8,685.242 1679.36,685.242 1679.92,685.242 1680.48,685.242 1681.04,685.242 1681.6,685.242 1682.16,685.242 1682.72,685.242 1683.28,685.242 1683.84,685.242 1684.4,685.242 1684.95,685.242 1685.51,685.242 1686.07,685.242 1686.63,685.242 1687.19,685.242 1687.75,685.242 1688.31,685.242 1688.87,685.242 1689.43,685.242 1689.99,685.242 1690.55,685.242 1691.11,685.242 1691.67,685.242 1692.23,685.242 1692.78,685.242 1693.34,685.242 1693.9,685.242 1694.46,685.242 1695.02,685.242 1695.58,685.242 1696.14,685.242 1696.7,685.242 1697.26,685.242 1697.82,685.242 1698.38,685.242 1698.94,685.242 1699.5,685.242 1700.05,685.242 1700.61,685.242 1701.17,685.242 1701.73,685.242 1702.29,685.242 1702.85,685.242 1703.41,685.242 1703.97,685.242 1704.53,685.242 1705.09,685.242 1705.65,685.242 1706.21,685.242 1706.77,685.242 1707.32,685.242 1707.88,685.242 1708.44,685.242 1709,685.242 1709.56,685.242 1710.12,685.242 1710.68,685.242 1711.24,685.242 1711.8,685.242 1712.36,685.242 1712.92,685.242 1713.48,685.242 1714.04,685.242 1714.6,685.242 1715.15,685.242 1715.71,685.242 1716.27,685.242 1716.83,685.242 1717.39,685.242 1717.95,685.242 1718.51,685.242 1719.07,685.242 1719.63,685.242 1720.19,685.242 1720.75,685.242 1721.31,685.242 1721.87,685.242 1722.42,685.242 1722.98,685.242 1723.54,685.242 1724.1,685.242 1724.66,685.242 1725.22,685.242 1725.78,685.242 1726.34,685.242 1726.9,685.242 1727.46,685.242 1728.02,685.242 1728.58,685.242 1729.14,685.242 1729.69,685.242 1730.25,685.242 1730.81,685.242 1731.37,685.242 1731.93,685.242 1732.49,685.242 1733.05,685.242 1733.61,685.242 1734.17,685.242 1734.73,685.242 1735.29,685.242 1735.85,685.242 1736.41,685.242 1736.97,685.242 1737.52,685.242 1738.08,685.242 1738.64,685.242 1739.2,685.242 1739.76,685.242 1740.32,685.242 1740.88,685.242 1741.44,685.242 1742,685.242 1742.56,685.242 1743.12,685.242 1743.68,685.242 1744.24,685.242 1744.79,685.242 1745.35,685.242 1745.91,685.242 1746.47,685.242 1747.03,685.242 1747.59,685.242 1748.15,685.242 1748.71,685.242 1749.27,685.242 1749.83,685.242 1750.39,685.242 1750.95,685.242 1751.51,685.242 1752.06,685.242 1752.62,685.242 1753.18,685.242 1753.74,685.242 1754.3,685.242 1754.86,685.242 1755.42,685.242 1755.98,685.242 1756.54,685.242 1757.1,685.242 1757.66,685.242 1758.22,685.242 1758.78,685.242 1759.34,685.242 1759.89,685.242 1760.45,685.242 1761.01,685.242 1761.57,685.242 1762.13,685.242 1762.69,685.242 1763.25,685.242 1763.81,685.242 1764.37,685.242 1764.93,685.242 1765.49,685.242 1766.05,685.242 1766.61,685.242 1767.16,685.242 1767.72,685.242 1768.28,685.242 1768.84,685.242 1769.4,685.242 1769.96,685.242 1770.52,685.242 1771.08,685.242 1771.64,685.242 1772.2,685.242 1772.76,685.242 1773.32,685.242 1773.88,685.242 1774.43,685.242 1774.99,685.242 1775.55,685.242 1776.11,685.242 1776.67,685.242 1777.23,685.242 1777.79,685.242 1778.35,685.242 1778.91,685.242 1779.47,685.242 1780.03,685.242 1780.59,685.242 1781.15,685.242 1781.71,685.242 1782.26,685.242 1782.82,685.242 1783.38,685.242 1783.94,685.242 1784.5,685.242 1785.06,685.242 1785.62,685.242 1786.18,685.242 1786.74,685.242 1787.3,685.242 1787.86,685.242 1788.42,685.242 1788.98,685.242 1789.53,685.242 1790.09,685.242 1790.65,685.242 1791.21,685.242 1791.77,685.242 1792.33,685.242 1792.89,685.242 1793.45,685.242 1794.01,685.242 1794.57,685.242 1795.13,685.242 1795.69,685.242 1796.25,685.242 1796.8,685.242 1797.36,685.242 1797.92,685.242 1798.48,685.242 1799.04,685.242 1799.6,685.242 1800.16,685.242 1800.72,685.242 1801.28,685.242 1801.84,685.242 1802.4,685.242 1802.96,685.242 1803.52,685.242 1804.08,685.242 1804.63,685.242 1805.19,685.242 1805.75,685.242 1806.31,685.242 1806.87,685.242 1807.43,685.242 1807.99,685.242 1808.55,685.242 1809.11,685.242 1809.67,685.242 1810.23,685.242 1810.79,685.242 1811.35,685.242 1811.9,685.242 1812.46,685.242 1813.02,685.242 1813.58,685.242 1814.14,685.242 1814.7,685.242 1815.26,685.242 1815.82,685.242 1816.38,685.242 1816.94,685.242 1817.5,685.242 1818.06,685.242 1818.62,685.242 1819.18,685.242 1819.73,685.242 1820.29,685.242 1820.85,685.242 1821.41,685.242 1821.97,685.242 1822.53,685.242 1823.09,685.242 1823.65,685.242 1824.21,685.242 1824.77,685.242 1825.33,685.242 1825.89,685.242 1826.45,685.242 1827,685.242 1827.56,685.242 1828.12,685.242 1828.68,685.242 1829.24,685.242 1829.8,685.242 1830.36,685.242 1830.92,685.242 1831.48,685.242 1832.04,685.242 1832.6,685.242 1833.16,685.242 1833.72,685.242 1834.27,685.242 1834.83,685.242 1835.39,685.242 1835.95,685.242 1836.51,685.242 1837.07,685.242 1837.63,685.242 1838.19,685.242 \"/>\n<path clip-path=\"url(#clip683)\" d=\"M720.247 684.511 L720.806 684.511 L721.365 684.511 L721.924 684.511 L722.484 684.511 L723.043 684.511 L723.602 684.511 L724.161 684.511 L724.721 684.511 L725.28 684.511 L725.839 684.511 L726.398 684.511 L726.958 684.511 L727.517 684.511 L728.076 684.511 L728.635 684.511 L729.195 684.511 L729.754 684.511 L730.313 684.511 L730.872 684.511 L731.432 684.511 L731.991 684.511 L732.55 684.511 L733.109 684.511 L733.669 684.511 L734.228 684.511 L734.787 684.511 L735.346 684.511 L735.906 684.511 L736.465 684.511 L737.024 684.511 L737.583 684.511 L738.143 684.511 L738.702 684.511 L739.261 684.511 L739.82 684.511 L740.38 684.511 L740.939 684.511 L741.498 684.511 L742.057 684.511 L742.617 684.511 L743.176 684.511 L743.735 684.511 L744.294 684.511 L744.854 684.511 L745.413 684.511 L745.972 684.511 L746.531 684.511 L747.091 684.511 L747.65 684.511 L748.209 684.511 L748.768 684.511 L749.328 684.511 L749.887 684.511 L750.446 684.511 L751.005 684.511 L751.565 684.511 L752.124 684.511 L752.683 684.511 L753.242 684.511 L753.802 684.511 L754.361 684.511 L754.92 684.511 L755.479 684.511 L756.039 684.511 L756.598 684.511 L757.157 684.511 L757.716 684.511 L758.276 684.511 L758.835 684.511 L759.394 684.511 L759.953 684.511 L760.513 684.511 L761.072 684.511 L761.631 684.511 L762.19 684.511 L762.75 684.511 L763.309 684.511 L763.868 684.511 L764.427 684.511 L764.987 684.511 L765.546 684.511 L766.105 684.511 L766.664 684.511 L767.224 684.511 L767.783 684.511 L768.342 684.511 L768.901 684.511 L769.461 684.511 L770.02 684.511 L770.579 684.511 L771.138 684.511 L771.698 684.511 L772.257 684.511 L772.816 684.511 L773.375 684.511 L773.935 684.511 L774.494 684.511 L775.053 684.511 L775.612 684.511 L776.172 684.511 L776.731 684.511 L777.29 684.511 L777.849 684.511 L778.409 684.511 L778.968 684.511 L779.527 684.511 L780.086 684.511 L780.646 684.511 L781.205 684.511 L781.764 684.511 L782.323 684.511 L782.883 684.511 L783.442 684.511 L784.001 684.511 L784.56 684.511 L785.12 684.511 L785.679 684.511 L786.238 684.511 L786.797 684.511 L787.357 684.511 L787.916 684.511 L788.475 684.511 L789.034 684.511 L789.594 684.511 L790.153 684.511 L790.712 684.511 L791.271 684.511 L791.831 684.511 L792.39 684.511 L792.949 684.511 L793.508 684.511 L794.068 684.511 L794.627 684.511 L795.186 684.511 L795.745 684.511 L796.305 684.511 L796.864 684.511 L797.423 684.511 L797.982 684.511 L798.542 684.511 L799.101 684.511 L799.66 684.511 L800.219 684.511 L800.779 684.511 L801.338 684.511 L801.897 684.511 L802.456 684.511 L803.016 684.511 L803.575 684.511 L804.134 684.511 L804.693 684.511 L805.253 684.511 L805.812 684.511 L806.371 684.511 L806.931 684.511 L807.49 684.511 L808.049 684.511 L808.608 684.511 L809.168 684.511 L809.727 684.511 L810.286 684.511 L810.845 684.511 L811.405 684.511 L811.964 684.511 L812.523 684.511 L813.082 684.511 L813.642 684.511 L814.201 684.511 L814.76 684.511 L815.319 684.511 L815.879 684.511 L816.438 684.511 L816.997 684.511 L817.556 684.511 L818.116 684.511 L818.675 684.511 L819.234 684.511 L819.793 684.511 L820.353 684.511 L820.912 684.511 L821.471 684.511 L822.03 684.511 L822.59 684.511 L823.149 684.511 L823.708 684.511 L824.267 684.511 L824.827 684.511 L825.386 684.511 L825.945 684.511 L826.504 684.511 L827.064 684.511 L827.623 684.511 L828.182 684.511 L828.741 684.511 L829.301 684.511 L829.86 684.511 L830.419 684.511 L830.978 684.511 L831.538 684.511 L832.097 684.511 L832.656 684.511 L833.215 684.511 L833.775 684.511 L834.334 684.511 L834.893 684.511 L835.452 684.511 L836.012 684.511 L836.571 684.511 L837.13 684.511 L837.689 684.511 L838.249 684.511 L838.808 684.511 L839.367 684.511 L839.926 684.511 L840.486 684.511 L841.045 684.511 L841.604 684.511 L842.163 684.511 L842.723 684.511 L843.282 684.511 L843.841 684.511 L844.4 684.511 L844.96 684.511 L845.519 684.511 L846.078 684.511 L846.637 684.511 L847.197 684.511 L847.756 684.511 L848.315 684.511 L848.874 684.511 L849.434 684.511 L849.993 684.511 L850.552 684.511 L851.111 684.511 L851.671 684.511 L852.23 684.511 L852.789 684.511 L853.348 684.511 L853.908 684.511 L854.467 684.511 L855.026 684.511 L855.585 684.511 L856.145 684.511 L856.704 684.511 L857.263 684.511 L857.822 684.511 L858.382 684.511 L858.941 684.511 L859.5 684.511 L860.059 684.511 L860.619 684.511 L861.178 684.511 L861.737 684.511 L862.296 684.511 L862.856 684.511 L863.415 684.511 L863.974 684.511 L864.533 684.511 L865.093 684.511 L865.652 684.511 L866.211 684.511 L866.77 684.511 L867.33 684.511 L867.889 684.511 L868.448 684.511 L869.007 684.511 L869.567 684.511 L870.126 684.511 L870.685 684.511 L871.244 684.511 L871.804 684.511 L872.363 684.511 L872.922 684.511 L873.481 684.511 L874.041 684.511 L874.6 684.511 L875.159 684.511 L875.718 684.511 L876.278 684.511 L876.837 684.511 L877.396 684.511 L877.955 684.511 L878.515 684.511 L879.074 684.511 L879.633 684.511 L880.192 684.511 L880.752 684.511 L881.311 684.511 L881.87 684.511 L882.429 684.511 L882.989 684.511 L883.548 684.511 L884.107 684.511 L884.666 684.511 L885.226 684.511 L885.785 684.511 L886.344 684.511 L886.903 684.511 L887.463 684.511 L888.022 684.511 L888.581 684.511 L889.14 684.511 L889.7 684.511 L890.259 684.511 L890.818 684.511 L891.377 684.511 L891.937 684.511 L892.496 684.511 L893.055 684.511 L893.614 684.511 L894.174 684.511 L894.733 684.511 L895.292 684.511 L895.851 684.511 L896.411 684.511 L896.97 684.511 L897.529 684.511 L898.088 684.511 L898.648 684.511 L899.207 684.511 L899.766 684.511 L900.325 684.511 L900.885 684.511 L901.444 684.511 L902.003 684.511 L902.562 684.511 L903.122 684.511 L903.681 684.511 L904.24 684.511 L904.799 684.511 L905.359 684.511 L905.918 684.511 L906.477 684.511 L907.036 684.511 L907.596 684.511 L908.155 684.511 L908.714 684.511 L909.273 684.511 L909.833 684.511 L910.392 684.511 L910.951 684.511 L911.51 684.511 L912.07 684.511 L912.629 684.511 L913.188 684.511 L913.747 684.511 L914.307 684.511 L914.866 684.511 L915.425 684.511 L915.984 684.511 L916.544 684.511 L917.103 684.511 L917.662 684.511 L918.221 684.511 L918.781 684.511 L919.34 684.511 L919.899 684.511 L920.458 684.511 L921.018 684.511 L921.577 684.511 L922.136 684.511 L922.695 684.511 L923.255 684.511 L923.814 684.511 L924.373 684.511 L924.932 684.511 L925.492 684.511 L926.051 684.511 L926.61 684.511 L927.169 684.511 L927.729 684.511 L928.288 684.511 L928.847 684.511 L929.406 684.511 L929.966 684.511 L930.525 684.511 L931.084 684.511 L931.644 684.511 L932.203 684.511 L932.762 684.511 L933.321 684.511 L933.881 684.511 L934.44 684.511 L934.999 684.511 L935.558 684.511 L936.118 684.511 L936.677 684.511 L937.236 684.511 L937.795 684.511 L938.355 684.511 L938.914 684.511 L939.473 684.511 L940.032 684.511 L940.592 684.511 L941.151 684.511 L941.71 684.511 L942.269 684.511 L942.829 684.511 L943.388 684.511 L943.947 684.511 L944.506 684.511 L945.066 684.511 L945.625 684.511 L946.184 684.511 L946.743 684.511 L947.303 684.511 L947.862 684.511 L948.421 684.511 L948.98 684.511 L949.54 684.511 L950.099 684.511 L950.658 684.511 L951.217 684.511 L951.777 684.511 L952.336 684.511 L952.895 684.511 L953.454 684.511 L954.014 684.511 L954.573 684.511 L955.132 684.511 L955.691 684.511 L956.251 684.511 L956.81 684.511 L957.369 684.511 L957.928 684.511 L958.488 684.511 L959.047 684.511 L959.606 684.511 L960.165 684.511 L960.725 684.511 L961.284 684.511 L961.843 684.511 L962.402 684.511 L962.962 684.511 L963.521 684.511 L964.08 684.511 L964.639 684.511 L965.199 684.511 L965.758 684.511 L966.317 684.511 L966.876 684.511 L967.436 684.511 L967.995 684.511 L968.554 684.511 L969.113 684.511 L969.673 684.511 L970.232 684.511 L970.791 684.511 L971.35 684.511 L971.91 684.511 L972.469 684.511 L973.028 684.511 L973.587 684.511 L974.147 684.511 L974.706 684.511 L975.265 684.511 L975.824 684.511 L976.384 684.511 L976.943 684.511 L977.502 684.511 L978.061 684.511 L978.621 684.511 L979.18 684.511 L979.739 684.511 L980.298 684.511 L980.858 684.511 L981.417 684.511 L981.976 684.511 L982.535 684.511 L983.095 684.511 L983.654 684.511 L984.213 684.511 L984.772 684.511 L985.332 684.511 L985.891 684.511 L986.45 684.511 L987.009 684.511 L987.569 684.511 L988.128 684.511 L988.687 684.511 L989.246 684.511 L989.806 684.511 L990.365 684.511 L990.924 684.511 L991.483 684.511 L992.043 684.511 L992.602 684.511 L993.161 684.511 L993.72 684.511 L994.28 684.511 L994.839 684.511 L995.398 684.511 L995.957 684.511 L996.517 684.511 L997.076 684.511 L997.635 684.511 L998.194 684.511 L998.754 684.511 L999.313 684.511 L999.872 684.511 L1000.43 684.511 L1000.99 684.511 L1001.55 684.511 L1002.11 684.511 L1002.67 684.511 L1003.23 684.511 L1003.79 684.511 L1004.35 684.511 L1004.91 684.511 L1005.46 684.511 L1006.02 684.511 L1006.58 684.511 L1007.14 684.511 L1007.7 684.511 L1008.26 684.511 L1008.82 684.511 L1009.38 684.511 L1009.94 684.511 L1010.5 684.511 L1011.06 684.511 L1011.62 684.511 L1012.18 684.511 L1012.73 684.511 L1013.29 684.511 L1013.85 684.511 L1014.41 684.511 L1014.97 684.511 L1015.53 684.511 L1016.09 684.511 L1016.65 684.511 L1017.21 684.511 L1017.77 684.511 L1018.33 684.511 L1018.89 684.511 L1019.45 684.511 L1020.01 684.511 L1020.56 684.511 L1021.12 684.511 L1021.68 684.511 L1022.24 684.511 L1022.8 684.511 L1023.36 684.511 L1023.92 684.511 L1024.48 684.511 L1025.04 684.511 L1025.6 684.511 L1026.16 684.511 L1026.72 684.511 L1027.28 684.511 L1027.83 684.511 L1028.39 684.511 L1028.95 684.511 L1029.51 684.511 L1030.07 684.511 L1030.63 684.511 L1031.19 684.511 L1031.75 684.511 L1032.31 684.511 L1032.87 684.511 L1033.43 684.511 L1033.99 684.511 L1034.55 684.511 L1035.1 684.511 L1035.66 684.511 L1036.22 684.511 L1036.78 684.511 L1037.34 684.511 L1037.9 684.511 L1038.46 684.511 L1039.02 684.511 L1039.58 684.511 L1040.14 684.511 L1040.7 684.511 L1041.26 684.511 L1041.82 684.511 L1042.38 684.511 L1042.93 684.511 L1043.49 684.511 L1044.05 684.511 L1044.61 684.511 L1045.17 684.511 L1045.73 684.511 L1046.29 684.511 L1046.85 684.511 L1047.41 684.511 L1047.97 684.511 L1048.53 684.511 L1049.09 684.511 L1049.65 684.511 L1050.2 684.511 L1050.76 684.511 L1051.32 684.511 L1051.88 684.511 L1052.44 684.511 L1053 684.511 L1053.56 684.511 L1054.12 684.511 L1054.68 684.511 L1055.24 684.511 L1055.8 684.511 L1056.36 684.511 L1056.92 684.511 L1057.48 684.511 L1058.03 684.511 L1058.59 684.511 L1059.15 684.511 L1059.71 684.511 L1060.27 684.511 L1060.83 684.511 L1061.39 684.511 L1061.95 684.511 L1062.51 684.511 L1063.07 684.511 L1063.63 684.511 L1064.19 684.511 L1064.75 684.511 L1065.3 684.511 L1065.86 684.511 L1066.42 684.511 L1066.98 684.511 L1067.54 684.511 L1068.1 684.511 L1068.66 684.511 L1069.22 684.511 L1069.78 684.511 L1070.34 684.511 L1070.9 684.511 L1071.46 684.511 L1072.02 684.511 L1072.57 684.511 L1073.13 684.511 L1073.69 684.511 L1074.25 684.511 L1074.81 684.511 L1075.37 684.511 L1075.93 684.511 L1076.49 684.511 L1077.05 684.511 L1077.61 684.511 L1078.17 684.511 L1078.73 684.511 L1079.29 684.511 L1079.85 684.511 L1080.4 684.511 L1080.96 684.511 L1081.52 684.511 L1082.08 684.511 L1082.64 684.511 L1083.2 684.511 L1083.76 684.511 L1084.32 684.511 L1084.88 684.511 L1085.44 684.511 L1086 684.511 L1086.56 684.511 L1087.12 684.511 L1087.67 684.511 L1088.23 684.511 L1088.79 684.511 L1089.35 684.511 L1089.91 684.511 L1090.47 684.511 L1091.03 684.511 L1091.59 684.511 L1092.15 684.511 L1092.71 684.511 L1093.27 684.511 L1093.83 684.511 L1094.39 684.511 L1094.94 684.511 L1095.5 684.511 L1096.06 684.511 L1096.62 684.511 L1097.18 684.511 L1097.74 684.511 L1098.3 684.511 L1098.86 684.511 L1099.42 684.511 L1099.98 684.511 L1100.54 684.511 L1101.1 684.511 L1101.66 684.511 L1102.22 684.511 L1102.77 684.511 L1103.33 684.511 L1103.89 684.511 L1104.45 684.511 L1105.01 684.511 L1105.57 684.511 L1106.13 684.511 L1106.69 684.511 L1107.25 684.511 L1107.81 684.511 L1108.37 684.511 L1108.93 684.511 L1109.49 684.511 L1110.04 684.511 L1110.6 684.511 L1111.16 684.511 L1111.72 684.511 L1112.28 684.511 L1112.84 684.511 L1113.4 684.511 L1113.96 684.511 L1114.52 684.511 L1115.08 684.511 L1115.64 684.511 L1116.2 684.511 L1116.76 684.511 L1117.31 684.511 L1117.87 684.511 L1118.43 684.511 L1118.99 684.511 L1119.55 684.511 L1120.11 684.511 L1120.67 684.511 L1121.23 684.511 L1121.79 684.511 L1122.35 684.511 L1122.91 684.511 L1123.47 684.511 L1124.03 684.511 L1124.59 684.511 L1125.14 684.511 L1125.7 684.511 L1126.26 684.511 L1126.82 684.511 L1127.38 684.511 L1127.94 684.511 L1128.5 684.511 L1129.06 684.511 L1129.62 684.511 L1130.18 684.511 L1130.74 684.511 L1131.3 684.511 L1131.86 684.511 L1132.41 684.511 L1132.97 684.511 L1133.53 684.511 L1134.09 684.511 L1134.65 684.511 L1135.21 684.511 L1135.77 684.511 L1136.33 684.511 L1136.89 684.511 L1137.45 684.511 L1138.01 684.511 L1138.57 684.511 L1139.13 684.511 L1139.68 684.511 L1140.24 684.511 L1140.8 684.511 L1141.36 684.511 L1141.92 684.511 L1142.48 684.511 L1143.04 684.511 L1143.6 684.511 L1144.16 684.511 L1144.72 684.511 L1145.28 684.511 L1145.84 684.511 L1146.4 684.511 L1146.96 684.511 L1147.51 684.511 L1148.07 684.511 L1148.63 684.511 L1149.19 684.511 L1149.75 684.511 L1150.31 684.511 L1150.87 684.511 L1151.43 684.511 L1151.99 684.511 L1152.55 684.511 L1153.11 684.511 L1153.67 684.511 L1154.23 684.511 L1154.78 684.511 L1155.34 684.511 L1155.9 684.511 L1156.46 684.511 L1157.02 684.511 L1157.58 684.511 L1158.14 684.511 L1158.7 684.511 L1159.26 684.511 L1159.82 684.511 L1160.38 684.511 L1160.94 684.511 L1161.5 684.511 L1162.05 684.511 L1162.61 684.511 L1163.17 684.511 L1163.73 684.511 L1164.29 684.511 L1164.85 684.511 L1165.41 684.511 L1165.97 684.511 L1166.53 684.511 L1167.09 684.511 L1167.65 684.511 L1168.21 684.511 L1168.77 684.511 L1169.33 684.511 L1169.88 684.511 L1170.44 684.511 L1171 684.511 L1171.56 684.511 L1172.12 684.511 L1172.68 684.511 L1173.24 684.511 L1173.8 684.511 L1174.36 684.511 L1174.92 684.511 L1175.48 684.511 L1176.04 684.511 L1176.6 684.511 L1177.15 684.511 L1177.71 684.511 L1178.27 684.511 L1178.83 684.511 L1179.39 684.511 L1179.95 684.511 L1180.51 684.511 L1181.07 684.511 L1181.63 684.511 L1182.19 684.511 L1182.75 684.511 L1183.31 684.511 L1183.87 684.511 L1184.43 684.511 L1184.98 684.511 L1185.54 684.511 L1186.1 684.511 L1186.66 684.511 L1187.22 684.511 L1187.78 684.511 L1188.34 684.511 L1188.9 684.511 L1189.46 684.511 L1190.02 684.511 L1190.58 684.511 L1191.14 684.511 L1191.7 684.511 L1192.25 684.511 L1192.81 684.511 L1193.37 684.511 L1193.93 684.511 L1194.49 684.511 L1195.05 684.511 L1195.61 684.511 L1196.17 684.511 L1196.73 684.511 L1197.29 684.511 L1197.85 684.511 L1198.41 684.511 L1198.97 684.511 L1199.52 684.511 L1200.08 684.511 L1200.64 684.511 L1201.2 684.511 L1201.76 684.511 L1202.32 684.511 L1202.88 684.511 L1203.44 684.511 L1204 684.511 L1204.56 684.511 L1205.12 684.511 L1205.68 684.511 L1206.24 684.511 L1206.8 684.511 L1207.35 684.511 L1207.91 684.511 L1208.47 684.511 L1209.03 684.511 L1209.59 684.511 L1210.15 684.511 L1210.71 684.511 L1211.27 684.511 L1211.83 684.511 L1212.39 684.511 L1212.95 684.511 L1213.51 684.511 L1214.07 684.511 L1214.62 684.511 L1215.18 684.511 L1215.74 684.511 L1216.3 684.511 L1216.86 684.511 L1217.42 684.511 L1217.98 684.511 L1218.54 684.511 L1219.1 684.511 L1219.66 684.511 L1220.22 684.511 L1220.78 684.511 L1221.34 684.511 L1221.89 684.511 L1222.45 684.511 L1223.01 684.511 L1223.57 684.511 L1224.13 684.511 L1224.69 684.511 L1225.25 684.511 L1225.81 684.511 L1226.37 684.511 L1226.93 684.511 L1227.49 684.511 L1228.05 684.511 L1228.61 684.511 L1229.17 684.511 L1229.72 684.511 L1230.28 684.511 L1230.84 684.511 L1231.4 684.511 L1231.96 684.511 L1232.52 684.511 L1233.08 684.511 L1233.64 684.511 L1234.2 684.511 L1234.76 684.511 L1235.32 684.511 L1235.88 684.511 L1236.44 684.511 L1236.99 684.511 L1237.55 684.511 L1238.11 684.511 L1238.67 684.511 L1239.23 684.511 L1239.79 684.511 L1240.35 684.511 L1240.91 684.511 L1241.47 684.511 L1242.03 684.511 L1242.59 684.511 L1243.15 684.511 L1243.71 684.511 L1244.26 684.511 L1244.82 684.511 L1245.38 684.511 L1245.94 684.511 L1246.5 684.511 L1247.06 684.511 L1247.62 684.511 L1248.18 684.511 L1248.74 684.511 L1249.3 684.511 L1249.86 684.511 L1250.42 684.511 L1250.98 684.511 L1251.54 684.511 L1252.09 684.511 L1252.65 684.511 L1253.21 684.511 L1253.77 684.511 L1254.33 684.511 L1254.89 684.511 L1255.45 684.511 L1256.01 684.511 L1256.57 684.511 L1257.13 684.511 L1257.69 684.511 L1258.25 684.511 L1258.81 684.511 L1259.36 684.511 L1259.92 684.511 L1260.48 684.511 L1261.04 684.511 L1261.6 684.511 L1262.16 684.511 L1262.72 684.511 L1263.28 684.511 L1263.84 684.511 L1264.4 684.511 L1264.96 684.511 L1265.52 684.511 L1266.08 684.511 L1266.63 684.511 L1267.19 684.511 L1267.75 684.511 L1268.31 684.511 L1268.87 684.511 L1269.43 684.511 L1269.99 684.511 L1270.55 684.511 L1271.11 684.511 L1271.67 684.511 L1272.23 684.511 L1272.79 684.511 L1273.35 684.511 L1273.91 684.511 L1274.46 684.511 L1275.02 684.511 L1275.58 684.511 L1276.14 684.511 L1276.7 684.511 L1277.26 684.511 L1277.82 684.511 L1278.38 684.511 L1278.94 684.511 L1279.5 684.511 L1280.06 684.511 L1280.62 684.511 L1281.18 684.511 L1281.73 684.511 L1282.29 684.511 L1282.85 684.511 L1283.41 684.511 L1283.97 684.511 L1284.53 684.511 L1285.09 684.511 L1285.65 684.511 L1286.21 684.511 L1286.77 684.511 L1287.33 684.511 L1287.89 684.511 L1288.45 684.511 L1289 684.511 L1289.56 684.511 L1290.12 684.511 L1290.68 684.511 L1291.24 684.511 L1291.8 684.511 L1292.36 684.511 L1292.92 684.511 L1293.48 684.511 L1294.04 684.511 L1294.6 684.511 L1295.16 684.511 L1295.72 684.511 L1296.28 684.511 L1296.83 684.511 L1297.39 684.511 L1297.95 684.511 L1298.51 684.511 L1299.07 684.511 L1299.63 684.511 L1300.19 684.511 L1300.75 684.511 L1301.31 684.511 L1301.87 684.511 L1302.43 684.511 L1302.99 684.511 L1303.55 684.511 L1304.1 684.511 L1304.66 684.511 L1305.22 684.511 L1305.78 684.511 L1306.34 684.511 L1306.9 684.511 L1307.46 684.511 L1308.02 684.511 L1308.58 684.511 L1309.14 684.511 L1309.7 684.511 L1310.26 684.511 L1310.82 684.511 L1311.38 684.511 L1311.93 684.511 L1312.49 684.511 L1313.05 684.511 L1313.61 684.511 L1314.17 684.511 L1314.73 684.511 L1315.29 684.511 L1315.85 684.511 L1316.41 684.511 L1316.97 684.511 L1317.53 684.511 L1318.09 684.511 L1318.65 684.511 L1319.2 684.511 L1319.76 684.511 L1320.32 684.511 L1320.88 684.511 L1321.44 684.511 L1322 684.511 L1322.56 684.511 L1323.12 684.511 L1323.68 684.511 L1324.24 684.511 L1324.8 684.511 L1325.36 684.511 L1325.92 684.511 L1326.47 684.511 L1327.03 684.511 L1327.59 684.511 L1328.15 684.511 L1328.71 684.511 L1329.27 684.511 L1329.83 684.511 L1330.39 684.511 L1330.95 684.511 L1331.51 684.511 L1332.07 684.511 L1332.63 684.511 L1333.19 684.511 L1333.75 684.511 L1334.3 684.511 L1334.86 684.511 L1335.42 684.511 L1335.98 684.511 L1336.54 684.511 L1337.1 684.511 L1337.66 684.511 L1338.22 684.511 L1338.78 684.511 L1339.34 684.511 L1339.9 684.511 L1340.46 684.511 L1341.02 684.511 L1341.57 684.511 L1342.13 684.511 L1342.69 684.511 L1343.25 684.511 L1343.81 684.511 L1344.37 684.511 L1344.93 684.511 L1345.49 684.511 L1346.05 684.511 L1346.61 684.511 L1347.17 684.511 L1347.73 684.511 L1348.29 684.511 L1348.84 684.511 L1349.4 684.511 L1349.96 684.511 L1350.52 684.511 L1351.08 684.511 L1351.64 684.511 L1352.2 684.511 L1352.76 684.511 L1353.32 684.511 L1353.88 684.511 L1354.44 684.511 L1355 684.511 L1355.56 684.511 L1356.12 684.511 L1356.67 684.511 L1357.23 684.511 L1357.79 684.511 L1358.35 684.511 L1358.91 684.511 L1359.47 684.511 L1360.03 684.511 L1360.59 684.511 L1361.15 684.511 L1361.71 684.511 L1362.27 684.511 L1362.83 684.511 L1363.39 684.511 L1363.94 684.511 L1364.5 684.511 L1365.06 684.511 L1365.62 684.511 L1366.18 684.511 L1366.74 684.511 L1367.3 684.511 L1367.86 684.511 L1368.42 684.511 L1368.98 684.511 L1369.54 684.511 L1370.1 684.511 L1370.66 684.511 L1371.21 684.511 L1371.77 684.511 L1372.33 684.511 L1372.89 684.511 L1373.45 684.511 L1374.01 684.511 L1374.57 684.511 L1375.13 684.511 L1375.69 684.511 L1376.25 684.511 L1376.81 684.511 L1377.37 684.511 L1377.93 684.511 L1378.49 684.511 L1379.04 684.511 L1379.6 684.511 L1380.16 684.511 L1380.72 684.511 L1381.28 684.511 L1381.84 684.511 L1382.4 684.511 L1382.96 684.511 L1383.52 684.511 L1384.08 684.511 L1384.64 684.511 L1385.2 684.511 L1385.76 684.511 L1386.31 684.511 L1386.87 684.511 L1387.43 684.511 L1387.99 684.511 L1388.55 684.511 L1389.11 684.511 L1389.67 684.511 L1390.23 684.511 L1390.79 684.511 L1391.35 684.511 L1391.91 684.511 L1392.47 684.511 L1393.03 684.511 L1393.58 684.511 L1394.14 684.511 L1394.7 684.511 L1395.26 684.511 L1395.82 684.511 L1396.38 684.511 L1396.94 684.511 L1397.5 684.511 L1398.06 684.511 L1398.62 684.511 L1399.18 684.511 L1399.74 684.511 L1400.3 684.511 L1400.86 684.511 L1401.41 684.511 L1401.97 684.511 L1402.53 684.511 L1403.09 684.511 L1403.65 684.511 L1404.21 684.511 L1404.77 684.511 L1405.33 684.511 L1405.89 684.511 L1406.45 684.511 L1407.01 684.511 L1407.57 684.511 L1408.13 684.511 L1408.68 684.511 L1409.24 684.511 L1409.8 684.511 L1410.36 684.511 L1410.92 684.511 L1411.48 684.511 L1412.04 684.511 L1412.6 684.511 L1413.16 684.511 L1413.72 684.511 L1414.28 684.511 L1414.84 684.511 L1415.4 684.511 L1415.95 684.511 L1416.51 684.511 L1417.07 684.511 L1417.63 684.511 L1418.19 684.511 L1418.75 684.511 L1419.31 684.511 L1419.87 684.511 L1420.43 684.511 L1420.99 684.511 L1421.55 684.511 L1422.11 684.511 L1422.67 684.511 L1423.23 684.511 L1423.78 684.511 L1424.34 684.511 L1424.9 684.511 L1425.46 684.511 L1426.02 684.511 L1426.58 684.511 L1427.14 684.511 L1427.7 684.511 L1428.26 684.511 L1428.82 684.511 L1429.38 684.511 L1429.94 684.511 L1430.5 684.511 L1431.05 684.511 L1431.61 684.511 L1432.17 684.511 L1432.73 684.511 L1433.29 684.511 L1433.85 684.511 L1434.41 684.511 L1434.97 684.511 L1435.53 684.511 L1436.09 684.511 L1436.65 684.511 L1437.21 684.511 L1437.77 684.511 L1438.33 684.511 L1438.88 684.511 L1439.44 684.511 L1440 684.511 L1440.56 684.511 L1441.12 684.511 L1441.68 684.511 L1442.24 684.511 L1442.8 684.511 L1443.36 684.511 L1443.92 684.511 L1444.48 684.511 L1445.04 684.511 L1445.6 684.511 L1446.15 684.511 L1446.71 684.511 L1447.27 684.511 L1447.83 684.511 L1448.39 684.511 L1448.95 684.511 L1449.51 684.511 L1450.07 684.511 L1450.63 684.511 L1451.19 684.511 L1451.75 684.511 L1452.31 684.511 L1452.87 684.511 L1453.42 684.511 L1453.98 684.511 L1454.54 684.511 L1455.1 684.511 L1455.66 684.511 L1456.22 684.511 L1456.78 684.511 L1457.34 684.511 L1457.9 684.511 L1458.46 684.511 L1459.02 684.511 L1459.58 684.511 L1460.14 684.511 L1460.7 684.511 L1461.25 684.511 L1461.81 684.511 L1462.37 684.511 L1462.93 684.511 L1463.49 684.511 L1464.05 684.511 L1464.61 684.511 L1465.17 684.511 L1465.73 684.511 L1466.29 684.511 L1466.85 684.511 L1467.41 684.511 L1467.97 684.511 L1468.52 684.511 L1469.08 684.511 L1469.64 684.511 L1470.2 684.511 L1470.76 684.511 L1471.32 684.511 L1471.88 684.511 L1472.44 684.511 L1473 684.511 L1473.56 684.511 L1474.12 684.511 L1474.68 684.511 L1475.24 684.511 L1475.79 684.511 L1476.35 684.511 L1476.91 684.511 L1477.47 684.511 L1478.03 684.511 L1478.59 684.511 L1479.15 684.511 L1479.71 684.511 L1480.27 684.511 L1480.83 684.511 L1481.39 684.511 L1481.95 684.511 L1482.51 684.511 L1483.07 684.511 L1483.62 684.511 L1484.18 684.511 L1484.74 684.511 L1485.3 684.511 L1485.86 684.511 L1486.42 684.511 L1486.98 684.511 L1487.54 684.511 L1488.1 684.511 L1488.66 684.511 L1489.22 684.511 L1489.78 684.511 L1490.34 684.511 L1490.89 684.511 L1491.45 684.511 L1492.01 684.511 L1492.57 684.511 L1493.13 684.511 L1493.69 684.511 L1494.25 684.511 L1494.81 684.511 L1495.37 684.511 L1495.93 684.511 L1496.49 684.511 L1497.05 684.511 L1497.61 684.511 L1498.16 684.511 L1498.72 684.511 L1499.28 684.511 L1499.84 684.511 L1500.4 684.511 L1500.96 684.511 L1501.52 684.511 L1502.08 684.511 L1502.64 684.511 L1503.2 684.511 L1503.76 684.511 L1504.32 684.511 L1504.88 684.511 L1505.44 684.511 L1505.99 684.511 L1506.55 684.511 L1507.11 684.511 L1507.67 684.511 L1508.23 684.511 L1508.79 684.511 L1509.35 684.511 L1509.91 684.511 L1510.47 684.511 L1511.03 684.511 L1511.59 684.511 L1512.15 684.511 L1512.71 684.511 L1513.26 684.511 L1513.82 684.511 L1514.38 684.511 L1514.94 684.511 L1515.5 684.511 L1516.06 684.511 L1516.62 684.511 L1517.18 684.511 L1517.74 684.511 L1518.3 684.511 L1518.86 684.511 L1519.42 684.511 L1519.98 684.511 L1520.53 684.511 L1521.09 684.511 L1521.65 684.511 L1522.21 684.511 L1522.77 684.511 L1523.33 684.511 L1523.89 684.511 L1524.45 684.511 L1525.01 684.511 L1525.57 684.511 L1526.13 684.511 L1526.69 684.511 L1527.25 684.511 L1527.81 684.511 L1528.36 684.511 L1528.92 684.511 L1529.48 684.511 L1530.04 684.511 L1530.6 684.511 L1531.16 684.511 L1531.72 684.511 L1532.28 684.511 L1532.84 684.511 L1533.4 684.511 L1533.96 684.511 L1534.52 684.511 L1535.08 684.511 L1535.63 684.511 L1536.19 684.511 L1536.75 684.511 L1537.31 684.511 L1537.87 684.511 L1538.43 684.511 L1538.99 684.511 L1539.55 684.511 L1540.11 684.511 L1540.67 684.511 L1541.23 684.511 L1541.79 684.511 L1542.35 684.511 L1542.9 684.511 L1543.46 684.511 L1544.02 684.511 L1544.58 684.511 L1545.14 684.511 L1545.7 684.511 L1546.26 684.511 L1546.82 684.511 L1547.38 684.511 L1547.94 684.511 L1548.5 684.511 L1549.06 684.511 L1549.62 684.511 L1550.18 684.511 L1550.73 684.511 L1551.29 684.511 L1551.85 684.511 L1552.41 684.511 L1552.97 684.511 L1553.53 684.511 L1554.09 684.511 L1554.65 684.511 L1555.21 684.511 L1555.77 684.511 L1556.33 684.511 L1556.89 684.511 L1557.45 684.511 L1558 684.511 L1558.56 684.511 L1559.12 684.511 L1559.68 684.511 L1560.24 684.511 L1560.8 684.511 L1561.36 684.511 L1561.92 684.511 L1562.48 684.511 L1563.04 684.511 L1563.6 684.511 L1564.16 684.511 L1564.72 684.511 L1565.28 684.511 L1565.83 684.511 L1566.39 684.511 L1566.95 684.511 L1567.51 684.511 L1568.07 684.511 L1568.63 684.511 L1569.19 684.511 L1569.75 684.511 L1570.31 684.511 L1570.87 684.511 L1571.43 684.511 L1571.99 684.511 L1572.55 684.511 L1573.1 684.511 L1573.66 684.511 L1574.22 684.511 L1574.78 684.511 L1575.34 684.511 L1575.9 684.511 L1576.46 684.511 L1577.02 684.511 L1577.58 684.511 L1578.14 684.511 L1578.7 684.511 L1579.26 684.511 L1579.82 684.511 L1580.37 684.511 L1580.93 684.511 L1581.49 684.511 L1582.05 684.511 L1582.61 684.511 L1583.17 684.511 L1583.73 684.511 L1584.29 684.511 L1584.85 684.511 L1585.41 684.511 L1585.97 684.511 L1586.53 684.511 L1587.09 684.511 L1587.65 684.511 L1588.2 684.511 L1588.76 684.511 L1589.32 684.511 L1589.88 684.511 L1590.44 684.511 L1591 684.511 L1591.56 684.511 L1592.12 684.511 L1592.68 684.511 L1593.24 684.511 L1593.8 684.511 L1594.36 684.511 L1594.92 684.511 L1595.47 684.511 L1596.03 684.511 L1596.59 684.511 L1597.15 684.511 L1597.71 684.511 L1598.27 684.511 L1598.83 684.511 L1599.39 684.511 L1599.95 684.511 L1600.51 684.511 L1601.07 684.511 L1601.63 684.511 L1602.19 684.511 L1602.74 684.511 L1603.3 684.511 L1603.86 684.511 L1604.42 684.511 L1604.98 684.511 L1605.54 684.511 L1606.1 684.511 L1606.66 684.511 L1607.22 684.511 L1607.78 684.511 L1608.34 684.511 L1608.9 684.511 L1609.46 684.511 L1610.02 684.511 L1610.57 684.511 L1611.13 684.511 L1611.69 684.511 L1612.25 684.511 L1612.81 684.511 L1613.37 684.511 L1613.93 684.511 L1614.49 684.511 L1615.05 684.511 L1615.61 684.511 L1616.17 684.511 L1616.73 684.511 L1617.29 684.511 L1617.84 684.511 L1618.4 684.511 L1618.96 684.511 L1619.52 684.511 L1620.08 684.511 L1620.64 684.511 L1621.2 684.511 L1621.76 684.511 L1622.32 684.511 L1622.88 684.511 L1623.44 684.511 L1624 684.511 L1624.56 684.511 L1625.11 684.511 L1625.67 684.511 L1626.23 684.511 L1626.79 684.511 L1627.35 684.511 L1627.91 684.511 L1628.47 684.511 L1629.03 684.511 L1629.59 684.511 L1630.15 684.511 L1630.71 684.511 L1631.27 684.511 L1631.83 684.511 L1632.39 684.511 L1632.94 684.511 L1633.5 684.511 L1634.06 684.511 L1634.62 684.511 L1635.18 684.511 L1635.74 684.511 L1636.3 684.511 L1636.86 684.511 L1637.42 684.511 L1637.98 684.511 L1638.54 684.511 L1639.1 684.511 L1639.66 684.511 L1640.21 684.511 L1640.77 684.511 L1641.33 684.511 L1641.89 684.511 L1642.45 684.511 L1643.01 684.511 L1643.57 684.511 L1644.13 684.511 L1644.69 684.511 L1645.25 684.511 L1645.81 684.511 L1646.37 684.511 L1646.93 684.511 L1647.48 684.511 L1648.04 684.511 L1648.6 684.511 L1649.16 684.511 L1649.72 684.511 L1650.28 684.511 L1650.84 684.511 L1651.4 684.511 L1651.96 684.511 L1652.52 684.511 L1653.08 684.511 L1653.64 684.511 L1654.2 684.511 L1654.76 684.511 L1655.31 684.511 L1655.87 684.511 L1656.43 684.511 L1656.99 684.511 L1657.55 684.511 L1658.11 684.511 L1658.67 684.511 L1659.23 684.511 L1659.79 684.511 L1660.35 684.511 L1660.91 684.511 L1661.47 684.511 L1662.03 684.511 L1662.58 684.511 L1663.14 684.511 L1663.7 684.511 L1664.26 684.511 L1664.82 684.511 L1665.38 684.511 L1665.94 684.511 L1666.5 684.511 L1667.06 684.511 L1667.62 684.511 L1668.18 684.511 L1668.74 684.511 L1669.3 684.511 L1669.85 684.511 L1670.41 684.511 L1670.97 684.511 L1671.53 684.511 L1672.09 684.511 L1672.65 684.511 L1673.21 684.511 L1673.77 684.511 L1674.33 684.511 L1674.89 684.511 L1675.45 684.511 L1676.01 684.511 L1676.57 684.511 L1677.13 684.511 L1677.68 684.511 L1678.24 684.511 L1678.8 684.511 L1679.36 684.511 L1679.92 684.511 L1680.48 684.511 L1681.04 684.511 L1681.6 684.511 L1682.16 684.511 L1682.72 684.511 L1683.28 684.511 L1683.84 684.511 L1684.4 684.511 L1684.95 684.511 L1685.51 684.511 L1686.07 684.511 L1686.63 684.511 L1687.19 684.511 L1687.75 684.511 L1688.31 684.511 L1688.87 684.511 L1689.43 684.511 L1689.99 684.511 L1690.55 684.511 L1691.11 684.511 L1691.67 684.511 L1692.23 684.511 L1692.78 684.511 L1693.34 684.511 L1693.9 684.511 L1694.46 684.511 L1695.02 684.511 L1695.58 684.511 L1696.14 684.511 L1696.7 684.511 L1697.26 684.511 L1697.82 684.511 L1698.38 684.511 L1698.94 684.511 L1699.5 684.511 L1700.05 684.511 L1700.61 684.511 L1701.17 684.511 L1701.73 684.511 L1702.29 684.511 L1702.85 684.511 L1703.41 684.511 L1703.97 684.511 L1704.53 684.511 L1705.09 684.511 L1705.65 684.511 L1706.21 684.511 L1706.77 684.511 L1707.32 684.511 L1707.88 684.511 L1708.44 684.511 L1709 684.511 L1709.56 684.511 L1710.12 684.511 L1710.68 684.511 L1711.24 684.511 L1711.8 684.511 L1712.36 684.511 L1712.92 684.511 L1713.48 684.511 L1714.04 684.511 L1714.6 684.511 L1715.15 684.511 L1715.71 684.511 L1716.27 684.511 L1716.83 684.511 L1717.39 684.511 L1717.95 684.511 L1718.51 684.511 L1719.07 684.511 L1719.63 684.511 L1720.19 684.511 L1720.75 684.511 L1721.31 684.511 L1721.87 684.511 L1722.42 684.511 L1722.98 684.511 L1723.54 684.511 L1724.1 684.511 L1724.66 684.511 L1725.22 684.511 L1725.78 684.511 L1726.34 684.511 L1726.9 684.511 L1727.46 684.511 L1728.02 684.511 L1728.58 684.511 L1729.14 684.511 L1729.69 684.511 L1730.25 684.511 L1730.81 684.511 L1731.37 684.511 L1731.93 684.511 L1732.49 684.511 L1733.05 684.511 L1733.61 684.511 L1734.17 684.511 L1734.73 684.511 L1735.29 684.511 L1735.85 684.511 L1736.41 684.511 L1736.97 684.511 L1737.52 684.511 L1738.08 684.511 L1738.64 684.511 L1739.2 684.511 L1739.76 684.511 L1740.32 684.511 L1740.88 684.511 L1741.44 684.511 L1742 684.511 L1742.56 684.511 L1743.12 684.511 L1743.68 684.511 L1744.24 684.511 L1744.79 684.511 L1745.35 684.511 L1745.91 684.511 L1746.47 684.511 L1747.03 684.511 L1747.59 684.511 L1748.15 684.511 L1748.71 684.511 L1749.27 684.511 L1749.83 684.511 L1750.39 684.511 L1750.95 684.511 L1751.51 684.511 L1752.06 684.511 L1752.62 684.511 L1753.18 684.511 L1753.74 684.511 L1754.3 684.511 L1754.86 684.511 L1755.42 684.511 L1755.98 684.511 L1756.54 684.511 L1757.1 684.511 L1757.66 684.511 L1758.22 684.511 L1758.78 684.511 L1759.34 684.511 L1759.89 684.511 L1760.45 684.511 L1761.01 684.511 L1761.57 684.511 L1762.13 684.511 L1762.69 684.511 L1763.25 684.511 L1763.81 684.511 L1764.37 684.511 L1764.93 684.511 L1765.49 684.511 L1766.05 684.511 L1766.61 684.511 L1767.16 684.511 L1767.72 684.511 L1768.28 684.511 L1768.84 684.511 L1769.4 684.511 L1769.96 684.511 L1770.52 684.511 L1771.08 684.511 L1771.64 684.511 L1772.2 684.511 L1772.76 684.511 L1773.32 684.511 L1773.88 684.511 L1774.43 684.511 L1774.99 684.511 L1775.55 684.511 L1776.11 684.511 L1776.67 684.511 L1777.23 684.511 L1777.79 684.511 L1778.35 684.511 L1778.91 684.511 L1779.47 684.511 L1780.03 684.511 L1780.59 684.511 L1781.15 684.511 L1781.71 684.511 L1782.26 684.511 L1782.82 684.511 L1783.38 684.511 L1783.94 684.511 L1784.5 684.511 L1785.06 684.511 L1785.62 684.511 L1786.18 684.511 L1786.74 684.511 L1787.3 684.511 L1787.86 684.511 L1788.42 684.511 L1788.98 684.511 L1789.53 684.511 L1790.09 684.511 L1790.65 684.511 L1791.21 684.511 L1791.77 684.511 L1792.33 684.511 L1792.89 684.511 L1793.45 684.511 L1794.01 684.511 L1794.57 684.511 L1795.13 684.511 L1795.69 684.511 L1796.25 684.511 L1796.8 684.511 L1797.36 684.511 L1797.92 684.511 L1798.48 684.511 L1799.04 684.511 L1799.6 684.511 L1800.16 684.511 L1800.72 684.511 L1801.28 684.511 L1801.84 684.511 L1802.4 684.511 L1802.96 684.511 L1803.52 684.511 L1804.08 684.511 L1804.63 684.511 L1805.19 684.511 L1805.75 684.511 L1806.31 684.511 L1806.87 684.511 L1807.43 684.511 L1807.99 684.511 L1808.55 684.511 L1809.11 684.511 L1809.67 684.511 L1810.23 684.511 L1810.79 684.511 L1811.35 684.511 L1811.9 684.511 L1812.46 684.511 L1813.02 684.511 L1813.58 684.511 L1814.14 684.511 L1814.7 684.511 L1815.26 684.511 L1815.82 684.511 L1816.38 684.511 L1816.94 684.511 L1817.5 684.511 L1818.06 684.511 L1818.62 684.511 L1819.18 684.511 L1819.73 684.511 L1820.29 684.511 L1820.85 684.511 L1821.41 684.511 L1821.97 684.511 L1822.53 684.511 L1823.09 684.511 L1823.65 684.511 L1824.21 684.511 L1824.77 684.511 L1825.33 684.511 L1825.89 684.511 L1826.45 684.511 L1827 684.511 L1827.56 684.511 L1828.12 684.511 L1828.68 684.511 L1829.24 684.511 L1829.8 684.511 L1830.36 684.511 L1830.92 684.511 L1831.48 684.511 L1832.04 684.511 L1832.6 684.511 L1833.16 684.511 L1833.72 684.511 L1834.27 684.511 L1834.83 684.511 L1835.39 684.511 L1835.95 684.511 L1836.51 684.511 L1837.07 684.511 L1837.63 684.511 L1838.19 684.511 L1838.19 682.896 L1837.63 682.896 L1837.07 682.896 L1836.51 682.896 L1835.95 682.896 L1835.39 682.896 L1834.83 682.896 L1834.27 682.896 L1833.72 682.896 L1833.16 682.896 L1832.6 682.896 L1832.04 682.896 L1831.48 682.896 L1830.92 682.896 L1830.36 682.896 L1829.8 682.896 L1829.24 682.896 L1828.68 682.896 L1828.12 682.896 L1827.56 682.896 L1827 682.896 L1826.45 682.896 L1825.89 682.896 L1825.33 682.896 L1824.77 682.896 L1824.21 682.896 L1823.65 682.896 L1823.09 682.896 L1822.53 682.896 L1821.97 682.896 L1821.41 682.896 L1820.85 682.896 L1820.29 682.896 L1819.73 682.896 L1819.18 682.896 L1818.62 682.896 L1818.06 682.896 L1817.5 682.896 L1816.94 682.896 L1816.38 682.896 L1815.82 682.896 L1815.26 682.896 L1814.7 682.896 L1814.14 682.896 L1813.58 682.896 L1813.02 682.896 L1812.46 682.896 L1811.9 682.896 L1811.35 682.896 L1810.79 682.896 L1810.23 682.896 L1809.67 682.896 L1809.11 682.896 L1808.55 682.896 L1807.99 682.896 L1807.43 682.896 L1806.87 682.896 L1806.31 682.896 L1805.75 682.896 L1805.19 682.896 L1804.63 682.896 L1804.08 682.896 L1803.52 682.896 L1802.96 682.896 L1802.4 682.896 L1801.84 682.896 L1801.28 682.896 L1800.72 682.896 L1800.16 682.896 L1799.6 682.896 L1799.04 682.896 L1798.48 682.896 L1797.92 682.896 L1797.36 682.896 L1796.8 682.896 L1796.25 682.896 L1795.69 682.896 L1795.13 682.896 L1794.57 682.896 L1794.01 682.896 L1793.45 682.896 L1792.89 682.896 L1792.33 682.896 L1791.77 682.896 L1791.21 682.896 L1790.65 682.896 L1790.09 682.896 L1789.53 682.896 L1788.98 682.896 L1788.42 682.896 L1787.86 682.896 L1787.3 682.896 L1786.74 682.896 L1786.18 682.896 L1785.62 682.896 L1785.06 682.896 L1784.5 682.896 L1783.94 682.896 L1783.38 682.896 L1782.82 682.896 L1782.26 682.896 L1781.71 682.896 L1781.15 682.896 L1780.59 682.896 L1780.03 682.896 L1779.47 682.896 L1778.91 682.896 L1778.35 682.896 L1777.79 682.896 L1777.23 682.896 L1776.67 682.896 L1776.11 682.896 L1775.55 682.896 L1774.99 682.896 L1774.43 682.896 L1773.88 682.896 L1773.32 682.896 L1772.76 682.896 L1772.2 682.896 L1771.64 682.896 L1771.08 682.896 L1770.52 682.896 L1769.96 682.896 L1769.4 682.896 L1768.84 682.896 L1768.28 682.896 L1767.72 682.896 L1767.16 682.896 L1766.61 682.896 L1766.05 682.896 L1765.49 682.896 L1764.93 682.896 L1764.37 682.896 L1763.81 682.896 L1763.25 682.896 L1762.69 682.896 L1762.13 682.896 L1761.57 682.896 L1761.01 682.896 L1760.45 682.896 L1759.89 682.896 L1759.34 682.896 L1758.78 682.896 L1758.22 682.896 L1757.66 682.896 L1757.1 682.896 L1756.54 682.896 L1755.98 682.896 L1755.42 682.896 L1754.86 682.896 L1754.3 682.896 L1753.74 682.896 L1753.18 682.896 L1752.62 682.896 L1752.06 682.896 L1751.51 682.896 L1750.95 682.896 L1750.39 682.896 L1749.83 682.896 L1749.27 682.896 L1748.71 682.896 L1748.15 682.896 L1747.59 682.896 L1747.03 682.896 L1746.47 682.896 L1745.91 682.896 L1745.35 682.896 L1744.79 682.896 L1744.24 682.896 L1743.68 682.896 L1743.12 682.896 L1742.56 682.896 L1742 682.896 L1741.44 682.896 L1740.88 682.896 L1740.32 682.896 L1739.76 682.896 L1739.2 682.896 L1738.64 682.896 L1738.08 682.896 L1737.52 682.896 L1736.97 682.896 L1736.41 682.896 L1735.85 682.896 L1735.29 682.896 L1734.73 682.896 L1734.17 682.896 L1733.61 682.896 L1733.05 682.896 L1732.49 682.896 L1731.93 682.896 L1731.37 682.896 L1730.81 682.896 L1730.25 682.896 L1729.69 682.896 L1729.14 682.896 L1728.58 682.896 L1728.02 682.896 L1727.46 682.896 L1726.9 682.896 L1726.34 682.896 L1725.78 682.896 L1725.22 682.896 L1724.66 682.896 L1724.1 682.896 L1723.54 682.896 L1722.98 682.896 L1722.42 682.896 L1721.87 682.896 L1721.31 682.896 L1720.75 682.896 L1720.19 682.896 L1719.63 682.896 L1719.07 682.896 L1718.51 682.896 L1717.95 682.896 L1717.39 682.896 L1716.83 682.896 L1716.27 682.896 L1715.71 682.896 L1715.15 682.896 L1714.6 682.896 L1714.04 682.896 L1713.48 682.896 L1712.92 682.896 L1712.36 682.896 L1711.8 682.896 L1711.24 682.896 L1710.68 682.896 L1710.12 682.896 L1709.56 682.896 L1709 682.896 L1708.44 682.896 L1707.88 682.896 L1707.32 682.896 L1706.77 682.896 L1706.21 682.896 L1705.65 682.896 L1705.09 682.896 L1704.53 682.896 L1703.97 682.896 L1703.41 682.896 L1702.85 682.896 L1702.29 682.896 L1701.73 682.896 L1701.17 682.896 L1700.61 682.896 L1700.05 682.896 L1699.5 682.896 L1698.94 682.896 L1698.38 682.896 L1697.82 682.896 L1697.26 682.896 L1696.7 682.896 L1696.14 682.896 L1695.58 682.896 L1695.02 682.896 L1694.46 682.896 L1693.9 682.896 L1693.34 682.896 L1692.78 682.896 L1692.23 682.896 L1691.67 682.896 L1691.11 682.896 L1690.55 682.896 L1689.99 682.896 L1689.43 682.896 L1688.87 682.896 L1688.31 682.896 L1687.75 682.896 L1687.19 682.896 L1686.63 682.896 L1686.07 682.896 L1685.51 682.896 L1684.95 682.896 L1684.4 682.896 L1683.84 682.896 L1683.28 682.896 L1682.72 682.896 L1682.16 682.896 L1681.6 682.896 L1681.04 682.896 L1680.48 682.896 L1679.92 682.896 L1679.36 682.896 L1678.8 682.896 L1678.24 682.896 L1677.68 682.896 L1677.13 682.896 L1676.57 682.896 L1676.01 682.896 L1675.45 682.896 L1674.89 682.896 L1674.33 682.896 L1673.77 682.896 L1673.21 682.896 L1672.65 682.896 L1672.09 682.896 L1671.53 682.896 L1670.97 682.896 L1670.41 682.896 L1669.85 682.896 L1669.3 682.896 L1668.74 682.896 L1668.18 682.896 L1667.62 682.896 L1667.06 682.896 L1666.5 682.896 L1665.94 682.896 L1665.38 682.896 L1664.82 682.896 L1664.26 682.896 L1663.7 682.896 L1663.14 682.896 L1662.58 682.896 L1662.03 682.896 L1661.47 682.896 L1660.91 682.896 L1660.35 682.896 L1659.79 682.896 L1659.23 682.896 L1658.67 682.896 L1658.11 682.896 L1657.55 682.896 L1656.99 682.896 L1656.43 682.896 L1655.87 682.896 L1655.31 682.896 L1654.76 682.896 L1654.2 682.896 L1653.64 682.896 L1653.08 682.896 L1652.52 682.896 L1651.96 682.896 L1651.4 682.896 L1650.84 682.896 L1650.28 682.896 L1649.72 682.896 L1649.16 682.896 L1648.6 682.896 L1648.04 682.896 L1647.48 682.896 L1646.93 682.896 L1646.37 682.896 L1645.81 682.896 L1645.25 682.896 L1644.69 682.896 L1644.13 682.896 L1643.57 682.896 L1643.01 682.896 L1642.45 682.896 L1641.89 682.896 L1641.33 682.896 L1640.77 682.896 L1640.21 682.896 L1639.66 682.896 L1639.1 682.896 L1638.54 682.896 L1637.98 682.896 L1637.42 682.896 L1636.86 682.896 L1636.3 682.896 L1635.74 682.896 L1635.18 682.896 L1634.62 682.896 L1634.06 682.896 L1633.5 682.896 L1632.94 682.896 L1632.39 682.896 L1631.83 682.896 L1631.27 682.896 L1630.71 682.896 L1630.15 682.896 L1629.59 682.896 L1629.03 682.896 L1628.47 682.896 L1627.91 682.896 L1627.35 682.896 L1626.79 682.896 L1626.23 682.896 L1625.67 682.896 L1625.11 682.896 L1624.56 682.896 L1624 682.896 L1623.44 682.896 L1622.88 682.896 L1622.32 682.896 L1621.76 682.896 L1621.2 682.896 L1620.64 682.896 L1620.08 682.896 L1619.52 682.896 L1618.96 682.896 L1618.4 682.896 L1617.84 682.896 L1617.29 682.896 L1616.73 682.896 L1616.17 682.896 L1615.61 682.896 L1615.05 682.896 L1614.49 682.896 L1613.93 682.896 L1613.37 682.896 L1612.81 682.896 L1612.25 682.896 L1611.69 682.896 L1611.13 682.896 L1610.57 682.896 L1610.02 682.896 L1609.46 682.896 L1608.9 682.896 L1608.34 682.896 L1607.78 682.896 L1607.22 682.896 L1606.66 682.896 L1606.1 682.896 L1605.54 682.896 L1604.98 682.896 L1604.42 682.896 L1603.86 682.896 L1603.3 682.896 L1602.74 682.896 L1602.19 682.896 L1601.63 682.896 L1601.07 682.896 L1600.51 682.896 L1599.95 682.896 L1599.39 682.896 L1598.83 682.896 L1598.27 682.896 L1597.71 682.896 L1597.15 682.896 L1596.59 682.896 L1596.03 682.896 L1595.47 682.896 L1594.92 682.896 L1594.36 682.896 L1593.8 682.896 L1593.24 682.896 L1592.68 682.896 L1592.12 682.896 L1591.56 682.896 L1591 682.896 L1590.44 682.896 L1589.88 682.896 L1589.32 682.896 L1588.76 682.896 L1588.2 682.896 L1587.65 682.896 L1587.09 682.896 L1586.53 682.896 L1585.97 682.896 L1585.41 682.896 L1584.85 682.896 L1584.29 682.896 L1583.73 682.896 L1583.17 682.896 L1582.61 682.896 L1582.05 682.896 L1581.49 682.896 L1580.93 682.896 L1580.37 682.896 L1579.82 682.896 L1579.26 682.896 L1578.7 682.896 L1578.14 682.896 L1577.58 682.896 L1577.02 682.896 L1576.46 682.896 L1575.9 682.896 L1575.34 682.896 L1574.78 682.896 L1574.22 682.896 L1573.66 682.896 L1573.1 682.896 L1572.55 682.896 L1571.99 682.896 L1571.43 682.896 L1570.87 682.896 L1570.31 682.896 L1569.75 682.896 L1569.19 682.896 L1568.63 682.896 L1568.07 682.896 L1567.51 682.896 L1566.95 682.896 L1566.39 682.896 L1565.83 682.896 L1565.28 682.896 L1564.72 682.896 L1564.16 682.896 L1563.6 682.896 L1563.04 682.896 L1562.48 682.896 L1561.92 682.896 L1561.36 682.896 L1560.8 682.896 L1560.24 682.896 L1559.68 682.896 L1559.12 682.896 L1558.56 682.896 L1558 682.896 L1557.45 682.896 L1556.89 682.896 L1556.33 682.896 L1555.77 682.896 L1555.21 682.896 L1554.65 682.896 L1554.09 682.896 L1553.53 682.896 L1552.97 682.896 L1552.41 682.896 L1551.85 682.896 L1551.29 682.896 L1550.73 682.896 L1550.18 682.896 L1549.62 682.896 L1549.06 682.896 L1548.5 682.896 L1547.94 682.896 L1547.38 682.896 L1546.82 682.896 L1546.26 682.896 L1545.7 682.896 L1545.14 682.896 L1544.58 682.896 L1544.02 682.896 L1543.46 682.896 L1542.9 682.896 L1542.35 682.896 L1541.79 682.896 L1541.23 682.896 L1540.67 682.896 L1540.11 682.896 L1539.55 682.896 L1538.99 682.896 L1538.43 682.896 L1537.87 682.896 L1537.31 682.896 L1536.75 682.896 L1536.19 682.896 L1535.63 682.896 L1535.08 682.896 L1534.52 682.896 L1533.96 682.896 L1533.4 682.896 L1532.84 682.896 L1532.28 682.896 L1531.72 682.896 L1531.16 682.896 L1530.6 682.896 L1530.04 682.896 L1529.48 682.896 L1528.92 682.896 L1528.36 682.896 L1527.81 682.896 L1527.25 682.896 L1526.69 682.896 L1526.13 682.896 L1525.57 682.896 L1525.01 682.896 L1524.45 682.896 L1523.89 682.896 L1523.33 682.896 L1522.77 682.896 L1522.21 682.896 L1521.65 682.896 L1521.09 682.896 L1520.53 682.896 L1519.98 682.896 L1519.42 682.896 L1518.86 682.896 L1518.3 682.896 L1517.74 682.896 L1517.18 682.896 L1516.62 682.896 L1516.06 682.896 L1515.5 682.896 L1514.94 682.896 L1514.38 682.896 L1513.82 682.896 L1513.26 682.896 L1512.71 682.896 L1512.15 682.896 L1511.59 682.896 L1511.03 682.896 L1510.47 682.896 L1509.91 682.896 L1509.35 682.896 L1508.79 682.896 L1508.23 682.896 L1507.67 682.896 L1507.11 682.896 L1506.55 682.896 L1505.99 682.896 L1505.44 682.896 L1504.88 682.896 L1504.32 682.896 L1503.76 682.896 L1503.2 682.896 L1502.64 682.896 L1502.08 682.896 L1501.52 682.896 L1500.96 682.896 L1500.4 682.896 L1499.84 682.896 L1499.28 682.896 L1498.72 682.896 L1498.16 682.896 L1497.61 682.896 L1497.05 682.896 L1496.49 682.896 L1495.93 682.896 L1495.37 682.896 L1494.81 682.896 L1494.25 682.896 L1493.69 682.896 L1493.13 682.896 L1492.57 682.896 L1492.01 682.896 L1491.45 682.896 L1490.89 682.896 L1490.34 682.896 L1489.78 682.896 L1489.22 682.896 L1488.66 682.896 L1488.1 682.896 L1487.54 682.896 L1486.98 682.896 L1486.42 682.896 L1485.86 682.896 L1485.3 682.896 L1484.74 682.896 L1484.18 682.896 L1483.62 682.896 L1483.07 682.896 L1482.51 682.896 L1481.95 682.896 L1481.39 682.896 L1480.83 682.896 L1480.27 682.896 L1479.71 682.896 L1479.15 682.896 L1478.59 682.896 L1478.03 682.896 L1477.47 682.896 L1476.91 682.896 L1476.35 682.896 L1475.79 682.896 L1475.24 682.896 L1474.68 682.896 L1474.12 682.896 L1473.56 682.896 L1473 682.896 L1472.44 682.896 L1471.88 682.896 L1471.32 682.896 L1470.76 682.896 L1470.2 682.896 L1469.64 682.896 L1469.08 682.896 L1468.52 682.896 L1467.97 682.896 L1467.41 682.896 L1466.85 682.896 L1466.29 682.896 L1465.73 682.896 L1465.17 682.896 L1464.61 682.896 L1464.05 682.896 L1463.49 682.896 L1462.93 682.896 L1462.37 682.896 L1461.81 682.896 L1461.25 682.896 L1460.7 682.896 L1460.14 682.896 L1459.58 682.896 L1459.02 682.896 L1458.46 682.896 L1457.9 682.896 L1457.34 682.896 L1456.78 682.896 L1456.22 682.896 L1455.66 682.896 L1455.1 682.896 L1454.54 682.896 L1453.98 682.896 L1453.42 682.896 L1452.87 682.896 L1452.31 682.896 L1451.75 682.896 L1451.19 682.896 L1450.63 682.896 L1450.07 682.896 L1449.51 682.896 L1448.95 682.896 L1448.39 682.896 L1447.83 682.896 L1447.27 682.896 L1446.71 682.896 L1446.15 682.896 L1445.6 682.896 L1445.04 682.896 L1444.48 682.896 L1443.92 682.896 L1443.36 682.896 L1442.8 682.896 L1442.24 682.896 L1441.68 682.896 L1441.12 682.896 L1440.56 682.896 L1440 682.896 L1439.44 682.896 L1438.88 682.896 L1438.33 682.896 L1437.77 682.896 L1437.21 682.896 L1436.65 682.896 L1436.09 682.896 L1435.53 682.896 L1434.97 682.896 L1434.41 682.896 L1433.85 682.896 L1433.29 682.896 L1432.73 682.896 L1432.17 682.896 L1431.61 682.896 L1431.05 682.896 L1430.5 682.896 L1429.94 682.896 L1429.38 682.896 L1428.82 682.896 L1428.26 682.896 L1427.7 682.896 L1427.14 682.896 L1426.58 682.896 L1426.02 682.896 L1425.46 682.896 L1424.9 682.896 L1424.34 682.896 L1423.78 682.896 L1423.23 682.896 L1422.67 682.896 L1422.11 682.896 L1421.55 682.896 L1420.99 682.896 L1420.43 682.896 L1419.87 682.896 L1419.31 682.896 L1418.75 682.896 L1418.19 682.896 L1417.63 682.896 L1417.07 682.896 L1416.51 682.896 L1415.95 682.896 L1415.4 682.896 L1414.84 682.896 L1414.28 682.896 L1413.72 682.896 L1413.16 682.896 L1412.6 682.896 L1412.04 682.896 L1411.48 682.896 L1410.92 682.896 L1410.36 682.896 L1409.8 682.896 L1409.24 682.896 L1408.68 682.896 L1408.13 682.896 L1407.57 682.896 L1407.01 682.896 L1406.45 682.896 L1405.89 682.896 L1405.33 682.896 L1404.77 682.896 L1404.21 682.896 L1403.65 682.896 L1403.09 682.896 L1402.53 682.896 L1401.97 682.896 L1401.41 682.896 L1400.86 682.896 L1400.3 682.896 L1399.74 682.896 L1399.18 682.896 L1398.62 682.896 L1398.06 682.896 L1397.5 682.896 L1396.94 682.896 L1396.38 682.896 L1395.82 682.896 L1395.26 682.896 L1394.7 682.896 L1394.14 682.896 L1393.58 682.896 L1393.03 682.896 L1392.47 682.896 L1391.91 682.896 L1391.35 682.896 L1390.79 682.896 L1390.23 682.896 L1389.67 682.896 L1389.11 682.896 L1388.55 682.896 L1387.99 682.896 L1387.43 682.896 L1386.87 682.896 L1386.31 682.896 L1385.76 682.896 L1385.2 682.896 L1384.64 682.896 L1384.08 682.896 L1383.52 682.896 L1382.96 682.896 L1382.4 682.896 L1381.84 682.896 L1381.28 682.896 L1380.72 682.896 L1380.16 682.896 L1379.6 682.896 L1379.04 682.896 L1378.49 682.896 L1377.93 682.896 L1377.37 682.896 L1376.81 682.896 L1376.25 682.896 L1375.69 682.896 L1375.13 682.896 L1374.57 682.896 L1374.01 682.896 L1373.45 682.896 L1372.89 682.896 L1372.33 682.896 L1371.77 682.896 L1371.21 682.896 L1370.66 682.896 L1370.1 682.896 L1369.54 682.896 L1368.98 682.896 L1368.42 682.896 L1367.86 682.896 L1367.3 682.896 L1366.74 682.896 L1366.18 682.896 L1365.62 682.896 L1365.06 682.896 L1364.5 682.896 L1363.94 682.896 L1363.39 682.896 L1362.83 682.896 L1362.27 682.896 L1361.71 682.896 L1361.15 682.896 L1360.59 682.896 L1360.03 682.896 L1359.47 682.896 L1358.91 682.896 L1358.35 682.896 L1357.79 682.896 L1357.23 682.896 L1356.67 682.896 L1356.12 682.896 L1355.56 682.896 L1355 682.896 L1354.44 682.896 L1353.88 682.896 L1353.32 682.896 L1352.76 682.896 L1352.2 682.896 L1351.64 682.896 L1351.08 682.896 L1350.52 682.896 L1349.96 682.896 L1349.4 682.896 L1348.84 682.896 L1348.29 682.896 L1347.73 682.896 L1347.17 682.896 L1346.61 682.896 L1346.05 682.896 L1345.49 682.896 L1344.93 682.896 L1344.37 682.896 L1343.81 682.896 L1343.25 682.896 L1342.69 682.896 L1342.13 682.896 L1341.57 682.896 L1341.02 682.896 L1340.46 682.896 L1339.9 682.896 L1339.34 682.896 L1338.78 682.896 L1338.22 682.896 L1337.66 682.896 L1337.1 682.896 L1336.54 682.896 L1335.98 682.896 L1335.42 682.896 L1334.86 682.896 L1334.3 682.896 L1333.75 682.896 L1333.19 682.896 L1332.63 682.896 L1332.07 682.896 L1331.51 682.896 L1330.95 682.896 L1330.39 682.896 L1329.83 682.896 L1329.27 682.896 L1328.71 682.896 L1328.15 682.896 L1327.59 682.896 L1327.03 682.896 L1326.47 682.896 L1325.92 682.896 L1325.36 682.896 L1324.8 682.896 L1324.24 682.896 L1323.68 682.896 L1323.12 682.896 L1322.56 682.896 L1322 682.896 L1321.44 682.896 L1320.88 682.896 L1320.32 682.896 L1319.76 682.896 L1319.2 682.896 L1318.65 682.896 L1318.09 682.896 L1317.53 682.896 L1316.97 682.896 L1316.41 682.896 L1315.85 682.896 L1315.29 682.896 L1314.73 682.896 L1314.17 682.896 L1313.61 682.896 L1313.05 682.896 L1312.49 682.896 L1311.93 682.896 L1311.38 682.896 L1310.82 682.896 L1310.26 682.896 L1309.7 682.896 L1309.14 682.896 L1308.58 682.896 L1308.02 682.896 L1307.46 682.896 L1306.9 682.896 L1306.34 682.896 L1305.78 682.896 L1305.22 682.896 L1304.66 682.896 L1304.1 682.896 L1303.55 682.896 L1302.99 682.896 L1302.43 682.896 L1301.87 682.896 L1301.31 682.896 L1300.75 682.896 L1300.19 682.896 L1299.63 682.896 L1299.07 682.896 L1298.51 682.896 L1297.95 682.896 L1297.39 682.896 L1296.83 682.896 L1296.28 682.896 L1295.72 682.896 L1295.16 682.896 L1294.6 682.896 L1294.04 682.896 L1293.48 682.896 L1292.92 682.896 L1292.36 682.896 L1291.8 682.896 L1291.24 682.896 L1290.68 682.896 L1290.12 682.896 L1289.56 682.896 L1289 682.896 L1288.45 682.896 L1287.89 682.896 L1287.33 682.896 L1286.77 682.896 L1286.21 682.896 L1285.65 682.896 L1285.09 682.896 L1284.53 682.896 L1283.97 682.896 L1283.41 682.896 L1282.85 682.896 L1282.29 682.896 L1281.73 682.896 L1281.18 682.896 L1280.62 682.896 L1280.06 682.896 L1279.5 682.896 L1278.94 682.896 L1278.38 682.896 L1277.82 682.896 L1277.26 682.896 L1276.7 682.896 L1276.14 682.896 L1275.58 682.896 L1275.02 682.896 L1274.46 682.896 L1273.91 682.896 L1273.35 682.896 L1272.79 682.896 L1272.23 682.896 L1271.67 682.896 L1271.11 682.896 L1270.55 682.896 L1269.99 682.896 L1269.43 682.896 L1268.87 682.896 L1268.31 682.896 L1267.75 682.896 L1267.19 682.896 L1266.63 682.896 L1266.08 682.896 L1265.52 682.896 L1264.96 682.896 L1264.4 682.896 L1263.84 682.896 L1263.28 682.896 L1262.72 682.896 L1262.16 682.896 L1261.6 682.896 L1261.04 682.896 L1260.48 682.896 L1259.92 682.896 L1259.36 682.896 L1258.81 682.896 L1258.25 682.896 L1257.69 682.896 L1257.13 682.896 L1256.57 682.896 L1256.01 682.896 L1255.45 682.896 L1254.89 682.896 L1254.33 682.896 L1253.77 682.896 L1253.21 682.896 L1252.65 682.896 L1252.09 682.896 L1251.54 682.896 L1250.98 682.896 L1250.42 682.896 L1249.86 682.896 L1249.3 682.896 L1248.74 682.896 L1248.18 682.896 L1247.62 682.896 L1247.06 682.896 L1246.5 682.896 L1245.94 682.896 L1245.38 682.896 L1244.82 682.896 L1244.26 682.896 L1243.71 682.896 L1243.15 682.896 L1242.59 682.896 L1242.03 682.896 L1241.47 682.896 L1240.91 682.896 L1240.35 682.896 L1239.79 682.896 L1239.23 682.896 L1238.67 682.896 L1238.11 682.896 L1237.55 682.896 L1236.99 682.896 L1236.44 682.896 L1235.88 682.896 L1235.32 682.896 L1234.76 682.896 L1234.2 682.896 L1233.64 682.896 L1233.08 682.896 L1232.52 682.896 L1231.96 682.896 L1231.4 682.896 L1230.84 682.896 L1230.28 682.896 L1229.72 682.896 L1229.17 682.896 L1228.61 682.896 L1228.05 682.896 L1227.49 682.896 L1226.93 682.896 L1226.37 682.896 L1225.81 682.896 L1225.25 682.896 L1224.69 682.896 L1224.13 682.896 L1223.57 682.896 L1223.01 682.896 L1222.45 682.896 L1221.89 682.896 L1221.34 682.896 L1220.78 682.896 L1220.22 682.896 L1219.66 682.896 L1219.1 682.896 L1218.54 682.896 L1217.98 682.896 L1217.42 682.896 L1216.86 682.896 L1216.3 682.896 L1215.74 682.896 L1215.18 682.896 L1214.62 682.896 L1214.07 682.896 L1213.51 682.896 L1212.95 682.896 L1212.39 682.896 L1211.83 682.896 L1211.27 682.896 L1210.71 682.896 L1210.15 682.896 L1209.59 682.896 L1209.03 682.896 L1208.47 682.896 L1207.91 682.896 L1207.35 682.896 L1206.8 682.896 L1206.24 682.896 L1205.68 682.896 L1205.12 682.896 L1204.56 682.896 L1204 682.896 L1203.44 682.896 L1202.88 682.896 L1202.32 682.896 L1201.76 682.896 L1201.2 682.896 L1200.64 682.896 L1200.08 682.896 L1199.52 682.896 L1198.97 682.896 L1198.41 682.896 L1197.85 682.896 L1197.29 682.896 L1196.73 682.896 L1196.17 682.896 L1195.61 682.896 L1195.05 682.896 L1194.49 682.896 L1193.93 682.896 L1193.37 682.896 L1192.81 682.896 L1192.25 682.896 L1191.7 682.896 L1191.14 682.896 L1190.58 682.896 L1190.02 682.896 L1189.46 682.896 L1188.9 682.896 L1188.34 682.896 L1187.78 682.896 L1187.22 682.896 L1186.66 682.896 L1186.1 682.896 L1185.54 682.896 L1184.98 682.896 L1184.43 682.896 L1183.87 682.896 L1183.31 682.896 L1182.75 682.896 L1182.19 682.896 L1181.63 682.896 L1181.07 682.896 L1180.51 682.896 L1179.95 682.896 L1179.39 682.896 L1178.83 682.896 L1178.27 682.896 L1177.71 682.896 L1177.15 682.896 L1176.6 682.896 L1176.04 682.896 L1175.48 682.896 L1174.92 682.896 L1174.36 682.896 L1173.8 682.896 L1173.24 682.896 L1172.68 682.896 L1172.12 682.896 L1171.56 682.896 L1171 682.896 L1170.44 682.896 L1169.88 682.896 L1169.33 682.896 L1168.77 682.896 L1168.21 682.896 L1167.65 682.896 L1167.09 682.896 L1166.53 682.896 L1165.97 682.896 L1165.41 682.896 L1164.85 682.896 L1164.29 682.896 L1163.73 682.896 L1163.17 682.896 L1162.61 682.896 L1162.05 682.896 L1161.5 682.896 L1160.94 682.896 L1160.38 682.896 L1159.82 682.896 L1159.26 682.896 L1158.7 682.896 L1158.14 682.896 L1157.58 682.896 L1157.02 682.896 L1156.46 682.896 L1155.9 682.896 L1155.34 682.896 L1154.78 682.896 L1154.23 682.896 L1153.67 682.896 L1153.11 682.896 L1152.55 682.896 L1151.99 682.896 L1151.43 682.896 L1150.87 682.896 L1150.31 682.896 L1149.75 682.896 L1149.19 682.896 L1148.63 682.896 L1148.07 682.896 L1147.51 682.896 L1146.96 682.896 L1146.4 682.896 L1145.84 682.896 L1145.28 682.896 L1144.72 682.896 L1144.16 682.896 L1143.6 682.896 L1143.04 682.896 L1142.48 682.896 L1141.92 682.896 L1141.36 682.896 L1140.8 682.896 L1140.24 682.896 L1139.68 682.896 L1139.13 682.896 L1138.57 682.896 L1138.01 682.896 L1137.45 682.896 L1136.89 682.896 L1136.33 682.896 L1135.77 682.896 L1135.21 682.896 L1134.65 682.896 L1134.09 682.896 L1133.53 682.896 L1132.97 682.896 L1132.41 682.896 L1131.86 682.896 L1131.3 682.896 L1130.74 682.896 L1130.18 682.896 L1129.62 682.896 L1129.06 682.896 L1128.5 682.896 L1127.94 682.896 L1127.38 682.896 L1126.82 682.896 L1126.26 682.896 L1125.7 682.896 L1125.14 682.896 L1124.59 682.896 L1124.03 682.896 L1123.47 682.896 L1122.91 682.896 L1122.35 682.896 L1121.79 682.896 L1121.23 682.896 L1120.67 682.896 L1120.11 682.896 L1119.55 682.896 L1118.99 682.896 L1118.43 682.896 L1117.87 682.896 L1117.31 682.896 L1116.76 682.896 L1116.2 682.896 L1115.64 682.896 L1115.08 682.896 L1114.52 682.896 L1113.96 682.896 L1113.4 682.896 L1112.84 682.896 L1112.28 682.896 L1111.72 682.896 L1111.16 682.896 L1110.6 682.896 L1110.04 682.896 L1109.49 682.896 L1108.93 682.896 L1108.37 682.896 L1107.81 682.896 L1107.25 682.896 L1106.69 682.896 L1106.13 682.896 L1105.57 682.896 L1105.01 682.896 L1104.45 682.896 L1103.89 682.896 L1103.33 682.896 L1102.77 682.896 L1102.22 682.896 L1101.66 682.896 L1101.1 682.896 L1100.54 682.896 L1099.98 682.896 L1099.42 682.896 L1098.86 682.896 L1098.3 682.896 L1097.74 682.896 L1097.18 682.896 L1096.62 682.896 L1096.06 682.896 L1095.5 682.896 L1094.94 682.896 L1094.39 682.896 L1093.83 682.896 L1093.27 682.896 L1092.71 682.896 L1092.15 682.896 L1091.59 682.896 L1091.03 682.896 L1090.47 682.896 L1089.91 682.896 L1089.35 682.896 L1088.79 682.896 L1088.23 682.896 L1087.67 682.896 L1087.12 682.896 L1086.56 682.896 L1086 682.896 L1085.44 682.896 L1084.88 682.896 L1084.32 682.896 L1083.76 682.896 L1083.2 682.896 L1082.64 682.896 L1082.08 682.896 L1081.52 682.896 L1080.96 682.896 L1080.4 682.896 L1079.85 682.896 L1079.29 682.896 L1078.73 682.896 L1078.17 682.896 L1077.61 682.896 L1077.05 682.896 L1076.49 682.896 L1075.93 682.896 L1075.37 682.896 L1074.81 682.896 L1074.25 682.896 L1073.69 682.896 L1073.13 682.896 L1072.57 682.896 L1072.02 682.896 L1071.46 682.896 L1070.9 682.896 L1070.34 682.896 L1069.78 682.896 L1069.22 682.896 L1068.66 682.896 L1068.1 682.896 L1067.54 682.896 L1066.98 682.896 L1066.42 682.896 L1065.86 682.896 L1065.3 682.896 L1064.75 682.896 L1064.19 682.896 L1063.63 682.896 L1063.07 682.896 L1062.51 682.896 L1061.95 682.896 L1061.39 682.896 L1060.83 682.896 L1060.27 682.896 L1059.71 682.896 L1059.15 682.896 L1058.59 682.896 L1058.03 682.896 L1057.48 682.896 L1056.92 682.896 L1056.36 682.896 L1055.8 682.896 L1055.24 682.896 L1054.68 682.896 L1054.12 682.896 L1053.56 682.896 L1053 682.896 L1052.44 682.896 L1051.88 682.896 L1051.32 682.896 L1050.76 682.896 L1050.2 682.896 L1049.65 682.896 L1049.09 682.896 L1048.53 682.896 L1047.97 682.896 L1047.41 682.896 L1046.85 682.896 L1046.29 682.896 L1045.73 682.896 L1045.17 682.896 L1044.61 682.896 L1044.05 682.896 L1043.49 682.896 L1042.93 682.896 L1042.38 682.896 L1041.82 682.896 L1041.26 682.896 L1040.7 682.896 L1040.14 682.896 L1039.58 682.896 L1039.02 682.896 L1038.46 682.896 L1037.9 682.896 L1037.34 682.896 L1036.78 682.896 L1036.22 682.896 L1035.66 682.896 L1035.1 682.896 L1034.55 682.896 L1033.99 682.896 L1033.43 682.896 L1032.87 682.896 L1032.31 682.896 L1031.75 682.896 L1031.19 682.896 L1030.63 682.896 L1030.07 682.896 L1029.51 682.896 L1028.95 682.896 L1028.39 682.896 L1027.83 682.896 L1027.28 682.896 L1026.72 682.896 L1026.16 682.896 L1025.6 682.896 L1025.04 682.896 L1024.48 682.896 L1023.92 682.896 L1023.36 682.896 L1022.8 682.896 L1022.24 682.896 L1021.68 682.896 L1021.12 682.896 L1020.56 682.896 L1020.01 682.896 L1019.45 682.896 L1018.89 682.896 L1018.33 682.896 L1017.77 682.896 L1017.21 682.896 L1016.65 682.896 L1016.09 682.896 L1015.53 682.896 L1014.97 682.896 L1014.41 682.896 L1013.85 682.896 L1013.29 682.896 L1012.73 682.896 L1012.18 682.896 L1011.62 682.896 L1011.06 682.896 L1010.5 682.896 L1009.94 682.896 L1009.38 682.896 L1008.82 682.896 L1008.26 682.896 L1007.7 682.896 L1007.14 682.896 L1006.58 682.896 L1006.02 682.896 L1005.46 682.896 L1004.91 682.896 L1004.35 682.896 L1003.79 682.896 L1003.23 682.896 L1002.67 682.896 L1002.11 682.896 L1001.55 682.896 L1000.99 682.896 L1000.43 682.896 L999.872 682.896 L999.313 682.896 L998.754 682.896 L998.194 682.896 L997.635 682.896 L997.076 682.896 L996.517 682.896 L995.957 682.896 L995.398 682.896 L994.839 682.896 L994.28 682.896 L993.72 682.896 L993.161 682.896 L992.602 682.896 L992.043 682.896 L991.483 682.896 L990.924 682.896 L990.365 682.896 L989.806 682.896 L989.246 682.896 L988.687 682.896 L988.128 682.896 L987.569 682.896 L987.009 682.896 L986.45 682.896 L985.891 682.896 L985.332 682.896 L984.772 682.896 L984.213 682.896 L983.654 682.896 L983.095 682.896 L982.535 682.896 L981.976 682.896 L981.417 682.896 L980.858 682.896 L980.298 682.896 L979.739 682.896 L979.18 682.896 L978.621 682.896 L978.061 682.896 L977.502 682.896 L976.943 682.896 L976.384 682.896 L975.824 682.896 L975.265 682.896 L974.706 682.896 L974.147 682.896 L973.587 682.896 L973.028 682.896 L972.469 682.896 L971.91 682.896 L971.35 682.896 L970.791 682.896 L970.232 682.896 L969.673 682.896 L969.113 682.896 L968.554 682.896 L967.995 682.896 L967.436 682.896 L966.876 682.896 L966.317 682.896 L965.758 682.896 L965.199 682.896 L964.639 682.896 L964.08 682.896 L963.521 682.896 L962.962 682.896 L962.402 682.896 L961.843 682.896 L961.284 682.896 L960.725 682.896 L960.165 682.896 L959.606 682.896 L959.047 682.896 L958.488 682.896 L957.928 682.896 L957.369 682.896 L956.81 682.896 L956.251 682.896 L955.691 682.896 L955.132 682.896 L954.573 682.896 L954.014 682.896 L953.454 682.896 L952.895 682.896 L952.336 682.896 L951.777 682.896 L951.217 682.896 L950.658 682.896 L950.099 682.896 L949.54 682.896 L948.98 682.896 L948.421 682.896 L947.862 682.896 L947.303 682.896 L946.743 682.896 L946.184 682.896 L945.625 682.896 L945.066 682.896 L944.506 682.896 L943.947 682.896 L943.388 682.896 L942.829 682.896 L942.269 682.896 L941.71 682.896 L941.151 682.896 L940.592 682.896 L940.032 682.896 L939.473 682.896 L938.914 682.896 L938.355 682.896 L937.795 682.896 L937.236 682.896 L936.677 682.896 L936.118 682.896 L935.558 682.896 L934.999 682.896 L934.44 682.896 L933.881 682.896 L933.321 682.896 L932.762 682.896 L932.203 682.896 L931.644 682.896 L931.084 682.896 L930.525 682.896 L929.966 682.896 L929.406 682.896 L928.847 682.896 L928.288 682.896 L927.729 682.896 L927.169 682.896 L926.61 682.896 L926.051 682.896 L925.492 682.896 L924.932 682.896 L924.373 682.896 L923.814 682.896 L923.255 682.896 L922.695 682.896 L922.136 682.896 L921.577 682.896 L921.018 682.896 L920.458 682.896 L919.899 682.896 L919.34 682.896 L918.781 682.896 L918.221 682.896 L917.662 682.896 L917.103 682.896 L916.544 682.896 L915.984 682.896 L915.425 682.896 L914.866 682.896 L914.307 682.896 L913.747 682.896 L913.188 682.896 L912.629 682.896 L912.07 682.896 L911.51 682.896 L910.951 682.896 L910.392 682.896 L909.833 682.896 L909.273 682.896 L908.714 682.896 L908.155 682.896 L907.596 682.896 L907.036 682.896 L906.477 682.896 L905.918 682.896 L905.359 682.896 L904.799 682.896 L904.24 682.896 L903.681 682.896 L903.122 682.896 L902.562 682.896 L902.003 682.896 L901.444 682.896 L900.885 682.896 L900.325 682.896 L899.766 682.896 L899.207 682.896 L898.648 682.896 L898.088 682.896 L897.529 682.896 L896.97 682.896 L896.411 682.896 L895.851 682.896 L895.292 682.896 L894.733 682.896 L894.174 682.896 L893.614 682.896 L893.055 682.896 L892.496 682.896 L891.937 682.896 L891.377 682.896 L890.818 682.896 L890.259 682.896 L889.7 682.896 L889.14 682.896 L888.581 682.896 L888.022 682.896 L887.463 682.896 L886.903 682.896 L886.344 682.896 L885.785 682.896 L885.226 682.896 L884.666 682.896 L884.107 682.896 L883.548 682.896 L882.989 682.896 L882.429 682.896 L881.87 682.896 L881.311 682.896 L880.752 682.896 L880.192 682.896 L879.633 682.896 L879.074 682.896 L878.515 682.896 L877.955 682.896 L877.396 682.896 L876.837 682.896 L876.278 682.896 L875.718 682.896 L875.159 682.896 L874.6 682.896 L874.041 682.896 L873.481 682.896 L872.922 682.896 L872.363 682.896 L871.804 682.896 L871.244 682.896 L870.685 682.896 L870.126 682.896 L869.567 682.896 L869.007 682.896 L868.448 682.896 L867.889 682.896 L867.33 682.896 L866.77 682.896 L866.211 682.896 L865.652 682.896 L865.093 682.896 L864.533 682.896 L863.974 682.896 L863.415 682.896 L862.856 682.896 L862.296 682.896 L861.737 682.896 L861.178 682.896 L860.619 682.896 L860.059 682.896 L859.5 682.896 L858.941 682.896 L858.382 682.896 L857.822 682.896 L857.263 682.896 L856.704 682.896 L856.145 682.896 L855.585 682.896 L855.026 682.896 L854.467 682.896 L853.908 682.896 L853.348 682.896 L852.789 682.896 L852.23 682.896 L851.671 682.896 L851.111 682.896 L850.552 682.896 L849.993 682.896 L849.434 682.896 L848.874 682.896 L848.315 682.896 L847.756 682.896 L847.197 682.896 L846.637 682.896 L846.078 682.896 L845.519 682.896 L844.96 682.896 L844.4 682.896 L843.841 682.896 L843.282 682.896 L842.723 682.896 L842.163 682.896 L841.604 682.896 L841.045 682.896 L840.486 682.896 L839.926 682.896 L839.367 682.896 L838.808 682.896 L838.249 682.896 L837.689 682.896 L837.13 682.896 L836.571 682.896 L836.012 682.896 L835.452 682.896 L834.893 682.896 L834.334 682.896 L833.775 682.896 L833.215 682.896 L832.656 682.896 L832.097 682.896 L831.538 682.896 L830.978 682.896 L830.419 682.896 L829.86 682.896 L829.301 682.896 L828.741 682.896 L828.182 682.896 L827.623 682.896 L827.064 682.896 L826.504 682.896 L825.945 682.896 L825.386 682.896 L824.827 682.896 L824.267 682.896 L823.708 682.896 L823.149 682.896 L822.59 682.896 L822.03 682.896 L821.471 682.896 L820.912 682.896 L820.353 682.896 L819.793 682.896 L819.234 682.896 L818.675 682.896 L818.116 682.896 L817.556 682.896 L816.997 682.896 L816.438 682.896 L815.879 682.896 L815.319 682.896 L814.76 682.896 L814.201 682.896 L813.642 682.896 L813.082 682.896 L812.523 682.896 L811.964 682.896 L811.405 682.896 L810.845 682.896 L810.286 682.896 L809.727 682.896 L809.168 682.896 L808.608 682.896 L808.049 682.896 L807.49 682.896 L806.931 682.896 L806.371 682.896 L805.812 682.896 L805.253 682.896 L804.693 682.896 L804.134 682.896 L803.575 682.896 L803.016 682.896 L802.456 682.896 L801.897 682.896 L801.338 682.896 L800.779 682.896 L800.219 682.896 L799.66 682.896 L799.101 682.896 L798.542 682.896 L797.982 682.896 L797.423 682.896 L796.864 682.896 L796.305 682.896 L795.745 682.896 L795.186 682.896 L794.627 682.896 L794.068 682.896 L793.508 682.896 L792.949 682.896 L792.39 682.896 L791.831 682.896 L791.271 682.896 L790.712 682.896 L790.153 682.896 L789.594 682.896 L789.034 682.896 L788.475 682.896 L787.916 682.896 L787.357 682.896 L786.797 682.896 L786.238 682.896 L785.679 682.896 L785.12 682.896 L784.56 682.896 L784.001 682.896 L783.442 682.896 L782.883 682.896 L782.323 682.896 L781.764 682.896 L781.205 682.896 L780.646 682.896 L780.086 682.896 L779.527 682.896 L778.968 682.896 L778.409 682.896 L777.849 682.896 L777.29 682.896 L776.731 682.896 L776.172 682.896 L775.612 682.896 L775.053 682.896 L774.494 682.896 L773.935 682.896 L773.375 682.896 L772.816 682.896 L772.257 682.896 L771.698 682.896 L771.138 682.896 L770.579 682.896 L770.02 682.896 L769.461 682.896 L768.901 682.896 L768.342 682.896 L767.783 682.896 L767.224 682.896 L766.664 682.896 L766.105 682.896 L765.546 682.896 L764.987 682.896 L764.427 682.896 L763.868 682.896 L763.309 682.896 L762.75 682.896 L762.19 682.896 L761.631 682.896 L761.072 682.896 L760.513 682.896 L759.953 682.896 L759.394 682.896 L758.835 682.896 L758.276 682.896 L757.716 682.896 L757.157 682.896 L756.598 682.896 L756.039 682.896 L755.479 682.896 L754.92 682.896 L754.361 682.896 L753.802 682.896 L753.242 682.896 L752.683 682.896 L752.124 682.896 L751.565 682.896 L751.005 682.896 L750.446 682.896 L749.887 682.896 L749.328 682.896 L748.768 682.896 L748.209 682.896 L747.65 682.896 L747.091 682.896 L746.531 682.896 L745.972 682.896 L745.413 682.896 L744.854 682.896 L744.294 682.896 L743.735 682.896 L743.176 682.896 L742.617 682.896 L742.057 682.896 L741.498 682.896 L740.939 682.896 L740.38 682.896 L739.82 682.896 L739.261 682.896 L738.702 682.896 L738.143 682.896 L737.583 682.896 L737.024 682.896 L736.465 682.896 L735.906 682.896 L735.346 682.896 L734.787 682.896 L734.228 682.896 L733.669 682.896 L733.109 682.896 L732.55 682.896 L731.991 682.896 L731.432 682.896 L730.872 682.896 L730.313 682.896 L729.754 682.896 L729.195 682.896 L728.635 682.896 L728.076 682.896 L727.517 682.896 L726.958 682.896 L726.398 682.896 L725.839 682.896 L725.28 682.896 L724.721 682.896 L724.161 682.896 L723.602 682.896 L723.043 682.896 L722.484 682.896 L721.924 682.896 L721.365 682.896 L720.806 682.896 L720.247 682.896  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.703 720.806,683.703 721.365,683.703 721.924,683.703 722.484,683.703 723.043,683.703 723.602,683.703 724.161,683.703 724.721,683.703 725.28,683.703 725.839,683.703 726.398,683.703 726.958,683.703 727.517,683.703 728.076,683.703 728.635,683.703 729.195,683.703 729.754,683.703 730.313,683.703 730.872,683.703 731.432,683.703 731.991,683.703 732.55,683.703 733.109,683.703 733.669,683.703 734.228,683.703 734.787,683.703 735.346,683.703 735.906,683.703 736.465,683.703 737.024,683.703 737.583,683.703 738.143,683.703 738.702,683.703 739.261,683.703 739.82,683.703 740.38,683.703 740.939,683.703 741.498,683.703 742.057,683.703 742.617,683.703 743.176,683.703 743.735,683.703 744.294,683.703 744.854,683.703 745.413,683.703 745.972,683.703 746.531,683.703 747.091,683.703 747.65,683.703 748.209,683.703 748.768,683.703 749.328,683.703 749.887,683.703 750.446,683.703 751.005,683.703 751.565,683.703 752.124,683.703 752.683,683.703 753.242,683.703 753.802,683.703 754.361,683.703 754.92,683.703 755.479,683.703 756.039,683.703 756.598,683.703 757.157,683.703 757.716,683.703 758.276,683.703 758.835,683.703 759.394,683.703 759.953,683.703 760.513,683.703 761.072,683.703 761.631,683.703 762.19,683.703 762.75,683.703 763.309,683.703 763.868,683.703 764.427,683.703 764.987,683.703 765.546,683.703 766.105,683.703 766.664,683.703 767.224,683.703 767.783,683.703 768.342,683.703 768.901,683.703 769.461,683.703 770.02,683.703 770.579,683.703 771.138,683.703 771.698,683.703 772.257,683.703 772.816,683.703 773.375,683.703 773.935,683.703 774.494,683.703 775.053,683.703 775.612,683.703 776.172,683.703 776.731,683.703 777.29,683.703 777.849,683.703 778.409,683.703 778.968,683.703 779.527,683.703 780.086,683.703 780.646,683.703 781.205,683.703 781.764,683.703 782.323,683.703 782.883,683.703 783.442,683.703 784.001,683.703 784.56,683.703 785.12,683.703 785.679,683.703 786.238,683.703 786.797,683.703 787.357,683.703 787.916,683.703 788.475,683.703 789.034,683.703 789.594,683.703 790.153,683.703 790.712,683.703 791.271,683.703 791.831,683.703 792.39,683.703 792.949,683.703 793.508,683.703 794.068,683.703 794.627,683.703 795.186,683.703 795.745,683.703 796.305,683.703 796.864,683.703 797.423,683.703 797.982,683.703 798.542,683.703 799.101,683.703 799.66,683.703 800.219,683.703 800.779,683.703 801.338,683.703 801.897,683.703 802.456,683.703 803.016,683.703 803.575,683.703 804.134,683.703 804.693,683.703 805.253,683.703 805.812,683.703 806.371,683.703 806.931,683.703 807.49,683.703 808.049,683.703 808.608,683.703 809.168,683.703 809.727,683.703 810.286,683.703 810.845,683.703 811.405,683.703 811.964,683.703 812.523,683.703 813.082,683.703 813.642,683.703 814.201,683.703 814.76,683.703 815.319,683.703 815.879,683.703 816.438,683.703 816.997,683.703 817.556,683.703 818.116,683.703 818.675,683.703 819.234,683.703 819.793,683.703 820.353,683.703 820.912,683.703 821.471,683.703 822.03,683.703 822.59,683.703 823.149,683.703 823.708,683.703 824.267,683.703 824.827,683.703 825.386,683.703 825.945,683.703 826.504,683.703 827.064,683.703 827.623,683.703 828.182,683.703 828.741,683.703 829.301,683.703 829.86,683.703 830.419,683.703 830.978,683.703 831.538,683.703 832.097,683.703 832.656,683.703 833.215,683.703 833.775,683.703 834.334,683.703 834.893,683.703 835.452,683.703 836.012,683.703 836.571,683.703 837.13,683.703 837.689,683.703 838.249,683.703 838.808,683.703 839.367,683.703 839.926,683.703 840.486,683.703 841.045,683.703 841.604,683.703 842.163,683.703 842.723,683.703 843.282,683.703 843.841,683.703 844.4,683.703 844.96,683.703 845.519,683.703 846.078,683.703 846.637,683.703 847.197,683.703 847.756,683.703 848.315,683.703 848.874,683.703 849.434,683.703 849.993,683.703 850.552,683.703 851.111,683.703 851.671,683.703 852.23,683.703 852.789,683.703 853.348,683.703 853.908,683.703 854.467,683.703 855.026,683.703 855.585,683.703 856.145,683.703 856.704,683.703 857.263,683.703 857.822,683.703 858.382,683.703 858.941,683.703 859.5,683.703 860.059,683.703 860.619,683.703 861.178,683.703 861.737,683.703 862.296,683.703 862.856,683.703 863.415,683.703 863.974,683.703 864.533,683.703 865.093,683.703 865.652,683.703 866.211,683.703 866.77,683.703 867.33,683.703 867.889,683.703 868.448,683.703 869.007,683.703 869.567,683.703 870.126,683.703 870.685,683.703 871.244,683.703 871.804,683.703 872.363,683.703 872.922,683.703 873.481,683.703 874.041,683.703 874.6,683.703 875.159,683.703 875.718,683.703 876.278,683.703 876.837,683.703 877.396,683.703 877.955,683.703 878.515,683.703 879.074,683.703 879.633,683.703 880.192,683.703 880.752,683.703 881.311,683.703 881.87,683.703 882.429,683.703 882.989,683.703 883.548,683.703 884.107,683.703 884.666,683.703 885.226,683.703 885.785,683.703 886.344,683.703 886.903,683.703 887.463,683.703 888.022,683.703 888.581,683.703 889.14,683.703 889.7,683.703 890.259,683.703 890.818,683.703 891.377,683.703 891.937,683.703 892.496,683.703 893.055,683.703 893.614,683.703 894.174,683.703 894.733,683.703 895.292,683.703 895.851,683.703 896.411,683.703 896.97,683.703 897.529,683.703 898.088,683.703 898.648,683.703 899.207,683.703 899.766,683.703 900.325,683.703 900.885,683.703 901.444,683.703 902.003,683.703 902.562,683.703 903.122,683.703 903.681,683.703 904.24,683.703 904.799,683.703 905.359,683.703 905.918,683.703 906.477,683.703 907.036,683.703 907.596,683.703 908.155,683.703 908.714,683.703 909.273,683.703 909.833,683.703 910.392,683.703 910.951,683.703 911.51,683.703 912.07,683.703 912.629,683.703 913.188,683.703 913.747,683.703 914.307,683.703 914.866,683.703 915.425,683.703 915.984,683.703 916.544,683.703 917.103,683.703 917.662,683.703 918.221,683.703 918.781,683.703 919.34,683.703 919.899,683.703 920.458,683.703 921.018,683.703 921.577,683.703 922.136,683.703 922.695,683.703 923.255,683.703 923.814,683.703 924.373,683.703 924.932,683.703 925.492,683.703 926.051,683.703 926.61,683.703 927.169,683.703 927.729,683.703 928.288,683.703 928.847,683.703 929.406,683.703 929.966,683.703 930.525,683.703 931.084,683.703 931.644,683.703 932.203,683.703 932.762,683.703 933.321,683.703 933.881,683.703 934.44,683.703 934.999,683.703 935.558,683.703 936.118,683.703 936.677,683.703 937.236,683.703 937.795,683.703 938.355,683.703 938.914,683.703 939.473,683.703 940.032,683.703 940.592,683.703 941.151,683.703 941.71,683.703 942.269,683.703 942.829,683.703 943.388,683.703 943.947,683.703 944.506,683.703 945.066,683.703 945.625,683.703 946.184,683.703 946.743,683.703 947.303,683.703 947.862,683.703 948.421,683.703 948.98,683.703 949.54,683.703 950.099,683.703 950.658,683.703 951.217,683.703 951.777,683.703 952.336,683.703 952.895,683.703 953.454,683.703 954.014,683.703 954.573,683.703 955.132,683.703 955.691,683.703 956.251,683.703 956.81,683.703 957.369,683.703 957.928,683.703 958.488,683.703 959.047,683.703 959.606,683.703 960.165,683.703 960.725,683.703 961.284,683.703 961.843,683.703 962.402,683.703 962.962,683.703 963.521,683.703 964.08,683.703 964.639,683.703 965.199,683.703 965.758,683.703 966.317,683.703 966.876,683.703 967.436,683.703 967.995,683.703 968.554,683.703 969.113,683.703 969.673,683.703 970.232,683.703 970.791,683.703 971.35,683.703 971.91,683.703 972.469,683.703 973.028,683.703 973.587,683.703 974.147,683.703 974.706,683.703 975.265,683.703 975.824,683.703 976.384,683.703 976.943,683.703 977.502,683.703 978.061,683.703 978.621,683.703 979.18,683.703 979.739,683.703 980.298,683.703 980.858,683.703 981.417,683.703 981.976,683.703 982.535,683.703 983.095,683.703 983.654,683.703 984.213,683.703 984.772,683.703 985.332,683.703 985.891,683.703 986.45,683.703 987.009,683.703 987.569,683.703 988.128,683.703 988.687,683.703 989.246,683.703 989.806,683.703 990.365,683.703 990.924,683.703 991.483,683.703 992.043,683.703 992.602,683.703 993.161,683.703 993.72,683.703 994.28,683.703 994.839,683.703 995.398,683.703 995.957,683.703 996.517,683.703 997.076,683.703 997.635,683.703 998.194,683.703 998.754,683.703 999.313,683.703 999.872,683.703 1000.43,683.703 1000.99,683.703 1001.55,683.703 1002.11,683.703 1002.67,683.703 1003.23,683.703 1003.79,683.703 1004.35,683.703 1004.91,683.703 1005.46,683.703 1006.02,683.703 1006.58,683.703 1007.14,683.703 1007.7,683.703 1008.26,683.703 1008.82,683.703 1009.38,683.703 1009.94,683.703 1010.5,683.703 1011.06,683.703 1011.62,683.703 1012.18,683.703 1012.73,683.703 1013.29,683.703 1013.85,683.703 1014.41,683.703 1014.97,683.703 1015.53,683.703 1016.09,683.703 1016.65,683.703 1017.21,683.703 1017.77,683.703 1018.33,683.703 1018.89,683.703 1019.45,683.703 1020.01,683.703 1020.56,683.703 1021.12,683.703 1021.68,683.703 1022.24,683.703 1022.8,683.703 1023.36,683.703 1023.92,683.703 1024.48,683.703 1025.04,683.703 1025.6,683.703 1026.16,683.703 1026.72,683.703 1027.28,683.703 1027.83,683.703 1028.39,683.703 1028.95,683.703 1029.51,683.703 1030.07,683.703 1030.63,683.703 1031.19,683.703 1031.75,683.703 1032.31,683.703 1032.87,683.703 1033.43,683.703 1033.99,683.703 1034.55,683.703 1035.1,683.703 1035.66,683.703 1036.22,683.703 1036.78,683.703 1037.34,683.703 1037.9,683.703 1038.46,683.703 1039.02,683.703 1039.58,683.703 1040.14,683.703 1040.7,683.703 1041.26,683.703 1041.82,683.703 1042.38,683.703 1042.93,683.703 1043.49,683.703 1044.05,683.703 1044.61,683.703 1045.17,683.703 1045.73,683.703 1046.29,683.703 1046.85,683.703 1047.41,683.703 1047.97,683.703 1048.53,683.703 1049.09,683.703 1049.65,683.703 1050.2,683.703 1050.76,683.703 1051.32,683.703 1051.88,683.703 1052.44,683.703 1053,683.703 1053.56,683.703 1054.12,683.703 1054.68,683.703 1055.24,683.703 1055.8,683.703 1056.36,683.703 1056.92,683.703 1057.48,683.703 1058.03,683.703 1058.59,683.703 1059.15,683.703 1059.71,683.703 1060.27,683.703 1060.83,683.703 1061.39,683.703 1061.95,683.703 1062.51,683.703 1063.07,683.703 1063.63,683.703 1064.19,683.703 1064.75,683.703 1065.3,683.703 1065.86,683.703 1066.42,683.703 1066.98,683.703 1067.54,683.703 1068.1,683.703 1068.66,683.703 1069.22,683.703 1069.78,683.703 1070.34,683.703 1070.9,683.703 1071.46,683.703 1072.02,683.703 1072.57,683.703 1073.13,683.703 1073.69,683.703 1074.25,683.703 1074.81,683.703 1075.37,683.703 1075.93,683.703 1076.49,683.703 1077.05,683.703 1077.61,683.703 1078.17,683.703 1078.73,683.703 1079.29,683.703 1079.85,683.703 1080.4,683.703 1080.96,683.703 1081.52,683.703 1082.08,683.703 1082.64,683.703 1083.2,683.703 1083.76,683.703 1084.32,683.703 1084.88,683.703 1085.44,683.703 1086,683.703 1086.56,683.703 1087.12,683.703 1087.67,683.703 1088.23,683.703 1088.79,683.703 1089.35,683.703 1089.91,683.703 1090.47,683.703 1091.03,683.703 1091.59,683.703 1092.15,683.703 1092.71,683.703 1093.27,683.703 1093.83,683.703 1094.39,683.703 1094.94,683.703 1095.5,683.703 1096.06,683.703 1096.62,683.703 1097.18,683.703 1097.74,683.703 1098.3,683.703 1098.86,683.703 1099.42,683.703 1099.98,683.703 1100.54,683.703 1101.1,683.703 1101.66,683.703 1102.22,683.703 1102.77,683.703 1103.33,683.703 1103.89,683.703 1104.45,683.703 1105.01,683.703 1105.57,683.703 1106.13,683.703 1106.69,683.703 1107.25,683.703 1107.81,683.703 1108.37,683.703 1108.93,683.703 1109.49,683.703 1110.04,683.703 1110.6,683.703 1111.16,683.703 1111.72,683.703 1112.28,683.703 1112.84,683.703 1113.4,683.703 1113.96,683.703 1114.52,683.703 1115.08,683.703 1115.64,683.703 1116.2,683.703 1116.76,683.703 1117.31,683.703 1117.87,683.703 1118.43,683.703 1118.99,683.703 1119.55,683.703 1120.11,683.703 1120.67,683.703 1121.23,683.703 1121.79,683.703 1122.35,683.703 1122.91,683.703 1123.47,683.703 1124.03,683.703 1124.59,683.703 1125.14,683.703 1125.7,683.703 1126.26,683.703 1126.82,683.703 1127.38,683.703 1127.94,683.703 1128.5,683.703 1129.06,683.703 1129.62,683.703 1130.18,683.703 1130.74,683.703 1131.3,683.703 1131.86,683.703 1132.41,683.703 1132.97,683.703 1133.53,683.703 1134.09,683.703 1134.65,683.703 1135.21,683.703 1135.77,683.703 1136.33,683.703 1136.89,683.703 1137.45,683.703 1138.01,683.703 1138.57,683.703 1139.13,683.703 1139.68,683.703 1140.24,683.703 1140.8,683.703 1141.36,683.703 1141.92,683.703 1142.48,683.703 1143.04,683.703 1143.6,683.703 1144.16,683.703 1144.72,683.703 1145.28,683.703 1145.84,683.703 1146.4,683.703 1146.96,683.703 1147.51,683.703 1148.07,683.703 1148.63,683.703 1149.19,683.703 1149.75,683.703 1150.31,683.703 1150.87,683.703 1151.43,683.703 1151.99,683.703 1152.55,683.703 1153.11,683.703 1153.67,683.703 1154.23,683.703 1154.78,683.703 1155.34,683.703 1155.9,683.703 1156.46,683.703 1157.02,683.703 1157.58,683.703 1158.14,683.703 1158.7,683.703 1159.26,683.703 1159.82,683.703 1160.38,683.703 1160.94,683.703 1161.5,683.703 1162.05,683.703 1162.61,683.703 1163.17,683.703 1163.73,683.703 1164.29,683.703 1164.85,683.703 1165.41,683.703 1165.97,683.703 1166.53,683.703 1167.09,683.703 1167.65,683.703 1168.21,683.703 1168.77,683.703 1169.33,683.703 1169.88,683.703 1170.44,683.703 1171,683.703 1171.56,683.703 1172.12,683.703 1172.68,683.703 1173.24,683.703 1173.8,683.703 1174.36,683.703 1174.92,683.703 1175.48,683.703 1176.04,683.703 1176.6,683.703 1177.15,683.703 1177.71,683.703 1178.27,683.703 1178.83,683.703 1179.39,683.703 1179.95,683.703 1180.51,683.703 1181.07,683.703 1181.63,683.703 1182.19,683.703 1182.75,683.703 1183.31,683.703 1183.87,683.703 1184.43,683.703 1184.98,683.703 1185.54,683.703 1186.1,683.703 1186.66,683.703 1187.22,683.703 1187.78,683.703 1188.34,683.703 1188.9,683.703 1189.46,683.703 1190.02,683.703 1190.58,683.703 1191.14,683.703 1191.7,683.703 1192.25,683.703 1192.81,683.703 1193.37,683.703 1193.93,683.703 1194.49,683.703 1195.05,683.703 1195.61,683.703 1196.17,683.703 1196.73,683.703 1197.29,683.703 1197.85,683.703 1198.41,683.703 1198.97,683.703 1199.52,683.703 1200.08,683.703 1200.64,683.703 1201.2,683.703 1201.76,683.703 1202.32,683.703 1202.88,683.703 1203.44,683.703 1204,683.703 1204.56,683.703 1205.12,683.703 1205.68,683.703 1206.24,683.703 1206.8,683.703 1207.35,683.703 1207.91,683.703 1208.47,683.703 1209.03,683.703 1209.59,683.703 1210.15,683.703 1210.71,683.703 1211.27,683.703 1211.83,683.703 1212.39,683.703 1212.95,683.703 1213.51,683.703 1214.07,683.703 1214.62,683.703 1215.18,683.703 1215.74,683.703 1216.3,683.703 1216.86,683.703 1217.42,683.703 1217.98,683.703 1218.54,683.703 1219.1,683.703 1219.66,683.703 1220.22,683.703 1220.78,683.703 1221.34,683.703 1221.89,683.703 1222.45,683.703 1223.01,683.703 1223.57,683.703 1224.13,683.703 1224.69,683.703 1225.25,683.703 1225.81,683.703 1226.37,683.703 1226.93,683.703 1227.49,683.703 1228.05,683.703 1228.61,683.703 1229.17,683.703 1229.72,683.703 1230.28,683.703 1230.84,683.703 1231.4,683.703 1231.96,683.703 1232.52,683.703 1233.08,683.703 1233.64,683.703 1234.2,683.703 1234.76,683.703 1235.32,683.703 1235.88,683.703 1236.44,683.703 1236.99,683.703 1237.55,683.703 1238.11,683.703 1238.67,683.703 1239.23,683.703 1239.79,683.703 1240.35,683.703 1240.91,683.703 1241.47,683.703 1242.03,683.703 1242.59,683.703 1243.15,683.703 1243.71,683.703 1244.26,683.703 1244.82,683.703 1245.38,683.703 1245.94,683.703 1246.5,683.703 1247.06,683.703 1247.62,683.703 1248.18,683.703 1248.74,683.703 1249.3,683.703 1249.86,683.703 1250.42,683.703 1250.98,683.703 1251.54,683.703 1252.09,683.703 1252.65,683.703 1253.21,683.703 1253.77,683.703 1254.33,683.703 1254.89,683.703 1255.45,683.703 1256.01,683.703 1256.57,683.703 1257.13,683.703 1257.69,683.703 1258.25,683.703 1258.81,683.703 1259.36,683.703 1259.92,683.703 1260.48,683.703 1261.04,683.703 1261.6,683.703 1262.16,683.703 1262.72,683.703 1263.28,683.703 1263.84,683.703 1264.4,683.703 1264.96,683.703 1265.52,683.703 1266.08,683.703 1266.63,683.703 1267.19,683.703 1267.75,683.703 1268.31,683.703 1268.87,683.703 1269.43,683.703 1269.99,683.703 1270.55,683.703 1271.11,683.703 1271.67,683.703 1272.23,683.703 1272.79,683.703 1273.35,683.703 1273.91,683.703 1274.46,683.703 1275.02,683.703 1275.58,683.703 1276.14,683.703 1276.7,683.703 1277.26,683.703 1277.82,683.703 1278.38,683.703 1278.94,683.703 1279.5,683.703 1280.06,683.703 1280.62,683.703 1281.18,683.703 1281.73,683.703 1282.29,683.703 1282.85,683.703 1283.41,683.703 1283.97,683.703 1284.53,683.703 1285.09,683.703 1285.65,683.703 1286.21,683.703 1286.77,683.703 1287.33,683.703 1287.89,683.703 1288.45,683.703 1289,683.703 1289.56,683.703 1290.12,683.703 1290.68,683.703 1291.24,683.703 1291.8,683.703 1292.36,683.703 1292.92,683.703 1293.48,683.703 1294.04,683.703 1294.6,683.703 1295.16,683.703 1295.72,683.703 1296.28,683.703 1296.83,683.703 1297.39,683.703 1297.95,683.703 1298.51,683.703 1299.07,683.703 1299.63,683.703 1300.19,683.703 1300.75,683.703 1301.31,683.703 1301.87,683.703 1302.43,683.703 1302.99,683.703 1303.55,683.703 1304.1,683.703 1304.66,683.703 1305.22,683.703 1305.78,683.703 1306.34,683.703 1306.9,683.703 1307.46,683.703 1308.02,683.703 1308.58,683.703 1309.14,683.703 1309.7,683.703 1310.26,683.703 1310.82,683.703 1311.38,683.703 1311.93,683.703 1312.49,683.703 1313.05,683.703 1313.61,683.703 1314.17,683.703 1314.73,683.703 1315.29,683.703 1315.85,683.703 1316.41,683.703 1316.97,683.703 1317.53,683.703 1318.09,683.703 1318.65,683.703 1319.2,683.703 1319.76,683.703 1320.32,683.703 1320.88,683.703 1321.44,683.703 1322,683.703 1322.56,683.703 1323.12,683.703 1323.68,683.703 1324.24,683.703 1324.8,683.703 1325.36,683.703 1325.92,683.703 1326.47,683.703 1327.03,683.703 1327.59,683.703 1328.15,683.703 1328.71,683.703 1329.27,683.703 1329.83,683.703 1330.39,683.703 1330.95,683.703 1331.51,683.703 1332.07,683.703 1332.63,683.703 1333.19,683.703 1333.75,683.703 1334.3,683.703 1334.86,683.703 1335.42,683.703 1335.98,683.703 1336.54,683.703 1337.1,683.703 1337.66,683.703 1338.22,683.703 1338.78,683.703 1339.34,683.703 1339.9,683.703 1340.46,683.703 1341.02,683.703 1341.57,683.703 1342.13,683.703 1342.69,683.703 1343.25,683.703 1343.81,683.703 1344.37,683.703 1344.93,683.703 1345.49,683.703 1346.05,683.703 1346.61,683.703 1347.17,683.703 1347.73,683.703 1348.29,683.703 1348.84,683.703 1349.4,683.703 1349.96,683.703 1350.52,683.703 1351.08,683.703 1351.64,683.703 1352.2,683.703 1352.76,683.703 1353.32,683.703 1353.88,683.703 1354.44,683.703 1355,683.703 1355.56,683.703 1356.12,683.703 1356.67,683.703 1357.23,683.703 1357.79,683.703 1358.35,683.703 1358.91,683.703 1359.47,683.703 1360.03,683.703 1360.59,683.703 1361.15,683.703 1361.71,683.703 1362.27,683.703 1362.83,683.703 1363.39,683.703 1363.94,683.703 1364.5,683.703 1365.06,683.703 1365.62,683.703 1366.18,683.703 1366.74,683.703 1367.3,683.703 1367.86,683.703 1368.42,683.703 1368.98,683.703 1369.54,683.703 1370.1,683.703 1370.66,683.703 1371.21,683.703 1371.77,683.703 1372.33,683.703 1372.89,683.703 1373.45,683.703 1374.01,683.703 1374.57,683.703 1375.13,683.703 1375.69,683.703 1376.25,683.703 1376.81,683.703 1377.37,683.703 1377.93,683.703 1378.49,683.703 1379.04,683.703 1379.6,683.703 1380.16,683.703 1380.72,683.703 1381.28,683.703 1381.84,683.703 1382.4,683.703 1382.96,683.703 1383.52,683.703 1384.08,683.703 1384.64,683.703 1385.2,683.703 1385.76,683.703 1386.31,683.703 1386.87,683.703 1387.43,683.703 1387.99,683.703 1388.55,683.703 1389.11,683.703 1389.67,683.703 1390.23,683.703 1390.79,683.703 1391.35,683.703 1391.91,683.703 1392.47,683.703 1393.03,683.703 1393.58,683.703 1394.14,683.703 1394.7,683.703 1395.26,683.703 1395.82,683.703 1396.38,683.703 1396.94,683.703 1397.5,683.703 1398.06,683.703 1398.62,683.703 1399.18,683.703 1399.74,683.703 1400.3,683.703 1400.86,683.703 1401.41,683.703 1401.97,683.703 1402.53,683.703 1403.09,683.703 1403.65,683.703 1404.21,683.703 1404.77,683.703 1405.33,683.703 1405.89,683.703 1406.45,683.703 1407.01,683.703 1407.57,683.703 1408.13,683.703 1408.68,683.703 1409.24,683.703 1409.8,683.703 1410.36,683.703 1410.92,683.703 1411.48,683.703 1412.04,683.703 1412.6,683.703 1413.16,683.703 1413.72,683.703 1414.28,683.703 1414.84,683.703 1415.4,683.703 1415.95,683.703 1416.51,683.703 1417.07,683.703 1417.63,683.703 1418.19,683.703 1418.75,683.703 1419.31,683.703 1419.87,683.703 1420.43,683.703 1420.99,683.703 1421.55,683.703 1422.11,683.703 1422.67,683.703 1423.23,683.703 1423.78,683.703 1424.34,683.703 1424.9,683.703 1425.46,683.703 1426.02,683.703 1426.58,683.703 1427.14,683.703 1427.7,683.703 1428.26,683.703 1428.82,683.703 1429.38,683.703 1429.94,683.703 1430.5,683.703 1431.05,683.703 1431.61,683.703 1432.17,683.703 1432.73,683.703 1433.29,683.703 1433.85,683.703 1434.41,683.703 1434.97,683.703 1435.53,683.703 1436.09,683.703 1436.65,683.703 1437.21,683.703 1437.77,683.703 1438.33,683.703 1438.88,683.703 1439.44,683.703 1440,683.703 1440.56,683.703 1441.12,683.703 1441.68,683.703 1442.24,683.703 1442.8,683.703 1443.36,683.703 1443.92,683.703 1444.48,683.703 1445.04,683.703 1445.6,683.703 1446.15,683.703 1446.71,683.703 1447.27,683.703 1447.83,683.703 1448.39,683.703 1448.95,683.703 1449.51,683.703 1450.07,683.703 1450.63,683.703 1451.19,683.703 1451.75,683.703 1452.31,683.703 1452.87,683.703 1453.42,683.703 1453.98,683.703 1454.54,683.703 1455.1,683.703 1455.66,683.703 1456.22,683.703 1456.78,683.703 1457.34,683.703 1457.9,683.703 1458.46,683.703 1459.02,683.703 1459.58,683.703 1460.14,683.703 1460.7,683.703 1461.25,683.703 1461.81,683.703 1462.37,683.703 1462.93,683.703 1463.49,683.703 1464.05,683.703 1464.61,683.703 1465.17,683.703 1465.73,683.703 1466.29,683.703 1466.85,683.703 1467.41,683.703 1467.97,683.703 1468.52,683.703 1469.08,683.703 1469.64,683.703 1470.2,683.703 1470.76,683.703 1471.32,683.703 1471.88,683.703 1472.44,683.703 1473,683.703 1473.56,683.703 1474.12,683.703 1474.68,683.703 1475.24,683.703 1475.79,683.703 1476.35,683.703 1476.91,683.703 1477.47,683.703 1478.03,683.703 1478.59,683.703 1479.15,683.703 1479.71,683.703 1480.27,683.703 1480.83,683.703 1481.39,683.703 1481.95,683.703 1482.51,683.703 1483.07,683.703 1483.62,683.703 1484.18,683.703 1484.74,683.703 1485.3,683.703 1485.86,683.703 1486.42,683.703 1486.98,683.703 1487.54,683.703 1488.1,683.703 1488.66,683.703 1489.22,683.703 1489.78,683.703 1490.34,683.703 1490.89,683.703 1491.45,683.703 1492.01,683.703 1492.57,683.703 1493.13,683.703 1493.69,683.703 1494.25,683.703 1494.81,683.703 1495.37,683.703 1495.93,683.703 1496.49,683.703 1497.05,683.703 1497.61,683.703 1498.16,683.703 1498.72,683.703 1499.28,683.703 1499.84,683.703 1500.4,683.703 1500.96,683.703 1501.52,683.703 1502.08,683.703 1502.64,683.703 1503.2,683.703 1503.76,683.703 1504.32,683.703 1504.88,683.703 1505.44,683.703 1505.99,683.703 1506.55,683.703 1507.11,683.703 1507.67,683.703 1508.23,683.703 1508.79,683.703 1509.35,683.703 1509.91,683.703 1510.47,683.703 1511.03,683.703 1511.59,683.703 1512.15,683.703 1512.71,683.703 1513.26,683.703 1513.82,683.703 1514.38,683.703 1514.94,683.703 1515.5,683.703 1516.06,683.703 1516.62,683.703 1517.18,683.703 1517.74,683.703 1518.3,683.703 1518.86,683.703 1519.42,683.703 1519.98,683.703 1520.53,683.703 1521.09,683.703 1521.65,683.703 1522.21,683.703 1522.77,683.703 1523.33,683.703 1523.89,683.703 1524.45,683.703 1525.01,683.703 1525.57,683.703 1526.13,683.703 1526.69,683.703 1527.25,683.703 1527.81,683.703 1528.36,683.703 1528.92,683.703 1529.48,683.703 1530.04,683.703 1530.6,683.703 1531.16,683.703 1531.72,683.703 1532.28,683.703 1532.84,683.703 1533.4,683.703 1533.96,683.703 1534.52,683.703 1535.08,683.703 1535.63,683.703 1536.19,683.703 1536.75,683.703 1537.31,683.703 1537.87,683.703 1538.43,683.703 1538.99,683.703 1539.55,683.703 1540.11,683.703 1540.67,683.703 1541.23,683.703 1541.79,683.703 1542.35,683.703 1542.9,683.703 1543.46,683.703 1544.02,683.703 1544.58,683.703 1545.14,683.703 1545.7,683.703 1546.26,683.703 1546.82,683.703 1547.38,683.703 1547.94,683.703 1548.5,683.703 1549.06,683.703 1549.62,683.703 1550.18,683.703 1550.73,683.703 1551.29,683.703 1551.85,683.703 1552.41,683.703 1552.97,683.703 1553.53,683.703 1554.09,683.703 1554.65,683.703 1555.21,683.703 1555.77,683.703 1556.33,683.703 1556.89,683.703 1557.45,683.703 1558,683.703 1558.56,683.703 1559.12,683.703 1559.68,683.703 1560.24,683.703 1560.8,683.703 1561.36,683.703 1561.92,683.703 1562.48,683.703 1563.04,683.703 1563.6,683.703 1564.16,683.703 1564.72,683.703 1565.28,683.703 1565.83,683.703 1566.39,683.703 1566.95,683.703 1567.51,683.703 1568.07,683.703 1568.63,683.703 1569.19,683.703 1569.75,683.703 1570.31,683.703 1570.87,683.703 1571.43,683.703 1571.99,683.703 1572.55,683.703 1573.1,683.703 1573.66,683.703 1574.22,683.703 1574.78,683.703 1575.34,683.703 1575.9,683.703 1576.46,683.703 1577.02,683.703 1577.58,683.703 1578.14,683.703 1578.7,683.703 1579.26,683.703 1579.82,683.703 1580.37,683.703 1580.93,683.703 1581.49,683.703 1582.05,683.703 1582.61,683.703 1583.17,683.703 1583.73,683.703 1584.29,683.703 1584.85,683.703 1585.41,683.703 1585.97,683.703 1586.53,683.703 1587.09,683.703 1587.65,683.703 1588.2,683.703 1588.76,683.703 1589.32,683.703 1589.88,683.703 1590.44,683.703 1591,683.703 1591.56,683.703 1592.12,683.703 1592.68,683.703 1593.24,683.703 1593.8,683.703 1594.36,683.703 1594.92,683.703 1595.47,683.703 1596.03,683.703 1596.59,683.703 1597.15,683.703 1597.71,683.703 1598.27,683.703 1598.83,683.703 1599.39,683.703 1599.95,683.703 1600.51,683.703 1601.07,683.703 1601.63,683.703 1602.19,683.703 1602.74,683.703 1603.3,683.703 1603.86,683.703 1604.42,683.703 1604.98,683.703 1605.54,683.703 1606.1,683.703 1606.66,683.703 1607.22,683.703 1607.78,683.703 1608.34,683.703 1608.9,683.703 1609.46,683.703 1610.02,683.703 1610.57,683.703 1611.13,683.703 1611.69,683.703 1612.25,683.703 1612.81,683.703 1613.37,683.703 1613.93,683.703 1614.49,683.703 1615.05,683.703 1615.61,683.703 1616.17,683.703 1616.73,683.703 1617.29,683.703 1617.84,683.703 1618.4,683.703 1618.96,683.703 1619.52,683.703 1620.08,683.703 1620.64,683.703 1621.2,683.703 1621.76,683.703 1622.32,683.703 1622.88,683.703 1623.44,683.703 1624,683.703 1624.56,683.703 1625.11,683.703 1625.67,683.703 1626.23,683.703 1626.79,683.703 1627.35,683.703 1627.91,683.703 1628.47,683.703 1629.03,683.703 1629.59,683.703 1630.15,683.703 1630.71,683.703 1631.27,683.703 1631.83,683.703 1632.39,683.703 1632.94,683.703 1633.5,683.703 1634.06,683.703 1634.62,683.703 1635.18,683.703 1635.74,683.703 1636.3,683.703 1636.86,683.703 1637.42,683.703 1637.98,683.703 1638.54,683.703 1639.1,683.703 1639.66,683.703 1640.21,683.703 1640.77,683.703 1641.33,683.703 1641.89,683.703 1642.45,683.703 1643.01,683.703 1643.57,683.703 1644.13,683.703 1644.69,683.703 1645.25,683.703 1645.81,683.703 1646.37,683.703 1646.93,683.703 1647.48,683.703 1648.04,683.703 1648.6,683.703 1649.16,683.703 1649.72,683.703 1650.28,683.703 1650.84,683.703 1651.4,683.703 1651.96,683.703 1652.52,683.703 1653.08,683.703 1653.64,683.703 1654.2,683.703 1654.76,683.703 1655.31,683.703 1655.87,683.703 1656.43,683.703 1656.99,683.703 1657.55,683.703 1658.11,683.703 1658.67,683.703 1659.23,683.703 1659.79,683.703 1660.35,683.703 1660.91,683.703 1661.47,683.703 1662.03,683.703 1662.58,683.703 1663.14,683.703 1663.7,683.703 1664.26,683.703 1664.82,683.703 1665.38,683.703 1665.94,683.703 1666.5,683.703 1667.06,683.703 1667.62,683.703 1668.18,683.703 1668.74,683.703 1669.3,683.703 1669.85,683.703 1670.41,683.703 1670.97,683.703 1671.53,683.703 1672.09,683.703 1672.65,683.703 1673.21,683.703 1673.77,683.703 1674.33,683.703 1674.89,683.703 1675.45,683.703 1676.01,683.703 1676.57,683.703 1677.13,683.703 1677.68,683.703 1678.24,683.703 1678.8,683.703 1679.36,683.703 1679.92,683.703 1680.48,683.703 1681.04,683.703 1681.6,683.703 1682.16,683.703 1682.72,683.703 1683.28,683.703 1683.84,683.703 1684.4,683.703 1684.95,683.703 1685.51,683.703 1686.07,683.703 1686.63,683.703 1687.19,683.703 1687.75,683.703 1688.31,683.703 1688.87,683.703 1689.43,683.703 1689.99,683.703 1690.55,683.703 1691.11,683.703 1691.67,683.703 1692.23,683.703 1692.78,683.703 1693.34,683.703 1693.9,683.703 1694.46,683.703 1695.02,683.703 1695.58,683.703 1696.14,683.703 1696.7,683.703 1697.26,683.703 1697.82,683.703 1698.38,683.703 1698.94,683.703 1699.5,683.703 1700.05,683.703 1700.61,683.703 1701.17,683.703 1701.73,683.703 1702.29,683.703 1702.85,683.703 1703.41,683.703 1703.97,683.703 1704.53,683.703 1705.09,683.703 1705.65,683.703 1706.21,683.703 1706.77,683.703 1707.32,683.703 1707.88,683.703 1708.44,683.703 1709,683.703 1709.56,683.703 1710.12,683.703 1710.68,683.703 1711.24,683.703 1711.8,683.703 1712.36,683.703 1712.92,683.703 1713.48,683.703 1714.04,683.703 1714.6,683.703 1715.15,683.703 1715.71,683.703 1716.27,683.703 1716.83,683.703 1717.39,683.703 1717.95,683.703 1718.51,683.703 1719.07,683.703 1719.63,683.703 1720.19,683.703 1720.75,683.703 1721.31,683.703 1721.87,683.703 1722.42,683.703 1722.98,683.703 1723.54,683.703 1724.1,683.703 1724.66,683.703 1725.22,683.703 1725.78,683.703 1726.34,683.703 1726.9,683.703 1727.46,683.703 1728.02,683.703 1728.58,683.703 1729.14,683.703 1729.69,683.703 1730.25,683.703 1730.81,683.703 1731.37,683.703 1731.93,683.703 1732.49,683.703 1733.05,683.703 1733.61,683.703 1734.17,683.703 1734.73,683.703 1735.29,683.703 1735.85,683.703 1736.41,683.703 1736.97,683.703 1737.52,683.703 1738.08,683.703 1738.64,683.703 1739.2,683.703 1739.76,683.703 1740.32,683.703 1740.88,683.703 1741.44,683.703 1742,683.703 1742.56,683.703 1743.12,683.703 1743.68,683.703 1744.24,683.703 1744.79,683.703 1745.35,683.703 1745.91,683.703 1746.47,683.703 1747.03,683.703 1747.59,683.703 1748.15,683.703 1748.71,683.703 1749.27,683.703 1749.83,683.703 1750.39,683.703 1750.95,683.703 1751.51,683.703 1752.06,683.703 1752.62,683.703 1753.18,683.703 1753.74,683.703 1754.3,683.703 1754.86,683.703 1755.42,683.703 1755.98,683.703 1756.54,683.703 1757.1,683.703 1757.66,683.703 1758.22,683.703 1758.78,683.703 1759.34,683.703 1759.89,683.703 1760.45,683.703 1761.01,683.703 1761.57,683.703 1762.13,683.703 1762.69,683.703 1763.25,683.703 1763.81,683.703 1764.37,683.703 1764.93,683.703 1765.49,683.703 1766.05,683.703 1766.61,683.703 1767.16,683.703 1767.72,683.703 1768.28,683.703 1768.84,683.703 1769.4,683.703 1769.96,683.703 1770.52,683.703 1771.08,683.703 1771.64,683.703 1772.2,683.703 1772.76,683.703 1773.32,683.703 1773.88,683.703 1774.43,683.703 1774.99,683.703 1775.55,683.703 1776.11,683.703 1776.67,683.703 1777.23,683.703 1777.79,683.703 1778.35,683.703 1778.91,683.703 1779.47,683.703 1780.03,683.703 1780.59,683.703 1781.15,683.703 1781.71,683.703 1782.26,683.703 1782.82,683.703 1783.38,683.703 1783.94,683.703 1784.5,683.703 1785.06,683.703 1785.62,683.703 1786.18,683.703 1786.74,683.703 1787.3,683.703 1787.86,683.703 1788.42,683.703 1788.98,683.703 1789.53,683.703 1790.09,683.703 1790.65,683.703 1791.21,683.703 1791.77,683.703 1792.33,683.703 1792.89,683.703 1793.45,683.703 1794.01,683.703 1794.57,683.703 1795.13,683.703 1795.69,683.703 1796.25,683.703 1796.8,683.703 1797.36,683.703 1797.92,683.703 1798.48,683.703 1799.04,683.703 1799.6,683.703 1800.16,683.703 1800.72,683.703 1801.28,683.703 1801.84,683.703 1802.4,683.703 1802.96,683.703 1803.52,683.703 1804.08,683.703 1804.63,683.703 1805.19,683.703 1805.75,683.703 1806.31,683.703 1806.87,683.703 1807.43,683.703 1807.99,683.703 1808.55,683.703 1809.11,683.703 1809.67,683.703 1810.23,683.703 1810.79,683.703 1811.35,683.703 1811.9,683.703 1812.46,683.703 1813.02,683.703 1813.58,683.703 1814.14,683.703 1814.7,683.703 1815.26,683.703 1815.82,683.703 1816.38,683.703 1816.94,683.703 1817.5,683.703 1818.06,683.703 1818.62,683.703 1819.18,683.703 1819.73,683.703 1820.29,683.703 1820.85,683.703 1821.41,683.703 1821.97,683.703 1822.53,683.703 1823.09,683.703 1823.65,683.703 1824.21,683.703 1824.77,683.703 1825.33,683.703 1825.89,683.703 1826.45,683.703 1827,683.703 1827.56,683.703 1828.12,683.703 1828.68,683.703 1829.24,683.703 1829.8,683.703 1830.36,683.703 1830.92,683.703 1831.48,683.703 1832.04,683.703 1832.6,683.703 1833.16,683.703 1833.72,683.703 1834.27,683.703 1834.83,683.703 1835.39,683.703 1835.95,683.703 1836.51,683.703 1837.07,683.703 1837.63,683.703 1838.19,683.703 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.023429328674794 ± 0.02229677056382933\nProjected Energy: -4.015679543284401 ± (0.004069353040806689, 0.00406147043773597)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.478351</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.6271e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.6451e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0319e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.323e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.936e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.727e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.3631242916133726\n -0.7590191922770888\n  0.1358418221962232\n  0.15789998694607732\n  0.8767114411781396\n  1.5305929970973402\n  1.5835732611867366\n  3.0728703303258715\n  3.125672653951842\n  4.862107221562169\n  6.260694850380595\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
