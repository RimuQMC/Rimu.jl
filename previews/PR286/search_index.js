var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2131984275053832 ± 0.001601653949127947\n   G2(1) = 0.9172001286626524 ± 0.000750719890793711\n   G2(2) = 0.9821984572289306 ± 0.0005601681590670029\n   G2(3) = 0.9880044007114502 ± 0.0009639655674773264\n   G2(4) = 0.9821984572289306 ± 0.0005601681590670029\n   G2(5) = 0.9172001286626524 ± 0.000750719890793711\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9705396189218125 ± 0.12854062181044684\n   Replica 2: -4.057841819774994 ± 0.11201181333160733\n   Replica 3: -3.9911143266504427 ± 0.1360355800907661\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip610\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip611\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip612\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.51 2211.02,1003.51 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.2 2211.02,746.2 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.889 2211.02,488.889 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.579 2211.02,231.579 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.51 423.181,1003.51 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.2 423.181,746.2 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.889 423.181,488.889 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.579 423.181,231.579 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.96 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.96 363.608 1260.86 Q363.608 1253.73 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.52 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.86 Q344.395 1252.11 347.45 1247.52 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M290.043 1016.86 L306.363 1016.86 L306.363 1020.79 L284.418 1020.79 L284.418 1016.86 Q287.08 1014.1 291.664 1009.47 Q296.27 1004.82 297.451 1003.48 Q299.696 1000.95 300.576 999.217 Q301.478 997.457 301.478 995.767 Q301.478 993.013 299.534 991.277 Q297.613 989.541 294.511 989.541 Q292.312 989.541 289.858 990.305 Q287.427 991.068 284.65 992.619 L284.65 987.897 Q287.474 986.763 289.927 986.184 Q292.381 985.605 294.418 985.605 Q299.789 985.605 302.983 988.291 Q306.177 990.976 306.177 995.467 Q306.177 997.596 305.367 999.517 Q304.58 1001.42 302.474 1004.01 Q301.895 1004.68 298.793 1007.9 Q295.691 1011.09 290.043 1016.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M316.224 986.23 L334.58 986.23 L334.58 990.166 L320.506 990.166 L320.506 998.638 Q321.524 998.291 322.543 998.129 Q323.562 997.943 324.58 997.943 Q330.367 997.943 333.747 1001.11 Q337.126 1004.29 337.126 1009.7 Q337.126 1015.28 333.654 1018.38 Q330.182 1021.46 323.862 1021.46 Q321.687 1021.46 319.418 1021.09 Q317.173 1020.72 314.765 1019.98 L314.765 1015.28 Q316.849 1016.42 319.071 1016.97 Q321.293 1017.53 323.77 1017.53 Q327.774 1017.53 330.112 1015.42 Q332.45 1013.31 332.45 1009.7 Q332.45 1006.09 330.112 1003.99 Q327.774 1001.88 323.77 1001.88 Q321.895 1001.88 320.02 1002.3 Q318.168 1002.71 316.224 1003.59 L316.224 986.23 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 989.309 Q352.728 989.309 350.899 992.874 Q349.094 996.416 349.094 1003.55 Q349.094 1010.65 350.899 1014.22 Q352.728 1017.76 356.339 1017.76 Q359.973 1017.76 361.779 1014.22 Q363.608 1010.65 363.608 1003.55 Q363.608 996.416 361.779 992.874 Q359.973 989.309 356.339 989.309 M356.339 985.605 Q362.149 985.605 365.205 990.212 Q368.284 994.795 368.284 1003.55 Q368.284 1012.27 365.205 1016.88 Q362.149 1021.46 356.339 1021.46 Q350.529 1021.46 347.45 1016.88 Q344.395 1012.27 344.395 1003.55 Q344.395 994.795 347.45 990.212 Q350.529 985.605 356.339 985.605 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M286.062 728.92 L304.418 728.92 L304.418 732.855 L290.344 732.855 L290.344 741.327 Q291.363 740.98 292.381 740.818 Q293.4 740.633 294.418 740.633 Q300.205 740.633 303.585 743.804 Q306.964 746.975 306.964 752.392 Q306.964 757.971 303.492 761.073 Q300.02 764.151 293.701 764.151 Q291.525 764.151 289.256 763.781 Q287.011 763.411 284.603 762.67 L284.603 757.971 Q286.687 759.105 288.909 759.661 Q291.131 760.216 293.608 760.216 Q297.613 760.216 299.951 758.11 Q302.288 756.003 302.288 752.392 Q302.288 748.781 299.951 746.675 Q297.613 744.568 293.608 744.568 Q291.733 744.568 289.858 744.985 Q288.006 745.401 286.062 746.281 L286.062 728.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M326.177 731.999 Q322.566 731.999 320.737 735.563 Q318.932 739.105 318.932 746.235 Q318.932 753.341 320.737 756.906 Q322.566 760.448 326.177 760.448 Q329.811 760.448 331.617 756.906 Q333.446 753.341 333.446 746.235 Q333.446 739.105 331.617 735.563 Q329.811 731.999 326.177 731.999 M326.177 728.295 Q331.987 728.295 335.043 732.901 Q338.122 737.485 338.122 746.235 Q338.122 754.962 335.043 759.568 Q331.987 764.151 326.177 764.151 Q320.367 764.151 317.288 759.568 Q314.233 754.962 314.233 746.235 Q314.233 737.485 317.288 732.901 Q320.367 728.295 326.177 728.295 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 731.999 Q352.728 731.999 350.899 735.563 Q349.094 739.105 349.094 746.235 Q349.094 753.341 350.899 756.906 Q352.728 760.448 356.339 760.448 Q359.973 760.448 361.779 756.906 Q363.608 753.341 363.608 746.235 Q363.608 739.105 361.779 735.563 Q359.973 731.999 356.339 731.999 M356.339 728.295 Q362.149 728.295 365.205 732.901 Q368.284 737.485 368.284 746.235 Q368.284 754.962 365.205 759.568 Q362.149 764.151 356.339 764.151 Q350.529 764.151 347.45 759.568 Q344.395 754.962 344.395 746.235 Q344.395 737.485 347.45 732.901 Q350.529 728.295 356.339 728.295 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M284.835 471.609 L307.057 471.609 L307.057 473.6 L294.511 506.169 L289.627 506.169 L301.432 475.545 L284.835 475.545 L284.835 471.609 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M316.224 471.609 L334.58 471.609 L334.58 475.545 L320.506 475.545 L320.506 484.017 Q321.524 483.67 322.543 483.508 Q323.562 483.322 324.58 483.322 Q330.367 483.322 333.747 486.494 Q337.126 489.665 337.126 495.082 Q337.126 500.66 333.654 503.762 Q330.182 506.841 323.862 506.841 Q321.687 506.841 319.418 506.47 Q317.173 506.1 314.765 505.359 L314.765 500.66 Q316.849 501.795 319.071 502.35 Q321.293 502.906 323.77 502.906 Q327.774 502.906 330.112 500.799 Q332.45 498.693 332.45 495.082 Q332.45 491.47 330.112 489.364 Q327.774 487.258 323.77 487.258 Q321.895 487.258 320.02 487.674 Q318.168 488.091 316.224 488.97 L316.224 471.609 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 474.688 Q352.728 474.688 350.899 478.253 Q349.094 481.795 349.094 488.924 Q349.094 496.031 350.899 499.595 Q352.728 503.137 356.339 503.137 Q359.973 503.137 361.779 499.595 Q363.608 496.031 363.608 488.924 Q363.608 481.795 361.779 478.253 Q359.973 474.688 356.339 474.688 M356.339 470.984 Q362.149 470.984 365.205 475.591 Q368.284 480.174 368.284 488.924 Q368.284 497.651 365.205 502.257 Q362.149 506.841 356.339 506.841 Q350.529 506.841 347.45 502.257 Q344.395 497.651 344.395 488.924 Q344.395 480.174 347.45 475.591 Q350.529 470.984 356.339 470.984 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M256.664 244.924 L264.303 244.924 L264.303 218.558 L255.992 220.225 L255.992 215.966 L264.256 214.299 L268.932 214.299 L268.932 244.924 L276.571 244.924 L276.571 248.859 L256.664 248.859 L256.664 244.924 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M296.015 217.378 Q292.404 217.378 290.576 220.942 Q288.77 224.484 288.77 231.614 Q288.77 238.72 290.576 242.285 Q292.404 245.827 296.015 245.827 Q299.65 245.827 301.455 242.285 Q303.284 238.72 303.284 231.614 Q303.284 224.484 301.455 220.942 Q299.65 217.378 296.015 217.378 M296.015 213.674 Q301.826 213.674 304.881 218.28 Q307.96 222.864 307.96 231.614 Q307.96 240.341 304.881 244.947 Q301.826 249.53 296.015 249.53 Q290.205 249.53 287.127 244.947 Q284.071 240.341 284.071 231.614 Q284.071 222.864 287.127 218.28 Q290.205 213.674 296.015 213.674 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M326.177 217.378 Q322.566 217.378 320.737 220.942 Q318.932 224.484 318.932 231.614 Q318.932 238.72 320.737 242.285 Q322.566 245.827 326.177 245.827 Q329.811 245.827 331.617 242.285 Q333.446 238.72 333.446 231.614 Q333.446 224.484 331.617 220.942 Q329.811 217.378 326.177 217.378 M326.177 213.674 Q331.987 213.674 335.043 218.28 Q338.122 222.864 338.122 231.614 Q338.122 240.341 335.043 244.947 Q331.987 249.53 326.177 249.53 Q320.367 249.53 317.288 244.947 Q314.233 240.341 314.233 231.614 Q314.233 222.864 317.288 218.28 Q320.367 213.674 326.177 213.674 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 217.378 Q352.728 217.378 350.899 220.942 Q349.094 224.484 349.094 231.614 Q349.094 238.72 350.899 242.285 Q352.728 245.827 356.339 245.827 Q359.973 245.827 361.779 242.285 Q363.608 238.72 363.608 231.614 Q363.608 224.484 361.779 220.942 Q359.973 217.378 356.339 217.378 M356.339 213.674 Q362.149 213.674 365.205 218.28 Q368.284 222.864 368.284 231.614 Q368.284 240.341 365.205 244.947 Q362.149 249.53 356.339 249.53 Q350.529 249.53 347.45 244.947 Q344.395 240.341 344.395 231.614 Q344.395 222.864 347.45 218.28 Q350.529 213.674 356.339 213.674 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip612)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.579 4017.76,231.579 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.12 457.691,1248.89 458.259,1247.55 458.828,1247.23 459.396,1246.79 459.964,1246.3 460.533,1244.67 461.101,1244.08 461.669,1243.41 462.238,1242.65 462.806,1241.81 463.375,1239.85 463.943,1237.81 464.511,1236.72 465.08,1235.5 465.648,1234.19 466.216,1232.77 466.785,1231.19 467.353,1229.51 467.921,1227.69 468.49,1225.76 469.058,1222.59 469.626,1220.38 470.195,1218.02 470.763,1215.46 471.331,1211.66 471.9,1208.81 472.468,1204.67 473.036,1200.38 473.605,1196.96 474.173,1192.3 474.741,1188.49 475.31,1184.42 475.878,1180.18 476.446,1174.71 477.015,1170.09 477.583,1164.11 478.152,1159.02 478.72,1153.67 479.288,1147.18 479.857,1141.54 480.425,1133.44 480.993,1125.29 481.562,1117.91 482.13,1110.23 482.698,1101.42 483.267,1094.35 483.835,1087.22 484.403,1079.71 484.972,1071.12 485.54,1063.33 486.108,1054.29 486.677,1044.13 487.245,1034.85 487.813,1024.49 488.382,1014.02 488.95,1004.39 489.518,992.512 490.087,981.554 490.655,972.674 491.224,961.688 491.792,948.597 492.36,938.539 492.929,927.404 493.497,917.357 494.065,906.285 494.634,897.096 495.202,886.588 495.77,875.173 496.339,863.86 496.907,852.559 497.475,841.375 498.044,830.04 498.612,819.835 499.18,810.545 499.749,801.259 500.317,788.885 500.885,777.858 501.454,766.922 502.022,758.102 502.59,748.019 503.159,738.197 503.727,726.41 504.295,715.912 504.864,706.443 505.432,695.094 506.001,686.895 506.569,678.735 507.137,666.612 507.706,658.56 508.274,648.614 508.842,638.808 509.411,630.105 509.979,622.584 510.547,611.206 511.116,602.807 511.684,595.668 512.252,589.626 512.821,581.502 513.389,573.597 513.957,566.669 514.526,556.824 515.094,548.033 515.662,538.675 516.231,529.451 516.799,522.644 517.367,515.978 517.936,511.304 518.504,503.57 519.072,498.15 519.641,491.639 520.209,484.264 520.778,477.112 521.346,471.101 521.914,464.329 522.483,458.689 523.051,454.353 523.619,449.991 524.188,444.718 524.756,440.355 525.324,435.275 525.893,428.02 526.461,423.098 527.029,417.483 527.598,413.922 528.166,409.256 528.734,403.627 529.303,399.269 529.871,396.247 530.439,390.054 531.008,386.171 531.576,383.097 532.144,381.095 532.713,377.368 533.281,374.459 533.85,371.677 534.418,367.946 534.986,363.416 535.555,360.941 536.123,358.424 536.691,355.954 537.26,353.553 537.828,351.027 538.396,347.7 538.965,344.273 539.533,339.327 540.101,336.337 540.67,332.322 541.238,328.4 541.806,326.788 542.375,324.072 542.943,320.557 543.511,316.211 544.08,309.935 544.648,309.163 545.216,307.341 545.785,303.572 546.353,301.746 546.921,301.197 547.49,301.518 548.058,301.745 548.627,301.728 549.195,300.919 549.763,300.978 550.332,300.886 550.9,300.553 551.468,298.534 552.037,295.403 552.605,293.458 553.173,292.475 553.742,291.636 554.31,290.593 554.878,290.816 555.447,289.918 556.015,287.823 556.583,286.822 557.152,285.968 557.72,283.929 558.288,282.221 558.857,280.554 559.425,277.8 559.993,276.205 560.562,274.734 561.13,274.45 561.698,272.054 562.267,271.913 562.835,270.579 563.404,269.375 563.972,270.394 564.54,270.303 565.109,270.187 565.677,269.75 566.245,267.409 566.814,265.901 567.382,265.781 567.95,265.568 568.519,264.207 569.087,264.008 569.655,262.838 570.224,263.737 570.792,266.676 571.36,267.348 571.929,265.719 572.497,265.336 573.065,264.829 573.634,262.271 574.202,262.073 574.77,260.857 575.339,260.517 575.907,259.148 576.476,257.878 577.044,257.631 577.612,257.204 578.181,256.734 578.749,258.596 579.317,254.089 579.886,256.141 580.454,257.995 581.022,257.607 581.591,258.287 582.159,256.808 582.727,259.337 583.296,255.745 583.864,253.546 584.432,252.354 585.001,252.152 585.569,249.9 586.137,247.945 586.706,248.217 587.274,250.317 587.842,248.923 588.411,248.821 588.979,245.665 589.547,243.827 590.116,244.159 590.684,243.437 591.253,244.781 591.821,244.115 592.389,245.422 592.958,245.682 593.526,244.73 594.094,244.889 594.663,245.024 595.231,243.348 595.799,244.758 596.368,244.787 596.936,243.572 597.504,242.814 598.073,246.118 598.641,246.019 599.209,244.919 599.778,246.849 600.346,246.814 600.914,247.723 601.483,247.495 602.051,246.402 602.619,247.344 603.188,248.277 603.756,247.127 604.325,245.901 604.893,245.953 605.461,243.858 606.03,240.745 606.598,237.707 607.166,237.015 607.735,236.349 608.303,235.928 608.871,239.613 609.44,239.868 610.008,238.029 610.576,238.556 611.145,238.104 611.713,236.482 612.281,235.885 612.85,238.454 613.418,238.514 613.986,238.781 614.555,239.046 615.123,240.083 615.691,239.488 616.26,240.755 616.828,241.845 617.396,239.92 617.965,242.183 618.533,241.087 619.102,241.292 619.67,240.233 620.238,240.325 620.807,241.471 621.375,239.379 621.943,239.515 622.512,238.751 623.08,237.952 623.648,238.186 624.217,239.371 624.785,240.737 625.353,242.064 625.922,241.871 626.49,241.939 627.058,242.768 627.627,242.623 628.195,241.412 628.763,240.243 629.332,239.337 629.9,240.443 630.468,239.386 631.037,239.579 631.605,239.506 632.173,239.569 632.742,239.435 633.31,237.386 633.879,236.566 634.447,236.916 635.015,233.977 635.584,234.408 636.152,231.77 636.72,230.139 637.289,234 637.857,236.736 638.425,237.963 638.994,237.899 639.562,237.246 640.13,238.38 640.699,235.228 641.267,234.534 641.835,234.086 642.404,234.469 642.972,234.69 643.54,233.974 644.109,235.297 644.677,233.343 645.245,234.123 645.814,234.424 646.382,235.898 646.951,235.111 647.519,234.471 648.087,233.471 648.656,234.011 649.224,236.481 649.792,236.668 650.361,235.828 650.929,232.101 651.497,232.681 652.066,234.239 652.634,234.809 653.202,235.222 653.771,234.593 654.339,233.8 654.907,236.015 655.476,236.274 656.044,236.432 656.612,234.677 657.181,233.179 657.749,233.509 658.317,230.828 658.886,231.712 659.454,231.337 660.022,231.846 660.591,233.265 661.159,233.647 661.728,235.122 662.296,236.537 662.864,235.767 663.433,234.087 664.001,234.413 664.569,232.912 665.138,234.734 665.706,234.932 666.274,235.333 666.843,236.861 667.411,236.96 667.979,237.028 668.548,238.118 669.116,237.04 669.684,236.078 670.253,232.093 670.821,233.387 671.389,233.813 671.958,233.241 672.526,234.73 673.094,236.161 673.663,235.252 674.231,234.147 674.799,234.528 675.368,235.715 675.936,234.171 676.505,234.488 677.073,234.909 677.641,236.44 678.21,236.592 678.778,235.78 679.346,237.958 679.915,238.192 680.483,237.37 681.051,237.508 681.62,239.846 682.188,239.808 682.756,240.905 683.325,241.665 683.893,240.863 684.461,240.592 685.03,241.5 685.598,242.167 686.166,243.957 686.735,244.515 687.303,245.025 687.871,245.319 688.44,244.828 689.008,243.311 689.577,242.776 690.145,242.42 690.713,243.985 691.282,243.325 691.85,243.686 692.418,243.069 692.987,243.579 693.555,242.999 694.123,242.475 694.692,240.835 695.26,238.447 695.828,239.387 696.397,239.981 696.965,238.591 697.533,238.369 698.102,237.964 698.67,238.807 699.238,238.466 699.807,238.319 700.375,238.025 700.943,235.897 701.512,237.12 702.08,235.661 702.648,236.612 703.217,236.395 703.785,236.443 704.354,236.268 704.922,236.086 705.49,236.035 706.059,235.81 706.627,235.714 707.195,234.475 707.764,234.41 708.332,232.494 708.9,233.618 709.469,233.722 710.037,232.612 710.605,232.706 711.174,232.733 711.742,231.918 712.31,230.985 712.879,231.197 713.447,231.484 714.015,230.547 714.584,231.945 715.152,231.244 715.72,230.524 716.289,235.111 716.857,234.11 717.425,233.198 717.994,233.237 718.562,233.253 719.131,233.413 719.699,234.559 720.267,235.475 720.836,235.231 721.404,234.061 721.972,229.83 722.541,229.955 723.109,230.132 723.677,228.209 724.246,227.622 724.814,228.256 725.382,226.612 725.951,227.215 726.519,228.001 727.087,228.711 727.656,229.043 728.224,229.732 728.792,230.063 729.361,227.136 729.929,228.311 730.497,227.569 731.066,228.054 731.634,227.431 732.203,226.936 732.771,227.339 733.339,230.911 733.908,230.182 734.476,232.492 735.044,232.784 735.613,234.984 736.181,231.92 736.749,231.944 737.318,234.368 737.886,235.562 738.454,234.188 739.023,234.144 739.591,235.12 740.159,236.431 740.728,237.404 741.296,236.152 741.864,235.934 742.433,236.712 743.001,236.544 743.569,236.08 744.138,234.883 744.706,233.7 745.274,233.554 745.843,235.395 746.411,233.169 746.98,233.157 747.548,235.325 748.116,236.397 748.685,236.187 749.253,236.909 749.821,235.585 750.39,236.522 750.958,234.279 751.526,233.299 752.095,233.191 752.663,233.252 753.231,234.105 753.8,234.13 754.368,233.152 754.936,232.11 755.505,233.149 756.073,234.369 756.641,233.289 757.21,231.383 757.778,231.466 758.346,229.542 758.915,229.862 759.483,230.152 760.052,230.307 760.62,230.563 761.188,230.003 761.757,233.311 762.325,233.366 762.893,232.576 763.462,231.643 764.03,231.889 764.598,231.038 765.167,230.158 765.735,229.375 766.303,229.757 766.872,230.223 767.44,228.455 768.008,226.69 768.577,226.151 769.145,225.502 769.713,222.763 770.282,222.382 770.85,223.271 771.418,222.225 771.987,223.125 772.555,225.907 773.123,229.724 773.692,229.254 774.26,224.446 774.829,223.215 775.397,223.333 775.965,226.127 776.534,226.032 777.102,226.637 777.67,227.666 778.239,228.52 778.807,230.043 779.375,229.431 779.944,231.963 780.512,232.371 781.08,232.817 781.649,233.052 782.217,234.162 782.785,236.127 783.354,236.071 783.922,238.001 784.49,238.701 785.059,238.561 785.627,238.51 786.195,239.258 786.764,239.174 787.332,238.973 787.9,237.869 788.469,235.496 789.037,235.522 789.606,239.27 790.174,239.911 790.742,239.465 791.311,238.301 791.879,237.973 792.447,236.61 793.016,236.365 793.584,235.107 794.152,232.918 794.721,233.262 795.289,236.306 795.857,239.329 796.426,237.88 796.994,236.809 797.562,235.701 798.131,236.644 798.699,238.372 799.267,238.947 799.836,237.36 800.404,234.977 800.972,234.824 801.541,234.782 802.109,234.631 802.678,238.771 803.246,239.528 803.814,240.921 804.383,238.464 804.951,241.222 805.519,239.597 806.088,238.194 806.656,237.796 807.224,236.236 807.793,236.821 808.361,238.549 808.929,239.151 809.498,238.553 810.066,238.006 810.634,237.608 811.203,238.187 811.771,237.685 812.339,238.245 812.908,236.893 813.476,236.678 814.044,237.201 814.613,235.619 815.181,238.189 815.749,235.653 816.318,233.22 816.886,232.032 817.455,232.021 818.023,230.136 818.591,231.265 819.16,230.139 819.728,231.103 820.296,230.963 820.865,230.008 821.433,231.193 822.001,229.059 822.57,230.184 823.138,231.181 823.706,231.319 824.275,230.119 824.843,227.147 825.411,225.421 825.98,224.881 826.548,224.318 827.116,223.825 827.685,225.48 828.253,225.886 828.821,226.456 829.39,224.663 829.958,223.038 830.526,223.804 831.095,225.471 831.663,228.996 832.232,231.115 832.8,231.195 833.368,232.441 833.937,231.542 834.505,232.725 835.073,232.907 835.642,232.888 836.21,230.847 836.778,230.998 837.347,231.093 837.915,232.152 838.483,232.046 839.052,231.075 839.62,229.224 840.188,227.735 840.757,230.339 841.325,229.782 841.893,231.084 842.462,232.38 843.03,233.402 843.598,233.421 844.167,233.48 844.735,233.62 845.304,231.687 845.872,232.923 846.44,233.117 847.009,233.066 847.577,233.131 848.145,233.184 848.714,231.177 849.282,230.304 849.85,229.673 850.419,229.963 850.987,230.2 851.555,230.561 852.124,231.777 852.692,232.862 853.26,232.98 853.829,229.088 854.397,231.448 854.965,231.438 855.534,231.332 856.102,230.471 856.67,229.745 857.239,229.067 857.807,230.458 858.375,231.799 858.944,232.767 859.512,233.969 860.081,232.974 860.649,231.847 861.217,230.859 861.786,230.982 862.354,232.163 862.922,233.053 863.491,233.92 864.059,232.928 864.627,232.819 865.196,231.897 865.764,232.116 866.332,231.246 866.901,229.466 867.469,229.717 868.037,230.086 868.606,230.181 869.174,232.405 869.742,232.364 870.311,233.389 870.879,232.416 871.447,232.581 872.016,234.779 872.584,234.649 873.152,235.554 873.721,236.377 874.289,236.163 874.858,234.894 875.426,235.807 875.994,235.619 876.563,235.517 877.131,235.418 877.699,234.208 878.268,235.027 878.836,234.938 879.404,234.853 879.973,234.665 880.541,234.493 881.109,234.483 881.678,231.245 882.246,232.26 882.814,232.275 883.383,235.443 883.951,237.246 884.519,238.06 885.088,236.654 885.656,235.223 886.224,233.848 886.793,235.907 887.361,234.522 887.93,235.281 888.498,235.235 889.066,235.089 889.635,235.795 890.203,235.476 890.771,238.305 891.34,236.769 891.908,237.469 892.476,238.982 893.045,238.244 893.613,235.743 894.181,236.411 894.75,237.106 895.318,236.538 895.886,238.109 896.455,234.635 897.023,235.374 897.591,235.024 898.16,234.486 898.728,235.086 899.296,234.078 899.865,233.76 900.433,230.556 901.001,232.738 901.57,233.455 902.138,235.223 902.707,233.915 903.275,231.678 903.843,232.771 904.412,231.467 904.98,232.626 905.548,232.446 906.117,232.423 906.685,231.24 907.253,231.165 907.822,231.311 908.39,229.227 908.958,231.292 909.527,229.19 910.095,231.325 910.663,229.507 911.232,227.439 911.8,227.75 912.368,227.823 912.937,227.021 913.505,228.18 914.073,229.405 914.642,229.324 915.21,232.425 915.779,231.427 916.347,231.504 916.915,232.549 917.484,233.497 918.052,234.352 918.62,234.207 919.189,233.882 919.757,234.574 920.325,234.461 920.894,233.46 921.462,230.256 922.03,230.241 922.599,229.339 923.167,229.4 923.735,230.635 924.304,231.81 924.872,231.842 925.44,231.856 926.009,231.805 926.577,230.51 927.145,231.573 927.714,231.731 928.282,231.617 928.85,230.559 929.419,230.399 929.987,229.423 930.556,228.486 931.124,230.742 931.692,229.572 932.261,231.932 932.829,233.96 933.397,231.754 933.966,232.705 934.534,231.56 935.102,233.697 935.671,233.491 936.239,235.372 936.807,234.25 937.376,238.206 937.944,239.897 938.512,238.48 939.081,235.891 939.649,235.662 940.217,235.241 940.786,233.797 941.354,233.629 941.922,232.287 942.491,232.201 943.059,231.99 943.627,231.656 944.196,232.47 944.764,233.393 945.333,231.886 945.901,231.983 946.469,232.88 947.038,232.703 947.606,233.353 948.174,232.227 948.743,232.977 949.311,230.774 949.879,230.814 950.448,231.097 951.016,230.207 951.584,229.188 952.153,230.157 952.721,229.41 953.289,229.423 953.858,230.487 954.426,226.246 954.994,225.464 955.563,223.945 956.131,224.568 956.699,224.964 957.268,224.439 957.836,220.624 958.405,224.311 958.973,224.99 959.541,225.398 960.11,225.548 960.678,227.065 961.246,224.168 961.815,223.683 962.383,225.428 962.951,225.803 963.52,226.389 964.088,226.926 964.656,227.276 965.225,229.582 965.793,228.706 966.361,227.911 966.93,231.254 967.498,230.277 968.066,232.524 968.635,233.582 969.203,232.583 969.771,233.537 970.34,231.483 970.908,232.539 971.476,230.691 972.045,231.891 972.613,231.03 973.182,232.292 973.75,231.444 974.318,232.471 974.887,230.336 975.455,228.427 976.023,229.853 976.592,230.298 977.16,231.31 977.728,230.594 978.297,230.679 978.865,231.641 979.433,233.509 980.002,235.416 980.57,236.201 981.138,234.054 981.707,233.928 982.275,236.829 982.843,235.374 983.412,234.229 983.98,235.071 984.548,234.791 985.117,233.459 985.685,234.215 986.253,236.285 986.822,234 987.39,234.814 987.959,234.544 988.527,235.414 989.095,236.3 989.664,235.882 990.232,235.598 990.8,234.355 991.369,233.072 991.937,233.997 992.505,234.12 993.074,233.948 993.642,233.669 994.21,232.569 994.779,233.581 995.347,235.503 995.915,235.324 996.484,233.147 997.052,233.017 997.62,234.757 998.189,234.574 998.757,232.353 999.325,232.394 999.894,231.207 1000.46,230.04 1001.03,230.241 1001.6,231.211 1002.17,231.171 1002.74,230.067 1003.3,230.187 1003.87,230.348 1004.44,231.689 1005.01,235.769 1005.58,235.281 1006.15,236.099 1006.71,235.821 1007.28,235.485 1007.85,235.311 1008.42,235.058 1008.99,233.892 1009.56,233.634 1010.12,231.358 1010.69,228.178 1011.26,228.393 1011.83,227.609 1012.4,227.854 1012.97,228.148 1013.53,228.445 1014.1,227.943 1014.67,226.105 1015.24,225.453 1015.81,225.63 1016.38,226.174 1016.94,226.572 1017.51,226.844 1018.08,228.263 1018.65,230.634 1019.22,232.58 1019.79,229.471 1020.35,230.637 1020.92,230.664 1021.49,231.509 1022.06,231.592 1022.63,231.273 1023.2,230.429 1023.76,230.588 1024.33,229.569 1024.9,229.609 1025.47,230.912 1026.04,230.127 1026.61,231.148 1027.17,229.868 1027.74,230.115 1028.31,230.067 1028.88,232.378 1029.45,234.451 1030.02,234.554 1030.58,233.229 1031.15,232.135 1031.72,231.952 1032.29,230.838 1032.86,230.97 1033.43,231.063 1033.99,232.173 1034.56,232.181 1035.13,229.106 1035.7,229.505 1036.27,232.77 1036.84,229.815 1037.4,228.905 1037.97,227.106 1038.54,228.373 1039.11,229.726 1039.68,230.032 1040.25,231.456 1040.81,231.393 1041.38,232.439 1041.95,232.518 1042.52,232.636 1043.09,233.802 1043.66,234.669 1044.22,233.392 1044.79,231.322 1045.36,232.408 1045.93,234.32 1046.5,234.093 1047.07,233.066 1047.63,231.917 1048.2,232.878 1048.77,233.64 1049.34,230.536 1049.91,230.55 1050.48,230.743 1051.05,230.893 1051.61,229.827 1052.18,229.928 1052.75,231.209 1053.32,232.266 1053.89,230.172 1054.46,230.208 1055.02,230.363 1055.59,230.314 1056.16,230.595 1056.73,229.637 1057.3,233.159 1057.87,232.976 1058.43,232.986 1059,232.807 1059.57,233.833 1060.14,232.874 1060.71,232.948 1061.28,232.868 1061.84,231.793 1062.41,233.001 1062.98,234.103 1063.55,233.036 1064.12,233.085 1064.69,232.233 1065.25,233.837 1065.82,235.724 1066.39,233.444 1066.96,233.559 1067.53,233.461 1068.1,236.3 1068.66,236.124 1069.23,237.788 1069.8,236.429 1070.37,235.066 1070.94,234.866 1071.51,232.73 1072.07,232.537 1072.64,230.423 1073.21,231.687 1073.78,233.871 1074.35,233.688 1074.92,232.822 1075.48,234.939 1076.05,235.015 1076.62,231.735 1077.19,231.649 1077.76,231.711 1078.33,229.531 1078.89,228.743 1079.46,228.084 1080.03,232.722 1080.6,232.487 1081.17,232.556 1081.74,233.625 1082.3,235.457 1082.87,234.871 1083.44,233.588 1084.01,230.444 1084.58,230.566 1085.15,229.486 1085.71,232.712 1086.28,231.553 1086.85,230.696 1087.42,230.838 1087.99,228.971 1088.56,229.019 1089.12,226.817 1089.69,227.042 1090.26,227.379 1090.83,228.727 1091.4,230.858 1091.97,230.898 1092.53,230.989 1093.1,230.056 1093.67,230.178 1094.24,229.41 1094.81,230.663 1095.38,231.48 1095.94,231.382 1096.51,231.535 1097.08,229.612 1097.65,228.691 1098.22,229.103 1098.79,231.315 1099.35,231.434 1099.92,230.538 1100.49,231.73 1101.06,230.668 1101.63,233.761 1102.2,235.834 1102.76,238.659 1103.33,237.525 1103.9,236.137 1104.47,236.949 1105.04,236.578 1105.61,234.257 1106.17,232.758 1106.74,232.573 1107.31,232.362 1107.88,231.309 1108.45,234.565 1109.02,234.446 1109.58,233.204 1110.15,233.113 1110.72,233.037 1111.29,232.85 1111.86,232.769 1112.43,234.638 1112.99,235.443 1113.56,235.257 1114.13,235.89 1114.7,236.75 1115.27,236.397 1115.84,235.012 1116.4,232.534 1116.97,232.475 1117.54,229.127 1118.11,230.276 1118.68,230.172 1119.25,231.108 1119.81,229.258 1120.38,228.138 1120.95,229.41 1121.52,229.417 1122.09,231.608 1122.66,232.485 1123.23,233.338 1123.79,234.311 1124.36,232.148 1124.93,231.13 1125.5,230.25 1126.07,231.409 1126.64,231.337 1127.2,231.445 1127.77,231.426 1128.34,230.317 1128.91,230.352 1129.48,230.228 1130.05,232.296 1130.61,233.22 1131.18,234.371 1131.75,233.07 1132.32,231.96 1132.89,231.858 1133.46,228.655 1134.02,227.003 1134.59,227.222 1135.16,227.449 1135.73,229.099 1136.3,228.103 1136.87,228.292 1137.43,227.607 1138,225.874 1138.57,227.314 1139.14,228.376 1139.71,227.424 1140.28,227.739 1140.84,228.904 1141.41,228 1141.98,230.285 1142.55,231.237 1143.12,231.233 1143.69,232.303 1144.25,233.142 1144.82,233.015 1145.39,232.927 1145.96,230.79 1146.53,231.973 1147.1,230.946 1147.66,229.805 1148.23,232.21 1148.8,232.393 1149.37,230.546 1149.94,228.799 1150.51,229.883 1151.07,229.068 1151.64,227.059 1152.21,227.308 1152.78,227.875 1153.35,228.062 1153.92,230.567 1154.48,228.918 1155.05,228.132 1155.62,227.453 1156.19,229.818 1156.76,230.001 1157.33,232.28 1157.89,233.474 1158.46,232.399 1159.03,232.264 1159.6,234.294 1160.17,233.002 1160.74,232.219 1161.3,232.17 1161.87,231.996 1162.44,231.889 1163.01,232.142 1163.58,232.21 1164.15,234.219 1164.71,234.009 1165.28,233.721 1165.85,233.551 1166.42,233.59 1166.99,231.337 1167.56,232.214 1168.12,231.143 1168.69,231.977 1169.26,230.937 1169.83,230.913 1170.4,230.819 1170.97,230.749 1171.53,232.01 1172.1,234.191 1172.67,234.211 1173.24,233.229 1173.81,234.307 1174.38,235.2 1174.94,235.01 1175.51,233.659 1176.08,232.629 1176.65,233.717 1177.22,231.721 1177.79,230.603 1178.35,229.648 1178.92,228.87 1179.49,231.327 1180.06,232.021 1180.63,232.075 1181.2,233.249 1181.76,233.224 1182.33,233.198 1182.9,234.05 1183.47,233.76 1184.04,232.664 1184.61,233.732 1185.17,232.28 1185.74,230.421 1186.31,228.292 1186.88,228.604 1187.45,226.841 1188.02,227.144 1188.58,227.604 1189.15,229.92 1189.72,230.054 1190.29,229.03 1190.86,227.241 1191.43,229.861 1192,232.067 1192.56,232.027 1193.13,233.173 1193.7,232.181 1194.27,232.307 1194.84,232.407 1195.41,234.415 1195.97,236.27 1196.54,237.086 1197.11,235.827 1197.68,235.642 1198.25,232.301 1198.82,231.54 1199.38,232.554 1199.95,230.481 1200.52,229.636 1201.09,230.871 1201.66,229.984 1202.23,230.161 1202.79,230.292 1203.36,231.507 1203.93,231.487 1204.5,229.534 1205.07,229.931 1205.64,228.088 1206.2,230.425 1206.77,231.62 1207.34,231.487 1207.91,234.68 1208.48,233.275 1209.05,230.925 1209.61,233.106 1210.18,235.077 1210.75,232.64 1211.32,230.592 1211.89,231.828 1212.46,228.834 1213.02,230.24 1213.59,229.381 1214.16,232.509 1214.73,232.161 1215.3,232.129 1215.87,232.073 1216.43,231.061 1217,231.138 1217.57,229.473 1218.14,229.04 1218.71,228.207 1219.28,228.565 1219.84,227.968 1220.41,226.227 1220.98,226.721 1221.55,229.096 1222.12,228.331 1222.69,229.75 1223.25,229.92 1223.82,232.094 1224.39,231.235 1224.96,229.563 1225.53,229.809 1226.1,232.017 1226.66,232.039 1227.23,231.823 1227.8,233.05 1228.37,233.036 1228.94,233.894 1229.51,236.971 1230.07,237.582 1230.64,234.938 1231.21,235.621 1231.78,235.242 1232.35,233.979 1232.92,236.021 1233.48,236.789 1234.05,235.31 1234.62,235.084 1235.19,234.932 1235.76,234.447 1236.33,233.287 1236.89,231.24 1237.46,231.403 1238.03,229.409 1238.6,229.535 1239.17,229.802 1239.74,228.87 1240.3,230.004 1240.87,227.269 1241.44,225.58 1242.01,226.017 1242.58,227.319 1243.15,227.396 1243.71,226.934 1244.28,228.973 1244.85,229.138 1245.42,229.358 1245.99,231.562 1246.56,229.396 1247.12,232.775 1247.69,235.938 1248.26,235.743 1248.83,234.619 1249.4,235.556 1249.97,236.503 1250.53,236.34 1251.1,235.93 1251.67,234.61 1252.24,235.515 1252.81,236.137 1253.38,238.08 1253.94,236.295 1254.51,235.845 1255.08,235.674 1255.65,236.307 1256.22,232.81 1256.79,233.701 1257.35,234.423 1257.92,234.004 1258.49,233.654 1259.06,233.371 1259.63,234.457 1260.2,235.406 1260.76,233.975 1261.33,229.56 1261.9,228.475 1262.47,227.695 1263.04,225.914 1263.61,227.145 1264.18,225.369 1264.74,227.769 1265.31,230.04 1265.88,231.251 1266.45,229.322 1267.02,230.656 1267.59,230.926 1268.15,232.208 1268.72,232.332 1269.29,232.377 1269.86,232.157 1270.43,233.118 1271,236.94 1271.56,236.697 1272.13,236.288 1272.7,235.923 1273.27,235.32 1273.84,233.081 1274.41,233.032 1274.97,232.955 1275.54,234.046 1276.11,233.785 1276.68,232.566 1277.25,230.516 1277.82,230.543 1278.38,230.656 1278.95,229.726 1279.52,227.622 1280.09,228.829 1280.66,227.982 1281.23,228.263 1281.79,226.726 1282.36,226.945 1282.93,227.403 1283.5,227.968 1284.07,228.207 1284.64,229.536 1285.2,229.591 1285.77,228.764 1286.34,228.839 1286.91,230.137 1287.48,230.558 1288.05,230.625 1288.61,231.949 1289.18,233.014 1289.75,232.798 1290.32,230.547 1290.89,229.856 1291.46,230.295 1292.02,231.477 1292.59,230.22 1293.16,232.344 1293.73,232.324 1294.3,229.309 1294.87,229.429 1295.43,229.359 1296,228.496 1296.57,227.933 1297.14,228.173 1297.71,227.465 1298.28,228.667 1298.84,229.836 1299.41,231.988 1299.98,234.164 1300.55,239.216 1301.12,238.685 1301.69,238.269 1302.25,237.735 1302.82,235.288 1303.39,234.971 1303.96,234.918 1304.53,234.765 1305.1,235.595 1305.66,236.368 1306.23,235.016 1306.8,233.587 1307.37,234.702 1307.94,235.621 1308.51,234.167 1309.07,235.048 1309.64,233.614 1310.21,233.333 1310.78,233.33 1311.35,233.413 1311.92,231.185 1312.48,233.065 1313.05,230.765 1313.62,230.665 1314.19,229.58 1314.76,230.612 1315.33,230.48 1315.89,229.559 1316.46,227.581 1317.03,229.873 1317.6,227.619 1318.17,229.987 1318.74,232.079 1319.3,235.173 1319.87,234.933 1320.44,233.663 1321.01,233.389 1321.58,233.17 1322.15,232.689 1322.71,232.547 1323.28,234.624 1323.85,237.409 1324.42,235.903 1324.99,234.196 1325.56,232.806 1326.12,231.784 1326.69,232.583 1327.26,231.333 1327.83,232.325 1328.4,230.132 1328.97,229.004 1329.53,230.07 1330.1,231.212 1330.67,232.152 1331.24,231.168 1331.81,231.207 1332.38,232.128 1332.94,231.946 1333.51,232.724 1334.08,230.703 1334.65,228.629 1335.22,223.923 1335.79,222.555 1336.36,222.105 1336.92,222.897 1337.49,222.666 1338.06,223.311 1338.63,223.7 1339.2,226.255 1339.77,226.743 1340.33,227.236 1340.9,228.362 1341.47,230.655 1342.04,230.677 1342.61,229.71 1343.18,228.935 1343.74,228.112 1344.31,229.278 1344.88,230.499 1345.45,228.552 1346.02,229.912 1346.59,230.007 1347.15,231.413 1347.72,233.509 1348.29,233.371 1348.86,231.272 1349.43,232.522 1350,233.6 1350.56,233.566 1351.13,231.55 1351.7,231.611 1352.27,230.57 1352.84,229.709 1353.41,227.724 1353.97,228.783 1354.54,227.082 1355.11,226.431 1355.68,225.78 1356.25,226.38 1356.82,226.129 1357.38,229.786 1357.95,229.956 1358.52,232.584 1359.09,232.491 1359.66,231.395 1360.23,232.445 1360.79,233.483 1361.36,231.292 1361.93,231.29 1362.5,231.491 1363.07,232.704 1363.64,233.683 1364.2,234.912 1364.77,233.778 1365.34,233.759 1365.91,234.748 1366.48,234.76 1367.05,235.425 1367.61,236.327 1368.18,235.107 1368.75,237.633 1369.32,237.362 1369.89,239.167 1370.46,238.802 1371.02,236.331 1371.59,237.998 1372.16,238.703 1372.73,238.095 1373.3,238.7 1373.87,239.219 1374.43,238.552 1375,238.01 1375.57,236.438 1376.14,238.104 1376.71,237.524 1377.28,234.934 1377.84,233.627 1378.41,234.601 1378.98,233.322 1379.55,235.148 1380.12,233.963 1380.69,232.691 1381.25,228.728 1381.82,228.63 1382.39,229.782 1382.96,230.9 1383.53,231.051 1384.1,233.092 1384.66,233.94 1385.23,233.581 1385.8,233.511 1386.37,233.485 1386.94,236.335 1387.51,237.006 1388.07,237.576 1388.64,237.158 1389.21,235.843 1389.78,234.318 1390.35,233.175 1390.92,232.839 1391.48,229.771 1392.05,228.543 1392.62,226.619 1393.19,226.937 1393.76,226.086 1394.33,225.431 1394.89,225.721 1395.46,226.207 1396.03,225.449 1396.6,224.655 1397.17,223.759 1397.74,226.187 1398.3,225.554 1398.87,230.029 1399.44,229.748 1400.01,231.771 1400.58,231.594 1401.15,232.741 1401.71,232.602 1402.28,231.537 1402.85,230.618 1403.42,232.749 1403.99,232.781 1404.56,232.686 1405.13,230.628 1405.69,230.518 1406.26,234.562 1406.83,235.536 1407.4,234.127 1407.97,230.67 1408.54,231.663 1409.1,232.449 1409.67,232.631 1410.24,231.684 1410.81,232.601 1411.38,232.546 1411.95,233.733 1412.51,235.689 1413.08,234.447 1413.65,232.23 1414.22,232.254 1414.79,231.245 1415.36,229.135 1415.92,227.345 1416.49,228.633 1417.06,228.734 1417.63,228.967 1418.2,226.845 1418.77,228.246 1419.33,226.523 1419.9,225.76 1420.47,226.104 1421.04,224.502 1421.61,225.749 1422.18,227.386 1422.74,225.846 1423.31,227.151 1423.88,225.383 1424.45,226.731 1425.02,225.98 1425.59,226.304 1426.15,225.759 1426.72,226.143 1427.29,226.638 1427.86,224.768 1428.43,226.228 1429,226.666 1429.56,230.21 1430.13,232.432 1430.7,232.342 1431.27,235.314 1431.84,238.276 1432.41,239.917 1432.97,237.351 1433.54,237.99 1434.11,236.576 1434.68,237.389 1435.25,238.006 1435.82,236.392 1436.38,234.93 1436.95,234.764 1437.52,235.796 1438.09,235.516 1438.66,233.209 1439.23,231.213 1439.79,232.534 1440.36,231.529 1440.93,232.745 1441.5,232.716 1442.07,231.485 1442.64,232.377 1443.2,230.371 1443.77,231.563 1444.34,231.524 1444.91,229.537 1445.48,229.77 1446.05,231.721 1446.61,230.547 1447.18,230.438 1447.75,231.446 1448.32,230.516 1448.89,231.725 1449.46,232.802 1450.02,229.807 1450.59,231.892 1451.16,233.916 1451.73,235.72 1452.3,235.426 1452.87,237.276 1453.43,236.99 1454,235.552 1454.57,233.086 1455.14,235.093 1455.71,234.8 1456.28,233.51 1456.84,233.173 1457.41,231.929 1457.98,231.902 1458.55,233.884 1459.12,234.659 1459.69,234.399 1460.25,236.106 1460.82,236.757 1461.39,236.505 1461.96,233.988 1462.53,233.673 1463.1,236.633 1463.66,235.275 1464.23,233.739 1464.8,231.372 1465.37,229.375 1465.94,229.433 1466.51,230.491 1467.07,229.403 1467.64,229.462 1468.21,229.497 1468.78,230.515 1469.35,229.428 1469.92,230.411 1470.48,231.504 1471.05,231.528 1471.62,232.72 1472.19,235.561 1472.76,235.277 1473.33,235.843 1473.89,233.362 1474.46,235.171 1475.03,234.876 1475.6,234.424 1476.17,231.106 1476.74,233.031 1477.31,232.592 1477.87,232.34 1478.44,232.118 1479.01,234.074 1479.58,232.792 1480.15,233.902 1480.72,233.838 1481.28,232.53 1481.85,231.565 1482.42,230.397 1482.99,230.538 1483.56,227.721 1484.13,230.134 1484.69,231.307 1485.26,231.168 1485.83,231.252 1486.4,231.172 1486.97,234.308 1487.54,234.998 1488.1,231.634 1488.67,229.461 1489.24,228.502 1489.81,230.665 1490.38,228.719 1490.95,228.814 1491.51,231.055 1492.08,229.917 1492.65,232.028 1493.22,231.766 1493.79,229.789 1494.36,229.929 1494.92,229.109 1495.49,228.08 1496.06,227.955 1496.63,227.141 1497.2,227.394 1497.77,227.528 1498.33,227.568 1498.9,225.917 1499.47,225.351 1500.04,224.686 1500.61,225.438 1501.18,228.042 1501.74,228.555 1502.31,229.682 1502.88,229.997 1503.45,231.219 1504.02,232.361 1504.59,232.31 1505.15,232.262 1505.72,232.253 1506.29,232.109 1506.86,232.026 1507.43,232.072 1508,232.911 1508.56,231.924 1509.13,228.824 1509.7,228.957 1510.27,231.164 1510.84,232.183 1511.41,231.959 1511.97,231.799 1512.54,231.847 1513.11,233.029 1513.68,232.043 1514.25,234.029 1514.82,233.849 1515.38,231.549 1515.95,231.607 1516.52,229.512 1517.09,230.742 1517.66,230.653 1518.23,227.495 1518.79,227.666 1519.36,226.811 1519.93,226.188 1520.5,227.645 1521.07,227.945 1521.64,229.1 1522.2,230.457 1522.77,228.516 1523.34,228.706 1523.91,226.72 1524.48,228.252 1525.05,230.707 1525.61,231.65 1526.18,233.691 1526.75,234.583 1527.32,236.397 1527.89,235.921 1528.46,240.533 1529.02,236.792 1529.59,233.409 1530.16,235.402 1530.73,237.443 1531.3,236.063 1531.87,235.795 1532.43,234.669 1533,236.71 1533.57,236.513 1534.14,236.21 1534.71,236.023 1535.28,235.748 1535.84,236.744 1536.41,238.516 1536.98,235.846 1537.55,234.71 1538.12,234.508 1538.69,233.268 1539.25,233.05 1539.82,232.839 1540.39,231.479 1540.96,234.635 1541.53,233.284 1542.1,232.484 1542.66,232.483 1543.23,232.416 1543.8,232.112 1544.37,232.23 1544.94,232.036 1545.51,237.15 1546.08,236.705 1546.64,237.208 1547.21,236.926 1547.78,236.695 1548.35,236.156 1548.92,235.853 1549.49,233.232 1550.05,233.853 1550.62,233.509 1551.19,233.123 1551.76,232.816 1552.33,234.818 1552.9,234.306 1553.46,232.949 1554.03,233.64 1554.6,232.3 1555.17,231.127 1555.74,231.131 1556.31,234.991 1556.87,234.545 1557.44,234.186 1558.01,232.962 1558.58,234.686 1559.15,232.139 1559.72,231.16 1560.28,228.91 1560.85,228.862 1561.42,228.69 1561.99,229.918 1562.56,230.8 1563.13,230.951 1563.69,230.928 1564.26,230.783 1564.83,230.449 1565.4,229.467 1565.97,230.51 1566.54,230.479 1567.1,229.452 1567.67,227.553 1568.24,226.634 1568.81,227.761 1569.38,227.918 1569.95,227.181 1570.51,225.319 1571.08,226.643 1571.65,233.179 1572.22,230.745 1572.79,230.539 1573.36,230.686 1573.92,230.682 1574.49,228.597 1575.06,226.824 1575.63,227.255 1576.2,226.507 1576.77,229.09 1577.33,227.068 1577.9,227.279 1578.47,226.285 1579.04,226.622 1579.61,225.9 1580.18,225.204 1580.74,225.585 1581.31,226.062 1581.88,225.307 1582.45,227.713 1583.02,228.092 1583.59,226.34 1584.15,224.667 1584.72,226.112 1585.29,222.565 1585.86,220.036 1586.43,219.895 1587,223.751 1587.56,224.541 1588.13,225.375 1588.7,225.843 1589.27,227.53 1589.84,225.827 1590.41,226.381 1590.97,226.841 1591.54,227.348 1592.11,228.845 1592.68,230.382 1593.25,231.515 1593.82,231.594 1594.38,233.731 1594.95,233.845 1595.52,234.835 1596.09,232.32 1596.66,231.305 1597.23,229.292 1597.79,229.793 1598.36,228.928 1598.93,231.358 1599.5,233.302 1600.07,235.427 1600.64,234.277 1601.2,232.176 1601.77,231.262 1602.34,232.674 1602.91,231.682 1603.48,231.695 1604.05,229.947 1604.61,230.285 1605.18,232.49 1605.75,232.446 1606.32,232.567 1606.89,232.651 1607.46,232.475 1608.02,231.588 1608.59,231.732 1609.16,231.873 1609.73,231.167 1610.3,231.209 1610.87,233.325 1611.43,234.354 1612,234.22 1612.57,234.031 1613.14,231.952 1613.71,231.174 1614.28,232.249 1614.84,233.193 1615.41,233.159 1615.98,233.056 1616.55,232.208 1617.12,234.596 1617.69,234.399 1618.26,233.485 1618.82,233.16 1619.39,232.106 1619.96,233.421 1620.53,232.235 1621.1,233.429 1621.67,234.426 1622.23,234.336 1622.8,234.147 1623.37,233.65 1623.94,232.63 1624.51,232.838 1625.08,233.838 1625.64,233.663 1626.21,232.658 1626.78,232.593 1627.35,232.819 1627.92,233.814 1628.49,232.597 1629.05,232.578 1629.62,233.704 1630.19,233.772 1630.76,234.68 1631.33,235.44 1631.9,235.068 1632.46,235.887 1633.03,234.531 1633.6,234.205 1634.17,233.041 1634.74,232.918 1635.31,230.948 1635.87,231.03 1636.44,232.079 1637.01,233.988 1637.58,232.883 1638.15,231.656 1638.72,231.863 1639.28,231.774 1639.85,231.518 1640.42,230.56 1640.99,231.685 1641.56,228.681 1642.13,228.963 1642.69,227.061 1643.26,225.255 1643.83,223.834 1644.4,224.335 1644.97,221.887 1645.54,222.78 1646.1,224.541 1646.67,227.334 1647.24,226.666 1647.81,228.035 1648.38,228.31 1648.95,227.498 1649.51,230.127 1650.08,230.304 1650.65,230.524 1651.22,230.593 1651.79,229.835 1652.36,231.017 1652.92,234.241 1653.49,233.935 1654.06,235.058 1654.63,236.89 1655.2,238.614 1655.77,238.314 1656.33,235.976 1656.9,236.866 1657.47,236.469 1658.04,238.207 1658.61,238.88 1659.18,238.441 1659.74,238 1660.31,238.606 1660.88,239.246 1661.45,237.628 1662.02,238.152 1662.59,235.596 1663.15,233.115 1663.72,231.143 1664.29,229.977 1664.86,227.856 1665.43,228.087 1666,229.552 1666.56,230.872 1667.13,231.063 1667.7,233.108 1668.27,235.915 1668.84,232.411 1669.41,233.153 1669.97,233.211 1670.54,236.452 1671.11,234.246 1671.68,235.919 1672.25,234.596 1672.82,234.374 1673.38,231.094 1673.95,230.042 1674.52,229.08 1675.09,228.399 1675.66,228.714 1676.23,230.092 1676.79,230.306 1677.36,229.161 1677.93,229.288 1678.5,229.299 1679.07,229.611 1679.64,228.798 1680.2,228.999 1680.77,232.195 1681.34,233.264 1681.91,231.091 1682.48,230.027 1683.05,227.852 1683.61,229.356 1684.18,229.304 1684.75,229.331 1685.32,228.492 1685.89,228.698 1686.46,226.723 1687.02,226.138 1687.59,227.668 1688.16,223.854 1688.73,225.2 1689.3,226.579 1689.87,226.081 1690.44,227.576 1691,227.822 1691.57,227.021 1692.14,228.352 1692.71,229.783 1693.28,230.001 1693.85,230.145 1694.41,228.144 1694.98,228.225 1695.55,229.464 1696.12,229.534 1696.69,230.87 1697.26,230.002 1697.82,230.384 1698.39,229.294 1698.96,229.262 1699.53,231.171 1700.1,228.932 1700.67,229.057 1701.23,227.366 1701.8,229.817 1702.37,232.107 1702.94,233.331 1703.51,235.303 1704.08,234.94 1704.64,233.507 1705.21,233.43 1705.78,233.618 1706.35,234.494 1706.92,233.329 1707.49,233.022 1708.05,234.127 1708.62,236.117 1709.19,239.877 1709.76,240.524 1710.33,241.111 1710.9,239.512 1711.46,238.025 1712.03,237.691 1712.6,235.189 1713.17,235.717 1713.74,235.309 1714.31,234.179 1714.87,236.132 1715.44,236.807 1716.01,233.291 1716.58,233.158 1717.15,232.144 1717.72,235.257 1718.28,232.967 1718.85,232.842 1719.42,231.858 1719.99,229.577 1720.56,230.987 1721.13,230.954 1721.69,231.678 1722.26,232.413 1722.83,231.397 1723.4,231.256 1723.97,232.233 1724.54,235.015 1725.1,235.88 1725.67,236.469 1726.24,235.912 1726.81,236.54 1727.38,238.336 1727.95,236.658 1728.51,235.132 1729.08,233.878 1729.65,233.874 1730.22,233.742 1730.79,232.44 1731.36,231.43 1731.92,229.601 1732.49,227.75 1733.06,227.851 1733.63,227.908 1734.2,229.165 1734.77,229.463 1735.33,230.65 1735.9,231.678 1736.47,230.762 1737.04,230.744 1737.61,230.876 1738.18,231.882 1738.74,232.85 1739.31,232.775 1739.88,231.659 1740.45,232.757 1741.02,230.618 1741.59,234.791 1742.15,234.31 1742.72,235.101 1743.29,234.604 1743.86,234.283 1744.43,231.913 1745,229.829 1745.56,229.928 1746.13,229.058 1746.7,230.299 1747.27,230.369 1747.84,232.409 1748.41,232.389 1748.97,233.356 1749.54,234.218 1750.11,231.819 1750.68,229.85 1751.25,228.751 1751.82,228.883 1752.38,228.948 1752.95,228.151 1753.52,226.29 1754.09,225.511 1754.66,227.051 1755.23,226.279 1755.79,227.653 1756.36,229.108 1756.93,226.131 1757.5,226.601 1758.07,226.005 1758.64,227.377 1759.21,229.684 1759.77,230.95 1760.34,230.037 1760.91,231.066 1761.48,229.129 1762.05,230.33 1762.62,233.424 1763.18,234.028 1763.75,232.633 1764.32,233.589 1764.89,235.411 1765.46,236.332 1766.03,233.939 1766.59,233.466 1767.16,235.516 1767.73,234.247 1768.3,234.162 1768.87,234.005 1769.44,233.752 1770,233.479 1770.57,233.353 1771.14,233.155 1771.71,233.112 1772.28,231.212 1772.85,231.296 1773.41,231.418 1773.98,231.527 1774.55,232.543 1775.12,233.569 1775.69,233.472 1776.26,233.159 1776.82,232.959 1777.39,235.9 1777.96,238.796 1778.53,238.208 1779.1,237.577 1779.67,239.279 1780.23,236.585 1780.8,235.002 1781.37,233.538 1781.94,233.398 1782.51,232.33 1783.08,231.354 1783.64,231.32 1784.21,232.334 1784.78,234.325 1785.35,235.036 1785.92,234.543 1786.49,235.175 1787.05,233.664 1787.62,234.328 1788.19,233.032 1788.76,232.921 1789.33,231.747 1789.9,230.683 1790.46,228.5 1791.03,228.605 1791.6,226.746 1792.17,227.928 1792.74,229.123 1793.31,225.042 1793.87,226.192 1794.44,224.426 1795.01,223.979 1795.58,225.641 1796.15,226.914 1796.72,227.404 1797.28,227.844 1797.85,230.315 1798.42,230.311 1798.99,229.336 1799.56,227.162 1800.13,227.69 1800.69,228.821 1801.26,228.898 1801.83,230.055 1802.4,230.941 1802.97,232.253 1803.54,229.136 1804.1,230.353 1804.67,230.258 1805.24,229.543 1805.81,230.485 1806.38,226.59 1806.95,225.045 1807.51,226.595 1808.08,225.892 1808.65,225.284 1809.22,225.707 1809.79,227.072 1810.36,228.453 1810.92,226.81 1811.49,228.301 1812.06,228.639 1812.63,228.783 1813.2,227.155 1813.77,226.56 1814.33,226.63 1814.9,225.89 1815.47,230.433 1816.04,230.489 1816.61,229.563 1817.18,230.828 1817.74,230.774 1818.31,231.846 1818.88,230.964 1819.45,230.871 1820.02,232.107 1820.59,232.026 1821.15,233.114 1821.72,233.129 1822.29,234.237 1822.86,234.156 1823.43,235.017 1824,234.646 1824.56,235.541 1825.13,235.115 1825.7,233.876 1826.27,232.913 1826.84,232.044 1827.41,232.006 1827.97,231.071 1828.54,231.203 1829.11,232.181 1829.68,230.977 1830.25,236.27 1830.82,236.975 1831.39,236.614 1831.95,234.138 1832.52,232.831 1833.09,232.748 1833.66,233.361 1834.23,235.237 1834.8,235.107 1835.36,234.792 1835.93,233.663 1836.5,233.553 1837.07,236.611 1837.64,235.372 1838.21,234.062 1838.77,233.842 1839.34,233.663 1839.91,233.594 1840.48,233.432 1841.05,235.089 1841.62,235.919 1842.18,236.529 1842.75,238.212 1843.32,236.707 1843.89,236.384 1844.46,235.975 1845.03,234.665 1845.59,232.452 1846.16,229.269 1846.73,230.684 1847.3,229.866 1847.87,231.139 1848.44,232.188 1849,231.21 1849.57,233.365 1850.14,236.221 1850.71,234.775 1851.28,230.511 1851.85,231.534 1852.41,231.709 1852.98,232.455 1853.55,231.291 1854.12,230.24 1854.69,230.448 1855.26,228.419 1855.82,229.748 1856.39,228.759 1856.96,226.76 1857.53,226.839 1858.1,226.197 1858.67,227.644 1859.23,228.811 1859.8,227.96 1860.37,229.302 1860.94,228.363 1861.51,229.62 1862.08,229.879 1862.64,231.892 1863.21,231.785 1863.78,232.979 1864.35,230.74 1864.92,230.997 1865.49,233.219 1866.05,233.027 1866.62,231.978 1867.19,227.797 1867.76,229.123 1868.33,230.302 1868.9,231.287 1869.46,231.26 1870.03,233.327 1870.6,232.167 1871.17,232.956 1871.74,233.855 1872.31,233.522 1872.87,234.147 1873.44,231.783 1874.01,228.924 1874.58,229.025 1875.15,228.171 1875.72,229.452 1876.28,230.658 1876.85,229.636 1877.42,230.833 1877.99,226.64 1878.56,229.053 1879.13,231.305 1879.69,231.486 1880.26,229.573 1880.83,228.958 1881.4,229.235 1881.97,230.481 1882.54,232.777 1883.1,233.541 1883.67,235.247 1884.24,234.948 1884.81,233.718 1885.38,231.645 1885.95,232.833 1886.51,232.823 1887.08,233.837 1887.65,233.926 1888.22,233.898 1888.79,233.84 1889.36,232.666 1889.92,233.592 1890.49,233.601 1891.06,233.342 1891.63,233.324 1892.2,233.199 1892.77,236.176 1893.33,235.916 1893.9,235.528 1894.47,235.184 1895.04,237.17 1895.61,238.52 1896.18,236.015 1896.74,235.654 1897.31,237.242 1897.88,234.835 1898.45,237.637 1899.02,236.116 1899.59,236.701 1900.16,237.068 1900.72,235.413 1901.29,235.905 1901.86,236.686 1902.43,236.226 1903,235.796 1903.57,235.221 1904.13,233.648 1904.7,234.31 1905.27,234.936 1905.84,234.413 1906.41,235.147 1906.98,234.976 1907.54,234.571 1908.11,235.24 1908.68,235.821 1909.25,234.343 1909.82,233.146 1910.39,231.992 1910.95,230.745 1911.52,230.557 1912.09,231.322 1912.66,231.302 1913.23,232.033 1913.8,229.992 1914.36,229.785 1914.93,230.695 1915.5,234.703 1916.07,234.062 1916.64,232.859 1917.21,231.398 1917.77,232.369 1918.34,231.041 1918.91,233.021 1919.48,231.799 1920.05,231.468 1920.62,231.154 1921.18,228.963 1921.75,228.895 1922.32,227.726 1922.89,226.744 1923.46,228.967 1924.03,230.07 1924.59,230.056 1925.16,229.864 1925.73,229.701 1926.3,229.788 1926.87,228.738 1927.44,228.797 1928,227.827 1928.57,229.039 1929.14,227.952 1929.71,226.863 1930.28,227.92 1930.85,227.117 1931.41,227.213 1931.98,227.506 1932.55,227.702 1933.12,231.05 1933.69,229.861 1934.26,229.634 1934.82,229.576 1935.39,231.638 1935.96,231.55 1936.53,231.324 1937.1,233.49 1937.67,231.163 1938.23,229.072 1938.8,230.31 1939.37,228.179 1939.94,228.709 1940.51,229.958 1941.08,227.817 1941.64,229.144 1942.21,229.168 1942.78,231.494 1943.35,230.623 1943.92,230.609 1944.49,231.665 1945.05,231.525 1945.62,230.328 1946.19,231.228 1946.76,230.41 1947.33,227.387 1947.9,227.698 1948.46,228.007 1949.03,229.478 1949.6,230.637 1950.17,230.466 1950.74,230.642 1951.31,230.806 1951.87,231.961 1952.44,231.79 1953.01,233.609 1953.58,232.367 1954.15,231.396 1954.72,231.444 1955.28,231.688 1955.85,232.723 1956.42,230.749 1956.99,230.754 1957.56,231.932 1958.13,231.971 1958.69,228.897 1959.26,231.026 1959.83,231.081 1960.4,229.1 1960.97,230.191 1961.54,231.294 1962.1,230.273 1962.67,229.377 1963.24,230.523 1963.81,229.647 1964.38,230.628 1964.95,231.778 1965.51,231.614 1966.08,233.633 1966.65,230.548 1967.22,228.453 1967.79,227.607 1968.36,226.721 1968.92,226.301 1969.49,224.746 1970.06,226.165 1970.63,223.564 1971.2,224.113 1971.77,224.68 1972.34,223.267 1972.9,226.183 1973.47,225.516 1974.04,226.994 1974.61,228.32 1975.18,228.456 1975.75,228.685 1976.31,227.984 1976.88,228.102 1977.45,227.692 1978.02,228.073 1978.59,226.589 1979.16,227.021 1979.72,227.479 1980.29,227.732 1980.86,227.264 1981.43,226.549 1982,227.031 1982.57,227.523 1983.13,226.986 1983.7,226.284 1984.27,226.818 1984.84,229.421 1985.41,227.966 1985.98,228.326 1986.54,226.652 1987.11,225.161 1987.68,224.767 1988.25,224.461 1988.82,225.335 1989.39,226.041 1989.95,228.554 1990.52,229.017 1991.09,229.53 1991.66,229.946 1992.23,230.267 1992.8,234.803 1993.36,233.843 1993.93,236.103 1994.5,236.273 1995.07,237.261 1995.64,234.948 1996.21,238.045 1996.77,237.551 1997.34,235.286 1997.91,235.202 1998.48,236.222 1999.05,237.332 1999.62,237.115 2000.18,235.605 2000.75,235.584 2001.32,236.718 2001.89,235.724 2002.46,235.549 2003.03,233.452 2003.59,232.524 2004.16,231.546 2004.73,232.593 2005.3,233.63 2005.87,234.599 2006.44,234.526 2007,234.353 2007.57,232.127 2008.14,232.109 2008.71,231.347 2009.28,228.563 2009.85,231.006 2010.41,230.158 2010.98,232.483 2011.55,233.527 2012.12,233.492 2012.69,235.659 2013.26,237.403 2013.82,234.958 2014.39,235.698 2014.96,235.5 2015.53,235.459 2016.1,234.092 2016.67,235.91 2017.23,236.652 2017.8,233.369 2018.37,231.197 2018.94,232.428 2019.51,232.434 2020.08,236.48 2020.64,237.156 2021.21,238.819 2021.78,237.204 2022.35,233.505 2022.92,234.44 2023.49,235.335 2024.05,235.117 2024.62,231.541 2025.19,229.517 2025.76,228.717 2026.33,227.95 2026.9,228.137 2027.46,226.302 2028.03,226.657 2028.6,227.053 2029.17,228.396 2029.74,227.565 2030.31,228.915 2030.87,229.317 2031.44,227.594 2032.01,229.111 2032.58,228.224 2033.15,229.568 2033.72,230.653 2034.28,230.858 2034.85,232.117 2035.42,232.291 2035.99,231.511 2036.56,230.407 2037.13,233.828 2037.69,233.696 2038.26,232.485 2038.83,232.682 2039.4,234.69 2039.97,232.602 2040.54,235.752 2041.11,236.477 2041.67,236.347 2042.24,235.256 2042.81,236.032 2043.38,233.901 2043.95,233.746 2044.52,232.655 2045.08,231.478 2045.65,234.586 2046.22,234.362 2046.79,235.18 2047.36,236.211 2047.93,235.932 2048.49,235.246 2049.06,236.127 2049.63,234.877 2050.2,235.813 2050.77,234.556 2051.34,235.585 2051.9,233.299 2052.47,235.299 2053.04,236.086 2053.61,236.613 2054.18,235.345 2054.75,235.067 2055.31,234.646 2055.88,235.141 2056.45,236.871 2057.02,237.547 2057.59,235.916 2058.16,234.306 2058.72,232.794 2059.29,232.77 2059.86,233.495 2060.43,233.251 2061,235.125 2061.57,234.627 2062.13,232.095 2062.7,233.032 2063.27,233.675 2063.84,235.392 2064.41,230.931 2064.98,230.885 2065.54,231.729 2066.11,231.63 2066.68,232.355 2067.25,231.04 2067.82,231.058 2068.39,231.986 2068.95,229.799 2069.52,228.955 2070.09,227.048 2070.66,227.286 2071.23,229.526 2071.8,229.486 2072.36,227.317 2072.93,228.527 2073.5,229.776 2074.07,227.864 2074.64,227.995 2075.21,228.247 2075.77,229.725 2076.34,229.993 2076.91,229.997 2077.48,231.057 2078.05,232.03 2078.62,235.096 2079.18,235.758 2079.75,233.195 2080.32,233.898 2080.89,234.696 2081.46,232.284 2082.03,232.151 2082.59,233.049 2083.16,234.234 2083.73,236.037 2084.3,235.701 2084.87,236.322 2085.44,235.883 2086,233.513 2086.57,236.469 2087.14,235.996 2087.71,236.494 2088.28,235.939 2088.85,234.429 2089.41,233.996 2089.98,231.495 2090.55,233.303 2091.12,232.841 2091.69,233.586 2092.26,231.222 2092.82,232.092 2093.39,231.991 2093.96,231.782 2094.53,230.693 2095.1,231.733 2095.67,230.638 2096.23,231.596 2096.8,232.549 2097.37,228.099 2097.94,228.215 2098.51,230.458 2099.08,232.459 2099.64,233.327 2100.21,231.073 2100.78,229.056 2101.35,227.076 2101.92,226.219 2102.49,226.658 2103.05,225.884 2103.62,225.097 2104.19,225.633 2104.76,225.97 2105.33,228.247 2105.9,227.409 2106.46,228.399 2107.03,228.667 2107.6,228.078 2108.17,227.599 2108.74,228.883 2109.31,229.873 2109.87,230.024 2110.44,231.384 2111.01,231.478 2111.58,230.576 2112.15,231.608 2112.72,232.662 2113.29,231.58 2113.85,231.714 2114.42,231.852 2114.99,231.808 2115.56,231.905 2116.13,231.775 2116.7,232.665 2117.26,231.508 2117.83,230.494 2118.4,228.571 2118.97,227.602 2119.54,228.985 2120.11,230.446 2120.67,230.354 2121.24,230.206 2121.81,229.202 2122.38,231.606 2122.95,231.602 2123.52,231.552 2124.08,232.518 2124.65,234.394 2125.22,233.968 2125.79,232.7 2126.36,233.594 2126.93,234.4 2127.49,233.883 2128.06,234.712 2128.63,231.622 2129.2,231.729 2129.77,230.663 2130.34,230.887 2130.9,230.96 2131.47,229.065 2132.04,229.326 2132.61,230.5 2133.18,231.816 2133.75,231.838 2134.31,233.172 2134.88,233.029 2135.45,234.016 2136.02,234.905 2136.59,236.685 2137.16,236.157 2137.72,235.679 2138.29,234.415 2138.86,231.269 2139.43,232.051 2140,231.825 2140.57,230.873 2141.13,229.858 2141.7,228.715 2142.27,227.712 2142.84,231.152 2143.41,231.008 2143.98,232.093 2144.54,230.959 2145.11,231.215 2145.68,229.004 2146.25,231.265 2146.82,230.339 2147.39,230.491 2147.95,230.504 2148.52,229.636 2149.09,228.66 2149.66,228.68 2150.23,227.923 2150.8,228.403 2151.36,227.814 2151.93,227.134 2152.5,227.29 2153.07,226.561 2153.64,229.029 2154.21,229.289 2154.77,230.337 2155.34,230.413 2155.91,229.376 2156.48,229.858 2157.05,230.099 2157.62,229.274 2158.18,230.53 2158.75,230.8 2159.32,229.616 2159.89,228.655 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.021\n  with uncertainty of ± 0.0019243939881972618\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01866 ± (0.00189622, 0.0020331) (MC)\n  95% confidence interval: [-4.02255, -4.01479]) (MC)\n  linear error propagation: -4.01867 ± 0.00202682\n  |δ_y| = |0.00144678| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018663349431703, val_l = 0.00388910864955605, val_u = 0.00387599459551069)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip640\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip641\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip642\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.53 2211.02,1150.53 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,985.403 2211.02,985.403 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,820.279 2211.02,820.279 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,655.155 2211.02,655.155 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,490.031 2211.02,490.031 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,324.907 2211.02,324.907 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.53 365.751,1150.53 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,985.403 365.751,985.403 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,820.279 365.751,820.279 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,655.155 365.751,655.155 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,490.031 365.751,490.031 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,324.907 365.751,324.907 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M298.909 1136.33 Q295.298 1136.33 293.469 1139.89 Q291.664 1143.43 291.664 1150.56 Q291.664 1157.67 293.469 1161.23 Q295.298 1164.77 298.909 1164.77 Q302.543 1164.77 304.349 1161.23 Q306.177 1157.67 306.177 1150.56 Q306.177 1143.43 304.349 1139.89 Q302.543 1136.33 298.909 1136.33 M298.909 1132.62 Q304.719 1132.62 307.775 1137.23 Q310.853 1141.81 310.853 1150.56 Q310.853 1159.29 307.775 1163.89 Q304.719 1168.48 298.909 1168.48 Q293.099 1168.48 290.02 1163.89 Q286.964 1159.29 286.964 1150.56 Q286.964 1141.81 290.02 1137.23 Q293.099 1132.62 298.909 1132.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M259.557 998.747 L267.196 998.747 L267.196 972.382 L258.886 974.049 L258.886 969.789 L267.15 968.123 L271.826 968.123 L271.826 998.747 L279.465 998.747 L279.465 1002.68 L259.557 1002.68 L259.557 998.747 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 971.201 Q295.298 971.201 293.469 974.766 Q291.664 978.308 291.664 985.437 Q291.664 992.544 293.469 996.109 Q295.298 999.65 298.909 999.65 Q302.543 999.65 304.349 996.109 Q306.177 992.544 306.177 985.437 Q306.177 978.308 304.349 974.766 Q302.543 971.201 298.909 971.201 M298.909 967.498 Q304.719 967.498 307.775 972.104 Q310.853 976.687 310.853 985.437 Q310.853 994.164 307.775 998.771 Q304.719 1003.35 298.909 1003.35 Q293.099 1003.35 290.02 998.771 Q286.964 994.164 286.964 985.437 Q286.964 976.687 290.02 972.104 Q293.099 967.498 298.909 967.498 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M262.775 833.623 L279.094 833.623 L279.094 837.559 L257.15 837.559 L257.15 833.623 Q259.812 830.869 264.395 826.239 Q269.002 821.587 270.182 820.244 Q272.428 817.721 273.307 815.985 Q274.21 814.225 274.21 812.536 Q274.21 809.781 272.266 808.045 Q270.344 806.309 267.242 806.309 Q265.043 806.309 262.59 807.073 Q260.159 807.837 257.381 809.388 L257.381 804.665 Q260.205 803.531 262.659 802.952 Q265.113 802.374 267.15 802.374 Q272.52 802.374 275.715 805.059 Q278.909 807.744 278.909 812.235 Q278.909 814.364 278.099 816.286 Q277.312 818.184 275.205 820.776 Q274.627 821.448 271.525 824.665 Q268.423 827.86 262.775 833.623 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 806.077 Q295.298 806.077 293.469 809.642 Q291.664 813.184 291.664 820.313 Q291.664 827.42 293.469 830.985 Q295.298 834.526 298.909 834.526 Q302.543 834.526 304.349 830.985 Q306.177 827.42 306.177 820.313 Q306.177 813.184 304.349 809.642 Q302.543 806.077 298.909 806.077 M298.909 802.374 Q304.719 802.374 307.775 806.98 Q310.853 811.563 310.853 820.313 Q310.853 829.04 307.775 833.647 Q304.719 838.23 298.909 838.23 Q293.099 838.23 290.02 833.647 Q286.964 829.04 286.964 820.313 Q286.964 811.563 290.02 806.98 Q293.099 802.374 298.909 802.374 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M272.914 653.8 Q276.27 654.518 278.145 656.787 Q280.043 659.055 280.043 662.388 Q280.043 667.504 276.525 670.305 Q273.006 673.106 266.525 673.106 Q264.349 673.106 262.034 672.666 Q259.742 672.249 257.289 671.393 L257.289 666.879 Q259.233 668.013 261.548 668.592 Q263.863 669.171 266.386 669.171 Q270.784 669.171 273.076 667.435 Q275.39 665.699 275.39 662.388 Q275.39 659.333 273.238 657.62 Q271.108 655.884 267.289 655.884 L263.261 655.884 L263.261 652.041 L267.474 652.041 Q270.923 652.041 272.752 650.676 Q274.58 649.287 274.58 646.694 Q274.58 644.032 272.682 642.62 Q270.807 641.185 267.289 641.185 Q265.367 641.185 263.168 641.601 Q260.969 642.018 258.33 642.898 L258.33 638.731 Q260.992 637.99 263.307 637.62 Q265.645 637.25 267.705 637.25 Q273.029 637.25 276.131 639.68 Q279.233 642.088 279.233 646.208 Q279.233 649.078 277.59 651.069 Q275.946 653.037 272.914 653.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 640.953 Q295.298 640.953 293.469 644.518 Q291.664 648.06 291.664 655.189 Q291.664 662.296 293.469 665.861 Q295.298 669.402 298.909 669.402 Q302.543 669.402 304.349 665.861 Q306.177 662.296 306.177 655.189 Q306.177 648.06 304.349 644.518 Q302.543 640.953 298.909 640.953 M298.909 637.25 Q304.719 637.25 307.775 641.856 Q310.853 646.439 310.853 655.189 Q310.853 663.916 307.775 668.523 Q304.719 673.106 298.909 673.106 Q293.099 673.106 290.02 668.523 Q286.964 663.916 286.964 655.189 Q286.964 646.439 290.02 641.856 Q293.099 637.25 298.909 637.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M271.594 476.825 L259.789 495.274 L271.594 495.274 L271.594 476.825 M270.367 472.751 L276.247 472.751 L276.247 495.274 L281.177 495.274 L281.177 499.163 L276.247 499.163 L276.247 507.311 L271.594 507.311 L271.594 499.163 L255.992 499.163 L255.992 494.649 L270.367 472.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 475.829 Q295.298 475.829 293.469 479.394 Q291.664 482.936 291.664 490.065 Q291.664 497.172 293.469 500.737 Q295.298 504.278 298.909 504.278 Q302.543 504.278 304.349 500.737 Q306.177 497.172 306.177 490.065 Q306.177 482.936 304.349 479.394 Q302.543 475.829 298.909 475.829 M298.909 472.126 Q304.719 472.126 307.775 476.732 Q310.853 481.315 310.853 490.065 Q310.853 498.792 307.775 503.399 Q304.719 507.982 298.909 507.982 Q293.099 507.982 290.02 503.399 Q286.964 498.792 286.964 490.065 Q286.964 481.315 290.02 476.732 Q293.099 472.126 298.909 472.126 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M258.793 307.627 L277.15 307.627 L277.15 311.562 L263.076 311.562 L263.076 320.034 Q264.094 319.687 265.113 319.525 Q266.131 319.34 267.15 319.34 Q272.937 319.34 276.316 322.511 Q279.696 325.682 279.696 331.099 Q279.696 336.677 276.224 339.779 Q272.752 342.858 266.432 342.858 Q264.256 342.858 261.988 342.488 Q259.742 342.117 257.335 341.376 L257.335 336.677 Q259.418 337.812 261.641 338.367 Q263.863 338.923 266.34 338.923 Q270.344 338.923 272.682 336.816 Q275.02 334.71 275.02 331.099 Q275.02 327.488 272.682 325.381 Q270.344 323.275 266.34 323.275 Q264.465 323.275 262.59 323.691 Q260.738 324.108 258.793 324.988 L258.793 307.627 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 310.705 Q295.298 310.705 293.469 314.27 Q291.664 317.812 291.664 324.941 Q291.664 332.048 293.469 335.613 Q295.298 339.154 298.909 339.154 Q302.543 339.154 304.349 335.613 Q306.177 332.048 306.177 324.941 Q306.177 317.812 304.349 314.27 Q302.543 310.705 298.909 310.705 M298.909 307.002 Q304.719 307.002 307.775 311.608 Q310.853 316.191 310.853 324.941 Q310.853 333.668 307.775 338.275 Q304.719 342.858 298.909 342.858 Q293.099 342.858 290.02 338.275 Q286.964 333.668 286.964 324.941 Q286.964 316.191 290.02 311.608 Q293.099 307.002 298.909 307.002 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip642)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1028.86 400.199,917.083 400.786,940.353 401.372,840.103 401.958,748.25 402.545,773.05 403.131,691.004 403.718,619.137 404.304,552.048 404.891,583.136 405.477,521.403 406.063,465.445 406.65,414.888 407.236,369.382 407.823,396.401 408.409,418.578 408.995,380.578 409.582,347.837 410.168,317.8 410.755,291.389 411.341,269.758 411.927,250.525 412.514,234.196 413.1,219.895 413.687,247.143 414.273,235.963 414.86,226.877 415.446,221.208 416.032,247.044 416.619,242.647 417.205,266.9 417.792,289.237 418.378,288.513 418.964,310.003 419.551,311.353 420.137,314.866 420.724,319.096 421.31,340.213 421.896,344.976 422.483,366.882 423.069,373.509 423.656,381.393 424.242,400.812 424.829,407.965 425.415,439.496 426.001,467.883 426.588,485.745 427.174,504.104 427.761,529.936 428.347,539.149 428.933,547.498 429.52,557.562 430.106,574.127 430.693,583.658 431.279,600.309 431.865,622.592 432.452,637.938 433.038,658.28 433.625,677.815 434.211,691.657 434.798,715.957 435.384,734.375 435.97,742.088 436.557,758.871 437.143,783.936 437.73,795.146 438.316,810.233 438.902,820.456 439.489,834.209 440.075,840.53 440.662,851.426 441.248,865.181 441.835,878.205 442.421,890.855 443.007,902.841 443.594,915.054 444.18,923.591 444.767,929.287 445.353,934.951 445.939,949.45 446.526,959.971 447.112,970.149 447.699,974.599 448.285,982.425 448.871,989.584 449.458,1001.73 450.044,1010.63 450.631,1017.04 451.217,1028 451.804,1031.57 452.39,1035.16 452.976,1047.88 453.563,1051.5 454.149,1059.41 454.736,1067.1 455.322,1072.52 455.908,1075.55 456.495,1086.73 457.081,1091.88 457.668,1094.6 458.254,1095.25 458.84,1100.17 459.427,1104.78 460.013,1107.63 460.6,1116.19 461.186,1122.88 461.773,1130.75 462.359,1138.49 462.945,1141.95 463.532,1145.28 464.118,1145.16 464.705,1150.62 465.291,1152.12 465.877,1155.65 466.464,1160.82 467.05,1165.72 467.637,1168.82 468.223,1173.33 468.809,1176.06 469.396,1176.74 469.982,1177.56 470.569,1179.99 471.155,1181.05 471.742,1183.37 472.328,1189.34 472.914,1191.68 473.501,1195.24 474.087,1195.66 474.674,1197.91 475.26,1201.78 475.846,1203.78 476.433,1203.8 477.019,1208.81 477.606,1210.39 478.192,1210.82 478.778,1209.68 479.365,1211.23 479.951,1211.62 480.538,1211.9 481.124,1213.67 481.711,1216.74 482.297,1216.83 482.883,1217.04 483.47,1217.25 484.056,1217.42 484.643,1217.83 485.229,1219.49 485.815,1221.38 486.402,1225.56 486.988,1227.01 487.575,1230.01 488.161,1232.97 488.748,1232.68 489.334,1234.03 489.92,1236.59 490.507,1240.42 491.093,1247.07 491.68,1246.07 492.266,1246.58 492.852,1249.88 493.439,1250.53 494.025,1249.43 494.612,1247.13 495.198,1244.95 495.784,1243.11 496.371,1242.38 496.957,1240.46 497.544,1238.74 498.13,1237.37 498.717,1238.37 499.303,1240.97 499.889,1241.99 500.476,1241.72 501.062,1241.27 501.649,1241.13 502.235,1239.26 502.821,1238.94 503.408,1240.31 503.994,1240.21 504.581,1239.93 505.167,1241.31 505.753,1242.29 506.34,1243.25 506.926,1245.74 507.513,1246.71 508.099,1247.55 508.686,1246.81 509.272,1248.95 509.858,1248.08 510.445,1248.84 511.031,1249.46 511.618,1247.09 512.204,1246.19 512.79,1245.34 513.377,1244.92 513.963,1247.1 514.55,1248.21 515.136,1247.48 515.722,1246.87 516.309,1247.83 516.895,1247.25 517.482,1247.98 518.068,1245.95 518.655,1241.14 519.241,1239.31 519.827,1240.58 520.414,1240.21 521,1240.01 521.587,1242.6 522.173,1242.07 522.759,1242.91 523.346,1242.61 523.932,1243.7 524.519,1244.69 525.105,1244.34 525.691,1244.23 526.278,1244.2 526.864,1241.04 527.451,1246.39 528.037,1243.05 528.624,1239.93 529.21,1239.76 529.796,1238.17 530.383,1239.46 530.969,1235.41 531.556,1239.51 532.142,1241.83 532.728,1242.85 533.315,1242.58 533.901,1245.05 534.488,1247.18 535.074,1246.4 535.661,1243.17 536.247,1244.54 536.833,1244.23 537.42,1247.98 538.006,1250.05 538.593,1249.29 539.179,1249.92 539.765,1247.84 540.352,1248.38 540.938,1246.32 541.525,1245.62 542.111,1246.52 542.697,1245.97 543.284,1245.44 543.87,1247.32 544.457,1245.15 545.043,1244.77 545.63,1246.04 546.216,1246.73 546.802,1242.06 547.389,1241.81 547.975,1242.9 548.562,1239.99 549.148,1239.65 549.734,1238.04 550.321,1237.93 550.907,1238.97 551.494,1237.34 552.08,1235.69 552.666,1236.78 553.253,1238.01 553.839,1237.57 554.426,1239.98 555.012,1243.78 555.599,1247.55 556.185,1248.3 556.771,1249.04 557.358,1249.47 557.944,1244.51 558.531,1243.96 559.117,1246.17 559.703,1245.31 560.29,1245.73 560.876,1247.69 561.463,1248.35 562.049,1244.86 562.635,1244.61 563.222,1244.07 563.808,1243.54 564.395,1241.98 564.981,1242.55 565.568,1240.67 566.154,1238.99 566.74,1241.27 567.327,1238.07 567.913,1239.24 568.5,1238.72 569.086,1239.87 569.672,1239.53 570.259,1237.79 570.845,1240.3 571.432,1239.92 572.018,1240.72 572.605,1241.59 573.191,1241.11 573.777,1239.38 574.364,1237.38 574.95,1235.39 575.537,1235.37 576.123,1235.02 576.709,1233.65 577.296,1233.56 577.882,1234.87 578.469,1236.16 579.055,1237.14 579.641,1235.48 580.228,1236.64 580.814,1236.19 581.401,1236.08 581.987,1235.79 582.574,1235.76 583.16,1238.26 583.746,1239.19 584.333,1238.6 584.919,1242.32 585.506,1241.7 586.092,1245.08 586.678,1247.21 587.265,1242.19 587.851,1238.53 588.438,1236.79 589.024,1236.71 589.61,1237.4 590.197,1235.76 590.783,1239.74 591.37,1240.55 591.956,1241.07 592.543,1240.5 593.129,1240.13 593.715,1240.99 594.302,1239.2 594.888,1241.66 595.475,1240.6 596.061,1240.14 596.647,1238.13 597.234,1239.05 597.82,1239.8 598.407,1241.04 598.993,1240.28 599.579,1236.97 600.166,1236.6 600.752,1237.57 601.339,1242.36 601.925,1241.58 602.512,1239.51 603.098,1238.69 603.684,1238.07 604.271,1238.8 604.857,1239.76 605.444,1236.8 606.03,1236.34 606.616,1236.01 607.203,1238.2 607.789,1240.08 608.376,1239.61 608.962,1243.07 609.548,1241.93 610.135,1242.42 610.721,1241.76 611.308,1239.89 611.894,1239.35 612.481,1237.36 613.067,1235.41 613.653,1236.29 614.24,1238.39 614.826,1237.9 615.413,1239.8 615.999,1237.37 616.585,1237.03 617.172,1236.42 617.758,1234.31 618.345,1234.05 618.931,1233.82 619.518,1232.24 620.104,1233.49 620.69,1234.62 621.277,1239.73 621.863,1238.02 622.45,1237.42 623.036,1238.11 623.622,1236.11 624.209,1234.15 624.795,1235.23 625.382,1236.59 625.968,1236.02 626.554,1234.38 627.141,1236.31 627.727,1235.82 628.314,1235.2 628.9,1233.1 629.487,1232.77 630.073,1233.71 630.659,1230.74 631.246,1230.26 631.832,1231.18 632.419,1230.85 633.005,1227.61 633.591,1227.45 634.178,1225.79 634.764,1224.54 635.351,1225.34 635.937,1225.46 636.523,1224.03 637.11,1222.89 637.696,1220.25 638.283,1219.19 638.869,1218.18 639.456,1217.44 640.042,1217.74 640.628,1219.41 641.215,1219.81 641.801,1219.99 642.388,1217.64 642.974,1218.2 643.56,1217.41 644.147,1217.92 644.733,1216.95 645.32,1217.4 645.906,1217.8 646.492,1219.69 647.079,1222.6 647.665,1221.19 648.252,1220.2 648.838,1221.82 649.425,1221.93 650.011,1222.29 650.597,1221.01 651.184,1221.28 651.77,1221.29 652.357,1221.51 652.943,1224.14 653.529,1222.42 654.116,1224.2 654.702,1222.84 655.289,1223 655.875,1222.81 656.462,1222.92 657.048,1223.03 657.634,1222.99 658.221,1223.17 658.807,1223.18 659.394,1224.71 659.98,1224.72 660.566,1227.16 661.153,1225.66 661.739,1225.47 662.326,1226.87 662.912,1226.72 663.498,1226.66 664.085,1227.69 664.671,1228.91 665.258,1228.65 665.844,1228.28 666.431,1229.51 667.017,1227.71 667.603,1228.61 668.19,1229.56 668.776,1223.58 669.363,1224.8 669.949,1225.93 670.535,1225.84 671.122,1225.78 671.708,1225.52 672.295,1223.97 672.881,1222.69 673.467,1222.91 674.054,1224.36 674.64,1229.83 675.227,1229.72 675.813,1229.53 676.4,1232.07 676.986,1232.93 677.572,1232.2 678.159,1234.43 678.745,1233.77 679.332,1232.86 679.918,1232.02 680.504,1231.66 681.091,1230.83 681.677,1230.44 682.264,1234.3 682.85,1232.88 683.436,1233.93 684.023,1233.4 684.609,1234.31 685.196,1235.06 685.782,1234.65 686.369,1230.1 686.955,1231.07 687.541,1228.08 688.128,1227.67 688.714,1224.76 689.301,1228.69 689.887,1228.65 690.473,1225.46 691.06,1223.82 691.646,1225.52 692.233,1225.51 692.819,1224.16 693.405,1222.35 693.992,1220.95 694.578,1222.44 695.165,1222.61 695.751,1221.48 696.338,1221.56 696.924,1222.05 697.51,1223.5 698.097,1224.97 698.683,1225.11 699.27,1222.64 699.856,1225.46 700.442,1225.44 701.029,1222.55 701.615,1221.05 702.202,1221.2 702.788,1220.13 703.375,1221.74 703.961,1220.4 704.547,1223.22 705.134,1224.44 705.72,1224.53 706.307,1224.41 706.893,1223.25 707.479,1223.15 708.066,1224.37 708.652,1225.7 709.239,1224.32 709.825,1222.68 710.411,1224.03 710.998,1226.48 711.584,1226.38 712.171,1228.89 712.757,1228.53 713.344,1228.19 713.93,1228.03 714.516,1227.72 715.103,1228.48 715.689,1224.19 716.276,1224.08 716.862,1225.07 717.448,1226.26 718.035,1225.94 718.621,1227.04 719.208,1228.21 719.794,1229.27 720.38,1228.83 720.967,1228.26 721.553,1230.61 722.14,1232.99 722.726,1233.82 723.313,1234.8 723.899,1238.52 724.485,1239.24 725.072,1238.32 725.658,1239.89 726.245,1238.96 726.831,1235.56 727.417,1230.72 728.004,1231.39 728.59,1237.71 729.177,1239.49 729.763,1239.55 730.349,1236.13 730.936,1236.39 731.522,1235.75 732.109,1234.53 732.695,1233.52 733.282,1231.61 733.868,1232.45 734.454,1229.19 735.041,1228.65 735.627,1228.04 736.214,1227.7 736.8,1226.21 737.386,1223.56 737.973,1223.52 738.559,1220.86 739.146,1219.77 739.732,1219.77 740.318,1219.66 740.905,1218.5 741.491,1218.41 742.078,1218.48 742.664,1219.74 743.251,1222.7 743.837,1222.57 744.423,1217.53 745.01,1216.49 745.596,1216.86 746.183,1218.19 746.769,1218.45 747.355,1220.08 747.942,1220.28 748.528,1221.81 749.115,1224.59 749.701,1224.1 750.288,1220.06 750.874,1215.96 751.46,1217.67 752.047,1218.92 752.633,1220.24 753.22,1218.89 753.806,1216.49 754.392,1215.55 754.979,1217.46 755.565,1220.44 756.152,1220.55 756.738,1220.53 757.324,1220.64 757.911,1215.12 758.497,1213.93 759.084,1211.89 759.67,1214.89 760.257,1211.07 760.843,1212.97 761.429,1214.61 762.016,1214.97 762.602,1216.86 763.189,1215.97 763.775,1213.56 764.361,1212.59 764.948,1213.18 765.534,1213.72 766.121,1214.08 766.707,1213.16 767.293,1213.65 767.88,1212.76 768.466,1214.37 769.053,1214.51 769.639,1213.69 770.226,1215.63 770.812,1212.14 771.398,1215.31 771.985,1218.4 772.571,1219.92 773.158,1219.92 773.744,1222.37 774.33,1220.93 774.917,1222.42 775.503,1221.19 776.09,1221.39 776.676,1222.65 777.262,1221.14 777.849,1223.94 778.435,1222.53 779.022,1221.27 779.608,1221.1 780.195,1222.67 780.781,1226.59 781.367,1228.95 781.954,1229.81 782.54,1230.72 783.127,1231.54 783.713,1229.59 784.299,1229.22 784.886,1228.62 785.472,1231.08 786.059,1233.37 786.645,1232.6 787.232,1230.63 787.818,1226.19 788.404,1223.48 788.991,1223.39 789.577,1221.77 790.164,1222.93 790.75,1221.38 791.336,1221.11 791.923,1221.1 792.509,1223.74 793.096,1223.56 793.682,1223.45 794.268,1222.08 794.855,1222.2 795.441,1223.46 796.028,1225.89 796.614,1227.9 797.201,1224.59 797.787,1225.35 798.373,1223.7 798.96,1222.01 799.546,1220.65 800.133,1220.58 800.719,1220.46 801.305,1220.22 801.892,1222.7 802.478,1221.08 803.065,1220.79 803.651,1220.82 804.237,1220.7 804.824,1220.59 805.41,1223.18 805.997,1224.33 806.583,1225.19 807.17,1224.86 807.756,1224.59 808.342,1224.15 808.929,1222.59 809.515,1221.16 810.102,1220.97 810.688,1226.03 811.274,1223.01 811.861,1223.02 812.447,1223.16 813.034,1224.3 813.62,1225.28 814.206,1226.21 814.793,1224.45 815.379,1222.73 815.966,1221.46 816.552,1219.85 817.139,1221.09 817.725,1222.53 818.311,1223.82 818.898,1223.68 819.484,1222.15 820.071,1220.96 820.657,1219.79 821.243,1221.03 821.83,1221.14 822.416,1222.31 823.003,1222.02 823.589,1223.14 824.175,1225.48 824.762,1225.21 825.348,1224.77 825.935,1224.69 826.521,1221.81 827.108,1221.84 827.694,1220.48 828.28,1221.71 828.867,1221.47 829.453,1218.56 830.04,1218.65 830.626,1217.38 831.212,1216.2 831.799,1216.36 832.385,1217.91 832.972,1216.62 833.558,1216.76 834.145,1216.79 834.731,1216.82 835.317,1218.31 835.904,1217.17 836.49,1217.19 837.077,1217.22 837.663,1217.38 838.249,1217.53 838.836,1217.47 839.422,1221.64 840.009,1220.32 840.595,1220.28 841.181,1216.11 841.768,1213.63 842.354,1212.42 842.941,1214.1 843.527,1215.85 844.114,1217.56 844.7,1214.8 845.286,1216.51 845.873,1215.44 846.459,1215.4 847.046,1215.5 847.632,1214.48 848.218,1214.79 848.805,1210.97 849.391,1212.82 849.978,1211.76 850.564,1209.62 851.15,1210.4 851.737,1213.52 852.323,1212.54 852.91,1211.5 853.496,1212.1 854.083,1209.9 854.669,1214.31 855.255,1213.26 855.842,1213.62 856.428,1214.24 857.015,1213.37 857.601,1214.61 858.187,1214.96 858.774,1219.1 859.36,1216.27 859.947,1215.3 860.533,1212.93 861.119,1214.56 861.706,1217.43 862.292,1215.99 862.879,1217.67 863.465,1216.16 864.052,1216.37 864.638,1216.37 865.224,1217.9 865.811,1218.01 866.397,1217.83 866.984,1220.56 867.57,1217.92 868.156,1220.67 868.743,1217.94 869.329,1220.33 869.916,1223.08 870.502,1222.78 871.089,1222.78 871.675,1223.93 872.261,1222.53 872.848,1221.02 873.434,1221.18 874.021,1217.18 874.607,1218.47 875.193,1218.37 875.78,1217 876.366,1215.73 876.953,1214.56 877.539,1214.68 878.125,1215.04 878.712,1214.07 879.298,1214.15 879.885,1215.39 880.471,1219.53 881.058,1219.59 881.644,1220.8 882.23,1220.78 882.817,1219.22 883.403,1217.7 883.99,1217.66 884.576,1217.63 885.162,1217.69 885.749,1219.38 886.335,1218.02 886.922,1217.81 887.508,1217.96 888.094,1219.34 888.681,1219.57 889.267,1220.88 889.854,1222.16 890.44,1219.29 891.027,1220.84 891.613,1217.81 892.199,1215.14 892.786,1217.97 893.372,1216.72 893.959,1218.19 894.545,1215.39 895.131,1215.61 895.718,1213.09 896.304,1214.46 896.891,1209.19 897.477,1206.79 898.063,1208.45 898.65,1211.68 899.236,1211.87 899.823,1212.31 900.409,1214.12 900.996,1214.28 901.582,1215.99 902.168,1216.08 902.755,1216.34 903.341,1216.77 903.928,1215.7 904.514,1214.47 905.1,1216.4 905.687,1216.26 906.273,1215.07 906.86,1215.27 907.446,1214.39 908.032,1215.82 908.619,1214.82 909.205,1217.67 909.792,1217.64 910.378,1217.29 910.965,1218.47 911.551,1219.83 912.137,1218.63 912.724,1219.64 913.31,1219.68 913.897,1218.34 914.483,1223.91 915.069,1225.06 915.656,1227.19 916.242,1226.58 916.829,1226.24 917.415,1227.09 918.002,1232.23 918.588,1227.72 919.174,1227.03 919.761,1226.66 920.347,1226.63 920.934,1224.8 921.52,1228.69 922.106,1229.51 922.693,1227.44 923.279,1227.11 923.866,1226.5 924.452,1225.93 925.038,1225.59 925.625,1222.7 926.211,1223.89 926.798,1225 927.384,1220.73 927.971,1222.01 928.557,1219.11 929.143,1217.69 929.73,1218.95 930.316,1217.68 930.903,1220.32 931.489,1218.94 932.075,1221.33 932.662,1219.78 933.248,1220.9 933.835,1219.26 934.421,1220.36 935.007,1219.02 935.594,1221.79 936.18,1224.31 936.767,1222.53 937.353,1221.99 937.94,1220.7 938.526,1221.65 939.112,1221.56 939.699,1220.33 940.285,1217.88 940.872,1215.32 941.458,1214.19 942.044,1216.89 942.631,1217 943.217,1213.12 943.804,1214.9 944.39,1216.31 944.976,1215.13 945.563,1215.41 946.149,1217.08 946.736,1216.04 947.322,1213.25 947.909,1216.13 948.495,1215 949.081,1215.27 949.668,1214.05 950.254,1212.79 950.841,1213.22 951.427,1213.48 952.013,1215.01 952.6,1216.62 953.186,1215.37 953.773,1215.14 954.359,1215.31 954.945,1215.61 955.532,1217 956.118,1215.65 956.705,1213.07 957.291,1213.21 957.878,1215.97 958.464,1216.1 959.05,1213.78 959.637,1213.94 960.223,1216.77 960.81,1216.7 961.396,1218.23 961.982,1219.77 962.569,1219.54 963.155,1218.31 963.742,1218.37 964.328,1219.83 964.915,1219.71 965.501,1219.53 966.087,1217.81 966.674,1212.45 967.26,1212.99 967.847,1211.82 968.433,1212.07 969.019,1212.4 969.606,1212.53 970.192,1212.76 970.779,1214.21 971.365,1214.48 971.951,1217.41 972.538,1221.58 973.124,1221.38 973.711,1222.49 974.297,1222.27 974.884,1221.98 975.47,1221.68 976.056,1222.42 976.643,1224.91 977.229,1225.89 977.816,1225.82 978.402,1225.26 978.988,1224.88 979.575,1224.66 980.161,1222.93 980.748,1219.92 981.334,1217.39 981.92,1221.44 982.507,1219.97 983.093,1219.95 983.68,1218.87 984.266,1218.76 984.853,1219.18 985.439,1220.29 986.025,1220.12 986.612,1221.47 987.198,1221.47 987.785,1219.82 988.371,1220.86 988.957,1219.57 989.544,1221.25 990.13,1220.97 990.717,1221.07 991.303,1218.09 991.889,1215.35 992.476,1215.14 993.062,1216.8 993.649,1218.19 994.235,1218.42 994.822,1219.87 995.408,1219.71 995.994,1219.61 996.581,1218.17 997.167,1218.14 997.754,1222.15 998.34,1221.69 998.926,1217.47 999.513,1221.31 1000.1,1222.54 1000.69,1224.96 1001.27,1223.42 1001.86,1221.73 1002.44,1221.38 1003.03,1219.56 1003.62,1219.64 1004.2,1218.28 1004.79,1218.15 1005.38,1217.97 1005.96,1216.42 1006.55,1215.22 1007.14,1216.82 1007.72,1219.48 1008.31,1218.07 1008.9,1215.54 1009.48,1215.77 1010.07,1217.05 1010.65,1218.52 1011.24,1217.25 1011.83,1216.22 1012.41,1220.23 1013,1220.24 1013.59,1220.01 1014.17,1219.84 1014.76,1221.25 1015.35,1221.16 1015.93,1219.53 1016.52,1218.15 1017.11,1220.88 1017.69,1220.87 1018.28,1220.7 1018.86,1220.79 1019.45,1220.46 1020.04,1221.74 1020.62,1217.18 1021.21,1217.37 1021.8,1217.33 1022.38,1217.52 1022.97,1216.15 1023.56,1217.35 1024.14,1217.22 1024.73,1217.29 1025.32,1218.66 1025.9,1217.07 1026.49,1215.59 1027.07,1216.93 1027.66,1216.82 1028.25,1217.9 1028.83,1215.78 1029.42,1213.25 1030.01,1216.13 1030.59,1215.94 1031.18,1216.01 1031.77,1212.24 1032.35,1212.35 1032.94,1210.04 1033.52,1211.67 1034.11,1213.33 1034.7,1213.51 1035.28,1216.23 1035.87,1216.45 1036.46,1219.19 1037.04,1217.57 1037.63,1214.7 1038.22,1214.88 1038.8,1215.96 1039.39,1213.16 1039.98,1212.97 1040.56,1217.18 1041.15,1217.29 1041.73,1217.21 1042.32,1220.05 1042.91,1221.14 1043.49,1222.07 1044.08,1216.09 1044.67,1216.37 1045.25,1216.26 1045.84,1214.83 1046.43,1212.38 1047.01,1213.05 1047.6,1214.64 1048.19,1218.71 1048.77,1218.58 1049.36,1220.02 1049.94,1215.85 1050.53,1217.34 1051.12,1218.46 1051.7,1218.3 1052.29,1220.76 1052.88,1220.76 1053.46,1223.7 1054.05,1223.53 1054.64,1223.21 1055.22,1221.55 1055.81,1218.84 1056.39,1218.81 1056.98,1218.71 1057.57,1219.94 1058.15,1219.82 1058.74,1220.86 1059.33,1219.28 1059.91,1218.23 1060.5,1218.36 1061.09,1218.17 1061.67,1220.68 1062.26,1221.94 1062.85,1221.47 1063.43,1218.65 1064.02,1218.5 1064.6,1219.67 1065.19,1218.14 1065.78,1219.53 1066.36,1215.5 1066.95,1212.72 1067.54,1208.89 1068.12,1210.2 1068.71,1211.88 1069.3,1210.69 1069.88,1211.04 1070.47,1213.96 1071.06,1215.86 1071.64,1216.07 1072.23,1216.32 1072.81,1217.68 1073.4,1213.42 1073.99,1213.5 1074.57,1215.06 1075.16,1215.13 1075.75,1215.19 1076.33,1215.4 1076.92,1215.47 1077.51,1212.99 1078.09,1211.86 1078.68,1212 1079.26,1211.07 1079.85,1209.83 1080.44,1210.16 1081.02,1211.86 1081.61,1215.02 1082.2,1215.07 1082.78,1219.43 1083.37,1217.99 1083.96,1218.16 1084.54,1216.98 1085.13,1219.41 1085.72,1220.93 1086.3,1219.35 1086.89,1219.4 1087.47,1216.59 1088.06,1215.44 1088.65,1214.3 1089.23,1212.98 1089.82,1215.74 1090.41,1217.06 1090.99,1218.23 1091.58,1216.74 1092.17,1216.84 1092.75,1216.71 1093.34,1216.73 1093.93,1218.19 1094.51,1218.18 1095.1,1218.37 1095.68,1215.7 1096.27,1214.47 1096.86,1212.92 1097.44,1214.55 1098.03,1215.97 1098.62,1216.09 1099.2,1220.27 1099.79,1222.5 1100.38,1222.33 1100.96,1222.15 1101.55,1220.1 1102.14,1221.47 1102.72,1221.31 1103.31,1222.29 1103.89,1224.65 1104.48,1222.92 1105.07,1221.64 1105.65,1222.96 1106.24,1222.66 1106.83,1221.24 1107.41,1222.49 1108,1219.59 1108.59,1218.38 1109.17,1218.4 1109.76,1217 1110.34,1215.88 1110.93,1216.01 1111.52,1216.09 1112.1,1218.85 1112.69,1217.33 1113.28,1218.66 1113.86,1220.17 1114.45,1217.07 1115.04,1216.81 1115.62,1219.21 1116.21,1221.52 1116.8,1220.17 1117.38,1221.28 1117.97,1223.97 1118.55,1223.76 1119.14,1223.13 1119.73,1222.98 1120.31,1219.8 1120.9,1221.98 1121.49,1223.07 1122.07,1224.04 1122.66,1221.06 1123.25,1220.87 1123.83,1217.93 1124.42,1216.34 1125.01,1217.7 1125.59,1217.86 1126.18,1215.18 1126.76,1216.81 1127.35,1217.8 1127.94,1217.84 1128.52,1218.06 1129.11,1218.19 1129.7,1217.85 1130.28,1217.74 1130.87,1215.09 1131.46,1215.3 1132.04,1215.62 1132.63,1215.78 1133.21,1215.68 1133.8,1218.58 1134.39,1217.44 1134.97,1218.83 1135.56,1217.75 1136.15,1219.1 1136.73,1219.14 1137.32,1219.28 1137.91,1219.4 1138.49,1217.77 1139.08,1214.9 1139.67,1214.8 1140.25,1216.02 1140.84,1214.57 1141.42,1213.32 1142.01,1213.48 1142.6,1215.16 1143.18,1216.46 1143.77,1215.01 1144.36,1217.57 1144.94,1219.03 1145.53,1220.3 1146.12,1221.37 1146.7,1218.23 1147.29,1217.32 1147.88,1217.24 1148.46,1215.69 1149.05,1215.68 1149.63,1215.67 1150.22,1214.51 1150.81,1214.83 1151.39,1216.21 1151.98,1214.78 1152.57,1216.63 1153.15,1219.05 1153.74,1221.86 1154.33,1221.53 1154.91,1223.91 1155.5,1223.64 1156.09,1223.15 1156.67,1220.23 1157.26,1220.1 1157.84,1221.47 1158.43,1223.87 1159.02,1220.56 1159.6,1217.72 1160.19,1217.76 1160.78,1216.25 1161.36,1217.51 1161.95,1217.33 1162.54,1217.18 1163.12,1214.52 1163.71,1212.01 1164.29,1210.82 1164.88,1212.33 1165.47,1212.47 1166.05,1216.74 1166.64,1217.72 1167.23,1216.4 1167.81,1219.08 1168.4,1220.22 1168.99,1218.65 1169.57,1219.83 1170.16,1219.64 1170.75,1219.5 1171.33,1217.95 1171.92,1217.98 1172.5,1220.53 1173.09,1220.07 1173.68,1222.52 1174.26,1219.55 1174.85,1218.02 1175.44,1218.19 1176.02,1214.01 1176.61,1215.77 1177.2,1218.81 1177.78,1215.97 1178.37,1213.34 1178.96,1216.45 1179.54,1219.1 1180.13,1217.51 1180.71,1221.42 1181.3,1219.65 1181.89,1220.81 1182.47,1216.77 1183.06,1217.2 1183.65,1217.23 1184.23,1217.29 1184.82,1218.6 1185.41,1218.52 1185.99,1220.7 1186.58,1221.32 1187.16,1222.48 1187.75,1222.09 1188.34,1222.95 1188.92,1225.31 1189.51,1224.81 1190.1,1221.83 1190.68,1222.9 1191.27,1221.13 1191.86,1220.95 1192.44,1218.15 1193.03,1219.26 1193.62,1221.46 1194.2,1221.19 1194.79,1218.34 1195.37,1218.3 1195.96,1218.57 1196.55,1216.96 1197.13,1216.94 1197.72,1215.78 1198.31,1211.67 1198.89,1210.73 1199.48,1214.05 1200.07,1213.07 1200.65,1213.46 1201.24,1215.03 1201.83,1212.28 1202.41,1211.16 1203,1212.97 1203.58,1213.17 1204.17,1213.28 1204.76,1213.83 1205.34,1215.28 1205.93,1217.92 1206.52,1217.71 1207.1,1220.32 1207.69,1220.22 1208.28,1219.92 1208.86,1221.18 1209.45,1219.77 1210.03,1223.38 1210.62,1225.69 1211.21,1225.28 1211.79,1223.72 1212.38,1223.73 1212.97,1224.44 1213.55,1221.9 1214.14,1221.75 1214.73,1221.53 1215.31,1218.7 1215.9,1221.53 1216.49,1217.17 1217.07,1212.99 1217.66,1213.13 1218.24,1214.5 1218.83,1213.19 1219.42,1211.84 1220,1211.93 1220.59,1212.35 1221.18,1213.97 1221.76,1212.7 1222.35,1211.78 1222.94,1209.11 1223.52,1211.29 1224.11,1211.76 1224.7,1211.88 1225.28,1210.94 1225.87,1215.41 1226.45,1214.21 1227.04,1213.21 1227.63,1213.68 1228.21,1214.08 1228.8,1214.4 1229.39,1212.93 1229.97,1211.61 1230.56,1213.39 1231.15,1219.11 1231.73,1220.58 1232.32,1221.67 1232.91,1224.09 1233.49,1222.63 1234.08,1225.06 1234.66,1222.09 1235.25,1219.23 1235.84,1217.68 1236.42,1220.21 1237.01,1218.53 1237.6,1218.2 1238.18,1216.53 1238.77,1216.36 1239.36,1216.28 1239.94,1216.55 1240.53,1215.27 1241.11,1210.21 1241.7,1210.39 1242.29,1210.8 1242.87,1211.16 1243.46,1211.84 1244.05,1214.68 1244.63,1214.71 1245.22,1214.77 1245.81,1213.3 1246.39,1213.58 1246.98,1215.12 1247.57,1217.78 1248.15,1217.78 1248.74,1217.65 1249.32,1218.89 1249.91,1221.69 1250.5,1220.21 1251.08,1221.39 1251.67,1221.12 1252.26,1223.2 1252.84,1223.04 1253.43,1222.57 1254.02,1221.94 1254.6,1221.72 1255.19,1220.07 1255.78,1220.05 1256.36,1221.18 1256.95,1221.15 1257.53,1219.53 1258.12,1219.01 1258.71,1218.95 1259.29,1217.24 1259.88,1215.84 1260.47,1216.09 1261.05,1219 1261.64,1219.93 1262.23,1219.4 1262.81,1217.89 1263.4,1219.54 1263.98,1216.79 1264.57,1216.8 1265.16,1220.72 1265.74,1220.62 1266.33,1220.77 1266.92,1221.95 1267.5,1222.77 1268.09,1222.55 1268.68,1223.56 1269.26,1222.1 1269.85,1220.64 1270.44,1217.87 1271.02,1215.01 1271.61,1208.3 1272.19,1208.8 1272.78,1209.16 1273.37,1209.7 1273.95,1212.76 1274.54,1213.08 1275.13,1213.06 1275.71,1213.18 1276.3,1212 1276.89,1210.88 1277.47,1212.54 1278.06,1214.32 1278.65,1212.81 1279.23,1211.52 1279.82,1213.33 1280.4,1212.1 1280.99,1213.9 1281.58,1214.21 1282.16,1214.17 1282.75,1214.02 1283.34,1216.89 1283.92,1214.44 1284.51,1217.41 1285.1,1217.56 1285.68,1219.01 1286.27,1217.71 1286.86,1217.9 1287.44,1219.14 1288.03,1221.77 1288.61,1218.88 1289.2,1221.87 1289.79,1218.88 1290.37,1216.18 1290.96,1212.11 1291.55,1212.33 1292.13,1213.91 1292.72,1214.22 1293.31,1214.46 1293.89,1215.05 1294.48,1215.21 1295.06,1212.46 1295.65,1208.72 1296.24,1210.55 1296.82,1212.68 1297.41,1214.44 1298,1215.74 1298.58,1214.69 1299.17,1216.3 1299.76,1215.01 1300.34,1217.86 1300.93,1219.37 1301.52,1218.04 1302.1,1216.59 1302.69,1215.37 1303.27,1216.64 1303.86,1216.6 1304.45,1215.4 1305.03,1215.63 1305.62,1214.6 1306.21,1217.22 1306.79,1219.95 1307.38,1226.15 1307.97,1228.13 1308.55,1228.94 1309.14,1228.16 1309.73,1228.68 1310.31,1228.07 1310.9,1227.77 1311.48,1224.65 1312.07,1224.15 1312.66,1223.63 1313.24,1222.28 1313.83,1219.36 1314.42,1219.36 1315,1220.65 1315.59,1221.71 1316.18,1222.85 1316.76,1221.41 1317.35,1219.88 1317.93,1222.45 1318.52,1220.75 1319.11,1220.67 1319.69,1218.87 1320.28,1216.13 1320.87,1216.26 1321.45,1218.96 1322.04,1217.33 1322.63,1215.9 1323.21,1215.89 1323.8,1218.48 1324.39,1218.4 1324.97,1219.76 1325.56,1220.91 1326.14,1223.55 1326.73,1222.27 1327.32,1224.56 1327.9,1225.52 1328.49,1226.5 1329.08,1225.87 1329.66,1226.33 1330.25,1221.7 1330.84,1221.52 1331.42,1218.13 1332.01,1218.22 1332.6,1219.63 1333.18,1218.26 1333.77,1216.88 1334.35,1219.7 1334.94,1219.71 1335.53,1219.46 1336.11,1217.87 1336.7,1216.56 1337.29,1214.89 1337.87,1216.29 1338.46,1216.26 1339.05,1214.91 1339.63,1214.81 1340.22,1213.85 1340.8,1212.57 1341.39,1214.05 1341.98,1210.64 1342.56,1210.84 1343.15,1208.31 1343.74,1208.6 1344.32,1211.67 1344.91,1209.35 1345.5,1208.25 1346.08,1208.87 1346.67,1207.91 1347.26,1207.04 1347.84,1207.72 1348.43,1208.26 1349.01,1210.16 1349.6,1207.84 1350.19,1208.44 1350.77,1211.69 1351.36,1213.32 1351.95,1211.99 1352.53,1213.59 1353.12,1211.15 1353.71,1212.61 1354.29,1214.22 1354.88,1219.37 1355.47,1219.58 1356.05,1218.15 1356.64,1216.73 1357.22,1216.55 1357.81,1213.89 1358.4,1212.74 1358.98,1213.15 1359.57,1213.19 1360.16,1213.18 1360.74,1209.38 1361.33,1208.38 1361.92,1207.49 1362.5,1207.88 1363.09,1209.47 1363.68,1211.36 1364.26,1212.79 1364.85,1213.19 1365.43,1217.18 1366.02,1218.83 1366.61,1221.41 1367.19,1221.12 1367.78,1222.35 1368.37,1223.35 1368.95,1223.13 1369.54,1222.64 1370.13,1223.77 1370.71,1224.96 1371.3,1226.3 1371.88,1223.34 1372.47,1224.3 1373.06,1218.62 1373.64,1219.03 1374.23,1216.43 1374.82,1216.65 1375.4,1215.15 1375.99,1215.3 1376.58,1216.67 1377.16,1217.88 1377.75,1215.11 1378.34,1215.04 1378.92,1215.13 1379.51,1217.8 1380.09,1217.97 1380.68,1212.69 1381.27,1211.34 1381.85,1213.09 1382.44,1217.55 1383.03,1216.27 1383.61,1215.24 1384.2,1214.98 1384.79,1216.2 1385.37,1214.99 1385.96,1215.04 1386.55,1213.46 1387.13,1210.83 1387.72,1212.36 1388.3,1215.19 1388.89,1215.14 1389.48,1216.45 1390.06,1219.22 1390.65,1221.61 1391.24,1220.04 1391.82,1219.99 1392.41,1219.75 1393,1222.59 1393.58,1220.88 1394.17,1223.22 1394.75,1224.34 1395.34,1224.04 1395.93,1226.26 1396.51,1224.82 1397.1,1222.84 1397.69,1224.95 1398.27,1223.4 1398.86,1225.82 1399.45,1224.22 1400.03,1225.32 1400.62,1225.04 1401.21,1225.89 1401.79,1225.54 1402.38,1225.03 1402.96,1227.59 1403.55,1225.87 1404.14,1225.43 1404.72,1220.93 1405.31,1218.06 1405.9,1218.16 1406.48,1214.24 1407.07,1210.24 1407.66,1207.91 1408.24,1211.07 1408.83,1210.08 1409.42,1211.78 1410,1210.58 1410.59,1209.62 1411.17,1211.58 1411.76,1213.38 1412.35,1213.51 1412.93,1212.07 1413.52,1212.33 1414.11,1215.26 1414.69,1217.83 1415.28,1216.11 1415.87,1217.4 1416.45,1215.81 1417.04,1215.82 1417.63,1217.4 1418.21,1216.24 1418.8,1218.84 1419.38,1217.31 1419.97,1217.36 1420.56,1219.96 1421.14,1219.71 1421.73,1217.21 1422.32,1218.74 1422.9,1218.91 1423.49,1217.62 1424.08,1218.84 1424.66,1217.28 1425.25,1215.87 1425.83,1219.76 1426.42,1217.07 1427.01,1214.41 1427.59,1211.98 1428.18,1212.26 1428.77,1209.73 1429.35,1209.96 1429.94,1211.71 1430.53,1214.85 1431.11,1212.18 1431.7,1212.47 1432.29,1214.08 1432.87,1214.47 1433.46,1216.06 1434.04,1216.09 1434.63,1213.48 1435.22,1212.41 1435.8,1212.67 1436.39,1210.35 1436.98,1209.38 1437.56,1209.58 1438.15,1212.76 1438.74,1213.11 1439.32,1209.17 1439.91,1210.82 1440.5,1212.74 1441.08,1215.79 1441.67,1218.41 1442.25,1218.39 1442.84,1217.06 1443.43,1218.51 1444.01,1218.49 1444.6,1218.5 1445.19,1217.22 1445.77,1218.67 1446.36,1217.44 1446.95,1216.04 1447.53,1216.01 1448.12,1214.45 1448.7,1210.69 1449.29,1210.96 1449.88,1210.12 1450.46,1213.27 1451.05,1210.85 1451.64,1211.15 1452.22,1211.65 1452.81,1215.93 1453.4,1213.42 1453.98,1213.96 1454.57,1214.26 1455.16,1214.53 1455.74,1211.96 1456.33,1213.57 1456.91,1212.09 1457.5,1212.11 1458.09,1213.77 1458.67,1215.01 1459.26,1216.54 1459.85,1216.38 1460.43,1220.09 1461.02,1217.03 1461.61,1215.54 1462.19,1215.73 1462.78,1215.63 1463.37,1215.74 1463.95,1211.64 1464.54,1210.66 1465.12,1214.99 1465.71,1217.83 1466.3,1219.14 1466.88,1216.39 1467.47,1218.95 1468.06,1218.9 1468.64,1216.05 1469.23,1217.55 1469.82,1214.83 1470.4,1215.16 1470.99,1217.74 1471.57,1217.6 1472.16,1218.72 1472.75,1220.12 1473.33,1220.38 1473.92,1221.53 1474.51,1221.31 1475.09,1221.25 1475.68,1221.3 1476.27,1223.55 1476.85,1224.43 1477.44,1225.46 1478.03,1224.66 1478.61,1221.42 1479.2,1220.84 1479.78,1219.45 1480.37,1219.09 1480.96,1217.53 1481.54,1216.04 1482.13,1216.09 1482.72,1216.13 1483.3,1216.13 1483.89,1216.3 1484.48,1216.39 1485.06,1216.32 1485.65,1215.21 1486.24,1216.47 1486.82,1220.51 1487.41,1220.41 1487.99,1217.59 1488.58,1216.27 1489.17,1216.55 1489.75,1216.75 1490.34,1216.68 1490.93,1215.12 1491.51,1216.38 1492.1,1213.76 1492.69,1213.93 1493.27,1216.89 1493.86,1216.82 1494.45,1219.55 1495.03,1218 1495.62,1218.14 1496.2,1222.29 1496.79,1222.17 1497.38,1223.38 1497.96,1224.32 1498.55,1222.56 1499.14,1222.26 1499.72,1220.85 1500.31,1219.14 1500.9,1221.7 1501.48,1221.54 1502.07,1224.2 1502.65,1222.33 1503.24,1219.2 1503.83,1217.99 1504.41,1215.32 1505,1214.09 1505.59,1211.63 1506.17,1212.13 1506.76,1205.94 1507.35,1210.64 1507.93,1214.95 1508.52,1212.29 1509.11,1209.51 1509.69,1211.17 1510.28,1211.41 1510.86,1212.78 1511.45,1210.02 1512.04,1210.14 1512.62,1210.42 1513.21,1210.54 1513.8,1210.79 1514.38,1209.37 1514.97,1206.91 1515.56,1210.24 1516.14,1211.63 1516.73,1211.81 1517.32,1213.36 1517.9,1213.6 1518.49,1213.84 1519.07,1215.59 1519.66,1211.46 1520.25,1213.15 1520.83,1214.16 1521.42,1214.13 1522.01,1214.2 1522.59,1214.58 1523.18,1214.41 1523.77,1214.64 1524.35,1207.92 1524.94,1208.36 1525.52,1207.57 1526.11,1207.79 1526.7,1207.96 1527.28,1208.54 1527.87,1208.82 1528.46,1212.15 1529.04,1211.29 1529.63,1211.68 1530.22,1212.14 1530.8,1212.5 1531.39,1209.85 1531.98,1210.43 1532.56,1212.14 1533.15,1211.2 1533.73,1212.91 1534.32,1214.42 1534.91,1214.43 1535.49,1209.38 1536.08,1209.88 1536.67,1210.27 1537.25,1211.81 1537.84,1209.51 1538.43,1212.78 1539.01,1214.04 1539.6,1216.99 1540.19,1217.13 1540.77,1217.42 1541.36,1215.89 1541.94,1214.78 1542.53,1214.6 1543.12,1214.65 1543.7,1214.85 1544.29,1215.31 1544.88,1216.62 1545.46,1215.31 1546.05,1215.38 1546.64,1216.75 1547.22,1219.29 1547.81,1220.59 1548.4,1219.25 1548.98,1219.14 1549.57,1220.19 1550.15,1222.73 1550.74,1221.17 1551.33,1212.75 1551.91,1215.9 1552.5,1216.19 1553.09,1216.02 1553.67,1216.05 1554.26,1218.8 1554.85,1221.19 1555.43,1220.75 1556.02,1221.83 1556.6,1218.59 1557.19,1221.3 1557.78,1221.14 1558.36,1222.54 1558.95,1222.24 1559.54,1223.3 1560.12,1224.36 1560.71,1224.02 1561.3,1223.56 1561.88,1224.68 1562.47,1221.71 1563.06,1221.31 1563.64,1223.68 1564.23,1226 1564.81,1224.29 1565.4,1229.04 1565.99,1232.55 1566.57,1233.03 1567.16,1228.33 1567.75,1227.5 1568.33,1226.59 1568.92,1226.14 1569.51,1224.09 1570.09,1226.42 1570.68,1225.84 1571.27,1225.38 1571.85,1224.84 1572.44,1222.99 1573.02,1221.05 1573.61,1219.6 1574.2,1219.5 1574.78,1216.7 1575.37,1216.49 1575.96,1215.14 1576.54,1218.35 1577.13,1219.66 1577.72,1222.3 1578.3,1221.7 1578.89,1222.88 1579.47,1219.77 1580.06,1217.23 1580.65,1214.4 1581.23,1215.81 1581.82,1218.49 1582.41,1219.68 1582.99,1217.83 1583.58,1219.1 1584.17,1219.09 1584.75,1221.37 1585.34,1220.97 1585.93,1218.12 1586.51,1218.15 1587.1,1217.97 1587.68,1217.83 1588.27,1218.04 1588.86,1219.18 1589.44,1218.99 1590.03,1218.8 1590.62,1219.72 1591.2,1219.67 1591.79,1216.91 1592.38,1215.51 1592.96,1215.62 1593.55,1215.8 1594.14,1218.46 1594.72,1219.47 1595.31,1218.07 1595.89,1216.82 1596.48,1216.82 1597.07,1216.92 1597.65,1217.99 1598.24,1214.84 1598.83,1215.02 1599.41,1216.15 1600,1216.53 1600.59,1217.87 1601.17,1216.13 1601.76,1217.64 1602.34,1216.05 1602.93,1214.7 1603.52,1214.74 1604.1,1214.92 1604.69,1215.51 1605.28,1216.79 1605.86,1216.49 1606.45,1215.15 1607.04,1215.32 1607.62,1216.58 1608.21,1216.64 1608.8,1216.32 1609.38,1214.98 1609.97,1216.52 1610.55,1216.52 1611.14,1215.02 1611.73,1214.87 1612.31,1213.63 1612.9,1212.55 1613.49,1212.94 1614.07,1211.77 1614.66,1213.44 1615.25,1213.79 1615.83,1215.25 1616.42,1215.38 1617.01,1217.92 1617.59,1217.83 1618.18,1216.47 1618.76,1213.96 1619.35,1215.34 1619.94,1216.92 1620.52,1216.65 1621.11,1216.75 1621.7,1217.08 1622.28,1218.34 1622.87,1216.89 1623.46,1220.82 1624.04,1220.52 1624.63,1223.07 1625.22,1225.54 1625.8,1227.55 1626.39,1227.1 1626.97,1230.46 1627.56,1229.55 1628.15,1227.49 1628.73,1224.03 1629.32,1225.01 1629.91,1223.35 1630.49,1223.08 1631.08,1224.23 1631.67,1220.9 1632.25,1220.7 1632.84,1220.45 1633.42,1220.39 1634.01,1221.4 1634.6,1219.9 1635.18,1215.69 1635.77,1216.02 1636.36,1214.49 1636.94,1211.99 1637.53,1209.58 1638.12,1209.8 1638.7,1212.7 1639.29,1211.42 1639.88,1211.8 1640.46,1209.39 1641.05,1208.33 1641.63,1208.72 1642.22,1209.13 1642.81,1208.16 1643.39,1207.14 1643.98,1209.07 1644.57,1208.23 1645.15,1211.42 1645.74,1214.57 1646.33,1217.12 1646.91,1218.65 1647.5,1221.46 1648.09,1221.26 1648.67,1219.44 1649.26,1217.76 1649.84,1217.53 1650.43,1214.86 1651.02,1211.14 1651.6,1215.63 1652.19,1214.63 1652.78,1214.52 1653.36,1210.22 1653.95,1212.99 1654.54,1210.73 1655.12,1212.35 1655.71,1212.57 1656.29,1216.79 1656.88,1218.18 1657.47,1219.48 1658.05,1220.43 1658.64,1220.1 1659.23,1218.37 1659.81,1218.13 1660.4,1219.66 1660.99,1219.56 1661.57,1219.6 1662.16,1219.25 1662.75,1220.37 1663.33,1220.18 1663.92,1216.06 1664.5,1214.64 1665.09,1217.45 1665.68,1218.85 1666.26,1221.73 1666.85,1219.86 1667.44,1219.99 1668.02,1220.01 1668.61,1221.16 1669.2,1220.97 1669.78,1223.62 1670.37,1224.51 1670.96,1222.66 1671.54,1227.72 1672.13,1226.17 1672.71,1224.54 1673.3,1225.31 1673.89,1223.51 1674.47,1223.29 1675.06,1224.43 1675.65,1222.81 1676.23,1221.02 1676.82,1220.78 1677.41,1220.64 1677.99,1223.29 1678.58,1223.27 1679.17,1221.74 1679.75,1221.7 1680.34,1220.01 1680.92,1221.16 1681.51,1220.7 1682.1,1222.16 1682.68,1222.26 1683.27,1219.82 1683.86,1222.76 1684.44,1222.66 1685.03,1224.93 1685.62,1221.84 1686.2,1218.89 1686.79,1217.27 1687.37,1214.64 1687.96,1215.02 1688.55,1216.81 1689.13,1216.87 1689.72,1216.57 1690.31,1215.37 1690.89,1216.82 1691.48,1217.18 1692.07,1215.69 1692.65,1213.01 1693.24,1207.94 1693.83,1206.88 1694.41,1205.87 1695,1207.74 1695.58,1209.49 1696.17,1209.77 1696.76,1212.9 1697.34,1212.11 1697.93,1212.54 1698.52,1213.93 1699.1,1211.3 1699.69,1210.29 1700.28,1214.78 1700.86,1214.91 1701.45,1216.2 1702.04,1212.1 1702.62,1215.01 1703.21,1215.14 1703.79,1216.39 1704.38,1219.37 1704.97,1217.58 1705.55,1217.64 1706.14,1216.7 1706.73,1215.74 1707.31,1217.05 1707.9,1217.24 1708.49,1215.97 1709.07,1212.3 1709.66,1211.08 1710.24,1210.19 1710.83,1210.8 1711.42,1209.86 1712,1207.37 1712.59,1209.4 1713.18,1211.28 1713.76,1212.83 1714.35,1212.78 1714.94,1212.89 1715.52,1214.54 1716.11,1215.85 1716.7,1218.24 1717.28,1220.71 1717.87,1220.67 1718.45,1220.7 1719.04,1219.15 1719.63,1218.82 1720.21,1217.32 1720.8,1216 1721.39,1217.2 1721.97,1217.24 1722.56,1217.09 1723.15,1215.79 1723.73,1214.52 1724.32,1214.58 1724.91,1216.02 1725.49,1214.57 1726.08,1217.34 1726.66,1211.9 1727.25,1212.45 1727.84,1211.34 1728.42,1211.9 1729.01,1212.25 1729.6,1215.28 1730.18,1218 1730.77,1217.92 1731.36,1219.1 1731.94,1217.54 1732.53,1217.48 1733.11,1214.84 1733.7,1214.85 1734.29,1213.56 1734.87,1212.38 1735.46,1215.46 1736.05,1218.03 1736.63,1219.51 1737.22,1219.41 1737.81,1219.39 1738.39,1220.5 1738.98,1223.01 1739.57,1224.16 1740.15,1222.31 1740.74,1223.43 1741.32,1221.78 1741.91,1219.98 1742.5,1223.93 1743.08,1223.45 1743.67,1224.36 1744.26,1222.71 1744.84,1219.81 1745.43,1218.2 1746.02,1219.41 1746.6,1218.11 1747.19,1220.65 1747.78,1219.15 1748.36,1215.13 1748.95,1214.29 1749.53,1216.05 1750.12,1214.77 1750.71,1212.33 1751.29,1211.02 1751.88,1214.04 1752.47,1214.6 1753.05,1211.86 1753.64,1213.43 1754.23,1213.47 1754.81,1213.61 1755.4,1213.88 1755.99,1214.18 1756.57,1214.3 1757.16,1214.51 1757.74,1214.53 1758.33,1216.98 1758.92,1216.88 1759.5,1216.72 1760.09,1216.58 1760.68,1215.25 1761.26,1213.89 1761.85,1213.96 1762.44,1214.32 1763.02,1214.54 1763.61,1210.65 1764.19,1206.72 1764.78,1207.31 1765.37,1207.97 1765.95,1205.58 1766.54,1208.93 1767.13,1210.88 1767.71,1212.71 1768.3,1212.85 1768.89,1214.2 1769.47,1215.46 1770.06,1215.51 1770.65,1214.19 1771.23,1211.56 1771.82,1210.55 1772.4,1211.11 1772.99,1210.21 1773.58,1212.1 1774.16,1211.17 1774.75,1212.8 1775.34,1212.91 1775.92,1214.41 1776.51,1215.8 1777.1,1218.68 1777.68,1218.62 1778.27,1221.12 1778.86,1219.7 1779.44,1218.23 1780.03,1223.62 1780.61,1222.29 1781.2,1224.72 1781.79,1225.49 1782.37,1223.52 1782.96,1222.02 1783.55,1221.5 1784.13,1221.03 1784.72,1217.9 1785.31,1217.93 1785.89,1219.24 1786.48,1222.14 1787.06,1221.56 1787.65,1220.18 1788.24,1220.15 1788.82,1218.71 1789.41,1217.59 1790,1215.89 1790.58,1219.95 1791.17,1218.42 1791.76,1218.58 1792.34,1219.55 1792.93,1218.37 1793.52,1223.48 1794.1,1225.62 1794.69,1223.77 1795.27,1224.81 1795.86,1225.75 1796.45,1225.36 1797.03,1223.73 1797.62,1222.05 1798.21,1224.27 1798.79,1222.45 1799.38,1222.09 1799.97,1221.98 1800.55,1224.17 1801.14,1225.06 1801.73,1225.1 1802.31,1226.19 1802.9,1220.41 1803.48,1220.36 1804.07,1221.6 1804.66,1220 1805.24,1220.09 1805.83,1218.71 1806.42,1219.85 1807,1219.99 1807.59,1218.39 1808.18,1218.48 1808.76,1217.05 1809.35,1216.99 1809.94,1215.49 1810.52,1215.53 1811.11,1214.34 1811.69,1214.73 1812.28,1213.48 1812.87,1213.94 1813.45,1215.47 1814.04,1216.68 1814.63,1217.78 1815.21,1217.82 1815.8,1219.03 1816.39,1218.87 1816.97,1217.6 1817.56,1219.16 1818.14,1212.24 1818.73,1211.19 1819.32,1211.52 1819.9,1214.65 1820.49,1216.3 1821.08,1216.37 1821.66,1215.54 1822.25,1213.03 1822.84,1213.11 1823.42,1213.43 1824.01,1214.83 1824.6,1214.92 1825.18,1210.85 1825.77,1212.35 1826.35,1213.97 1826.94,1214.2 1827.53,1214.38 1828.11,1214.41 1828.7,1214.57 1829.29,1212.35 1829.87,1211.17 1830.46,1210.26 1831.05,1207.91 1831.63,1209.72 1832.22,1210.02 1832.81,1210.43 1833.39,1212.04 1833.98,1214.86 1834.56,1219 1835.15,1217.21 1835.74,1218.31 1836.32,1216.69 1836.91,1215.32 1837.5,1216.59 1838.08,1213.77 1838.67,1209.98 1839.26,1211.76 1839.84,1217.26 1840.43,1215.95 1841.01,1215.73 1841.6,1214.75 1842.19,1216.25 1842.77,1217.63 1843.36,1217.39 1843.95,1220.07 1844.53,1218.42 1845.12,1219.76 1845.71,1222.43 1846.29,1222.45 1846.88,1223.41 1847.47,1221.66 1848.05,1220.24 1848.64,1221.42 1849.22,1219.77 1849.81,1221.05 1850.4,1219.49 1850.98,1219.2 1851.57,1216.61 1852.16,1216.74 1852.74,1215.18 1853.33,1218.07 1853.92,1217.76 1854.5,1214.86 1855.09,1215.07 1855.68,1216.41 1856.26,1221.86 1856.85,1220.23 1857.43,1218.75 1858.02,1217.49 1858.61,1217.54 1859.19,1214.84 1859.78,1216.31 1860.37,1215.26 1860.95,1214.05 1861.54,1214.43 1862.13,1213.56 1862.71,1216.59 1863.3,1220.33 1863.88,1220.26 1864.47,1221.44 1865.06,1219.86 1865.64,1218.33 1866.23,1219.69 1866.82,1218.18 1867.4,1223.67 1867.99,1220.65 1868.58,1217.77 1869.16,1217.54 1869.75,1220.05 1870.34,1220.9 1870.92,1220.61 1871.51,1219.04 1872.09,1216.06 1872.68,1215.03 1873.27,1212.74 1873.85,1213.04 1874.44,1214.56 1875.03,1217.23 1875.61,1215.67 1876.2,1215.65 1876.79,1214.29 1877.37,1214.11 1877.96,1214.09 1878.55,1214.1 1879.13,1215.59 1879.72,1214.34 1880.3,1214.28 1880.89,1214.57 1881.48,1214.55 1882.06,1214.67 1882.65,1210.72 1883.24,1210.94 1883.82,1211.34 1884.41,1211.69 1885,1208.98 1885.58,1207.06 1886.17,1210.18 1886.76,1210.54 1887.34,1208.35 1887.93,1211.37 1888.51,1207.6 1889.1,1209.44 1889.69,1208.56 1890.27,1207.94 1890.86,1209.98 1891.45,1209.23 1892.03,1208.09 1892.62,1208.57 1893.21,1209.01 1893.79,1209.66 1894.38,1211.63 1894.96,1210.71 1895.55,1209.82 1896.14,1210.42 1896.72,1209.38 1897.31,1209.51 1897.9,1209.96 1898.48,1209 1899.07,1208.14 1899.66,1209.98 1900.24,1211.48 1900.83,1212.95 1901.42,1214.57 1902,1214.84 1902.59,1213.86 1903.17,1213.9 1903.76,1212.95 1904.35,1215.61 1904.93,1215.92 1905.52,1214.77 1906.11,1209.54 1906.69,1210.3 1907.28,1211.82 1907.87,1213.7 1908.45,1212.43 1909.04,1214.15 1909.63,1211.57 1910.21,1213.13 1910.8,1213.56 1911.38,1213.98 1911.97,1216.85 1912.56,1217.01 1913.14,1218.6 1913.73,1219.98 1914.32,1217.2 1914.9,1215.83 1915.49,1215.89 1916.08,1216.18 1916.66,1216.43 1917.25,1216.37 1917.83,1217.79 1918.42,1217.78 1919.01,1219.12 1919.59,1217.63 1920.18,1219.12 1920.77,1220.63 1921.35,1219.37 1921.94,1220.51 1922.53,1220.5 1923.11,1220.23 1923.7,1220.08 1924.29,1215.81 1924.87,1217.37 1925.46,1217.72 1926.04,1217.84 1926.63,1215.2 1927.22,1215.31 1927.8,1215.61 1928.39,1212.78 1928.98,1215.77 1929.56,1218.52 1930.15,1216.97 1930.74,1219.78 1931.32,1219.18 1931.91,1217.62 1932.5,1220.46 1933.08,1218.82 1933.67,1218.85 1934.25,1215.87 1934.84,1217.01 1935.43,1217.06 1936.01,1215.7 1936.6,1215.88 1937.19,1217.45 1937.77,1216.3 1938.36,1217.38 1938.95,1221.36 1939.53,1221.06 1940.12,1220.76 1940.71,1218.93 1941.29,1217.47 1941.88,1217.71 1942.46,1217.51 1943.05,1217.32 1943.64,1215.83 1944.22,1216.04 1944.81,1213.66 1945.4,1215.23 1945.98,1216.48 1946.57,1216.42 1947.16,1216.11 1947.74,1214.75 1948.33,1217.31 1948.91,1217.32 1949.5,1215.8 1950.09,1215.74 1950.67,1219.75 1951.26,1217.04 1951.85,1216.98 1952.43,1219.58 1953.02,1218.22 1953.61,1216.81 1954.19,1218.15 1954.78,1219.36 1955.37,1217.92 1955.95,1219.09 1956.54,1217.86 1957.12,1216.38 1957.71,1216.58 1958.3,1213.94 1958.88,1217.93 1959.47,1220.69 1960.06,1221.87 1960.64,1223.13 1961.23,1223.8 1961.82,1225.96 1962.4,1224.29 1962.99,1227.81 1963.58,1227.3 1964.16,1226.76 1964.75,1228.77 1965.33,1225.19 1965.92,1226.2 1966.51,1224.43 1967.09,1222.81 1967.68,1222.72 1968.27,1222.5 1968.85,1223.49 1969.44,1223.43 1970.03,1224.05 1970.61,1223.65 1971.2,1225.68 1971.78,1225.24 1972.37,1224.76 1972.96,1224.54 1973.54,1225.25 1974.13,1226.29 1974.72,1225.79 1975.3,1225.27 1975.89,1226.07 1976.48,1227.1 1977.06,1226.54 1977.65,1223.27 1978.24,1225.22 1978.82,1224.85 1979.41,1227.11 1979.99,1229.18 1980.58,1229.86 1981.17,1230.43 1981.75,1229.47 1982.34,1228.71 1982.93,1225.58 1983.51,1225.05 1984.1,1224.45 1984.69,1223.96 1985.27,1223.58 1985.86,1217.67 1986.45,1218.85 1987.03,1215.82 1987.62,1215.48 1988.2,1214.06 1988.79,1216.95 1989.38,1212.79 1989.96,1213.28 1990.55,1216.1 1991.14,1216.12 1991.72,1214.68 1992.31,1213.1 1992.9,1213.24 1993.48,1215.09 1994.07,1215.01 1994.65,1213.42 1995.24,1214.59 1995.83,1214.71 1996.41,1217.37 1997,1218.53 1997.59,1219.79 1998.17,1218.42 1998.76,1217.03 1999.35,1215.71 1999.93,1215.73 2000.52,1215.88 2001.11,1218.73 2001.69,1218.74 2002.28,1219.72 2002.86,1223.36 2003.45,1220.25 2004.04,1221.37 2004.62,1218.37 2005.21,1216.98 2005.8,1216.97 2006.38,1214.08 2006.97,1211.68 2007.56,1214.74 2008.14,1213.68 2008.73,1213.84 2009.32,1213.79 2009.9,1215.49 2010.49,1213.03 2011.07,1211.95 2011.66,1216.13 2012.25,1218.93 2012.83,1217.33 2013.42,1217.3 2014.01,1211.96 2014.59,1210.95 2015.18,1208.61 2015.77,1210.55 2016.35,1215.27 2016.94,1213.99 2017.53,1212.74 2018.11,1212.93 2018.7,1217.53 2019.28,1220.18 2019.87,1221.28 2020.46,1222.35 2021.04,1222.2 2021.63,1224.68 2022.22,1224.35 2022.8,1223.96 2023.39,1222.33 2023.98,1223.49 2024.56,1221.84 2025.15,1221.38 2025.73,1223.69 2026.32,1221.81 2026.91,1223.03 2027.49,1221.36 2028.08,1219.99 2028.67,1219.75 2029.25,1218.12 2029.84,1217.88 2030.43,1218.88 2031.01,1220.33 2031.6,1215.88 2032.19,1215.99 2032.77,1217.52 2033.36,1217.24 2033.94,1214.58 2034.53,1217.24 2035.12,1213.08 2035.7,1212.02 2036.29,1212.06 2036.88,1213.38 2037.46,1212.26 2038.05,1214.94 2038.64,1215.09 2039.22,1216.46 2039.81,1217.98 2040.4,1213.91 2040.98,1214.12 2041.57,1212.98 2042.15,1211.53 2042.74,1211.78 2043.33,1212.57 2043.91,1211.31 2044.5,1212.84 2045.09,1211.52 2045.67,1213.07 2046.26,1211.64 2046.85,1214.54 2047.43,1211.87 2048.02,1210.74 2048.6,1209.93 2049.19,1211.47 2049.78,1211.73 2050.36,1212.2 2050.95,1211.47 2051.54,1209.1 2052.12,1208.08 2052.71,1210.07 2053.3,1212.07 2053.88,1213.98 2054.47,1213.99 2055.06,1213 2055.64,1213.28 2056.23,1210.77 2056.81,1211.34 2057.4,1214.58 2057.99,1213.34 2058.57,1212.46 2059.16,1210.15 2059.75,1215.9 2060.33,1215.98 2060.92,1214.89 2061.51,1215.02 2062.09,1214.06 2062.68,1215.76 2063.27,1215.76 2063.85,1214.55 2064.44,1217.41 2065.02,1218.55 2065.61,1221.11 2066.2,1220.91 2066.78,1218.1 2067.37,1218.21 2067.96,1221.09 2068.54,1219.62 2069.13,1218.07 2069.72,1220.61 2070.3,1220.53 2070.89,1220.3 2071.48,1218.45 2072.06,1218.15 2072.65,1218.19 2073.23,1216.84 2073.82,1215.58 2074.41,1211.55 2074.99,1210.59 2075.58,1213.84 2076.17,1212.88 2076.75,1211.77 2077.34,1214.86 2077.93,1215.01 2078.51,1213.82 2079.1,1212.23 2079.68,1209.79 2080.27,1210.12 2080.86,1209.2 2081.44,1209.65 2082.03,1212.65 2082.62,1208.72 2083.2,1209.22 2083.79,1208.45 2084.38,1209.05 2084.96,1210.92 2085.55,1211.42 2086.14,1214.63 2086.72,1212.27 2087.31,1212.83 2087.89,1211.82 2088.48,1214.87 2089.07,1213.73 2089.65,1213.85 2090.24,1214.12 2090.83,1215.54 2091.41,1214.2 2092,1215.63 2092.59,1214.4 2093.17,1213.15 2093.76,1218.94 2094.35,1218.88 2094.93,1216.04 2095.52,1213.45 2096.1,1212.29 2096.69,1215.19 2097.28,1217.84 2097.86,1220.49 2098.45,1221.72 2099.04,1221.29 2099.62,1222.42 2100.21,1223.59 2100.8,1223.06 2101.38,1222.78 2101.97,1219.95 2102.55,1221.13 2103.14,1219.94 2103.73,1219.68 2104.31,1220.52 2104.9,1221.23 2105.49,1219.66 2106.07,1218.44 2106.66,1218.28 2107.25,1216.54 2107.83,1216.43 2108.42,1217.61 2109.01,1216.28 2109.59,1214.9 2110.18,1216.29 2110.76,1216.12 2111.35,1215.93 2111.94,1215.98 2112.52,1215.85 2113.11,1216.01 2113.7,1214.84 2114.28,1216.33 2114.87,1217.66 2115.46,1220.2 2116.04,1221.54 2116.63,1219.84 2117.22,1217.99 2117.8,1218.14 2118.39,1218.37 2118.97,1219.72 2119.56,1216.63 2120.15,1216.64 2120.73,1216.7 2121.32,1215.44 2121.91,1212.95 2122.49,1213.44 2123.08,1215.04 2123.67,1213.84 2124.25,1212.73 2124.84,1213.34 2125.42,1212.19 2126.01,1216.16 2126.6,1216.02 2127.18,1217.41 2127.77,1217.14 2128.36,1217.06 2128.94,1219.56 2129.53,1219.28 2130.12,1217.8 2130.7,1216.11 2131.29,1216.07 2131.88,1214.32 2132.46,1214.47 2133.05,1213.13 2133.63,1211.9 2134.22,1209.48 2134.81,1210.04 2135.39,1210.55 2135.98,1212.11 2136.57,1216.16 2137.15,1215.14 2137.74,1215.43 2138.33,1216.67 2138.91,1218.01 2139.5,1219.55 2140.09,1220.93 2140.67,1216.53 2141.26,1216.73 2141.84,1215.33 2142.43,1216.8 2143.02,1216.48 2143.6,1219.38 2144.19,1216.49 2144.78,1217.71 2145.36,1217.54 2145.95,1217.55 2146.54,1218.72 2147.12,1220.04 2147.71,1220.09 2148.3,1221.15 2148.88,1220.62 2149.47,1221.47 2150.05,1222.45 2150.64,1222.36 2151.23,1223.42 2151.81,1220.33 2152.4,1220.06 2152.99,1218.75 2153.57,1218.68 2154.16,1220.06 2154.75,1219.49 2155.33,1219.22 2155.92,1220.34 2156.5,1218.75 2157.09,1218.43 2157.68,1220 2158.26,1221.3 \"/>\n<path clip-path=\"url(#clip642)\" d=\"M986.025 1217.43 L986.612 1217.43 L987.198 1217.43 L987.785 1217.43 L988.371 1217.43 L988.957 1217.43 L989.544 1217.43 L990.13 1217.43 L990.717 1217.43 L991.303 1217.43 L991.889 1217.43 L992.476 1217.43 L993.062 1217.43 L993.649 1217.43 L994.235 1217.43 L994.822 1217.43 L995.408 1217.43 L995.994 1217.43 L996.581 1217.43 L997.167 1217.43 L997.754 1217.43 L998.34 1217.43 L998.926 1217.43 L999.513 1217.43 L1000.1 1217.43 L1000.69 1217.43 L1001.27 1217.43 L1001.86 1217.43 L1002.44 1217.43 L1003.03 1217.43 L1003.62 1217.43 L1004.2 1217.43 L1004.79 1217.43 L1005.38 1217.43 L1005.96 1217.43 L1006.55 1217.43 L1007.14 1217.43 L1007.72 1217.43 L1008.31 1217.43 L1008.9 1217.43 L1009.48 1217.43 L1010.07 1217.43 L1010.65 1217.43 L1011.24 1217.43 L1011.83 1217.43 L1012.41 1217.43 L1013 1217.43 L1013.59 1217.43 L1014.17 1217.43 L1014.76 1217.43 L1015.35 1217.43 L1015.93 1217.43 L1016.52 1217.43 L1017.11 1217.43 L1017.69 1217.43 L1018.28 1217.43 L1018.86 1217.43 L1019.45 1217.43 L1020.04 1217.43 L1020.62 1217.43 L1021.21 1217.43 L1021.8 1217.43 L1022.38 1217.43 L1022.97 1217.43 L1023.56 1217.43 L1024.14 1217.43 L1024.73 1217.43 L1025.32 1217.43 L1025.9 1217.43 L1026.49 1217.43 L1027.07 1217.43 L1027.66 1217.43 L1028.25 1217.43 L1028.83 1217.43 L1029.42 1217.43 L1030.01 1217.43 L1030.59 1217.43 L1031.18 1217.43 L1031.77 1217.43 L1032.35 1217.43 L1032.94 1217.43 L1033.52 1217.43 L1034.11 1217.43 L1034.7 1217.43 L1035.28 1217.43 L1035.87 1217.43 L1036.46 1217.43 L1037.04 1217.43 L1037.63 1217.43 L1038.22 1217.43 L1038.8 1217.43 L1039.39 1217.43 L1039.98 1217.43 L1040.56 1217.43 L1041.15 1217.43 L1041.73 1217.43 L1042.32 1217.43 L1042.91 1217.43 L1043.49 1217.43 L1044.08 1217.43 L1044.67 1217.43 L1045.25 1217.43 L1045.84 1217.43 L1046.43 1217.43 L1047.01 1217.43 L1047.6 1217.43 L1048.19 1217.43 L1048.77 1217.43 L1049.36 1217.43 L1049.94 1217.43 L1050.53 1217.43 L1051.12 1217.43 L1051.7 1217.43 L1052.29 1217.43 L1052.88 1217.43 L1053.46 1217.43 L1054.05 1217.43 L1054.64 1217.43 L1055.22 1217.43 L1055.81 1217.43 L1056.39 1217.43 L1056.98 1217.43 L1057.57 1217.43 L1058.15 1217.43 L1058.74 1217.43 L1059.33 1217.43 L1059.91 1217.43 L1060.5 1217.43 L1061.09 1217.43 L1061.67 1217.43 L1062.26 1217.43 L1062.85 1217.43 L1063.43 1217.43 L1064.02 1217.43 L1064.6 1217.43 L1065.19 1217.43 L1065.78 1217.43 L1066.36 1217.43 L1066.95 1217.43 L1067.54 1217.43 L1068.12 1217.43 L1068.71 1217.43 L1069.3 1217.43 L1069.88 1217.43 L1070.47 1217.43 L1071.06 1217.43 L1071.64 1217.43 L1072.23 1217.43 L1072.81 1217.43 L1073.4 1217.43 L1073.99 1217.43 L1074.57 1217.43 L1075.16 1217.43 L1075.75 1217.43 L1076.33 1217.43 L1076.92 1217.43 L1077.51 1217.43 L1078.09 1217.43 L1078.68 1217.43 L1079.26 1217.43 L1079.85 1217.43 L1080.44 1217.43 L1081.02 1217.43 L1081.61 1217.43 L1082.2 1217.43 L1082.78 1217.43 L1083.37 1217.43 L1083.96 1217.43 L1084.54 1217.43 L1085.13 1217.43 L1085.72 1217.43 L1086.3 1217.43 L1086.89 1217.43 L1087.47 1217.43 L1088.06 1217.43 L1088.65 1217.43 L1089.23 1217.43 L1089.82 1217.43 L1090.41 1217.43 L1090.99 1217.43 L1091.58 1217.43 L1092.17 1217.43 L1092.75 1217.43 L1093.34 1217.43 L1093.93 1217.43 L1094.51 1217.43 L1095.1 1217.43 L1095.68 1217.43 L1096.27 1217.43 L1096.86 1217.43 L1097.44 1217.43 L1098.03 1217.43 L1098.62 1217.43 L1099.2 1217.43 L1099.79 1217.43 L1100.38 1217.43 L1100.96 1217.43 L1101.55 1217.43 L1102.14 1217.43 L1102.72 1217.43 L1103.31 1217.43 L1103.89 1217.43 L1104.48 1217.43 L1105.07 1217.43 L1105.65 1217.43 L1106.24 1217.43 L1106.83 1217.43 L1107.41 1217.43 L1108 1217.43 L1108.59 1217.43 L1109.17 1217.43 L1109.76 1217.43 L1110.34 1217.43 L1110.93 1217.43 L1111.52 1217.43 L1112.1 1217.43 L1112.69 1217.43 L1113.28 1217.43 L1113.86 1217.43 L1114.45 1217.43 L1115.04 1217.43 L1115.62 1217.43 L1116.21 1217.43 L1116.8 1217.43 L1117.38 1217.43 L1117.97 1217.43 L1118.55 1217.43 L1119.14 1217.43 L1119.73 1217.43 L1120.31 1217.43 L1120.9 1217.43 L1121.49 1217.43 L1122.07 1217.43 L1122.66 1217.43 L1123.25 1217.43 L1123.83 1217.43 L1124.42 1217.43 L1125.01 1217.43 L1125.59 1217.43 L1126.18 1217.43 L1126.76 1217.43 L1127.35 1217.43 L1127.94 1217.43 L1128.52 1217.43 L1129.11 1217.43 L1129.7 1217.43 L1130.28 1217.43 L1130.87 1217.43 L1131.46 1217.43 L1132.04 1217.43 L1132.63 1217.43 L1133.21 1217.43 L1133.8 1217.43 L1134.39 1217.43 L1134.97 1217.43 L1135.56 1217.43 L1136.15 1217.43 L1136.73 1217.43 L1137.32 1217.43 L1137.91 1217.43 L1138.49 1217.43 L1139.08 1217.43 L1139.67 1217.43 L1140.25 1217.43 L1140.84 1217.43 L1141.42 1217.43 L1142.01 1217.43 L1142.6 1217.43 L1143.18 1217.43 L1143.77 1217.43 L1144.36 1217.43 L1144.94 1217.43 L1145.53 1217.43 L1146.12 1217.43 L1146.7 1217.43 L1147.29 1217.43 L1147.88 1217.43 L1148.46 1217.43 L1149.05 1217.43 L1149.63 1217.43 L1150.22 1217.43 L1150.81 1217.43 L1151.39 1217.43 L1151.98 1217.43 L1152.57 1217.43 L1153.15 1217.43 L1153.74 1217.43 L1154.33 1217.43 L1154.91 1217.43 L1155.5 1217.43 L1156.09 1217.43 L1156.67 1217.43 L1157.26 1217.43 L1157.84 1217.43 L1158.43 1217.43 L1159.02 1217.43 L1159.6 1217.43 L1160.19 1217.43 L1160.78 1217.43 L1161.36 1217.43 L1161.95 1217.43 L1162.54 1217.43 L1163.12 1217.43 L1163.71 1217.43 L1164.29 1217.43 L1164.88 1217.43 L1165.47 1217.43 L1166.05 1217.43 L1166.64 1217.43 L1167.23 1217.43 L1167.81 1217.43 L1168.4 1217.43 L1168.99 1217.43 L1169.57 1217.43 L1170.16 1217.43 L1170.75 1217.43 L1171.33 1217.43 L1171.92 1217.43 L1172.5 1217.43 L1173.09 1217.43 L1173.68 1217.43 L1174.26 1217.43 L1174.85 1217.43 L1175.44 1217.43 L1176.02 1217.43 L1176.61 1217.43 L1177.2 1217.43 L1177.78 1217.43 L1178.37 1217.43 L1178.96 1217.43 L1179.54 1217.43 L1180.13 1217.43 L1180.71 1217.43 L1181.3 1217.43 L1181.89 1217.43 L1182.47 1217.43 L1183.06 1217.43 L1183.65 1217.43 L1184.23 1217.43 L1184.82 1217.43 L1185.41 1217.43 L1185.99 1217.43 L1186.58 1217.43 L1187.16 1217.43 L1187.75 1217.43 L1188.34 1217.43 L1188.92 1217.43 L1189.51 1217.43 L1190.1 1217.43 L1190.68 1217.43 L1191.27 1217.43 L1191.86 1217.43 L1192.44 1217.43 L1193.03 1217.43 L1193.62 1217.43 L1194.2 1217.43 L1194.79 1217.43 L1195.37 1217.43 L1195.96 1217.43 L1196.55 1217.43 L1197.13 1217.43 L1197.72 1217.43 L1198.31 1217.43 L1198.89 1217.43 L1199.48 1217.43 L1200.07 1217.43 L1200.65 1217.43 L1201.24 1217.43 L1201.83 1217.43 L1202.41 1217.43 L1203 1217.43 L1203.58 1217.43 L1204.17 1217.43 L1204.76 1217.43 L1205.34 1217.43 L1205.93 1217.43 L1206.52 1217.43 L1207.1 1217.43 L1207.69 1217.43 L1208.28 1217.43 L1208.86 1217.43 L1209.45 1217.43 L1210.03 1217.43 L1210.62 1217.43 L1211.21 1217.43 L1211.79 1217.43 L1212.38 1217.43 L1212.97 1217.43 L1213.55 1217.43 L1214.14 1217.43 L1214.73 1217.43 L1215.31 1217.43 L1215.9 1217.43 L1216.49 1217.43 L1217.07 1217.43 L1217.66 1217.43 L1218.24 1217.43 L1218.83 1217.43 L1219.42 1217.43 L1220 1217.43 L1220.59 1217.43 L1221.18 1217.43 L1221.76 1217.43 L1222.35 1217.43 L1222.94 1217.43 L1223.52 1217.43 L1224.11 1217.43 L1224.7 1217.43 L1225.28 1217.43 L1225.87 1217.43 L1226.45 1217.43 L1227.04 1217.43 L1227.63 1217.43 L1228.21 1217.43 L1228.8 1217.43 L1229.39 1217.43 L1229.97 1217.43 L1230.56 1217.43 L1231.15 1217.43 L1231.73 1217.43 L1232.32 1217.43 L1232.91 1217.43 L1233.49 1217.43 L1234.08 1217.43 L1234.66 1217.43 L1235.25 1217.43 L1235.84 1217.43 L1236.42 1217.43 L1237.01 1217.43 L1237.6 1217.43 L1238.18 1217.43 L1238.77 1217.43 L1239.36 1217.43 L1239.94 1217.43 L1240.53 1217.43 L1241.11 1217.43 L1241.7 1217.43 L1242.29 1217.43 L1242.87 1217.43 L1243.46 1217.43 L1244.05 1217.43 L1244.63 1217.43 L1245.22 1217.43 L1245.81 1217.43 L1246.39 1217.43 L1246.98 1217.43 L1247.57 1217.43 L1248.15 1217.43 L1248.74 1217.43 L1249.32 1217.43 L1249.91 1217.43 L1250.5 1217.43 L1251.08 1217.43 L1251.67 1217.43 L1252.26 1217.43 L1252.84 1217.43 L1253.43 1217.43 L1254.02 1217.43 L1254.6 1217.43 L1255.19 1217.43 L1255.78 1217.43 L1256.36 1217.43 L1256.95 1217.43 L1257.53 1217.43 L1258.12 1217.43 L1258.71 1217.43 L1259.29 1217.43 L1259.88 1217.43 L1260.47 1217.43 L1261.05 1217.43 L1261.64 1217.43 L1262.23 1217.43 L1262.81 1217.43 L1263.4 1217.43 L1263.98 1217.43 L1264.57 1217.43 L1265.16 1217.43 L1265.74 1217.43 L1266.33 1217.43 L1266.92 1217.43 L1267.5 1217.43 L1268.09 1217.43 L1268.68 1217.43 L1269.26 1217.43 L1269.85 1217.43 L1270.44 1217.43 L1271.02 1217.43 L1271.61 1217.43 L1272.19 1217.43 L1272.78 1217.43 L1273.37 1217.43 L1273.95 1217.43 L1274.54 1217.43 L1275.13 1217.43 L1275.71 1217.43 L1276.3 1217.43 L1276.89 1217.43 L1277.47 1217.43 L1278.06 1217.43 L1278.65 1217.43 L1279.23 1217.43 L1279.82 1217.43 L1280.4 1217.43 L1280.99 1217.43 L1281.58 1217.43 L1282.16 1217.43 L1282.75 1217.43 L1283.34 1217.43 L1283.92 1217.43 L1284.51 1217.43 L1285.1 1217.43 L1285.68 1217.43 L1286.27 1217.43 L1286.86 1217.43 L1287.44 1217.43 L1288.03 1217.43 L1288.61 1217.43 L1289.2 1217.43 L1289.79 1217.43 L1290.37 1217.43 L1290.96 1217.43 L1291.55 1217.43 L1292.13 1217.43 L1292.72 1217.43 L1293.31 1217.43 L1293.89 1217.43 L1294.48 1217.43 L1295.06 1217.43 L1295.65 1217.43 L1296.24 1217.43 L1296.82 1217.43 L1297.41 1217.43 L1298 1217.43 L1298.58 1217.43 L1299.17 1217.43 L1299.76 1217.43 L1300.34 1217.43 L1300.93 1217.43 L1301.52 1217.43 L1302.1 1217.43 L1302.69 1217.43 L1303.27 1217.43 L1303.86 1217.43 L1304.45 1217.43 L1305.03 1217.43 L1305.62 1217.43 L1306.21 1217.43 L1306.79 1217.43 L1307.38 1217.43 L1307.97 1217.43 L1308.55 1217.43 L1309.14 1217.43 L1309.73 1217.43 L1310.31 1217.43 L1310.9 1217.43 L1311.48 1217.43 L1312.07 1217.43 L1312.66 1217.43 L1313.24 1217.43 L1313.83 1217.43 L1314.42 1217.43 L1315 1217.43 L1315.59 1217.43 L1316.18 1217.43 L1316.76 1217.43 L1317.35 1217.43 L1317.93 1217.43 L1318.52 1217.43 L1319.11 1217.43 L1319.69 1217.43 L1320.28 1217.43 L1320.87 1217.43 L1321.45 1217.43 L1322.04 1217.43 L1322.63 1217.43 L1323.21 1217.43 L1323.8 1217.43 L1324.39 1217.43 L1324.97 1217.43 L1325.56 1217.43 L1326.14 1217.43 L1326.73 1217.43 L1327.32 1217.43 L1327.9 1217.43 L1328.49 1217.43 L1329.08 1217.43 L1329.66 1217.43 L1330.25 1217.43 L1330.84 1217.43 L1331.42 1217.43 L1332.01 1217.43 L1332.6 1217.43 L1333.18 1217.43 L1333.77 1217.43 L1334.35 1217.43 L1334.94 1217.43 L1335.53 1217.43 L1336.11 1217.43 L1336.7 1217.43 L1337.29 1217.43 L1337.87 1217.43 L1338.46 1217.43 L1339.05 1217.43 L1339.63 1217.43 L1340.22 1217.43 L1340.8 1217.43 L1341.39 1217.43 L1341.98 1217.43 L1342.56 1217.43 L1343.15 1217.43 L1343.74 1217.43 L1344.32 1217.43 L1344.91 1217.43 L1345.5 1217.43 L1346.08 1217.43 L1346.67 1217.43 L1347.26 1217.43 L1347.84 1217.43 L1348.43 1217.43 L1349.01 1217.43 L1349.6 1217.43 L1350.19 1217.43 L1350.77 1217.43 L1351.36 1217.43 L1351.95 1217.43 L1352.53 1217.43 L1353.12 1217.43 L1353.71 1217.43 L1354.29 1217.43 L1354.88 1217.43 L1355.47 1217.43 L1356.05 1217.43 L1356.64 1217.43 L1357.22 1217.43 L1357.81 1217.43 L1358.4 1217.43 L1358.98 1217.43 L1359.57 1217.43 L1360.16 1217.43 L1360.74 1217.43 L1361.33 1217.43 L1361.92 1217.43 L1362.5 1217.43 L1363.09 1217.43 L1363.68 1217.43 L1364.26 1217.43 L1364.85 1217.43 L1365.43 1217.43 L1366.02 1217.43 L1366.61 1217.43 L1367.19 1217.43 L1367.78 1217.43 L1368.37 1217.43 L1368.95 1217.43 L1369.54 1217.43 L1370.13 1217.43 L1370.71 1217.43 L1371.3 1217.43 L1371.88 1217.43 L1372.47 1217.43 L1373.06 1217.43 L1373.64 1217.43 L1374.23 1217.43 L1374.82 1217.43 L1375.4 1217.43 L1375.99 1217.43 L1376.58 1217.43 L1377.16 1217.43 L1377.75 1217.43 L1378.34 1217.43 L1378.92 1217.43 L1379.51 1217.43 L1380.09 1217.43 L1380.68 1217.43 L1381.27 1217.43 L1381.85 1217.43 L1382.44 1217.43 L1383.03 1217.43 L1383.61 1217.43 L1384.2 1217.43 L1384.79 1217.43 L1385.37 1217.43 L1385.96 1217.43 L1386.55 1217.43 L1387.13 1217.43 L1387.72 1217.43 L1388.3 1217.43 L1388.89 1217.43 L1389.48 1217.43 L1390.06 1217.43 L1390.65 1217.43 L1391.24 1217.43 L1391.82 1217.43 L1392.41 1217.43 L1393 1217.43 L1393.58 1217.43 L1394.17 1217.43 L1394.75 1217.43 L1395.34 1217.43 L1395.93 1217.43 L1396.51 1217.43 L1397.1 1217.43 L1397.69 1217.43 L1398.27 1217.43 L1398.86 1217.43 L1399.45 1217.43 L1400.03 1217.43 L1400.62 1217.43 L1401.21 1217.43 L1401.79 1217.43 L1402.38 1217.43 L1402.96 1217.43 L1403.55 1217.43 L1404.14 1217.43 L1404.72 1217.43 L1405.31 1217.43 L1405.9 1217.43 L1406.48 1217.43 L1407.07 1217.43 L1407.66 1217.43 L1408.24 1217.43 L1408.83 1217.43 L1409.42 1217.43 L1410 1217.43 L1410.59 1217.43 L1411.17 1217.43 L1411.76 1217.43 L1412.35 1217.43 L1412.93 1217.43 L1413.52 1217.43 L1414.11 1217.43 L1414.69 1217.43 L1415.28 1217.43 L1415.87 1217.43 L1416.45 1217.43 L1417.04 1217.43 L1417.63 1217.43 L1418.21 1217.43 L1418.8 1217.43 L1419.38 1217.43 L1419.97 1217.43 L1420.56 1217.43 L1421.14 1217.43 L1421.73 1217.43 L1422.32 1217.43 L1422.9 1217.43 L1423.49 1217.43 L1424.08 1217.43 L1424.66 1217.43 L1425.25 1217.43 L1425.83 1217.43 L1426.42 1217.43 L1427.01 1217.43 L1427.59 1217.43 L1428.18 1217.43 L1428.77 1217.43 L1429.35 1217.43 L1429.94 1217.43 L1430.53 1217.43 L1431.11 1217.43 L1431.7 1217.43 L1432.29 1217.43 L1432.87 1217.43 L1433.46 1217.43 L1434.04 1217.43 L1434.63 1217.43 L1435.22 1217.43 L1435.8 1217.43 L1436.39 1217.43 L1436.98 1217.43 L1437.56 1217.43 L1438.15 1217.43 L1438.74 1217.43 L1439.32 1217.43 L1439.91 1217.43 L1440.5 1217.43 L1441.08 1217.43 L1441.67 1217.43 L1442.25 1217.43 L1442.84 1217.43 L1443.43 1217.43 L1444.01 1217.43 L1444.6 1217.43 L1445.19 1217.43 L1445.77 1217.43 L1446.36 1217.43 L1446.95 1217.43 L1447.53 1217.43 L1448.12 1217.43 L1448.7 1217.43 L1449.29 1217.43 L1449.88 1217.43 L1450.46 1217.43 L1451.05 1217.43 L1451.64 1217.43 L1452.22 1217.43 L1452.81 1217.43 L1453.4 1217.43 L1453.98 1217.43 L1454.57 1217.43 L1455.16 1217.43 L1455.74 1217.43 L1456.33 1217.43 L1456.91 1217.43 L1457.5 1217.43 L1458.09 1217.43 L1458.67 1217.43 L1459.26 1217.43 L1459.85 1217.43 L1460.43 1217.43 L1461.02 1217.43 L1461.61 1217.43 L1462.19 1217.43 L1462.78 1217.43 L1463.37 1217.43 L1463.95 1217.43 L1464.54 1217.43 L1465.12 1217.43 L1465.71 1217.43 L1466.3 1217.43 L1466.88 1217.43 L1467.47 1217.43 L1468.06 1217.43 L1468.64 1217.43 L1469.23 1217.43 L1469.82 1217.43 L1470.4 1217.43 L1470.99 1217.43 L1471.57 1217.43 L1472.16 1217.43 L1472.75 1217.43 L1473.33 1217.43 L1473.92 1217.43 L1474.51 1217.43 L1475.09 1217.43 L1475.68 1217.43 L1476.27 1217.43 L1476.85 1217.43 L1477.44 1217.43 L1478.03 1217.43 L1478.61 1217.43 L1479.2 1217.43 L1479.78 1217.43 L1480.37 1217.43 L1480.96 1217.43 L1481.54 1217.43 L1482.13 1217.43 L1482.72 1217.43 L1483.3 1217.43 L1483.89 1217.43 L1484.48 1217.43 L1485.06 1217.43 L1485.65 1217.43 L1486.24 1217.43 L1486.82 1217.43 L1487.41 1217.43 L1487.99 1217.43 L1488.58 1217.43 L1489.17 1217.43 L1489.75 1217.43 L1490.34 1217.43 L1490.93 1217.43 L1491.51 1217.43 L1492.1 1217.43 L1492.69 1217.43 L1493.27 1217.43 L1493.86 1217.43 L1494.45 1217.43 L1495.03 1217.43 L1495.62 1217.43 L1496.2 1217.43 L1496.79 1217.43 L1497.38 1217.43 L1497.96 1217.43 L1498.55 1217.43 L1499.14 1217.43 L1499.72 1217.43 L1500.31 1217.43 L1500.9 1217.43 L1501.48 1217.43 L1502.07 1217.43 L1502.65 1217.43 L1503.24 1217.43 L1503.83 1217.43 L1504.41 1217.43 L1505 1217.43 L1505.59 1217.43 L1506.17 1217.43 L1506.76 1217.43 L1507.35 1217.43 L1507.93 1217.43 L1508.52 1217.43 L1509.11 1217.43 L1509.69 1217.43 L1510.28 1217.43 L1510.86 1217.43 L1511.45 1217.43 L1512.04 1217.43 L1512.62 1217.43 L1513.21 1217.43 L1513.8 1217.43 L1514.38 1217.43 L1514.97 1217.43 L1515.56 1217.43 L1516.14 1217.43 L1516.73 1217.43 L1517.32 1217.43 L1517.9 1217.43 L1518.49 1217.43 L1519.07 1217.43 L1519.66 1217.43 L1520.25 1217.43 L1520.83 1217.43 L1521.42 1217.43 L1522.01 1217.43 L1522.59 1217.43 L1523.18 1217.43 L1523.77 1217.43 L1524.35 1217.43 L1524.94 1217.43 L1525.52 1217.43 L1526.11 1217.43 L1526.7 1217.43 L1527.28 1217.43 L1527.87 1217.43 L1528.46 1217.43 L1529.04 1217.43 L1529.63 1217.43 L1530.22 1217.43 L1530.8 1217.43 L1531.39 1217.43 L1531.98 1217.43 L1532.56 1217.43 L1533.15 1217.43 L1533.73 1217.43 L1534.32 1217.43 L1534.91 1217.43 L1535.49 1217.43 L1536.08 1217.43 L1536.67 1217.43 L1537.25 1217.43 L1537.84 1217.43 L1538.43 1217.43 L1539.01 1217.43 L1539.6 1217.43 L1540.19 1217.43 L1540.77 1217.43 L1541.36 1217.43 L1541.94 1217.43 L1542.53 1217.43 L1543.12 1217.43 L1543.7 1217.43 L1544.29 1217.43 L1544.88 1217.43 L1545.46 1217.43 L1546.05 1217.43 L1546.64 1217.43 L1547.22 1217.43 L1547.81 1217.43 L1548.4 1217.43 L1548.98 1217.43 L1549.57 1217.43 L1550.15 1217.43 L1550.74 1217.43 L1551.33 1217.43 L1551.91 1217.43 L1552.5 1217.43 L1553.09 1217.43 L1553.67 1217.43 L1554.26 1217.43 L1554.85 1217.43 L1555.43 1217.43 L1556.02 1217.43 L1556.6 1217.43 L1557.19 1217.43 L1557.78 1217.43 L1558.36 1217.43 L1558.95 1217.43 L1559.54 1217.43 L1560.12 1217.43 L1560.71 1217.43 L1561.3 1217.43 L1561.88 1217.43 L1562.47 1217.43 L1563.06 1217.43 L1563.64 1217.43 L1564.23 1217.43 L1564.81 1217.43 L1565.4 1217.43 L1565.99 1217.43 L1566.57 1217.43 L1567.16 1217.43 L1567.75 1217.43 L1568.33 1217.43 L1568.92 1217.43 L1569.51 1217.43 L1570.09 1217.43 L1570.68 1217.43 L1571.27 1217.43 L1571.85 1217.43 L1572.44 1217.43 L1573.02 1217.43 L1573.61 1217.43 L1574.2 1217.43 L1574.78 1217.43 L1575.37 1217.43 L1575.96 1217.43 L1576.54 1217.43 L1577.13 1217.43 L1577.72 1217.43 L1578.3 1217.43 L1578.89 1217.43 L1579.47 1217.43 L1580.06 1217.43 L1580.65 1217.43 L1581.23 1217.43 L1581.82 1217.43 L1582.41 1217.43 L1582.99 1217.43 L1583.58 1217.43 L1584.17 1217.43 L1584.75 1217.43 L1585.34 1217.43 L1585.93 1217.43 L1586.51 1217.43 L1587.1 1217.43 L1587.68 1217.43 L1588.27 1217.43 L1588.86 1217.43 L1589.44 1217.43 L1590.03 1217.43 L1590.62 1217.43 L1591.2 1217.43 L1591.79 1217.43 L1592.38 1217.43 L1592.96 1217.43 L1593.55 1217.43 L1594.14 1217.43 L1594.72 1217.43 L1595.31 1217.43 L1595.89 1217.43 L1596.48 1217.43 L1597.07 1217.43 L1597.65 1217.43 L1598.24 1217.43 L1598.83 1217.43 L1599.41 1217.43 L1600 1217.43 L1600.59 1217.43 L1601.17 1217.43 L1601.76 1217.43 L1602.34 1217.43 L1602.93 1217.43 L1603.52 1217.43 L1604.1 1217.43 L1604.69 1217.43 L1605.28 1217.43 L1605.86 1217.43 L1606.45 1217.43 L1607.04 1217.43 L1607.62 1217.43 L1608.21 1217.43 L1608.8 1217.43 L1609.38 1217.43 L1609.97 1217.43 L1610.55 1217.43 L1611.14 1217.43 L1611.73 1217.43 L1612.31 1217.43 L1612.9 1217.43 L1613.49 1217.43 L1614.07 1217.43 L1614.66 1217.43 L1615.25 1217.43 L1615.83 1217.43 L1616.42 1217.43 L1617.01 1217.43 L1617.59 1217.43 L1618.18 1217.43 L1618.76 1217.43 L1619.35 1217.43 L1619.94 1217.43 L1620.52 1217.43 L1621.11 1217.43 L1621.7 1217.43 L1622.28 1217.43 L1622.87 1217.43 L1623.46 1217.43 L1624.04 1217.43 L1624.63 1217.43 L1625.22 1217.43 L1625.8 1217.43 L1626.39 1217.43 L1626.97 1217.43 L1627.56 1217.43 L1628.15 1217.43 L1628.73 1217.43 L1629.32 1217.43 L1629.91 1217.43 L1630.49 1217.43 L1631.08 1217.43 L1631.67 1217.43 L1632.25 1217.43 L1632.84 1217.43 L1633.42 1217.43 L1634.01 1217.43 L1634.6 1217.43 L1635.18 1217.43 L1635.77 1217.43 L1636.36 1217.43 L1636.94 1217.43 L1637.53 1217.43 L1638.12 1217.43 L1638.7 1217.43 L1639.29 1217.43 L1639.88 1217.43 L1640.46 1217.43 L1641.05 1217.43 L1641.63 1217.43 L1642.22 1217.43 L1642.81 1217.43 L1643.39 1217.43 L1643.98 1217.43 L1644.57 1217.43 L1645.15 1217.43 L1645.74 1217.43 L1646.33 1217.43 L1646.91 1217.43 L1647.5 1217.43 L1648.09 1217.43 L1648.67 1217.43 L1649.26 1217.43 L1649.84 1217.43 L1650.43 1217.43 L1651.02 1217.43 L1651.6 1217.43 L1652.19 1217.43 L1652.78 1217.43 L1653.36 1217.43 L1653.95 1217.43 L1654.54 1217.43 L1655.12 1217.43 L1655.71 1217.43 L1656.29 1217.43 L1656.88 1217.43 L1657.47 1217.43 L1658.05 1217.43 L1658.64 1217.43 L1659.23 1217.43 L1659.81 1217.43 L1660.4 1217.43 L1660.99 1217.43 L1661.57 1217.43 L1662.16 1217.43 L1662.75 1217.43 L1663.33 1217.43 L1663.92 1217.43 L1664.5 1217.43 L1665.09 1217.43 L1665.68 1217.43 L1666.26 1217.43 L1666.85 1217.43 L1667.44 1217.43 L1668.02 1217.43 L1668.61 1217.43 L1669.2 1217.43 L1669.78 1217.43 L1670.37 1217.43 L1670.96 1217.43 L1671.54 1217.43 L1672.13 1217.43 L1672.71 1217.43 L1673.3 1217.43 L1673.89 1217.43 L1674.47 1217.43 L1675.06 1217.43 L1675.65 1217.43 L1676.23 1217.43 L1676.82 1217.43 L1677.41 1217.43 L1677.99 1217.43 L1678.58 1217.43 L1679.17 1217.43 L1679.75 1217.43 L1680.34 1217.43 L1680.92 1217.43 L1681.51 1217.43 L1682.1 1217.43 L1682.68 1217.43 L1683.27 1217.43 L1683.86 1217.43 L1684.44 1217.43 L1685.03 1217.43 L1685.62 1217.43 L1686.2 1217.43 L1686.79 1217.43 L1687.37 1217.43 L1687.96 1217.43 L1688.55 1217.43 L1689.13 1217.43 L1689.72 1217.43 L1690.31 1217.43 L1690.89 1217.43 L1691.48 1217.43 L1692.07 1217.43 L1692.65 1217.43 L1693.24 1217.43 L1693.83 1217.43 L1694.41 1217.43 L1695 1217.43 L1695.58 1217.43 L1696.17 1217.43 L1696.76 1217.43 L1697.34 1217.43 L1697.93 1217.43 L1698.52 1217.43 L1699.1 1217.43 L1699.69 1217.43 L1700.28 1217.43 L1700.86 1217.43 L1701.45 1217.43 L1702.04 1217.43 L1702.62 1217.43 L1703.21 1217.43 L1703.79 1217.43 L1704.38 1217.43 L1704.97 1217.43 L1705.55 1217.43 L1706.14 1217.43 L1706.73 1217.43 L1707.31 1217.43 L1707.9 1217.43 L1708.49 1217.43 L1709.07 1217.43 L1709.66 1217.43 L1710.24 1217.43 L1710.83 1217.43 L1711.42 1217.43 L1712 1217.43 L1712.59 1217.43 L1713.18 1217.43 L1713.76 1217.43 L1714.35 1217.43 L1714.94 1217.43 L1715.52 1217.43 L1716.11 1217.43 L1716.7 1217.43 L1717.28 1217.43 L1717.87 1217.43 L1718.45 1217.43 L1719.04 1217.43 L1719.63 1217.43 L1720.21 1217.43 L1720.8 1217.43 L1721.39 1217.43 L1721.97 1217.43 L1722.56 1217.43 L1723.15 1217.43 L1723.73 1217.43 L1724.32 1217.43 L1724.91 1217.43 L1725.49 1217.43 L1726.08 1217.43 L1726.66 1217.43 L1727.25 1217.43 L1727.84 1217.43 L1728.42 1217.43 L1729.01 1217.43 L1729.6 1217.43 L1730.18 1217.43 L1730.77 1217.43 L1731.36 1217.43 L1731.94 1217.43 L1732.53 1217.43 L1733.11 1217.43 L1733.7 1217.43 L1734.29 1217.43 L1734.87 1217.43 L1735.46 1217.43 L1736.05 1217.43 L1736.63 1217.43 L1737.22 1217.43 L1737.81 1217.43 L1738.39 1217.43 L1738.98 1217.43 L1739.57 1217.43 L1740.15 1217.43 L1740.74 1217.43 L1741.32 1217.43 L1741.91 1217.43 L1742.5 1217.43 L1743.08 1217.43 L1743.67 1217.43 L1744.26 1217.43 L1744.84 1217.43 L1745.43 1217.43 L1746.02 1217.43 L1746.6 1217.43 L1747.19 1217.43 L1747.78 1217.43 L1748.36 1217.43 L1748.95 1217.43 L1749.53 1217.43 L1750.12 1217.43 L1750.71 1217.43 L1751.29 1217.43 L1751.88 1217.43 L1752.47 1217.43 L1753.05 1217.43 L1753.64 1217.43 L1754.23 1217.43 L1754.81 1217.43 L1755.4 1217.43 L1755.99 1217.43 L1756.57 1217.43 L1757.16 1217.43 L1757.74 1217.43 L1758.33 1217.43 L1758.92 1217.43 L1759.5 1217.43 L1760.09 1217.43 L1760.68 1217.43 L1761.26 1217.43 L1761.85 1217.43 L1762.44 1217.43 L1763.02 1217.43 L1763.61 1217.43 L1764.19 1217.43 L1764.78 1217.43 L1765.37 1217.43 L1765.95 1217.43 L1766.54 1217.43 L1767.13 1217.43 L1767.71 1217.43 L1768.3 1217.43 L1768.89 1217.43 L1769.47 1217.43 L1770.06 1217.43 L1770.65 1217.43 L1771.23 1217.43 L1771.82 1217.43 L1772.4 1217.43 L1772.99 1217.43 L1773.58 1217.43 L1774.16 1217.43 L1774.75 1217.43 L1775.34 1217.43 L1775.92 1217.43 L1776.51 1217.43 L1777.1 1217.43 L1777.68 1217.43 L1778.27 1217.43 L1778.86 1217.43 L1779.44 1217.43 L1780.03 1217.43 L1780.61 1217.43 L1781.2 1217.43 L1781.79 1217.43 L1782.37 1217.43 L1782.96 1217.43 L1783.55 1217.43 L1784.13 1217.43 L1784.72 1217.43 L1785.31 1217.43 L1785.89 1217.43 L1786.48 1217.43 L1787.06 1217.43 L1787.65 1217.43 L1788.24 1217.43 L1788.82 1217.43 L1789.41 1217.43 L1790 1217.43 L1790.58 1217.43 L1791.17 1217.43 L1791.76 1217.43 L1792.34 1217.43 L1792.93 1217.43 L1793.52 1217.43 L1794.1 1217.43 L1794.69 1217.43 L1795.27 1217.43 L1795.86 1217.43 L1796.45 1217.43 L1797.03 1217.43 L1797.62 1217.43 L1798.21 1217.43 L1798.79 1217.43 L1799.38 1217.43 L1799.97 1217.43 L1800.55 1217.43 L1801.14 1217.43 L1801.73 1217.43 L1802.31 1217.43 L1802.9 1217.43 L1803.48 1217.43 L1804.07 1217.43 L1804.66 1217.43 L1805.24 1217.43 L1805.83 1217.43 L1806.42 1217.43 L1807 1217.43 L1807.59 1217.43 L1808.18 1217.43 L1808.76 1217.43 L1809.35 1217.43 L1809.94 1217.43 L1810.52 1217.43 L1811.11 1217.43 L1811.69 1217.43 L1812.28 1217.43 L1812.87 1217.43 L1813.45 1217.43 L1814.04 1217.43 L1814.63 1217.43 L1815.21 1217.43 L1815.8 1217.43 L1816.39 1217.43 L1816.97 1217.43 L1817.56 1217.43 L1818.14 1217.43 L1818.73 1217.43 L1819.32 1217.43 L1819.9 1217.43 L1820.49 1217.43 L1821.08 1217.43 L1821.66 1217.43 L1822.25 1217.43 L1822.84 1217.43 L1823.42 1217.43 L1824.01 1217.43 L1824.6 1217.43 L1825.18 1217.43 L1825.77 1217.43 L1826.35 1217.43 L1826.94 1217.43 L1827.53 1217.43 L1828.11 1217.43 L1828.7 1217.43 L1829.29 1217.43 L1829.87 1217.43 L1830.46 1217.43 L1831.05 1217.43 L1831.63 1217.43 L1832.22 1217.43 L1832.81 1217.43 L1833.39 1217.43 L1833.98 1217.43 L1834.56 1217.43 L1835.15 1217.43 L1835.74 1217.43 L1836.32 1217.43 L1836.91 1217.43 L1837.5 1217.43 L1838.08 1217.43 L1838.67 1217.43 L1839.26 1217.43 L1839.84 1217.43 L1840.43 1217.43 L1841.01 1217.43 L1841.6 1217.43 L1842.19 1217.43 L1842.77 1217.43 L1843.36 1217.43 L1843.95 1217.43 L1844.53 1217.43 L1845.12 1217.43 L1845.71 1217.43 L1846.29 1217.43 L1846.88 1217.43 L1847.47 1217.43 L1848.05 1217.43 L1848.64 1217.43 L1849.22 1217.43 L1849.81 1217.43 L1850.4 1217.43 L1850.98 1217.43 L1851.57 1217.43 L1852.16 1217.43 L1852.74 1217.43 L1853.33 1217.43 L1853.92 1217.43 L1854.5 1217.43 L1855.09 1217.43 L1855.68 1217.43 L1856.26 1217.43 L1856.85 1217.43 L1857.43 1217.43 L1858.02 1217.43 L1858.61 1217.43 L1859.19 1217.43 L1859.78 1217.43 L1860.37 1217.43 L1860.95 1217.43 L1861.54 1217.43 L1862.13 1217.43 L1862.71 1217.43 L1863.3 1217.43 L1863.88 1217.43 L1864.47 1217.43 L1865.06 1217.43 L1865.64 1217.43 L1866.23 1217.43 L1866.82 1217.43 L1867.4 1217.43 L1867.99 1217.43 L1868.58 1217.43 L1869.16 1217.43 L1869.75 1217.43 L1870.34 1217.43 L1870.92 1217.43 L1871.51 1217.43 L1872.09 1217.43 L1872.68 1217.43 L1873.27 1217.43 L1873.85 1217.43 L1874.44 1217.43 L1875.03 1217.43 L1875.61 1217.43 L1876.2 1217.43 L1876.79 1217.43 L1877.37 1217.43 L1877.96 1217.43 L1878.55 1217.43 L1879.13 1217.43 L1879.72 1217.43 L1880.3 1217.43 L1880.89 1217.43 L1881.48 1217.43 L1882.06 1217.43 L1882.65 1217.43 L1883.24 1217.43 L1883.82 1217.43 L1884.41 1217.43 L1885 1217.43 L1885.58 1217.43 L1886.17 1217.43 L1886.76 1217.43 L1887.34 1217.43 L1887.93 1217.43 L1888.51 1217.43 L1889.1 1217.43 L1889.69 1217.43 L1890.27 1217.43 L1890.86 1217.43 L1891.45 1217.43 L1892.03 1217.43 L1892.62 1217.43 L1893.21 1217.43 L1893.79 1217.43 L1894.38 1217.43 L1894.96 1217.43 L1895.55 1217.43 L1896.14 1217.43 L1896.72 1217.43 L1897.31 1217.43 L1897.9 1217.43 L1898.48 1217.43 L1899.07 1217.43 L1899.66 1217.43 L1900.24 1217.43 L1900.83 1217.43 L1901.42 1217.43 L1902 1217.43 L1902.59 1217.43 L1903.17 1217.43 L1903.76 1217.43 L1904.35 1217.43 L1904.93 1217.43 L1905.52 1217.43 L1906.11 1217.43 L1906.69 1217.43 L1907.28 1217.43 L1907.87 1217.43 L1908.45 1217.43 L1909.04 1217.43 L1909.63 1217.43 L1910.21 1217.43 L1910.8 1217.43 L1911.38 1217.43 L1911.97 1217.43 L1912.56 1217.43 L1913.14 1217.43 L1913.73 1217.43 L1914.32 1217.43 L1914.9 1217.43 L1915.49 1217.43 L1916.08 1217.43 L1916.66 1217.43 L1917.25 1217.43 L1917.83 1217.43 L1918.42 1217.43 L1919.01 1217.43 L1919.59 1217.43 L1920.18 1217.43 L1920.77 1217.43 L1921.35 1217.43 L1921.94 1217.43 L1922.53 1217.43 L1923.11 1217.43 L1923.7 1217.43 L1924.29 1217.43 L1924.87 1217.43 L1925.46 1217.43 L1926.04 1217.43 L1926.63 1217.43 L1927.22 1217.43 L1927.8 1217.43 L1928.39 1217.43 L1928.98 1217.43 L1929.56 1217.43 L1930.15 1217.43 L1930.74 1217.43 L1931.32 1217.43 L1931.91 1217.43 L1932.5 1217.43 L1933.08 1217.43 L1933.67 1217.43 L1934.25 1217.43 L1934.84 1217.43 L1935.43 1217.43 L1936.01 1217.43 L1936.6 1217.43 L1937.19 1217.43 L1937.77 1217.43 L1938.36 1217.43 L1938.95 1217.43 L1939.53 1217.43 L1940.12 1217.43 L1940.71 1217.43 L1941.29 1217.43 L1941.88 1217.43 L1942.46 1217.43 L1943.05 1217.43 L1943.64 1217.43 L1944.22 1217.43 L1944.81 1217.43 L1945.4 1217.43 L1945.98 1217.43 L1946.57 1217.43 L1947.16 1217.43 L1947.74 1217.43 L1948.33 1217.43 L1948.91 1217.43 L1949.5 1217.43 L1950.09 1217.43 L1950.67 1217.43 L1951.26 1217.43 L1951.85 1217.43 L1952.43 1217.43 L1953.02 1217.43 L1953.61 1217.43 L1954.19 1217.43 L1954.78 1217.43 L1955.37 1217.43 L1955.95 1217.43 L1956.54 1217.43 L1957.12 1217.43 L1957.71 1217.43 L1958.3 1217.43 L1958.88 1217.43 L1959.47 1217.43 L1960.06 1217.43 L1960.64 1217.43 L1961.23 1217.43 L1961.82 1217.43 L1962.4 1217.43 L1962.99 1217.43 L1963.58 1217.43 L1964.16 1217.43 L1964.75 1217.43 L1965.33 1217.43 L1965.92 1217.43 L1966.51 1217.43 L1967.09 1217.43 L1967.68 1217.43 L1968.27 1217.43 L1968.85 1217.43 L1969.44 1217.43 L1970.03 1217.43 L1970.61 1217.43 L1971.2 1217.43 L1971.78 1217.43 L1972.37 1217.43 L1972.96 1217.43 L1973.54 1217.43 L1974.13 1217.43 L1974.72 1217.43 L1975.3 1217.43 L1975.89 1217.43 L1976.48 1217.43 L1977.06 1217.43 L1977.65 1217.43 L1978.24 1217.43 L1978.82 1217.43 L1979.41 1217.43 L1979.99 1217.43 L1980.58 1217.43 L1981.17 1217.43 L1981.75 1217.43 L1982.34 1217.43 L1982.93 1217.43 L1983.51 1217.43 L1984.1 1217.43 L1984.69 1217.43 L1985.27 1217.43 L1985.86 1217.43 L1986.45 1217.43 L1987.03 1217.43 L1987.62 1217.43 L1988.2 1217.43 L1988.79 1217.43 L1989.38 1217.43 L1989.96 1217.43 L1990.55 1217.43 L1991.14 1217.43 L1991.72 1217.43 L1992.31 1217.43 L1992.9 1217.43 L1993.48 1217.43 L1994.07 1217.43 L1994.65 1217.43 L1995.24 1217.43 L1995.83 1217.43 L1996.41 1217.43 L1997 1217.43 L1997.59 1217.43 L1998.17 1217.43 L1998.76 1217.43 L1999.35 1217.43 L1999.93 1217.43 L2000.52 1217.43 L2001.11 1217.43 L2001.69 1217.43 L2002.28 1217.43 L2002.86 1217.43 L2003.45 1217.43 L2004.04 1217.43 L2004.62 1217.43 L2005.21 1217.43 L2005.8 1217.43 L2006.38 1217.43 L2006.97 1217.43 L2007.56 1217.43 L2008.14 1217.43 L2008.73 1217.43 L2009.32 1217.43 L2009.9 1217.43 L2010.49 1217.43 L2011.07 1217.43 L2011.66 1217.43 L2012.25 1217.43 L2012.83 1217.43 L2013.42 1217.43 L2014.01 1217.43 L2014.59 1217.43 L2015.18 1217.43 L2015.77 1217.43 L2016.35 1217.43 L2016.94 1217.43 L2017.53 1217.43 L2018.11 1217.43 L2018.7 1217.43 L2019.28 1217.43 L2019.87 1217.43 L2020.46 1217.43 L2021.04 1217.43 L2021.63 1217.43 L2022.22 1217.43 L2022.8 1217.43 L2023.39 1217.43 L2023.98 1217.43 L2024.56 1217.43 L2025.15 1217.43 L2025.73 1217.43 L2026.32 1217.43 L2026.91 1217.43 L2027.49 1217.43 L2028.08 1217.43 L2028.67 1217.43 L2029.25 1217.43 L2029.84 1217.43 L2030.43 1217.43 L2031.01 1217.43 L2031.6 1217.43 L2032.19 1217.43 L2032.77 1217.43 L2033.36 1217.43 L2033.94 1217.43 L2034.53 1217.43 L2035.12 1217.43 L2035.7 1217.43 L2036.29 1217.43 L2036.88 1217.43 L2037.46 1217.43 L2038.05 1217.43 L2038.64 1217.43 L2039.22 1217.43 L2039.81 1217.43 L2040.4 1217.43 L2040.98 1217.43 L2041.57 1217.43 L2042.15 1217.43 L2042.74 1217.43 L2043.33 1217.43 L2043.91 1217.43 L2044.5 1217.43 L2045.09 1217.43 L2045.67 1217.43 L2046.26 1217.43 L2046.85 1217.43 L2047.43 1217.43 L2048.02 1217.43 L2048.6 1217.43 L2049.19 1217.43 L2049.78 1217.43 L2050.36 1217.43 L2050.95 1217.43 L2051.54 1217.43 L2052.12 1217.43 L2052.71 1217.43 L2053.3 1217.43 L2053.88 1217.43 L2054.47 1217.43 L2055.06 1217.43 L2055.64 1217.43 L2056.23 1217.43 L2056.81 1217.43 L2057.4 1217.43 L2057.99 1217.43 L2058.57 1217.43 L2059.16 1217.43 L2059.75 1217.43 L2060.33 1217.43 L2060.92 1217.43 L2061.51 1217.43 L2062.09 1217.43 L2062.68 1217.43 L2063.27 1217.43 L2063.85 1217.43 L2064.44 1217.43 L2065.02 1217.43 L2065.61 1217.43 L2066.2 1217.43 L2066.78 1217.43 L2067.37 1217.43 L2067.96 1217.43 L2068.54 1217.43 L2069.13 1217.43 L2069.72 1217.43 L2070.3 1217.43 L2070.89 1217.43 L2071.48 1217.43 L2072.06 1217.43 L2072.65 1217.43 L2073.23 1217.43 L2073.82 1217.43 L2074.41 1217.43 L2074.99 1217.43 L2075.58 1217.43 L2076.17 1217.43 L2076.75 1217.43 L2077.34 1217.43 L2077.93 1217.43 L2078.51 1217.43 L2079.1 1217.43 L2079.68 1217.43 L2080.27 1217.43 L2080.86 1217.43 L2081.44 1217.43 L2082.03 1217.43 L2082.62 1217.43 L2083.2 1217.43 L2083.79 1217.43 L2084.38 1217.43 L2084.96 1217.43 L2085.55 1217.43 L2086.14 1217.43 L2086.72 1217.43 L2087.31 1217.43 L2087.89 1217.43 L2088.48 1217.43 L2089.07 1217.43 L2089.65 1217.43 L2090.24 1217.43 L2090.83 1217.43 L2091.41 1217.43 L2092 1217.43 L2092.59 1217.43 L2093.17 1217.43 L2093.76 1217.43 L2094.35 1217.43 L2094.93 1217.43 L2095.52 1217.43 L2096.1 1217.43 L2096.69 1217.43 L2097.28 1217.43 L2097.86 1217.43 L2098.45 1217.43 L2099.04 1217.43 L2099.62 1217.43 L2100.21 1217.43 L2100.8 1217.43 L2101.38 1217.43 L2101.97 1217.43 L2102.55 1217.43 L2103.14 1217.43 L2103.73 1217.43 L2104.31 1217.43 L2104.9 1217.43 L2105.49 1217.43 L2106.07 1217.43 L2106.66 1217.43 L2107.25 1217.43 L2107.83 1217.43 L2108.42 1217.43 L2109.01 1217.43 L2109.59 1217.43 L2110.18 1217.43 L2110.76 1217.43 L2111.35 1217.43 L2111.94 1217.43 L2112.52 1217.43 L2113.11 1217.43 L2113.7 1217.43 L2114.28 1217.43 L2114.87 1217.43 L2115.46 1217.43 L2116.04 1217.43 L2116.63 1217.43 L2117.22 1217.43 L2117.8 1217.43 L2118.39 1217.43 L2118.97 1217.43 L2119.56 1217.43 L2120.15 1217.43 L2120.73 1217.43 L2121.32 1217.43 L2121.91 1217.43 L2122.49 1217.43 L2123.08 1217.43 L2123.67 1217.43 L2124.25 1217.43 L2124.84 1217.43 L2125.42 1217.43 L2126.01 1217.43 L2126.6 1217.43 L2127.18 1217.43 L2127.77 1217.43 L2128.36 1217.43 L2128.94 1217.43 L2129.53 1217.43 L2130.12 1217.43 L2130.7 1217.43 L2131.29 1217.43 L2131.88 1217.43 L2132.46 1217.43 L2133.05 1217.43 L2133.63 1217.43 L2134.22 1217.43 L2134.81 1217.43 L2135.39 1217.43 L2135.98 1217.43 L2136.57 1217.43 L2137.15 1217.43 L2137.74 1217.43 L2138.33 1217.43 L2138.91 1217.43 L2139.5 1217.43 L2140.09 1217.43 L2140.67 1217.43 L2141.26 1217.43 L2141.84 1217.43 L2142.43 1217.43 L2143.02 1217.43 L2143.6 1217.43 L2144.19 1217.43 L2144.78 1217.43 L2145.36 1217.43 L2145.95 1217.43 L2146.54 1217.43 L2147.12 1217.43 L2147.71 1217.43 L2148.3 1217.43 L2148.88 1217.43 L2149.47 1217.43 L2150.05 1217.43 L2150.64 1217.43 L2151.23 1217.43 L2151.81 1217.43 L2152.4 1217.43 L2152.99 1217.43 L2153.57 1217.43 L2154.16 1217.43 L2154.75 1217.43 L2155.33 1217.43 L2155.92 1217.43 L2156.5 1217.43 L2157.09 1217.43 L2157.68 1217.43 L2158.26 1217.43 L2158.26 1216.73 L2157.68 1216.73 L2157.09 1216.73 L2156.5 1216.73 L2155.92 1216.73 L2155.33 1216.73 L2154.75 1216.73 L2154.16 1216.73 L2153.57 1216.73 L2152.99 1216.73 L2152.4 1216.73 L2151.81 1216.73 L2151.23 1216.73 L2150.64 1216.73 L2150.05 1216.73 L2149.47 1216.73 L2148.88 1216.73 L2148.3 1216.73 L2147.71 1216.73 L2147.12 1216.73 L2146.54 1216.73 L2145.95 1216.73 L2145.36 1216.73 L2144.78 1216.73 L2144.19 1216.73 L2143.6 1216.73 L2143.02 1216.73 L2142.43 1216.73 L2141.84 1216.73 L2141.26 1216.73 L2140.67 1216.73 L2140.09 1216.73 L2139.5 1216.73 L2138.91 1216.73 L2138.33 1216.73 L2137.74 1216.73 L2137.15 1216.73 L2136.57 1216.73 L2135.98 1216.73 L2135.39 1216.73 L2134.81 1216.73 L2134.22 1216.73 L2133.63 1216.73 L2133.05 1216.73 L2132.46 1216.73 L2131.88 1216.73 L2131.29 1216.73 L2130.7 1216.73 L2130.12 1216.73 L2129.53 1216.73 L2128.94 1216.73 L2128.36 1216.73 L2127.77 1216.73 L2127.18 1216.73 L2126.6 1216.73 L2126.01 1216.73 L2125.42 1216.73 L2124.84 1216.73 L2124.25 1216.73 L2123.67 1216.73 L2123.08 1216.73 L2122.49 1216.73 L2121.91 1216.73 L2121.32 1216.73 L2120.73 1216.73 L2120.15 1216.73 L2119.56 1216.73 L2118.97 1216.73 L2118.39 1216.73 L2117.8 1216.73 L2117.22 1216.73 L2116.63 1216.73 L2116.04 1216.73 L2115.46 1216.73 L2114.87 1216.73 L2114.28 1216.73 L2113.7 1216.73 L2113.11 1216.73 L2112.52 1216.73 L2111.94 1216.73 L2111.35 1216.73 L2110.76 1216.73 L2110.18 1216.73 L2109.59 1216.73 L2109.01 1216.73 L2108.42 1216.73 L2107.83 1216.73 L2107.25 1216.73 L2106.66 1216.73 L2106.07 1216.73 L2105.49 1216.73 L2104.9 1216.73 L2104.31 1216.73 L2103.73 1216.73 L2103.14 1216.73 L2102.55 1216.73 L2101.97 1216.73 L2101.38 1216.73 L2100.8 1216.73 L2100.21 1216.73 L2099.62 1216.73 L2099.04 1216.73 L2098.45 1216.73 L2097.86 1216.73 L2097.28 1216.73 L2096.69 1216.73 L2096.1 1216.73 L2095.52 1216.73 L2094.93 1216.73 L2094.35 1216.73 L2093.76 1216.73 L2093.17 1216.73 L2092.59 1216.73 L2092 1216.73 L2091.41 1216.73 L2090.83 1216.73 L2090.24 1216.73 L2089.65 1216.73 L2089.07 1216.73 L2088.48 1216.73 L2087.89 1216.73 L2087.31 1216.73 L2086.72 1216.73 L2086.14 1216.73 L2085.55 1216.73 L2084.96 1216.73 L2084.38 1216.73 L2083.79 1216.73 L2083.2 1216.73 L2082.62 1216.73 L2082.03 1216.73 L2081.44 1216.73 L2080.86 1216.73 L2080.27 1216.73 L2079.68 1216.73 L2079.1 1216.73 L2078.51 1216.73 L2077.93 1216.73 L2077.34 1216.73 L2076.75 1216.73 L2076.17 1216.73 L2075.58 1216.73 L2074.99 1216.73 L2074.41 1216.73 L2073.82 1216.73 L2073.23 1216.73 L2072.65 1216.73 L2072.06 1216.73 L2071.48 1216.73 L2070.89 1216.73 L2070.3 1216.73 L2069.72 1216.73 L2069.13 1216.73 L2068.54 1216.73 L2067.96 1216.73 L2067.37 1216.73 L2066.78 1216.73 L2066.2 1216.73 L2065.61 1216.73 L2065.02 1216.73 L2064.44 1216.73 L2063.85 1216.73 L2063.27 1216.73 L2062.68 1216.73 L2062.09 1216.73 L2061.51 1216.73 L2060.92 1216.73 L2060.33 1216.73 L2059.75 1216.73 L2059.16 1216.73 L2058.57 1216.73 L2057.99 1216.73 L2057.4 1216.73 L2056.81 1216.73 L2056.23 1216.73 L2055.64 1216.73 L2055.06 1216.73 L2054.47 1216.73 L2053.88 1216.73 L2053.3 1216.73 L2052.71 1216.73 L2052.12 1216.73 L2051.54 1216.73 L2050.95 1216.73 L2050.36 1216.73 L2049.78 1216.73 L2049.19 1216.73 L2048.6 1216.73 L2048.02 1216.73 L2047.43 1216.73 L2046.85 1216.73 L2046.26 1216.73 L2045.67 1216.73 L2045.09 1216.73 L2044.5 1216.73 L2043.91 1216.73 L2043.33 1216.73 L2042.74 1216.73 L2042.15 1216.73 L2041.57 1216.73 L2040.98 1216.73 L2040.4 1216.73 L2039.81 1216.73 L2039.22 1216.73 L2038.64 1216.73 L2038.05 1216.73 L2037.46 1216.73 L2036.88 1216.73 L2036.29 1216.73 L2035.7 1216.73 L2035.12 1216.73 L2034.53 1216.73 L2033.94 1216.73 L2033.36 1216.73 L2032.77 1216.73 L2032.19 1216.73 L2031.6 1216.73 L2031.01 1216.73 L2030.43 1216.73 L2029.84 1216.73 L2029.25 1216.73 L2028.67 1216.73 L2028.08 1216.73 L2027.49 1216.73 L2026.91 1216.73 L2026.32 1216.73 L2025.73 1216.73 L2025.15 1216.73 L2024.56 1216.73 L2023.98 1216.73 L2023.39 1216.73 L2022.8 1216.73 L2022.22 1216.73 L2021.63 1216.73 L2021.04 1216.73 L2020.46 1216.73 L2019.87 1216.73 L2019.28 1216.73 L2018.7 1216.73 L2018.11 1216.73 L2017.53 1216.73 L2016.94 1216.73 L2016.35 1216.73 L2015.77 1216.73 L2015.18 1216.73 L2014.59 1216.73 L2014.01 1216.73 L2013.42 1216.73 L2012.83 1216.73 L2012.25 1216.73 L2011.66 1216.73 L2011.07 1216.73 L2010.49 1216.73 L2009.9 1216.73 L2009.32 1216.73 L2008.73 1216.73 L2008.14 1216.73 L2007.56 1216.73 L2006.97 1216.73 L2006.38 1216.73 L2005.8 1216.73 L2005.21 1216.73 L2004.62 1216.73 L2004.04 1216.73 L2003.45 1216.73 L2002.86 1216.73 L2002.28 1216.73 L2001.69 1216.73 L2001.11 1216.73 L2000.52 1216.73 L1999.93 1216.73 L1999.35 1216.73 L1998.76 1216.73 L1998.17 1216.73 L1997.59 1216.73 L1997 1216.73 L1996.41 1216.73 L1995.83 1216.73 L1995.24 1216.73 L1994.65 1216.73 L1994.07 1216.73 L1993.48 1216.73 L1992.9 1216.73 L1992.31 1216.73 L1991.72 1216.73 L1991.14 1216.73 L1990.55 1216.73 L1989.96 1216.73 L1989.38 1216.73 L1988.79 1216.73 L1988.2 1216.73 L1987.62 1216.73 L1987.03 1216.73 L1986.45 1216.73 L1985.86 1216.73 L1985.27 1216.73 L1984.69 1216.73 L1984.1 1216.73 L1983.51 1216.73 L1982.93 1216.73 L1982.34 1216.73 L1981.75 1216.73 L1981.17 1216.73 L1980.58 1216.73 L1979.99 1216.73 L1979.41 1216.73 L1978.82 1216.73 L1978.24 1216.73 L1977.65 1216.73 L1977.06 1216.73 L1976.48 1216.73 L1975.89 1216.73 L1975.3 1216.73 L1974.72 1216.73 L1974.13 1216.73 L1973.54 1216.73 L1972.96 1216.73 L1972.37 1216.73 L1971.78 1216.73 L1971.2 1216.73 L1970.61 1216.73 L1970.03 1216.73 L1969.44 1216.73 L1968.85 1216.73 L1968.27 1216.73 L1967.68 1216.73 L1967.09 1216.73 L1966.51 1216.73 L1965.92 1216.73 L1965.33 1216.73 L1964.75 1216.73 L1964.16 1216.73 L1963.58 1216.73 L1962.99 1216.73 L1962.4 1216.73 L1961.82 1216.73 L1961.23 1216.73 L1960.64 1216.73 L1960.06 1216.73 L1959.47 1216.73 L1958.88 1216.73 L1958.3 1216.73 L1957.71 1216.73 L1957.12 1216.73 L1956.54 1216.73 L1955.95 1216.73 L1955.37 1216.73 L1954.78 1216.73 L1954.19 1216.73 L1953.61 1216.73 L1953.02 1216.73 L1952.43 1216.73 L1951.85 1216.73 L1951.26 1216.73 L1950.67 1216.73 L1950.09 1216.73 L1949.5 1216.73 L1948.91 1216.73 L1948.33 1216.73 L1947.74 1216.73 L1947.16 1216.73 L1946.57 1216.73 L1945.98 1216.73 L1945.4 1216.73 L1944.81 1216.73 L1944.22 1216.73 L1943.64 1216.73 L1943.05 1216.73 L1942.46 1216.73 L1941.88 1216.73 L1941.29 1216.73 L1940.71 1216.73 L1940.12 1216.73 L1939.53 1216.73 L1938.95 1216.73 L1938.36 1216.73 L1937.77 1216.73 L1937.19 1216.73 L1936.6 1216.73 L1936.01 1216.73 L1935.43 1216.73 L1934.84 1216.73 L1934.25 1216.73 L1933.67 1216.73 L1933.08 1216.73 L1932.5 1216.73 L1931.91 1216.73 L1931.32 1216.73 L1930.74 1216.73 L1930.15 1216.73 L1929.56 1216.73 L1928.98 1216.73 L1928.39 1216.73 L1927.8 1216.73 L1927.22 1216.73 L1926.63 1216.73 L1926.04 1216.73 L1925.46 1216.73 L1924.87 1216.73 L1924.29 1216.73 L1923.7 1216.73 L1923.11 1216.73 L1922.53 1216.73 L1921.94 1216.73 L1921.35 1216.73 L1920.77 1216.73 L1920.18 1216.73 L1919.59 1216.73 L1919.01 1216.73 L1918.42 1216.73 L1917.83 1216.73 L1917.25 1216.73 L1916.66 1216.73 L1916.08 1216.73 L1915.49 1216.73 L1914.9 1216.73 L1914.32 1216.73 L1913.73 1216.73 L1913.14 1216.73 L1912.56 1216.73 L1911.97 1216.73 L1911.38 1216.73 L1910.8 1216.73 L1910.21 1216.73 L1909.63 1216.73 L1909.04 1216.73 L1908.45 1216.73 L1907.87 1216.73 L1907.28 1216.73 L1906.69 1216.73 L1906.11 1216.73 L1905.52 1216.73 L1904.93 1216.73 L1904.35 1216.73 L1903.76 1216.73 L1903.17 1216.73 L1902.59 1216.73 L1902 1216.73 L1901.42 1216.73 L1900.83 1216.73 L1900.24 1216.73 L1899.66 1216.73 L1899.07 1216.73 L1898.48 1216.73 L1897.9 1216.73 L1897.31 1216.73 L1896.72 1216.73 L1896.14 1216.73 L1895.55 1216.73 L1894.96 1216.73 L1894.38 1216.73 L1893.79 1216.73 L1893.21 1216.73 L1892.62 1216.73 L1892.03 1216.73 L1891.45 1216.73 L1890.86 1216.73 L1890.27 1216.73 L1889.69 1216.73 L1889.1 1216.73 L1888.51 1216.73 L1887.93 1216.73 L1887.34 1216.73 L1886.76 1216.73 L1886.17 1216.73 L1885.58 1216.73 L1885 1216.73 L1884.41 1216.73 L1883.82 1216.73 L1883.24 1216.73 L1882.65 1216.73 L1882.06 1216.73 L1881.48 1216.73 L1880.89 1216.73 L1880.3 1216.73 L1879.72 1216.73 L1879.13 1216.73 L1878.55 1216.73 L1877.96 1216.73 L1877.37 1216.73 L1876.79 1216.73 L1876.2 1216.73 L1875.61 1216.73 L1875.03 1216.73 L1874.44 1216.73 L1873.85 1216.73 L1873.27 1216.73 L1872.68 1216.73 L1872.09 1216.73 L1871.51 1216.73 L1870.92 1216.73 L1870.34 1216.73 L1869.75 1216.73 L1869.16 1216.73 L1868.58 1216.73 L1867.99 1216.73 L1867.4 1216.73 L1866.82 1216.73 L1866.23 1216.73 L1865.64 1216.73 L1865.06 1216.73 L1864.47 1216.73 L1863.88 1216.73 L1863.3 1216.73 L1862.71 1216.73 L1862.13 1216.73 L1861.54 1216.73 L1860.95 1216.73 L1860.37 1216.73 L1859.78 1216.73 L1859.19 1216.73 L1858.61 1216.73 L1858.02 1216.73 L1857.43 1216.73 L1856.85 1216.73 L1856.26 1216.73 L1855.68 1216.73 L1855.09 1216.73 L1854.5 1216.73 L1853.92 1216.73 L1853.33 1216.73 L1852.74 1216.73 L1852.16 1216.73 L1851.57 1216.73 L1850.98 1216.73 L1850.4 1216.73 L1849.81 1216.73 L1849.22 1216.73 L1848.64 1216.73 L1848.05 1216.73 L1847.47 1216.73 L1846.88 1216.73 L1846.29 1216.73 L1845.71 1216.73 L1845.12 1216.73 L1844.53 1216.73 L1843.95 1216.73 L1843.36 1216.73 L1842.77 1216.73 L1842.19 1216.73 L1841.6 1216.73 L1841.01 1216.73 L1840.43 1216.73 L1839.84 1216.73 L1839.26 1216.73 L1838.67 1216.73 L1838.08 1216.73 L1837.5 1216.73 L1836.91 1216.73 L1836.32 1216.73 L1835.74 1216.73 L1835.15 1216.73 L1834.56 1216.73 L1833.98 1216.73 L1833.39 1216.73 L1832.81 1216.73 L1832.22 1216.73 L1831.63 1216.73 L1831.05 1216.73 L1830.46 1216.73 L1829.87 1216.73 L1829.29 1216.73 L1828.7 1216.73 L1828.11 1216.73 L1827.53 1216.73 L1826.94 1216.73 L1826.35 1216.73 L1825.77 1216.73 L1825.18 1216.73 L1824.6 1216.73 L1824.01 1216.73 L1823.42 1216.73 L1822.84 1216.73 L1822.25 1216.73 L1821.66 1216.73 L1821.08 1216.73 L1820.49 1216.73 L1819.9 1216.73 L1819.32 1216.73 L1818.73 1216.73 L1818.14 1216.73 L1817.56 1216.73 L1816.97 1216.73 L1816.39 1216.73 L1815.8 1216.73 L1815.21 1216.73 L1814.63 1216.73 L1814.04 1216.73 L1813.45 1216.73 L1812.87 1216.73 L1812.28 1216.73 L1811.69 1216.73 L1811.11 1216.73 L1810.52 1216.73 L1809.94 1216.73 L1809.35 1216.73 L1808.76 1216.73 L1808.18 1216.73 L1807.59 1216.73 L1807 1216.73 L1806.42 1216.73 L1805.83 1216.73 L1805.24 1216.73 L1804.66 1216.73 L1804.07 1216.73 L1803.48 1216.73 L1802.9 1216.73 L1802.31 1216.73 L1801.73 1216.73 L1801.14 1216.73 L1800.55 1216.73 L1799.97 1216.73 L1799.38 1216.73 L1798.79 1216.73 L1798.21 1216.73 L1797.62 1216.73 L1797.03 1216.73 L1796.45 1216.73 L1795.86 1216.73 L1795.27 1216.73 L1794.69 1216.73 L1794.1 1216.73 L1793.52 1216.73 L1792.93 1216.73 L1792.34 1216.73 L1791.76 1216.73 L1791.17 1216.73 L1790.58 1216.73 L1790 1216.73 L1789.41 1216.73 L1788.82 1216.73 L1788.24 1216.73 L1787.65 1216.73 L1787.06 1216.73 L1786.48 1216.73 L1785.89 1216.73 L1785.31 1216.73 L1784.72 1216.73 L1784.13 1216.73 L1783.55 1216.73 L1782.96 1216.73 L1782.37 1216.73 L1781.79 1216.73 L1781.2 1216.73 L1780.61 1216.73 L1780.03 1216.73 L1779.44 1216.73 L1778.86 1216.73 L1778.27 1216.73 L1777.68 1216.73 L1777.1 1216.73 L1776.51 1216.73 L1775.92 1216.73 L1775.34 1216.73 L1774.75 1216.73 L1774.16 1216.73 L1773.58 1216.73 L1772.99 1216.73 L1772.4 1216.73 L1771.82 1216.73 L1771.23 1216.73 L1770.65 1216.73 L1770.06 1216.73 L1769.47 1216.73 L1768.89 1216.73 L1768.3 1216.73 L1767.71 1216.73 L1767.13 1216.73 L1766.54 1216.73 L1765.95 1216.73 L1765.37 1216.73 L1764.78 1216.73 L1764.19 1216.73 L1763.61 1216.73 L1763.02 1216.73 L1762.44 1216.73 L1761.85 1216.73 L1761.26 1216.73 L1760.68 1216.73 L1760.09 1216.73 L1759.5 1216.73 L1758.92 1216.73 L1758.33 1216.73 L1757.74 1216.73 L1757.16 1216.73 L1756.57 1216.73 L1755.99 1216.73 L1755.4 1216.73 L1754.81 1216.73 L1754.23 1216.73 L1753.64 1216.73 L1753.05 1216.73 L1752.47 1216.73 L1751.88 1216.73 L1751.29 1216.73 L1750.71 1216.73 L1750.12 1216.73 L1749.53 1216.73 L1748.95 1216.73 L1748.36 1216.73 L1747.78 1216.73 L1747.19 1216.73 L1746.6 1216.73 L1746.02 1216.73 L1745.43 1216.73 L1744.84 1216.73 L1744.26 1216.73 L1743.67 1216.73 L1743.08 1216.73 L1742.5 1216.73 L1741.91 1216.73 L1741.32 1216.73 L1740.74 1216.73 L1740.15 1216.73 L1739.57 1216.73 L1738.98 1216.73 L1738.39 1216.73 L1737.81 1216.73 L1737.22 1216.73 L1736.63 1216.73 L1736.05 1216.73 L1735.46 1216.73 L1734.87 1216.73 L1734.29 1216.73 L1733.7 1216.73 L1733.11 1216.73 L1732.53 1216.73 L1731.94 1216.73 L1731.36 1216.73 L1730.77 1216.73 L1730.18 1216.73 L1729.6 1216.73 L1729.01 1216.73 L1728.42 1216.73 L1727.84 1216.73 L1727.25 1216.73 L1726.66 1216.73 L1726.08 1216.73 L1725.49 1216.73 L1724.91 1216.73 L1724.32 1216.73 L1723.73 1216.73 L1723.15 1216.73 L1722.56 1216.73 L1721.97 1216.73 L1721.39 1216.73 L1720.8 1216.73 L1720.21 1216.73 L1719.63 1216.73 L1719.04 1216.73 L1718.45 1216.73 L1717.87 1216.73 L1717.28 1216.73 L1716.7 1216.73 L1716.11 1216.73 L1715.52 1216.73 L1714.94 1216.73 L1714.35 1216.73 L1713.76 1216.73 L1713.18 1216.73 L1712.59 1216.73 L1712 1216.73 L1711.42 1216.73 L1710.83 1216.73 L1710.24 1216.73 L1709.66 1216.73 L1709.07 1216.73 L1708.49 1216.73 L1707.9 1216.73 L1707.31 1216.73 L1706.73 1216.73 L1706.14 1216.73 L1705.55 1216.73 L1704.97 1216.73 L1704.38 1216.73 L1703.79 1216.73 L1703.21 1216.73 L1702.62 1216.73 L1702.04 1216.73 L1701.45 1216.73 L1700.86 1216.73 L1700.28 1216.73 L1699.69 1216.73 L1699.1 1216.73 L1698.52 1216.73 L1697.93 1216.73 L1697.34 1216.73 L1696.76 1216.73 L1696.17 1216.73 L1695.58 1216.73 L1695 1216.73 L1694.41 1216.73 L1693.83 1216.73 L1693.24 1216.73 L1692.65 1216.73 L1692.07 1216.73 L1691.48 1216.73 L1690.89 1216.73 L1690.31 1216.73 L1689.72 1216.73 L1689.13 1216.73 L1688.55 1216.73 L1687.96 1216.73 L1687.37 1216.73 L1686.79 1216.73 L1686.2 1216.73 L1685.62 1216.73 L1685.03 1216.73 L1684.44 1216.73 L1683.86 1216.73 L1683.27 1216.73 L1682.68 1216.73 L1682.1 1216.73 L1681.51 1216.73 L1680.92 1216.73 L1680.34 1216.73 L1679.75 1216.73 L1679.17 1216.73 L1678.58 1216.73 L1677.99 1216.73 L1677.41 1216.73 L1676.82 1216.73 L1676.23 1216.73 L1675.65 1216.73 L1675.06 1216.73 L1674.47 1216.73 L1673.89 1216.73 L1673.3 1216.73 L1672.71 1216.73 L1672.13 1216.73 L1671.54 1216.73 L1670.96 1216.73 L1670.37 1216.73 L1669.78 1216.73 L1669.2 1216.73 L1668.61 1216.73 L1668.02 1216.73 L1667.44 1216.73 L1666.85 1216.73 L1666.26 1216.73 L1665.68 1216.73 L1665.09 1216.73 L1664.5 1216.73 L1663.92 1216.73 L1663.33 1216.73 L1662.75 1216.73 L1662.16 1216.73 L1661.57 1216.73 L1660.99 1216.73 L1660.4 1216.73 L1659.81 1216.73 L1659.23 1216.73 L1658.64 1216.73 L1658.05 1216.73 L1657.47 1216.73 L1656.88 1216.73 L1656.29 1216.73 L1655.71 1216.73 L1655.12 1216.73 L1654.54 1216.73 L1653.95 1216.73 L1653.36 1216.73 L1652.78 1216.73 L1652.19 1216.73 L1651.6 1216.73 L1651.02 1216.73 L1650.43 1216.73 L1649.84 1216.73 L1649.26 1216.73 L1648.67 1216.73 L1648.09 1216.73 L1647.5 1216.73 L1646.91 1216.73 L1646.33 1216.73 L1645.74 1216.73 L1645.15 1216.73 L1644.57 1216.73 L1643.98 1216.73 L1643.39 1216.73 L1642.81 1216.73 L1642.22 1216.73 L1641.63 1216.73 L1641.05 1216.73 L1640.46 1216.73 L1639.88 1216.73 L1639.29 1216.73 L1638.7 1216.73 L1638.12 1216.73 L1637.53 1216.73 L1636.94 1216.73 L1636.36 1216.73 L1635.77 1216.73 L1635.18 1216.73 L1634.6 1216.73 L1634.01 1216.73 L1633.42 1216.73 L1632.84 1216.73 L1632.25 1216.73 L1631.67 1216.73 L1631.08 1216.73 L1630.49 1216.73 L1629.91 1216.73 L1629.32 1216.73 L1628.73 1216.73 L1628.15 1216.73 L1627.56 1216.73 L1626.97 1216.73 L1626.39 1216.73 L1625.8 1216.73 L1625.22 1216.73 L1624.63 1216.73 L1624.04 1216.73 L1623.46 1216.73 L1622.87 1216.73 L1622.28 1216.73 L1621.7 1216.73 L1621.11 1216.73 L1620.52 1216.73 L1619.94 1216.73 L1619.35 1216.73 L1618.76 1216.73 L1618.18 1216.73 L1617.59 1216.73 L1617.01 1216.73 L1616.42 1216.73 L1615.83 1216.73 L1615.25 1216.73 L1614.66 1216.73 L1614.07 1216.73 L1613.49 1216.73 L1612.9 1216.73 L1612.31 1216.73 L1611.73 1216.73 L1611.14 1216.73 L1610.55 1216.73 L1609.97 1216.73 L1609.38 1216.73 L1608.8 1216.73 L1608.21 1216.73 L1607.62 1216.73 L1607.04 1216.73 L1606.45 1216.73 L1605.86 1216.73 L1605.28 1216.73 L1604.69 1216.73 L1604.1 1216.73 L1603.52 1216.73 L1602.93 1216.73 L1602.34 1216.73 L1601.76 1216.73 L1601.17 1216.73 L1600.59 1216.73 L1600 1216.73 L1599.41 1216.73 L1598.83 1216.73 L1598.24 1216.73 L1597.65 1216.73 L1597.07 1216.73 L1596.48 1216.73 L1595.89 1216.73 L1595.31 1216.73 L1594.72 1216.73 L1594.14 1216.73 L1593.55 1216.73 L1592.96 1216.73 L1592.38 1216.73 L1591.79 1216.73 L1591.2 1216.73 L1590.62 1216.73 L1590.03 1216.73 L1589.44 1216.73 L1588.86 1216.73 L1588.27 1216.73 L1587.68 1216.73 L1587.1 1216.73 L1586.51 1216.73 L1585.93 1216.73 L1585.34 1216.73 L1584.75 1216.73 L1584.17 1216.73 L1583.58 1216.73 L1582.99 1216.73 L1582.41 1216.73 L1581.82 1216.73 L1581.23 1216.73 L1580.65 1216.73 L1580.06 1216.73 L1579.47 1216.73 L1578.89 1216.73 L1578.3 1216.73 L1577.72 1216.73 L1577.13 1216.73 L1576.54 1216.73 L1575.96 1216.73 L1575.37 1216.73 L1574.78 1216.73 L1574.2 1216.73 L1573.61 1216.73 L1573.02 1216.73 L1572.44 1216.73 L1571.85 1216.73 L1571.27 1216.73 L1570.68 1216.73 L1570.09 1216.73 L1569.51 1216.73 L1568.92 1216.73 L1568.33 1216.73 L1567.75 1216.73 L1567.16 1216.73 L1566.57 1216.73 L1565.99 1216.73 L1565.4 1216.73 L1564.81 1216.73 L1564.23 1216.73 L1563.64 1216.73 L1563.06 1216.73 L1562.47 1216.73 L1561.88 1216.73 L1561.3 1216.73 L1560.71 1216.73 L1560.12 1216.73 L1559.54 1216.73 L1558.95 1216.73 L1558.36 1216.73 L1557.78 1216.73 L1557.19 1216.73 L1556.6 1216.73 L1556.02 1216.73 L1555.43 1216.73 L1554.85 1216.73 L1554.26 1216.73 L1553.67 1216.73 L1553.09 1216.73 L1552.5 1216.73 L1551.91 1216.73 L1551.33 1216.73 L1550.74 1216.73 L1550.15 1216.73 L1549.57 1216.73 L1548.98 1216.73 L1548.4 1216.73 L1547.81 1216.73 L1547.22 1216.73 L1546.64 1216.73 L1546.05 1216.73 L1545.46 1216.73 L1544.88 1216.73 L1544.29 1216.73 L1543.7 1216.73 L1543.12 1216.73 L1542.53 1216.73 L1541.94 1216.73 L1541.36 1216.73 L1540.77 1216.73 L1540.19 1216.73 L1539.6 1216.73 L1539.01 1216.73 L1538.43 1216.73 L1537.84 1216.73 L1537.25 1216.73 L1536.67 1216.73 L1536.08 1216.73 L1535.49 1216.73 L1534.91 1216.73 L1534.32 1216.73 L1533.73 1216.73 L1533.15 1216.73 L1532.56 1216.73 L1531.98 1216.73 L1531.39 1216.73 L1530.8 1216.73 L1530.22 1216.73 L1529.63 1216.73 L1529.04 1216.73 L1528.46 1216.73 L1527.87 1216.73 L1527.28 1216.73 L1526.7 1216.73 L1526.11 1216.73 L1525.52 1216.73 L1524.94 1216.73 L1524.35 1216.73 L1523.77 1216.73 L1523.18 1216.73 L1522.59 1216.73 L1522.01 1216.73 L1521.42 1216.73 L1520.83 1216.73 L1520.25 1216.73 L1519.66 1216.73 L1519.07 1216.73 L1518.49 1216.73 L1517.9 1216.73 L1517.32 1216.73 L1516.73 1216.73 L1516.14 1216.73 L1515.56 1216.73 L1514.97 1216.73 L1514.38 1216.73 L1513.8 1216.73 L1513.21 1216.73 L1512.62 1216.73 L1512.04 1216.73 L1511.45 1216.73 L1510.86 1216.73 L1510.28 1216.73 L1509.69 1216.73 L1509.11 1216.73 L1508.52 1216.73 L1507.93 1216.73 L1507.35 1216.73 L1506.76 1216.73 L1506.17 1216.73 L1505.59 1216.73 L1505 1216.73 L1504.41 1216.73 L1503.83 1216.73 L1503.24 1216.73 L1502.65 1216.73 L1502.07 1216.73 L1501.48 1216.73 L1500.9 1216.73 L1500.31 1216.73 L1499.72 1216.73 L1499.14 1216.73 L1498.55 1216.73 L1497.96 1216.73 L1497.38 1216.73 L1496.79 1216.73 L1496.2 1216.73 L1495.62 1216.73 L1495.03 1216.73 L1494.45 1216.73 L1493.86 1216.73 L1493.27 1216.73 L1492.69 1216.73 L1492.1 1216.73 L1491.51 1216.73 L1490.93 1216.73 L1490.34 1216.73 L1489.75 1216.73 L1489.17 1216.73 L1488.58 1216.73 L1487.99 1216.73 L1487.41 1216.73 L1486.82 1216.73 L1486.24 1216.73 L1485.65 1216.73 L1485.06 1216.73 L1484.48 1216.73 L1483.89 1216.73 L1483.3 1216.73 L1482.72 1216.73 L1482.13 1216.73 L1481.54 1216.73 L1480.96 1216.73 L1480.37 1216.73 L1479.78 1216.73 L1479.2 1216.73 L1478.61 1216.73 L1478.03 1216.73 L1477.44 1216.73 L1476.85 1216.73 L1476.27 1216.73 L1475.68 1216.73 L1475.09 1216.73 L1474.51 1216.73 L1473.92 1216.73 L1473.33 1216.73 L1472.75 1216.73 L1472.16 1216.73 L1471.57 1216.73 L1470.99 1216.73 L1470.4 1216.73 L1469.82 1216.73 L1469.23 1216.73 L1468.64 1216.73 L1468.06 1216.73 L1467.47 1216.73 L1466.88 1216.73 L1466.3 1216.73 L1465.71 1216.73 L1465.12 1216.73 L1464.54 1216.73 L1463.95 1216.73 L1463.37 1216.73 L1462.78 1216.73 L1462.19 1216.73 L1461.61 1216.73 L1461.02 1216.73 L1460.43 1216.73 L1459.85 1216.73 L1459.26 1216.73 L1458.67 1216.73 L1458.09 1216.73 L1457.5 1216.73 L1456.91 1216.73 L1456.33 1216.73 L1455.74 1216.73 L1455.16 1216.73 L1454.57 1216.73 L1453.98 1216.73 L1453.4 1216.73 L1452.81 1216.73 L1452.22 1216.73 L1451.64 1216.73 L1451.05 1216.73 L1450.46 1216.73 L1449.88 1216.73 L1449.29 1216.73 L1448.7 1216.73 L1448.12 1216.73 L1447.53 1216.73 L1446.95 1216.73 L1446.36 1216.73 L1445.77 1216.73 L1445.19 1216.73 L1444.6 1216.73 L1444.01 1216.73 L1443.43 1216.73 L1442.84 1216.73 L1442.25 1216.73 L1441.67 1216.73 L1441.08 1216.73 L1440.5 1216.73 L1439.91 1216.73 L1439.32 1216.73 L1438.74 1216.73 L1438.15 1216.73 L1437.56 1216.73 L1436.98 1216.73 L1436.39 1216.73 L1435.8 1216.73 L1435.22 1216.73 L1434.63 1216.73 L1434.04 1216.73 L1433.46 1216.73 L1432.87 1216.73 L1432.29 1216.73 L1431.7 1216.73 L1431.11 1216.73 L1430.53 1216.73 L1429.94 1216.73 L1429.35 1216.73 L1428.77 1216.73 L1428.18 1216.73 L1427.59 1216.73 L1427.01 1216.73 L1426.42 1216.73 L1425.83 1216.73 L1425.25 1216.73 L1424.66 1216.73 L1424.08 1216.73 L1423.49 1216.73 L1422.9 1216.73 L1422.32 1216.73 L1421.73 1216.73 L1421.14 1216.73 L1420.56 1216.73 L1419.97 1216.73 L1419.38 1216.73 L1418.8 1216.73 L1418.21 1216.73 L1417.63 1216.73 L1417.04 1216.73 L1416.45 1216.73 L1415.87 1216.73 L1415.28 1216.73 L1414.69 1216.73 L1414.11 1216.73 L1413.52 1216.73 L1412.93 1216.73 L1412.35 1216.73 L1411.76 1216.73 L1411.17 1216.73 L1410.59 1216.73 L1410 1216.73 L1409.42 1216.73 L1408.83 1216.73 L1408.24 1216.73 L1407.66 1216.73 L1407.07 1216.73 L1406.48 1216.73 L1405.9 1216.73 L1405.31 1216.73 L1404.72 1216.73 L1404.14 1216.73 L1403.55 1216.73 L1402.96 1216.73 L1402.38 1216.73 L1401.79 1216.73 L1401.21 1216.73 L1400.62 1216.73 L1400.03 1216.73 L1399.45 1216.73 L1398.86 1216.73 L1398.27 1216.73 L1397.69 1216.73 L1397.1 1216.73 L1396.51 1216.73 L1395.93 1216.73 L1395.34 1216.73 L1394.75 1216.73 L1394.17 1216.73 L1393.58 1216.73 L1393 1216.73 L1392.41 1216.73 L1391.82 1216.73 L1391.24 1216.73 L1390.65 1216.73 L1390.06 1216.73 L1389.48 1216.73 L1388.89 1216.73 L1388.3 1216.73 L1387.72 1216.73 L1387.13 1216.73 L1386.55 1216.73 L1385.96 1216.73 L1385.37 1216.73 L1384.79 1216.73 L1384.2 1216.73 L1383.61 1216.73 L1383.03 1216.73 L1382.44 1216.73 L1381.85 1216.73 L1381.27 1216.73 L1380.68 1216.73 L1380.09 1216.73 L1379.51 1216.73 L1378.92 1216.73 L1378.34 1216.73 L1377.75 1216.73 L1377.16 1216.73 L1376.58 1216.73 L1375.99 1216.73 L1375.4 1216.73 L1374.82 1216.73 L1374.23 1216.73 L1373.64 1216.73 L1373.06 1216.73 L1372.47 1216.73 L1371.88 1216.73 L1371.3 1216.73 L1370.71 1216.73 L1370.13 1216.73 L1369.54 1216.73 L1368.95 1216.73 L1368.37 1216.73 L1367.78 1216.73 L1367.19 1216.73 L1366.61 1216.73 L1366.02 1216.73 L1365.43 1216.73 L1364.85 1216.73 L1364.26 1216.73 L1363.68 1216.73 L1363.09 1216.73 L1362.5 1216.73 L1361.92 1216.73 L1361.33 1216.73 L1360.74 1216.73 L1360.16 1216.73 L1359.57 1216.73 L1358.98 1216.73 L1358.4 1216.73 L1357.81 1216.73 L1357.22 1216.73 L1356.64 1216.73 L1356.05 1216.73 L1355.47 1216.73 L1354.88 1216.73 L1354.29 1216.73 L1353.71 1216.73 L1353.12 1216.73 L1352.53 1216.73 L1351.95 1216.73 L1351.36 1216.73 L1350.77 1216.73 L1350.19 1216.73 L1349.6 1216.73 L1349.01 1216.73 L1348.43 1216.73 L1347.84 1216.73 L1347.26 1216.73 L1346.67 1216.73 L1346.08 1216.73 L1345.5 1216.73 L1344.91 1216.73 L1344.32 1216.73 L1343.74 1216.73 L1343.15 1216.73 L1342.56 1216.73 L1341.98 1216.73 L1341.39 1216.73 L1340.8 1216.73 L1340.22 1216.73 L1339.63 1216.73 L1339.05 1216.73 L1338.46 1216.73 L1337.87 1216.73 L1337.29 1216.73 L1336.7 1216.73 L1336.11 1216.73 L1335.53 1216.73 L1334.94 1216.73 L1334.35 1216.73 L1333.77 1216.73 L1333.18 1216.73 L1332.6 1216.73 L1332.01 1216.73 L1331.42 1216.73 L1330.84 1216.73 L1330.25 1216.73 L1329.66 1216.73 L1329.08 1216.73 L1328.49 1216.73 L1327.9 1216.73 L1327.32 1216.73 L1326.73 1216.73 L1326.14 1216.73 L1325.56 1216.73 L1324.97 1216.73 L1324.39 1216.73 L1323.8 1216.73 L1323.21 1216.73 L1322.63 1216.73 L1322.04 1216.73 L1321.45 1216.73 L1320.87 1216.73 L1320.28 1216.73 L1319.69 1216.73 L1319.11 1216.73 L1318.52 1216.73 L1317.93 1216.73 L1317.35 1216.73 L1316.76 1216.73 L1316.18 1216.73 L1315.59 1216.73 L1315 1216.73 L1314.42 1216.73 L1313.83 1216.73 L1313.24 1216.73 L1312.66 1216.73 L1312.07 1216.73 L1311.48 1216.73 L1310.9 1216.73 L1310.31 1216.73 L1309.73 1216.73 L1309.14 1216.73 L1308.55 1216.73 L1307.97 1216.73 L1307.38 1216.73 L1306.79 1216.73 L1306.21 1216.73 L1305.62 1216.73 L1305.03 1216.73 L1304.45 1216.73 L1303.86 1216.73 L1303.27 1216.73 L1302.69 1216.73 L1302.1 1216.73 L1301.52 1216.73 L1300.93 1216.73 L1300.34 1216.73 L1299.76 1216.73 L1299.17 1216.73 L1298.58 1216.73 L1298 1216.73 L1297.41 1216.73 L1296.82 1216.73 L1296.24 1216.73 L1295.65 1216.73 L1295.06 1216.73 L1294.48 1216.73 L1293.89 1216.73 L1293.31 1216.73 L1292.72 1216.73 L1292.13 1216.73 L1291.55 1216.73 L1290.96 1216.73 L1290.37 1216.73 L1289.79 1216.73 L1289.2 1216.73 L1288.61 1216.73 L1288.03 1216.73 L1287.44 1216.73 L1286.86 1216.73 L1286.27 1216.73 L1285.68 1216.73 L1285.1 1216.73 L1284.51 1216.73 L1283.92 1216.73 L1283.34 1216.73 L1282.75 1216.73 L1282.16 1216.73 L1281.58 1216.73 L1280.99 1216.73 L1280.4 1216.73 L1279.82 1216.73 L1279.23 1216.73 L1278.65 1216.73 L1278.06 1216.73 L1277.47 1216.73 L1276.89 1216.73 L1276.3 1216.73 L1275.71 1216.73 L1275.13 1216.73 L1274.54 1216.73 L1273.95 1216.73 L1273.37 1216.73 L1272.78 1216.73 L1272.19 1216.73 L1271.61 1216.73 L1271.02 1216.73 L1270.44 1216.73 L1269.85 1216.73 L1269.26 1216.73 L1268.68 1216.73 L1268.09 1216.73 L1267.5 1216.73 L1266.92 1216.73 L1266.33 1216.73 L1265.74 1216.73 L1265.16 1216.73 L1264.57 1216.73 L1263.98 1216.73 L1263.4 1216.73 L1262.81 1216.73 L1262.23 1216.73 L1261.64 1216.73 L1261.05 1216.73 L1260.47 1216.73 L1259.88 1216.73 L1259.29 1216.73 L1258.71 1216.73 L1258.12 1216.73 L1257.53 1216.73 L1256.95 1216.73 L1256.36 1216.73 L1255.78 1216.73 L1255.19 1216.73 L1254.6 1216.73 L1254.02 1216.73 L1253.43 1216.73 L1252.84 1216.73 L1252.26 1216.73 L1251.67 1216.73 L1251.08 1216.73 L1250.5 1216.73 L1249.91 1216.73 L1249.32 1216.73 L1248.74 1216.73 L1248.15 1216.73 L1247.57 1216.73 L1246.98 1216.73 L1246.39 1216.73 L1245.81 1216.73 L1245.22 1216.73 L1244.63 1216.73 L1244.05 1216.73 L1243.46 1216.73 L1242.87 1216.73 L1242.29 1216.73 L1241.7 1216.73 L1241.11 1216.73 L1240.53 1216.73 L1239.94 1216.73 L1239.36 1216.73 L1238.77 1216.73 L1238.18 1216.73 L1237.6 1216.73 L1237.01 1216.73 L1236.42 1216.73 L1235.84 1216.73 L1235.25 1216.73 L1234.66 1216.73 L1234.08 1216.73 L1233.49 1216.73 L1232.91 1216.73 L1232.32 1216.73 L1231.73 1216.73 L1231.15 1216.73 L1230.56 1216.73 L1229.97 1216.73 L1229.39 1216.73 L1228.8 1216.73 L1228.21 1216.73 L1227.63 1216.73 L1227.04 1216.73 L1226.45 1216.73 L1225.87 1216.73 L1225.28 1216.73 L1224.7 1216.73 L1224.11 1216.73 L1223.52 1216.73 L1222.94 1216.73 L1222.35 1216.73 L1221.76 1216.73 L1221.18 1216.73 L1220.59 1216.73 L1220 1216.73 L1219.42 1216.73 L1218.83 1216.73 L1218.24 1216.73 L1217.66 1216.73 L1217.07 1216.73 L1216.49 1216.73 L1215.9 1216.73 L1215.31 1216.73 L1214.73 1216.73 L1214.14 1216.73 L1213.55 1216.73 L1212.97 1216.73 L1212.38 1216.73 L1211.79 1216.73 L1211.21 1216.73 L1210.62 1216.73 L1210.03 1216.73 L1209.45 1216.73 L1208.86 1216.73 L1208.28 1216.73 L1207.69 1216.73 L1207.1 1216.73 L1206.52 1216.73 L1205.93 1216.73 L1205.34 1216.73 L1204.76 1216.73 L1204.17 1216.73 L1203.58 1216.73 L1203 1216.73 L1202.41 1216.73 L1201.83 1216.73 L1201.24 1216.73 L1200.65 1216.73 L1200.07 1216.73 L1199.48 1216.73 L1198.89 1216.73 L1198.31 1216.73 L1197.72 1216.73 L1197.13 1216.73 L1196.55 1216.73 L1195.96 1216.73 L1195.37 1216.73 L1194.79 1216.73 L1194.2 1216.73 L1193.62 1216.73 L1193.03 1216.73 L1192.44 1216.73 L1191.86 1216.73 L1191.27 1216.73 L1190.68 1216.73 L1190.1 1216.73 L1189.51 1216.73 L1188.92 1216.73 L1188.34 1216.73 L1187.75 1216.73 L1187.16 1216.73 L1186.58 1216.73 L1185.99 1216.73 L1185.41 1216.73 L1184.82 1216.73 L1184.23 1216.73 L1183.65 1216.73 L1183.06 1216.73 L1182.47 1216.73 L1181.89 1216.73 L1181.3 1216.73 L1180.71 1216.73 L1180.13 1216.73 L1179.54 1216.73 L1178.96 1216.73 L1178.37 1216.73 L1177.78 1216.73 L1177.2 1216.73 L1176.61 1216.73 L1176.02 1216.73 L1175.44 1216.73 L1174.85 1216.73 L1174.26 1216.73 L1173.68 1216.73 L1173.09 1216.73 L1172.5 1216.73 L1171.92 1216.73 L1171.33 1216.73 L1170.75 1216.73 L1170.16 1216.73 L1169.57 1216.73 L1168.99 1216.73 L1168.4 1216.73 L1167.81 1216.73 L1167.23 1216.73 L1166.64 1216.73 L1166.05 1216.73 L1165.47 1216.73 L1164.88 1216.73 L1164.29 1216.73 L1163.71 1216.73 L1163.12 1216.73 L1162.54 1216.73 L1161.95 1216.73 L1161.36 1216.73 L1160.78 1216.73 L1160.19 1216.73 L1159.6 1216.73 L1159.02 1216.73 L1158.43 1216.73 L1157.84 1216.73 L1157.26 1216.73 L1156.67 1216.73 L1156.09 1216.73 L1155.5 1216.73 L1154.91 1216.73 L1154.33 1216.73 L1153.74 1216.73 L1153.15 1216.73 L1152.57 1216.73 L1151.98 1216.73 L1151.39 1216.73 L1150.81 1216.73 L1150.22 1216.73 L1149.63 1216.73 L1149.05 1216.73 L1148.46 1216.73 L1147.88 1216.73 L1147.29 1216.73 L1146.7 1216.73 L1146.12 1216.73 L1145.53 1216.73 L1144.94 1216.73 L1144.36 1216.73 L1143.77 1216.73 L1143.18 1216.73 L1142.6 1216.73 L1142.01 1216.73 L1141.42 1216.73 L1140.84 1216.73 L1140.25 1216.73 L1139.67 1216.73 L1139.08 1216.73 L1138.49 1216.73 L1137.91 1216.73 L1137.32 1216.73 L1136.73 1216.73 L1136.15 1216.73 L1135.56 1216.73 L1134.97 1216.73 L1134.39 1216.73 L1133.8 1216.73 L1133.21 1216.73 L1132.63 1216.73 L1132.04 1216.73 L1131.46 1216.73 L1130.87 1216.73 L1130.28 1216.73 L1129.7 1216.73 L1129.11 1216.73 L1128.52 1216.73 L1127.94 1216.73 L1127.35 1216.73 L1126.76 1216.73 L1126.18 1216.73 L1125.59 1216.73 L1125.01 1216.73 L1124.42 1216.73 L1123.83 1216.73 L1123.25 1216.73 L1122.66 1216.73 L1122.07 1216.73 L1121.49 1216.73 L1120.9 1216.73 L1120.31 1216.73 L1119.73 1216.73 L1119.14 1216.73 L1118.55 1216.73 L1117.97 1216.73 L1117.38 1216.73 L1116.8 1216.73 L1116.21 1216.73 L1115.62 1216.73 L1115.04 1216.73 L1114.45 1216.73 L1113.86 1216.73 L1113.28 1216.73 L1112.69 1216.73 L1112.1 1216.73 L1111.52 1216.73 L1110.93 1216.73 L1110.34 1216.73 L1109.76 1216.73 L1109.17 1216.73 L1108.59 1216.73 L1108 1216.73 L1107.41 1216.73 L1106.83 1216.73 L1106.24 1216.73 L1105.65 1216.73 L1105.07 1216.73 L1104.48 1216.73 L1103.89 1216.73 L1103.31 1216.73 L1102.72 1216.73 L1102.14 1216.73 L1101.55 1216.73 L1100.96 1216.73 L1100.38 1216.73 L1099.79 1216.73 L1099.2 1216.73 L1098.62 1216.73 L1098.03 1216.73 L1097.44 1216.73 L1096.86 1216.73 L1096.27 1216.73 L1095.68 1216.73 L1095.1 1216.73 L1094.51 1216.73 L1093.93 1216.73 L1093.34 1216.73 L1092.75 1216.73 L1092.17 1216.73 L1091.58 1216.73 L1090.99 1216.73 L1090.41 1216.73 L1089.82 1216.73 L1089.23 1216.73 L1088.65 1216.73 L1088.06 1216.73 L1087.47 1216.73 L1086.89 1216.73 L1086.3 1216.73 L1085.72 1216.73 L1085.13 1216.73 L1084.54 1216.73 L1083.96 1216.73 L1083.37 1216.73 L1082.78 1216.73 L1082.2 1216.73 L1081.61 1216.73 L1081.02 1216.73 L1080.44 1216.73 L1079.85 1216.73 L1079.26 1216.73 L1078.68 1216.73 L1078.09 1216.73 L1077.51 1216.73 L1076.92 1216.73 L1076.33 1216.73 L1075.75 1216.73 L1075.16 1216.73 L1074.57 1216.73 L1073.99 1216.73 L1073.4 1216.73 L1072.81 1216.73 L1072.23 1216.73 L1071.64 1216.73 L1071.06 1216.73 L1070.47 1216.73 L1069.88 1216.73 L1069.3 1216.73 L1068.71 1216.73 L1068.12 1216.73 L1067.54 1216.73 L1066.95 1216.73 L1066.36 1216.73 L1065.78 1216.73 L1065.19 1216.73 L1064.6 1216.73 L1064.02 1216.73 L1063.43 1216.73 L1062.85 1216.73 L1062.26 1216.73 L1061.67 1216.73 L1061.09 1216.73 L1060.5 1216.73 L1059.91 1216.73 L1059.33 1216.73 L1058.74 1216.73 L1058.15 1216.73 L1057.57 1216.73 L1056.98 1216.73 L1056.39 1216.73 L1055.81 1216.73 L1055.22 1216.73 L1054.64 1216.73 L1054.05 1216.73 L1053.46 1216.73 L1052.88 1216.73 L1052.29 1216.73 L1051.7 1216.73 L1051.12 1216.73 L1050.53 1216.73 L1049.94 1216.73 L1049.36 1216.73 L1048.77 1216.73 L1048.19 1216.73 L1047.6 1216.73 L1047.01 1216.73 L1046.43 1216.73 L1045.84 1216.73 L1045.25 1216.73 L1044.67 1216.73 L1044.08 1216.73 L1043.49 1216.73 L1042.91 1216.73 L1042.32 1216.73 L1041.73 1216.73 L1041.15 1216.73 L1040.56 1216.73 L1039.98 1216.73 L1039.39 1216.73 L1038.8 1216.73 L1038.22 1216.73 L1037.63 1216.73 L1037.04 1216.73 L1036.46 1216.73 L1035.87 1216.73 L1035.28 1216.73 L1034.7 1216.73 L1034.11 1216.73 L1033.52 1216.73 L1032.94 1216.73 L1032.35 1216.73 L1031.77 1216.73 L1031.18 1216.73 L1030.59 1216.73 L1030.01 1216.73 L1029.42 1216.73 L1028.83 1216.73 L1028.25 1216.73 L1027.66 1216.73 L1027.07 1216.73 L1026.49 1216.73 L1025.9 1216.73 L1025.32 1216.73 L1024.73 1216.73 L1024.14 1216.73 L1023.56 1216.73 L1022.97 1216.73 L1022.38 1216.73 L1021.8 1216.73 L1021.21 1216.73 L1020.62 1216.73 L1020.04 1216.73 L1019.45 1216.73 L1018.86 1216.73 L1018.28 1216.73 L1017.69 1216.73 L1017.11 1216.73 L1016.52 1216.73 L1015.93 1216.73 L1015.35 1216.73 L1014.76 1216.73 L1014.17 1216.73 L1013.59 1216.73 L1013 1216.73 L1012.41 1216.73 L1011.83 1216.73 L1011.24 1216.73 L1010.65 1216.73 L1010.07 1216.73 L1009.48 1216.73 L1008.9 1216.73 L1008.31 1216.73 L1007.72 1216.73 L1007.14 1216.73 L1006.55 1216.73 L1005.96 1216.73 L1005.38 1216.73 L1004.79 1216.73 L1004.2 1216.73 L1003.62 1216.73 L1003.03 1216.73 L1002.44 1216.73 L1001.86 1216.73 L1001.27 1216.73 L1000.69 1216.73 L1000.1 1216.73 L999.513 1216.73 L998.926 1216.73 L998.34 1216.73 L997.754 1216.73 L997.167 1216.73 L996.581 1216.73 L995.994 1216.73 L995.408 1216.73 L994.822 1216.73 L994.235 1216.73 L993.649 1216.73 L993.062 1216.73 L992.476 1216.73 L991.889 1216.73 L991.303 1216.73 L990.717 1216.73 L990.13 1216.73 L989.544 1216.73 L988.957 1216.73 L988.371 1216.73 L987.785 1216.73 L987.198 1216.73 L986.612 1216.73 L986.025 1216.73  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1217.08 986.612,1217.08 987.198,1217.08 987.785,1217.08 988.371,1217.08 988.957,1217.08 989.544,1217.08 990.13,1217.08 990.717,1217.08 991.303,1217.08 991.889,1217.08 992.476,1217.08 993.062,1217.08 993.649,1217.08 994.235,1217.08 994.822,1217.08 995.408,1217.08 995.994,1217.08 996.581,1217.08 997.167,1217.08 997.754,1217.08 998.34,1217.08 998.926,1217.08 999.513,1217.08 1000.1,1217.08 1000.69,1217.08 1001.27,1217.08 1001.86,1217.08 1002.44,1217.08 1003.03,1217.08 1003.62,1217.08 1004.2,1217.08 1004.79,1217.08 1005.38,1217.08 1005.96,1217.08 1006.55,1217.08 1007.14,1217.08 1007.72,1217.08 1008.31,1217.08 1008.9,1217.08 1009.48,1217.08 1010.07,1217.08 1010.65,1217.08 1011.24,1217.08 1011.83,1217.08 1012.41,1217.08 1013,1217.08 1013.59,1217.08 1014.17,1217.08 1014.76,1217.08 1015.35,1217.08 1015.93,1217.08 1016.52,1217.08 1017.11,1217.08 1017.69,1217.08 1018.28,1217.08 1018.86,1217.08 1019.45,1217.08 1020.04,1217.08 1020.62,1217.08 1021.21,1217.08 1021.8,1217.08 1022.38,1217.08 1022.97,1217.08 1023.56,1217.08 1024.14,1217.08 1024.73,1217.08 1025.32,1217.08 1025.9,1217.08 1026.49,1217.08 1027.07,1217.08 1027.66,1217.08 1028.25,1217.08 1028.83,1217.08 1029.42,1217.08 1030.01,1217.08 1030.59,1217.08 1031.18,1217.08 1031.77,1217.08 1032.35,1217.08 1032.94,1217.08 1033.52,1217.08 1034.11,1217.08 1034.7,1217.08 1035.28,1217.08 1035.87,1217.08 1036.46,1217.08 1037.04,1217.08 1037.63,1217.08 1038.22,1217.08 1038.8,1217.08 1039.39,1217.08 1039.98,1217.08 1040.56,1217.08 1041.15,1217.08 1041.73,1217.08 1042.32,1217.08 1042.91,1217.08 1043.49,1217.08 1044.08,1217.08 1044.67,1217.08 1045.25,1217.08 1045.84,1217.08 1046.43,1217.08 1047.01,1217.08 1047.6,1217.08 1048.19,1217.08 1048.77,1217.08 1049.36,1217.08 1049.94,1217.08 1050.53,1217.08 1051.12,1217.08 1051.7,1217.08 1052.29,1217.08 1052.88,1217.08 1053.46,1217.08 1054.05,1217.08 1054.64,1217.08 1055.22,1217.08 1055.81,1217.08 1056.39,1217.08 1056.98,1217.08 1057.57,1217.08 1058.15,1217.08 1058.74,1217.08 1059.33,1217.08 1059.91,1217.08 1060.5,1217.08 1061.09,1217.08 1061.67,1217.08 1062.26,1217.08 1062.85,1217.08 1063.43,1217.08 1064.02,1217.08 1064.6,1217.08 1065.19,1217.08 1065.78,1217.08 1066.36,1217.08 1066.95,1217.08 1067.54,1217.08 1068.12,1217.08 1068.71,1217.08 1069.3,1217.08 1069.88,1217.08 1070.47,1217.08 1071.06,1217.08 1071.64,1217.08 1072.23,1217.08 1072.81,1217.08 1073.4,1217.08 1073.99,1217.08 1074.57,1217.08 1075.16,1217.08 1075.75,1217.08 1076.33,1217.08 1076.92,1217.08 1077.51,1217.08 1078.09,1217.08 1078.68,1217.08 1079.26,1217.08 1079.85,1217.08 1080.44,1217.08 1081.02,1217.08 1081.61,1217.08 1082.2,1217.08 1082.78,1217.08 1083.37,1217.08 1083.96,1217.08 1084.54,1217.08 1085.13,1217.08 1085.72,1217.08 1086.3,1217.08 1086.89,1217.08 1087.47,1217.08 1088.06,1217.08 1088.65,1217.08 1089.23,1217.08 1089.82,1217.08 1090.41,1217.08 1090.99,1217.08 1091.58,1217.08 1092.17,1217.08 1092.75,1217.08 1093.34,1217.08 1093.93,1217.08 1094.51,1217.08 1095.1,1217.08 1095.68,1217.08 1096.27,1217.08 1096.86,1217.08 1097.44,1217.08 1098.03,1217.08 1098.62,1217.08 1099.2,1217.08 1099.79,1217.08 1100.38,1217.08 1100.96,1217.08 1101.55,1217.08 1102.14,1217.08 1102.72,1217.08 1103.31,1217.08 1103.89,1217.08 1104.48,1217.08 1105.07,1217.08 1105.65,1217.08 1106.24,1217.08 1106.83,1217.08 1107.41,1217.08 1108,1217.08 1108.59,1217.08 1109.17,1217.08 1109.76,1217.08 1110.34,1217.08 1110.93,1217.08 1111.52,1217.08 1112.1,1217.08 1112.69,1217.08 1113.28,1217.08 1113.86,1217.08 1114.45,1217.08 1115.04,1217.08 1115.62,1217.08 1116.21,1217.08 1116.8,1217.08 1117.38,1217.08 1117.97,1217.08 1118.55,1217.08 1119.14,1217.08 1119.73,1217.08 1120.31,1217.08 1120.9,1217.08 1121.49,1217.08 1122.07,1217.08 1122.66,1217.08 1123.25,1217.08 1123.83,1217.08 1124.42,1217.08 1125.01,1217.08 1125.59,1217.08 1126.18,1217.08 1126.76,1217.08 1127.35,1217.08 1127.94,1217.08 1128.52,1217.08 1129.11,1217.08 1129.7,1217.08 1130.28,1217.08 1130.87,1217.08 1131.46,1217.08 1132.04,1217.08 1132.63,1217.08 1133.21,1217.08 1133.8,1217.08 1134.39,1217.08 1134.97,1217.08 1135.56,1217.08 1136.15,1217.08 1136.73,1217.08 1137.32,1217.08 1137.91,1217.08 1138.49,1217.08 1139.08,1217.08 1139.67,1217.08 1140.25,1217.08 1140.84,1217.08 1141.42,1217.08 1142.01,1217.08 1142.6,1217.08 1143.18,1217.08 1143.77,1217.08 1144.36,1217.08 1144.94,1217.08 1145.53,1217.08 1146.12,1217.08 1146.7,1217.08 1147.29,1217.08 1147.88,1217.08 1148.46,1217.08 1149.05,1217.08 1149.63,1217.08 1150.22,1217.08 1150.81,1217.08 1151.39,1217.08 1151.98,1217.08 1152.57,1217.08 1153.15,1217.08 1153.74,1217.08 1154.33,1217.08 1154.91,1217.08 1155.5,1217.08 1156.09,1217.08 1156.67,1217.08 1157.26,1217.08 1157.84,1217.08 1158.43,1217.08 1159.02,1217.08 1159.6,1217.08 1160.19,1217.08 1160.78,1217.08 1161.36,1217.08 1161.95,1217.08 1162.54,1217.08 1163.12,1217.08 1163.71,1217.08 1164.29,1217.08 1164.88,1217.08 1165.47,1217.08 1166.05,1217.08 1166.64,1217.08 1167.23,1217.08 1167.81,1217.08 1168.4,1217.08 1168.99,1217.08 1169.57,1217.08 1170.16,1217.08 1170.75,1217.08 1171.33,1217.08 1171.92,1217.08 1172.5,1217.08 1173.09,1217.08 1173.68,1217.08 1174.26,1217.08 1174.85,1217.08 1175.44,1217.08 1176.02,1217.08 1176.61,1217.08 1177.2,1217.08 1177.78,1217.08 1178.37,1217.08 1178.96,1217.08 1179.54,1217.08 1180.13,1217.08 1180.71,1217.08 1181.3,1217.08 1181.89,1217.08 1182.47,1217.08 1183.06,1217.08 1183.65,1217.08 1184.23,1217.08 1184.82,1217.08 1185.41,1217.08 1185.99,1217.08 1186.58,1217.08 1187.16,1217.08 1187.75,1217.08 1188.34,1217.08 1188.92,1217.08 1189.51,1217.08 1190.1,1217.08 1190.68,1217.08 1191.27,1217.08 1191.86,1217.08 1192.44,1217.08 1193.03,1217.08 1193.62,1217.08 1194.2,1217.08 1194.79,1217.08 1195.37,1217.08 1195.96,1217.08 1196.55,1217.08 1197.13,1217.08 1197.72,1217.08 1198.31,1217.08 1198.89,1217.08 1199.48,1217.08 1200.07,1217.08 1200.65,1217.08 1201.24,1217.08 1201.83,1217.08 1202.41,1217.08 1203,1217.08 1203.58,1217.08 1204.17,1217.08 1204.76,1217.08 1205.34,1217.08 1205.93,1217.08 1206.52,1217.08 1207.1,1217.08 1207.69,1217.08 1208.28,1217.08 1208.86,1217.08 1209.45,1217.08 1210.03,1217.08 1210.62,1217.08 1211.21,1217.08 1211.79,1217.08 1212.38,1217.08 1212.97,1217.08 1213.55,1217.08 1214.14,1217.08 1214.73,1217.08 1215.31,1217.08 1215.9,1217.08 1216.49,1217.08 1217.07,1217.08 1217.66,1217.08 1218.24,1217.08 1218.83,1217.08 1219.42,1217.08 1220,1217.08 1220.59,1217.08 1221.18,1217.08 1221.76,1217.08 1222.35,1217.08 1222.94,1217.08 1223.52,1217.08 1224.11,1217.08 1224.7,1217.08 1225.28,1217.08 1225.87,1217.08 1226.45,1217.08 1227.04,1217.08 1227.63,1217.08 1228.21,1217.08 1228.8,1217.08 1229.39,1217.08 1229.97,1217.08 1230.56,1217.08 1231.15,1217.08 1231.73,1217.08 1232.32,1217.08 1232.91,1217.08 1233.49,1217.08 1234.08,1217.08 1234.66,1217.08 1235.25,1217.08 1235.84,1217.08 1236.42,1217.08 1237.01,1217.08 1237.6,1217.08 1238.18,1217.08 1238.77,1217.08 1239.36,1217.08 1239.94,1217.08 1240.53,1217.08 1241.11,1217.08 1241.7,1217.08 1242.29,1217.08 1242.87,1217.08 1243.46,1217.08 1244.05,1217.08 1244.63,1217.08 1245.22,1217.08 1245.81,1217.08 1246.39,1217.08 1246.98,1217.08 1247.57,1217.08 1248.15,1217.08 1248.74,1217.08 1249.32,1217.08 1249.91,1217.08 1250.5,1217.08 1251.08,1217.08 1251.67,1217.08 1252.26,1217.08 1252.84,1217.08 1253.43,1217.08 1254.02,1217.08 1254.6,1217.08 1255.19,1217.08 1255.78,1217.08 1256.36,1217.08 1256.95,1217.08 1257.53,1217.08 1258.12,1217.08 1258.71,1217.08 1259.29,1217.08 1259.88,1217.08 1260.47,1217.08 1261.05,1217.08 1261.64,1217.08 1262.23,1217.08 1262.81,1217.08 1263.4,1217.08 1263.98,1217.08 1264.57,1217.08 1265.16,1217.08 1265.74,1217.08 1266.33,1217.08 1266.92,1217.08 1267.5,1217.08 1268.09,1217.08 1268.68,1217.08 1269.26,1217.08 1269.85,1217.08 1270.44,1217.08 1271.02,1217.08 1271.61,1217.08 1272.19,1217.08 1272.78,1217.08 1273.37,1217.08 1273.95,1217.08 1274.54,1217.08 1275.13,1217.08 1275.71,1217.08 1276.3,1217.08 1276.89,1217.08 1277.47,1217.08 1278.06,1217.08 1278.65,1217.08 1279.23,1217.08 1279.82,1217.08 1280.4,1217.08 1280.99,1217.08 1281.58,1217.08 1282.16,1217.08 1282.75,1217.08 1283.34,1217.08 1283.92,1217.08 1284.51,1217.08 1285.1,1217.08 1285.68,1217.08 1286.27,1217.08 1286.86,1217.08 1287.44,1217.08 1288.03,1217.08 1288.61,1217.08 1289.2,1217.08 1289.79,1217.08 1290.37,1217.08 1290.96,1217.08 1291.55,1217.08 1292.13,1217.08 1292.72,1217.08 1293.31,1217.08 1293.89,1217.08 1294.48,1217.08 1295.06,1217.08 1295.65,1217.08 1296.24,1217.08 1296.82,1217.08 1297.41,1217.08 1298,1217.08 1298.58,1217.08 1299.17,1217.08 1299.76,1217.08 1300.34,1217.08 1300.93,1217.08 1301.52,1217.08 1302.1,1217.08 1302.69,1217.08 1303.27,1217.08 1303.86,1217.08 1304.45,1217.08 1305.03,1217.08 1305.62,1217.08 1306.21,1217.08 1306.79,1217.08 1307.38,1217.08 1307.97,1217.08 1308.55,1217.08 1309.14,1217.08 1309.73,1217.08 1310.31,1217.08 1310.9,1217.08 1311.48,1217.08 1312.07,1217.08 1312.66,1217.08 1313.24,1217.08 1313.83,1217.08 1314.42,1217.08 1315,1217.08 1315.59,1217.08 1316.18,1217.08 1316.76,1217.08 1317.35,1217.08 1317.93,1217.08 1318.52,1217.08 1319.11,1217.08 1319.69,1217.08 1320.28,1217.08 1320.87,1217.08 1321.45,1217.08 1322.04,1217.08 1322.63,1217.08 1323.21,1217.08 1323.8,1217.08 1324.39,1217.08 1324.97,1217.08 1325.56,1217.08 1326.14,1217.08 1326.73,1217.08 1327.32,1217.08 1327.9,1217.08 1328.49,1217.08 1329.08,1217.08 1329.66,1217.08 1330.25,1217.08 1330.84,1217.08 1331.42,1217.08 1332.01,1217.08 1332.6,1217.08 1333.18,1217.08 1333.77,1217.08 1334.35,1217.08 1334.94,1217.08 1335.53,1217.08 1336.11,1217.08 1336.7,1217.08 1337.29,1217.08 1337.87,1217.08 1338.46,1217.08 1339.05,1217.08 1339.63,1217.08 1340.22,1217.08 1340.8,1217.08 1341.39,1217.08 1341.98,1217.08 1342.56,1217.08 1343.15,1217.08 1343.74,1217.08 1344.32,1217.08 1344.91,1217.08 1345.5,1217.08 1346.08,1217.08 1346.67,1217.08 1347.26,1217.08 1347.84,1217.08 1348.43,1217.08 1349.01,1217.08 1349.6,1217.08 1350.19,1217.08 1350.77,1217.08 1351.36,1217.08 1351.95,1217.08 1352.53,1217.08 1353.12,1217.08 1353.71,1217.08 1354.29,1217.08 1354.88,1217.08 1355.47,1217.08 1356.05,1217.08 1356.64,1217.08 1357.22,1217.08 1357.81,1217.08 1358.4,1217.08 1358.98,1217.08 1359.57,1217.08 1360.16,1217.08 1360.74,1217.08 1361.33,1217.08 1361.92,1217.08 1362.5,1217.08 1363.09,1217.08 1363.68,1217.08 1364.26,1217.08 1364.85,1217.08 1365.43,1217.08 1366.02,1217.08 1366.61,1217.08 1367.19,1217.08 1367.78,1217.08 1368.37,1217.08 1368.95,1217.08 1369.54,1217.08 1370.13,1217.08 1370.71,1217.08 1371.3,1217.08 1371.88,1217.08 1372.47,1217.08 1373.06,1217.08 1373.64,1217.08 1374.23,1217.08 1374.82,1217.08 1375.4,1217.08 1375.99,1217.08 1376.58,1217.08 1377.16,1217.08 1377.75,1217.08 1378.34,1217.08 1378.92,1217.08 1379.51,1217.08 1380.09,1217.08 1380.68,1217.08 1381.27,1217.08 1381.85,1217.08 1382.44,1217.08 1383.03,1217.08 1383.61,1217.08 1384.2,1217.08 1384.79,1217.08 1385.37,1217.08 1385.96,1217.08 1386.55,1217.08 1387.13,1217.08 1387.72,1217.08 1388.3,1217.08 1388.89,1217.08 1389.48,1217.08 1390.06,1217.08 1390.65,1217.08 1391.24,1217.08 1391.82,1217.08 1392.41,1217.08 1393,1217.08 1393.58,1217.08 1394.17,1217.08 1394.75,1217.08 1395.34,1217.08 1395.93,1217.08 1396.51,1217.08 1397.1,1217.08 1397.69,1217.08 1398.27,1217.08 1398.86,1217.08 1399.45,1217.08 1400.03,1217.08 1400.62,1217.08 1401.21,1217.08 1401.79,1217.08 1402.38,1217.08 1402.96,1217.08 1403.55,1217.08 1404.14,1217.08 1404.72,1217.08 1405.31,1217.08 1405.9,1217.08 1406.48,1217.08 1407.07,1217.08 1407.66,1217.08 1408.24,1217.08 1408.83,1217.08 1409.42,1217.08 1410,1217.08 1410.59,1217.08 1411.17,1217.08 1411.76,1217.08 1412.35,1217.08 1412.93,1217.08 1413.52,1217.08 1414.11,1217.08 1414.69,1217.08 1415.28,1217.08 1415.87,1217.08 1416.45,1217.08 1417.04,1217.08 1417.63,1217.08 1418.21,1217.08 1418.8,1217.08 1419.38,1217.08 1419.97,1217.08 1420.56,1217.08 1421.14,1217.08 1421.73,1217.08 1422.32,1217.08 1422.9,1217.08 1423.49,1217.08 1424.08,1217.08 1424.66,1217.08 1425.25,1217.08 1425.83,1217.08 1426.42,1217.08 1427.01,1217.08 1427.59,1217.08 1428.18,1217.08 1428.77,1217.08 1429.35,1217.08 1429.94,1217.08 1430.53,1217.08 1431.11,1217.08 1431.7,1217.08 1432.29,1217.08 1432.87,1217.08 1433.46,1217.08 1434.04,1217.08 1434.63,1217.08 1435.22,1217.08 1435.8,1217.08 1436.39,1217.08 1436.98,1217.08 1437.56,1217.08 1438.15,1217.08 1438.74,1217.08 1439.32,1217.08 1439.91,1217.08 1440.5,1217.08 1441.08,1217.08 1441.67,1217.08 1442.25,1217.08 1442.84,1217.08 1443.43,1217.08 1444.01,1217.08 1444.6,1217.08 1445.19,1217.08 1445.77,1217.08 1446.36,1217.08 1446.95,1217.08 1447.53,1217.08 1448.12,1217.08 1448.7,1217.08 1449.29,1217.08 1449.88,1217.08 1450.46,1217.08 1451.05,1217.08 1451.64,1217.08 1452.22,1217.08 1452.81,1217.08 1453.4,1217.08 1453.98,1217.08 1454.57,1217.08 1455.16,1217.08 1455.74,1217.08 1456.33,1217.08 1456.91,1217.08 1457.5,1217.08 1458.09,1217.08 1458.67,1217.08 1459.26,1217.08 1459.85,1217.08 1460.43,1217.08 1461.02,1217.08 1461.61,1217.08 1462.19,1217.08 1462.78,1217.08 1463.37,1217.08 1463.95,1217.08 1464.54,1217.08 1465.12,1217.08 1465.71,1217.08 1466.3,1217.08 1466.88,1217.08 1467.47,1217.08 1468.06,1217.08 1468.64,1217.08 1469.23,1217.08 1469.82,1217.08 1470.4,1217.08 1470.99,1217.08 1471.57,1217.08 1472.16,1217.08 1472.75,1217.08 1473.33,1217.08 1473.92,1217.08 1474.51,1217.08 1475.09,1217.08 1475.68,1217.08 1476.27,1217.08 1476.85,1217.08 1477.44,1217.08 1478.03,1217.08 1478.61,1217.08 1479.2,1217.08 1479.78,1217.08 1480.37,1217.08 1480.96,1217.08 1481.54,1217.08 1482.13,1217.08 1482.72,1217.08 1483.3,1217.08 1483.89,1217.08 1484.48,1217.08 1485.06,1217.08 1485.65,1217.08 1486.24,1217.08 1486.82,1217.08 1487.41,1217.08 1487.99,1217.08 1488.58,1217.08 1489.17,1217.08 1489.75,1217.08 1490.34,1217.08 1490.93,1217.08 1491.51,1217.08 1492.1,1217.08 1492.69,1217.08 1493.27,1217.08 1493.86,1217.08 1494.45,1217.08 1495.03,1217.08 1495.62,1217.08 1496.2,1217.08 1496.79,1217.08 1497.38,1217.08 1497.96,1217.08 1498.55,1217.08 1499.14,1217.08 1499.72,1217.08 1500.31,1217.08 1500.9,1217.08 1501.48,1217.08 1502.07,1217.08 1502.65,1217.08 1503.24,1217.08 1503.83,1217.08 1504.41,1217.08 1505,1217.08 1505.59,1217.08 1506.17,1217.08 1506.76,1217.08 1507.35,1217.08 1507.93,1217.08 1508.52,1217.08 1509.11,1217.08 1509.69,1217.08 1510.28,1217.08 1510.86,1217.08 1511.45,1217.08 1512.04,1217.08 1512.62,1217.08 1513.21,1217.08 1513.8,1217.08 1514.38,1217.08 1514.97,1217.08 1515.56,1217.08 1516.14,1217.08 1516.73,1217.08 1517.32,1217.08 1517.9,1217.08 1518.49,1217.08 1519.07,1217.08 1519.66,1217.08 1520.25,1217.08 1520.83,1217.08 1521.42,1217.08 1522.01,1217.08 1522.59,1217.08 1523.18,1217.08 1523.77,1217.08 1524.35,1217.08 1524.94,1217.08 1525.52,1217.08 1526.11,1217.08 1526.7,1217.08 1527.28,1217.08 1527.87,1217.08 1528.46,1217.08 1529.04,1217.08 1529.63,1217.08 1530.22,1217.08 1530.8,1217.08 1531.39,1217.08 1531.98,1217.08 1532.56,1217.08 1533.15,1217.08 1533.73,1217.08 1534.32,1217.08 1534.91,1217.08 1535.49,1217.08 1536.08,1217.08 1536.67,1217.08 1537.25,1217.08 1537.84,1217.08 1538.43,1217.08 1539.01,1217.08 1539.6,1217.08 1540.19,1217.08 1540.77,1217.08 1541.36,1217.08 1541.94,1217.08 1542.53,1217.08 1543.12,1217.08 1543.7,1217.08 1544.29,1217.08 1544.88,1217.08 1545.46,1217.08 1546.05,1217.08 1546.64,1217.08 1547.22,1217.08 1547.81,1217.08 1548.4,1217.08 1548.98,1217.08 1549.57,1217.08 1550.15,1217.08 1550.74,1217.08 1551.33,1217.08 1551.91,1217.08 1552.5,1217.08 1553.09,1217.08 1553.67,1217.08 1554.26,1217.08 1554.85,1217.08 1555.43,1217.08 1556.02,1217.08 1556.6,1217.08 1557.19,1217.08 1557.78,1217.08 1558.36,1217.08 1558.95,1217.08 1559.54,1217.08 1560.12,1217.08 1560.71,1217.08 1561.3,1217.08 1561.88,1217.08 1562.47,1217.08 1563.06,1217.08 1563.64,1217.08 1564.23,1217.08 1564.81,1217.08 1565.4,1217.08 1565.99,1217.08 1566.57,1217.08 1567.16,1217.08 1567.75,1217.08 1568.33,1217.08 1568.92,1217.08 1569.51,1217.08 1570.09,1217.08 1570.68,1217.08 1571.27,1217.08 1571.85,1217.08 1572.44,1217.08 1573.02,1217.08 1573.61,1217.08 1574.2,1217.08 1574.78,1217.08 1575.37,1217.08 1575.96,1217.08 1576.54,1217.08 1577.13,1217.08 1577.72,1217.08 1578.3,1217.08 1578.89,1217.08 1579.47,1217.08 1580.06,1217.08 1580.65,1217.08 1581.23,1217.08 1581.82,1217.08 1582.41,1217.08 1582.99,1217.08 1583.58,1217.08 1584.17,1217.08 1584.75,1217.08 1585.34,1217.08 1585.93,1217.08 1586.51,1217.08 1587.1,1217.08 1587.68,1217.08 1588.27,1217.08 1588.86,1217.08 1589.44,1217.08 1590.03,1217.08 1590.62,1217.08 1591.2,1217.08 1591.79,1217.08 1592.38,1217.08 1592.96,1217.08 1593.55,1217.08 1594.14,1217.08 1594.72,1217.08 1595.31,1217.08 1595.89,1217.08 1596.48,1217.08 1597.07,1217.08 1597.65,1217.08 1598.24,1217.08 1598.83,1217.08 1599.41,1217.08 1600,1217.08 1600.59,1217.08 1601.17,1217.08 1601.76,1217.08 1602.34,1217.08 1602.93,1217.08 1603.52,1217.08 1604.1,1217.08 1604.69,1217.08 1605.28,1217.08 1605.86,1217.08 1606.45,1217.08 1607.04,1217.08 1607.62,1217.08 1608.21,1217.08 1608.8,1217.08 1609.38,1217.08 1609.97,1217.08 1610.55,1217.08 1611.14,1217.08 1611.73,1217.08 1612.31,1217.08 1612.9,1217.08 1613.49,1217.08 1614.07,1217.08 1614.66,1217.08 1615.25,1217.08 1615.83,1217.08 1616.42,1217.08 1617.01,1217.08 1617.59,1217.08 1618.18,1217.08 1618.76,1217.08 1619.35,1217.08 1619.94,1217.08 1620.52,1217.08 1621.11,1217.08 1621.7,1217.08 1622.28,1217.08 1622.87,1217.08 1623.46,1217.08 1624.04,1217.08 1624.63,1217.08 1625.22,1217.08 1625.8,1217.08 1626.39,1217.08 1626.97,1217.08 1627.56,1217.08 1628.15,1217.08 1628.73,1217.08 1629.32,1217.08 1629.91,1217.08 1630.49,1217.08 1631.08,1217.08 1631.67,1217.08 1632.25,1217.08 1632.84,1217.08 1633.42,1217.08 1634.01,1217.08 1634.6,1217.08 1635.18,1217.08 1635.77,1217.08 1636.36,1217.08 1636.94,1217.08 1637.53,1217.08 1638.12,1217.08 1638.7,1217.08 1639.29,1217.08 1639.88,1217.08 1640.46,1217.08 1641.05,1217.08 1641.63,1217.08 1642.22,1217.08 1642.81,1217.08 1643.39,1217.08 1643.98,1217.08 1644.57,1217.08 1645.15,1217.08 1645.74,1217.08 1646.33,1217.08 1646.91,1217.08 1647.5,1217.08 1648.09,1217.08 1648.67,1217.08 1649.26,1217.08 1649.84,1217.08 1650.43,1217.08 1651.02,1217.08 1651.6,1217.08 1652.19,1217.08 1652.78,1217.08 1653.36,1217.08 1653.95,1217.08 1654.54,1217.08 1655.12,1217.08 1655.71,1217.08 1656.29,1217.08 1656.88,1217.08 1657.47,1217.08 1658.05,1217.08 1658.64,1217.08 1659.23,1217.08 1659.81,1217.08 1660.4,1217.08 1660.99,1217.08 1661.57,1217.08 1662.16,1217.08 1662.75,1217.08 1663.33,1217.08 1663.92,1217.08 1664.5,1217.08 1665.09,1217.08 1665.68,1217.08 1666.26,1217.08 1666.85,1217.08 1667.44,1217.08 1668.02,1217.08 1668.61,1217.08 1669.2,1217.08 1669.78,1217.08 1670.37,1217.08 1670.96,1217.08 1671.54,1217.08 1672.13,1217.08 1672.71,1217.08 1673.3,1217.08 1673.89,1217.08 1674.47,1217.08 1675.06,1217.08 1675.65,1217.08 1676.23,1217.08 1676.82,1217.08 1677.41,1217.08 1677.99,1217.08 1678.58,1217.08 1679.17,1217.08 1679.75,1217.08 1680.34,1217.08 1680.92,1217.08 1681.51,1217.08 1682.1,1217.08 1682.68,1217.08 1683.27,1217.08 1683.86,1217.08 1684.44,1217.08 1685.03,1217.08 1685.62,1217.08 1686.2,1217.08 1686.79,1217.08 1687.37,1217.08 1687.96,1217.08 1688.55,1217.08 1689.13,1217.08 1689.72,1217.08 1690.31,1217.08 1690.89,1217.08 1691.48,1217.08 1692.07,1217.08 1692.65,1217.08 1693.24,1217.08 1693.83,1217.08 1694.41,1217.08 1695,1217.08 1695.58,1217.08 1696.17,1217.08 1696.76,1217.08 1697.34,1217.08 1697.93,1217.08 1698.52,1217.08 1699.1,1217.08 1699.69,1217.08 1700.28,1217.08 1700.86,1217.08 1701.45,1217.08 1702.04,1217.08 1702.62,1217.08 1703.21,1217.08 1703.79,1217.08 1704.38,1217.08 1704.97,1217.08 1705.55,1217.08 1706.14,1217.08 1706.73,1217.08 1707.31,1217.08 1707.9,1217.08 1708.49,1217.08 1709.07,1217.08 1709.66,1217.08 1710.24,1217.08 1710.83,1217.08 1711.42,1217.08 1712,1217.08 1712.59,1217.08 1713.18,1217.08 1713.76,1217.08 1714.35,1217.08 1714.94,1217.08 1715.52,1217.08 1716.11,1217.08 1716.7,1217.08 1717.28,1217.08 1717.87,1217.08 1718.45,1217.08 1719.04,1217.08 1719.63,1217.08 1720.21,1217.08 1720.8,1217.08 1721.39,1217.08 1721.97,1217.08 1722.56,1217.08 1723.15,1217.08 1723.73,1217.08 1724.32,1217.08 1724.91,1217.08 1725.49,1217.08 1726.08,1217.08 1726.66,1217.08 1727.25,1217.08 1727.84,1217.08 1728.42,1217.08 1729.01,1217.08 1729.6,1217.08 1730.18,1217.08 1730.77,1217.08 1731.36,1217.08 1731.94,1217.08 1732.53,1217.08 1733.11,1217.08 1733.7,1217.08 1734.29,1217.08 1734.87,1217.08 1735.46,1217.08 1736.05,1217.08 1736.63,1217.08 1737.22,1217.08 1737.81,1217.08 1738.39,1217.08 1738.98,1217.08 1739.57,1217.08 1740.15,1217.08 1740.74,1217.08 1741.32,1217.08 1741.91,1217.08 1742.5,1217.08 1743.08,1217.08 1743.67,1217.08 1744.26,1217.08 1744.84,1217.08 1745.43,1217.08 1746.02,1217.08 1746.6,1217.08 1747.19,1217.08 1747.78,1217.08 1748.36,1217.08 1748.95,1217.08 1749.53,1217.08 1750.12,1217.08 1750.71,1217.08 1751.29,1217.08 1751.88,1217.08 1752.47,1217.08 1753.05,1217.08 1753.64,1217.08 1754.23,1217.08 1754.81,1217.08 1755.4,1217.08 1755.99,1217.08 1756.57,1217.08 1757.16,1217.08 1757.74,1217.08 1758.33,1217.08 1758.92,1217.08 1759.5,1217.08 1760.09,1217.08 1760.68,1217.08 1761.26,1217.08 1761.85,1217.08 1762.44,1217.08 1763.02,1217.08 1763.61,1217.08 1764.19,1217.08 1764.78,1217.08 1765.37,1217.08 1765.95,1217.08 1766.54,1217.08 1767.13,1217.08 1767.71,1217.08 1768.3,1217.08 1768.89,1217.08 1769.47,1217.08 1770.06,1217.08 1770.65,1217.08 1771.23,1217.08 1771.82,1217.08 1772.4,1217.08 1772.99,1217.08 1773.58,1217.08 1774.16,1217.08 1774.75,1217.08 1775.34,1217.08 1775.92,1217.08 1776.51,1217.08 1777.1,1217.08 1777.68,1217.08 1778.27,1217.08 1778.86,1217.08 1779.44,1217.08 1780.03,1217.08 1780.61,1217.08 1781.2,1217.08 1781.79,1217.08 1782.37,1217.08 1782.96,1217.08 1783.55,1217.08 1784.13,1217.08 1784.72,1217.08 1785.31,1217.08 1785.89,1217.08 1786.48,1217.08 1787.06,1217.08 1787.65,1217.08 1788.24,1217.08 1788.82,1217.08 1789.41,1217.08 1790,1217.08 1790.58,1217.08 1791.17,1217.08 1791.76,1217.08 1792.34,1217.08 1792.93,1217.08 1793.52,1217.08 1794.1,1217.08 1794.69,1217.08 1795.27,1217.08 1795.86,1217.08 1796.45,1217.08 1797.03,1217.08 1797.62,1217.08 1798.21,1217.08 1798.79,1217.08 1799.38,1217.08 1799.97,1217.08 1800.55,1217.08 1801.14,1217.08 1801.73,1217.08 1802.31,1217.08 1802.9,1217.08 1803.48,1217.08 1804.07,1217.08 1804.66,1217.08 1805.24,1217.08 1805.83,1217.08 1806.42,1217.08 1807,1217.08 1807.59,1217.08 1808.18,1217.08 1808.76,1217.08 1809.35,1217.08 1809.94,1217.08 1810.52,1217.08 1811.11,1217.08 1811.69,1217.08 1812.28,1217.08 1812.87,1217.08 1813.45,1217.08 1814.04,1217.08 1814.63,1217.08 1815.21,1217.08 1815.8,1217.08 1816.39,1217.08 1816.97,1217.08 1817.56,1217.08 1818.14,1217.08 1818.73,1217.08 1819.32,1217.08 1819.9,1217.08 1820.49,1217.08 1821.08,1217.08 1821.66,1217.08 1822.25,1217.08 1822.84,1217.08 1823.42,1217.08 1824.01,1217.08 1824.6,1217.08 1825.18,1217.08 1825.77,1217.08 1826.35,1217.08 1826.94,1217.08 1827.53,1217.08 1828.11,1217.08 1828.7,1217.08 1829.29,1217.08 1829.87,1217.08 1830.46,1217.08 1831.05,1217.08 1831.63,1217.08 1832.22,1217.08 1832.81,1217.08 1833.39,1217.08 1833.98,1217.08 1834.56,1217.08 1835.15,1217.08 1835.74,1217.08 1836.32,1217.08 1836.91,1217.08 1837.5,1217.08 1838.08,1217.08 1838.67,1217.08 1839.26,1217.08 1839.84,1217.08 1840.43,1217.08 1841.01,1217.08 1841.6,1217.08 1842.19,1217.08 1842.77,1217.08 1843.36,1217.08 1843.95,1217.08 1844.53,1217.08 1845.12,1217.08 1845.71,1217.08 1846.29,1217.08 1846.88,1217.08 1847.47,1217.08 1848.05,1217.08 1848.64,1217.08 1849.22,1217.08 1849.81,1217.08 1850.4,1217.08 1850.98,1217.08 1851.57,1217.08 1852.16,1217.08 1852.74,1217.08 1853.33,1217.08 1853.92,1217.08 1854.5,1217.08 1855.09,1217.08 1855.68,1217.08 1856.26,1217.08 1856.85,1217.08 1857.43,1217.08 1858.02,1217.08 1858.61,1217.08 1859.19,1217.08 1859.78,1217.08 1860.37,1217.08 1860.95,1217.08 1861.54,1217.08 1862.13,1217.08 1862.71,1217.08 1863.3,1217.08 1863.88,1217.08 1864.47,1217.08 1865.06,1217.08 1865.64,1217.08 1866.23,1217.08 1866.82,1217.08 1867.4,1217.08 1867.99,1217.08 1868.58,1217.08 1869.16,1217.08 1869.75,1217.08 1870.34,1217.08 1870.92,1217.08 1871.51,1217.08 1872.09,1217.08 1872.68,1217.08 1873.27,1217.08 1873.85,1217.08 1874.44,1217.08 1875.03,1217.08 1875.61,1217.08 1876.2,1217.08 1876.79,1217.08 1877.37,1217.08 1877.96,1217.08 1878.55,1217.08 1879.13,1217.08 1879.72,1217.08 1880.3,1217.08 1880.89,1217.08 1881.48,1217.08 1882.06,1217.08 1882.65,1217.08 1883.24,1217.08 1883.82,1217.08 1884.41,1217.08 1885,1217.08 1885.58,1217.08 1886.17,1217.08 1886.76,1217.08 1887.34,1217.08 1887.93,1217.08 1888.51,1217.08 1889.1,1217.08 1889.69,1217.08 1890.27,1217.08 1890.86,1217.08 1891.45,1217.08 1892.03,1217.08 1892.62,1217.08 1893.21,1217.08 1893.79,1217.08 1894.38,1217.08 1894.96,1217.08 1895.55,1217.08 1896.14,1217.08 1896.72,1217.08 1897.31,1217.08 1897.9,1217.08 1898.48,1217.08 1899.07,1217.08 1899.66,1217.08 1900.24,1217.08 1900.83,1217.08 1901.42,1217.08 1902,1217.08 1902.59,1217.08 1903.17,1217.08 1903.76,1217.08 1904.35,1217.08 1904.93,1217.08 1905.52,1217.08 1906.11,1217.08 1906.69,1217.08 1907.28,1217.08 1907.87,1217.08 1908.45,1217.08 1909.04,1217.08 1909.63,1217.08 1910.21,1217.08 1910.8,1217.08 1911.38,1217.08 1911.97,1217.08 1912.56,1217.08 1913.14,1217.08 1913.73,1217.08 1914.32,1217.08 1914.9,1217.08 1915.49,1217.08 1916.08,1217.08 1916.66,1217.08 1917.25,1217.08 1917.83,1217.08 1918.42,1217.08 1919.01,1217.08 1919.59,1217.08 1920.18,1217.08 1920.77,1217.08 1921.35,1217.08 1921.94,1217.08 1922.53,1217.08 1923.11,1217.08 1923.7,1217.08 1924.29,1217.08 1924.87,1217.08 1925.46,1217.08 1926.04,1217.08 1926.63,1217.08 1927.22,1217.08 1927.8,1217.08 1928.39,1217.08 1928.98,1217.08 1929.56,1217.08 1930.15,1217.08 1930.74,1217.08 1931.32,1217.08 1931.91,1217.08 1932.5,1217.08 1933.08,1217.08 1933.67,1217.08 1934.25,1217.08 1934.84,1217.08 1935.43,1217.08 1936.01,1217.08 1936.6,1217.08 1937.19,1217.08 1937.77,1217.08 1938.36,1217.08 1938.95,1217.08 1939.53,1217.08 1940.12,1217.08 1940.71,1217.08 1941.29,1217.08 1941.88,1217.08 1942.46,1217.08 1943.05,1217.08 1943.64,1217.08 1944.22,1217.08 1944.81,1217.08 1945.4,1217.08 1945.98,1217.08 1946.57,1217.08 1947.16,1217.08 1947.74,1217.08 1948.33,1217.08 1948.91,1217.08 1949.5,1217.08 1950.09,1217.08 1950.67,1217.08 1951.26,1217.08 1951.85,1217.08 1952.43,1217.08 1953.02,1217.08 1953.61,1217.08 1954.19,1217.08 1954.78,1217.08 1955.37,1217.08 1955.95,1217.08 1956.54,1217.08 1957.12,1217.08 1957.71,1217.08 1958.3,1217.08 1958.88,1217.08 1959.47,1217.08 1960.06,1217.08 1960.64,1217.08 1961.23,1217.08 1961.82,1217.08 1962.4,1217.08 1962.99,1217.08 1963.58,1217.08 1964.16,1217.08 1964.75,1217.08 1965.33,1217.08 1965.92,1217.08 1966.51,1217.08 1967.09,1217.08 1967.68,1217.08 1968.27,1217.08 1968.85,1217.08 1969.44,1217.08 1970.03,1217.08 1970.61,1217.08 1971.2,1217.08 1971.78,1217.08 1972.37,1217.08 1972.96,1217.08 1973.54,1217.08 1974.13,1217.08 1974.72,1217.08 1975.3,1217.08 1975.89,1217.08 1976.48,1217.08 1977.06,1217.08 1977.65,1217.08 1978.24,1217.08 1978.82,1217.08 1979.41,1217.08 1979.99,1217.08 1980.58,1217.08 1981.17,1217.08 1981.75,1217.08 1982.34,1217.08 1982.93,1217.08 1983.51,1217.08 1984.1,1217.08 1984.69,1217.08 1985.27,1217.08 1985.86,1217.08 1986.45,1217.08 1987.03,1217.08 1987.62,1217.08 1988.2,1217.08 1988.79,1217.08 1989.38,1217.08 1989.96,1217.08 1990.55,1217.08 1991.14,1217.08 1991.72,1217.08 1992.31,1217.08 1992.9,1217.08 1993.48,1217.08 1994.07,1217.08 1994.65,1217.08 1995.24,1217.08 1995.83,1217.08 1996.41,1217.08 1997,1217.08 1997.59,1217.08 1998.17,1217.08 1998.76,1217.08 1999.35,1217.08 1999.93,1217.08 2000.52,1217.08 2001.11,1217.08 2001.69,1217.08 2002.28,1217.08 2002.86,1217.08 2003.45,1217.08 2004.04,1217.08 2004.62,1217.08 2005.21,1217.08 2005.8,1217.08 2006.38,1217.08 2006.97,1217.08 2007.56,1217.08 2008.14,1217.08 2008.73,1217.08 2009.32,1217.08 2009.9,1217.08 2010.49,1217.08 2011.07,1217.08 2011.66,1217.08 2012.25,1217.08 2012.83,1217.08 2013.42,1217.08 2014.01,1217.08 2014.59,1217.08 2015.18,1217.08 2015.77,1217.08 2016.35,1217.08 2016.94,1217.08 2017.53,1217.08 2018.11,1217.08 2018.7,1217.08 2019.28,1217.08 2019.87,1217.08 2020.46,1217.08 2021.04,1217.08 2021.63,1217.08 2022.22,1217.08 2022.8,1217.08 2023.39,1217.08 2023.98,1217.08 2024.56,1217.08 2025.15,1217.08 2025.73,1217.08 2026.32,1217.08 2026.91,1217.08 2027.49,1217.08 2028.08,1217.08 2028.67,1217.08 2029.25,1217.08 2029.84,1217.08 2030.43,1217.08 2031.01,1217.08 2031.6,1217.08 2032.19,1217.08 2032.77,1217.08 2033.36,1217.08 2033.94,1217.08 2034.53,1217.08 2035.12,1217.08 2035.7,1217.08 2036.29,1217.08 2036.88,1217.08 2037.46,1217.08 2038.05,1217.08 2038.64,1217.08 2039.22,1217.08 2039.81,1217.08 2040.4,1217.08 2040.98,1217.08 2041.57,1217.08 2042.15,1217.08 2042.74,1217.08 2043.33,1217.08 2043.91,1217.08 2044.5,1217.08 2045.09,1217.08 2045.67,1217.08 2046.26,1217.08 2046.85,1217.08 2047.43,1217.08 2048.02,1217.08 2048.6,1217.08 2049.19,1217.08 2049.78,1217.08 2050.36,1217.08 2050.95,1217.08 2051.54,1217.08 2052.12,1217.08 2052.71,1217.08 2053.3,1217.08 2053.88,1217.08 2054.47,1217.08 2055.06,1217.08 2055.64,1217.08 2056.23,1217.08 2056.81,1217.08 2057.4,1217.08 2057.99,1217.08 2058.57,1217.08 2059.16,1217.08 2059.75,1217.08 2060.33,1217.08 2060.92,1217.08 2061.51,1217.08 2062.09,1217.08 2062.68,1217.08 2063.27,1217.08 2063.85,1217.08 2064.44,1217.08 2065.02,1217.08 2065.61,1217.08 2066.2,1217.08 2066.78,1217.08 2067.37,1217.08 2067.96,1217.08 2068.54,1217.08 2069.13,1217.08 2069.72,1217.08 2070.3,1217.08 2070.89,1217.08 2071.48,1217.08 2072.06,1217.08 2072.65,1217.08 2073.23,1217.08 2073.82,1217.08 2074.41,1217.08 2074.99,1217.08 2075.58,1217.08 2076.17,1217.08 2076.75,1217.08 2077.34,1217.08 2077.93,1217.08 2078.51,1217.08 2079.1,1217.08 2079.68,1217.08 2080.27,1217.08 2080.86,1217.08 2081.44,1217.08 2082.03,1217.08 2082.62,1217.08 2083.2,1217.08 2083.79,1217.08 2084.38,1217.08 2084.96,1217.08 2085.55,1217.08 2086.14,1217.08 2086.72,1217.08 2087.31,1217.08 2087.89,1217.08 2088.48,1217.08 2089.07,1217.08 2089.65,1217.08 2090.24,1217.08 2090.83,1217.08 2091.41,1217.08 2092,1217.08 2092.59,1217.08 2093.17,1217.08 2093.76,1217.08 2094.35,1217.08 2094.93,1217.08 2095.52,1217.08 2096.1,1217.08 2096.69,1217.08 2097.28,1217.08 2097.86,1217.08 2098.45,1217.08 2099.04,1217.08 2099.62,1217.08 2100.21,1217.08 2100.8,1217.08 2101.38,1217.08 2101.97,1217.08 2102.55,1217.08 2103.14,1217.08 2103.73,1217.08 2104.31,1217.08 2104.9,1217.08 2105.49,1217.08 2106.07,1217.08 2106.66,1217.08 2107.25,1217.08 2107.83,1217.08 2108.42,1217.08 2109.01,1217.08 2109.59,1217.08 2110.18,1217.08 2110.76,1217.08 2111.35,1217.08 2111.94,1217.08 2112.52,1217.08 2113.11,1217.08 2113.7,1217.08 2114.28,1217.08 2114.87,1217.08 2115.46,1217.08 2116.04,1217.08 2116.63,1217.08 2117.22,1217.08 2117.8,1217.08 2118.39,1217.08 2118.97,1217.08 2119.56,1217.08 2120.15,1217.08 2120.73,1217.08 2121.32,1217.08 2121.91,1217.08 2122.49,1217.08 2123.08,1217.08 2123.67,1217.08 2124.25,1217.08 2124.84,1217.08 2125.42,1217.08 2126.01,1217.08 2126.6,1217.08 2127.18,1217.08 2127.77,1217.08 2128.36,1217.08 2128.94,1217.08 2129.53,1217.08 2130.12,1217.08 2130.7,1217.08 2131.29,1217.08 2131.88,1217.08 2132.46,1217.08 2133.05,1217.08 2133.63,1217.08 2134.22,1217.08 2134.81,1217.08 2135.39,1217.08 2135.98,1217.08 2136.57,1217.08 2137.15,1217.08 2137.74,1217.08 2138.33,1217.08 2138.91,1217.08 2139.5,1217.08 2140.09,1217.08 2140.67,1217.08 2141.26,1217.08 2141.84,1217.08 2142.43,1217.08 2143.02,1217.08 2143.6,1217.08 2144.19,1217.08 2144.78,1217.08 2145.36,1217.08 2145.95,1217.08 2146.54,1217.08 2147.12,1217.08 2147.71,1217.08 2148.3,1217.08 2148.88,1217.08 2149.47,1217.08 2150.05,1217.08 2150.64,1217.08 2151.23,1217.08 2151.81,1217.08 2152.4,1217.08 2152.99,1217.08 2153.57,1217.08 2154.16,1217.08 2154.75,1217.08 2155.33,1217.08 2155.92,1217.08 2156.5,1217.08 2157.09,1217.08 2157.68,1217.08 2158.26,1217.08 \"/>\n<path clip-path=\"url(#clip642)\" d=\"M986.025 1216.95 L986.612 1216.95 L987.198 1216.95 L987.785 1216.95 L988.371 1216.95 L988.957 1216.95 L989.544 1216.95 L990.13 1216.95 L990.717 1216.95 L991.303 1216.95 L991.889 1216.95 L992.476 1216.95 L993.062 1216.95 L993.649 1216.95 L994.235 1216.95 L994.822 1216.95 L995.408 1216.95 L995.994 1216.95 L996.581 1216.95 L997.167 1216.95 L997.754 1216.95 L998.34 1216.95 L998.926 1216.95 L999.513 1216.95 L1000.1 1216.95 L1000.69 1216.95 L1001.27 1216.95 L1001.86 1216.95 L1002.44 1216.95 L1003.03 1216.95 L1003.62 1216.95 L1004.2 1216.95 L1004.79 1216.95 L1005.38 1216.95 L1005.96 1216.95 L1006.55 1216.95 L1007.14 1216.95 L1007.72 1216.95 L1008.31 1216.95 L1008.9 1216.95 L1009.48 1216.95 L1010.07 1216.95 L1010.65 1216.95 L1011.24 1216.95 L1011.83 1216.95 L1012.41 1216.95 L1013 1216.95 L1013.59 1216.95 L1014.17 1216.95 L1014.76 1216.95 L1015.35 1216.95 L1015.93 1216.95 L1016.52 1216.95 L1017.11 1216.95 L1017.69 1216.95 L1018.28 1216.95 L1018.86 1216.95 L1019.45 1216.95 L1020.04 1216.95 L1020.62 1216.95 L1021.21 1216.95 L1021.8 1216.95 L1022.38 1216.95 L1022.97 1216.95 L1023.56 1216.95 L1024.14 1216.95 L1024.73 1216.95 L1025.32 1216.95 L1025.9 1216.95 L1026.49 1216.95 L1027.07 1216.95 L1027.66 1216.95 L1028.25 1216.95 L1028.83 1216.95 L1029.42 1216.95 L1030.01 1216.95 L1030.59 1216.95 L1031.18 1216.95 L1031.77 1216.95 L1032.35 1216.95 L1032.94 1216.95 L1033.52 1216.95 L1034.11 1216.95 L1034.7 1216.95 L1035.28 1216.95 L1035.87 1216.95 L1036.46 1216.95 L1037.04 1216.95 L1037.63 1216.95 L1038.22 1216.95 L1038.8 1216.95 L1039.39 1216.95 L1039.98 1216.95 L1040.56 1216.95 L1041.15 1216.95 L1041.73 1216.95 L1042.32 1216.95 L1042.91 1216.95 L1043.49 1216.95 L1044.08 1216.95 L1044.67 1216.95 L1045.25 1216.95 L1045.84 1216.95 L1046.43 1216.95 L1047.01 1216.95 L1047.6 1216.95 L1048.19 1216.95 L1048.77 1216.95 L1049.36 1216.95 L1049.94 1216.95 L1050.53 1216.95 L1051.12 1216.95 L1051.7 1216.95 L1052.29 1216.95 L1052.88 1216.95 L1053.46 1216.95 L1054.05 1216.95 L1054.64 1216.95 L1055.22 1216.95 L1055.81 1216.95 L1056.39 1216.95 L1056.98 1216.95 L1057.57 1216.95 L1058.15 1216.95 L1058.74 1216.95 L1059.33 1216.95 L1059.91 1216.95 L1060.5 1216.95 L1061.09 1216.95 L1061.67 1216.95 L1062.26 1216.95 L1062.85 1216.95 L1063.43 1216.95 L1064.02 1216.95 L1064.6 1216.95 L1065.19 1216.95 L1065.78 1216.95 L1066.36 1216.95 L1066.95 1216.95 L1067.54 1216.95 L1068.12 1216.95 L1068.71 1216.95 L1069.3 1216.95 L1069.88 1216.95 L1070.47 1216.95 L1071.06 1216.95 L1071.64 1216.95 L1072.23 1216.95 L1072.81 1216.95 L1073.4 1216.95 L1073.99 1216.95 L1074.57 1216.95 L1075.16 1216.95 L1075.75 1216.95 L1076.33 1216.95 L1076.92 1216.95 L1077.51 1216.95 L1078.09 1216.95 L1078.68 1216.95 L1079.26 1216.95 L1079.85 1216.95 L1080.44 1216.95 L1081.02 1216.95 L1081.61 1216.95 L1082.2 1216.95 L1082.78 1216.95 L1083.37 1216.95 L1083.96 1216.95 L1084.54 1216.95 L1085.13 1216.95 L1085.72 1216.95 L1086.3 1216.95 L1086.89 1216.95 L1087.47 1216.95 L1088.06 1216.95 L1088.65 1216.95 L1089.23 1216.95 L1089.82 1216.95 L1090.41 1216.95 L1090.99 1216.95 L1091.58 1216.95 L1092.17 1216.95 L1092.75 1216.95 L1093.34 1216.95 L1093.93 1216.95 L1094.51 1216.95 L1095.1 1216.95 L1095.68 1216.95 L1096.27 1216.95 L1096.86 1216.95 L1097.44 1216.95 L1098.03 1216.95 L1098.62 1216.95 L1099.2 1216.95 L1099.79 1216.95 L1100.38 1216.95 L1100.96 1216.95 L1101.55 1216.95 L1102.14 1216.95 L1102.72 1216.95 L1103.31 1216.95 L1103.89 1216.95 L1104.48 1216.95 L1105.07 1216.95 L1105.65 1216.95 L1106.24 1216.95 L1106.83 1216.95 L1107.41 1216.95 L1108 1216.95 L1108.59 1216.95 L1109.17 1216.95 L1109.76 1216.95 L1110.34 1216.95 L1110.93 1216.95 L1111.52 1216.95 L1112.1 1216.95 L1112.69 1216.95 L1113.28 1216.95 L1113.86 1216.95 L1114.45 1216.95 L1115.04 1216.95 L1115.62 1216.95 L1116.21 1216.95 L1116.8 1216.95 L1117.38 1216.95 L1117.97 1216.95 L1118.55 1216.95 L1119.14 1216.95 L1119.73 1216.95 L1120.31 1216.95 L1120.9 1216.95 L1121.49 1216.95 L1122.07 1216.95 L1122.66 1216.95 L1123.25 1216.95 L1123.83 1216.95 L1124.42 1216.95 L1125.01 1216.95 L1125.59 1216.95 L1126.18 1216.95 L1126.76 1216.95 L1127.35 1216.95 L1127.94 1216.95 L1128.52 1216.95 L1129.11 1216.95 L1129.7 1216.95 L1130.28 1216.95 L1130.87 1216.95 L1131.46 1216.95 L1132.04 1216.95 L1132.63 1216.95 L1133.21 1216.95 L1133.8 1216.95 L1134.39 1216.95 L1134.97 1216.95 L1135.56 1216.95 L1136.15 1216.95 L1136.73 1216.95 L1137.32 1216.95 L1137.91 1216.95 L1138.49 1216.95 L1139.08 1216.95 L1139.67 1216.95 L1140.25 1216.95 L1140.84 1216.95 L1141.42 1216.95 L1142.01 1216.95 L1142.6 1216.95 L1143.18 1216.95 L1143.77 1216.95 L1144.36 1216.95 L1144.94 1216.95 L1145.53 1216.95 L1146.12 1216.95 L1146.7 1216.95 L1147.29 1216.95 L1147.88 1216.95 L1148.46 1216.95 L1149.05 1216.95 L1149.63 1216.95 L1150.22 1216.95 L1150.81 1216.95 L1151.39 1216.95 L1151.98 1216.95 L1152.57 1216.95 L1153.15 1216.95 L1153.74 1216.95 L1154.33 1216.95 L1154.91 1216.95 L1155.5 1216.95 L1156.09 1216.95 L1156.67 1216.95 L1157.26 1216.95 L1157.84 1216.95 L1158.43 1216.95 L1159.02 1216.95 L1159.6 1216.95 L1160.19 1216.95 L1160.78 1216.95 L1161.36 1216.95 L1161.95 1216.95 L1162.54 1216.95 L1163.12 1216.95 L1163.71 1216.95 L1164.29 1216.95 L1164.88 1216.95 L1165.47 1216.95 L1166.05 1216.95 L1166.64 1216.95 L1167.23 1216.95 L1167.81 1216.95 L1168.4 1216.95 L1168.99 1216.95 L1169.57 1216.95 L1170.16 1216.95 L1170.75 1216.95 L1171.33 1216.95 L1171.92 1216.95 L1172.5 1216.95 L1173.09 1216.95 L1173.68 1216.95 L1174.26 1216.95 L1174.85 1216.95 L1175.44 1216.95 L1176.02 1216.95 L1176.61 1216.95 L1177.2 1216.95 L1177.78 1216.95 L1178.37 1216.95 L1178.96 1216.95 L1179.54 1216.95 L1180.13 1216.95 L1180.71 1216.95 L1181.3 1216.95 L1181.89 1216.95 L1182.47 1216.95 L1183.06 1216.95 L1183.65 1216.95 L1184.23 1216.95 L1184.82 1216.95 L1185.41 1216.95 L1185.99 1216.95 L1186.58 1216.95 L1187.16 1216.95 L1187.75 1216.95 L1188.34 1216.95 L1188.92 1216.95 L1189.51 1216.95 L1190.1 1216.95 L1190.68 1216.95 L1191.27 1216.95 L1191.86 1216.95 L1192.44 1216.95 L1193.03 1216.95 L1193.62 1216.95 L1194.2 1216.95 L1194.79 1216.95 L1195.37 1216.95 L1195.96 1216.95 L1196.55 1216.95 L1197.13 1216.95 L1197.72 1216.95 L1198.31 1216.95 L1198.89 1216.95 L1199.48 1216.95 L1200.07 1216.95 L1200.65 1216.95 L1201.24 1216.95 L1201.83 1216.95 L1202.41 1216.95 L1203 1216.95 L1203.58 1216.95 L1204.17 1216.95 L1204.76 1216.95 L1205.34 1216.95 L1205.93 1216.95 L1206.52 1216.95 L1207.1 1216.95 L1207.69 1216.95 L1208.28 1216.95 L1208.86 1216.95 L1209.45 1216.95 L1210.03 1216.95 L1210.62 1216.95 L1211.21 1216.95 L1211.79 1216.95 L1212.38 1216.95 L1212.97 1216.95 L1213.55 1216.95 L1214.14 1216.95 L1214.73 1216.95 L1215.31 1216.95 L1215.9 1216.95 L1216.49 1216.95 L1217.07 1216.95 L1217.66 1216.95 L1218.24 1216.95 L1218.83 1216.95 L1219.42 1216.95 L1220 1216.95 L1220.59 1216.95 L1221.18 1216.95 L1221.76 1216.95 L1222.35 1216.95 L1222.94 1216.95 L1223.52 1216.95 L1224.11 1216.95 L1224.7 1216.95 L1225.28 1216.95 L1225.87 1216.95 L1226.45 1216.95 L1227.04 1216.95 L1227.63 1216.95 L1228.21 1216.95 L1228.8 1216.95 L1229.39 1216.95 L1229.97 1216.95 L1230.56 1216.95 L1231.15 1216.95 L1231.73 1216.95 L1232.32 1216.95 L1232.91 1216.95 L1233.49 1216.95 L1234.08 1216.95 L1234.66 1216.95 L1235.25 1216.95 L1235.84 1216.95 L1236.42 1216.95 L1237.01 1216.95 L1237.6 1216.95 L1238.18 1216.95 L1238.77 1216.95 L1239.36 1216.95 L1239.94 1216.95 L1240.53 1216.95 L1241.11 1216.95 L1241.7 1216.95 L1242.29 1216.95 L1242.87 1216.95 L1243.46 1216.95 L1244.05 1216.95 L1244.63 1216.95 L1245.22 1216.95 L1245.81 1216.95 L1246.39 1216.95 L1246.98 1216.95 L1247.57 1216.95 L1248.15 1216.95 L1248.74 1216.95 L1249.32 1216.95 L1249.91 1216.95 L1250.5 1216.95 L1251.08 1216.95 L1251.67 1216.95 L1252.26 1216.95 L1252.84 1216.95 L1253.43 1216.95 L1254.02 1216.95 L1254.6 1216.95 L1255.19 1216.95 L1255.78 1216.95 L1256.36 1216.95 L1256.95 1216.95 L1257.53 1216.95 L1258.12 1216.95 L1258.71 1216.95 L1259.29 1216.95 L1259.88 1216.95 L1260.47 1216.95 L1261.05 1216.95 L1261.64 1216.95 L1262.23 1216.95 L1262.81 1216.95 L1263.4 1216.95 L1263.98 1216.95 L1264.57 1216.95 L1265.16 1216.95 L1265.74 1216.95 L1266.33 1216.95 L1266.92 1216.95 L1267.5 1216.95 L1268.09 1216.95 L1268.68 1216.95 L1269.26 1216.95 L1269.85 1216.95 L1270.44 1216.95 L1271.02 1216.95 L1271.61 1216.95 L1272.19 1216.95 L1272.78 1216.95 L1273.37 1216.95 L1273.95 1216.95 L1274.54 1216.95 L1275.13 1216.95 L1275.71 1216.95 L1276.3 1216.95 L1276.89 1216.95 L1277.47 1216.95 L1278.06 1216.95 L1278.65 1216.95 L1279.23 1216.95 L1279.82 1216.95 L1280.4 1216.95 L1280.99 1216.95 L1281.58 1216.95 L1282.16 1216.95 L1282.75 1216.95 L1283.34 1216.95 L1283.92 1216.95 L1284.51 1216.95 L1285.1 1216.95 L1285.68 1216.95 L1286.27 1216.95 L1286.86 1216.95 L1287.44 1216.95 L1288.03 1216.95 L1288.61 1216.95 L1289.2 1216.95 L1289.79 1216.95 L1290.37 1216.95 L1290.96 1216.95 L1291.55 1216.95 L1292.13 1216.95 L1292.72 1216.95 L1293.31 1216.95 L1293.89 1216.95 L1294.48 1216.95 L1295.06 1216.95 L1295.65 1216.95 L1296.24 1216.95 L1296.82 1216.95 L1297.41 1216.95 L1298 1216.95 L1298.58 1216.95 L1299.17 1216.95 L1299.76 1216.95 L1300.34 1216.95 L1300.93 1216.95 L1301.52 1216.95 L1302.1 1216.95 L1302.69 1216.95 L1303.27 1216.95 L1303.86 1216.95 L1304.45 1216.95 L1305.03 1216.95 L1305.62 1216.95 L1306.21 1216.95 L1306.79 1216.95 L1307.38 1216.95 L1307.97 1216.95 L1308.55 1216.95 L1309.14 1216.95 L1309.73 1216.95 L1310.31 1216.95 L1310.9 1216.95 L1311.48 1216.95 L1312.07 1216.95 L1312.66 1216.95 L1313.24 1216.95 L1313.83 1216.95 L1314.42 1216.95 L1315 1216.95 L1315.59 1216.95 L1316.18 1216.95 L1316.76 1216.95 L1317.35 1216.95 L1317.93 1216.95 L1318.52 1216.95 L1319.11 1216.95 L1319.69 1216.95 L1320.28 1216.95 L1320.87 1216.95 L1321.45 1216.95 L1322.04 1216.95 L1322.63 1216.95 L1323.21 1216.95 L1323.8 1216.95 L1324.39 1216.95 L1324.97 1216.95 L1325.56 1216.95 L1326.14 1216.95 L1326.73 1216.95 L1327.32 1216.95 L1327.9 1216.95 L1328.49 1216.95 L1329.08 1216.95 L1329.66 1216.95 L1330.25 1216.95 L1330.84 1216.95 L1331.42 1216.95 L1332.01 1216.95 L1332.6 1216.95 L1333.18 1216.95 L1333.77 1216.95 L1334.35 1216.95 L1334.94 1216.95 L1335.53 1216.95 L1336.11 1216.95 L1336.7 1216.95 L1337.29 1216.95 L1337.87 1216.95 L1338.46 1216.95 L1339.05 1216.95 L1339.63 1216.95 L1340.22 1216.95 L1340.8 1216.95 L1341.39 1216.95 L1341.98 1216.95 L1342.56 1216.95 L1343.15 1216.95 L1343.74 1216.95 L1344.32 1216.95 L1344.91 1216.95 L1345.5 1216.95 L1346.08 1216.95 L1346.67 1216.95 L1347.26 1216.95 L1347.84 1216.95 L1348.43 1216.95 L1349.01 1216.95 L1349.6 1216.95 L1350.19 1216.95 L1350.77 1216.95 L1351.36 1216.95 L1351.95 1216.95 L1352.53 1216.95 L1353.12 1216.95 L1353.71 1216.95 L1354.29 1216.95 L1354.88 1216.95 L1355.47 1216.95 L1356.05 1216.95 L1356.64 1216.95 L1357.22 1216.95 L1357.81 1216.95 L1358.4 1216.95 L1358.98 1216.95 L1359.57 1216.95 L1360.16 1216.95 L1360.74 1216.95 L1361.33 1216.95 L1361.92 1216.95 L1362.5 1216.95 L1363.09 1216.95 L1363.68 1216.95 L1364.26 1216.95 L1364.85 1216.95 L1365.43 1216.95 L1366.02 1216.95 L1366.61 1216.95 L1367.19 1216.95 L1367.78 1216.95 L1368.37 1216.95 L1368.95 1216.95 L1369.54 1216.95 L1370.13 1216.95 L1370.71 1216.95 L1371.3 1216.95 L1371.88 1216.95 L1372.47 1216.95 L1373.06 1216.95 L1373.64 1216.95 L1374.23 1216.95 L1374.82 1216.95 L1375.4 1216.95 L1375.99 1216.95 L1376.58 1216.95 L1377.16 1216.95 L1377.75 1216.95 L1378.34 1216.95 L1378.92 1216.95 L1379.51 1216.95 L1380.09 1216.95 L1380.68 1216.95 L1381.27 1216.95 L1381.85 1216.95 L1382.44 1216.95 L1383.03 1216.95 L1383.61 1216.95 L1384.2 1216.95 L1384.79 1216.95 L1385.37 1216.95 L1385.96 1216.95 L1386.55 1216.95 L1387.13 1216.95 L1387.72 1216.95 L1388.3 1216.95 L1388.89 1216.95 L1389.48 1216.95 L1390.06 1216.95 L1390.65 1216.95 L1391.24 1216.95 L1391.82 1216.95 L1392.41 1216.95 L1393 1216.95 L1393.58 1216.95 L1394.17 1216.95 L1394.75 1216.95 L1395.34 1216.95 L1395.93 1216.95 L1396.51 1216.95 L1397.1 1216.95 L1397.69 1216.95 L1398.27 1216.95 L1398.86 1216.95 L1399.45 1216.95 L1400.03 1216.95 L1400.62 1216.95 L1401.21 1216.95 L1401.79 1216.95 L1402.38 1216.95 L1402.96 1216.95 L1403.55 1216.95 L1404.14 1216.95 L1404.72 1216.95 L1405.31 1216.95 L1405.9 1216.95 L1406.48 1216.95 L1407.07 1216.95 L1407.66 1216.95 L1408.24 1216.95 L1408.83 1216.95 L1409.42 1216.95 L1410 1216.95 L1410.59 1216.95 L1411.17 1216.95 L1411.76 1216.95 L1412.35 1216.95 L1412.93 1216.95 L1413.52 1216.95 L1414.11 1216.95 L1414.69 1216.95 L1415.28 1216.95 L1415.87 1216.95 L1416.45 1216.95 L1417.04 1216.95 L1417.63 1216.95 L1418.21 1216.95 L1418.8 1216.95 L1419.38 1216.95 L1419.97 1216.95 L1420.56 1216.95 L1421.14 1216.95 L1421.73 1216.95 L1422.32 1216.95 L1422.9 1216.95 L1423.49 1216.95 L1424.08 1216.95 L1424.66 1216.95 L1425.25 1216.95 L1425.83 1216.95 L1426.42 1216.95 L1427.01 1216.95 L1427.59 1216.95 L1428.18 1216.95 L1428.77 1216.95 L1429.35 1216.95 L1429.94 1216.95 L1430.53 1216.95 L1431.11 1216.95 L1431.7 1216.95 L1432.29 1216.95 L1432.87 1216.95 L1433.46 1216.95 L1434.04 1216.95 L1434.63 1216.95 L1435.22 1216.95 L1435.8 1216.95 L1436.39 1216.95 L1436.98 1216.95 L1437.56 1216.95 L1438.15 1216.95 L1438.74 1216.95 L1439.32 1216.95 L1439.91 1216.95 L1440.5 1216.95 L1441.08 1216.95 L1441.67 1216.95 L1442.25 1216.95 L1442.84 1216.95 L1443.43 1216.95 L1444.01 1216.95 L1444.6 1216.95 L1445.19 1216.95 L1445.77 1216.95 L1446.36 1216.95 L1446.95 1216.95 L1447.53 1216.95 L1448.12 1216.95 L1448.7 1216.95 L1449.29 1216.95 L1449.88 1216.95 L1450.46 1216.95 L1451.05 1216.95 L1451.64 1216.95 L1452.22 1216.95 L1452.81 1216.95 L1453.4 1216.95 L1453.98 1216.95 L1454.57 1216.95 L1455.16 1216.95 L1455.74 1216.95 L1456.33 1216.95 L1456.91 1216.95 L1457.5 1216.95 L1458.09 1216.95 L1458.67 1216.95 L1459.26 1216.95 L1459.85 1216.95 L1460.43 1216.95 L1461.02 1216.95 L1461.61 1216.95 L1462.19 1216.95 L1462.78 1216.95 L1463.37 1216.95 L1463.95 1216.95 L1464.54 1216.95 L1465.12 1216.95 L1465.71 1216.95 L1466.3 1216.95 L1466.88 1216.95 L1467.47 1216.95 L1468.06 1216.95 L1468.64 1216.95 L1469.23 1216.95 L1469.82 1216.95 L1470.4 1216.95 L1470.99 1216.95 L1471.57 1216.95 L1472.16 1216.95 L1472.75 1216.95 L1473.33 1216.95 L1473.92 1216.95 L1474.51 1216.95 L1475.09 1216.95 L1475.68 1216.95 L1476.27 1216.95 L1476.85 1216.95 L1477.44 1216.95 L1478.03 1216.95 L1478.61 1216.95 L1479.2 1216.95 L1479.78 1216.95 L1480.37 1216.95 L1480.96 1216.95 L1481.54 1216.95 L1482.13 1216.95 L1482.72 1216.95 L1483.3 1216.95 L1483.89 1216.95 L1484.48 1216.95 L1485.06 1216.95 L1485.65 1216.95 L1486.24 1216.95 L1486.82 1216.95 L1487.41 1216.95 L1487.99 1216.95 L1488.58 1216.95 L1489.17 1216.95 L1489.75 1216.95 L1490.34 1216.95 L1490.93 1216.95 L1491.51 1216.95 L1492.1 1216.95 L1492.69 1216.95 L1493.27 1216.95 L1493.86 1216.95 L1494.45 1216.95 L1495.03 1216.95 L1495.62 1216.95 L1496.2 1216.95 L1496.79 1216.95 L1497.38 1216.95 L1497.96 1216.95 L1498.55 1216.95 L1499.14 1216.95 L1499.72 1216.95 L1500.31 1216.95 L1500.9 1216.95 L1501.48 1216.95 L1502.07 1216.95 L1502.65 1216.95 L1503.24 1216.95 L1503.83 1216.95 L1504.41 1216.95 L1505 1216.95 L1505.59 1216.95 L1506.17 1216.95 L1506.76 1216.95 L1507.35 1216.95 L1507.93 1216.95 L1508.52 1216.95 L1509.11 1216.95 L1509.69 1216.95 L1510.28 1216.95 L1510.86 1216.95 L1511.45 1216.95 L1512.04 1216.95 L1512.62 1216.95 L1513.21 1216.95 L1513.8 1216.95 L1514.38 1216.95 L1514.97 1216.95 L1515.56 1216.95 L1516.14 1216.95 L1516.73 1216.95 L1517.32 1216.95 L1517.9 1216.95 L1518.49 1216.95 L1519.07 1216.95 L1519.66 1216.95 L1520.25 1216.95 L1520.83 1216.95 L1521.42 1216.95 L1522.01 1216.95 L1522.59 1216.95 L1523.18 1216.95 L1523.77 1216.95 L1524.35 1216.95 L1524.94 1216.95 L1525.52 1216.95 L1526.11 1216.95 L1526.7 1216.95 L1527.28 1216.95 L1527.87 1216.95 L1528.46 1216.95 L1529.04 1216.95 L1529.63 1216.95 L1530.22 1216.95 L1530.8 1216.95 L1531.39 1216.95 L1531.98 1216.95 L1532.56 1216.95 L1533.15 1216.95 L1533.73 1216.95 L1534.32 1216.95 L1534.91 1216.95 L1535.49 1216.95 L1536.08 1216.95 L1536.67 1216.95 L1537.25 1216.95 L1537.84 1216.95 L1538.43 1216.95 L1539.01 1216.95 L1539.6 1216.95 L1540.19 1216.95 L1540.77 1216.95 L1541.36 1216.95 L1541.94 1216.95 L1542.53 1216.95 L1543.12 1216.95 L1543.7 1216.95 L1544.29 1216.95 L1544.88 1216.95 L1545.46 1216.95 L1546.05 1216.95 L1546.64 1216.95 L1547.22 1216.95 L1547.81 1216.95 L1548.4 1216.95 L1548.98 1216.95 L1549.57 1216.95 L1550.15 1216.95 L1550.74 1216.95 L1551.33 1216.95 L1551.91 1216.95 L1552.5 1216.95 L1553.09 1216.95 L1553.67 1216.95 L1554.26 1216.95 L1554.85 1216.95 L1555.43 1216.95 L1556.02 1216.95 L1556.6 1216.95 L1557.19 1216.95 L1557.78 1216.95 L1558.36 1216.95 L1558.95 1216.95 L1559.54 1216.95 L1560.12 1216.95 L1560.71 1216.95 L1561.3 1216.95 L1561.88 1216.95 L1562.47 1216.95 L1563.06 1216.95 L1563.64 1216.95 L1564.23 1216.95 L1564.81 1216.95 L1565.4 1216.95 L1565.99 1216.95 L1566.57 1216.95 L1567.16 1216.95 L1567.75 1216.95 L1568.33 1216.95 L1568.92 1216.95 L1569.51 1216.95 L1570.09 1216.95 L1570.68 1216.95 L1571.27 1216.95 L1571.85 1216.95 L1572.44 1216.95 L1573.02 1216.95 L1573.61 1216.95 L1574.2 1216.95 L1574.78 1216.95 L1575.37 1216.95 L1575.96 1216.95 L1576.54 1216.95 L1577.13 1216.95 L1577.72 1216.95 L1578.3 1216.95 L1578.89 1216.95 L1579.47 1216.95 L1580.06 1216.95 L1580.65 1216.95 L1581.23 1216.95 L1581.82 1216.95 L1582.41 1216.95 L1582.99 1216.95 L1583.58 1216.95 L1584.17 1216.95 L1584.75 1216.95 L1585.34 1216.95 L1585.93 1216.95 L1586.51 1216.95 L1587.1 1216.95 L1587.68 1216.95 L1588.27 1216.95 L1588.86 1216.95 L1589.44 1216.95 L1590.03 1216.95 L1590.62 1216.95 L1591.2 1216.95 L1591.79 1216.95 L1592.38 1216.95 L1592.96 1216.95 L1593.55 1216.95 L1594.14 1216.95 L1594.72 1216.95 L1595.31 1216.95 L1595.89 1216.95 L1596.48 1216.95 L1597.07 1216.95 L1597.65 1216.95 L1598.24 1216.95 L1598.83 1216.95 L1599.41 1216.95 L1600 1216.95 L1600.59 1216.95 L1601.17 1216.95 L1601.76 1216.95 L1602.34 1216.95 L1602.93 1216.95 L1603.52 1216.95 L1604.1 1216.95 L1604.69 1216.95 L1605.28 1216.95 L1605.86 1216.95 L1606.45 1216.95 L1607.04 1216.95 L1607.62 1216.95 L1608.21 1216.95 L1608.8 1216.95 L1609.38 1216.95 L1609.97 1216.95 L1610.55 1216.95 L1611.14 1216.95 L1611.73 1216.95 L1612.31 1216.95 L1612.9 1216.95 L1613.49 1216.95 L1614.07 1216.95 L1614.66 1216.95 L1615.25 1216.95 L1615.83 1216.95 L1616.42 1216.95 L1617.01 1216.95 L1617.59 1216.95 L1618.18 1216.95 L1618.76 1216.95 L1619.35 1216.95 L1619.94 1216.95 L1620.52 1216.95 L1621.11 1216.95 L1621.7 1216.95 L1622.28 1216.95 L1622.87 1216.95 L1623.46 1216.95 L1624.04 1216.95 L1624.63 1216.95 L1625.22 1216.95 L1625.8 1216.95 L1626.39 1216.95 L1626.97 1216.95 L1627.56 1216.95 L1628.15 1216.95 L1628.73 1216.95 L1629.32 1216.95 L1629.91 1216.95 L1630.49 1216.95 L1631.08 1216.95 L1631.67 1216.95 L1632.25 1216.95 L1632.84 1216.95 L1633.42 1216.95 L1634.01 1216.95 L1634.6 1216.95 L1635.18 1216.95 L1635.77 1216.95 L1636.36 1216.95 L1636.94 1216.95 L1637.53 1216.95 L1638.12 1216.95 L1638.7 1216.95 L1639.29 1216.95 L1639.88 1216.95 L1640.46 1216.95 L1641.05 1216.95 L1641.63 1216.95 L1642.22 1216.95 L1642.81 1216.95 L1643.39 1216.95 L1643.98 1216.95 L1644.57 1216.95 L1645.15 1216.95 L1645.74 1216.95 L1646.33 1216.95 L1646.91 1216.95 L1647.5 1216.95 L1648.09 1216.95 L1648.67 1216.95 L1649.26 1216.95 L1649.84 1216.95 L1650.43 1216.95 L1651.02 1216.95 L1651.6 1216.95 L1652.19 1216.95 L1652.78 1216.95 L1653.36 1216.95 L1653.95 1216.95 L1654.54 1216.95 L1655.12 1216.95 L1655.71 1216.95 L1656.29 1216.95 L1656.88 1216.95 L1657.47 1216.95 L1658.05 1216.95 L1658.64 1216.95 L1659.23 1216.95 L1659.81 1216.95 L1660.4 1216.95 L1660.99 1216.95 L1661.57 1216.95 L1662.16 1216.95 L1662.75 1216.95 L1663.33 1216.95 L1663.92 1216.95 L1664.5 1216.95 L1665.09 1216.95 L1665.68 1216.95 L1666.26 1216.95 L1666.85 1216.95 L1667.44 1216.95 L1668.02 1216.95 L1668.61 1216.95 L1669.2 1216.95 L1669.78 1216.95 L1670.37 1216.95 L1670.96 1216.95 L1671.54 1216.95 L1672.13 1216.95 L1672.71 1216.95 L1673.3 1216.95 L1673.89 1216.95 L1674.47 1216.95 L1675.06 1216.95 L1675.65 1216.95 L1676.23 1216.95 L1676.82 1216.95 L1677.41 1216.95 L1677.99 1216.95 L1678.58 1216.95 L1679.17 1216.95 L1679.75 1216.95 L1680.34 1216.95 L1680.92 1216.95 L1681.51 1216.95 L1682.1 1216.95 L1682.68 1216.95 L1683.27 1216.95 L1683.86 1216.95 L1684.44 1216.95 L1685.03 1216.95 L1685.62 1216.95 L1686.2 1216.95 L1686.79 1216.95 L1687.37 1216.95 L1687.96 1216.95 L1688.55 1216.95 L1689.13 1216.95 L1689.72 1216.95 L1690.31 1216.95 L1690.89 1216.95 L1691.48 1216.95 L1692.07 1216.95 L1692.65 1216.95 L1693.24 1216.95 L1693.83 1216.95 L1694.41 1216.95 L1695 1216.95 L1695.58 1216.95 L1696.17 1216.95 L1696.76 1216.95 L1697.34 1216.95 L1697.93 1216.95 L1698.52 1216.95 L1699.1 1216.95 L1699.69 1216.95 L1700.28 1216.95 L1700.86 1216.95 L1701.45 1216.95 L1702.04 1216.95 L1702.62 1216.95 L1703.21 1216.95 L1703.79 1216.95 L1704.38 1216.95 L1704.97 1216.95 L1705.55 1216.95 L1706.14 1216.95 L1706.73 1216.95 L1707.31 1216.95 L1707.9 1216.95 L1708.49 1216.95 L1709.07 1216.95 L1709.66 1216.95 L1710.24 1216.95 L1710.83 1216.95 L1711.42 1216.95 L1712 1216.95 L1712.59 1216.95 L1713.18 1216.95 L1713.76 1216.95 L1714.35 1216.95 L1714.94 1216.95 L1715.52 1216.95 L1716.11 1216.95 L1716.7 1216.95 L1717.28 1216.95 L1717.87 1216.95 L1718.45 1216.95 L1719.04 1216.95 L1719.63 1216.95 L1720.21 1216.95 L1720.8 1216.95 L1721.39 1216.95 L1721.97 1216.95 L1722.56 1216.95 L1723.15 1216.95 L1723.73 1216.95 L1724.32 1216.95 L1724.91 1216.95 L1725.49 1216.95 L1726.08 1216.95 L1726.66 1216.95 L1727.25 1216.95 L1727.84 1216.95 L1728.42 1216.95 L1729.01 1216.95 L1729.6 1216.95 L1730.18 1216.95 L1730.77 1216.95 L1731.36 1216.95 L1731.94 1216.95 L1732.53 1216.95 L1733.11 1216.95 L1733.7 1216.95 L1734.29 1216.95 L1734.87 1216.95 L1735.46 1216.95 L1736.05 1216.95 L1736.63 1216.95 L1737.22 1216.95 L1737.81 1216.95 L1738.39 1216.95 L1738.98 1216.95 L1739.57 1216.95 L1740.15 1216.95 L1740.74 1216.95 L1741.32 1216.95 L1741.91 1216.95 L1742.5 1216.95 L1743.08 1216.95 L1743.67 1216.95 L1744.26 1216.95 L1744.84 1216.95 L1745.43 1216.95 L1746.02 1216.95 L1746.6 1216.95 L1747.19 1216.95 L1747.78 1216.95 L1748.36 1216.95 L1748.95 1216.95 L1749.53 1216.95 L1750.12 1216.95 L1750.71 1216.95 L1751.29 1216.95 L1751.88 1216.95 L1752.47 1216.95 L1753.05 1216.95 L1753.64 1216.95 L1754.23 1216.95 L1754.81 1216.95 L1755.4 1216.95 L1755.99 1216.95 L1756.57 1216.95 L1757.16 1216.95 L1757.74 1216.95 L1758.33 1216.95 L1758.92 1216.95 L1759.5 1216.95 L1760.09 1216.95 L1760.68 1216.95 L1761.26 1216.95 L1761.85 1216.95 L1762.44 1216.95 L1763.02 1216.95 L1763.61 1216.95 L1764.19 1216.95 L1764.78 1216.95 L1765.37 1216.95 L1765.95 1216.95 L1766.54 1216.95 L1767.13 1216.95 L1767.71 1216.95 L1768.3 1216.95 L1768.89 1216.95 L1769.47 1216.95 L1770.06 1216.95 L1770.65 1216.95 L1771.23 1216.95 L1771.82 1216.95 L1772.4 1216.95 L1772.99 1216.95 L1773.58 1216.95 L1774.16 1216.95 L1774.75 1216.95 L1775.34 1216.95 L1775.92 1216.95 L1776.51 1216.95 L1777.1 1216.95 L1777.68 1216.95 L1778.27 1216.95 L1778.86 1216.95 L1779.44 1216.95 L1780.03 1216.95 L1780.61 1216.95 L1781.2 1216.95 L1781.79 1216.95 L1782.37 1216.95 L1782.96 1216.95 L1783.55 1216.95 L1784.13 1216.95 L1784.72 1216.95 L1785.31 1216.95 L1785.89 1216.95 L1786.48 1216.95 L1787.06 1216.95 L1787.65 1216.95 L1788.24 1216.95 L1788.82 1216.95 L1789.41 1216.95 L1790 1216.95 L1790.58 1216.95 L1791.17 1216.95 L1791.76 1216.95 L1792.34 1216.95 L1792.93 1216.95 L1793.52 1216.95 L1794.1 1216.95 L1794.69 1216.95 L1795.27 1216.95 L1795.86 1216.95 L1796.45 1216.95 L1797.03 1216.95 L1797.62 1216.95 L1798.21 1216.95 L1798.79 1216.95 L1799.38 1216.95 L1799.97 1216.95 L1800.55 1216.95 L1801.14 1216.95 L1801.73 1216.95 L1802.31 1216.95 L1802.9 1216.95 L1803.48 1216.95 L1804.07 1216.95 L1804.66 1216.95 L1805.24 1216.95 L1805.83 1216.95 L1806.42 1216.95 L1807 1216.95 L1807.59 1216.95 L1808.18 1216.95 L1808.76 1216.95 L1809.35 1216.95 L1809.94 1216.95 L1810.52 1216.95 L1811.11 1216.95 L1811.69 1216.95 L1812.28 1216.95 L1812.87 1216.95 L1813.45 1216.95 L1814.04 1216.95 L1814.63 1216.95 L1815.21 1216.95 L1815.8 1216.95 L1816.39 1216.95 L1816.97 1216.95 L1817.56 1216.95 L1818.14 1216.95 L1818.73 1216.95 L1819.32 1216.95 L1819.9 1216.95 L1820.49 1216.95 L1821.08 1216.95 L1821.66 1216.95 L1822.25 1216.95 L1822.84 1216.95 L1823.42 1216.95 L1824.01 1216.95 L1824.6 1216.95 L1825.18 1216.95 L1825.77 1216.95 L1826.35 1216.95 L1826.94 1216.95 L1827.53 1216.95 L1828.11 1216.95 L1828.7 1216.95 L1829.29 1216.95 L1829.87 1216.95 L1830.46 1216.95 L1831.05 1216.95 L1831.63 1216.95 L1832.22 1216.95 L1832.81 1216.95 L1833.39 1216.95 L1833.98 1216.95 L1834.56 1216.95 L1835.15 1216.95 L1835.74 1216.95 L1836.32 1216.95 L1836.91 1216.95 L1837.5 1216.95 L1838.08 1216.95 L1838.67 1216.95 L1839.26 1216.95 L1839.84 1216.95 L1840.43 1216.95 L1841.01 1216.95 L1841.6 1216.95 L1842.19 1216.95 L1842.77 1216.95 L1843.36 1216.95 L1843.95 1216.95 L1844.53 1216.95 L1845.12 1216.95 L1845.71 1216.95 L1846.29 1216.95 L1846.88 1216.95 L1847.47 1216.95 L1848.05 1216.95 L1848.64 1216.95 L1849.22 1216.95 L1849.81 1216.95 L1850.4 1216.95 L1850.98 1216.95 L1851.57 1216.95 L1852.16 1216.95 L1852.74 1216.95 L1853.33 1216.95 L1853.92 1216.95 L1854.5 1216.95 L1855.09 1216.95 L1855.68 1216.95 L1856.26 1216.95 L1856.85 1216.95 L1857.43 1216.95 L1858.02 1216.95 L1858.61 1216.95 L1859.19 1216.95 L1859.78 1216.95 L1860.37 1216.95 L1860.95 1216.95 L1861.54 1216.95 L1862.13 1216.95 L1862.71 1216.95 L1863.3 1216.95 L1863.88 1216.95 L1864.47 1216.95 L1865.06 1216.95 L1865.64 1216.95 L1866.23 1216.95 L1866.82 1216.95 L1867.4 1216.95 L1867.99 1216.95 L1868.58 1216.95 L1869.16 1216.95 L1869.75 1216.95 L1870.34 1216.95 L1870.92 1216.95 L1871.51 1216.95 L1872.09 1216.95 L1872.68 1216.95 L1873.27 1216.95 L1873.85 1216.95 L1874.44 1216.95 L1875.03 1216.95 L1875.61 1216.95 L1876.2 1216.95 L1876.79 1216.95 L1877.37 1216.95 L1877.96 1216.95 L1878.55 1216.95 L1879.13 1216.95 L1879.72 1216.95 L1880.3 1216.95 L1880.89 1216.95 L1881.48 1216.95 L1882.06 1216.95 L1882.65 1216.95 L1883.24 1216.95 L1883.82 1216.95 L1884.41 1216.95 L1885 1216.95 L1885.58 1216.95 L1886.17 1216.95 L1886.76 1216.95 L1887.34 1216.95 L1887.93 1216.95 L1888.51 1216.95 L1889.1 1216.95 L1889.69 1216.95 L1890.27 1216.95 L1890.86 1216.95 L1891.45 1216.95 L1892.03 1216.95 L1892.62 1216.95 L1893.21 1216.95 L1893.79 1216.95 L1894.38 1216.95 L1894.96 1216.95 L1895.55 1216.95 L1896.14 1216.95 L1896.72 1216.95 L1897.31 1216.95 L1897.9 1216.95 L1898.48 1216.95 L1899.07 1216.95 L1899.66 1216.95 L1900.24 1216.95 L1900.83 1216.95 L1901.42 1216.95 L1902 1216.95 L1902.59 1216.95 L1903.17 1216.95 L1903.76 1216.95 L1904.35 1216.95 L1904.93 1216.95 L1905.52 1216.95 L1906.11 1216.95 L1906.69 1216.95 L1907.28 1216.95 L1907.87 1216.95 L1908.45 1216.95 L1909.04 1216.95 L1909.63 1216.95 L1910.21 1216.95 L1910.8 1216.95 L1911.38 1216.95 L1911.97 1216.95 L1912.56 1216.95 L1913.14 1216.95 L1913.73 1216.95 L1914.32 1216.95 L1914.9 1216.95 L1915.49 1216.95 L1916.08 1216.95 L1916.66 1216.95 L1917.25 1216.95 L1917.83 1216.95 L1918.42 1216.95 L1919.01 1216.95 L1919.59 1216.95 L1920.18 1216.95 L1920.77 1216.95 L1921.35 1216.95 L1921.94 1216.95 L1922.53 1216.95 L1923.11 1216.95 L1923.7 1216.95 L1924.29 1216.95 L1924.87 1216.95 L1925.46 1216.95 L1926.04 1216.95 L1926.63 1216.95 L1927.22 1216.95 L1927.8 1216.95 L1928.39 1216.95 L1928.98 1216.95 L1929.56 1216.95 L1930.15 1216.95 L1930.74 1216.95 L1931.32 1216.95 L1931.91 1216.95 L1932.5 1216.95 L1933.08 1216.95 L1933.67 1216.95 L1934.25 1216.95 L1934.84 1216.95 L1935.43 1216.95 L1936.01 1216.95 L1936.6 1216.95 L1937.19 1216.95 L1937.77 1216.95 L1938.36 1216.95 L1938.95 1216.95 L1939.53 1216.95 L1940.12 1216.95 L1940.71 1216.95 L1941.29 1216.95 L1941.88 1216.95 L1942.46 1216.95 L1943.05 1216.95 L1943.64 1216.95 L1944.22 1216.95 L1944.81 1216.95 L1945.4 1216.95 L1945.98 1216.95 L1946.57 1216.95 L1947.16 1216.95 L1947.74 1216.95 L1948.33 1216.95 L1948.91 1216.95 L1949.5 1216.95 L1950.09 1216.95 L1950.67 1216.95 L1951.26 1216.95 L1951.85 1216.95 L1952.43 1216.95 L1953.02 1216.95 L1953.61 1216.95 L1954.19 1216.95 L1954.78 1216.95 L1955.37 1216.95 L1955.95 1216.95 L1956.54 1216.95 L1957.12 1216.95 L1957.71 1216.95 L1958.3 1216.95 L1958.88 1216.95 L1959.47 1216.95 L1960.06 1216.95 L1960.64 1216.95 L1961.23 1216.95 L1961.82 1216.95 L1962.4 1216.95 L1962.99 1216.95 L1963.58 1216.95 L1964.16 1216.95 L1964.75 1216.95 L1965.33 1216.95 L1965.92 1216.95 L1966.51 1216.95 L1967.09 1216.95 L1967.68 1216.95 L1968.27 1216.95 L1968.85 1216.95 L1969.44 1216.95 L1970.03 1216.95 L1970.61 1216.95 L1971.2 1216.95 L1971.78 1216.95 L1972.37 1216.95 L1972.96 1216.95 L1973.54 1216.95 L1974.13 1216.95 L1974.72 1216.95 L1975.3 1216.95 L1975.89 1216.95 L1976.48 1216.95 L1977.06 1216.95 L1977.65 1216.95 L1978.24 1216.95 L1978.82 1216.95 L1979.41 1216.95 L1979.99 1216.95 L1980.58 1216.95 L1981.17 1216.95 L1981.75 1216.95 L1982.34 1216.95 L1982.93 1216.95 L1983.51 1216.95 L1984.1 1216.95 L1984.69 1216.95 L1985.27 1216.95 L1985.86 1216.95 L1986.45 1216.95 L1987.03 1216.95 L1987.62 1216.95 L1988.2 1216.95 L1988.79 1216.95 L1989.38 1216.95 L1989.96 1216.95 L1990.55 1216.95 L1991.14 1216.95 L1991.72 1216.95 L1992.31 1216.95 L1992.9 1216.95 L1993.48 1216.95 L1994.07 1216.95 L1994.65 1216.95 L1995.24 1216.95 L1995.83 1216.95 L1996.41 1216.95 L1997 1216.95 L1997.59 1216.95 L1998.17 1216.95 L1998.76 1216.95 L1999.35 1216.95 L1999.93 1216.95 L2000.52 1216.95 L2001.11 1216.95 L2001.69 1216.95 L2002.28 1216.95 L2002.86 1216.95 L2003.45 1216.95 L2004.04 1216.95 L2004.62 1216.95 L2005.21 1216.95 L2005.8 1216.95 L2006.38 1216.95 L2006.97 1216.95 L2007.56 1216.95 L2008.14 1216.95 L2008.73 1216.95 L2009.32 1216.95 L2009.9 1216.95 L2010.49 1216.95 L2011.07 1216.95 L2011.66 1216.95 L2012.25 1216.95 L2012.83 1216.95 L2013.42 1216.95 L2014.01 1216.95 L2014.59 1216.95 L2015.18 1216.95 L2015.77 1216.95 L2016.35 1216.95 L2016.94 1216.95 L2017.53 1216.95 L2018.11 1216.95 L2018.7 1216.95 L2019.28 1216.95 L2019.87 1216.95 L2020.46 1216.95 L2021.04 1216.95 L2021.63 1216.95 L2022.22 1216.95 L2022.8 1216.95 L2023.39 1216.95 L2023.98 1216.95 L2024.56 1216.95 L2025.15 1216.95 L2025.73 1216.95 L2026.32 1216.95 L2026.91 1216.95 L2027.49 1216.95 L2028.08 1216.95 L2028.67 1216.95 L2029.25 1216.95 L2029.84 1216.95 L2030.43 1216.95 L2031.01 1216.95 L2031.6 1216.95 L2032.19 1216.95 L2032.77 1216.95 L2033.36 1216.95 L2033.94 1216.95 L2034.53 1216.95 L2035.12 1216.95 L2035.7 1216.95 L2036.29 1216.95 L2036.88 1216.95 L2037.46 1216.95 L2038.05 1216.95 L2038.64 1216.95 L2039.22 1216.95 L2039.81 1216.95 L2040.4 1216.95 L2040.98 1216.95 L2041.57 1216.95 L2042.15 1216.95 L2042.74 1216.95 L2043.33 1216.95 L2043.91 1216.95 L2044.5 1216.95 L2045.09 1216.95 L2045.67 1216.95 L2046.26 1216.95 L2046.85 1216.95 L2047.43 1216.95 L2048.02 1216.95 L2048.6 1216.95 L2049.19 1216.95 L2049.78 1216.95 L2050.36 1216.95 L2050.95 1216.95 L2051.54 1216.95 L2052.12 1216.95 L2052.71 1216.95 L2053.3 1216.95 L2053.88 1216.95 L2054.47 1216.95 L2055.06 1216.95 L2055.64 1216.95 L2056.23 1216.95 L2056.81 1216.95 L2057.4 1216.95 L2057.99 1216.95 L2058.57 1216.95 L2059.16 1216.95 L2059.75 1216.95 L2060.33 1216.95 L2060.92 1216.95 L2061.51 1216.95 L2062.09 1216.95 L2062.68 1216.95 L2063.27 1216.95 L2063.85 1216.95 L2064.44 1216.95 L2065.02 1216.95 L2065.61 1216.95 L2066.2 1216.95 L2066.78 1216.95 L2067.37 1216.95 L2067.96 1216.95 L2068.54 1216.95 L2069.13 1216.95 L2069.72 1216.95 L2070.3 1216.95 L2070.89 1216.95 L2071.48 1216.95 L2072.06 1216.95 L2072.65 1216.95 L2073.23 1216.95 L2073.82 1216.95 L2074.41 1216.95 L2074.99 1216.95 L2075.58 1216.95 L2076.17 1216.95 L2076.75 1216.95 L2077.34 1216.95 L2077.93 1216.95 L2078.51 1216.95 L2079.1 1216.95 L2079.68 1216.95 L2080.27 1216.95 L2080.86 1216.95 L2081.44 1216.95 L2082.03 1216.95 L2082.62 1216.95 L2083.2 1216.95 L2083.79 1216.95 L2084.38 1216.95 L2084.96 1216.95 L2085.55 1216.95 L2086.14 1216.95 L2086.72 1216.95 L2087.31 1216.95 L2087.89 1216.95 L2088.48 1216.95 L2089.07 1216.95 L2089.65 1216.95 L2090.24 1216.95 L2090.83 1216.95 L2091.41 1216.95 L2092 1216.95 L2092.59 1216.95 L2093.17 1216.95 L2093.76 1216.95 L2094.35 1216.95 L2094.93 1216.95 L2095.52 1216.95 L2096.1 1216.95 L2096.69 1216.95 L2097.28 1216.95 L2097.86 1216.95 L2098.45 1216.95 L2099.04 1216.95 L2099.62 1216.95 L2100.21 1216.95 L2100.8 1216.95 L2101.38 1216.95 L2101.97 1216.95 L2102.55 1216.95 L2103.14 1216.95 L2103.73 1216.95 L2104.31 1216.95 L2104.9 1216.95 L2105.49 1216.95 L2106.07 1216.95 L2106.66 1216.95 L2107.25 1216.95 L2107.83 1216.95 L2108.42 1216.95 L2109.01 1216.95 L2109.59 1216.95 L2110.18 1216.95 L2110.76 1216.95 L2111.35 1216.95 L2111.94 1216.95 L2112.52 1216.95 L2113.11 1216.95 L2113.7 1216.95 L2114.28 1216.95 L2114.87 1216.95 L2115.46 1216.95 L2116.04 1216.95 L2116.63 1216.95 L2117.22 1216.95 L2117.8 1216.95 L2118.39 1216.95 L2118.97 1216.95 L2119.56 1216.95 L2120.15 1216.95 L2120.73 1216.95 L2121.32 1216.95 L2121.91 1216.95 L2122.49 1216.95 L2123.08 1216.95 L2123.67 1216.95 L2124.25 1216.95 L2124.84 1216.95 L2125.42 1216.95 L2126.01 1216.95 L2126.6 1216.95 L2127.18 1216.95 L2127.77 1216.95 L2128.36 1216.95 L2128.94 1216.95 L2129.53 1216.95 L2130.12 1216.95 L2130.7 1216.95 L2131.29 1216.95 L2131.88 1216.95 L2132.46 1216.95 L2133.05 1216.95 L2133.63 1216.95 L2134.22 1216.95 L2134.81 1216.95 L2135.39 1216.95 L2135.98 1216.95 L2136.57 1216.95 L2137.15 1216.95 L2137.74 1216.95 L2138.33 1216.95 L2138.91 1216.95 L2139.5 1216.95 L2140.09 1216.95 L2140.67 1216.95 L2141.26 1216.95 L2141.84 1216.95 L2142.43 1216.95 L2143.02 1216.95 L2143.6 1216.95 L2144.19 1216.95 L2144.78 1216.95 L2145.36 1216.95 L2145.95 1216.95 L2146.54 1216.95 L2147.12 1216.95 L2147.71 1216.95 L2148.3 1216.95 L2148.88 1216.95 L2149.47 1216.95 L2150.05 1216.95 L2150.64 1216.95 L2151.23 1216.95 L2151.81 1216.95 L2152.4 1216.95 L2152.99 1216.95 L2153.57 1216.95 L2154.16 1216.95 L2154.75 1216.95 L2155.33 1216.95 L2155.92 1216.95 L2156.5 1216.95 L2157.09 1216.95 L2157.68 1216.95 L2158.26 1216.95 L2158.26 1216.82 L2157.68 1216.82 L2157.09 1216.82 L2156.5 1216.82 L2155.92 1216.82 L2155.33 1216.82 L2154.75 1216.82 L2154.16 1216.82 L2153.57 1216.82 L2152.99 1216.82 L2152.4 1216.82 L2151.81 1216.82 L2151.23 1216.82 L2150.64 1216.82 L2150.05 1216.82 L2149.47 1216.82 L2148.88 1216.82 L2148.3 1216.82 L2147.71 1216.82 L2147.12 1216.82 L2146.54 1216.82 L2145.95 1216.82 L2145.36 1216.82 L2144.78 1216.82 L2144.19 1216.82 L2143.6 1216.82 L2143.02 1216.82 L2142.43 1216.82 L2141.84 1216.82 L2141.26 1216.82 L2140.67 1216.82 L2140.09 1216.82 L2139.5 1216.82 L2138.91 1216.82 L2138.33 1216.82 L2137.74 1216.82 L2137.15 1216.82 L2136.57 1216.82 L2135.98 1216.82 L2135.39 1216.82 L2134.81 1216.82 L2134.22 1216.82 L2133.63 1216.82 L2133.05 1216.82 L2132.46 1216.82 L2131.88 1216.82 L2131.29 1216.82 L2130.7 1216.82 L2130.12 1216.82 L2129.53 1216.82 L2128.94 1216.82 L2128.36 1216.82 L2127.77 1216.82 L2127.18 1216.82 L2126.6 1216.82 L2126.01 1216.82 L2125.42 1216.82 L2124.84 1216.82 L2124.25 1216.82 L2123.67 1216.82 L2123.08 1216.82 L2122.49 1216.82 L2121.91 1216.82 L2121.32 1216.82 L2120.73 1216.82 L2120.15 1216.82 L2119.56 1216.82 L2118.97 1216.82 L2118.39 1216.82 L2117.8 1216.82 L2117.22 1216.82 L2116.63 1216.82 L2116.04 1216.82 L2115.46 1216.82 L2114.87 1216.82 L2114.28 1216.82 L2113.7 1216.82 L2113.11 1216.82 L2112.52 1216.82 L2111.94 1216.82 L2111.35 1216.82 L2110.76 1216.82 L2110.18 1216.82 L2109.59 1216.82 L2109.01 1216.82 L2108.42 1216.82 L2107.83 1216.82 L2107.25 1216.82 L2106.66 1216.82 L2106.07 1216.82 L2105.49 1216.82 L2104.9 1216.82 L2104.31 1216.82 L2103.73 1216.82 L2103.14 1216.82 L2102.55 1216.82 L2101.97 1216.82 L2101.38 1216.82 L2100.8 1216.82 L2100.21 1216.82 L2099.62 1216.82 L2099.04 1216.82 L2098.45 1216.82 L2097.86 1216.82 L2097.28 1216.82 L2096.69 1216.82 L2096.1 1216.82 L2095.52 1216.82 L2094.93 1216.82 L2094.35 1216.82 L2093.76 1216.82 L2093.17 1216.82 L2092.59 1216.82 L2092 1216.82 L2091.41 1216.82 L2090.83 1216.82 L2090.24 1216.82 L2089.65 1216.82 L2089.07 1216.82 L2088.48 1216.82 L2087.89 1216.82 L2087.31 1216.82 L2086.72 1216.82 L2086.14 1216.82 L2085.55 1216.82 L2084.96 1216.82 L2084.38 1216.82 L2083.79 1216.82 L2083.2 1216.82 L2082.62 1216.82 L2082.03 1216.82 L2081.44 1216.82 L2080.86 1216.82 L2080.27 1216.82 L2079.68 1216.82 L2079.1 1216.82 L2078.51 1216.82 L2077.93 1216.82 L2077.34 1216.82 L2076.75 1216.82 L2076.17 1216.82 L2075.58 1216.82 L2074.99 1216.82 L2074.41 1216.82 L2073.82 1216.82 L2073.23 1216.82 L2072.65 1216.82 L2072.06 1216.82 L2071.48 1216.82 L2070.89 1216.82 L2070.3 1216.82 L2069.72 1216.82 L2069.13 1216.82 L2068.54 1216.82 L2067.96 1216.82 L2067.37 1216.82 L2066.78 1216.82 L2066.2 1216.82 L2065.61 1216.82 L2065.02 1216.82 L2064.44 1216.82 L2063.85 1216.82 L2063.27 1216.82 L2062.68 1216.82 L2062.09 1216.82 L2061.51 1216.82 L2060.92 1216.82 L2060.33 1216.82 L2059.75 1216.82 L2059.16 1216.82 L2058.57 1216.82 L2057.99 1216.82 L2057.4 1216.82 L2056.81 1216.82 L2056.23 1216.82 L2055.64 1216.82 L2055.06 1216.82 L2054.47 1216.82 L2053.88 1216.82 L2053.3 1216.82 L2052.71 1216.82 L2052.12 1216.82 L2051.54 1216.82 L2050.95 1216.82 L2050.36 1216.82 L2049.78 1216.82 L2049.19 1216.82 L2048.6 1216.82 L2048.02 1216.82 L2047.43 1216.82 L2046.85 1216.82 L2046.26 1216.82 L2045.67 1216.82 L2045.09 1216.82 L2044.5 1216.82 L2043.91 1216.82 L2043.33 1216.82 L2042.74 1216.82 L2042.15 1216.82 L2041.57 1216.82 L2040.98 1216.82 L2040.4 1216.82 L2039.81 1216.82 L2039.22 1216.82 L2038.64 1216.82 L2038.05 1216.82 L2037.46 1216.82 L2036.88 1216.82 L2036.29 1216.82 L2035.7 1216.82 L2035.12 1216.82 L2034.53 1216.82 L2033.94 1216.82 L2033.36 1216.82 L2032.77 1216.82 L2032.19 1216.82 L2031.6 1216.82 L2031.01 1216.82 L2030.43 1216.82 L2029.84 1216.82 L2029.25 1216.82 L2028.67 1216.82 L2028.08 1216.82 L2027.49 1216.82 L2026.91 1216.82 L2026.32 1216.82 L2025.73 1216.82 L2025.15 1216.82 L2024.56 1216.82 L2023.98 1216.82 L2023.39 1216.82 L2022.8 1216.82 L2022.22 1216.82 L2021.63 1216.82 L2021.04 1216.82 L2020.46 1216.82 L2019.87 1216.82 L2019.28 1216.82 L2018.7 1216.82 L2018.11 1216.82 L2017.53 1216.82 L2016.94 1216.82 L2016.35 1216.82 L2015.77 1216.82 L2015.18 1216.82 L2014.59 1216.82 L2014.01 1216.82 L2013.42 1216.82 L2012.83 1216.82 L2012.25 1216.82 L2011.66 1216.82 L2011.07 1216.82 L2010.49 1216.82 L2009.9 1216.82 L2009.32 1216.82 L2008.73 1216.82 L2008.14 1216.82 L2007.56 1216.82 L2006.97 1216.82 L2006.38 1216.82 L2005.8 1216.82 L2005.21 1216.82 L2004.62 1216.82 L2004.04 1216.82 L2003.45 1216.82 L2002.86 1216.82 L2002.28 1216.82 L2001.69 1216.82 L2001.11 1216.82 L2000.52 1216.82 L1999.93 1216.82 L1999.35 1216.82 L1998.76 1216.82 L1998.17 1216.82 L1997.59 1216.82 L1997 1216.82 L1996.41 1216.82 L1995.83 1216.82 L1995.24 1216.82 L1994.65 1216.82 L1994.07 1216.82 L1993.48 1216.82 L1992.9 1216.82 L1992.31 1216.82 L1991.72 1216.82 L1991.14 1216.82 L1990.55 1216.82 L1989.96 1216.82 L1989.38 1216.82 L1988.79 1216.82 L1988.2 1216.82 L1987.62 1216.82 L1987.03 1216.82 L1986.45 1216.82 L1985.86 1216.82 L1985.27 1216.82 L1984.69 1216.82 L1984.1 1216.82 L1983.51 1216.82 L1982.93 1216.82 L1982.34 1216.82 L1981.75 1216.82 L1981.17 1216.82 L1980.58 1216.82 L1979.99 1216.82 L1979.41 1216.82 L1978.82 1216.82 L1978.24 1216.82 L1977.65 1216.82 L1977.06 1216.82 L1976.48 1216.82 L1975.89 1216.82 L1975.3 1216.82 L1974.72 1216.82 L1974.13 1216.82 L1973.54 1216.82 L1972.96 1216.82 L1972.37 1216.82 L1971.78 1216.82 L1971.2 1216.82 L1970.61 1216.82 L1970.03 1216.82 L1969.44 1216.82 L1968.85 1216.82 L1968.27 1216.82 L1967.68 1216.82 L1967.09 1216.82 L1966.51 1216.82 L1965.92 1216.82 L1965.33 1216.82 L1964.75 1216.82 L1964.16 1216.82 L1963.58 1216.82 L1962.99 1216.82 L1962.4 1216.82 L1961.82 1216.82 L1961.23 1216.82 L1960.64 1216.82 L1960.06 1216.82 L1959.47 1216.82 L1958.88 1216.82 L1958.3 1216.82 L1957.71 1216.82 L1957.12 1216.82 L1956.54 1216.82 L1955.95 1216.82 L1955.37 1216.82 L1954.78 1216.82 L1954.19 1216.82 L1953.61 1216.82 L1953.02 1216.82 L1952.43 1216.82 L1951.85 1216.82 L1951.26 1216.82 L1950.67 1216.82 L1950.09 1216.82 L1949.5 1216.82 L1948.91 1216.82 L1948.33 1216.82 L1947.74 1216.82 L1947.16 1216.82 L1946.57 1216.82 L1945.98 1216.82 L1945.4 1216.82 L1944.81 1216.82 L1944.22 1216.82 L1943.64 1216.82 L1943.05 1216.82 L1942.46 1216.82 L1941.88 1216.82 L1941.29 1216.82 L1940.71 1216.82 L1940.12 1216.82 L1939.53 1216.82 L1938.95 1216.82 L1938.36 1216.82 L1937.77 1216.82 L1937.19 1216.82 L1936.6 1216.82 L1936.01 1216.82 L1935.43 1216.82 L1934.84 1216.82 L1934.25 1216.82 L1933.67 1216.82 L1933.08 1216.82 L1932.5 1216.82 L1931.91 1216.82 L1931.32 1216.82 L1930.74 1216.82 L1930.15 1216.82 L1929.56 1216.82 L1928.98 1216.82 L1928.39 1216.82 L1927.8 1216.82 L1927.22 1216.82 L1926.63 1216.82 L1926.04 1216.82 L1925.46 1216.82 L1924.87 1216.82 L1924.29 1216.82 L1923.7 1216.82 L1923.11 1216.82 L1922.53 1216.82 L1921.94 1216.82 L1921.35 1216.82 L1920.77 1216.82 L1920.18 1216.82 L1919.59 1216.82 L1919.01 1216.82 L1918.42 1216.82 L1917.83 1216.82 L1917.25 1216.82 L1916.66 1216.82 L1916.08 1216.82 L1915.49 1216.82 L1914.9 1216.82 L1914.32 1216.82 L1913.73 1216.82 L1913.14 1216.82 L1912.56 1216.82 L1911.97 1216.82 L1911.38 1216.82 L1910.8 1216.82 L1910.21 1216.82 L1909.63 1216.82 L1909.04 1216.82 L1908.45 1216.82 L1907.87 1216.82 L1907.28 1216.82 L1906.69 1216.82 L1906.11 1216.82 L1905.52 1216.82 L1904.93 1216.82 L1904.35 1216.82 L1903.76 1216.82 L1903.17 1216.82 L1902.59 1216.82 L1902 1216.82 L1901.42 1216.82 L1900.83 1216.82 L1900.24 1216.82 L1899.66 1216.82 L1899.07 1216.82 L1898.48 1216.82 L1897.9 1216.82 L1897.31 1216.82 L1896.72 1216.82 L1896.14 1216.82 L1895.55 1216.82 L1894.96 1216.82 L1894.38 1216.82 L1893.79 1216.82 L1893.21 1216.82 L1892.62 1216.82 L1892.03 1216.82 L1891.45 1216.82 L1890.86 1216.82 L1890.27 1216.82 L1889.69 1216.82 L1889.1 1216.82 L1888.51 1216.82 L1887.93 1216.82 L1887.34 1216.82 L1886.76 1216.82 L1886.17 1216.82 L1885.58 1216.82 L1885 1216.82 L1884.41 1216.82 L1883.82 1216.82 L1883.24 1216.82 L1882.65 1216.82 L1882.06 1216.82 L1881.48 1216.82 L1880.89 1216.82 L1880.3 1216.82 L1879.72 1216.82 L1879.13 1216.82 L1878.55 1216.82 L1877.96 1216.82 L1877.37 1216.82 L1876.79 1216.82 L1876.2 1216.82 L1875.61 1216.82 L1875.03 1216.82 L1874.44 1216.82 L1873.85 1216.82 L1873.27 1216.82 L1872.68 1216.82 L1872.09 1216.82 L1871.51 1216.82 L1870.92 1216.82 L1870.34 1216.82 L1869.75 1216.82 L1869.16 1216.82 L1868.58 1216.82 L1867.99 1216.82 L1867.4 1216.82 L1866.82 1216.82 L1866.23 1216.82 L1865.64 1216.82 L1865.06 1216.82 L1864.47 1216.82 L1863.88 1216.82 L1863.3 1216.82 L1862.71 1216.82 L1862.13 1216.82 L1861.54 1216.82 L1860.95 1216.82 L1860.37 1216.82 L1859.78 1216.82 L1859.19 1216.82 L1858.61 1216.82 L1858.02 1216.82 L1857.43 1216.82 L1856.85 1216.82 L1856.26 1216.82 L1855.68 1216.82 L1855.09 1216.82 L1854.5 1216.82 L1853.92 1216.82 L1853.33 1216.82 L1852.74 1216.82 L1852.16 1216.82 L1851.57 1216.82 L1850.98 1216.82 L1850.4 1216.82 L1849.81 1216.82 L1849.22 1216.82 L1848.64 1216.82 L1848.05 1216.82 L1847.47 1216.82 L1846.88 1216.82 L1846.29 1216.82 L1845.71 1216.82 L1845.12 1216.82 L1844.53 1216.82 L1843.95 1216.82 L1843.36 1216.82 L1842.77 1216.82 L1842.19 1216.82 L1841.6 1216.82 L1841.01 1216.82 L1840.43 1216.82 L1839.84 1216.82 L1839.26 1216.82 L1838.67 1216.82 L1838.08 1216.82 L1837.5 1216.82 L1836.91 1216.82 L1836.32 1216.82 L1835.74 1216.82 L1835.15 1216.82 L1834.56 1216.82 L1833.98 1216.82 L1833.39 1216.82 L1832.81 1216.82 L1832.22 1216.82 L1831.63 1216.82 L1831.05 1216.82 L1830.46 1216.82 L1829.87 1216.82 L1829.29 1216.82 L1828.7 1216.82 L1828.11 1216.82 L1827.53 1216.82 L1826.94 1216.82 L1826.35 1216.82 L1825.77 1216.82 L1825.18 1216.82 L1824.6 1216.82 L1824.01 1216.82 L1823.42 1216.82 L1822.84 1216.82 L1822.25 1216.82 L1821.66 1216.82 L1821.08 1216.82 L1820.49 1216.82 L1819.9 1216.82 L1819.32 1216.82 L1818.73 1216.82 L1818.14 1216.82 L1817.56 1216.82 L1816.97 1216.82 L1816.39 1216.82 L1815.8 1216.82 L1815.21 1216.82 L1814.63 1216.82 L1814.04 1216.82 L1813.45 1216.82 L1812.87 1216.82 L1812.28 1216.82 L1811.69 1216.82 L1811.11 1216.82 L1810.52 1216.82 L1809.94 1216.82 L1809.35 1216.82 L1808.76 1216.82 L1808.18 1216.82 L1807.59 1216.82 L1807 1216.82 L1806.42 1216.82 L1805.83 1216.82 L1805.24 1216.82 L1804.66 1216.82 L1804.07 1216.82 L1803.48 1216.82 L1802.9 1216.82 L1802.31 1216.82 L1801.73 1216.82 L1801.14 1216.82 L1800.55 1216.82 L1799.97 1216.82 L1799.38 1216.82 L1798.79 1216.82 L1798.21 1216.82 L1797.62 1216.82 L1797.03 1216.82 L1796.45 1216.82 L1795.86 1216.82 L1795.27 1216.82 L1794.69 1216.82 L1794.1 1216.82 L1793.52 1216.82 L1792.93 1216.82 L1792.34 1216.82 L1791.76 1216.82 L1791.17 1216.82 L1790.58 1216.82 L1790 1216.82 L1789.41 1216.82 L1788.82 1216.82 L1788.24 1216.82 L1787.65 1216.82 L1787.06 1216.82 L1786.48 1216.82 L1785.89 1216.82 L1785.31 1216.82 L1784.72 1216.82 L1784.13 1216.82 L1783.55 1216.82 L1782.96 1216.82 L1782.37 1216.82 L1781.79 1216.82 L1781.2 1216.82 L1780.61 1216.82 L1780.03 1216.82 L1779.44 1216.82 L1778.86 1216.82 L1778.27 1216.82 L1777.68 1216.82 L1777.1 1216.82 L1776.51 1216.82 L1775.92 1216.82 L1775.34 1216.82 L1774.75 1216.82 L1774.16 1216.82 L1773.58 1216.82 L1772.99 1216.82 L1772.4 1216.82 L1771.82 1216.82 L1771.23 1216.82 L1770.65 1216.82 L1770.06 1216.82 L1769.47 1216.82 L1768.89 1216.82 L1768.3 1216.82 L1767.71 1216.82 L1767.13 1216.82 L1766.54 1216.82 L1765.95 1216.82 L1765.37 1216.82 L1764.78 1216.82 L1764.19 1216.82 L1763.61 1216.82 L1763.02 1216.82 L1762.44 1216.82 L1761.85 1216.82 L1761.26 1216.82 L1760.68 1216.82 L1760.09 1216.82 L1759.5 1216.82 L1758.92 1216.82 L1758.33 1216.82 L1757.74 1216.82 L1757.16 1216.82 L1756.57 1216.82 L1755.99 1216.82 L1755.4 1216.82 L1754.81 1216.82 L1754.23 1216.82 L1753.64 1216.82 L1753.05 1216.82 L1752.47 1216.82 L1751.88 1216.82 L1751.29 1216.82 L1750.71 1216.82 L1750.12 1216.82 L1749.53 1216.82 L1748.95 1216.82 L1748.36 1216.82 L1747.78 1216.82 L1747.19 1216.82 L1746.6 1216.82 L1746.02 1216.82 L1745.43 1216.82 L1744.84 1216.82 L1744.26 1216.82 L1743.67 1216.82 L1743.08 1216.82 L1742.5 1216.82 L1741.91 1216.82 L1741.32 1216.82 L1740.74 1216.82 L1740.15 1216.82 L1739.57 1216.82 L1738.98 1216.82 L1738.39 1216.82 L1737.81 1216.82 L1737.22 1216.82 L1736.63 1216.82 L1736.05 1216.82 L1735.46 1216.82 L1734.87 1216.82 L1734.29 1216.82 L1733.7 1216.82 L1733.11 1216.82 L1732.53 1216.82 L1731.94 1216.82 L1731.36 1216.82 L1730.77 1216.82 L1730.18 1216.82 L1729.6 1216.82 L1729.01 1216.82 L1728.42 1216.82 L1727.84 1216.82 L1727.25 1216.82 L1726.66 1216.82 L1726.08 1216.82 L1725.49 1216.82 L1724.91 1216.82 L1724.32 1216.82 L1723.73 1216.82 L1723.15 1216.82 L1722.56 1216.82 L1721.97 1216.82 L1721.39 1216.82 L1720.8 1216.82 L1720.21 1216.82 L1719.63 1216.82 L1719.04 1216.82 L1718.45 1216.82 L1717.87 1216.82 L1717.28 1216.82 L1716.7 1216.82 L1716.11 1216.82 L1715.52 1216.82 L1714.94 1216.82 L1714.35 1216.82 L1713.76 1216.82 L1713.18 1216.82 L1712.59 1216.82 L1712 1216.82 L1711.42 1216.82 L1710.83 1216.82 L1710.24 1216.82 L1709.66 1216.82 L1709.07 1216.82 L1708.49 1216.82 L1707.9 1216.82 L1707.31 1216.82 L1706.73 1216.82 L1706.14 1216.82 L1705.55 1216.82 L1704.97 1216.82 L1704.38 1216.82 L1703.79 1216.82 L1703.21 1216.82 L1702.62 1216.82 L1702.04 1216.82 L1701.45 1216.82 L1700.86 1216.82 L1700.28 1216.82 L1699.69 1216.82 L1699.1 1216.82 L1698.52 1216.82 L1697.93 1216.82 L1697.34 1216.82 L1696.76 1216.82 L1696.17 1216.82 L1695.58 1216.82 L1695 1216.82 L1694.41 1216.82 L1693.83 1216.82 L1693.24 1216.82 L1692.65 1216.82 L1692.07 1216.82 L1691.48 1216.82 L1690.89 1216.82 L1690.31 1216.82 L1689.72 1216.82 L1689.13 1216.82 L1688.55 1216.82 L1687.96 1216.82 L1687.37 1216.82 L1686.79 1216.82 L1686.2 1216.82 L1685.62 1216.82 L1685.03 1216.82 L1684.44 1216.82 L1683.86 1216.82 L1683.27 1216.82 L1682.68 1216.82 L1682.1 1216.82 L1681.51 1216.82 L1680.92 1216.82 L1680.34 1216.82 L1679.75 1216.82 L1679.17 1216.82 L1678.58 1216.82 L1677.99 1216.82 L1677.41 1216.82 L1676.82 1216.82 L1676.23 1216.82 L1675.65 1216.82 L1675.06 1216.82 L1674.47 1216.82 L1673.89 1216.82 L1673.3 1216.82 L1672.71 1216.82 L1672.13 1216.82 L1671.54 1216.82 L1670.96 1216.82 L1670.37 1216.82 L1669.78 1216.82 L1669.2 1216.82 L1668.61 1216.82 L1668.02 1216.82 L1667.44 1216.82 L1666.85 1216.82 L1666.26 1216.82 L1665.68 1216.82 L1665.09 1216.82 L1664.5 1216.82 L1663.92 1216.82 L1663.33 1216.82 L1662.75 1216.82 L1662.16 1216.82 L1661.57 1216.82 L1660.99 1216.82 L1660.4 1216.82 L1659.81 1216.82 L1659.23 1216.82 L1658.64 1216.82 L1658.05 1216.82 L1657.47 1216.82 L1656.88 1216.82 L1656.29 1216.82 L1655.71 1216.82 L1655.12 1216.82 L1654.54 1216.82 L1653.95 1216.82 L1653.36 1216.82 L1652.78 1216.82 L1652.19 1216.82 L1651.6 1216.82 L1651.02 1216.82 L1650.43 1216.82 L1649.84 1216.82 L1649.26 1216.82 L1648.67 1216.82 L1648.09 1216.82 L1647.5 1216.82 L1646.91 1216.82 L1646.33 1216.82 L1645.74 1216.82 L1645.15 1216.82 L1644.57 1216.82 L1643.98 1216.82 L1643.39 1216.82 L1642.81 1216.82 L1642.22 1216.82 L1641.63 1216.82 L1641.05 1216.82 L1640.46 1216.82 L1639.88 1216.82 L1639.29 1216.82 L1638.7 1216.82 L1638.12 1216.82 L1637.53 1216.82 L1636.94 1216.82 L1636.36 1216.82 L1635.77 1216.82 L1635.18 1216.82 L1634.6 1216.82 L1634.01 1216.82 L1633.42 1216.82 L1632.84 1216.82 L1632.25 1216.82 L1631.67 1216.82 L1631.08 1216.82 L1630.49 1216.82 L1629.91 1216.82 L1629.32 1216.82 L1628.73 1216.82 L1628.15 1216.82 L1627.56 1216.82 L1626.97 1216.82 L1626.39 1216.82 L1625.8 1216.82 L1625.22 1216.82 L1624.63 1216.82 L1624.04 1216.82 L1623.46 1216.82 L1622.87 1216.82 L1622.28 1216.82 L1621.7 1216.82 L1621.11 1216.82 L1620.52 1216.82 L1619.94 1216.82 L1619.35 1216.82 L1618.76 1216.82 L1618.18 1216.82 L1617.59 1216.82 L1617.01 1216.82 L1616.42 1216.82 L1615.83 1216.82 L1615.25 1216.82 L1614.66 1216.82 L1614.07 1216.82 L1613.49 1216.82 L1612.9 1216.82 L1612.31 1216.82 L1611.73 1216.82 L1611.14 1216.82 L1610.55 1216.82 L1609.97 1216.82 L1609.38 1216.82 L1608.8 1216.82 L1608.21 1216.82 L1607.62 1216.82 L1607.04 1216.82 L1606.45 1216.82 L1605.86 1216.82 L1605.28 1216.82 L1604.69 1216.82 L1604.1 1216.82 L1603.52 1216.82 L1602.93 1216.82 L1602.34 1216.82 L1601.76 1216.82 L1601.17 1216.82 L1600.59 1216.82 L1600 1216.82 L1599.41 1216.82 L1598.83 1216.82 L1598.24 1216.82 L1597.65 1216.82 L1597.07 1216.82 L1596.48 1216.82 L1595.89 1216.82 L1595.31 1216.82 L1594.72 1216.82 L1594.14 1216.82 L1593.55 1216.82 L1592.96 1216.82 L1592.38 1216.82 L1591.79 1216.82 L1591.2 1216.82 L1590.62 1216.82 L1590.03 1216.82 L1589.44 1216.82 L1588.86 1216.82 L1588.27 1216.82 L1587.68 1216.82 L1587.1 1216.82 L1586.51 1216.82 L1585.93 1216.82 L1585.34 1216.82 L1584.75 1216.82 L1584.17 1216.82 L1583.58 1216.82 L1582.99 1216.82 L1582.41 1216.82 L1581.82 1216.82 L1581.23 1216.82 L1580.65 1216.82 L1580.06 1216.82 L1579.47 1216.82 L1578.89 1216.82 L1578.3 1216.82 L1577.72 1216.82 L1577.13 1216.82 L1576.54 1216.82 L1575.96 1216.82 L1575.37 1216.82 L1574.78 1216.82 L1574.2 1216.82 L1573.61 1216.82 L1573.02 1216.82 L1572.44 1216.82 L1571.85 1216.82 L1571.27 1216.82 L1570.68 1216.82 L1570.09 1216.82 L1569.51 1216.82 L1568.92 1216.82 L1568.33 1216.82 L1567.75 1216.82 L1567.16 1216.82 L1566.57 1216.82 L1565.99 1216.82 L1565.4 1216.82 L1564.81 1216.82 L1564.23 1216.82 L1563.64 1216.82 L1563.06 1216.82 L1562.47 1216.82 L1561.88 1216.82 L1561.3 1216.82 L1560.71 1216.82 L1560.12 1216.82 L1559.54 1216.82 L1558.95 1216.82 L1558.36 1216.82 L1557.78 1216.82 L1557.19 1216.82 L1556.6 1216.82 L1556.02 1216.82 L1555.43 1216.82 L1554.85 1216.82 L1554.26 1216.82 L1553.67 1216.82 L1553.09 1216.82 L1552.5 1216.82 L1551.91 1216.82 L1551.33 1216.82 L1550.74 1216.82 L1550.15 1216.82 L1549.57 1216.82 L1548.98 1216.82 L1548.4 1216.82 L1547.81 1216.82 L1547.22 1216.82 L1546.64 1216.82 L1546.05 1216.82 L1545.46 1216.82 L1544.88 1216.82 L1544.29 1216.82 L1543.7 1216.82 L1543.12 1216.82 L1542.53 1216.82 L1541.94 1216.82 L1541.36 1216.82 L1540.77 1216.82 L1540.19 1216.82 L1539.6 1216.82 L1539.01 1216.82 L1538.43 1216.82 L1537.84 1216.82 L1537.25 1216.82 L1536.67 1216.82 L1536.08 1216.82 L1535.49 1216.82 L1534.91 1216.82 L1534.32 1216.82 L1533.73 1216.82 L1533.15 1216.82 L1532.56 1216.82 L1531.98 1216.82 L1531.39 1216.82 L1530.8 1216.82 L1530.22 1216.82 L1529.63 1216.82 L1529.04 1216.82 L1528.46 1216.82 L1527.87 1216.82 L1527.28 1216.82 L1526.7 1216.82 L1526.11 1216.82 L1525.52 1216.82 L1524.94 1216.82 L1524.35 1216.82 L1523.77 1216.82 L1523.18 1216.82 L1522.59 1216.82 L1522.01 1216.82 L1521.42 1216.82 L1520.83 1216.82 L1520.25 1216.82 L1519.66 1216.82 L1519.07 1216.82 L1518.49 1216.82 L1517.9 1216.82 L1517.32 1216.82 L1516.73 1216.82 L1516.14 1216.82 L1515.56 1216.82 L1514.97 1216.82 L1514.38 1216.82 L1513.8 1216.82 L1513.21 1216.82 L1512.62 1216.82 L1512.04 1216.82 L1511.45 1216.82 L1510.86 1216.82 L1510.28 1216.82 L1509.69 1216.82 L1509.11 1216.82 L1508.52 1216.82 L1507.93 1216.82 L1507.35 1216.82 L1506.76 1216.82 L1506.17 1216.82 L1505.59 1216.82 L1505 1216.82 L1504.41 1216.82 L1503.83 1216.82 L1503.24 1216.82 L1502.65 1216.82 L1502.07 1216.82 L1501.48 1216.82 L1500.9 1216.82 L1500.31 1216.82 L1499.72 1216.82 L1499.14 1216.82 L1498.55 1216.82 L1497.96 1216.82 L1497.38 1216.82 L1496.79 1216.82 L1496.2 1216.82 L1495.62 1216.82 L1495.03 1216.82 L1494.45 1216.82 L1493.86 1216.82 L1493.27 1216.82 L1492.69 1216.82 L1492.1 1216.82 L1491.51 1216.82 L1490.93 1216.82 L1490.34 1216.82 L1489.75 1216.82 L1489.17 1216.82 L1488.58 1216.82 L1487.99 1216.82 L1487.41 1216.82 L1486.82 1216.82 L1486.24 1216.82 L1485.65 1216.82 L1485.06 1216.82 L1484.48 1216.82 L1483.89 1216.82 L1483.3 1216.82 L1482.72 1216.82 L1482.13 1216.82 L1481.54 1216.82 L1480.96 1216.82 L1480.37 1216.82 L1479.78 1216.82 L1479.2 1216.82 L1478.61 1216.82 L1478.03 1216.82 L1477.44 1216.82 L1476.85 1216.82 L1476.27 1216.82 L1475.68 1216.82 L1475.09 1216.82 L1474.51 1216.82 L1473.92 1216.82 L1473.33 1216.82 L1472.75 1216.82 L1472.16 1216.82 L1471.57 1216.82 L1470.99 1216.82 L1470.4 1216.82 L1469.82 1216.82 L1469.23 1216.82 L1468.64 1216.82 L1468.06 1216.82 L1467.47 1216.82 L1466.88 1216.82 L1466.3 1216.82 L1465.71 1216.82 L1465.12 1216.82 L1464.54 1216.82 L1463.95 1216.82 L1463.37 1216.82 L1462.78 1216.82 L1462.19 1216.82 L1461.61 1216.82 L1461.02 1216.82 L1460.43 1216.82 L1459.85 1216.82 L1459.26 1216.82 L1458.67 1216.82 L1458.09 1216.82 L1457.5 1216.82 L1456.91 1216.82 L1456.33 1216.82 L1455.74 1216.82 L1455.16 1216.82 L1454.57 1216.82 L1453.98 1216.82 L1453.4 1216.82 L1452.81 1216.82 L1452.22 1216.82 L1451.64 1216.82 L1451.05 1216.82 L1450.46 1216.82 L1449.88 1216.82 L1449.29 1216.82 L1448.7 1216.82 L1448.12 1216.82 L1447.53 1216.82 L1446.95 1216.82 L1446.36 1216.82 L1445.77 1216.82 L1445.19 1216.82 L1444.6 1216.82 L1444.01 1216.82 L1443.43 1216.82 L1442.84 1216.82 L1442.25 1216.82 L1441.67 1216.82 L1441.08 1216.82 L1440.5 1216.82 L1439.91 1216.82 L1439.32 1216.82 L1438.74 1216.82 L1438.15 1216.82 L1437.56 1216.82 L1436.98 1216.82 L1436.39 1216.82 L1435.8 1216.82 L1435.22 1216.82 L1434.63 1216.82 L1434.04 1216.82 L1433.46 1216.82 L1432.87 1216.82 L1432.29 1216.82 L1431.7 1216.82 L1431.11 1216.82 L1430.53 1216.82 L1429.94 1216.82 L1429.35 1216.82 L1428.77 1216.82 L1428.18 1216.82 L1427.59 1216.82 L1427.01 1216.82 L1426.42 1216.82 L1425.83 1216.82 L1425.25 1216.82 L1424.66 1216.82 L1424.08 1216.82 L1423.49 1216.82 L1422.9 1216.82 L1422.32 1216.82 L1421.73 1216.82 L1421.14 1216.82 L1420.56 1216.82 L1419.97 1216.82 L1419.38 1216.82 L1418.8 1216.82 L1418.21 1216.82 L1417.63 1216.82 L1417.04 1216.82 L1416.45 1216.82 L1415.87 1216.82 L1415.28 1216.82 L1414.69 1216.82 L1414.11 1216.82 L1413.52 1216.82 L1412.93 1216.82 L1412.35 1216.82 L1411.76 1216.82 L1411.17 1216.82 L1410.59 1216.82 L1410 1216.82 L1409.42 1216.82 L1408.83 1216.82 L1408.24 1216.82 L1407.66 1216.82 L1407.07 1216.82 L1406.48 1216.82 L1405.9 1216.82 L1405.31 1216.82 L1404.72 1216.82 L1404.14 1216.82 L1403.55 1216.82 L1402.96 1216.82 L1402.38 1216.82 L1401.79 1216.82 L1401.21 1216.82 L1400.62 1216.82 L1400.03 1216.82 L1399.45 1216.82 L1398.86 1216.82 L1398.27 1216.82 L1397.69 1216.82 L1397.1 1216.82 L1396.51 1216.82 L1395.93 1216.82 L1395.34 1216.82 L1394.75 1216.82 L1394.17 1216.82 L1393.58 1216.82 L1393 1216.82 L1392.41 1216.82 L1391.82 1216.82 L1391.24 1216.82 L1390.65 1216.82 L1390.06 1216.82 L1389.48 1216.82 L1388.89 1216.82 L1388.3 1216.82 L1387.72 1216.82 L1387.13 1216.82 L1386.55 1216.82 L1385.96 1216.82 L1385.37 1216.82 L1384.79 1216.82 L1384.2 1216.82 L1383.61 1216.82 L1383.03 1216.82 L1382.44 1216.82 L1381.85 1216.82 L1381.27 1216.82 L1380.68 1216.82 L1380.09 1216.82 L1379.51 1216.82 L1378.92 1216.82 L1378.34 1216.82 L1377.75 1216.82 L1377.16 1216.82 L1376.58 1216.82 L1375.99 1216.82 L1375.4 1216.82 L1374.82 1216.82 L1374.23 1216.82 L1373.64 1216.82 L1373.06 1216.82 L1372.47 1216.82 L1371.88 1216.82 L1371.3 1216.82 L1370.71 1216.82 L1370.13 1216.82 L1369.54 1216.82 L1368.95 1216.82 L1368.37 1216.82 L1367.78 1216.82 L1367.19 1216.82 L1366.61 1216.82 L1366.02 1216.82 L1365.43 1216.82 L1364.85 1216.82 L1364.26 1216.82 L1363.68 1216.82 L1363.09 1216.82 L1362.5 1216.82 L1361.92 1216.82 L1361.33 1216.82 L1360.74 1216.82 L1360.16 1216.82 L1359.57 1216.82 L1358.98 1216.82 L1358.4 1216.82 L1357.81 1216.82 L1357.22 1216.82 L1356.64 1216.82 L1356.05 1216.82 L1355.47 1216.82 L1354.88 1216.82 L1354.29 1216.82 L1353.71 1216.82 L1353.12 1216.82 L1352.53 1216.82 L1351.95 1216.82 L1351.36 1216.82 L1350.77 1216.82 L1350.19 1216.82 L1349.6 1216.82 L1349.01 1216.82 L1348.43 1216.82 L1347.84 1216.82 L1347.26 1216.82 L1346.67 1216.82 L1346.08 1216.82 L1345.5 1216.82 L1344.91 1216.82 L1344.32 1216.82 L1343.74 1216.82 L1343.15 1216.82 L1342.56 1216.82 L1341.98 1216.82 L1341.39 1216.82 L1340.8 1216.82 L1340.22 1216.82 L1339.63 1216.82 L1339.05 1216.82 L1338.46 1216.82 L1337.87 1216.82 L1337.29 1216.82 L1336.7 1216.82 L1336.11 1216.82 L1335.53 1216.82 L1334.94 1216.82 L1334.35 1216.82 L1333.77 1216.82 L1333.18 1216.82 L1332.6 1216.82 L1332.01 1216.82 L1331.42 1216.82 L1330.84 1216.82 L1330.25 1216.82 L1329.66 1216.82 L1329.08 1216.82 L1328.49 1216.82 L1327.9 1216.82 L1327.32 1216.82 L1326.73 1216.82 L1326.14 1216.82 L1325.56 1216.82 L1324.97 1216.82 L1324.39 1216.82 L1323.8 1216.82 L1323.21 1216.82 L1322.63 1216.82 L1322.04 1216.82 L1321.45 1216.82 L1320.87 1216.82 L1320.28 1216.82 L1319.69 1216.82 L1319.11 1216.82 L1318.52 1216.82 L1317.93 1216.82 L1317.35 1216.82 L1316.76 1216.82 L1316.18 1216.82 L1315.59 1216.82 L1315 1216.82 L1314.42 1216.82 L1313.83 1216.82 L1313.24 1216.82 L1312.66 1216.82 L1312.07 1216.82 L1311.48 1216.82 L1310.9 1216.82 L1310.31 1216.82 L1309.73 1216.82 L1309.14 1216.82 L1308.55 1216.82 L1307.97 1216.82 L1307.38 1216.82 L1306.79 1216.82 L1306.21 1216.82 L1305.62 1216.82 L1305.03 1216.82 L1304.45 1216.82 L1303.86 1216.82 L1303.27 1216.82 L1302.69 1216.82 L1302.1 1216.82 L1301.52 1216.82 L1300.93 1216.82 L1300.34 1216.82 L1299.76 1216.82 L1299.17 1216.82 L1298.58 1216.82 L1298 1216.82 L1297.41 1216.82 L1296.82 1216.82 L1296.24 1216.82 L1295.65 1216.82 L1295.06 1216.82 L1294.48 1216.82 L1293.89 1216.82 L1293.31 1216.82 L1292.72 1216.82 L1292.13 1216.82 L1291.55 1216.82 L1290.96 1216.82 L1290.37 1216.82 L1289.79 1216.82 L1289.2 1216.82 L1288.61 1216.82 L1288.03 1216.82 L1287.44 1216.82 L1286.86 1216.82 L1286.27 1216.82 L1285.68 1216.82 L1285.1 1216.82 L1284.51 1216.82 L1283.92 1216.82 L1283.34 1216.82 L1282.75 1216.82 L1282.16 1216.82 L1281.58 1216.82 L1280.99 1216.82 L1280.4 1216.82 L1279.82 1216.82 L1279.23 1216.82 L1278.65 1216.82 L1278.06 1216.82 L1277.47 1216.82 L1276.89 1216.82 L1276.3 1216.82 L1275.71 1216.82 L1275.13 1216.82 L1274.54 1216.82 L1273.95 1216.82 L1273.37 1216.82 L1272.78 1216.82 L1272.19 1216.82 L1271.61 1216.82 L1271.02 1216.82 L1270.44 1216.82 L1269.85 1216.82 L1269.26 1216.82 L1268.68 1216.82 L1268.09 1216.82 L1267.5 1216.82 L1266.92 1216.82 L1266.33 1216.82 L1265.74 1216.82 L1265.16 1216.82 L1264.57 1216.82 L1263.98 1216.82 L1263.4 1216.82 L1262.81 1216.82 L1262.23 1216.82 L1261.64 1216.82 L1261.05 1216.82 L1260.47 1216.82 L1259.88 1216.82 L1259.29 1216.82 L1258.71 1216.82 L1258.12 1216.82 L1257.53 1216.82 L1256.95 1216.82 L1256.36 1216.82 L1255.78 1216.82 L1255.19 1216.82 L1254.6 1216.82 L1254.02 1216.82 L1253.43 1216.82 L1252.84 1216.82 L1252.26 1216.82 L1251.67 1216.82 L1251.08 1216.82 L1250.5 1216.82 L1249.91 1216.82 L1249.32 1216.82 L1248.74 1216.82 L1248.15 1216.82 L1247.57 1216.82 L1246.98 1216.82 L1246.39 1216.82 L1245.81 1216.82 L1245.22 1216.82 L1244.63 1216.82 L1244.05 1216.82 L1243.46 1216.82 L1242.87 1216.82 L1242.29 1216.82 L1241.7 1216.82 L1241.11 1216.82 L1240.53 1216.82 L1239.94 1216.82 L1239.36 1216.82 L1238.77 1216.82 L1238.18 1216.82 L1237.6 1216.82 L1237.01 1216.82 L1236.42 1216.82 L1235.84 1216.82 L1235.25 1216.82 L1234.66 1216.82 L1234.08 1216.82 L1233.49 1216.82 L1232.91 1216.82 L1232.32 1216.82 L1231.73 1216.82 L1231.15 1216.82 L1230.56 1216.82 L1229.97 1216.82 L1229.39 1216.82 L1228.8 1216.82 L1228.21 1216.82 L1227.63 1216.82 L1227.04 1216.82 L1226.45 1216.82 L1225.87 1216.82 L1225.28 1216.82 L1224.7 1216.82 L1224.11 1216.82 L1223.52 1216.82 L1222.94 1216.82 L1222.35 1216.82 L1221.76 1216.82 L1221.18 1216.82 L1220.59 1216.82 L1220 1216.82 L1219.42 1216.82 L1218.83 1216.82 L1218.24 1216.82 L1217.66 1216.82 L1217.07 1216.82 L1216.49 1216.82 L1215.9 1216.82 L1215.31 1216.82 L1214.73 1216.82 L1214.14 1216.82 L1213.55 1216.82 L1212.97 1216.82 L1212.38 1216.82 L1211.79 1216.82 L1211.21 1216.82 L1210.62 1216.82 L1210.03 1216.82 L1209.45 1216.82 L1208.86 1216.82 L1208.28 1216.82 L1207.69 1216.82 L1207.1 1216.82 L1206.52 1216.82 L1205.93 1216.82 L1205.34 1216.82 L1204.76 1216.82 L1204.17 1216.82 L1203.58 1216.82 L1203 1216.82 L1202.41 1216.82 L1201.83 1216.82 L1201.24 1216.82 L1200.65 1216.82 L1200.07 1216.82 L1199.48 1216.82 L1198.89 1216.82 L1198.31 1216.82 L1197.72 1216.82 L1197.13 1216.82 L1196.55 1216.82 L1195.96 1216.82 L1195.37 1216.82 L1194.79 1216.82 L1194.2 1216.82 L1193.62 1216.82 L1193.03 1216.82 L1192.44 1216.82 L1191.86 1216.82 L1191.27 1216.82 L1190.68 1216.82 L1190.1 1216.82 L1189.51 1216.82 L1188.92 1216.82 L1188.34 1216.82 L1187.75 1216.82 L1187.16 1216.82 L1186.58 1216.82 L1185.99 1216.82 L1185.41 1216.82 L1184.82 1216.82 L1184.23 1216.82 L1183.65 1216.82 L1183.06 1216.82 L1182.47 1216.82 L1181.89 1216.82 L1181.3 1216.82 L1180.71 1216.82 L1180.13 1216.82 L1179.54 1216.82 L1178.96 1216.82 L1178.37 1216.82 L1177.78 1216.82 L1177.2 1216.82 L1176.61 1216.82 L1176.02 1216.82 L1175.44 1216.82 L1174.85 1216.82 L1174.26 1216.82 L1173.68 1216.82 L1173.09 1216.82 L1172.5 1216.82 L1171.92 1216.82 L1171.33 1216.82 L1170.75 1216.82 L1170.16 1216.82 L1169.57 1216.82 L1168.99 1216.82 L1168.4 1216.82 L1167.81 1216.82 L1167.23 1216.82 L1166.64 1216.82 L1166.05 1216.82 L1165.47 1216.82 L1164.88 1216.82 L1164.29 1216.82 L1163.71 1216.82 L1163.12 1216.82 L1162.54 1216.82 L1161.95 1216.82 L1161.36 1216.82 L1160.78 1216.82 L1160.19 1216.82 L1159.6 1216.82 L1159.02 1216.82 L1158.43 1216.82 L1157.84 1216.82 L1157.26 1216.82 L1156.67 1216.82 L1156.09 1216.82 L1155.5 1216.82 L1154.91 1216.82 L1154.33 1216.82 L1153.74 1216.82 L1153.15 1216.82 L1152.57 1216.82 L1151.98 1216.82 L1151.39 1216.82 L1150.81 1216.82 L1150.22 1216.82 L1149.63 1216.82 L1149.05 1216.82 L1148.46 1216.82 L1147.88 1216.82 L1147.29 1216.82 L1146.7 1216.82 L1146.12 1216.82 L1145.53 1216.82 L1144.94 1216.82 L1144.36 1216.82 L1143.77 1216.82 L1143.18 1216.82 L1142.6 1216.82 L1142.01 1216.82 L1141.42 1216.82 L1140.84 1216.82 L1140.25 1216.82 L1139.67 1216.82 L1139.08 1216.82 L1138.49 1216.82 L1137.91 1216.82 L1137.32 1216.82 L1136.73 1216.82 L1136.15 1216.82 L1135.56 1216.82 L1134.97 1216.82 L1134.39 1216.82 L1133.8 1216.82 L1133.21 1216.82 L1132.63 1216.82 L1132.04 1216.82 L1131.46 1216.82 L1130.87 1216.82 L1130.28 1216.82 L1129.7 1216.82 L1129.11 1216.82 L1128.52 1216.82 L1127.94 1216.82 L1127.35 1216.82 L1126.76 1216.82 L1126.18 1216.82 L1125.59 1216.82 L1125.01 1216.82 L1124.42 1216.82 L1123.83 1216.82 L1123.25 1216.82 L1122.66 1216.82 L1122.07 1216.82 L1121.49 1216.82 L1120.9 1216.82 L1120.31 1216.82 L1119.73 1216.82 L1119.14 1216.82 L1118.55 1216.82 L1117.97 1216.82 L1117.38 1216.82 L1116.8 1216.82 L1116.21 1216.82 L1115.62 1216.82 L1115.04 1216.82 L1114.45 1216.82 L1113.86 1216.82 L1113.28 1216.82 L1112.69 1216.82 L1112.1 1216.82 L1111.52 1216.82 L1110.93 1216.82 L1110.34 1216.82 L1109.76 1216.82 L1109.17 1216.82 L1108.59 1216.82 L1108 1216.82 L1107.41 1216.82 L1106.83 1216.82 L1106.24 1216.82 L1105.65 1216.82 L1105.07 1216.82 L1104.48 1216.82 L1103.89 1216.82 L1103.31 1216.82 L1102.72 1216.82 L1102.14 1216.82 L1101.55 1216.82 L1100.96 1216.82 L1100.38 1216.82 L1099.79 1216.82 L1099.2 1216.82 L1098.62 1216.82 L1098.03 1216.82 L1097.44 1216.82 L1096.86 1216.82 L1096.27 1216.82 L1095.68 1216.82 L1095.1 1216.82 L1094.51 1216.82 L1093.93 1216.82 L1093.34 1216.82 L1092.75 1216.82 L1092.17 1216.82 L1091.58 1216.82 L1090.99 1216.82 L1090.41 1216.82 L1089.82 1216.82 L1089.23 1216.82 L1088.65 1216.82 L1088.06 1216.82 L1087.47 1216.82 L1086.89 1216.82 L1086.3 1216.82 L1085.72 1216.82 L1085.13 1216.82 L1084.54 1216.82 L1083.96 1216.82 L1083.37 1216.82 L1082.78 1216.82 L1082.2 1216.82 L1081.61 1216.82 L1081.02 1216.82 L1080.44 1216.82 L1079.85 1216.82 L1079.26 1216.82 L1078.68 1216.82 L1078.09 1216.82 L1077.51 1216.82 L1076.92 1216.82 L1076.33 1216.82 L1075.75 1216.82 L1075.16 1216.82 L1074.57 1216.82 L1073.99 1216.82 L1073.4 1216.82 L1072.81 1216.82 L1072.23 1216.82 L1071.64 1216.82 L1071.06 1216.82 L1070.47 1216.82 L1069.88 1216.82 L1069.3 1216.82 L1068.71 1216.82 L1068.12 1216.82 L1067.54 1216.82 L1066.95 1216.82 L1066.36 1216.82 L1065.78 1216.82 L1065.19 1216.82 L1064.6 1216.82 L1064.02 1216.82 L1063.43 1216.82 L1062.85 1216.82 L1062.26 1216.82 L1061.67 1216.82 L1061.09 1216.82 L1060.5 1216.82 L1059.91 1216.82 L1059.33 1216.82 L1058.74 1216.82 L1058.15 1216.82 L1057.57 1216.82 L1056.98 1216.82 L1056.39 1216.82 L1055.81 1216.82 L1055.22 1216.82 L1054.64 1216.82 L1054.05 1216.82 L1053.46 1216.82 L1052.88 1216.82 L1052.29 1216.82 L1051.7 1216.82 L1051.12 1216.82 L1050.53 1216.82 L1049.94 1216.82 L1049.36 1216.82 L1048.77 1216.82 L1048.19 1216.82 L1047.6 1216.82 L1047.01 1216.82 L1046.43 1216.82 L1045.84 1216.82 L1045.25 1216.82 L1044.67 1216.82 L1044.08 1216.82 L1043.49 1216.82 L1042.91 1216.82 L1042.32 1216.82 L1041.73 1216.82 L1041.15 1216.82 L1040.56 1216.82 L1039.98 1216.82 L1039.39 1216.82 L1038.8 1216.82 L1038.22 1216.82 L1037.63 1216.82 L1037.04 1216.82 L1036.46 1216.82 L1035.87 1216.82 L1035.28 1216.82 L1034.7 1216.82 L1034.11 1216.82 L1033.52 1216.82 L1032.94 1216.82 L1032.35 1216.82 L1031.77 1216.82 L1031.18 1216.82 L1030.59 1216.82 L1030.01 1216.82 L1029.42 1216.82 L1028.83 1216.82 L1028.25 1216.82 L1027.66 1216.82 L1027.07 1216.82 L1026.49 1216.82 L1025.9 1216.82 L1025.32 1216.82 L1024.73 1216.82 L1024.14 1216.82 L1023.56 1216.82 L1022.97 1216.82 L1022.38 1216.82 L1021.8 1216.82 L1021.21 1216.82 L1020.62 1216.82 L1020.04 1216.82 L1019.45 1216.82 L1018.86 1216.82 L1018.28 1216.82 L1017.69 1216.82 L1017.11 1216.82 L1016.52 1216.82 L1015.93 1216.82 L1015.35 1216.82 L1014.76 1216.82 L1014.17 1216.82 L1013.59 1216.82 L1013 1216.82 L1012.41 1216.82 L1011.83 1216.82 L1011.24 1216.82 L1010.65 1216.82 L1010.07 1216.82 L1009.48 1216.82 L1008.9 1216.82 L1008.31 1216.82 L1007.72 1216.82 L1007.14 1216.82 L1006.55 1216.82 L1005.96 1216.82 L1005.38 1216.82 L1004.79 1216.82 L1004.2 1216.82 L1003.62 1216.82 L1003.03 1216.82 L1002.44 1216.82 L1001.86 1216.82 L1001.27 1216.82 L1000.69 1216.82 L1000.1 1216.82 L999.513 1216.82 L998.926 1216.82 L998.34 1216.82 L997.754 1216.82 L997.167 1216.82 L996.581 1216.82 L995.994 1216.82 L995.408 1216.82 L994.822 1216.82 L994.235 1216.82 L993.649 1216.82 L993.062 1216.82 L992.476 1216.82 L991.889 1216.82 L991.303 1216.82 L990.717 1216.82 L990.13 1216.82 L989.544 1216.82 L988.957 1216.82 L988.371 1216.82 L987.785 1216.82 L987.198 1216.82 L986.612 1216.82 L986.025 1216.82  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1216.88 986.612,1216.88 987.198,1216.88 987.785,1216.88 988.371,1216.88 988.957,1216.88 989.544,1216.88 990.13,1216.88 990.717,1216.88 991.303,1216.88 991.889,1216.88 992.476,1216.88 993.062,1216.88 993.649,1216.88 994.235,1216.88 994.822,1216.88 995.408,1216.88 995.994,1216.88 996.581,1216.88 997.167,1216.88 997.754,1216.88 998.34,1216.88 998.926,1216.88 999.513,1216.88 1000.1,1216.88 1000.69,1216.88 1001.27,1216.88 1001.86,1216.88 1002.44,1216.88 1003.03,1216.88 1003.62,1216.88 1004.2,1216.88 1004.79,1216.88 1005.38,1216.88 1005.96,1216.88 1006.55,1216.88 1007.14,1216.88 1007.72,1216.88 1008.31,1216.88 1008.9,1216.88 1009.48,1216.88 1010.07,1216.88 1010.65,1216.88 1011.24,1216.88 1011.83,1216.88 1012.41,1216.88 1013,1216.88 1013.59,1216.88 1014.17,1216.88 1014.76,1216.88 1015.35,1216.88 1015.93,1216.88 1016.52,1216.88 1017.11,1216.88 1017.69,1216.88 1018.28,1216.88 1018.86,1216.88 1019.45,1216.88 1020.04,1216.88 1020.62,1216.88 1021.21,1216.88 1021.8,1216.88 1022.38,1216.88 1022.97,1216.88 1023.56,1216.88 1024.14,1216.88 1024.73,1216.88 1025.32,1216.88 1025.9,1216.88 1026.49,1216.88 1027.07,1216.88 1027.66,1216.88 1028.25,1216.88 1028.83,1216.88 1029.42,1216.88 1030.01,1216.88 1030.59,1216.88 1031.18,1216.88 1031.77,1216.88 1032.35,1216.88 1032.94,1216.88 1033.52,1216.88 1034.11,1216.88 1034.7,1216.88 1035.28,1216.88 1035.87,1216.88 1036.46,1216.88 1037.04,1216.88 1037.63,1216.88 1038.22,1216.88 1038.8,1216.88 1039.39,1216.88 1039.98,1216.88 1040.56,1216.88 1041.15,1216.88 1041.73,1216.88 1042.32,1216.88 1042.91,1216.88 1043.49,1216.88 1044.08,1216.88 1044.67,1216.88 1045.25,1216.88 1045.84,1216.88 1046.43,1216.88 1047.01,1216.88 1047.6,1216.88 1048.19,1216.88 1048.77,1216.88 1049.36,1216.88 1049.94,1216.88 1050.53,1216.88 1051.12,1216.88 1051.7,1216.88 1052.29,1216.88 1052.88,1216.88 1053.46,1216.88 1054.05,1216.88 1054.64,1216.88 1055.22,1216.88 1055.81,1216.88 1056.39,1216.88 1056.98,1216.88 1057.57,1216.88 1058.15,1216.88 1058.74,1216.88 1059.33,1216.88 1059.91,1216.88 1060.5,1216.88 1061.09,1216.88 1061.67,1216.88 1062.26,1216.88 1062.85,1216.88 1063.43,1216.88 1064.02,1216.88 1064.6,1216.88 1065.19,1216.88 1065.78,1216.88 1066.36,1216.88 1066.95,1216.88 1067.54,1216.88 1068.12,1216.88 1068.71,1216.88 1069.3,1216.88 1069.88,1216.88 1070.47,1216.88 1071.06,1216.88 1071.64,1216.88 1072.23,1216.88 1072.81,1216.88 1073.4,1216.88 1073.99,1216.88 1074.57,1216.88 1075.16,1216.88 1075.75,1216.88 1076.33,1216.88 1076.92,1216.88 1077.51,1216.88 1078.09,1216.88 1078.68,1216.88 1079.26,1216.88 1079.85,1216.88 1080.44,1216.88 1081.02,1216.88 1081.61,1216.88 1082.2,1216.88 1082.78,1216.88 1083.37,1216.88 1083.96,1216.88 1084.54,1216.88 1085.13,1216.88 1085.72,1216.88 1086.3,1216.88 1086.89,1216.88 1087.47,1216.88 1088.06,1216.88 1088.65,1216.88 1089.23,1216.88 1089.82,1216.88 1090.41,1216.88 1090.99,1216.88 1091.58,1216.88 1092.17,1216.88 1092.75,1216.88 1093.34,1216.88 1093.93,1216.88 1094.51,1216.88 1095.1,1216.88 1095.68,1216.88 1096.27,1216.88 1096.86,1216.88 1097.44,1216.88 1098.03,1216.88 1098.62,1216.88 1099.2,1216.88 1099.79,1216.88 1100.38,1216.88 1100.96,1216.88 1101.55,1216.88 1102.14,1216.88 1102.72,1216.88 1103.31,1216.88 1103.89,1216.88 1104.48,1216.88 1105.07,1216.88 1105.65,1216.88 1106.24,1216.88 1106.83,1216.88 1107.41,1216.88 1108,1216.88 1108.59,1216.88 1109.17,1216.88 1109.76,1216.88 1110.34,1216.88 1110.93,1216.88 1111.52,1216.88 1112.1,1216.88 1112.69,1216.88 1113.28,1216.88 1113.86,1216.88 1114.45,1216.88 1115.04,1216.88 1115.62,1216.88 1116.21,1216.88 1116.8,1216.88 1117.38,1216.88 1117.97,1216.88 1118.55,1216.88 1119.14,1216.88 1119.73,1216.88 1120.31,1216.88 1120.9,1216.88 1121.49,1216.88 1122.07,1216.88 1122.66,1216.88 1123.25,1216.88 1123.83,1216.88 1124.42,1216.88 1125.01,1216.88 1125.59,1216.88 1126.18,1216.88 1126.76,1216.88 1127.35,1216.88 1127.94,1216.88 1128.52,1216.88 1129.11,1216.88 1129.7,1216.88 1130.28,1216.88 1130.87,1216.88 1131.46,1216.88 1132.04,1216.88 1132.63,1216.88 1133.21,1216.88 1133.8,1216.88 1134.39,1216.88 1134.97,1216.88 1135.56,1216.88 1136.15,1216.88 1136.73,1216.88 1137.32,1216.88 1137.91,1216.88 1138.49,1216.88 1139.08,1216.88 1139.67,1216.88 1140.25,1216.88 1140.84,1216.88 1141.42,1216.88 1142.01,1216.88 1142.6,1216.88 1143.18,1216.88 1143.77,1216.88 1144.36,1216.88 1144.94,1216.88 1145.53,1216.88 1146.12,1216.88 1146.7,1216.88 1147.29,1216.88 1147.88,1216.88 1148.46,1216.88 1149.05,1216.88 1149.63,1216.88 1150.22,1216.88 1150.81,1216.88 1151.39,1216.88 1151.98,1216.88 1152.57,1216.88 1153.15,1216.88 1153.74,1216.88 1154.33,1216.88 1154.91,1216.88 1155.5,1216.88 1156.09,1216.88 1156.67,1216.88 1157.26,1216.88 1157.84,1216.88 1158.43,1216.88 1159.02,1216.88 1159.6,1216.88 1160.19,1216.88 1160.78,1216.88 1161.36,1216.88 1161.95,1216.88 1162.54,1216.88 1163.12,1216.88 1163.71,1216.88 1164.29,1216.88 1164.88,1216.88 1165.47,1216.88 1166.05,1216.88 1166.64,1216.88 1167.23,1216.88 1167.81,1216.88 1168.4,1216.88 1168.99,1216.88 1169.57,1216.88 1170.16,1216.88 1170.75,1216.88 1171.33,1216.88 1171.92,1216.88 1172.5,1216.88 1173.09,1216.88 1173.68,1216.88 1174.26,1216.88 1174.85,1216.88 1175.44,1216.88 1176.02,1216.88 1176.61,1216.88 1177.2,1216.88 1177.78,1216.88 1178.37,1216.88 1178.96,1216.88 1179.54,1216.88 1180.13,1216.88 1180.71,1216.88 1181.3,1216.88 1181.89,1216.88 1182.47,1216.88 1183.06,1216.88 1183.65,1216.88 1184.23,1216.88 1184.82,1216.88 1185.41,1216.88 1185.99,1216.88 1186.58,1216.88 1187.16,1216.88 1187.75,1216.88 1188.34,1216.88 1188.92,1216.88 1189.51,1216.88 1190.1,1216.88 1190.68,1216.88 1191.27,1216.88 1191.86,1216.88 1192.44,1216.88 1193.03,1216.88 1193.62,1216.88 1194.2,1216.88 1194.79,1216.88 1195.37,1216.88 1195.96,1216.88 1196.55,1216.88 1197.13,1216.88 1197.72,1216.88 1198.31,1216.88 1198.89,1216.88 1199.48,1216.88 1200.07,1216.88 1200.65,1216.88 1201.24,1216.88 1201.83,1216.88 1202.41,1216.88 1203,1216.88 1203.58,1216.88 1204.17,1216.88 1204.76,1216.88 1205.34,1216.88 1205.93,1216.88 1206.52,1216.88 1207.1,1216.88 1207.69,1216.88 1208.28,1216.88 1208.86,1216.88 1209.45,1216.88 1210.03,1216.88 1210.62,1216.88 1211.21,1216.88 1211.79,1216.88 1212.38,1216.88 1212.97,1216.88 1213.55,1216.88 1214.14,1216.88 1214.73,1216.88 1215.31,1216.88 1215.9,1216.88 1216.49,1216.88 1217.07,1216.88 1217.66,1216.88 1218.24,1216.88 1218.83,1216.88 1219.42,1216.88 1220,1216.88 1220.59,1216.88 1221.18,1216.88 1221.76,1216.88 1222.35,1216.88 1222.94,1216.88 1223.52,1216.88 1224.11,1216.88 1224.7,1216.88 1225.28,1216.88 1225.87,1216.88 1226.45,1216.88 1227.04,1216.88 1227.63,1216.88 1228.21,1216.88 1228.8,1216.88 1229.39,1216.88 1229.97,1216.88 1230.56,1216.88 1231.15,1216.88 1231.73,1216.88 1232.32,1216.88 1232.91,1216.88 1233.49,1216.88 1234.08,1216.88 1234.66,1216.88 1235.25,1216.88 1235.84,1216.88 1236.42,1216.88 1237.01,1216.88 1237.6,1216.88 1238.18,1216.88 1238.77,1216.88 1239.36,1216.88 1239.94,1216.88 1240.53,1216.88 1241.11,1216.88 1241.7,1216.88 1242.29,1216.88 1242.87,1216.88 1243.46,1216.88 1244.05,1216.88 1244.63,1216.88 1245.22,1216.88 1245.81,1216.88 1246.39,1216.88 1246.98,1216.88 1247.57,1216.88 1248.15,1216.88 1248.74,1216.88 1249.32,1216.88 1249.91,1216.88 1250.5,1216.88 1251.08,1216.88 1251.67,1216.88 1252.26,1216.88 1252.84,1216.88 1253.43,1216.88 1254.02,1216.88 1254.6,1216.88 1255.19,1216.88 1255.78,1216.88 1256.36,1216.88 1256.95,1216.88 1257.53,1216.88 1258.12,1216.88 1258.71,1216.88 1259.29,1216.88 1259.88,1216.88 1260.47,1216.88 1261.05,1216.88 1261.64,1216.88 1262.23,1216.88 1262.81,1216.88 1263.4,1216.88 1263.98,1216.88 1264.57,1216.88 1265.16,1216.88 1265.74,1216.88 1266.33,1216.88 1266.92,1216.88 1267.5,1216.88 1268.09,1216.88 1268.68,1216.88 1269.26,1216.88 1269.85,1216.88 1270.44,1216.88 1271.02,1216.88 1271.61,1216.88 1272.19,1216.88 1272.78,1216.88 1273.37,1216.88 1273.95,1216.88 1274.54,1216.88 1275.13,1216.88 1275.71,1216.88 1276.3,1216.88 1276.89,1216.88 1277.47,1216.88 1278.06,1216.88 1278.65,1216.88 1279.23,1216.88 1279.82,1216.88 1280.4,1216.88 1280.99,1216.88 1281.58,1216.88 1282.16,1216.88 1282.75,1216.88 1283.34,1216.88 1283.92,1216.88 1284.51,1216.88 1285.1,1216.88 1285.68,1216.88 1286.27,1216.88 1286.86,1216.88 1287.44,1216.88 1288.03,1216.88 1288.61,1216.88 1289.2,1216.88 1289.79,1216.88 1290.37,1216.88 1290.96,1216.88 1291.55,1216.88 1292.13,1216.88 1292.72,1216.88 1293.31,1216.88 1293.89,1216.88 1294.48,1216.88 1295.06,1216.88 1295.65,1216.88 1296.24,1216.88 1296.82,1216.88 1297.41,1216.88 1298,1216.88 1298.58,1216.88 1299.17,1216.88 1299.76,1216.88 1300.34,1216.88 1300.93,1216.88 1301.52,1216.88 1302.1,1216.88 1302.69,1216.88 1303.27,1216.88 1303.86,1216.88 1304.45,1216.88 1305.03,1216.88 1305.62,1216.88 1306.21,1216.88 1306.79,1216.88 1307.38,1216.88 1307.97,1216.88 1308.55,1216.88 1309.14,1216.88 1309.73,1216.88 1310.31,1216.88 1310.9,1216.88 1311.48,1216.88 1312.07,1216.88 1312.66,1216.88 1313.24,1216.88 1313.83,1216.88 1314.42,1216.88 1315,1216.88 1315.59,1216.88 1316.18,1216.88 1316.76,1216.88 1317.35,1216.88 1317.93,1216.88 1318.52,1216.88 1319.11,1216.88 1319.69,1216.88 1320.28,1216.88 1320.87,1216.88 1321.45,1216.88 1322.04,1216.88 1322.63,1216.88 1323.21,1216.88 1323.8,1216.88 1324.39,1216.88 1324.97,1216.88 1325.56,1216.88 1326.14,1216.88 1326.73,1216.88 1327.32,1216.88 1327.9,1216.88 1328.49,1216.88 1329.08,1216.88 1329.66,1216.88 1330.25,1216.88 1330.84,1216.88 1331.42,1216.88 1332.01,1216.88 1332.6,1216.88 1333.18,1216.88 1333.77,1216.88 1334.35,1216.88 1334.94,1216.88 1335.53,1216.88 1336.11,1216.88 1336.7,1216.88 1337.29,1216.88 1337.87,1216.88 1338.46,1216.88 1339.05,1216.88 1339.63,1216.88 1340.22,1216.88 1340.8,1216.88 1341.39,1216.88 1341.98,1216.88 1342.56,1216.88 1343.15,1216.88 1343.74,1216.88 1344.32,1216.88 1344.91,1216.88 1345.5,1216.88 1346.08,1216.88 1346.67,1216.88 1347.26,1216.88 1347.84,1216.88 1348.43,1216.88 1349.01,1216.88 1349.6,1216.88 1350.19,1216.88 1350.77,1216.88 1351.36,1216.88 1351.95,1216.88 1352.53,1216.88 1353.12,1216.88 1353.71,1216.88 1354.29,1216.88 1354.88,1216.88 1355.47,1216.88 1356.05,1216.88 1356.64,1216.88 1357.22,1216.88 1357.81,1216.88 1358.4,1216.88 1358.98,1216.88 1359.57,1216.88 1360.16,1216.88 1360.74,1216.88 1361.33,1216.88 1361.92,1216.88 1362.5,1216.88 1363.09,1216.88 1363.68,1216.88 1364.26,1216.88 1364.85,1216.88 1365.43,1216.88 1366.02,1216.88 1366.61,1216.88 1367.19,1216.88 1367.78,1216.88 1368.37,1216.88 1368.95,1216.88 1369.54,1216.88 1370.13,1216.88 1370.71,1216.88 1371.3,1216.88 1371.88,1216.88 1372.47,1216.88 1373.06,1216.88 1373.64,1216.88 1374.23,1216.88 1374.82,1216.88 1375.4,1216.88 1375.99,1216.88 1376.58,1216.88 1377.16,1216.88 1377.75,1216.88 1378.34,1216.88 1378.92,1216.88 1379.51,1216.88 1380.09,1216.88 1380.68,1216.88 1381.27,1216.88 1381.85,1216.88 1382.44,1216.88 1383.03,1216.88 1383.61,1216.88 1384.2,1216.88 1384.79,1216.88 1385.37,1216.88 1385.96,1216.88 1386.55,1216.88 1387.13,1216.88 1387.72,1216.88 1388.3,1216.88 1388.89,1216.88 1389.48,1216.88 1390.06,1216.88 1390.65,1216.88 1391.24,1216.88 1391.82,1216.88 1392.41,1216.88 1393,1216.88 1393.58,1216.88 1394.17,1216.88 1394.75,1216.88 1395.34,1216.88 1395.93,1216.88 1396.51,1216.88 1397.1,1216.88 1397.69,1216.88 1398.27,1216.88 1398.86,1216.88 1399.45,1216.88 1400.03,1216.88 1400.62,1216.88 1401.21,1216.88 1401.79,1216.88 1402.38,1216.88 1402.96,1216.88 1403.55,1216.88 1404.14,1216.88 1404.72,1216.88 1405.31,1216.88 1405.9,1216.88 1406.48,1216.88 1407.07,1216.88 1407.66,1216.88 1408.24,1216.88 1408.83,1216.88 1409.42,1216.88 1410,1216.88 1410.59,1216.88 1411.17,1216.88 1411.76,1216.88 1412.35,1216.88 1412.93,1216.88 1413.52,1216.88 1414.11,1216.88 1414.69,1216.88 1415.28,1216.88 1415.87,1216.88 1416.45,1216.88 1417.04,1216.88 1417.63,1216.88 1418.21,1216.88 1418.8,1216.88 1419.38,1216.88 1419.97,1216.88 1420.56,1216.88 1421.14,1216.88 1421.73,1216.88 1422.32,1216.88 1422.9,1216.88 1423.49,1216.88 1424.08,1216.88 1424.66,1216.88 1425.25,1216.88 1425.83,1216.88 1426.42,1216.88 1427.01,1216.88 1427.59,1216.88 1428.18,1216.88 1428.77,1216.88 1429.35,1216.88 1429.94,1216.88 1430.53,1216.88 1431.11,1216.88 1431.7,1216.88 1432.29,1216.88 1432.87,1216.88 1433.46,1216.88 1434.04,1216.88 1434.63,1216.88 1435.22,1216.88 1435.8,1216.88 1436.39,1216.88 1436.98,1216.88 1437.56,1216.88 1438.15,1216.88 1438.74,1216.88 1439.32,1216.88 1439.91,1216.88 1440.5,1216.88 1441.08,1216.88 1441.67,1216.88 1442.25,1216.88 1442.84,1216.88 1443.43,1216.88 1444.01,1216.88 1444.6,1216.88 1445.19,1216.88 1445.77,1216.88 1446.36,1216.88 1446.95,1216.88 1447.53,1216.88 1448.12,1216.88 1448.7,1216.88 1449.29,1216.88 1449.88,1216.88 1450.46,1216.88 1451.05,1216.88 1451.64,1216.88 1452.22,1216.88 1452.81,1216.88 1453.4,1216.88 1453.98,1216.88 1454.57,1216.88 1455.16,1216.88 1455.74,1216.88 1456.33,1216.88 1456.91,1216.88 1457.5,1216.88 1458.09,1216.88 1458.67,1216.88 1459.26,1216.88 1459.85,1216.88 1460.43,1216.88 1461.02,1216.88 1461.61,1216.88 1462.19,1216.88 1462.78,1216.88 1463.37,1216.88 1463.95,1216.88 1464.54,1216.88 1465.12,1216.88 1465.71,1216.88 1466.3,1216.88 1466.88,1216.88 1467.47,1216.88 1468.06,1216.88 1468.64,1216.88 1469.23,1216.88 1469.82,1216.88 1470.4,1216.88 1470.99,1216.88 1471.57,1216.88 1472.16,1216.88 1472.75,1216.88 1473.33,1216.88 1473.92,1216.88 1474.51,1216.88 1475.09,1216.88 1475.68,1216.88 1476.27,1216.88 1476.85,1216.88 1477.44,1216.88 1478.03,1216.88 1478.61,1216.88 1479.2,1216.88 1479.78,1216.88 1480.37,1216.88 1480.96,1216.88 1481.54,1216.88 1482.13,1216.88 1482.72,1216.88 1483.3,1216.88 1483.89,1216.88 1484.48,1216.88 1485.06,1216.88 1485.65,1216.88 1486.24,1216.88 1486.82,1216.88 1487.41,1216.88 1487.99,1216.88 1488.58,1216.88 1489.17,1216.88 1489.75,1216.88 1490.34,1216.88 1490.93,1216.88 1491.51,1216.88 1492.1,1216.88 1492.69,1216.88 1493.27,1216.88 1493.86,1216.88 1494.45,1216.88 1495.03,1216.88 1495.62,1216.88 1496.2,1216.88 1496.79,1216.88 1497.38,1216.88 1497.96,1216.88 1498.55,1216.88 1499.14,1216.88 1499.72,1216.88 1500.31,1216.88 1500.9,1216.88 1501.48,1216.88 1502.07,1216.88 1502.65,1216.88 1503.24,1216.88 1503.83,1216.88 1504.41,1216.88 1505,1216.88 1505.59,1216.88 1506.17,1216.88 1506.76,1216.88 1507.35,1216.88 1507.93,1216.88 1508.52,1216.88 1509.11,1216.88 1509.69,1216.88 1510.28,1216.88 1510.86,1216.88 1511.45,1216.88 1512.04,1216.88 1512.62,1216.88 1513.21,1216.88 1513.8,1216.88 1514.38,1216.88 1514.97,1216.88 1515.56,1216.88 1516.14,1216.88 1516.73,1216.88 1517.32,1216.88 1517.9,1216.88 1518.49,1216.88 1519.07,1216.88 1519.66,1216.88 1520.25,1216.88 1520.83,1216.88 1521.42,1216.88 1522.01,1216.88 1522.59,1216.88 1523.18,1216.88 1523.77,1216.88 1524.35,1216.88 1524.94,1216.88 1525.52,1216.88 1526.11,1216.88 1526.7,1216.88 1527.28,1216.88 1527.87,1216.88 1528.46,1216.88 1529.04,1216.88 1529.63,1216.88 1530.22,1216.88 1530.8,1216.88 1531.39,1216.88 1531.98,1216.88 1532.56,1216.88 1533.15,1216.88 1533.73,1216.88 1534.32,1216.88 1534.91,1216.88 1535.49,1216.88 1536.08,1216.88 1536.67,1216.88 1537.25,1216.88 1537.84,1216.88 1538.43,1216.88 1539.01,1216.88 1539.6,1216.88 1540.19,1216.88 1540.77,1216.88 1541.36,1216.88 1541.94,1216.88 1542.53,1216.88 1543.12,1216.88 1543.7,1216.88 1544.29,1216.88 1544.88,1216.88 1545.46,1216.88 1546.05,1216.88 1546.64,1216.88 1547.22,1216.88 1547.81,1216.88 1548.4,1216.88 1548.98,1216.88 1549.57,1216.88 1550.15,1216.88 1550.74,1216.88 1551.33,1216.88 1551.91,1216.88 1552.5,1216.88 1553.09,1216.88 1553.67,1216.88 1554.26,1216.88 1554.85,1216.88 1555.43,1216.88 1556.02,1216.88 1556.6,1216.88 1557.19,1216.88 1557.78,1216.88 1558.36,1216.88 1558.95,1216.88 1559.54,1216.88 1560.12,1216.88 1560.71,1216.88 1561.3,1216.88 1561.88,1216.88 1562.47,1216.88 1563.06,1216.88 1563.64,1216.88 1564.23,1216.88 1564.81,1216.88 1565.4,1216.88 1565.99,1216.88 1566.57,1216.88 1567.16,1216.88 1567.75,1216.88 1568.33,1216.88 1568.92,1216.88 1569.51,1216.88 1570.09,1216.88 1570.68,1216.88 1571.27,1216.88 1571.85,1216.88 1572.44,1216.88 1573.02,1216.88 1573.61,1216.88 1574.2,1216.88 1574.78,1216.88 1575.37,1216.88 1575.96,1216.88 1576.54,1216.88 1577.13,1216.88 1577.72,1216.88 1578.3,1216.88 1578.89,1216.88 1579.47,1216.88 1580.06,1216.88 1580.65,1216.88 1581.23,1216.88 1581.82,1216.88 1582.41,1216.88 1582.99,1216.88 1583.58,1216.88 1584.17,1216.88 1584.75,1216.88 1585.34,1216.88 1585.93,1216.88 1586.51,1216.88 1587.1,1216.88 1587.68,1216.88 1588.27,1216.88 1588.86,1216.88 1589.44,1216.88 1590.03,1216.88 1590.62,1216.88 1591.2,1216.88 1591.79,1216.88 1592.38,1216.88 1592.96,1216.88 1593.55,1216.88 1594.14,1216.88 1594.72,1216.88 1595.31,1216.88 1595.89,1216.88 1596.48,1216.88 1597.07,1216.88 1597.65,1216.88 1598.24,1216.88 1598.83,1216.88 1599.41,1216.88 1600,1216.88 1600.59,1216.88 1601.17,1216.88 1601.76,1216.88 1602.34,1216.88 1602.93,1216.88 1603.52,1216.88 1604.1,1216.88 1604.69,1216.88 1605.28,1216.88 1605.86,1216.88 1606.45,1216.88 1607.04,1216.88 1607.62,1216.88 1608.21,1216.88 1608.8,1216.88 1609.38,1216.88 1609.97,1216.88 1610.55,1216.88 1611.14,1216.88 1611.73,1216.88 1612.31,1216.88 1612.9,1216.88 1613.49,1216.88 1614.07,1216.88 1614.66,1216.88 1615.25,1216.88 1615.83,1216.88 1616.42,1216.88 1617.01,1216.88 1617.59,1216.88 1618.18,1216.88 1618.76,1216.88 1619.35,1216.88 1619.94,1216.88 1620.52,1216.88 1621.11,1216.88 1621.7,1216.88 1622.28,1216.88 1622.87,1216.88 1623.46,1216.88 1624.04,1216.88 1624.63,1216.88 1625.22,1216.88 1625.8,1216.88 1626.39,1216.88 1626.97,1216.88 1627.56,1216.88 1628.15,1216.88 1628.73,1216.88 1629.32,1216.88 1629.91,1216.88 1630.49,1216.88 1631.08,1216.88 1631.67,1216.88 1632.25,1216.88 1632.84,1216.88 1633.42,1216.88 1634.01,1216.88 1634.6,1216.88 1635.18,1216.88 1635.77,1216.88 1636.36,1216.88 1636.94,1216.88 1637.53,1216.88 1638.12,1216.88 1638.7,1216.88 1639.29,1216.88 1639.88,1216.88 1640.46,1216.88 1641.05,1216.88 1641.63,1216.88 1642.22,1216.88 1642.81,1216.88 1643.39,1216.88 1643.98,1216.88 1644.57,1216.88 1645.15,1216.88 1645.74,1216.88 1646.33,1216.88 1646.91,1216.88 1647.5,1216.88 1648.09,1216.88 1648.67,1216.88 1649.26,1216.88 1649.84,1216.88 1650.43,1216.88 1651.02,1216.88 1651.6,1216.88 1652.19,1216.88 1652.78,1216.88 1653.36,1216.88 1653.95,1216.88 1654.54,1216.88 1655.12,1216.88 1655.71,1216.88 1656.29,1216.88 1656.88,1216.88 1657.47,1216.88 1658.05,1216.88 1658.64,1216.88 1659.23,1216.88 1659.81,1216.88 1660.4,1216.88 1660.99,1216.88 1661.57,1216.88 1662.16,1216.88 1662.75,1216.88 1663.33,1216.88 1663.92,1216.88 1664.5,1216.88 1665.09,1216.88 1665.68,1216.88 1666.26,1216.88 1666.85,1216.88 1667.44,1216.88 1668.02,1216.88 1668.61,1216.88 1669.2,1216.88 1669.78,1216.88 1670.37,1216.88 1670.96,1216.88 1671.54,1216.88 1672.13,1216.88 1672.71,1216.88 1673.3,1216.88 1673.89,1216.88 1674.47,1216.88 1675.06,1216.88 1675.65,1216.88 1676.23,1216.88 1676.82,1216.88 1677.41,1216.88 1677.99,1216.88 1678.58,1216.88 1679.17,1216.88 1679.75,1216.88 1680.34,1216.88 1680.92,1216.88 1681.51,1216.88 1682.1,1216.88 1682.68,1216.88 1683.27,1216.88 1683.86,1216.88 1684.44,1216.88 1685.03,1216.88 1685.62,1216.88 1686.2,1216.88 1686.79,1216.88 1687.37,1216.88 1687.96,1216.88 1688.55,1216.88 1689.13,1216.88 1689.72,1216.88 1690.31,1216.88 1690.89,1216.88 1691.48,1216.88 1692.07,1216.88 1692.65,1216.88 1693.24,1216.88 1693.83,1216.88 1694.41,1216.88 1695,1216.88 1695.58,1216.88 1696.17,1216.88 1696.76,1216.88 1697.34,1216.88 1697.93,1216.88 1698.52,1216.88 1699.1,1216.88 1699.69,1216.88 1700.28,1216.88 1700.86,1216.88 1701.45,1216.88 1702.04,1216.88 1702.62,1216.88 1703.21,1216.88 1703.79,1216.88 1704.38,1216.88 1704.97,1216.88 1705.55,1216.88 1706.14,1216.88 1706.73,1216.88 1707.31,1216.88 1707.9,1216.88 1708.49,1216.88 1709.07,1216.88 1709.66,1216.88 1710.24,1216.88 1710.83,1216.88 1711.42,1216.88 1712,1216.88 1712.59,1216.88 1713.18,1216.88 1713.76,1216.88 1714.35,1216.88 1714.94,1216.88 1715.52,1216.88 1716.11,1216.88 1716.7,1216.88 1717.28,1216.88 1717.87,1216.88 1718.45,1216.88 1719.04,1216.88 1719.63,1216.88 1720.21,1216.88 1720.8,1216.88 1721.39,1216.88 1721.97,1216.88 1722.56,1216.88 1723.15,1216.88 1723.73,1216.88 1724.32,1216.88 1724.91,1216.88 1725.49,1216.88 1726.08,1216.88 1726.66,1216.88 1727.25,1216.88 1727.84,1216.88 1728.42,1216.88 1729.01,1216.88 1729.6,1216.88 1730.18,1216.88 1730.77,1216.88 1731.36,1216.88 1731.94,1216.88 1732.53,1216.88 1733.11,1216.88 1733.7,1216.88 1734.29,1216.88 1734.87,1216.88 1735.46,1216.88 1736.05,1216.88 1736.63,1216.88 1737.22,1216.88 1737.81,1216.88 1738.39,1216.88 1738.98,1216.88 1739.57,1216.88 1740.15,1216.88 1740.74,1216.88 1741.32,1216.88 1741.91,1216.88 1742.5,1216.88 1743.08,1216.88 1743.67,1216.88 1744.26,1216.88 1744.84,1216.88 1745.43,1216.88 1746.02,1216.88 1746.6,1216.88 1747.19,1216.88 1747.78,1216.88 1748.36,1216.88 1748.95,1216.88 1749.53,1216.88 1750.12,1216.88 1750.71,1216.88 1751.29,1216.88 1751.88,1216.88 1752.47,1216.88 1753.05,1216.88 1753.64,1216.88 1754.23,1216.88 1754.81,1216.88 1755.4,1216.88 1755.99,1216.88 1756.57,1216.88 1757.16,1216.88 1757.74,1216.88 1758.33,1216.88 1758.92,1216.88 1759.5,1216.88 1760.09,1216.88 1760.68,1216.88 1761.26,1216.88 1761.85,1216.88 1762.44,1216.88 1763.02,1216.88 1763.61,1216.88 1764.19,1216.88 1764.78,1216.88 1765.37,1216.88 1765.95,1216.88 1766.54,1216.88 1767.13,1216.88 1767.71,1216.88 1768.3,1216.88 1768.89,1216.88 1769.47,1216.88 1770.06,1216.88 1770.65,1216.88 1771.23,1216.88 1771.82,1216.88 1772.4,1216.88 1772.99,1216.88 1773.58,1216.88 1774.16,1216.88 1774.75,1216.88 1775.34,1216.88 1775.92,1216.88 1776.51,1216.88 1777.1,1216.88 1777.68,1216.88 1778.27,1216.88 1778.86,1216.88 1779.44,1216.88 1780.03,1216.88 1780.61,1216.88 1781.2,1216.88 1781.79,1216.88 1782.37,1216.88 1782.96,1216.88 1783.55,1216.88 1784.13,1216.88 1784.72,1216.88 1785.31,1216.88 1785.89,1216.88 1786.48,1216.88 1787.06,1216.88 1787.65,1216.88 1788.24,1216.88 1788.82,1216.88 1789.41,1216.88 1790,1216.88 1790.58,1216.88 1791.17,1216.88 1791.76,1216.88 1792.34,1216.88 1792.93,1216.88 1793.52,1216.88 1794.1,1216.88 1794.69,1216.88 1795.27,1216.88 1795.86,1216.88 1796.45,1216.88 1797.03,1216.88 1797.62,1216.88 1798.21,1216.88 1798.79,1216.88 1799.38,1216.88 1799.97,1216.88 1800.55,1216.88 1801.14,1216.88 1801.73,1216.88 1802.31,1216.88 1802.9,1216.88 1803.48,1216.88 1804.07,1216.88 1804.66,1216.88 1805.24,1216.88 1805.83,1216.88 1806.42,1216.88 1807,1216.88 1807.59,1216.88 1808.18,1216.88 1808.76,1216.88 1809.35,1216.88 1809.94,1216.88 1810.52,1216.88 1811.11,1216.88 1811.69,1216.88 1812.28,1216.88 1812.87,1216.88 1813.45,1216.88 1814.04,1216.88 1814.63,1216.88 1815.21,1216.88 1815.8,1216.88 1816.39,1216.88 1816.97,1216.88 1817.56,1216.88 1818.14,1216.88 1818.73,1216.88 1819.32,1216.88 1819.9,1216.88 1820.49,1216.88 1821.08,1216.88 1821.66,1216.88 1822.25,1216.88 1822.84,1216.88 1823.42,1216.88 1824.01,1216.88 1824.6,1216.88 1825.18,1216.88 1825.77,1216.88 1826.35,1216.88 1826.94,1216.88 1827.53,1216.88 1828.11,1216.88 1828.7,1216.88 1829.29,1216.88 1829.87,1216.88 1830.46,1216.88 1831.05,1216.88 1831.63,1216.88 1832.22,1216.88 1832.81,1216.88 1833.39,1216.88 1833.98,1216.88 1834.56,1216.88 1835.15,1216.88 1835.74,1216.88 1836.32,1216.88 1836.91,1216.88 1837.5,1216.88 1838.08,1216.88 1838.67,1216.88 1839.26,1216.88 1839.84,1216.88 1840.43,1216.88 1841.01,1216.88 1841.6,1216.88 1842.19,1216.88 1842.77,1216.88 1843.36,1216.88 1843.95,1216.88 1844.53,1216.88 1845.12,1216.88 1845.71,1216.88 1846.29,1216.88 1846.88,1216.88 1847.47,1216.88 1848.05,1216.88 1848.64,1216.88 1849.22,1216.88 1849.81,1216.88 1850.4,1216.88 1850.98,1216.88 1851.57,1216.88 1852.16,1216.88 1852.74,1216.88 1853.33,1216.88 1853.92,1216.88 1854.5,1216.88 1855.09,1216.88 1855.68,1216.88 1856.26,1216.88 1856.85,1216.88 1857.43,1216.88 1858.02,1216.88 1858.61,1216.88 1859.19,1216.88 1859.78,1216.88 1860.37,1216.88 1860.95,1216.88 1861.54,1216.88 1862.13,1216.88 1862.71,1216.88 1863.3,1216.88 1863.88,1216.88 1864.47,1216.88 1865.06,1216.88 1865.64,1216.88 1866.23,1216.88 1866.82,1216.88 1867.4,1216.88 1867.99,1216.88 1868.58,1216.88 1869.16,1216.88 1869.75,1216.88 1870.34,1216.88 1870.92,1216.88 1871.51,1216.88 1872.09,1216.88 1872.68,1216.88 1873.27,1216.88 1873.85,1216.88 1874.44,1216.88 1875.03,1216.88 1875.61,1216.88 1876.2,1216.88 1876.79,1216.88 1877.37,1216.88 1877.96,1216.88 1878.55,1216.88 1879.13,1216.88 1879.72,1216.88 1880.3,1216.88 1880.89,1216.88 1881.48,1216.88 1882.06,1216.88 1882.65,1216.88 1883.24,1216.88 1883.82,1216.88 1884.41,1216.88 1885,1216.88 1885.58,1216.88 1886.17,1216.88 1886.76,1216.88 1887.34,1216.88 1887.93,1216.88 1888.51,1216.88 1889.1,1216.88 1889.69,1216.88 1890.27,1216.88 1890.86,1216.88 1891.45,1216.88 1892.03,1216.88 1892.62,1216.88 1893.21,1216.88 1893.79,1216.88 1894.38,1216.88 1894.96,1216.88 1895.55,1216.88 1896.14,1216.88 1896.72,1216.88 1897.31,1216.88 1897.9,1216.88 1898.48,1216.88 1899.07,1216.88 1899.66,1216.88 1900.24,1216.88 1900.83,1216.88 1901.42,1216.88 1902,1216.88 1902.59,1216.88 1903.17,1216.88 1903.76,1216.88 1904.35,1216.88 1904.93,1216.88 1905.52,1216.88 1906.11,1216.88 1906.69,1216.88 1907.28,1216.88 1907.87,1216.88 1908.45,1216.88 1909.04,1216.88 1909.63,1216.88 1910.21,1216.88 1910.8,1216.88 1911.38,1216.88 1911.97,1216.88 1912.56,1216.88 1913.14,1216.88 1913.73,1216.88 1914.32,1216.88 1914.9,1216.88 1915.49,1216.88 1916.08,1216.88 1916.66,1216.88 1917.25,1216.88 1917.83,1216.88 1918.42,1216.88 1919.01,1216.88 1919.59,1216.88 1920.18,1216.88 1920.77,1216.88 1921.35,1216.88 1921.94,1216.88 1922.53,1216.88 1923.11,1216.88 1923.7,1216.88 1924.29,1216.88 1924.87,1216.88 1925.46,1216.88 1926.04,1216.88 1926.63,1216.88 1927.22,1216.88 1927.8,1216.88 1928.39,1216.88 1928.98,1216.88 1929.56,1216.88 1930.15,1216.88 1930.74,1216.88 1931.32,1216.88 1931.91,1216.88 1932.5,1216.88 1933.08,1216.88 1933.67,1216.88 1934.25,1216.88 1934.84,1216.88 1935.43,1216.88 1936.01,1216.88 1936.6,1216.88 1937.19,1216.88 1937.77,1216.88 1938.36,1216.88 1938.95,1216.88 1939.53,1216.88 1940.12,1216.88 1940.71,1216.88 1941.29,1216.88 1941.88,1216.88 1942.46,1216.88 1943.05,1216.88 1943.64,1216.88 1944.22,1216.88 1944.81,1216.88 1945.4,1216.88 1945.98,1216.88 1946.57,1216.88 1947.16,1216.88 1947.74,1216.88 1948.33,1216.88 1948.91,1216.88 1949.5,1216.88 1950.09,1216.88 1950.67,1216.88 1951.26,1216.88 1951.85,1216.88 1952.43,1216.88 1953.02,1216.88 1953.61,1216.88 1954.19,1216.88 1954.78,1216.88 1955.37,1216.88 1955.95,1216.88 1956.54,1216.88 1957.12,1216.88 1957.71,1216.88 1958.3,1216.88 1958.88,1216.88 1959.47,1216.88 1960.06,1216.88 1960.64,1216.88 1961.23,1216.88 1961.82,1216.88 1962.4,1216.88 1962.99,1216.88 1963.58,1216.88 1964.16,1216.88 1964.75,1216.88 1965.33,1216.88 1965.92,1216.88 1966.51,1216.88 1967.09,1216.88 1967.68,1216.88 1968.27,1216.88 1968.85,1216.88 1969.44,1216.88 1970.03,1216.88 1970.61,1216.88 1971.2,1216.88 1971.78,1216.88 1972.37,1216.88 1972.96,1216.88 1973.54,1216.88 1974.13,1216.88 1974.72,1216.88 1975.3,1216.88 1975.89,1216.88 1976.48,1216.88 1977.06,1216.88 1977.65,1216.88 1978.24,1216.88 1978.82,1216.88 1979.41,1216.88 1979.99,1216.88 1980.58,1216.88 1981.17,1216.88 1981.75,1216.88 1982.34,1216.88 1982.93,1216.88 1983.51,1216.88 1984.1,1216.88 1984.69,1216.88 1985.27,1216.88 1985.86,1216.88 1986.45,1216.88 1987.03,1216.88 1987.62,1216.88 1988.2,1216.88 1988.79,1216.88 1989.38,1216.88 1989.96,1216.88 1990.55,1216.88 1991.14,1216.88 1991.72,1216.88 1992.31,1216.88 1992.9,1216.88 1993.48,1216.88 1994.07,1216.88 1994.65,1216.88 1995.24,1216.88 1995.83,1216.88 1996.41,1216.88 1997,1216.88 1997.59,1216.88 1998.17,1216.88 1998.76,1216.88 1999.35,1216.88 1999.93,1216.88 2000.52,1216.88 2001.11,1216.88 2001.69,1216.88 2002.28,1216.88 2002.86,1216.88 2003.45,1216.88 2004.04,1216.88 2004.62,1216.88 2005.21,1216.88 2005.8,1216.88 2006.38,1216.88 2006.97,1216.88 2007.56,1216.88 2008.14,1216.88 2008.73,1216.88 2009.32,1216.88 2009.9,1216.88 2010.49,1216.88 2011.07,1216.88 2011.66,1216.88 2012.25,1216.88 2012.83,1216.88 2013.42,1216.88 2014.01,1216.88 2014.59,1216.88 2015.18,1216.88 2015.77,1216.88 2016.35,1216.88 2016.94,1216.88 2017.53,1216.88 2018.11,1216.88 2018.7,1216.88 2019.28,1216.88 2019.87,1216.88 2020.46,1216.88 2021.04,1216.88 2021.63,1216.88 2022.22,1216.88 2022.8,1216.88 2023.39,1216.88 2023.98,1216.88 2024.56,1216.88 2025.15,1216.88 2025.73,1216.88 2026.32,1216.88 2026.91,1216.88 2027.49,1216.88 2028.08,1216.88 2028.67,1216.88 2029.25,1216.88 2029.84,1216.88 2030.43,1216.88 2031.01,1216.88 2031.6,1216.88 2032.19,1216.88 2032.77,1216.88 2033.36,1216.88 2033.94,1216.88 2034.53,1216.88 2035.12,1216.88 2035.7,1216.88 2036.29,1216.88 2036.88,1216.88 2037.46,1216.88 2038.05,1216.88 2038.64,1216.88 2039.22,1216.88 2039.81,1216.88 2040.4,1216.88 2040.98,1216.88 2041.57,1216.88 2042.15,1216.88 2042.74,1216.88 2043.33,1216.88 2043.91,1216.88 2044.5,1216.88 2045.09,1216.88 2045.67,1216.88 2046.26,1216.88 2046.85,1216.88 2047.43,1216.88 2048.02,1216.88 2048.6,1216.88 2049.19,1216.88 2049.78,1216.88 2050.36,1216.88 2050.95,1216.88 2051.54,1216.88 2052.12,1216.88 2052.71,1216.88 2053.3,1216.88 2053.88,1216.88 2054.47,1216.88 2055.06,1216.88 2055.64,1216.88 2056.23,1216.88 2056.81,1216.88 2057.4,1216.88 2057.99,1216.88 2058.57,1216.88 2059.16,1216.88 2059.75,1216.88 2060.33,1216.88 2060.92,1216.88 2061.51,1216.88 2062.09,1216.88 2062.68,1216.88 2063.27,1216.88 2063.85,1216.88 2064.44,1216.88 2065.02,1216.88 2065.61,1216.88 2066.2,1216.88 2066.78,1216.88 2067.37,1216.88 2067.96,1216.88 2068.54,1216.88 2069.13,1216.88 2069.72,1216.88 2070.3,1216.88 2070.89,1216.88 2071.48,1216.88 2072.06,1216.88 2072.65,1216.88 2073.23,1216.88 2073.82,1216.88 2074.41,1216.88 2074.99,1216.88 2075.58,1216.88 2076.17,1216.88 2076.75,1216.88 2077.34,1216.88 2077.93,1216.88 2078.51,1216.88 2079.1,1216.88 2079.68,1216.88 2080.27,1216.88 2080.86,1216.88 2081.44,1216.88 2082.03,1216.88 2082.62,1216.88 2083.2,1216.88 2083.79,1216.88 2084.38,1216.88 2084.96,1216.88 2085.55,1216.88 2086.14,1216.88 2086.72,1216.88 2087.31,1216.88 2087.89,1216.88 2088.48,1216.88 2089.07,1216.88 2089.65,1216.88 2090.24,1216.88 2090.83,1216.88 2091.41,1216.88 2092,1216.88 2092.59,1216.88 2093.17,1216.88 2093.76,1216.88 2094.35,1216.88 2094.93,1216.88 2095.52,1216.88 2096.1,1216.88 2096.69,1216.88 2097.28,1216.88 2097.86,1216.88 2098.45,1216.88 2099.04,1216.88 2099.62,1216.88 2100.21,1216.88 2100.8,1216.88 2101.38,1216.88 2101.97,1216.88 2102.55,1216.88 2103.14,1216.88 2103.73,1216.88 2104.31,1216.88 2104.9,1216.88 2105.49,1216.88 2106.07,1216.88 2106.66,1216.88 2107.25,1216.88 2107.83,1216.88 2108.42,1216.88 2109.01,1216.88 2109.59,1216.88 2110.18,1216.88 2110.76,1216.88 2111.35,1216.88 2111.94,1216.88 2112.52,1216.88 2113.11,1216.88 2113.7,1216.88 2114.28,1216.88 2114.87,1216.88 2115.46,1216.88 2116.04,1216.88 2116.63,1216.88 2117.22,1216.88 2117.8,1216.88 2118.39,1216.88 2118.97,1216.88 2119.56,1216.88 2120.15,1216.88 2120.73,1216.88 2121.32,1216.88 2121.91,1216.88 2122.49,1216.88 2123.08,1216.88 2123.67,1216.88 2124.25,1216.88 2124.84,1216.88 2125.42,1216.88 2126.01,1216.88 2126.6,1216.88 2127.18,1216.88 2127.77,1216.88 2128.36,1216.88 2128.94,1216.88 2129.53,1216.88 2130.12,1216.88 2130.7,1216.88 2131.29,1216.88 2131.88,1216.88 2132.46,1216.88 2133.05,1216.88 2133.63,1216.88 2134.22,1216.88 2134.81,1216.88 2135.39,1216.88 2135.98,1216.88 2136.57,1216.88 2137.15,1216.88 2137.74,1216.88 2138.33,1216.88 2138.91,1216.88 2139.5,1216.88 2140.09,1216.88 2140.67,1216.88 2141.26,1216.88 2141.84,1216.88 2142.43,1216.88 2143.02,1216.88 2143.6,1216.88 2144.19,1216.88 2144.78,1216.88 2145.36,1216.88 2145.95,1216.88 2146.54,1216.88 2147.12,1216.88 2147.71,1216.88 2148.3,1216.88 2148.88,1216.88 2149.47,1216.88 2150.05,1216.88 2150.64,1216.88 2151.23,1216.88 2151.81,1216.88 2152.4,1216.88 2152.99,1216.88 2153.57,1216.88 2154.16,1216.88 2154.75,1216.88 2155.33,1216.88 2155.92,1216.88 2156.5,1216.88 2157.09,1216.88 2157.68,1216.88 2158.26,1216.88 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.93,1198.41 1398.34,899.083 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1234.74 985.439,1198.41 2158.26,1198.41 2158.26,1234.74 985.439,1234.74 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip643\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip643)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3848.08 163.232,-4953 163.792,-4654.68 164.351,-5641.63 164.91,-6506.13 165.469,-7313.16 166.029,-6939.19 166.588,-7681.79 167.147,-8354.93 167.706,-8963.09 168.266,-9510.49 168.825,-9185.47 169.384,-8918.7 169.943,-9375.8 170.503,-9769.66 171.062,-10131 171.621,-10448.7 172.18,-10708.9 172.74,-10940.2 173.299,-11136.7 173.858,-11308.7 174.417,-10980.9 174.977,-11115.4 175.536,-11224.7 176.095,-11292.9 176.655,-10982.1 177.214,-11035 177.773,-10743.3 178.332,-10474.6 178.892,-10483.3 179.451,-10224.8 180.01,-10208.5 180.569,-10166.3 181.129,-10115.4 181.688,-9861.37 182.247,-9804.07 182.806,-9540.57 183.366,-9460.85 183.925,-9366.01 184.484,-9132.42 185.043,-9046.37 185.603,-8667.08 186.162,-8325.6 186.721,-8110.74 187.28,-7889.89 187.84,-7579.15 188.399,-7468.33 188.958,-7367.89 189.517,-7246.83 190.077,-7047.57 190.636,-6932.92 191.195,-6732.61 191.754,-6464.58 192.314,-6279.97 192.873,-6035.27 193.432,-5800.28 193.991,-5633.78 194.551,-5341.47 195.11,-5119.91 195.669,-5027.13 196.228,-4825.25 196.788,-4523.73 197.347,-4388.89 197.906,-4207.4 198.465,-4084.42 199.025,-3918.98 199.584,-3842.96 200.143,-3711.88 200.702,-3546.41 201.262,-3389.75 201.821,-3237.58 202.38,-3093.4 202.939,-2946.48 203.499,-2843.79 204.058,-2775.28 204.617,-2707.14 205.176,-2532.73 205.736,-2406.18 206.295,-2283.74 206.854,-2230.2 207.413,-2136.06 207.973,-2049.95 208.532,-1903.86 209.091,-1796.83 209.65,-1719.72 210.21,-1587.88 210.769,-1544.86 211.328,-1501.68 211.887,-1348.7 212.447,-1305.14 213.006,-1209.97 213.565,-1117.51 214.124,-1052.35 214.684,-1015.87 215.243,-881.319 215.802,-819.37 216.361,-786.635 216.921,-778.819 217.48,-719.672 218.039,-664.214 218.598,-629.986 219.158,-526.921 219.717,-446.462 220.276,-351.827 220.835,-258.714 221.395,-217.138 221.954,-177.086 222.513,-178.473 223.072,-112.871 223.632,-94.8073 224.191,-52.271 224.75,9.83275 225.309,68.8853 225.869,106.117 226.428,160.326 226.987,193.217 227.546,201.355 228.106,211.273 228.665,240.536 229.224,253.21 229.783,281.203 230.343,352.942 230.902,381.156 231.461,423.987 232.02,428.974 232.58,456.066 233.139,502.624 233.698,526.679 234.257,526.907 234.817,587.204 235.376,606.173 235.935,611.319 236.494,597.628 237.054,616.271 237.613,621.001 238.172,624.306 238.731,645.671 239.291,682.525 239.85,683.609 240.409,686.187 240.968,688.701 241.528,690.712 242.087,695.682 242.646,715.655 243.205,738.325 243.765,788.701 244.324,806.051 244.883,842.187 245.442,877.774 246.002,874.362 246.561,890.585 247.12,921.36 247.679,967.368 248.239,1047.44 248.798,1035.43 249.357,1041.51 249.916,1081.16 250.476,1089.01 251.035,1075.83 251.594,1048.15 252.153,1021.95 252.713,999.804 253.272,991.036 253.831,967.866 254.39,947.239 254.95,930.7 255.509,942.698 256.068,973.975 256.627,986.258 257.187,983.017 257.746,977.668 258.305,975.996 258.864,953.503 259.424,949.665 259.983,966.053 260.542,964.855 261.101,961.529 261.661,978.142 262.22,989.868 262.779,1001.42 263.338,1031.39 263.898,1043.07 264.457,1053.18 265.016,1044.23 265.575,1070.04 266.135,1059.6 266.694,1068.74 267.253,1076.16 267.812,1047.61 268.372,1036.87 268.931,1026.59 269.49,1021.58 270.049,1047.82 270.609,1061.14 271.168,1052.32 271.727,1045.05 272.286,1056.52 272.846,1049.52 273.405,1058.36 273.964,1033.95 274.523,976.019 275.083,954.021 275.642,969.343 276.201,964.865 276.76,962.508 277.32,993.649 277.879,987.237 278.438,997.401 278.997,993.746 279.557,1006.85 280.116,1018.76 280.675,1014.52 281.234,1013.27 281.794,1012.85 282.353,974.906 282.912,1039.17 283.471,999.072 284.031,961.458 284.59,959.469 285.149,940.326 285.708,955.864 286.268,907.108 286.827,956.452 287.386,984.326 287.945,996.633 288.505,993.392 289.064,1023.13 289.623,1048.73 290.182,1039.29 290.742,1000.46 291.301,1016.97 291.86,1013.2 292.419,1058.3 292.979,1083.23 293.538,1074.14 294.097,1081.74 294.656,1056.63 295.216,1063.14 295.775,1038.41 296.334,1029.94 296.893,1040.75 297.453,1034.13 298.012,1027.84 298.571,1050.39 299.13,1024.25 299.69,1019.69 300.249,1034.95 300.808,1043.31 301.368,987.13 301.927,984.189 302.486,997.258 303.045,962.296 303.605,958.099 304.164,938.824 304.723,937.452 305.282,949.972 305.842,930.303 306.401,910.462 306.96,923.667 307.519,938.413 308.079,933.128 308.638,962.082 309.197,1007.82 309.756,1053.17 310.316,1062.23 310.875,1071.09 311.434,1076.27 311.993,1016.55 312.553,1010 313.112,1036.61 313.671,1026.26 314.23,1031.26 314.79,1054.92 315.349,1062.85 315.908,1020.84 316.467,1017.76 317.027,1011.37 317.586,1004.94 318.145,986.163 318.704,992.983 319.264,970.411 319.823,950.226 320.382,977.632 320.941,939.082 321.501,953.214 322.06,947.013 322.619,960.824 323.178,956.687 323.738,935.755 324.297,965.92 324.856,961.337 325.415,970.998 325.975,981.441 326.534,975.755 327.093,954.92 327.652,930.813 328.212,906.876 328.771,906.7 329.33,902.421 329.889,886.011 330.449,884.846 331.008,900.681 331.567,916.205 332.126,927.901 332.686,907.934 333.245,921.977 333.804,916.483 334.363,915.164 334.923,911.715 335.482,911.366 336.041,941.404 336.6,952.596 337.16,945.501 337.719,990.308 338.278,982.761 338.837,1023.5 339.397,1049.11 339.956,988.718 340.515,944.723 341.074,923.7 341.634,922.733 342.193,931.117 342.752,911.397 343.311,959.182 343.871,969.026 344.43,975.178 344.989,968.351 345.548,963.977 346.108,974.316 346.667,952.674 347.226,982.378 347.785,969.523 348.345,963.988 348.904,939.821 349.463,950.926 350.022,959.945 350.582,974.83 351.141,965.722 351.7,925.933 352.259,921.459 352.819,933.165 353.378,990.687 353.937,981.389 354.496,956.454 355.056,946.641 355.615,939.113 356.174,947.929 356.733,959.51 357.293,923.825 357.852,918.357 358.411,914.408 358.97,940.652 359.53,963.333 360.089,957.64 360.648,999.289 361.207,985.6 361.767,991.456 362.326,983.517 362.885,961.074 363.444,954.53 364.004,930.59 364.563,907.123 365.122,917.774 365.681,943.012 366.241,937.096 366.8,959.895 367.359,930.731 367.918,926.623 368.478,919.254 369.037,893.926 369.596,890.726 370.155,887.987 370.715,869.027 371.274,884.078 371.833,897.618 372.392,959.129 372.952,938.56 373.511,931.28 374.07,939.626 374.629,915.599 375.189,892.003 375.748,904.957 376.307,921.283 376.866,914.476 377.426,894.806 377.985,917.923 378.544,912.113 379.103,904.557 379.663,879.318 380.222,875.408 380.781,886.706 381.34,850.926 381.9,845.251 382.459,856.216 383.018,852.248 383.577,813.336 384.137,811.369 384.696,791.406 385.255,776.431 385.814,786.045 386.374,787.469 386.933,770.247 387.492,756.551 388.051,724.762 388.611,712.021 389.17,699.871 389.729,690.995 390.288,694.551 390.848,714.62 391.407,719.496 391.966,721.682 392.525,693.393 393.085,700.065 393.644,690.66 394.203,696.723 394.762,685.034 395.322,690.552 395.881,695.344 396.44,718.049 396.999,753.078 397.559,736.037 398.118,724.198 398.677,743.638 399.236,744.993 399.796,749.301 400.355,733.962 400.914,737.13 401.473,737.319 402.033,739.903 402.592,771.583 403.151,750.897 403.71,772.269 404.27,755.968 404.829,757.841 405.388,755.587 405.947,756.849 406.507,758.277 407.066,757.688 407.625,759.872 408.184,760.079 408.744,778.379 409.303,778.516 409.862,807.868 410.421,789.86 410.981,787.585 411.54,804.422 412.099,802.619 412.658,801.849 413.218,814.338 413.777,828.932 414.336,825.768 414.895,821.369 415.455,836.15 416.014,814.465 416.573,825.386 417.132,836.816 417.692,764.817 418.251,779.534 418.81,793.148 419.369,792.027 419.929,791.264 420.488,788.219 421.047,769.576 421.606,754.179 422.166,756.831 422.725,774.18 423.284,840.057 423.843,838.638 424.403,836.362 424.962,867.017 425.521,877.266 426.08,868.537 426.64,895.346 427.199,887.419 427.758,876.44 428.318,866.389 428.877,862.069 429.436,852.01 429.995,847.391 430.555,893.814 431.114,876.747 431.673,889.393 432.232,883.023 432.792,893.886 433.351,902.93 433.91,898.042 434.469,843.231 435.029,854.899 435.588,818.956 436.147,814.073 436.706,778.988 437.266,826.275 437.825,825.791 438.384,787.442 438.943,767.707 439.503,788.195 440.062,788.078 440.621,771.872 441.18,750.047 441.74,733.145 442.299,751.158 442.858,753.19 443.417,739.528 443.977,740.591 444.536,746.4 445.095,763.928 445.654,781.584 446.214,783.228 446.773,753.552 447.332,787.51 447.891,787.216 448.451,752.505 449.01,734.38 449.569,736.226 450.128,723.37 450.688,742.665 451.247,726.611 451.806,760.526 452.365,775.155 452.925,776.324 453.484,774.864 454.043,760.888 454.602,759.71 455.162,774.368 455.721,790.305 456.28,773.761 456.839,754.025 457.399,770.195 457.958,799.714 458.517,798.471 459.076,828.766 459.636,824.371 460.195,820.333 460.754,818.337 461.313,814.695 461.873,823.827 462.432,772.212 462.991,770.817 463.55,782.714 464.11,797.11 464.669,793.212 465.228,806.514 465.787,820.53 466.347,833.284 466.906,827.952 467.465,821.182 468.024,849.382 468.584,878.042 469.143,887.983 469.702,899.832 470.261,944.519 470.821,953.176 471.38,942.119 471.939,961.012 472.498,949.833 473.058,908.926 473.617,850.775 474.176,858.741 474.735,934.823 475.295,956.262 475.854,956.983 476.413,915.816 476.972,918.983 477.532,911.214 478.091,896.603 478.65,884.403 479.209,861.413 479.769,871.512 480.328,832.325 480.887,825.791 481.446,818.507 482.006,814.428 482.565,796.451 483.124,764.605 483.683,764.08 484.243,732.129 484.802,719.049 485.361,719.058 485.92,717.709 486.48,703.699 487.039,702.644 487.598,703.483 488.157,718.693 488.717,754.303 489.276,752.671 489.835,692.103 490.394,679.547 490.954,684.037 491.513,700.056 492.072,703.164 492.631,722.781 493.191,725.094 493.75,743.505 494.309,776.964 494.868,771.122 495.428,722.525 495.987,673.163 496.546,693.735 497.105,708.738 497.665,724.648 498.224,708.457 498.783,679.525 499.342,668.296 499.902,691.179 500.461,727.08 501.02,728.448 501.579,728.109 502.139,729.505 502.698,663.025 503.257,648.796 503.816,624.203 504.376,660.308 504.935,614.392 505.494,637.21 506.053,656.978 506.613,661.234 507.172,684.005 507.731,673.311 508.29,644.307 508.85,632.601 509.409,639.745 509.968,646.25 510.527,650.563 511.087,639.521 511.646,645.436 512.205,634.664 512.764,654.016 513.324,655.773 513.883,645.921 514.442,669.215 515.001,627.273 515.561,665.38 516.12,702.531 516.679,720.753 517.238,720.782 517.798,750.325 518.357,732.999 518.916,750.824 519.475,736.098 520.035,738.451 520.594,753.653 521.153,735.5 521.712,769.174 522.272,752.264 522.831,737.012 523.39,734.97 523.949,753.921 524.509,801.043 525.068,829.447 525.627,839.804 526.186,850.672 526.746,860.617 527.305,837.111 527.864,832.626 528.423,825.446 528.983,855.103 529.542,882.627 530.101,873.289 530.66,849.607 531.22,796.211 531.779,763.68 532.338,762.57 532.897,743.06 533.457,756.959 534.016,738.331 534.575,735.108 535.134,734.992 535.694,766.739 536.253,764.588 536.812,763.268 537.371,746.74 537.931,748.244 538.49,763.381 539.049,792.647 539.608,816.755 540.168,777.032 540.727,786.165 541.286,766.245 541.845,745.992 542.405,729.617 542.964,728.763 543.523,727.263 544.082,724.471 544.642,754.308 545.201,734.802 545.76,731.316 546.319,731.649 546.879,730.158 547.438,728.843 547.997,759.97 548.556,773.84 549.116,784.153 549.675,780.182 550.234,776.951 550.793,771.703 551.353,752.872 551.912,735.72 552.471,733.453 553.031,794.28 553.59,757.934 554.149,758.136 554.708,759.839 555.268,773.476 555.827,785.233 556.386,796.442 556.945,775.354 557.505,754.594 558.064,739.277 558.623,719.935 559.182,734.905 559.742,752.24 560.301,767.699 560.86,765.985 561.419,747.58 561.979,733.366 562.538,719.234 563.097,734.155 563.656,735.465 564.216,749.607 564.775,746.056 565.334,759.604 565.893,787.694 566.453,784.401 567.012,779.174 567.571,778.147 568.13,743.555 568.69,743.955 569.249,727.543 569.808,742.336 570.367,739.468 570.927,704.485 571.486,705.543 572.045,690.297 572.604,676.049 573.164,677.947 573.723,696.581 574.282,681.127 574.841,682.789 575.401,683.156 575.96,683.511 576.519,701.44 577.078,687.683 577.638,688.026 578.197,688.332 578.756,690.28 579.315,692.048 579.875,691.301 580.434,741.465 580.993,725.577 581.552,725.125 582.112,674.924 582.671,645.201 583.23,630.545 583.789,650.813 584.349,671.871 584.908,692.457 585.467,659.227 586.026,679.771 586.586,666.868 587.145,666.452 587.704,667.623 588.263,655.385 588.823,659.128 589.382,613.136 589.941,635.376 590.5,622.699 591.06,596.892 591.619,606.293 592.178,643.819 592.737,631.976 593.297,619.477 593.856,626.747 594.415,600.335 594.974,653.288 595.534,640.662 596.093,645.019 596.652,652.453 597.211,642.077 597.771,656.911 598.33,661.159 598.889,710.965 599.448,676.923 600.008,665.255 600.567,636.759 601.126,656.292 601.685,690.829 602.245,673.579 602.804,693.762 603.363,675.535 603.922,678.049 604.482,678.144 605.041,696.51 605.6,697.801 606.159,695.623 606.719,728.488 607.278,696.734 607.837,729.884 608.396,697.042 608.956,725.72 609.515,758.827 610.074,755.214 610.633,755.253 611.193,768.996 611.752,752.216 612.311,734.025 612.87,735.964 613.43,687.863 613.989,703.317 614.548,702.16 615.107,685.719 615.667,670.462 616.226,656.373 616.785,657.809 617.344,662.131 617.904,650.493 618.463,651.349 619.022,666.264 619.581,716.14 620.141,716.785 620.7,731.381 621.259,731.119 621.818,712.363 622.378,694.164 622.937,693.585 623.496,693.286 624.055,694.01 624.615,714.326 625.174,697.917 625.733,695.428 626.292,697.18 626.852,713.818 627.411,716.654 627.97,732.363 628.529,747.74 629.089,713.246 629.648,731.892 630.207,695.384 630.766,663.29 631.326,697.338 631.885,682.303 632.444,699.99 633.003,666.319 633.563,668.915 634.122,638.607 634.681,655.165 635.24,591.765 635.8,562.873 636.359,582.785 636.918,621.632 637.477,623.922 638.037,629.314 638.596,650.989 639.155,652.956 639.714,673.49 640.274,674.618 640.833,677.752 641.392,682.89 641.951,670.043 642.511,655.211 643.07,678.41 643.629,676.779 644.188,662.519 644.748,664.902 645.307,654.302 645.866,671.518 646.425,659.496 646.985,693.758 647.544,693.389 648.103,689.159 648.662,703.316 649.222,719.76 649.781,705.268 650.34,717.438 650.899,717.907 651.459,701.842 652.018,768.766 652.577,782.655 653.136,808.301 653.696,800.901 654.255,796.859 654.814,807.114 655.373,868.864 655.933,814.683 656.492,806.295 657.051,801.94 657.61,801.496 658.17,779.572 658.729,826.322 659.288,836.184 659.847,811.318 660.407,807.34 660.966,799.939 661.525,793.128 662.084,789.069 662.644,754.199 663.203,768.575 663.762,781.933 664.321,730.529 664.881,745.999 665.44,711.018 665.999,694.046 666.558,709.175 667.118,693.834 667.677,725.602 668.236,708.993 668.795,737.792 669.355,719.18 669.914,732.645 670.473,712.926 671.032,726.072 671.592,709.941 672.151,743.27 672.71,773.651 673.269,752.221 673.829,745.756 674.388,730.23 674.947,741.575 675.506,740.55 676.066,725.687 676.625,696.217 677.184,665.509 677.743,651.906 678.303,684.4 678.862,685.632 679.421,639.052 679.981,660.43 680.54,677.349 681.099,663.224 681.658,666.569 682.218,686.616 682.777,674.1 683.336,640.572 683.895,675.214 684.455,661.61 685.014,664.875 685.573,650.212 686.132,635.014 686.692,640.17 687.251,643.328 687.81,661.727 688.369,681.108 688.929,666.053 689.488,663.361 690.047,665.303 690.606,668.964 691.166,685.676 691.725,669.406 692.284,638.438 692.843,640.056 693.403,673.257 693.962,674.823 694.521,646.923 695.08,648.833 695.64,682.945 696.199,682.056 696.758,700.495 697.317,718.981 697.877,716.296 698.436,701.434 698.995,702.191 699.554,719.672 700.114,718.259 700.673,716.164 701.232,695.432 701.791,631.007 702.351,637.432 702.91,623.356 703.469,626.349 704.028,630.354 704.588,631.892 705.147,634.73 705.706,652.064 706.265,655.429 706.825,690.664 707.384,740.724 707.943,738.394 708.502,751.685 709.062,749.063 709.621,745.596 710.18,741.99 710.739,750.846 711.299,780.781 711.858,792.674 712.417,791.788 712.976,785.092 713.536,780.534 714.095,777.807 714.654,757.005 715.213,720.763 715.773,690.419 716.332,739.036 716.891,721.354 717.45,721.226 718.01,708.203 718.569,706.915 719.128,711.935 719.687,725.314 720.247,723.165 720.806,739.496 721.365,739.492 721.924,719.601 722.484,732.155 723.043,716.545 723.602,736.803 724.161,733.454 724.721,734.663 725.28,698.753 725.839,665.789 726.398,663.28 726.958,683.272 727.517,700.017 728.076,702.717 728.635,720.151 729.195,718.292 729.754,717.025 730.313,699.7 730.872,699.391 731.432,747.587 731.991,742.085 732.55,691.325 733.109,737.482 733.669,752.318 734.228,781.384 734.787,762.875 735.346,742.61 735.906,738.375 736.465,716.438 737.024,717.473 737.583,701.055 738.143,699.536 738.702,697.389 739.261,678.682 739.82,664.292 740.38,683.501 740.939,715.556 741.498,698.536 742.057,668.112 742.617,670.847 743.176,686.274 743.735,703.932 744.294,688.687 744.854,676.262 745.413,724.536 745.972,724.628 746.531,721.915 747.091,719.812 747.65,736.791 748.209,735.743 748.768,716.095 749.328,699.564 749.887,732.31 750.446,732.187 751.005,730.174 751.565,731.32 752.124,727.283 752.683,742.647 753.242,687.799 753.802,690.191 754.361,689.608 754.92,691.988 755.479,675.424 756.039,689.865 756.598,688.3 757.157,689.13 757.716,705.677 758.276,686.568 758.835,668.741 759.394,684.8 759.953,683.569 760.513,696.542 761.072,671.047 761.631,640.535 762.19,675.265 762.75,672.882 763.309,673.814 763.868,628.368 764.427,629.697 764.987,601.951 765.546,621.537 766.105,641.595 766.664,643.676 767.224,676.369 767.783,679.063 768.342,712.041 768.901,692.509 769.461,658.035 770.02,660.215 770.579,673.232 771.138,639.435 771.698,637.192 772.257,687.88 772.816,689.173 773.375,688.182 773.935,722.432 774.494,735.455 775.053,746.669 775.612,674.786 776.172,678.137 776.731,676.78 777.29,659.623 777.849,630.056 778.409,638.111 778.968,657.349 779.527,706.257 780.086,704.691 780.646,721.979 781.205,671.85 781.764,689.769 782.323,703.266 782.883,701.297 783.442,730.886 784.001,730.94 784.56,766.278 785.12,764.218 785.679,760.329 786.238,740.467 786.797,707.844 787.357,707.44 787.916,706.225 788.475,721.085 789.034,719.631 789.594,732.137 790.153,713.105 790.712,700.52 791.271,702.1 791.831,699.746 792.39,730.013 792.949,745.097 793.508,739.513 794.068,705.489 794.627,703.689 795.186,717.836 795.745,699.399 796.305,716.071 796.864,667.622 797.423,634.195 797.982,588.146 798.542,603.916 799.101,624.056 799.66,609.796 800.219,614.004 800.779,649.138 801.338,671.963 801.897,674.522 802.456,677.537 803.016,693.883 803.575,642.614 804.134,643.578 804.693,662.297 805.253,663.227 805.812,663.953 806.371,666.448 806.931,667.329 807.49,637.463 808.049,623.806 808.608,625.54 809.168,614.4 809.727,599.459 810.286,603.453 810.845,623.863 811.405,661.897 811.964,662.529 812.523,714.945 813.082,697.638 813.642,699.674 814.201,685.388 814.76,714.618 815.319,732.933 815.879,714.012 816.438,714.573 816.997,680.766 817.556,666.947 818.116,653.21 818.675,637.319 819.234,670.584 819.793,686.435 820.353,700.421 820.912,682.591 821.471,683.785 822.03,682.161 822.59,682.494 823.149,699.995 823.708,699.836 824.267,702.171 824.827,670.022 825.386,655.238 825.945,636.561 826.504,656.225 827.064,673.265 827.623,674.759 828.182,725.041 828.741,751.863 829.301,749.845 829.86,747.627 830.419,723.003 830.978,739.404 831.538,737.502 832.097,749.269 832.656,777.657 833.215,756.845 833.775,741.504 834.334,757.42 834.893,753.762 835.452,736.656 836.012,751.674 836.571,716.88 837.13,702.294 837.689,702.474 838.249,685.716 838.808,672.267 839.367,673.783 839.926,674.741 840.486,707.986 841.045,689.605 841.604,705.641 842.163,723.792 842.723,686.485 843.282,683.413 843.841,712.245 844.4,740.013 844.96,723.846 845.519,737.176 846.078,769.471 846.637,766.958 847.197,759.39 847.756,757.599 848.315,719.31 848.874,745.542 849.434,758.714 849.993,770.428 850.552,734.563 851.111,732.225 851.671,696.846 852.23,677.794 852.789,694.162 853.348,696.037 853.908,663.801 854.467,683.347 855.026,695.25 855.585,695.826 856.145,698.394 856.704,699.949 857.263,695.871 857.822,694.619 858.382,662.73 858.941,665.23 859.5,669.028 860.059,671.051 860.619,669.822 861.178,704.711 861.737,690.976 862.296,707.641 862.856,694.648 863.415,710.904 863.974,711.471 864.533,713.161 865.093,714.503 865.652,694.892 866.211,660.372 866.77,659.253 867.33,673.936 867.889,656.408 868.448,641.464 869.007,643.343 869.567,663.611 870.126,679.213 870.685,661.726 871.244,692.539 871.804,710.085 872.363,725.415 872.922,738.229 873.481,700.435 874.041,689.577 874.6,688.592 875.159,669.923 875.718,669.799 876.278,669.712 876.837,655.756 877.396,659.58 877.955,676.185 878.515,659.013 879.074,681.233 879.633,710.294 880.192,744.099 880.752,740.213 881.311,768.8 881.87,765.508 882.429,759.661 882.989,724.51 883.548,722.921 884.107,739.479 884.666,768.341 885.226,728.539 885.785,694.352 886.344,694.833 886.903,676.636 887.463,691.784 888.022,689.605 888.581,687.801 889.14,655.868 889.7,625.673 890.259,611.306 890.818,629.518 891.377,631.133 891.937,682.614 892.496,694.379 893.055,678.411 893.614,710.755 894.174,724.382 894.733,705.567 895.292,719.733 895.851,717.447 896.411,715.813 896.97,697.093 897.529,697.427 898.088,728.177 898.648,722.579 899.207,752.039 899.766,716.387 900.325,697.941 900.885,700.021 901.444,649.687 902.003,670.908 902.562,707.41 903.122,673.25 903.681,641.662 904.24,679.043 904.799,710.969 905.359,691.812 905.918,738.839 906.477,717.575 907.036,731.499 907.596,682.944 908.155,688.141 908.714,688.476 909.273,689.183 909.833,704.969 910.392,703.914 910.951,730.236 911.51,737.691 912.07,751.547 912.629,746.972 913.188,757.276 913.747,785.685 914.307,779.595 914.866,743.823 915.425,756.602 915.984,735.314 916.544,733.197 917.103,699.489 917.662,712.869 918.221,739.28 918.781,736.035 919.34,701.828 919.899,701.339 920.458,704.6 921.018,685.195 921.577,684.96 922.136,670.972 922.695,621.608 923.255,610.264 923.814,650.236 924.373,638.404 924.932,643.142 925.492,661.966 926.051,628.951 926.61,615.428 927.169,637.211 927.729,639.632 928.288,640.95 928.847,647.574 929.406,664.992 929.966,696.716 930.525,694.26 931.084,725.68 931.644,724.362 932.203,720.807 932.762,735.993 933.321,719.008 933.881,762.434 934.44,790.228 934.999,785.231 935.558,766.538 936.118,766.652 936.677,775.177 937.236,744.61 937.795,742.831 938.355,740.121 938.914,706.136 939.473,740.212 940.032,687.702 940.592,637.392 941.151,639.125 941.71,655.594 942.269,639.848 942.829,623.651 943.388,624.697 943.947,629.708 944.506,649.225 945.066,633.99 945.625,622.932 946.184,590.758 946.743,617.004 947.303,622.668 947.862,624.054 948.421,612.774 948.98,666.539 949.54,652.105 950.099,640.051 950.658,645.786 951.217,650.569 951.777,654.395 952.336,636.692 952.895,620.805 953.454,642.233 954.014,711.027 954.573,728.692 955.132,741.9 955.691,771.006 956.251,753.46 956.81,782.656 957.369,746.958 957.928,712.461 958.488,693.877 959.047,724.325 959.606,704.044 960.165,700.08 960.725,680.082 961.284,677.939 961.843,676.998 962.402,680.221 962.962,664.888 963.521,604.018 964.08,606.205 964.639,611.102 965.199,615.413 965.758,623.611 966.317,657.797 966.876,658.104 967.436,658.871 967.995,641.234 968.554,644.581 969.113,663.128 969.673,695.105 970.232,695.01 970.791,693.555 971.35,708.465 971.91,742.074 972.469,724.343 973.028,738.498 973.587,735.2 974.147,760.325 974.706,758.386 975.265,752.63 975.824,745.064 976.384,742.418 976.943,722.586 977.502,722.349 978.061,735.954 978.621,735.64 979.18,716.09 979.739,709.916 980.298,709.18 980.858,688.625 981.417,671.728 981.976,674.686 982.535,709.765 983.095,720.946 983.654,714.578 984.213,696.369 984.772,716.19 985.332,683.158 985.891,683.241 986.45,730.462 987.009,729.271 987.569,731.028 988.128,745.273 988.687,755.061 989.246,752.426 989.806,764.58 990.365,746.988 990.924,729.516 991.483,696.176 992.043,661.736 992.602,580.994 993.161,587.034 993.72,591.433 994.28,597.83 994.839,634.632 995.398,638.502 995.957,638.296 996.517,639.675 997.076,625.573 997.635,612.099 998.194,631.996 998.754,653.493 999.313,635.268 999.872,619.782 1000.43,641.501 1000.99,626.791 1001.55,648.356 1002.11,652.16 1002.67,651.676 1003.23,649.823 1003.79,684.37 1004.35,654.858 1004.91,690.634 1005.46,692.464 1006.02,709.806 1006.58,694.197 1007.14,696.568 1007.7,711.385 1008.26,743.067 1008.82,708.313 1009.38,744.231 1009.94,708.257 1010.5,675.83 1011.06,626.85 1011.62,629.532 1012.18,648.555 1012.73,652.233 1013.29,655.116 1013.85,662.209 1014.41,664.107 1014.97,631.039 1015.53,586.047 1016.09,608.073 1016.65,633.712 1017.21,654.838 1017.77,670.554 1018.33,657.905 1018.89,677.296 1019.45,661.743 1020.01,696.029 1020.56,714.209 1021.12,698.252 1021.68,680.742 1022.24,666.051 1022.8,681.378 1023.36,680.887 1023.92,666.498 1024.48,669.201 1025.04,656.815 1025.6,688.302 1026.16,721.175 1026.72,795.811 1027.28,819.529 1027.83,829.323 1028.39,819.878 1028.95,826.159 1029.51,818.82 1030.07,815.293 1030.63,777.737 1031.19,771.718 1031.75,765.492 1032.31,749.158 1032.87,714.114 1033.43,714.057 1033.99,729.542 1034.55,742.289 1035.1,756.027 1035.66,738.782 1036.22,720.307 1036.78,751.239 1037.34,730.792 1037.9,729.826 1038.46,708.179 1039.02,675.202 1039.58,676.769 1040.14,709.297 1040.7,689.712 1041.26,672.42 1041.82,672.333 1042.38,703.493 1042.93,702.534 1043.49,718.918 1044.05,732.762 1044.61,764.509 1045.17,749.087 1045.73,776.636 1046.29,788.228 1046.85,800.009 1047.41,792.396 1047.97,797.925 1048.53,742.225 1049.09,740.103 1049.65,699.23 1050.2,700.382 1050.76,717.363 1051.32,700.88 1051.88,684.245 1052.44,718.19 1053,718.314 1053.56,715.228 1054.12,696.151 1054.68,680.365 1055.24,660.303 1055.8,677.176 1056.36,676.799 1056.92,660.517 1057.48,659.347 1058.03,647.846 1058.59,632.388 1059.15,650.213 1059.71,609.153 1060.27,611.575 1060.83,581.172 1061.39,584.62 1061.95,621.523 1062.51,593.646 1063.07,580.487 1063.63,587.924 1064.19,576.307 1064.75,565.873 1065.3,574.081 1065.86,580.516 1066.42,603.406 1066.98,575.526 1067.54,582.689 1068.1,621.821 1068.66,641.42 1069.22,625.417 1069.78,644.673 1070.34,615.302 1070.9,632.914 1071.46,652.244 1072.02,714.248 1072.57,716.671 1073.13,699.475 1073.69,682.448 1074.25,680.282 1074.81,648.295 1075.37,634.447 1075.93,639.381 1076.49,639.858 1077.05,639.675 1077.61,594.055 1078.17,581.973 1078.73,571.258 1079.29,576.024 1079.85,595.11 1080.4,617.879 1080.96,635.073 1081.52,639.873 1082.08,687.798 1082.64,707.643 1083.2,738.759 1083.76,735.298 1084.32,750.074 1084.88,762.017 1085.44,759.375 1086,753.561 1086.56,767.082 1087.12,781.399 1087.67,797.542 1088.23,761.95 1088.79,773.527 1089.35,705.166 1089.91,710.062 1090.47,678.801 1091.03,681.532 1091.59,663.454 1092.15,665.28 1092.71,681.741 1093.27,696.224 1093.83,662.955 1094.39,662.09 1094.94,663.218 1095.5,695.291 1096.06,697.305 1096.62,633.898 1097.18,617.576 1097.74,638.623 1098.3,692.312 1098.86,676.957 1099.42,664.548 1099.98,661.407 1100.54,676.017 1101.1,661.529 1101.66,662.079 1102.22,643.065 1102.77,611.497 1103.33,629.858 1103.89,663.932 1104.45,663.353 1105.01,679.047 1105.57,712.333 1106.13,741.177 1106.69,722.265 1107.25,721.597 1107.81,718.817 1108.37,752.917 1108.93,732.402 1109.49,760.453 1110.04,773.965 1110.6,770.363 1111.16,797.121 1111.72,779.793 1112.28,755.926 1112.84,781.357 1113.4,762.677 1113.96,791.728 1114.52,772.524 1115.08,785.789 1115.64,782.441 1116.2,792.596 1116.76,788.37 1117.31,782.291 1117.87,813.097 1118.43,792.328 1118.99,787.117 1119.55,732.999 1120.11,698.434 1120.67,699.586 1121.23,652.442 1121.79,604.414 1122.35,576.302 1122.91,614.409 1123.47,602.498 1124.03,622.894 1124.59,608.483 1125.14,596.914 1125.7,620.469 1126.26,642.1 1126.82,643.692 1127.38,626.395 1127.94,629.506 1128.5,664.731 1129.06,695.666 1129.62,674.979 1130.18,690.516 1130.74,671.365 1131.3,671.462 1131.86,690.515 1132.41,676.488 1132.97,707.827 1133.53,689.442 1134.09,690.055 1134.65,721.338 1135.21,718.295 1135.77,688.16 1136.33,706.6 1136.89,708.627 1137.45,693.12 1138.01,707.793 1138.57,689.089 1139.13,672.076 1139.68,718.847 1140.24,686.581 1140.8,654.567 1141.36,625.346 1141.92,628.721 1142.48,598.257 1143.04,601.024 1143.6,622.103 1144.16,659.804 1144.72,627.65 1145.28,631.206 1145.84,650.569 1146.4,655.282 1146.96,674.408 1147.51,674.717 1148.07,643.378 1148.63,630.416 1149.19,633.579 1149.75,605.725 1150.31,594.016 1150.87,596.402 1151.43,634.66 1151.99,638.883 1152.55,591.473 1153.11,611.385 1153.67,634.495 1154.23,671.144 1154.78,702.62 1155.34,702.388 1155.9,686.413 1156.46,703.854 1157.02,703.597 1157.58,703.692 1158.14,688.335 1158.7,705.756 1159.26,690.966 1159.82,674.113 1160.38,673.763 1160.94,655 1161.5,609.796 1162.05,613.053 1162.61,602.965 1163.17,640.82 1163.73,611.705 1164.29,615.264 1164.85,621.389 1165.41,672.822 1165.97,642.624 1166.53,649.101 1167.09,652.77 1167.65,656.02 1168.21,625.016 1168.77,644.472 1169.33,626.584 1169.88,626.866 1170.44,646.803 1171,661.713 1171.56,680.103 1172.12,678.244 1172.68,722.828 1173.24,686.106 1173.8,668.105 1174.36,670.373 1174.92,669.181 1175.48,670.532 1176.04,621.219 1176.6,609.477 1177.15,661.495 1177.71,695.658 1178.27,711.381 1178.83,678.321 1179.39,709.199 1179.95,708.581 1180.51,674.201 1181.07,692.27 1181.63,659.564 1182.19,663.544 1182.75,694.594 1183.31,692.951 1183.87,706.346 1184.43,723.26 1184.98,726.3 1185.54,740.192 1186.1,737.585 1186.66,736.775 1187.22,737.406 1187.78,764.519 1188.34,775.118 1188.9,787.439 1189.46,777.801 1190.02,738.867 1190.58,731.902 1191.14,715.143 1191.7,710.776 1192.25,692.028 1192.81,674.158 1193.37,674.724 1193.93,675.251 1194.49,675.177 1195.05,677.24 1195.61,678.387 1196.17,677.528 1196.73,664.148 1197.29,679.285 1197.85,727.937 1198.41,726.708 1198.97,692.808 1199.52,676.89 1200.08,680.224 1200.64,682.63 1201.2,681.814 1201.76,663.095 1202.32,678.194 1202.88,646.733 1203.44,648.808 1204,684.365 1204.56,683.463 1205.12,716.414 1205.68,697.706 1206.24,699.369 1206.8,749.272 1207.35,747.836 1207.91,762.454 1208.47,773.688 1209.03,752.513 1209.59,749.01 1210.15,732.003 1210.71,711.425 1211.27,742.281 1211.83,740.248 1212.39,772.292 1212.95,749.75 1213.51,712.199 1214.07,697.625 1214.62,665.42 1215.18,650.681 1215.74,621.078 1216.3,627.118 1216.86,552.683 1217.42,609.226 1217.98,661.061 1218.54,629.02 1219.1,595.547 1219.66,615.57 1220.22,618.435 1220.78,634.924 1221.34,601.698 1221.89,603.223 1222.45,606.494 1223.01,608.012 1223.57,610.991 1224.13,593.937 1224.69,564.272 1225.25,604.402 1225.81,621.039 1226.37,623.254 1226.93,641.925 1227.49,644.844 1228.05,647.707 1228.61,668.746 1229.17,619.014 1229.72,639.382 1230.28,651.469 1230.84,651.217 1231.4,651.988 1231.96,656.526 1232.52,654.501 1233.08,657.35 1233.64,576.449 1234.2,581.753 1234.76,572.208 1235.32,574.932 1235.88,576.934 1236.44,583.885 1236.99,587.259 1237.55,627.332 1238.11,617.02 1238.67,621.738 1239.23,627.232 1239.79,631.605 1240.35,599.625 1240.91,606.708 1241.47,627.276 1242.03,615.954 1242.59,636.445 1243.15,654.692 1243.71,654.767 1244.26,594.034 1244.82,600.019 1245.38,604.772 1245.94,623.28 1246.5,595.646 1247.06,634.871 1247.62,650.119 1248.18,685.622 1248.74,687.207 1249.3,690.736 1249.86,672.335 1250.42,658.978 1250.98,656.838 1251.54,657.393 1252.09,659.881 1252.65,665.379 1253.21,681.159 1253.77,665.415 1254.33,666.243 1254.89,682.726 1255.45,713.189 1256.01,728.841 1256.57,712.695 1257.13,711.417 1257.69,724.093 1258.25,754.629 1258.81,735.808 1259.36,634.581 1259.92,672.417 1260.48,675.923 1261.04,673.938 1261.6,674.274 1262.16,707.318 1262.72,736.055 1263.28,730.768 1263.84,743.821 1264.4,704.852 1264.96,737.359 1265.52,735.432 1266.08,752.345 1266.63,748.693 1267.19,761.53 1267.75,774.169 1268.31,770.174 1268.87,764.556 1269.43,778.078 1269.99,742.295 1270.55,737.54 1271.11,766.093 1271.67,793.903 1272.23,773.411 1272.79,830.563 1273.35,872.753 1273.91,878.493 1274.46,821.936 1275.02,811.997 1275.58,801.106 1276.14,795.69 1276.7,771.006 1277.26,798.954 1277.82,792.047 1278.38,786.437 1278.94,779.945 1279.5,757.757 1280.06,734.449 1280.62,716.977 1281.18,715.748 1281.73,682.066 1282.29,679.596 1282.85,663.26 1283.41,701.936 1283.97,717.698 1284.53,749.439 1285.09,742.272 1285.65,756.425 1286.21,719.018 1286.77,688.461 1287.33,654.376 1287.89,671.346 1288.45,703.651 1289,717.867 1289.56,695.718 1290.12,711 1290.68,710.769 1291.24,738.243 1291.8,733.429 1292.36,699.113 1292.92,699.525 1293.48,697.347 1294.04,695.719 1294.6,698.169 1295.16,711.857 1295.72,709.59 1296.28,707.314 1296.83,718.352 1297.39,717.809 1297.95,684.578 1298.51,667.799 1299.07,669.064 1299.63,671.236 1300.19,703.249 1300.75,715.399 1301.31,698.593 1301.87,683.5 1302.43,683.54 1302.99,684.678 1303.55,697.588 1304.1,659.713 1304.66,661.893 1305.22,675.455 1305.78,679.99 1306.34,696.118 1306.9,675.222 1307.46,693.341 1308.02,674.316 1308.58,658.004 1309.14,658.552 1309.7,660.681 1310.26,667.728 1310.82,683.18 1311.38,679.584 1311.93,663.411 1312.49,665.474 1313.05,680.68 1313.61,681.369 1314.17,677.505 1314.73,661.424 1315.29,679.921 1315.85,679.914 1316.41,661.836 1316.97,660.106 1317.53,645.105 1318.09,632.126 1318.65,636.807 1319.2,622.785 1319.76,642.888 1320.32,647.117 1320.88,664.675 1321.44,666.164 1322,696.783 1322.56,695.683 1323.12,679.344 1323.68,649.084 1324.24,665.767 1324.8,684.705 1325.36,681.421 1325.92,682.725 1326.47,686.7 1327.03,701.791 1327.59,684.405 1328.15,731.611 1328.71,728.07 1329.27,758.739 1329.83,788.418 1330.39,812.594 1330.95,807.135 1331.51,847.607 1332.07,836.649 1332.63,811.831 1333.19,770.251 1333.75,782.041 1334.3,762.07 1334.86,758.858 1335.42,772.599 1335.98,732.567 1336.54,730.241 1337.1,727.163 1337.66,726.411 1338.22,738.639 1338.78,720.579 1339.34,669.928 1339.9,673.932 1340.46,655.474 1341.02,625.429 1341.57,596.466 1342.13,599.038 1342.69,633.972 1343.25,618.528 1343.81,623.177 1344.37,594.142 1344.93,581.41 1345.49,586.117 1346.05,590.978 1346.61,579.389 1347.17,567.051 1347.73,590.338 1348.29,580.162 1348.84,618.581 1349.4,656.507 1349.96,687.102 1350.52,705.583 1351.08,739.39 1351.64,736.915 1352.2,714.984 1352.76,694.852 1353.32,692.058 1353.88,659.999 1354.44,615.199 1355,669.17 1355.56,657.229 1356.12,655.825 1356.67,604.121 1357.23,637.479 1357.79,610.221 1358.35,629.785 1358.91,632.358 1359.47,683.196 1360.03,699.902 1360.59,715.496 1361.15,726.966 1361.71,723.002 1362.27,702.225 1362.83,699.314 1363.39,717.715 1363.94,716.466 1364.5,716.994 1365.06,712.79 1365.62,726.176 1366.18,723.879 1366.74,674.393 1367.3,657.348 1367.86,691.069 1368.42,707.949 1368.98,742.596 1369.54,720.134 1370.1,721.635 1370.66,721.911 1371.21,735.781 1371.77,733.499 1372.33,765.378 1372.89,776.026 1373.45,753.718 1374.01,814.654 1374.57,795.975 1375.13,776.349 1375.69,785.694 1376.25,763.952 1376.81,761.325 1377.37,775.042 1377.93,755.561 1378.49,734.081 1379.04,731.203 1379.6,729.425 1380.16,761.309 1380.72,761.096 1381.28,742.675 1381.84,742.219 1382.4,721.842 1382.96,735.722 1383.52,730.191 1384.08,747.7 1384.64,748.909 1385.2,719.595 1385.76,754.927 1386.31,753.79 1386.87,781.111 1387.43,743.916 1387.99,708.42 1388.55,688.96 1389.11,657.277 1389.67,661.868 1390.23,683.454 1390.79,684.066 1391.35,680.529 1391.91,666.079 1392.47,683.56 1393.03,687.855 1393.58,669.983 1394.14,637.742 1394.7,576.754 1395.26,563.917 1395.82,551.8 1396.38,574.245 1396.94,595.376 1397.5,598.659 1398.06,636.357 1398.62,626.897 1399.18,632.072 1399.74,648.765 1400.3,617.098 1400.86,605.014 1401.41,658.945 1401.97,660.518 1402.53,676.011 1403.09,626.71 1403.65,661.719 1404.21,663.262 1404.77,678.388 1405.33,714.192 1405.89,692.63 1406.45,693.325 1407.01,682.124 1407.57,670.513 1408.13,686.257 1408.68,688.544 1409.24,673.245 1409.8,629.155 1410.36,614.421 1410.92,603.769 1411.48,611.063 1412.04,599.796 1412.6,569.815 1413.16,594.293 1413.72,616.859 1414.28,635.557 1414.84,634.906 1415.4,636.289 1415.95,656.147 1416.51,671.803 1417.07,700.621 1417.63,730.291 1418.19,729.892 1418.75,730.147 1419.31,711.542 1419.87,707.596 1420.43,689.59 1420.99,673.69 1421.55,688.088 1422.11,688.614 1422.67,686.794 1423.23,671.169 1423.78,655.825 1424.34,656.614 1424.9,673.838 1425.46,656.5 1426.02,689.827 1426.58,624.34 1427.14,630.935 1427.7,617.606 1428.26,624.364 1428.82,628.501 1429.38,665.033 1429.94,697.732 1430.5,696.717 1431.05,710.894 1431.61,692.175 1432.17,691.46 1432.73,659.715 1433.29,659.78 1433.85,644.274 1434.41,630.126 1434.97,667.141 1435.53,698.048 1436.09,715.851 1436.65,714.655 1437.21,714.466 1437.77,727.781 1438.33,758.03 1438.88,771.858 1439.44,749.596 1440,763.09 1440.56,743.178 1441.12,721.55 1441.68,769.015 1442.24,763.334 1442.8,774.205 1443.36,754.418 1443.92,719.482 1444.48,700.154 1445.04,714.716 1445.6,699.005 1446.15,729.621 1446.71,711.502 1447.27,663.145 1447.83,653.05 1448.39,674.295 1448.95,658.891 1449.51,629.5 1450.07,613.74 1450.63,650.079 1451.19,656.827 1451.75,623.861 1452.31,642.691 1452.87,643.214 1453.42,644.883 1453.98,648.13 1454.54,651.762 1455.1,653.17 1455.66,655.745 1456.22,655.929 1456.78,685.406 1457.34,684.194 1457.9,682.357 1458.46,680.685 1459.02,664.693 1459.58,648.225 1460.14,649.138 1460.7,653.485 1461.25,656.148 1461.81,609.285 1462.37,562.085 1462.93,569.164 1463.49,577.111 1464.05,548.27 1464.61,588.577 1465.17,612.054 1465.73,634.117 1466.29,635.724 1466.85,652 1467.41,667.136 1467.97,667.746 1468.52,651.849 1469.08,620.216 1469.64,608.132 1470.2,614.845 1470.76,603.953 1471.32,626.695 1471.88,615.575 1472.44,635.172 1473,636.471 1473.56,654.56 1474.12,671.266 1474.68,705.854 1475.24,705.15 1475.79,735.228 1476.35,718.177 1476.91,700.541 1477.47,765.286 1478.03,749.288 1478.59,778.6 1479.15,787.786 1479.71,764.124 1480.27,746.012 1480.83,739.762 1481.39,734.137 1481.95,696.469 1482.51,696.923 1483.07,712.648 1483.62,747.461 1484.18,740.542 1484.74,723.986 1485.3,723.625 1485.86,706.28 1486.42,692.804 1486.98,672.337 1487.54,721.177 1488.1,702.793 1488.66,704.67 1489.22,716.319 1489.78,702.142 1490.34,763.627 1490.89,789.36 1491.45,767.102 1492.01,779.644 1492.57,790.921 1493.13,786.237 1493.69,766.65 1494.25,746.373 1494.81,773.115 1495.37,751.201 1495.93,746.905 1496.49,745.547 1497.05,771.964 1497.61,782.639 1498.16,783.088 1498.72,796.206 1499.28,726.664 1499.84,726.138 1500.4,741.035 1500.96,721.763 1501.52,722.835 1502.08,706.202 1502.64,720.006 1503.2,721.672 1503.76,702.427 1504.32,703.529 1504.88,686.244 1505.44,685.535 1505.99,667.577 1506.55,668.024 1507.11,653.63 1507.67,658.433 1508.23,643.34 1508.79,648.856 1509.35,667.324 1509.91,681.808 1510.47,695.092 1511.03,695.547 1511.59,710.141 1512.15,708.216 1512.71,692.931 1513.26,711.698 1513.82,628.375 1514.38,615.757 1514.94,619.798 1515.5,657.379 1516.06,677.209 1516.62,678.126 1517.18,668.098 1517.74,637.924 1518.3,638.855 1518.86,642.739 1519.42,659.576 1519.98,660.66 1520.53,611.737 1521.09,629.768 1521.65,649.288 1522.21,651.996 1522.77,654.12 1523.33,654.567 1523.89,656.49 1524.45,629.762 1525.01,615.558 1525.57,604.565 1526.13,576.381 1526.69,598.153 1527.25,601.684 1527.81,606.664 1528.36,626.013 1528.92,659.978 1529.48,709.798 1530.04,688.26 1530.6,701.401 1531.16,681.9 1531.72,665.522 1532.28,680.73 1532.84,646.885 1533.4,601.225 1533.96,622.644 1534.52,688.867 1535.08,673.091 1535.63,670.354 1536.19,658.568 1536.75,676.632 1537.31,693.258 1537.87,690.401 1538.43,722.627 1538.99,702.733 1539.55,718.836 1540.11,751.06 1540.67,751.304 1541.23,762.828 1541.79,741.799 1542.35,724.692 1542.9,738.911 1543.46,718.959 1544.02,734.405 1544.58,715.649 1545.14,712.181 1545.7,681.026 1546.26,682.611 1546.82,663.74 1547.38,698.566 1547.94,694.792 1548.5,659.964 1549.06,662.471 1549.62,678.568 1550.18,744.181 1550.73,724.529 1551.29,706.755 1551.85,691.637 1552.41,692.156 1552.97,659.68 1553.53,677.427 1554.09,664.807 1554.65,650.21 1555.21,654.75 1555.77,644.282 1556.33,680.775 1556.89,725.686 1557.45,724.918 1558,739.112 1558.56,720.038 1559.12,701.73 1559.68,718.084 1560.24,699.865 1560.8,765.943 1561.36,729.605 1561.92,694.973 1562.48,692.195 1563.04,722.331 1563.6,732.599 1564.16,729.055 1564.72,710.193 1565.28,674.374 1565.83,661.961 1566.39,634.403 1566.95,637.999 1567.51,656.388 1568.07,688.401 1568.63,669.661 1569.19,669.43 1569.75,653.05 1570.31,650.941 1570.87,650.666 1571.43,650.86 1571.99,668.687 1572.55,653.736 1573.1,652.984 1573.66,656.43 1574.22,656.177 1574.78,657.603 1575.34,610.086 1575.9,612.77 1576.46,617.564 1577.02,621.79 1577.58,589.256 1578.14,566.128 1578.7,603.65 1579.26,607.991 1579.82,581.593 1580.37,617.91 1580.93,572.587 1581.49,594.775 1582.05,584.119 1582.61,576.733 1583.17,601.213 1583.73,592.239 1584.29,578.543 1584.85,584.249 1585.41,589.608 1585.97,597.397 1586.53,621.101 1587.09,610.021 1587.65,599.282 1588.2,606.517 1588.76,594.034 1589.32,595.638 1589.88,600.985 1590.44,589.485 1591,579.167 1591.56,601.208 1592.12,619.25 1592.68,636.962 1593.24,656.461 1593.8,659.68 1594.36,647.947 1594.92,648.343 1595.47,636.924 1596.03,668.908 1596.59,672.65 1597.15,658.883 1597.71,595.979 1598.27,605.13 1598.83,623.344 1599.39,645.972 1599.95,630.723 1600.51,651.401 1601.07,620.372 1601.63,639.184 1602.19,644.326 1602.74,649.312 1603.3,683.884 1603.86,685.762 1604.42,704.941 1604.98,721.529 1605.54,688.145 1606.1,671.613 1606.66,672.296 1607.22,675.781 1607.78,678.875 1608.34,678.083 1608.9,695.135 1609.46,695.083 1610.02,711.172 1610.57,693.306 1611.13,711.147 1611.69,729.342 1612.25,714.219 1612.81,727.946 1613.37,727.818 1613.93,724.56 1614.49,722.747 1615.05,671.327 1615.61,690.193 1616.17,694.291 1616.73,695.814 1617.29,663.98 1617.84,665.351 1618.4,668.926 1618.96,634.867 1619.52,670.944 1620.08,703.96 1620.64,685.273 1621.2,719.14 1621.76,711.874 1622.32,693.126 1622.88,727.251 1623.44,707.579 1624,707.95 1624.56,672.113 1625.11,685.846 1625.67,686.36 1626.23,670.045 1626.79,672.224 1627.35,691.079 1627.91,677.299 1628.47,690.281 1629.03,738.12 1629.59,734.53 1630.15,730.882 1630.71,708.884 1631.27,691.31 1631.83,694.278 1632.39,691.864 1632.94,689.576 1633.5,671.62 1634.06,674.197 1634.62,645.449 1635.18,664.408 1635.74,679.462 1636.3,678.761 1636.86,674.96 1637.42,658.627 1637.98,689.367 1638.54,689.541 1639.1,671.254 1639.66,670.529 1640.21,718.751 1640.77,686.113 1641.33,685.408 1641.89,716.724 1642.45,700.341 1643.01,683.408 1643.57,699.555 1644.13,714.053 1644.69,696.719 1645.25,710.807 1645.81,695.987 1646.37,678.179 1646.93,680.687 1647.48,648.851 1648.04,696.825 1648.6,730.071 1649.16,744.309 1649.72,759.428 1650.28,767.503 1650.84,793.469 1651.4,773.361 1651.96,815.725 1652.52,809.608 1653.08,803.047 1653.64,827.248 1654.2,784.196 1654.76,796.305 1655.31,775.009 1655.87,755.613 1656.43,754.493 1656.99,751.857 1657.55,763.749 1658.11,763.008 1658.67,770.513 1659.23,765.734 1659.79,790.097 1660.35,784.855 1660.91,779.077 1661.47,776.372 1662.03,784.894 1662.58,797.438 1663.14,791.433 1663.7,785.11 1664.26,794.789 1664.82,807.21 1665.38,800.466 1665.94,761.079 1666.5,784.587 1667.06,780.06 1667.62,807.316 1668.18,832.185 1668.74,840.334 1669.3,847.213 1669.85,835.731 1670.41,826.586 1670.97,788.887 1671.53,782.55 1672.09,775.279 1672.65,769.38 1673.21,764.835 1673.77,693.741 1674.33,707.888 1674.89,671.488 1675.45,667.391 1676.01,650.313 1676.57,685.139 1677.13,635.082 1677.68,640.918 1678.24,674.893 1678.8,675.079 1679.36,657.835 1679.92,638.818 1680.48,640.483 1681.04,662.663 1681.6,661.748 1682.16,642.568 1682.72,656.698 1683.28,658.189 1683.84,690.078 1684.4,704.121 1684.95,719.242 1685.51,702.752 1686.07,686.089 1686.63,670.162 1687.19,670.377 1687.75,672.201 1688.31,706.452 1688.87,706.566 1689.43,718.409 1689.99,762.249 1690.55,724.782 1691.11,738.287 1691.67,702.123 1692.23,685.385 1692.78,685.33 1693.34,650.522 1693.9,621.658 1694.46,658.531 1695.02,645.792 1695.58,647.65 1696.14,647.085 1696.7,667.467 1697.26,637.973 1697.82,624.896 1698.38,675.2 1698.94,708.871 1699.5,689.596 1700.05,689.246 1700.61,625.08 1701.17,612.874 1701.73,584.796 1702.29,608.134 1702.85,664.869 1703.41,649.509 1703.97,634.489 1704.53,636.761 1705.09,692.079 1705.65,723.938 1706.21,737.142 1706.77,750.07 1707.32,748.247 1707.88,778.082 1708.44,774.145 1709,769.458 1709.56,749.785 1710.12,763.798 1710.68,743.85 1711.24,738.354 1711.8,766.108 1712.36,743.514 1712.92,758.212 1713.48,738.131 1714.04,721.694 1714.6,718.755 1715.15,699.147 1715.71,696.234 1716.27,708.298 1716.83,725.707 1717.39,672.161 1717.95,673.551 1718.51,691.99 1719.07,688.602 1719.63,656.588 1720.19,688.569 1720.75,638.52 1721.31,625.756 1721.87,626.296 1722.42,642.084 1722.98,628.679 1723.54,660.958 1724.1,662.697 1724.66,679.234 1725.22,697.446 1725.78,648.461 1726.34,651.068 1726.9,637.286 1727.46,619.864 1728.02,622.847 1728.58,632.347 1729.14,617.278 1729.69,635.637 1730.25,619.819 1730.81,638.381 1731.37,621.192 1731.93,656.048 1732.49,623.948 1733.05,610.358 1733.61,600.624 1734.17,619.11 1734.73,622.338 1735.29,627.913 1735.85,619.148 1736.41,590.679 1736.97,578.336 1737.52,602.304 1738.08,626.403 1738.64,649.416 1739.2,649.421 1739.76,637.613 1740.32,640.878 1740.88,610.775 1741.44,617.548 1742,656.542 1742.56,641.618 1743.12,631.029 1743.68,603.257 1744.24,672.443 1744.79,673.356 1745.35,660.286 1745.91,661.808 1746.47,650.359 1747.03,670.828 1747.59,670.718 1748.15,656.269 1748.71,690.56 1749.27,704.369 1749.83,735.111 1750.39,732.767 1750.95,698.925 1751.51,700.191 1752.06,734.891 1752.62,717.205 1753.18,698.531 1753.74,729.112 1754.3,728.197 1754.86,725.359 1755.42,703.157 1755.98,699.524 1756.54,699.951 1757.1,683.758 1757.66,668.597 1758.22,620.087 1758.78,608.526 1759.34,647.71 1759.89,636.118 1760.45,622.802 1761.01,659.897 1761.57,661.779 1762.13,647.451 1762.69,628.29 1763.25,598.983 1763.81,602.905 1764.37,591.819 1764.93,597.284 1765.49,633.401 1766.05,586.09 1766.61,592.067 1767.16,582.819 1767.72,590.066 1768.28,612.594 1768.84,618.539 1769.4,657.231 1769.96,628.757 1770.52,635.513 1771.08,623.367 1771.64,660.005 1772.2,646.408 1772.76,647.846 1773.32,651.01 1773.88,668.098 1774.43,652.003 1774.99,669.19 1775.55,654.398 1776.11,639.37 1776.67,709.076 1777.23,708.32 1777.79,674.109 1778.35,642.948 1778.91,628.995 1779.47,663.968 1780.03,695.835 1780.59,727.69 1781.15,742.509 1781.71,737.284 1782.26,750.933 1782.82,765.005 1783.38,758.613 1783.94,755.156 1784.5,721.181 1785.06,735.356 1785.62,721.104 1786.18,717.875 1786.74,728.031 1787.3,736.626 1787.86,717.687 1788.42,702.972 1788.98,701.126 1789.53,680.195 1790.09,678.782 1790.65,693.009 1791.21,677.078 1791.77,660.462 1792.33,677.168 1792.89,675.066 1793.45,672.839 1794.01,673.462 1794.57,671.862 1795.13,673.797 1795.69,659.716 1796.25,677.617 1796.8,693.593 1797.36,724.151 1797.92,740.289 1798.48,719.803 1799.04,697.633 1799.6,699.44 1800.16,702.147 1800.72,718.353 1801.28,681.262 1801.84,681.321 1802.4,682.104 1802.96,666.891 1803.52,636.998 1804.08,642.859 1804.63,662.124 1805.19,647.671 1805.75,634.323 1806.31,641.614 1806.87,627.813 1807.43,675.579 1807.99,673.889 1808.55,690.622 1809.11,687.376 1809.67,686.448 1810.23,716.432 1810.79,713.108 1811.35,695.338 1811.9,674.958 1812.46,674.546 1813.02,653.433 1813.58,655.195 1814.14,639.18 1814.7,624.387 1815.26,595.203 1815.82,601.983 1816.38,608.128 1816.94,626.828 1817.5,675.558 1818.06,663.333 1818.62,666.757 1819.18,681.666 1819.73,697.838 1820.29,716.339 1820.85,732.97 1821.41,680.09 1821.97,682.496 1822.53,665.586 1823.09,683.274 1823.65,679.444 1824.21,714.32 1824.77,679.562 1825.33,694.238 1825.89,692.228 1826.45,692.353 1827,706.337 1827.56,722.276 1828.12,722.847 1828.68,735.624 1829.24,729.218 1829.8,739.446 1830.36,751.28 1830.92,750.192 1831.48,762.947 1832.04,725.774 1832.6,722.473 1833.16,706.703 1833.72,705.891 1834.27,722.547 1834.83,715.661 1835.39,712.394 1835.95,725.827 1836.51,706.79 1837.07,702.869 1837.63,721.717 1838.19,737.431 \"/>\n<path clip-path=\"url(#clip643)\" d=\"M720.247 690.842 L720.806 690.842 L721.365 690.842 L721.924 690.842 L722.484 690.842 L723.043 690.842 L723.602 690.842 L724.161 690.842 L724.721 690.842 L725.28 690.842 L725.839 690.842 L726.398 690.842 L726.958 690.842 L727.517 690.842 L728.076 690.842 L728.635 690.842 L729.195 690.842 L729.754 690.842 L730.313 690.842 L730.872 690.842 L731.432 690.842 L731.991 690.842 L732.55 690.842 L733.109 690.842 L733.669 690.842 L734.228 690.842 L734.787 690.842 L735.346 690.842 L735.906 690.842 L736.465 690.842 L737.024 690.842 L737.583 690.842 L738.143 690.842 L738.702 690.842 L739.261 690.842 L739.82 690.842 L740.38 690.842 L740.939 690.842 L741.498 690.842 L742.057 690.842 L742.617 690.842 L743.176 690.842 L743.735 690.842 L744.294 690.842 L744.854 690.842 L745.413 690.842 L745.972 690.842 L746.531 690.842 L747.091 690.842 L747.65 690.842 L748.209 690.842 L748.768 690.842 L749.328 690.842 L749.887 690.842 L750.446 690.842 L751.005 690.842 L751.565 690.842 L752.124 690.842 L752.683 690.842 L753.242 690.842 L753.802 690.842 L754.361 690.842 L754.92 690.842 L755.479 690.842 L756.039 690.842 L756.598 690.842 L757.157 690.842 L757.716 690.842 L758.276 690.842 L758.835 690.842 L759.394 690.842 L759.953 690.842 L760.513 690.842 L761.072 690.842 L761.631 690.842 L762.19 690.842 L762.75 690.842 L763.309 690.842 L763.868 690.842 L764.427 690.842 L764.987 690.842 L765.546 690.842 L766.105 690.842 L766.664 690.842 L767.224 690.842 L767.783 690.842 L768.342 690.842 L768.901 690.842 L769.461 690.842 L770.02 690.842 L770.579 690.842 L771.138 690.842 L771.698 690.842 L772.257 690.842 L772.816 690.842 L773.375 690.842 L773.935 690.842 L774.494 690.842 L775.053 690.842 L775.612 690.842 L776.172 690.842 L776.731 690.842 L777.29 690.842 L777.849 690.842 L778.409 690.842 L778.968 690.842 L779.527 690.842 L780.086 690.842 L780.646 690.842 L781.205 690.842 L781.764 690.842 L782.323 690.842 L782.883 690.842 L783.442 690.842 L784.001 690.842 L784.56 690.842 L785.12 690.842 L785.679 690.842 L786.238 690.842 L786.797 690.842 L787.357 690.842 L787.916 690.842 L788.475 690.842 L789.034 690.842 L789.594 690.842 L790.153 690.842 L790.712 690.842 L791.271 690.842 L791.831 690.842 L792.39 690.842 L792.949 690.842 L793.508 690.842 L794.068 690.842 L794.627 690.842 L795.186 690.842 L795.745 690.842 L796.305 690.842 L796.864 690.842 L797.423 690.842 L797.982 690.842 L798.542 690.842 L799.101 690.842 L799.66 690.842 L800.219 690.842 L800.779 690.842 L801.338 690.842 L801.897 690.842 L802.456 690.842 L803.016 690.842 L803.575 690.842 L804.134 690.842 L804.693 690.842 L805.253 690.842 L805.812 690.842 L806.371 690.842 L806.931 690.842 L807.49 690.842 L808.049 690.842 L808.608 690.842 L809.168 690.842 L809.727 690.842 L810.286 690.842 L810.845 690.842 L811.405 690.842 L811.964 690.842 L812.523 690.842 L813.082 690.842 L813.642 690.842 L814.201 690.842 L814.76 690.842 L815.319 690.842 L815.879 690.842 L816.438 690.842 L816.997 690.842 L817.556 690.842 L818.116 690.842 L818.675 690.842 L819.234 690.842 L819.793 690.842 L820.353 690.842 L820.912 690.842 L821.471 690.842 L822.03 690.842 L822.59 690.842 L823.149 690.842 L823.708 690.842 L824.267 690.842 L824.827 690.842 L825.386 690.842 L825.945 690.842 L826.504 690.842 L827.064 690.842 L827.623 690.842 L828.182 690.842 L828.741 690.842 L829.301 690.842 L829.86 690.842 L830.419 690.842 L830.978 690.842 L831.538 690.842 L832.097 690.842 L832.656 690.842 L833.215 690.842 L833.775 690.842 L834.334 690.842 L834.893 690.842 L835.452 690.842 L836.012 690.842 L836.571 690.842 L837.13 690.842 L837.689 690.842 L838.249 690.842 L838.808 690.842 L839.367 690.842 L839.926 690.842 L840.486 690.842 L841.045 690.842 L841.604 690.842 L842.163 690.842 L842.723 690.842 L843.282 690.842 L843.841 690.842 L844.4 690.842 L844.96 690.842 L845.519 690.842 L846.078 690.842 L846.637 690.842 L847.197 690.842 L847.756 690.842 L848.315 690.842 L848.874 690.842 L849.434 690.842 L849.993 690.842 L850.552 690.842 L851.111 690.842 L851.671 690.842 L852.23 690.842 L852.789 690.842 L853.348 690.842 L853.908 690.842 L854.467 690.842 L855.026 690.842 L855.585 690.842 L856.145 690.842 L856.704 690.842 L857.263 690.842 L857.822 690.842 L858.382 690.842 L858.941 690.842 L859.5 690.842 L860.059 690.842 L860.619 690.842 L861.178 690.842 L861.737 690.842 L862.296 690.842 L862.856 690.842 L863.415 690.842 L863.974 690.842 L864.533 690.842 L865.093 690.842 L865.652 690.842 L866.211 690.842 L866.77 690.842 L867.33 690.842 L867.889 690.842 L868.448 690.842 L869.007 690.842 L869.567 690.842 L870.126 690.842 L870.685 690.842 L871.244 690.842 L871.804 690.842 L872.363 690.842 L872.922 690.842 L873.481 690.842 L874.041 690.842 L874.6 690.842 L875.159 690.842 L875.718 690.842 L876.278 690.842 L876.837 690.842 L877.396 690.842 L877.955 690.842 L878.515 690.842 L879.074 690.842 L879.633 690.842 L880.192 690.842 L880.752 690.842 L881.311 690.842 L881.87 690.842 L882.429 690.842 L882.989 690.842 L883.548 690.842 L884.107 690.842 L884.666 690.842 L885.226 690.842 L885.785 690.842 L886.344 690.842 L886.903 690.842 L887.463 690.842 L888.022 690.842 L888.581 690.842 L889.14 690.842 L889.7 690.842 L890.259 690.842 L890.818 690.842 L891.377 690.842 L891.937 690.842 L892.496 690.842 L893.055 690.842 L893.614 690.842 L894.174 690.842 L894.733 690.842 L895.292 690.842 L895.851 690.842 L896.411 690.842 L896.97 690.842 L897.529 690.842 L898.088 690.842 L898.648 690.842 L899.207 690.842 L899.766 690.842 L900.325 690.842 L900.885 690.842 L901.444 690.842 L902.003 690.842 L902.562 690.842 L903.122 690.842 L903.681 690.842 L904.24 690.842 L904.799 690.842 L905.359 690.842 L905.918 690.842 L906.477 690.842 L907.036 690.842 L907.596 690.842 L908.155 690.842 L908.714 690.842 L909.273 690.842 L909.833 690.842 L910.392 690.842 L910.951 690.842 L911.51 690.842 L912.07 690.842 L912.629 690.842 L913.188 690.842 L913.747 690.842 L914.307 690.842 L914.866 690.842 L915.425 690.842 L915.984 690.842 L916.544 690.842 L917.103 690.842 L917.662 690.842 L918.221 690.842 L918.781 690.842 L919.34 690.842 L919.899 690.842 L920.458 690.842 L921.018 690.842 L921.577 690.842 L922.136 690.842 L922.695 690.842 L923.255 690.842 L923.814 690.842 L924.373 690.842 L924.932 690.842 L925.492 690.842 L926.051 690.842 L926.61 690.842 L927.169 690.842 L927.729 690.842 L928.288 690.842 L928.847 690.842 L929.406 690.842 L929.966 690.842 L930.525 690.842 L931.084 690.842 L931.644 690.842 L932.203 690.842 L932.762 690.842 L933.321 690.842 L933.881 690.842 L934.44 690.842 L934.999 690.842 L935.558 690.842 L936.118 690.842 L936.677 690.842 L937.236 690.842 L937.795 690.842 L938.355 690.842 L938.914 690.842 L939.473 690.842 L940.032 690.842 L940.592 690.842 L941.151 690.842 L941.71 690.842 L942.269 690.842 L942.829 690.842 L943.388 690.842 L943.947 690.842 L944.506 690.842 L945.066 690.842 L945.625 690.842 L946.184 690.842 L946.743 690.842 L947.303 690.842 L947.862 690.842 L948.421 690.842 L948.98 690.842 L949.54 690.842 L950.099 690.842 L950.658 690.842 L951.217 690.842 L951.777 690.842 L952.336 690.842 L952.895 690.842 L953.454 690.842 L954.014 690.842 L954.573 690.842 L955.132 690.842 L955.691 690.842 L956.251 690.842 L956.81 690.842 L957.369 690.842 L957.928 690.842 L958.488 690.842 L959.047 690.842 L959.606 690.842 L960.165 690.842 L960.725 690.842 L961.284 690.842 L961.843 690.842 L962.402 690.842 L962.962 690.842 L963.521 690.842 L964.08 690.842 L964.639 690.842 L965.199 690.842 L965.758 690.842 L966.317 690.842 L966.876 690.842 L967.436 690.842 L967.995 690.842 L968.554 690.842 L969.113 690.842 L969.673 690.842 L970.232 690.842 L970.791 690.842 L971.35 690.842 L971.91 690.842 L972.469 690.842 L973.028 690.842 L973.587 690.842 L974.147 690.842 L974.706 690.842 L975.265 690.842 L975.824 690.842 L976.384 690.842 L976.943 690.842 L977.502 690.842 L978.061 690.842 L978.621 690.842 L979.18 690.842 L979.739 690.842 L980.298 690.842 L980.858 690.842 L981.417 690.842 L981.976 690.842 L982.535 690.842 L983.095 690.842 L983.654 690.842 L984.213 690.842 L984.772 690.842 L985.332 690.842 L985.891 690.842 L986.45 690.842 L987.009 690.842 L987.569 690.842 L988.128 690.842 L988.687 690.842 L989.246 690.842 L989.806 690.842 L990.365 690.842 L990.924 690.842 L991.483 690.842 L992.043 690.842 L992.602 690.842 L993.161 690.842 L993.72 690.842 L994.28 690.842 L994.839 690.842 L995.398 690.842 L995.957 690.842 L996.517 690.842 L997.076 690.842 L997.635 690.842 L998.194 690.842 L998.754 690.842 L999.313 690.842 L999.872 690.842 L1000.43 690.842 L1000.99 690.842 L1001.55 690.842 L1002.11 690.842 L1002.67 690.842 L1003.23 690.842 L1003.79 690.842 L1004.35 690.842 L1004.91 690.842 L1005.46 690.842 L1006.02 690.842 L1006.58 690.842 L1007.14 690.842 L1007.7 690.842 L1008.26 690.842 L1008.82 690.842 L1009.38 690.842 L1009.94 690.842 L1010.5 690.842 L1011.06 690.842 L1011.62 690.842 L1012.18 690.842 L1012.73 690.842 L1013.29 690.842 L1013.85 690.842 L1014.41 690.842 L1014.97 690.842 L1015.53 690.842 L1016.09 690.842 L1016.65 690.842 L1017.21 690.842 L1017.77 690.842 L1018.33 690.842 L1018.89 690.842 L1019.45 690.842 L1020.01 690.842 L1020.56 690.842 L1021.12 690.842 L1021.68 690.842 L1022.24 690.842 L1022.8 690.842 L1023.36 690.842 L1023.92 690.842 L1024.48 690.842 L1025.04 690.842 L1025.6 690.842 L1026.16 690.842 L1026.72 690.842 L1027.28 690.842 L1027.83 690.842 L1028.39 690.842 L1028.95 690.842 L1029.51 690.842 L1030.07 690.842 L1030.63 690.842 L1031.19 690.842 L1031.75 690.842 L1032.31 690.842 L1032.87 690.842 L1033.43 690.842 L1033.99 690.842 L1034.55 690.842 L1035.1 690.842 L1035.66 690.842 L1036.22 690.842 L1036.78 690.842 L1037.34 690.842 L1037.9 690.842 L1038.46 690.842 L1039.02 690.842 L1039.58 690.842 L1040.14 690.842 L1040.7 690.842 L1041.26 690.842 L1041.82 690.842 L1042.38 690.842 L1042.93 690.842 L1043.49 690.842 L1044.05 690.842 L1044.61 690.842 L1045.17 690.842 L1045.73 690.842 L1046.29 690.842 L1046.85 690.842 L1047.41 690.842 L1047.97 690.842 L1048.53 690.842 L1049.09 690.842 L1049.65 690.842 L1050.2 690.842 L1050.76 690.842 L1051.32 690.842 L1051.88 690.842 L1052.44 690.842 L1053 690.842 L1053.56 690.842 L1054.12 690.842 L1054.68 690.842 L1055.24 690.842 L1055.8 690.842 L1056.36 690.842 L1056.92 690.842 L1057.48 690.842 L1058.03 690.842 L1058.59 690.842 L1059.15 690.842 L1059.71 690.842 L1060.27 690.842 L1060.83 690.842 L1061.39 690.842 L1061.95 690.842 L1062.51 690.842 L1063.07 690.842 L1063.63 690.842 L1064.19 690.842 L1064.75 690.842 L1065.3 690.842 L1065.86 690.842 L1066.42 690.842 L1066.98 690.842 L1067.54 690.842 L1068.1 690.842 L1068.66 690.842 L1069.22 690.842 L1069.78 690.842 L1070.34 690.842 L1070.9 690.842 L1071.46 690.842 L1072.02 690.842 L1072.57 690.842 L1073.13 690.842 L1073.69 690.842 L1074.25 690.842 L1074.81 690.842 L1075.37 690.842 L1075.93 690.842 L1076.49 690.842 L1077.05 690.842 L1077.61 690.842 L1078.17 690.842 L1078.73 690.842 L1079.29 690.842 L1079.85 690.842 L1080.4 690.842 L1080.96 690.842 L1081.52 690.842 L1082.08 690.842 L1082.64 690.842 L1083.2 690.842 L1083.76 690.842 L1084.32 690.842 L1084.88 690.842 L1085.44 690.842 L1086 690.842 L1086.56 690.842 L1087.12 690.842 L1087.67 690.842 L1088.23 690.842 L1088.79 690.842 L1089.35 690.842 L1089.91 690.842 L1090.47 690.842 L1091.03 690.842 L1091.59 690.842 L1092.15 690.842 L1092.71 690.842 L1093.27 690.842 L1093.83 690.842 L1094.39 690.842 L1094.94 690.842 L1095.5 690.842 L1096.06 690.842 L1096.62 690.842 L1097.18 690.842 L1097.74 690.842 L1098.3 690.842 L1098.86 690.842 L1099.42 690.842 L1099.98 690.842 L1100.54 690.842 L1101.1 690.842 L1101.66 690.842 L1102.22 690.842 L1102.77 690.842 L1103.33 690.842 L1103.89 690.842 L1104.45 690.842 L1105.01 690.842 L1105.57 690.842 L1106.13 690.842 L1106.69 690.842 L1107.25 690.842 L1107.81 690.842 L1108.37 690.842 L1108.93 690.842 L1109.49 690.842 L1110.04 690.842 L1110.6 690.842 L1111.16 690.842 L1111.72 690.842 L1112.28 690.842 L1112.84 690.842 L1113.4 690.842 L1113.96 690.842 L1114.52 690.842 L1115.08 690.842 L1115.64 690.842 L1116.2 690.842 L1116.76 690.842 L1117.31 690.842 L1117.87 690.842 L1118.43 690.842 L1118.99 690.842 L1119.55 690.842 L1120.11 690.842 L1120.67 690.842 L1121.23 690.842 L1121.79 690.842 L1122.35 690.842 L1122.91 690.842 L1123.47 690.842 L1124.03 690.842 L1124.59 690.842 L1125.14 690.842 L1125.7 690.842 L1126.26 690.842 L1126.82 690.842 L1127.38 690.842 L1127.94 690.842 L1128.5 690.842 L1129.06 690.842 L1129.62 690.842 L1130.18 690.842 L1130.74 690.842 L1131.3 690.842 L1131.86 690.842 L1132.41 690.842 L1132.97 690.842 L1133.53 690.842 L1134.09 690.842 L1134.65 690.842 L1135.21 690.842 L1135.77 690.842 L1136.33 690.842 L1136.89 690.842 L1137.45 690.842 L1138.01 690.842 L1138.57 690.842 L1139.13 690.842 L1139.68 690.842 L1140.24 690.842 L1140.8 690.842 L1141.36 690.842 L1141.92 690.842 L1142.48 690.842 L1143.04 690.842 L1143.6 690.842 L1144.16 690.842 L1144.72 690.842 L1145.28 690.842 L1145.84 690.842 L1146.4 690.842 L1146.96 690.842 L1147.51 690.842 L1148.07 690.842 L1148.63 690.842 L1149.19 690.842 L1149.75 690.842 L1150.31 690.842 L1150.87 690.842 L1151.43 690.842 L1151.99 690.842 L1152.55 690.842 L1153.11 690.842 L1153.67 690.842 L1154.23 690.842 L1154.78 690.842 L1155.34 690.842 L1155.9 690.842 L1156.46 690.842 L1157.02 690.842 L1157.58 690.842 L1158.14 690.842 L1158.7 690.842 L1159.26 690.842 L1159.82 690.842 L1160.38 690.842 L1160.94 690.842 L1161.5 690.842 L1162.05 690.842 L1162.61 690.842 L1163.17 690.842 L1163.73 690.842 L1164.29 690.842 L1164.85 690.842 L1165.41 690.842 L1165.97 690.842 L1166.53 690.842 L1167.09 690.842 L1167.65 690.842 L1168.21 690.842 L1168.77 690.842 L1169.33 690.842 L1169.88 690.842 L1170.44 690.842 L1171 690.842 L1171.56 690.842 L1172.12 690.842 L1172.68 690.842 L1173.24 690.842 L1173.8 690.842 L1174.36 690.842 L1174.92 690.842 L1175.48 690.842 L1176.04 690.842 L1176.6 690.842 L1177.15 690.842 L1177.71 690.842 L1178.27 690.842 L1178.83 690.842 L1179.39 690.842 L1179.95 690.842 L1180.51 690.842 L1181.07 690.842 L1181.63 690.842 L1182.19 690.842 L1182.75 690.842 L1183.31 690.842 L1183.87 690.842 L1184.43 690.842 L1184.98 690.842 L1185.54 690.842 L1186.1 690.842 L1186.66 690.842 L1187.22 690.842 L1187.78 690.842 L1188.34 690.842 L1188.9 690.842 L1189.46 690.842 L1190.02 690.842 L1190.58 690.842 L1191.14 690.842 L1191.7 690.842 L1192.25 690.842 L1192.81 690.842 L1193.37 690.842 L1193.93 690.842 L1194.49 690.842 L1195.05 690.842 L1195.61 690.842 L1196.17 690.842 L1196.73 690.842 L1197.29 690.842 L1197.85 690.842 L1198.41 690.842 L1198.97 690.842 L1199.52 690.842 L1200.08 690.842 L1200.64 690.842 L1201.2 690.842 L1201.76 690.842 L1202.32 690.842 L1202.88 690.842 L1203.44 690.842 L1204 690.842 L1204.56 690.842 L1205.12 690.842 L1205.68 690.842 L1206.24 690.842 L1206.8 690.842 L1207.35 690.842 L1207.91 690.842 L1208.47 690.842 L1209.03 690.842 L1209.59 690.842 L1210.15 690.842 L1210.71 690.842 L1211.27 690.842 L1211.83 690.842 L1212.39 690.842 L1212.95 690.842 L1213.51 690.842 L1214.07 690.842 L1214.62 690.842 L1215.18 690.842 L1215.74 690.842 L1216.3 690.842 L1216.86 690.842 L1217.42 690.842 L1217.98 690.842 L1218.54 690.842 L1219.1 690.842 L1219.66 690.842 L1220.22 690.842 L1220.78 690.842 L1221.34 690.842 L1221.89 690.842 L1222.45 690.842 L1223.01 690.842 L1223.57 690.842 L1224.13 690.842 L1224.69 690.842 L1225.25 690.842 L1225.81 690.842 L1226.37 690.842 L1226.93 690.842 L1227.49 690.842 L1228.05 690.842 L1228.61 690.842 L1229.17 690.842 L1229.72 690.842 L1230.28 690.842 L1230.84 690.842 L1231.4 690.842 L1231.96 690.842 L1232.52 690.842 L1233.08 690.842 L1233.64 690.842 L1234.2 690.842 L1234.76 690.842 L1235.32 690.842 L1235.88 690.842 L1236.44 690.842 L1236.99 690.842 L1237.55 690.842 L1238.11 690.842 L1238.67 690.842 L1239.23 690.842 L1239.79 690.842 L1240.35 690.842 L1240.91 690.842 L1241.47 690.842 L1242.03 690.842 L1242.59 690.842 L1243.15 690.842 L1243.71 690.842 L1244.26 690.842 L1244.82 690.842 L1245.38 690.842 L1245.94 690.842 L1246.5 690.842 L1247.06 690.842 L1247.62 690.842 L1248.18 690.842 L1248.74 690.842 L1249.3 690.842 L1249.86 690.842 L1250.42 690.842 L1250.98 690.842 L1251.54 690.842 L1252.09 690.842 L1252.65 690.842 L1253.21 690.842 L1253.77 690.842 L1254.33 690.842 L1254.89 690.842 L1255.45 690.842 L1256.01 690.842 L1256.57 690.842 L1257.13 690.842 L1257.69 690.842 L1258.25 690.842 L1258.81 690.842 L1259.36 690.842 L1259.92 690.842 L1260.48 690.842 L1261.04 690.842 L1261.6 690.842 L1262.16 690.842 L1262.72 690.842 L1263.28 690.842 L1263.84 690.842 L1264.4 690.842 L1264.96 690.842 L1265.52 690.842 L1266.08 690.842 L1266.63 690.842 L1267.19 690.842 L1267.75 690.842 L1268.31 690.842 L1268.87 690.842 L1269.43 690.842 L1269.99 690.842 L1270.55 690.842 L1271.11 690.842 L1271.67 690.842 L1272.23 690.842 L1272.79 690.842 L1273.35 690.842 L1273.91 690.842 L1274.46 690.842 L1275.02 690.842 L1275.58 690.842 L1276.14 690.842 L1276.7 690.842 L1277.26 690.842 L1277.82 690.842 L1278.38 690.842 L1278.94 690.842 L1279.5 690.842 L1280.06 690.842 L1280.62 690.842 L1281.18 690.842 L1281.73 690.842 L1282.29 690.842 L1282.85 690.842 L1283.41 690.842 L1283.97 690.842 L1284.53 690.842 L1285.09 690.842 L1285.65 690.842 L1286.21 690.842 L1286.77 690.842 L1287.33 690.842 L1287.89 690.842 L1288.45 690.842 L1289 690.842 L1289.56 690.842 L1290.12 690.842 L1290.68 690.842 L1291.24 690.842 L1291.8 690.842 L1292.36 690.842 L1292.92 690.842 L1293.48 690.842 L1294.04 690.842 L1294.6 690.842 L1295.16 690.842 L1295.72 690.842 L1296.28 690.842 L1296.83 690.842 L1297.39 690.842 L1297.95 690.842 L1298.51 690.842 L1299.07 690.842 L1299.63 690.842 L1300.19 690.842 L1300.75 690.842 L1301.31 690.842 L1301.87 690.842 L1302.43 690.842 L1302.99 690.842 L1303.55 690.842 L1304.1 690.842 L1304.66 690.842 L1305.22 690.842 L1305.78 690.842 L1306.34 690.842 L1306.9 690.842 L1307.46 690.842 L1308.02 690.842 L1308.58 690.842 L1309.14 690.842 L1309.7 690.842 L1310.26 690.842 L1310.82 690.842 L1311.38 690.842 L1311.93 690.842 L1312.49 690.842 L1313.05 690.842 L1313.61 690.842 L1314.17 690.842 L1314.73 690.842 L1315.29 690.842 L1315.85 690.842 L1316.41 690.842 L1316.97 690.842 L1317.53 690.842 L1318.09 690.842 L1318.65 690.842 L1319.2 690.842 L1319.76 690.842 L1320.32 690.842 L1320.88 690.842 L1321.44 690.842 L1322 690.842 L1322.56 690.842 L1323.12 690.842 L1323.68 690.842 L1324.24 690.842 L1324.8 690.842 L1325.36 690.842 L1325.92 690.842 L1326.47 690.842 L1327.03 690.842 L1327.59 690.842 L1328.15 690.842 L1328.71 690.842 L1329.27 690.842 L1329.83 690.842 L1330.39 690.842 L1330.95 690.842 L1331.51 690.842 L1332.07 690.842 L1332.63 690.842 L1333.19 690.842 L1333.75 690.842 L1334.3 690.842 L1334.86 690.842 L1335.42 690.842 L1335.98 690.842 L1336.54 690.842 L1337.1 690.842 L1337.66 690.842 L1338.22 690.842 L1338.78 690.842 L1339.34 690.842 L1339.9 690.842 L1340.46 690.842 L1341.02 690.842 L1341.57 690.842 L1342.13 690.842 L1342.69 690.842 L1343.25 690.842 L1343.81 690.842 L1344.37 690.842 L1344.93 690.842 L1345.49 690.842 L1346.05 690.842 L1346.61 690.842 L1347.17 690.842 L1347.73 690.842 L1348.29 690.842 L1348.84 690.842 L1349.4 690.842 L1349.96 690.842 L1350.52 690.842 L1351.08 690.842 L1351.64 690.842 L1352.2 690.842 L1352.76 690.842 L1353.32 690.842 L1353.88 690.842 L1354.44 690.842 L1355 690.842 L1355.56 690.842 L1356.12 690.842 L1356.67 690.842 L1357.23 690.842 L1357.79 690.842 L1358.35 690.842 L1358.91 690.842 L1359.47 690.842 L1360.03 690.842 L1360.59 690.842 L1361.15 690.842 L1361.71 690.842 L1362.27 690.842 L1362.83 690.842 L1363.39 690.842 L1363.94 690.842 L1364.5 690.842 L1365.06 690.842 L1365.62 690.842 L1366.18 690.842 L1366.74 690.842 L1367.3 690.842 L1367.86 690.842 L1368.42 690.842 L1368.98 690.842 L1369.54 690.842 L1370.1 690.842 L1370.66 690.842 L1371.21 690.842 L1371.77 690.842 L1372.33 690.842 L1372.89 690.842 L1373.45 690.842 L1374.01 690.842 L1374.57 690.842 L1375.13 690.842 L1375.69 690.842 L1376.25 690.842 L1376.81 690.842 L1377.37 690.842 L1377.93 690.842 L1378.49 690.842 L1379.04 690.842 L1379.6 690.842 L1380.16 690.842 L1380.72 690.842 L1381.28 690.842 L1381.84 690.842 L1382.4 690.842 L1382.96 690.842 L1383.52 690.842 L1384.08 690.842 L1384.64 690.842 L1385.2 690.842 L1385.76 690.842 L1386.31 690.842 L1386.87 690.842 L1387.43 690.842 L1387.99 690.842 L1388.55 690.842 L1389.11 690.842 L1389.67 690.842 L1390.23 690.842 L1390.79 690.842 L1391.35 690.842 L1391.91 690.842 L1392.47 690.842 L1393.03 690.842 L1393.58 690.842 L1394.14 690.842 L1394.7 690.842 L1395.26 690.842 L1395.82 690.842 L1396.38 690.842 L1396.94 690.842 L1397.5 690.842 L1398.06 690.842 L1398.62 690.842 L1399.18 690.842 L1399.74 690.842 L1400.3 690.842 L1400.86 690.842 L1401.41 690.842 L1401.97 690.842 L1402.53 690.842 L1403.09 690.842 L1403.65 690.842 L1404.21 690.842 L1404.77 690.842 L1405.33 690.842 L1405.89 690.842 L1406.45 690.842 L1407.01 690.842 L1407.57 690.842 L1408.13 690.842 L1408.68 690.842 L1409.24 690.842 L1409.8 690.842 L1410.36 690.842 L1410.92 690.842 L1411.48 690.842 L1412.04 690.842 L1412.6 690.842 L1413.16 690.842 L1413.72 690.842 L1414.28 690.842 L1414.84 690.842 L1415.4 690.842 L1415.95 690.842 L1416.51 690.842 L1417.07 690.842 L1417.63 690.842 L1418.19 690.842 L1418.75 690.842 L1419.31 690.842 L1419.87 690.842 L1420.43 690.842 L1420.99 690.842 L1421.55 690.842 L1422.11 690.842 L1422.67 690.842 L1423.23 690.842 L1423.78 690.842 L1424.34 690.842 L1424.9 690.842 L1425.46 690.842 L1426.02 690.842 L1426.58 690.842 L1427.14 690.842 L1427.7 690.842 L1428.26 690.842 L1428.82 690.842 L1429.38 690.842 L1429.94 690.842 L1430.5 690.842 L1431.05 690.842 L1431.61 690.842 L1432.17 690.842 L1432.73 690.842 L1433.29 690.842 L1433.85 690.842 L1434.41 690.842 L1434.97 690.842 L1435.53 690.842 L1436.09 690.842 L1436.65 690.842 L1437.21 690.842 L1437.77 690.842 L1438.33 690.842 L1438.88 690.842 L1439.44 690.842 L1440 690.842 L1440.56 690.842 L1441.12 690.842 L1441.68 690.842 L1442.24 690.842 L1442.8 690.842 L1443.36 690.842 L1443.92 690.842 L1444.48 690.842 L1445.04 690.842 L1445.6 690.842 L1446.15 690.842 L1446.71 690.842 L1447.27 690.842 L1447.83 690.842 L1448.39 690.842 L1448.95 690.842 L1449.51 690.842 L1450.07 690.842 L1450.63 690.842 L1451.19 690.842 L1451.75 690.842 L1452.31 690.842 L1452.87 690.842 L1453.42 690.842 L1453.98 690.842 L1454.54 690.842 L1455.1 690.842 L1455.66 690.842 L1456.22 690.842 L1456.78 690.842 L1457.34 690.842 L1457.9 690.842 L1458.46 690.842 L1459.02 690.842 L1459.58 690.842 L1460.14 690.842 L1460.7 690.842 L1461.25 690.842 L1461.81 690.842 L1462.37 690.842 L1462.93 690.842 L1463.49 690.842 L1464.05 690.842 L1464.61 690.842 L1465.17 690.842 L1465.73 690.842 L1466.29 690.842 L1466.85 690.842 L1467.41 690.842 L1467.97 690.842 L1468.52 690.842 L1469.08 690.842 L1469.64 690.842 L1470.2 690.842 L1470.76 690.842 L1471.32 690.842 L1471.88 690.842 L1472.44 690.842 L1473 690.842 L1473.56 690.842 L1474.12 690.842 L1474.68 690.842 L1475.24 690.842 L1475.79 690.842 L1476.35 690.842 L1476.91 690.842 L1477.47 690.842 L1478.03 690.842 L1478.59 690.842 L1479.15 690.842 L1479.71 690.842 L1480.27 690.842 L1480.83 690.842 L1481.39 690.842 L1481.95 690.842 L1482.51 690.842 L1483.07 690.842 L1483.62 690.842 L1484.18 690.842 L1484.74 690.842 L1485.3 690.842 L1485.86 690.842 L1486.42 690.842 L1486.98 690.842 L1487.54 690.842 L1488.1 690.842 L1488.66 690.842 L1489.22 690.842 L1489.78 690.842 L1490.34 690.842 L1490.89 690.842 L1491.45 690.842 L1492.01 690.842 L1492.57 690.842 L1493.13 690.842 L1493.69 690.842 L1494.25 690.842 L1494.81 690.842 L1495.37 690.842 L1495.93 690.842 L1496.49 690.842 L1497.05 690.842 L1497.61 690.842 L1498.16 690.842 L1498.72 690.842 L1499.28 690.842 L1499.84 690.842 L1500.4 690.842 L1500.96 690.842 L1501.52 690.842 L1502.08 690.842 L1502.64 690.842 L1503.2 690.842 L1503.76 690.842 L1504.32 690.842 L1504.88 690.842 L1505.44 690.842 L1505.99 690.842 L1506.55 690.842 L1507.11 690.842 L1507.67 690.842 L1508.23 690.842 L1508.79 690.842 L1509.35 690.842 L1509.91 690.842 L1510.47 690.842 L1511.03 690.842 L1511.59 690.842 L1512.15 690.842 L1512.71 690.842 L1513.26 690.842 L1513.82 690.842 L1514.38 690.842 L1514.94 690.842 L1515.5 690.842 L1516.06 690.842 L1516.62 690.842 L1517.18 690.842 L1517.74 690.842 L1518.3 690.842 L1518.86 690.842 L1519.42 690.842 L1519.98 690.842 L1520.53 690.842 L1521.09 690.842 L1521.65 690.842 L1522.21 690.842 L1522.77 690.842 L1523.33 690.842 L1523.89 690.842 L1524.45 690.842 L1525.01 690.842 L1525.57 690.842 L1526.13 690.842 L1526.69 690.842 L1527.25 690.842 L1527.81 690.842 L1528.36 690.842 L1528.92 690.842 L1529.48 690.842 L1530.04 690.842 L1530.6 690.842 L1531.16 690.842 L1531.72 690.842 L1532.28 690.842 L1532.84 690.842 L1533.4 690.842 L1533.96 690.842 L1534.52 690.842 L1535.08 690.842 L1535.63 690.842 L1536.19 690.842 L1536.75 690.842 L1537.31 690.842 L1537.87 690.842 L1538.43 690.842 L1538.99 690.842 L1539.55 690.842 L1540.11 690.842 L1540.67 690.842 L1541.23 690.842 L1541.79 690.842 L1542.35 690.842 L1542.9 690.842 L1543.46 690.842 L1544.02 690.842 L1544.58 690.842 L1545.14 690.842 L1545.7 690.842 L1546.26 690.842 L1546.82 690.842 L1547.38 690.842 L1547.94 690.842 L1548.5 690.842 L1549.06 690.842 L1549.62 690.842 L1550.18 690.842 L1550.73 690.842 L1551.29 690.842 L1551.85 690.842 L1552.41 690.842 L1552.97 690.842 L1553.53 690.842 L1554.09 690.842 L1554.65 690.842 L1555.21 690.842 L1555.77 690.842 L1556.33 690.842 L1556.89 690.842 L1557.45 690.842 L1558 690.842 L1558.56 690.842 L1559.12 690.842 L1559.68 690.842 L1560.24 690.842 L1560.8 690.842 L1561.36 690.842 L1561.92 690.842 L1562.48 690.842 L1563.04 690.842 L1563.6 690.842 L1564.16 690.842 L1564.72 690.842 L1565.28 690.842 L1565.83 690.842 L1566.39 690.842 L1566.95 690.842 L1567.51 690.842 L1568.07 690.842 L1568.63 690.842 L1569.19 690.842 L1569.75 690.842 L1570.31 690.842 L1570.87 690.842 L1571.43 690.842 L1571.99 690.842 L1572.55 690.842 L1573.1 690.842 L1573.66 690.842 L1574.22 690.842 L1574.78 690.842 L1575.34 690.842 L1575.9 690.842 L1576.46 690.842 L1577.02 690.842 L1577.58 690.842 L1578.14 690.842 L1578.7 690.842 L1579.26 690.842 L1579.82 690.842 L1580.37 690.842 L1580.93 690.842 L1581.49 690.842 L1582.05 690.842 L1582.61 690.842 L1583.17 690.842 L1583.73 690.842 L1584.29 690.842 L1584.85 690.842 L1585.41 690.842 L1585.97 690.842 L1586.53 690.842 L1587.09 690.842 L1587.65 690.842 L1588.2 690.842 L1588.76 690.842 L1589.32 690.842 L1589.88 690.842 L1590.44 690.842 L1591 690.842 L1591.56 690.842 L1592.12 690.842 L1592.68 690.842 L1593.24 690.842 L1593.8 690.842 L1594.36 690.842 L1594.92 690.842 L1595.47 690.842 L1596.03 690.842 L1596.59 690.842 L1597.15 690.842 L1597.71 690.842 L1598.27 690.842 L1598.83 690.842 L1599.39 690.842 L1599.95 690.842 L1600.51 690.842 L1601.07 690.842 L1601.63 690.842 L1602.19 690.842 L1602.74 690.842 L1603.3 690.842 L1603.86 690.842 L1604.42 690.842 L1604.98 690.842 L1605.54 690.842 L1606.1 690.842 L1606.66 690.842 L1607.22 690.842 L1607.78 690.842 L1608.34 690.842 L1608.9 690.842 L1609.46 690.842 L1610.02 690.842 L1610.57 690.842 L1611.13 690.842 L1611.69 690.842 L1612.25 690.842 L1612.81 690.842 L1613.37 690.842 L1613.93 690.842 L1614.49 690.842 L1615.05 690.842 L1615.61 690.842 L1616.17 690.842 L1616.73 690.842 L1617.29 690.842 L1617.84 690.842 L1618.4 690.842 L1618.96 690.842 L1619.52 690.842 L1620.08 690.842 L1620.64 690.842 L1621.2 690.842 L1621.76 690.842 L1622.32 690.842 L1622.88 690.842 L1623.44 690.842 L1624 690.842 L1624.56 690.842 L1625.11 690.842 L1625.67 690.842 L1626.23 690.842 L1626.79 690.842 L1627.35 690.842 L1627.91 690.842 L1628.47 690.842 L1629.03 690.842 L1629.59 690.842 L1630.15 690.842 L1630.71 690.842 L1631.27 690.842 L1631.83 690.842 L1632.39 690.842 L1632.94 690.842 L1633.5 690.842 L1634.06 690.842 L1634.62 690.842 L1635.18 690.842 L1635.74 690.842 L1636.3 690.842 L1636.86 690.842 L1637.42 690.842 L1637.98 690.842 L1638.54 690.842 L1639.1 690.842 L1639.66 690.842 L1640.21 690.842 L1640.77 690.842 L1641.33 690.842 L1641.89 690.842 L1642.45 690.842 L1643.01 690.842 L1643.57 690.842 L1644.13 690.842 L1644.69 690.842 L1645.25 690.842 L1645.81 690.842 L1646.37 690.842 L1646.93 690.842 L1647.48 690.842 L1648.04 690.842 L1648.6 690.842 L1649.16 690.842 L1649.72 690.842 L1650.28 690.842 L1650.84 690.842 L1651.4 690.842 L1651.96 690.842 L1652.52 690.842 L1653.08 690.842 L1653.64 690.842 L1654.2 690.842 L1654.76 690.842 L1655.31 690.842 L1655.87 690.842 L1656.43 690.842 L1656.99 690.842 L1657.55 690.842 L1658.11 690.842 L1658.67 690.842 L1659.23 690.842 L1659.79 690.842 L1660.35 690.842 L1660.91 690.842 L1661.47 690.842 L1662.03 690.842 L1662.58 690.842 L1663.14 690.842 L1663.7 690.842 L1664.26 690.842 L1664.82 690.842 L1665.38 690.842 L1665.94 690.842 L1666.5 690.842 L1667.06 690.842 L1667.62 690.842 L1668.18 690.842 L1668.74 690.842 L1669.3 690.842 L1669.85 690.842 L1670.41 690.842 L1670.97 690.842 L1671.53 690.842 L1672.09 690.842 L1672.65 690.842 L1673.21 690.842 L1673.77 690.842 L1674.33 690.842 L1674.89 690.842 L1675.45 690.842 L1676.01 690.842 L1676.57 690.842 L1677.13 690.842 L1677.68 690.842 L1678.24 690.842 L1678.8 690.842 L1679.36 690.842 L1679.92 690.842 L1680.48 690.842 L1681.04 690.842 L1681.6 690.842 L1682.16 690.842 L1682.72 690.842 L1683.28 690.842 L1683.84 690.842 L1684.4 690.842 L1684.95 690.842 L1685.51 690.842 L1686.07 690.842 L1686.63 690.842 L1687.19 690.842 L1687.75 690.842 L1688.31 690.842 L1688.87 690.842 L1689.43 690.842 L1689.99 690.842 L1690.55 690.842 L1691.11 690.842 L1691.67 690.842 L1692.23 690.842 L1692.78 690.842 L1693.34 690.842 L1693.9 690.842 L1694.46 690.842 L1695.02 690.842 L1695.58 690.842 L1696.14 690.842 L1696.7 690.842 L1697.26 690.842 L1697.82 690.842 L1698.38 690.842 L1698.94 690.842 L1699.5 690.842 L1700.05 690.842 L1700.61 690.842 L1701.17 690.842 L1701.73 690.842 L1702.29 690.842 L1702.85 690.842 L1703.41 690.842 L1703.97 690.842 L1704.53 690.842 L1705.09 690.842 L1705.65 690.842 L1706.21 690.842 L1706.77 690.842 L1707.32 690.842 L1707.88 690.842 L1708.44 690.842 L1709 690.842 L1709.56 690.842 L1710.12 690.842 L1710.68 690.842 L1711.24 690.842 L1711.8 690.842 L1712.36 690.842 L1712.92 690.842 L1713.48 690.842 L1714.04 690.842 L1714.6 690.842 L1715.15 690.842 L1715.71 690.842 L1716.27 690.842 L1716.83 690.842 L1717.39 690.842 L1717.95 690.842 L1718.51 690.842 L1719.07 690.842 L1719.63 690.842 L1720.19 690.842 L1720.75 690.842 L1721.31 690.842 L1721.87 690.842 L1722.42 690.842 L1722.98 690.842 L1723.54 690.842 L1724.1 690.842 L1724.66 690.842 L1725.22 690.842 L1725.78 690.842 L1726.34 690.842 L1726.9 690.842 L1727.46 690.842 L1728.02 690.842 L1728.58 690.842 L1729.14 690.842 L1729.69 690.842 L1730.25 690.842 L1730.81 690.842 L1731.37 690.842 L1731.93 690.842 L1732.49 690.842 L1733.05 690.842 L1733.61 690.842 L1734.17 690.842 L1734.73 690.842 L1735.29 690.842 L1735.85 690.842 L1736.41 690.842 L1736.97 690.842 L1737.52 690.842 L1738.08 690.842 L1738.64 690.842 L1739.2 690.842 L1739.76 690.842 L1740.32 690.842 L1740.88 690.842 L1741.44 690.842 L1742 690.842 L1742.56 690.842 L1743.12 690.842 L1743.68 690.842 L1744.24 690.842 L1744.79 690.842 L1745.35 690.842 L1745.91 690.842 L1746.47 690.842 L1747.03 690.842 L1747.59 690.842 L1748.15 690.842 L1748.71 690.842 L1749.27 690.842 L1749.83 690.842 L1750.39 690.842 L1750.95 690.842 L1751.51 690.842 L1752.06 690.842 L1752.62 690.842 L1753.18 690.842 L1753.74 690.842 L1754.3 690.842 L1754.86 690.842 L1755.42 690.842 L1755.98 690.842 L1756.54 690.842 L1757.1 690.842 L1757.66 690.842 L1758.22 690.842 L1758.78 690.842 L1759.34 690.842 L1759.89 690.842 L1760.45 690.842 L1761.01 690.842 L1761.57 690.842 L1762.13 690.842 L1762.69 690.842 L1763.25 690.842 L1763.81 690.842 L1764.37 690.842 L1764.93 690.842 L1765.49 690.842 L1766.05 690.842 L1766.61 690.842 L1767.16 690.842 L1767.72 690.842 L1768.28 690.842 L1768.84 690.842 L1769.4 690.842 L1769.96 690.842 L1770.52 690.842 L1771.08 690.842 L1771.64 690.842 L1772.2 690.842 L1772.76 690.842 L1773.32 690.842 L1773.88 690.842 L1774.43 690.842 L1774.99 690.842 L1775.55 690.842 L1776.11 690.842 L1776.67 690.842 L1777.23 690.842 L1777.79 690.842 L1778.35 690.842 L1778.91 690.842 L1779.47 690.842 L1780.03 690.842 L1780.59 690.842 L1781.15 690.842 L1781.71 690.842 L1782.26 690.842 L1782.82 690.842 L1783.38 690.842 L1783.94 690.842 L1784.5 690.842 L1785.06 690.842 L1785.62 690.842 L1786.18 690.842 L1786.74 690.842 L1787.3 690.842 L1787.86 690.842 L1788.42 690.842 L1788.98 690.842 L1789.53 690.842 L1790.09 690.842 L1790.65 690.842 L1791.21 690.842 L1791.77 690.842 L1792.33 690.842 L1792.89 690.842 L1793.45 690.842 L1794.01 690.842 L1794.57 690.842 L1795.13 690.842 L1795.69 690.842 L1796.25 690.842 L1796.8 690.842 L1797.36 690.842 L1797.92 690.842 L1798.48 690.842 L1799.04 690.842 L1799.6 690.842 L1800.16 690.842 L1800.72 690.842 L1801.28 690.842 L1801.84 690.842 L1802.4 690.842 L1802.96 690.842 L1803.52 690.842 L1804.08 690.842 L1804.63 690.842 L1805.19 690.842 L1805.75 690.842 L1806.31 690.842 L1806.87 690.842 L1807.43 690.842 L1807.99 690.842 L1808.55 690.842 L1809.11 690.842 L1809.67 690.842 L1810.23 690.842 L1810.79 690.842 L1811.35 690.842 L1811.9 690.842 L1812.46 690.842 L1813.02 690.842 L1813.58 690.842 L1814.14 690.842 L1814.7 690.842 L1815.26 690.842 L1815.82 690.842 L1816.38 690.842 L1816.94 690.842 L1817.5 690.842 L1818.06 690.842 L1818.62 690.842 L1819.18 690.842 L1819.73 690.842 L1820.29 690.842 L1820.85 690.842 L1821.41 690.842 L1821.97 690.842 L1822.53 690.842 L1823.09 690.842 L1823.65 690.842 L1824.21 690.842 L1824.77 690.842 L1825.33 690.842 L1825.89 690.842 L1826.45 690.842 L1827 690.842 L1827.56 690.842 L1828.12 690.842 L1828.68 690.842 L1829.24 690.842 L1829.8 690.842 L1830.36 690.842 L1830.92 690.842 L1831.48 690.842 L1832.04 690.842 L1832.6 690.842 L1833.16 690.842 L1833.72 690.842 L1834.27 690.842 L1834.83 690.842 L1835.39 690.842 L1835.95 690.842 L1836.51 690.842 L1837.07 690.842 L1837.63 690.842 L1838.19 690.842 L1838.19 682.398 L1837.63 682.398 L1837.07 682.398 L1836.51 682.398 L1835.95 682.398 L1835.39 682.398 L1834.83 682.398 L1834.27 682.398 L1833.72 682.398 L1833.16 682.398 L1832.6 682.398 L1832.04 682.398 L1831.48 682.398 L1830.92 682.398 L1830.36 682.398 L1829.8 682.398 L1829.24 682.398 L1828.68 682.398 L1828.12 682.398 L1827.56 682.398 L1827 682.398 L1826.45 682.398 L1825.89 682.398 L1825.33 682.398 L1824.77 682.398 L1824.21 682.398 L1823.65 682.398 L1823.09 682.398 L1822.53 682.398 L1821.97 682.398 L1821.41 682.398 L1820.85 682.398 L1820.29 682.398 L1819.73 682.398 L1819.18 682.398 L1818.62 682.398 L1818.06 682.398 L1817.5 682.398 L1816.94 682.398 L1816.38 682.398 L1815.82 682.398 L1815.26 682.398 L1814.7 682.398 L1814.14 682.398 L1813.58 682.398 L1813.02 682.398 L1812.46 682.398 L1811.9 682.398 L1811.35 682.398 L1810.79 682.398 L1810.23 682.398 L1809.67 682.398 L1809.11 682.398 L1808.55 682.398 L1807.99 682.398 L1807.43 682.398 L1806.87 682.398 L1806.31 682.398 L1805.75 682.398 L1805.19 682.398 L1804.63 682.398 L1804.08 682.398 L1803.52 682.398 L1802.96 682.398 L1802.4 682.398 L1801.84 682.398 L1801.28 682.398 L1800.72 682.398 L1800.16 682.398 L1799.6 682.398 L1799.04 682.398 L1798.48 682.398 L1797.92 682.398 L1797.36 682.398 L1796.8 682.398 L1796.25 682.398 L1795.69 682.398 L1795.13 682.398 L1794.57 682.398 L1794.01 682.398 L1793.45 682.398 L1792.89 682.398 L1792.33 682.398 L1791.77 682.398 L1791.21 682.398 L1790.65 682.398 L1790.09 682.398 L1789.53 682.398 L1788.98 682.398 L1788.42 682.398 L1787.86 682.398 L1787.3 682.398 L1786.74 682.398 L1786.18 682.398 L1785.62 682.398 L1785.06 682.398 L1784.5 682.398 L1783.94 682.398 L1783.38 682.398 L1782.82 682.398 L1782.26 682.398 L1781.71 682.398 L1781.15 682.398 L1780.59 682.398 L1780.03 682.398 L1779.47 682.398 L1778.91 682.398 L1778.35 682.398 L1777.79 682.398 L1777.23 682.398 L1776.67 682.398 L1776.11 682.398 L1775.55 682.398 L1774.99 682.398 L1774.43 682.398 L1773.88 682.398 L1773.32 682.398 L1772.76 682.398 L1772.2 682.398 L1771.64 682.398 L1771.08 682.398 L1770.52 682.398 L1769.96 682.398 L1769.4 682.398 L1768.84 682.398 L1768.28 682.398 L1767.72 682.398 L1767.16 682.398 L1766.61 682.398 L1766.05 682.398 L1765.49 682.398 L1764.93 682.398 L1764.37 682.398 L1763.81 682.398 L1763.25 682.398 L1762.69 682.398 L1762.13 682.398 L1761.57 682.398 L1761.01 682.398 L1760.45 682.398 L1759.89 682.398 L1759.34 682.398 L1758.78 682.398 L1758.22 682.398 L1757.66 682.398 L1757.1 682.398 L1756.54 682.398 L1755.98 682.398 L1755.42 682.398 L1754.86 682.398 L1754.3 682.398 L1753.74 682.398 L1753.18 682.398 L1752.62 682.398 L1752.06 682.398 L1751.51 682.398 L1750.95 682.398 L1750.39 682.398 L1749.83 682.398 L1749.27 682.398 L1748.71 682.398 L1748.15 682.398 L1747.59 682.398 L1747.03 682.398 L1746.47 682.398 L1745.91 682.398 L1745.35 682.398 L1744.79 682.398 L1744.24 682.398 L1743.68 682.398 L1743.12 682.398 L1742.56 682.398 L1742 682.398 L1741.44 682.398 L1740.88 682.398 L1740.32 682.398 L1739.76 682.398 L1739.2 682.398 L1738.64 682.398 L1738.08 682.398 L1737.52 682.398 L1736.97 682.398 L1736.41 682.398 L1735.85 682.398 L1735.29 682.398 L1734.73 682.398 L1734.17 682.398 L1733.61 682.398 L1733.05 682.398 L1732.49 682.398 L1731.93 682.398 L1731.37 682.398 L1730.81 682.398 L1730.25 682.398 L1729.69 682.398 L1729.14 682.398 L1728.58 682.398 L1728.02 682.398 L1727.46 682.398 L1726.9 682.398 L1726.34 682.398 L1725.78 682.398 L1725.22 682.398 L1724.66 682.398 L1724.1 682.398 L1723.54 682.398 L1722.98 682.398 L1722.42 682.398 L1721.87 682.398 L1721.31 682.398 L1720.75 682.398 L1720.19 682.398 L1719.63 682.398 L1719.07 682.398 L1718.51 682.398 L1717.95 682.398 L1717.39 682.398 L1716.83 682.398 L1716.27 682.398 L1715.71 682.398 L1715.15 682.398 L1714.6 682.398 L1714.04 682.398 L1713.48 682.398 L1712.92 682.398 L1712.36 682.398 L1711.8 682.398 L1711.24 682.398 L1710.68 682.398 L1710.12 682.398 L1709.56 682.398 L1709 682.398 L1708.44 682.398 L1707.88 682.398 L1707.32 682.398 L1706.77 682.398 L1706.21 682.398 L1705.65 682.398 L1705.09 682.398 L1704.53 682.398 L1703.97 682.398 L1703.41 682.398 L1702.85 682.398 L1702.29 682.398 L1701.73 682.398 L1701.17 682.398 L1700.61 682.398 L1700.05 682.398 L1699.5 682.398 L1698.94 682.398 L1698.38 682.398 L1697.82 682.398 L1697.26 682.398 L1696.7 682.398 L1696.14 682.398 L1695.58 682.398 L1695.02 682.398 L1694.46 682.398 L1693.9 682.398 L1693.34 682.398 L1692.78 682.398 L1692.23 682.398 L1691.67 682.398 L1691.11 682.398 L1690.55 682.398 L1689.99 682.398 L1689.43 682.398 L1688.87 682.398 L1688.31 682.398 L1687.75 682.398 L1687.19 682.398 L1686.63 682.398 L1686.07 682.398 L1685.51 682.398 L1684.95 682.398 L1684.4 682.398 L1683.84 682.398 L1683.28 682.398 L1682.72 682.398 L1682.16 682.398 L1681.6 682.398 L1681.04 682.398 L1680.48 682.398 L1679.92 682.398 L1679.36 682.398 L1678.8 682.398 L1678.24 682.398 L1677.68 682.398 L1677.13 682.398 L1676.57 682.398 L1676.01 682.398 L1675.45 682.398 L1674.89 682.398 L1674.33 682.398 L1673.77 682.398 L1673.21 682.398 L1672.65 682.398 L1672.09 682.398 L1671.53 682.398 L1670.97 682.398 L1670.41 682.398 L1669.85 682.398 L1669.3 682.398 L1668.74 682.398 L1668.18 682.398 L1667.62 682.398 L1667.06 682.398 L1666.5 682.398 L1665.94 682.398 L1665.38 682.398 L1664.82 682.398 L1664.26 682.398 L1663.7 682.398 L1663.14 682.398 L1662.58 682.398 L1662.03 682.398 L1661.47 682.398 L1660.91 682.398 L1660.35 682.398 L1659.79 682.398 L1659.23 682.398 L1658.67 682.398 L1658.11 682.398 L1657.55 682.398 L1656.99 682.398 L1656.43 682.398 L1655.87 682.398 L1655.31 682.398 L1654.76 682.398 L1654.2 682.398 L1653.64 682.398 L1653.08 682.398 L1652.52 682.398 L1651.96 682.398 L1651.4 682.398 L1650.84 682.398 L1650.28 682.398 L1649.72 682.398 L1649.16 682.398 L1648.6 682.398 L1648.04 682.398 L1647.48 682.398 L1646.93 682.398 L1646.37 682.398 L1645.81 682.398 L1645.25 682.398 L1644.69 682.398 L1644.13 682.398 L1643.57 682.398 L1643.01 682.398 L1642.45 682.398 L1641.89 682.398 L1641.33 682.398 L1640.77 682.398 L1640.21 682.398 L1639.66 682.398 L1639.1 682.398 L1638.54 682.398 L1637.98 682.398 L1637.42 682.398 L1636.86 682.398 L1636.3 682.398 L1635.74 682.398 L1635.18 682.398 L1634.62 682.398 L1634.06 682.398 L1633.5 682.398 L1632.94 682.398 L1632.39 682.398 L1631.83 682.398 L1631.27 682.398 L1630.71 682.398 L1630.15 682.398 L1629.59 682.398 L1629.03 682.398 L1628.47 682.398 L1627.91 682.398 L1627.35 682.398 L1626.79 682.398 L1626.23 682.398 L1625.67 682.398 L1625.11 682.398 L1624.56 682.398 L1624 682.398 L1623.44 682.398 L1622.88 682.398 L1622.32 682.398 L1621.76 682.398 L1621.2 682.398 L1620.64 682.398 L1620.08 682.398 L1619.52 682.398 L1618.96 682.398 L1618.4 682.398 L1617.84 682.398 L1617.29 682.398 L1616.73 682.398 L1616.17 682.398 L1615.61 682.398 L1615.05 682.398 L1614.49 682.398 L1613.93 682.398 L1613.37 682.398 L1612.81 682.398 L1612.25 682.398 L1611.69 682.398 L1611.13 682.398 L1610.57 682.398 L1610.02 682.398 L1609.46 682.398 L1608.9 682.398 L1608.34 682.398 L1607.78 682.398 L1607.22 682.398 L1606.66 682.398 L1606.1 682.398 L1605.54 682.398 L1604.98 682.398 L1604.42 682.398 L1603.86 682.398 L1603.3 682.398 L1602.74 682.398 L1602.19 682.398 L1601.63 682.398 L1601.07 682.398 L1600.51 682.398 L1599.95 682.398 L1599.39 682.398 L1598.83 682.398 L1598.27 682.398 L1597.71 682.398 L1597.15 682.398 L1596.59 682.398 L1596.03 682.398 L1595.47 682.398 L1594.92 682.398 L1594.36 682.398 L1593.8 682.398 L1593.24 682.398 L1592.68 682.398 L1592.12 682.398 L1591.56 682.398 L1591 682.398 L1590.44 682.398 L1589.88 682.398 L1589.32 682.398 L1588.76 682.398 L1588.2 682.398 L1587.65 682.398 L1587.09 682.398 L1586.53 682.398 L1585.97 682.398 L1585.41 682.398 L1584.85 682.398 L1584.29 682.398 L1583.73 682.398 L1583.17 682.398 L1582.61 682.398 L1582.05 682.398 L1581.49 682.398 L1580.93 682.398 L1580.37 682.398 L1579.82 682.398 L1579.26 682.398 L1578.7 682.398 L1578.14 682.398 L1577.58 682.398 L1577.02 682.398 L1576.46 682.398 L1575.9 682.398 L1575.34 682.398 L1574.78 682.398 L1574.22 682.398 L1573.66 682.398 L1573.1 682.398 L1572.55 682.398 L1571.99 682.398 L1571.43 682.398 L1570.87 682.398 L1570.31 682.398 L1569.75 682.398 L1569.19 682.398 L1568.63 682.398 L1568.07 682.398 L1567.51 682.398 L1566.95 682.398 L1566.39 682.398 L1565.83 682.398 L1565.28 682.398 L1564.72 682.398 L1564.16 682.398 L1563.6 682.398 L1563.04 682.398 L1562.48 682.398 L1561.92 682.398 L1561.36 682.398 L1560.8 682.398 L1560.24 682.398 L1559.68 682.398 L1559.12 682.398 L1558.56 682.398 L1558 682.398 L1557.45 682.398 L1556.89 682.398 L1556.33 682.398 L1555.77 682.398 L1555.21 682.398 L1554.65 682.398 L1554.09 682.398 L1553.53 682.398 L1552.97 682.398 L1552.41 682.398 L1551.85 682.398 L1551.29 682.398 L1550.73 682.398 L1550.18 682.398 L1549.62 682.398 L1549.06 682.398 L1548.5 682.398 L1547.94 682.398 L1547.38 682.398 L1546.82 682.398 L1546.26 682.398 L1545.7 682.398 L1545.14 682.398 L1544.58 682.398 L1544.02 682.398 L1543.46 682.398 L1542.9 682.398 L1542.35 682.398 L1541.79 682.398 L1541.23 682.398 L1540.67 682.398 L1540.11 682.398 L1539.55 682.398 L1538.99 682.398 L1538.43 682.398 L1537.87 682.398 L1537.31 682.398 L1536.75 682.398 L1536.19 682.398 L1535.63 682.398 L1535.08 682.398 L1534.52 682.398 L1533.96 682.398 L1533.4 682.398 L1532.84 682.398 L1532.28 682.398 L1531.72 682.398 L1531.16 682.398 L1530.6 682.398 L1530.04 682.398 L1529.48 682.398 L1528.92 682.398 L1528.36 682.398 L1527.81 682.398 L1527.25 682.398 L1526.69 682.398 L1526.13 682.398 L1525.57 682.398 L1525.01 682.398 L1524.45 682.398 L1523.89 682.398 L1523.33 682.398 L1522.77 682.398 L1522.21 682.398 L1521.65 682.398 L1521.09 682.398 L1520.53 682.398 L1519.98 682.398 L1519.42 682.398 L1518.86 682.398 L1518.3 682.398 L1517.74 682.398 L1517.18 682.398 L1516.62 682.398 L1516.06 682.398 L1515.5 682.398 L1514.94 682.398 L1514.38 682.398 L1513.82 682.398 L1513.26 682.398 L1512.71 682.398 L1512.15 682.398 L1511.59 682.398 L1511.03 682.398 L1510.47 682.398 L1509.91 682.398 L1509.35 682.398 L1508.79 682.398 L1508.23 682.398 L1507.67 682.398 L1507.11 682.398 L1506.55 682.398 L1505.99 682.398 L1505.44 682.398 L1504.88 682.398 L1504.32 682.398 L1503.76 682.398 L1503.2 682.398 L1502.64 682.398 L1502.08 682.398 L1501.52 682.398 L1500.96 682.398 L1500.4 682.398 L1499.84 682.398 L1499.28 682.398 L1498.72 682.398 L1498.16 682.398 L1497.61 682.398 L1497.05 682.398 L1496.49 682.398 L1495.93 682.398 L1495.37 682.398 L1494.81 682.398 L1494.25 682.398 L1493.69 682.398 L1493.13 682.398 L1492.57 682.398 L1492.01 682.398 L1491.45 682.398 L1490.89 682.398 L1490.34 682.398 L1489.78 682.398 L1489.22 682.398 L1488.66 682.398 L1488.1 682.398 L1487.54 682.398 L1486.98 682.398 L1486.42 682.398 L1485.86 682.398 L1485.3 682.398 L1484.74 682.398 L1484.18 682.398 L1483.62 682.398 L1483.07 682.398 L1482.51 682.398 L1481.95 682.398 L1481.39 682.398 L1480.83 682.398 L1480.27 682.398 L1479.71 682.398 L1479.15 682.398 L1478.59 682.398 L1478.03 682.398 L1477.47 682.398 L1476.91 682.398 L1476.35 682.398 L1475.79 682.398 L1475.24 682.398 L1474.68 682.398 L1474.12 682.398 L1473.56 682.398 L1473 682.398 L1472.44 682.398 L1471.88 682.398 L1471.32 682.398 L1470.76 682.398 L1470.2 682.398 L1469.64 682.398 L1469.08 682.398 L1468.52 682.398 L1467.97 682.398 L1467.41 682.398 L1466.85 682.398 L1466.29 682.398 L1465.73 682.398 L1465.17 682.398 L1464.61 682.398 L1464.05 682.398 L1463.49 682.398 L1462.93 682.398 L1462.37 682.398 L1461.81 682.398 L1461.25 682.398 L1460.7 682.398 L1460.14 682.398 L1459.58 682.398 L1459.02 682.398 L1458.46 682.398 L1457.9 682.398 L1457.34 682.398 L1456.78 682.398 L1456.22 682.398 L1455.66 682.398 L1455.1 682.398 L1454.54 682.398 L1453.98 682.398 L1453.42 682.398 L1452.87 682.398 L1452.31 682.398 L1451.75 682.398 L1451.19 682.398 L1450.63 682.398 L1450.07 682.398 L1449.51 682.398 L1448.95 682.398 L1448.39 682.398 L1447.83 682.398 L1447.27 682.398 L1446.71 682.398 L1446.15 682.398 L1445.6 682.398 L1445.04 682.398 L1444.48 682.398 L1443.92 682.398 L1443.36 682.398 L1442.8 682.398 L1442.24 682.398 L1441.68 682.398 L1441.12 682.398 L1440.56 682.398 L1440 682.398 L1439.44 682.398 L1438.88 682.398 L1438.33 682.398 L1437.77 682.398 L1437.21 682.398 L1436.65 682.398 L1436.09 682.398 L1435.53 682.398 L1434.97 682.398 L1434.41 682.398 L1433.85 682.398 L1433.29 682.398 L1432.73 682.398 L1432.17 682.398 L1431.61 682.398 L1431.05 682.398 L1430.5 682.398 L1429.94 682.398 L1429.38 682.398 L1428.82 682.398 L1428.26 682.398 L1427.7 682.398 L1427.14 682.398 L1426.58 682.398 L1426.02 682.398 L1425.46 682.398 L1424.9 682.398 L1424.34 682.398 L1423.78 682.398 L1423.23 682.398 L1422.67 682.398 L1422.11 682.398 L1421.55 682.398 L1420.99 682.398 L1420.43 682.398 L1419.87 682.398 L1419.31 682.398 L1418.75 682.398 L1418.19 682.398 L1417.63 682.398 L1417.07 682.398 L1416.51 682.398 L1415.95 682.398 L1415.4 682.398 L1414.84 682.398 L1414.28 682.398 L1413.72 682.398 L1413.16 682.398 L1412.6 682.398 L1412.04 682.398 L1411.48 682.398 L1410.92 682.398 L1410.36 682.398 L1409.8 682.398 L1409.24 682.398 L1408.68 682.398 L1408.13 682.398 L1407.57 682.398 L1407.01 682.398 L1406.45 682.398 L1405.89 682.398 L1405.33 682.398 L1404.77 682.398 L1404.21 682.398 L1403.65 682.398 L1403.09 682.398 L1402.53 682.398 L1401.97 682.398 L1401.41 682.398 L1400.86 682.398 L1400.3 682.398 L1399.74 682.398 L1399.18 682.398 L1398.62 682.398 L1398.06 682.398 L1397.5 682.398 L1396.94 682.398 L1396.38 682.398 L1395.82 682.398 L1395.26 682.398 L1394.7 682.398 L1394.14 682.398 L1393.58 682.398 L1393.03 682.398 L1392.47 682.398 L1391.91 682.398 L1391.35 682.398 L1390.79 682.398 L1390.23 682.398 L1389.67 682.398 L1389.11 682.398 L1388.55 682.398 L1387.99 682.398 L1387.43 682.398 L1386.87 682.398 L1386.31 682.398 L1385.76 682.398 L1385.2 682.398 L1384.64 682.398 L1384.08 682.398 L1383.52 682.398 L1382.96 682.398 L1382.4 682.398 L1381.84 682.398 L1381.28 682.398 L1380.72 682.398 L1380.16 682.398 L1379.6 682.398 L1379.04 682.398 L1378.49 682.398 L1377.93 682.398 L1377.37 682.398 L1376.81 682.398 L1376.25 682.398 L1375.69 682.398 L1375.13 682.398 L1374.57 682.398 L1374.01 682.398 L1373.45 682.398 L1372.89 682.398 L1372.33 682.398 L1371.77 682.398 L1371.21 682.398 L1370.66 682.398 L1370.1 682.398 L1369.54 682.398 L1368.98 682.398 L1368.42 682.398 L1367.86 682.398 L1367.3 682.398 L1366.74 682.398 L1366.18 682.398 L1365.62 682.398 L1365.06 682.398 L1364.5 682.398 L1363.94 682.398 L1363.39 682.398 L1362.83 682.398 L1362.27 682.398 L1361.71 682.398 L1361.15 682.398 L1360.59 682.398 L1360.03 682.398 L1359.47 682.398 L1358.91 682.398 L1358.35 682.398 L1357.79 682.398 L1357.23 682.398 L1356.67 682.398 L1356.12 682.398 L1355.56 682.398 L1355 682.398 L1354.44 682.398 L1353.88 682.398 L1353.32 682.398 L1352.76 682.398 L1352.2 682.398 L1351.64 682.398 L1351.08 682.398 L1350.52 682.398 L1349.96 682.398 L1349.4 682.398 L1348.84 682.398 L1348.29 682.398 L1347.73 682.398 L1347.17 682.398 L1346.61 682.398 L1346.05 682.398 L1345.49 682.398 L1344.93 682.398 L1344.37 682.398 L1343.81 682.398 L1343.25 682.398 L1342.69 682.398 L1342.13 682.398 L1341.57 682.398 L1341.02 682.398 L1340.46 682.398 L1339.9 682.398 L1339.34 682.398 L1338.78 682.398 L1338.22 682.398 L1337.66 682.398 L1337.1 682.398 L1336.54 682.398 L1335.98 682.398 L1335.42 682.398 L1334.86 682.398 L1334.3 682.398 L1333.75 682.398 L1333.19 682.398 L1332.63 682.398 L1332.07 682.398 L1331.51 682.398 L1330.95 682.398 L1330.39 682.398 L1329.83 682.398 L1329.27 682.398 L1328.71 682.398 L1328.15 682.398 L1327.59 682.398 L1327.03 682.398 L1326.47 682.398 L1325.92 682.398 L1325.36 682.398 L1324.8 682.398 L1324.24 682.398 L1323.68 682.398 L1323.12 682.398 L1322.56 682.398 L1322 682.398 L1321.44 682.398 L1320.88 682.398 L1320.32 682.398 L1319.76 682.398 L1319.2 682.398 L1318.65 682.398 L1318.09 682.398 L1317.53 682.398 L1316.97 682.398 L1316.41 682.398 L1315.85 682.398 L1315.29 682.398 L1314.73 682.398 L1314.17 682.398 L1313.61 682.398 L1313.05 682.398 L1312.49 682.398 L1311.93 682.398 L1311.38 682.398 L1310.82 682.398 L1310.26 682.398 L1309.7 682.398 L1309.14 682.398 L1308.58 682.398 L1308.02 682.398 L1307.46 682.398 L1306.9 682.398 L1306.34 682.398 L1305.78 682.398 L1305.22 682.398 L1304.66 682.398 L1304.1 682.398 L1303.55 682.398 L1302.99 682.398 L1302.43 682.398 L1301.87 682.398 L1301.31 682.398 L1300.75 682.398 L1300.19 682.398 L1299.63 682.398 L1299.07 682.398 L1298.51 682.398 L1297.95 682.398 L1297.39 682.398 L1296.83 682.398 L1296.28 682.398 L1295.72 682.398 L1295.16 682.398 L1294.6 682.398 L1294.04 682.398 L1293.48 682.398 L1292.92 682.398 L1292.36 682.398 L1291.8 682.398 L1291.24 682.398 L1290.68 682.398 L1290.12 682.398 L1289.56 682.398 L1289 682.398 L1288.45 682.398 L1287.89 682.398 L1287.33 682.398 L1286.77 682.398 L1286.21 682.398 L1285.65 682.398 L1285.09 682.398 L1284.53 682.398 L1283.97 682.398 L1283.41 682.398 L1282.85 682.398 L1282.29 682.398 L1281.73 682.398 L1281.18 682.398 L1280.62 682.398 L1280.06 682.398 L1279.5 682.398 L1278.94 682.398 L1278.38 682.398 L1277.82 682.398 L1277.26 682.398 L1276.7 682.398 L1276.14 682.398 L1275.58 682.398 L1275.02 682.398 L1274.46 682.398 L1273.91 682.398 L1273.35 682.398 L1272.79 682.398 L1272.23 682.398 L1271.67 682.398 L1271.11 682.398 L1270.55 682.398 L1269.99 682.398 L1269.43 682.398 L1268.87 682.398 L1268.31 682.398 L1267.75 682.398 L1267.19 682.398 L1266.63 682.398 L1266.08 682.398 L1265.52 682.398 L1264.96 682.398 L1264.4 682.398 L1263.84 682.398 L1263.28 682.398 L1262.72 682.398 L1262.16 682.398 L1261.6 682.398 L1261.04 682.398 L1260.48 682.398 L1259.92 682.398 L1259.36 682.398 L1258.81 682.398 L1258.25 682.398 L1257.69 682.398 L1257.13 682.398 L1256.57 682.398 L1256.01 682.398 L1255.45 682.398 L1254.89 682.398 L1254.33 682.398 L1253.77 682.398 L1253.21 682.398 L1252.65 682.398 L1252.09 682.398 L1251.54 682.398 L1250.98 682.398 L1250.42 682.398 L1249.86 682.398 L1249.3 682.398 L1248.74 682.398 L1248.18 682.398 L1247.62 682.398 L1247.06 682.398 L1246.5 682.398 L1245.94 682.398 L1245.38 682.398 L1244.82 682.398 L1244.26 682.398 L1243.71 682.398 L1243.15 682.398 L1242.59 682.398 L1242.03 682.398 L1241.47 682.398 L1240.91 682.398 L1240.35 682.398 L1239.79 682.398 L1239.23 682.398 L1238.67 682.398 L1238.11 682.398 L1237.55 682.398 L1236.99 682.398 L1236.44 682.398 L1235.88 682.398 L1235.32 682.398 L1234.76 682.398 L1234.2 682.398 L1233.64 682.398 L1233.08 682.398 L1232.52 682.398 L1231.96 682.398 L1231.4 682.398 L1230.84 682.398 L1230.28 682.398 L1229.72 682.398 L1229.17 682.398 L1228.61 682.398 L1228.05 682.398 L1227.49 682.398 L1226.93 682.398 L1226.37 682.398 L1225.81 682.398 L1225.25 682.398 L1224.69 682.398 L1224.13 682.398 L1223.57 682.398 L1223.01 682.398 L1222.45 682.398 L1221.89 682.398 L1221.34 682.398 L1220.78 682.398 L1220.22 682.398 L1219.66 682.398 L1219.1 682.398 L1218.54 682.398 L1217.98 682.398 L1217.42 682.398 L1216.86 682.398 L1216.3 682.398 L1215.74 682.398 L1215.18 682.398 L1214.62 682.398 L1214.07 682.398 L1213.51 682.398 L1212.95 682.398 L1212.39 682.398 L1211.83 682.398 L1211.27 682.398 L1210.71 682.398 L1210.15 682.398 L1209.59 682.398 L1209.03 682.398 L1208.47 682.398 L1207.91 682.398 L1207.35 682.398 L1206.8 682.398 L1206.24 682.398 L1205.68 682.398 L1205.12 682.398 L1204.56 682.398 L1204 682.398 L1203.44 682.398 L1202.88 682.398 L1202.32 682.398 L1201.76 682.398 L1201.2 682.398 L1200.64 682.398 L1200.08 682.398 L1199.52 682.398 L1198.97 682.398 L1198.41 682.398 L1197.85 682.398 L1197.29 682.398 L1196.73 682.398 L1196.17 682.398 L1195.61 682.398 L1195.05 682.398 L1194.49 682.398 L1193.93 682.398 L1193.37 682.398 L1192.81 682.398 L1192.25 682.398 L1191.7 682.398 L1191.14 682.398 L1190.58 682.398 L1190.02 682.398 L1189.46 682.398 L1188.9 682.398 L1188.34 682.398 L1187.78 682.398 L1187.22 682.398 L1186.66 682.398 L1186.1 682.398 L1185.54 682.398 L1184.98 682.398 L1184.43 682.398 L1183.87 682.398 L1183.31 682.398 L1182.75 682.398 L1182.19 682.398 L1181.63 682.398 L1181.07 682.398 L1180.51 682.398 L1179.95 682.398 L1179.39 682.398 L1178.83 682.398 L1178.27 682.398 L1177.71 682.398 L1177.15 682.398 L1176.6 682.398 L1176.04 682.398 L1175.48 682.398 L1174.92 682.398 L1174.36 682.398 L1173.8 682.398 L1173.24 682.398 L1172.68 682.398 L1172.12 682.398 L1171.56 682.398 L1171 682.398 L1170.44 682.398 L1169.88 682.398 L1169.33 682.398 L1168.77 682.398 L1168.21 682.398 L1167.65 682.398 L1167.09 682.398 L1166.53 682.398 L1165.97 682.398 L1165.41 682.398 L1164.85 682.398 L1164.29 682.398 L1163.73 682.398 L1163.17 682.398 L1162.61 682.398 L1162.05 682.398 L1161.5 682.398 L1160.94 682.398 L1160.38 682.398 L1159.82 682.398 L1159.26 682.398 L1158.7 682.398 L1158.14 682.398 L1157.58 682.398 L1157.02 682.398 L1156.46 682.398 L1155.9 682.398 L1155.34 682.398 L1154.78 682.398 L1154.23 682.398 L1153.67 682.398 L1153.11 682.398 L1152.55 682.398 L1151.99 682.398 L1151.43 682.398 L1150.87 682.398 L1150.31 682.398 L1149.75 682.398 L1149.19 682.398 L1148.63 682.398 L1148.07 682.398 L1147.51 682.398 L1146.96 682.398 L1146.4 682.398 L1145.84 682.398 L1145.28 682.398 L1144.72 682.398 L1144.16 682.398 L1143.6 682.398 L1143.04 682.398 L1142.48 682.398 L1141.92 682.398 L1141.36 682.398 L1140.8 682.398 L1140.24 682.398 L1139.68 682.398 L1139.13 682.398 L1138.57 682.398 L1138.01 682.398 L1137.45 682.398 L1136.89 682.398 L1136.33 682.398 L1135.77 682.398 L1135.21 682.398 L1134.65 682.398 L1134.09 682.398 L1133.53 682.398 L1132.97 682.398 L1132.41 682.398 L1131.86 682.398 L1131.3 682.398 L1130.74 682.398 L1130.18 682.398 L1129.62 682.398 L1129.06 682.398 L1128.5 682.398 L1127.94 682.398 L1127.38 682.398 L1126.82 682.398 L1126.26 682.398 L1125.7 682.398 L1125.14 682.398 L1124.59 682.398 L1124.03 682.398 L1123.47 682.398 L1122.91 682.398 L1122.35 682.398 L1121.79 682.398 L1121.23 682.398 L1120.67 682.398 L1120.11 682.398 L1119.55 682.398 L1118.99 682.398 L1118.43 682.398 L1117.87 682.398 L1117.31 682.398 L1116.76 682.398 L1116.2 682.398 L1115.64 682.398 L1115.08 682.398 L1114.52 682.398 L1113.96 682.398 L1113.4 682.398 L1112.84 682.398 L1112.28 682.398 L1111.72 682.398 L1111.16 682.398 L1110.6 682.398 L1110.04 682.398 L1109.49 682.398 L1108.93 682.398 L1108.37 682.398 L1107.81 682.398 L1107.25 682.398 L1106.69 682.398 L1106.13 682.398 L1105.57 682.398 L1105.01 682.398 L1104.45 682.398 L1103.89 682.398 L1103.33 682.398 L1102.77 682.398 L1102.22 682.398 L1101.66 682.398 L1101.1 682.398 L1100.54 682.398 L1099.98 682.398 L1099.42 682.398 L1098.86 682.398 L1098.3 682.398 L1097.74 682.398 L1097.18 682.398 L1096.62 682.398 L1096.06 682.398 L1095.5 682.398 L1094.94 682.398 L1094.39 682.398 L1093.83 682.398 L1093.27 682.398 L1092.71 682.398 L1092.15 682.398 L1091.59 682.398 L1091.03 682.398 L1090.47 682.398 L1089.91 682.398 L1089.35 682.398 L1088.79 682.398 L1088.23 682.398 L1087.67 682.398 L1087.12 682.398 L1086.56 682.398 L1086 682.398 L1085.44 682.398 L1084.88 682.398 L1084.32 682.398 L1083.76 682.398 L1083.2 682.398 L1082.64 682.398 L1082.08 682.398 L1081.52 682.398 L1080.96 682.398 L1080.4 682.398 L1079.85 682.398 L1079.29 682.398 L1078.73 682.398 L1078.17 682.398 L1077.61 682.398 L1077.05 682.398 L1076.49 682.398 L1075.93 682.398 L1075.37 682.398 L1074.81 682.398 L1074.25 682.398 L1073.69 682.398 L1073.13 682.398 L1072.57 682.398 L1072.02 682.398 L1071.46 682.398 L1070.9 682.398 L1070.34 682.398 L1069.78 682.398 L1069.22 682.398 L1068.66 682.398 L1068.1 682.398 L1067.54 682.398 L1066.98 682.398 L1066.42 682.398 L1065.86 682.398 L1065.3 682.398 L1064.75 682.398 L1064.19 682.398 L1063.63 682.398 L1063.07 682.398 L1062.51 682.398 L1061.95 682.398 L1061.39 682.398 L1060.83 682.398 L1060.27 682.398 L1059.71 682.398 L1059.15 682.398 L1058.59 682.398 L1058.03 682.398 L1057.48 682.398 L1056.92 682.398 L1056.36 682.398 L1055.8 682.398 L1055.24 682.398 L1054.68 682.398 L1054.12 682.398 L1053.56 682.398 L1053 682.398 L1052.44 682.398 L1051.88 682.398 L1051.32 682.398 L1050.76 682.398 L1050.2 682.398 L1049.65 682.398 L1049.09 682.398 L1048.53 682.398 L1047.97 682.398 L1047.41 682.398 L1046.85 682.398 L1046.29 682.398 L1045.73 682.398 L1045.17 682.398 L1044.61 682.398 L1044.05 682.398 L1043.49 682.398 L1042.93 682.398 L1042.38 682.398 L1041.82 682.398 L1041.26 682.398 L1040.7 682.398 L1040.14 682.398 L1039.58 682.398 L1039.02 682.398 L1038.46 682.398 L1037.9 682.398 L1037.34 682.398 L1036.78 682.398 L1036.22 682.398 L1035.66 682.398 L1035.1 682.398 L1034.55 682.398 L1033.99 682.398 L1033.43 682.398 L1032.87 682.398 L1032.31 682.398 L1031.75 682.398 L1031.19 682.398 L1030.63 682.398 L1030.07 682.398 L1029.51 682.398 L1028.95 682.398 L1028.39 682.398 L1027.83 682.398 L1027.28 682.398 L1026.72 682.398 L1026.16 682.398 L1025.6 682.398 L1025.04 682.398 L1024.48 682.398 L1023.92 682.398 L1023.36 682.398 L1022.8 682.398 L1022.24 682.398 L1021.68 682.398 L1021.12 682.398 L1020.56 682.398 L1020.01 682.398 L1019.45 682.398 L1018.89 682.398 L1018.33 682.398 L1017.77 682.398 L1017.21 682.398 L1016.65 682.398 L1016.09 682.398 L1015.53 682.398 L1014.97 682.398 L1014.41 682.398 L1013.85 682.398 L1013.29 682.398 L1012.73 682.398 L1012.18 682.398 L1011.62 682.398 L1011.06 682.398 L1010.5 682.398 L1009.94 682.398 L1009.38 682.398 L1008.82 682.398 L1008.26 682.398 L1007.7 682.398 L1007.14 682.398 L1006.58 682.398 L1006.02 682.398 L1005.46 682.398 L1004.91 682.398 L1004.35 682.398 L1003.79 682.398 L1003.23 682.398 L1002.67 682.398 L1002.11 682.398 L1001.55 682.398 L1000.99 682.398 L1000.43 682.398 L999.872 682.398 L999.313 682.398 L998.754 682.398 L998.194 682.398 L997.635 682.398 L997.076 682.398 L996.517 682.398 L995.957 682.398 L995.398 682.398 L994.839 682.398 L994.28 682.398 L993.72 682.398 L993.161 682.398 L992.602 682.398 L992.043 682.398 L991.483 682.398 L990.924 682.398 L990.365 682.398 L989.806 682.398 L989.246 682.398 L988.687 682.398 L988.128 682.398 L987.569 682.398 L987.009 682.398 L986.45 682.398 L985.891 682.398 L985.332 682.398 L984.772 682.398 L984.213 682.398 L983.654 682.398 L983.095 682.398 L982.535 682.398 L981.976 682.398 L981.417 682.398 L980.858 682.398 L980.298 682.398 L979.739 682.398 L979.18 682.398 L978.621 682.398 L978.061 682.398 L977.502 682.398 L976.943 682.398 L976.384 682.398 L975.824 682.398 L975.265 682.398 L974.706 682.398 L974.147 682.398 L973.587 682.398 L973.028 682.398 L972.469 682.398 L971.91 682.398 L971.35 682.398 L970.791 682.398 L970.232 682.398 L969.673 682.398 L969.113 682.398 L968.554 682.398 L967.995 682.398 L967.436 682.398 L966.876 682.398 L966.317 682.398 L965.758 682.398 L965.199 682.398 L964.639 682.398 L964.08 682.398 L963.521 682.398 L962.962 682.398 L962.402 682.398 L961.843 682.398 L961.284 682.398 L960.725 682.398 L960.165 682.398 L959.606 682.398 L959.047 682.398 L958.488 682.398 L957.928 682.398 L957.369 682.398 L956.81 682.398 L956.251 682.398 L955.691 682.398 L955.132 682.398 L954.573 682.398 L954.014 682.398 L953.454 682.398 L952.895 682.398 L952.336 682.398 L951.777 682.398 L951.217 682.398 L950.658 682.398 L950.099 682.398 L949.54 682.398 L948.98 682.398 L948.421 682.398 L947.862 682.398 L947.303 682.398 L946.743 682.398 L946.184 682.398 L945.625 682.398 L945.066 682.398 L944.506 682.398 L943.947 682.398 L943.388 682.398 L942.829 682.398 L942.269 682.398 L941.71 682.398 L941.151 682.398 L940.592 682.398 L940.032 682.398 L939.473 682.398 L938.914 682.398 L938.355 682.398 L937.795 682.398 L937.236 682.398 L936.677 682.398 L936.118 682.398 L935.558 682.398 L934.999 682.398 L934.44 682.398 L933.881 682.398 L933.321 682.398 L932.762 682.398 L932.203 682.398 L931.644 682.398 L931.084 682.398 L930.525 682.398 L929.966 682.398 L929.406 682.398 L928.847 682.398 L928.288 682.398 L927.729 682.398 L927.169 682.398 L926.61 682.398 L926.051 682.398 L925.492 682.398 L924.932 682.398 L924.373 682.398 L923.814 682.398 L923.255 682.398 L922.695 682.398 L922.136 682.398 L921.577 682.398 L921.018 682.398 L920.458 682.398 L919.899 682.398 L919.34 682.398 L918.781 682.398 L918.221 682.398 L917.662 682.398 L917.103 682.398 L916.544 682.398 L915.984 682.398 L915.425 682.398 L914.866 682.398 L914.307 682.398 L913.747 682.398 L913.188 682.398 L912.629 682.398 L912.07 682.398 L911.51 682.398 L910.951 682.398 L910.392 682.398 L909.833 682.398 L909.273 682.398 L908.714 682.398 L908.155 682.398 L907.596 682.398 L907.036 682.398 L906.477 682.398 L905.918 682.398 L905.359 682.398 L904.799 682.398 L904.24 682.398 L903.681 682.398 L903.122 682.398 L902.562 682.398 L902.003 682.398 L901.444 682.398 L900.885 682.398 L900.325 682.398 L899.766 682.398 L899.207 682.398 L898.648 682.398 L898.088 682.398 L897.529 682.398 L896.97 682.398 L896.411 682.398 L895.851 682.398 L895.292 682.398 L894.733 682.398 L894.174 682.398 L893.614 682.398 L893.055 682.398 L892.496 682.398 L891.937 682.398 L891.377 682.398 L890.818 682.398 L890.259 682.398 L889.7 682.398 L889.14 682.398 L888.581 682.398 L888.022 682.398 L887.463 682.398 L886.903 682.398 L886.344 682.398 L885.785 682.398 L885.226 682.398 L884.666 682.398 L884.107 682.398 L883.548 682.398 L882.989 682.398 L882.429 682.398 L881.87 682.398 L881.311 682.398 L880.752 682.398 L880.192 682.398 L879.633 682.398 L879.074 682.398 L878.515 682.398 L877.955 682.398 L877.396 682.398 L876.837 682.398 L876.278 682.398 L875.718 682.398 L875.159 682.398 L874.6 682.398 L874.041 682.398 L873.481 682.398 L872.922 682.398 L872.363 682.398 L871.804 682.398 L871.244 682.398 L870.685 682.398 L870.126 682.398 L869.567 682.398 L869.007 682.398 L868.448 682.398 L867.889 682.398 L867.33 682.398 L866.77 682.398 L866.211 682.398 L865.652 682.398 L865.093 682.398 L864.533 682.398 L863.974 682.398 L863.415 682.398 L862.856 682.398 L862.296 682.398 L861.737 682.398 L861.178 682.398 L860.619 682.398 L860.059 682.398 L859.5 682.398 L858.941 682.398 L858.382 682.398 L857.822 682.398 L857.263 682.398 L856.704 682.398 L856.145 682.398 L855.585 682.398 L855.026 682.398 L854.467 682.398 L853.908 682.398 L853.348 682.398 L852.789 682.398 L852.23 682.398 L851.671 682.398 L851.111 682.398 L850.552 682.398 L849.993 682.398 L849.434 682.398 L848.874 682.398 L848.315 682.398 L847.756 682.398 L847.197 682.398 L846.637 682.398 L846.078 682.398 L845.519 682.398 L844.96 682.398 L844.4 682.398 L843.841 682.398 L843.282 682.398 L842.723 682.398 L842.163 682.398 L841.604 682.398 L841.045 682.398 L840.486 682.398 L839.926 682.398 L839.367 682.398 L838.808 682.398 L838.249 682.398 L837.689 682.398 L837.13 682.398 L836.571 682.398 L836.012 682.398 L835.452 682.398 L834.893 682.398 L834.334 682.398 L833.775 682.398 L833.215 682.398 L832.656 682.398 L832.097 682.398 L831.538 682.398 L830.978 682.398 L830.419 682.398 L829.86 682.398 L829.301 682.398 L828.741 682.398 L828.182 682.398 L827.623 682.398 L827.064 682.398 L826.504 682.398 L825.945 682.398 L825.386 682.398 L824.827 682.398 L824.267 682.398 L823.708 682.398 L823.149 682.398 L822.59 682.398 L822.03 682.398 L821.471 682.398 L820.912 682.398 L820.353 682.398 L819.793 682.398 L819.234 682.398 L818.675 682.398 L818.116 682.398 L817.556 682.398 L816.997 682.398 L816.438 682.398 L815.879 682.398 L815.319 682.398 L814.76 682.398 L814.201 682.398 L813.642 682.398 L813.082 682.398 L812.523 682.398 L811.964 682.398 L811.405 682.398 L810.845 682.398 L810.286 682.398 L809.727 682.398 L809.168 682.398 L808.608 682.398 L808.049 682.398 L807.49 682.398 L806.931 682.398 L806.371 682.398 L805.812 682.398 L805.253 682.398 L804.693 682.398 L804.134 682.398 L803.575 682.398 L803.016 682.398 L802.456 682.398 L801.897 682.398 L801.338 682.398 L800.779 682.398 L800.219 682.398 L799.66 682.398 L799.101 682.398 L798.542 682.398 L797.982 682.398 L797.423 682.398 L796.864 682.398 L796.305 682.398 L795.745 682.398 L795.186 682.398 L794.627 682.398 L794.068 682.398 L793.508 682.398 L792.949 682.398 L792.39 682.398 L791.831 682.398 L791.271 682.398 L790.712 682.398 L790.153 682.398 L789.594 682.398 L789.034 682.398 L788.475 682.398 L787.916 682.398 L787.357 682.398 L786.797 682.398 L786.238 682.398 L785.679 682.398 L785.12 682.398 L784.56 682.398 L784.001 682.398 L783.442 682.398 L782.883 682.398 L782.323 682.398 L781.764 682.398 L781.205 682.398 L780.646 682.398 L780.086 682.398 L779.527 682.398 L778.968 682.398 L778.409 682.398 L777.849 682.398 L777.29 682.398 L776.731 682.398 L776.172 682.398 L775.612 682.398 L775.053 682.398 L774.494 682.398 L773.935 682.398 L773.375 682.398 L772.816 682.398 L772.257 682.398 L771.698 682.398 L771.138 682.398 L770.579 682.398 L770.02 682.398 L769.461 682.398 L768.901 682.398 L768.342 682.398 L767.783 682.398 L767.224 682.398 L766.664 682.398 L766.105 682.398 L765.546 682.398 L764.987 682.398 L764.427 682.398 L763.868 682.398 L763.309 682.398 L762.75 682.398 L762.19 682.398 L761.631 682.398 L761.072 682.398 L760.513 682.398 L759.953 682.398 L759.394 682.398 L758.835 682.398 L758.276 682.398 L757.716 682.398 L757.157 682.398 L756.598 682.398 L756.039 682.398 L755.479 682.398 L754.92 682.398 L754.361 682.398 L753.802 682.398 L753.242 682.398 L752.683 682.398 L752.124 682.398 L751.565 682.398 L751.005 682.398 L750.446 682.398 L749.887 682.398 L749.328 682.398 L748.768 682.398 L748.209 682.398 L747.65 682.398 L747.091 682.398 L746.531 682.398 L745.972 682.398 L745.413 682.398 L744.854 682.398 L744.294 682.398 L743.735 682.398 L743.176 682.398 L742.617 682.398 L742.057 682.398 L741.498 682.398 L740.939 682.398 L740.38 682.398 L739.82 682.398 L739.261 682.398 L738.702 682.398 L738.143 682.398 L737.583 682.398 L737.024 682.398 L736.465 682.398 L735.906 682.398 L735.346 682.398 L734.787 682.398 L734.228 682.398 L733.669 682.398 L733.109 682.398 L732.55 682.398 L731.991 682.398 L731.432 682.398 L730.872 682.398 L730.313 682.398 L729.754 682.398 L729.195 682.398 L728.635 682.398 L728.076 682.398 L727.517 682.398 L726.958 682.398 L726.398 682.398 L725.839 682.398 L725.28 682.398 L724.721 682.398 L724.161 682.398 L723.602 682.398 L723.043 682.398 L722.484 682.398 L721.924 682.398 L721.365 682.398 L720.806 682.398 L720.247 682.398  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.62 720.806,686.62 721.365,686.62 721.924,686.62 722.484,686.62 723.043,686.62 723.602,686.62 724.161,686.62 724.721,686.62 725.28,686.62 725.839,686.62 726.398,686.62 726.958,686.62 727.517,686.62 728.076,686.62 728.635,686.62 729.195,686.62 729.754,686.62 730.313,686.62 730.872,686.62 731.432,686.62 731.991,686.62 732.55,686.62 733.109,686.62 733.669,686.62 734.228,686.62 734.787,686.62 735.346,686.62 735.906,686.62 736.465,686.62 737.024,686.62 737.583,686.62 738.143,686.62 738.702,686.62 739.261,686.62 739.82,686.62 740.38,686.62 740.939,686.62 741.498,686.62 742.057,686.62 742.617,686.62 743.176,686.62 743.735,686.62 744.294,686.62 744.854,686.62 745.413,686.62 745.972,686.62 746.531,686.62 747.091,686.62 747.65,686.62 748.209,686.62 748.768,686.62 749.328,686.62 749.887,686.62 750.446,686.62 751.005,686.62 751.565,686.62 752.124,686.62 752.683,686.62 753.242,686.62 753.802,686.62 754.361,686.62 754.92,686.62 755.479,686.62 756.039,686.62 756.598,686.62 757.157,686.62 757.716,686.62 758.276,686.62 758.835,686.62 759.394,686.62 759.953,686.62 760.513,686.62 761.072,686.62 761.631,686.62 762.19,686.62 762.75,686.62 763.309,686.62 763.868,686.62 764.427,686.62 764.987,686.62 765.546,686.62 766.105,686.62 766.664,686.62 767.224,686.62 767.783,686.62 768.342,686.62 768.901,686.62 769.461,686.62 770.02,686.62 770.579,686.62 771.138,686.62 771.698,686.62 772.257,686.62 772.816,686.62 773.375,686.62 773.935,686.62 774.494,686.62 775.053,686.62 775.612,686.62 776.172,686.62 776.731,686.62 777.29,686.62 777.849,686.62 778.409,686.62 778.968,686.62 779.527,686.62 780.086,686.62 780.646,686.62 781.205,686.62 781.764,686.62 782.323,686.62 782.883,686.62 783.442,686.62 784.001,686.62 784.56,686.62 785.12,686.62 785.679,686.62 786.238,686.62 786.797,686.62 787.357,686.62 787.916,686.62 788.475,686.62 789.034,686.62 789.594,686.62 790.153,686.62 790.712,686.62 791.271,686.62 791.831,686.62 792.39,686.62 792.949,686.62 793.508,686.62 794.068,686.62 794.627,686.62 795.186,686.62 795.745,686.62 796.305,686.62 796.864,686.62 797.423,686.62 797.982,686.62 798.542,686.62 799.101,686.62 799.66,686.62 800.219,686.62 800.779,686.62 801.338,686.62 801.897,686.62 802.456,686.62 803.016,686.62 803.575,686.62 804.134,686.62 804.693,686.62 805.253,686.62 805.812,686.62 806.371,686.62 806.931,686.62 807.49,686.62 808.049,686.62 808.608,686.62 809.168,686.62 809.727,686.62 810.286,686.62 810.845,686.62 811.405,686.62 811.964,686.62 812.523,686.62 813.082,686.62 813.642,686.62 814.201,686.62 814.76,686.62 815.319,686.62 815.879,686.62 816.438,686.62 816.997,686.62 817.556,686.62 818.116,686.62 818.675,686.62 819.234,686.62 819.793,686.62 820.353,686.62 820.912,686.62 821.471,686.62 822.03,686.62 822.59,686.62 823.149,686.62 823.708,686.62 824.267,686.62 824.827,686.62 825.386,686.62 825.945,686.62 826.504,686.62 827.064,686.62 827.623,686.62 828.182,686.62 828.741,686.62 829.301,686.62 829.86,686.62 830.419,686.62 830.978,686.62 831.538,686.62 832.097,686.62 832.656,686.62 833.215,686.62 833.775,686.62 834.334,686.62 834.893,686.62 835.452,686.62 836.012,686.62 836.571,686.62 837.13,686.62 837.689,686.62 838.249,686.62 838.808,686.62 839.367,686.62 839.926,686.62 840.486,686.62 841.045,686.62 841.604,686.62 842.163,686.62 842.723,686.62 843.282,686.62 843.841,686.62 844.4,686.62 844.96,686.62 845.519,686.62 846.078,686.62 846.637,686.62 847.197,686.62 847.756,686.62 848.315,686.62 848.874,686.62 849.434,686.62 849.993,686.62 850.552,686.62 851.111,686.62 851.671,686.62 852.23,686.62 852.789,686.62 853.348,686.62 853.908,686.62 854.467,686.62 855.026,686.62 855.585,686.62 856.145,686.62 856.704,686.62 857.263,686.62 857.822,686.62 858.382,686.62 858.941,686.62 859.5,686.62 860.059,686.62 860.619,686.62 861.178,686.62 861.737,686.62 862.296,686.62 862.856,686.62 863.415,686.62 863.974,686.62 864.533,686.62 865.093,686.62 865.652,686.62 866.211,686.62 866.77,686.62 867.33,686.62 867.889,686.62 868.448,686.62 869.007,686.62 869.567,686.62 870.126,686.62 870.685,686.62 871.244,686.62 871.804,686.62 872.363,686.62 872.922,686.62 873.481,686.62 874.041,686.62 874.6,686.62 875.159,686.62 875.718,686.62 876.278,686.62 876.837,686.62 877.396,686.62 877.955,686.62 878.515,686.62 879.074,686.62 879.633,686.62 880.192,686.62 880.752,686.62 881.311,686.62 881.87,686.62 882.429,686.62 882.989,686.62 883.548,686.62 884.107,686.62 884.666,686.62 885.226,686.62 885.785,686.62 886.344,686.62 886.903,686.62 887.463,686.62 888.022,686.62 888.581,686.62 889.14,686.62 889.7,686.62 890.259,686.62 890.818,686.62 891.377,686.62 891.937,686.62 892.496,686.62 893.055,686.62 893.614,686.62 894.174,686.62 894.733,686.62 895.292,686.62 895.851,686.62 896.411,686.62 896.97,686.62 897.529,686.62 898.088,686.62 898.648,686.62 899.207,686.62 899.766,686.62 900.325,686.62 900.885,686.62 901.444,686.62 902.003,686.62 902.562,686.62 903.122,686.62 903.681,686.62 904.24,686.62 904.799,686.62 905.359,686.62 905.918,686.62 906.477,686.62 907.036,686.62 907.596,686.62 908.155,686.62 908.714,686.62 909.273,686.62 909.833,686.62 910.392,686.62 910.951,686.62 911.51,686.62 912.07,686.62 912.629,686.62 913.188,686.62 913.747,686.62 914.307,686.62 914.866,686.62 915.425,686.62 915.984,686.62 916.544,686.62 917.103,686.62 917.662,686.62 918.221,686.62 918.781,686.62 919.34,686.62 919.899,686.62 920.458,686.62 921.018,686.62 921.577,686.62 922.136,686.62 922.695,686.62 923.255,686.62 923.814,686.62 924.373,686.62 924.932,686.62 925.492,686.62 926.051,686.62 926.61,686.62 927.169,686.62 927.729,686.62 928.288,686.62 928.847,686.62 929.406,686.62 929.966,686.62 930.525,686.62 931.084,686.62 931.644,686.62 932.203,686.62 932.762,686.62 933.321,686.62 933.881,686.62 934.44,686.62 934.999,686.62 935.558,686.62 936.118,686.62 936.677,686.62 937.236,686.62 937.795,686.62 938.355,686.62 938.914,686.62 939.473,686.62 940.032,686.62 940.592,686.62 941.151,686.62 941.71,686.62 942.269,686.62 942.829,686.62 943.388,686.62 943.947,686.62 944.506,686.62 945.066,686.62 945.625,686.62 946.184,686.62 946.743,686.62 947.303,686.62 947.862,686.62 948.421,686.62 948.98,686.62 949.54,686.62 950.099,686.62 950.658,686.62 951.217,686.62 951.777,686.62 952.336,686.62 952.895,686.62 953.454,686.62 954.014,686.62 954.573,686.62 955.132,686.62 955.691,686.62 956.251,686.62 956.81,686.62 957.369,686.62 957.928,686.62 958.488,686.62 959.047,686.62 959.606,686.62 960.165,686.62 960.725,686.62 961.284,686.62 961.843,686.62 962.402,686.62 962.962,686.62 963.521,686.62 964.08,686.62 964.639,686.62 965.199,686.62 965.758,686.62 966.317,686.62 966.876,686.62 967.436,686.62 967.995,686.62 968.554,686.62 969.113,686.62 969.673,686.62 970.232,686.62 970.791,686.62 971.35,686.62 971.91,686.62 972.469,686.62 973.028,686.62 973.587,686.62 974.147,686.62 974.706,686.62 975.265,686.62 975.824,686.62 976.384,686.62 976.943,686.62 977.502,686.62 978.061,686.62 978.621,686.62 979.18,686.62 979.739,686.62 980.298,686.62 980.858,686.62 981.417,686.62 981.976,686.62 982.535,686.62 983.095,686.62 983.654,686.62 984.213,686.62 984.772,686.62 985.332,686.62 985.891,686.62 986.45,686.62 987.009,686.62 987.569,686.62 988.128,686.62 988.687,686.62 989.246,686.62 989.806,686.62 990.365,686.62 990.924,686.62 991.483,686.62 992.043,686.62 992.602,686.62 993.161,686.62 993.72,686.62 994.28,686.62 994.839,686.62 995.398,686.62 995.957,686.62 996.517,686.62 997.076,686.62 997.635,686.62 998.194,686.62 998.754,686.62 999.313,686.62 999.872,686.62 1000.43,686.62 1000.99,686.62 1001.55,686.62 1002.11,686.62 1002.67,686.62 1003.23,686.62 1003.79,686.62 1004.35,686.62 1004.91,686.62 1005.46,686.62 1006.02,686.62 1006.58,686.62 1007.14,686.62 1007.7,686.62 1008.26,686.62 1008.82,686.62 1009.38,686.62 1009.94,686.62 1010.5,686.62 1011.06,686.62 1011.62,686.62 1012.18,686.62 1012.73,686.62 1013.29,686.62 1013.85,686.62 1014.41,686.62 1014.97,686.62 1015.53,686.62 1016.09,686.62 1016.65,686.62 1017.21,686.62 1017.77,686.62 1018.33,686.62 1018.89,686.62 1019.45,686.62 1020.01,686.62 1020.56,686.62 1021.12,686.62 1021.68,686.62 1022.24,686.62 1022.8,686.62 1023.36,686.62 1023.92,686.62 1024.48,686.62 1025.04,686.62 1025.6,686.62 1026.16,686.62 1026.72,686.62 1027.28,686.62 1027.83,686.62 1028.39,686.62 1028.95,686.62 1029.51,686.62 1030.07,686.62 1030.63,686.62 1031.19,686.62 1031.75,686.62 1032.31,686.62 1032.87,686.62 1033.43,686.62 1033.99,686.62 1034.55,686.62 1035.1,686.62 1035.66,686.62 1036.22,686.62 1036.78,686.62 1037.34,686.62 1037.9,686.62 1038.46,686.62 1039.02,686.62 1039.58,686.62 1040.14,686.62 1040.7,686.62 1041.26,686.62 1041.82,686.62 1042.38,686.62 1042.93,686.62 1043.49,686.62 1044.05,686.62 1044.61,686.62 1045.17,686.62 1045.73,686.62 1046.29,686.62 1046.85,686.62 1047.41,686.62 1047.97,686.62 1048.53,686.62 1049.09,686.62 1049.65,686.62 1050.2,686.62 1050.76,686.62 1051.32,686.62 1051.88,686.62 1052.44,686.62 1053,686.62 1053.56,686.62 1054.12,686.62 1054.68,686.62 1055.24,686.62 1055.8,686.62 1056.36,686.62 1056.92,686.62 1057.48,686.62 1058.03,686.62 1058.59,686.62 1059.15,686.62 1059.71,686.62 1060.27,686.62 1060.83,686.62 1061.39,686.62 1061.95,686.62 1062.51,686.62 1063.07,686.62 1063.63,686.62 1064.19,686.62 1064.75,686.62 1065.3,686.62 1065.86,686.62 1066.42,686.62 1066.98,686.62 1067.54,686.62 1068.1,686.62 1068.66,686.62 1069.22,686.62 1069.78,686.62 1070.34,686.62 1070.9,686.62 1071.46,686.62 1072.02,686.62 1072.57,686.62 1073.13,686.62 1073.69,686.62 1074.25,686.62 1074.81,686.62 1075.37,686.62 1075.93,686.62 1076.49,686.62 1077.05,686.62 1077.61,686.62 1078.17,686.62 1078.73,686.62 1079.29,686.62 1079.85,686.62 1080.4,686.62 1080.96,686.62 1081.52,686.62 1082.08,686.62 1082.64,686.62 1083.2,686.62 1083.76,686.62 1084.32,686.62 1084.88,686.62 1085.44,686.62 1086,686.62 1086.56,686.62 1087.12,686.62 1087.67,686.62 1088.23,686.62 1088.79,686.62 1089.35,686.62 1089.91,686.62 1090.47,686.62 1091.03,686.62 1091.59,686.62 1092.15,686.62 1092.71,686.62 1093.27,686.62 1093.83,686.62 1094.39,686.62 1094.94,686.62 1095.5,686.62 1096.06,686.62 1096.62,686.62 1097.18,686.62 1097.74,686.62 1098.3,686.62 1098.86,686.62 1099.42,686.62 1099.98,686.62 1100.54,686.62 1101.1,686.62 1101.66,686.62 1102.22,686.62 1102.77,686.62 1103.33,686.62 1103.89,686.62 1104.45,686.62 1105.01,686.62 1105.57,686.62 1106.13,686.62 1106.69,686.62 1107.25,686.62 1107.81,686.62 1108.37,686.62 1108.93,686.62 1109.49,686.62 1110.04,686.62 1110.6,686.62 1111.16,686.62 1111.72,686.62 1112.28,686.62 1112.84,686.62 1113.4,686.62 1113.96,686.62 1114.52,686.62 1115.08,686.62 1115.64,686.62 1116.2,686.62 1116.76,686.62 1117.31,686.62 1117.87,686.62 1118.43,686.62 1118.99,686.62 1119.55,686.62 1120.11,686.62 1120.67,686.62 1121.23,686.62 1121.79,686.62 1122.35,686.62 1122.91,686.62 1123.47,686.62 1124.03,686.62 1124.59,686.62 1125.14,686.62 1125.7,686.62 1126.26,686.62 1126.82,686.62 1127.38,686.62 1127.94,686.62 1128.5,686.62 1129.06,686.62 1129.62,686.62 1130.18,686.62 1130.74,686.62 1131.3,686.62 1131.86,686.62 1132.41,686.62 1132.97,686.62 1133.53,686.62 1134.09,686.62 1134.65,686.62 1135.21,686.62 1135.77,686.62 1136.33,686.62 1136.89,686.62 1137.45,686.62 1138.01,686.62 1138.57,686.62 1139.13,686.62 1139.68,686.62 1140.24,686.62 1140.8,686.62 1141.36,686.62 1141.92,686.62 1142.48,686.62 1143.04,686.62 1143.6,686.62 1144.16,686.62 1144.72,686.62 1145.28,686.62 1145.84,686.62 1146.4,686.62 1146.96,686.62 1147.51,686.62 1148.07,686.62 1148.63,686.62 1149.19,686.62 1149.75,686.62 1150.31,686.62 1150.87,686.62 1151.43,686.62 1151.99,686.62 1152.55,686.62 1153.11,686.62 1153.67,686.62 1154.23,686.62 1154.78,686.62 1155.34,686.62 1155.9,686.62 1156.46,686.62 1157.02,686.62 1157.58,686.62 1158.14,686.62 1158.7,686.62 1159.26,686.62 1159.82,686.62 1160.38,686.62 1160.94,686.62 1161.5,686.62 1162.05,686.62 1162.61,686.62 1163.17,686.62 1163.73,686.62 1164.29,686.62 1164.85,686.62 1165.41,686.62 1165.97,686.62 1166.53,686.62 1167.09,686.62 1167.65,686.62 1168.21,686.62 1168.77,686.62 1169.33,686.62 1169.88,686.62 1170.44,686.62 1171,686.62 1171.56,686.62 1172.12,686.62 1172.68,686.62 1173.24,686.62 1173.8,686.62 1174.36,686.62 1174.92,686.62 1175.48,686.62 1176.04,686.62 1176.6,686.62 1177.15,686.62 1177.71,686.62 1178.27,686.62 1178.83,686.62 1179.39,686.62 1179.95,686.62 1180.51,686.62 1181.07,686.62 1181.63,686.62 1182.19,686.62 1182.75,686.62 1183.31,686.62 1183.87,686.62 1184.43,686.62 1184.98,686.62 1185.54,686.62 1186.1,686.62 1186.66,686.62 1187.22,686.62 1187.78,686.62 1188.34,686.62 1188.9,686.62 1189.46,686.62 1190.02,686.62 1190.58,686.62 1191.14,686.62 1191.7,686.62 1192.25,686.62 1192.81,686.62 1193.37,686.62 1193.93,686.62 1194.49,686.62 1195.05,686.62 1195.61,686.62 1196.17,686.62 1196.73,686.62 1197.29,686.62 1197.85,686.62 1198.41,686.62 1198.97,686.62 1199.52,686.62 1200.08,686.62 1200.64,686.62 1201.2,686.62 1201.76,686.62 1202.32,686.62 1202.88,686.62 1203.44,686.62 1204,686.62 1204.56,686.62 1205.12,686.62 1205.68,686.62 1206.24,686.62 1206.8,686.62 1207.35,686.62 1207.91,686.62 1208.47,686.62 1209.03,686.62 1209.59,686.62 1210.15,686.62 1210.71,686.62 1211.27,686.62 1211.83,686.62 1212.39,686.62 1212.95,686.62 1213.51,686.62 1214.07,686.62 1214.62,686.62 1215.18,686.62 1215.74,686.62 1216.3,686.62 1216.86,686.62 1217.42,686.62 1217.98,686.62 1218.54,686.62 1219.1,686.62 1219.66,686.62 1220.22,686.62 1220.78,686.62 1221.34,686.62 1221.89,686.62 1222.45,686.62 1223.01,686.62 1223.57,686.62 1224.13,686.62 1224.69,686.62 1225.25,686.62 1225.81,686.62 1226.37,686.62 1226.93,686.62 1227.49,686.62 1228.05,686.62 1228.61,686.62 1229.17,686.62 1229.72,686.62 1230.28,686.62 1230.84,686.62 1231.4,686.62 1231.96,686.62 1232.52,686.62 1233.08,686.62 1233.64,686.62 1234.2,686.62 1234.76,686.62 1235.32,686.62 1235.88,686.62 1236.44,686.62 1236.99,686.62 1237.55,686.62 1238.11,686.62 1238.67,686.62 1239.23,686.62 1239.79,686.62 1240.35,686.62 1240.91,686.62 1241.47,686.62 1242.03,686.62 1242.59,686.62 1243.15,686.62 1243.71,686.62 1244.26,686.62 1244.82,686.62 1245.38,686.62 1245.94,686.62 1246.5,686.62 1247.06,686.62 1247.62,686.62 1248.18,686.62 1248.74,686.62 1249.3,686.62 1249.86,686.62 1250.42,686.62 1250.98,686.62 1251.54,686.62 1252.09,686.62 1252.65,686.62 1253.21,686.62 1253.77,686.62 1254.33,686.62 1254.89,686.62 1255.45,686.62 1256.01,686.62 1256.57,686.62 1257.13,686.62 1257.69,686.62 1258.25,686.62 1258.81,686.62 1259.36,686.62 1259.92,686.62 1260.48,686.62 1261.04,686.62 1261.6,686.62 1262.16,686.62 1262.72,686.62 1263.28,686.62 1263.84,686.62 1264.4,686.62 1264.96,686.62 1265.52,686.62 1266.08,686.62 1266.63,686.62 1267.19,686.62 1267.75,686.62 1268.31,686.62 1268.87,686.62 1269.43,686.62 1269.99,686.62 1270.55,686.62 1271.11,686.62 1271.67,686.62 1272.23,686.62 1272.79,686.62 1273.35,686.62 1273.91,686.62 1274.46,686.62 1275.02,686.62 1275.58,686.62 1276.14,686.62 1276.7,686.62 1277.26,686.62 1277.82,686.62 1278.38,686.62 1278.94,686.62 1279.5,686.62 1280.06,686.62 1280.62,686.62 1281.18,686.62 1281.73,686.62 1282.29,686.62 1282.85,686.62 1283.41,686.62 1283.97,686.62 1284.53,686.62 1285.09,686.62 1285.65,686.62 1286.21,686.62 1286.77,686.62 1287.33,686.62 1287.89,686.62 1288.45,686.62 1289,686.62 1289.56,686.62 1290.12,686.62 1290.68,686.62 1291.24,686.62 1291.8,686.62 1292.36,686.62 1292.92,686.62 1293.48,686.62 1294.04,686.62 1294.6,686.62 1295.16,686.62 1295.72,686.62 1296.28,686.62 1296.83,686.62 1297.39,686.62 1297.95,686.62 1298.51,686.62 1299.07,686.62 1299.63,686.62 1300.19,686.62 1300.75,686.62 1301.31,686.62 1301.87,686.62 1302.43,686.62 1302.99,686.62 1303.55,686.62 1304.1,686.62 1304.66,686.62 1305.22,686.62 1305.78,686.62 1306.34,686.62 1306.9,686.62 1307.46,686.62 1308.02,686.62 1308.58,686.62 1309.14,686.62 1309.7,686.62 1310.26,686.62 1310.82,686.62 1311.38,686.62 1311.93,686.62 1312.49,686.62 1313.05,686.62 1313.61,686.62 1314.17,686.62 1314.73,686.62 1315.29,686.62 1315.85,686.62 1316.41,686.62 1316.97,686.62 1317.53,686.62 1318.09,686.62 1318.65,686.62 1319.2,686.62 1319.76,686.62 1320.32,686.62 1320.88,686.62 1321.44,686.62 1322,686.62 1322.56,686.62 1323.12,686.62 1323.68,686.62 1324.24,686.62 1324.8,686.62 1325.36,686.62 1325.92,686.62 1326.47,686.62 1327.03,686.62 1327.59,686.62 1328.15,686.62 1328.71,686.62 1329.27,686.62 1329.83,686.62 1330.39,686.62 1330.95,686.62 1331.51,686.62 1332.07,686.62 1332.63,686.62 1333.19,686.62 1333.75,686.62 1334.3,686.62 1334.86,686.62 1335.42,686.62 1335.98,686.62 1336.54,686.62 1337.1,686.62 1337.66,686.62 1338.22,686.62 1338.78,686.62 1339.34,686.62 1339.9,686.62 1340.46,686.62 1341.02,686.62 1341.57,686.62 1342.13,686.62 1342.69,686.62 1343.25,686.62 1343.81,686.62 1344.37,686.62 1344.93,686.62 1345.49,686.62 1346.05,686.62 1346.61,686.62 1347.17,686.62 1347.73,686.62 1348.29,686.62 1348.84,686.62 1349.4,686.62 1349.96,686.62 1350.52,686.62 1351.08,686.62 1351.64,686.62 1352.2,686.62 1352.76,686.62 1353.32,686.62 1353.88,686.62 1354.44,686.62 1355,686.62 1355.56,686.62 1356.12,686.62 1356.67,686.62 1357.23,686.62 1357.79,686.62 1358.35,686.62 1358.91,686.62 1359.47,686.62 1360.03,686.62 1360.59,686.62 1361.15,686.62 1361.71,686.62 1362.27,686.62 1362.83,686.62 1363.39,686.62 1363.94,686.62 1364.5,686.62 1365.06,686.62 1365.62,686.62 1366.18,686.62 1366.74,686.62 1367.3,686.62 1367.86,686.62 1368.42,686.62 1368.98,686.62 1369.54,686.62 1370.1,686.62 1370.66,686.62 1371.21,686.62 1371.77,686.62 1372.33,686.62 1372.89,686.62 1373.45,686.62 1374.01,686.62 1374.57,686.62 1375.13,686.62 1375.69,686.62 1376.25,686.62 1376.81,686.62 1377.37,686.62 1377.93,686.62 1378.49,686.62 1379.04,686.62 1379.6,686.62 1380.16,686.62 1380.72,686.62 1381.28,686.62 1381.84,686.62 1382.4,686.62 1382.96,686.62 1383.52,686.62 1384.08,686.62 1384.64,686.62 1385.2,686.62 1385.76,686.62 1386.31,686.62 1386.87,686.62 1387.43,686.62 1387.99,686.62 1388.55,686.62 1389.11,686.62 1389.67,686.62 1390.23,686.62 1390.79,686.62 1391.35,686.62 1391.91,686.62 1392.47,686.62 1393.03,686.62 1393.58,686.62 1394.14,686.62 1394.7,686.62 1395.26,686.62 1395.82,686.62 1396.38,686.62 1396.94,686.62 1397.5,686.62 1398.06,686.62 1398.62,686.62 1399.18,686.62 1399.74,686.62 1400.3,686.62 1400.86,686.62 1401.41,686.62 1401.97,686.62 1402.53,686.62 1403.09,686.62 1403.65,686.62 1404.21,686.62 1404.77,686.62 1405.33,686.62 1405.89,686.62 1406.45,686.62 1407.01,686.62 1407.57,686.62 1408.13,686.62 1408.68,686.62 1409.24,686.62 1409.8,686.62 1410.36,686.62 1410.92,686.62 1411.48,686.62 1412.04,686.62 1412.6,686.62 1413.16,686.62 1413.72,686.62 1414.28,686.62 1414.84,686.62 1415.4,686.62 1415.95,686.62 1416.51,686.62 1417.07,686.62 1417.63,686.62 1418.19,686.62 1418.75,686.62 1419.31,686.62 1419.87,686.62 1420.43,686.62 1420.99,686.62 1421.55,686.62 1422.11,686.62 1422.67,686.62 1423.23,686.62 1423.78,686.62 1424.34,686.62 1424.9,686.62 1425.46,686.62 1426.02,686.62 1426.58,686.62 1427.14,686.62 1427.7,686.62 1428.26,686.62 1428.82,686.62 1429.38,686.62 1429.94,686.62 1430.5,686.62 1431.05,686.62 1431.61,686.62 1432.17,686.62 1432.73,686.62 1433.29,686.62 1433.85,686.62 1434.41,686.62 1434.97,686.62 1435.53,686.62 1436.09,686.62 1436.65,686.62 1437.21,686.62 1437.77,686.62 1438.33,686.62 1438.88,686.62 1439.44,686.62 1440,686.62 1440.56,686.62 1441.12,686.62 1441.68,686.62 1442.24,686.62 1442.8,686.62 1443.36,686.62 1443.92,686.62 1444.48,686.62 1445.04,686.62 1445.6,686.62 1446.15,686.62 1446.71,686.62 1447.27,686.62 1447.83,686.62 1448.39,686.62 1448.95,686.62 1449.51,686.62 1450.07,686.62 1450.63,686.62 1451.19,686.62 1451.75,686.62 1452.31,686.62 1452.87,686.62 1453.42,686.62 1453.98,686.62 1454.54,686.62 1455.1,686.62 1455.66,686.62 1456.22,686.62 1456.78,686.62 1457.34,686.62 1457.9,686.62 1458.46,686.62 1459.02,686.62 1459.58,686.62 1460.14,686.62 1460.7,686.62 1461.25,686.62 1461.81,686.62 1462.37,686.62 1462.93,686.62 1463.49,686.62 1464.05,686.62 1464.61,686.62 1465.17,686.62 1465.73,686.62 1466.29,686.62 1466.85,686.62 1467.41,686.62 1467.97,686.62 1468.52,686.62 1469.08,686.62 1469.64,686.62 1470.2,686.62 1470.76,686.62 1471.32,686.62 1471.88,686.62 1472.44,686.62 1473,686.62 1473.56,686.62 1474.12,686.62 1474.68,686.62 1475.24,686.62 1475.79,686.62 1476.35,686.62 1476.91,686.62 1477.47,686.62 1478.03,686.62 1478.59,686.62 1479.15,686.62 1479.71,686.62 1480.27,686.62 1480.83,686.62 1481.39,686.62 1481.95,686.62 1482.51,686.62 1483.07,686.62 1483.62,686.62 1484.18,686.62 1484.74,686.62 1485.3,686.62 1485.86,686.62 1486.42,686.62 1486.98,686.62 1487.54,686.62 1488.1,686.62 1488.66,686.62 1489.22,686.62 1489.78,686.62 1490.34,686.62 1490.89,686.62 1491.45,686.62 1492.01,686.62 1492.57,686.62 1493.13,686.62 1493.69,686.62 1494.25,686.62 1494.81,686.62 1495.37,686.62 1495.93,686.62 1496.49,686.62 1497.05,686.62 1497.61,686.62 1498.16,686.62 1498.72,686.62 1499.28,686.62 1499.84,686.62 1500.4,686.62 1500.96,686.62 1501.52,686.62 1502.08,686.62 1502.64,686.62 1503.2,686.62 1503.76,686.62 1504.32,686.62 1504.88,686.62 1505.44,686.62 1505.99,686.62 1506.55,686.62 1507.11,686.62 1507.67,686.62 1508.23,686.62 1508.79,686.62 1509.35,686.62 1509.91,686.62 1510.47,686.62 1511.03,686.62 1511.59,686.62 1512.15,686.62 1512.71,686.62 1513.26,686.62 1513.82,686.62 1514.38,686.62 1514.94,686.62 1515.5,686.62 1516.06,686.62 1516.62,686.62 1517.18,686.62 1517.74,686.62 1518.3,686.62 1518.86,686.62 1519.42,686.62 1519.98,686.62 1520.53,686.62 1521.09,686.62 1521.65,686.62 1522.21,686.62 1522.77,686.62 1523.33,686.62 1523.89,686.62 1524.45,686.62 1525.01,686.62 1525.57,686.62 1526.13,686.62 1526.69,686.62 1527.25,686.62 1527.81,686.62 1528.36,686.62 1528.92,686.62 1529.48,686.62 1530.04,686.62 1530.6,686.62 1531.16,686.62 1531.72,686.62 1532.28,686.62 1532.84,686.62 1533.4,686.62 1533.96,686.62 1534.52,686.62 1535.08,686.62 1535.63,686.62 1536.19,686.62 1536.75,686.62 1537.31,686.62 1537.87,686.62 1538.43,686.62 1538.99,686.62 1539.55,686.62 1540.11,686.62 1540.67,686.62 1541.23,686.62 1541.79,686.62 1542.35,686.62 1542.9,686.62 1543.46,686.62 1544.02,686.62 1544.58,686.62 1545.14,686.62 1545.7,686.62 1546.26,686.62 1546.82,686.62 1547.38,686.62 1547.94,686.62 1548.5,686.62 1549.06,686.62 1549.62,686.62 1550.18,686.62 1550.73,686.62 1551.29,686.62 1551.85,686.62 1552.41,686.62 1552.97,686.62 1553.53,686.62 1554.09,686.62 1554.65,686.62 1555.21,686.62 1555.77,686.62 1556.33,686.62 1556.89,686.62 1557.45,686.62 1558,686.62 1558.56,686.62 1559.12,686.62 1559.68,686.62 1560.24,686.62 1560.8,686.62 1561.36,686.62 1561.92,686.62 1562.48,686.62 1563.04,686.62 1563.6,686.62 1564.16,686.62 1564.72,686.62 1565.28,686.62 1565.83,686.62 1566.39,686.62 1566.95,686.62 1567.51,686.62 1568.07,686.62 1568.63,686.62 1569.19,686.62 1569.75,686.62 1570.31,686.62 1570.87,686.62 1571.43,686.62 1571.99,686.62 1572.55,686.62 1573.1,686.62 1573.66,686.62 1574.22,686.62 1574.78,686.62 1575.34,686.62 1575.9,686.62 1576.46,686.62 1577.02,686.62 1577.58,686.62 1578.14,686.62 1578.7,686.62 1579.26,686.62 1579.82,686.62 1580.37,686.62 1580.93,686.62 1581.49,686.62 1582.05,686.62 1582.61,686.62 1583.17,686.62 1583.73,686.62 1584.29,686.62 1584.85,686.62 1585.41,686.62 1585.97,686.62 1586.53,686.62 1587.09,686.62 1587.65,686.62 1588.2,686.62 1588.76,686.62 1589.32,686.62 1589.88,686.62 1590.44,686.62 1591,686.62 1591.56,686.62 1592.12,686.62 1592.68,686.62 1593.24,686.62 1593.8,686.62 1594.36,686.62 1594.92,686.62 1595.47,686.62 1596.03,686.62 1596.59,686.62 1597.15,686.62 1597.71,686.62 1598.27,686.62 1598.83,686.62 1599.39,686.62 1599.95,686.62 1600.51,686.62 1601.07,686.62 1601.63,686.62 1602.19,686.62 1602.74,686.62 1603.3,686.62 1603.86,686.62 1604.42,686.62 1604.98,686.62 1605.54,686.62 1606.1,686.62 1606.66,686.62 1607.22,686.62 1607.78,686.62 1608.34,686.62 1608.9,686.62 1609.46,686.62 1610.02,686.62 1610.57,686.62 1611.13,686.62 1611.69,686.62 1612.25,686.62 1612.81,686.62 1613.37,686.62 1613.93,686.62 1614.49,686.62 1615.05,686.62 1615.61,686.62 1616.17,686.62 1616.73,686.62 1617.29,686.62 1617.84,686.62 1618.4,686.62 1618.96,686.62 1619.52,686.62 1620.08,686.62 1620.64,686.62 1621.2,686.62 1621.76,686.62 1622.32,686.62 1622.88,686.62 1623.44,686.62 1624,686.62 1624.56,686.62 1625.11,686.62 1625.67,686.62 1626.23,686.62 1626.79,686.62 1627.35,686.62 1627.91,686.62 1628.47,686.62 1629.03,686.62 1629.59,686.62 1630.15,686.62 1630.71,686.62 1631.27,686.62 1631.83,686.62 1632.39,686.62 1632.94,686.62 1633.5,686.62 1634.06,686.62 1634.62,686.62 1635.18,686.62 1635.74,686.62 1636.3,686.62 1636.86,686.62 1637.42,686.62 1637.98,686.62 1638.54,686.62 1639.1,686.62 1639.66,686.62 1640.21,686.62 1640.77,686.62 1641.33,686.62 1641.89,686.62 1642.45,686.62 1643.01,686.62 1643.57,686.62 1644.13,686.62 1644.69,686.62 1645.25,686.62 1645.81,686.62 1646.37,686.62 1646.93,686.62 1647.48,686.62 1648.04,686.62 1648.6,686.62 1649.16,686.62 1649.72,686.62 1650.28,686.62 1650.84,686.62 1651.4,686.62 1651.96,686.62 1652.52,686.62 1653.08,686.62 1653.64,686.62 1654.2,686.62 1654.76,686.62 1655.31,686.62 1655.87,686.62 1656.43,686.62 1656.99,686.62 1657.55,686.62 1658.11,686.62 1658.67,686.62 1659.23,686.62 1659.79,686.62 1660.35,686.62 1660.91,686.62 1661.47,686.62 1662.03,686.62 1662.58,686.62 1663.14,686.62 1663.7,686.62 1664.26,686.62 1664.82,686.62 1665.38,686.62 1665.94,686.62 1666.5,686.62 1667.06,686.62 1667.62,686.62 1668.18,686.62 1668.74,686.62 1669.3,686.62 1669.85,686.62 1670.41,686.62 1670.97,686.62 1671.53,686.62 1672.09,686.62 1672.65,686.62 1673.21,686.62 1673.77,686.62 1674.33,686.62 1674.89,686.62 1675.45,686.62 1676.01,686.62 1676.57,686.62 1677.13,686.62 1677.68,686.62 1678.24,686.62 1678.8,686.62 1679.36,686.62 1679.92,686.62 1680.48,686.62 1681.04,686.62 1681.6,686.62 1682.16,686.62 1682.72,686.62 1683.28,686.62 1683.84,686.62 1684.4,686.62 1684.95,686.62 1685.51,686.62 1686.07,686.62 1686.63,686.62 1687.19,686.62 1687.75,686.62 1688.31,686.62 1688.87,686.62 1689.43,686.62 1689.99,686.62 1690.55,686.62 1691.11,686.62 1691.67,686.62 1692.23,686.62 1692.78,686.62 1693.34,686.62 1693.9,686.62 1694.46,686.62 1695.02,686.62 1695.58,686.62 1696.14,686.62 1696.7,686.62 1697.26,686.62 1697.82,686.62 1698.38,686.62 1698.94,686.62 1699.5,686.62 1700.05,686.62 1700.61,686.62 1701.17,686.62 1701.73,686.62 1702.29,686.62 1702.85,686.62 1703.41,686.62 1703.97,686.62 1704.53,686.62 1705.09,686.62 1705.65,686.62 1706.21,686.62 1706.77,686.62 1707.32,686.62 1707.88,686.62 1708.44,686.62 1709,686.62 1709.56,686.62 1710.12,686.62 1710.68,686.62 1711.24,686.62 1711.8,686.62 1712.36,686.62 1712.92,686.62 1713.48,686.62 1714.04,686.62 1714.6,686.62 1715.15,686.62 1715.71,686.62 1716.27,686.62 1716.83,686.62 1717.39,686.62 1717.95,686.62 1718.51,686.62 1719.07,686.62 1719.63,686.62 1720.19,686.62 1720.75,686.62 1721.31,686.62 1721.87,686.62 1722.42,686.62 1722.98,686.62 1723.54,686.62 1724.1,686.62 1724.66,686.62 1725.22,686.62 1725.78,686.62 1726.34,686.62 1726.9,686.62 1727.46,686.62 1728.02,686.62 1728.58,686.62 1729.14,686.62 1729.69,686.62 1730.25,686.62 1730.81,686.62 1731.37,686.62 1731.93,686.62 1732.49,686.62 1733.05,686.62 1733.61,686.62 1734.17,686.62 1734.73,686.62 1735.29,686.62 1735.85,686.62 1736.41,686.62 1736.97,686.62 1737.52,686.62 1738.08,686.62 1738.64,686.62 1739.2,686.62 1739.76,686.62 1740.32,686.62 1740.88,686.62 1741.44,686.62 1742,686.62 1742.56,686.62 1743.12,686.62 1743.68,686.62 1744.24,686.62 1744.79,686.62 1745.35,686.62 1745.91,686.62 1746.47,686.62 1747.03,686.62 1747.59,686.62 1748.15,686.62 1748.71,686.62 1749.27,686.62 1749.83,686.62 1750.39,686.62 1750.95,686.62 1751.51,686.62 1752.06,686.62 1752.62,686.62 1753.18,686.62 1753.74,686.62 1754.3,686.62 1754.86,686.62 1755.42,686.62 1755.98,686.62 1756.54,686.62 1757.1,686.62 1757.66,686.62 1758.22,686.62 1758.78,686.62 1759.34,686.62 1759.89,686.62 1760.45,686.62 1761.01,686.62 1761.57,686.62 1762.13,686.62 1762.69,686.62 1763.25,686.62 1763.81,686.62 1764.37,686.62 1764.93,686.62 1765.49,686.62 1766.05,686.62 1766.61,686.62 1767.16,686.62 1767.72,686.62 1768.28,686.62 1768.84,686.62 1769.4,686.62 1769.96,686.62 1770.52,686.62 1771.08,686.62 1771.64,686.62 1772.2,686.62 1772.76,686.62 1773.32,686.62 1773.88,686.62 1774.43,686.62 1774.99,686.62 1775.55,686.62 1776.11,686.62 1776.67,686.62 1777.23,686.62 1777.79,686.62 1778.35,686.62 1778.91,686.62 1779.47,686.62 1780.03,686.62 1780.59,686.62 1781.15,686.62 1781.71,686.62 1782.26,686.62 1782.82,686.62 1783.38,686.62 1783.94,686.62 1784.5,686.62 1785.06,686.62 1785.62,686.62 1786.18,686.62 1786.74,686.62 1787.3,686.62 1787.86,686.62 1788.42,686.62 1788.98,686.62 1789.53,686.62 1790.09,686.62 1790.65,686.62 1791.21,686.62 1791.77,686.62 1792.33,686.62 1792.89,686.62 1793.45,686.62 1794.01,686.62 1794.57,686.62 1795.13,686.62 1795.69,686.62 1796.25,686.62 1796.8,686.62 1797.36,686.62 1797.92,686.62 1798.48,686.62 1799.04,686.62 1799.6,686.62 1800.16,686.62 1800.72,686.62 1801.28,686.62 1801.84,686.62 1802.4,686.62 1802.96,686.62 1803.52,686.62 1804.08,686.62 1804.63,686.62 1805.19,686.62 1805.75,686.62 1806.31,686.62 1806.87,686.62 1807.43,686.62 1807.99,686.62 1808.55,686.62 1809.11,686.62 1809.67,686.62 1810.23,686.62 1810.79,686.62 1811.35,686.62 1811.9,686.62 1812.46,686.62 1813.02,686.62 1813.58,686.62 1814.14,686.62 1814.7,686.62 1815.26,686.62 1815.82,686.62 1816.38,686.62 1816.94,686.62 1817.5,686.62 1818.06,686.62 1818.62,686.62 1819.18,686.62 1819.73,686.62 1820.29,686.62 1820.85,686.62 1821.41,686.62 1821.97,686.62 1822.53,686.62 1823.09,686.62 1823.65,686.62 1824.21,686.62 1824.77,686.62 1825.33,686.62 1825.89,686.62 1826.45,686.62 1827,686.62 1827.56,686.62 1828.12,686.62 1828.68,686.62 1829.24,686.62 1829.8,686.62 1830.36,686.62 1830.92,686.62 1831.48,686.62 1832.04,686.62 1832.6,686.62 1833.16,686.62 1833.72,686.62 1834.27,686.62 1834.83,686.62 1835.39,686.62 1835.95,686.62 1836.51,686.62 1837.07,686.62 1837.63,686.62 1838.19,686.62 \"/>\n<path clip-path=\"url(#clip643)\" d=\"M720.247 685.068 L720.806 685.068 L721.365 685.068 L721.924 685.068 L722.484 685.068 L723.043 685.068 L723.602 685.068 L724.161 685.068 L724.721 685.068 L725.28 685.068 L725.839 685.068 L726.398 685.068 L726.958 685.068 L727.517 685.068 L728.076 685.068 L728.635 685.068 L729.195 685.068 L729.754 685.068 L730.313 685.068 L730.872 685.068 L731.432 685.068 L731.991 685.068 L732.55 685.068 L733.109 685.068 L733.669 685.068 L734.228 685.068 L734.787 685.068 L735.346 685.068 L735.906 685.068 L736.465 685.068 L737.024 685.068 L737.583 685.068 L738.143 685.068 L738.702 685.068 L739.261 685.068 L739.82 685.068 L740.38 685.068 L740.939 685.068 L741.498 685.068 L742.057 685.068 L742.617 685.068 L743.176 685.068 L743.735 685.068 L744.294 685.068 L744.854 685.068 L745.413 685.068 L745.972 685.068 L746.531 685.068 L747.091 685.068 L747.65 685.068 L748.209 685.068 L748.768 685.068 L749.328 685.068 L749.887 685.068 L750.446 685.068 L751.005 685.068 L751.565 685.068 L752.124 685.068 L752.683 685.068 L753.242 685.068 L753.802 685.068 L754.361 685.068 L754.92 685.068 L755.479 685.068 L756.039 685.068 L756.598 685.068 L757.157 685.068 L757.716 685.068 L758.276 685.068 L758.835 685.068 L759.394 685.068 L759.953 685.068 L760.513 685.068 L761.072 685.068 L761.631 685.068 L762.19 685.068 L762.75 685.068 L763.309 685.068 L763.868 685.068 L764.427 685.068 L764.987 685.068 L765.546 685.068 L766.105 685.068 L766.664 685.068 L767.224 685.068 L767.783 685.068 L768.342 685.068 L768.901 685.068 L769.461 685.068 L770.02 685.068 L770.579 685.068 L771.138 685.068 L771.698 685.068 L772.257 685.068 L772.816 685.068 L773.375 685.068 L773.935 685.068 L774.494 685.068 L775.053 685.068 L775.612 685.068 L776.172 685.068 L776.731 685.068 L777.29 685.068 L777.849 685.068 L778.409 685.068 L778.968 685.068 L779.527 685.068 L780.086 685.068 L780.646 685.068 L781.205 685.068 L781.764 685.068 L782.323 685.068 L782.883 685.068 L783.442 685.068 L784.001 685.068 L784.56 685.068 L785.12 685.068 L785.679 685.068 L786.238 685.068 L786.797 685.068 L787.357 685.068 L787.916 685.068 L788.475 685.068 L789.034 685.068 L789.594 685.068 L790.153 685.068 L790.712 685.068 L791.271 685.068 L791.831 685.068 L792.39 685.068 L792.949 685.068 L793.508 685.068 L794.068 685.068 L794.627 685.068 L795.186 685.068 L795.745 685.068 L796.305 685.068 L796.864 685.068 L797.423 685.068 L797.982 685.068 L798.542 685.068 L799.101 685.068 L799.66 685.068 L800.219 685.068 L800.779 685.068 L801.338 685.068 L801.897 685.068 L802.456 685.068 L803.016 685.068 L803.575 685.068 L804.134 685.068 L804.693 685.068 L805.253 685.068 L805.812 685.068 L806.371 685.068 L806.931 685.068 L807.49 685.068 L808.049 685.068 L808.608 685.068 L809.168 685.068 L809.727 685.068 L810.286 685.068 L810.845 685.068 L811.405 685.068 L811.964 685.068 L812.523 685.068 L813.082 685.068 L813.642 685.068 L814.201 685.068 L814.76 685.068 L815.319 685.068 L815.879 685.068 L816.438 685.068 L816.997 685.068 L817.556 685.068 L818.116 685.068 L818.675 685.068 L819.234 685.068 L819.793 685.068 L820.353 685.068 L820.912 685.068 L821.471 685.068 L822.03 685.068 L822.59 685.068 L823.149 685.068 L823.708 685.068 L824.267 685.068 L824.827 685.068 L825.386 685.068 L825.945 685.068 L826.504 685.068 L827.064 685.068 L827.623 685.068 L828.182 685.068 L828.741 685.068 L829.301 685.068 L829.86 685.068 L830.419 685.068 L830.978 685.068 L831.538 685.068 L832.097 685.068 L832.656 685.068 L833.215 685.068 L833.775 685.068 L834.334 685.068 L834.893 685.068 L835.452 685.068 L836.012 685.068 L836.571 685.068 L837.13 685.068 L837.689 685.068 L838.249 685.068 L838.808 685.068 L839.367 685.068 L839.926 685.068 L840.486 685.068 L841.045 685.068 L841.604 685.068 L842.163 685.068 L842.723 685.068 L843.282 685.068 L843.841 685.068 L844.4 685.068 L844.96 685.068 L845.519 685.068 L846.078 685.068 L846.637 685.068 L847.197 685.068 L847.756 685.068 L848.315 685.068 L848.874 685.068 L849.434 685.068 L849.993 685.068 L850.552 685.068 L851.111 685.068 L851.671 685.068 L852.23 685.068 L852.789 685.068 L853.348 685.068 L853.908 685.068 L854.467 685.068 L855.026 685.068 L855.585 685.068 L856.145 685.068 L856.704 685.068 L857.263 685.068 L857.822 685.068 L858.382 685.068 L858.941 685.068 L859.5 685.068 L860.059 685.068 L860.619 685.068 L861.178 685.068 L861.737 685.068 L862.296 685.068 L862.856 685.068 L863.415 685.068 L863.974 685.068 L864.533 685.068 L865.093 685.068 L865.652 685.068 L866.211 685.068 L866.77 685.068 L867.33 685.068 L867.889 685.068 L868.448 685.068 L869.007 685.068 L869.567 685.068 L870.126 685.068 L870.685 685.068 L871.244 685.068 L871.804 685.068 L872.363 685.068 L872.922 685.068 L873.481 685.068 L874.041 685.068 L874.6 685.068 L875.159 685.068 L875.718 685.068 L876.278 685.068 L876.837 685.068 L877.396 685.068 L877.955 685.068 L878.515 685.068 L879.074 685.068 L879.633 685.068 L880.192 685.068 L880.752 685.068 L881.311 685.068 L881.87 685.068 L882.429 685.068 L882.989 685.068 L883.548 685.068 L884.107 685.068 L884.666 685.068 L885.226 685.068 L885.785 685.068 L886.344 685.068 L886.903 685.068 L887.463 685.068 L888.022 685.068 L888.581 685.068 L889.14 685.068 L889.7 685.068 L890.259 685.068 L890.818 685.068 L891.377 685.068 L891.937 685.068 L892.496 685.068 L893.055 685.068 L893.614 685.068 L894.174 685.068 L894.733 685.068 L895.292 685.068 L895.851 685.068 L896.411 685.068 L896.97 685.068 L897.529 685.068 L898.088 685.068 L898.648 685.068 L899.207 685.068 L899.766 685.068 L900.325 685.068 L900.885 685.068 L901.444 685.068 L902.003 685.068 L902.562 685.068 L903.122 685.068 L903.681 685.068 L904.24 685.068 L904.799 685.068 L905.359 685.068 L905.918 685.068 L906.477 685.068 L907.036 685.068 L907.596 685.068 L908.155 685.068 L908.714 685.068 L909.273 685.068 L909.833 685.068 L910.392 685.068 L910.951 685.068 L911.51 685.068 L912.07 685.068 L912.629 685.068 L913.188 685.068 L913.747 685.068 L914.307 685.068 L914.866 685.068 L915.425 685.068 L915.984 685.068 L916.544 685.068 L917.103 685.068 L917.662 685.068 L918.221 685.068 L918.781 685.068 L919.34 685.068 L919.899 685.068 L920.458 685.068 L921.018 685.068 L921.577 685.068 L922.136 685.068 L922.695 685.068 L923.255 685.068 L923.814 685.068 L924.373 685.068 L924.932 685.068 L925.492 685.068 L926.051 685.068 L926.61 685.068 L927.169 685.068 L927.729 685.068 L928.288 685.068 L928.847 685.068 L929.406 685.068 L929.966 685.068 L930.525 685.068 L931.084 685.068 L931.644 685.068 L932.203 685.068 L932.762 685.068 L933.321 685.068 L933.881 685.068 L934.44 685.068 L934.999 685.068 L935.558 685.068 L936.118 685.068 L936.677 685.068 L937.236 685.068 L937.795 685.068 L938.355 685.068 L938.914 685.068 L939.473 685.068 L940.032 685.068 L940.592 685.068 L941.151 685.068 L941.71 685.068 L942.269 685.068 L942.829 685.068 L943.388 685.068 L943.947 685.068 L944.506 685.068 L945.066 685.068 L945.625 685.068 L946.184 685.068 L946.743 685.068 L947.303 685.068 L947.862 685.068 L948.421 685.068 L948.98 685.068 L949.54 685.068 L950.099 685.068 L950.658 685.068 L951.217 685.068 L951.777 685.068 L952.336 685.068 L952.895 685.068 L953.454 685.068 L954.014 685.068 L954.573 685.068 L955.132 685.068 L955.691 685.068 L956.251 685.068 L956.81 685.068 L957.369 685.068 L957.928 685.068 L958.488 685.068 L959.047 685.068 L959.606 685.068 L960.165 685.068 L960.725 685.068 L961.284 685.068 L961.843 685.068 L962.402 685.068 L962.962 685.068 L963.521 685.068 L964.08 685.068 L964.639 685.068 L965.199 685.068 L965.758 685.068 L966.317 685.068 L966.876 685.068 L967.436 685.068 L967.995 685.068 L968.554 685.068 L969.113 685.068 L969.673 685.068 L970.232 685.068 L970.791 685.068 L971.35 685.068 L971.91 685.068 L972.469 685.068 L973.028 685.068 L973.587 685.068 L974.147 685.068 L974.706 685.068 L975.265 685.068 L975.824 685.068 L976.384 685.068 L976.943 685.068 L977.502 685.068 L978.061 685.068 L978.621 685.068 L979.18 685.068 L979.739 685.068 L980.298 685.068 L980.858 685.068 L981.417 685.068 L981.976 685.068 L982.535 685.068 L983.095 685.068 L983.654 685.068 L984.213 685.068 L984.772 685.068 L985.332 685.068 L985.891 685.068 L986.45 685.068 L987.009 685.068 L987.569 685.068 L988.128 685.068 L988.687 685.068 L989.246 685.068 L989.806 685.068 L990.365 685.068 L990.924 685.068 L991.483 685.068 L992.043 685.068 L992.602 685.068 L993.161 685.068 L993.72 685.068 L994.28 685.068 L994.839 685.068 L995.398 685.068 L995.957 685.068 L996.517 685.068 L997.076 685.068 L997.635 685.068 L998.194 685.068 L998.754 685.068 L999.313 685.068 L999.872 685.068 L1000.43 685.068 L1000.99 685.068 L1001.55 685.068 L1002.11 685.068 L1002.67 685.068 L1003.23 685.068 L1003.79 685.068 L1004.35 685.068 L1004.91 685.068 L1005.46 685.068 L1006.02 685.068 L1006.58 685.068 L1007.14 685.068 L1007.7 685.068 L1008.26 685.068 L1008.82 685.068 L1009.38 685.068 L1009.94 685.068 L1010.5 685.068 L1011.06 685.068 L1011.62 685.068 L1012.18 685.068 L1012.73 685.068 L1013.29 685.068 L1013.85 685.068 L1014.41 685.068 L1014.97 685.068 L1015.53 685.068 L1016.09 685.068 L1016.65 685.068 L1017.21 685.068 L1017.77 685.068 L1018.33 685.068 L1018.89 685.068 L1019.45 685.068 L1020.01 685.068 L1020.56 685.068 L1021.12 685.068 L1021.68 685.068 L1022.24 685.068 L1022.8 685.068 L1023.36 685.068 L1023.92 685.068 L1024.48 685.068 L1025.04 685.068 L1025.6 685.068 L1026.16 685.068 L1026.72 685.068 L1027.28 685.068 L1027.83 685.068 L1028.39 685.068 L1028.95 685.068 L1029.51 685.068 L1030.07 685.068 L1030.63 685.068 L1031.19 685.068 L1031.75 685.068 L1032.31 685.068 L1032.87 685.068 L1033.43 685.068 L1033.99 685.068 L1034.55 685.068 L1035.1 685.068 L1035.66 685.068 L1036.22 685.068 L1036.78 685.068 L1037.34 685.068 L1037.9 685.068 L1038.46 685.068 L1039.02 685.068 L1039.58 685.068 L1040.14 685.068 L1040.7 685.068 L1041.26 685.068 L1041.82 685.068 L1042.38 685.068 L1042.93 685.068 L1043.49 685.068 L1044.05 685.068 L1044.61 685.068 L1045.17 685.068 L1045.73 685.068 L1046.29 685.068 L1046.85 685.068 L1047.41 685.068 L1047.97 685.068 L1048.53 685.068 L1049.09 685.068 L1049.65 685.068 L1050.2 685.068 L1050.76 685.068 L1051.32 685.068 L1051.88 685.068 L1052.44 685.068 L1053 685.068 L1053.56 685.068 L1054.12 685.068 L1054.68 685.068 L1055.24 685.068 L1055.8 685.068 L1056.36 685.068 L1056.92 685.068 L1057.48 685.068 L1058.03 685.068 L1058.59 685.068 L1059.15 685.068 L1059.71 685.068 L1060.27 685.068 L1060.83 685.068 L1061.39 685.068 L1061.95 685.068 L1062.51 685.068 L1063.07 685.068 L1063.63 685.068 L1064.19 685.068 L1064.75 685.068 L1065.3 685.068 L1065.86 685.068 L1066.42 685.068 L1066.98 685.068 L1067.54 685.068 L1068.1 685.068 L1068.66 685.068 L1069.22 685.068 L1069.78 685.068 L1070.34 685.068 L1070.9 685.068 L1071.46 685.068 L1072.02 685.068 L1072.57 685.068 L1073.13 685.068 L1073.69 685.068 L1074.25 685.068 L1074.81 685.068 L1075.37 685.068 L1075.93 685.068 L1076.49 685.068 L1077.05 685.068 L1077.61 685.068 L1078.17 685.068 L1078.73 685.068 L1079.29 685.068 L1079.85 685.068 L1080.4 685.068 L1080.96 685.068 L1081.52 685.068 L1082.08 685.068 L1082.64 685.068 L1083.2 685.068 L1083.76 685.068 L1084.32 685.068 L1084.88 685.068 L1085.44 685.068 L1086 685.068 L1086.56 685.068 L1087.12 685.068 L1087.67 685.068 L1088.23 685.068 L1088.79 685.068 L1089.35 685.068 L1089.91 685.068 L1090.47 685.068 L1091.03 685.068 L1091.59 685.068 L1092.15 685.068 L1092.71 685.068 L1093.27 685.068 L1093.83 685.068 L1094.39 685.068 L1094.94 685.068 L1095.5 685.068 L1096.06 685.068 L1096.62 685.068 L1097.18 685.068 L1097.74 685.068 L1098.3 685.068 L1098.86 685.068 L1099.42 685.068 L1099.98 685.068 L1100.54 685.068 L1101.1 685.068 L1101.66 685.068 L1102.22 685.068 L1102.77 685.068 L1103.33 685.068 L1103.89 685.068 L1104.45 685.068 L1105.01 685.068 L1105.57 685.068 L1106.13 685.068 L1106.69 685.068 L1107.25 685.068 L1107.81 685.068 L1108.37 685.068 L1108.93 685.068 L1109.49 685.068 L1110.04 685.068 L1110.6 685.068 L1111.16 685.068 L1111.72 685.068 L1112.28 685.068 L1112.84 685.068 L1113.4 685.068 L1113.96 685.068 L1114.52 685.068 L1115.08 685.068 L1115.64 685.068 L1116.2 685.068 L1116.76 685.068 L1117.31 685.068 L1117.87 685.068 L1118.43 685.068 L1118.99 685.068 L1119.55 685.068 L1120.11 685.068 L1120.67 685.068 L1121.23 685.068 L1121.79 685.068 L1122.35 685.068 L1122.91 685.068 L1123.47 685.068 L1124.03 685.068 L1124.59 685.068 L1125.14 685.068 L1125.7 685.068 L1126.26 685.068 L1126.82 685.068 L1127.38 685.068 L1127.94 685.068 L1128.5 685.068 L1129.06 685.068 L1129.62 685.068 L1130.18 685.068 L1130.74 685.068 L1131.3 685.068 L1131.86 685.068 L1132.41 685.068 L1132.97 685.068 L1133.53 685.068 L1134.09 685.068 L1134.65 685.068 L1135.21 685.068 L1135.77 685.068 L1136.33 685.068 L1136.89 685.068 L1137.45 685.068 L1138.01 685.068 L1138.57 685.068 L1139.13 685.068 L1139.68 685.068 L1140.24 685.068 L1140.8 685.068 L1141.36 685.068 L1141.92 685.068 L1142.48 685.068 L1143.04 685.068 L1143.6 685.068 L1144.16 685.068 L1144.72 685.068 L1145.28 685.068 L1145.84 685.068 L1146.4 685.068 L1146.96 685.068 L1147.51 685.068 L1148.07 685.068 L1148.63 685.068 L1149.19 685.068 L1149.75 685.068 L1150.31 685.068 L1150.87 685.068 L1151.43 685.068 L1151.99 685.068 L1152.55 685.068 L1153.11 685.068 L1153.67 685.068 L1154.23 685.068 L1154.78 685.068 L1155.34 685.068 L1155.9 685.068 L1156.46 685.068 L1157.02 685.068 L1157.58 685.068 L1158.14 685.068 L1158.7 685.068 L1159.26 685.068 L1159.82 685.068 L1160.38 685.068 L1160.94 685.068 L1161.5 685.068 L1162.05 685.068 L1162.61 685.068 L1163.17 685.068 L1163.73 685.068 L1164.29 685.068 L1164.85 685.068 L1165.41 685.068 L1165.97 685.068 L1166.53 685.068 L1167.09 685.068 L1167.65 685.068 L1168.21 685.068 L1168.77 685.068 L1169.33 685.068 L1169.88 685.068 L1170.44 685.068 L1171 685.068 L1171.56 685.068 L1172.12 685.068 L1172.68 685.068 L1173.24 685.068 L1173.8 685.068 L1174.36 685.068 L1174.92 685.068 L1175.48 685.068 L1176.04 685.068 L1176.6 685.068 L1177.15 685.068 L1177.71 685.068 L1178.27 685.068 L1178.83 685.068 L1179.39 685.068 L1179.95 685.068 L1180.51 685.068 L1181.07 685.068 L1181.63 685.068 L1182.19 685.068 L1182.75 685.068 L1183.31 685.068 L1183.87 685.068 L1184.43 685.068 L1184.98 685.068 L1185.54 685.068 L1186.1 685.068 L1186.66 685.068 L1187.22 685.068 L1187.78 685.068 L1188.34 685.068 L1188.9 685.068 L1189.46 685.068 L1190.02 685.068 L1190.58 685.068 L1191.14 685.068 L1191.7 685.068 L1192.25 685.068 L1192.81 685.068 L1193.37 685.068 L1193.93 685.068 L1194.49 685.068 L1195.05 685.068 L1195.61 685.068 L1196.17 685.068 L1196.73 685.068 L1197.29 685.068 L1197.85 685.068 L1198.41 685.068 L1198.97 685.068 L1199.52 685.068 L1200.08 685.068 L1200.64 685.068 L1201.2 685.068 L1201.76 685.068 L1202.32 685.068 L1202.88 685.068 L1203.44 685.068 L1204 685.068 L1204.56 685.068 L1205.12 685.068 L1205.68 685.068 L1206.24 685.068 L1206.8 685.068 L1207.35 685.068 L1207.91 685.068 L1208.47 685.068 L1209.03 685.068 L1209.59 685.068 L1210.15 685.068 L1210.71 685.068 L1211.27 685.068 L1211.83 685.068 L1212.39 685.068 L1212.95 685.068 L1213.51 685.068 L1214.07 685.068 L1214.62 685.068 L1215.18 685.068 L1215.74 685.068 L1216.3 685.068 L1216.86 685.068 L1217.42 685.068 L1217.98 685.068 L1218.54 685.068 L1219.1 685.068 L1219.66 685.068 L1220.22 685.068 L1220.78 685.068 L1221.34 685.068 L1221.89 685.068 L1222.45 685.068 L1223.01 685.068 L1223.57 685.068 L1224.13 685.068 L1224.69 685.068 L1225.25 685.068 L1225.81 685.068 L1226.37 685.068 L1226.93 685.068 L1227.49 685.068 L1228.05 685.068 L1228.61 685.068 L1229.17 685.068 L1229.72 685.068 L1230.28 685.068 L1230.84 685.068 L1231.4 685.068 L1231.96 685.068 L1232.52 685.068 L1233.08 685.068 L1233.64 685.068 L1234.2 685.068 L1234.76 685.068 L1235.32 685.068 L1235.88 685.068 L1236.44 685.068 L1236.99 685.068 L1237.55 685.068 L1238.11 685.068 L1238.67 685.068 L1239.23 685.068 L1239.79 685.068 L1240.35 685.068 L1240.91 685.068 L1241.47 685.068 L1242.03 685.068 L1242.59 685.068 L1243.15 685.068 L1243.71 685.068 L1244.26 685.068 L1244.82 685.068 L1245.38 685.068 L1245.94 685.068 L1246.5 685.068 L1247.06 685.068 L1247.62 685.068 L1248.18 685.068 L1248.74 685.068 L1249.3 685.068 L1249.86 685.068 L1250.42 685.068 L1250.98 685.068 L1251.54 685.068 L1252.09 685.068 L1252.65 685.068 L1253.21 685.068 L1253.77 685.068 L1254.33 685.068 L1254.89 685.068 L1255.45 685.068 L1256.01 685.068 L1256.57 685.068 L1257.13 685.068 L1257.69 685.068 L1258.25 685.068 L1258.81 685.068 L1259.36 685.068 L1259.92 685.068 L1260.48 685.068 L1261.04 685.068 L1261.6 685.068 L1262.16 685.068 L1262.72 685.068 L1263.28 685.068 L1263.84 685.068 L1264.4 685.068 L1264.96 685.068 L1265.52 685.068 L1266.08 685.068 L1266.63 685.068 L1267.19 685.068 L1267.75 685.068 L1268.31 685.068 L1268.87 685.068 L1269.43 685.068 L1269.99 685.068 L1270.55 685.068 L1271.11 685.068 L1271.67 685.068 L1272.23 685.068 L1272.79 685.068 L1273.35 685.068 L1273.91 685.068 L1274.46 685.068 L1275.02 685.068 L1275.58 685.068 L1276.14 685.068 L1276.7 685.068 L1277.26 685.068 L1277.82 685.068 L1278.38 685.068 L1278.94 685.068 L1279.5 685.068 L1280.06 685.068 L1280.62 685.068 L1281.18 685.068 L1281.73 685.068 L1282.29 685.068 L1282.85 685.068 L1283.41 685.068 L1283.97 685.068 L1284.53 685.068 L1285.09 685.068 L1285.65 685.068 L1286.21 685.068 L1286.77 685.068 L1287.33 685.068 L1287.89 685.068 L1288.45 685.068 L1289 685.068 L1289.56 685.068 L1290.12 685.068 L1290.68 685.068 L1291.24 685.068 L1291.8 685.068 L1292.36 685.068 L1292.92 685.068 L1293.48 685.068 L1294.04 685.068 L1294.6 685.068 L1295.16 685.068 L1295.72 685.068 L1296.28 685.068 L1296.83 685.068 L1297.39 685.068 L1297.95 685.068 L1298.51 685.068 L1299.07 685.068 L1299.63 685.068 L1300.19 685.068 L1300.75 685.068 L1301.31 685.068 L1301.87 685.068 L1302.43 685.068 L1302.99 685.068 L1303.55 685.068 L1304.1 685.068 L1304.66 685.068 L1305.22 685.068 L1305.78 685.068 L1306.34 685.068 L1306.9 685.068 L1307.46 685.068 L1308.02 685.068 L1308.58 685.068 L1309.14 685.068 L1309.7 685.068 L1310.26 685.068 L1310.82 685.068 L1311.38 685.068 L1311.93 685.068 L1312.49 685.068 L1313.05 685.068 L1313.61 685.068 L1314.17 685.068 L1314.73 685.068 L1315.29 685.068 L1315.85 685.068 L1316.41 685.068 L1316.97 685.068 L1317.53 685.068 L1318.09 685.068 L1318.65 685.068 L1319.2 685.068 L1319.76 685.068 L1320.32 685.068 L1320.88 685.068 L1321.44 685.068 L1322 685.068 L1322.56 685.068 L1323.12 685.068 L1323.68 685.068 L1324.24 685.068 L1324.8 685.068 L1325.36 685.068 L1325.92 685.068 L1326.47 685.068 L1327.03 685.068 L1327.59 685.068 L1328.15 685.068 L1328.71 685.068 L1329.27 685.068 L1329.83 685.068 L1330.39 685.068 L1330.95 685.068 L1331.51 685.068 L1332.07 685.068 L1332.63 685.068 L1333.19 685.068 L1333.75 685.068 L1334.3 685.068 L1334.86 685.068 L1335.42 685.068 L1335.98 685.068 L1336.54 685.068 L1337.1 685.068 L1337.66 685.068 L1338.22 685.068 L1338.78 685.068 L1339.34 685.068 L1339.9 685.068 L1340.46 685.068 L1341.02 685.068 L1341.57 685.068 L1342.13 685.068 L1342.69 685.068 L1343.25 685.068 L1343.81 685.068 L1344.37 685.068 L1344.93 685.068 L1345.49 685.068 L1346.05 685.068 L1346.61 685.068 L1347.17 685.068 L1347.73 685.068 L1348.29 685.068 L1348.84 685.068 L1349.4 685.068 L1349.96 685.068 L1350.52 685.068 L1351.08 685.068 L1351.64 685.068 L1352.2 685.068 L1352.76 685.068 L1353.32 685.068 L1353.88 685.068 L1354.44 685.068 L1355 685.068 L1355.56 685.068 L1356.12 685.068 L1356.67 685.068 L1357.23 685.068 L1357.79 685.068 L1358.35 685.068 L1358.91 685.068 L1359.47 685.068 L1360.03 685.068 L1360.59 685.068 L1361.15 685.068 L1361.71 685.068 L1362.27 685.068 L1362.83 685.068 L1363.39 685.068 L1363.94 685.068 L1364.5 685.068 L1365.06 685.068 L1365.62 685.068 L1366.18 685.068 L1366.74 685.068 L1367.3 685.068 L1367.86 685.068 L1368.42 685.068 L1368.98 685.068 L1369.54 685.068 L1370.1 685.068 L1370.66 685.068 L1371.21 685.068 L1371.77 685.068 L1372.33 685.068 L1372.89 685.068 L1373.45 685.068 L1374.01 685.068 L1374.57 685.068 L1375.13 685.068 L1375.69 685.068 L1376.25 685.068 L1376.81 685.068 L1377.37 685.068 L1377.93 685.068 L1378.49 685.068 L1379.04 685.068 L1379.6 685.068 L1380.16 685.068 L1380.72 685.068 L1381.28 685.068 L1381.84 685.068 L1382.4 685.068 L1382.96 685.068 L1383.52 685.068 L1384.08 685.068 L1384.64 685.068 L1385.2 685.068 L1385.76 685.068 L1386.31 685.068 L1386.87 685.068 L1387.43 685.068 L1387.99 685.068 L1388.55 685.068 L1389.11 685.068 L1389.67 685.068 L1390.23 685.068 L1390.79 685.068 L1391.35 685.068 L1391.91 685.068 L1392.47 685.068 L1393.03 685.068 L1393.58 685.068 L1394.14 685.068 L1394.7 685.068 L1395.26 685.068 L1395.82 685.068 L1396.38 685.068 L1396.94 685.068 L1397.5 685.068 L1398.06 685.068 L1398.62 685.068 L1399.18 685.068 L1399.74 685.068 L1400.3 685.068 L1400.86 685.068 L1401.41 685.068 L1401.97 685.068 L1402.53 685.068 L1403.09 685.068 L1403.65 685.068 L1404.21 685.068 L1404.77 685.068 L1405.33 685.068 L1405.89 685.068 L1406.45 685.068 L1407.01 685.068 L1407.57 685.068 L1408.13 685.068 L1408.68 685.068 L1409.24 685.068 L1409.8 685.068 L1410.36 685.068 L1410.92 685.068 L1411.48 685.068 L1412.04 685.068 L1412.6 685.068 L1413.16 685.068 L1413.72 685.068 L1414.28 685.068 L1414.84 685.068 L1415.4 685.068 L1415.95 685.068 L1416.51 685.068 L1417.07 685.068 L1417.63 685.068 L1418.19 685.068 L1418.75 685.068 L1419.31 685.068 L1419.87 685.068 L1420.43 685.068 L1420.99 685.068 L1421.55 685.068 L1422.11 685.068 L1422.67 685.068 L1423.23 685.068 L1423.78 685.068 L1424.34 685.068 L1424.9 685.068 L1425.46 685.068 L1426.02 685.068 L1426.58 685.068 L1427.14 685.068 L1427.7 685.068 L1428.26 685.068 L1428.82 685.068 L1429.38 685.068 L1429.94 685.068 L1430.5 685.068 L1431.05 685.068 L1431.61 685.068 L1432.17 685.068 L1432.73 685.068 L1433.29 685.068 L1433.85 685.068 L1434.41 685.068 L1434.97 685.068 L1435.53 685.068 L1436.09 685.068 L1436.65 685.068 L1437.21 685.068 L1437.77 685.068 L1438.33 685.068 L1438.88 685.068 L1439.44 685.068 L1440 685.068 L1440.56 685.068 L1441.12 685.068 L1441.68 685.068 L1442.24 685.068 L1442.8 685.068 L1443.36 685.068 L1443.92 685.068 L1444.48 685.068 L1445.04 685.068 L1445.6 685.068 L1446.15 685.068 L1446.71 685.068 L1447.27 685.068 L1447.83 685.068 L1448.39 685.068 L1448.95 685.068 L1449.51 685.068 L1450.07 685.068 L1450.63 685.068 L1451.19 685.068 L1451.75 685.068 L1452.31 685.068 L1452.87 685.068 L1453.42 685.068 L1453.98 685.068 L1454.54 685.068 L1455.1 685.068 L1455.66 685.068 L1456.22 685.068 L1456.78 685.068 L1457.34 685.068 L1457.9 685.068 L1458.46 685.068 L1459.02 685.068 L1459.58 685.068 L1460.14 685.068 L1460.7 685.068 L1461.25 685.068 L1461.81 685.068 L1462.37 685.068 L1462.93 685.068 L1463.49 685.068 L1464.05 685.068 L1464.61 685.068 L1465.17 685.068 L1465.73 685.068 L1466.29 685.068 L1466.85 685.068 L1467.41 685.068 L1467.97 685.068 L1468.52 685.068 L1469.08 685.068 L1469.64 685.068 L1470.2 685.068 L1470.76 685.068 L1471.32 685.068 L1471.88 685.068 L1472.44 685.068 L1473 685.068 L1473.56 685.068 L1474.12 685.068 L1474.68 685.068 L1475.24 685.068 L1475.79 685.068 L1476.35 685.068 L1476.91 685.068 L1477.47 685.068 L1478.03 685.068 L1478.59 685.068 L1479.15 685.068 L1479.71 685.068 L1480.27 685.068 L1480.83 685.068 L1481.39 685.068 L1481.95 685.068 L1482.51 685.068 L1483.07 685.068 L1483.62 685.068 L1484.18 685.068 L1484.74 685.068 L1485.3 685.068 L1485.86 685.068 L1486.42 685.068 L1486.98 685.068 L1487.54 685.068 L1488.1 685.068 L1488.66 685.068 L1489.22 685.068 L1489.78 685.068 L1490.34 685.068 L1490.89 685.068 L1491.45 685.068 L1492.01 685.068 L1492.57 685.068 L1493.13 685.068 L1493.69 685.068 L1494.25 685.068 L1494.81 685.068 L1495.37 685.068 L1495.93 685.068 L1496.49 685.068 L1497.05 685.068 L1497.61 685.068 L1498.16 685.068 L1498.72 685.068 L1499.28 685.068 L1499.84 685.068 L1500.4 685.068 L1500.96 685.068 L1501.52 685.068 L1502.08 685.068 L1502.64 685.068 L1503.2 685.068 L1503.76 685.068 L1504.32 685.068 L1504.88 685.068 L1505.44 685.068 L1505.99 685.068 L1506.55 685.068 L1507.11 685.068 L1507.67 685.068 L1508.23 685.068 L1508.79 685.068 L1509.35 685.068 L1509.91 685.068 L1510.47 685.068 L1511.03 685.068 L1511.59 685.068 L1512.15 685.068 L1512.71 685.068 L1513.26 685.068 L1513.82 685.068 L1514.38 685.068 L1514.94 685.068 L1515.5 685.068 L1516.06 685.068 L1516.62 685.068 L1517.18 685.068 L1517.74 685.068 L1518.3 685.068 L1518.86 685.068 L1519.42 685.068 L1519.98 685.068 L1520.53 685.068 L1521.09 685.068 L1521.65 685.068 L1522.21 685.068 L1522.77 685.068 L1523.33 685.068 L1523.89 685.068 L1524.45 685.068 L1525.01 685.068 L1525.57 685.068 L1526.13 685.068 L1526.69 685.068 L1527.25 685.068 L1527.81 685.068 L1528.36 685.068 L1528.92 685.068 L1529.48 685.068 L1530.04 685.068 L1530.6 685.068 L1531.16 685.068 L1531.72 685.068 L1532.28 685.068 L1532.84 685.068 L1533.4 685.068 L1533.96 685.068 L1534.52 685.068 L1535.08 685.068 L1535.63 685.068 L1536.19 685.068 L1536.75 685.068 L1537.31 685.068 L1537.87 685.068 L1538.43 685.068 L1538.99 685.068 L1539.55 685.068 L1540.11 685.068 L1540.67 685.068 L1541.23 685.068 L1541.79 685.068 L1542.35 685.068 L1542.9 685.068 L1543.46 685.068 L1544.02 685.068 L1544.58 685.068 L1545.14 685.068 L1545.7 685.068 L1546.26 685.068 L1546.82 685.068 L1547.38 685.068 L1547.94 685.068 L1548.5 685.068 L1549.06 685.068 L1549.62 685.068 L1550.18 685.068 L1550.73 685.068 L1551.29 685.068 L1551.85 685.068 L1552.41 685.068 L1552.97 685.068 L1553.53 685.068 L1554.09 685.068 L1554.65 685.068 L1555.21 685.068 L1555.77 685.068 L1556.33 685.068 L1556.89 685.068 L1557.45 685.068 L1558 685.068 L1558.56 685.068 L1559.12 685.068 L1559.68 685.068 L1560.24 685.068 L1560.8 685.068 L1561.36 685.068 L1561.92 685.068 L1562.48 685.068 L1563.04 685.068 L1563.6 685.068 L1564.16 685.068 L1564.72 685.068 L1565.28 685.068 L1565.83 685.068 L1566.39 685.068 L1566.95 685.068 L1567.51 685.068 L1568.07 685.068 L1568.63 685.068 L1569.19 685.068 L1569.75 685.068 L1570.31 685.068 L1570.87 685.068 L1571.43 685.068 L1571.99 685.068 L1572.55 685.068 L1573.1 685.068 L1573.66 685.068 L1574.22 685.068 L1574.78 685.068 L1575.34 685.068 L1575.9 685.068 L1576.46 685.068 L1577.02 685.068 L1577.58 685.068 L1578.14 685.068 L1578.7 685.068 L1579.26 685.068 L1579.82 685.068 L1580.37 685.068 L1580.93 685.068 L1581.49 685.068 L1582.05 685.068 L1582.61 685.068 L1583.17 685.068 L1583.73 685.068 L1584.29 685.068 L1584.85 685.068 L1585.41 685.068 L1585.97 685.068 L1586.53 685.068 L1587.09 685.068 L1587.65 685.068 L1588.2 685.068 L1588.76 685.068 L1589.32 685.068 L1589.88 685.068 L1590.44 685.068 L1591 685.068 L1591.56 685.068 L1592.12 685.068 L1592.68 685.068 L1593.24 685.068 L1593.8 685.068 L1594.36 685.068 L1594.92 685.068 L1595.47 685.068 L1596.03 685.068 L1596.59 685.068 L1597.15 685.068 L1597.71 685.068 L1598.27 685.068 L1598.83 685.068 L1599.39 685.068 L1599.95 685.068 L1600.51 685.068 L1601.07 685.068 L1601.63 685.068 L1602.19 685.068 L1602.74 685.068 L1603.3 685.068 L1603.86 685.068 L1604.42 685.068 L1604.98 685.068 L1605.54 685.068 L1606.1 685.068 L1606.66 685.068 L1607.22 685.068 L1607.78 685.068 L1608.34 685.068 L1608.9 685.068 L1609.46 685.068 L1610.02 685.068 L1610.57 685.068 L1611.13 685.068 L1611.69 685.068 L1612.25 685.068 L1612.81 685.068 L1613.37 685.068 L1613.93 685.068 L1614.49 685.068 L1615.05 685.068 L1615.61 685.068 L1616.17 685.068 L1616.73 685.068 L1617.29 685.068 L1617.84 685.068 L1618.4 685.068 L1618.96 685.068 L1619.52 685.068 L1620.08 685.068 L1620.64 685.068 L1621.2 685.068 L1621.76 685.068 L1622.32 685.068 L1622.88 685.068 L1623.44 685.068 L1624 685.068 L1624.56 685.068 L1625.11 685.068 L1625.67 685.068 L1626.23 685.068 L1626.79 685.068 L1627.35 685.068 L1627.91 685.068 L1628.47 685.068 L1629.03 685.068 L1629.59 685.068 L1630.15 685.068 L1630.71 685.068 L1631.27 685.068 L1631.83 685.068 L1632.39 685.068 L1632.94 685.068 L1633.5 685.068 L1634.06 685.068 L1634.62 685.068 L1635.18 685.068 L1635.74 685.068 L1636.3 685.068 L1636.86 685.068 L1637.42 685.068 L1637.98 685.068 L1638.54 685.068 L1639.1 685.068 L1639.66 685.068 L1640.21 685.068 L1640.77 685.068 L1641.33 685.068 L1641.89 685.068 L1642.45 685.068 L1643.01 685.068 L1643.57 685.068 L1644.13 685.068 L1644.69 685.068 L1645.25 685.068 L1645.81 685.068 L1646.37 685.068 L1646.93 685.068 L1647.48 685.068 L1648.04 685.068 L1648.6 685.068 L1649.16 685.068 L1649.72 685.068 L1650.28 685.068 L1650.84 685.068 L1651.4 685.068 L1651.96 685.068 L1652.52 685.068 L1653.08 685.068 L1653.64 685.068 L1654.2 685.068 L1654.76 685.068 L1655.31 685.068 L1655.87 685.068 L1656.43 685.068 L1656.99 685.068 L1657.55 685.068 L1658.11 685.068 L1658.67 685.068 L1659.23 685.068 L1659.79 685.068 L1660.35 685.068 L1660.91 685.068 L1661.47 685.068 L1662.03 685.068 L1662.58 685.068 L1663.14 685.068 L1663.7 685.068 L1664.26 685.068 L1664.82 685.068 L1665.38 685.068 L1665.94 685.068 L1666.5 685.068 L1667.06 685.068 L1667.62 685.068 L1668.18 685.068 L1668.74 685.068 L1669.3 685.068 L1669.85 685.068 L1670.41 685.068 L1670.97 685.068 L1671.53 685.068 L1672.09 685.068 L1672.65 685.068 L1673.21 685.068 L1673.77 685.068 L1674.33 685.068 L1674.89 685.068 L1675.45 685.068 L1676.01 685.068 L1676.57 685.068 L1677.13 685.068 L1677.68 685.068 L1678.24 685.068 L1678.8 685.068 L1679.36 685.068 L1679.92 685.068 L1680.48 685.068 L1681.04 685.068 L1681.6 685.068 L1682.16 685.068 L1682.72 685.068 L1683.28 685.068 L1683.84 685.068 L1684.4 685.068 L1684.95 685.068 L1685.51 685.068 L1686.07 685.068 L1686.63 685.068 L1687.19 685.068 L1687.75 685.068 L1688.31 685.068 L1688.87 685.068 L1689.43 685.068 L1689.99 685.068 L1690.55 685.068 L1691.11 685.068 L1691.67 685.068 L1692.23 685.068 L1692.78 685.068 L1693.34 685.068 L1693.9 685.068 L1694.46 685.068 L1695.02 685.068 L1695.58 685.068 L1696.14 685.068 L1696.7 685.068 L1697.26 685.068 L1697.82 685.068 L1698.38 685.068 L1698.94 685.068 L1699.5 685.068 L1700.05 685.068 L1700.61 685.068 L1701.17 685.068 L1701.73 685.068 L1702.29 685.068 L1702.85 685.068 L1703.41 685.068 L1703.97 685.068 L1704.53 685.068 L1705.09 685.068 L1705.65 685.068 L1706.21 685.068 L1706.77 685.068 L1707.32 685.068 L1707.88 685.068 L1708.44 685.068 L1709 685.068 L1709.56 685.068 L1710.12 685.068 L1710.68 685.068 L1711.24 685.068 L1711.8 685.068 L1712.36 685.068 L1712.92 685.068 L1713.48 685.068 L1714.04 685.068 L1714.6 685.068 L1715.15 685.068 L1715.71 685.068 L1716.27 685.068 L1716.83 685.068 L1717.39 685.068 L1717.95 685.068 L1718.51 685.068 L1719.07 685.068 L1719.63 685.068 L1720.19 685.068 L1720.75 685.068 L1721.31 685.068 L1721.87 685.068 L1722.42 685.068 L1722.98 685.068 L1723.54 685.068 L1724.1 685.068 L1724.66 685.068 L1725.22 685.068 L1725.78 685.068 L1726.34 685.068 L1726.9 685.068 L1727.46 685.068 L1728.02 685.068 L1728.58 685.068 L1729.14 685.068 L1729.69 685.068 L1730.25 685.068 L1730.81 685.068 L1731.37 685.068 L1731.93 685.068 L1732.49 685.068 L1733.05 685.068 L1733.61 685.068 L1734.17 685.068 L1734.73 685.068 L1735.29 685.068 L1735.85 685.068 L1736.41 685.068 L1736.97 685.068 L1737.52 685.068 L1738.08 685.068 L1738.64 685.068 L1739.2 685.068 L1739.76 685.068 L1740.32 685.068 L1740.88 685.068 L1741.44 685.068 L1742 685.068 L1742.56 685.068 L1743.12 685.068 L1743.68 685.068 L1744.24 685.068 L1744.79 685.068 L1745.35 685.068 L1745.91 685.068 L1746.47 685.068 L1747.03 685.068 L1747.59 685.068 L1748.15 685.068 L1748.71 685.068 L1749.27 685.068 L1749.83 685.068 L1750.39 685.068 L1750.95 685.068 L1751.51 685.068 L1752.06 685.068 L1752.62 685.068 L1753.18 685.068 L1753.74 685.068 L1754.3 685.068 L1754.86 685.068 L1755.42 685.068 L1755.98 685.068 L1756.54 685.068 L1757.1 685.068 L1757.66 685.068 L1758.22 685.068 L1758.78 685.068 L1759.34 685.068 L1759.89 685.068 L1760.45 685.068 L1761.01 685.068 L1761.57 685.068 L1762.13 685.068 L1762.69 685.068 L1763.25 685.068 L1763.81 685.068 L1764.37 685.068 L1764.93 685.068 L1765.49 685.068 L1766.05 685.068 L1766.61 685.068 L1767.16 685.068 L1767.72 685.068 L1768.28 685.068 L1768.84 685.068 L1769.4 685.068 L1769.96 685.068 L1770.52 685.068 L1771.08 685.068 L1771.64 685.068 L1772.2 685.068 L1772.76 685.068 L1773.32 685.068 L1773.88 685.068 L1774.43 685.068 L1774.99 685.068 L1775.55 685.068 L1776.11 685.068 L1776.67 685.068 L1777.23 685.068 L1777.79 685.068 L1778.35 685.068 L1778.91 685.068 L1779.47 685.068 L1780.03 685.068 L1780.59 685.068 L1781.15 685.068 L1781.71 685.068 L1782.26 685.068 L1782.82 685.068 L1783.38 685.068 L1783.94 685.068 L1784.5 685.068 L1785.06 685.068 L1785.62 685.068 L1786.18 685.068 L1786.74 685.068 L1787.3 685.068 L1787.86 685.068 L1788.42 685.068 L1788.98 685.068 L1789.53 685.068 L1790.09 685.068 L1790.65 685.068 L1791.21 685.068 L1791.77 685.068 L1792.33 685.068 L1792.89 685.068 L1793.45 685.068 L1794.01 685.068 L1794.57 685.068 L1795.13 685.068 L1795.69 685.068 L1796.25 685.068 L1796.8 685.068 L1797.36 685.068 L1797.92 685.068 L1798.48 685.068 L1799.04 685.068 L1799.6 685.068 L1800.16 685.068 L1800.72 685.068 L1801.28 685.068 L1801.84 685.068 L1802.4 685.068 L1802.96 685.068 L1803.52 685.068 L1804.08 685.068 L1804.63 685.068 L1805.19 685.068 L1805.75 685.068 L1806.31 685.068 L1806.87 685.068 L1807.43 685.068 L1807.99 685.068 L1808.55 685.068 L1809.11 685.068 L1809.67 685.068 L1810.23 685.068 L1810.79 685.068 L1811.35 685.068 L1811.9 685.068 L1812.46 685.068 L1813.02 685.068 L1813.58 685.068 L1814.14 685.068 L1814.7 685.068 L1815.26 685.068 L1815.82 685.068 L1816.38 685.068 L1816.94 685.068 L1817.5 685.068 L1818.06 685.068 L1818.62 685.068 L1819.18 685.068 L1819.73 685.068 L1820.29 685.068 L1820.85 685.068 L1821.41 685.068 L1821.97 685.068 L1822.53 685.068 L1823.09 685.068 L1823.65 685.068 L1824.21 685.068 L1824.77 685.068 L1825.33 685.068 L1825.89 685.068 L1826.45 685.068 L1827 685.068 L1827.56 685.068 L1828.12 685.068 L1828.68 685.068 L1829.24 685.068 L1829.8 685.068 L1830.36 685.068 L1830.92 685.068 L1831.48 685.068 L1832.04 685.068 L1832.6 685.068 L1833.16 685.068 L1833.72 685.068 L1834.27 685.068 L1834.83 685.068 L1835.39 685.068 L1835.95 685.068 L1836.51 685.068 L1837.07 685.068 L1837.63 685.068 L1838.19 685.068 L1838.19 683.526 L1837.63 683.526 L1837.07 683.526 L1836.51 683.526 L1835.95 683.526 L1835.39 683.526 L1834.83 683.526 L1834.27 683.526 L1833.72 683.526 L1833.16 683.526 L1832.6 683.526 L1832.04 683.526 L1831.48 683.526 L1830.92 683.526 L1830.36 683.526 L1829.8 683.526 L1829.24 683.526 L1828.68 683.526 L1828.12 683.526 L1827.56 683.526 L1827 683.526 L1826.45 683.526 L1825.89 683.526 L1825.33 683.526 L1824.77 683.526 L1824.21 683.526 L1823.65 683.526 L1823.09 683.526 L1822.53 683.526 L1821.97 683.526 L1821.41 683.526 L1820.85 683.526 L1820.29 683.526 L1819.73 683.526 L1819.18 683.526 L1818.62 683.526 L1818.06 683.526 L1817.5 683.526 L1816.94 683.526 L1816.38 683.526 L1815.82 683.526 L1815.26 683.526 L1814.7 683.526 L1814.14 683.526 L1813.58 683.526 L1813.02 683.526 L1812.46 683.526 L1811.9 683.526 L1811.35 683.526 L1810.79 683.526 L1810.23 683.526 L1809.67 683.526 L1809.11 683.526 L1808.55 683.526 L1807.99 683.526 L1807.43 683.526 L1806.87 683.526 L1806.31 683.526 L1805.75 683.526 L1805.19 683.526 L1804.63 683.526 L1804.08 683.526 L1803.52 683.526 L1802.96 683.526 L1802.4 683.526 L1801.84 683.526 L1801.28 683.526 L1800.72 683.526 L1800.16 683.526 L1799.6 683.526 L1799.04 683.526 L1798.48 683.526 L1797.92 683.526 L1797.36 683.526 L1796.8 683.526 L1796.25 683.526 L1795.69 683.526 L1795.13 683.526 L1794.57 683.526 L1794.01 683.526 L1793.45 683.526 L1792.89 683.526 L1792.33 683.526 L1791.77 683.526 L1791.21 683.526 L1790.65 683.526 L1790.09 683.526 L1789.53 683.526 L1788.98 683.526 L1788.42 683.526 L1787.86 683.526 L1787.3 683.526 L1786.74 683.526 L1786.18 683.526 L1785.62 683.526 L1785.06 683.526 L1784.5 683.526 L1783.94 683.526 L1783.38 683.526 L1782.82 683.526 L1782.26 683.526 L1781.71 683.526 L1781.15 683.526 L1780.59 683.526 L1780.03 683.526 L1779.47 683.526 L1778.91 683.526 L1778.35 683.526 L1777.79 683.526 L1777.23 683.526 L1776.67 683.526 L1776.11 683.526 L1775.55 683.526 L1774.99 683.526 L1774.43 683.526 L1773.88 683.526 L1773.32 683.526 L1772.76 683.526 L1772.2 683.526 L1771.64 683.526 L1771.08 683.526 L1770.52 683.526 L1769.96 683.526 L1769.4 683.526 L1768.84 683.526 L1768.28 683.526 L1767.72 683.526 L1767.16 683.526 L1766.61 683.526 L1766.05 683.526 L1765.49 683.526 L1764.93 683.526 L1764.37 683.526 L1763.81 683.526 L1763.25 683.526 L1762.69 683.526 L1762.13 683.526 L1761.57 683.526 L1761.01 683.526 L1760.45 683.526 L1759.89 683.526 L1759.34 683.526 L1758.78 683.526 L1758.22 683.526 L1757.66 683.526 L1757.1 683.526 L1756.54 683.526 L1755.98 683.526 L1755.42 683.526 L1754.86 683.526 L1754.3 683.526 L1753.74 683.526 L1753.18 683.526 L1752.62 683.526 L1752.06 683.526 L1751.51 683.526 L1750.95 683.526 L1750.39 683.526 L1749.83 683.526 L1749.27 683.526 L1748.71 683.526 L1748.15 683.526 L1747.59 683.526 L1747.03 683.526 L1746.47 683.526 L1745.91 683.526 L1745.35 683.526 L1744.79 683.526 L1744.24 683.526 L1743.68 683.526 L1743.12 683.526 L1742.56 683.526 L1742 683.526 L1741.44 683.526 L1740.88 683.526 L1740.32 683.526 L1739.76 683.526 L1739.2 683.526 L1738.64 683.526 L1738.08 683.526 L1737.52 683.526 L1736.97 683.526 L1736.41 683.526 L1735.85 683.526 L1735.29 683.526 L1734.73 683.526 L1734.17 683.526 L1733.61 683.526 L1733.05 683.526 L1732.49 683.526 L1731.93 683.526 L1731.37 683.526 L1730.81 683.526 L1730.25 683.526 L1729.69 683.526 L1729.14 683.526 L1728.58 683.526 L1728.02 683.526 L1727.46 683.526 L1726.9 683.526 L1726.34 683.526 L1725.78 683.526 L1725.22 683.526 L1724.66 683.526 L1724.1 683.526 L1723.54 683.526 L1722.98 683.526 L1722.42 683.526 L1721.87 683.526 L1721.31 683.526 L1720.75 683.526 L1720.19 683.526 L1719.63 683.526 L1719.07 683.526 L1718.51 683.526 L1717.95 683.526 L1717.39 683.526 L1716.83 683.526 L1716.27 683.526 L1715.71 683.526 L1715.15 683.526 L1714.6 683.526 L1714.04 683.526 L1713.48 683.526 L1712.92 683.526 L1712.36 683.526 L1711.8 683.526 L1711.24 683.526 L1710.68 683.526 L1710.12 683.526 L1709.56 683.526 L1709 683.526 L1708.44 683.526 L1707.88 683.526 L1707.32 683.526 L1706.77 683.526 L1706.21 683.526 L1705.65 683.526 L1705.09 683.526 L1704.53 683.526 L1703.97 683.526 L1703.41 683.526 L1702.85 683.526 L1702.29 683.526 L1701.73 683.526 L1701.17 683.526 L1700.61 683.526 L1700.05 683.526 L1699.5 683.526 L1698.94 683.526 L1698.38 683.526 L1697.82 683.526 L1697.26 683.526 L1696.7 683.526 L1696.14 683.526 L1695.58 683.526 L1695.02 683.526 L1694.46 683.526 L1693.9 683.526 L1693.34 683.526 L1692.78 683.526 L1692.23 683.526 L1691.67 683.526 L1691.11 683.526 L1690.55 683.526 L1689.99 683.526 L1689.43 683.526 L1688.87 683.526 L1688.31 683.526 L1687.75 683.526 L1687.19 683.526 L1686.63 683.526 L1686.07 683.526 L1685.51 683.526 L1684.95 683.526 L1684.4 683.526 L1683.84 683.526 L1683.28 683.526 L1682.72 683.526 L1682.16 683.526 L1681.6 683.526 L1681.04 683.526 L1680.48 683.526 L1679.92 683.526 L1679.36 683.526 L1678.8 683.526 L1678.24 683.526 L1677.68 683.526 L1677.13 683.526 L1676.57 683.526 L1676.01 683.526 L1675.45 683.526 L1674.89 683.526 L1674.33 683.526 L1673.77 683.526 L1673.21 683.526 L1672.65 683.526 L1672.09 683.526 L1671.53 683.526 L1670.97 683.526 L1670.41 683.526 L1669.85 683.526 L1669.3 683.526 L1668.74 683.526 L1668.18 683.526 L1667.62 683.526 L1667.06 683.526 L1666.5 683.526 L1665.94 683.526 L1665.38 683.526 L1664.82 683.526 L1664.26 683.526 L1663.7 683.526 L1663.14 683.526 L1662.58 683.526 L1662.03 683.526 L1661.47 683.526 L1660.91 683.526 L1660.35 683.526 L1659.79 683.526 L1659.23 683.526 L1658.67 683.526 L1658.11 683.526 L1657.55 683.526 L1656.99 683.526 L1656.43 683.526 L1655.87 683.526 L1655.31 683.526 L1654.76 683.526 L1654.2 683.526 L1653.64 683.526 L1653.08 683.526 L1652.52 683.526 L1651.96 683.526 L1651.4 683.526 L1650.84 683.526 L1650.28 683.526 L1649.72 683.526 L1649.16 683.526 L1648.6 683.526 L1648.04 683.526 L1647.48 683.526 L1646.93 683.526 L1646.37 683.526 L1645.81 683.526 L1645.25 683.526 L1644.69 683.526 L1644.13 683.526 L1643.57 683.526 L1643.01 683.526 L1642.45 683.526 L1641.89 683.526 L1641.33 683.526 L1640.77 683.526 L1640.21 683.526 L1639.66 683.526 L1639.1 683.526 L1638.54 683.526 L1637.98 683.526 L1637.42 683.526 L1636.86 683.526 L1636.3 683.526 L1635.74 683.526 L1635.18 683.526 L1634.62 683.526 L1634.06 683.526 L1633.5 683.526 L1632.94 683.526 L1632.39 683.526 L1631.83 683.526 L1631.27 683.526 L1630.71 683.526 L1630.15 683.526 L1629.59 683.526 L1629.03 683.526 L1628.47 683.526 L1627.91 683.526 L1627.35 683.526 L1626.79 683.526 L1626.23 683.526 L1625.67 683.526 L1625.11 683.526 L1624.56 683.526 L1624 683.526 L1623.44 683.526 L1622.88 683.526 L1622.32 683.526 L1621.76 683.526 L1621.2 683.526 L1620.64 683.526 L1620.08 683.526 L1619.52 683.526 L1618.96 683.526 L1618.4 683.526 L1617.84 683.526 L1617.29 683.526 L1616.73 683.526 L1616.17 683.526 L1615.61 683.526 L1615.05 683.526 L1614.49 683.526 L1613.93 683.526 L1613.37 683.526 L1612.81 683.526 L1612.25 683.526 L1611.69 683.526 L1611.13 683.526 L1610.57 683.526 L1610.02 683.526 L1609.46 683.526 L1608.9 683.526 L1608.34 683.526 L1607.78 683.526 L1607.22 683.526 L1606.66 683.526 L1606.1 683.526 L1605.54 683.526 L1604.98 683.526 L1604.42 683.526 L1603.86 683.526 L1603.3 683.526 L1602.74 683.526 L1602.19 683.526 L1601.63 683.526 L1601.07 683.526 L1600.51 683.526 L1599.95 683.526 L1599.39 683.526 L1598.83 683.526 L1598.27 683.526 L1597.71 683.526 L1597.15 683.526 L1596.59 683.526 L1596.03 683.526 L1595.47 683.526 L1594.92 683.526 L1594.36 683.526 L1593.8 683.526 L1593.24 683.526 L1592.68 683.526 L1592.12 683.526 L1591.56 683.526 L1591 683.526 L1590.44 683.526 L1589.88 683.526 L1589.32 683.526 L1588.76 683.526 L1588.2 683.526 L1587.65 683.526 L1587.09 683.526 L1586.53 683.526 L1585.97 683.526 L1585.41 683.526 L1584.85 683.526 L1584.29 683.526 L1583.73 683.526 L1583.17 683.526 L1582.61 683.526 L1582.05 683.526 L1581.49 683.526 L1580.93 683.526 L1580.37 683.526 L1579.82 683.526 L1579.26 683.526 L1578.7 683.526 L1578.14 683.526 L1577.58 683.526 L1577.02 683.526 L1576.46 683.526 L1575.9 683.526 L1575.34 683.526 L1574.78 683.526 L1574.22 683.526 L1573.66 683.526 L1573.1 683.526 L1572.55 683.526 L1571.99 683.526 L1571.43 683.526 L1570.87 683.526 L1570.31 683.526 L1569.75 683.526 L1569.19 683.526 L1568.63 683.526 L1568.07 683.526 L1567.51 683.526 L1566.95 683.526 L1566.39 683.526 L1565.83 683.526 L1565.28 683.526 L1564.72 683.526 L1564.16 683.526 L1563.6 683.526 L1563.04 683.526 L1562.48 683.526 L1561.92 683.526 L1561.36 683.526 L1560.8 683.526 L1560.24 683.526 L1559.68 683.526 L1559.12 683.526 L1558.56 683.526 L1558 683.526 L1557.45 683.526 L1556.89 683.526 L1556.33 683.526 L1555.77 683.526 L1555.21 683.526 L1554.65 683.526 L1554.09 683.526 L1553.53 683.526 L1552.97 683.526 L1552.41 683.526 L1551.85 683.526 L1551.29 683.526 L1550.73 683.526 L1550.18 683.526 L1549.62 683.526 L1549.06 683.526 L1548.5 683.526 L1547.94 683.526 L1547.38 683.526 L1546.82 683.526 L1546.26 683.526 L1545.7 683.526 L1545.14 683.526 L1544.58 683.526 L1544.02 683.526 L1543.46 683.526 L1542.9 683.526 L1542.35 683.526 L1541.79 683.526 L1541.23 683.526 L1540.67 683.526 L1540.11 683.526 L1539.55 683.526 L1538.99 683.526 L1538.43 683.526 L1537.87 683.526 L1537.31 683.526 L1536.75 683.526 L1536.19 683.526 L1535.63 683.526 L1535.08 683.526 L1534.52 683.526 L1533.96 683.526 L1533.4 683.526 L1532.84 683.526 L1532.28 683.526 L1531.72 683.526 L1531.16 683.526 L1530.6 683.526 L1530.04 683.526 L1529.48 683.526 L1528.92 683.526 L1528.36 683.526 L1527.81 683.526 L1527.25 683.526 L1526.69 683.526 L1526.13 683.526 L1525.57 683.526 L1525.01 683.526 L1524.45 683.526 L1523.89 683.526 L1523.33 683.526 L1522.77 683.526 L1522.21 683.526 L1521.65 683.526 L1521.09 683.526 L1520.53 683.526 L1519.98 683.526 L1519.42 683.526 L1518.86 683.526 L1518.3 683.526 L1517.74 683.526 L1517.18 683.526 L1516.62 683.526 L1516.06 683.526 L1515.5 683.526 L1514.94 683.526 L1514.38 683.526 L1513.82 683.526 L1513.26 683.526 L1512.71 683.526 L1512.15 683.526 L1511.59 683.526 L1511.03 683.526 L1510.47 683.526 L1509.91 683.526 L1509.35 683.526 L1508.79 683.526 L1508.23 683.526 L1507.67 683.526 L1507.11 683.526 L1506.55 683.526 L1505.99 683.526 L1505.44 683.526 L1504.88 683.526 L1504.32 683.526 L1503.76 683.526 L1503.2 683.526 L1502.64 683.526 L1502.08 683.526 L1501.52 683.526 L1500.96 683.526 L1500.4 683.526 L1499.84 683.526 L1499.28 683.526 L1498.72 683.526 L1498.16 683.526 L1497.61 683.526 L1497.05 683.526 L1496.49 683.526 L1495.93 683.526 L1495.37 683.526 L1494.81 683.526 L1494.25 683.526 L1493.69 683.526 L1493.13 683.526 L1492.57 683.526 L1492.01 683.526 L1491.45 683.526 L1490.89 683.526 L1490.34 683.526 L1489.78 683.526 L1489.22 683.526 L1488.66 683.526 L1488.1 683.526 L1487.54 683.526 L1486.98 683.526 L1486.42 683.526 L1485.86 683.526 L1485.3 683.526 L1484.74 683.526 L1484.18 683.526 L1483.62 683.526 L1483.07 683.526 L1482.51 683.526 L1481.95 683.526 L1481.39 683.526 L1480.83 683.526 L1480.27 683.526 L1479.71 683.526 L1479.15 683.526 L1478.59 683.526 L1478.03 683.526 L1477.47 683.526 L1476.91 683.526 L1476.35 683.526 L1475.79 683.526 L1475.24 683.526 L1474.68 683.526 L1474.12 683.526 L1473.56 683.526 L1473 683.526 L1472.44 683.526 L1471.88 683.526 L1471.32 683.526 L1470.76 683.526 L1470.2 683.526 L1469.64 683.526 L1469.08 683.526 L1468.52 683.526 L1467.97 683.526 L1467.41 683.526 L1466.85 683.526 L1466.29 683.526 L1465.73 683.526 L1465.17 683.526 L1464.61 683.526 L1464.05 683.526 L1463.49 683.526 L1462.93 683.526 L1462.37 683.526 L1461.81 683.526 L1461.25 683.526 L1460.7 683.526 L1460.14 683.526 L1459.58 683.526 L1459.02 683.526 L1458.46 683.526 L1457.9 683.526 L1457.34 683.526 L1456.78 683.526 L1456.22 683.526 L1455.66 683.526 L1455.1 683.526 L1454.54 683.526 L1453.98 683.526 L1453.42 683.526 L1452.87 683.526 L1452.31 683.526 L1451.75 683.526 L1451.19 683.526 L1450.63 683.526 L1450.07 683.526 L1449.51 683.526 L1448.95 683.526 L1448.39 683.526 L1447.83 683.526 L1447.27 683.526 L1446.71 683.526 L1446.15 683.526 L1445.6 683.526 L1445.04 683.526 L1444.48 683.526 L1443.92 683.526 L1443.36 683.526 L1442.8 683.526 L1442.24 683.526 L1441.68 683.526 L1441.12 683.526 L1440.56 683.526 L1440 683.526 L1439.44 683.526 L1438.88 683.526 L1438.33 683.526 L1437.77 683.526 L1437.21 683.526 L1436.65 683.526 L1436.09 683.526 L1435.53 683.526 L1434.97 683.526 L1434.41 683.526 L1433.85 683.526 L1433.29 683.526 L1432.73 683.526 L1432.17 683.526 L1431.61 683.526 L1431.05 683.526 L1430.5 683.526 L1429.94 683.526 L1429.38 683.526 L1428.82 683.526 L1428.26 683.526 L1427.7 683.526 L1427.14 683.526 L1426.58 683.526 L1426.02 683.526 L1425.46 683.526 L1424.9 683.526 L1424.34 683.526 L1423.78 683.526 L1423.23 683.526 L1422.67 683.526 L1422.11 683.526 L1421.55 683.526 L1420.99 683.526 L1420.43 683.526 L1419.87 683.526 L1419.31 683.526 L1418.75 683.526 L1418.19 683.526 L1417.63 683.526 L1417.07 683.526 L1416.51 683.526 L1415.95 683.526 L1415.4 683.526 L1414.84 683.526 L1414.28 683.526 L1413.72 683.526 L1413.16 683.526 L1412.6 683.526 L1412.04 683.526 L1411.48 683.526 L1410.92 683.526 L1410.36 683.526 L1409.8 683.526 L1409.24 683.526 L1408.68 683.526 L1408.13 683.526 L1407.57 683.526 L1407.01 683.526 L1406.45 683.526 L1405.89 683.526 L1405.33 683.526 L1404.77 683.526 L1404.21 683.526 L1403.65 683.526 L1403.09 683.526 L1402.53 683.526 L1401.97 683.526 L1401.41 683.526 L1400.86 683.526 L1400.3 683.526 L1399.74 683.526 L1399.18 683.526 L1398.62 683.526 L1398.06 683.526 L1397.5 683.526 L1396.94 683.526 L1396.38 683.526 L1395.82 683.526 L1395.26 683.526 L1394.7 683.526 L1394.14 683.526 L1393.58 683.526 L1393.03 683.526 L1392.47 683.526 L1391.91 683.526 L1391.35 683.526 L1390.79 683.526 L1390.23 683.526 L1389.67 683.526 L1389.11 683.526 L1388.55 683.526 L1387.99 683.526 L1387.43 683.526 L1386.87 683.526 L1386.31 683.526 L1385.76 683.526 L1385.2 683.526 L1384.64 683.526 L1384.08 683.526 L1383.52 683.526 L1382.96 683.526 L1382.4 683.526 L1381.84 683.526 L1381.28 683.526 L1380.72 683.526 L1380.16 683.526 L1379.6 683.526 L1379.04 683.526 L1378.49 683.526 L1377.93 683.526 L1377.37 683.526 L1376.81 683.526 L1376.25 683.526 L1375.69 683.526 L1375.13 683.526 L1374.57 683.526 L1374.01 683.526 L1373.45 683.526 L1372.89 683.526 L1372.33 683.526 L1371.77 683.526 L1371.21 683.526 L1370.66 683.526 L1370.1 683.526 L1369.54 683.526 L1368.98 683.526 L1368.42 683.526 L1367.86 683.526 L1367.3 683.526 L1366.74 683.526 L1366.18 683.526 L1365.62 683.526 L1365.06 683.526 L1364.5 683.526 L1363.94 683.526 L1363.39 683.526 L1362.83 683.526 L1362.27 683.526 L1361.71 683.526 L1361.15 683.526 L1360.59 683.526 L1360.03 683.526 L1359.47 683.526 L1358.91 683.526 L1358.35 683.526 L1357.79 683.526 L1357.23 683.526 L1356.67 683.526 L1356.12 683.526 L1355.56 683.526 L1355 683.526 L1354.44 683.526 L1353.88 683.526 L1353.32 683.526 L1352.76 683.526 L1352.2 683.526 L1351.64 683.526 L1351.08 683.526 L1350.52 683.526 L1349.96 683.526 L1349.4 683.526 L1348.84 683.526 L1348.29 683.526 L1347.73 683.526 L1347.17 683.526 L1346.61 683.526 L1346.05 683.526 L1345.49 683.526 L1344.93 683.526 L1344.37 683.526 L1343.81 683.526 L1343.25 683.526 L1342.69 683.526 L1342.13 683.526 L1341.57 683.526 L1341.02 683.526 L1340.46 683.526 L1339.9 683.526 L1339.34 683.526 L1338.78 683.526 L1338.22 683.526 L1337.66 683.526 L1337.1 683.526 L1336.54 683.526 L1335.98 683.526 L1335.42 683.526 L1334.86 683.526 L1334.3 683.526 L1333.75 683.526 L1333.19 683.526 L1332.63 683.526 L1332.07 683.526 L1331.51 683.526 L1330.95 683.526 L1330.39 683.526 L1329.83 683.526 L1329.27 683.526 L1328.71 683.526 L1328.15 683.526 L1327.59 683.526 L1327.03 683.526 L1326.47 683.526 L1325.92 683.526 L1325.36 683.526 L1324.8 683.526 L1324.24 683.526 L1323.68 683.526 L1323.12 683.526 L1322.56 683.526 L1322 683.526 L1321.44 683.526 L1320.88 683.526 L1320.32 683.526 L1319.76 683.526 L1319.2 683.526 L1318.65 683.526 L1318.09 683.526 L1317.53 683.526 L1316.97 683.526 L1316.41 683.526 L1315.85 683.526 L1315.29 683.526 L1314.73 683.526 L1314.17 683.526 L1313.61 683.526 L1313.05 683.526 L1312.49 683.526 L1311.93 683.526 L1311.38 683.526 L1310.82 683.526 L1310.26 683.526 L1309.7 683.526 L1309.14 683.526 L1308.58 683.526 L1308.02 683.526 L1307.46 683.526 L1306.9 683.526 L1306.34 683.526 L1305.78 683.526 L1305.22 683.526 L1304.66 683.526 L1304.1 683.526 L1303.55 683.526 L1302.99 683.526 L1302.43 683.526 L1301.87 683.526 L1301.31 683.526 L1300.75 683.526 L1300.19 683.526 L1299.63 683.526 L1299.07 683.526 L1298.51 683.526 L1297.95 683.526 L1297.39 683.526 L1296.83 683.526 L1296.28 683.526 L1295.72 683.526 L1295.16 683.526 L1294.6 683.526 L1294.04 683.526 L1293.48 683.526 L1292.92 683.526 L1292.36 683.526 L1291.8 683.526 L1291.24 683.526 L1290.68 683.526 L1290.12 683.526 L1289.56 683.526 L1289 683.526 L1288.45 683.526 L1287.89 683.526 L1287.33 683.526 L1286.77 683.526 L1286.21 683.526 L1285.65 683.526 L1285.09 683.526 L1284.53 683.526 L1283.97 683.526 L1283.41 683.526 L1282.85 683.526 L1282.29 683.526 L1281.73 683.526 L1281.18 683.526 L1280.62 683.526 L1280.06 683.526 L1279.5 683.526 L1278.94 683.526 L1278.38 683.526 L1277.82 683.526 L1277.26 683.526 L1276.7 683.526 L1276.14 683.526 L1275.58 683.526 L1275.02 683.526 L1274.46 683.526 L1273.91 683.526 L1273.35 683.526 L1272.79 683.526 L1272.23 683.526 L1271.67 683.526 L1271.11 683.526 L1270.55 683.526 L1269.99 683.526 L1269.43 683.526 L1268.87 683.526 L1268.31 683.526 L1267.75 683.526 L1267.19 683.526 L1266.63 683.526 L1266.08 683.526 L1265.52 683.526 L1264.96 683.526 L1264.4 683.526 L1263.84 683.526 L1263.28 683.526 L1262.72 683.526 L1262.16 683.526 L1261.6 683.526 L1261.04 683.526 L1260.48 683.526 L1259.92 683.526 L1259.36 683.526 L1258.81 683.526 L1258.25 683.526 L1257.69 683.526 L1257.13 683.526 L1256.57 683.526 L1256.01 683.526 L1255.45 683.526 L1254.89 683.526 L1254.33 683.526 L1253.77 683.526 L1253.21 683.526 L1252.65 683.526 L1252.09 683.526 L1251.54 683.526 L1250.98 683.526 L1250.42 683.526 L1249.86 683.526 L1249.3 683.526 L1248.74 683.526 L1248.18 683.526 L1247.62 683.526 L1247.06 683.526 L1246.5 683.526 L1245.94 683.526 L1245.38 683.526 L1244.82 683.526 L1244.26 683.526 L1243.71 683.526 L1243.15 683.526 L1242.59 683.526 L1242.03 683.526 L1241.47 683.526 L1240.91 683.526 L1240.35 683.526 L1239.79 683.526 L1239.23 683.526 L1238.67 683.526 L1238.11 683.526 L1237.55 683.526 L1236.99 683.526 L1236.44 683.526 L1235.88 683.526 L1235.32 683.526 L1234.76 683.526 L1234.2 683.526 L1233.64 683.526 L1233.08 683.526 L1232.52 683.526 L1231.96 683.526 L1231.4 683.526 L1230.84 683.526 L1230.28 683.526 L1229.72 683.526 L1229.17 683.526 L1228.61 683.526 L1228.05 683.526 L1227.49 683.526 L1226.93 683.526 L1226.37 683.526 L1225.81 683.526 L1225.25 683.526 L1224.69 683.526 L1224.13 683.526 L1223.57 683.526 L1223.01 683.526 L1222.45 683.526 L1221.89 683.526 L1221.34 683.526 L1220.78 683.526 L1220.22 683.526 L1219.66 683.526 L1219.1 683.526 L1218.54 683.526 L1217.98 683.526 L1217.42 683.526 L1216.86 683.526 L1216.3 683.526 L1215.74 683.526 L1215.18 683.526 L1214.62 683.526 L1214.07 683.526 L1213.51 683.526 L1212.95 683.526 L1212.39 683.526 L1211.83 683.526 L1211.27 683.526 L1210.71 683.526 L1210.15 683.526 L1209.59 683.526 L1209.03 683.526 L1208.47 683.526 L1207.91 683.526 L1207.35 683.526 L1206.8 683.526 L1206.24 683.526 L1205.68 683.526 L1205.12 683.526 L1204.56 683.526 L1204 683.526 L1203.44 683.526 L1202.88 683.526 L1202.32 683.526 L1201.76 683.526 L1201.2 683.526 L1200.64 683.526 L1200.08 683.526 L1199.52 683.526 L1198.97 683.526 L1198.41 683.526 L1197.85 683.526 L1197.29 683.526 L1196.73 683.526 L1196.17 683.526 L1195.61 683.526 L1195.05 683.526 L1194.49 683.526 L1193.93 683.526 L1193.37 683.526 L1192.81 683.526 L1192.25 683.526 L1191.7 683.526 L1191.14 683.526 L1190.58 683.526 L1190.02 683.526 L1189.46 683.526 L1188.9 683.526 L1188.34 683.526 L1187.78 683.526 L1187.22 683.526 L1186.66 683.526 L1186.1 683.526 L1185.54 683.526 L1184.98 683.526 L1184.43 683.526 L1183.87 683.526 L1183.31 683.526 L1182.75 683.526 L1182.19 683.526 L1181.63 683.526 L1181.07 683.526 L1180.51 683.526 L1179.95 683.526 L1179.39 683.526 L1178.83 683.526 L1178.27 683.526 L1177.71 683.526 L1177.15 683.526 L1176.6 683.526 L1176.04 683.526 L1175.48 683.526 L1174.92 683.526 L1174.36 683.526 L1173.8 683.526 L1173.24 683.526 L1172.68 683.526 L1172.12 683.526 L1171.56 683.526 L1171 683.526 L1170.44 683.526 L1169.88 683.526 L1169.33 683.526 L1168.77 683.526 L1168.21 683.526 L1167.65 683.526 L1167.09 683.526 L1166.53 683.526 L1165.97 683.526 L1165.41 683.526 L1164.85 683.526 L1164.29 683.526 L1163.73 683.526 L1163.17 683.526 L1162.61 683.526 L1162.05 683.526 L1161.5 683.526 L1160.94 683.526 L1160.38 683.526 L1159.82 683.526 L1159.26 683.526 L1158.7 683.526 L1158.14 683.526 L1157.58 683.526 L1157.02 683.526 L1156.46 683.526 L1155.9 683.526 L1155.34 683.526 L1154.78 683.526 L1154.23 683.526 L1153.67 683.526 L1153.11 683.526 L1152.55 683.526 L1151.99 683.526 L1151.43 683.526 L1150.87 683.526 L1150.31 683.526 L1149.75 683.526 L1149.19 683.526 L1148.63 683.526 L1148.07 683.526 L1147.51 683.526 L1146.96 683.526 L1146.4 683.526 L1145.84 683.526 L1145.28 683.526 L1144.72 683.526 L1144.16 683.526 L1143.6 683.526 L1143.04 683.526 L1142.48 683.526 L1141.92 683.526 L1141.36 683.526 L1140.8 683.526 L1140.24 683.526 L1139.68 683.526 L1139.13 683.526 L1138.57 683.526 L1138.01 683.526 L1137.45 683.526 L1136.89 683.526 L1136.33 683.526 L1135.77 683.526 L1135.21 683.526 L1134.65 683.526 L1134.09 683.526 L1133.53 683.526 L1132.97 683.526 L1132.41 683.526 L1131.86 683.526 L1131.3 683.526 L1130.74 683.526 L1130.18 683.526 L1129.62 683.526 L1129.06 683.526 L1128.5 683.526 L1127.94 683.526 L1127.38 683.526 L1126.82 683.526 L1126.26 683.526 L1125.7 683.526 L1125.14 683.526 L1124.59 683.526 L1124.03 683.526 L1123.47 683.526 L1122.91 683.526 L1122.35 683.526 L1121.79 683.526 L1121.23 683.526 L1120.67 683.526 L1120.11 683.526 L1119.55 683.526 L1118.99 683.526 L1118.43 683.526 L1117.87 683.526 L1117.31 683.526 L1116.76 683.526 L1116.2 683.526 L1115.64 683.526 L1115.08 683.526 L1114.52 683.526 L1113.96 683.526 L1113.4 683.526 L1112.84 683.526 L1112.28 683.526 L1111.72 683.526 L1111.16 683.526 L1110.6 683.526 L1110.04 683.526 L1109.49 683.526 L1108.93 683.526 L1108.37 683.526 L1107.81 683.526 L1107.25 683.526 L1106.69 683.526 L1106.13 683.526 L1105.57 683.526 L1105.01 683.526 L1104.45 683.526 L1103.89 683.526 L1103.33 683.526 L1102.77 683.526 L1102.22 683.526 L1101.66 683.526 L1101.1 683.526 L1100.54 683.526 L1099.98 683.526 L1099.42 683.526 L1098.86 683.526 L1098.3 683.526 L1097.74 683.526 L1097.18 683.526 L1096.62 683.526 L1096.06 683.526 L1095.5 683.526 L1094.94 683.526 L1094.39 683.526 L1093.83 683.526 L1093.27 683.526 L1092.71 683.526 L1092.15 683.526 L1091.59 683.526 L1091.03 683.526 L1090.47 683.526 L1089.91 683.526 L1089.35 683.526 L1088.79 683.526 L1088.23 683.526 L1087.67 683.526 L1087.12 683.526 L1086.56 683.526 L1086 683.526 L1085.44 683.526 L1084.88 683.526 L1084.32 683.526 L1083.76 683.526 L1083.2 683.526 L1082.64 683.526 L1082.08 683.526 L1081.52 683.526 L1080.96 683.526 L1080.4 683.526 L1079.85 683.526 L1079.29 683.526 L1078.73 683.526 L1078.17 683.526 L1077.61 683.526 L1077.05 683.526 L1076.49 683.526 L1075.93 683.526 L1075.37 683.526 L1074.81 683.526 L1074.25 683.526 L1073.69 683.526 L1073.13 683.526 L1072.57 683.526 L1072.02 683.526 L1071.46 683.526 L1070.9 683.526 L1070.34 683.526 L1069.78 683.526 L1069.22 683.526 L1068.66 683.526 L1068.1 683.526 L1067.54 683.526 L1066.98 683.526 L1066.42 683.526 L1065.86 683.526 L1065.3 683.526 L1064.75 683.526 L1064.19 683.526 L1063.63 683.526 L1063.07 683.526 L1062.51 683.526 L1061.95 683.526 L1061.39 683.526 L1060.83 683.526 L1060.27 683.526 L1059.71 683.526 L1059.15 683.526 L1058.59 683.526 L1058.03 683.526 L1057.48 683.526 L1056.92 683.526 L1056.36 683.526 L1055.8 683.526 L1055.24 683.526 L1054.68 683.526 L1054.12 683.526 L1053.56 683.526 L1053 683.526 L1052.44 683.526 L1051.88 683.526 L1051.32 683.526 L1050.76 683.526 L1050.2 683.526 L1049.65 683.526 L1049.09 683.526 L1048.53 683.526 L1047.97 683.526 L1047.41 683.526 L1046.85 683.526 L1046.29 683.526 L1045.73 683.526 L1045.17 683.526 L1044.61 683.526 L1044.05 683.526 L1043.49 683.526 L1042.93 683.526 L1042.38 683.526 L1041.82 683.526 L1041.26 683.526 L1040.7 683.526 L1040.14 683.526 L1039.58 683.526 L1039.02 683.526 L1038.46 683.526 L1037.9 683.526 L1037.34 683.526 L1036.78 683.526 L1036.22 683.526 L1035.66 683.526 L1035.1 683.526 L1034.55 683.526 L1033.99 683.526 L1033.43 683.526 L1032.87 683.526 L1032.31 683.526 L1031.75 683.526 L1031.19 683.526 L1030.63 683.526 L1030.07 683.526 L1029.51 683.526 L1028.95 683.526 L1028.39 683.526 L1027.83 683.526 L1027.28 683.526 L1026.72 683.526 L1026.16 683.526 L1025.6 683.526 L1025.04 683.526 L1024.48 683.526 L1023.92 683.526 L1023.36 683.526 L1022.8 683.526 L1022.24 683.526 L1021.68 683.526 L1021.12 683.526 L1020.56 683.526 L1020.01 683.526 L1019.45 683.526 L1018.89 683.526 L1018.33 683.526 L1017.77 683.526 L1017.21 683.526 L1016.65 683.526 L1016.09 683.526 L1015.53 683.526 L1014.97 683.526 L1014.41 683.526 L1013.85 683.526 L1013.29 683.526 L1012.73 683.526 L1012.18 683.526 L1011.62 683.526 L1011.06 683.526 L1010.5 683.526 L1009.94 683.526 L1009.38 683.526 L1008.82 683.526 L1008.26 683.526 L1007.7 683.526 L1007.14 683.526 L1006.58 683.526 L1006.02 683.526 L1005.46 683.526 L1004.91 683.526 L1004.35 683.526 L1003.79 683.526 L1003.23 683.526 L1002.67 683.526 L1002.11 683.526 L1001.55 683.526 L1000.99 683.526 L1000.43 683.526 L999.872 683.526 L999.313 683.526 L998.754 683.526 L998.194 683.526 L997.635 683.526 L997.076 683.526 L996.517 683.526 L995.957 683.526 L995.398 683.526 L994.839 683.526 L994.28 683.526 L993.72 683.526 L993.161 683.526 L992.602 683.526 L992.043 683.526 L991.483 683.526 L990.924 683.526 L990.365 683.526 L989.806 683.526 L989.246 683.526 L988.687 683.526 L988.128 683.526 L987.569 683.526 L987.009 683.526 L986.45 683.526 L985.891 683.526 L985.332 683.526 L984.772 683.526 L984.213 683.526 L983.654 683.526 L983.095 683.526 L982.535 683.526 L981.976 683.526 L981.417 683.526 L980.858 683.526 L980.298 683.526 L979.739 683.526 L979.18 683.526 L978.621 683.526 L978.061 683.526 L977.502 683.526 L976.943 683.526 L976.384 683.526 L975.824 683.526 L975.265 683.526 L974.706 683.526 L974.147 683.526 L973.587 683.526 L973.028 683.526 L972.469 683.526 L971.91 683.526 L971.35 683.526 L970.791 683.526 L970.232 683.526 L969.673 683.526 L969.113 683.526 L968.554 683.526 L967.995 683.526 L967.436 683.526 L966.876 683.526 L966.317 683.526 L965.758 683.526 L965.199 683.526 L964.639 683.526 L964.08 683.526 L963.521 683.526 L962.962 683.526 L962.402 683.526 L961.843 683.526 L961.284 683.526 L960.725 683.526 L960.165 683.526 L959.606 683.526 L959.047 683.526 L958.488 683.526 L957.928 683.526 L957.369 683.526 L956.81 683.526 L956.251 683.526 L955.691 683.526 L955.132 683.526 L954.573 683.526 L954.014 683.526 L953.454 683.526 L952.895 683.526 L952.336 683.526 L951.777 683.526 L951.217 683.526 L950.658 683.526 L950.099 683.526 L949.54 683.526 L948.98 683.526 L948.421 683.526 L947.862 683.526 L947.303 683.526 L946.743 683.526 L946.184 683.526 L945.625 683.526 L945.066 683.526 L944.506 683.526 L943.947 683.526 L943.388 683.526 L942.829 683.526 L942.269 683.526 L941.71 683.526 L941.151 683.526 L940.592 683.526 L940.032 683.526 L939.473 683.526 L938.914 683.526 L938.355 683.526 L937.795 683.526 L937.236 683.526 L936.677 683.526 L936.118 683.526 L935.558 683.526 L934.999 683.526 L934.44 683.526 L933.881 683.526 L933.321 683.526 L932.762 683.526 L932.203 683.526 L931.644 683.526 L931.084 683.526 L930.525 683.526 L929.966 683.526 L929.406 683.526 L928.847 683.526 L928.288 683.526 L927.729 683.526 L927.169 683.526 L926.61 683.526 L926.051 683.526 L925.492 683.526 L924.932 683.526 L924.373 683.526 L923.814 683.526 L923.255 683.526 L922.695 683.526 L922.136 683.526 L921.577 683.526 L921.018 683.526 L920.458 683.526 L919.899 683.526 L919.34 683.526 L918.781 683.526 L918.221 683.526 L917.662 683.526 L917.103 683.526 L916.544 683.526 L915.984 683.526 L915.425 683.526 L914.866 683.526 L914.307 683.526 L913.747 683.526 L913.188 683.526 L912.629 683.526 L912.07 683.526 L911.51 683.526 L910.951 683.526 L910.392 683.526 L909.833 683.526 L909.273 683.526 L908.714 683.526 L908.155 683.526 L907.596 683.526 L907.036 683.526 L906.477 683.526 L905.918 683.526 L905.359 683.526 L904.799 683.526 L904.24 683.526 L903.681 683.526 L903.122 683.526 L902.562 683.526 L902.003 683.526 L901.444 683.526 L900.885 683.526 L900.325 683.526 L899.766 683.526 L899.207 683.526 L898.648 683.526 L898.088 683.526 L897.529 683.526 L896.97 683.526 L896.411 683.526 L895.851 683.526 L895.292 683.526 L894.733 683.526 L894.174 683.526 L893.614 683.526 L893.055 683.526 L892.496 683.526 L891.937 683.526 L891.377 683.526 L890.818 683.526 L890.259 683.526 L889.7 683.526 L889.14 683.526 L888.581 683.526 L888.022 683.526 L887.463 683.526 L886.903 683.526 L886.344 683.526 L885.785 683.526 L885.226 683.526 L884.666 683.526 L884.107 683.526 L883.548 683.526 L882.989 683.526 L882.429 683.526 L881.87 683.526 L881.311 683.526 L880.752 683.526 L880.192 683.526 L879.633 683.526 L879.074 683.526 L878.515 683.526 L877.955 683.526 L877.396 683.526 L876.837 683.526 L876.278 683.526 L875.718 683.526 L875.159 683.526 L874.6 683.526 L874.041 683.526 L873.481 683.526 L872.922 683.526 L872.363 683.526 L871.804 683.526 L871.244 683.526 L870.685 683.526 L870.126 683.526 L869.567 683.526 L869.007 683.526 L868.448 683.526 L867.889 683.526 L867.33 683.526 L866.77 683.526 L866.211 683.526 L865.652 683.526 L865.093 683.526 L864.533 683.526 L863.974 683.526 L863.415 683.526 L862.856 683.526 L862.296 683.526 L861.737 683.526 L861.178 683.526 L860.619 683.526 L860.059 683.526 L859.5 683.526 L858.941 683.526 L858.382 683.526 L857.822 683.526 L857.263 683.526 L856.704 683.526 L856.145 683.526 L855.585 683.526 L855.026 683.526 L854.467 683.526 L853.908 683.526 L853.348 683.526 L852.789 683.526 L852.23 683.526 L851.671 683.526 L851.111 683.526 L850.552 683.526 L849.993 683.526 L849.434 683.526 L848.874 683.526 L848.315 683.526 L847.756 683.526 L847.197 683.526 L846.637 683.526 L846.078 683.526 L845.519 683.526 L844.96 683.526 L844.4 683.526 L843.841 683.526 L843.282 683.526 L842.723 683.526 L842.163 683.526 L841.604 683.526 L841.045 683.526 L840.486 683.526 L839.926 683.526 L839.367 683.526 L838.808 683.526 L838.249 683.526 L837.689 683.526 L837.13 683.526 L836.571 683.526 L836.012 683.526 L835.452 683.526 L834.893 683.526 L834.334 683.526 L833.775 683.526 L833.215 683.526 L832.656 683.526 L832.097 683.526 L831.538 683.526 L830.978 683.526 L830.419 683.526 L829.86 683.526 L829.301 683.526 L828.741 683.526 L828.182 683.526 L827.623 683.526 L827.064 683.526 L826.504 683.526 L825.945 683.526 L825.386 683.526 L824.827 683.526 L824.267 683.526 L823.708 683.526 L823.149 683.526 L822.59 683.526 L822.03 683.526 L821.471 683.526 L820.912 683.526 L820.353 683.526 L819.793 683.526 L819.234 683.526 L818.675 683.526 L818.116 683.526 L817.556 683.526 L816.997 683.526 L816.438 683.526 L815.879 683.526 L815.319 683.526 L814.76 683.526 L814.201 683.526 L813.642 683.526 L813.082 683.526 L812.523 683.526 L811.964 683.526 L811.405 683.526 L810.845 683.526 L810.286 683.526 L809.727 683.526 L809.168 683.526 L808.608 683.526 L808.049 683.526 L807.49 683.526 L806.931 683.526 L806.371 683.526 L805.812 683.526 L805.253 683.526 L804.693 683.526 L804.134 683.526 L803.575 683.526 L803.016 683.526 L802.456 683.526 L801.897 683.526 L801.338 683.526 L800.779 683.526 L800.219 683.526 L799.66 683.526 L799.101 683.526 L798.542 683.526 L797.982 683.526 L797.423 683.526 L796.864 683.526 L796.305 683.526 L795.745 683.526 L795.186 683.526 L794.627 683.526 L794.068 683.526 L793.508 683.526 L792.949 683.526 L792.39 683.526 L791.831 683.526 L791.271 683.526 L790.712 683.526 L790.153 683.526 L789.594 683.526 L789.034 683.526 L788.475 683.526 L787.916 683.526 L787.357 683.526 L786.797 683.526 L786.238 683.526 L785.679 683.526 L785.12 683.526 L784.56 683.526 L784.001 683.526 L783.442 683.526 L782.883 683.526 L782.323 683.526 L781.764 683.526 L781.205 683.526 L780.646 683.526 L780.086 683.526 L779.527 683.526 L778.968 683.526 L778.409 683.526 L777.849 683.526 L777.29 683.526 L776.731 683.526 L776.172 683.526 L775.612 683.526 L775.053 683.526 L774.494 683.526 L773.935 683.526 L773.375 683.526 L772.816 683.526 L772.257 683.526 L771.698 683.526 L771.138 683.526 L770.579 683.526 L770.02 683.526 L769.461 683.526 L768.901 683.526 L768.342 683.526 L767.783 683.526 L767.224 683.526 L766.664 683.526 L766.105 683.526 L765.546 683.526 L764.987 683.526 L764.427 683.526 L763.868 683.526 L763.309 683.526 L762.75 683.526 L762.19 683.526 L761.631 683.526 L761.072 683.526 L760.513 683.526 L759.953 683.526 L759.394 683.526 L758.835 683.526 L758.276 683.526 L757.716 683.526 L757.157 683.526 L756.598 683.526 L756.039 683.526 L755.479 683.526 L754.92 683.526 L754.361 683.526 L753.802 683.526 L753.242 683.526 L752.683 683.526 L752.124 683.526 L751.565 683.526 L751.005 683.526 L750.446 683.526 L749.887 683.526 L749.328 683.526 L748.768 683.526 L748.209 683.526 L747.65 683.526 L747.091 683.526 L746.531 683.526 L745.972 683.526 L745.413 683.526 L744.854 683.526 L744.294 683.526 L743.735 683.526 L743.176 683.526 L742.617 683.526 L742.057 683.526 L741.498 683.526 L740.939 683.526 L740.38 683.526 L739.82 683.526 L739.261 683.526 L738.702 683.526 L738.143 683.526 L737.583 683.526 L737.024 683.526 L736.465 683.526 L735.906 683.526 L735.346 683.526 L734.787 683.526 L734.228 683.526 L733.669 683.526 L733.109 683.526 L732.55 683.526 L731.991 683.526 L731.432 683.526 L730.872 683.526 L730.313 683.526 L729.754 683.526 L729.195 683.526 L728.635 683.526 L728.076 683.526 L727.517 683.526 L726.958 683.526 L726.398 683.526 L725.839 683.526 L725.28 683.526 L724.721 683.526 L724.161 683.526 L723.602 683.526 L723.043 683.526 L722.484 683.526 L721.924 683.526 L721.365 683.526 L720.806 683.526 L720.247 683.526  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.296 720.806,684.296 721.365,684.296 721.924,684.296 722.484,684.296 723.043,684.296 723.602,684.296 724.161,684.296 724.721,684.296 725.28,684.296 725.839,684.296 726.398,684.296 726.958,684.296 727.517,684.296 728.076,684.296 728.635,684.296 729.195,684.296 729.754,684.296 730.313,684.296 730.872,684.296 731.432,684.296 731.991,684.296 732.55,684.296 733.109,684.296 733.669,684.296 734.228,684.296 734.787,684.296 735.346,684.296 735.906,684.296 736.465,684.296 737.024,684.296 737.583,684.296 738.143,684.296 738.702,684.296 739.261,684.296 739.82,684.296 740.38,684.296 740.939,684.296 741.498,684.296 742.057,684.296 742.617,684.296 743.176,684.296 743.735,684.296 744.294,684.296 744.854,684.296 745.413,684.296 745.972,684.296 746.531,684.296 747.091,684.296 747.65,684.296 748.209,684.296 748.768,684.296 749.328,684.296 749.887,684.296 750.446,684.296 751.005,684.296 751.565,684.296 752.124,684.296 752.683,684.296 753.242,684.296 753.802,684.296 754.361,684.296 754.92,684.296 755.479,684.296 756.039,684.296 756.598,684.296 757.157,684.296 757.716,684.296 758.276,684.296 758.835,684.296 759.394,684.296 759.953,684.296 760.513,684.296 761.072,684.296 761.631,684.296 762.19,684.296 762.75,684.296 763.309,684.296 763.868,684.296 764.427,684.296 764.987,684.296 765.546,684.296 766.105,684.296 766.664,684.296 767.224,684.296 767.783,684.296 768.342,684.296 768.901,684.296 769.461,684.296 770.02,684.296 770.579,684.296 771.138,684.296 771.698,684.296 772.257,684.296 772.816,684.296 773.375,684.296 773.935,684.296 774.494,684.296 775.053,684.296 775.612,684.296 776.172,684.296 776.731,684.296 777.29,684.296 777.849,684.296 778.409,684.296 778.968,684.296 779.527,684.296 780.086,684.296 780.646,684.296 781.205,684.296 781.764,684.296 782.323,684.296 782.883,684.296 783.442,684.296 784.001,684.296 784.56,684.296 785.12,684.296 785.679,684.296 786.238,684.296 786.797,684.296 787.357,684.296 787.916,684.296 788.475,684.296 789.034,684.296 789.594,684.296 790.153,684.296 790.712,684.296 791.271,684.296 791.831,684.296 792.39,684.296 792.949,684.296 793.508,684.296 794.068,684.296 794.627,684.296 795.186,684.296 795.745,684.296 796.305,684.296 796.864,684.296 797.423,684.296 797.982,684.296 798.542,684.296 799.101,684.296 799.66,684.296 800.219,684.296 800.779,684.296 801.338,684.296 801.897,684.296 802.456,684.296 803.016,684.296 803.575,684.296 804.134,684.296 804.693,684.296 805.253,684.296 805.812,684.296 806.371,684.296 806.931,684.296 807.49,684.296 808.049,684.296 808.608,684.296 809.168,684.296 809.727,684.296 810.286,684.296 810.845,684.296 811.405,684.296 811.964,684.296 812.523,684.296 813.082,684.296 813.642,684.296 814.201,684.296 814.76,684.296 815.319,684.296 815.879,684.296 816.438,684.296 816.997,684.296 817.556,684.296 818.116,684.296 818.675,684.296 819.234,684.296 819.793,684.296 820.353,684.296 820.912,684.296 821.471,684.296 822.03,684.296 822.59,684.296 823.149,684.296 823.708,684.296 824.267,684.296 824.827,684.296 825.386,684.296 825.945,684.296 826.504,684.296 827.064,684.296 827.623,684.296 828.182,684.296 828.741,684.296 829.301,684.296 829.86,684.296 830.419,684.296 830.978,684.296 831.538,684.296 832.097,684.296 832.656,684.296 833.215,684.296 833.775,684.296 834.334,684.296 834.893,684.296 835.452,684.296 836.012,684.296 836.571,684.296 837.13,684.296 837.689,684.296 838.249,684.296 838.808,684.296 839.367,684.296 839.926,684.296 840.486,684.296 841.045,684.296 841.604,684.296 842.163,684.296 842.723,684.296 843.282,684.296 843.841,684.296 844.4,684.296 844.96,684.296 845.519,684.296 846.078,684.296 846.637,684.296 847.197,684.296 847.756,684.296 848.315,684.296 848.874,684.296 849.434,684.296 849.993,684.296 850.552,684.296 851.111,684.296 851.671,684.296 852.23,684.296 852.789,684.296 853.348,684.296 853.908,684.296 854.467,684.296 855.026,684.296 855.585,684.296 856.145,684.296 856.704,684.296 857.263,684.296 857.822,684.296 858.382,684.296 858.941,684.296 859.5,684.296 860.059,684.296 860.619,684.296 861.178,684.296 861.737,684.296 862.296,684.296 862.856,684.296 863.415,684.296 863.974,684.296 864.533,684.296 865.093,684.296 865.652,684.296 866.211,684.296 866.77,684.296 867.33,684.296 867.889,684.296 868.448,684.296 869.007,684.296 869.567,684.296 870.126,684.296 870.685,684.296 871.244,684.296 871.804,684.296 872.363,684.296 872.922,684.296 873.481,684.296 874.041,684.296 874.6,684.296 875.159,684.296 875.718,684.296 876.278,684.296 876.837,684.296 877.396,684.296 877.955,684.296 878.515,684.296 879.074,684.296 879.633,684.296 880.192,684.296 880.752,684.296 881.311,684.296 881.87,684.296 882.429,684.296 882.989,684.296 883.548,684.296 884.107,684.296 884.666,684.296 885.226,684.296 885.785,684.296 886.344,684.296 886.903,684.296 887.463,684.296 888.022,684.296 888.581,684.296 889.14,684.296 889.7,684.296 890.259,684.296 890.818,684.296 891.377,684.296 891.937,684.296 892.496,684.296 893.055,684.296 893.614,684.296 894.174,684.296 894.733,684.296 895.292,684.296 895.851,684.296 896.411,684.296 896.97,684.296 897.529,684.296 898.088,684.296 898.648,684.296 899.207,684.296 899.766,684.296 900.325,684.296 900.885,684.296 901.444,684.296 902.003,684.296 902.562,684.296 903.122,684.296 903.681,684.296 904.24,684.296 904.799,684.296 905.359,684.296 905.918,684.296 906.477,684.296 907.036,684.296 907.596,684.296 908.155,684.296 908.714,684.296 909.273,684.296 909.833,684.296 910.392,684.296 910.951,684.296 911.51,684.296 912.07,684.296 912.629,684.296 913.188,684.296 913.747,684.296 914.307,684.296 914.866,684.296 915.425,684.296 915.984,684.296 916.544,684.296 917.103,684.296 917.662,684.296 918.221,684.296 918.781,684.296 919.34,684.296 919.899,684.296 920.458,684.296 921.018,684.296 921.577,684.296 922.136,684.296 922.695,684.296 923.255,684.296 923.814,684.296 924.373,684.296 924.932,684.296 925.492,684.296 926.051,684.296 926.61,684.296 927.169,684.296 927.729,684.296 928.288,684.296 928.847,684.296 929.406,684.296 929.966,684.296 930.525,684.296 931.084,684.296 931.644,684.296 932.203,684.296 932.762,684.296 933.321,684.296 933.881,684.296 934.44,684.296 934.999,684.296 935.558,684.296 936.118,684.296 936.677,684.296 937.236,684.296 937.795,684.296 938.355,684.296 938.914,684.296 939.473,684.296 940.032,684.296 940.592,684.296 941.151,684.296 941.71,684.296 942.269,684.296 942.829,684.296 943.388,684.296 943.947,684.296 944.506,684.296 945.066,684.296 945.625,684.296 946.184,684.296 946.743,684.296 947.303,684.296 947.862,684.296 948.421,684.296 948.98,684.296 949.54,684.296 950.099,684.296 950.658,684.296 951.217,684.296 951.777,684.296 952.336,684.296 952.895,684.296 953.454,684.296 954.014,684.296 954.573,684.296 955.132,684.296 955.691,684.296 956.251,684.296 956.81,684.296 957.369,684.296 957.928,684.296 958.488,684.296 959.047,684.296 959.606,684.296 960.165,684.296 960.725,684.296 961.284,684.296 961.843,684.296 962.402,684.296 962.962,684.296 963.521,684.296 964.08,684.296 964.639,684.296 965.199,684.296 965.758,684.296 966.317,684.296 966.876,684.296 967.436,684.296 967.995,684.296 968.554,684.296 969.113,684.296 969.673,684.296 970.232,684.296 970.791,684.296 971.35,684.296 971.91,684.296 972.469,684.296 973.028,684.296 973.587,684.296 974.147,684.296 974.706,684.296 975.265,684.296 975.824,684.296 976.384,684.296 976.943,684.296 977.502,684.296 978.061,684.296 978.621,684.296 979.18,684.296 979.739,684.296 980.298,684.296 980.858,684.296 981.417,684.296 981.976,684.296 982.535,684.296 983.095,684.296 983.654,684.296 984.213,684.296 984.772,684.296 985.332,684.296 985.891,684.296 986.45,684.296 987.009,684.296 987.569,684.296 988.128,684.296 988.687,684.296 989.246,684.296 989.806,684.296 990.365,684.296 990.924,684.296 991.483,684.296 992.043,684.296 992.602,684.296 993.161,684.296 993.72,684.296 994.28,684.296 994.839,684.296 995.398,684.296 995.957,684.296 996.517,684.296 997.076,684.296 997.635,684.296 998.194,684.296 998.754,684.296 999.313,684.296 999.872,684.296 1000.43,684.296 1000.99,684.296 1001.55,684.296 1002.11,684.296 1002.67,684.296 1003.23,684.296 1003.79,684.296 1004.35,684.296 1004.91,684.296 1005.46,684.296 1006.02,684.296 1006.58,684.296 1007.14,684.296 1007.7,684.296 1008.26,684.296 1008.82,684.296 1009.38,684.296 1009.94,684.296 1010.5,684.296 1011.06,684.296 1011.62,684.296 1012.18,684.296 1012.73,684.296 1013.29,684.296 1013.85,684.296 1014.41,684.296 1014.97,684.296 1015.53,684.296 1016.09,684.296 1016.65,684.296 1017.21,684.296 1017.77,684.296 1018.33,684.296 1018.89,684.296 1019.45,684.296 1020.01,684.296 1020.56,684.296 1021.12,684.296 1021.68,684.296 1022.24,684.296 1022.8,684.296 1023.36,684.296 1023.92,684.296 1024.48,684.296 1025.04,684.296 1025.6,684.296 1026.16,684.296 1026.72,684.296 1027.28,684.296 1027.83,684.296 1028.39,684.296 1028.95,684.296 1029.51,684.296 1030.07,684.296 1030.63,684.296 1031.19,684.296 1031.75,684.296 1032.31,684.296 1032.87,684.296 1033.43,684.296 1033.99,684.296 1034.55,684.296 1035.1,684.296 1035.66,684.296 1036.22,684.296 1036.78,684.296 1037.34,684.296 1037.9,684.296 1038.46,684.296 1039.02,684.296 1039.58,684.296 1040.14,684.296 1040.7,684.296 1041.26,684.296 1041.82,684.296 1042.38,684.296 1042.93,684.296 1043.49,684.296 1044.05,684.296 1044.61,684.296 1045.17,684.296 1045.73,684.296 1046.29,684.296 1046.85,684.296 1047.41,684.296 1047.97,684.296 1048.53,684.296 1049.09,684.296 1049.65,684.296 1050.2,684.296 1050.76,684.296 1051.32,684.296 1051.88,684.296 1052.44,684.296 1053,684.296 1053.56,684.296 1054.12,684.296 1054.68,684.296 1055.24,684.296 1055.8,684.296 1056.36,684.296 1056.92,684.296 1057.48,684.296 1058.03,684.296 1058.59,684.296 1059.15,684.296 1059.71,684.296 1060.27,684.296 1060.83,684.296 1061.39,684.296 1061.95,684.296 1062.51,684.296 1063.07,684.296 1063.63,684.296 1064.19,684.296 1064.75,684.296 1065.3,684.296 1065.86,684.296 1066.42,684.296 1066.98,684.296 1067.54,684.296 1068.1,684.296 1068.66,684.296 1069.22,684.296 1069.78,684.296 1070.34,684.296 1070.9,684.296 1071.46,684.296 1072.02,684.296 1072.57,684.296 1073.13,684.296 1073.69,684.296 1074.25,684.296 1074.81,684.296 1075.37,684.296 1075.93,684.296 1076.49,684.296 1077.05,684.296 1077.61,684.296 1078.17,684.296 1078.73,684.296 1079.29,684.296 1079.85,684.296 1080.4,684.296 1080.96,684.296 1081.52,684.296 1082.08,684.296 1082.64,684.296 1083.2,684.296 1083.76,684.296 1084.32,684.296 1084.88,684.296 1085.44,684.296 1086,684.296 1086.56,684.296 1087.12,684.296 1087.67,684.296 1088.23,684.296 1088.79,684.296 1089.35,684.296 1089.91,684.296 1090.47,684.296 1091.03,684.296 1091.59,684.296 1092.15,684.296 1092.71,684.296 1093.27,684.296 1093.83,684.296 1094.39,684.296 1094.94,684.296 1095.5,684.296 1096.06,684.296 1096.62,684.296 1097.18,684.296 1097.74,684.296 1098.3,684.296 1098.86,684.296 1099.42,684.296 1099.98,684.296 1100.54,684.296 1101.1,684.296 1101.66,684.296 1102.22,684.296 1102.77,684.296 1103.33,684.296 1103.89,684.296 1104.45,684.296 1105.01,684.296 1105.57,684.296 1106.13,684.296 1106.69,684.296 1107.25,684.296 1107.81,684.296 1108.37,684.296 1108.93,684.296 1109.49,684.296 1110.04,684.296 1110.6,684.296 1111.16,684.296 1111.72,684.296 1112.28,684.296 1112.84,684.296 1113.4,684.296 1113.96,684.296 1114.52,684.296 1115.08,684.296 1115.64,684.296 1116.2,684.296 1116.76,684.296 1117.31,684.296 1117.87,684.296 1118.43,684.296 1118.99,684.296 1119.55,684.296 1120.11,684.296 1120.67,684.296 1121.23,684.296 1121.79,684.296 1122.35,684.296 1122.91,684.296 1123.47,684.296 1124.03,684.296 1124.59,684.296 1125.14,684.296 1125.7,684.296 1126.26,684.296 1126.82,684.296 1127.38,684.296 1127.94,684.296 1128.5,684.296 1129.06,684.296 1129.62,684.296 1130.18,684.296 1130.74,684.296 1131.3,684.296 1131.86,684.296 1132.41,684.296 1132.97,684.296 1133.53,684.296 1134.09,684.296 1134.65,684.296 1135.21,684.296 1135.77,684.296 1136.33,684.296 1136.89,684.296 1137.45,684.296 1138.01,684.296 1138.57,684.296 1139.13,684.296 1139.68,684.296 1140.24,684.296 1140.8,684.296 1141.36,684.296 1141.92,684.296 1142.48,684.296 1143.04,684.296 1143.6,684.296 1144.16,684.296 1144.72,684.296 1145.28,684.296 1145.84,684.296 1146.4,684.296 1146.96,684.296 1147.51,684.296 1148.07,684.296 1148.63,684.296 1149.19,684.296 1149.75,684.296 1150.31,684.296 1150.87,684.296 1151.43,684.296 1151.99,684.296 1152.55,684.296 1153.11,684.296 1153.67,684.296 1154.23,684.296 1154.78,684.296 1155.34,684.296 1155.9,684.296 1156.46,684.296 1157.02,684.296 1157.58,684.296 1158.14,684.296 1158.7,684.296 1159.26,684.296 1159.82,684.296 1160.38,684.296 1160.94,684.296 1161.5,684.296 1162.05,684.296 1162.61,684.296 1163.17,684.296 1163.73,684.296 1164.29,684.296 1164.85,684.296 1165.41,684.296 1165.97,684.296 1166.53,684.296 1167.09,684.296 1167.65,684.296 1168.21,684.296 1168.77,684.296 1169.33,684.296 1169.88,684.296 1170.44,684.296 1171,684.296 1171.56,684.296 1172.12,684.296 1172.68,684.296 1173.24,684.296 1173.8,684.296 1174.36,684.296 1174.92,684.296 1175.48,684.296 1176.04,684.296 1176.6,684.296 1177.15,684.296 1177.71,684.296 1178.27,684.296 1178.83,684.296 1179.39,684.296 1179.95,684.296 1180.51,684.296 1181.07,684.296 1181.63,684.296 1182.19,684.296 1182.75,684.296 1183.31,684.296 1183.87,684.296 1184.43,684.296 1184.98,684.296 1185.54,684.296 1186.1,684.296 1186.66,684.296 1187.22,684.296 1187.78,684.296 1188.34,684.296 1188.9,684.296 1189.46,684.296 1190.02,684.296 1190.58,684.296 1191.14,684.296 1191.7,684.296 1192.25,684.296 1192.81,684.296 1193.37,684.296 1193.93,684.296 1194.49,684.296 1195.05,684.296 1195.61,684.296 1196.17,684.296 1196.73,684.296 1197.29,684.296 1197.85,684.296 1198.41,684.296 1198.97,684.296 1199.52,684.296 1200.08,684.296 1200.64,684.296 1201.2,684.296 1201.76,684.296 1202.32,684.296 1202.88,684.296 1203.44,684.296 1204,684.296 1204.56,684.296 1205.12,684.296 1205.68,684.296 1206.24,684.296 1206.8,684.296 1207.35,684.296 1207.91,684.296 1208.47,684.296 1209.03,684.296 1209.59,684.296 1210.15,684.296 1210.71,684.296 1211.27,684.296 1211.83,684.296 1212.39,684.296 1212.95,684.296 1213.51,684.296 1214.07,684.296 1214.62,684.296 1215.18,684.296 1215.74,684.296 1216.3,684.296 1216.86,684.296 1217.42,684.296 1217.98,684.296 1218.54,684.296 1219.1,684.296 1219.66,684.296 1220.22,684.296 1220.78,684.296 1221.34,684.296 1221.89,684.296 1222.45,684.296 1223.01,684.296 1223.57,684.296 1224.13,684.296 1224.69,684.296 1225.25,684.296 1225.81,684.296 1226.37,684.296 1226.93,684.296 1227.49,684.296 1228.05,684.296 1228.61,684.296 1229.17,684.296 1229.72,684.296 1230.28,684.296 1230.84,684.296 1231.4,684.296 1231.96,684.296 1232.52,684.296 1233.08,684.296 1233.64,684.296 1234.2,684.296 1234.76,684.296 1235.32,684.296 1235.88,684.296 1236.44,684.296 1236.99,684.296 1237.55,684.296 1238.11,684.296 1238.67,684.296 1239.23,684.296 1239.79,684.296 1240.35,684.296 1240.91,684.296 1241.47,684.296 1242.03,684.296 1242.59,684.296 1243.15,684.296 1243.71,684.296 1244.26,684.296 1244.82,684.296 1245.38,684.296 1245.94,684.296 1246.5,684.296 1247.06,684.296 1247.62,684.296 1248.18,684.296 1248.74,684.296 1249.3,684.296 1249.86,684.296 1250.42,684.296 1250.98,684.296 1251.54,684.296 1252.09,684.296 1252.65,684.296 1253.21,684.296 1253.77,684.296 1254.33,684.296 1254.89,684.296 1255.45,684.296 1256.01,684.296 1256.57,684.296 1257.13,684.296 1257.69,684.296 1258.25,684.296 1258.81,684.296 1259.36,684.296 1259.92,684.296 1260.48,684.296 1261.04,684.296 1261.6,684.296 1262.16,684.296 1262.72,684.296 1263.28,684.296 1263.84,684.296 1264.4,684.296 1264.96,684.296 1265.52,684.296 1266.08,684.296 1266.63,684.296 1267.19,684.296 1267.75,684.296 1268.31,684.296 1268.87,684.296 1269.43,684.296 1269.99,684.296 1270.55,684.296 1271.11,684.296 1271.67,684.296 1272.23,684.296 1272.79,684.296 1273.35,684.296 1273.91,684.296 1274.46,684.296 1275.02,684.296 1275.58,684.296 1276.14,684.296 1276.7,684.296 1277.26,684.296 1277.82,684.296 1278.38,684.296 1278.94,684.296 1279.5,684.296 1280.06,684.296 1280.62,684.296 1281.18,684.296 1281.73,684.296 1282.29,684.296 1282.85,684.296 1283.41,684.296 1283.97,684.296 1284.53,684.296 1285.09,684.296 1285.65,684.296 1286.21,684.296 1286.77,684.296 1287.33,684.296 1287.89,684.296 1288.45,684.296 1289,684.296 1289.56,684.296 1290.12,684.296 1290.68,684.296 1291.24,684.296 1291.8,684.296 1292.36,684.296 1292.92,684.296 1293.48,684.296 1294.04,684.296 1294.6,684.296 1295.16,684.296 1295.72,684.296 1296.28,684.296 1296.83,684.296 1297.39,684.296 1297.95,684.296 1298.51,684.296 1299.07,684.296 1299.63,684.296 1300.19,684.296 1300.75,684.296 1301.31,684.296 1301.87,684.296 1302.43,684.296 1302.99,684.296 1303.55,684.296 1304.1,684.296 1304.66,684.296 1305.22,684.296 1305.78,684.296 1306.34,684.296 1306.9,684.296 1307.46,684.296 1308.02,684.296 1308.58,684.296 1309.14,684.296 1309.7,684.296 1310.26,684.296 1310.82,684.296 1311.38,684.296 1311.93,684.296 1312.49,684.296 1313.05,684.296 1313.61,684.296 1314.17,684.296 1314.73,684.296 1315.29,684.296 1315.85,684.296 1316.41,684.296 1316.97,684.296 1317.53,684.296 1318.09,684.296 1318.65,684.296 1319.2,684.296 1319.76,684.296 1320.32,684.296 1320.88,684.296 1321.44,684.296 1322,684.296 1322.56,684.296 1323.12,684.296 1323.68,684.296 1324.24,684.296 1324.8,684.296 1325.36,684.296 1325.92,684.296 1326.47,684.296 1327.03,684.296 1327.59,684.296 1328.15,684.296 1328.71,684.296 1329.27,684.296 1329.83,684.296 1330.39,684.296 1330.95,684.296 1331.51,684.296 1332.07,684.296 1332.63,684.296 1333.19,684.296 1333.75,684.296 1334.3,684.296 1334.86,684.296 1335.42,684.296 1335.98,684.296 1336.54,684.296 1337.1,684.296 1337.66,684.296 1338.22,684.296 1338.78,684.296 1339.34,684.296 1339.9,684.296 1340.46,684.296 1341.02,684.296 1341.57,684.296 1342.13,684.296 1342.69,684.296 1343.25,684.296 1343.81,684.296 1344.37,684.296 1344.93,684.296 1345.49,684.296 1346.05,684.296 1346.61,684.296 1347.17,684.296 1347.73,684.296 1348.29,684.296 1348.84,684.296 1349.4,684.296 1349.96,684.296 1350.52,684.296 1351.08,684.296 1351.64,684.296 1352.2,684.296 1352.76,684.296 1353.32,684.296 1353.88,684.296 1354.44,684.296 1355,684.296 1355.56,684.296 1356.12,684.296 1356.67,684.296 1357.23,684.296 1357.79,684.296 1358.35,684.296 1358.91,684.296 1359.47,684.296 1360.03,684.296 1360.59,684.296 1361.15,684.296 1361.71,684.296 1362.27,684.296 1362.83,684.296 1363.39,684.296 1363.94,684.296 1364.5,684.296 1365.06,684.296 1365.62,684.296 1366.18,684.296 1366.74,684.296 1367.3,684.296 1367.86,684.296 1368.42,684.296 1368.98,684.296 1369.54,684.296 1370.1,684.296 1370.66,684.296 1371.21,684.296 1371.77,684.296 1372.33,684.296 1372.89,684.296 1373.45,684.296 1374.01,684.296 1374.57,684.296 1375.13,684.296 1375.69,684.296 1376.25,684.296 1376.81,684.296 1377.37,684.296 1377.93,684.296 1378.49,684.296 1379.04,684.296 1379.6,684.296 1380.16,684.296 1380.72,684.296 1381.28,684.296 1381.84,684.296 1382.4,684.296 1382.96,684.296 1383.52,684.296 1384.08,684.296 1384.64,684.296 1385.2,684.296 1385.76,684.296 1386.31,684.296 1386.87,684.296 1387.43,684.296 1387.99,684.296 1388.55,684.296 1389.11,684.296 1389.67,684.296 1390.23,684.296 1390.79,684.296 1391.35,684.296 1391.91,684.296 1392.47,684.296 1393.03,684.296 1393.58,684.296 1394.14,684.296 1394.7,684.296 1395.26,684.296 1395.82,684.296 1396.38,684.296 1396.94,684.296 1397.5,684.296 1398.06,684.296 1398.62,684.296 1399.18,684.296 1399.74,684.296 1400.3,684.296 1400.86,684.296 1401.41,684.296 1401.97,684.296 1402.53,684.296 1403.09,684.296 1403.65,684.296 1404.21,684.296 1404.77,684.296 1405.33,684.296 1405.89,684.296 1406.45,684.296 1407.01,684.296 1407.57,684.296 1408.13,684.296 1408.68,684.296 1409.24,684.296 1409.8,684.296 1410.36,684.296 1410.92,684.296 1411.48,684.296 1412.04,684.296 1412.6,684.296 1413.16,684.296 1413.72,684.296 1414.28,684.296 1414.84,684.296 1415.4,684.296 1415.95,684.296 1416.51,684.296 1417.07,684.296 1417.63,684.296 1418.19,684.296 1418.75,684.296 1419.31,684.296 1419.87,684.296 1420.43,684.296 1420.99,684.296 1421.55,684.296 1422.11,684.296 1422.67,684.296 1423.23,684.296 1423.78,684.296 1424.34,684.296 1424.9,684.296 1425.46,684.296 1426.02,684.296 1426.58,684.296 1427.14,684.296 1427.7,684.296 1428.26,684.296 1428.82,684.296 1429.38,684.296 1429.94,684.296 1430.5,684.296 1431.05,684.296 1431.61,684.296 1432.17,684.296 1432.73,684.296 1433.29,684.296 1433.85,684.296 1434.41,684.296 1434.97,684.296 1435.53,684.296 1436.09,684.296 1436.65,684.296 1437.21,684.296 1437.77,684.296 1438.33,684.296 1438.88,684.296 1439.44,684.296 1440,684.296 1440.56,684.296 1441.12,684.296 1441.68,684.296 1442.24,684.296 1442.8,684.296 1443.36,684.296 1443.92,684.296 1444.48,684.296 1445.04,684.296 1445.6,684.296 1446.15,684.296 1446.71,684.296 1447.27,684.296 1447.83,684.296 1448.39,684.296 1448.95,684.296 1449.51,684.296 1450.07,684.296 1450.63,684.296 1451.19,684.296 1451.75,684.296 1452.31,684.296 1452.87,684.296 1453.42,684.296 1453.98,684.296 1454.54,684.296 1455.1,684.296 1455.66,684.296 1456.22,684.296 1456.78,684.296 1457.34,684.296 1457.9,684.296 1458.46,684.296 1459.02,684.296 1459.58,684.296 1460.14,684.296 1460.7,684.296 1461.25,684.296 1461.81,684.296 1462.37,684.296 1462.93,684.296 1463.49,684.296 1464.05,684.296 1464.61,684.296 1465.17,684.296 1465.73,684.296 1466.29,684.296 1466.85,684.296 1467.41,684.296 1467.97,684.296 1468.52,684.296 1469.08,684.296 1469.64,684.296 1470.2,684.296 1470.76,684.296 1471.32,684.296 1471.88,684.296 1472.44,684.296 1473,684.296 1473.56,684.296 1474.12,684.296 1474.68,684.296 1475.24,684.296 1475.79,684.296 1476.35,684.296 1476.91,684.296 1477.47,684.296 1478.03,684.296 1478.59,684.296 1479.15,684.296 1479.71,684.296 1480.27,684.296 1480.83,684.296 1481.39,684.296 1481.95,684.296 1482.51,684.296 1483.07,684.296 1483.62,684.296 1484.18,684.296 1484.74,684.296 1485.3,684.296 1485.86,684.296 1486.42,684.296 1486.98,684.296 1487.54,684.296 1488.1,684.296 1488.66,684.296 1489.22,684.296 1489.78,684.296 1490.34,684.296 1490.89,684.296 1491.45,684.296 1492.01,684.296 1492.57,684.296 1493.13,684.296 1493.69,684.296 1494.25,684.296 1494.81,684.296 1495.37,684.296 1495.93,684.296 1496.49,684.296 1497.05,684.296 1497.61,684.296 1498.16,684.296 1498.72,684.296 1499.28,684.296 1499.84,684.296 1500.4,684.296 1500.96,684.296 1501.52,684.296 1502.08,684.296 1502.64,684.296 1503.2,684.296 1503.76,684.296 1504.32,684.296 1504.88,684.296 1505.44,684.296 1505.99,684.296 1506.55,684.296 1507.11,684.296 1507.67,684.296 1508.23,684.296 1508.79,684.296 1509.35,684.296 1509.91,684.296 1510.47,684.296 1511.03,684.296 1511.59,684.296 1512.15,684.296 1512.71,684.296 1513.26,684.296 1513.82,684.296 1514.38,684.296 1514.94,684.296 1515.5,684.296 1516.06,684.296 1516.62,684.296 1517.18,684.296 1517.74,684.296 1518.3,684.296 1518.86,684.296 1519.42,684.296 1519.98,684.296 1520.53,684.296 1521.09,684.296 1521.65,684.296 1522.21,684.296 1522.77,684.296 1523.33,684.296 1523.89,684.296 1524.45,684.296 1525.01,684.296 1525.57,684.296 1526.13,684.296 1526.69,684.296 1527.25,684.296 1527.81,684.296 1528.36,684.296 1528.92,684.296 1529.48,684.296 1530.04,684.296 1530.6,684.296 1531.16,684.296 1531.72,684.296 1532.28,684.296 1532.84,684.296 1533.4,684.296 1533.96,684.296 1534.52,684.296 1535.08,684.296 1535.63,684.296 1536.19,684.296 1536.75,684.296 1537.31,684.296 1537.87,684.296 1538.43,684.296 1538.99,684.296 1539.55,684.296 1540.11,684.296 1540.67,684.296 1541.23,684.296 1541.79,684.296 1542.35,684.296 1542.9,684.296 1543.46,684.296 1544.02,684.296 1544.58,684.296 1545.14,684.296 1545.7,684.296 1546.26,684.296 1546.82,684.296 1547.38,684.296 1547.94,684.296 1548.5,684.296 1549.06,684.296 1549.62,684.296 1550.18,684.296 1550.73,684.296 1551.29,684.296 1551.85,684.296 1552.41,684.296 1552.97,684.296 1553.53,684.296 1554.09,684.296 1554.65,684.296 1555.21,684.296 1555.77,684.296 1556.33,684.296 1556.89,684.296 1557.45,684.296 1558,684.296 1558.56,684.296 1559.12,684.296 1559.68,684.296 1560.24,684.296 1560.8,684.296 1561.36,684.296 1561.92,684.296 1562.48,684.296 1563.04,684.296 1563.6,684.296 1564.16,684.296 1564.72,684.296 1565.28,684.296 1565.83,684.296 1566.39,684.296 1566.95,684.296 1567.51,684.296 1568.07,684.296 1568.63,684.296 1569.19,684.296 1569.75,684.296 1570.31,684.296 1570.87,684.296 1571.43,684.296 1571.99,684.296 1572.55,684.296 1573.1,684.296 1573.66,684.296 1574.22,684.296 1574.78,684.296 1575.34,684.296 1575.9,684.296 1576.46,684.296 1577.02,684.296 1577.58,684.296 1578.14,684.296 1578.7,684.296 1579.26,684.296 1579.82,684.296 1580.37,684.296 1580.93,684.296 1581.49,684.296 1582.05,684.296 1582.61,684.296 1583.17,684.296 1583.73,684.296 1584.29,684.296 1584.85,684.296 1585.41,684.296 1585.97,684.296 1586.53,684.296 1587.09,684.296 1587.65,684.296 1588.2,684.296 1588.76,684.296 1589.32,684.296 1589.88,684.296 1590.44,684.296 1591,684.296 1591.56,684.296 1592.12,684.296 1592.68,684.296 1593.24,684.296 1593.8,684.296 1594.36,684.296 1594.92,684.296 1595.47,684.296 1596.03,684.296 1596.59,684.296 1597.15,684.296 1597.71,684.296 1598.27,684.296 1598.83,684.296 1599.39,684.296 1599.95,684.296 1600.51,684.296 1601.07,684.296 1601.63,684.296 1602.19,684.296 1602.74,684.296 1603.3,684.296 1603.86,684.296 1604.42,684.296 1604.98,684.296 1605.54,684.296 1606.1,684.296 1606.66,684.296 1607.22,684.296 1607.78,684.296 1608.34,684.296 1608.9,684.296 1609.46,684.296 1610.02,684.296 1610.57,684.296 1611.13,684.296 1611.69,684.296 1612.25,684.296 1612.81,684.296 1613.37,684.296 1613.93,684.296 1614.49,684.296 1615.05,684.296 1615.61,684.296 1616.17,684.296 1616.73,684.296 1617.29,684.296 1617.84,684.296 1618.4,684.296 1618.96,684.296 1619.52,684.296 1620.08,684.296 1620.64,684.296 1621.2,684.296 1621.76,684.296 1622.32,684.296 1622.88,684.296 1623.44,684.296 1624,684.296 1624.56,684.296 1625.11,684.296 1625.67,684.296 1626.23,684.296 1626.79,684.296 1627.35,684.296 1627.91,684.296 1628.47,684.296 1629.03,684.296 1629.59,684.296 1630.15,684.296 1630.71,684.296 1631.27,684.296 1631.83,684.296 1632.39,684.296 1632.94,684.296 1633.5,684.296 1634.06,684.296 1634.62,684.296 1635.18,684.296 1635.74,684.296 1636.3,684.296 1636.86,684.296 1637.42,684.296 1637.98,684.296 1638.54,684.296 1639.1,684.296 1639.66,684.296 1640.21,684.296 1640.77,684.296 1641.33,684.296 1641.89,684.296 1642.45,684.296 1643.01,684.296 1643.57,684.296 1644.13,684.296 1644.69,684.296 1645.25,684.296 1645.81,684.296 1646.37,684.296 1646.93,684.296 1647.48,684.296 1648.04,684.296 1648.6,684.296 1649.16,684.296 1649.72,684.296 1650.28,684.296 1650.84,684.296 1651.4,684.296 1651.96,684.296 1652.52,684.296 1653.08,684.296 1653.64,684.296 1654.2,684.296 1654.76,684.296 1655.31,684.296 1655.87,684.296 1656.43,684.296 1656.99,684.296 1657.55,684.296 1658.11,684.296 1658.67,684.296 1659.23,684.296 1659.79,684.296 1660.35,684.296 1660.91,684.296 1661.47,684.296 1662.03,684.296 1662.58,684.296 1663.14,684.296 1663.7,684.296 1664.26,684.296 1664.82,684.296 1665.38,684.296 1665.94,684.296 1666.5,684.296 1667.06,684.296 1667.62,684.296 1668.18,684.296 1668.74,684.296 1669.3,684.296 1669.85,684.296 1670.41,684.296 1670.97,684.296 1671.53,684.296 1672.09,684.296 1672.65,684.296 1673.21,684.296 1673.77,684.296 1674.33,684.296 1674.89,684.296 1675.45,684.296 1676.01,684.296 1676.57,684.296 1677.13,684.296 1677.68,684.296 1678.24,684.296 1678.8,684.296 1679.36,684.296 1679.92,684.296 1680.48,684.296 1681.04,684.296 1681.6,684.296 1682.16,684.296 1682.72,684.296 1683.28,684.296 1683.84,684.296 1684.4,684.296 1684.95,684.296 1685.51,684.296 1686.07,684.296 1686.63,684.296 1687.19,684.296 1687.75,684.296 1688.31,684.296 1688.87,684.296 1689.43,684.296 1689.99,684.296 1690.55,684.296 1691.11,684.296 1691.67,684.296 1692.23,684.296 1692.78,684.296 1693.34,684.296 1693.9,684.296 1694.46,684.296 1695.02,684.296 1695.58,684.296 1696.14,684.296 1696.7,684.296 1697.26,684.296 1697.82,684.296 1698.38,684.296 1698.94,684.296 1699.5,684.296 1700.05,684.296 1700.61,684.296 1701.17,684.296 1701.73,684.296 1702.29,684.296 1702.85,684.296 1703.41,684.296 1703.97,684.296 1704.53,684.296 1705.09,684.296 1705.65,684.296 1706.21,684.296 1706.77,684.296 1707.32,684.296 1707.88,684.296 1708.44,684.296 1709,684.296 1709.56,684.296 1710.12,684.296 1710.68,684.296 1711.24,684.296 1711.8,684.296 1712.36,684.296 1712.92,684.296 1713.48,684.296 1714.04,684.296 1714.6,684.296 1715.15,684.296 1715.71,684.296 1716.27,684.296 1716.83,684.296 1717.39,684.296 1717.95,684.296 1718.51,684.296 1719.07,684.296 1719.63,684.296 1720.19,684.296 1720.75,684.296 1721.31,684.296 1721.87,684.296 1722.42,684.296 1722.98,684.296 1723.54,684.296 1724.1,684.296 1724.66,684.296 1725.22,684.296 1725.78,684.296 1726.34,684.296 1726.9,684.296 1727.46,684.296 1728.02,684.296 1728.58,684.296 1729.14,684.296 1729.69,684.296 1730.25,684.296 1730.81,684.296 1731.37,684.296 1731.93,684.296 1732.49,684.296 1733.05,684.296 1733.61,684.296 1734.17,684.296 1734.73,684.296 1735.29,684.296 1735.85,684.296 1736.41,684.296 1736.97,684.296 1737.52,684.296 1738.08,684.296 1738.64,684.296 1739.2,684.296 1739.76,684.296 1740.32,684.296 1740.88,684.296 1741.44,684.296 1742,684.296 1742.56,684.296 1743.12,684.296 1743.68,684.296 1744.24,684.296 1744.79,684.296 1745.35,684.296 1745.91,684.296 1746.47,684.296 1747.03,684.296 1747.59,684.296 1748.15,684.296 1748.71,684.296 1749.27,684.296 1749.83,684.296 1750.39,684.296 1750.95,684.296 1751.51,684.296 1752.06,684.296 1752.62,684.296 1753.18,684.296 1753.74,684.296 1754.3,684.296 1754.86,684.296 1755.42,684.296 1755.98,684.296 1756.54,684.296 1757.1,684.296 1757.66,684.296 1758.22,684.296 1758.78,684.296 1759.34,684.296 1759.89,684.296 1760.45,684.296 1761.01,684.296 1761.57,684.296 1762.13,684.296 1762.69,684.296 1763.25,684.296 1763.81,684.296 1764.37,684.296 1764.93,684.296 1765.49,684.296 1766.05,684.296 1766.61,684.296 1767.16,684.296 1767.72,684.296 1768.28,684.296 1768.84,684.296 1769.4,684.296 1769.96,684.296 1770.52,684.296 1771.08,684.296 1771.64,684.296 1772.2,684.296 1772.76,684.296 1773.32,684.296 1773.88,684.296 1774.43,684.296 1774.99,684.296 1775.55,684.296 1776.11,684.296 1776.67,684.296 1777.23,684.296 1777.79,684.296 1778.35,684.296 1778.91,684.296 1779.47,684.296 1780.03,684.296 1780.59,684.296 1781.15,684.296 1781.71,684.296 1782.26,684.296 1782.82,684.296 1783.38,684.296 1783.94,684.296 1784.5,684.296 1785.06,684.296 1785.62,684.296 1786.18,684.296 1786.74,684.296 1787.3,684.296 1787.86,684.296 1788.42,684.296 1788.98,684.296 1789.53,684.296 1790.09,684.296 1790.65,684.296 1791.21,684.296 1791.77,684.296 1792.33,684.296 1792.89,684.296 1793.45,684.296 1794.01,684.296 1794.57,684.296 1795.13,684.296 1795.69,684.296 1796.25,684.296 1796.8,684.296 1797.36,684.296 1797.92,684.296 1798.48,684.296 1799.04,684.296 1799.6,684.296 1800.16,684.296 1800.72,684.296 1801.28,684.296 1801.84,684.296 1802.4,684.296 1802.96,684.296 1803.52,684.296 1804.08,684.296 1804.63,684.296 1805.19,684.296 1805.75,684.296 1806.31,684.296 1806.87,684.296 1807.43,684.296 1807.99,684.296 1808.55,684.296 1809.11,684.296 1809.67,684.296 1810.23,684.296 1810.79,684.296 1811.35,684.296 1811.9,684.296 1812.46,684.296 1813.02,684.296 1813.58,684.296 1814.14,684.296 1814.7,684.296 1815.26,684.296 1815.82,684.296 1816.38,684.296 1816.94,684.296 1817.5,684.296 1818.06,684.296 1818.62,684.296 1819.18,684.296 1819.73,684.296 1820.29,684.296 1820.85,684.296 1821.41,684.296 1821.97,684.296 1822.53,684.296 1823.09,684.296 1823.65,684.296 1824.21,684.296 1824.77,684.296 1825.33,684.296 1825.89,684.296 1826.45,684.296 1827,684.296 1827.56,684.296 1828.12,684.296 1828.68,684.296 1829.24,684.296 1829.8,684.296 1830.36,684.296 1830.92,684.296 1831.48,684.296 1832.04,684.296 1832.6,684.296 1833.16,684.296 1833.72,684.296 1834.27,684.296 1834.83,684.296 1835.39,684.296 1835.95,684.296 1836.51,684.296 1837.07,684.296 1837.63,684.296 1838.19,684.296 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.030365447849378 ± 0.021255626338943557\nProjected Energy: -4.018663349431703 ± (0.00388910864955605, 0.00387599459551069)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.504696</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5429e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.8415e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.547e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.503e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.585e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.067e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613383\n -0.7590191922770906\n  0.1358418221962161\n  0.15789998694608443\n  0.876711441178136\n  1.5305929970973366\n  1.5835732611867348\n  3.0728703303258635\n  3.1256726539518382\n  4.862107221562172\n  6.260694850380593\n  6.402671211183109\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
