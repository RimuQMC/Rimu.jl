var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2099942548463593 ± 0.0024578412499425563\n   G2(1) = 0.9180354949060805 ± 0.0007286837069663791\n   G2(2) = 0.9821901734259875 ± 0.00088264093556215\n   G2(3) = 0.9895544084895055 ± 0.001078693402156319\n   G2(4) = 0.9821901734259875 ± 0.00088264093556215\n   G2(5) = 0.9180354949060805 ± 0.0007286837069663791\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.052109348039426 ± 0.13457028012710637\n   Replica 2: -4.026906154657204 ± 0.12849709219602262\n   Replica 3: -3.9655194101811984 ± 0.13106121254558575\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip110\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip111\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip112\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1262.91 2211.02,1262.91 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.97 2211.02,1004.97 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.024 2211.02,747.024 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.081 2211.02,489.081 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.138 2211.02,231.138 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1262.91 423.181,1262.91 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.97 423.181,1004.97 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.024 423.181,747.024 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.081 423.181,489.081 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.138 423.181,231.138 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M356.339 1248.71 Q352.728 1248.71 350.899 1252.27 Q349.094 1255.81 349.094 1262.94 Q349.094 1270.05 350.899 1273.62 Q352.728 1277.16 356.339 1277.16 Q359.973 1277.16 361.779 1273.62 Q363.608 1270.05 363.608 1262.94 Q363.608 1255.81 361.779 1252.27 Q359.973 1248.71 356.339 1248.71 M356.339 1245 Q362.149 1245 365.205 1249.61 Q368.284 1254.19 368.284 1262.94 Q368.284 1271.67 365.205 1276.28 Q362.149 1280.86 356.339 1280.86 Q350.529 1280.86 347.45 1276.28 Q344.395 1271.67 344.395 1262.94 Q344.395 1254.19 347.45 1249.61 Q350.529 1245 356.339 1245 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M290.043 1018.31 L306.363 1018.31 L306.363 1022.25 L284.418 1022.25 L284.418 1018.31 Q287.08 1015.56 291.664 1010.93 Q296.27 1006.27 297.451 1004.93 Q299.696 1002.41 300.576 1000.67 Q301.478 998.914 301.478 997.224 Q301.478 994.469 299.534 992.733 Q297.613 990.997 294.511 990.997 Q292.312 990.997 289.858 991.761 Q287.427 992.525 284.65 994.076 L284.65 989.354 Q287.474 988.219 289.927 987.641 Q292.381 987.062 294.418 987.062 Q299.789 987.062 302.983 989.747 Q306.177 992.432 306.177 996.923 Q306.177 999.053 305.367 1000.97 Q304.58 1002.87 302.474 1005.46 Q301.895 1006.14 298.793 1009.35 Q295.691 1012.55 290.043 1018.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M316.224 987.687 L334.58 987.687 L334.58 991.622 L320.506 991.622 L320.506 1000.09 Q321.524 999.747 322.543 999.585 Q323.562 999.4 324.58 999.4 Q330.367 999.4 333.747 1002.57 Q337.126 1005.74 337.126 1011.16 Q337.126 1016.74 333.654 1019.84 Q330.182 1022.92 323.862 1022.92 Q321.687 1022.92 319.418 1022.55 Q317.173 1022.18 314.765 1021.44 L314.765 1016.74 Q316.849 1017.87 319.071 1018.43 Q321.293 1018.98 323.77 1018.98 Q327.774 1018.98 330.112 1016.88 Q332.45 1014.77 332.45 1011.16 Q332.45 1007.55 330.112 1005.44 Q327.774 1003.34 323.77 1003.34 Q321.895 1003.34 320.02 1003.75 Q318.168 1004.17 316.224 1005.05 L316.224 987.687 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 990.766 Q352.728 990.766 350.899 994.33 Q349.094 997.872 349.094 1005 Q349.094 1012.11 350.899 1015.67 Q352.728 1019.21 356.339 1019.21 Q359.973 1019.21 361.779 1015.67 Q363.608 1012.11 363.608 1005 Q363.608 997.872 361.779 994.33 Q359.973 990.766 356.339 990.766 M356.339 987.062 Q362.149 987.062 365.205 991.668 Q368.284 996.252 368.284 1005 Q368.284 1013.73 365.205 1018.33 Q362.149 1022.92 356.339 1022.92 Q350.529 1022.92 347.45 1018.33 Q344.395 1013.73 344.395 1005 Q344.395 996.252 347.45 991.668 Q350.529 987.062 356.339 987.062 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M286.062 729.744 L304.418 729.744 L304.418 733.679 L290.344 733.679 L290.344 742.151 Q291.363 741.804 292.381 741.642 Q293.4 741.457 294.418 741.457 Q300.205 741.457 303.585 744.628 Q306.964 747.8 306.964 753.216 Q306.964 758.795 303.492 761.897 Q300.02 764.975 293.701 764.975 Q291.525 764.975 289.256 764.605 Q287.011 764.235 284.603 763.494 L284.603 758.795 Q286.687 759.929 288.909 760.485 Q291.131 761.04 293.608 761.04 Q297.613 761.04 299.951 758.934 Q302.288 756.827 302.288 753.216 Q302.288 749.605 299.951 747.499 Q297.613 745.392 293.608 745.392 Q291.733 745.392 289.858 745.809 Q288.006 746.226 286.062 747.105 L286.062 729.744 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M326.177 732.823 Q322.566 732.823 320.737 736.388 Q318.932 739.929 318.932 747.059 Q318.932 754.165 320.737 757.73 Q322.566 761.272 326.177 761.272 Q329.811 761.272 331.617 757.73 Q333.446 754.165 333.446 747.059 Q333.446 739.929 331.617 736.388 Q329.811 732.823 326.177 732.823 M326.177 729.119 Q331.987 729.119 335.043 733.726 Q338.122 738.309 338.122 747.059 Q338.122 755.786 335.043 760.392 Q331.987 764.975 326.177 764.975 Q320.367 764.975 317.288 760.392 Q314.233 755.786 314.233 747.059 Q314.233 738.309 317.288 733.726 Q320.367 729.119 326.177 729.119 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 732.823 Q352.728 732.823 350.899 736.388 Q349.094 739.929 349.094 747.059 Q349.094 754.165 350.899 757.73 Q352.728 761.272 356.339 761.272 Q359.973 761.272 361.779 757.73 Q363.608 754.165 363.608 747.059 Q363.608 739.929 361.779 736.388 Q359.973 732.823 356.339 732.823 M356.339 729.119 Q362.149 729.119 365.205 733.726 Q368.284 738.309 368.284 747.059 Q368.284 755.786 365.205 760.392 Q362.149 764.975 356.339 764.975 Q350.529 764.975 347.45 760.392 Q344.395 755.786 344.395 747.059 Q344.395 738.309 347.45 733.726 Q350.529 729.119 356.339 729.119 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M284.835 471.801 L307.057 471.801 L307.057 473.792 L294.511 506.361 L289.627 506.361 L301.432 475.736 L284.835 475.736 L284.835 471.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M316.224 471.801 L334.58 471.801 L334.58 475.736 L320.506 475.736 L320.506 484.209 Q321.524 483.861 322.543 483.699 Q323.562 483.514 324.58 483.514 Q330.367 483.514 333.747 486.685 Q337.126 489.857 337.126 495.273 Q337.126 500.852 333.654 503.954 Q330.182 507.033 323.862 507.033 Q321.687 507.033 319.418 506.662 Q317.173 506.292 314.765 505.551 L314.765 500.852 Q316.849 501.986 319.071 502.542 Q321.293 503.097 323.77 503.097 Q327.774 503.097 330.112 500.991 Q332.45 498.884 332.45 495.273 Q332.45 491.662 330.112 489.556 Q327.774 487.449 323.77 487.449 Q321.895 487.449 320.02 487.866 Q318.168 488.283 316.224 489.162 L316.224 471.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 474.88 Q352.728 474.88 350.899 478.445 Q349.094 481.986 349.094 489.116 Q349.094 496.222 350.899 499.787 Q352.728 503.329 356.339 503.329 Q359.973 503.329 361.779 499.787 Q363.608 496.222 363.608 489.116 Q363.608 481.986 361.779 478.445 Q359.973 474.88 356.339 474.88 M356.339 471.176 Q362.149 471.176 365.205 475.783 Q368.284 480.366 368.284 489.116 Q368.284 497.843 365.205 502.449 Q362.149 507.033 356.339 507.033 Q350.529 507.033 347.45 502.449 Q344.395 497.843 344.395 489.116 Q344.395 480.366 347.45 475.783 Q350.529 471.176 356.339 471.176 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M256.664 244.483 L264.303 244.483 L264.303 218.118 L255.992 219.784 L255.992 215.525 L264.256 213.858 L268.932 213.858 L268.932 244.483 L276.571 244.483 L276.571 248.418 L256.664 248.418 L256.664 244.483 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M296.015 216.937 Q292.404 216.937 290.576 220.502 Q288.77 224.044 288.77 231.173 Q288.77 238.28 290.576 241.844 Q292.404 245.386 296.015 245.386 Q299.65 245.386 301.455 241.844 Q303.284 238.28 303.284 231.173 Q303.284 224.044 301.455 220.502 Q299.65 216.937 296.015 216.937 M296.015 213.233 Q301.826 213.233 304.881 217.84 Q307.96 222.423 307.96 231.173 Q307.96 239.9 304.881 244.506 Q301.826 249.09 296.015 249.09 Q290.205 249.09 287.127 244.506 Q284.071 239.9 284.071 231.173 Q284.071 222.423 287.127 217.84 Q290.205 213.233 296.015 213.233 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M326.177 216.937 Q322.566 216.937 320.737 220.502 Q318.932 224.044 318.932 231.173 Q318.932 238.28 320.737 241.844 Q322.566 245.386 326.177 245.386 Q329.811 245.386 331.617 241.844 Q333.446 238.28 333.446 231.173 Q333.446 224.044 331.617 220.502 Q329.811 216.937 326.177 216.937 M326.177 213.233 Q331.987 213.233 335.043 217.84 Q338.122 222.423 338.122 231.173 Q338.122 239.9 335.043 244.506 Q331.987 249.09 326.177 249.09 Q320.367 249.09 317.288 244.506 Q314.233 239.9 314.233 231.173 Q314.233 222.423 317.288 217.84 Q320.367 213.233 326.177 213.233 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 216.937 Q352.728 216.937 350.899 220.502 Q349.094 224.044 349.094 231.173 Q349.094 238.28 350.899 241.844 Q352.728 245.386 356.339 245.386 Q359.973 245.386 361.779 241.844 Q363.608 238.28 363.608 231.173 Q363.608 224.044 361.779 220.502 Q359.973 216.937 356.339 216.937 M356.339 213.233 Q362.149 213.233 365.205 217.84 Q368.284 222.423 368.284 231.173 Q368.284 239.9 365.205 244.506 Q362.149 249.09 356.339 249.09 Q350.529 249.09 347.45 244.506 Q344.395 239.9 344.395 231.173 Q344.395 222.423 347.45 217.84 Q350.529 213.233 356.339 213.233 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip112)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.138 4017.76,231.138 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.55 456.554,1249.56 457.123,1247.49 457.691,1247.5 458.259,1247.41 458.828,1247.24 459.396,1246.93 459.964,1245.57 460.533,1244.14 461.101,1242.62 461.669,1242.17 462.238,1241.62 462.806,1239.95 463.375,1238.17 463.943,1237.42 464.511,1235.5 465.08,1234.59 465.648,1232.5 466.216,1231.36 466.785,1230.08 467.353,1228.71 467.921,1227.17 468.49,1225.54 469.058,1222.73 469.626,1220.83 470.195,1218.76 470.763,1216.53 471.331,1212.1 471.9,1208.67 472.468,1206.11 473.036,1203.32 473.605,1199.41 474.173,1196.35 474.741,1192.01 475.31,1188.65 475.878,1185.06 476.446,1181.17 477.015,1176.1 477.583,1171.89 478.152,1167.58 478.72,1161.93 479.288,1155.99 479.857,1150.86 480.425,1144.56 480.993,1138.09 481.562,1131.42 482.13,1124.55 482.698,1117.37 483.267,1109.11 483.835,1101.57 484.403,1094.94 484.972,1086 485.54,1078.88 486.108,1070.48 486.677,1060.82 487.245,1051.25 487.813,1041.47 488.382,1032.64 488.95,1024.68 489.518,1010.32 490.087,1001.16 490.655,988.843 491.224,978.456 491.792,970.285 492.36,961.957 492.929,952.305 493.497,942.524 494.065,933.618 494.634,921.555 495.202,911.543 495.77,900.258 496.339,890.214 496.907,880.966 497.475,869.48 498.044,859.213 498.612,849.933 499.18,838.426 499.749,828.183 500.317,817.021 500.885,806.852 501.454,797.664 502.022,786.185 502.59,775.084 503.159,764.938 503.727,755.933 504.295,746.719 504.864,737.452 505.432,728.358 506.001,716.111 506.569,706.039 507.137,696.29 507.706,684.134 508.274,671.531 508.842,662.113 509.411,650.675 509.979,641.669 510.547,631.399 511.116,623.633 511.684,613.952 512.252,604.264 512.821,595.921 513.389,586.458 513.957,579.433 514.526,570.452 515.094,559.56 515.662,552.181 516.231,545.631 516.799,539.015 517.367,531.594 517.936,523.377 518.504,515.344 519.072,509.557 519.641,503.608 520.209,495.854 520.778,490.272 521.346,483.687 521.914,477.4 522.483,472.167 523.051,465.906 523.619,459.773 524.188,452.824 524.756,446.996 525.324,441.438 525.893,436.804 526.461,431.132 527.029,424.703 527.598,420.814 528.166,415.656 528.734,412.756 529.303,407.783 529.871,400.73 530.439,397.129 531.008,392.334 531.576,387.922 532.144,382.276 532.713,378.96 533.281,372.954 533.85,370.048 534.418,366.188 534.986,363.451 535.555,357.527 536.123,353.93 536.691,349.624 537.26,344.274 537.828,341.041 538.396,337.026 538.965,334.205 539.533,331.409 540.101,328.843 540.67,325.264 541.238,322.674 541.806,321.09 542.375,319.496 542.943,315.945 543.511,315.908 544.08,315.68 544.648,313.115 545.216,310.424 545.785,310.24 546.353,308.878 546.921,306.386 547.49,303.888 548.058,299.685 548.627,297.558 549.195,294.583 549.763,294.842 550.332,293.028 550.9,292.21 551.468,290.356 552.037,289.607 552.605,287.884 553.173,287.093 553.742,287.271 554.31,286.591 554.878,281.981 555.447,280.182 556.015,280.692 556.583,280.144 557.152,280.501 557.72,277.643 558.288,278.044 558.857,273.224 559.425,272.879 559.993,273.644 560.562,272.275 561.13,273.625 561.698,271.683 562.267,270.894 562.835,268.106 563.404,267.798 563.972,268.339 564.54,268.743 565.109,266.002 565.677,265.606 566.245,265.386 566.814,263.05 567.382,257.505 567.95,258.449 568.519,258.438 569.087,257.292 569.655,257.141 570.224,255.019 570.792,254.965 571.36,255.11 571.929,255.144 572.497,254.164 573.065,254.39 573.634,253.298 574.202,253.487 574.77,252.542 575.339,250.813 575.907,250.838 576.476,249.918 577.044,252.118 577.612,251.1 578.181,249.094 578.749,251.383 579.317,251.352 579.886,252.2 580.454,250.917 581.022,249.702 581.591,248.611 582.159,248.76 582.727,247.661 583.296,246.003 583.864,246.004 584.432,244.324 585.001,244.419 585.569,241.661 586.137,241.101 586.706,240.504 587.274,241.083 587.842,243.641 588.411,243.695 588.979,244.045 589.547,244.155 590.116,243.331 590.684,242.725 591.253,245.317 591.821,245.074 592.389,247.107 592.958,245.971 593.526,246.219 594.094,245.317 594.663,246.74 595.231,246.496 595.799,246.678 596.368,247.644 596.936,246.33 597.504,247.372 598.073,247.41 598.641,246.327 599.209,245.295 599.778,244.173 600.346,243.267 600.914,243.329 601.483,244.418 602.051,244.403 602.619,244.329 603.188,242.203 603.756,244.503 604.325,246.589 604.893,245.283 605.461,245.108 606.03,248.114 606.598,245.62 607.166,245.484 607.735,245.933 608.303,245.624 608.871,243.089 609.44,242.652 610.008,242.33 610.576,243.174 611.145,241.873 611.713,239.677 612.281,239.749 612.85,238.625 613.418,238.723 613.986,240.686 614.555,243.146 615.123,241.904 615.691,242.846 616.26,241.503 616.828,240.457 617.396,236.289 617.965,236.479 618.533,236.719 619.102,236.778 619.67,235.876 620.238,236.24 620.807,237.305 621.375,236.2 621.943,236.522 622.512,235.825 623.08,238.128 623.648,237.999 624.217,237.115 624.785,238.144 625.353,237.141 625.922,236.341 626.49,235.39 627.058,233.41 627.627,234.716 628.195,232.844 628.763,236.445 629.332,235.764 629.9,235.758 630.468,235.006 631.037,235.41 631.605,239.607 632.173,237.676 632.742,237.618 633.31,237.668 633.879,237.552 634.447,238.802 635.015,238.813 635.584,238.588 636.152,237.213 636.72,238.074 637.289,239.029 637.857,237.883 638.425,238.821 638.994,237.656 639.562,236.438 640.13,235.319 640.699,236.382 641.267,236.082 641.835,235.112 642.404,235.171 642.972,235.309 643.54,234.429 644.109,234.612 644.677,233.757 645.245,231.954 645.814,233.438 646.382,231.674 646.951,229.952 647.519,229.46 648.087,229.022 648.656,229.84 649.224,229.248 649.792,229.62 650.361,230.341 650.929,231.738 651.497,231.173 652.066,231.507 652.634,230.96 653.202,231.282 653.771,230.975 654.339,230.234 654.907,232.796 655.476,232.113 656.044,230.49 656.612,228.812 657.181,229.307 657.749,227.839 658.317,230.465 658.886,232.293 659.454,234.057 660.022,236.291 660.591,236.4 661.159,237.548 661.728,234.614 662.296,236.915 662.864,236.023 663.433,234.833 664.001,232.822 664.569,231.976 665.138,234.436 665.706,233.874 666.274,235.168 666.843,235.601 667.411,234.733 667.979,233.808 668.548,233.259 669.116,233.674 669.684,235.096 670.253,235.192 670.821,236.401 671.389,237.614 671.958,236.37 672.526,236.161 673.094,235.135 673.663,237.402 674.231,237.449 674.799,237.066 675.368,240.22 675.936,239.867 676.505,239.331 677.073,242.023 677.641,240.59 678.21,241.26 678.778,238.775 679.346,238.819 679.915,239.767 680.483,237.394 681.051,237.422 681.62,236.266 682.188,237.21 682.756,238.26 683.325,238.045 683.893,238.819 684.461,238.568 685.03,236.505 685.598,234.371 686.166,232.499 686.735,234.912 687.303,233.957 687.871,233.139 688.44,233.496 689.008,234.723 689.577,234.702 690.145,233.683 690.713,234.794 691.282,238.101 691.85,237.877 692.418,233.746 692.987,233.883 693.555,232.961 694.123,233.201 694.692,233.235 695.26,232.129 695.828,232.431 696.397,231.757 696.965,231.888 697.533,232.944 698.102,231.373 698.67,231.482 699.238,231.737 699.807,230.935 700.375,231.146 700.943,229.434 701.512,230.036 702.08,231.456 702.648,230.548 703.217,228.933 703.785,230.496 704.354,229.7 704.922,230.164 705.49,230.801 706.059,230.856 706.627,231.046 707.195,230.26 707.764,231.818 708.332,230.046 708.9,231.502 709.469,230.646 710.037,230.798 710.605,234.119 711.174,234.27 711.742,232.309 712.31,233.685 712.879,232.541 713.447,233.78 714.015,235.955 714.584,234.783 715.152,234.794 715.72,231.69 716.289,234.078 716.857,234.958 717.425,235.914 717.994,236.701 718.562,237.53 719.131,238.576 719.699,236.105 720.267,236.319 720.836,237.362 721.404,236.045 721.972,235.927 722.541,233.894 723.109,232.562 723.677,232.618 724.246,232.605 724.814,232.819 725.382,232.999 725.951,233.005 726.519,231.048 727.087,231.183 727.656,231.18 728.224,230.292 728.792,231.597 729.361,230.838 729.929,232.022 730.497,233.298 731.066,233.334 731.634,234.134 732.203,234.262 732.771,234.105 733.339,233.992 733.908,231.007 734.476,231.19 735.044,230.288 735.613,232.656 736.181,234.97 736.749,236.125 737.318,234.745 737.886,234.676 738.454,233.371 739.023,233.418 739.591,234.324 740.159,234.219 740.728,235.216 741.296,234.08 741.864,233.114 742.433,233.29 743.001,233.402 743.569,232.556 744.138,231.454 744.706,231.413 745.274,231.549 745.843,230.577 746.411,231.778 746.98,232.975 747.548,231.803 748.116,233.733 748.685,235.674 749.253,235.544 749.821,236.442 750.39,234.139 750.958,235.029 751.526,235.038 752.095,235.977 752.663,235.791 753.231,237.9 753.8,238.928 754.368,239.532 754.936,239.228 755.505,237.89 756.073,234.636 756.641,233.417 757.21,234.349 757.778,234.049 758.346,232.931 758.915,229.912 759.483,230.098 760.052,230.064 760.62,230.338 761.188,229.621 761.757,232.011 762.325,231.22 762.893,232.372 763.462,232.432 764.03,232.512 764.598,232.521 765.167,233.549 765.735,232.41 766.303,231.429 766.872,231.533 767.44,230.673 768.008,232.975 768.577,233.941 769.145,232.672 769.713,233.57 770.282,231.379 770.85,229.268 771.418,230.428 771.987,229.435 772.555,229.498 773.123,229.724 773.692,231.146 774.26,231.212 774.829,230.241 775.397,231.513 775.965,229.363 776.534,229.68 777.102,232.131 777.67,233.282 778.239,230.1 778.807,231.402 779.375,233.328 779.944,233.121 780.512,233.04 781.08,234.134 781.649,233.92 782.217,233.738 782.785,233.684 783.354,232.855 783.922,234.041 784.49,232.748 785.059,232.691 785.627,229.575 786.195,230.646 786.764,231.058 787.332,229.06 787.9,231.226 788.469,232.359 789.037,232.198 789.606,232.144 790.174,234.116 790.742,232.817 791.311,233.642 791.879,233.628 792.447,233.44 793.016,233.279 793.584,234.327 794.152,234.301 794.721,233.076 795.289,234.094 795.857,232.047 796.426,231.185 796.994,230.339 797.562,230.666 798.131,230.889 798.699,230.939 799.267,230.237 799.836,232.792 800.404,234.961 800.972,234.735 801.541,234.564 802.109,233.318 802.678,232.224 803.246,231.356 803.814,232.516 804.383,231.444 804.951,231.397 805.519,232.366 806.088,233.52 806.656,234.249 807.224,235.223 807.793,236.235 808.361,234.824 808.929,234.54 809.498,235.231 810.066,232.885 810.634,230.876 811.203,230.868 811.771,230.729 812.339,230.843 812.908,228.864 813.476,229.183 814.044,230.28 814.613,229.449 815.181,228.655 815.749,230.75 816.318,232.133 816.886,230.964 817.455,231.081 818.023,231.282 818.591,231.463 819.16,230.468 819.728,230.763 820.296,230.958 820.865,231.151 821.433,231.161 822.001,233.285 822.57,233.012 823.138,232.839 823.706,227.687 824.275,230.204 824.843,229.191 825.411,230.393 825.98,231.387 826.548,230.248 827.116,229.341 827.685,229.482 828.253,228.888 828.821,226.833 829.39,227.452 829.958,228.761 830.526,230.034 831.095,232.212 831.663,231.138 832.232,231.258 832.8,231.357 833.368,230.426 833.937,229.631 834.505,229.034 835.073,230.382 835.642,230.603 836.21,231.919 836.778,231.971 837.347,233.232 837.915,232.297 838.483,231.329 839.052,232.78 839.62,230.671 840.188,233.743 840.757,231.737 841.325,232.793 841.893,231.598 842.462,231.71 843.03,232.734 843.598,230.574 844.167,229.717 844.735,227.621 845.304,229.161 845.872,227.485 846.44,228.924 847.009,227.245 847.577,227.662 848.145,229.034 848.714,231.052 849.282,233.314 849.85,234.361 850.419,232.307 850.987,230.466 851.555,232.869 852.124,235.981 852.692,235.573 853.26,237.26 853.829,237.003 854.397,237.747 854.965,237.307 855.534,239.081 856.102,238.418 856.67,237.988 857.239,239.336 857.807,239.928 858.375,240.392 858.944,240.797 859.512,239.089 860.081,239.386 860.649,236.803 861.217,235.308 861.786,235.926 862.354,233.564 862.922,233.61 863.491,235.427 864.059,233.063 864.627,232.852 865.196,230.672 865.764,231.726 866.332,229.469 866.901,231.565 867.469,233.498 868.037,233.326 868.606,233.28 869.174,232.011 869.742,229.876 870.311,231.025 870.879,230.891 871.447,230.887 872.016,230.846 872.584,229.818 873.152,229.948 873.721,228.77 874.289,226.773 874.858,228.221 875.426,231.747 875.994,230.679 876.563,230.732 877.131,232.575 877.699,233.765 878.268,231.491 878.836,233.525 879.404,234.133 879.973,233.968 880.541,234.821 881.109,235.69 881.678,234.053 882.246,233.748 882.814,232.587 883.383,232.476 883.951,232.162 884.519,232.117 885.088,231.127 885.656,231.934 886.224,231.107 886.793,231.114 887.361,229.025 887.93,229.171 888.498,229.17 889.066,228.3 889.635,227.608 890.203,228.708 890.771,228.925 891.34,226.922 891.908,228.363 892.476,229.364 893.045,227.22 893.613,229.471 894.181,230.651 894.75,226.46 895.318,225.939 895.886,226.431 896.455,226.668 897.023,227.014 897.591,227.35 898.16,230.592 898.728,230.886 899.296,228.956 899.865,228.164 900.433,226.329 901.001,227.869 901.57,225.07 902.138,224.821 902.707,225.322 903.275,227.018 903.843,227.507 904.412,228.823 904.98,225.99 905.548,226.687 906.117,228.374 906.685,228.705 907.253,227.763 907.822,231.163 908.39,231.168 908.958,231.557 909.527,229.736 910.095,230.881 910.663,227.954 911.232,228.224 911.8,229.571 912.368,227.876 912.937,229.393 913.505,228.401 914.073,229.705 914.642,231.157 915.21,230.295 915.779,227.494 916.347,227.717 916.915,227.302 917.484,227.85 918.052,229.263 918.62,230.695 919.189,229.851 919.757,229.049 920.325,231.668 920.894,232.982 921.462,234.203 922.03,236.367 922.599,238.208 923.167,238.89 923.735,237.506 924.304,238.048 924.872,237.81 925.44,238.641 926.009,235.347 926.577,237.18 927.145,238.01 927.714,237.451 928.282,239.119 928.85,235.553 929.419,236.595 929.987,237.009 930.556,236.696 931.124,236.517 931.692,236.095 932.261,235.849 932.829,235.551 933.397,233.427 933.966,232.43 934.534,233.427 935.102,233.273 935.671,233.208 936.239,233.203 936.807,233.014 937.376,233.85 937.944,232.415 938.512,233.315 939.081,232.933 939.649,233.949 940.217,233.622 940.786,233.443 941.354,232.256 941.922,232.174 942.491,232.045 943.059,234.113 943.627,231.898 944.196,227.664 944.764,227.087 945.333,227.636 945.901,231.044 946.469,230.951 947.038,226.749 947.606,225.9 948.174,229.384 948.743,229.707 949.311,231.848 949.879,232.948 950.448,231.76 951.016,232.875 951.584,231.886 952.153,230.065 952.721,230.105 953.289,231.185 953.858,231.212 954.426,231.298 954.994,231.522 955.563,231.582 956.131,231.598 956.699,230.366 957.268,229.392 957.836,230.401 958.405,229.523 958.973,230.909 959.541,230.036 960.11,228.845 960.678,227.789 961.246,228.146 961.815,229.613 962.383,227.801 962.951,229.109 963.52,230.478 964.088,230.523 964.656,228.807 965.225,230.324 965.793,229.277 966.361,230.44 966.93,229.463 967.498,229.582 968.066,228.824 968.635,230 969.203,229.168 969.771,232.409 970.34,229.259 970.908,230.451 971.476,232.592 972.045,232.561 972.613,234.601 973.182,234.558 973.75,235.528 974.318,236.326 974.887,233.954 975.455,234.6 976.023,232.401 976.592,232.435 977.16,232.308 977.728,233.196 978.297,231.101 978.865,231.01 979.433,230.832 980.002,230.945 980.57,232.125 981.138,233.249 981.707,234.253 982.275,233.113 982.843,232.84 983.412,233.843 983.98,233.786 984.548,234.765 985.117,234.597 985.685,235.205 986.253,237.993 986.822,238.484 987.39,234.925 987.959,234.841 988.527,233.517 989.095,232.396 989.664,233.176 990.232,233.048 990.8,235.962 991.369,232.544 991.937,230.172 992.505,232.328 993.074,232.281 993.642,230.214 994.21,228.097 994.779,229.219 995.347,230.176 995.915,230.385 996.484,230.539 997.052,232.646 997.62,234.558 998.189,234.219 998.757,234.837 999.325,233.617 999.894,233.481 1000.46,234.421 1001.03,235.108 1001.6,233.571 1002.17,233.257 1002.74,233.077 1003.3,232.986 1003.87,232.727 1004.44,233.678 1005.01,233.339 1005.58,232.113 1006.15,231.992 1006.71,230.773 1007.28,228.576 1007.85,228.55 1008.42,230.942 1008.99,232.991 1009.56,230.715 1010.12,232.699 1010.69,231.445 1011.26,231.628 1011.83,232.852 1012.4,231.553 1012.97,232.401 1013.53,233.333 1014.1,233.066 1014.67,229.754 1015.24,228.733 1015.81,228.852 1016.38,229.746 1016.94,229.653 1017.51,230.9 1018.08,229.773 1018.65,228.745 1019.22,229.908 1019.79,228.716 1020.35,231.872 1020.92,231.959 1021.49,231.765 1022.06,231.516 1022.63,231.329 1023.2,231.186 1023.76,232.059 1024.33,232.905 1024.9,231.671 1025.47,233.807 1026.04,232.296 1026.61,233.081 1027.17,232.881 1027.74,233.948 1028.31,233.697 1028.88,233.479 1029.45,232.095 1030.02,231.013 1030.58,231.777 1031.15,229.338 1031.72,229.37 1032.29,230.499 1032.86,229.557 1033.43,229.811 1033.99,229.967 1034.56,232.042 1035.13,234.828 1035.7,234.465 1036.27,235.117 1036.84,230.713 1037.4,229.478 1037.97,230.666 1038.54,230.628 1039.11,228.401 1039.68,229.52 1040.25,227.77 1040.81,227.978 1041.38,226.006 1041.95,227.318 1042.52,226.347 1043.09,225.512 1043.66,225.893 1044.22,225.327 1044.79,225.84 1045.36,226.056 1045.93,224.363 1046.5,221.956 1047.07,221.591 1047.63,220.065 1048.2,219.969 1048.77,219.895 1049.34,220.756 1049.91,221.691 1050.48,222.329 1051.05,221.896 1051.61,222.67 1052.18,223.409 1052.75,226.146 1053.32,225.618 1053.89,226.134 1054.46,226.768 1055.02,226.56 1055.59,228.111 1056.16,230.472 1056.73,229.613 1057.3,231.116 1057.87,233.414 1058.43,235.282 1059,236.156 1059.57,236.893 1060.14,235.706 1060.71,235.395 1061.28,233.135 1061.84,234.305 1062.41,236.121 1062.98,235.863 1063.55,233.67 1064.12,233.533 1064.69,234.595 1065.25,236.714 1065.82,234.265 1066.39,232.019 1066.96,232.103 1067.53,231.219 1068.1,230.376 1068.66,229.261 1069.23,230.474 1069.8,231.757 1070.37,231.891 1070.94,232.958 1071.51,233.124 1072.07,232.236 1072.64,235.332 1073.21,236.98 1073.78,236.592 1074.35,235.49 1074.92,237.206 1075.48,236.987 1076.05,235.619 1076.62,236.136 1077.19,241.841 1077.76,241.283 1078.33,242.698 1078.89,241.932 1079.46,241.161 1080.03,241.595 1080.6,241.79 1081.17,239.901 1081.74,239.268 1082.3,239.485 1082.87,238.938 1083.44,239.302 1084.01,238.551 1084.58,237.929 1085.15,235.389 1085.71,233.863 1086.28,234.549 1086.85,235.251 1087.42,232.848 1087.99,231.585 1088.56,231.516 1089.12,230.443 1089.69,231.247 1090.26,233.96 1090.83,232.521 1091.4,229.149 1091.97,229.286 1092.53,227.095 1093.1,228.458 1093.67,229.231 1094.24,228.326 1094.81,228.474 1095.38,227.894 1095.94,228.63 1096.51,228.766 1097.08,229.086 1097.65,227.01 1098.22,227.004 1098.79,227.216 1099.35,230.41 1099.92,230.278 1100.49,230.17 1101.06,230.36 1101.63,228.338 1102.2,228.679 1102.76,229.934 1103.33,229.939 1103.9,229.935 1104.47,230.839 1105.04,231.899 1105.61,232.608 1106.17,236.475 1106.74,235.977 1107.31,233.374 1107.88,232.194 1108.45,231.943 1109.02,230.899 1109.58,231.804 1110.15,231.781 1110.72,230.646 1111.29,230.758 1111.86,230.569 1112.43,233.875 1112.99,234.534 1113.56,233.064 1114.13,232.813 1114.7,232.557 1115.27,231.574 1115.84,231.356 1116.4,230.402 1116.97,230.451 1117.54,231.329 1118.11,231.256 1118.68,231.162 1119.25,230.21 1119.81,229.259 1120.38,231.474 1120.95,231.368 1121.52,231.169 1122.09,229.827 1122.66,228.724 1123.23,229.033 1123.79,231.172 1124.36,229.859 1124.93,228.706 1125.5,228.843 1126.07,230.804 1126.64,227.877 1127.2,226.945 1127.77,226.146 1128.34,225.223 1128.91,225.728 1129.48,226.293 1130.05,227.638 1130.61,225.897 1131.18,225.345 1131.75,227.797 1132.32,229.018 1132.89,231.052 1133.46,232.988 1134.02,233.077 1134.59,233.018 1135.16,231.858 1135.73,232.564 1136.3,233.353 1136.87,233.072 1137.43,230.85 1138,232.916 1138.57,231.8 1139.14,232.565 1139.71,231.39 1140.28,231.254 1140.84,229.113 1141.41,230.308 1141.98,231.238 1142.55,230.437 1143.12,229.296 1143.69,228.299 1144.25,225.57 1144.82,228.057 1145.39,228.168 1145.96,227.282 1146.53,223.403 1147.1,223.109 1147.66,223.837 1148.23,225.308 1148.8,224.68 1149.37,227.383 1149.94,230.844 1150.51,230.958 1151.07,229.666 1151.64,230.73 1152.21,230.786 1152.78,230.815 1153.35,231.032 1153.92,232.122 1154.48,231.078 1155.05,233.083 1155.62,232.933 1156.19,234.992 1156.76,234.918 1157.33,233.786 1157.89,232.562 1158.46,230.484 1159.03,230.674 1159.6,228.552 1160.17,229.603 1160.74,228.935 1161.3,230.291 1161.87,228.418 1162.44,227.611 1163.01,225.897 1163.58,226.491 1164.15,224.854 1164.71,225.393 1165.28,225.838 1165.85,227.536 1166.42,229.74 1166.99,231.929 1167.56,233.093 1168.12,235.152 1168.69,236.976 1169.26,237.786 1169.83,236.603 1170.4,235.265 1170.97,235.158 1171.53,233.973 1172.1,233.746 1172.67,233.603 1173.24,235.681 1173.81,236.497 1174.38,232.157 1174.94,233.083 1175.51,231.842 1176.08,235 1176.65,234.472 1177.22,233.326 1177.79,233.341 1178.35,233.123 1178.92,233.282 1179.49,232.345 1180.06,232.243 1180.63,234.104 1181.2,233.816 1181.76,233.844 1182.33,232.697 1182.9,232.576 1183.47,234.515 1184.04,235.334 1184.61,234.793 1185.17,234.913 1185.74,235.733 1186.31,233.395 1186.88,232.164 1187.45,231.932 1188.02,231.531 1188.58,230.398 1189.15,227.2 1189.72,226.352 1190.29,226.569 1190.86,224.726 1191.43,226.194 1192,226.751 1192.56,228.885 1193.13,228.011 1193.7,227.13 1194.27,226.43 1194.84,228.707 1195.41,229.064 1195.97,230.264 1196.54,231.606 1197.11,230.57 1197.68,230.782 1198.25,232.845 1198.82,231.722 1199.38,231.633 1199.95,230.562 1200.52,231.635 1201.09,233.719 1201.66,236.616 1202.23,236.293 1202.79,235.952 1203.36,236.708 1203.93,236.371 1204.5,236.16 1205.07,235.797 1205.64,236.648 1206.2,237.026 1206.77,232.209 1207.34,231.027 1207.91,231.927 1208.48,231.819 1209.05,230.937 1209.61,228.964 1210.18,229.97 1210.75,227.823 1211.32,228.983 1211.89,229.084 1212.46,233.316 1213.02,233.169 1213.59,234.055 1214.16,234.953 1214.73,234.56 1215.3,231.24 1215.87,232.131 1216.43,229.912 1217,231.007 1217.57,229.836 1218.14,228.918 1218.71,231.923 1219.28,233.015 1219.84,231.617 1220.41,231.536 1220.98,231.447 1221.55,230.407 1222.12,232.406 1222.69,231.041 1223.25,231.188 1223.82,231.057 1224.39,230.966 1224.96,231.086 1225.53,230.849 1226.1,231.774 1226.66,230.596 1227.23,231.607 1227.8,229.729 1228.37,230.003 1228.94,229.863 1229.51,229.817 1230.07,230.072 1230.64,228.959 1231.21,228.057 1231.78,227.294 1232.35,227.61 1232.92,227.704 1233.48,226.874 1234.05,226.072 1234.62,229.46 1235.19,229.7 1235.76,229.89 1236.33,228.831 1236.89,228.883 1237.46,227.117 1238.03,225.551 1238.6,224.104 1239.17,222.695 1239.74,223.464 1240.3,223.969 1240.87,223.652 1241.44,224.117 1242.01,225.637 1242.58,229.196 1243.15,229.315 1243.71,230.619 1244.28,231.626 1244.85,232.645 1245.42,231.57 1245.99,230.642 1246.56,232.614 1247.12,232.64 1247.69,232.765 1248.26,230.802 1248.83,231.909 1249.4,230.835 1249.97,230.679 1250.53,231.695 1251.1,232.607 1251.67,230.419 1252.24,230.368 1252.81,231.832 1253.38,231.879 1253.94,229.824 1254.51,231.065 1255.08,231.131 1255.65,231.106 1256.22,232.119 1256.79,232.132 1257.35,232.06 1257.92,230.946 1258.49,228.917 1259.06,231.18 1259.63,233.246 1260.2,233.417 1260.76,231.613 1261.33,229.517 1261.9,230.734 1262.47,229.716 1263.04,233.057 1263.61,231.881 1264.18,233.701 1264.74,233.658 1265.31,236.59 1265.88,235.256 1266.45,235.167 1267.02,235.899 1267.59,235.554 1268.15,237.412 1268.72,239.093 1269.29,237.554 1269.86,235.227 1270.43,232.94 1271,232.708 1271.56,231.468 1272.13,230.508 1272.7,230.564 1273.27,229.656 1273.84,228.92 1274.41,230.213 1274.97,229.16 1275.54,230.285 1276.11,231.399 1276.68,229.249 1277.25,228.397 1277.82,229.843 1278.38,230.006 1278.95,229.283 1279.52,230.563 1280.09,228.464 1280.66,226.599 1281.23,228.121 1281.79,225.293 1282.36,227.806 1282.93,230.114 1283.5,229.275 1284.07,227.36 1284.64,227.515 1285.2,228.711 1285.77,229.98 1286.34,230.124 1286.91,229.914 1287.48,231.276 1288.05,231.331 1288.61,231.503 1289.18,231.482 1289.75,229.236 1290.32,229.575 1290.89,229.579 1291.46,229.706 1292.02,228.791 1292.59,226.838 1293.16,226.132 1293.73,227.547 1294.3,227.887 1294.87,229.27 1295.43,230.613 1296,230.822 1296.57,233.051 1297.14,232.942 1297.71,230.98 1298.28,230.181 1298.84,231.303 1299.41,231.609 1299.98,230.691 1300.55,231.872 1301.12,228.74 1301.69,228.023 1302.25,228.418 1302.82,228.79 1303.39,229.919 1303.96,230.235 1304.53,232.776 1305.1,232.944 1305.66,234.89 1306.23,234.707 1306.8,233.668 1307.37,231.673 1307.94,231.66 1308.51,233.913 1309.07,232.68 1309.64,232.538 1310.21,230.36 1310.78,232.544 1311.35,232.333 1311.92,232.238 1312.48,233.157 1313.05,233.063 1313.62,232.117 1314.19,232.057 1314.76,232.055 1315.33,231.051 1315.89,231.205 1316.46,231.299 1317.03,230.333 1317.6,229.476 1318.17,228.599 1318.74,229.006 1319.3,229.223 1319.87,226.261 1320.44,225.719 1321.01,226.12 1321.58,225.469 1322.15,225.994 1322.71,227.554 1323.28,227.839 1323.85,226.185 1324.42,230.827 1324.99,231.029 1325.56,232.108 1326.12,232.204 1326.69,232.303 1327.26,232.32 1327.83,235.316 1328.4,236.142 1328.97,236.853 1329.53,236.582 1330.1,234.291 1330.67,235.023 1331.24,235.558 1331.81,235.352 1332.38,235.427 1332.94,234.237 1333.51,234.091 1334.08,232.884 1334.65,235.934 1335.22,235.682 1335.79,235.341 1336.36,235.204 1336.92,232.678 1337.49,231.655 1338.06,231.76 1338.63,233.681 1339.2,235.612 1339.77,233.242 1340.33,232.167 1340.9,227.85 1341.47,228.019 1342.04,228.185 1342.61,230.356 1343.18,230.481 1343.74,230.436 1344.31,229.569 1344.88,229.865 1345.45,230.039 1346.02,231.196 1346.59,231.081 1347.15,233.09 1347.72,234.13 1348.29,235.008 1348.86,233.625 1349.43,232.565 1350,234.426 1350.56,233.231 1351.13,236.186 1351.7,233.713 1352.27,231.381 1352.84,232.453 1353.41,236.518 1353.97,235.141 1354.54,233.706 1355.11,234.418 1355.68,234.233 1356.25,235.064 1356.82,235.851 1357.38,235.278 1357.95,235.811 1358.52,234.435 1359.09,233.21 1359.66,233.038 1360.23,231.011 1360.79,233.115 1361.36,232.124 1361.93,232.018 1362.5,229.839 1363.07,230.226 1363.64,231.205 1364.2,230.08 1364.77,231.157 1365.34,231.112 1365.91,231.286 1366.48,232.054 1367.05,233.871 1367.61,234.734 1368.18,233.302 1368.75,232.899 1369.32,232.629 1369.89,233.224 1370.46,230.794 1371.02,230.699 1371.59,231.662 1372.16,231.514 1372.73,231.399 1373.3,230.14 1373.87,230.34 1374.43,229.404 1375,230.559 1375.57,229.64 1376.14,229.702 1376.71,230.734 1377.28,230.726 1377.84,229.72 1378.41,228.739 1378.98,232.896 1379.55,229.63 1380.12,229.644 1380.69,227.536 1381.25,227.644 1381.82,227.839 1382.39,225.102 1382.96,225.519 1383.53,225.935 1384.1,225.261 1384.66,225.622 1385.23,225.878 1385.8,227.153 1386.37,229.312 1386.94,231.632 1387.51,232.654 1388.07,231.602 1388.64,232.658 1389.21,232.779 1389.78,232.765 1390.35,229.462 1390.92,228.675 1391.48,229.939 1392.05,225.975 1392.62,227.364 1393.19,225.621 1393.76,227.066 1394.33,228.287 1394.89,230.481 1395.46,230.406 1396.03,232.505 1396.6,231.442 1397.17,230.209 1397.74,230.354 1398.3,231.241 1398.87,230.31 1399.44,231.43 1400.01,231.377 1400.58,230.53 1401.15,230.598 1401.71,228.837 1402.28,227.985 1402.85,226.113 1403.42,227.659 1403.99,224.98 1404.56,225.344 1405.13,227.832 1405.69,227.936 1406.26,229.477 1406.83,229.723 1407.4,230.82 1407.97,230.837 1408.54,230.024 1409.1,232.556 1409.67,234.709 1410.24,233.516 1410.81,233.239 1411.38,232.146 1411.95,232.212 1412.51,234.494 1413.08,233.228 1413.65,231.232 1414.22,233.423 1414.79,233.292 1415.36,235.417 1415.92,232.131 1416.49,230.977 1417.06,231.985 1417.63,233.187 1418.2,233.034 1418.77,232.242 1419.33,233.281 1419.9,233.261 1420.47,233.362 1421.04,233.025 1421.61,230.796 1422.18,231.992 1422.74,229.647 1423.31,232.832 1423.88,235.886 1424.45,234.691 1425.02,235.452 1425.59,235.211 1426.15,234.856 1426.72,233.49 1427.29,233.327 1427.86,232.232 1428.43,233.491 1429,232.282 1429.56,233.261 1430.13,232.125 1430.7,232.224 1431.27,232.814 1431.84,232.782 1432.41,232.662 1432.97,233.45 1433.54,233.34 1434.11,233.123 1434.68,234.397 1435.25,234.271 1435.82,231.972 1436.38,230.721 1436.95,232.745 1437.52,231.749 1438.09,232.705 1438.66,234.857 1439.23,236.542 1439.79,233.064 1440.36,232.995 1440.93,233.06 1441.5,232.889 1442.07,232.766 1442.64,232.462 1443.2,232.184 1443.77,232.081 1444.34,230.95 1444.91,231.915 1445.48,232.722 1446.05,233.537 1446.61,234.1 1447.18,232.794 1447.75,230.503 1448.32,228.322 1448.89,227.43 1449.46,228.835 1450.02,228.943 1450.59,228.823 1451.16,228.008 1451.73,229.207 1452.3,227.183 1452.87,229.454 1453.43,230.465 1454,231.379 1454.57,231.276 1455.14,230.177 1455.71,231.077 1456.28,232.956 1456.84,233.567 1457.41,235.611 1457.98,235.306 1458.55,233.818 1459.12,235.935 1459.69,235.475 1460.25,236.011 1460.82,234.544 1461.39,234.128 1461.96,233.685 1462.53,233.42 1463.1,233.119 1463.66,233.924 1464.23,232.546 1464.8,233.342 1465.37,234.226 1465.94,233.069 1466.51,231.989 1467.07,232.817 1467.64,231.685 1468.21,231.453 1468.78,232.416 1469.35,233.179 1469.92,234.06 1470.48,236.791 1471.05,236.196 1471.62,234.705 1472.19,235.477 1472.76,234.915 1473.33,235.47 1473.89,233.858 1474.46,233.687 1475.03,231.297 1475.6,229.11 1476.17,228.301 1476.74,228.358 1477.31,229.482 1477.87,229.37 1478.44,227.416 1479.01,227.72 1479.58,229.791 1480.15,229.711 1480.72,227.478 1481.28,227.547 1481.85,227.659 1482.42,227.892 1482.99,225.998 1483.56,225.379 1484.13,227.627 1484.69,227.425 1485.26,225.514 1485.83,225.72 1486.4,222.022 1486.97,223.76 1487.54,223.279 1488.1,226.842 1488.67,227.134 1489.24,226.367 1489.81,226.745 1490.38,226.017 1490.95,226.495 1491.51,226.9 1492.08,228.114 1492.65,227.335 1493.22,230.748 1493.79,230.539 1494.36,230.517 1494.92,232.485 1495.49,233.407 1496.06,236.064 1496.63,234.499 1497.2,234.293 1497.77,233.086 1498.33,232.967 1498.9,232.75 1499.47,232.644 1500.04,228.564 1500.61,228.855 1501.18,230.121 1501.74,227.055 1502.31,227.271 1502.88,227.631 1503.45,227.962 1504.02,230.428 1504.59,232.637 1505.15,232.339 1505.72,234.322 1506.29,234.281 1506.86,233.845 1507.43,230.637 1508,230.646 1508.56,229.683 1509.13,228.784 1509.7,229.153 1510.27,230.252 1510.84,230.211 1511.41,231.075 1511.97,232.276 1512.54,232.272 1513.11,233.207 1513.68,235.372 1514.25,232.973 1514.82,232.796 1515.38,231.835 1515.95,230.576 1516.52,231.558 1517.09,230.505 1517.66,229.408 1518.23,229.447 1518.79,229.756 1519.36,229.891 1519.93,227.93 1520.5,226.983 1521.07,225.338 1521.64,223.706 1522.2,224.224 1522.77,222.606 1523.34,225.289 1523.91,226.757 1524.48,227.14 1525.05,229.289 1525.61,229.765 1526.18,229.996 1526.75,232.287 1527.32,231.316 1527.89,231.612 1528.46,232.998 1529.02,234.07 1529.59,230.785 1530.16,229.63 1530.73,228.719 1531.3,227.854 1531.87,228.124 1532.43,228.355 1533,229.443 1533.57,231.653 1534.14,231.583 1534.71,231.693 1535.28,231.433 1535.84,233.367 1536.41,233.392 1536.98,234.198 1537.55,234.96 1538.12,235.749 1538.69,238.445 1539.25,238.059 1539.82,239.888 1540.39,239.175 1540.96,237.637 1541.53,240.351 1542.1,238.663 1542.66,236.859 1543.23,236.241 1543.8,233.639 1544.37,233.372 1544.94,235.02 1545.51,232.439 1546.08,232.323 1546.64,231.23 1547.21,231.325 1547.78,229.269 1548.35,227.386 1548.92,227.431 1549.49,225.843 1550.05,226.887 1550.62,228.066 1551.19,228.439 1551.76,229.716 1552.33,231.651 1552.9,231.449 1553.46,233.479 1554.03,231.372 1554.6,229.432 1555.17,229.523 1555.74,228.603 1556.31,227.717 1556.87,229.905 1557.44,230.215 1558.01,231.284 1558.58,232.296 1559.15,233.144 1559.72,232.856 1560.28,231.453 1560.85,230.528 1561.42,230.42 1561.99,229.49 1562.56,230.738 1563.13,230.775 1563.69,232.856 1564.26,231.695 1564.83,232.706 1565.4,232.601 1565.97,232.473 1566.54,231.095 1567.1,232.147 1567.67,230.002 1568.24,232.125 1568.81,229.743 1569.38,230.552 1569.95,231.582 1570.51,228.505 1571.08,226.553 1571.65,229.094 1572.22,228.197 1572.79,228.975 1573.36,229.196 1573.92,229.33 1574.49,232.67 1575.06,230.513 1575.63,228.538 1576.2,231.818 1576.77,230.497 1577.33,232.676 1577.9,231.415 1578.47,231.381 1579.04,234.458 1579.61,232.438 1580.18,231.195 1580.74,230.963 1581.31,232.272 1581.88,234.366 1582.45,234.917 1583.02,234.756 1583.59,233.643 1584.15,232.333 1584.72,232.303 1585.29,231.111 1585.86,230.974 1586.43,232.129 1587,232.121 1587.56,232.355 1588.13,230.082 1588.7,231.246 1589.27,231.58 1589.84,231.524 1590.41,230.458 1590.97,231.482 1591.54,230.259 1592.11,231.287 1592.68,228.287 1593.25,227.527 1593.82,227.839 1594.38,229.094 1594.95,229.534 1595.52,230.943 1596.09,228.802 1596.66,228.066 1597.23,225.275 1597.79,227.783 1598.36,231.152 1598.93,231.079 1599.5,231.174 1600.07,232.154 1600.64,232.085 1601.2,231.891 1601.77,231.073 1602.34,228.959 1602.91,228.186 1603.48,229.573 1604.05,229.49 1604.61,229.566 1605.18,230.728 1605.75,230.677 1606.32,230.643 1606.89,231.675 1607.46,229.626 1608.02,228.792 1608.59,227.068 1609.16,226.321 1609.73,227.598 1610.3,227.794 1610.87,230.082 1611.43,230.015 1612,230.099 1612.57,229.021 1613.14,229.337 1613.71,230.571 1614.28,230.598 1614.84,229.703 1615.41,229.813 1615.98,230.152 1616.55,232.408 1617.12,232.41 1617.69,232.273 1618.26,231.315 1618.82,229.435 1619.39,228.765 1619.96,227.873 1620.53,225.985 1621.1,226.286 1621.67,226.377 1622.23,227.795 1622.8,228.049 1623.37,231.327 1623.94,230.399 1624.51,229.634 1625.08,229.928 1625.64,230.156 1626.21,232.128 1626.78,231.245 1627.35,231.516 1627.92,229.6 1628.49,230.98 1629.05,230.983 1629.62,230.11 1630.19,230.407 1630.76,234.693 1631.33,229.389 1631.9,230.581 1632.46,228.667 1633.03,228.759 1633.6,228.101 1634.17,228.57 1634.74,229.965 1635.31,231.017 1635.87,232.036 1636.44,230.148 1637.01,229.386 1637.58,228.524 1638.15,227.768 1638.72,227.348 1639.28,230.898 1639.85,231.2 1640.42,229.392 1640.99,228.754 1641.56,232.317 1642.13,234.503 1642.69,235.88 1643.26,235.647 1643.83,235.392 1644.4,236.428 1644.97,237.135 1645.54,238.092 1646.1,238.732 1646.67,238.185 1647.24,236.724 1647.81,236.51 1648.38,238.325 1648.95,235.747 1649.51,235.519 1650.08,237.162 1650.65,236.681 1651.22,235.392 1651.79,238.043 1652.36,239.25 1652.92,239.534 1653.49,239.681 1654.06,239.031 1654.63,239.454 1655.2,239.017 1655.77,238.484 1656.33,237.829 1656.9,237.236 1657.47,238.84 1658.04,238.351 1658.61,236.556 1659.18,236.178 1659.74,235.577 1660.31,234.289 1660.88,233.862 1661.45,233.504 1662.02,233.28 1662.59,232.938 1663.15,233.256 1663.72,233.922 1664.29,234.486 1664.86,234.088 1665.43,234.704 1666,235.255 1666.56,237.852 1667.13,238.497 1667.7,238.751 1668.27,240.131 1668.84,238.349 1669.41,237.675 1669.97,237.043 1670.54,238.428 1671.11,237.57 1671.68,233.649 1672.25,232.152 1672.82,229.594 1673.38,229.521 1673.95,230.447 1674.52,229.871 1675.09,230.827 1675.66,231.833 1676.23,232.552 1676.79,231.108 1677.36,230.713 1677.93,230.244 1678.5,230.273 1679.07,230.14 1679.64,229.23 1680.2,228.847 1680.77,227.908 1681.34,227.848 1681.91,225.705 1682.48,225.755 1683.05,224.962 1683.61,226.2 1684.18,224.264 1684.75,224.428 1685.32,224.507 1685.89,223.814 1686.46,224.036 1687.02,224.468 1687.59,225.012 1688.16,225.218 1688.73,223.265 1689.3,224.821 1689.87,225.119 1690.44,225.531 1691,224.918 1691.57,225.283 1692.14,225.588 1692.71,225.786 1693.28,225.797 1693.85,226.111 1694.41,229.591 1694.98,230.717 1695.55,230.768 1696.12,230.699 1696.69,230.495 1697.26,227.653 1697.82,228.939 1698.39,229.033 1698.96,231.403 1699.53,231.431 1700.1,229.373 1700.67,229.247 1701.23,230.572 1701.8,229.629 1702.37,229.639 1702.94,228.947 1703.51,226.123 1704.08,226.42 1704.64,228.045 1705.21,228.276 1705.78,227.476 1706.35,228.906 1706.92,227.08 1707.49,227.405 1708.05,226.661 1708.62,227.995 1709.19,231.34 1709.76,228.388 1710.33,229.614 1710.9,229.735 1711.46,230.077 1712.03,230.253 1712.6,230.204 1713.17,228.268 1713.74,228.477 1714.31,228.443 1714.87,227.632 1715.44,229.083 1716.01,229.429 1716.58,230.57 1717.15,231.607 1717.72,231.85 1718.28,233.156 1718.85,235.319 1719.42,234.165 1719.99,232.923 1720.56,231.874 1721.13,233.789 1721.69,236.644 1722.26,240.455 1722.83,238.492 1723.4,238.919 1723.97,238.41 1724.54,235.854 1725.1,234.571 1725.67,233.382 1726.24,234.264 1726.81,233.83 1727.38,233.607 1727.95,233.233 1728.51,233.023 1729.08,231.84 1729.65,231.92 1730.22,231.845 1730.79,230.86 1731.36,229.831 1731.92,229.757 1732.49,229.771 1733.06,231.963 1733.63,231.909 1734.2,231.119 1734.77,230.953 1735.33,231.782 1735.9,231.549 1736.47,231.482 1737.04,230.67 1737.61,230.032 1738.18,229.88 1738.74,229.866 1739.31,231.057 1739.88,231.072 1740.45,231.184 1741.02,232.212 1741.59,230.097 1742.15,233.194 1742.72,228.903 1743.29,227.915 1743.86,227.041 1744.43,227.353 1745,227.452 1745.56,228.831 1746.13,228.937 1746.7,226.973 1747.27,227.349 1747.84,227.64 1748.41,226.926 1748.97,226.065 1749.54,228.368 1750.11,229.293 1750.68,228.452 1751.25,228.73 1751.82,228.901 1752.38,230.053 1752.95,231.248 1753.52,233.349 1754.09,233.159 1754.66,233.971 1755.23,233.898 1755.79,233.72 1756.36,232.66 1756.93,232.604 1757.5,232.692 1758.07,231.566 1758.64,232.688 1759.21,232.431 1759.77,231.275 1760.34,230.331 1760.91,230.362 1761.48,232.445 1762.05,232.455 1762.62,233.457 1763.18,233.256 1763.75,233.083 1764.32,235.118 1764.89,235.816 1765.46,236.467 1766.03,238.024 1766.59,236.544 1767.16,237.049 1767.73,238.515 1768.3,237.973 1768.87,237.7 1769.44,237.155 1770,235.609 1770.57,233.256 1771.14,232.001 1771.71,231.933 1772.28,231.723 1772.85,231.722 1773.41,230.842 1773.98,230.837 1774.55,229.704 1775.12,228.713 1775.69,226.799 1776.26,225.971 1776.82,227.242 1777.39,226.515 1777.96,226.568 1778.53,227.712 1779.1,229.84 1779.67,227.892 1780.23,228.893 1780.8,227.936 1781.37,228.206 1781.94,227.407 1782.51,228.909 1783.08,225.861 1783.64,225.209 1784.21,224.653 1784.78,225.981 1785.35,224.337 1785.92,224.871 1786.49,225.486 1787.05,224.978 1787.62,227.541 1788.19,228.924 1788.76,229.324 1789.33,230.643 1789.9,231.741 1790.46,231.927 1791.03,229.793 1791.6,230.796 1792.17,231.768 1792.74,231.706 1793.31,233.849 1793.87,233.6 1794.44,233.4 1795.01,231.127 1795.58,230.108 1796.15,230.14 1796.72,228.422 1797.28,228.712 1797.85,229.94 1798.42,230.996 1798.99,232.338 1799.56,231.308 1800.13,230.212 1800.69,231.414 1801.26,232.38 1801.83,232.247 1802.4,232.215 1802.97,234.259 1803.54,235.052 1804.1,233.599 1804.67,234.438 1805.24,236.182 1805.81,234.787 1806.38,230.354 1806.95,228.267 1807.51,227.543 1808.08,227.73 1808.65,226.871 1809.22,226.313 1809.79,222.767 1810.36,223.318 1810.92,226.012 1811.49,225.36 1812.06,225.573 1812.63,226.892 1813.2,230.125 1813.77,233.469 1814.33,233.365 1814.9,231.089 1815.47,233.212 1816.04,231.934 1816.61,229.761 1817.18,229.946 1817.74,229.2 1818.31,229.326 1818.88,228.464 1819.45,228.898 1820.02,229.204 1820.59,230.447 1821.15,228.44 1821.72,228.546 1822.29,228.409 1822.86,227.603 1823.43,229.159 1824,228.277 1824.56,228.584 1825.13,226.933 1825.7,227.33 1826.27,231.694 1826.84,233.706 1827.41,232.679 1827.97,232.532 1828.54,229.712 1829.11,230.039 1829.68,229.178 1830.25,229.46 1830.82,230.773 1831.39,230.898 1831.95,231.991 1832.52,230.003 1833.09,231.382 1833.66,232.63 1834.23,235.733 1834.8,236.606 1835.36,234.415 1835.93,234.188 1836.5,235.019 1837.07,234.887 1837.64,234.755 1838.21,232.594 1838.77,232.543 1839.34,233.669 1839.91,235.674 1840.48,236.434 1841.05,236.1 1841.62,237.927 1842.18,238.613 1842.75,237.887 1843.32,236.35 1843.89,234.814 1844.46,233.568 1845.03,235.235 1845.59,234.83 1846.16,232.342 1846.73,232.256 1847.3,234.211 1847.87,232.99 1848.44,229.698 1849,229.47 1849.57,231.693 1850.14,230.684 1850.71,229.808 1851.28,229.993 1851.85,230.14 1852.41,230.132 1852.98,230.265 1853.55,231.119 1854.12,230.117 1854.69,229.141 1855.26,228.118 1855.82,228.273 1856.39,228.471 1856.96,229.771 1857.53,231.146 1858.1,231.041 1858.67,230.051 1859.23,230.229 1859.8,230.58 1860.37,229.701 1860.94,230.921 1861.51,232.303 1862.08,232.349 1862.64,232.375 1863.21,233.336 1863.78,233.245 1864.35,232.24 1864.92,232.192 1865.49,231.976 1866.05,235.046 1866.62,235.54 1867.19,235.075 1867.76,234.921 1868.33,233.946 1868.9,232.87 1869.46,232.818 1870.03,231.369 1870.6,229.201 1871.17,230.349 1871.74,231.425 1872.31,230.325 1872.87,229.418 1873.44,229.443 1874.01,227.567 1874.58,227.772 1875.15,227.713 1875.72,229.108 1876.28,230.145 1876.85,230.218 1877.42,230.392 1877.99,229.302 1878.56,227.319 1879.13,227.766 1879.69,228.107 1880.26,229.383 1880.83,228.504 1881.4,229.763 1881.97,231.99 1882.54,231.921 1883.1,232.096 1883.67,230.921 1884.24,230.093 1884.81,229.341 1885.38,227.589 1885.95,225.673 1886.51,226.856 1887.08,227.044 1887.65,228.188 1888.22,230.443 1888.79,230.491 1889.36,230.518 1889.92,229.794 1890.49,230.822 1891.06,229.874 1891.63,230.104 1892.2,231.465 1892.77,232.651 1893.33,234.543 1893.9,233.12 1894.47,230.976 1895.04,231.147 1895.61,231.195 1896.18,231.261 1896.74,233.403 1897.31,231.466 1897.88,230.697 1898.45,231.943 1899.02,232.27 1899.59,233.192 1900.16,232.031 1900.72,233.057 1901.29,231.832 1901.86,232.782 1902.43,232.719 1903,234.487 1903.57,236.322 1904.13,235.107 1904.7,235.103 1905.27,234.815 1905.84,233.499 1906.41,233.247 1906.98,234.079 1907.54,233.985 1908.11,233.775 1908.68,233.548 1909.25,233.569 1909.82,233.58 1910.39,233.339 1910.95,234.083 1911.52,234.039 1912.09,234.793 1912.66,234.732 1913.23,231.42 1913.8,233.427 1914.36,231.16 1914.93,230.141 1915.5,232.026 1916.07,231.855 1916.64,230.717 1917.21,229.632 1917.77,229.957 1918.34,228.029 1918.91,230.327 1919.48,230.49 1920.05,231.703 1920.62,233.052 1921.18,233.97 1921.75,232.513 1922.32,231.614 1922.89,233.79 1923.46,232.561 1924.03,229.124 1924.59,229.362 1925.16,228.279 1925.73,228.435 1926.3,228.425 1926.87,227.631 1927.44,227.865 1928,228.155 1928.57,226.209 1929.14,226.614 1929.71,230.317 1930.28,229.495 1930.85,230.569 1931.41,230.705 1931.98,230.613 1932.55,232.997 1933.12,231.94 1933.69,228.623 1934.26,229.971 1934.82,227.894 1935.39,227.05 1935.96,227.432 1936.53,228.769 1937.1,228.987 1937.67,230.282 1938.23,230.145 1938.8,231.299 1939.37,230.225 1939.94,233.072 1940.51,232.989 1941.08,230.918 1941.64,229.802 1942.21,229.776 1942.78,229.903 1943.35,231.075 1943.92,228.868 1944.49,229.1 1945.05,230.193 1945.62,230.283 1946.19,227.455 1946.76,227.597 1947.33,227.146 1947.9,226.458 1948.46,227.956 1949.03,229.156 1949.6,227.491 1950.17,227.815 1950.74,229.275 1951.31,230.539 1951.87,232.825 1952.44,232.815 1953.01,231.755 1953.58,231.641 1954.15,231.787 1954.72,231.864 1955.28,229.791 1955.85,229.939 1956.42,230.982 1956.99,231.988 1957.56,234.066 1958.13,234.176 1958.69,231.721 1959.26,231.787 1959.83,232.736 1960.4,231.576 1960.97,232.85 1961.54,233.706 1962.1,234.764 1962.67,235.656 1963.24,236.276 1963.81,232.645 1964.38,231.697 1964.95,229.766 1965.51,228.902 1966.08,226.083 1966.65,228.581 1967.22,231.033 1967.79,229.06 1968.36,230.166 1968.92,235.376 1969.49,234.285 1970.06,235.171 1970.63,236.774 1971.2,237.458 1971.77,235.076 1972.34,234.588 1972.9,233.396 1973.47,233.329 1974.04,234.147 1974.61,231.803 1975.18,232.499 1975.75,233.456 1976.31,234.347 1976.88,233.149 1977.45,231.149 1978.02,231.288 1978.59,233.221 1979.16,233.073 1979.72,232.879 1980.29,232.758 1980.86,232.823 1981.43,232.621 1982,231.45 1982.57,231.306 1983.13,232.243 1983.7,234.01 1984.27,234.725 1984.84,235.294 1985.41,235.108 1985.98,234.773 1986.54,233.474 1987.11,233.319 1987.68,234.317 1988.25,235.218 1988.82,237.163 1989.39,236.787 1989.95,237.551 1990.52,238.079 1991.09,237.366 1991.66,236.726 1992.23,235.931 1992.8,236.506 1993.36,236.908 1993.93,237.425 1994.5,235.677 1995.07,235.071 1995.64,232.66 1996.21,231.475 1996.77,233.408 1997.34,232.909 1997.91,230.63 1998.48,231.473 1999.05,232.309 1999.62,231.894 2000.18,230.594 2000.75,231.713 2001.32,231.447 2001.89,232.508 2002.46,232.029 2003.03,231.84 2003.59,230.623 2004.16,230.67 2004.73,230.649 2005.3,229.437 2005.87,230.288 2006.44,229.081 2007,230.096 2007.57,231.2 2008.14,232.433 2008.71,232.211 2009.28,230.975 2009.85,232.095 2010.41,231.092 2010.98,227.828 2011.55,226.893 2012.12,226.993 2012.69,225.221 2013.26,226.441 2013.82,224.732 2014.39,225.185 2014.96,222.448 2015.53,222.883 2016.1,222.208 2016.67,223.895 2017.23,223.698 2017.8,226.269 2018.37,226.455 2018.94,227.702 2019.51,225.85 2020.08,225.219 2020.64,224.567 2021.21,223.869 2021.78,224.333 2022.35,225.833 2022.92,224.063 2023.49,224.893 2024.05,225.355 2024.62,225.831 2025.19,226.456 2025.76,226.034 2026.33,226.398 2026.9,228.988 2027.46,229.505 2028.03,229.843 2028.6,230.08 2029.17,230.38 2029.74,229.437 2030.31,231.751 2030.87,231.698 2031.44,230.709 2032.01,234.075 2032.58,233.94 2033.15,232.822 2033.72,234.85 2034.28,234.576 2034.85,233.571 2035.42,234.39 2035.99,233.965 2036.56,233.069 2037.13,233.927 2037.69,231.875 2038.26,232.978 2038.83,233.723 2039.4,234.633 2039.97,232.345 2040.54,232.298 2041.11,232.233 2041.67,233.2 2042.24,233.09 2042.81,232.852 2043.38,231.442 2043.95,232.361 2044.52,232.239 2045.08,233.34 2045.65,233.193 2046.22,233.099 2046.79,232.129 2047.36,231.051 2047.93,233.127 2048.49,233.991 2049.06,234.829 2049.63,235.835 2050.2,237.428 2050.77,233.744 2051.34,231.809 2051.9,228.795 2052.47,228.046 2053.04,228.186 2053.61,227.424 2054.18,228.645 2054.75,229.904 2055.31,231.149 2055.88,231.992 2056.45,233.108 2057.02,232.935 2057.59,233.843 2058.16,232.775 2058.72,234.845 2059.29,236.607 2059.86,235.913 2060.43,235.746 2061,236.414 2061.57,235.976 2062.13,235.57 2062.7,236.291 2063.27,235.772 2063.84,234.363 2064.41,234.021 2064.98,232.658 2065.54,231.302 2066.11,232.464 2066.68,231.25 2067.25,228.939 2067.82,228.877 2068.39,226.877 2068.95,224.983 2069.52,227.221 2070.09,228.495 2070.66,227.504 2071.23,229.659 2071.8,230.64 2072.36,229.729 2072.93,228.679 2073.5,228.78 2074.07,228.838 2074.64,228.816 2075.21,227.841 2075.77,228.087 2076.34,226.194 2076.91,223.348 2077.48,223.787 2078.05,223.05 2078.62,226.727 2079.18,227.108 2079.75,228.581 2080.32,231.735 2080.89,228.6 2081.46,225.754 2082.03,227.115 2082.59,226.394 2083.16,226.95 2083.73,227.395 2084.3,225.666 2084.87,227.252 2085.44,227.544 2086,229.721 2086.57,228.952 2087.14,229.212 2087.71,227.82 2088.28,229.081 2088.85,228.199 2089.41,228.699 2089.98,229.969 2090.55,228.962 2091.12,230.263 2091.69,230.403 2092.26,231.461 2092.82,230.466 2093.39,228.542 2093.96,229.846 2094.53,231.06 2095.1,233.165 2095.67,231.984 2096.23,231.082 2096.8,232.301 2097.37,233.347 2097.94,235.571 2098.51,235.483 2099.08,230.103 2099.64,230.233 2100.21,231.266 2100.78,231.572 2101.35,232.653 2101.92,231.529 2102.49,231.516 2103.05,230.675 2103.62,229.66 2104.19,229.974 2104.76,232.241 2105.33,233.289 2105.9,232.964 2106.46,233.014 2107.03,231.716 2107.6,231.798 2108.17,233.797 2108.74,231.757 2109.31,232.702 2109.87,232.7 2110.44,234.608 2111.01,234.372 2111.58,233.043 2112.15,233.923 2112.72,233.871 2113.29,231.697 2113.85,234.646 2114.42,237.557 2114.99,238.367 2115.56,236.768 2116.13,236.104 2116.7,235.732 2117.26,233.419 2117.83,234.478 2118.4,233.371 2118.97,232.026 2119.54,232.993 2120.11,230.689 2120.67,230.568 2121.24,230.561 2121.81,228.462 2122.38,229.633 2122.95,228.471 2123.52,227.737 2124.08,227.022 2124.65,229.188 2125.22,229.29 2125.79,229.562 2126.36,229.515 2126.93,229.519 2127.49,229.588 2128.06,229.752 2128.63,229.901 2129.2,228.82 2129.77,228.96 2130.34,230.21 2130.9,230.116 2131.47,231.239 2132.04,233.342 2132.61,235.246 2133.18,235.1 2133.75,233.81 2134.31,235.452 2134.88,233.914 2135.45,235.028 2136.02,233.802 2136.59,233.547 2137.16,232.487 2137.72,233.483 2138.29,234.242 2138.86,232.886 2139.43,231.703 2140,231.418 2140.57,232.521 2141.13,232.384 2141.7,232.318 2142.27,232.992 2142.84,231.874 2143.41,235.127 2143.98,234.076 2144.54,232.027 2145.11,231.98 2145.68,231.72 2146.25,231.628 2146.82,231.685 2147.39,229.508 2147.95,229.73 2148.52,229.868 2149.09,229.031 2149.66,229.251 2150.23,232.056 2150.8,231.949 2151.36,232.957 2151.93,233.895 2152.5,234.653 2153.07,234.265 2153.64,234.072 2154.21,232.654 2154.77,230.657 2155.34,230.619 2155.91,230.794 2156.48,231.64 2157.05,232.594 2157.62,232.315 2158.18,233.155 2158.75,232.918 2159.32,232.978 2159.89,231.733 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.024\n  with uncertainty of ± 0.0021384637102777365\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01263 ± (0.00281043, 0.00289878) (MC)\n  95% confidence interval: [-4.0182, -4.00726] (MC)\n  linear error propagation: -4.0132 ± 0.00284962\n  |δ_y| = |0.0023526| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.01262865189716, val_l = 0.005573913513492457, val_u = 0.005364068976767555)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip140\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip141\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip142\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1112.88 2211.02,1112.88 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,929.581 2211.02,929.581 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,746.278 2211.02,746.278 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,562.976 2211.02,562.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,379.673 2211.02,379.673 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,196.37 2211.02,196.37 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1112.88 365.751,1112.88 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,929.581 365.751,929.581 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,746.278 365.751,746.278 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,562.976 365.751,562.976 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,379.673 365.751,379.673 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,196.37 365.751,196.37 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M298.909 1098.68 Q295.298 1098.68 293.469 1102.25 Q291.664 1105.79 291.664 1112.92 Q291.664 1120.02 293.469 1123.59 Q295.298 1127.13 298.909 1127.13 Q302.543 1127.13 304.349 1123.59 Q306.177 1120.02 306.177 1112.92 Q306.177 1105.79 304.349 1102.25 Q302.543 1098.68 298.909 1098.68 M298.909 1094.98 Q304.719 1094.98 307.775 1099.59 Q310.853 1104.17 310.853 1112.92 Q310.853 1121.65 307.775 1126.25 Q304.719 1130.83 298.909 1130.83 Q293.099 1130.83 290.02 1126.25 Q286.964 1121.65 286.964 1112.92 Q286.964 1104.17 290.02 1099.59 Q293.099 1094.98 298.909 1094.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M259.557 942.926 L267.196 942.926 L267.196 916.56 L258.886 918.227 L258.886 913.968 L267.15 912.301 L271.826 912.301 L271.826 942.926 L279.465 942.926 L279.465 946.861 L259.557 946.861 L259.557 942.926 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 915.38 Q295.298 915.38 293.469 918.944 Q291.664 922.486 291.664 929.616 Q291.664 936.722 293.469 940.287 Q295.298 943.829 298.909 943.829 Q302.543 943.829 304.349 940.287 Q306.177 936.722 306.177 929.616 Q306.177 922.486 304.349 918.944 Q302.543 915.38 298.909 915.38 M298.909 911.676 Q304.719 911.676 307.775 916.282 Q310.853 920.866 310.853 929.616 Q310.853 938.342 307.775 942.949 Q304.719 947.532 298.909 947.532 Q293.099 947.532 290.02 942.949 Q286.964 938.342 286.964 929.616 Q286.964 920.866 290.02 916.282 Q293.099 911.676 298.909 911.676 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M262.775 759.623 L279.094 759.623 L279.094 763.558 L257.15 763.558 L257.15 759.623 Q259.812 756.869 264.395 752.239 Q269.002 747.586 270.182 746.244 Q272.428 743.72 273.307 741.984 Q274.21 740.225 274.21 738.535 Q274.21 735.781 272.266 734.045 Q270.344 732.308 267.242 732.308 Q265.043 732.308 262.59 733.072 Q260.159 733.836 257.381 735.387 L257.381 730.665 Q260.205 729.531 262.659 728.952 Q265.113 728.373 267.15 728.373 Q272.52 728.373 275.715 731.058 Q278.909 733.744 278.909 738.234 Q278.909 740.364 278.099 742.285 Q277.312 744.183 275.205 746.776 Q274.627 747.447 271.525 750.665 Q268.423 753.859 262.775 759.623 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 732.077 Q295.298 732.077 293.469 735.642 Q291.664 739.183 291.664 746.313 Q291.664 753.419 293.469 756.984 Q295.298 760.526 298.909 760.526 Q302.543 760.526 304.349 756.984 Q306.177 753.419 306.177 746.313 Q306.177 739.183 304.349 735.642 Q302.543 732.077 298.909 732.077 M298.909 728.373 Q304.719 728.373 307.775 732.98 Q310.853 737.563 310.853 746.313 Q310.853 755.04 307.775 759.646 Q304.719 764.23 298.909 764.23 Q293.099 764.23 290.02 759.646 Q286.964 755.04 286.964 746.313 Q286.964 737.563 290.02 732.98 Q293.099 728.373 298.909 728.373 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M272.914 561.622 Q276.27 562.339 278.145 564.608 Q280.043 566.876 280.043 570.209 Q280.043 575.325 276.525 578.126 Q273.006 580.927 266.525 580.927 Q264.349 580.927 262.034 580.487 Q259.742 580.07 257.289 579.214 L257.289 574.7 Q259.233 575.834 261.548 576.413 Q263.863 576.992 266.386 576.992 Q270.784 576.992 273.076 575.256 Q275.39 573.52 275.39 570.209 Q275.39 567.154 273.238 565.441 Q271.108 563.705 267.289 563.705 L263.261 563.705 L263.261 559.862 L267.474 559.862 Q270.923 559.862 272.752 558.497 Q274.58 557.108 274.58 554.515 Q274.58 551.853 272.682 550.441 Q270.807 549.006 267.289 549.006 Q265.367 549.006 263.168 549.422 Q260.969 549.839 258.33 550.719 L258.33 546.552 Q260.992 545.811 263.307 545.441 Q265.645 545.071 267.705 545.071 Q273.029 545.071 276.131 547.501 Q279.233 549.909 279.233 554.029 Q279.233 556.899 277.59 558.89 Q275.946 560.858 272.914 561.622 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 548.774 Q295.298 548.774 293.469 552.339 Q291.664 555.881 291.664 563.01 Q291.664 570.117 293.469 573.682 Q295.298 577.223 298.909 577.223 Q302.543 577.223 304.349 573.682 Q306.177 570.117 306.177 563.01 Q306.177 555.881 304.349 552.339 Q302.543 548.774 298.909 548.774 M298.909 545.071 Q304.719 545.071 307.775 549.677 Q310.853 554.26 310.853 563.01 Q310.853 571.737 307.775 576.344 Q304.719 580.927 298.909 580.927 Q293.099 580.927 290.02 576.344 Q286.964 571.737 286.964 563.01 Q286.964 554.26 290.02 549.677 Q293.099 545.071 298.909 545.071 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M271.594 366.467 L259.789 384.916 L271.594 384.916 L271.594 366.467 M270.367 362.393 L276.247 362.393 L276.247 384.916 L281.177 384.916 L281.177 388.805 L276.247 388.805 L276.247 396.953 L271.594 396.953 L271.594 388.805 L255.992 388.805 L255.992 384.291 L270.367 362.393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 365.472 Q295.298 365.472 293.469 369.037 Q291.664 372.578 291.664 379.708 Q291.664 386.814 293.469 390.379 Q295.298 393.921 298.909 393.921 Q302.543 393.921 304.349 390.379 Q306.177 386.814 306.177 379.708 Q306.177 372.578 304.349 369.037 Q302.543 365.472 298.909 365.472 M298.909 361.768 Q304.719 361.768 307.775 366.374 Q310.853 370.958 310.853 379.708 Q310.853 388.435 307.775 393.041 Q304.719 397.624 298.909 397.624 Q293.099 397.624 290.02 393.041 Q286.964 388.435 286.964 379.708 Q286.964 370.958 290.02 366.374 Q293.099 361.768 298.909 361.768 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M258.793 179.09 L277.15 179.09 L277.15 183.026 L263.076 183.026 L263.076 191.498 Q264.094 191.151 265.113 190.988 Q266.131 190.803 267.15 190.803 Q272.937 190.803 276.316 193.975 Q279.696 197.146 279.696 202.563 Q279.696 208.141 276.224 211.243 Q272.752 214.322 266.432 214.322 Q264.256 214.322 261.988 213.951 Q259.742 213.581 257.335 212.84 L257.335 208.141 Q259.418 209.275 261.641 209.831 Q263.863 210.387 266.34 210.387 Q270.344 210.387 272.682 208.28 Q275.02 206.174 275.02 202.563 Q275.02 198.951 272.682 196.845 Q270.344 194.738 266.34 194.738 Q264.465 194.738 262.59 195.155 Q260.738 195.572 258.793 196.451 L258.793 179.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 182.169 Q295.298 182.169 293.469 185.734 Q291.664 189.276 291.664 196.405 Q291.664 203.512 293.469 207.076 Q295.298 210.618 298.909 210.618 Q302.543 210.618 304.349 207.076 Q306.177 203.512 306.177 196.405 Q306.177 189.276 304.349 185.734 Q302.543 182.169 298.909 182.169 M298.909 178.465 Q304.719 178.465 307.775 183.072 Q310.853 187.655 310.853 196.405 Q310.853 205.132 307.775 209.738 Q304.719 214.322 298.909 214.322 Q293.099 214.322 290.02 209.738 Q286.964 205.132 286.964 196.405 Q286.964 187.655 290.02 183.072 Q293.099 178.465 298.909 178.465 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip142)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1250.53 400.199,1234.63 400.786,1105.93 401.372,1193.92 401.958,1069.46 402.545,955.091 403.131,848.8 403.718,755.395 404.304,755.046 404.891,753.737 405.477,752.728 406.063,670.11 406.65,594.432 407.236,593.661 407.823,593.808 408.409,529.404 408.995,529.028 409.582,471.876 410.168,472.679 410.755,424.219 411.341,381.592 411.927,341.753 412.514,307.794 413.1,275.529 413.687,286.918 414.273,260.768 414.86,238.808 415.446,219.895 416.032,265.532 416.619,274.906 417.205,257.571 417.792,244.279 418.378,255.514 418.964,244.301 419.551,258.321 420.137,249.062 420.724,242.576 421.31,239.68 421.896,255.361 422.483,253.565 423.069,251.591 423.656,267.84 424.242,285.156 424.829,288.768 425.415,305.385 426.001,321.555 426.588,337.471 427.174,353.257 427.761,370.01 428.347,395.105 428.933,410.892 429.52,416.678 430.106,441.04 430.693,448.286 431.279,464.545 431.865,488.522 432.452,509.899 433.038,531.049 433.625,544.342 434.211,551.2 434.798,595.787 435.384,607.774 435.97,636.334 436.557,653.094 437.143,657.665 437.73,662.683 438.316,673.765 438.902,684.931 439.489,691.644 440.075,711.962 440.662,722.762 441.248,738.454 441.835,748.652 442.421,755.446 443.007,770.621 443.594,780.878 444.18,787.349 444.767,801.601 445.353,811.217 445.939,823.791 446.526,832.913 447.112,838.805 447.699,851.901 448.285,863.689 448.871,872.51 449.458,877.949 450.044,884.05 450.631,890.354 451.217,896.229 451.804,910.825 452.39,919.502 452.976,927.376 453.563,941.548 454.149,956.814 454.736,964.122 455.322,976.471 455.908,983.006 456.495,992.652 457.081,996.536 457.668,1004.98 458.254,1013.54 458.84,1019.21 459.427,1027.48 460.013,1030.56 460.6,1038.01 461.186,1049.65 461.773,1054.03 462.359,1056.81 462.945,1059.88 463.532,1064.75 464.118,1071.37 464.705,1077.76 465.291,1079.84 465.877,1082.38 466.464,1088.59 467.05,1090.74 467.637,1094.95 468.223,1098.74 468.809,1100.67 469.396,1104.66 469.982,1108.56 470.569,1114.1 471.155,1117.72 471.742,1120.99 472.328,1122.72 472.914,1126.44 473.501,1131.64 474.087,1132.47 474.674,1135.64 475.26,1134.97 475.846,1138.02 476.433,1144.8 477.019,1145.77 477.606,1148.88 478.192,1151.46 478.778,1156.25 479.365,1157.23 479.951,1162.82 480.538,1163.36 481.124,1165.57 481.711,1166.01 482.297,1171.81 482.883,1173.9 483.47,1177.26 484.056,1182.42 484.643,1184.27 485.229,1187.46 485.815,1188.84 486.402,1190.25 486.988,1191.36 487.575,1194.17 488.161,1195.49 488.748,1195.28 489.334,1195.13 489.92,1198.13 490.507,1195.67 491.093,1193.52 491.68,1195.05 492.266,1196.86 492.852,1194.8 493.439,1194.6 494.025,1196.2 494.612,1197.88 495.198,1202.28 495.784,1203.56 496.371,1206.21 496.957,1203.95 497.544,1204.88 498.13,1204.33 498.717,1205.39 499.303,1204.81 499.889,1205.75 500.476,1205.3 501.062,1203.39 501.649,1202.79 502.235,1208.22 502.821,1209.48 503.408,1207.27 503.994,1206.66 504.581,1204.69 505.167,1207.6 505.753,1205.64 506.34,1211.58 506.926,1210.88 507.513,1208.51 508.099,1209.35 508.686,1206.11 509.272,1207.81 509.858,1207.83 510.445,1210.87 511.031,1210.27 511.618,1208.39 512.204,1206.71 512.79,1209.74 513.377,1209.32 513.963,1208.65 514.55,1211.16 515.136,1218.51 515.722,1216.35 516.309,1215.58 516.895,1216.5 517.482,1215.97 518.068,1218.37 518.655,1217.77 519.241,1216.87 519.827,1216.13 520.414,1216.89 521,1215.89 521.587,1216.84 522.173,1215.93 522.759,1216.68 523.346,1218.63 523.932,1218.02 524.519,1218.82 525.105,1215.03 525.691,1215.93 526.278,1218.32 526.864,1214.42 527.451,1213.89 528.037,1212.05 528.624,1213.35 529.21,1214.57 529.796,1215.65 530.383,1214.93 530.969,1216.05 531.556,1218.01 532.142,1217.59 532.728,1219.63 533.315,1219.11 533.901,1222.78 534.488,1223.3 535.074,1223.89 535.661,1222.77 536.247,1218.74 536.833,1218.3 537.42,1217.43 538.006,1216.9 538.593,1217.73 539.179,1218.28 539.765,1214.14 540.352,1214.09 540.938,1210.7 541.525,1211.91 542.111,1211.12 542.697,1212.02 543.284,1209.52 543.87,1209.43 544.457,1208.72 545.043,1206.86 545.63,1208.32 546.216,1206.35 546.802,1205.83 547.389,1206.96 547.975,1208.04 548.562,1209.28 549.148,1210.24 549.734,1209.8 550.321,1207.86 550.907,1207.5 551.494,1207.23 552.08,1209.97 552.666,1206.28 553.253,1202.83 553.839,1204.31 554.426,1204.16 555.012,1199.33 555.599,1202.52 556.185,1202.31 556.771,1201.23 557.358,1201.27 557.944,1204.57 558.531,1204.87 559.117,1205.02 559.703,1203.46 560.29,1205.02 560.876,1207.93 561.463,1207.58 562.049,1208.97 562.635,1208.62 563.222,1205.53 563.808,1201.66 564.395,1203.13 564.981,1201.44 565.568,1203.08 566.154,1204.31 566.74,1210.13 567.327,1209.71 567.913,1209.21 568.5,1208.96 569.086,1210.11 569.672,1209.45 570.259,1207.75 570.845,1209.19 571.432,1208.57 572.018,1209.43 572.605,1205.94 573.191,1205.93 573.777,1207.03 574.364,1205.35 574.95,1206.62 575.537,1207.61 576.123,1208.85 576.709,1211.61 577.296,1209.65 577.882,1212.26 578.469,1206.98 579.055,1207.82 579.641,1207.7 580.228,1208.66 580.814,1207.96 581.401,1201.72 581.987,1204.29 582.574,1204.19 583.16,1203.94 583.746,1203.92 584.333,1201.91 584.919,1201.68 585.506,1201.79 586.092,1203.58 586.678,1202.15 587.265,1200.56 587.851,1202.01 588.438,1200.45 589.024,1201.93 589.61,1203.52 590.197,1204.99 590.783,1203.33 591.37,1203.62 591.956,1204.89 592.543,1204.69 593.129,1204.37 593.715,1205.53 594.302,1205.17 594.888,1206.32 595.475,1208.86 596.061,1206.68 596.647,1209.18 597.234,1211.66 597.82,1212.4 598.407,1213.09 598.993,1211.96 599.579,1212.86 600.166,1212.37 600.752,1211.37 601.339,1209.37 601.925,1210.17 602.512,1209.69 603.098,1210.47 603.684,1210.01 604.271,1210.45 604.857,1211.53 605.444,1207.84 606.03,1208.78 606.616,1211.11 607.203,1213.55 607.789,1212.9 608.376,1215.08 608.962,1211.37 609.548,1208.74 610.135,1206.15 610.721,1202.81 611.308,1202.51 611.894,1200.68 612.481,1204.77 613.067,1201.32 613.653,1202.46 614.24,1204.05 614.826,1206.87 615.413,1208.05 615.999,1204.45 616.585,1205.18 617.172,1203.22 617.758,1202.47 618.345,1203.61 618.931,1204.85 619.518,1205.57 620.104,1204.91 620.69,1202.77 621.277,1202.52 621.863,1200.64 622.45,1198.72 623.036,1200.35 623.622,1200.51 624.209,1201.86 624.795,1198.44 625.382,1198.19 625.968,1198.57 626.554,1193.8 627.141,1194.05 627.727,1194.59 628.314,1190.41 628.9,1192.2 629.487,1190.95 630.073,1194.3 630.659,1194.01 631.246,1192.41 631.832,1195.63 632.419,1195.41 633.005,1196.91 633.591,1195.39 634.178,1193.69 634.764,1193.8 635.351,1192.47 635.937,1192.62 636.523,1195.42 637.11,1198.37 637.696,1201 638.283,1197.45 638.869,1198.73 639.456,1199.84 640.042,1199.27 640.628,1197.41 641.215,1197.34 641.801,1198.72 642.388,1197.04 642.974,1192.11 643.56,1192.24 644.147,1198.06 644.733,1197.79 645.32,1199.05 645.906,1198.65 646.492,1198.54 647.079,1200.09 647.665,1199.62 648.252,1200.57 648.838,1200.36 649.425,1198.8 650.011,1201.03 650.597,1200.87 651.184,1200.49 651.77,1201.63 652.357,1201.33 652.943,1203.81 653.529,1202.99 654.116,1200.96 654.702,1202.27 655.289,1204.62 655.875,1202.43 656.462,1203.6 657.048,1202.97 657.634,1202.07 658.221,1202 658.807,1201.73 659.394,1202.87 659.98,1200.64 660.566,1203.19 661.153,1201.11 661.739,1202.34 662.326,1202.13 662.912,1197.32 663.498,1197.02 664.085,1199.78 664.671,1197.75 665.258,1199.34 665.844,1197.5 666.431,1194.26 667.017,1195.83 667.603,1195.71 668.19,1200.11 668.776,1196.63 669.363,1195.27 669.949,1193.76 670.535,1192.48 671.122,1191.11 671.708,1189.41 672.295,1192.8 672.881,1192.34 673.467,1190.67 674.054,1192.42 674.64,1192.45 675.227,1195.27 675.813,1197.13 676.4,1197.01 676.986,1196.98 677.572,1196.63 678.159,1196.32 678.745,1196.26 679.332,1199.05 679.918,1198.85 680.504,1198.86 681.091,1200.14 681.677,1198.27 682.264,1199.36 682.85,1197.65 683.436,1195.78 684.023,1195.66 684.609,1194.44 685.196,1194.17 685.782,1194.3 686.369,1194.38 686.955,1198.64 687.541,1198.37 688.128,1199.68 688.714,1196.27 689.301,1192.86 689.887,1191.07 690.473,1192.94 691.06,1192.94 691.646,1194.73 692.233,1194.6 692.819,1193.22 693.405,1193.28 693.992,1191.74 694.578,1193.28 695.165,1194.6 695.751,1194.29 696.338,1194.06 696.924,1195.23 697.51,1196.79 698.097,1196.84 698.683,1196.63 699.27,1198.03 699.856,1196.31 700.442,1194.55 701.029,1196.2 701.615,1193.38 702.202,1190.48 702.788,1190.54 703.375,1189.11 703.961,1192.31 704.547,1190.93 705.134,1190.8 705.72,1189.33 706.307,1189.46 706.893,1186.25 707.479,1184.56 708.066,1183.45 708.652,1183.66 709.239,1185.38 709.825,1189.93 710.411,1191.6 710.998,1190.18 711.584,1190.53 712.171,1192.07 712.757,1196.4 713.344,1196.16 713.93,1196.24 714.516,1195.87 715.103,1196.93 715.689,1193.51 716.276,1194.64 716.862,1192.96 717.448,1192.84 718.035,1192.69 718.621,1192.64 719.208,1191.1 719.794,1192.69 720.38,1194.07 720.967,1193.92 721.553,1195.15 722.14,1191.83 722.726,1190.37 723.313,1192.13 723.899,1190.79 724.485,1193.9 725.072,1196.95 725.658,1195.32 726.245,1196.78 726.831,1196.74 727.417,1196.46 728.004,1194.44 728.59,1194.34 729.177,1195.75 729.763,1193.93 730.349,1197.03 730.936,1196.62 731.522,1193.11 732.109,1191.41 732.695,1195.97 733.282,1194.11 733.868,1191.31 734.454,1191.54 735.041,1191.61 735.627,1189.96 736.214,1190.19 736.8,1190.37 737.386,1190.38 737.973,1191.51 738.559,1189.74 739.146,1191.53 739.732,1191.57 740.318,1196.04 740.905,1194.54 741.491,1193.95 742.078,1196.85 742.664,1193.77 743.251,1192.13 743.837,1192.33 744.423,1192.37 745.01,1189.48 745.596,1191.28 746.183,1190.04 746.769,1189.99 747.355,1190.19 747.942,1190.36 748.528,1188.77 749.115,1188.72 749.701,1190.41 750.288,1188.88 750.874,1191.76 751.46,1192.99 752.047,1194.21 752.633,1193.76 753.22,1193.45 753.806,1193.39 754.392,1194.41 754.979,1190.73 755.565,1187.53 756.152,1187.75 756.738,1187.9 757.324,1189.61 757.911,1191.14 758.497,1192.36 759.084,1190.68 759.67,1192.19 760.257,1192.25 760.843,1190.84 761.429,1189.13 762.016,1188 762.602,1186.49 763.189,1184.91 763.775,1186.81 764.361,1187.12 764.948,1186.02 765.534,1189.31 766.121,1192.18 766.707,1192.2 767.293,1192.41 767.88,1192.25 768.466,1195.13 769.053,1194.73 769.639,1193.2 770.226,1194.43 770.812,1195.62 771.398,1192.66 771.985,1190.66 772.571,1192.33 773.158,1192.17 773.744,1191.88 774.33,1191.61 774.917,1193.05 775.503,1192.64 776.09,1192.36 776.676,1192.09 777.262,1192.07 777.849,1188.99 778.435,1189.33 779.022,1189.52 779.608,1196.94 780.195,1193.4 780.781,1194.89 781.367,1193.2 781.954,1191.78 782.54,1193.43 783.127,1194.77 783.713,1194.61 784.299,1195.52 784.886,1198.55 785.472,1197.78 786.059,1195.99 786.645,1194.22 787.232,1191.09 787.818,1192.62 788.404,1192.45 788.991,1192.3 789.577,1193.64 790.164,1194.81 790.75,1195.72 791.336,1193.83 791.923,1193.53 792.509,1191.64 793.096,1191.54 793.682,1189.69 794.268,1190.98 794.855,1192.36 795.441,1190.24 796.028,1193.26 796.614,1188.81 797.201,1191.65 797.787,1190.1 798.373,1191.79 798.96,1191.61 799.546,1190.11 800.133,1193.2 800.719,1194.46 801.305,1197.53 801.892,1195.4 802.478,1197.88 803.065,1195.9 803.651,1198.39 804.237,1197.9 804.824,1196.02 805.41,1193.15 805.997,1189.87 806.583,1188.29 807.17,1191.18 807.756,1193.82 808.342,1190.35 808.929,1185.78 809.515,1186.23 810.102,1183.65 810.688,1183.85 811.274,1182.6 811.861,1183.05 812.447,1180.28 813.034,1181.03 813.62,1181.45 814.206,1179.28 814.793,1178.18 815.379,1177.25 815.966,1176.4 816.552,1178.62 817.139,1177.96 817.725,1181.49 818.311,1183.51 818.898,1182.49 819.484,1185.79 820.071,1185.65 820.657,1182.94 821.243,1186.26 821.83,1186.51 822.416,1189.62 823.003,1188.11 823.589,1191.36 824.175,1188.37 824.762,1185.55 825.348,1185.74 825.935,1185.74 826.521,1187.52 827.108,1190.59 827.694,1188.96 828.28,1189.16 828.867,1189.17 829.453,1189.24 830.04,1190.74 830.626,1190.59 831.212,1192.32 831.799,1195.28 832.385,1193.31 832.972,1188.28 833.558,1189.82 834.145,1189.75 834.731,1187.09 835.317,1185.32 835.904,1188.55 836.49,1185.59 837.077,1184.63 837.663,1184.79 838.249,1183.47 838.836,1182.1 839.422,1184.35 840.009,1184.71 840.595,1186.32 841.181,1186.44 841.768,1186.86 842.354,1186.9 842.941,1188.31 843.527,1187.13 844.114,1188.31 844.7,1188.3 845.286,1191.33 845.873,1191.18 846.459,1191.23 847.046,1192.55 847.632,1193.63 848.218,1192.14 848.805,1191.89 849.391,1194.85 849.978,1192.89 850.564,1191.52 851.15,1194.67 851.737,1191.53 852.323,1189.87 852.91,1195.94 853.496,1196.82 854.083,1196.26 854.669,1196.05 855.255,1195.68 855.842,1195.31 856.428,1190.73 857.015,1190.32 857.601,1193.12 858.187,1194.33 858.774,1197.06 859.36,1194.97 859.947,1199.11 860.533,1199.64 861.119,1199.1 861.706,1196.81 862.292,1196.22 862.879,1194.42 863.465,1198.58 864.052,1197.72 864.638,1195.41 865.224,1195.01 865.811,1196.44 866.397,1191.62 866.984,1191.61 867.57,1191.04 868.156,1193.67 868.743,1192.05 869.329,1196.3 869.916,1196 870.502,1194.13 871.089,1196.63 871.675,1194.52 872.261,1196.01 872.848,1194.2 873.434,1192.14 874.021,1193.39 874.607,1197.46 875.193,1197.24 875.78,1197.94 876.366,1197.26 876.953,1195.31 877.539,1193.29 878.125,1194.52 878.712,1195.72 879.298,1191.98 879.885,1190.06 880.471,1188.24 881.058,1185 881.644,1182.16 882.23,1180.97 882.817,1182.77 883.403,1181.79 883.99,1181.95 884.576,1180.54 885.162,1185.13 885.749,1182.34 886.335,1180.96 886.922,1181.58 887.508,1178.96 888.094,1183.93 888.681,1182.29 889.267,1181.53 889.854,1181.82 890.44,1181.92 891.027,1182.38 891.613,1182.6 892.199,1182.9 892.786,1185.87 893.372,1187.25 893.959,1185.76 894.545,1185.92 895.131,1185.96 895.718,1185.9 896.304,1186.12 896.891,1184.85 897.477,1186.86 898.063,1185.52 898.65,1186.01 899.236,1184.48 899.823,1184.88 900.409,1185.07 900.996,1186.72 901.582,1186.81 902.168,1186.97 902.755,1183.94 903.341,1187.07 903.928,1193.18 904.514,1194.11 905.1,1193.43 905.687,1188.6 906.273,1188.74 906.86,1194.82 907.446,1196.17 908.032,1191.29 908.619,1190.87 909.205,1187.81 909.792,1186.19 910.378,1187.86 910.965,1186.23 911.551,1187.61 912.137,1190.23 912.724,1190.2 913.31,1188.67 913.897,1188.63 914.483,1188.5 915.069,1188.17 915.656,1188.07 916.242,1188.04 916.829,1189.81 917.415,1191.24 918.002,1189.83 918.588,1191.12 919.174,1189.16 919.761,1190.43 920.347,1192.19 920.934,1193.78 921.52,1193.36 922.106,1191.32 922.693,1193.99 923.279,1192.19 923.866,1190.27 924.452,1190.22 925.038,1192.72 925.625,1190.59 926.211,1192.13 926.798,1190.5 927.384,1191.93 927.971,1191.81 928.557,1192.95 929.143,1191.31 929.73,1192.55 930.316,1187.91 930.903,1192.44 931.489,1190.77 932.075,1187.68 932.662,1187.68 933.248,1184.68 933.835,1184.64 934.421,1183.13 935.007,1181.85 935.594,1185.15 936.18,1184.13 936.767,1187.23 937.353,1187.14 937.94,1187.29 938.526,1185.97 939.112,1188.95 939.699,1189.08 940.285,1189.34 940.872,1189.19 941.458,1187.48 942.044,1185.82 942.631,1184.3 943.217,1185.87 943.804,1186.21 944.39,1184.71 944.976,1184.71 945.563,1183.21 946.149,1183.35 946.736,1182.37 947.322,1178.19 947.909,1177.28 948.495,1182.26 949.081,1182.27 949.668,1184.09 950.254,1185.65 950.841,1184.48 951.427,1184.61 952.013,1180.32 952.6,1185.15 953.186,1188.55 953.773,1185.45 954.359,1185.49 954.945,1188.45 955.532,1191.54 956.118,1190 956.705,1188.67 957.291,1188.4 957.878,1188.2 958.464,1185.16 959.05,1182.34 959.637,1182.73 960.223,1181.75 960.81,1183.42 961.396,1183.54 961.982,1182.11 962.569,1181.02 963.155,1183.14 963.742,1183.52 964.328,1183.73 964.915,1183.8 965.501,1184.13 966.087,1182.7 966.674,1183.12 967.26,1184.84 967.847,1184.99 968.433,1186.73 969.019,1189.92 969.606,1190.03 970.192,1186.64 970.779,1183.67 971.365,1186.92 971.951,1184.06 972.538,1185.83 973.124,1185.56 973.711,1183.77 974.297,1185.6 974.884,1184.36 975.47,1182.97 976.056,1183.3 976.643,1188.05 977.229,1189.56 977.816,1189.46 978.402,1188.23 978.988,1188.4 979.575,1186.64 980.161,1188.28 980.748,1189.8 981.334,1188.19 981.92,1189.95 982.507,1185.45 983.093,1185.3 983.68,1185.56 984.266,1185.9 984.853,1186.16 985.439,1186.36 986.025,1185.1 986.612,1183.84 987.198,1185.58 987.785,1182.47 988.371,1184.58 988.957,1183.41 989.544,1183.65 990.13,1182.05 990.717,1182.33 991.303,1182.58 991.889,1184.52 992.476,1186.06 993.062,1184.96 993.649,1188.47 994.235,1188.48 994.822,1186.89 995.408,1188.28 995.994,1187.95 996.581,1187.76 997.167,1184.79 997.754,1180.72 998.34,1181.14 998.926,1180.1 999.513,1186.38 1000.1,1188.18 1000.69,1186.51 1001.27,1186.57 1001.86,1189.81 1002.44,1188.27 1003.03,1190.85 1003.62,1190.64 1004.2,1193.58 1004.79,1191.83 1005.38,1193.34 1005.96,1194.68 1006.55,1194.29 1007.14,1195.26 1007.72,1194.68 1008.31,1194.52 1008.9,1197.11 1009.48,1200.76 1010.07,1201.54 1010.65,1204 1011.24,1204.46 1011.83,1204.88 1012.41,1203.96 1013,1202.91 1013.59,1202.26 1014.17,1203.13 1014.76,1202.28 1015.35,1201.46 1015.93,1197.73 1016.52,1198.64 1017.11,1198.05 1017.69,1197.28 1018.28,1197.7 1018.86,1195.59 1019.45,1192.26 1020.04,1193.52 1020.62,1191.39 1021.21,1188.05 1021.8,1185.27 1022.38,1183.88 1022.97,1182.67 1023.56,1184.23 1024.14,1184.55 1024.73,1187.72 1025.32,1185.96 1025.9,1183.23 1026.49,1183.46 1027.07,1186.52 1027.66,1186.64 1028.25,1185.03 1028.83,1181.85 1029.42,1185.26 1030.01,1188.43 1030.59,1188.28 1031.18,1189.54 1031.77,1190.76 1032.35,1192.39 1032.94,1190.69 1033.52,1188.85 1034.11,1188.64 1034.7,1187.07 1035.28,1186.77 1035.87,1188.01 1036.46,1183.47 1037.04,1180.95 1037.63,1181.35 1038.22,1182.8 1038.8,1180.18 1039.39,1180.33 1039.98,1182.15 1040.56,1181.27 1041.15,1172.8 1041.73,1173.31 1042.32,1170.94 1042.91,1171.74 1043.49,1172.56 1044.08,1171.63 1044.67,1171.05 1045.25,1173.51 1045.84,1174.18 1046.43,1173.64 1047.01,1174.2 1047.6,1173.44 1048.19,1174.31 1048.77,1175 1049.36,1178.51 1049.94,1180.61 1050.53,1179.54 1051.12,1178.42 1051.7,1181.79 1052.29,1183.58 1052.88,1183.66 1053.46,1185.21 1054.05,1184.06 1054.64,1180.12 1055.22,1182.13 1055.81,1186.98 1056.39,1186.84 1056.98,1190.06 1057.57,1188.2 1058.15,1187.16 1058.74,1188.52 1059.33,1188.39 1059.91,1189.3 1060.5,1188.33 1061.09,1188.21 1061.67,1187.81 1062.26,1190.87 1062.85,1191 1063.43,1190.81 1064.02,1186.3 1064.6,1186.51 1065.19,1186.69 1065.78,1186.44 1066.36,1189.39 1066.95,1188.98 1067.54,1187.23 1068.12,1187.26 1068.71,1187.3 1069.3,1186.02 1069.88,1184.5 1070.47,1183.44 1071.06,1177.78 1071.64,1178.35 1072.23,1182 1072.81,1183.65 1073.4,1183.98 1073.99,1185.47 1074.57,1184.17 1075.16,1184.18 1075.75,1185.81 1076.33,1185.66 1076.92,1185.95 1077.51,1181.17 1078.09,1180.13 1078.68,1182.17 1079.26,1182.48 1079.85,1182.8 1080.44,1184.19 1081.02,1184.49 1081.61,1185.87 1082.2,1185.82 1082.78,1184.57 1083.37,1184.67 1083.96,1184.8 1084.54,1186.18 1085.13,1187.58 1085.72,1184.43 1086.3,1184.57 1086.89,1184.85 1087.47,1186.8 1088.06,1188.43 1088.65,1188.05 1089.23,1185.01 1089.82,1186.91 1090.41,1188.62 1090.99,1188.49 1091.58,1185.72 1092.17,1189.96 1092.75,1191.4 1093.34,1192.67 1093.93,1194.15 1094.51,1193.59 1095.1,1192.92 1095.68,1191.12 1096.27,1193.73 1096.86,1194.68 1097.44,1191.3 1098.03,1189.63 1098.62,1186.75 1099.2,1183.94 1099.79,1183.76 1100.38,1183.79 1100.96,1185.42 1101.55,1184.37 1102.14,1183.19 1102.72,1183.53 1103.31,1186.7 1103.89,1183.71 1104.48,1185.28 1105.07,1184.15 1105.65,1185.82 1106.24,1186.01 1106.83,1189.1 1107.41,1187.43 1108,1186.11 1108.59,1187.26 1109.17,1188.94 1109.76,1190.43 1110.34,1194.45 1110.93,1191.02 1111.52,1190.95 1112.1,1192.31 1112.69,1198.01 1113.28,1198.65 1113.86,1197.83 1114.45,1195.92 1115.04,1196.99 1115.62,1193.28 1116.21,1188.38 1116.8,1188.22 1117.38,1190.1 1117.97,1188.6 1118.55,1188.53 1119.14,1188.49 1119.73,1188.19 1120.31,1186.61 1120.9,1188.1 1121.49,1185.19 1122.07,1185.35 1122.66,1182.31 1123.25,1182.31 1123.83,1183.85 1124.42,1185.55 1125.01,1188.52 1125.59,1188.26 1126.18,1191.35 1126.76,1189.9 1127.35,1190.91 1127.94,1189.01 1128.52,1191.75 1129.11,1192.99 1129.7,1195.56 1130.28,1194.86 1130.87,1197.35 1131.46,1196.75 1132.04,1196.27 1132.63,1193.97 1133.21,1190.88 1133.8,1187.75 1134.39,1186.04 1134.97,1182.99 1135.56,1180.22 1136.15,1178.87 1136.73,1180.41 1137.32,1182.2 1137.91,1182.24 1138.49,1183.85 1139.08,1184.1 1139.67,1184.23 1140.25,1181.14 1140.84,1179.82 1141.42,1185.98 1142.01,1184.6 1142.6,1186.35 1143.18,1181.74 1143.77,1182.4 1144.36,1183.97 1144.94,1183.89 1145.53,1184.14 1146.12,1183.85 1146.7,1185.15 1147.29,1185.27 1147.88,1182.53 1148.46,1182.87 1149.05,1182.75 1149.63,1184.34 1150.22,1184.47 1150.81,1181.61 1151.39,1180.32 1151.98,1180.99 1152.57,1180.71 1153.15,1179.41 1153.74,1182.68 1154.33,1184.41 1154.91,1184.71 1155.5,1185.27 1156.09,1186.9 1156.67,1191.55 1157.26,1192.89 1157.84,1192.71 1158.43,1195.49 1159.02,1193.56 1159.6,1192.9 1160.19,1189.94 1160.78,1191.27 1161.36,1192.63 1161.95,1193.75 1162.54,1190.6 1163.12,1190.15 1163.71,1188.47 1164.29,1186.55 1164.88,1188.04 1165.47,1187.75 1166.05,1184.76 1166.64,1186.34 1167.23,1186.46 1167.81,1188 1168.4,1186.46 1168.99,1183.42 1169.57,1179.13 1170.16,1179.44 1170.75,1179.79 1171.33,1178.55 1171.92,1178.89 1172.5,1179.04 1173.09,1179.43 1173.68,1178.06 1174.26,1177.35 1174.85,1184.19 1175.44,1185.87 1176.02,1184.57 1176.61,1184.7 1177.2,1185.96 1177.78,1188.83 1178.37,1187.43 1178.96,1190.57 1179.54,1188.99 1180.13,1188.9 1180.71,1182.83 1181.3,1182.98 1181.89,1181.63 1182.47,1180.24 1183.06,1180.71 1183.65,1185.43 1184.23,1184.13 1184.82,1187.32 1185.41,1185.77 1185.99,1187.47 1186.58,1188.84 1187.16,1184.55 1187.75,1182.94 1188.34,1184.92 1188.92,1185.02 1189.51,1185.14 1190.1,1186.64 1190.68,1183.76 1191.27,1185.7 1191.86,1185.49 1192.44,1185.68 1193.03,1185.81 1193.62,1185.64 1194.2,1185.99 1194.79,1184.66 1195.37,1186.35 1195.96,1184.9 1196.55,1187.6 1197.13,1187.25 1197.72,1187.48 1198.31,1187.59 1198.89,1187.25 1199.48,1188.9 1200.07,1190.26 1200.65,1191.45 1201.24,1191.1 1201.83,1191.07 1202.41,1192.36 1203,1193.64 1203.58,1188.89 1204.17,1188.59 1204.76,1188.36 1205.34,1189.93 1205.93,1189.92 1206.52,1192.53 1207.1,1194.91 1207.69,1197.15 1208.28,1199.38 1208.86,1198.51 1209.45,1198 1210.03,1198.66 1210.62,1198.2 1211.21,1196.21 1211.79,1191.23 1212.38,1191.11 1212.97,1189.27 1213.55,1187.83 1214.14,1186.33 1214.73,1187.85 1215.31,1189.18 1215.9,1186.34 1216.49,1186.26 1217.07,1186.03 1217.66,1188.84 1218.24,1187.24 1218.83,1188.78 1219.42,1189.01 1220,1187.55 1220.59,1186.21 1221.18,1189.34 1221.76,1189.44 1222.35,1187.34 1222.94,1187.25 1223.52,1190.21 1224.11,1188.44 1224.7,1188.35 1225.28,1188.39 1225.87,1186.92 1226.45,1186.87 1227.04,1186.95 1227.63,1188.54 1228.21,1191.48 1228.8,1188.27 1229.39,1185.27 1229.97,1184.96 1230.56,1187.51 1231.15,1190.54 1231.73,1188.82 1232.32,1190.31 1232.91,1185.5 1233.49,1187.15 1234.08,1184.49 1234.66,1184.48 1235.25,1180.14 1235.84,1181.93 1236.42,1181.94 1237.01,1180.76 1237.6,1181.13 1238.18,1178.29 1238.77,1175.66 1239.36,1177.68 1239.94,1180.89 1240.53,1184.1 1241.11,1184.38 1241.7,1186.14 1242.29,1187.52 1242.87,1187.46 1243.46,1188.79 1244.05,1189.89 1244.63,1188.09 1245.22,1189.64 1245.81,1188.06 1246.39,1186.47 1246.98,1189.58 1247.57,1190.87 1248.15,1188.85 1248.74,1188.65 1249.32,1189.73 1249.91,1187.93 1250.5,1190.99 1251.08,1193.76 1251.67,1191.69 1252.26,1195.86 1252.84,1192.39 1253.43,1189.15 1254.02,1190.39 1254.6,1193.21 1255.19,1193.1 1255.78,1191.47 1256.36,1189.7 1256.95,1189.53 1257.53,1189.86 1258.12,1187.92 1258.71,1187.84 1259.29,1187.58 1259.88,1187.6 1260.47,1190.85 1261.05,1190.41 1261.64,1190.45 1262.23,1190.31 1262.81,1191.68 1263.4,1194.56 1263.98,1195.7 1264.57,1193.8 1265.16,1193.41 1265.74,1191.51 1266.33,1189.62 1266.92,1189.33 1267.5,1186.1 1268.09,1186.21 1268.68,1189 1269.26,1190.16 1269.85,1188.56 1270.44,1188.12 1271.02,1189.43 1271.61,1187.73 1272.19,1192.25 1272.78,1193.36 1273.37,1192.87 1273.95,1192.41 1274.54,1190.85 1275.13,1190.42 1275.71,1186.76 1276.3,1186.47 1276.89,1183.59 1277.47,1183.75 1278.06,1185.16 1278.65,1187.99 1279.23,1187.99 1279.82,1184.7 1280.4,1186.42 1280.99,1186.58 1281.58,1189.7 1282.16,1186.55 1282.75,1186.82 1283.34,1186.92 1283.92,1185.56 1284.51,1185.63 1285.1,1186.95 1285.68,1187.01 1286.27,1186.99 1286.86,1188.42 1287.44,1188.2 1288.03,1188.06 1288.61,1189.46 1289.2,1190.72 1289.79,1192.03 1290.37,1191.52 1290.96,1191.26 1291.55,1195.6 1292.13,1196.52 1292.72,1196.1 1293.31,1197.18 1293.89,1196.58 1294.48,1194.47 1295.06,1194.16 1295.65,1196.65 1296.24,1190.07 1296.82,1189.79 1297.41,1188.23 1298,1188.06 1298.58,1187.89 1299.17,1187.83 1299.76,1183.44 1300.34,1182.12 1300.93,1180.94 1301.52,1181.17 1302.1,1184.35 1302.69,1183.2 1303.27,1182.31 1303.86,1182.48 1304.45,1182.25 1305.03,1183.86 1305.62,1183.99 1306.21,1185.66 1306.79,1181.17 1307.38,1181.4 1307.97,1181.77 1308.55,1181.85 1309.14,1185.4 1309.73,1186.85 1310.31,1186.68 1310.9,1183.87 1311.48,1180.99 1312.07,1184.31 1312.66,1185.81 1313.24,1192.03 1313.83,1191.88 1314.42,1191.73 1315,1188.67 1315.59,1188.51 1316.18,1188.6 1316.76,1189.87 1317.35,1189.49 1317.93,1189.27 1318.52,1187.63 1319.11,1187.79 1319.69,1184.88 1320.28,1183.31 1320.87,1181.95 1321.45,1183.85 1322.04,1185.32 1322.63,1182.57 1323.21,1184.22 1323.8,1179.86 1324.39,1183.32 1324.97,1186.63 1325.56,1185.07 1326.14,1179.12 1326.73,1180.97 1327.32,1182.94 1327.9,1181.83 1328.49,1182.01 1329.08,1180.71 1329.66,1179.45 1330.25,1180.15 1330.84,1179.26 1331.42,1181.13 1332.01,1182.82 1332.6,1183.01 1333.18,1185.89 1333.77,1182.84 1334.35,1184.23 1334.94,1184.35 1335.53,1187.49 1336.11,1186.96 1336.7,1185.57 1337.29,1187.2 1337.87,1185.67 1338.46,1185.73 1339.05,1185.48 1339.63,1184.36 1340.22,1181.7 1340.8,1180.36 1341.39,1182.34 1341.98,1182.87 1342.56,1183.21 1343.15,1182.3 1343.74,1185.77 1344.32,1185.92 1344.91,1184.53 1345.5,1184.73 1346.08,1184.89 1346.67,1186.71 1347.26,1186.45 1347.84,1187.82 1348.43,1186.2 1349.01,1187.55 1349.6,1187.5 1350.19,1186.05 1350.77,1186.07 1351.36,1187.54 1351.95,1189 1352.53,1183.04 1353.12,1187.73 1353.71,1187.75 1354.29,1190.84 1354.88,1190.79 1355.47,1190.6 1356.05,1194.65 1356.64,1194.22 1357.22,1193.78 1357.81,1194.9 1358.4,1194.54 1358.98,1194.33 1359.57,1192.64 1360.16,1189.63 1360.74,1186.32 1361.33,1184.83 1361.92,1186.31 1362.5,1184.76 1363.09,1184.54 1363.68,1184.52 1364.26,1189.26 1364.85,1190.45 1365.43,1188.69 1366.02,1194.45 1366.61,1192.59 1367.19,1195.21 1367.78,1193.28 1368.37,1191.64 1368.95,1188.54 1369.54,1188.67 1370.13,1185.65 1370.71,1187.15 1371.3,1188.93 1371.88,1188.74 1372.47,1187.48 1373.06,1188.83 1373.64,1187.23 1374.23,1187.3 1374.82,1188.52 1375.4,1188.43 1375.99,1191 1376.58,1192.3 1377.16,1195.09 1377.75,1193 1378.34,1196.96 1378.92,1196.61 1379.51,1193.19 1380.09,1193.13 1380.68,1190.99 1381.27,1190.68 1381.85,1189.14 1382.44,1189.12 1383.03,1190.31 1383.61,1186.67 1384.2,1183.5 1384.79,1185.13 1385.37,1185.47 1385.96,1186.99 1386.55,1186.87 1387.13,1183.52 1387.72,1185.27 1388.3,1188.1 1388.89,1184.92 1389.48,1185.05 1390.06,1181.9 1390.65,1186.55 1391.24,1188.2 1391.82,1186.74 1392.41,1184.97 1393,1185.13 1393.58,1186.23 1394.17,1184.69 1394.75,1184.66 1395.34,1184.45 1395.93,1184.88 1396.51,1188.06 1397.1,1186.33 1397.69,1189.71 1398.27,1185.13 1398.86,1180.64 1399.45,1182.24 1400.03,1181.04 1400.62,1181.26 1401.21,1181.66 1401.79,1183.54 1402.38,1183.72 1402.96,1185.24 1403.55,1183.38 1404.14,1185.07 1404.72,1183.62 1405.31,1185.21 1405.9,1185.04 1406.48,1184.15 1407.07,1184.15 1407.66,1184.27 1408.24,1183.09 1408.83,1183.18 1409.42,1183.43 1410,1181.53 1410.59,1181.62 1411.17,1184.87 1411.76,1186.66 1412.35,1183.73 1412.93,1185.13 1413.52,1183.73 1414.11,1180.55 1414.69,1178 1415.28,1182.9 1415.87,1182.95 1416.45,1182.8 1417.04,1182.99 1417.63,1183.12 1418.21,1183.52 1418.8,1183.88 1419.38,1184 1419.97,1185.62 1420.56,1184.22 1421.14,1183.03 1421.73,1181.8 1422.32,1180.91 1422.9,1182.73 1423.49,1186 1424.08,1189.18 1424.66,1190.55 1425.25,1188.62 1425.83,1188.53 1426.42,1188.76 1427.01,1190.01 1427.59,1188.36 1428.18,1191.34 1428.77,1188.17 1429.35,1186.76 1429.94,1185.45 1430.53,1185.59 1431.11,1187.18 1431.7,1185.91 1432.29,1183.18 1432.87,1182.24 1433.46,1179.2 1434.04,1179.52 1434.63,1181.56 1435.22,1178.41 1435.8,1178.94 1436.39,1178.04 1436.98,1180.03 1437.56,1180.54 1438.15,1181.1 1438.74,1181.41 1439.32,1181.78 1439.91,1180.56 1440.5,1182.48 1441.08,1181.28 1441.67,1179.94 1442.25,1181.53 1442.84,1183.04 1443.43,1181.82 1444.01,1183.41 1444.6,1183.73 1445.19,1182.33 1445.77,1181.18 1446.36,1179.84 1446.95,1175.79 1447.53,1176.49 1448.12,1178.52 1448.7,1177.29 1449.29,1177.99 1449.88,1177.07 1450.46,1179.29 1451.05,1179.46 1451.64,1182.86 1452.22,1186.02 1452.81,1187.25 1453.4,1187.25 1453.98,1185.7 1454.57,1185.91 1455.16,1188.79 1455.74,1188.45 1456.33,1185.56 1456.91,1185.71 1457.5,1188.98 1458.09,1188.98 1458.67,1188.92 1459.26,1188.69 1459.85,1191.51 1460.43,1192.55 1461.02,1189.47 1461.61,1189.86 1462.19,1192.72 1462.78,1192.59 1463.37,1198.06 1463.95,1195.82 1464.54,1196.72 1465.12,1191.81 1465.71,1191.51 1466.3,1192.73 1466.88,1192.32 1467.47,1193.5 1468.06,1192.95 1468.64,1192.5 1469.23,1190.87 1469.82,1192.08 1470.4,1187.25 1470.99,1187.56 1471.57,1187.61 1472.16,1184.78 1472.75,1183.4 1473.33,1179.47 1473.92,1181.6 1474.51,1181.81 1475.09,1183.47 1475.68,1183.59 1476.27,1183.85 1476.85,1183.96 1477.44,1189.83 1478.03,1189.48 1478.61,1187.71 1479.2,1192.18 1479.78,1191.98 1480.37,1191.57 1480.96,1191.19 1481.54,1187.71 1482.13,1184.53 1482.72,1184.92 1483.3,1182.01 1483.89,1181.98 1484.48,1182.52 1485.06,1187.1 1485.65,1187.1 1486.24,1188.51 1486.82,1189.85 1487.41,1189.38 1487.99,1187.85 1488.58,1187.93 1489.17,1186.71 1489.75,1184.97 1490.34,1184.94 1490.93,1183.55 1491.51,1180.34 1492.1,1183.71 1492.69,1183.92 1493.27,1185.26 1493.86,1187.07 1494.45,1185.66 1495.03,1187.18 1495.62,1188.78 1496.2,1188.78 1496.79,1188.38 1497.38,1188.22 1497.96,1191.09 1498.55,1192.55 1499.14,1195.04 1499.72,1197.56 1500.31,1197.02 1500.9,1199.55 1501.48,1195.93 1502.07,1193.97 1502.65,1193.54 1503.24,1190.55 1503.83,1189.92 1504.41,1189.62 1505,1186.33 1505.59,1187.71 1506.17,1187.27 1506.76,1185.25 1507.35,1183.64 1507.93,1188.32 1508.52,1190 1509.11,1191.37 1509.69,1192.69 1510.28,1192.39 1510.86,1192.14 1511.45,1190.64 1512.04,1187.49 1512.62,1187.58 1513.21,1187.41 1513.8,1187.77 1514.38,1184.95 1514.97,1184.85 1515.56,1183.62 1516.14,1182.42 1516.73,1181.16 1517.32,1177.1 1517.9,1177.46 1518.49,1174.59 1519.07,1175.38 1519.66,1177.4 1520.25,1173.25 1520.83,1175.45 1521.42,1177.87 1522.01,1178.6 1522.59,1182.25 1523.18,1182.56 1523.77,1180.1 1524.35,1183.74 1524.94,1183.87 1525.52,1185.43 1526.11,1185.29 1526.7,1188.26 1527.28,1191.03 1527.87,1191.08 1528.46,1193.47 1529.04,1192.12 1529.63,1190.53 1530.22,1190.08 1530.8,1188.31 1531.39,1185.55 1531.98,1185.83 1532.56,1182.87 1533.15,1185.86 1533.73,1188.67 1534.32,1188.58 1534.91,1189.96 1535.49,1191.31 1536.08,1188.24 1536.67,1187.83 1537.25,1186.31 1537.84,1184.84 1538.43,1183.57 1539.01,1183.93 1539.6,1185.92 1540.19,1187.25 1540.77,1187.42 1541.36,1188.79 1541.94,1187.03 1542.53,1186.99 1543.12,1183.98 1543.7,1185.62 1544.29,1184.13 1544.88,1184.24 1545.46,1184.39 1546.05,1186.35 1546.64,1184.82 1547.22,1187.9 1547.81,1184.86 1548.4,1188.28 1548.98,1187.15 1549.57,1185.67 1550.15,1190.12 1550.74,1193.01 1551.33,1189.47 1551.91,1190.82 1552.5,1189.78 1553.09,1189.53 1553.67,1189.39 1554.26,1184.6 1554.85,1187.68 1555.43,1190.56 1556.02,1185.88 1556.6,1187.78 1557.19,1184.64 1557.78,1186.42 1558.36,1186.46 1558.95,1181.99 1559.54,1184.83 1560.12,1186.59 1560.71,1186.93 1561.3,1185.04 1561.88,1181.96 1562.47,1181.07 1563.06,1181.19 1563.64,1182.71 1564.23,1184.54 1564.81,1184.55 1565.4,1186.25 1565.99,1186.44 1566.57,1184.78 1567.16,1184.76 1567.75,1184.39 1568.33,1187.65 1568.92,1185.99 1569.51,1185.51 1570.09,1185.58 1570.68,1187.11 1571.27,1185.64 1571.85,1187.41 1572.44,1185.94 1573.02,1190.28 1573.61,1191.46 1574.2,1191.11 1574.78,1189.39 1575.37,1188.81 1575.96,1186.82 1576.54,1189.92 1577.13,1191.06 1577.72,1195.17 1578.3,1191.72 1578.89,1186.94 1579.47,1187.04 1580.06,1186.91 1580.65,1185.48 1581.23,1185.55 1581.82,1185.81 1582.41,1186.97 1582.99,1190.04 1583.58,1191.22 1584.17,1189.29 1584.75,1189.46 1585.34,1189.4 1585.93,1187.76 1586.51,1187.84 1587.1,1187.9 1587.68,1186.42 1588.27,1189.38 1588.86,1190.63 1589.44,1193.18 1590.03,1194.38 1590.62,1192.67 1591.2,1192.49 1591.79,1189.27 1592.38,1189.4 1592.96,1189.31 1593.55,1190.9 1594.14,1190.5 1594.72,1188.77 1595.31,1188.74 1595.89,1190.06 1596.48,1189.94 1597.07,1189.48 1597.65,1186.24 1598.24,1186.2 1598.83,1186.37 1599.41,1187.72 1600,1190.44 1600.59,1191.46 1601.17,1192.82 1601.76,1195.63 1602.34,1195.35 1602.93,1195.35 1603.52,1193.44 1604.1,1193.17 1604.69,1188.51 1605.28,1189.85 1605.86,1190.98 1606.45,1190.6 1607.04,1190.3 1607.62,1187.47 1608.21,1188.72 1608.8,1188.33 1609.38,1191.09 1609.97,1189.14 1610.55,1189.14 1611.14,1190.41 1611.73,1190 1612.31,1183.8 1612.9,1191.4 1613.49,1189.72 1614.07,1192.51 1614.66,1192.45 1615.25,1193.46 1615.83,1192.87 1616.42,1190.93 1617.01,1189.44 1617.59,1187.96 1618.18,1190.67 1618.76,1191.8 1619.35,1193.1 1619.94,1194.27 1620.52,1194.97 1621.11,1189.94 1621.7,1189.51 1622.28,1192.13 1622.87,1193.1 1623.46,1188.01 1624.04,1184.8 1624.63,1182.7 1625.22,1182.9 1625.8,1183.14 1626.39,1181.51 1626.97,1180.33 1627.56,1178.77 1628.15,1177.63 1628.73,1178.21 1629.32,1180.14 1629.91,1180.3 1630.49,1177.5 1631.08,1181.05 1631.67,1181.25 1632.25,1178.73 1632.84,1179.26 1633.42,1180.98 1634.01,1177 1634.6,1175.04 1635.18,1174.39 1635.77,1173.94 1636.36,1174.64 1636.94,1173.8 1637.53,1174.2 1638.12,1174.75 1638.7,1175.5 1639.29,1176.17 1639.88,1173.66 1640.46,1174.15 1641.05,1176.57 1641.63,1176.96 1642.22,1177.69 1642.81,1179.44 1643.39,1179.97 1643.98,1180.42 1644.57,1180.67 1645.15,1181.11 1645.74,1180.6 1646.33,1179.57 1646.91,1178.67 1647.5,1179.15 1648.09,1178.17 1648.67,1177.27 1649.26,1173.37 1649.84,1172.24 1650.43,1171.65 1651.02,1169.42 1651.6,1171.77 1652.19,1172.54 1652.78,1173.28 1653.36,1171.09 1653.95,1172.14 1654.54,1177.66 1655.12,1179.76 1655.71,1183.44 1656.29,1183.59 1656.88,1182.3 1657.47,1183.15 1658.05,1181.8 1658.64,1180.35 1659.23,1179.29 1659.81,1181.34 1660.4,1181.92 1660.99,1182.61 1661.57,1182.59 1662.16,1182.81 1662.75,1184.16 1663.33,1184.76 1663.92,1186.18 1664.5,1186.36 1665.09,1189.55 1665.68,1189.63 1666.26,1190.93 1666.85,1189.32 1667.44,1192.25 1668.02,1192.21 1668.61,1192.28 1669.2,1193.47 1669.78,1193.36 1670.37,1192.94 1670.96,1192.34 1671.54,1192.22 1672.13,1195.2 1672.71,1193.18 1673.3,1192.93 1673.89,1192.51 1674.47,1193.55 1675.06,1193.2 1675.65,1192.93 1676.23,1192.8 1676.82,1192.94 1677.41,1192.63 1677.99,1187.75 1678.58,1186.16 1679.17,1186.1 1679.75,1186.21 1680.34,1186.52 1680.92,1190.65 1681.51,1188.89 1682.1,1188.81 1682.68,1185.44 1683.27,1185.39 1683.86,1188.37 1684.44,1188.6 1685.03,1186.73 1685.62,1188.11 1686.2,1188.14 1686.79,1189.19 1687.37,1193.33 1687.96,1193.04 1688.55,1190.83 1689.13,1190.58 1689.72,1191.82 1690.31,1189.86 1690.89,1192.56 1691.48,1192.21 1692.07,1193.39 1692.65,1191.59 1693.24,1186.83 1693.83,1191.1 1694.41,1189.41 1695,1189.27 1695.58,1188.82 1696.17,1188.59 1696.76,1188.69 1697.34,1191.52 1697.93,1191.3 1698.52,1191.42 1699.1,1192.67 1699.69,1190.67 1700.28,1190.23 1700.86,1188.63 1701.45,1187.14 1702.04,1186.77 1702.62,1184.86 1703.21,1181.65 1703.79,1183.21 1704.38,1184.93 1704.97,1186.41 1705.55,1183.6 1706.14,1179.37 1706.73,1173.65 1707.31,1176.25 1707.9,1175.42 1708.49,1175.94 1709.07,1179.46 1709.66,1181.19 1710.24,1182.83 1710.83,1181.48 1711.42,1182.02 1712,1182.27 1712.59,1182.74 1713.18,1182.99 1713.76,1184.65 1714.35,1184.51 1714.94,1184.6 1715.52,1186.01 1716.11,1187.51 1716.7,1187.65 1717.28,1187.67 1717.87,1184.53 1718.45,1184.59 1719.04,1185.71 1719.63,1185.95 1720.21,1184.76 1720.8,1185.08 1721.39,1185.16 1721.97,1186.33 1722.56,1187.27 1723.15,1187.52 1723.73,1187.57 1724.32,1185.88 1724.91,1185.87 1725.49,1185.7 1726.08,1184.21 1726.66,1187.25 1727.25,1182.79 1727.84,1188.95 1728.42,1190.44 1729.01,1191.79 1729.6,1191.46 1730.18,1191.42 1730.77,1189.53 1731.36,1189.45 1731.94,1192.35 1732.53,1191.92 1733.11,1191.61 1733.7,1192.74 1734.29,1194.1 1734.87,1190.92 1735.46,1189.66 1736.05,1190.93 1736.63,1190.6 1737.22,1190.43 1737.81,1188.82 1738.39,1187.12 1738.98,1184.07 1739.57,1184.28 1740.15,1183.04 1740.74,1183.07 1741.32,1183.25 1741.91,1184.72 1742.5,1184.75 1743.08,1184.59 1743.67,1186.17 1744.26,1184.53 1744.84,1184.86 1745.43,1186.5 1746.02,1187.87 1746.6,1187.85 1747.19,1184.85 1747.78,1184.79 1748.36,1183.3 1748.95,1183.53 1749.53,1183.72 1750.12,1180.71 1750.71,1179.58 1751.29,1178.49 1751.88,1176.07 1752.47,1178.04 1753.05,1177.14 1753.64,1174.84 1754.23,1175.42 1754.81,1175.62 1755.4,1176.23 1755.99,1178.31 1756.57,1181.6 1757.16,1183.37 1757.74,1183.44 1758.33,1183.72 1758.92,1183.71 1759.5,1184.97 1760.09,1184.98 1760.68,1186.63 1761.26,1188.11 1761.85,1190.94 1762.44,1192.26 1763.02,1190.57 1763.61,1191.73 1764.19,1191.79 1764.78,1190.26 1765.37,1187.28 1765.95,1190.14 1766.54,1188.78 1767.13,1190.23 1767.71,1189.93 1768.3,1191.17 1768.89,1189.1 1769.47,1193.57 1770.06,1194.66 1770.65,1195.63 1771.23,1193.9 1771.82,1196.41 1772.4,1195.84 1772.99,1195.13 1773.58,1196.02 1774.16,1192.5 1774.75,1190.6 1775.34,1190.08 1775.92,1188.23 1776.51,1186.65 1777.1,1186.36 1777.68,1189.43 1778.27,1188.02 1778.86,1186.62 1779.44,1186.69 1780.03,1183.56 1780.61,1183.85 1781.2,1184.07 1781.79,1187.3 1782.37,1188.78 1782.96,1188.76 1783.55,1191.27 1784.13,1190.93 1784.72,1189.22 1785.31,1187.73 1785.89,1185.79 1786.48,1187.25 1787.06,1188.83 1787.65,1187.11 1788.24,1185.71 1788.82,1185.86 1789.41,1185.88 1790,1182.88 1790.58,1181.64 1791.17,1183.64 1791.76,1182.35 1792.34,1179.71 1792.93,1181.6 1793.52,1187.93 1794.1,1190.98 1794.69,1192.1 1795.27,1191.94 1795.86,1193.27 1796.45,1194.2 1797.03,1199.44 1797.62,1198.89 1798.21,1195.23 1798.79,1196.31 1799.38,1196.17 1799.97,1194.43 1800.55,1189.87 1801.14,1185.05 1801.73,1185.13 1802.31,1188.37 1802.9,1185.29 1803.48,1187.09 1804.07,1190.22 1804.66,1189.99 1805.24,1191.1 1805.83,1190.97 1806.42,1192.27 1807,1191.72 1807.59,1191.34 1808.18,1189.6 1808.76,1192.52 1809.35,1192.44 1809.94,1192.72 1810.52,1193.96 1811.11,1191.81 1811.69,1193.14 1812.28,1192.78 1812.87,1195.24 1813.45,1194.78 1814.04,1188.58 1814.63,1185.64 1815.21,1187.06 1815.8,1187.23 1816.39,1191.27 1816.97,1190.84 1817.56,1192.12 1818.14,1191.77 1818.73,1189.91 1819.32,1189.74 1819.9,1188.16 1820.49,1191.02 1821.08,1189.05 1821.66,1187.24 1822.25,1182.68 1822.84,1181.28 1823.42,1184.32 1824.01,1184.55 1824.6,1183.26 1825.18,1183.34 1825.77,1183.42 1826.35,1186.46 1826.94,1186.49 1827.53,1184.82 1828.11,1181.83 1828.7,1180.59 1829.29,1180.93 1829.87,1178.12 1830.46,1176.93 1831.05,1177.78 1831.63,1179.82 1832.22,1181.91 1832.81,1183.62 1833.39,1181.13 1833.98,1181.6 1834.56,1185.11 1835.15,1185.2 1835.74,1182.33 1836.32,1184.01 1836.91,1188.73 1837.5,1189.1 1838.08,1185.93 1838.67,1187.38 1839.26,1188.66 1839.84,1188.43 1840.43,1188.25 1841.01,1188.29 1841.6,1188.13 1842.19,1186.91 1842.77,1188.37 1843.36,1189.81 1843.95,1191.34 1844.53,1191.2 1845.12,1191 1845.71,1189.2 1846.29,1187.24 1846.88,1187.39 1847.47,1188.83 1848.05,1188.61 1848.64,1188.12 1849.22,1189.41 1849.81,1187.68 1850.4,1185.69 1850.98,1185.59 1851.57,1185.51 1852.16,1184.08 1852.74,1184.15 1853.33,1185.55 1853.92,1185.59 1854.5,1185.87 1855.09,1181.39 1855.68,1180.56 1856.26,1181.11 1856.85,1181.22 1857.43,1182.53 1858.02,1184.02 1858.61,1184.04 1859.19,1186.1 1859.78,1189.23 1860.37,1187.62 1860.95,1186.09 1861.54,1187.67 1862.13,1189.01 1862.71,1189.02 1863.3,1191.78 1863.88,1191.59 1864.47,1191.77 1865.06,1189.85 1865.64,1188.41 1866.23,1188.33 1866.82,1188.1 1867.4,1189.7 1867.99,1192.62 1868.58,1192.08 1869.16,1191.69 1869.75,1189.93 1870.34,1191.25 1870.92,1189.5 1871.51,1186.31 1872.09,1186.39 1872.68,1186.11 1873.27,1187.79 1873.85,1188.99 1874.44,1190.11 1875.03,1192.7 1875.61,1195.56 1876.2,1194.01 1876.79,1193.86 1877.37,1192.33 1877.96,1189.15 1878.55,1189.1 1879.13,1189.07 1879.72,1190.14 1880.3,1188.69 1880.89,1190.07 1881.48,1189.78 1882.06,1187.83 1882.65,1186.1 1883.24,1183.31 1883.82,1185.28 1884.41,1188.34 1885,1188.09 1885.58,1188.02 1886.17,1187.93 1886.76,1184.81 1887.34,1187.56 1887.93,1188.67 1888.51,1186.87 1889.1,1186.37 1889.69,1185 1890.27,1186.63 1890.86,1185.12 1891.45,1186.84 1892.03,1185.44 1892.62,1185.49 1893.21,1182.87 1893.79,1180.11 1894.38,1181.73 1894.96,1181.62 1895.55,1181.93 1896.14,1183.73 1896.72,1184.03 1897.31,1182.76 1897.9,1182.82 1898.48,1183.04 1899.07,1183.3 1899.66,1183.2 1900.24,1183.11 1900.83,1183.39 1901.42,1182.25 1902,1182.23 1902.59,1181.05 1903.17,1181.04 1903.76,1185.74 1904.35,1182.82 1904.93,1186.05 1905.52,1187.52 1906.11,1184.82 1906.69,1185.04 1907.28,1186.67 1907.87,1188.25 1908.45,1187.83 1909.04,1190.65 1909.63,1187.41 1910.21,1187.2 1910.8,1185.46 1911.38,1183.49 1911.97,1182.1 1912.56,1184.13 1913.14,1185.4 1913.73,1182.23 1914.32,1183.93 1914.9,1188.88 1915.49,1188.59 1916.08,1190.21 1916.66,1190.06 1917.25,1190.15 1917.83,1191.38 1918.42,1191.14 1919.01,1190.81 1919.59,1193.71 1920.18,1193.26 1920.77,1188.04 1921.35,1189.25 1921.94,1187.74 1922.53,1187.56 1923.11,1187.71 1923.7,1184.26 1924.29,1185.74 1924.87,1190.53 1925.46,1188.65 1926.04,1191.69 1926.63,1193 1927.22,1192.56 1927.8,1190.73 1928.39,1190.48 1928.98,1188.67 1929.56,1188.89 1930.15,1187.25 1930.74,1188.8 1931.32,1184.7 1931.91,1184.76 1932.5,1187.72 1933.08,1189.34 1933.67,1189.41 1934.25,1189.27 1934.84,1187.61 1935.43,1190.8 1936.01,1190.53 1936.6,1189.01 1937.19,1188.9 1937.77,1193.02 1938.36,1192.92 1938.95,1193.67 1939.53,1194.78 1940.12,1192.75 1940.71,1191.1 1941.29,1193.57 1941.88,1193.2 1942.46,1191.18 1943.05,1189.41 1943.64,1186.11 1944.22,1186.07 1944.81,1187.57 1945.4,1187.71 1945.98,1187.49 1946.57,1187.36 1947.16,1190.34 1947.74,1190.16 1948.33,1188.69 1948.91,1187.23 1949.5,1184.19 1950.09,1183.95 1950.67,1187.43 1951.26,1187.31 1951.85,1185.92 1952.43,1187.56 1953.02,1185.69 1953.61,1184.4 1954.19,1182.79 1954.78,1181.39 1955.37,1180.36 1955.95,1185.49 1956.54,1186.83 1957.12,1189.61 1957.71,1190.9 1958.3,1195.03 1958.88,1191.57 1959.47,1188.09 1960.06,1190.95 1960.64,1189.41 1961.23,1181.87 1961.82,1183.34 1962.4,1181.96 1962.99,1179.51 1963.58,1178.35 1964.16,1181.64 1964.75,1182.24 1965.33,1183.87 1965.92,1183.91 1966.51,1182.66 1967.09,1185.98 1967.68,1184.95 1968.27,1183.52 1968.85,1182.16 1969.44,1183.81 1970.03,1186.65 1970.61,1186.45 1971.2,1183.64 1971.78,1183.8 1972.37,1184.02 1972.96,1184.15 1973.54,1184.01 1974.13,1184.25 1974.72,1185.91 1975.3,1186.11 1975.89,1184.75 1976.48,1182.15 1977.06,1181.03 1977.65,1180.1 1978.24,1180.25 1978.82,1180.62 1979.41,1182.41 1979.99,1182.57 1980.58,1181.06 1981.17,1179.65 1981.75,1176.7 1982.34,1177.08 1982.93,1175.81 1983.51,1174.85 1984.1,1175.69 1984.69,1176.45 1985.27,1177.45 1985.86,1176.48 1986.45,1175.74 1987.03,1174.82 1987.62,1177.19 1988.2,1177.94 1988.79,1181.33 1989.38,1183.01 1989.96,1180.19 1990.55,1180.85 1991.14,1184.11 1991.72,1182.9 1992.31,1181.68 1992.9,1182.25 1993.48,1184.11 1994.07,1182.5 1994.65,1182.87 1995.24,1181.33 1995.83,1181.98 1996.41,1182.23 1997,1183.97 1997.59,1183.92 1998.17,1183.96 1998.76,1185.73 1999.35,1184.55 1999.93,1186.32 2000.52,1184.91 2001.11,1183.34 2001.69,1181.55 2002.28,1181.84 2002.86,1183.6 2003.45,1181.98 2004.04,1183.41 2004.62,1188.13 2005.21,1189.58 2005.8,1189.55 2006.38,1192.23 2006.97,1190.63 2007.56,1193.23 2008.14,1192.76 2008.73,1196.87 2009.32,1196.49 2009.9,1197.69 2010.49,1195.52 2011.07,1196.01 2011.66,1192.51 2012.25,1192.38 2012.83,1190.71 2013.42,1193.49 2014.01,1194.55 2014.59,1195.65 2015.18,1196.84 2015.77,1196.38 2016.35,1194.41 2016.94,1197.11 2017.53,1196.12 2018.11,1195.63 2018.7,1195.11 2019.28,1194.36 2019.87,1195.1 2020.46,1194.72 2021.04,1191.11 2021.63,1190.42 2022.22,1189.98 2022.8,1189.67 2023.39,1189.27 2023.98,1190.66 2024.56,1187.35 2025.15,1187.41 2025.73,1188.83 2026.32,1183.96 2026.91,1184.07 2027.49,1185.61 2028.08,1182.62 2028.67,1182.91 2029.25,1184.27 2029.84,1183.01 2030.43,1183.54 2031.01,1184.76 2031.6,1183.46 2032.19,1186.36 2032.77,1184.74 2033.36,1183.6 2033.94,1182.21 2034.53,1185.43 2035.12,1185.46 2035.7,1185.53 2036.29,1184.09 2036.88,1184.19 2037.46,1184.48 2038.05,1186.48 2038.64,1185.14 2039.22,1185.28 2039.81,1183.65 2040.4,1183.8 2040.98,1183.88 2041.57,1185.23 2042.15,1186.77 2042.74,1183.76 2043.33,1182.45 2043.91,1181.15 2044.5,1179.58 2045.09,1177.12 2045.67,1182.3 2046.26,1185.04 2046.85,1189.39 2047.43,1190.54 2048.02,1190.42 2048.6,1191.61 2049.19,1189.95 2049.78,1188.2 2050.36,1186.43 2050.95,1185.21 2051.54,1183.56 2052.12,1183.76 2052.71,1182.39 2053.3,1183.86 2053.88,1180.8 2054.47,1178.13 2055.06,1178.99 2055.64,1179.1 2056.23,1177.99 2056.81,1178.48 2057.4,1178.93 2057.99,1177.76 2058.57,1178.37 2059.16,1180.28 2059.75,1180.69 2060.33,1182.59 2060.92,1184.51 2061.51,1182.82 2062.09,1184.55 2062.68,1187.89 2063.27,1188.04 2063.85,1191 2064.44,1193.85 2065.02,1190.79 2065.61,1189.06 2066.2,1190.57 2066.78,1187.56 2067.37,1186.18 2067.96,1187.51 2068.54,1189.07 2069.13,1189 2069.72,1188.98 2070.3,1189.08 2070.89,1190.55 2071.48,1190.29 2072.06,1193.11 2072.65,1197.35 2073.23,1196.94 2073.82,1198.21 2074.41,1193.14 2074.99,1192.71 2075.58,1190.7 2076.17,1186.2 2076.75,1190.73 2077.34,1194.91 2077.93,1193.1 2078.51,1194.25 2079.1,1193.59 2079.68,1193.06 2080.27,1195.66 2080.86,1193.53 2081.44,1193.22 2082.03,1190.17 2082.62,1191.32 2083.2,1191.01 2083.79,1193.08 2084.38,1191.35 2084.96,1192.68 2085.55,1192.04 2086.14,1190.27 2086.72,1191.77 2087.31,1189.94 2087.89,1189.77 2088.48,1188.25 2089.07,1189.69 2089.65,1192.49 2090.24,1190.68 2090.83,1188.96 2091.41,1185.9 2092,1187.56 2092.59,1188.84 2093.17,1187.08 2093.76,1185.53 2094.35,1182.23 2094.93,1182.23 2095.52,1189.92 2096.1,1189.76 2096.69,1188.29 2097.28,1187.84 2097.86,1186.26 2098.45,1187.85 2099.04,1187.86 2099.62,1189.06 2100.21,1190.55 2100.8,1190.13 2101.38,1186.88 2101.97,1185.33 2102.55,1185.74 2103.14,1185.61 2103.73,1187.45 2104.31,1187.31 2104.9,1184.39 2105.49,1187.27 2106.07,1185.89 2106.66,1185.84 2107.25,1183.03 2107.83,1183.27 2108.42,1185.11 2109.01,1183.78 2109.59,1183.77 2110.18,1186.85 2110.76,1182.55 2111.35,1178.21 2111.94,1176.85 2112.52,1178.97 2113.11,1179.78 2113.7,1180.18 2114.28,1183.42 2114.87,1181.81 2115.46,1183.33 2116.04,1185.21 2116.63,1183.79 2117.22,1187.08 2117.8,1187.26 2118.39,1187.29 2118.97,1190.34 2119.56,1188.73 2120.15,1190.45 2120.73,1191.59 2121.32,1192.72 2121.91,1189.7 2122.49,1189.61 2123.08,1189.27 2123.67,1189.38 2124.25,1189.42 2124.84,1189.37 2125.42,1189.18 2126.01,1189 2126.6,1190.6 2127.18,1190.46 2127.77,1188.71 2128.36,1188.88 2128.94,1187.28 2129.53,1184.22 2130.12,1181.39 2130.7,1181.49 2131.29,1183.25 2131.88,1180.79 2132.46,1182.9 2133.05,1181.2 2133.63,1182.87 2134.22,1183.17 2134.81,1184.64 2135.39,1183.15 2135.98,1181.98 2136.57,1183.87 2137.15,1185.53 2137.74,1185.93 2138.33,1184.32 2138.91,1184.48 2139.5,1184.54 2140.09,1183.53 2140.67,1185.1 2141.26,1180.35 2141.84,1181.77 2142.43,1184.66 2143.02,1184.7 2143.6,1185.06 2144.19,1185.17 2144.78,1185.08 2145.36,1188.22 2145.95,1187.94 2146.54,1187.78 2147.12,1189.03 2147.71,1188.77 2148.3,1184.76 2148.88,1184.89 2149.47,1183.4 2150.05,1181.99 2150.64,1180.81 2151.23,1181.27 2151.81,1181.46 2152.4,1183.44 2152.99,1186.29 2153.57,1186.36 2154.16,1186.12 2154.75,1184.91 2155.33,1183.51 2155.92,1183.87 2156.5,1182.62 2157.09,1182.9 2157.68,1182.77 2158.26,1184.52 \"/>\n<path clip-path=\"url(#clip142)\" d=\"M986.025 1187.17 L986.612 1187.17 L987.198 1187.17 L987.785 1187.17 L988.371 1187.17 L988.957 1187.17 L989.544 1187.17 L990.13 1187.17 L990.717 1187.17 L991.303 1187.17 L991.889 1187.17 L992.476 1187.17 L993.062 1187.17 L993.649 1187.17 L994.235 1187.17 L994.822 1187.17 L995.408 1187.17 L995.994 1187.17 L996.581 1187.17 L997.167 1187.17 L997.754 1187.17 L998.34 1187.17 L998.926 1187.17 L999.513 1187.17 L1000.1 1187.17 L1000.69 1187.17 L1001.27 1187.17 L1001.86 1187.17 L1002.44 1187.17 L1003.03 1187.17 L1003.62 1187.17 L1004.2 1187.17 L1004.79 1187.17 L1005.38 1187.17 L1005.96 1187.17 L1006.55 1187.17 L1007.14 1187.17 L1007.72 1187.17 L1008.31 1187.17 L1008.9 1187.17 L1009.48 1187.17 L1010.07 1187.17 L1010.65 1187.17 L1011.24 1187.17 L1011.83 1187.17 L1012.41 1187.17 L1013 1187.17 L1013.59 1187.17 L1014.17 1187.17 L1014.76 1187.17 L1015.35 1187.17 L1015.93 1187.17 L1016.52 1187.17 L1017.11 1187.17 L1017.69 1187.17 L1018.28 1187.17 L1018.86 1187.17 L1019.45 1187.17 L1020.04 1187.17 L1020.62 1187.17 L1021.21 1187.17 L1021.8 1187.17 L1022.38 1187.17 L1022.97 1187.17 L1023.56 1187.17 L1024.14 1187.17 L1024.73 1187.17 L1025.32 1187.17 L1025.9 1187.17 L1026.49 1187.17 L1027.07 1187.17 L1027.66 1187.17 L1028.25 1187.17 L1028.83 1187.17 L1029.42 1187.17 L1030.01 1187.17 L1030.59 1187.17 L1031.18 1187.17 L1031.77 1187.17 L1032.35 1187.17 L1032.94 1187.17 L1033.52 1187.17 L1034.11 1187.17 L1034.7 1187.17 L1035.28 1187.17 L1035.87 1187.17 L1036.46 1187.17 L1037.04 1187.17 L1037.63 1187.17 L1038.22 1187.17 L1038.8 1187.17 L1039.39 1187.17 L1039.98 1187.17 L1040.56 1187.17 L1041.15 1187.17 L1041.73 1187.17 L1042.32 1187.17 L1042.91 1187.17 L1043.49 1187.17 L1044.08 1187.17 L1044.67 1187.17 L1045.25 1187.17 L1045.84 1187.17 L1046.43 1187.17 L1047.01 1187.17 L1047.6 1187.17 L1048.19 1187.17 L1048.77 1187.17 L1049.36 1187.17 L1049.94 1187.17 L1050.53 1187.17 L1051.12 1187.17 L1051.7 1187.17 L1052.29 1187.17 L1052.88 1187.17 L1053.46 1187.17 L1054.05 1187.17 L1054.64 1187.17 L1055.22 1187.17 L1055.81 1187.17 L1056.39 1187.17 L1056.98 1187.17 L1057.57 1187.17 L1058.15 1187.17 L1058.74 1187.17 L1059.33 1187.17 L1059.91 1187.17 L1060.5 1187.17 L1061.09 1187.17 L1061.67 1187.17 L1062.26 1187.17 L1062.85 1187.17 L1063.43 1187.17 L1064.02 1187.17 L1064.6 1187.17 L1065.19 1187.17 L1065.78 1187.17 L1066.36 1187.17 L1066.95 1187.17 L1067.54 1187.17 L1068.12 1187.17 L1068.71 1187.17 L1069.3 1187.17 L1069.88 1187.17 L1070.47 1187.17 L1071.06 1187.17 L1071.64 1187.17 L1072.23 1187.17 L1072.81 1187.17 L1073.4 1187.17 L1073.99 1187.17 L1074.57 1187.17 L1075.16 1187.17 L1075.75 1187.17 L1076.33 1187.17 L1076.92 1187.17 L1077.51 1187.17 L1078.09 1187.17 L1078.68 1187.17 L1079.26 1187.17 L1079.85 1187.17 L1080.44 1187.17 L1081.02 1187.17 L1081.61 1187.17 L1082.2 1187.17 L1082.78 1187.17 L1083.37 1187.17 L1083.96 1187.17 L1084.54 1187.17 L1085.13 1187.17 L1085.72 1187.17 L1086.3 1187.17 L1086.89 1187.17 L1087.47 1187.17 L1088.06 1187.17 L1088.65 1187.17 L1089.23 1187.17 L1089.82 1187.17 L1090.41 1187.17 L1090.99 1187.17 L1091.58 1187.17 L1092.17 1187.17 L1092.75 1187.17 L1093.34 1187.17 L1093.93 1187.17 L1094.51 1187.17 L1095.1 1187.17 L1095.68 1187.17 L1096.27 1187.17 L1096.86 1187.17 L1097.44 1187.17 L1098.03 1187.17 L1098.62 1187.17 L1099.2 1187.17 L1099.79 1187.17 L1100.38 1187.17 L1100.96 1187.17 L1101.55 1187.17 L1102.14 1187.17 L1102.72 1187.17 L1103.31 1187.17 L1103.89 1187.17 L1104.48 1187.17 L1105.07 1187.17 L1105.65 1187.17 L1106.24 1187.17 L1106.83 1187.17 L1107.41 1187.17 L1108 1187.17 L1108.59 1187.17 L1109.17 1187.17 L1109.76 1187.17 L1110.34 1187.17 L1110.93 1187.17 L1111.52 1187.17 L1112.1 1187.17 L1112.69 1187.17 L1113.28 1187.17 L1113.86 1187.17 L1114.45 1187.17 L1115.04 1187.17 L1115.62 1187.17 L1116.21 1187.17 L1116.8 1187.17 L1117.38 1187.17 L1117.97 1187.17 L1118.55 1187.17 L1119.14 1187.17 L1119.73 1187.17 L1120.31 1187.17 L1120.9 1187.17 L1121.49 1187.17 L1122.07 1187.17 L1122.66 1187.17 L1123.25 1187.17 L1123.83 1187.17 L1124.42 1187.17 L1125.01 1187.17 L1125.59 1187.17 L1126.18 1187.17 L1126.76 1187.17 L1127.35 1187.17 L1127.94 1187.17 L1128.52 1187.17 L1129.11 1187.17 L1129.7 1187.17 L1130.28 1187.17 L1130.87 1187.17 L1131.46 1187.17 L1132.04 1187.17 L1132.63 1187.17 L1133.21 1187.17 L1133.8 1187.17 L1134.39 1187.17 L1134.97 1187.17 L1135.56 1187.17 L1136.15 1187.17 L1136.73 1187.17 L1137.32 1187.17 L1137.91 1187.17 L1138.49 1187.17 L1139.08 1187.17 L1139.67 1187.17 L1140.25 1187.17 L1140.84 1187.17 L1141.42 1187.17 L1142.01 1187.17 L1142.6 1187.17 L1143.18 1187.17 L1143.77 1187.17 L1144.36 1187.17 L1144.94 1187.17 L1145.53 1187.17 L1146.12 1187.17 L1146.7 1187.17 L1147.29 1187.17 L1147.88 1187.17 L1148.46 1187.17 L1149.05 1187.17 L1149.63 1187.17 L1150.22 1187.17 L1150.81 1187.17 L1151.39 1187.17 L1151.98 1187.17 L1152.57 1187.17 L1153.15 1187.17 L1153.74 1187.17 L1154.33 1187.17 L1154.91 1187.17 L1155.5 1187.17 L1156.09 1187.17 L1156.67 1187.17 L1157.26 1187.17 L1157.84 1187.17 L1158.43 1187.17 L1159.02 1187.17 L1159.6 1187.17 L1160.19 1187.17 L1160.78 1187.17 L1161.36 1187.17 L1161.95 1187.17 L1162.54 1187.17 L1163.12 1187.17 L1163.71 1187.17 L1164.29 1187.17 L1164.88 1187.17 L1165.47 1187.17 L1166.05 1187.17 L1166.64 1187.17 L1167.23 1187.17 L1167.81 1187.17 L1168.4 1187.17 L1168.99 1187.17 L1169.57 1187.17 L1170.16 1187.17 L1170.75 1187.17 L1171.33 1187.17 L1171.92 1187.17 L1172.5 1187.17 L1173.09 1187.17 L1173.68 1187.17 L1174.26 1187.17 L1174.85 1187.17 L1175.44 1187.17 L1176.02 1187.17 L1176.61 1187.17 L1177.2 1187.17 L1177.78 1187.17 L1178.37 1187.17 L1178.96 1187.17 L1179.54 1187.17 L1180.13 1187.17 L1180.71 1187.17 L1181.3 1187.17 L1181.89 1187.17 L1182.47 1187.17 L1183.06 1187.17 L1183.65 1187.17 L1184.23 1187.17 L1184.82 1187.17 L1185.41 1187.17 L1185.99 1187.17 L1186.58 1187.17 L1187.16 1187.17 L1187.75 1187.17 L1188.34 1187.17 L1188.92 1187.17 L1189.51 1187.17 L1190.1 1187.17 L1190.68 1187.17 L1191.27 1187.17 L1191.86 1187.17 L1192.44 1187.17 L1193.03 1187.17 L1193.62 1187.17 L1194.2 1187.17 L1194.79 1187.17 L1195.37 1187.17 L1195.96 1187.17 L1196.55 1187.17 L1197.13 1187.17 L1197.72 1187.17 L1198.31 1187.17 L1198.89 1187.17 L1199.48 1187.17 L1200.07 1187.17 L1200.65 1187.17 L1201.24 1187.17 L1201.83 1187.17 L1202.41 1187.17 L1203 1187.17 L1203.58 1187.17 L1204.17 1187.17 L1204.76 1187.17 L1205.34 1187.17 L1205.93 1187.17 L1206.52 1187.17 L1207.1 1187.17 L1207.69 1187.17 L1208.28 1187.17 L1208.86 1187.17 L1209.45 1187.17 L1210.03 1187.17 L1210.62 1187.17 L1211.21 1187.17 L1211.79 1187.17 L1212.38 1187.17 L1212.97 1187.17 L1213.55 1187.17 L1214.14 1187.17 L1214.73 1187.17 L1215.31 1187.17 L1215.9 1187.17 L1216.49 1187.17 L1217.07 1187.17 L1217.66 1187.17 L1218.24 1187.17 L1218.83 1187.17 L1219.42 1187.17 L1220 1187.17 L1220.59 1187.17 L1221.18 1187.17 L1221.76 1187.17 L1222.35 1187.17 L1222.94 1187.17 L1223.52 1187.17 L1224.11 1187.17 L1224.7 1187.17 L1225.28 1187.17 L1225.87 1187.17 L1226.45 1187.17 L1227.04 1187.17 L1227.63 1187.17 L1228.21 1187.17 L1228.8 1187.17 L1229.39 1187.17 L1229.97 1187.17 L1230.56 1187.17 L1231.15 1187.17 L1231.73 1187.17 L1232.32 1187.17 L1232.91 1187.17 L1233.49 1187.17 L1234.08 1187.17 L1234.66 1187.17 L1235.25 1187.17 L1235.84 1187.17 L1236.42 1187.17 L1237.01 1187.17 L1237.6 1187.17 L1238.18 1187.17 L1238.77 1187.17 L1239.36 1187.17 L1239.94 1187.17 L1240.53 1187.17 L1241.11 1187.17 L1241.7 1187.17 L1242.29 1187.17 L1242.87 1187.17 L1243.46 1187.17 L1244.05 1187.17 L1244.63 1187.17 L1245.22 1187.17 L1245.81 1187.17 L1246.39 1187.17 L1246.98 1187.17 L1247.57 1187.17 L1248.15 1187.17 L1248.74 1187.17 L1249.32 1187.17 L1249.91 1187.17 L1250.5 1187.17 L1251.08 1187.17 L1251.67 1187.17 L1252.26 1187.17 L1252.84 1187.17 L1253.43 1187.17 L1254.02 1187.17 L1254.6 1187.17 L1255.19 1187.17 L1255.78 1187.17 L1256.36 1187.17 L1256.95 1187.17 L1257.53 1187.17 L1258.12 1187.17 L1258.71 1187.17 L1259.29 1187.17 L1259.88 1187.17 L1260.47 1187.17 L1261.05 1187.17 L1261.64 1187.17 L1262.23 1187.17 L1262.81 1187.17 L1263.4 1187.17 L1263.98 1187.17 L1264.57 1187.17 L1265.16 1187.17 L1265.74 1187.17 L1266.33 1187.17 L1266.92 1187.17 L1267.5 1187.17 L1268.09 1187.17 L1268.68 1187.17 L1269.26 1187.17 L1269.85 1187.17 L1270.44 1187.17 L1271.02 1187.17 L1271.61 1187.17 L1272.19 1187.17 L1272.78 1187.17 L1273.37 1187.17 L1273.95 1187.17 L1274.54 1187.17 L1275.13 1187.17 L1275.71 1187.17 L1276.3 1187.17 L1276.89 1187.17 L1277.47 1187.17 L1278.06 1187.17 L1278.65 1187.17 L1279.23 1187.17 L1279.82 1187.17 L1280.4 1187.17 L1280.99 1187.17 L1281.58 1187.17 L1282.16 1187.17 L1282.75 1187.17 L1283.34 1187.17 L1283.92 1187.17 L1284.51 1187.17 L1285.1 1187.17 L1285.68 1187.17 L1286.27 1187.17 L1286.86 1187.17 L1287.44 1187.17 L1288.03 1187.17 L1288.61 1187.17 L1289.2 1187.17 L1289.79 1187.17 L1290.37 1187.17 L1290.96 1187.17 L1291.55 1187.17 L1292.13 1187.17 L1292.72 1187.17 L1293.31 1187.17 L1293.89 1187.17 L1294.48 1187.17 L1295.06 1187.17 L1295.65 1187.17 L1296.24 1187.17 L1296.82 1187.17 L1297.41 1187.17 L1298 1187.17 L1298.58 1187.17 L1299.17 1187.17 L1299.76 1187.17 L1300.34 1187.17 L1300.93 1187.17 L1301.52 1187.17 L1302.1 1187.17 L1302.69 1187.17 L1303.27 1187.17 L1303.86 1187.17 L1304.45 1187.17 L1305.03 1187.17 L1305.62 1187.17 L1306.21 1187.17 L1306.79 1187.17 L1307.38 1187.17 L1307.97 1187.17 L1308.55 1187.17 L1309.14 1187.17 L1309.73 1187.17 L1310.31 1187.17 L1310.9 1187.17 L1311.48 1187.17 L1312.07 1187.17 L1312.66 1187.17 L1313.24 1187.17 L1313.83 1187.17 L1314.42 1187.17 L1315 1187.17 L1315.59 1187.17 L1316.18 1187.17 L1316.76 1187.17 L1317.35 1187.17 L1317.93 1187.17 L1318.52 1187.17 L1319.11 1187.17 L1319.69 1187.17 L1320.28 1187.17 L1320.87 1187.17 L1321.45 1187.17 L1322.04 1187.17 L1322.63 1187.17 L1323.21 1187.17 L1323.8 1187.17 L1324.39 1187.17 L1324.97 1187.17 L1325.56 1187.17 L1326.14 1187.17 L1326.73 1187.17 L1327.32 1187.17 L1327.9 1187.17 L1328.49 1187.17 L1329.08 1187.17 L1329.66 1187.17 L1330.25 1187.17 L1330.84 1187.17 L1331.42 1187.17 L1332.01 1187.17 L1332.6 1187.17 L1333.18 1187.17 L1333.77 1187.17 L1334.35 1187.17 L1334.94 1187.17 L1335.53 1187.17 L1336.11 1187.17 L1336.7 1187.17 L1337.29 1187.17 L1337.87 1187.17 L1338.46 1187.17 L1339.05 1187.17 L1339.63 1187.17 L1340.22 1187.17 L1340.8 1187.17 L1341.39 1187.17 L1341.98 1187.17 L1342.56 1187.17 L1343.15 1187.17 L1343.74 1187.17 L1344.32 1187.17 L1344.91 1187.17 L1345.5 1187.17 L1346.08 1187.17 L1346.67 1187.17 L1347.26 1187.17 L1347.84 1187.17 L1348.43 1187.17 L1349.01 1187.17 L1349.6 1187.17 L1350.19 1187.17 L1350.77 1187.17 L1351.36 1187.17 L1351.95 1187.17 L1352.53 1187.17 L1353.12 1187.17 L1353.71 1187.17 L1354.29 1187.17 L1354.88 1187.17 L1355.47 1187.17 L1356.05 1187.17 L1356.64 1187.17 L1357.22 1187.17 L1357.81 1187.17 L1358.4 1187.17 L1358.98 1187.17 L1359.57 1187.17 L1360.16 1187.17 L1360.74 1187.17 L1361.33 1187.17 L1361.92 1187.17 L1362.5 1187.17 L1363.09 1187.17 L1363.68 1187.17 L1364.26 1187.17 L1364.85 1187.17 L1365.43 1187.17 L1366.02 1187.17 L1366.61 1187.17 L1367.19 1187.17 L1367.78 1187.17 L1368.37 1187.17 L1368.95 1187.17 L1369.54 1187.17 L1370.13 1187.17 L1370.71 1187.17 L1371.3 1187.17 L1371.88 1187.17 L1372.47 1187.17 L1373.06 1187.17 L1373.64 1187.17 L1374.23 1187.17 L1374.82 1187.17 L1375.4 1187.17 L1375.99 1187.17 L1376.58 1187.17 L1377.16 1187.17 L1377.75 1187.17 L1378.34 1187.17 L1378.92 1187.17 L1379.51 1187.17 L1380.09 1187.17 L1380.68 1187.17 L1381.27 1187.17 L1381.85 1187.17 L1382.44 1187.17 L1383.03 1187.17 L1383.61 1187.17 L1384.2 1187.17 L1384.79 1187.17 L1385.37 1187.17 L1385.96 1187.17 L1386.55 1187.17 L1387.13 1187.17 L1387.72 1187.17 L1388.3 1187.17 L1388.89 1187.17 L1389.48 1187.17 L1390.06 1187.17 L1390.65 1187.17 L1391.24 1187.17 L1391.82 1187.17 L1392.41 1187.17 L1393 1187.17 L1393.58 1187.17 L1394.17 1187.17 L1394.75 1187.17 L1395.34 1187.17 L1395.93 1187.17 L1396.51 1187.17 L1397.1 1187.17 L1397.69 1187.17 L1398.27 1187.17 L1398.86 1187.17 L1399.45 1187.17 L1400.03 1187.17 L1400.62 1187.17 L1401.21 1187.17 L1401.79 1187.17 L1402.38 1187.17 L1402.96 1187.17 L1403.55 1187.17 L1404.14 1187.17 L1404.72 1187.17 L1405.31 1187.17 L1405.9 1187.17 L1406.48 1187.17 L1407.07 1187.17 L1407.66 1187.17 L1408.24 1187.17 L1408.83 1187.17 L1409.42 1187.17 L1410 1187.17 L1410.59 1187.17 L1411.17 1187.17 L1411.76 1187.17 L1412.35 1187.17 L1412.93 1187.17 L1413.52 1187.17 L1414.11 1187.17 L1414.69 1187.17 L1415.28 1187.17 L1415.87 1187.17 L1416.45 1187.17 L1417.04 1187.17 L1417.63 1187.17 L1418.21 1187.17 L1418.8 1187.17 L1419.38 1187.17 L1419.97 1187.17 L1420.56 1187.17 L1421.14 1187.17 L1421.73 1187.17 L1422.32 1187.17 L1422.9 1187.17 L1423.49 1187.17 L1424.08 1187.17 L1424.66 1187.17 L1425.25 1187.17 L1425.83 1187.17 L1426.42 1187.17 L1427.01 1187.17 L1427.59 1187.17 L1428.18 1187.17 L1428.77 1187.17 L1429.35 1187.17 L1429.94 1187.17 L1430.53 1187.17 L1431.11 1187.17 L1431.7 1187.17 L1432.29 1187.17 L1432.87 1187.17 L1433.46 1187.17 L1434.04 1187.17 L1434.63 1187.17 L1435.22 1187.17 L1435.8 1187.17 L1436.39 1187.17 L1436.98 1187.17 L1437.56 1187.17 L1438.15 1187.17 L1438.74 1187.17 L1439.32 1187.17 L1439.91 1187.17 L1440.5 1187.17 L1441.08 1187.17 L1441.67 1187.17 L1442.25 1187.17 L1442.84 1187.17 L1443.43 1187.17 L1444.01 1187.17 L1444.6 1187.17 L1445.19 1187.17 L1445.77 1187.17 L1446.36 1187.17 L1446.95 1187.17 L1447.53 1187.17 L1448.12 1187.17 L1448.7 1187.17 L1449.29 1187.17 L1449.88 1187.17 L1450.46 1187.17 L1451.05 1187.17 L1451.64 1187.17 L1452.22 1187.17 L1452.81 1187.17 L1453.4 1187.17 L1453.98 1187.17 L1454.57 1187.17 L1455.16 1187.17 L1455.74 1187.17 L1456.33 1187.17 L1456.91 1187.17 L1457.5 1187.17 L1458.09 1187.17 L1458.67 1187.17 L1459.26 1187.17 L1459.85 1187.17 L1460.43 1187.17 L1461.02 1187.17 L1461.61 1187.17 L1462.19 1187.17 L1462.78 1187.17 L1463.37 1187.17 L1463.95 1187.17 L1464.54 1187.17 L1465.12 1187.17 L1465.71 1187.17 L1466.3 1187.17 L1466.88 1187.17 L1467.47 1187.17 L1468.06 1187.17 L1468.64 1187.17 L1469.23 1187.17 L1469.82 1187.17 L1470.4 1187.17 L1470.99 1187.17 L1471.57 1187.17 L1472.16 1187.17 L1472.75 1187.17 L1473.33 1187.17 L1473.92 1187.17 L1474.51 1187.17 L1475.09 1187.17 L1475.68 1187.17 L1476.27 1187.17 L1476.85 1187.17 L1477.44 1187.17 L1478.03 1187.17 L1478.61 1187.17 L1479.2 1187.17 L1479.78 1187.17 L1480.37 1187.17 L1480.96 1187.17 L1481.54 1187.17 L1482.13 1187.17 L1482.72 1187.17 L1483.3 1187.17 L1483.89 1187.17 L1484.48 1187.17 L1485.06 1187.17 L1485.65 1187.17 L1486.24 1187.17 L1486.82 1187.17 L1487.41 1187.17 L1487.99 1187.17 L1488.58 1187.17 L1489.17 1187.17 L1489.75 1187.17 L1490.34 1187.17 L1490.93 1187.17 L1491.51 1187.17 L1492.1 1187.17 L1492.69 1187.17 L1493.27 1187.17 L1493.86 1187.17 L1494.45 1187.17 L1495.03 1187.17 L1495.62 1187.17 L1496.2 1187.17 L1496.79 1187.17 L1497.38 1187.17 L1497.96 1187.17 L1498.55 1187.17 L1499.14 1187.17 L1499.72 1187.17 L1500.31 1187.17 L1500.9 1187.17 L1501.48 1187.17 L1502.07 1187.17 L1502.65 1187.17 L1503.24 1187.17 L1503.83 1187.17 L1504.41 1187.17 L1505 1187.17 L1505.59 1187.17 L1506.17 1187.17 L1506.76 1187.17 L1507.35 1187.17 L1507.93 1187.17 L1508.52 1187.17 L1509.11 1187.17 L1509.69 1187.17 L1510.28 1187.17 L1510.86 1187.17 L1511.45 1187.17 L1512.04 1187.17 L1512.62 1187.17 L1513.21 1187.17 L1513.8 1187.17 L1514.38 1187.17 L1514.97 1187.17 L1515.56 1187.17 L1516.14 1187.17 L1516.73 1187.17 L1517.32 1187.17 L1517.9 1187.17 L1518.49 1187.17 L1519.07 1187.17 L1519.66 1187.17 L1520.25 1187.17 L1520.83 1187.17 L1521.42 1187.17 L1522.01 1187.17 L1522.59 1187.17 L1523.18 1187.17 L1523.77 1187.17 L1524.35 1187.17 L1524.94 1187.17 L1525.52 1187.17 L1526.11 1187.17 L1526.7 1187.17 L1527.28 1187.17 L1527.87 1187.17 L1528.46 1187.17 L1529.04 1187.17 L1529.63 1187.17 L1530.22 1187.17 L1530.8 1187.17 L1531.39 1187.17 L1531.98 1187.17 L1532.56 1187.17 L1533.15 1187.17 L1533.73 1187.17 L1534.32 1187.17 L1534.91 1187.17 L1535.49 1187.17 L1536.08 1187.17 L1536.67 1187.17 L1537.25 1187.17 L1537.84 1187.17 L1538.43 1187.17 L1539.01 1187.17 L1539.6 1187.17 L1540.19 1187.17 L1540.77 1187.17 L1541.36 1187.17 L1541.94 1187.17 L1542.53 1187.17 L1543.12 1187.17 L1543.7 1187.17 L1544.29 1187.17 L1544.88 1187.17 L1545.46 1187.17 L1546.05 1187.17 L1546.64 1187.17 L1547.22 1187.17 L1547.81 1187.17 L1548.4 1187.17 L1548.98 1187.17 L1549.57 1187.17 L1550.15 1187.17 L1550.74 1187.17 L1551.33 1187.17 L1551.91 1187.17 L1552.5 1187.17 L1553.09 1187.17 L1553.67 1187.17 L1554.26 1187.17 L1554.85 1187.17 L1555.43 1187.17 L1556.02 1187.17 L1556.6 1187.17 L1557.19 1187.17 L1557.78 1187.17 L1558.36 1187.17 L1558.95 1187.17 L1559.54 1187.17 L1560.12 1187.17 L1560.71 1187.17 L1561.3 1187.17 L1561.88 1187.17 L1562.47 1187.17 L1563.06 1187.17 L1563.64 1187.17 L1564.23 1187.17 L1564.81 1187.17 L1565.4 1187.17 L1565.99 1187.17 L1566.57 1187.17 L1567.16 1187.17 L1567.75 1187.17 L1568.33 1187.17 L1568.92 1187.17 L1569.51 1187.17 L1570.09 1187.17 L1570.68 1187.17 L1571.27 1187.17 L1571.85 1187.17 L1572.44 1187.17 L1573.02 1187.17 L1573.61 1187.17 L1574.2 1187.17 L1574.78 1187.17 L1575.37 1187.17 L1575.96 1187.17 L1576.54 1187.17 L1577.13 1187.17 L1577.72 1187.17 L1578.3 1187.17 L1578.89 1187.17 L1579.47 1187.17 L1580.06 1187.17 L1580.65 1187.17 L1581.23 1187.17 L1581.82 1187.17 L1582.41 1187.17 L1582.99 1187.17 L1583.58 1187.17 L1584.17 1187.17 L1584.75 1187.17 L1585.34 1187.17 L1585.93 1187.17 L1586.51 1187.17 L1587.1 1187.17 L1587.68 1187.17 L1588.27 1187.17 L1588.86 1187.17 L1589.44 1187.17 L1590.03 1187.17 L1590.62 1187.17 L1591.2 1187.17 L1591.79 1187.17 L1592.38 1187.17 L1592.96 1187.17 L1593.55 1187.17 L1594.14 1187.17 L1594.72 1187.17 L1595.31 1187.17 L1595.89 1187.17 L1596.48 1187.17 L1597.07 1187.17 L1597.65 1187.17 L1598.24 1187.17 L1598.83 1187.17 L1599.41 1187.17 L1600 1187.17 L1600.59 1187.17 L1601.17 1187.17 L1601.76 1187.17 L1602.34 1187.17 L1602.93 1187.17 L1603.52 1187.17 L1604.1 1187.17 L1604.69 1187.17 L1605.28 1187.17 L1605.86 1187.17 L1606.45 1187.17 L1607.04 1187.17 L1607.62 1187.17 L1608.21 1187.17 L1608.8 1187.17 L1609.38 1187.17 L1609.97 1187.17 L1610.55 1187.17 L1611.14 1187.17 L1611.73 1187.17 L1612.31 1187.17 L1612.9 1187.17 L1613.49 1187.17 L1614.07 1187.17 L1614.66 1187.17 L1615.25 1187.17 L1615.83 1187.17 L1616.42 1187.17 L1617.01 1187.17 L1617.59 1187.17 L1618.18 1187.17 L1618.76 1187.17 L1619.35 1187.17 L1619.94 1187.17 L1620.52 1187.17 L1621.11 1187.17 L1621.7 1187.17 L1622.28 1187.17 L1622.87 1187.17 L1623.46 1187.17 L1624.04 1187.17 L1624.63 1187.17 L1625.22 1187.17 L1625.8 1187.17 L1626.39 1187.17 L1626.97 1187.17 L1627.56 1187.17 L1628.15 1187.17 L1628.73 1187.17 L1629.32 1187.17 L1629.91 1187.17 L1630.49 1187.17 L1631.08 1187.17 L1631.67 1187.17 L1632.25 1187.17 L1632.84 1187.17 L1633.42 1187.17 L1634.01 1187.17 L1634.6 1187.17 L1635.18 1187.17 L1635.77 1187.17 L1636.36 1187.17 L1636.94 1187.17 L1637.53 1187.17 L1638.12 1187.17 L1638.7 1187.17 L1639.29 1187.17 L1639.88 1187.17 L1640.46 1187.17 L1641.05 1187.17 L1641.63 1187.17 L1642.22 1187.17 L1642.81 1187.17 L1643.39 1187.17 L1643.98 1187.17 L1644.57 1187.17 L1645.15 1187.17 L1645.74 1187.17 L1646.33 1187.17 L1646.91 1187.17 L1647.5 1187.17 L1648.09 1187.17 L1648.67 1187.17 L1649.26 1187.17 L1649.84 1187.17 L1650.43 1187.17 L1651.02 1187.17 L1651.6 1187.17 L1652.19 1187.17 L1652.78 1187.17 L1653.36 1187.17 L1653.95 1187.17 L1654.54 1187.17 L1655.12 1187.17 L1655.71 1187.17 L1656.29 1187.17 L1656.88 1187.17 L1657.47 1187.17 L1658.05 1187.17 L1658.64 1187.17 L1659.23 1187.17 L1659.81 1187.17 L1660.4 1187.17 L1660.99 1187.17 L1661.57 1187.17 L1662.16 1187.17 L1662.75 1187.17 L1663.33 1187.17 L1663.92 1187.17 L1664.5 1187.17 L1665.09 1187.17 L1665.68 1187.17 L1666.26 1187.17 L1666.85 1187.17 L1667.44 1187.17 L1668.02 1187.17 L1668.61 1187.17 L1669.2 1187.17 L1669.78 1187.17 L1670.37 1187.17 L1670.96 1187.17 L1671.54 1187.17 L1672.13 1187.17 L1672.71 1187.17 L1673.3 1187.17 L1673.89 1187.17 L1674.47 1187.17 L1675.06 1187.17 L1675.65 1187.17 L1676.23 1187.17 L1676.82 1187.17 L1677.41 1187.17 L1677.99 1187.17 L1678.58 1187.17 L1679.17 1187.17 L1679.75 1187.17 L1680.34 1187.17 L1680.92 1187.17 L1681.51 1187.17 L1682.1 1187.17 L1682.68 1187.17 L1683.27 1187.17 L1683.86 1187.17 L1684.44 1187.17 L1685.03 1187.17 L1685.62 1187.17 L1686.2 1187.17 L1686.79 1187.17 L1687.37 1187.17 L1687.96 1187.17 L1688.55 1187.17 L1689.13 1187.17 L1689.72 1187.17 L1690.31 1187.17 L1690.89 1187.17 L1691.48 1187.17 L1692.07 1187.17 L1692.65 1187.17 L1693.24 1187.17 L1693.83 1187.17 L1694.41 1187.17 L1695 1187.17 L1695.58 1187.17 L1696.17 1187.17 L1696.76 1187.17 L1697.34 1187.17 L1697.93 1187.17 L1698.52 1187.17 L1699.1 1187.17 L1699.69 1187.17 L1700.28 1187.17 L1700.86 1187.17 L1701.45 1187.17 L1702.04 1187.17 L1702.62 1187.17 L1703.21 1187.17 L1703.79 1187.17 L1704.38 1187.17 L1704.97 1187.17 L1705.55 1187.17 L1706.14 1187.17 L1706.73 1187.17 L1707.31 1187.17 L1707.9 1187.17 L1708.49 1187.17 L1709.07 1187.17 L1709.66 1187.17 L1710.24 1187.17 L1710.83 1187.17 L1711.42 1187.17 L1712 1187.17 L1712.59 1187.17 L1713.18 1187.17 L1713.76 1187.17 L1714.35 1187.17 L1714.94 1187.17 L1715.52 1187.17 L1716.11 1187.17 L1716.7 1187.17 L1717.28 1187.17 L1717.87 1187.17 L1718.45 1187.17 L1719.04 1187.17 L1719.63 1187.17 L1720.21 1187.17 L1720.8 1187.17 L1721.39 1187.17 L1721.97 1187.17 L1722.56 1187.17 L1723.15 1187.17 L1723.73 1187.17 L1724.32 1187.17 L1724.91 1187.17 L1725.49 1187.17 L1726.08 1187.17 L1726.66 1187.17 L1727.25 1187.17 L1727.84 1187.17 L1728.42 1187.17 L1729.01 1187.17 L1729.6 1187.17 L1730.18 1187.17 L1730.77 1187.17 L1731.36 1187.17 L1731.94 1187.17 L1732.53 1187.17 L1733.11 1187.17 L1733.7 1187.17 L1734.29 1187.17 L1734.87 1187.17 L1735.46 1187.17 L1736.05 1187.17 L1736.63 1187.17 L1737.22 1187.17 L1737.81 1187.17 L1738.39 1187.17 L1738.98 1187.17 L1739.57 1187.17 L1740.15 1187.17 L1740.74 1187.17 L1741.32 1187.17 L1741.91 1187.17 L1742.5 1187.17 L1743.08 1187.17 L1743.67 1187.17 L1744.26 1187.17 L1744.84 1187.17 L1745.43 1187.17 L1746.02 1187.17 L1746.6 1187.17 L1747.19 1187.17 L1747.78 1187.17 L1748.36 1187.17 L1748.95 1187.17 L1749.53 1187.17 L1750.12 1187.17 L1750.71 1187.17 L1751.29 1187.17 L1751.88 1187.17 L1752.47 1187.17 L1753.05 1187.17 L1753.64 1187.17 L1754.23 1187.17 L1754.81 1187.17 L1755.4 1187.17 L1755.99 1187.17 L1756.57 1187.17 L1757.16 1187.17 L1757.74 1187.17 L1758.33 1187.17 L1758.92 1187.17 L1759.5 1187.17 L1760.09 1187.17 L1760.68 1187.17 L1761.26 1187.17 L1761.85 1187.17 L1762.44 1187.17 L1763.02 1187.17 L1763.61 1187.17 L1764.19 1187.17 L1764.78 1187.17 L1765.37 1187.17 L1765.95 1187.17 L1766.54 1187.17 L1767.13 1187.17 L1767.71 1187.17 L1768.3 1187.17 L1768.89 1187.17 L1769.47 1187.17 L1770.06 1187.17 L1770.65 1187.17 L1771.23 1187.17 L1771.82 1187.17 L1772.4 1187.17 L1772.99 1187.17 L1773.58 1187.17 L1774.16 1187.17 L1774.75 1187.17 L1775.34 1187.17 L1775.92 1187.17 L1776.51 1187.17 L1777.1 1187.17 L1777.68 1187.17 L1778.27 1187.17 L1778.86 1187.17 L1779.44 1187.17 L1780.03 1187.17 L1780.61 1187.17 L1781.2 1187.17 L1781.79 1187.17 L1782.37 1187.17 L1782.96 1187.17 L1783.55 1187.17 L1784.13 1187.17 L1784.72 1187.17 L1785.31 1187.17 L1785.89 1187.17 L1786.48 1187.17 L1787.06 1187.17 L1787.65 1187.17 L1788.24 1187.17 L1788.82 1187.17 L1789.41 1187.17 L1790 1187.17 L1790.58 1187.17 L1791.17 1187.17 L1791.76 1187.17 L1792.34 1187.17 L1792.93 1187.17 L1793.52 1187.17 L1794.1 1187.17 L1794.69 1187.17 L1795.27 1187.17 L1795.86 1187.17 L1796.45 1187.17 L1797.03 1187.17 L1797.62 1187.17 L1798.21 1187.17 L1798.79 1187.17 L1799.38 1187.17 L1799.97 1187.17 L1800.55 1187.17 L1801.14 1187.17 L1801.73 1187.17 L1802.31 1187.17 L1802.9 1187.17 L1803.48 1187.17 L1804.07 1187.17 L1804.66 1187.17 L1805.24 1187.17 L1805.83 1187.17 L1806.42 1187.17 L1807 1187.17 L1807.59 1187.17 L1808.18 1187.17 L1808.76 1187.17 L1809.35 1187.17 L1809.94 1187.17 L1810.52 1187.17 L1811.11 1187.17 L1811.69 1187.17 L1812.28 1187.17 L1812.87 1187.17 L1813.45 1187.17 L1814.04 1187.17 L1814.63 1187.17 L1815.21 1187.17 L1815.8 1187.17 L1816.39 1187.17 L1816.97 1187.17 L1817.56 1187.17 L1818.14 1187.17 L1818.73 1187.17 L1819.32 1187.17 L1819.9 1187.17 L1820.49 1187.17 L1821.08 1187.17 L1821.66 1187.17 L1822.25 1187.17 L1822.84 1187.17 L1823.42 1187.17 L1824.01 1187.17 L1824.6 1187.17 L1825.18 1187.17 L1825.77 1187.17 L1826.35 1187.17 L1826.94 1187.17 L1827.53 1187.17 L1828.11 1187.17 L1828.7 1187.17 L1829.29 1187.17 L1829.87 1187.17 L1830.46 1187.17 L1831.05 1187.17 L1831.63 1187.17 L1832.22 1187.17 L1832.81 1187.17 L1833.39 1187.17 L1833.98 1187.17 L1834.56 1187.17 L1835.15 1187.17 L1835.74 1187.17 L1836.32 1187.17 L1836.91 1187.17 L1837.5 1187.17 L1838.08 1187.17 L1838.67 1187.17 L1839.26 1187.17 L1839.84 1187.17 L1840.43 1187.17 L1841.01 1187.17 L1841.6 1187.17 L1842.19 1187.17 L1842.77 1187.17 L1843.36 1187.17 L1843.95 1187.17 L1844.53 1187.17 L1845.12 1187.17 L1845.71 1187.17 L1846.29 1187.17 L1846.88 1187.17 L1847.47 1187.17 L1848.05 1187.17 L1848.64 1187.17 L1849.22 1187.17 L1849.81 1187.17 L1850.4 1187.17 L1850.98 1187.17 L1851.57 1187.17 L1852.16 1187.17 L1852.74 1187.17 L1853.33 1187.17 L1853.92 1187.17 L1854.5 1187.17 L1855.09 1187.17 L1855.68 1187.17 L1856.26 1187.17 L1856.85 1187.17 L1857.43 1187.17 L1858.02 1187.17 L1858.61 1187.17 L1859.19 1187.17 L1859.78 1187.17 L1860.37 1187.17 L1860.95 1187.17 L1861.54 1187.17 L1862.13 1187.17 L1862.71 1187.17 L1863.3 1187.17 L1863.88 1187.17 L1864.47 1187.17 L1865.06 1187.17 L1865.64 1187.17 L1866.23 1187.17 L1866.82 1187.17 L1867.4 1187.17 L1867.99 1187.17 L1868.58 1187.17 L1869.16 1187.17 L1869.75 1187.17 L1870.34 1187.17 L1870.92 1187.17 L1871.51 1187.17 L1872.09 1187.17 L1872.68 1187.17 L1873.27 1187.17 L1873.85 1187.17 L1874.44 1187.17 L1875.03 1187.17 L1875.61 1187.17 L1876.2 1187.17 L1876.79 1187.17 L1877.37 1187.17 L1877.96 1187.17 L1878.55 1187.17 L1879.13 1187.17 L1879.72 1187.17 L1880.3 1187.17 L1880.89 1187.17 L1881.48 1187.17 L1882.06 1187.17 L1882.65 1187.17 L1883.24 1187.17 L1883.82 1187.17 L1884.41 1187.17 L1885 1187.17 L1885.58 1187.17 L1886.17 1187.17 L1886.76 1187.17 L1887.34 1187.17 L1887.93 1187.17 L1888.51 1187.17 L1889.1 1187.17 L1889.69 1187.17 L1890.27 1187.17 L1890.86 1187.17 L1891.45 1187.17 L1892.03 1187.17 L1892.62 1187.17 L1893.21 1187.17 L1893.79 1187.17 L1894.38 1187.17 L1894.96 1187.17 L1895.55 1187.17 L1896.14 1187.17 L1896.72 1187.17 L1897.31 1187.17 L1897.9 1187.17 L1898.48 1187.17 L1899.07 1187.17 L1899.66 1187.17 L1900.24 1187.17 L1900.83 1187.17 L1901.42 1187.17 L1902 1187.17 L1902.59 1187.17 L1903.17 1187.17 L1903.76 1187.17 L1904.35 1187.17 L1904.93 1187.17 L1905.52 1187.17 L1906.11 1187.17 L1906.69 1187.17 L1907.28 1187.17 L1907.87 1187.17 L1908.45 1187.17 L1909.04 1187.17 L1909.63 1187.17 L1910.21 1187.17 L1910.8 1187.17 L1911.38 1187.17 L1911.97 1187.17 L1912.56 1187.17 L1913.14 1187.17 L1913.73 1187.17 L1914.32 1187.17 L1914.9 1187.17 L1915.49 1187.17 L1916.08 1187.17 L1916.66 1187.17 L1917.25 1187.17 L1917.83 1187.17 L1918.42 1187.17 L1919.01 1187.17 L1919.59 1187.17 L1920.18 1187.17 L1920.77 1187.17 L1921.35 1187.17 L1921.94 1187.17 L1922.53 1187.17 L1923.11 1187.17 L1923.7 1187.17 L1924.29 1187.17 L1924.87 1187.17 L1925.46 1187.17 L1926.04 1187.17 L1926.63 1187.17 L1927.22 1187.17 L1927.8 1187.17 L1928.39 1187.17 L1928.98 1187.17 L1929.56 1187.17 L1930.15 1187.17 L1930.74 1187.17 L1931.32 1187.17 L1931.91 1187.17 L1932.5 1187.17 L1933.08 1187.17 L1933.67 1187.17 L1934.25 1187.17 L1934.84 1187.17 L1935.43 1187.17 L1936.01 1187.17 L1936.6 1187.17 L1937.19 1187.17 L1937.77 1187.17 L1938.36 1187.17 L1938.95 1187.17 L1939.53 1187.17 L1940.12 1187.17 L1940.71 1187.17 L1941.29 1187.17 L1941.88 1187.17 L1942.46 1187.17 L1943.05 1187.17 L1943.64 1187.17 L1944.22 1187.17 L1944.81 1187.17 L1945.4 1187.17 L1945.98 1187.17 L1946.57 1187.17 L1947.16 1187.17 L1947.74 1187.17 L1948.33 1187.17 L1948.91 1187.17 L1949.5 1187.17 L1950.09 1187.17 L1950.67 1187.17 L1951.26 1187.17 L1951.85 1187.17 L1952.43 1187.17 L1953.02 1187.17 L1953.61 1187.17 L1954.19 1187.17 L1954.78 1187.17 L1955.37 1187.17 L1955.95 1187.17 L1956.54 1187.17 L1957.12 1187.17 L1957.71 1187.17 L1958.3 1187.17 L1958.88 1187.17 L1959.47 1187.17 L1960.06 1187.17 L1960.64 1187.17 L1961.23 1187.17 L1961.82 1187.17 L1962.4 1187.17 L1962.99 1187.17 L1963.58 1187.17 L1964.16 1187.17 L1964.75 1187.17 L1965.33 1187.17 L1965.92 1187.17 L1966.51 1187.17 L1967.09 1187.17 L1967.68 1187.17 L1968.27 1187.17 L1968.85 1187.17 L1969.44 1187.17 L1970.03 1187.17 L1970.61 1187.17 L1971.2 1187.17 L1971.78 1187.17 L1972.37 1187.17 L1972.96 1187.17 L1973.54 1187.17 L1974.13 1187.17 L1974.72 1187.17 L1975.3 1187.17 L1975.89 1187.17 L1976.48 1187.17 L1977.06 1187.17 L1977.65 1187.17 L1978.24 1187.17 L1978.82 1187.17 L1979.41 1187.17 L1979.99 1187.17 L1980.58 1187.17 L1981.17 1187.17 L1981.75 1187.17 L1982.34 1187.17 L1982.93 1187.17 L1983.51 1187.17 L1984.1 1187.17 L1984.69 1187.17 L1985.27 1187.17 L1985.86 1187.17 L1986.45 1187.17 L1987.03 1187.17 L1987.62 1187.17 L1988.2 1187.17 L1988.79 1187.17 L1989.38 1187.17 L1989.96 1187.17 L1990.55 1187.17 L1991.14 1187.17 L1991.72 1187.17 L1992.31 1187.17 L1992.9 1187.17 L1993.48 1187.17 L1994.07 1187.17 L1994.65 1187.17 L1995.24 1187.17 L1995.83 1187.17 L1996.41 1187.17 L1997 1187.17 L1997.59 1187.17 L1998.17 1187.17 L1998.76 1187.17 L1999.35 1187.17 L1999.93 1187.17 L2000.52 1187.17 L2001.11 1187.17 L2001.69 1187.17 L2002.28 1187.17 L2002.86 1187.17 L2003.45 1187.17 L2004.04 1187.17 L2004.62 1187.17 L2005.21 1187.17 L2005.8 1187.17 L2006.38 1187.17 L2006.97 1187.17 L2007.56 1187.17 L2008.14 1187.17 L2008.73 1187.17 L2009.32 1187.17 L2009.9 1187.17 L2010.49 1187.17 L2011.07 1187.17 L2011.66 1187.17 L2012.25 1187.17 L2012.83 1187.17 L2013.42 1187.17 L2014.01 1187.17 L2014.59 1187.17 L2015.18 1187.17 L2015.77 1187.17 L2016.35 1187.17 L2016.94 1187.17 L2017.53 1187.17 L2018.11 1187.17 L2018.7 1187.17 L2019.28 1187.17 L2019.87 1187.17 L2020.46 1187.17 L2021.04 1187.17 L2021.63 1187.17 L2022.22 1187.17 L2022.8 1187.17 L2023.39 1187.17 L2023.98 1187.17 L2024.56 1187.17 L2025.15 1187.17 L2025.73 1187.17 L2026.32 1187.17 L2026.91 1187.17 L2027.49 1187.17 L2028.08 1187.17 L2028.67 1187.17 L2029.25 1187.17 L2029.84 1187.17 L2030.43 1187.17 L2031.01 1187.17 L2031.6 1187.17 L2032.19 1187.17 L2032.77 1187.17 L2033.36 1187.17 L2033.94 1187.17 L2034.53 1187.17 L2035.12 1187.17 L2035.7 1187.17 L2036.29 1187.17 L2036.88 1187.17 L2037.46 1187.17 L2038.05 1187.17 L2038.64 1187.17 L2039.22 1187.17 L2039.81 1187.17 L2040.4 1187.17 L2040.98 1187.17 L2041.57 1187.17 L2042.15 1187.17 L2042.74 1187.17 L2043.33 1187.17 L2043.91 1187.17 L2044.5 1187.17 L2045.09 1187.17 L2045.67 1187.17 L2046.26 1187.17 L2046.85 1187.17 L2047.43 1187.17 L2048.02 1187.17 L2048.6 1187.17 L2049.19 1187.17 L2049.78 1187.17 L2050.36 1187.17 L2050.95 1187.17 L2051.54 1187.17 L2052.12 1187.17 L2052.71 1187.17 L2053.3 1187.17 L2053.88 1187.17 L2054.47 1187.17 L2055.06 1187.17 L2055.64 1187.17 L2056.23 1187.17 L2056.81 1187.17 L2057.4 1187.17 L2057.99 1187.17 L2058.57 1187.17 L2059.16 1187.17 L2059.75 1187.17 L2060.33 1187.17 L2060.92 1187.17 L2061.51 1187.17 L2062.09 1187.17 L2062.68 1187.17 L2063.27 1187.17 L2063.85 1187.17 L2064.44 1187.17 L2065.02 1187.17 L2065.61 1187.17 L2066.2 1187.17 L2066.78 1187.17 L2067.37 1187.17 L2067.96 1187.17 L2068.54 1187.17 L2069.13 1187.17 L2069.72 1187.17 L2070.3 1187.17 L2070.89 1187.17 L2071.48 1187.17 L2072.06 1187.17 L2072.65 1187.17 L2073.23 1187.17 L2073.82 1187.17 L2074.41 1187.17 L2074.99 1187.17 L2075.58 1187.17 L2076.17 1187.17 L2076.75 1187.17 L2077.34 1187.17 L2077.93 1187.17 L2078.51 1187.17 L2079.1 1187.17 L2079.68 1187.17 L2080.27 1187.17 L2080.86 1187.17 L2081.44 1187.17 L2082.03 1187.17 L2082.62 1187.17 L2083.2 1187.17 L2083.79 1187.17 L2084.38 1187.17 L2084.96 1187.17 L2085.55 1187.17 L2086.14 1187.17 L2086.72 1187.17 L2087.31 1187.17 L2087.89 1187.17 L2088.48 1187.17 L2089.07 1187.17 L2089.65 1187.17 L2090.24 1187.17 L2090.83 1187.17 L2091.41 1187.17 L2092 1187.17 L2092.59 1187.17 L2093.17 1187.17 L2093.76 1187.17 L2094.35 1187.17 L2094.93 1187.17 L2095.52 1187.17 L2096.1 1187.17 L2096.69 1187.17 L2097.28 1187.17 L2097.86 1187.17 L2098.45 1187.17 L2099.04 1187.17 L2099.62 1187.17 L2100.21 1187.17 L2100.8 1187.17 L2101.38 1187.17 L2101.97 1187.17 L2102.55 1187.17 L2103.14 1187.17 L2103.73 1187.17 L2104.31 1187.17 L2104.9 1187.17 L2105.49 1187.17 L2106.07 1187.17 L2106.66 1187.17 L2107.25 1187.17 L2107.83 1187.17 L2108.42 1187.17 L2109.01 1187.17 L2109.59 1187.17 L2110.18 1187.17 L2110.76 1187.17 L2111.35 1187.17 L2111.94 1187.17 L2112.52 1187.17 L2113.11 1187.17 L2113.7 1187.17 L2114.28 1187.17 L2114.87 1187.17 L2115.46 1187.17 L2116.04 1187.17 L2116.63 1187.17 L2117.22 1187.17 L2117.8 1187.17 L2118.39 1187.17 L2118.97 1187.17 L2119.56 1187.17 L2120.15 1187.17 L2120.73 1187.17 L2121.32 1187.17 L2121.91 1187.17 L2122.49 1187.17 L2123.08 1187.17 L2123.67 1187.17 L2124.25 1187.17 L2124.84 1187.17 L2125.42 1187.17 L2126.01 1187.17 L2126.6 1187.17 L2127.18 1187.17 L2127.77 1187.17 L2128.36 1187.17 L2128.94 1187.17 L2129.53 1187.17 L2130.12 1187.17 L2130.7 1187.17 L2131.29 1187.17 L2131.88 1187.17 L2132.46 1187.17 L2133.05 1187.17 L2133.63 1187.17 L2134.22 1187.17 L2134.81 1187.17 L2135.39 1187.17 L2135.98 1187.17 L2136.57 1187.17 L2137.15 1187.17 L2137.74 1187.17 L2138.33 1187.17 L2138.91 1187.17 L2139.5 1187.17 L2140.09 1187.17 L2140.67 1187.17 L2141.26 1187.17 L2141.84 1187.17 L2142.43 1187.17 L2143.02 1187.17 L2143.6 1187.17 L2144.19 1187.17 L2144.78 1187.17 L2145.36 1187.17 L2145.95 1187.17 L2146.54 1187.17 L2147.12 1187.17 L2147.71 1187.17 L2148.3 1187.17 L2148.88 1187.17 L2149.47 1187.17 L2150.05 1187.17 L2150.64 1187.17 L2151.23 1187.17 L2151.81 1187.17 L2152.4 1187.17 L2152.99 1187.17 L2153.57 1187.17 L2154.16 1187.17 L2154.75 1187.17 L2155.33 1187.17 L2155.92 1187.17 L2156.5 1187.17 L2157.09 1187.17 L2157.68 1187.17 L2158.26 1187.17 L2158.26 1186.3 L2157.68 1186.3 L2157.09 1186.3 L2156.5 1186.3 L2155.92 1186.3 L2155.33 1186.3 L2154.75 1186.3 L2154.16 1186.3 L2153.57 1186.3 L2152.99 1186.3 L2152.4 1186.3 L2151.81 1186.3 L2151.23 1186.3 L2150.64 1186.3 L2150.05 1186.3 L2149.47 1186.3 L2148.88 1186.3 L2148.3 1186.3 L2147.71 1186.3 L2147.12 1186.3 L2146.54 1186.3 L2145.95 1186.3 L2145.36 1186.3 L2144.78 1186.3 L2144.19 1186.3 L2143.6 1186.3 L2143.02 1186.3 L2142.43 1186.3 L2141.84 1186.3 L2141.26 1186.3 L2140.67 1186.3 L2140.09 1186.3 L2139.5 1186.3 L2138.91 1186.3 L2138.33 1186.3 L2137.74 1186.3 L2137.15 1186.3 L2136.57 1186.3 L2135.98 1186.3 L2135.39 1186.3 L2134.81 1186.3 L2134.22 1186.3 L2133.63 1186.3 L2133.05 1186.3 L2132.46 1186.3 L2131.88 1186.3 L2131.29 1186.3 L2130.7 1186.3 L2130.12 1186.3 L2129.53 1186.3 L2128.94 1186.3 L2128.36 1186.3 L2127.77 1186.3 L2127.18 1186.3 L2126.6 1186.3 L2126.01 1186.3 L2125.42 1186.3 L2124.84 1186.3 L2124.25 1186.3 L2123.67 1186.3 L2123.08 1186.3 L2122.49 1186.3 L2121.91 1186.3 L2121.32 1186.3 L2120.73 1186.3 L2120.15 1186.3 L2119.56 1186.3 L2118.97 1186.3 L2118.39 1186.3 L2117.8 1186.3 L2117.22 1186.3 L2116.63 1186.3 L2116.04 1186.3 L2115.46 1186.3 L2114.87 1186.3 L2114.28 1186.3 L2113.7 1186.3 L2113.11 1186.3 L2112.52 1186.3 L2111.94 1186.3 L2111.35 1186.3 L2110.76 1186.3 L2110.18 1186.3 L2109.59 1186.3 L2109.01 1186.3 L2108.42 1186.3 L2107.83 1186.3 L2107.25 1186.3 L2106.66 1186.3 L2106.07 1186.3 L2105.49 1186.3 L2104.9 1186.3 L2104.31 1186.3 L2103.73 1186.3 L2103.14 1186.3 L2102.55 1186.3 L2101.97 1186.3 L2101.38 1186.3 L2100.8 1186.3 L2100.21 1186.3 L2099.62 1186.3 L2099.04 1186.3 L2098.45 1186.3 L2097.86 1186.3 L2097.28 1186.3 L2096.69 1186.3 L2096.1 1186.3 L2095.52 1186.3 L2094.93 1186.3 L2094.35 1186.3 L2093.76 1186.3 L2093.17 1186.3 L2092.59 1186.3 L2092 1186.3 L2091.41 1186.3 L2090.83 1186.3 L2090.24 1186.3 L2089.65 1186.3 L2089.07 1186.3 L2088.48 1186.3 L2087.89 1186.3 L2087.31 1186.3 L2086.72 1186.3 L2086.14 1186.3 L2085.55 1186.3 L2084.96 1186.3 L2084.38 1186.3 L2083.79 1186.3 L2083.2 1186.3 L2082.62 1186.3 L2082.03 1186.3 L2081.44 1186.3 L2080.86 1186.3 L2080.27 1186.3 L2079.68 1186.3 L2079.1 1186.3 L2078.51 1186.3 L2077.93 1186.3 L2077.34 1186.3 L2076.75 1186.3 L2076.17 1186.3 L2075.58 1186.3 L2074.99 1186.3 L2074.41 1186.3 L2073.82 1186.3 L2073.23 1186.3 L2072.65 1186.3 L2072.06 1186.3 L2071.48 1186.3 L2070.89 1186.3 L2070.3 1186.3 L2069.72 1186.3 L2069.13 1186.3 L2068.54 1186.3 L2067.96 1186.3 L2067.37 1186.3 L2066.78 1186.3 L2066.2 1186.3 L2065.61 1186.3 L2065.02 1186.3 L2064.44 1186.3 L2063.85 1186.3 L2063.27 1186.3 L2062.68 1186.3 L2062.09 1186.3 L2061.51 1186.3 L2060.92 1186.3 L2060.33 1186.3 L2059.75 1186.3 L2059.16 1186.3 L2058.57 1186.3 L2057.99 1186.3 L2057.4 1186.3 L2056.81 1186.3 L2056.23 1186.3 L2055.64 1186.3 L2055.06 1186.3 L2054.47 1186.3 L2053.88 1186.3 L2053.3 1186.3 L2052.71 1186.3 L2052.12 1186.3 L2051.54 1186.3 L2050.95 1186.3 L2050.36 1186.3 L2049.78 1186.3 L2049.19 1186.3 L2048.6 1186.3 L2048.02 1186.3 L2047.43 1186.3 L2046.85 1186.3 L2046.26 1186.3 L2045.67 1186.3 L2045.09 1186.3 L2044.5 1186.3 L2043.91 1186.3 L2043.33 1186.3 L2042.74 1186.3 L2042.15 1186.3 L2041.57 1186.3 L2040.98 1186.3 L2040.4 1186.3 L2039.81 1186.3 L2039.22 1186.3 L2038.64 1186.3 L2038.05 1186.3 L2037.46 1186.3 L2036.88 1186.3 L2036.29 1186.3 L2035.7 1186.3 L2035.12 1186.3 L2034.53 1186.3 L2033.94 1186.3 L2033.36 1186.3 L2032.77 1186.3 L2032.19 1186.3 L2031.6 1186.3 L2031.01 1186.3 L2030.43 1186.3 L2029.84 1186.3 L2029.25 1186.3 L2028.67 1186.3 L2028.08 1186.3 L2027.49 1186.3 L2026.91 1186.3 L2026.32 1186.3 L2025.73 1186.3 L2025.15 1186.3 L2024.56 1186.3 L2023.98 1186.3 L2023.39 1186.3 L2022.8 1186.3 L2022.22 1186.3 L2021.63 1186.3 L2021.04 1186.3 L2020.46 1186.3 L2019.87 1186.3 L2019.28 1186.3 L2018.7 1186.3 L2018.11 1186.3 L2017.53 1186.3 L2016.94 1186.3 L2016.35 1186.3 L2015.77 1186.3 L2015.18 1186.3 L2014.59 1186.3 L2014.01 1186.3 L2013.42 1186.3 L2012.83 1186.3 L2012.25 1186.3 L2011.66 1186.3 L2011.07 1186.3 L2010.49 1186.3 L2009.9 1186.3 L2009.32 1186.3 L2008.73 1186.3 L2008.14 1186.3 L2007.56 1186.3 L2006.97 1186.3 L2006.38 1186.3 L2005.8 1186.3 L2005.21 1186.3 L2004.62 1186.3 L2004.04 1186.3 L2003.45 1186.3 L2002.86 1186.3 L2002.28 1186.3 L2001.69 1186.3 L2001.11 1186.3 L2000.52 1186.3 L1999.93 1186.3 L1999.35 1186.3 L1998.76 1186.3 L1998.17 1186.3 L1997.59 1186.3 L1997 1186.3 L1996.41 1186.3 L1995.83 1186.3 L1995.24 1186.3 L1994.65 1186.3 L1994.07 1186.3 L1993.48 1186.3 L1992.9 1186.3 L1992.31 1186.3 L1991.72 1186.3 L1991.14 1186.3 L1990.55 1186.3 L1989.96 1186.3 L1989.38 1186.3 L1988.79 1186.3 L1988.2 1186.3 L1987.62 1186.3 L1987.03 1186.3 L1986.45 1186.3 L1985.86 1186.3 L1985.27 1186.3 L1984.69 1186.3 L1984.1 1186.3 L1983.51 1186.3 L1982.93 1186.3 L1982.34 1186.3 L1981.75 1186.3 L1981.17 1186.3 L1980.58 1186.3 L1979.99 1186.3 L1979.41 1186.3 L1978.82 1186.3 L1978.24 1186.3 L1977.65 1186.3 L1977.06 1186.3 L1976.48 1186.3 L1975.89 1186.3 L1975.3 1186.3 L1974.72 1186.3 L1974.13 1186.3 L1973.54 1186.3 L1972.96 1186.3 L1972.37 1186.3 L1971.78 1186.3 L1971.2 1186.3 L1970.61 1186.3 L1970.03 1186.3 L1969.44 1186.3 L1968.85 1186.3 L1968.27 1186.3 L1967.68 1186.3 L1967.09 1186.3 L1966.51 1186.3 L1965.92 1186.3 L1965.33 1186.3 L1964.75 1186.3 L1964.16 1186.3 L1963.58 1186.3 L1962.99 1186.3 L1962.4 1186.3 L1961.82 1186.3 L1961.23 1186.3 L1960.64 1186.3 L1960.06 1186.3 L1959.47 1186.3 L1958.88 1186.3 L1958.3 1186.3 L1957.71 1186.3 L1957.12 1186.3 L1956.54 1186.3 L1955.95 1186.3 L1955.37 1186.3 L1954.78 1186.3 L1954.19 1186.3 L1953.61 1186.3 L1953.02 1186.3 L1952.43 1186.3 L1951.85 1186.3 L1951.26 1186.3 L1950.67 1186.3 L1950.09 1186.3 L1949.5 1186.3 L1948.91 1186.3 L1948.33 1186.3 L1947.74 1186.3 L1947.16 1186.3 L1946.57 1186.3 L1945.98 1186.3 L1945.4 1186.3 L1944.81 1186.3 L1944.22 1186.3 L1943.64 1186.3 L1943.05 1186.3 L1942.46 1186.3 L1941.88 1186.3 L1941.29 1186.3 L1940.71 1186.3 L1940.12 1186.3 L1939.53 1186.3 L1938.95 1186.3 L1938.36 1186.3 L1937.77 1186.3 L1937.19 1186.3 L1936.6 1186.3 L1936.01 1186.3 L1935.43 1186.3 L1934.84 1186.3 L1934.25 1186.3 L1933.67 1186.3 L1933.08 1186.3 L1932.5 1186.3 L1931.91 1186.3 L1931.32 1186.3 L1930.74 1186.3 L1930.15 1186.3 L1929.56 1186.3 L1928.98 1186.3 L1928.39 1186.3 L1927.8 1186.3 L1927.22 1186.3 L1926.63 1186.3 L1926.04 1186.3 L1925.46 1186.3 L1924.87 1186.3 L1924.29 1186.3 L1923.7 1186.3 L1923.11 1186.3 L1922.53 1186.3 L1921.94 1186.3 L1921.35 1186.3 L1920.77 1186.3 L1920.18 1186.3 L1919.59 1186.3 L1919.01 1186.3 L1918.42 1186.3 L1917.83 1186.3 L1917.25 1186.3 L1916.66 1186.3 L1916.08 1186.3 L1915.49 1186.3 L1914.9 1186.3 L1914.32 1186.3 L1913.73 1186.3 L1913.14 1186.3 L1912.56 1186.3 L1911.97 1186.3 L1911.38 1186.3 L1910.8 1186.3 L1910.21 1186.3 L1909.63 1186.3 L1909.04 1186.3 L1908.45 1186.3 L1907.87 1186.3 L1907.28 1186.3 L1906.69 1186.3 L1906.11 1186.3 L1905.52 1186.3 L1904.93 1186.3 L1904.35 1186.3 L1903.76 1186.3 L1903.17 1186.3 L1902.59 1186.3 L1902 1186.3 L1901.42 1186.3 L1900.83 1186.3 L1900.24 1186.3 L1899.66 1186.3 L1899.07 1186.3 L1898.48 1186.3 L1897.9 1186.3 L1897.31 1186.3 L1896.72 1186.3 L1896.14 1186.3 L1895.55 1186.3 L1894.96 1186.3 L1894.38 1186.3 L1893.79 1186.3 L1893.21 1186.3 L1892.62 1186.3 L1892.03 1186.3 L1891.45 1186.3 L1890.86 1186.3 L1890.27 1186.3 L1889.69 1186.3 L1889.1 1186.3 L1888.51 1186.3 L1887.93 1186.3 L1887.34 1186.3 L1886.76 1186.3 L1886.17 1186.3 L1885.58 1186.3 L1885 1186.3 L1884.41 1186.3 L1883.82 1186.3 L1883.24 1186.3 L1882.65 1186.3 L1882.06 1186.3 L1881.48 1186.3 L1880.89 1186.3 L1880.3 1186.3 L1879.72 1186.3 L1879.13 1186.3 L1878.55 1186.3 L1877.96 1186.3 L1877.37 1186.3 L1876.79 1186.3 L1876.2 1186.3 L1875.61 1186.3 L1875.03 1186.3 L1874.44 1186.3 L1873.85 1186.3 L1873.27 1186.3 L1872.68 1186.3 L1872.09 1186.3 L1871.51 1186.3 L1870.92 1186.3 L1870.34 1186.3 L1869.75 1186.3 L1869.16 1186.3 L1868.58 1186.3 L1867.99 1186.3 L1867.4 1186.3 L1866.82 1186.3 L1866.23 1186.3 L1865.64 1186.3 L1865.06 1186.3 L1864.47 1186.3 L1863.88 1186.3 L1863.3 1186.3 L1862.71 1186.3 L1862.13 1186.3 L1861.54 1186.3 L1860.95 1186.3 L1860.37 1186.3 L1859.78 1186.3 L1859.19 1186.3 L1858.61 1186.3 L1858.02 1186.3 L1857.43 1186.3 L1856.85 1186.3 L1856.26 1186.3 L1855.68 1186.3 L1855.09 1186.3 L1854.5 1186.3 L1853.92 1186.3 L1853.33 1186.3 L1852.74 1186.3 L1852.16 1186.3 L1851.57 1186.3 L1850.98 1186.3 L1850.4 1186.3 L1849.81 1186.3 L1849.22 1186.3 L1848.64 1186.3 L1848.05 1186.3 L1847.47 1186.3 L1846.88 1186.3 L1846.29 1186.3 L1845.71 1186.3 L1845.12 1186.3 L1844.53 1186.3 L1843.95 1186.3 L1843.36 1186.3 L1842.77 1186.3 L1842.19 1186.3 L1841.6 1186.3 L1841.01 1186.3 L1840.43 1186.3 L1839.84 1186.3 L1839.26 1186.3 L1838.67 1186.3 L1838.08 1186.3 L1837.5 1186.3 L1836.91 1186.3 L1836.32 1186.3 L1835.74 1186.3 L1835.15 1186.3 L1834.56 1186.3 L1833.98 1186.3 L1833.39 1186.3 L1832.81 1186.3 L1832.22 1186.3 L1831.63 1186.3 L1831.05 1186.3 L1830.46 1186.3 L1829.87 1186.3 L1829.29 1186.3 L1828.7 1186.3 L1828.11 1186.3 L1827.53 1186.3 L1826.94 1186.3 L1826.35 1186.3 L1825.77 1186.3 L1825.18 1186.3 L1824.6 1186.3 L1824.01 1186.3 L1823.42 1186.3 L1822.84 1186.3 L1822.25 1186.3 L1821.66 1186.3 L1821.08 1186.3 L1820.49 1186.3 L1819.9 1186.3 L1819.32 1186.3 L1818.73 1186.3 L1818.14 1186.3 L1817.56 1186.3 L1816.97 1186.3 L1816.39 1186.3 L1815.8 1186.3 L1815.21 1186.3 L1814.63 1186.3 L1814.04 1186.3 L1813.45 1186.3 L1812.87 1186.3 L1812.28 1186.3 L1811.69 1186.3 L1811.11 1186.3 L1810.52 1186.3 L1809.94 1186.3 L1809.35 1186.3 L1808.76 1186.3 L1808.18 1186.3 L1807.59 1186.3 L1807 1186.3 L1806.42 1186.3 L1805.83 1186.3 L1805.24 1186.3 L1804.66 1186.3 L1804.07 1186.3 L1803.48 1186.3 L1802.9 1186.3 L1802.31 1186.3 L1801.73 1186.3 L1801.14 1186.3 L1800.55 1186.3 L1799.97 1186.3 L1799.38 1186.3 L1798.79 1186.3 L1798.21 1186.3 L1797.62 1186.3 L1797.03 1186.3 L1796.45 1186.3 L1795.86 1186.3 L1795.27 1186.3 L1794.69 1186.3 L1794.1 1186.3 L1793.52 1186.3 L1792.93 1186.3 L1792.34 1186.3 L1791.76 1186.3 L1791.17 1186.3 L1790.58 1186.3 L1790 1186.3 L1789.41 1186.3 L1788.82 1186.3 L1788.24 1186.3 L1787.65 1186.3 L1787.06 1186.3 L1786.48 1186.3 L1785.89 1186.3 L1785.31 1186.3 L1784.72 1186.3 L1784.13 1186.3 L1783.55 1186.3 L1782.96 1186.3 L1782.37 1186.3 L1781.79 1186.3 L1781.2 1186.3 L1780.61 1186.3 L1780.03 1186.3 L1779.44 1186.3 L1778.86 1186.3 L1778.27 1186.3 L1777.68 1186.3 L1777.1 1186.3 L1776.51 1186.3 L1775.92 1186.3 L1775.34 1186.3 L1774.75 1186.3 L1774.16 1186.3 L1773.58 1186.3 L1772.99 1186.3 L1772.4 1186.3 L1771.82 1186.3 L1771.23 1186.3 L1770.65 1186.3 L1770.06 1186.3 L1769.47 1186.3 L1768.89 1186.3 L1768.3 1186.3 L1767.71 1186.3 L1767.13 1186.3 L1766.54 1186.3 L1765.95 1186.3 L1765.37 1186.3 L1764.78 1186.3 L1764.19 1186.3 L1763.61 1186.3 L1763.02 1186.3 L1762.44 1186.3 L1761.85 1186.3 L1761.26 1186.3 L1760.68 1186.3 L1760.09 1186.3 L1759.5 1186.3 L1758.92 1186.3 L1758.33 1186.3 L1757.74 1186.3 L1757.16 1186.3 L1756.57 1186.3 L1755.99 1186.3 L1755.4 1186.3 L1754.81 1186.3 L1754.23 1186.3 L1753.64 1186.3 L1753.05 1186.3 L1752.47 1186.3 L1751.88 1186.3 L1751.29 1186.3 L1750.71 1186.3 L1750.12 1186.3 L1749.53 1186.3 L1748.95 1186.3 L1748.36 1186.3 L1747.78 1186.3 L1747.19 1186.3 L1746.6 1186.3 L1746.02 1186.3 L1745.43 1186.3 L1744.84 1186.3 L1744.26 1186.3 L1743.67 1186.3 L1743.08 1186.3 L1742.5 1186.3 L1741.91 1186.3 L1741.32 1186.3 L1740.74 1186.3 L1740.15 1186.3 L1739.57 1186.3 L1738.98 1186.3 L1738.39 1186.3 L1737.81 1186.3 L1737.22 1186.3 L1736.63 1186.3 L1736.05 1186.3 L1735.46 1186.3 L1734.87 1186.3 L1734.29 1186.3 L1733.7 1186.3 L1733.11 1186.3 L1732.53 1186.3 L1731.94 1186.3 L1731.36 1186.3 L1730.77 1186.3 L1730.18 1186.3 L1729.6 1186.3 L1729.01 1186.3 L1728.42 1186.3 L1727.84 1186.3 L1727.25 1186.3 L1726.66 1186.3 L1726.08 1186.3 L1725.49 1186.3 L1724.91 1186.3 L1724.32 1186.3 L1723.73 1186.3 L1723.15 1186.3 L1722.56 1186.3 L1721.97 1186.3 L1721.39 1186.3 L1720.8 1186.3 L1720.21 1186.3 L1719.63 1186.3 L1719.04 1186.3 L1718.45 1186.3 L1717.87 1186.3 L1717.28 1186.3 L1716.7 1186.3 L1716.11 1186.3 L1715.52 1186.3 L1714.94 1186.3 L1714.35 1186.3 L1713.76 1186.3 L1713.18 1186.3 L1712.59 1186.3 L1712 1186.3 L1711.42 1186.3 L1710.83 1186.3 L1710.24 1186.3 L1709.66 1186.3 L1709.07 1186.3 L1708.49 1186.3 L1707.9 1186.3 L1707.31 1186.3 L1706.73 1186.3 L1706.14 1186.3 L1705.55 1186.3 L1704.97 1186.3 L1704.38 1186.3 L1703.79 1186.3 L1703.21 1186.3 L1702.62 1186.3 L1702.04 1186.3 L1701.45 1186.3 L1700.86 1186.3 L1700.28 1186.3 L1699.69 1186.3 L1699.1 1186.3 L1698.52 1186.3 L1697.93 1186.3 L1697.34 1186.3 L1696.76 1186.3 L1696.17 1186.3 L1695.58 1186.3 L1695 1186.3 L1694.41 1186.3 L1693.83 1186.3 L1693.24 1186.3 L1692.65 1186.3 L1692.07 1186.3 L1691.48 1186.3 L1690.89 1186.3 L1690.31 1186.3 L1689.72 1186.3 L1689.13 1186.3 L1688.55 1186.3 L1687.96 1186.3 L1687.37 1186.3 L1686.79 1186.3 L1686.2 1186.3 L1685.62 1186.3 L1685.03 1186.3 L1684.44 1186.3 L1683.86 1186.3 L1683.27 1186.3 L1682.68 1186.3 L1682.1 1186.3 L1681.51 1186.3 L1680.92 1186.3 L1680.34 1186.3 L1679.75 1186.3 L1679.17 1186.3 L1678.58 1186.3 L1677.99 1186.3 L1677.41 1186.3 L1676.82 1186.3 L1676.23 1186.3 L1675.65 1186.3 L1675.06 1186.3 L1674.47 1186.3 L1673.89 1186.3 L1673.3 1186.3 L1672.71 1186.3 L1672.13 1186.3 L1671.54 1186.3 L1670.96 1186.3 L1670.37 1186.3 L1669.78 1186.3 L1669.2 1186.3 L1668.61 1186.3 L1668.02 1186.3 L1667.44 1186.3 L1666.85 1186.3 L1666.26 1186.3 L1665.68 1186.3 L1665.09 1186.3 L1664.5 1186.3 L1663.92 1186.3 L1663.33 1186.3 L1662.75 1186.3 L1662.16 1186.3 L1661.57 1186.3 L1660.99 1186.3 L1660.4 1186.3 L1659.81 1186.3 L1659.23 1186.3 L1658.64 1186.3 L1658.05 1186.3 L1657.47 1186.3 L1656.88 1186.3 L1656.29 1186.3 L1655.71 1186.3 L1655.12 1186.3 L1654.54 1186.3 L1653.95 1186.3 L1653.36 1186.3 L1652.78 1186.3 L1652.19 1186.3 L1651.6 1186.3 L1651.02 1186.3 L1650.43 1186.3 L1649.84 1186.3 L1649.26 1186.3 L1648.67 1186.3 L1648.09 1186.3 L1647.5 1186.3 L1646.91 1186.3 L1646.33 1186.3 L1645.74 1186.3 L1645.15 1186.3 L1644.57 1186.3 L1643.98 1186.3 L1643.39 1186.3 L1642.81 1186.3 L1642.22 1186.3 L1641.63 1186.3 L1641.05 1186.3 L1640.46 1186.3 L1639.88 1186.3 L1639.29 1186.3 L1638.7 1186.3 L1638.12 1186.3 L1637.53 1186.3 L1636.94 1186.3 L1636.36 1186.3 L1635.77 1186.3 L1635.18 1186.3 L1634.6 1186.3 L1634.01 1186.3 L1633.42 1186.3 L1632.84 1186.3 L1632.25 1186.3 L1631.67 1186.3 L1631.08 1186.3 L1630.49 1186.3 L1629.91 1186.3 L1629.32 1186.3 L1628.73 1186.3 L1628.15 1186.3 L1627.56 1186.3 L1626.97 1186.3 L1626.39 1186.3 L1625.8 1186.3 L1625.22 1186.3 L1624.63 1186.3 L1624.04 1186.3 L1623.46 1186.3 L1622.87 1186.3 L1622.28 1186.3 L1621.7 1186.3 L1621.11 1186.3 L1620.52 1186.3 L1619.94 1186.3 L1619.35 1186.3 L1618.76 1186.3 L1618.18 1186.3 L1617.59 1186.3 L1617.01 1186.3 L1616.42 1186.3 L1615.83 1186.3 L1615.25 1186.3 L1614.66 1186.3 L1614.07 1186.3 L1613.49 1186.3 L1612.9 1186.3 L1612.31 1186.3 L1611.73 1186.3 L1611.14 1186.3 L1610.55 1186.3 L1609.97 1186.3 L1609.38 1186.3 L1608.8 1186.3 L1608.21 1186.3 L1607.62 1186.3 L1607.04 1186.3 L1606.45 1186.3 L1605.86 1186.3 L1605.28 1186.3 L1604.69 1186.3 L1604.1 1186.3 L1603.52 1186.3 L1602.93 1186.3 L1602.34 1186.3 L1601.76 1186.3 L1601.17 1186.3 L1600.59 1186.3 L1600 1186.3 L1599.41 1186.3 L1598.83 1186.3 L1598.24 1186.3 L1597.65 1186.3 L1597.07 1186.3 L1596.48 1186.3 L1595.89 1186.3 L1595.31 1186.3 L1594.72 1186.3 L1594.14 1186.3 L1593.55 1186.3 L1592.96 1186.3 L1592.38 1186.3 L1591.79 1186.3 L1591.2 1186.3 L1590.62 1186.3 L1590.03 1186.3 L1589.44 1186.3 L1588.86 1186.3 L1588.27 1186.3 L1587.68 1186.3 L1587.1 1186.3 L1586.51 1186.3 L1585.93 1186.3 L1585.34 1186.3 L1584.75 1186.3 L1584.17 1186.3 L1583.58 1186.3 L1582.99 1186.3 L1582.41 1186.3 L1581.82 1186.3 L1581.23 1186.3 L1580.65 1186.3 L1580.06 1186.3 L1579.47 1186.3 L1578.89 1186.3 L1578.3 1186.3 L1577.72 1186.3 L1577.13 1186.3 L1576.54 1186.3 L1575.96 1186.3 L1575.37 1186.3 L1574.78 1186.3 L1574.2 1186.3 L1573.61 1186.3 L1573.02 1186.3 L1572.44 1186.3 L1571.85 1186.3 L1571.27 1186.3 L1570.68 1186.3 L1570.09 1186.3 L1569.51 1186.3 L1568.92 1186.3 L1568.33 1186.3 L1567.75 1186.3 L1567.16 1186.3 L1566.57 1186.3 L1565.99 1186.3 L1565.4 1186.3 L1564.81 1186.3 L1564.23 1186.3 L1563.64 1186.3 L1563.06 1186.3 L1562.47 1186.3 L1561.88 1186.3 L1561.3 1186.3 L1560.71 1186.3 L1560.12 1186.3 L1559.54 1186.3 L1558.95 1186.3 L1558.36 1186.3 L1557.78 1186.3 L1557.19 1186.3 L1556.6 1186.3 L1556.02 1186.3 L1555.43 1186.3 L1554.85 1186.3 L1554.26 1186.3 L1553.67 1186.3 L1553.09 1186.3 L1552.5 1186.3 L1551.91 1186.3 L1551.33 1186.3 L1550.74 1186.3 L1550.15 1186.3 L1549.57 1186.3 L1548.98 1186.3 L1548.4 1186.3 L1547.81 1186.3 L1547.22 1186.3 L1546.64 1186.3 L1546.05 1186.3 L1545.46 1186.3 L1544.88 1186.3 L1544.29 1186.3 L1543.7 1186.3 L1543.12 1186.3 L1542.53 1186.3 L1541.94 1186.3 L1541.36 1186.3 L1540.77 1186.3 L1540.19 1186.3 L1539.6 1186.3 L1539.01 1186.3 L1538.43 1186.3 L1537.84 1186.3 L1537.25 1186.3 L1536.67 1186.3 L1536.08 1186.3 L1535.49 1186.3 L1534.91 1186.3 L1534.32 1186.3 L1533.73 1186.3 L1533.15 1186.3 L1532.56 1186.3 L1531.98 1186.3 L1531.39 1186.3 L1530.8 1186.3 L1530.22 1186.3 L1529.63 1186.3 L1529.04 1186.3 L1528.46 1186.3 L1527.87 1186.3 L1527.28 1186.3 L1526.7 1186.3 L1526.11 1186.3 L1525.52 1186.3 L1524.94 1186.3 L1524.35 1186.3 L1523.77 1186.3 L1523.18 1186.3 L1522.59 1186.3 L1522.01 1186.3 L1521.42 1186.3 L1520.83 1186.3 L1520.25 1186.3 L1519.66 1186.3 L1519.07 1186.3 L1518.49 1186.3 L1517.9 1186.3 L1517.32 1186.3 L1516.73 1186.3 L1516.14 1186.3 L1515.56 1186.3 L1514.97 1186.3 L1514.38 1186.3 L1513.8 1186.3 L1513.21 1186.3 L1512.62 1186.3 L1512.04 1186.3 L1511.45 1186.3 L1510.86 1186.3 L1510.28 1186.3 L1509.69 1186.3 L1509.11 1186.3 L1508.52 1186.3 L1507.93 1186.3 L1507.35 1186.3 L1506.76 1186.3 L1506.17 1186.3 L1505.59 1186.3 L1505 1186.3 L1504.41 1186.3 L1503.83 1186.3 L1503.24 1186.3 L1502.65 1186.3 L1502.07 1186.3 L1501.48 1186.3 L1500.9 1186.3 L1500.31 1186.3 L1499.72 1186.3 L1499.14 1186.3 L1498.55 1186.3 L1497.96 1186.3 L1497.38 1186.3 L1496.79 1186.3 L1496.2 1186.3 L1495.62 1186.3 L1495.03 1186.3 L1494.45 1186.3 L1493.86 1186.3 L1493.27 1186.3 L1492.69 1186.3 L1492.1 1186.3 L1491.51 1186.3 L1490.93 1186.3 L1490.34 1186.3 L1489.75 1186.3 L1489.17 1186.3 L1488.58 1186.3 L1487.99 1186.3 L1487.41 1186.3 L1486.82 1186.3 L1486.24 1186.3 L1485.65 1186.3 L1485.06 1186.3 L1484.48 1186.3 L1483.89 1186.3 L1483.3 1186.3 L1482.72 1186.3 L1482.13 1186.3 L1481.54 1186.3 L1480.96 1186.3 L1480.37 1186.3 L1479.78 1186.3 L1479.2 1186.3 L1478.61 1186.3 L1478.03 1186.3 L1477.44 1186.3 L1476.85 1186.3 L1476.27 1186.3 L1475.68 1186.3 L1475.09 1186.3 L1474.51 1186.3 L1473.92 1186.3 L1473.33 1186.3 L1472.75 1186.3 L1472.16 1186.3 L1471.57 1186.3 L1470.99 1186.3 L1470.4 1186.3 L1469.82 1186.3 L1469.23 1186.3 L1468.64 1186.3 L1468.06 1186.3 L1467.47 1186.3 L1466.88 1186.3 L1466.3 1186.3 L1465.71 1186.3 L1465.12 1186.3 L1464.54 1186.3 L1463.95 1186.3 L1463.37 1186.3 L1462.78 1186.3 L1462.19 1186.3 L1461.61 1186.3 L1461.02 1186.3 L1460.43 1186.3 L1459.85 1186.3 L1459.26 1186.3 L1458.67 1186.3 L1458.09 1186.3 L1457.5 1186.3 L1456.91 1186.3 L1456.33 1186.3 L1455.74 1186.3 L1455.16 1186.3 L1454.57 1186.3 L1453.98 1186.3 L1453.4 1186.3 L1452.81 1186.3 L1452.22 1186.3 L1451.64 1186.3 L1451.05 1186.3 L1450.46 1186.3 L1449.88 1186.3 L1449.29 1186.3 L1448.7 1186.3 L1448.12 1186.3 L1447.53 1186.3 L1446.95 1186.3 L1446.36 1186.3 L1445.77 1186.3 L1445.19 1186.3 L1444.6 1186.3 L1444.01 1186.3 L1443.43 1186.3 L1442.84 1186.3 L1442.25 1186.3 L1441.67 1186.3 L1441.08 1186.3 L1440.5 1186.3 L1439.91 1186.3 L1439.32 1186.3 L1438.74 1186.3 L1438.15 1186.3 L1437.56 1186.3 L1436.98 1186.3 L1436.39 1186.3 L1435.8 1186.3 L1435.22 1186.3 L1434.63 1186.3 L1434.04 1186.3 L1433.46 1186.3 L1432.87 1186.3 L1432.29 1186.3 L1431.7 1186.3 L1431.11 1186.3 L1430.53 1186.3 L1429.94 1186.3 L1429.35 1186.3 L1428.77 1186.3 L1428.18 1186.3 L1427.59 1186.3 L1427.01 1186.3 L1426.42 1186.3 L1425.83 1186.3 L1425.25 1186.3 L1424.66 1186.3 L1424.08 1186.3 L1423.49 1186.3 L1422.9 1186.3 L1422.32 1186.3 L1421.73 1186.3 L1421.14 1186.3 L1420.56 1186.3 L1419.97 1186.3 L1419.38 1186.3 L1418.8 1186.3 L1418.21 1186.3 L1417.63 1186.3 L1417.04 1186.3 L1416.45 1186.3 L1415.87 1186.3 L1415.28 1186.3 L1414.69 1186.3 L1414.11 1186.3 L1413.52 1186.3 L1412.93 1186.3 L1412.35 1186.3 L1411.76 1186.3 L1411.17 1186.3 L1410.59 1186.3 L1410 1186.3 L1409.42 1186.3 L1408.83 1186.3 L1408.24 1186.3 L1407.66 1186.3 L1407.07 1186.3 L1406.48 1186.3 L1405.9 1186.3 L1405.31 1186.3 L1404.72 1186.3 L1404.14 1186.3 L1403.55 1186.3 L1402.96 1186.3 L1402.38 1186.3 L1401.79 1186.3 L1401.21 1186.3 L1400.62 1186.3 L1400.03 1186.3 L1399.45 1186.3 L1398.86 1186.3 L1398.27 1186.3 L1397.69 1186.3 L1397.1 1186.3 L1396.51 1186.3 L1395.93 1186.3 L1395.34 1186.3 L1394.75 1186.3 L1394.17 1186.3 L1393.58 1186.3 L1393 1186.3 L1392.41 1186.3 L1391.82 1186.3 L1391.24 1186.3 L1390.65 1186.3 L1390.06 1186.3 L1389.48 1186.3 L1388.89 1186.3 L1388.3 1186.3 L1387.72 1186.3 L1387.13 1186.3 L1386.55 1186.3 L1385.96 1186.3 L1385.37 1186.3 L1384.79 1186.3 L1384.2 1186.3 L1383.61 1186.3 L1383.03 1186.3 L1382.44 1186.3 L1381.85 1186.3 L1381.27 1186.3 L1380.68 1186.3 L1380.09 1186.3 L1379.51 1186.3 L1378.92 1186.3 L1378.34 1186.3 L1377.75 1186.3 L1377.16 1186.3 L1376.58 1186.3 L1375.99 1186.3 L1375.4 1186.3 L1374.82 1186.3 L1374.23 1186.3 L1373.64 1186.3 L1373.06 1186.3 L1372.47 1186.3 L1371.88 1186.3 L1371.3 1186.3 L1370.71 1186.3 L1370.13 1186.3 L1369.54 1186.3 L1368.95 1186.3 L1368.37 1186.3 L1367.78 1186.3 L1367.19 1186.3 L1366.61 1186.3 L1366.02 1186.3 L1365.43 1186.3 L1364.85 1186.3 L1364.26 1186.3 L1363.68 1186.3 L1363.09 1186.3 L1362.5 1186.3 L1361.92 1186.3 L1361.33 1186.3 L1360.74 1186.3 L1360.16 1186.3 L1359.57 1186.3 L1358.98 1186.3 L1358.4 1186.3 L1357.81 1186.3 L1357.22 1186.3 L1356.64 1186.3 L1356.05 1186.3 L1355.47 1186.3 L1354.88 1186.3 L1354.29 1186.3 L1353.71 1186.3 L1353.12 1186.3 L1352.53 1186.3 L1351.95 1186.3 L1351.36 1186.3 L1350.77 1186.3 L1350.19 1186.3 L1349.6 1186.3 L1349.01 1186.3 L1348.43 1186.3 L1347.84 1186.3 L1347.26 1186.3 L1346.67 1186.3 L1346.08 1186.3 L1345.5 1186.3 L1344.91 1186.3 L1344.32 1186.3 L1343.74 1186.3 L1343.15 1186.3 L1342.56 1186.3 L1341.98 1186.3 L1341.39 1186.3 L1340.8 1186.3 L1340.22 1186.3 L1339.63 1186.3 L1339.05 1186.3 L1338.46 1186.3 L1337.87 1186.3 L1337.29 1186.3 L1336.7 1186.3 L1336.11 1186.3 L1335.53 1186.3 L1334.94 1186.3 L1334.35 1186.3 L1333.77 1186.3 L1333.18 1186.3 L1332.6 1186.3 L1332.01 1186.3 L1331.42 1186.3 L1330.84 1186.3 L1330.25 1186.3 L1329.66 1186.3 L1329.08 1186.3 L1328.49 1186.3 L1327.9 1186.3 L1327.32 1186.3 L1326.73 1186.3 L1326.14 1186.3 L1325.56 1186.3 L1324.97 1186.3 L1324.39 1186.3 L1323.8 1186.3 L1323.21 1186.3 L1322.63 1186.3 L1322.04 1186.3 L1321.45 1186.3 L1320.87 1186.3 L1320.28 1186.3 L1319.69 1186.3 L1319.11 1186.3 L1318.52 1186.3 L1317.93 1186.3 L1317.35 1186.3 L1316.76 1186.3 L1316.18 1186.3 L1315.59 1186.3 L1315 1186.3 L1314.42 1186.3 L1313.83 1186.3 L1313.24 1186.3 L1312.66 1186.3 L1312.07 1186.3 L1311.48 1186.3 L1310.9 1186.3 L1310.31 1186.3 L1309.73 1186.3 L1309.14 1186.3 L1308.55 1186.3 L1307.97 1186.3 L1307.38 1186.3 L1306.79 1186.3 L1306.21 1186.3 L1305.62 1186.3 L1305.03 1186.3 L1304.45 1186.3 L1303.86 1186.3 L1303.27 1186.3 L1302.69 1186.3 L1302.1 1186.3 L1301.52 1186.3 L1300.93 1186.3 L1300.34 1186.3 L1299.76 1186.3 L1299.17 1186.3 L1298.58 1186.3 L1298 1186.3 L1297.41 1186.3 L1296.82 1186.3 L1296.24 1186.3 L1295.65 1186.3 L1295.06 1186.3 L1294.48 1186.3 L1293.89 1186.3 L1293.31 1186.3 L1292.72 1186.3 L1292.13 1186.3 L1291.55 1186.3 L1290.96 1186.3 L1290.37 1186.3 L1289.79 1186.3 L1289.2 1186.3 L1288.61 1186.3 L1288.03 1186.3 L1287.44 1186.3 L1286.86 1186.3 L1286.27 1186.3 L1285.68 1186.3 L1285.1 1186.3 L1284.51 1186.3 L1283.92 1186.3 L1283.34 1186.3 L1282.75 1186.3 L1282.16 1186.3 L1281.58 1186.3 L1280.99 1186.3 L1280.4 1186.3 L1279.82 1186.3 L1279.23 1186.3 L1278.65 1186.3 L1278.06 1186.3 L1277.47 1186.3 L1276.89 1186.3 L1276.3 1186.3 L1275.71 1186.3 L1275.13 1186.3 L1274.54 1186.3 L1273.95 1186.3 L1273.37 1186.3 L1272.78 1186.3 L1272.19 1186.3 L1271.61 1186.3 L1271.02 1186.3 L1270.44 1186.3 L1269.85 1186.3 L1269.26 1186.3 L1268.68 1186.3 L1268.09 1186.3 L1267.5 1186.3 L1266.92 1186.3 L1266.33 1186.3 L1265.74 1186.3 L1265.16 1186.3 L1264.57 1186.3 L1263.98 1186.3 L1263.4 1186.3 L1262.81 1186.3 L1262.23 1186.3 L1261.64 1186.3 L1261.05 1186.3 L1260.47 1186.3 L1259.88 1186.3 L1259.29 1186.3 L1258.71 1186.3 L1258.12 1186.3 L1257.53 1186.3 L1256.95 1186.3 L1256.36 1186.3 L1255.78 1186.3 L1255.19 1186.3 L1254.6 1186.3 L1254.02 1186.3 L1253.43 1186.3 L1252.84 1186.3 L1252.26 1186.3 L1251.67 1186.3 L1251.08 1186.3 L1250.5 1186.3 L1249.91 1186.3 L1249.32 1186.3 L1248.74 1186.3 L1248.15 1186.3 L1247.57 1186.3 L1246.98 1186.3 L1246.39 1186.3 L1245.81 1186.3 L1245.22 1186.3 L1244.63 1186.3 L1244.05 1186.3 L1243.46 1186.3 L1242.87 1186.3 L1242.29 1186.3 L1241.7 1186.3 L1241.11 1186.3 L1240.53 1186.3 L1239.94 1186.3 L1239.36 1186.3 L1238.77 1186.3 L1238.18 1186.3 L1237.6 1186.3 L1237.01 1186.3 L1236.42 1186.3 L1235.84 1186.3 L1235.25 1186.3 L1234.66 1186.3 L1234.08 1186.3 L1233.49 1186.3 L1232.91 1186.3 L1232.32 1186.3 L1231.73 1186.3 L1231.15 1186.3 L1230.56 1186.3 L1229.97 1186.3 L1229.39 1186.3 L1228.8 1186.3 L1228.21 1186.3 L1227.63 1186.3 L1227.04 1186.3 L1226.45 1186.3 L1225.87 1186.3 L1225.28 1186.3 L1224.7 1186.3 L1224.11 1186.3 L1223.52 1186.3 L1222.94 1186.3 L1222.35 1186.3 L1221.76 1186.3 L1221.18 1186.3 L1220.59 1186.3 L1220 1186.3 L1219.42 1186.3 L1218.83 1186.3 L1218.24 1186.3 L1217.66 1186.3 L1217.07 1186.3 L1216.49 1186.3 L1215.9 1186.3 L1215.31 1186.3 L1214.73 1186.3 L1214.14 1186.3 L1213.55 1186.3 L1212.97 1186.3 L1212.38 1186.3 L1211.79 1186.3 L1211.21 1186.3 L1210.62 1186.3 L1210.03 1186.3 L1209.45 1186.3 L1208.86 1186.3 L1208.28 1186.3 L1207.69 1186.3 L1207.1 1186.3 L1206.52 1186.3 L1205.93 1186.3 L1205.34 1186.3 L1204.76 1186.3 L1204.17 1186.3 L1203.58 1186.3 L1203 1186.3 L1202.41 1186.3 L1201.83 1186.3 L1201.24 1186.3 L1200.65 1186.3 L1200.07 1186.3 L1199.48 1186.3 L1198.89 1186.3 L1198.31 1186.3 L1197.72 1186.3 L1197.13 1186.3 L1196.55 1186.3 L1195.96 1186.3 L1195.37 1186.3 L1194.79 1186.3 L1194.2 1186.3 L1193.62 1186.3 L1193.03 1186.3 L1192.44 1186.3 L1191.86 1186.3 L1191.27 1186.3 L1190.68 1186.3 L1190.1 1186.3 L1189.51 1186.3 L1188.92 1186.3 L1188.34 1186.3 L1187.75 1186.3 L1187.16 1186.3 L1186.58 1186.3 L1185.99 1186.3 L1185.41 1186.3 L1184.82 1186.3 L1184.23 1186.3 L1183.65 1186.3 L1183.06 1186.3 L1182.47 1186.3 L1181.89 1186.3 L1181.3 1186.3 L1180.71 1186.3 L1180.13 1186.3 L1179.54 1186.3 L1178.96 1186.3 L1178.37 1186.3 L1177.78 1186.3 L1177.2 1186.3 L1176.61 1186.3 L1176.02 1186.3 L1175.44 1186.3 L1174.85 1186.3 L1174.26 1186.3 L1173.68 1186.3 L1173.09 1186.3 L1172.5 1186.3 L1171.92 1186.3 L1171.33 1186.3 L1170.75 1186.3 L1170.16 1186.3 L1169.57 1186.3 L1168.99 1186.3 L1168.4 1186.3 L1167.81 1186.3 L1167.23 1186.3 L1166.64 1186.3 L1166.05 1186.3 L1165.47 1186.3 L1164.88 1186.3 L1164.29 1186.3 L1163.71 1186.3 L1163.12 1186.3 L1162.54 1186.3 L1161.95 1186.3 L1161.36 1186.3 L1160.78 1186.3 L1160.19 1186.3 L1159.6 1186.3 L1159.02 1186.3 L1158.43 1186.3 L1157.84 1186.3 L1157.26 1186.3 L1156.67 1186.3 L1156.09 1186.3 L1155.5 1186.3 L1154.91 1186.3 L1154.33 1186.3 L1153.74 1186.3 L1153.15 1186.3 L1152.57 1186.3 L1151.98 1186.3 L1151.39 1186.3 L1150.81 1186.3 L1150.22 1186.3 L1149.63 1186.3 L1149.05 1186.3 L1148.46 1186.3 L1147.88 1186.3 L1147.29 1186.3 L1146.7 1186.3 L1146.12 1186.3 L1145.53 1186.3 L1144.94 1186.3 L1144.36 1186.3 L1143.77 1186.3 L1143.18 1186.3 L1142.6 1186.3 L1142.01 1186.3 L1141.42 1186.3 L1140.84 1186.3 L1140.25 1186.3 L1139.67 1186.3 L1139.08 1186.3 L1138.49 1186.3 L1137.91 1186.3 L1137.32 1186.3 L1136.73 1186.3 L1136.15 1186.3 L1135.56 1186.3 L1134.97 1186.3 L1134.39 1186.3 L1133.8 1186.3 L1133.21 1186.3 L1132.63 1186.3 L1132.04 1186.3 L1131.46 1186.3 L1130.87 1186.3 L1130.28 1186.3 L1129.7 1186.3 L1129.11 1186.3 L1128.52 1186.3 L1127.94 1186.3 L1127.35 1186.3 L1126.76 1186.3 L1126.18 1186.3 L1125.59 1186.3 L1125.01 1186.3 L1124.42 1186.3 L1123.83 1186.3 L1123.25 1186.3 L1122.66 1186.3 L1122.07 1186.3 L1121.49 1186.3 L1120.9 1186.3 L1120.31 1186.3 L1119.73 1186.3 L1119.14 1186.3 L1118.55 1186.3 L1117.97 1186.3 L1117.38 1186.3 L1116.8 1186.3 L1116.21 1186.3 L1115.62 1186.3 L1115.04 1186.3 L1114.45 1186.3 L1113.86 1186.3 L1113.28 1186.3 L1112.69 1186.3 L1112.1 1186.3 L1111.52 1186.3 L1110.93 1186.3 L1110.34 1186.3 L1109.76 1186.3 L1109.17 1186.3 L1108.59 1186.3 L1108 1186.3 L1107.41 1186.3 L1106.83 1186.3 L1106.24 1186.3 L1105.65 1186.3 L1105.07 1186.3 L1104.48 1186.3 L1103.89 1186.3 L1103.31 1186.3 L1102.72 1186.3 L1102.14 1186.3 L1101.55 1186.3 L1100.96 1186.3 L1100.38 1186.3 L1099.79 1186.3 L1099.2 1186.3 L1098.62 1186.3 L1098.03 1186.3 L1097.44 1186.3 L1096.86 1186.3 L1096.27 1186.3 L1095.68 1186.3 L1095.1 1186.3 L1094.51 1186.3 L1093.93 1186.3 L1093.34 1186.3 L1092.75 1186.3 L1092.17 1186.3 L1091.58 1186.3 L1090.99 1186.3 L1090.41 1186.3 L1089.82 1186.3 L1089.23 1186.3 L1088.65 1186.3 L1088.06 1186.3 L1087.47 1186.3 L1086.89 1186.3 L1086.3 1186.3 L1085.72 1186.3 L1085.13 1186.3 L1084.54 1186.3 L1083.96 1186.3 L1083.37 1186.3 L1082.78 1186.3 L1082.2 1186.3 L1081.61 1186.3 L1081.02 1186.3 L1080.44 1186.3 L1079.85 1186.3 L1079.26 1186.3 L1078.68 1186.3 L1078.09 1186.3 L1077.51 1186.3 L1076.92 1186.3 L1076.33 1186.3 L1075.75 1186.3 L1075.16 1186.3 L1074.57 1186.3 L1073.99 1186.3 L1073.4 1186.3 L1072.81 1186.3 L1072.23 1186.3 L1071.64 1186.3 L1071.06 1186.3 L1070.47 1186.3 L1069.88 1186.3 L1069.3 1186.3 L1068.71 1186.3 L1068.12 1186.3 L1067.54 1186.3 L1066.95 1186.3 L1066.36 1186.3 L1065.78 1186.3 L1065.19 1186.3 L1064.6 1186.3 L1064.02 1186.3 L1063.43 1186.3 L1062.85 1186.3 L1062.26 1186.3 L1061.67 1186.3 L1061.09 1186.3 L1060.5 1186.3 L1059.91 1186.3 L1059.33 1186.3 L1058.74 1186.3 L1058.15 1186.3 L1057.57 1186.3 L1056.98 1186.3 L1056.39 1186.3 L1055.81 1186.3 L1055.22 1186.3 L1054.64 1186.3 L1054.05 1186.3 L1053.46 1186.3 L1052.88 1186.3 L1052.29 1186.3 L1051.7 1186.3 L1051.12 1186.3 L1050.53 1186.3 L1049.94 1186.3 L1049.36 1186.3 L1048.77 1186.3 L1048.19 1186.3 L1047.6 1186.3 L1047.01 1186.3 L1046.43 1186.3 L1045.84 1186.3 L1045.25 1186.3 L1044.67 1186.3 L1044.08 1186.3 L1043.49 1186.3 L1042.91 1186.3 L1042.32 1186.3 L1041.73 1186.3 L1041.15 1186.3 L1040.56 1186.3 L1039.98 1186.3 L1039.39 1186.3 L1038.8 1186.3 L1038.22 1186.3 L1037.63 1186.3 L1037.04 1186.3 L1036.46 1186.3 L1035.87 1186.3 L1035.28 1186.3 L1034.7 1186.3 L1034.11 1186.3 L1033.52 1186.3 L1032.94 1186.3 L1032.35 1186.3 L1031.77 1186.3 L1031.18 1186.3 L1030.59 1186.3 L1030.01 1186.3 L1029.42 1186.3 L1028.83 1186.3 L1028.25 1186.3 L1027.66 1186.3 L1027.07 1186.3 L1026.49 1186.3 L1025.9 1186.3 L1025.32 1186.3 L1024.73 1186.3 L1024.14 1186.3 L1023.56 1186.3 L1022.97 1186.3 L1022.38 1186.3 L1021.8 1186.3 L1021.21 1186.3 L1020.62 1186.3 L1020.04 1186.3 L1019.45 1186.3 L1018.86 1186.3 L1018.28 1186.3 L1017.69 1186.3 L1017.11 1186.3 L1016.52 1186.3 L1015.93 1186.3 L1015.35 1186.3 L1014.76 1186.3 L1014.17 1186.3 L1013.59 1186.3 L1013 1186.3 L1012.41 1186.3 L1011.83 1186.3 L1011.24 1186.3 L1010.65 1186.3 L1010.07 1186.3 L1009.48 1186.3 L1008.9 1186.3 L1008.31 1186.3 L1007.72 1186.3 L1007.14 1186.3 L1006.55 1186.3 L1005.96 1186.3 L1005.38 1186.3 L1004.79 1186.3 L1004.2 1186.3 L1003.62 1186.3 L1003.03 1186.3 L1002.44 1186.3 L1001.86 1186.3 L1001.27 1186.3 L1000.69 1186.3 L1000.1 1186.3 L999.513 1186.3 L998.926 1186.3 L998.34 1186.3 L997.754 1186.3 L997.167 1186.3 L996.581 1186.3 L995.994 1186.3 L995.408 1186.3 L994.822 1186.3 L994.235 1186.3 L993.649 1186.3 L993.062 1186.3 L992.476 1186.3 L991.889 1186.3 L991.303 1186.3 L990.717 1186.3 L990.13 1186.3 L989.544 1186.3 L988.957 1186.3 L988.371 1186.3 L987.785 1186.3 L987.198 1186.3 L986.612 1186.3 L986.025 1186.3  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1186.73 986.612,1186.73 987.198,1186.73 987.785,1186.73 988.371,1186.73 988.957,1186.73 989.544,1186.73 990.13,1186.73 990.717,1186.73 991.303,1186.73 991.889,1186.73 992.476,1186.73 993.062,1186.73 993.649,1186.73 994.235,1186.73 994.822,1186.73 995.408,1186.73 995.994,1186.73 996.581,1186.73 997.167,1186.73 997.754,1186.73 998.34,1186.73 998.926,1186.73 999.513,1186.73 1000.1,1186.73 1000.69,1186.73 1001.27,1186.73 1001.86,1186.73 1002.44,1186.73 1003.03,1186.73 1003.62,1186.73 1004.2,1186.73 1004.79,1186.73 1005.38,1186.73 1005.96,1186.73 1006.55,1186.73 1007.14,1186.73 1007.72,1186.73 1008.31,1186.73 1008.9,1186.73 1009.48,1186.73 1010.07,1186.73 1010.65,1186.73 1011.24,1186.73 1011.83,1186.73 1012.41,1186.73 1013,1186.73 1013.59,1186.73 1014.17,1186.73 1014.76,1186.73 1015.35,1186.73 1015.93,1186.73 1016.52,1186.73 1017.11,1186.73 1017.69,1186.73 1018.28,1186.73 1018.86,1186.73 1019.45,1186.73 1020.04,1186.73 1020.62,1186.73 1021.21,1186.73 1021.8,1186.73 1022.38,1186.73 1022.97,1186.73 1023.56,1186.73 1024.14,1186.73 1024.73,1186.73 1025.32,1186.73 1025.9,1186.73 1026.49,1186.73 1027.07,1186.73 1027.66,1186.73 1028.25,1186.73 1028.83,1186.73 1029.42,1186.73 1030.01,1186.73 1030.59,1186.73 1031.18,1186.73 1031.77,1186.73 1032.35,1186.73 1032.94,1186.73 1033.52,1186.73 1034.11,1186.73 1034.7,1186.73 1035.28,1186.73 1035.87,1186.73 1036.46,1186.73 1037.04,1186.73 1037.63,1186.73 1038.22,1186.73 1038.8,1186.73 1039.39,1186.73 1039.98,1186.73 1040.56,1186.73 1041.15,1186.73 1041.73,1186.73 1042.32,1186.73 1042.91,1186.73 1043.49,1186.73 1044.08,1186.73 1044.67,1186.73 1045.25,1186.73 1045.84,1186.73 1046.43,1186.73 1047.01,1186.73 1047.6,1186.73 1048.19,1186.73 1048.77,1186.73 1049.36,1186.73 1049.94,1186.73 1050.53,1186.73 1051.12,1186.73 1051.7,1186.73 1052.29,1186.73 1052.88,1186.73 1053.46,1186.73 1054.05,1186.73 1054.64,1186.73 1055.22,1186.73 1055.81,1186.73 1056.39,1186.73 1056.98,1186.73 1057.57,1186.73 1058.15,1186.73 1058.74,1186.73 1059.33,1186.73 1059.91,1186.73 1060.5,1186.73 1061.09,1186.73 1061.67,1186.73 1062.26,1186.73 1062.85,1186.73 1063.43,1186.73 1064.02,1186.73 1064.6,1186.73 1065.19,1186.73 1065.78,1186.73 1066.36,1186.73 1066.95,1186.73 1067.54,1186.73 1068.12,1186.73 1068.71,1186.73 1069.3,1186.73 1069.88,1186.73 1070.47,1186.73 1071.06,1186.73 1071.64,1186.73 1072.23,1186.73 1072.81,1186.73 1073.4,1186.73 1073.99,1186.73 1074.57,1186.73 1075.16,1186.73 1075.75,1186.73 1076.33,1186.73 1076.92,1186.73 1077.51,1186.73 1078.09,1186.73 1078.68,1186.73 1079.26,1186.73 1079.85,1186.73 1080.44,1186.73 1081.02,1186.73 1081.61,1186.73 1082.2,1186.73 1082.78,1186.73 1083.37,1186.73 1083.96,1186.73 1084.54,1186.73 1085.13,1186.73 1085.72,1186.73 1086.3,1186.73 1086.89,1186.73 1087.47,1186.73 1088.06,1186.73 1088.65,1186.73 1089.23,1186.73 1089.82,1186.73 1090.41,1186.73 1090.99,1186.73 1091.58,1186.73 1092.17,1186.73 1092.75,1186.73 1093.34,1186.73 1093.93,1186.73 1094.51,1186.73 1095.1,1186.73 1095.68,1186.73 1096.27,1186.73 1096.86,1186.73 1097.44,1186.73 1098.03,1186.73 1098.62,1186.73 1099.2,1186.73 1099.79,1186.73 1100.38,1186.73 1100.96,1186.73 1101.55,1186.73 1102.14,1186.73 1102.72,1186.73 1103.31,1186.73 1103.89,1186.73 1104.48,1186.73 1105.07,1186.73 1105.65,1186.73 1106.24,1186.73 1106.83,1186.73 1107.41,1186.73 1108,1186.73 1108.59,1186.73 1109.17,1186.73 1109.76,1186.73 1110.34,1186.73 1110.93,1186.73 1111.52,1186.73 1112.1,1186.73 1112.69,1186.73 1113.28,1186.73 1113.86,1186.73 1114.45,1186.73 1115.04,1186.73 1115.62,1186.73 1116.21,1186.73 1116.8,1186.73 1117.38,1186.73 1117.97,1186.73 1118.55,1186.73 1119.14,1186.73 1119.73,1186.73 1120.31,1186.73 1120.9,1186.73 1121.49,1186.73 1122.07,1186.73 1122.66,1186.73 1123.25,1186.73 1123.83,1186.73 1124.42,1186.73 1125.01,1186.73 1125.59,1186.73 1126.18,1186.73 1126.76,1186.73 1127.35,1186.73 1127.94,1186.73 1128.52,1186.73 1129.11,1186.73 1129.7,1186.73 1130.28,1186.73 1130.87,1186.73 1131.46,1186.73 1132.04,1186.73 1132.63,1186.73 1133.21,1186.73 1133.8,1186.73 1134.39,1186.73 1134.97,1186.73 1135.56,1186.73 1136.15,1186.73 1136.73,1186.73 1137.32,1186.73 1137.91,1186.73 1138.49,1186.73 1139.08,1186.73 1139.67,1186.73 1140.25,1186.73 1140.84,1186.73 1141.42,1186.73 1142.01,1186.73 1142.6,1186.73 1143.18,1186.73 1143.77,1186.73 1144.36,1186.73 1144.94,1186.73 1145.53,1186.73 1146.12,1186.73 1146.7,1186.73 1147.29,1186.73 1147.88,1186.73 1148.46,1186.73 1149.05,1186.73 1149.63,1186.73 1150.22,1186.73 1150.81,1186.73 1151.39,1186.73 1151.98,1186.73 1152.57,1186.73 1153.15,1186.73 1153.74,1186.73 1154.33,1186.73 1154.91,1186.73 1155.5,1186.73 1156.09,1186.73 1156.67,1186.73 1157.26,1186.73 1157.84,1186.73 1158.43,1186.73 1159.02,1186.73 1159.6,1186.73 1160.19,1186.73 1160.78,1186.73 1161.36,1186.73 1161.95,1186.73 1162.54,1186.73 1163.12,1186.73 1163.71,1186.73 1164.29,1186.73 1164.88,1186.73 1165.47,1186.73 1166.05,1186.73 1166.64,1186.73 1167.23,1186.73 1167.81,1186.73 1168.4,1186.73 1168.99,1186.73 1169.57,1186.73 1170.16,1186.73 1170.75,1186.73 1171.33,1186.73 1171.92,1186.73 1172.5,1186.73 1173.09,1186.73 1173.68,1186.73 1174.26,1186.73 1174.85,1186.73 1175.44,1186.73 1176.02,1186.73 1176.61,1186.73 1177.2,1186.73 1177.78,1186.73 1178.37,1186.73 1178.96,1186.73 1179.54,1186.73 1180.13,1186.73 1180.71,1186.73 1181.3,1186.73 1181.89,1186.73 1182.47,1186.73 1183.06,1186.73 1183.65,1186.73 1184.23,1186.73 1184.82,1186.73 1185.41,1186.73 1185.99,1186.73 1186.58,1186.73 1187.16,1186.73 1187.75,1186.73 1188.34,1186.73 1188.92,1186.73 1189.51,1186.73 1190.1,1186.73 1190.68,1186.73 1191.27,1186.73 1191.86,1186.73 1192.44,1186.73 1193.03,1186.73 1193.62,1186.73 1194.2,1186.73 1194.79,1186.73 1195.37,1186.73 1195.96,1186.73 1196.55,1186.73 1197.13,1186.73 1197.72,1186.73 1198.31,1186.73 1198.89,1186.73 1199.48,1186.73 1200.07,1186.73 1200.65,1186.73 1201.24,1186.73 1201.83,1186.73 1202.41,1186.73 1203,1186.73 1203.58,1186.73 1204.17,1186.73 1204.76,1186.73 1205.34,1186.73 1205.93,1186.73 1206.52,1186.73 1207.1,1186.73 1207.69,1186.73 1208.28,1186.73 1208.86,1186.73 1209.45,1186.73 1210.03,1186.73 1210.62,1186.73 1211.21,1186.73 1211.79,1186.73 1212.38,1186.73 1212.97,1186.73 1213.55,1186.73 1214.14,1186.73 1214.73,1186.73 1215.31,1186.73 1215.9,1186.73 1216.49,1186.73 1217.07,1186.73 1217.66,1186.73 1218.24,1186.73 1218.83,1186.73 1219.42,1186.73 1220,1186.73 1220.59,1186.73 1221.18,1186.73 1221.76,1186.73 1222.35,1186.73 1222.94,1186.73 1223.52,1186.73 1224.11,1186.73 1224.7,1186.73 1225.28,1186.73 1225.87,1186.73 1226.45,1186.73 1227.04,1186.73 1227.63,1186.73 1228.21,1186.73 1228.8,1186.73 1229.39,1186.73 1229.97,1186.73 1230.56,1186.73 1231.15,1186.73 1231.73,1186.73 1232.32,1186.73 1232.91,1186.73 1233.49,1186.73 1234.08,1186.73 1234.66,1186.73 1235.25,1186.73 1235.84,1186.73 1236.42,1186.73 1237.01,1186.73 1237.6,1186.73 1238.18,1186.73 1238.77,1186.73 1239.36,1186.73 1239.94,1186.73 1240.53,1186.73 1241.11,1186.73 1241.7,1186.73 1242.29,1186.73 1242.87,1186.73 1243.46,1186.73 1244.05,1186.73 1244.63,1186.73 1245.22,1186.73 1245.81,1186.73 1246.39,1186.73 1246.98,1186.73 1247.57,1186.73 1248.15,1186.73 1248.74,1186.73 1249.32,1186.73 1249.91,1186.73 1250.5,1186.73 1251.08,1186.73 1251.67,1186.73 1252.26,1186.73 1252.84,1186.73 1253.43,1186.73 1254.02,1186.73 1254.6,1186.73 1255.19,1186.73 1255.78,1186.73 1256.36,1186.73 1256.95,1186.73 1257.53,1186.73 1258.12,1186.73 1258.71,1186.73 1259.29,1186.73 1259.88,1186.73 1260.47,1186.73 1261.05,1186.73 1261.64,1186.73 1262.23,1186.73 1262.81,1186.73 1263.4,1186.73 1263.98,1186.73 1264.57,1186.73 1265.16,1186.73 1265.74,1186.73 1266.33,1186.73 1266.92,1186.73 1267.5,1186.73 1268.09,1186.73 1268.68,1186.73 1269.26,1186.73 1269.85,1186.73 1270.44,1186.73 1271.02,1186.73 1271.61,1186.73 1272.19,1186.73 1272.78,1186.73 1273.37,1186.73 1273.95,1186.73 1274.54,1186.73 1275.13,1186.73 1275.71,1186.73 1276.3,1186.73 1276.89,1186.73 1277.47,1186.73 1278.06,1186.73 1278.65,1186.73 1279.23,1186.73 1279.82,1186.73 1280.4,1186.73 1280.99,1186.73 1281.58,1186.73 1282.16,1186.73 1282.75,1186.73 1283.34,1186.73 1283.92,1186.73 1284.51,1186.73 1285.1,1186.73 1285.68,1186.73 1286.27,1186.73 1286.86,1186.73 1287.44,1186.73 1288.03,1186.73 1288.61,1186.73 1289.2,1186.73 1289.79,1186.73 1290.37,1186.73 1290.96,1186.73 1291.55,1186.73 1292.13,1186.73 1292.72,1186.73 1293.31,1186.73 1293.89,1186.73 1294.48,1186.73 1295.06,1186.73 1295.65,1186.73 1296.24,1186.73 1296.82,1186.73 1297.41,1186.73 1298,1186.73 1298.58,1186.73 1299.17,1186.73 1299.76,1186.73 1300.34,1186.73 1300.93,1186.73 1301.52,1186.73 1302.1,1186.73 1302.69,1186.73 1303.27,1186.73 1303.86,1186.73 1304.45,1186.73 1305.03,1186.73 1305.62,1186.73 1306.21,1186.73 1306.79,1186.73 1307.38,1186.73 1307.97,1186.73 1308.55,1186.73 1309.14,1186.73 1309.73,1186.73 1310.31,1186.73 1310.9,1186.73 1311.48,1186.73 1312.07,1186.73 1312.66,1186.73 1313.24,1186.73 1313.83,1186.73 1314.42,1186.73 1315,1186.73 1315.59,1186.73 1316.18,1186.73 1316.76,1186.73 1317.35,1186.73 1317.93,1186.73 1318.52,1186.73 1319.11,1186.73 1319.69,1186.73 1320.28,1186.73 1320.87,1186.73 1321.45,1186.73 1322.04,1186.73 1322.63,1186.73 1323.21,1186.73 1323.8,1186.73 1324.39,1186.73 1324.97,1186.73 1325.56,1186.73 1326.14,1186.73 1326.73,1186.73 1327.32,1186.73 1327.9,1186.73 1328.49,1186.73 1329.08,1186.73 1329.66,1186.73 1330.25,1186.73 1330.84,1186.73 1331.42,1186.73 1332.01,1186.73 1332.6,1186.73 1333.18,1186.73 1333.77,1186.73 1334.35,1186.73 1334.94,1186.73 1335.53,1186.73 1336.11,1186.73 1336.7,1186.73 1337.29,1186.73 1337.87,1186.73 1338.46,1186.73 1339.05,1186.73 1339.63,1186.73 1340.22,1186.73 1340.8,1186.73 1341.39,1186.73 1341.98,1186.73 1342.56,1186.73 1343.15,1186.73 1343.74,1186.73 1344.32,1186.73 1344.91,1186.73 1345.5,1186.73 1346.08,1186.73 1346.67,1186.73 1347.26,1186.73 1347.84,1186.73 1348.43,1186.73 1349.01,1186.73 1349.6,1186.73 1350.19,1186.73 1350.77,1186.73 1351.36,1186.73 1351.95,1186.73 1352.53,1186.73 1353.12,1186.73 1353.71,1186.73 1354.29,1186.73 1354.88,1186.73 1355.47,1186.73 1356.05,1186.73 1356.64,1186.73 1357.22,1186.73 1357.81,1186.73 1358.4,1186.73 1358.98,1186.73 1359.57,1186.73 1360.16,1186.73 1360.74,1186.73 1361.33,1186.73 1361.92,1186.73 1362.5,1186.73 1363.09,1186.73 1363.68,1186.73 1364.26,1186.73 1364.85,1186.73 1365.43,1186.73 1366.02,1186.73 1366.61,1186.73 1367.19,1186.73 1367.78,1186.73 1368.37,1186.73 1368.95,1186.73 1369.54,1186.73 1370.13,1186.73 1370.71,1186.73 1371.3,1186.73 1371.88,1186.73 1372.47,1186.73 1373.06,1186.73 1373.64,1186.73 1374.23,1186.73 1374.82,1186.73 1375.4,1186.73 1375.99,1186.73 1376.58,1186.73 1377.16,1186.73 1377.75,1186.73 1378.34,1186.73 1378.92,1186.73 1379.51,1186.73 1380.09,1186.73 1380.68,1186.73 1381.27,1186.73 1381.85,1186.73 1382.44,1186.73 1383.03,1186.73 1383.61,1186.73 1384.2,1186.73 1384.79,1186.73 1385.37,1186.73 1385.96,1186.73 1386.55,1186.73 1387.13,1186.73 1387.72,1186.73 1388.3,1186.73 1388.89,1186.73 1389.48,1186.73 1390.06,1186.73 1390.65,1186.73 1391.24,1186.73 1391.82,1186.73 1392.41,1186.73 1393,1186.73 1393.58,1186.73 1394.17,1186.73 1394.75,1186.73 1395.34,1186.73 1395.93,1186.73 1396.51,1186.73 1397.1,1186.73 1397.69,1186.73 1398.27,1186.73 1398.86,1186.73 1399.45,1186.73 1400.03,1186.73 1400.62,1186.73 1401.21,1186.73 1401.79,1186.73 1402.38,1186.73 1402.96,1186.73 1403.55,1186.73 1404.14,1186.73 1404.72,1186.73 1405.31,1186.73 1405.9,1186.73 1406.48,1186.73 1407.07,1186.73 1407.66,1186.73 1408.24,1186.73 1408.83,1186.73 1409.42,1186.73 1410,1186.73 1410.59,1186.73 1411.17,1186.73 1411.76,1186.73 1412.35,1186.73 1412.93,1186.73 1413.52,1186.73 1414.11,1186.73 1414.69,1186.73 1415.28,1186.73 1415.87,1186.73 1416.45,1186.73 1417.04,1186.73 1417.63,1186.73 1418.21,1186.73 1418.8,1186.73 1419.38,1186.73 1419.97,1186.73 1420.56,1186.73 1421.14,1186.73 1421.73,1186.73 1422.32,1186.73 1422.9,1186.73 1423.49,1186.73 1424.08,1186.73 1424.66,1186.73 1425.25,1186.73 1425.83,1186.73 1426.42,1186.73 1427.01,1186.73 1427.59,1186.73 1428.18,1186.73 1428.77,1186.73 1429.35,1186.73 1429.94,1186.73 1430.53,1186.73 1431.11,1186.73 1431.7,1186.73 1432.29,1186.73 1432.87,1186.73 1433.46,1186.73 1434.04,1186.73 1434.63,1186.73 1435.22,1186.73 1435.8,1186.73 1436.39,1186.73 1436.98,1186.73 1437.56,1186.73 1438.15,1186.73 1438.74,1186.73 1439.32,1186.73 1439.91,1186.73 1440.5,1186.73 1441.08,1186.73 1441.67,1186.73 1442.25,1186.73 1442.84,1186.73 1443.43,1186.73 1444.01,1186.73 1444.6,1186.73 1445.19,1186.73 1445.77,1186.73 1446.36,1186.73 1446.95,1186.73 1447.53,1186.73 1448.12,1186.73 1448.7,1186.73 1449.29,1186.73 1449.88,1186.73 1450.46,1186.73 1451.05,1186.73 1451.64,1186.73 1452.22,1186.73 1452.81,1186.73 1453.4,1186.73 1453.98,1186.73 1454.57,1186.73 1455.16,1186.73 1455.74,1186.73 1456.33,1186.73 1456.91,1186.73 1457.5,1186.73 1458.09,1186.73 1458.67,1186.73 1459.26,1186.73 1459.85,1186.73 1460.43,1186.73 1461.02,1186.73 1461.61,1186.73 1462.19,1186.73 1462.78,1186.73 1463.37,1186.73 1463.95,1186.73 1464.54,1186.73 1465.12,1186.73 1465.71,1186.73 1466.3,1186.73 1466.88,1186.73 1467.47,1186.73 1468.06,1186.73 1468.64,1186.73 1469.23,1186.73 1469.82,1186.73 1470.4,1186.73 1470.99,1186.73 1471.57,1186.73 1472.16,1186.73 1472.75,1186.73 1473.33,1186.73 1473.92,1186.73 1474.51,1186.73 1475.09,1186.73 1475.68,1186.73 1476.27,1186.73 1476.85,1186.73 1477.44,1186.73 1478.03,1186.73 1478.61,1186.73 1479.2,1186.73 1479.78,1186.73 1480.37,1186.73 1480.96,1186.73 1481.54,1186.73 1482.13,1186.73 1482.72,1186.73 1483.3,1186.73 1483.89,1186.73 1484.48,1186.73 1485.06,1186.73 1485.65,1186.73 1486.24,1186.73 1486.82,1186.73 1487.41,1186.73 1487.99,1186.73 1488.58,1186.73 1489.17,1186.73 1489.75,1186.73 1490.34,1186.73 1490.93,1186.73 1491.51,1186.73 1492.1,1186.73 1492.69,1186.73 1493.27,1186.73 1493.86,1186.73 1494.45,1186.73 1495.03,1186.73 1495.62,1186.73 1496.2,1186.73 1496.79,1186.73 1497.38,1186.73 1497.96,1186.73 1498.55,1186.73 1499.14,1186.73 1499.72,1186.73 1500.31,1186.73 1500.9,1186.73 1501.48,1186.73 1502.07,1186.73 1502.65,1186.73 1503.24,1186.73 1503.83,1186.73 1504.41,1186.73 1505,1186.73 1505.59,1186.73 1506.17,1186.73 1506.76,1186.73 1507.35,1186.73 1507.93,1186.73 1508.52,1186.73 1509.11,1186.73 1509.69,1186.73 1510.28,1186.73 1510.86,1186.73 1511.45,1186.73 1512.04,1186.73 1512.62,1186.73 1513.21,1186.73 1513.8,1186.73 1514.38,1186.73 1514.97,1186.73 1515.56,1186.73 1516.14,1186.73 1516.73,1186.73 1517.32,1186.73 1517.9,1186.73 1518.49,1186.73 1519.07,1186.73 1519.66,1186.73 1520.25,1186.73 1520.83,1186.73 1521.42,1186.73 1522.01,1186.73 1522.59,1186.73 1523.18,1186.73 1523.77,1186.73 1524.35,1186.73 1524.94,1186.73 1525.52,1186.73 1526.11,1186.73 1526.7,1186.73 1527.28,1186.73 1527.87,1186.73 1528.46,1186.73 1529.04,1186.73 1529.63,1186.73 1530.22,1186.73 1530.8,1186.73 1531.39,1186.73 1531.98,1186.73 1532.56,1186.73 1533.15,1186.73 1533.73,1186.73 1534.32,1186.73 1534.91,1186.73 1535.49,1186.73 1536.08,1186.73 1536.67,1186.73 1537.25,1186.73 1537.84,1186.73 1538.43,1186.73 1539.01,1186.73 1539.6,1186.73 1540.19,1186.73 1540.77,1186.73 1541.36,1186.73 1541.94,1186.73 1542.53,1186.73 1543.12,1186.73 1543.7,1186.73 1544.29,1186.73 1544.88,1186.73 1545.46,1186.73 1546.05,1186.73 1546.64,1186.73 1547.22,1186.73 1547.81,1186.73 1548.4,1186.73 1548.98,1186.73 1549.57,1186.73 1550.15,1186.73 1550.74,1186.73 1551.33,1186.73 1551.91,1186.73 1552.5,1186.73 1553.09,1186.73 1553.67,1186.73 1554.26,1186.73 1554.85,1186.73 1555.43,1186.73 1556.02,1186.73 1556.6,1186.73 1557.19,1186.73 1557.78,1186.73 1558.36,1186.73 1558.95,1186.73 1559.54,1186.73 1560.12,1186.73 1560.71,1186.73 1561.3,1186.73 1561.88,1186.73 1562.47,1186.73 1563.06,1186.73 1563.64,1186.73 1564.23,1186.73 1564.81,1186.73 1565.4,1186.73 1565.99,1186.73 1566.57,1186.73 1567.16,1186.73 1567.75,1186.73 1568.33,1186.73 1568.92,1186.73 1569.51,1186.73 1570.09,1186.73 1570.68,1186.73 1571.27,1186.73 1571.85,1186.73 1572.44,1186.73 1573.02,1186.73 1573.61,1186.73 1574.2,1186.73 1574.78,1186.73 1575.37,1186.73 1575.96,1186.73 1576.54,1186.73 1577.13,1186.73 1577.72,1186.73 1578.3,1186.73 1578.89,1186.73 1579.47,1186.73 1580.06,1186.73 1580.65,1186.73 1581.23,1186.73 1581.82,1186.73 1582.41,1186.73 1582.99,1186.73 1583.58,1186.73 1584.17,1186.73 1584.75,1186.73 1585.34,1186.73 1585.93,1186.73 1586.51,1186.73 1587.1,1186.73 1587.68,1186.73 1588.27,1186.73 1588.86,1186.73 1589.44,1186.73 1590.03,1186.73 1590.62,1186.73 1591.2,1186.73 1591.79,1186.73 1592.38,1186.73 1592.96,1186.73 1593.55,1186.73 1594.14,1186.73 1594.72,1186.73 1595.31,1186.73 1595.89,1186.73 1596.48,1186.73 1597.07,1186.73 1597.65,1186.73 1598.24,1186.73 1598.83,1186.73 1599.41,1186.73 1600,1186.73 1600.59,1186.73 1601.17,1186.73 1601.76,1186.73 1602.34,1186.73 1602.93,1186.73 1603.52,1186.73 1604.1,1186.73 1604.69,1186.73 1605.28,1186.73 1605.86,1186.73 1606.45,1186.73 1607.04,1186.73 1607.62,1186.73 1608.21,1186.73 1608.8,1186.73 1609.38,1186.73 1609.97,1186.73 1610.55,1186.73 1611.14,1186.73 1611.73,1186.73 1612.31,1186.73 1612.9,1186.73 1613.49,1186.73 1614.07,1186.73 1614.66,1186.73 1615.25,1186.73 1615.83,1186.73 1616.42,1186.73 1617.01,1186.73 1617.59,1186.73 1618.18,1186.73 1618.76,1186.73 1619.35,1186.73 1619.94,1186.73 1620.52,1186.73 1621.11,1186.73 1621.7,1186.73 1622.28,1186.73 1622.87,1186.73 1623.46,1186.73 1624.04,1186.73 1624.63,1186.73 1625.22,1186.73 1625.8,1186.73 1626.39,1186.73 1626.97,1186.73 1627.56,1186.73 1628.15,1186.73 1628.73,1186.73 1629.32,1186.73 1629.91,1186.73 1630.49,1186.73 1631.08,1186.73 1631.67,1186.73 1632.25,1186.73 1632.84,1186.73 1633.42,1186.73 1634.01,1186.73 1634.6,1186.73 1635.18,1186.73 1635.77,1186.73 1636.36,1186.73 1636.94,1186.73 1637.53,1186.73 1638.12,1186.73 1638.7,1186.73 1639.29,1186.73 1639.88,1186.73 1640.46,1186.73 1641.05,1186.73 1641.63,1186.73 1642.22,1186.73 1642.81,1186.73 1643.39,1186.73 1643.98,1186.73 1644.57,1186.73 1645.15,1186.73 1645.74,1186.73 1646.33,1186.73 1646.91,1186.73 1647.5,1186.73 1648.09,1186.73 1648.67,1186.73 1649.26,1186.73 1649.84,1186.73 1650.43,1186.73 1651.02,1186.73 1651.6,1186.73 1652.19,1186.73 1652.78,1186.73 1653.36,1186.73 1653.95,1186.73 1654.54,1186.73 1655.12,1186.73 1655.71,1186.73 1656.29,1186.73 1656.88,1186.73 1657.47,1186.73 1658.05,1186.73 1658.64,1186.73 1659.23,1186.73 1659.81,1186.73 1660.4,1186.73 1660.99,1186.73 1661.57,1186.73 1662.16,1186.73 1662.75,1186.73 1663.33,1186.73 1663.92,1186.73 1664.5,1186.73 1665.09,1186.73 1665.68,1186.73 1666.26,1186.73 1666.85,1186.73 1667.44,1186.73 1668.02,1186.73 1668.61,1186.73 1669.2,1186.73 1669.78,1186.73 1670.37,1186.73 1670.96,1186.73 1671.54,1186.73 1672.13,1186.73 1672.71,1186.73 1673.3,1186.73 1673.89,1186.73 1674.47,1186.73 1675.06,1186.73 1675.65,1186.73 1676.23,1186.73 1676.82,1186.73 1677.41,1186.73 1677.99,1186.73 1678.58,1186.73 1679.17,1186.73 1679.75,1186.73 1680.34,1186.73 1680.92,1186.73 1681.51,1186.73 1682.1,1186.73 1682.68,1186.73 1683.27,1186.73 1683.86,1186.73 1684.44,1186.73 1685.03,1186.73 1685.62,1186.73 1686.2,1186.73 1686.79,1186.73 1687.37,1186.73 1687.96,1186.73 1688.55,1186.73 1689.13,1186.73 1689.72,1186.73 1690.31,1186.73 1690.89,1186.73 1691.48,1186.73 1692.07,1186.73 1692.65,1186.73 1693.24,1186.73 1693.83,1186.73 1694.41,1186.73 1695,1186.73 1695.58,1186.73 1696.17,1186.73 1696.76,1186.73 1697.34,1186.73 1697.93,1186.73 1698.52,1186.73 1699.1,1186.73 1699.69,1186.73 1700.28,1186.73 1700.86,1186.73 1701.45,1186.73 1702.04,1186.73 1702.62,1186.73 1703.21,1186.73 1703.79,1186.73 1704.38,1186.73 1704.97,1186.73 1705.55,1186.73 1706.14,1186.73 1706.73,1186.73 1707.31,1186.73 1707.9,1186.73 1708.49,1186.73 1709.07,1186.73 1709.66,1186.73 1710.24,1186.73 1710.83,1186.73 1711.42,1186.73 1712,1186.73 1712.59,1186.73 1713.18,1186.73 1713.76,1186.73 1714.35,1186.73 1714.94,1186.73 1715.52,1186.73 1716.11,1186.73 1716.7,1186.73 1717.28,1186.73 1717.87,1186.73 1718.45,1186.73 1719.04,1186.73 1719.63,1186.73 1720.21,1186.73 1720.8,1186.73 1721.39,1186.73 1721.97,1186.73 1722.56,1186.73 1723.15,1186.73 1723.73,1186.73 1724.32,1186.73 1724.91,1186.73 1725.49,1186.73 1726.08,1186.73 1726.66,1186.73 1727.25,1186.73 1727.84,1186.73 1728.42,1186.73 1729.01,1186.73 1729.6,1186.73 1730.18,1186.73 1730.77,1186.73 1731.36,1186.73 1731.94,1186.73 1732.53,1186.73 1733.11,1186.73 1733.7,1186.73 1734.29,1186.73 1734.87,1186.73 1735.46,1186.73 1736.05,1186.73 1736.63,1186.73 1737.22,1186.73 1737.81,1186.73 1738.39,1186.73 1738.98,1186.73 1739.57,1186.73 1740.15,1186.73 1740.74,1186.73 1741.32,1186.73 1741.91,1186.73 1742.5,1186.73 1743.08,1186.73 1743.67,1186.73 1744.26,1186.73 1744.84,1186.73 1745.43,1186.73 1746.02,1186.73 1746.6,1186.73 1747.19,1186.73 1747.78,1186.73 1748.36,1186.73 1748.95,1186.73 1749.53,1186.73 1750.12,1186.73 1750.71,1186.73 1751.29,1186.73 1751.88,1186.73 1752.47,1186.73 1753.05,1186.73 1753.64,1186.73 1754.23,1186.73 1754.81,1186.73 1755.4,1186.73 1755.99,1186.73 1756.57,1186.73 1757.16,1186.73 1757.74,1186.73 1758.33,1186.73 1758.92,1186.73 1759.5,1186.73 1760.09,1186.73 1760.68,1186.73 1761.26,1186.73 1761.85,1186.73 1762.44,1186.73 1763.02,1186.73 1763.61,1186.73 1764.19,1186.73 1764.78,1186.73 1765.37,1186.73 1765.95,1186.73 1766.54,1186.73 1767.13,1186.73 1767.71,1186.73 1768.3,1186.73 1768.89,1186.73 1769.47,1186.73 1770.06,1186.73 1770.65,1186.73 1771.23,1186.73 1771.82,1186.73 1772.4,1186.73 1772.99,1186.73 1773.58,1186.73 1774.16,1186.73 1774.75,1186.73 1775.34,1186.73 1775.92,1186.73 1776.51,1186.73 1777.1,1186.73 1777.68,1186.73 1778.27,1186.73 1778.86,1186.73 1779.44,1186.73 1780.03,1186.73 1780.61,1186.73 1781.2,1186.73 1781.79,1186.73 1782.37,1186.73 1782.96,1186.73 1783.55,1186.73 1784.13,1186.73 1784.72,1186.73 1785.31,1186.73 1785.89,1186.73 1786.48,1186.73 1787.06,1186.73 1787.65,1186.73 1788.24,1186.73 1788.82,1186.73 1789.41,1186.73 1790,1186.73 1790.58,1186.73 1791.17,1186.73 1791.76,1186.73 1792.34,1186.73 1792.93,1186.73 1793.52,1186.73 1794.1,1186.73 1794.69,1186.73 1795.27,1186.73 1795.86,1186.73 1796.45,1186.73 1797.03,1186.73 1797.62,1186.73 1798.21,1186.73 1798.79,1186.73 1799.38,1186.73 1799.97,1186.73 1800.55,1186.73 1801.14,1186.73 1801.73,1186.73 1802.31,1186.73 1802.9,1186.73 1803.48,1186.73 1804.07,1186.73 1804.66,1186.73 1805.24,1186.73 1805.83,1186.73 1806.42,1186.73 1807,1186.73 1807.59,1186.73 1808.18,1186.73 1808.76,1186.73 1809.35,1186.73 1809.94,1186.73 1810.52,1186.73 1811.11,1186.73 1811.69,1186.73 1812.28,1186.73 1812.87,1186.73 1813.45,1186.73 1814.04,1186.73 1814.63,1186.73 1815.21,1186.73 1815.8,1186.73 1816.39,1186.73 1816.97,1186.73 1817.56,1186.73 1818.14,1186.73 1818.73,1186.73 1819.32,1186.73 1819.9,1186.73 1820.49,1186.73 1821.08,1186.73 1821.66,1186.73 1822.25,1186.73 1822.84,1186.73 1823.42,1186.73 1824.01,1186.73 1824.6,1186.73 1825.18,1186.73 1825.77,1186.73 1826.35,1186.73 1826.94,1186.73 1827.53,1186.73 1828.11,1186.73 1828.7,1186.73 1829.29,1186.73 1829.87,1186.73 1830.46,1186.73 1831.05,1186.73 1831.63,1186.73 1832.22,1186.73 1832.81,1186.73 1833.39,1186.73 1833.98,1186.73 1834.56,1186.73 1835.15,1186.73 1835.74,1186.73 1836.32,1186.73 1836.91,1186.73 1837.5,1186.73 1838.08,1186.73 1838.67,1186.73 1839.26,1186.73 1839.84,1186.73 1840.43,1186.73 1841.01,1186.73 1841.6,1186.73 1842.19,1186.73 1842.77,1186.73 1843.36,1186.73 1843.95,1186.73 1844.53,1186.73 1845.12,1186.73 1845.71,1186.73 1846.29,1186.73 1846.88,1186.73 1847.47,1186.73 1848.05,1186.73 1848.64,1186.73 1849.22,1186.73 1849.81,1186.73 1850.4,1186.73 1850.98,1186.73 1851.57,1186.73 1852.16,1186.73 1852.74,1186.73 1853.33,1186.73 1853.92,1186.73 1854.5,1186.73 1855.09,1186.73 1855.68,1186.73 1856.26,1186.73 1856.85,1186.73 1857.43,1186.73 1858.02,1186.73 1858.61,1186.73 1859.19,1186.73 1859.78,1186.73 1860.37,1186.73 1860.95,1186.73 1861.54,1186.73 1862.13,1186.73 1862.71,1186.73 1863.3,1186.73 1863.88,1186.73 1864.47,1186.73 1865.06,1186.73 1865.64,1186.73 1866.23,1186.73 1866.82,1186.73 1867.4,1186.73 1867.99,1186.73 1868.58,1186.73 1869.16,1186.73 1869.75,1186.73 1870.34,1186.73 1870.92,1186.73 1871.51,1186.73 1872.09,1186.73 1872.68,1186.73 1873.27,1186.73 1873.85,1186.73 1874.44,1186.73 1875.03,1186.73 1875.61,1186.73 1876.2,1186.73 1876.79,1186.73 1877.37,1186.73 1877.96,1186.73 1878.55,1186.73 1879.13,1186.73 1879.72,1186.73 1880.3,1186.73 1880.89,1186.73 1881.48,1186.73 1882.06,1186.73 1882.65,1186.73 1883.24,1186.73 1883.82,1186.73 1884.41,1186.73 1885,1186.73 1885.58,1186.73 1886.17,1186.73 1886.76,1186.73 1887.34,1186.73 1887.93,1186.73 1888.51,1186.73 1889.1,1186.73 1889.69,1186.73 1890.27,1186.73 1890.86,1186.73 1891.45,1186.73 1892.03,1186.73 1892.62,1186.73 1893.21,1186.73 1893.79,1186.73 1894.38,1186.73 1894.96,1186.73 1895.55,1186.73 1896.14,1186.73 1896.72,1186.73 1897.31,1186.73 1897.9,1186.73 1898.48,1186.73 1899.07,1186.73 1899.66,1186.73 1900.24,1186.73 1900.83,1186.73 1901.42,1186.73 1902,1186.73 1902.59,1186.73 1903.17,1186.73 1903.76,1186.73 1904.35,1186.73 1904.93,1186.73 1905.52,1186.73 1906.11,1186.73 1906.69,1186.73 1907.28,1186.73 1907.87,1186.73 1908.45,1186.73 1909.04,1186.73 1909.63,1186.73 1910.21,1186.73 1910.8,1186.73 1911.38,1186.73 1911.97,1186.73 1912.56,1186.73 1913.14,1186.73 1913.73,1186.73 1914.32,1186.73 1914.9,1186.73 1915.49,1186.73 1916.08,1186.73 1916.66,1186.73 1917.25,1186.73 1917.83,1186.73 1918.42,1186.73 1919.01,1186.73 1919.59,1186.73 1920.18,1186.73 1920.77,1186.73 1921.35,1186.73 1921.94,1186.73 1922.53,1186.73 1923.11,1186.73 1923.7,1186.73 1924.29,1186.73 1924.87,1186.73 1925.46,1186.73 1926.04,1186.73 1926.63,1186.73 1927.22,1186.73 1927.8,1186.73 1928.39,1186.73 1928.98,1186.73 1929.56,1186.73 1930.15,1186.73 1930.74,1186.73 1931.32,1186.73 1931.91,1186.73 1932.5,1186.73 1933.08,1186.73 1933.67,1186.73 1934.25,1186.73 1934.84,1186.73 1935.43,1186.73 1936.01,1186.73 1936.6,1186.73 1937.19,1186.73 1937.77,1186.73 1938.36,1186.73 1938.95,1186.73 1939.53,1186.73 1940.12,1186.73 1940.71,1186.73 1941.29,1186.73 1941.88,1186.73 1942.46,1186.73 1943.05,1186.73 1943.64,1186.73 1944.22,1186.73 1944.81,1186.73 1945.4,1186.73 1945.98,1186.73 1946.57,1186.73 1947.16,1186.73 1947.74,1186.73 1948.33,1186.73 1948.91,1186.73 1949.5,1186.73 1950.09,1186.73 1950.67,1186.73 1951.26,1186.73 1951.85,1186.73 1952.43,1186.73 1953.02,1186.73 1953.61,1186.73 1954.19,1186.73 1954.78,1186.73 1955.37,1186.73 1955.95,1186.73 1956.54,1186.73 1957.12,1186.73 1957.71,1186.73 1958.3,1186.73 1958.88,1186.73 1959.47,1186.73 1960.06,1186.73 1960.64,1186.73 1961.23,1186.73 1961.82,1186.73 1962.4,1186.73 1962.99,1186.73 1963.58,1186.73 1964.16,1186.73 1964.75,1186.73 1965.33,1186.73 1965.92,1186.73 1966.51,1186.73 1967.09,1186.73 1967.68,1186.73 1968.27,1186.73 1968.85,1186.73 1969.44,1186.73 1970.03,1186.73 1970.61,1186.73 1971.2,1186.73 1971.78,1186.73 1972.37,1186.73 1972.96,1186.73 1973.54,1186.73 1974.13,1186.73 1974.72,1186.73 1975.3,1186.73 1975.89,1186.73 1976.48,1186.73 1977.06,1186.73 1977.65,1186.73 1978.24,1186.73 1978.82,1186.73 1979.41,1186.73 1979.99,1186.73 1980.58,1186.73 1981.17,1186.73 1981.75,1186.73 1982.34,1186.73 1982.93,1186.73 1983.51,1186.73 1984.1,1186.73 1984.69,1186.73 1985.27,1186.73 1985.86,1186.73 1986.45,1186.73 1987.03,1186.73 1987.62,1186.73 1988.2,1186.73 1988.79,1186.73 1989.38,1186.73 1989.96,1186.73 1990.55,1186.73 1991.14,1186.73 1991.72,1186.73 1992.31,1186.73 1992.9,1186.73 1993.48,1186.73 1994.07,1186.73 1994.65,1186.73 1995.24,1186.73 1995.83,1186.73 1996.41,1186.73 1997,1186.73 1997.59,1186.73 1998.17,1186.73 1998.76,1186.73 1999.35,1186.73 1999.93,1186.73 2000.52,1186.73 2001.11,1186.73 2001.69,1186.73 2002.28,1186.73 2002.86,1186.73 2003.45,1186.73 2004.04,1186.73 2004.62,1186.73 2005.21,1186.73 2005.8,1186.73 2006.38,1186.73 2006.97,1186.73 2007.56,1186.73 2008.14,1186.73 2008.73,1186.73 2009.32,1186.73 2009.9,1186.73 2010.49,1186.73 2011.07,1186.73 2011.66,1186.73 2012.25,1186.73 2012.83,1186.73 2013.42,1186.73 2014.01,1186.73 2014.59,1186.73 2015.18,1186.73 2015.77,1186.73 2016.35,1186.73 2016.94,1186.73 2017.53,1186.73 2018.11,1186.73 2018.7,1186.73 2019.28,1186.73 2019.87,1186.73 2020.46,1186.73 2021.04,1186.73 2021.63,1186.73 2022.22,1186.73 2022.8,1186.73 2023.39,1186.73 2023.98,1186.73 2024.56,1186.73 2025.15,1186.73 2025.73,1186.73 2026.32,1186.73 2026.91,1186.73 2027.49,1186.73 2028.08,1186.73 2028.67,1186.73 2029.25,1186.73 2029.84,1186.73 2030.43,1186.73 2031.01,1186.73 2031.6,1186.73 2032.19,1186.73 2032.77,1186.73 2033.36,1186.73 2033.94,1186.73 2034.53,1186.73 2035.12,1186.73 2035.7,1186.73 2036.29,1186.73 2036.88,1186.73 2037.46,1186.73 2038.05,1186.73 2038.64,1186.73 2039.22,1186.73 2039.81,1186.73 2040.4,1186.73 2040.98,1186.73 2041.57,1186.73 2042.15,1186.73 2042.74,1186.73 2043.33,1186.73 2043.91,1186.73 2044.5,1186.73 2045.09,1186.73 2045.67,1186.73 2046.26,1186.73 2046.85,1186.73 2047.43,1186.73 2048.02,1186.73 2048.6,1186.73 2049.19,1186.73 2049.78,1186.73 2050.36,1186.73 2050.95,1186.73 2051.54,1186.73 2052.12,1186.73 2052.71,1186.73 2053.3,1186.73 2053.88,1186.73 2054.47,1186.73 2055.06,1186.73 2055.64,1186.73 2056.23,1186.73 2056.81,1186.73 2057.4,1186.73 2057.99,1186.73 2058.57,1186.73 2059.16,1186.73 2059.75,1186.73 2060.33,1186.73 2060.92,1186.73 2061.51,1186.73 2062.09,1186.73 2062.68,1186.73 2063.27,1186.73 2063.85,1186.73 2064.44,1186.73 2065.02,1186.73 2065.61,1186.73 2066.2,1186.73 2066.78,1186.73 2067.37,1186.73 2067.96,1186.73 2068.54,1186.73 2069.13,1186.73 2069.72,1186.73 2070.3,1186.73 2070.89,1186.73 2071.48,1186.73 2072.06,1186.73 2072.65,1186.73 2073.23,1186.73 2073.82,1186.73 2074.41,1186.73 2074.99,1186.73 2075.58,1186.73 2076.17,1186.73 2076.75,1186.73 2077.34,1186.73 2077.93,1186.73 2078.51,1186.73 2079.1,1186.73 2079.68,1186.73 2080.27,1186.73 2080.86,1186.73 2081.44,1186.73 2082.03,1186.73 2082.62,1186.73 2083.2,1186.73 2083.79,1186.73 2084.38,1186.73 2084.96,1186.73 2085.55,1186.73 2086.14,1186.73 2086.72,1186.73 2087.31,1186.73 2087.89,1186.73 2088.48,1186.73 2089.07,1186.73 2089.65,1186.73 2090.24,1186.73 2090.83,1186.73 2091.41,1186.73 2092,1186.73 2092.59,1186.73 2093.17,1186.73 2093.76,1186.73 2094.35,1186.73 2094.93,1186.73 2095.52,1186.73 2096.1,1186.73 2096.69,1186.73 2097.28,1186.73 2097.86,1186.73 2098.45,1186.73 2099.04,1186.73 2099.62,1186.73 2100.21,1186.73 2100.8,1186.73 2101.38,1186.73 2101.97,1186.73 2102.55,1186.73 2103.14,1186.73 2103.73,1186.73 2104.31,1186.73 2104.9,1186.73 2105.49,1186.73 2106.07,1186.73 2106.66,1186.73 2107.25,1186.73 2107.83,1186.73 2108.42,1186.73 2109.01,1186.73 2109.59,1186.73 2110.18,1186.73 2110.76,1186.73 2111.35,1186.73 2111.94,1186.73 2112.52,1186.73 2113.11,1186.73 2113.7,1186.73 2114.28,1186.73 2114.87,1186.73 2115.46,1186.73 2116.04,1186.73 2116.63,1186.73 2117.22,1186.73 2117.8,1186.73 2118.39,1186.73 2118.97,1186.73 2119.56,1186.73 2120.15,1186.73 2120.73,1186.73 2121.32,1186.73 2121.91,1186.73 2122.49,1186.73 2123.08,1186.73 2123.67,1186.73 2124.25,1186.73 2124.84,1186.73 2125.42,1186.73 2126.01,1186.73 2126.6,1186.73 2127.18,1186.73 2127.77,1186.73 2128.36,1186.73 2128.94,1186.73 2129.53,1186.73 2130.12,1186.73 2130.7,1186.73 2131.29,1186.73 2131.88,1186.73 2132.46,1186.73 2133.05,1186.73 2133.63,1186.73 2134.22,1186.73 2134.81,1186.73 2135.39,1186.73 2135.98,1186.73 2136.57,1186.73 2137.15,1186.73 2137.74,1186.73 2138.33,1186.73 2138.91,1186.73 2139.5,1186.73 2140.09,1186.73 2140.67,1186.73 2141.26,1186.73 2141.84,1186.73 2142.43,1186.73 2143.02,1186.73 2143.6,1186.73 2144.19,1186.73 2144.78,1186.73 2145.36,1186.73 2145.95,1186.73 2146.54,1186.73 2147.12,1186.73 2147.71,1186.73 2148.3,1186.73 2148.88,1186.73 2149.47,1186.73 2150.05,1186.73 2150.64,1186.73 2151.23,1186.73 2151.81,1186.73 2152.4,1186.73 2152.99,1186.73 2153.57,1186.73 2154.16,1186.73 2154.75,1186.73 2155.33,1186.73 2155.92,1186.73 2156.5,1186.73 2157.09,1186.73 2157.68,1186.73 2158.26,1186.73 \"/>\n<path clip-path=\"url(#clip142)\" d=\"M986.025 1186.54 L986.612 1186.54 L987.198 1186.54 L987.785 1186.54 L988.371 1186.54 L988.957 1186.54 L989.544 1186.54 L990.13 1186.54 L990.717 1186.54 L991.303 1186.54 L991.889 1186.54 L992.476 1186.54 L993.062 1186.54 L993.649 1186.54 L994.235 1186.54 L994.822 1186.54 L995.408 1186.54 L995.994 1186.54 L996.581 1186.54 L997.167 1186.54 L997.754 1186.54 L998.34 1186.54 L998.926 1186.54 L999.513 1186.54 L1000.1 1186.54 L1000.69 1186.54 L1001.27 1186.54 L1001.86 1186.54 L1002.44 1186.54 L1003.03 1186.54 L1003.62 1186.54 L1004.2 1186.54 L1004.79 1186.54 L1005.38 1186.54 L1005.96 1186.54 L1006.55 1186.54 L1007.14 1186.54 L1007.72 1186.54 L1008.31 1186.54 L1008.9 1186.54 L1009.48 1186.54 L1010.07 1186.54 L1010.65 1186.54 L1011.24 1186.54 L1011.83 1186.54 L1012.41 1186.54 L1013 1186.54 L1013.59 1186.54 L1014.17 1186.54 L1014.76 1186.54 L1015.35 1186.54 L1015.93 1186.54 L1016.52 1186.54 L1017.11 1186.54 L1017.69 1186.54 L1018.28 1186.54 L1018.86 1186.54 L1019.45 1186.54 L1020.04 1186.54 L1020.62 1186.54 L1021.21 1186.54 L1021.8 1186.54 L1022.38 1186.54 L1022.97 1186.54 L1023.56 1186.54 L1024.14 1186.54 L1024.73 1186.54 L1025.32 1186.54 L1025.9 1186.54 L1026.49 1186.54 L1027.07 1186.54 L1027.66 1186.54 L1028.25 1186.54 L1028.83 1186.54 L1029.42 1186.54 L1030.01 1186.54 L1030.59 1186.54 L1031.18 1186.54 L1031.77 1186.54 L1032.35 1186.54 L1032.94 1186.54 L1033.52 1186.54 L1034.11 1186.54 L1034.7 1186.54 L1035.28 1186.54 L1035.87 1186.54 L1036.46 1186.54 L1037.04 1186.54 L1037.63 1186.54 L1038.22 1186.54 L1038.8 1186.54 L1039.39 1186.54 L1039.98 1186.54 L1040.56 1186.54 L1041.15 1186.54 L1041.73 1186.54 L1042.32 1186.54 L1042.91 1186.54 L1043.49 1186.54 L1044.08 1186.54 L1044.67 1186.54 L1045.25 1186.54 L1045.84 1186.54 L1046.43 1186.54 L1047.01 1186.54 L1047.6 1186.54 L1048.19 1186.54 L1048.77 1186.54 L1049.36 1186.54 L1049.94 1186.54 L1050.53 1186.54 L1051.12 1186.54 L1051.7 1186.54 L1052.29 1186.54 L1052.88 1186.54 L1053.46 1186.54 L1054.05 1186.54 L1054.64 1186.54 L1055.22 1186.54 L1055.81 1186.54 L1056.39 1186.54 L1056.98 1186.54 L1057.57 1186.54 L1058.15 1186.54 L1058.74 1186.54 L1059.33 1186.54 L1059.91 1186.54 L1060.5 1186.54 L1061.09 1186.54 L1061.67 1186.54 L1062.26 1186.54 L1062.85 1186.54 L1063.43 1186.54 L1064.02 1186.54 L1064.6 1186.54 L1065.19 1186.54 L1065.78 1186.54 L1066.36 1186.54 L1066.95 1186.54 L1067.54 1186.54 L1068.12 1186.54 L1068.71 1186.54 L1069.3 1186.54 L1069.88 1186.54 L1070.47 1186.54 L1071.06 1186.54 L1071.64 1186.54 L1072.23 1186.54 L1072.81 1186.54 L1073.4 1186.54 L1073.99 1186.54 L1074.57 1186.54 L1075.16 1186.54 L1075.75 1186.54 L1076.33 1186.54 L1076.92 1186.54 L1077.51 1186.54 L1078.09 1186.54 L1078.68 1186.54 L1079.26 1186.54 L1079.85 1186.54 L1080.44 1186.54 L1081.02 1186.54 L1081.61 1186.54 L1082.2 1186.54 L1082.78 1186.54 L1083.37 1186.54 L1083.96 1186.54 L1084.54 1186.54 L1085.13 1186.54 L1085.72 1186.54 L1086.3 1186.54 L1086.89 1186.54 L1087.47 1186.54 L1088.06 1186.54 L1088.65 1186.54 L1089.23 1186.54 L1089.82 1186.54 L1090.41 1186.54 L1090.99 1186.54 L1091.58 1186.54 L1092.17 1186.54 L1092.75 1186.54 L1093.34 1186.54 L1093.93 1186.54 L1094.51 1186.54 L1095.1 1186.54 L1095.68 1186.54 L1096.27 1186.54 L1096.86 1186.54 L1097.44 1186.54 L1098.03 1186.54 L1098.62 1186.54 L1099.2 1186.54 L1099.79 1186.54 L1100.38 1186.54 L1100.96 1186.54 L1101.55 1186.54 L1102.14 1186.54 L1102.72 1186.54 L1103.31 1186.54 L1103.89 1186.54 L1104.48 1186.54 L1105.07 1186.54 L1105.65 1186.54 L1106.24 1186.54 L1106.83 1186.54 L1107.41 1186.54 L1108 1186.54 L1108.59 1186.54 L1109.17 1186.54 L1109.76 1186.54 L1110.34 1186.54 L1110.93 1186.54 L1111.52 1186.54 L1112.1 1186.54 L1112.69 1186.54 L1113.28 1186.54 L1113.86 1186.54 L1114.45 1186.54 L1115.04 1186.54 L1115.62 1186.54 L1116.21 1186.54 L1116.8 1186.54 L1117.38 1186.54 L1117.97 1186.54 L1118.55 1186.54 L1119.14 1186.54 L1119.73 1186.54 L1120.31 1186.54 L1120.9 1186.54 L1121.49 1186.54 L1122.07 1186.54 L1122.66 1186.54 L1123.25 1186.54 L1123.83 1186.54 L1124.42 1186.54 L1125.01 1186.54 L1125.59 1186.54 L1126.18 1186.54 L1126.76 1186.54 L1127.35 1186.54 L1127.94 1186.54 L1128.52 1186.54 L1129.11 1186.54 L1129.7 1186.54 L1130.28 1186.54 L1130.87 1186.54 L1131.46 1186.54 L1132.04 1186.54 L1132.63 1186.54 L1133.21 1186.54 L1133.8 1186.54 L1134.39 1186.54 L1134.97 1186.54 L1135.56 1186.54 L1136.15 1186.54 L1136.73 1186.54 L1137.32 1186.54 L1137.91 1186.54 L1138.49 1186.54 L1139.08 1186.54 L1139.67 1186.54 L1140.25 1186.54 L1140.84 1186.54 L1141.42 1186.54 L1142.01 1186.54 L1142.6 1186.54 L1143.18 1186.54 L1143.77 1186.54 L1144.36 1186.54 L1144.94 1186.54 L1145.53 1186.54 L1146.12 1186.54 L1146.7 1186.54 L1147.29 1186.54 L1147.88 1186.54 L1148.46 1186.54 L1149.05 1186.54 L1149.63 1186.54 L1150.22 1186.54 L1150.81 1186.54 L1151.39 1186.54 L1151.98 1186.54 L1152.57 1186.54 L1153.15 1186.54 L1153.74 1186.54 L1154.33 1186.54 L1154.91 1186.54 L1155.5 1186.54 L1156.09 1186.54 L1156.67 1186.54 L1157.26 1186.54 L1157.84 1186.54 L1158.43 1186.54 L1159.02 1186.54 L1159.6 1186.54 L1160.19 1186.54 L1160.78 1186.54 L1161.36 1186.54 L1161.95 1186.54 L1162.54 1186.54 L1163.12 1186.54 L1163.71 1186.54 L1164.29 1186.54 L1164.88 1186.54 L1165.47 1186.54 L1166.05 1186.54 L1166.64 1186.54 L1167.23 1186.54 L1167.81 1186.54 L1168.4 1186.54 L1168.99 1186.54 L1169.57 1186.54 L1170.16 1186.54 L1170.75 1186.54 L1171.33 1186.54 L1171.92 1186.54 L1172.5 1186.54 L1173.09 1186.54 L1173.68 1186.54 L1174.26 1186.54 L1174.85 1186.54 L1175.44 1186.54 L1176.02 1186.54 L1176.61 1186.54 L1177.2 1186.54 L1177.78 1186.54 L1178.37 1186.54 L1178.96 1186.54 L1179.54 1186.54 L1180.13 1186.54 L1180.71 1186.54 L1181.3 1186.54 L1181.89 1186.54 L1182.47 1186.54 L1183.06 1186.54 L1183.65 1186.54 L1184.23 1186.54 L1184.82 1186.54 L1185.41 1186.54 L1185.99 1186.54 L1186.58 1186.54 L1187.16 1186.54 L1187.75 1186.54 L1188.34 1186.54 L1188.92 1186.54 L1189.51 1186.54 L1190.1 1186.54 L1190.68 1186.54 L1191.27 1186.54 L1191.86 1186.54 L1192.44 1186.54 L1193.03 1186.54 L1193.62 1186.54 L1194.2 1186.54 L1194.79 1186.54 L1195.37 1186.54 L1195.96 1186.54 L1196.55 1186.54 L1197.13 1186.54 L1197.72 1186.54 L1198.31 1186.54 L1198.89 1186.54 L1199.48 1186.54 L1200.07 1186.54 L1200.65 1186.54 L1201.24 1186.54 L1201.83 1186.54 L1202.41 1186.54 L1203 1186.54 L1203.58 1186.54 L1204.17 1186.54 L1204.76 1186.54 L1205.34 1186.54 L1205.93 1186.54 L1206.52 1186.54 L1207.1 1186.54 L1207.69 1186.54 L1208.28 1186.54 L1208.86 1186.54 L1209.45 1186.54 L1210.03 1186.54 L1210.62 1186.54 L1211.21 1186.54 L1211.79 1186.54 L1212.38 1186.54 L1212.97 1186.54 L1213.55 1186.54 L1214.14 1186.54 L1214.73 1186.54 L1215.31 1186.54 L1215.9 1186.54 L1216.49 1186.54 L1217.07 1186.54 L1217.66 1186.54 L1218.24 1186.54 L1218.83 1186.54 L1219.42 1186.54 L1220 1186.54 L1220.59 1186.54 L1221.18 1186.54 L1221.76 1186.54 L1222.35 1186.54 L1222.94 1186.54 L1223.52 1186.54 L1224.11 1186.54 L1224.7 1186.54 L1225.28 1186.54 L1225.87 1186.54 L1226.45 1186.54 L1227.04 1186.54 L1227.63 1186.54 L1228.21 1186.54 L1228.8 1186.54 L1229.39 1186.54 L1229.97 1186.54 L1230.56 1186.54 L1231.15 1186.54 L1231.73 1186.54 L1232.32 1186.54 L1232.91 1186.54 L1233.49 1186.54 L1234.08 1186.54 L1234.66 1186.54 L1235.25 1186.54 L1235.84 1186.54 L1236.42 1186.54 L1237.01 1186.54 L1237.6 1186.54 L1238.18 1186.54 L1238.77 1186.54 L1239.36 1186.54 L1239.94 1186.54 L1240.53 1186.54 L1241.11 1186.54 L1241.7 1186.54 L1242.29 1186.54 L1242.87 1186.54 L1243.46 1186.54 L1244.05 1186.54 L1244.63 1186.54 L1245.22 1186.54 L1245.81 1186.54 L1246.39 1186.54 L1246.98 1186.54 L1247.57 1186.54 L1248.15 1186.54 L1248.74 1186.54 L1249.32 1186.54 L1249.91 1186.54 L1250.5 1186.54 L1251.08 1186.54 L1251.67 1186.54 L1252.26 1186.54 L1252.84 1186.54 L1253.43 1186.54 L1254.02 1186.54 L1254.6 1186.54 L1255.19 1186.54 L1255.78 1186.54 L1256.36 1186.54 L1256.95 1186.54 L1257.53 1186.54 L1258.12 1186.54 L1258.71 1186.54 L1259.29 1186.54 L1259.88 1186.54 L1260.47 1186.54 L1261.05 1186.54 L1261.64 1186.54 L1262.23 1186.54 L1262.81 1186.54 L1263.4 1186.54 L1263.98 1186.54 L1264.57 1186.54 L1265.16 1186.54 L1265.74 1186.54 L1266.33 1186.54 L1266.92 1186.54 L1267.5 1186.54 L1268.09 1186.54 L1268.68 1186.54 L1269.26 1186.54 L1269.85 1186.54 L1270.44 1186.54 L1271.02 1186.54 L1271.61 1186.54 L1272.19 1186.54 L1272.78 1186.54 L1273.37 1186.54 L1273.95 1186.54 L1274.54 1186.54 L1275.13 1186.54 L1275.71 1186.54 L1276.3 1186.54 L1276.89 1186.54 L1277.47 1186.54 L1278.06 1186.54 L1278.65 1186.54 L1279.23 1186.54 L1279.82 1186.54 L1280.4 1186.54 L1280.99 1186.54 L1281.58 1186.54 L1282.16 1186.54 L1282.75 1186.54 L1283.34 1186.54 L1283.92 1186.54 L1284.51 1186.54 L1285.1 1186.54 L1285.68 1186.54 L1286.27 1186.54 L1286.86 1186.54 L1287.44 1186.54 L1288.03 1186.54 L1288.61 1186.54 L1289.2 1186.54 L1289.79 1186.54 L1290.37 1186.54 L1290.96 1186.54 L1291.55 1186.54 L1292.13 1186.54 L1292.72 1186.54 L1293.31 1186.54 L1293.89 1186.54 L1294.48 1186.54 L1295.06 1186.54 L1295.65 1186.54 L1296.24 1186.54 L1296.82 1186.54 L1297.41 1186.54 L1298 1186.54 L1298.58 1186.54 L1299.17 1186.54 L1299.76 1186.54 L1300.34 1186.54 L1300.93 1186.54 L1301.52 1186.54 L1302.1 1186.54 L1302.69 1186.54 L1303.27 1186.54 L1303.86 1186.54 L1304.45 1186.54 L1305.03 1186.54 L1305.62 1186.54 L1306.21 1186.54 L1306.79 1186.54 L1307.38 1186.54 L1307.97 1186.54 L1308.55 1186.54 L1309.14 1186.54 L1309.73 1186.54 L1310.31 1186.54 L1310.9 1186.54 L1311.48 1186.54 L1312.07 1186.54 L1312.66 1186.54 L1313.24 1186.54 L1313.83 1186.54 L1314.42 1186.54 L1315 1186.54 L1315.59 1186.54 L1316.18 1186.54 L1316.76 1186.54 L1317.35 1186.54 L1317.93 1186.54 L1318.52 1186.54 L1319.11 1186.54 L1319.69 1186.54 L1320.28 1186.54 L1320.87 1186.54 L1321.45 1186.54 L1322.04 1186.54 L1322.63 1186.54 L1323.21 1186.54 L1323.8 1186.54 L1324.39 1186.54 L1324.97 1186.54 L1325.56 1186.54 L1326.14 1186.54 L1326.73 1186.54 L1327.32 1186.54 L1327.9 1186.54 L1328.49 1186.54 L1329.08 1186.54 L1329.66 1186.54 L1330.25 1186.54 L1330.84 1186.54 L1331.42 1186.54 L1332.01 1186.54 L1332.6 1186.54 L1333.18 1186.54 L1333.77 1186.54 L1334.35 1186.54 L1334.94 1186.54 L1335.53 1186.54 L1336.11 1186.54 L1336.7 1186.54 L1337.29 1186.54 L1337.87 1186.54 L1338.46 1186.54 L1339.05 1186.54 L1339.63 1186.54 L1340.22 1186.54 L1340.8 1186.54 L1341.39 1186.54 L1341.98 1186.54 L1342.56 1186.54 L1343.15 1186.54 L1343.74 1186.54 L1344.32 1186.54 L1344.91 1186.54 L1345.5 1186.54 L1346.08 1186.54 L1346.67 1186.54 L1347.26 1186.54 L1347.84 1186.54 L1348.43 1186.54 L1349.01 1186.54 L1349.6 1186.54 L1350.19 1186.54 L1350.77 1186.54 L1351.36 1186.54 L1351.95 1186.54 L1352.53 1186.54 L1353.12 1186.54 L1353.71 1186.54 L1354.29 1186.54 L1354.88 1186.54 L1355.47 1186.54 L1356.05 1186.54 L1356.64 1186.54 L1357.22 1186.54 L1357.81 1186.54 L1358.4 1186.54 L1358.98 1186.54 L1359.57 1186.54 L1360.16 1186.54 L1360.74 1186.54 L1361.33 1186.54 L1361.92 1186.54 L1362.5 1186.54 L1363.09 1186.54 L1363.68 1186.54 L1364.26 1186.54 L1364.85 1186.54 L1365.43 1186.54 L1366.02 1186.54 L1366.61 1186.54 L1367.19 1186.54 L1367.78 1186.54 L1368.37 1186.54 L1368.95 1186.54 L1369.54 1186.54 L1370.13 1186.54 L1370.71 1186.54 L1371.3 1186.54 L1371.88 1186.54 L1372.47 1186.54 L1373.06 1186.54 L1373.64 1186.54 L1374.23 1186.54 L1374.82 1186.54 L1375.4 1186.54 L1375.99 1186.54 L1376.58 1186.54 L1377.16 1186.54 L1377.75 1186.54 L1378.34 1186.54 L1378.92 1186.54 L1379.51 1186.54 L1380.09 1186.54 L1380.68 1186.54 L1381.27 1186.54 L1381.85 1186.54 L1382.44 1186.54 L1383.03 1186.54 L1383.61 1186.54 L1384.2 1186.54 L1384.79 1186.54 L1385.37 1186.54 L1385.96 1186.54 L1386.55 1186.54 L1387.13 1186.54 L1387.72 1186.54 L1388.3 1186.54 L1388.89 1186.54 L1389.48 1186.54 L1390.06 1186.54 L1390.65 1186.54 L1391.24 1186.54 L1391.82 1186.54 L1392.41 1186.54 L1393 1186.54 L1393.58 1186.54 L1394.17 1186.54 L1394.75 1186.54 L1395.34 1186.54 L1395.93 1186.54 L1396.51 1186.54 L1397.1 1186.54 L1397.69 1186.54 L1398.27 1186.54 L1398.86 1186.54 L1399.45 1186.54 L1400.03 1186.54 L1400.62 1186.54 L1401.21 1186.54 L1401.79 1186.54 L1402.38 1186.54 L1402.96 1186.54 L1403.55 1186.54 L1404.14 1186.54 L1404.72 1186.54 L1405.31 1186.54 L1405.9 1186.54 L1406.48 1186.54 L1407.07 1186.54 L1407.66 1186.54 L1408.24 1186.54 L1408.83 1186.54 L1409.42 1186.54 L1410 1186.54 L1410.59 1186.54 L1411.17 1186.54 L1411.76 1186.54 L1412.35 1186.54 L1412.93 1186.54 L1413.52 1186.54 L1414.11 1186.54 L1414.69 1186.54 L1415.28 1186.54 L1415.87 1186.54 L1416.45 1186.54 L1417.04 1186.54 L1417.63 1186.54 L1418.21 1186.54 L1418.8 1186.54 L1419.38 1186.54 L1419.97 1186.54 L1420.56 1186.54 L1421.14 1186.54 L1421.73 1186.54 L1422.32 1186.54 L1422.9 1186.54 L1423.49 1186.54 L1424.08 1186.54 L1424.66 1186.54 L1425.25 1186.54 L1425.83 1186.54 L1426.42 1186.54 L1427.01 1186.54 L1427.59 1186.54 L1428.18 1186.54 L1428.77 1186.54 L1429.35 1186.54 L1429.94 1186.54 L1430.53 1186.54 L1431.11 1186.54 L1431.7 1186.54 L1432.29 1186.54 L1432.87 1186.54 L1433.46 1186.54 L1434.04 1186.54 L1434.63 1186.54 L1435.22 1186.54 L1435.8 1186.54 L1436.39 1186.54 L1436.98 1186.54 L1437.56 1186.54 L1438.15 1186.54 L1438.74 1186.54 L1439.32 1186.54 L1439.91 1186.54 L1440.5 1186.54 L1441.08 1186.54 L1441.67 1186.54 L1442.25 1186.54 L1442.84 1186.54 L1443.43 1186.54 L1444.01 1186.54 L1444.6 1186.54 L1445.19 1186.54 L1445.77 1186.54 L1446.36 1186.54 L1446.95 1186.54 L1447.53 1186.54 L1448.12 1186.54 L1448.7 1186.54 L1449.29 1186.54 L1449.88 1186.54 L1450.46 1186.54 L1451.05 1186.54 L1451.64 1186.54 L1452.22 1186.54 L1452.81 1186.54 L1453.4 1186.54 L1453.98 1186.54 L1454.57 1186.54 L1455.16 1186.54 L1455.74 1186.54 L1456.33 1186.54 L1456.91 1186.54 L1457.5 1186.54 L1458.09 1186.54 L1458.67 1186.54 L1459.26 1186.54 L1459.85 1186.54 L1460.43 1186.54 L1461.02 1186.54 L1461.61 1186.54 L1462.19 1186.54 L1462.78 1186.54 L1463.37 1186.54 L1463.95 1186.54 L1464.54 1186.54 L1465.12 1186.54 L1465.71 1186.54 L1466.3 1186.54 L1466.88 1186.54 L1467.47 1186.54 L1468.06 1186.54 L1468.64 1186.54 L1469.23 1186.54 L1469.82 1186.54 L1470.4 1186.54 L1470.99 1186.54 L1471.57 1186.54 L1472.16 1186.54 L1472.75 1186.54 L1473.33 1186.54 L1473.92 1186.54 L1474.51 1186.54 L1475.09 1186.54 L1475.68 1186.54 L1476.27 1186.54 L1476.85 1186.54 L1477.44 1186.54 L1478.03 1186.54 L1478.61 1186.54 L1479.2 1186.54 L1479.78 1186.54 L1480.37 1186.54 L1480.96 1186.54 L1481.54 1186.54 L1482.13 1186.54 L1482.72 1186.54 L1483.3 1186.54 L1483.89 1186.54 L1484.48 1186.54 L1485.06 1186.54 L1485.65 1186.54 L1486.24 1186.54 L1486.82 1186.54 L1487.41 1186.54 L1487.99 1186.54 L1488.58 1186.54 L1489.17 1186.54 L1489.75 1186.54 L1490.34 1186.54 L1490.93 1186.54 L1491.51 1186.54 L1492.1 1186.54 L1492.69 1186.54 L1493.27 1186.54 L1493.86 1186.54 L1494.45 1186.54 L1495.03 1186.54 L1495.62 1186.54 L1496.2 1186.54 L1496.79 1186.54 L1497.38 1186.54 L1497.96 1186.54 L1498.55 1186.54 L1499.14 1186.54 L1499.72 1186.54 L1500.31 1186.54 L1500.9 1186.54 L1501.48 1186.54 L1502.07 1186.54 L1502.65 1186.54 L1503.24 1186.54 L1503.83 1186.54 L1504.41 1186.54 L1505 1186.54 L1505.59 1186.54 L1506.17 1186.54 L1506.76 1186.54 L1507.35 1186.54 L1507.93 1186.54 L1508.52 1186.54 L1509.11 1186.54 L1509.69 1186.54 L1510.28 1186.54 L1510.86 1186.54 L1511.45 1186.54 L1512.04 1186.54 L1512.62 1186.54 L1513.21 1186.54 L1513.8 1186.54 L1514.38 1186.54 L1514.97 1186.54 L1515.56 1186.54 L1516.14 1186.54 L1516.73 1186.54 L1517.32 1186.54 L1517.9 1186.54 L1518.49 1186.54 L1519.07 1186.54 L1519.66 1186.54 L1520.25 1186.54 L1520.83 1186.54 L1521.42 1186.54 L1522.01 1186.54 L1522.59 1186.54 L1523.18 1186.54 L1523.77 1186.54 L1524.35 1186.54 L1524.94 1186.54 L1525.52 1186.54 L1526.11 1186.54 L1526.7 1186.54 L1527.28 1186.54 L1527.87 1186.54 L1528.46 1186.54 L1529.04 1186.54 L1529.63 1186.54 L1530.22 1186.54 L1530.8 1186.54 L1531.39 1186.54 L1531.98 1186.54 L1532.56 1186.54 L1533.15 1186.54 L1533.73 1186.54 L1534.32 1186.54 L1534.91 1186.54 L1535.49 1186.54 L1536.08 1186.54 L1536.67 1186.54 L1537.25 1186.54 L1537.84 1186.54 L1538.43 1186.54 L1539.01 1186.54 L1539.6 1186.54 L1540.19 1186.54 L1540.77 1186.54 L1541.36 1186.54 L1541.94 1186.54 L1542.53 1186.54 L1543.12 1186.54 L1543.7 1186.54 L1544.29 1186.54 L1544.88 1186.54 L1545.46 1186.54 L1546.05 1186.54 L1546.64 1186.54 L1547.22 1186.54 L1547.81 1186.54 L1548.4 1186.54 L1548.98 1186.54 L1549.57 1186.54 L1550.15 1186.54 L1550.74 1186.54 L1551.33 1186.54 L1551.91 1186.54 L1552.5 1186.54 L1553.09 1186.54 L1553.67 1186.54 L1554.26 1186.54 L1554.85 1186.54 L1555.43 1186.54 L1556.02 1186.54 L1556.6 1186.54 L1557.19 1186.54 L1557.78 1186.54 L1558.36 1186.54 L1558.95 1186.54 L1559.54 1186.54 L1560.12 1186.54 L1560.71 1186.54 L1561.3 1186.54 L1561.88 1186.54 L1562.47 1186.54 L1563.06 1186.54 L1563.64 1186.54 L1564.23 1186.54 L1564.81 1186.54 L1565.4 1186.54 L1565.99 1186.54 L1566.57 1186.54 L1567.16 1186.54 L1567.75 1186.54 L1568.33 1186.54 L1568.92 1186.54 L1569.51 1186.54 L1570.09 1186.54 L1570.68 1186.54 L1571.27 1186.54 L1571.85 1186.54 L1572.44 1186.54 L1573.02 1186.54 L1573.61 1186.54 L1574.2 1186.54 L1574.78 1186.54 L1575.37 1186.54 L1575.96 1186.54 L1576.54 1186.54 L1577.13 1186.54 L1577.72 1186.54 L1578.3 1186.54 L1578.89 1186.54 L1579.47 1186.54 L1580.06 1186.54 L1580.65 1186.54 L1581.23 1186.54 L1581.82 1186.54 L1582.41 1186.54 L1582.99 1186.54 L1583.58 1186.54 L1584.17 1186.54 L1584.75 1186.54 L1585.34 1186.54 L1585.93 1186.54 L1586.51 1186.54 L1587.1 1186.54 L1587.68 1186.54 L1588.27 1186.54 L1588.86 1186.54 L1589.44 1186.54 L1590.03 1186.54 L1590.62 1186.54 L1591.2 1186.54 L1591.79 1186.54 L1592.38 1186.54 L1592.96 1186.54 L1593.55 1186.54 L1594.14 1186.54 L1594.72 1186.54 L1595.31 1186.54 L1595.89 1186.54 L1596.48 1186.54 L1597.07 1186.54 L1597.65 1186.54 L1598.24 1186.54 L1598.83 1186.54 L1599.41 1186.54 L1600 1186.54 L1600.59 1186.54 L1601.17 1186.54 L1601.76 1186.54 L1602.34 1186.54 L1602.93 1186.54 L1603.52 1186.54 L1604.1 1186.54 L1604.69 1186.54 L1605.28 1186.54 L1605.86 1186.54 L1606.45 1186.54 L1607.04 1186.54 L1607.62 1186.54 L1608.21 1186.54 L1608.8 1186.54 L1609.38 1186.54 L1609.97 1186.54 L1610.55 1186.54 L1611.14 1186.54 L1611.73 1186.54 L1612.31 1186.54 L1612.9 1186.54 L1613.49 1186.54 L1614.07 1186.54 L1614.66 1186.54 L1615.25 1186.54 L1615.83 1186.54 L1616.42 1186.54 L1617.01 1186.54 L1617.59 1186.54 L1618.18 1186.54 L1618.76 1186.54 L1619.35 1186.54 L1619.94 1186.54 L1620.52 1186.54 L1621.11 1186.54 L1621.7 1186.54 L1622.28 1186.54 L1622.87 1186.54 L1623.46 1186.54 L1624.04 1186.54 L1624.63 1186.54 L1625.22 1186.54 L1625.8 1186.54 L1626.39 1186.54 L1626.97 1186.54 L1627.56 1186.54 L1628.15 1186.54 L1628.73 1186.54 L1629.32 1186.54 L1629.91 1186.54 L1630.49 1186.54 L1631.08 1186.54 L1631.67 1186.54 L1632.25 1186.54 L1632.84 1186.54 L1633.42 1186.54 L1634.01 1186.54 L1634.6 1186.54 L1635.18 1186.54 L1635.77 1186.54 L1636.36 1186.54 L1636.94 1186.54 L1637.53 1186.54 L1638.12 1186.54 L1638.7 1186.54 L1639.29 1186.54 L1639.88 1186.54 L1640.46 1186.54 L1641.05 1186.54 L1641.63 1186.54 L1642.22 1186.54 L1642.81 1186.54 L1643.39 1186.54 L1643.98 1186.54 L1644.57 1186.54 L1645.15 1186.54 L1645.74 1186.54 L1646.33 1186.54 L1646.91 1186.54 L1647.5 1186.54 L1648.09 1186.54 L1648.67 1186.54 L1649.26 1186.54 L1649.84 1186.54 L1650.43 1186.54 L1651.02 1186.54 L1651.6 1186.54 L1652.19 1186.54 L1652.78 1186.54 L1653.36 1186.54 L1653.95 1186.54 L1654.54 1186.54 L1655.12 1186.54 L1655.71 1186.54 L1656.29 1186.54 L1656.88 1186.54 L1657.47 1186.54 L1658.05 1186.54 L1658.64 1186.54 L1659.23 1186.54 L1659.81 1186.54 L1660.4 1186.54 L1660.99 1186.54 L1661.57 1186.54 L1662.16 1186.54 L1662.75 1186.54 L1663.33 1186.54 L1663.92 1186.54 L1664.5 1186.54 L1665.09 1186.54 L1665.68 1186.54 L1666.26 1186.54 L1666.85 1186.54 L1667.44 1186.54 L1668.02 1186.54 L1668.61 1186.54 L1669.2 1186.54 L1669.78 1186.54 L1670.37 1186.54 L1670.96 1186.54 L1671.54 1186.54 L1672.13 1186.54 L1672.71 1186.54 L1673.3 1186.54 L1673.89 1186.54 L1674.47 1186.54 L1675.06 1186.54 L1675.65 1186.54 L1676.23 1186.54 L1676.82 1186.54 L1677.41 1186.54 L1677.99 1186.54 L1678.58 1186.54 L1679.17 1186.54 L1679.75 1186.54 L1680.34 1186.54 L1680.92 1186.54 L1681.51 1186.54 L1682.1 1186.54 L1682.68 1186.54 L1683.27 1186.54 L1683.86 1186.54 L1684.44 1186.54 L1685.03 1186.54 L1685.62 1186.54 L1686.2 1186.54 L1686.79 1186.54 L1687.37 1186.54 L1687.96 1186.54 L1688.55 1186.54 L1689.13 1186.54 L1689.72 1186.54 L1690.31 1186.54 L1690.89 1186.54 L1691.48 1186.54 L1692.07 1186.54 L1692.65 1186.54 L1693.24 1186.54 L1693.83 1186.54 L1694.41 1186.54 L1695 1186.54 L1695.58 1186.54 L1696.17 1186.54 L1696.76 1186.54 L1697.34 1186.54 L1697.93 1186.54 L1698.52 1186.54 L1699.1 1186.54 L1699.69 1186.54 L1700.28 1186.54 L1700.86 1186.54 L1701.45 1186.54 L1702.04 1186.54 L1702.62 1186.54 L1703.21 1186.54 L1703.79 1186.54 L1704.38 1186.54 L1704.97 1186.54 L1705.55 1186.54 L1706.14 1186.54 L1706.73 1186.54 L1707.31 1186.54 L1707.9 1186.54 L1708.49 1186.54 L1709.07 1186.54 L1709.66 1186.54 L1710.24 1186.54 L1710.83 1186.54 L1711.42 1186.54 L1712 1186.54 L1712.59 1186.54 L1713.18 1186.54 L1713.76 1186.54 L1714.35 1186.54 L1714.94 1186.54 L1715.52 1186.54 L1716.11 1186.54 L1716.7 1186.54 L1717.28 1186.54 L1717.87 1186.54 L1718.45 1186.54 L1719.04 1186.54 L1719.63 1186.54 L1720.21 1186.54 L1720.8 1186.54 L1721.39 1186.54 L1721.97 1186.54 L1722.56 1186.54 L1723.15 1186.54 L1723.73 1186.54 L1724.32 1186.54 L1724.91 1186.54 L1725.49 1186.54 L1726.08 1186.54 L1726.66 1186.54 L1727.25 1186.54 L1727.84 1186.54 L1728.42 1186.54 L1729.01 1186.54 L1729.6 1186.54 L1730.18 1186.54 L1730.77 1186.54 L1731.36 1186.54 L1731.94 1186.54 L1732.53 1186.54 L1733.11 1186.54 L1733.7 1186.54 L1734.29 1186.54 L1734.87 1186.54 L1735.46 1186.54 L1736.05 1186.54 L1736.63 1186.54 L1737.22 1186.54 L1737.81 1186.54 L1738.39 1186.54 L1738.98 1186.54 L1739.57 1186.54 L1740.15 1186.54 L1740.74 1186.54 L1741.32 1186.54 L1741.91 1186.54 L1742.5 1186.54 L1743.08 1186.54 L1743.67 1186.54 L1744.26 1186.54 L1744.84 1186.54 L1745.43 1186.54 L1746.02 1186.54 L1746.6 1186.54 L1747.19 1186.54 L1747.78 1186.54 L1748.36 1186.54 L1748.95 1186.54 L1749.53 1186.54 L1750.12 1186.54 L1750.71 1186.54 L1751.29 1186.54 L1751.88 1186.54 L1752.47 1186.54 L1753.05 1186.54 L1753.64 1186.54 L1754.23 1186.54 L1754.81 1186.54 L1755.4 1186.54 L1755.99 1186.54 L1756.57 1186.54 L1757.16 1186.54 L1757.74 1186.54 L1758.33 1186.54 L1758.92 1186.54 L1759.5 1186.54 L1760.09 1186.54 L1760.68 1186.54 L1761.26 1186.54 L1761.85 1186.54 L1762.44 1186.54 L1763.02 1186.54 L1763.61 1186.54 L1764.19 1186.54 L1764.78 1186.54 L1765.37 1186.54 L1765.95 1186.54 L1766.54 1186.54 L1767.13 1186.54 L1767.71 1186.54 L1768.3 1186.54 L1768.89 1186.54 L1769.47 1186.54 L1770.06 1186.54 L1770.65 1186.54 L1771.23 1186.54 L1771.82 1186.54 L1772.4 1186.54 L1772.99 1186.54 L1773.58 1186.54 L1774.16 1186.54 L1774.75 1186.54 L1775.34 1186.54 L1775.92 1186.54 L1776.51 1186.54 L1777.1 1186.54 L1777.68 1186.54 L1778.27 1186.54 L1778.86 1186.54 L1779.44 1186.54 L1780.03 1186.54 L1780.61 1186.54 L1781.2 1186.54 L1781.79 1186.54 L1782.37 1186.54 L1782.96 1186.54 L1783.55 1186.54 L1784.13 1186.54 L1784.72 1186.54 L1785.31 1186.54 L1785.89 1186.54 L1786.48 1186.54 L1787.06 1186.54 L1787.65 1186.54 L1788.24 1186.54 L1788.82 1186.54 L1789.41 1186.54 L1790 1186.54 L1790.58 1186.54 L1791.17 1186.54 L1791.76 1186.54 L1792.34 1186.54 L1792.93 1186.54 L1793.52 1186.54 L1794.1 1186.54 L1794.69 1186.54 L1795.27 1186.54 L1795.86 1186.54 L1796.45 1186.54 L1797.03 1186.54 L1797.62 1186.54 L1798.21 1186.54 L1798.79 1186.54 L1799.38 1186.54 L1799.97 1186.54 L1800.55 1186.54 L1801.14 1186.54 L1801.73 1186.54 L1802.31 1186.54 L1802.9 1186.54 L1803.48 1186.54 L1804.07 1186.54 L1804.66 1186.54 L1805.24 1186.54 L1805.83 1186.54 L1806.42 1186.54 L1807 1186.54 L1807.59 1186.54 L1808.18 1186.54 L1808.76 1186.54 L1809.35 1186.54 L1809.94 1186.54 L1810.52 1186.54 L1811.11 1186.54 L1811.69 1186.54 L1812.28 1186.54 L1812.87 1186.54 L1813.45 1186.54 L1814.04 1186.54 L1814.63 1186.54 L1815.21 1186.54 L1815.8 1186.54 L1816.39 1186.54 L1816.97 1186.54 L1817.56 1186.54 L1818.14 1186.54 L1818.73 1186.54 L1819.32 1186.54 L1819.9 1186.54 L1820.49 1186.54 L1821.08 1186.54 L1821.66 1186.54 L1822.25 1186.54 L1822.84 1186.54 L1823.42 1186.54 L1824.01 1186.54 L1824.6 1186.54 L1825.18 1186.54 L1825.77 1186.54 L1826.35 1186.54 L1826.94 1186.54 L1827.53 1186.54 L1828.11 1186.54 L1828.7 1186.54 L1829.29 1186.54 L1829.87 1186.54 L1830.46 1186.54 L1831.05 1186.54 L1831.63 1186.54 L1832.22 1186.54 L1832.81 1186.54 L1833.39 1186.54 L1833.98 1186.54 L1834.56 1186.54 L1835.15 1186.54 L1835.74 1186.54 L1836.32 1186.54 L1836.91 1186.54 L1837.5 1186.54 L1838.08 1186.54 L1838.67 1186.54 L1839.26 1186.54 L1839.84 1186.54 L1840.43 1186.54 L1841.01 1186.54 L1841.6 1186.54 L1842.19 1186.54 L1842.77 1186.54 L1843.36 1186.54 L1843.95 1186.54 L1844.53 1186.54 L1845.12 1186.54 L1845.71 1186.54 L1846.29 1186.54 L1846.88 1186.54 L1847.47 1186.54 L1848.05 1186.54 L1848.64 1186.54 L1849.22 1186.54 L1849.81 1186.54 L1850.4 1186.54 L1850.98 1186.54 L1851.57 1186.54 L1852.16 1186.54 L1852.74 1186.54 L1853.33 1186.54 L1853.92 1186.54 L1854.5 1186.54 L1855.09 1186.54 L1855.68 1186.54 L1856.26 1186.54 L1856.85 1186.54 L1857.43 1186.54 L1858.02 1186.54 L1858.61 1186.54 L1859.19 1186.54 L1859.78 1186.54 L1860.37 1186.54 L1860.95 1186.54 L1861.54 1186.54 L1862.13 1186.54 L1862.71 1186.54 L1863.3 1186.54 L1863.88 1186.54 L1864.47 1186.54 L1865.06 1186.54 L1865.64 1186.54 L1866.23 1186.54 L1866.82 1186.54 L1867.4 1186.54 L1867.99 1186.54 L1868.58 1186.54 L1869.16 1186.54 L1869.75 1186.54 L1870.34 1186.54 L1870.92 1186.54 L1871.51 1186.54 L1872.09 1186.54 L1872.68 1186.54 L1873.27 1186.54 L1873.85 1186.54 L1874.44 1186.54 L1875.03 1186.54 L1875.61 1186.54 L1876.2 1186.54 L1876.79 1186.54 L1877.37 1186.54 L1877.96 1186.54 L1878.55 1186.54 L1879.13 1186.54 L1879.72 1186.54 L1880.3 1186.54 L1880.89 1186.54 L1881.48 1186.54 L1882.06 1186.54 L1882.65 1186.54 L1883.24 1186.54 L1883.82 1186.54 L1884.41 1186.54 L1885 1186.54 L1885.58 1186.54 L1886.17 1186.54 L1886.76 1186.54 L1887.34 1186.54 L1887.93 1186.54 L1888.51 1186.54 L1889.1 1186.54 L1889.69 1186.54 L1890.27 1186.54 L1890.86 1186.54 L1891.45 1186.54 L1892.03 1186.54 L1892.62 1186.54 L1893.21 1186.54 L1893.79 1186.54 L1894.38 1186.54 L1894.96 1186.54 L1895.55 1186.54 L1896.14 1186.54 L1896.72 1186.54 L1897.31 1186.54 L1897.9 1186.54 L1898.48 1186.54 L1899.07 1186.54 L1899.66 1186.54 L1900.24 1186.54 L1900.83 1186.54 L1901.42 1186.54 L1902 1186.54 L1902.59 1186.54 L1903.17 1186.54 L1903.76 1186.54 L1904.35 1186.54 L1904.93 1186.54 L1905.52 1186.54 L1906.11 1186.54 L1906.69 1186.54 L1907.28 1186.54 L1907.87 1186.54 L1908.45 1186.54 L1909.04 1186.54 L1909.63 1186.54 L1910.21 1186.54 L1910.8 1186.54 L1911.38 1186.54 L1911.97 1186.54 L1912.56 1186.54 L1913.14 1186.54 L1913.73 1186.54 L1914.32 1186.54 L1914.9 1186.54 L1915.49 1186.54 L1916.08 1186.54 L1916.66 1186.54 L1917.25 1186.54 L1917.83 1186.54 L1918.42 1186.54 L1919.01 1186.54 L1919.59 1186.54 L1920.18 1186.54 L1920.77 1186.54 L1921.35 1186.54 L1921.94 1186.54 L1922.53 1186.54 L1923.11 1186.54 L1923.7 1186.54 L1924.29 1186.54 L1924.87 1186.54 L1925.46 1186.54 L1926.04 1186.54 L1926.63 1186.54 L1927.22 1186.54 L1927.8 1186.54 L1928.39 1186.54 L1928.98 1186.54 L1929.56 1186.54 L1930.15 1186.54 L1930.74 1186.54 L1931.32 1186.54 L1931.91 1186.54 L1932.5 1186.54 L1933.08 1186.54 L1933.67 1186.54 L1934.25 1186.54 L1934.84 1186.54 L1935.43 1186.54 L1936.01 1186.54 L1936.6 1186.54 L1937.19 1186.54 L1937.77 1186.54 L1938.36 1186.54 L1938.95 1186.54 L1939.53 1186.54 L1940.12 1186.54 L1940.71 1186.54 L1941.29 1186.54 L1941.88 1186.54 L1942.46 1186.54 L1943.05 1186.54 L1943.64 1186.54 L1944.22 1186.54 L1944.81 1186.54 L1945.4 1186.54 L1945.98 1186.54 L1946.57 1186.54 L1947.16 1186.54 L1947.74 1186.54 L1948.33 1186.54 L1948.91 1186.54 L1949.5 1186.54 L1950.09 1186.54 L1950.67 1186.54 L1951.26 1186.54 L1951.85 1186.54 L1952.43 1186.54 L1953.02 1186.54 L1953.61 1186.54 L1954.19 1186.54 L1954.78 1186.54 L1955.37 1186.54 L1955.95 1186.54 L1956.54 1186.54 L1957.12 1186.54 L1957.71 1186.54 L1958.3 1186.54 L1958.88 1186.54 L1959.47 1186.54 L1960.06 1186.54 L1960.64 1186.54 L1961.23 1186.54 L1961.82 1186.54 L1962.4 1186.54 L1962.99 1186.54 L1963.58 1186.54 L1964.16 1186.54 L1964.75 1186.54 L1965.33 1186.54 L1965.92 1186.54 L1966.51 1186.54 L1967.09 1186.54 L1967.68 1186.54 L1968.27 1186.54 L1968.85 1186.54 L1969.44 1186.54 L1970.03 1186.54 L1970.61 1186.54 L1971.2 1186.54 L1971.78 1186.54 L1972.37 1186.54 L1972.96 1186.54 L1973.54 1186.54 L1974.13 1186.54 L1974.72 1186.54 L1975.3 1186.54 L1975.89 1186.54 L1976.48 1186.54 L1977.06 1186.54 L1977.65 1186.54 L1978.24 1186.54 L1978.82 1186.54 L1979.41 1186.54 L1979.99 1186.54 L1980.58 1186.54 L1981.17 1186.54 L1981.75 1186.54 L1982.34 1186.54 L1982.93 1186.54 L1983.51 1186.54 L1984.1 1186.54 L1984.69 1186.54 L1985.27 1186.54 L1985.86 1186.54 L1986.45 1186.54 L1987.03 1186.54 L1987.62 1186.54 L1988.2 1186.54 L1988.79 1186.54 L1989.38 1186.54 L1989.96 1186.54 L1990.55 1186.54 L1991.14 1186.54 L1991.72 1186.54 L1992.31 1186.54 L1992.9 1186.54 L1993.48 1186.54 L1994.07 1186.54 L1994.65 1186.54 L1995.24 1186.54 L1995.83 1186.54 L1996.41 1186.54 L1997 1186.54 L1997.59 1186.54 L1998.17 1186.54 L1998.76 1186.54 L1999.35 1186.54 L1999.93 1186.54 L2000.52 1186.54 L2001.11 1186.54 L2001.69 1186.54 L2002.28 1186.54 L2002.86 1186.54 L2003.45 1186.54 L2004.04 1186.54 L2004.62 1186.54 L2005.21 1186.54 L2005.8 1186.54 L2006.38 1186.54 L2006.97 1186.54 L2007.56 1186.54 L2008.14 1186.54 L2008.73 1186.54 L2009.32 1186.54 L2009.9 1186.54 L2010.49 1186.54 L2011.07 1186.54 L2011.66 1186.54 L2012.25 1186.54 L2012.83 1186.54 L2013.42 1186.54 L2014.01 1186.54 L2014.59 1186.54 L2015.18 1186.54 L2015.77 1186.54 L2016.35 1186.54 L2016.94 1186.54 L2017.53 1186.54 L2018.11 1186.54 L2018.7 1186.54 L2019.28 1186.54 L2019.87 1186.54 L2020.46 1186.54 L2021.04 1186.54 L2021.63 1186.54 L2022.22 1186.54 L2022.8 1186.54 L2023.39 1186.54 L2023.98 1186.54 L2024.56 1186.54 L2025.15 1186.54 L2025.73 1186.54 L2026.32 1186.54 L2026.91 1186.54 L2027.49 1186.54 L2028.08 1186.54 L2028.67 1186.54 L2029.25 1186.54 L2029.84 1186.54 L2030.43 1186.54 L2031.01 1186.54 L2031.6 1186.54 L2032.19 1186.54 L2032.77 1186.54 L2033.36 1186.54 L2033.94 1186.54 L2034.53 1186.54 L2035.12 1186.54 L2035.7 1186.54 L2036.29 1186.54 L2036.88 1186.54 L2037.46 1186.54 L2038.05 1186.54 L2038.64 1186.54 L2039.22 1186.54 L2039.81 1186.54 L2040.4 1186.54 L2040.98 1186.54 L2041.57 1186.54 L2042.15 1186.54 L2042.74 1186.54 L2043.33 1186.54 L2043.91 1186.54 L2044.5 1186.54 L2045.09 1186.54 L2045.67 1186.54 L2046.26 1186.54 L2046.85 1186.54 L2047.43 1186.54 L2048.02 1186.54 L2048.6 1186.54 L2049.19 1186.54 L2049.78 1186.54 L2050.36 1186.54 L2050.95 1186.54 L2051.54 1186.54 L2052.12 1186.54 L2052.71 1186.54 L2053.3 1186.54 L2053.88 1186.54 L2054.47 1186.54 L2055.06 1186.54 L2055.64 1186.54 L2056.23 1186.54 L2056.81 1186.54 L2057.4 1186.54 L2057.99 1186.54 L2058.57 1186.54 L2059.16 1186.54 L2059.75 1186.54 L2060.33 1186.54 L2060.92 1186.54 L2061.51 1186.54 L2062.09 1186.54 L2062.68 1186.54 L2063.27 1186.54 L2063.85 1186.54 L2064.44 1186.54 L2065.02 1186.54 L2065.61 1186.54 L2066.2 1186.54 L2066.78 1186.54 L2067.37 1186.54 L2067.96 1186.54 L2068.54 1186.54 L2069.13 1186.54 L2069.72 1186.54 L2070.3 1186.54 L2070.89 1186.54 L2071.48 1186.54 L2072.06 1186.54 L2072.65 1186.54 L2073.23 1186.54 L2073.82 1186.54 L2074.41 1186.54 L2074.99 1186.54 L2075.58 1186.54 L2076.17 1186.54 L2076.75 1186.54 L2077.34 1186.54 L2077.93 1186.54 L2078.51 1186.54 L2079.1 1186.54 L2079.68 1186.54 L2080.27 1186.54 L2080.86 1186.54 L2081.44 1186.54 L2082.03 1186.54 L2082.62 1186.54 L2083.2 1186.54 L2083.79 1186.54 L2084.38 1186.54 L2084.96 1186.54 L2085.55 1186.54 L2086.14 1186.54 L2086.72 1186.54 L2087.31 1186.54 L2087.89 1186.54 L2088.48 1186.54 L2089.07 1186.54 L2089.65 1186.54 L2090.24 1186.54 L2090.83 1186.54 L2091.41 1186.54 L2092 1186.54 L2092.59 1186.54 L2093.17 1186.54 L2093.76 1186.54 L2094.35 1186.54 L2094.93 1186.54 L2095.52 1186.54 L2096.1 1186.54 L2096.69 1186.54 L2097.28 1186.54 L2097.86 1186.54 L2098.45 1186.54 L2099.04 1186.54 L2099.62 1186.54 L2100.21 1186.54 L2100.8 1186.54 L2101.38 1186.54 L2101.97 1186.54 L2102.55 1186.54 L2103.14 1186.54 L2103.73 1186.54 L2104.31 1186.54 L2104.9 1186.54 L2105.49 1186.54 L2106.07 1186.54 L2106.66 1186.54 L2107.25 1186.54 L2107.83 1186.54 L2108.42 1186.54 L2109.01 1186.54 L2109.59 1186.54 L2110.18 1186.54 L2110.76 1186.54 L2111.35 1186.54 L2111.94 1186.54 L2112.52 1186.54 L2113.11 1186.54 L2113.7 1186.54 L2114.28 1186.54 L2114.87 1186.54 L2115.46 1186.54 L2116.04 1186.54 L2116.63 1186.54 L2117.22 1186.54 L2117.8 1186.54 L2118.39 1186.54 L2118.97 1186.54 L2119.56 1186.54 L2120.15 1186.54 L2120.73 1186.54 L2121.32 1186.54 L2121.91 1186.54 L2122.49 1186.54 L2123.08 1186.54 L2123.67 1186.54 L2124.25 1186.54 L2124.84 1186.54 L2125.42 1186.54 L2126.01 1186.54 L2126.6 1186.54 L2127.18 1186.54 L2127.77 1186.54 L2128.36 1186.54 L2128.94 1186.54 L2129.53 1186.54 L2130.12 1186.54 L2130.7 1186.54 L2131.29 1186.54 L2131.88 1186.54 L2132.46 1186.54 L2133.05 1186.54 L2133.63 1186.54 L2134.22 1186.54 L2134.81 1186.54 L2135.39 1186.54 L2135.98 1186.54 L2136.57 1186.54 L2137.15 1186.54 L2137.74 1186.54 L2138.33 1186.54 L2138.91 1186.54 L2139.5 1186.54 L2140.09 1186.54 L2140.67 1186.54 L2141.26 1186.54 L2141.84 1186.54 L2142.43 1186.54 L2143.02 1186.54 L2143.6 1186.54 L2144.19 1186.54 L2144.78 1186.54 L2145.36 1186.54 L2145.95 1186.54 L2146.54 1186.54 L2147.12 1186.54 L2147.71 1186.54 L2148.3 1186.54 L2148.88 1186.54 L2149.47 1186.54 L2150.05 1186.54 L2150.64 1186.54 L2151.23 1186.54 L2151.81 1186.54 L2152.4 1186.54 L2152.99 1186.54 L2153.57 1186.54 L2154.16 1186.54 L2154.75 1186.54 L2155.33 1186.54 L2155.92 1186.54 L2156.5 1186.54 L2157.09 1186.54 L2157.68 1186.54 L2158.26 1186.54 L2158.26 1186.34 L2157.68 1186.34 L2157.09 1186.34 L2156.5 1186.34 L2155.92 1186.34 L2155.33 1186.34 L2154.75 1186.34 L2154.16 1186.34 L2153.57 1186.34 L2152.99 1186.34 L2152.4 1186.34 L2151.81 1186.34 L2151.23 1186.34 L2150.64 1186.34 L2150.05 1186.34 L2149.47 1186.34 L2148.88 1186.34 L2148.3 1186.34 L2147.71 1186.34 L2147.12 1186.34 L2146.54 1186.34 L2145.95 1186.34 L2145.36 1186.34 L2144.78 1186.34 L2144.19 1186.34 L2143.6 1186.34 L2143.02 1186.34 L2142.43 1186.34 L2141.84 1186.34 L2141.26 1186.34 L2140.67 1186.34 L2140.09 1186.34 L2139.5 1186.34 L2138.91 1186.34 L2138.33 1186.34 L2137.74 1186.34 L2137.15 1186.34 L2136.57 1186.34 L2135.98 1186.34 L2135.39 1186.34 L2134.81 1186.34 L2134.22 1186.34 L2133.63 1186.34 L2133.05 1186.34 L2132.46 1186.34 L2131.88 1186.34 L2131.29 1186.34 L2130.7 1186.34 L2130.12 1186.34 L2129.53 1186.34 L2128.94 1186.34 L2128.36 1186.34 L2127.77 1186.34 L2127.18 1186.34 L2126.6 1186.34 L2126.01 1186.34 L2125.42 1186.34 L2124.84 1186.34 L2124.25 1186.34 L2123.67 1186.34 L2123.08 1186.34 L2122.49 1186.34 L2121.91 1186.34 L2121.32 1186.34 L2120.73 1186.34 L2120.15 1186.34 L2119.56 1186.34 L2118.97 1186.34 L2118.39 1186.34 L2117.8 1186.34 L2117.22 1186.34 L2116.63 1186.34 L2116.04 1186.34 L2115.46 1186.34 L2114.87 1186.34 L2114.28 1186.34 L2113.7 1186.34 L2113.11 1186.34 L2112.52 1186.34 L2111.94 1186.34 L2111.35 1186.34 L2110.76 1186.34 L2110.18 1186.34 L2109.59 1186.34 L2109.01 1186.34 L2108.42 1186.34 L2107.83 1186.34 L2107.25 1186.34 L2106.66 1186.34 L2106.07 1186.34 L2105.49 1186.34 L2104.9 1186.34 L2104.31 1186.34 L2103.73 1186.34 L2103.14 1186.34 L2102.55 1186.34 L2101.97 1186.34 L2101.38 1186.34 L2100.8 1186.34 L2100.21 1186.34 L2099.62 1186.34 L2099.04 1186.34 L2098.45 1186.34 L2097.86 1186.34 L2097.28 1186.34 L2096.69 1186.34 L2096.1 1186.34 L2095.52 1186.34 L2094.93 1186.34 L2094.35 1186.34 L2093.76 1186.34 L2093.17 1186.34 L2092.59 1186.34 L2092 1186.34 L2091.41 1186.34 L2090.83 1186.34 L2090.24 1186.34 L2089.65 1186.34 L2089.07 1186.34 L2088.48 1186.34 L2087.89 1186.34 L2087.31 1186.34 L2086.72 1186.34 L2086.14 1186.34 L2085.55 1186.34 L2084.96 1186.34 L2084.38 1186.34 L2083.79 1186.34 L2083.2 1186.34 L2082.62 1186.34 L2082.03 1186.34 L2081.44 1186.34 L2080.86 1186.34 L2080.27 1186.34 L2079.68 1186.34 L2079.1 1186.34 L2078.51 1186.34 L2077.93 1186.34 L2077.34 1186.34 L2076.75 1186.34 L2076.17 1186.34 L2075.58 1186.34 L2074.99 1186.34 L2074.41 1186.34 L2073.82 1186.34 L2073.23 1186.34 L2072.65 1186.34 L2072.06 1186.34 L2071.48 1186.34 L2070.89 1186.34 L2070.3 1186.34 L2069.72 1186.34 L2069.13 1186.34 L2068.54 1186.34 L2067.96 1186.34 L2067.37 1186.34 L2066.78 1186.34 L2066.2 1186.34 L2065.61 1186.34 L2065.02 1186.34 L2064.44 1186.34 L2063.85 1186.34 L2063.27 1186.34 L2062.68 1186.34 L2062.09 1186.34 L2061.51 1186.34 L2060.92 1186.34 L2060.33 1186.34 L2059.75 1186.34 L2059.16 1186.34 L2058.57 1186.34 L2057.99 1186.34 L2057.4 1186.34 L2056.81 1186.34 L2056.23 1186.34 L2055.64 1186.34 L2055.06 1186.34 L2054.47 1186.34 L2053.88 1186.34 L2053.3 1186.34 L2052.71 1186.34 L2052.12 1186.34 L2051.54 1186.34 L2050.95 1186.34 L2050.36 1186.34 L2049.78 1186.34 L2049.19 1186.34 L2048.6 1186.34 L2048.02 1186.34 L2047.43 1186.34 L2046.85 1186.34 L2046.26 1186.34 L2045.67 1186.34 L2045.09 1186.34 L2044.5 1186.34 L2043.91 1186.34 L2043.33 1186.34 L2042.74 1186.34 L2042.15 1186.34 L2041.57 1186.34 L2040.98 1186.34 L2040.4 1186.34 L2039.81 1186.34 L2039.22 1186.34 L2038.64 1186.34 L2038.05 1186.34 L2037.46 1186.34 L2036.88 1186.34 L2036.29 1186.34 L2035.7 1186.34 L2035.12 1186.34 L2034.53 1186.34 L2033.94 1186.34 L2033.36 1186.34 L2032.77 1186.34 L2032.19 1186.34 L2031.6 1186.34 L2031.01 1186.34 L2030.43 1186.34 L2029.84 1186.34 L2029.25 1186.34 L2028.67 1186.34 L2028.08 1186.34 L2027.49 1186.34 L2026.91 1186.34 L2026.32 1186.34 L2025.73 1186.34 L2025.15 1186.34 L2024.56 1186.34 L2023.98 1186.34 L2023.39 1186.34 L2022.8 1186.34 L2022.22 1186.34 L2021.63 1186.34 L2021.04 1186.34 L2020.46 1186.34 L2019.87 1186.34 L2019.28 1186.34 L2018.7 1186.34 L2018.11 1186.34 L2017.53 1186.34 L2016.94 1186.34 L2016.35 1186.34 L2015.77 1186.34 L2015.18 1186.34 L2014.59 1186.34 L2014.01 1186.34 L2013.42 1186.34 L2012.83 1186.34 L2012.25 1186.34 L2011.66 1186.34 L2011.07 1186.34 L2010.49 1186.34 L2009.9 1186.34 L2009.32 1186.34 L2008.73 1186.34 L2008.14 1186.34 L2007.56 1186.34 L2006.97 1186.34 L2006.38 1186.34 L2005.8 1186.34 L2005.21 1186.34 L2004.62 1186.34 L2004.04 1186.34 L2003.45 1186.34 L2002.86 1186.34 L2002.28 1186.34 L2001.69 1186.34 L2001.11 1186.34 L2000.52 1186.34 L1999.93 1186.34 L1999.35 1186.34 L1998.76 1186.34 L1998.17 1186.34 L1997.59 1186.34 L1997 1186.34 L1996.41 1186.34 L1995.83 1186.34 L1995.24 1186.34 L1994.65 1186.34 L1994.07 1186.34 L1993.48 1186.34 L1992.9 1186.34 L1992.31 1186.34 L1991.72 1186.34 L1991.14 1186.34 L1990.55 1186.34 L1989.96 1186.34 L1989.38 1186.34 L1988.79 1186.34 L1988.2 1186.34 L1987.62 1186.34 L1987.03 1186.34 L1986.45 1186.34 L1985.86 1186.34 L1985.27 1186.34 L1984.69 1186.34 L1984.1 1186.34 L1983.51 1186.34 L1982.93 1186.34 L1982.34 1186.34 L1981.75 1186.34 L1981.17 1186.34 L1980.58 1186.34 L1979.99 1186.34 L1979.41 1186.34 L1978.82 1186.34 L1978.24 1186.34 L1977.65 1186.34 L1977.06 1186.34 L1976.48 1186.34 L1975.89 1186.34 L1975.3 1186.34 L1974.72 1186.34 L1974.13 1186.34 L1973.54 1186.34 L1972.96 1186.34 L1972.37 1186.34 L1971.78 1186.34 L1971.2 1186.34 L1970.61 1186.34 L1970.03 1186.34 L1969.44 1186.34 L1968.85 1186.34 L1968.27 1186.34 L1967.68 1186.34 L1967.09 1186.34 L1966.51 1186.34 L1965.92 1186.34 L1965.33 1186.34 L1964.75 1186.34 L1964.16 1186.34 L1963.58 1186.34 L1962.99 1186.34 L1962.4 1186.34 L1961.82 1186.34 L1961.23 1186.34 L1960.64 1186.34 L1960.06 1186.34 L1959.47 1186.34 L1958.88 1186.34 L1958.3 1186.34 L1957.71 1186.34 L1957.12 1186.34 L1956.54 1186.34 L1955.95 1186.34 L1955.37 1186.34 L1954.78 1186.34 L1954.19 1186.34 L1953.61 1186.34 L1953.02 1186.34 L1952.43 1186.34 L1951.85 1186.34 L1951.26 1186.34 L1950.67 1186.34 L1950.09 1186.34 L1949.5 1186.34 L1948.91 1186.34 L1948.33 1186.34 L1947.74 1186.34 L1947.16 1186.34 L1946.57 1186.34 L1945.98 1186.34 L1945.4 1186.34 L1944.81 1186.34 L1944.22 1186.34 L1943.64 1186.34 L1943.05 1186.34 L1942.46 1186.34 L1941.88 1186.34 L1941.29 1186.34 L1940.71 1186.34 L1940.12 1186.34 L1939.53 1186.34 L1938.95 1186.34 L1938.36 1186.34 L1937.77 1186.34 L1937.19 1186.34 L1936.6 1186.34 L1936.01 1186.34 L1935.43 1186.34 L1934.84 1186.34 L1934.25 1186.34 L1933.67 1186.34 L1933.08 1186.34 L1932.5 1186.34 L1931.91 1186.34 L1931.32 1186.34 L1930.74 1186.34 L1930.15 1186.34 L1929.56 1186.34 L1928.98 1186.34 L1928.39 1186.34 L1927.8 1186.34 L1927.22 1186.34 L1926.63 1186.34 L1926.04 1186.34 L1925.46 1186.34 L1924.87 1186.34 L1924.29 1186.34 L1923.7 1186.34 L1923.11 1186.34 L1922.53 1186.34 L1921.94 1186.34 L1921.35 1186.34 L1920.77 1186.34 L1920.18 1186.34 L1919.59 1186.34 L1919.01 1186.34 L1918.42 1186.34 L1917.83 1186.34 L1917.25 1186.34 L1916.66 1186.34 L1916.08 1186.34 L1915.49 1186.34 L1914.9 1186.34 L1914.32 1186.34 L1913.73 1186.34 L1913.14 1186.34 L1912.56 1186.34 L1911.97 1186.34 L1911.38 1186.34 L1910.8 1186.34 L1910.21 1186.34 L1909.63 1186.34 L1909.04 1186.34 L1908.45 1186.34 L1907.87 1186.34 L1907.28 1186.34 L1906.69 1186.34 L1906.11 1186.34 L1905.52 1186.34 L1904.93 1186.34 L1904.35 1186.34 L1903.76 1186.34 L1903.17 1186.34 L1902.59 1186.34 L1902 1186.34 L1901.42 1186.34 L1900.83 1186.34 L1900.24 1186.34 L1899.66 1186.34 L1899.07 1186.34 L1898.48 1186.34 L1897.9 1186.34 L1897.31 1186.34 L1896.72 1186.34 L1896.14 1186.34 L1895.55 1186.34 L1894.96 1186.34 L1894.38 1186.34 L1893.79 1186.34 L1893.21 1186.34 L1892.62 1186.34 L1892.03 1186.34 L1891.45 1186.34 L1890.86 1186.34 L1890.27 1186.34 L1889.69 1186.34 L1889.1 1186.34 L1888.51 1186.34 L1887.93 1186.34 L1887.34 1186.34 L1886.76 1186.34 L1886.17 1186.34 L1885.58 1186.34 L1885 1186.34 L1884.41 1186.34 L1883.82 1186.34 L1883.24 1186.34 L1882.65 1186.34 L1882.06 1186.34 L1881.48 1186.34 L1880.89 1186.34 L1880.3 1186.34 L1879.72 1186.34 L1879.13 1186.34 L1878.55 1186.34 L1877.96 1186.34 L1877.37 1186.34 L1876.79 1186.34 L1876.2 1186.34 L1875.61 1186.34 L1875.03 1186.34 L1874.44 1186.34 L1873.85 1186.34 L1873.27 1186.34 L1872.68 1186.34 L1872.09 1186.34 L1871.51 1186.34 L1870.92 1186.34 L1870.34 1186.34 L1869.75 1186.34 L1869.16 1186.34 L1868.58 1186.34 L1867.99 1186.34 L1867.4 1186.34 L1866.82 1186.34 L1866.23 1186.34 L1865.64 1186.34 L1865.06 1186.34 L1864.47 1186.34 L1863.88 1186.34 L1863.3 1186.34 L1862.71 1186.34 L1862.13 1186.34 L1861.54 1186.34 L1860.95 1186.34 L1860.37 1186.34 L1859.78 1186.34 L1859.19 1186.34 L1858.61 1186.34 L1858.02 1186.34 L1857.43 1186.34 L1856.85 1186.34 L1856.26 1186.34 L1855.68 1186.34 L1855.09 1186.34 L1854.5 1186.34 L1853.92 1186.34 L1853.33 1186.34 L1852.74 1186.34 L1852.16 1186.34 L1851.57 1186.34 L1850.98 1186.34 L1850.4 1186.34 L1849.81 1186.34 L1849.22 1186.34 L1848.64 1186.34 L1848.05 1186.34 L1847.47 1186.34 L1846.88 1186.34 L1846.29 1186.34 L1845.71 1186.34 L1845.12 1186.34 L1844.53 1186.34 L1843.95 1186.34 L1843.36 1186.34 L1842.77 1186.34 L1842.19 1186.34 L1841.6 1186.34 L1841.01 1186.34 L1840.43 1186.34 L1839.84 1186.34 L1839.26 1186.34 L1838.67 1186.34 L1838.08 1186.34 L1837.5 1186.34 L1836.91 1186.34 L1836.32 1186.34 L1835.74 1186.34 L1835.15 1186.34 L1834.56 1186.34 L1833.98 1186.34 L1833.39 1186.34 L1832.81 1186.34 L1832.22 1186.34 L1831.63 1186.34 L1831.05 1186.34 L1830.46 1186.34 L1829.87 1186.34 L1829.29 1186.34 L1828.7 1186.34 L1828.11 1186.34 L1827.53 1186.34 L1826.94 1186.34 L1826.35 1186.34 L1825.77 1186.34 L1825.18 1186.34 L1824.6 1186.34 L1824.01 1186.34 L1823.42 1186.34 L1822.84 1186.34 L1822.25 1186.34 L1821.66 1186.34 L1821.08 1186.34 L1820.49 1186.34 L1819.9 1186.34 L1819.32 1186.34 L1818.73 1186.34 L1818.14 1186.34 L1817.56 1186.34 L1816.97 1186.34 L1816.39 1186.34 L1815.8 1186.34 L1815.21 1186.34 L1814.63 1186.34 L1814.04 1186.34 L1813.45 1186.34 L1812.87 1186.34 L1812.28 1186.34 L1811.69 1186.34 L1811.11 1186.34 L1810.52 1186.34 L1809.94 1186.34 L1809.35 1186.34 L1808.76 1186.34 L1808.18 1186.34 L1807.59 1186.34 L1807 1186.34 L1806.42 1186.34 L1805.83 1186.34 L1805.24 1186.34 L1804.66 1186.34 L1804.07 1186.34 L1803.48 1186.34 L1802.9 1186.34 L1802.31 1186.34 L1801.73 1186.34 L1801.14 1186.34 L1800.55 1186.34 L1799.97 1186.34 L1799.38 1186.34 L1798.79 1186.34 L1798.21 1186.34 L1797.62 1186.34 L1797.03 1186.34 L1796.45 1186.34 L1795.86 1186.34 L1795.27 1186.34 L1794.69 1186.34 L1794.1 1186.34 L1793.52 1186.34 L1792.93 1186.34 L1792.34 1186.34 L1791.76 1186.34 L1791.17 1186.34 L1790.58 1186.34 L1790 1186.34 L1789.41 1186.34 L1788.82 1186.34 L1788.24 1186.34 L1787.65 1186.34 L1787.06 1186.34 L1786.48 1186.34 L1785.89 1186.34 L1785.31 1186.34 L1784.72 1186.34 L1784.13 1186.34 L1783.55 1186.34 L1782.96 1186.34 L1782.37 1186.34 L1781.79 1186.34 L1781.2 1186.34 L1780.61 1186.34 L1780.03 1186.34 L1779.44 1186.34 L1778.86 1186.34 L1778.27 1186.34 L1777.68 1186.34 L1777.1 1186.34 L1776.51 1186.34 L1775.92 1186.34 L1775.34 1186.34 L1774.75 1186.34 L1774.16 1186.34 L1773.58 1186.34 L1772.99 1186.34 L1772.4 1186.34 L1771.82 1186.34 L1771.23 1186.34 L1770.65 1186.34 L1770.06 1186.34 L1769.47 1186.34 L1768.89 1186.34 L1768.3 1186.34 L1767.71 1186.34 L1767.13 1186.34 L1766.54 1186.34 L1765.95 1186.34 L1765.37 1186.34 L1764.78 1186.34 L1764.19 1186.34 L1763.61 1186.34 L1763.02 1186.34 L1762.44 1186.34 L1761.85 1186.34 L1761.26 1186.34 L1760.68 1186.34 L1760.09 1186.34 L1759.5 1186.34 L1758.92 1186.34 L1758.33 1186.34 L1757.74 1186.34 L1757.16 1186.34 L1756.57 1186.34 L1755.99 1186.34 L1755.4 1186.34 L1754.81 1186.34 L1754.23 1186.34 L1753.64 1186.34 L1753.05 1186.34 L1752.47 1186.34 L1751.88 1186.34 L1751.29 1186.34 L1750.71 1186.34 L1750.12 1186.34 L1749.53 1186.34 L1748.95 1186.34 L1748.36 1186.34 L1747.78 1186.34 L1747.19 1186.34 L1746.6 1186.34 L1746.02 1186.34 L1745.43 1186.34 L1744.84 1186.34 L1744.26 1186.34 L1743.67 1186.34 L1743.08 1186.34 L1742.5 1186.34 L1741.91 1186.34 L1741.32 1186.34 L1740.74 1186.34 L1740.15 1186.34 L1739.57 1186.34 L1738.98 1186.34 L1738.39 1186.34 L1737.81 1186.34 L1737.22 1186.34 L1736.63 1186.34 L1736.05 1186.34 L1735.46 1186.34 L1734.87 1186.34 L1734.29 1186.34 L1733.7 1186.34 L1733.11 1186.34 L1732.53 1186.34 L1731.94 1186.34 L1731.36 1186.34 L1730.77 1186.34 L1730.18 1186.34 L1729.6 1186.34 L1729.01 1186.34 L1728.42 1186.34 L1727.84 1186.34 L1727.25 1186.34 L1726.66 1186.34 L1726.08 1186.34 L1725.49 1186.34 L1724.91 1186.34 L1724.32 1186.34 L1723.73 1186.34 L1723.15 1186.34 L1722.56 1186.34 L1721.97 1186.34 L1721.39 1186.34 L1720.8 1186.34 L1720.21 1186.34 L1719.63 1186.34 L1719.04 1186.34 L1718.45 1186.34 L1717.87 1186.34 L1717.28 1186.34 L1716.7 1186.34 L1716.11 1186.34 L1715.52 1186.34 L1714.94 1186.34 L1714.35 1186.34 L1713.76 1186.34 L1713.18 1186.34 L1712.59 1186.34 L1712 1186.34 L1711.42 1186.34 L1710.83 1186.34 L1710.24 1186.34 L1709.66 1186.34 L1709.07 1186.34 L1708.49 1186.34 L1707.9 1186.34 L1707.31 1186.34 L1706.73 1186.34 L1706.14 1186.34 L1705.55 1186.34 L1704.97 1186.34 L1704.38 1186.34 L1703.79 1186.34 L1703.21 1186.34 L1702.62 1186.34 L1702.04 1186.34 L1701.45 1186.34 L1700.86 1186.34 L1700.28 1186.34 L1699.69 1186.34 L1699.1 1186.34 L1698.52 1186.34 L1697.93 1186.34 L1697.34 1186.34 L1696.76 1186.34 L1696.17 1186.34 L1695.58 1186.34 L1695 1186.34 L1694.41 1186.34 L1693.83 1186.34 L1693.24 1186.34 L1692.65 1186.34 L1692.07 1186.34 L1691.48 1186.34 L1690.89 1186.34 L1690.31 1186.34 L1689.72 1186.34 L1689.13 1186.34 L1688.55 1186.34 L1687.96 1186.34 L1687.37 1186.34 L1686.79 1186.34 L1686.2 1186.34 L1685.62 1186.34 L1685.03 1186.34 L1684.44 1186.34 L1683.86 1186.34 L1683.27 1186.34 L1682.68 1186.34 L1682.1 1186.34 L1681.51 1186.34 L1680.92 1186.34 L1680.34 1186.34 L1679.75 1186.34 L1679.17 1186.34 L1678.58 1186.34 L1677.99 1186.34 L1677.41 1186.34 L1676.82 1186.34 L1676.23 1186.34 L1675.65 1186.34 L1675.06 1186.34 L1674.47 1186.34 L1673.89 1186.34 L1673.3 1186.34 L1672.71 1186.34 L1672.13 1186.34 L1671.54 1186.34 L1670.96 1186.34 L1670.37 1186.34 L1669.78 1186.34 L1669.2 1186.34 L1668.61 1186.34 L1668.02 1186.34 L1667.44 1186.34 L1666.85 1186.34 L1666.26 1186.34 L1665.68 1186.34 L1665.09 1186.34 L1664.5 1186.34 L1663.92 1186.34 L1663.33 1186.34 L1662.75 1186.34 L1662.16 1186.34 L1661.57 1186.34 L1660.99 1186.34 L1660.4 1186.34 L1659.81 1186.34 L1659.23 1186.34 L1658.64 1186.34 L1658.05 1186.34 L1657.47 1186.34 L1656.88 1186.34 L1656.29 1186.34 L1655.71 1186.34 L1655.12 1186.34 L1654.54 1186.34 L1653.95 1186.34 L1653.36 1186.34 L1652.78 1186.34 L1652.19 1186.34 L1651.6 1186.34 L1651.02 1186.34 L1650.43 1186.34 L1649.84 1186.34 L1649.26 1186.34 L1648.67 1186.34 L1648.09 1186.34 L1647.5 1186.34 L1646.91 1186.34 L1646.33 1186.34 L1645.74 1186.34 L1645.15 1186.34 L1644.57 1186.34 L1643.98 1186.34 L1643.39 1186.34 L1642.81 1186.34 L1642.22 1186.34 L1641.63 1186.34 L1641.05 1186.34 L1640.46 1186.34 L1639.88 1186.34 L1639.29 1186.34 L1638.7 1186.34 L1638.12 1186.34 L1637.53 1186.34 L1636.94 1186.34 L1636.36 1186.34 L1635.77 1186.34 L1635.18 1186.34 L1634.6 1186.34 L1634.01 1186.34 L1633.42 1186.34 L1632.84 1186.34 L1632.25 1186.34 L1631.67 1186.34 L1631.08 1186.34 L1630.49 1186.34 L1629.91 1186.34 L1629.32 1186.34 L1628.73 1186.34 L1628.15 1186.34 L1627.56 1186.34 L1626.97 1186.34 L1626.39 1186.34 L1625.8 1186.34 L1625.22 1186.34 L1624.63 1186.34 L1624.04 1186.34 L1623.46 1186.34 L1622.87 1186.34 L1622.28 1186.34 L1621.7 1186.34 L1621.11 1186.34 L1620.52 1186.34 L1619.94 1186.34 L1619.35 1186.34 L1618.76 1186.34 L1618.18 1186.34 L1617.59 1186.34 L1617.01 1186.34 L1616.42 1186.34 L1615.83 1186.34 L1615.25 1186.34 L1614.66 1186.34 L1614.07 1186.34 L1613.49 1186.34 L1612.9 1186.34 L1612.31 1186.34 L1611.73 1186.34 L1611.14 1186.34 L1610.55 1186.34 L1609.97 1186.34 L1609.38 1186.34 L1608.8 1186.34 L1608.21 1186.34 L1607.62 1186.34 L1607.04 1186.34 L1606.45 1186.34 L1605.86 1186.34 L1605.28 1186.34 L1604.69 1186.34 L1604.1 1186.34 L1603.52 1186.34 L1602.93 1186.34 L1602.34 1186.34 L1601.76 1186.34 L1601.17 1186.34 L1600.59 1186.34 L1600 1186.34 L1599.41 1186.34 L1598.83 1186.34 L1598.24 1186.34 L1597.65 1186.34 L1597.07 1186.34 L1596.48 1186.34 L1595.89 1186.34 L1595.31 1186.34 L1594.72 1186.34 L1594.14 1186.34 L1593.55 1186.34 L1592.96 1186.34 L1592.38 1186.34 L1591.79 1186.34 L1591.2 1186.34 L1590.62 1186.34 L1590.03 1186.34 L1589.44 1186.34 L1588.86 1186.34 L1588.27 1186.34 L1587.68 1186.34 L1587.1 1186.34 L1586.51 1186.34 L1585.93 1186.34 L1585.34 1186.34 L1584.75 1186.34 L1584.17 1186.34 L1583.58 1186.34 L1582.99 1186.34 L1582.41 1186.34 L1581.82 1186.34 L1581.23 1186.34 L1580.65 1186.34 L1580.06 1186.34 L1579.47 1186.34 L1578.89 1186.34 L1578.3 1186.34 L1577.72 1186.34 L1577.13 1186.34 L1576.54 1186.34 L1575.96 1186.34 L1575.37 1186.34 L1574.78 1186.34 L1574.2 1186.34 L1573.61 1186.34 L1573.02 1186.34 L1572.44 1186.34 L1571.85 1186.34 L1571.27 1186.34 L1570.68 1186.34 L1570.09 1186.34 L1569.51 1186.34 L1568.92 1186.34 L1568.33 1186.34 L1567.75 1186.34 L1567.16 1186.34 L1566.57 1186.34 L1565.99 1186.34 L1565.4 1186.34 L1564.81 1186.34 L1564.23 1186.34 L1563.64 1186.34 L1563.06 1186.34 L1562.47 1186.34 L1561.88 1186.34 L1561.3 1186.34 L1560.71 1186.34 L1560.12 1186.34 L1559.54 1186.34 L1558.95 1186.34 L1558.36 1186.34 L1557.78 1186.34 L1557.19 1186.34 L1556.6 1186.34 L1556.02 1186.34 L1555.43 1186.34 L1554.85 1186.34 L1554.26 1186.34 L1553.67 1186.34 L1553.09 1186.34 L1552.5 1186.34 L1551.91 1186.34 L1551.33 1186.34 L1550.74 1186.34 L1550.15 1186.34 L1549.57 1186.34 L1548.98 1186.34 L1548.4 1186.34 L1547.81 1186.34 L1547.22 1186.34 L1546.64 1186.34 L1546.05 1186.34 L1545.46 1186.34 L1544.88 1186.34 L1544.29 1186.34 L1543.7 1186.34 L1543.12 1186.34 L1542.53 1186.34 L1541.94 1186.34 L1541.36 1186.34 L1540.77 1186.34 L1540.19 1186.34 L1539.6 1186.34 L1539.01 1186.34 L1538.43 1186.34 L1537.84 1186.34 L1537.25 1186.34 L1536.67 1186.34 L1536.08 1186.34 L1535.49 1186.34 L1534.91 1186.34 L1534.32 1186.34 L1533.73 1186.34 L1533.15 1186.34 L1532.56 1186.34 L1531.98 1186.34 L1531.39 1186.34 L1530.8 1186.34 L1530.22 1186.34 L1529.63 1186.34 L1529.04 1186.34 L1528.46 1186.34 L1527.87 1186.34 L1527.28 1186.34 L1526.7 1186.34 L1526.11 1186.34 L1525.52 1186.34 L1524.94 1186.34 L1524.35 1186.34 L1523.77 1186.34 L1523.18 1186.34 L1522.59 1186.34 L1522.01 1186.34 L1521.42 1186.34 L1520.83 1186.34 L1520.25 1186.34 L1519.66 1186.34 L1519.07 1186.34 L1518.49 1186.34 L1517.9 1186.34 L1517.32 1186.34 L1516.73 1186.34 L1516.14 1186.34 L1515.56 1186.34 L1514.97 1186.34 L1514.38 1186.34 L1513.8 1186.34 L1513.21 1186.34 L1512.62 1186.34 L1512.04 1186.34 L1511.45 1186.34 L1510.86 1186.34 L1510.28 1186.34 L1509.69 1186.34 L1509.11 1186.34 L1508.52 1186.34 L1507.93 1186.34 L1507.35 1186.34 L1506.76 1186.34 L1506.17 1186.34 L1505.59 1186.34 L1505 1186.34 L1504.41 1186.34 L1503.83 1186.34 L1503.24 1186.34 L1502.65 1186.34 L1502.07 1186.34 L1501.48 1186.34 L1500.9 1186.34 L1500.31 1186.34 L1499.72 1186.34 L1499.14 1186.34 L1498.55 1186.34 L1497.96 1186.34 L1497.38 1186.34 L1496.79 1186.34 L1496.2 1186.34 L1495.62 1186.34 L1495.03 1186.34 L1494.45 1186.34 L1493.86 1186.34 L1493.27 1186.34 L1492.69 1186.34 L1492.1 1186.34 L1491.51 1186.34 L1490.93 1186.34 L1490.34 1186.34 L1489.75 1186.34 L1489.17 1186.34 L1488.58 1186.34 L1487.99 1186.34 L1487.41 1186.34 L1486.82 1186.34 L1486.24 1186.34 L1485.65 1186.34 L1485.06 1186.34 L1484.48 1186.34 L1483.89 1186.34 L1483.3 1186.34 L1482.72 1186.34 L1482.13 1186.34 L1481.54 1186.34 L1480.96 1186.34 L1480.37 1186.34 L1479.78 1186.34 L1479.2 1186.34 L1478.61 1186.34 L1478.03 1186.34 L1477.44 1186.34 L1476.85 1186.34 L1476.27 1186.34 L1475.68 1186.34 L1475.09 1186.34 L1474.51 1186.34 L1473.92 1186.34 L1473.33 1186.34 L1472.75 1186.34 L1472.16 1186.34 L1471.57 1186.34 L1470.99 1186.34 L1470.4 1186.34 L1469.82 1186.34 L1469.23 1186.34 L1468.64 1186.34 L1468.06 1186.34 L1467.47 1186.34 L1466.88 1186.34 L1466.3 1186.34 L1465.71 1186.34 L1465.12 1186.34 L1464.54 1186.34 L1463.95 1186.34 L1463.37 1186.34 L1462.78 1186.34 L1462.19 1186.34 L1461.61 1186.34 L1461.02 1186.34 L1460.43 1186.34 L1459.85 1186.34 L1459.26 1186.34 L1458.67 1186.34 L1458.09 1186.34 L1457.5 1186.34 L1456.91 1186.34 L1456.33 1186.34 L1455.74 1186.34 L1455.16 1186.34 L1454.57 1186.34 L1453.98 1186.34 L1453.4 1186.34 L1452.81 1186.34 L1452.22 1186.34 L1451.64 1186.34 L1451.05 1186.34 L1450.46 1186.34 L1449.88 1186.34 L1449.29 1186.34 L1448.7 1186.34 L1448.12 1186.34 L1447.53 1186.34 L1446.95 1186.34 L1446.36 1186.34 L1445.77 1186.34 L1445.19 1186.34 L1444.6 1186.34 L1444.01 1186.34 L1443.43 1186.34 L1442.84 1186.34 L1442.25 1186.34 L1441.67 1186.34 L1441.08 1186.34 L1440.5 1186.34 L1439.91 1186.34 L1439.32 1186.34 L1438.74 1186.34 L1438.15 1186.34 L1437.56 1186.34 L1436.98 1186.34 L1436.39 1186.34 L1435.8 1186.34 L1435.22 1186.34 L1434.63 1186.34 L1434.04 1186.34 L1433.46 1186.34 L1432.87 1186.34 L1432.29 1186.34 L1431.7 1186.34 L1431.11 1186.34 L1430.53 1186.34 L1429.94 1186.34 L1429.35 1186.34 L1428.77 1186.34 L1428.18 1186.34 L1427.59 1186.34 L1427.01 1186.34 L1426.42 1186.34 L1425.83 1186.34 L1425.25 1186.34 L1424.66 1186.34 L1424.08 1186.34 L1423.49 1186.34 L1422.9 1186.34 L1422.32 1186.34 L1421.73 1186.34 L1421.14 1186.34 L1420.56 1186.34 L1419.97 1186.34 L1419.38 1186.34 L1418.8 1186.34 L1418.21 1186.34 L1417.63 1186.34 L1417.04 1186.34 L1416.45 1186.34 L1415.87 1186.34 L1415.28 1186.34 L1414.69 1186.34 L1414.11 1186.34 L1413.52 1186.34 L1412.93 1186.34 L1412.35 1186.34 L1411.76 1186.34 L1411.17 1186.34 L1410.59 1186.34 L1410 1186.34 L1409.42 1186.34 L1408.83 1186.34 L1408.24 1186.34 L1407.66 1186.34 L1407.07 1186.34 L1406.48 1186.34 L1405.9 1186.34 L1405.31 1186.34 L1404.72 1186.34 L1404.14 1186.34 L1403.55 1186.34 L1402.96 1186.34 L1402.38 1186.34 L1401.79 1186.34 L1401.21 1186.34 L1400.62 1186.34 L1400.03 1186.34 L1399.45 1186.34 L1398.86 1186.34 L1398.27 1186.34 L1397.69 1186.34 L1397.1 1186.34 L1396.51 1186.34 L1395.93 1186.34 L1395.34 1186.34 L1394.75 1186.34 L1394.17 1186.34 L1393.58 1186.34 L1393 1186.34 L1392.41 1186.34 L1391.82 1186.34 L1391.24 1186.34 L1390.65 1186.34 L1390.06 1186.34 L1389.48 1186.34 L1388.89 1186.34 L1388.3 1186.34 L1387.72 1186.34 L1387.13 1186.34 L1386.55 1186.34 L1385.96 1186.34 L1385.37 1186.34 L1384.79 1186.34 L1384.2 1186.34 L1383.61 1186.34 L1383.03 1186.34 L1382.44 1186.34 L1381.85 1186.34 L1381.27 1186.34 L1380.68 1186.34 L1380.09 1186.34 L1379.51 1186.34 L1378.92 1186.34 L1378.34 1186.34 L1377.75 1186.34 L1377.16 1186.34 L1376.58 1186.34 L1375.99 1186.34 L1375.4 1186.34 L1374.82 1186.34 L1374.23 1186.34 L1373.64 1186.34 L1373.06 1186.34 L1372.47 1186.34 L1371.88 1186.34 L1371.3 1186.34 L1370.71 1186.34 L1370.13 1186.34 L1369.54 1186.34 L1368.95 1186.34 L1368.37 1186.34 L1367.78 1186.34 L1367.19 1186.34 L1366.61 1186.34 L1366.02 1186.34 L1365.43 1186.34 L1364.85 1186.34 L1364.26 1186.34 L1363.68 1186.34 L1363.09 1186.34 L1362.5 1186.34 L1361.92 1186.34 L1361.33 1186.34 L1360.74 1186.34 L1360.16 1186.34 L1359.57 1186.34 L1358.98 1186.34 L1358.4 1186.34 L1357.81 1186.34 L1357.22 1186.34 L1356.64 1186.34 L1356.05 1186.34 L1355.47 1186.34 L1354.88 1186.34 L1354.29 1186.34 L1353.71 1186.34 L1353.12 1186.34 L1352.53 1186.34 L1351.95 1186.34 L1351.36 1186.34 L1350.77 1186.34 L1350.19 1186.34 L1349.6 1186.34 L1349.01 1186.34 L1348.43 1186.34 L1347.84 1186.34 L1347.26 1186.34 L1346.67 1186.34 L1346.08 1186.34 L1345.5 1186.34 L1344.91 1186.34 L1344.32 1186.34 L1343.74 1186.34 L1343.15 1186.34 L1342.56 1186.34 L1341.98 1186.34 L1341.39 1186.34 L1340.8 1186.34 L1340.22 1186.34 L1339.63 1186.34 L1339.05 1186.34 L1338.46 1186.34 L1337.87 1186.34 L1337.29 1186.34 L1336.7 1186.34 L1336.11 1186.34 L1335.53 1186.34 L1334.94 1186.34 L1334.35 1186.34 L1333.77 1186.34 L1333.18 1186.34 L1332.6 1186.34 L1332.01 1186.34 L1331.42 1186.34 L1330.84 1186.34 L1330.25 1186.34 L1329.66 1186.34 L1329.08 1186.34 L1328.49 1186.34 L1327.9 1186.34 L1327.32 1186.34 L1326.73 1186.34 L1326.14 1186.34 L1325.56 1186.34 L1324.97 1186.34 L1324.39 1186.34 L1323.8 1186.34 L1323.21 1186.34 L1322.63 1186.34 L1322.04 1186.34 L1321.45 1186.34 L1320.87 1186.34 L1320.28 1186.34 L1319.69 1186.34 L1319.11 1186.34 L1318.52 1186.34 L1317.93 1186.34 L1317.35 1186.34 L1316.76 1186.34 L1316.18 1186.34 L1315.59 1186.34 L1315 1186.34 L1314.42 1186.34 L1313.83 1186.34 L1313.24 1186.34 L1312.66 1186.34 L1312.07 1186.34 L1311.48 1186.34 L1310.9 1186.34 L1310.31 1186.34 L1309.73 1186.34 L1309.14 1186.34 L1308.55 1186.34 L1307.97 1186.34 L1307.38 1186.34 L1306.79 1186.34 L1306.21 1186.34 L1305.62 1186.34 L1305.03 1186.34 L1304.45 1186.34 L1303.86 1186.34 L1303.27 1186.34 L1302.69 1186.34 L1302.1 1186.34 L1301.52 1186.34 L1300.93 1186.34 L1300.34 1186.34 L1299.76 1186.34 L1299.17 1186.34 L1298.58 1186.34 L1298 1186.34 L1297.41 1186.34 L1296.82 1186.34 L1296.24 1186.34 L1295.65 1186.34 L1295.06 1186.34 L1294.48 1186.34 L1293.89 1186.34 L1293.31 1186.34 L1292.72 1186.34 L1292.13 1186.34 L1291.55 1186.34 L1290.96 1186.34 L1290.37 1186.34 L1289.79 1186.34 L1289.2 1186.34 L1288.61 1186.34 L1288.03 1186.34 L1287.44 1186.34 L1286.86 1186.34 L1286.27 1186.34 L1285.68 1186.34 L1285.1 1186.34 L1284.51 1186.34 L1283.92 1186.34 L1283.34 1186.34 L1282.75 1186.34 L1282.16 1186.34 L1281.58 1186.34 L1280.99 1186.34 L1280.4 1186.34 L1279.82 1186.34 L1279.23 1186.34 L1278.65 1186.34 L1278.06 1186.34 L1277.47 1186.34 L1276.89 1186.34 L1276.3 1186.34 L1275.71 1186.34 L1275.13 1186.34 L1274.54 1186.34 L1273.95 1186.34 L1273.37 1186.34 L1272.78 1186.34 L1272.19 1186.34 L1271.61 1186.34 L1271.02 1186.34 L1270.44 1186.34 L1269.85 1186.34 L1269.26 1186.34 L1268.68 1186.34 L1268.09 1186.34 L1267.5 1186.34 L1266.92 1186.34 L1266.33 1186.34 L1265.74 1186.34 L1265.16 1186.34 L1264.57 1186.34 L1263.98 1186.34 L1263.4 1186.34 L1262.81 1186.34 L1262.23 1186.34 L1261.64 1186.34 L1261.05 1186.34 L1260.47 1186.34 L1259.88 1186.34 L1259.29 1186.34 L1258.71 1186.34 L1258.12 1186.34 L1257.53 1186.34 L1256.95 1186.34 L1256.36 1186.34 L1255.78 1186.34 L1255.19 1186.34 L1254.6 1186.34 L1254.02 1186.34 L1253.43 1186.34 L1252.84 1186.34 L1252.26 1186.34 L1251.67 1186.34 L1251.08 1186.34 L1250.5 1186.34 L1249.91 1186.34 L1249.32 1186.34 L1248.74 1186.34 L1248.15 1186.34 L1247.57 1186.34 L1246.98 1186.34 L1246.39 1186.34 L1245.81 1186.34 L1245.22 1186.34 L1244.63 1186.34 L1244.05 1186.34 L1243.46 1186.34 L1242.87 1186.34 L1242.29 1186.34 L1241.7 1186.34 L1241.11 1186.34 L1240.53 1186.34 L1239.94 1186.34 L1239.36 1186.34 L1238.77 1186.34 L1238.18 1186.34 L1237.6 1186.34 L1237.01 1186.34 L1236.42 1186.34 L1235.84 1186.34 L1235.25 1186.34 L1234.66 1186.34 L1234.08 1186.34 L1233.49 1186.34 L1232.91 1186.34 L1232.32 1186.34 L1231.73 1186.34 L1231.15 1186.34 L1230.56 1186.34 L1229.97 1186.34 L1229.39 1186.34 L1228.8 1186.34 L1228.21 1186.34 L1227.63 1186.34 L1227.04 1186.34 L1226.45 1186.34 L1225.87 1186.34 L1225.28 1186.34 L1224.7 1186.34 L1224.11 1186.34 L1223.52 1186.34 L1222.94 1186.34 L1222.35 1186.34 L1221.76 1186.34 L1221.18 1186.34 L1220.59 1186.34 L1220 1186.34 L1219.42 1186.34 L1218.83 1186.34 L1218.24 1186.34 L1217.66 1186.34 L1217.07 1186.34 L1216.49 1186.34 L1215.9 1186.34 L1215.31 1186.34 L1214.73 1186.34 L1214.14 1186.34 L1213.55 1186.34 L1212.97 1186.34 L1212.38 1186.34 L1211.79 1186.34 L1211.21 1186.34 L1210.62 1186.34 L1210.03 1186.34 L1209.45 1186.34 L1208.86 1186.34 L1208.28 1186.34 L1207.69 1186.34 L1207.1 1186.34 L1206.52 1186.34 L1205.93 1186.34 L1205.34 1186.34 L1204.76 1186.34 L1204.17 1186.34 L1203.58 1186.34 L1203 1186.34 L1202.41 1186.34 L1201.83 1186.34 L1201.24 1186.34 L1200.65 1186.34 L1200.07 1186.34 L1199.48 1186.34 L1198.89 1186.34 L1198.31 1186.34 L1197.72 1186.34 L1197.13 1186.34 L1196.55 1186.34 L1195.96 1186.34 L1195.37 1186.34 L1194.79 1186.34 L1194.2 1186.34 L1193.62 1186.34 L1193.03 1186.34 L1192.44 1186.34 L1191.86 1186.34 L1191.27 1186.34 L1190.68 1186.34 L1190.1 1186.34 L1189.51 1186.34 L1188.92 1186.34 L1188.34 1186.34 L1187.75 1186.34 L1187.16 1186.34 L1186.58 1186.34 L1185.99 1186.34 L1185.41 1186.34 L1184.82 1186.34 L1184.23 1186.34 L1183.65 1186.34 L1183.06 1186.34 L1182.47 1186.34 L1181.89 1186.34 L1181.3 1186.34 L1180.71 1186.34 L1180.13 1186.34 L1179.54 1186.34 L1178.96 1186.34 L1178.37 1186.34 L1177.78 1186.34 L1177.2 1186.34 L1176.61 1186.34 L1176.02 1186.34 L1175.44 1186.34 L1174.85 1186.34 L1174.26 1186.34 L1173.68 1186.34 L1173.09 1186.34 L1172.5 1186.34 L1171.92 1186.34 L1171.33 1186.34 L1170.75 1186.34 L1170.16 1186.34 L1169.57 1186.34 L1168.99 1186.34 L1168.4 1186.34 L1167.81 1186.34 L1167.23 1186.34 L1166.64 1186.34 L1166.05 1186.34 L1165.47 1186.34 L1164.88 1186.34 L1164.29 1186.34 L1163.71 1186.34 L1163.12 1186.34 L1162.54 1186.34 L1161.95 1186.34 L1161.36 1186.34 L1160.78 1186.34 L1160.19 1186.34 L1159.6 1186.34 L1159.02 1186.34 L1158.43 1186.34 L1157.84 1186.34 L1157.26 1186.34 L1156.67 1186.34 L1156.09 1186.34 L1155.5 1186.34 L1154.91 1186.34 L1154.33 1186.34 L1153.74 1186.34 L1153.15 1186.34 L1152.57 1186.34 L1151.98 1186.34 L1151.39 1186.34 L1150.81 1186.34 L1150.22 1186.34 L1149.63 1186.34 L1149.05 1186.34 L1148.46 1186.34 L1147.88 1186.34 L1147.29 1186.34 L1146.7 1186.34 L1146.12 1186.34 L1145.53 1186.34 L1144.94 1186.34 L1144.36 1186.34 L1143.77 1186.34 L1143.18 1186.34 L1142.6 1186.34 L1142.01 1186.34 L1141.42 1186.34 L1140.84 1186.34 L1140.25 1186.34 L1139.67 1186.34 L1139.08 1186.34 L1138.49 1186.34 L1137.91 1186.34 L1137.32 1186.34 L1136.73 1186.34 L1136.15 1186.34 L1135.56 1186.34 L1134.97 1186.34 L1134.39 1186.34 L1133.8 1186.34 L1133.21 1186.34 L1132.63 1186.34 L1132.04 1186.34 L1131.46 1186.34 L1130.87 1186.34 L1130.28 1186.34 L1129.7 1186.34 L1129.11 1186.34 L1128.52 1186.34 L1127.94 1186.34 L1127.35 1186.34 L1126.76 1186.34 L1126.18 1186.34 L1125.59 1186.34 L1125.01 1186.34 L1124.42 1186.34 L1123.83 1186.34 L1123.25 1186.34 L1122.66 1186.34 L1122.07 1186.34 L1121.49 1186.34 L1120.9 1186.34 L1120.31 1186.34 L1119.73 1186.34 L1119.14 1186.34 L1118.55 1186.34 L1117.97 1186.34 L1117.38 1186.34 L1116.8 1186.34 L1116.21 1186.34 L1115.62 1186.34 L1115.04 1186.34 L1114.45 1186.34 L1113.86 1186.34 L1113.28 1186.34 L1112.69 1186.34 L1112.1 1186.34 L1111.52 1186.34 L1110.93 1186.34 L1110.34 1186.34 L1109.76 1186.34 L1109.17 1186.34 L1108.59 1186.34 L1108 1186.34 L1107.41 1186.34 L1106.83 1186.34 L1106.24 1186.34 L1105.65 1186.34 L1105.07 1186.34 L1104.48 1186.34 L1103.89 1186.34 L1103.31 1186.34 L1102.72 1186.34 L1102.14 1186.34 L1101.55 1186.34 L1100.96 1186.34 L1100.38 1186.34 L1099.79 1186.34 L1099.2 1186.34 L1098.62 1186.34 L1098.03 1186.34 L1097.44 1186.34 L1096.86 1186.34 L1096.27 1186.34 L1095.68 1186.34 L1095.1 1186.34 L1094.51 1186.34 L1093.93 1186.34 L1093.34 1186.34 L1092.75 1186.34 L1092.17 1186.34 L1091.58 1186.34 L1090.99 1186.34 L1090.41 1186.34 L1089.82 1186.34 L1089.23 1186.34 L1088.65 1186.34 L1088.06 1186.34 L1087.47 1186.34 L1086.89 1186.34 L1086.3 1186.34 L1085.72 1186.34 L1085.13 1186.34 L1084.54 1186.34 L1083.96 1186.34 L1083.37 1186.34 L1082.78 1186.34 L1082.2 1186.34 L1081.61 1186.34 L1081.02 1186.34 L1080.44 1186.34 L1079.85 1186.34 L1079.26 1186.34 L1078.68 1186.34 L1078.09 1186.34 L1077.51 1186.34 L1076.92 1186.34 L1076.33 1186.34 L1075.75 1186.34 L1075.16 1186.34 L1074.57 1186.34 L1073.99 1186.34 L1073.4 1186.34 L1072.81 1186.34 L1072.23 1186.34 L1071.64 1186.34 L1071.06 1186.34 L1070.47 1186.34 L1069.88 1186.34 L1069.3 1186.34 L1068.71 1186.34 L1068.12 1186.34 L1067.54 1186.34 L1066.95 1186.34 L1066.36 1186.34 L1065.78 1186.34 L1065.19 1186.34 L1064.6 1186.34 L1064.02 1186.34 L1063.43 1186.34 L1062.85 1186.34 L1062.26 1186.34 L1061.67 1186.34 L1061.09 1186.34 L1060.5 1186.34 L1059.91 1186.34 L1059.33 1186.34 L1058.74 1186.34 L1058.15 1186.34 L1057.57 1186.34 L1056.98 1186.34 L1056.39 1186.34 L1055.81 1186.34 L1055.22 1186.34 L1054.64 1186.34 L1054.05 1186.34 L1053.46 1186.34 L1052.88 1186.34 L1052.29 1186.34 L1051.7 1186.34 L1051.12 1186.34 L1050.53 1186.34 L1049.94 1186.34 L1049.36 1186.34 L1048.77 1186.34 L1048.19 1186.34 L1047.6 1186.34 L1047.01 1186.34 L1046.43 1186.34 L1045.84 1186.34 L1045.25 1186.34 L1044.67 1186.34 L1044.08 1186.34 L1043.49 1186.34 L1042.91 1186.34 L1042.32 1186.34 L1041.73 1186.34 L1041.15 1186.34 L1040.56 1186.34 L1039.98 1186.34 L1039.39 1186.34 L1038.8 1186.34 L1038.22 1186.34 L1037.63 1186.34 L1037.04 1186.34 L1036.46 1186.34 L1035.87 1186.34 L1035.28 1186.34 L1034.7 1186.34 L1034.11 1186.34 L1033.52 1186.34 L1032.94 1186.34 L1032.35 1186.34 L1031.77 1186.34 L1031.18 1186.34 L1030.59 1186.34 L1030.01 1186.34 L1029.42 1186.34 L1028.83 1186.34 L1028.25 1186.34 L1027.66 1186.34 L1027.07 1186.34 L1026.49 1186.34 L1025.9 1186.34 L1025.32 1186.34 L1024.73 1186.34 L1024.14 1186.34 L1023.56 1186.34 L1022.97 1186.34 L1022.38 1186.34 L1021.8 1186.34 L1021.21 1186.34 L1020.62 1186.34 L1020.04 1186.34 L1019.45 1186.34 L1018.86 1186.34 L1018.28 1186.34 L1017.69 1186.34 L1017.11 1186.34 L1016.52 1186.34 L1015.93 1186.34 L1015.35 1186.34 L1014.76 1186.34 L1014.17 1186.34 L1013.59 1186.34 L1013 1186.34 L1012.41 1186.34 L1011.83 1186.34 L1011.24 1186.34 L1010.65 1186.34 L1010.07 1186.34 L1009.48 1186.34 L1008.9 1186.34 L1008.31 1186.34 L1007.72 1186.34 L1007.14 1186.34 L1006.55 1186.34 L1005.96 1186.34 L1005.38 1186.34 L1004.79 1186.34 L1004.2 1186.34 L1003.62 1186.34 L1003.03 1186.34 L1002.44 1186.34 L1001.86 1186.34 L1001.27 1186.34 L1000.69 1186.34 L1000.1 1186.34 L999.513 1186.34 L998.926 1186.34 L998.34 1186.34 L997.754 1186.34 L997.167 1186.34 L996.581 1186.34 L995.994 1186.34 L995.408 1186.34 L994.822 1186.34 L994.235 1186.34 L993.649 1186.34 L993.062 1186.34 L992.476 1186.34 L991.889 1186.34 L991.303 1186.34 L990.717 1186.34 L990.13 1186.34 L989.544 1186.34 L988.957 1186.34 L988.371 1186.34 L987.785 1186.34 L987.198 1186.34 L986.612 1186.34 L986.025 1186.34  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1186.44 986.612,1186.44 987.198,1186.44 987.785,1186.44 988.371,1186.44 988.957,1186.44 989.544,1186.44 990.13,1186.44 990.717,1186.44 991.303,1186.44 991.889,1186.44 992.476,1186.44 993.062,1186.44 993.649,1186.44 994.235,1186.44 994.822,1186.44 995.408,1186.44 995.994,1186.44 996.581,1186.44 997.167,1186.44 997.754,1186.44 998.34,1186.44 998.926,1186.44 999.513,1186.44 1000.1,1186.44 1000.69,1186.44 1001.27,1186.44 1001.86,1186.44 1002.44,1186.44 1003.03,1186.44 1003.62,1186.44 1004.2,1186.44 1004.79,1186.44 1005.38,1186.44 1005.96,1186.44 1006.55,1186.44 1007.14,1186.44 1007.72,1186.44 1008.31,1186.44 1008.9,1186.44 1009.48,1186.44 1010.07,1186.44 1010.65,1186.44 1011.24,1186.44 1011.83,1186.44 1012.41,1186.44 1013,1186.44 1013.59,1186.44 1014.17,1186.44 1014.76,1186.44 1015.35,1186.44 1015.93,1186.44 1016.52,1186.44 1017.11,1186.44 1017.69,1186.44 1018.28,1186.44 1018.86,1186.44 1019.45,1186.44 1020.04,1186.44 1020.62,1186.44 1021.21,1186.44 1021.8,1186.44 1022.38,1186.44 1022.97,1186.44 1023.56,1186.44 1024.14,1186.44 1024.73,1186.44 1025.32,1186.44 1025.9,1186.44 1026.49,1186.44 1027.07,1186.44 1027.66,1186.44 1028.25,1186.44 1028.83,1186.44 1029.42,1186.44 1030.01,1186.44 1030.59,1186.44 1031.18,1186.44 1031.77,1186.44 1032.35,1186.44 1032.94,1186.44 1033.52,1186.44 1034.11,1186.44 1034.7,1186.44 1035.28,1186.44 1035.87,1186.44 1036.46,1186.44 1037.04,1186.44 1037.63,1186.44 1038.22,1186.44 1038.8,1186.44 1039.39,1186.44 1039.98,1186.44 1040.56,1186.44 1041.15,1186.44 1041.73,1186.44 1042.32,1186.44 1042.91,1186.44 1043.49,1186.44 1044.08,1186.44 1044.67,1186.44 1045.25,1186.44 1045.84,1186.44 1046.43,1186.44 1047.01,1186.44 1047.6,1186.44 1048.19,1186.44 1048.77,1186.44 1049.36,1186.44 1049.94,1186.44 1050.53,1186.44 1051.12,1186.44 1051.7,1186.44 1052.29,1186.44 1052.88,1186.44 1053.46,1186.44 1054.05,1186.44 1054.64,1186.44 1055.22,1186.44 1055.81,1186.44 1056.39,1186.44 1056.98,1186.44 1057.57,1186.44 1058.15,1186.44 1058.74,1186.44 1059.33,1186.44 1059.91,1186.44 1060.5,1186.44 1061.09,1186.44 1061.67,1186.44 1062.26,1186.44 1062.85,1186.44 1063.43,1186.44 1064.02,1186.44 1064.6,1186.44 1065.19,1186.44 1065.78,1186.44 1066.36,1186.44 1066.95,1186.44 1067.54,1186.44 1068.12,1186.44 1068.71,1186.44 1069.3,1186.44 1069.88,1186.44 1070.47,1186.44 1071.06,1186.44 1071.64,1186.44 1072.23,1186.44 1072.81,1186.44 1073.4,1186.44 1073.99,1186.44 1074.57,1186.44 1075.16,1186.44 1075.75,1186.44 1076.33,1186.44 1076.92,1186.44 1077.51,1186.44 1078.09,1186.44 1078.68,1186.44 1079.26,1186.44 1079.85,1186.44 1080.44,1186.44 1081.02,1186.44 1081.61,1186.44 1082.2,1186.44 1082.78,1186.44 1083.37,1186.44 1083.96,1186.44 1084.54,1186.44 1085.13,1186.44 1085.72,1186.44 1086.3,1186.44 1086.89,1186.44 1087.47,1186.44 1088.06,1186.44 1088.65,1186.44 1089.23,1186.44 1089.82,1186.44 1090.41,1186.44 1090.99,1186.44 1091.58,1186.44 1092.17,1186.44 1092.75,1186.44 1093.34,1186.44 1093.93,1186.44 1094.51,1186.44 1095.1,1186.44 1095.68,1186.44 1096.27,1186.44 1096.86,1186.44 1097.44,1186.44 1098.03,1186.44 1098.62,1186.44 1099.2,1186.44 1099.79,1186.44 1100.38,1186.44 1100.96,1186.44 1101.55,1186.44 1102.14,1186.44 1102.72,1186.44 1103.31,1186.44 1103.89,1186.44 1104.48,1186.44 1105.07,1186.44 1105.65,1186.44 1106.24,1186.44 1106.83,1186.44 1107.41,1186.44 1108,1186.44 1108.59,1186.44 1109.17,1186.44 1109.76,1186.44 1110.34,1186.44 1110.93,1186.44 1111.52,1186.44 1112.1,1186.44 1112.69,1186.44 1113.28,1186.44 1113.86,1186.44 1114.45,1186.44 1115.04,1186.44 1115.62,1186.44 1116.21,1186.44 1116.8,1186.44 1117.38,1186.44 1117.97,1186.44 1118.55,1186.44 1119.14,1186.44 1119.73,1186.44 1120.31,1186.44 1120.9,1186.44 1121.49,1186.44 1122.07,1186.44 1122.66,1186.44 1123.25,1186.44 1123.83,1186.44 1124.42,1186.44 1125.01,1186.44 1125.59,1186.44 1126.18,1186.44 1126.76,1186.44 1127.35,1186.44 1127.94,1186.44 1128.52,1186.44 1129.11,1186.44 1129.7,1186.44 1130.28,1186.44 1130.87,1186.44 1131.46,1186.44 1132.04,1186.44 1132.63,1186.44 1133.21,1186.44 1133.8,1186.44 1134.39,1186.44 1134.97,1186.44 1135.56,1186.44 1136.15,1186.44 1136.73,1186.44 1137.32,1186.44 1137.91,1186.44 1138.49,1186.44 1139.08,1186.44 1139.67,1186.44 1140.25,1186.44 1140.84,1186.44 1141.42,1186.44 1142.01,1186.44 1142.6,1186.44 1143.18,1186.44 1143.77,1186.44 1144.36,1186.44 1144.94,1186.44 1145.53,1186.44 1146.12,1186.44 1146.7,1186.44 1147.29,1186.44 1147.88,1186.44 1148.46,1186.44 1149.05,1186.44 1149.63,1186.44 1150.22,1186.44 1150.81,1186.44 1151.39,1186.44 1151.98,1186.44 1152.57,1186.44 1153.15,1186.44 1153.74,1186.44 1154.33,1186.44 1154.91,1186.44 1155.5,1186.44 1156.09,1186.44 1156.67,1186.44 1157.26,1186.44 1157.84,1186.44 1158.43,1186.44 1159.02,1186.44 1159.6,1186.44 1160.19,1186.44 1160.78,1186.44 1161.36,1186.44 1161.95,1186.44 1162.54,1186.44 1163.12,1186.44 1163.71,1186.44 1164.29,1186.44 1164.88,1186.44 1165.47,1186.44 1166.05,1186.44 1166.64,1186.44 1167.23,1186.44 1167.81,1186.44 1168.4,1186.44 1168.99,1186.44 1169.57,1186.44 1170.16,1186.44 1170.75,1186.44 1171.33,1186.44 1171.92,1186.44 1172.5,1186.44 1173.09,1186.44 1173.68,1186.44 1174.26,1186.44 1174.85,1186.44 1175.44,1186.44 1176.02,1186.44 1176.61,1186.44 1177.2,1186.44 1177.78,1186.44 1178.37,1186.44 1178.96,1186.44 1179.54,1186.44 1180.13,1186.44 1180.71,1186.44 1181.3,1186.44 1181.89,1186.44 1182.47,1186.44 1183.06,1186.44 1183.65,1186.44 1184.23,1186.44 1184.82,1186.44 1185.41,1186.44 1185.99,1186.44 1186.58,1186.44 1187.16,1186.44 1187.75,1186.44 1188.34,1186.44 1188.92,1186.44 1189.51,1186.44 1190.1,1186.44 1190.68,1186.44 1191.27,1186.44 1191.86,1186.44 1192.44,1186.44 1193.03,1186.44 1193.62,1186.44 1194.2,1186.44 1194.79,1186.44 1195.37,1186.44 1195.96,1186.44 1196.55,1186.44 1197.13,1186.44 1197.72,1186.44 1198.31,1186.44 1198.89,1186.44 1199.48,1186.44 1200.07,1186.44 1200.65,1186.44 1201.24,1186.44 1201.83,1186.44 1202.41,1186.44 1203,1186.44 1203.58,1186.44 1204.17,1186.44 1204.76,1186.44 1205.34,1186.44 1205.93,1186.44 1206.52,1186.44 1207.1,1186.44 1207.69,1186.44 1208.28,1186.44 1208.86,1186.44 1209.45,1186.44 1210.03,1186.44 1210.62,1186.44 1211.21,1186.44 1211.79,1186.44 1212.38,1186.44 1212.97,1186.44 1213.55,1186.44 1214.14,1186.44 1214.73,1186.44 1215.31,1186.44 1215.9,1186.44 1216.49,1186.44 1217.07,1186.44 1217.66,1186.44 1218.24,1186.44 1218.83,1186.44 1219.42,1186.44 1220,1186.44 1220.59,1186.44 1221.18,1186.44 1221.76,1186.44 1222.35,1186.44 1222.94,1186.44 1223.52,1186.44 1224.11,1186.44 1224.7,1186.44 1225.28,1186.44 1225.87,1186.44 1226.45,1186.44 1227.04,1186.44 1227.63,1186.44 1228.21,1186.44 1228.8,1186.44 1229.39,1186.44 1229.97,1186.44 1230.56,1186.44 1231.15,1186.44 1231.73,1186.44 1232.32,1186.44 1232.91,1186.44 1233.49,1186.44 1234.08,1186.44 1234.66,1186.44 1235.25,1186.44 1235.84,1186.44 1236.42,1186.44 1237.01,1186.44 1237.6,1186.44 1238.18,1186.44 1238.77,1186.44 1239.36,1186.44 1239.94,1186.44 1240.53,1186.44 1241.11,1186.44 1241.7,1186.44 1242.29,1186.44 1242.87,1186.44 1243.46,1186.44 1244.05,1186.44 1244.63,1186.44 1245.22,1186.44 1245.81,1186.44 1246.39,1186.44 1246.98,1186.44 1247.57,1186.44 1248.15,1186.44 1248.74,1186.44 1249.32,1186.44 1249.91,1186.44 1250.5,1186.44 1251.08,1186.44 1251.67,1186.44 1252.26,1186.44 1252.84,1186.44 1253.43,1186.44 1254.02,1186.44 1254.6,1186.44 1255.19,1186.44 1255.78,1186.44 1256.36,1186.44 1256.95,1186.44 1257.53,1186.44 1258.12,1186.44 1258.71,1186.44 1259.29,1186.44 1259.88,1186.44 1260.47,1186.44 1261.05,1186.44 1261.64,1186.44 1262.23,1186.44 1262.81,1186.44 1263.4,1186.44 1263.98,1186.44 1264.57,1186.44 1265.16,1186.44 1265.74,1186.44 1266.33,1186.44 1266.92,1186.44 1267.5,1186.44 1268.09,1186.44 1268.68,1186.44 1269.26,1186.44 1269.85,1186.44 1270.44,1186.44 1271.02,1186.44 1271.61,1186.44 1272.19,1186.44 1272.78,1186.44 1273.37,1186.44 1273.95,1186.44 1274.54,1186.44 1275.13,1186.44 1275.71,1186.44 1276.3,1186.44 1276.89,1186.44 1277.47,1186.44 1278.06,1186.44 1278.65,1186.44 1279.23,1186.44 1279.82,1186.44 1280.4,1186.44 1280.99,1186.44 1281.58,1186.44 1282.16,1186.44 1282.75,1186.44 1283.34,1186.44 1283.92,1186.44 1284.51,1186.44 1285.1,1186.44 1285.68,1186.44 1286.27,1186.44 1286.86,1186.44 1287.44,1186.44 1288.03,1186.44 1288.61,1186.44 1289.2,1186.44 1289.79,1186.44 1290.37,1186.44 1290.96,1186.44 1291.55,1186.44 1292.13,1186.44 1292.72,1186.44 1293.31,1186.44 1293.89,1186.44 1294.48,1186.44 1295.06,1186.44 1295.65,1186.44 1296.24,1186.44 1296.82,1186.44 1297.41,1186.44 1298,1186.44 1298.58,1186.44 1299.17,1186.44 1299.76,1186.44 1300.34,1186.44 1300.93,1186.44 1301.52,1186.44 1302.1,1186.44 1302.69,1186.44 1303.27,1186.44 1303.86,1186.44 1304.45,1186.44 1305.03,1186.44 1305.62,1186.44 1306.21,1186.44 1306.79,1186.44 1307.38,1186.44 1307.97,1186.44 1308.55,1186.44 1309.14,1186.44 1309.73,1186.44 1310.31,1186.44 1310.9,1186.44 1311.48,1186.44 1312.07,1186.44 1312.66,1186.44 1313.24,1186.44 1313.83,1186.44 1314.42,1186.44 1315,1186.44 1315.59,1186.44 1316.18,1186.44 1316.76,1186.44 1317.35,1186.44 1317.93,1186.44 1318.52,1186.44 1319.11,1186.44 1319.69,1186.44 1320.28,1186.44 1320.87,1186.44 1321.45,1186.44 1322.04,1186.44 1322.63,1186.44 1323.21,1186.44 1323.8,1186.44 1324.39,1186.44 1324.97,1186.44 1325.56,1186.44 1326.14,1186.44 1326.73,1186.44 1327.32,1186.44 1327.9,1186.44 1328.49,1186.44 1329.08,1186.44 1329.66,1186.44 1330.25,1186.44 1330.84,1186.44 1331.42,1186.44 1332.01,1186.44 1332.6,1186.44 1333.18,1186.44 1333.77,1186.44 1334.35,1186.44 1334.94,1186.44 1335.53,1186.44 1336.11,1186.44 1336.7,1186.44 1337.29,1186.44 1337.87,1186.44 1338.46,1186.44 1339.05,1186.44 1339.63,1186.44 1340.22,1186.44 1340.8,1186.44 1341.39,1186.44 1341.98,1186.44 1342.56,1186.44 1343.15,1186.44 1343.74,1186.44 1344.32,1186.44 1344.91,1186.44 1345.5,1186.44 1346.08,1186.44 1346.67,1186.44 1347.26,1186.44 1347.84,1186.44 1348.43,1186.44 1349.01,1186.44 1349.6,1186.44 1350.19,1186.44 1350.77,1186.44 1351.36,1186.44 1351.95,1186.44 1352.53,1186.44 1353.12,1186.44 1353.71,1186.44 1354.29,1186.44 1354.88,1186.44 1355.47,1186.44 1356.05,1186.44 1356.64,1186.44 1357.22,1186.44 1357.81,1186.44 1358.4,1186.44 1358.98,1186.44 1359.57,1186.44 1360.16,1186.44 1360.74,1186.44 1361.33,1186.44 1361.92,1186.44 1362.5,1186.44 1363.09,1186.44 1363.68,1186.44 1364.26,1186.44 1364.85,1186.44 1365.43,1186.44 1366.02,1186.44 1366.61,1186.44 1367.19,1186.44 1367.78,1186.44 1368.37,1186.44 1368.95,1186.44 1369.54,1186.44 1370.13,1186.44 1370.71,1186.44 1371.3,1186.44 1371.88,1186.44 1372.47,1186.44 1373.06,1186.44 1373.64,1186.44 1374.23,1186.44 1374.82,1186.44 1375.4,1186.44 1375.99,1186.44 1376.58,1186.44 1377.16,1186.44 1377.75,1186.44 1378.34,1186.44 1378.92,1186.44 1379.51,1186.44 1380.09,1186.44 1380.68,1186.44 1381.27,1186.44 1381.85,1186.44 1382.44,1186.44 1383.03,1186.44 1383.61,1186.44 1384.2,1186.44 1384.79,1186.44 1385.37,1186.44 1385.96,1186.44 1386.55,1186.44 1387.13,1186.44 1387.72,1186.44 1388.3,1186.44 1388.89,1186.44 1389.48,1186.44 1390.06,1186.44 1390.65,1186.44 1391.24,1186.44 1391.82,1186.44 1392.41,1186.44 1393,1186.44 1393.58,1186.44 1394.17,1186.44 1394.75,1186.44 1395.34,1186.44 1395.93,1186.44 1396.51,1186.44 1397.1,1186.44 1397.69,1186.44 1398.27,1186.44 1398.86,1186.44 1399.45,1186.44 1400.03,1186.44 1400.62,1186.44 1401.21,1186.44 1401.79,1186.44 1402.38,1186.44 1402.96,1186.44 1403.55,1186.44 1404.14,1186.44 1404.72,1186.44 1405.31,1186.44 1405.9,1186.44 1406.48,1186.44 1407.07,1186.44 1407.66,1186.44 1408.24,1186.44 1408.83,1186.44 1409.42,1186.44 1410,1186.44 1410.59,1186.44 1411.17,1186.44 1411.76,1186.44 1412.35,1186.44 1412.93,1186.44 1413.52,1186.44 1414.11,1186.44 1414.69,1186.44 1415.28,1186.44 1415.87,1186.44 1416.45,1186.44 1417.04,1186.44 1417.63,1186.44 1418.21,1186.44 1418.8,1186.44 1419.38,1186.44 1419.97,1186.44 1420.56,1186.44 1421.14,1186.44 1421.73,1186.44 1422.32,1186.44 1422.9,1186.44 1423.49,1186.44 1424.08,1186.44 1424.66,1186.44 1425.25,1186.44 1425.83,1186.44 1426.42,1186.44 1427.01,1186.44 1427.59,1186.44 1428.18,1186.44 1428.77,1186.44 1429.35,1186.44 1429.94,1186.44 1430.53,1186.44 1431.11,1186.44 1431.7,1186.44 1432.29,1186.44 1432.87,1186.44 1433.46,1186.44 1434.04,1186.44 1434.63,1186.44 1435.22,1186.44 1435.8,1186.44 1436.39,1186.44 1436.98,1186.44 1437.56,1186.44 1438.15,1186.44 1438.74,1186.44 1439.32,1186.44 1439.91,1186.44 1440.5,1186.44 1441.08,1186.44 1441.67,1186.44 1442.25,1186.44 1442.84,1186.44 1443.43,1186.44 1444.01,1186.44 1444.6,1186.44 1445.19,1186.44 1445.77,1186.44 1446.36,1186.44 1446.95,1186.44 1447.53,1186.44 1448.12,1186.44 1448.7,1186.44 1449.29,1186.44 1449.88,1186.44 1450.46,1186.44 1451.05,1186.44 1451.64,1186.44 1452.22,1186.44 1452.81,1186.44 1453.4,1186.44 1453.98,1186.44 1454.57,1186.44 1455.16,1186.44 1455.74,1186.44 1456.33,1186.44 1456.91,1186.44 1457.5,1186.44 1458.09,1186.44 1458.67,1186.44 1459.26,1186.44 1459.85,1186.44 1460.43,1186.44 1461.02,1186.44 1461.61,1186.44 1462.19,1186.44 1462.78,1186.44 1463.37,1186.44 1463.95,1186.44 1464.54,1186.44 1465.12,1186.44 1465.71,1186.44 1466.3,1186.44 1466.88,1186.44 1467.47,1186.44 1468.06,1186.44 1468.64,1186.44 1469.23,1186.44 1469.82,1186.44 1470.4,1186.44 1470.99,1186.44 1471.57,1186.44 1472.16,1186.44 1472.75,1186.44 1473.33,1186.44 1473.92,1186.44 1474.51,1186.44 1475.09,1186.44 1475.68,1186.44 1476.27,1186.44 1476.85,1186.44 1477.44,1186.44 1478.03,1186.44 1478.61,1186.44 1479.2,1186.44 1479.78,1186.44 1480.37,1186.44 1480.96,1186.44 1481.54,1186.44 1482.13,1186.44 1482.72,1186.44 1483.3,1186.44 1483.89,1186.44 1484.48,1186.44 1485.06,1186.44 1485.65,1186.44 1486.24,1186.44 1486.82,1186.44 1487.41,1186.44 1487.99,1186.44 1488.58,1186.44 1489.17,1186.44 1489.75,1186.44 1490.34,1186.44 1490.93,1186.44 1491.51,1186.44 1492.1,1186.44 1492.69,1186.44 1493.27,1186.44 1493.86,1186.44 1494.45,1186.44 1495.03,1186.44 1495.62,1186.44 1496.2,1186.44 1496.79,1186.44 1497.38,1186.44 1497.96,1186.44 1498.55,1186.44 1499.14,1186.44 1499.72,1186.44 1500.31,1186.44 1500.9,1186.44 1501.48,1186.44 1502.07,1186.44 1502.65,1186.44 1503.24,1186.44 1503.83,1186.44 1504.41,1186.44 1505,1186.44 1505.59,1186.44 1506.17,1186.44 1506.76,1186.44 1507.35,1186.44 1507.93,1186.44 1508.52,1186.44 1509.11,1186.44 1509.69,1186.44 1510.28,1186.44 1510.86,1186.44 1511.45,1186.44 1512.04,1186.44 1512.62,1186.44 1513.21,1186.44 1513.8,1186.44 1514.38,1186.44 1514.97,1186.44 1515.56,1186.44 1516.14,1186.44 1516.73,1186.44 1517.32,1186.44 1517.9,1186.44 1518.49,1186.44 1519.07,1186.44 1519.66,1186.44 1520.25,1186.44 1520.83,1186.44 1521.42,1186.44 1522.01,1186.44 1522.59,1186.44 1523.18,1186.44 1523.77,1186.44 1524.35,1186.44 1524.94,1186.44 1525.52,1186.44 1526.11,1186.44 1526.7,1186.44 1527.28,1186.44 1527.87,1186.44 1528.46,1186.44 1529.04,1186.44 1529.63,1186.44 1530.22,1186.44 1530.8,1186.44 1531.39,1186.44 1531.98,1186.44 1532.56,1186.44 1533.15,1186.44 1533.73,1186.44 1534.32,1186.44 1534.91,1186.44 1535.49,1186.44 1536.08,1186.44 1536.67,1186.44 1537.25,1186.44 1537.84,1186.44 1538.43,1186.44 1539.01,1186.44 1539.6,1186.44 1540.19,1186.44 1540.77,1186.44 1541.36,1186.44 1541.94,1186.44 1542.53,1186.44 1543.12,1186.44 1543.7,1186.44 1544.29,1186.44 1544.88,1186.44 1545.46,1186.44 1546.05,1186.44 1546.64,1186.44 1547.22,1186.44 1547.81,1186.44 1548.4,1186.44 1548.98,1186.44 1549.57,1186.44 1550.15,1186.44 1550.74,1186.44 1551.33,1186.44 1551.91,1186.44 1552.5,1186.44 1553.09,1186.44 1553.67,1186.44 1554.26,1186.44 1554.85,1186.44 1555.43,1186.44 1556.02,1186.44 1556.6,1186.44 1557.19,1186.44 1557.78,1186.44 1558.36,1186.44 1558.95,1186.44 1559.54,1186.44 1560.12,1186.44 1560.71,1186.44 1561.3,1186.44 1561.88,1186.44 1562.47,1186.44 1563.06,1186.44 1563.64,1186.44 1564.23,1186.44 1564.81,1186.44 1565.4,1186.44 1565.99,1186.44 1566.57,1186.44 1567.16,1186.44 1567.75,1186.44 1568.33,1186.44 1568.92,1186.44 1569.51,1186.44 1570.09,1186.44 1570.68,1186.44 1571.27,1186.44 1571.85,1186.44 1572.44,1186.44 1573.02,1186.44 1573.61,1186.44 1574.2,1186.44 1574.78,1186.44 1575.37,1186.44 1575.96,1186.44 1576.54,1186.44 1577.13,1186.44 1577.72,1186.44 1578.3,1186.44 1578.89,1186.44 1579.47,1186.44 1580.06,1186.44 1580.65,1186.44 1581.23,1186.44 1581.82,1186.44 1582.41,1186.44 1582.99,1186.44 1583.58,1186.44 1584.17,1186.44 1584.75,1186.44 1585.34,1186.44 1585.93,1186.44 1586.51,1186.44 1587.1,1186.44 1587.68,1186.44 1588.27,1186.44 1588.86,1186.44 1589.44,1186.44 1590.03,1186.44 1590.62,1186.44 1591.2,1186.44 1591.79,1186.44 1592.38,1186.44 1592.96,1186.44 1593.55,1186.44 1594.14,1186.44 1594.72,1186.44 1595.31,1186.44 1595.89,1186.44 1596.48,1186.44 1597.07,1186.44 1597.65,1186.44 1598.24,1186.44 1598.83,1186.44 1599.41,1186.44 1600,1186.44 1600.59,1186.44 1601.17,1186.44 1601.76,1186.44 1602.34,1186.44 1602.93,1186.44 1603.52,1186.44 1604.1,1186.44 1604.69,1186.44 1605.28,1186.44 1605.86,1186.44 1606.45,1186.44 1607.04,1186.44 1607.62,1186.44 1608.21,1186.44 1608.8,1186.44 1609.38,1186.44 1609.97,1186.44 1610.55,1186.44 1611.14,1186.44 1611.73,1186.44 1612.31,1186.44 1612.9,1186.44 1613.49,1186.44 1614.07,1186.44 1614.66,1186.44 1615.25,1186.44 1615.83,1186.44 1616.42,1186.44 1617.01,1186.44 1617.59,1186.44 1618.18,1186.44 1618.76,1186.44 1619.35,1186.44 1619.94,1186.44 1620.52,1186.44 1621.11,1186.44 1621.7,1186.44 1622.28,1186.44 1622.87,1186.44 1623.46,1186.44 1624.04,1186.44 1624.63,1186.44 1625.22,1186.44 1625.8,1186.44 1626.39,1186.44 1626.97,1186.44 1627.56,1186.44 1628.15,1186.44 1628.73,1186.44 1629.32,1186.44 1629.91,1186.44 1630.49,1186.44 1631.08,1186.44 1631.67,1186.44 1632.25,1186.44 1632.84,1186.44 1633.42,1186.44 1634.01,1186.44 1634.6,1186.44 1635.18,1186.44 1635.77,1186.44 1636.36,1186.44 1636.94,1186.44 1637.53,1186.44 1638.12,1186.44 1638.7,1186.44 1639.29,1186.44 1639.88,1186.44 1640.46,1186.44 1641.05,1186.44 1641.63,1186.44 1642.22,1186.44 1642.81,1186.44 1643.39,1186.44 1643.98,1186.44 1644.57,1186.44 1645.15,1186.44 1645.74,1186.44 1646.33,1186.44 1646.91,1186.44 1647.5,1186.44 1648.09,1186.44 1648.67,1186.44 1649.26,1186.44 1649.84,1186.44 1650.43,1186.44 1651.02,1186.44 1651.6,1186.44 1652.19,1186.44 1652.78,1186.44 1653.36,1186.44 1653.95,1186.44 1654.54,1186.44 1655.12,1186.44 1655.71,1186.44 1656.29,1186.44 1656.88,1186.44 1657.47,1186.44 1658.05,1186.44 1658.64,1186.44 1659.23,1186.44 1659.81,1186.44 1660.4,1186.44 1660.99,1186.44 1661.57,1186.44 1662.16,1186.44 1662.75,1186.44 1663.33,1186.44 1663.92,1186.44 1664.5,1186.44 1665.09,1186.44 1665.68,1186.44 1666.26,1186.44 1666.85,1186.44 1667.44,1186.44 1668.02,1186.44 1668.61,1186.44 1669.2,1186.44 1669.78,1186.44 1670.37,1186.44 1670.96,1186.44 1671.54,1186.44 1672.13,1186.44 1672.71,1186.44 1673.3,1186.44 1673.89,1186.44 1674.47,1186.44 1675.06,1186.44 1675.65,1186.44 1676.23,1186.44 1676.82,1186.44 1677.41,1186.44 1677.99,1186.44 1678.58,1186.44 1679.17,1186.44 1679.75,1186.44 1680.34,1186.44 1680.92,1186.44 1681.51,1186.44 1682.1,1186.44 1682.68,1186.44 1683.27,1186.44 1683.86,1186.44 1684.44,1186.44 1685.03,1186.44 1685.62,1186.44 1686.2,1186.44 1686.79,1186.44 1687.37,1186.44 1687.96,1186.44 1688.55,1186.44 1689.13,1186.44 1689.72,1186.44 1690.31,1186.44 1690.89,1186.44 1691.48,1186.44 1692.07,1186.44 1692.65,1186.44 1693.24,1186.44 1693.83,1186.44 1694.41,1186.44 1695,1186.44 1695.58,1186.44 1696.17,1186.44 1696.76,1186.44 1697.34,1186.44 1697.93,1186.44 1698.52,1186.44 1699.1,1186.44 1699.69,1186.44 1700.28,1186.44 1700.86,1186.44 1701.45,1186.44 1702.04,1186.44 1702.62,1186.44 1703.21,1186.44 1703.79,1186.44 1704.38,1186.44 1704.97,1186.44 1705.55,1186.44 1706.14,1186.44 1706.73,1186.44 1707.31,1186.44 1707.9,1186.44 1708.49,1186.44 1709.07,1186.44 1709.66,1186.44 1710.24,1186.44 1710.83,1186.44 1711.42,1186.44 1712,1186.44 1712.59,1186.44 1713.18,1186.44 1713.76,1186.44 1714.35,1186.44 1714.94,1186.44 1715.52,1186.44 1716.11,1186.44 1716.7,1186.44 1717.28,1186.44 1717.87,1186.44 1718.45,1186.44 1719.04,1186.44 1719.63,1186.44 1720.21,1186.44 1720.8,1186.44 1721.39,1186.44 1721.97,1186.44 1722.56,1186.44 1723.15,1186.44 1723.73,1186.44 1724.32,1186.44 1724.91,1186.44 1725.49,1186.44 1726.08,1186.44 1726.66,1186.44 1727.25,1186.44 1727.84,1186.44 1728.42,1186.44 1729.01,1186.44 1729.6,1186.44 1730.18,1186.44 1730.77,1186.44 1731.36,1186.44 1731.94,1186.44 1732.53,1186.44 1733.11,1186.44 1733.7,1186.44 1734.29,1186.44 1734.87,1186.44 1735.46,1186.44 1736.05,1186.44 1736.63,1186.44 1737.22,1186.44 1737.81,1186.44 1738.39,1186.44 1738.98,1186.44 1739.57,1186.44 1740.15,1186.44 1740.74,1186.44 1741.32,1186.44 1741.91,1186.44 1742.5,1186.44 1743.08,1186.44 1743.67,1186.44 1744.26,1186.44 1744.84,1186.44 1745.43,1186.44 1746.02,1186.44 1746.6,1186.44 1747.19,1186.44 1747.78,1186.44 1748.36,1186.44 1748.95,1186.44 1749.53,1186.44 1750.12,1186.44 1750.71,1186.44 1751.29,1186.44 1751.88,1186.44 1752.47,1186.44 1753.05,1186.44 1753.64,1186.44 1754.23,1186.44 1754.81,1186.44 1755.4,1186.44 1755.99,1186.44 1756.57,1186.44 1757.16,1186.44 1757.74,1186.44 1758.33,1186.44 1758.92,1186.44 1759.5,1186.44 1760.09,1186.44 1760.68,1186.44 1761.26,1186.44 1761.85,1186.44 1762.44,1186.44 1763.02,1186.44 1763.61,1186.44 1764.19,1186.44 1764.78,1186.44 1765.37,1186.44 1765.95,1186.44 1766.54,1186.44 1767.13,1186.44 1767.71,1186.44 1768.3,1186.44 1768.89,1186.44 1769.47,1186.44 1770.06,1186.44 1770.65,1186.44 1771.23,1186.44 1771.82,1186.44 1772.4,1186.44 1772.99,1186.44 1773.58,1186.44 1774.16,1186.44 1774.75,1186.44 1775.34,1186.44 1775.92,1186.44 1776.51,1186.44 1777.1,1186.44 1777.68,1186.44 1778.27,1186.44 1778.86,1186.44 1779.44,1186.44 1780.03,1186.44 1780.61,1186.44 1781.2,1186.44 1781.79,1186.44 1782.37,1186.44 1782.96,1186.44 1783.55,1186.44 1784.13,1186.44 1784.72,1186.44 1785.31,1186.44 1785.89,1186.44 1786.48,1186.44 1787.06,1186.44 1787.65,1186.44 1788.24,1186.44 1788.82,1186.44 1789.41,1186.44 1790,1186.44 1790.58,1186.44 1791.17,1186.44 1791.76,1186.44 1792.34,1186.44 1792.93,1186.44 1793.52,1186.44 1794.1,1186.44 1794.69,1186.44 1795.27,1186.44 1795.86,1186.44 1796.45,1186.44 1797.03,1186.44 1797.62,1186.44 1798.21,1186.44 1798.79,1186.44 1799.38,1186.44 1799.97,1186.44 1800.55,1186.44 1801.14,1186.44 1801.73,1186.44 1802.31,1186.44 1802.9,1186.44 1803.48,1186.44 1804.07,1186.44 1804.66,1186.44 1805.24,1186.44 1805.83,1186.44 1806.42,1186.44 1807,1186.44 1807.59,1186.44 1808.18,1186.44 1808.76,1186.44 1809.35,1186.44 1809.94,1186.44 1810.52,1186.44 1811.11,1186.44 1811.69,1186.44 1812.28,1186.44 1812.87,1186.44 1813.45,1186.44 1814.04,1186.44 1814.63,1186.44 1815.21,1186.44 1815.8,1186.44 1816.39,1186.44 1816.97,1186.44 1817.56,1186.44 1818.14,1186.44 1818.73,1186.44 1819.32,1186.44 1819.9,1186.44 1820.49,1186.44 1821.08,1186.44 1821.66,1186.44 1822.25,1186.44 1822.84,1186.44 1823.42,1186.44 1824.01,1186.44 1824.6,1186.44 1825.18,1186.44 1825.77,1186.44 1826.35,1186.44 1826.94,1186.44 1827.53,1186.44 1828.11,1186.44 1828.7,1186.44 1829.29,1186.44 1829.87,1186.44 1830.46,1186.44 1831.05,1186.44 1831.63,1186.44 1832.22,1186.44 1832.81,1186.44 1833.39,1186.44 1833.98,1186.44 1834.56,1186.44 1835.15,1186.44 1835.74,1186.44 1836.32,1186.44 1836.91,1186.44 1837.5,1186.44 1838.08,1186.44 1838.67,1186.44 1839.26,1186.44 1839.84,1186.44 1840.43,1186.44 1841.01,1186.44 1841.6,1186.44 1842.19,1186.44 1842.77,1186.44 1843.36,1186.44 1843.95,1186.44 1844.53,1186.44 1845.12,1186.44 1845.71,1186.44 1846.29,1186.44 1846.88,1186.44 1847.47,1186.44 1848.05,1186.44 1848.64,1186.44 1849.22,1186.44 1849.81,1186.44 1850.4,1186.44 1850.98,1186.44 1851.57,1186.44 1852.16,1186.44 1852.74,1186.44 1853.33,1186.44 1853.92,1186.44 1854.5,1186.44 1855.09,1186.44 1855.68,1186.44 1856.26,1186.44 1856.85,1186.44 1857.43,1186.44 1858.02,1186.44 1858.61,1186.44 1859.19,1186.44 1859.78,1186.44 1860.37,1186.44 1860.95,1186.44 1861.54,1186.44 1862.13,1186.44 1862.71,1186.44 1863.3,1186.44 1863.88,1186.44 1864.47,1186.44 1865.06,1186.44 1865.64,1186.44 1866.23,1186.44 1866.82,1186.44 1867.4,1186.44 1867.99,1186.44 1868.58,1186.44 1869.16,1186.44 1869.75,1186.44 1870.34,1186.44 1870.92,1186.44 1871.51,1186.44 1872.09,1186.44 1872.68,1186.44 1873.27,1186.44 1873.85,1186.44 1874.44,1186.44 1875.03,1186.44 1875.61,1186.44 1876.2,1186.44 1876.79,1186.44 1877.37,1186.44 1877.96,1186.44 1878.55,1186.44 1879.13,1186.44 1879.72,1186.44 1880.3,1186.44 1880.89,1186.44 1881.48,1186.44 1882.06,1186.44 1882.65,1186.44 1883.24,1186.44 1883.82,1186.44 1884.41,1186.44 1885,1186.44 1885.58,1186.44 1886.17,1186.44 1886.76,1186.44 1887.34,1186.44 1887.93,1186.44 1888.51,1186.44 1889.1,1186.44 1889.69,1186.44 1890.27,1186.44 1890.86,1186.44 1891.45,1186.44 1892.03,1186.44 1892.62,1186.44 1893.21,1186.44 1893.79,1186.44 1894.38,1186.44 1894.96,1186.44 1895.55,1186.44 1896.14,1186.44 1896.72,1186.44 1897.31,1186.44 1897.9,1186.44 1898.48,1186.44 1899.07,1186.44 1899.66,1186.44 1900.24,1186.44 1900.83,1186.44 1901.42,1186.44 1902,1186.44 1902.59,1186.44 1903.17,1186.44 1903.76,1186.44 1904.35,1186.44 1904.93,1186.44 1905.52,1186.44 1906.11,1186.44 1906.69,1186.44 1907.28,1186.44 1907.87,1186.44 1908.45,1186.44 1909.04,1186.44 1909.63,1186.44 1910.21,1186.44 1910.8,1186.44 1911.38,1186.44 1911.97,1186.44 1912.56,1186.44 1913.14,1186.44 1913.73,1186.44 1914.32,1186.44 1914.9,1186.44 1915.49,1186.44 1916.08,1186.44 1916.66,1186.44 1917.25,1186.44 1917.83,1186.44 1918.42,1186.44 1919.01,1186.44 1919.59,1186.44 1920.18,1186.44 1920.77,1186.44 1921.35,1186.44 1921.94,1186.44 1922.53,1186.44 1923.11,1186.44 1923.7,1186.44 1924.29,1186.44 1924.87,1186.44 1925.46,1186.44 1926.04,1186.44 1926.63,1186.44 1927.22,1186.44 1927.8,1186.44 1928.39,1186.44 1928.98,1186.44 1929.56,1186.44 1930.15,1186.44 1930.74,1186.44 1931.32,1186.44 1931.91,1186.44 1932.5,1186.44 1933.08,1186.44 1933.67,1186.44 1934.25,1186.44 1934.84,1186.44 1935.43,1186.44 1936.01,1186.44 1936.6,1186.44 1937.19,1186.44 1937.77,1186.44 1938.36,1186.44 1938.95,1186.44 1939.53,1186.44 1940.12,1186.44 1940.71,1186.44 1941.29,1186.44 1941.88,1186.44 1942.46,1186.44 1943.05,1186.44 1943.64,1186.44 1944.22,1186.44 1944.81,1186.44 1945.4,1186.44 1945.98,1186.44 1946.57,1186.44 1947.16,1186.44 1947.74,1186.44 1948.33,1186.44 1948.91,1186.44 1949.5,1186.44 1950.09,1186.44 1950.67,1186.44 1951.26,1186.44 1951.85,1186.44 1952.43,1186.44 1953.02,1186.44 1953.61,1186.44 1954.19,1186.44 1954.78,1186.44 1955.37,1186.44 1955.95,1186.44 1956.54,1186.44 1957.12,1186.44 1957.71,1186.44 1958.3,1186.44 1958.88,1186.44 1959.47,1186.44 1960.06,1186.44 1960.64,1186.44 1961.23,1186.44 1961.82,1186.44 1962.4,1186.44 1962.99,1186.44 1963.58,1186.44 1964.16,1186.44 1964.75,1186.44 1965.33,1186.44 1965.92,1186.44 1966.51,1186.44 1967.09,1186.44 1967.68,1186.44 1968.27,1186.44 1968.85,1186.44 1969.44,1186.44 1970.03,1186.44 1970.61,1186.44 1971.2,1186.44 1971.78,1186.44 1972.37,1186.44 1972.96,1186.44 1973.54,1186.44 1974.13,1186.44 1974.72,1186.44 1975.3,1186.44 1975.89,1186.44 1976.48,1186.44 1977.06,1186.44 1977.65,1186.44 1978.24,1186.44 1978.82,1186.44 1979.41,1186.44 1979.99,1186.44 1980.58,1186.44 1981.17,1186.44 1981.75,1186.44 1982.34,1186.44 1982.93,1186.44 1983.51,1186.44 1984.1,1186.44 1984.69,1186.44 1985.27,1186.44 1985.86,1186.44 1986.45,1186.44 1987.03,1186.44 1987.62,1186.44 1988.2,1186.44 1988.79,1186.44 1989.38,1186.44 1989.96,1186.44 1990.55,1186.44 1991.14,1186.44 1991.72,1186.44 1992.31,1186.44 1992.9,1186.44 1993.48,1186.44 1994.07,1186.44 1994.65,1186.44 1995.24,1186.44 1995.83,1186.44 1996.41,1186.44 1997,1186.44 1997.59,1186.44 1998.17,1186.44 1998.76,1186.44 1999.35,1186.44 1999.93,1186.44 2000.52,1186.44 2001.11,1186.44 2001.69,1186.44 2002.28,1186.44 2002.86,1186.44 2003.45,1186.44 2004.04,1186.44 2004.62,1186.44 2005.21,1186.44 2005.8,1186.44 2006.38,1186.44 2006.97,1186.44 2007.56,1186.44 2008.14,1186.44 2008.73,1186.44 2009.32,1186.44 2009.9,1186.44 2010.49,1186.44 2011.07,1186.44 2011.66,1186.44 2012.25,1186.44 2012.83,1186.44 2013.42,1186.44 2014.01,1186.44 2014.59,1186.44 2015.18,1186.44 2015.77,1186.44 2016.35,1186.44 2016.94,1186.44 2017.53,1186.44 2018.11,1186.44 2018.7,1186.44 2019.28,1186.44 2019.87,1186.44 2020.46,1186.44 2021.04,1186.44 2021.63,1186.44 2022.22,1186.44 2022.8,1186.44 2023.39,1186.44 2023.98,1186.44 2024.56,1186.44 2025.15,1186.44 2025.73,1186.44 2026.32,1186.44 2026.91,1186.44 2027.49,1186.44 2028.08,1186.44 2028.67,1186.44 2029.25,1186.44 2029.84,1186.44 2030.43,1186.44 2031.01,1186.44 2031.6,1186.44 2032.19,1186.44 2032.77,1186.44 2033.36,1186.44 2033.94,1186.44 2034.53,1186.44 2035.12,1186.44 2035.7,1186.44 2036.29,1186.44 2036.88,1186.44 2037.46,1186.44 2038.05,1186.44 2038.64,1186.44 2039.22,1186.44 2039.81,1186.44 2040.4,1186.44 2040.98,1186.44 2041.57,1186.44 2042.15,1186.44 2042.74,1186.44 2043.33,1186.44 2043.91,1186.44 2044.5,1186.44 2045.09,1186.44 2045.67,1186.44 2046.26,1186.44 2046.85,1186.44 2047.43,1186.44 2048.02,1186.44 2048.6,1186.44 2049.19,1186.44 2049.78,1186.44 2050.36,1186.44 2050.95,1186.44 2051.54,1186.44 2052.12,1186.44 2052.71,1186.44 2053.3,1186.44 2053.88,1186.44 2054.47,1186.44 2055.06,1186.44 2055.64,1186.44 2056.23,1186.44 2056.81,1186.44 2057.4,1186.44 2057.99,1186.44 2058.57,1186.44 2059.16,1186.44 2059.75,1186.44 2060.33,1186.44 2060.92,1186.44 2061.51,1186.44 2062.09,1186.44 2062.68,1186.44 2063.27,1186.44 2063.85,1186.44 2064.44,1186.44 2065.02,1186.44 2065.61,1186.44 2066.2,1186.44 2066.78,1186.44 2067.37,1186.44 2067.96,1186.44 2068.54,1186.44 2069.13,1186.44 2069.72,1186.44 2070.3,1186.44 2070.89,1186.44 2071.48,1186.44 2072.06,1186.44 2072.65,1186.44 2073.23,1186.44 2073.82,1186.44 2074.41,1186.44 2074.99,1186.44 2075.58,1186.44 2076.17,1186.44 2076.75,1186.44 2077.34,1186.44 2077.93,1186.44 2078.51,1186.44 2079.1,1186.44 2079.68,1186.44 2080.27,1186.44 2080.86,1186.44 2081.44,1186.44 2082.03,1186.44 2082.62,1186.44 2083.2,1186.44 2083.79,1186.44 2084.38,1186.44 2084.96,1186.44 2085.55,1186.44 2086.14,1186.44 2086.72,1186.44 2087.31,1186.44 2087.89,1186.44 2088.48,1186.44 2089.07,1186.44 2089.65,1186.44 2090.24,1186.44 2090.83,1186.44 2091.41,1186.44 2092,1186.44 2092.59,1186.44 2093.17,1186.44 2093.76,1186.44 2094.35,1186.44 2094.93,1186.44 2095.52,1186.44 2096.1,1186.44 2096.69,1186.44 2097.28,1186.44 2097.86,1186.44 2098.45,1186.44 2099.04,1186.44 2099.62,1186.44 2100.21,1186.44 2100.8,1186.44 2101.38,1186.44 2101.97,1186.44 2102.55,1186.44 2103.14,1186.44 2103.73,1186.44 2104.31,1186.44 2104.9,1186.44 2105.49,1186.44 2106.07,1186.44 2106.66,1186.44 2107.25,1186.44 2107.83,1186.44 2108.42,1186.44 2109.01,1186.44 2109.59,1186.44 2110.18,1186.44 2110.76,1186.44 2111.35,1186.44 2111.94,1186.44 2112.52,1186.44 2113.11,1186.44 2113.7,1186.44 2114.28,1186.44 2114.87,1186.44 2115.46,1186.44 2116.04,1186.44 2116.63,1186.44 2117.22,1186.44 2117.8,1186.44 2118.39,1186.44 2118.97,1186.44 2119.56,1186.44 2120.15,1186.44 2120.73,1186.44 2121.32,1186.44 2121.91,1186.44 2122.49,1186.44 2123.08,1186.44 2123.67,1186.44 2124.25,1186.44 2124.84,1186.44 2125.42,1186.44 2126.01,1186.44 2126.6,1186.44 2127.18,1186.44 2127.77,1186.44 2128.36,1186.44 2128.94,1186.44 2129.53,1186.44 2130.12,1186.44 2130.7,1186.44 2131.29,1186.44 2131.88,1186.44 2132.46,1186.44 2133.05,1186.44 2133.63,1186.44 2134.22,1186.44 2134.81,1186.44 2135.39,1186.44 2135.98,1186.44 2136.57,1186.44 2137.15,1186.44 2137.74,1186.44 2138.33,1186.44 2138.91,1186.44 2139.5,1186.44 2140.09,1186.44 2140.67,1186.44 2141.26,1186.44 2141.84,1186.44 2142.43,1186.44 2143.02,1186.44 2143.6,1186.44 2144.19,1186.44 2144.78,1186.44 2145.36,1186.44 2145.95,1186.44 2146.54,1186.44 2147.12,1186.44 2147.71,1186.44 2148.3,1186.44 2148.88,1186.44 2149.47,1186.44 2150.05,1186.44 2150.64,1186.44 2151.23,1186.44 2151.81,1186.44 2152.4,1186.44 2152.99,1186.44 2153.57,1186.44 2154.16,1186.44 2154.75,1186.44 2155.33,1186.44 2155.92,1186.44 2156.5,1186.44 2157.09,1186.44 2157.68,1186.44 2158.26,1186.44 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.17,1166.04 1405.52,899.083 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1206.37 985.439,1166.04 2158.26,1166.04 2158.26,1206.37 985.439,1206.37 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip143\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip143)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,1377.62 161.555,1205.39 162.114,-189.296 162.673,764.19 163.232,-584.456 163.792,-1823.81 164.351,-2975.61 164.91,-3987.77 165.469,-3991.54 166.029,-4005.73 166.588,-4016.67 167.147,-4911.94 167.706,-5732 168.266,-5740.36 168.825,-5738.76 169.384,-6436.66 169.943,-6440.73 170.503,-7060.05 171.062,-7051.35 171.621,-7576.47 172.18,-8038.39 172.74,-8470.09 173.299,-8838.08 173.858,-9187.71 174.417,-9064.3 174.977,-9347.66 175.536,-9585.63 176.095,-9790.57 176.655,-9296.05 177.214,-9194.46 177.773,-9382.31 178.332,-9526.34 178.892,-9404.6 179.451,-9526.1 180.01,-9374.19 180.569,-9474.51 181.129,-9544.79 181.688,-9576.18 182.247,-9406.26 182.806,-9425.71 183.366,-9447.1 183.925,-9271.03 184.484,-9083.39 185.043,-9044.25 185.603,-8864.19 186.162,-8688.96 186.721,-8516.5 187.28,-8345.43 187.84,-8163.89 188.399,-7891.95 188.958,-7720.88 189.517,-7658.19 190.077,-7394.19 190.636,-7315.67 191.195,-7139.48 191.754,-6879.67 192.314,-6648.02 192.873,-6418.83 193.432,-6274.79 193.991,-6200.47 194.551,-5717.31 195.11,-5587.43 195.669,-5277.95 196.228,-5096.33 196.788,-5046.8 197.347,-4992.41 197.906,-4872.33 198.465,-4751.33 199.025,-4678.58 199.584,-4458.41 200.143,-4341.39 200.702,-4171.34 201.262,-4060.84 201.821,-3987.21 202.38,-3822.78 202.939,-3711.63 203.499,-3641.5 204.058,-3487.07 204.617,-3382.86 205.176,-3246.62 205.736,-3147.76 206.295,-3083.91 206.854,-2942.01 207.413,-2814.27 207.973,-2718.68 208.532,-2659.74 209.091,-2593.63 209.65,-2525.32 210.21,-2461.65 210.769,-2303.49 211.328,-2209.46 211.887,-2124.14 212.447,-1970.57 213.006,-1805.14 213.565,-1725.96 214.124,-1592.13 214.684,-1521.33 215.243,-1416.8 215.802,-1374.7 216.361,-1283.24 216.921,-1190.4 217.48,-1129.04 218.039,-1039.34 218.598,-1006.05 219.158,-925.338 219.717,-799.115 220.276,-751.738 220.835,-721.51 221.395,-688.242 221.954,-635.549 222.513,-563.835 223.072,-494.572 223.632,-471.974 224.191,-444.434 224.75,-377.209 225.309,-353.914 225.869,-308.27 226.428,-267.236 226.987,-246.299 227.546,-203.018 228.106,-160.83 228.665,-100.805 229.224,-61.4914 229.783,-26.0487 230.343,-7.30765 230.902,32.9414 231.461,89.2603 232.02,98.262 232.58,132.677 233.139,125.446 233.698,158.433 234.257,231.906 234.817,242.388 235.376,276.151 235.935,304.099 236.494,355.978 237.054,366.56 237.613,427.157 238.172,433.007 238.731,456.982 239.291,461.784 239.85,524.582 240.409,547.303 240.968,583.644 241.528,639.548 242.087,659.582 242.646,694.218 243.205,709.117 243.765,724.395 244.324,736.487 244.883,766.859 245.442,781.172 246.002,778.928 246.561,777.345 247.12,809.775 247.679,783.163 248.239,759.814 248.798,776.478 249.357,796.027 249.916,773.737 250.476,771.539 251.035,788.932 251.594,807.143 252.153,854.786 252.713,868.691 253.272,897.411 253.831,872.9 254.39,882.992 254.95,877 255.509,888.534 256.068,882.235 256.627,892.354 257.187,887.524 257.746,866.844 258.305,860.363 258.864,919.149 259.424,932.787 259.983,908.91 260.542,902.298 261.101,880.944 261.661,912.453 262.22,891.193 262.779,955.535 263.338,947.957 263.898,922.293 264.457,931.352 265.016,896.313 265.575,914.731 266.135,914.897 266.694,947.897 267.253,941.319 267.812,921 268.372,902.745 268.931,935.57 269.49,931.077 270.049,923.86 270.609,951.041 271.168,1030.69 271.727,1007.24 272.286,998.897 272.846,1008.86 273.405,1003.14 273.964,1029.18 274.523,1022.61 275.083,1012.85 275.642,1004.83 276.201,1013.1 276.76,1002.31 277.32,1012.59 277.879,1002.66 278.438,1010.86 278.997,1031.92 279.557,1025.4 280.116,1034.01 280.675,992.93 281.234,1002.71 281.794,1028.61 282.353,986.389 282.912,980.582 283.471,960.705 284.031,974.709 284.59,988.008 285.149,999.683 285.708,991.875 286.268,1003.96 286.827,1025.26 287.386,1020.64 287.945,1042.78 288.505,1037.19 289.064,1076.9 289.623,1082.54 290.182,1088.92 290.742,1076.84 291.301,1033.12 291.86,1028.39 292.419,1018.93 292.979,1013.18 293.538,1022.25 294.097,1028.11 294.656,983.294 295.216,982.765 295.775,946.036 296.334,959.191 296.893,950.629 297.453,960.322 298.012,933.247 298.571,932.303 299.13,924.623 299.69,904.393 300.249,920.235 300.808,898.9 301.368,893.242 301.927,905.47 302.486,917.205 303.045,930.677 303.605,941.042 304.164,936.299 304.723,915.2 305.282,911.32 305.842,908.392 306.401,938.102 306.96,898.1 307.519,860.73 308.079,876.749 308.638,875.143 309.197,822.869 309.756,857.384 310.316,855.061 310.875,843.459 311.434,843.798 311.993,879.637 312.553,882.875 313.112,884.424 313.671,867.543 314.23,884.486 314.79,915.987 315.349,912.206 315.908,927.33 316.467,923.473 317.027,890.03 317.586,848.02 318.145,864.039 318.704,845.736 319.264,863.441 319.823,876.821 320.382,939.869 320.941,935.282 321.501,929.846 322.06,927.194 322.619,939.681 323.178,932.473 323.738,914.081 324.297,929.628 324.856,922.978 325.415,932.318 325.975,894.485 326.534,894.37 327.093,906.23 327.652,888.105 328.212,901.799 328.771,912.58 329.33,925.986 329.889,955.871 330.449,934.597 331.008,962.979 331.567,905.687 332.126,914.8 332.686,913.473 333.245,923.905 333.804,916.338 334.363,848.681 334.923,876.616 335.482,875.509 336.041,872.721 336.6,872.541 337.16,850.786 337.719,848.237 338.278,849.43 338.837,868.877 339.397,853.38 339.956,836.123 340.515,851.826 341.074,834.902 341.634,850.951 342.193,868.178 342.752,884.196 343.311,866.129 343.871,869.253 344.43,883.038 344.989,880.868 345.548,877.459 346.108,890.035 346.667,886.141 347.226,898.535 347.785,926.098 348.345,902.5 348.904,929.539 349.463,956.429 350.022,964.501 350.582,971.885 351.141,959.717 351.7,969.401 352.259,964.143 352.819,953.291 353.378,931.601 353.937,940.288 354.496,935.041 355.056,943.523 355.615,938.513 356.174,943.297 356.733,954.978 357.293,914.992 357.852,925.22 358.411,950.43 358.97,976.94 359.53,969.896 360.089,993.468 360.648,953.31 361.207,924.789 361.767,896.677 362.326,860.535 362.885,857.225 363.444,837.473 364.004,881.793 364.563,844.415 365.122,856.716 365.681,873.981 366.241,904.515 366.8,917.304 367.359,878.327 367.918,886.167 368.478,864.918 369.037,856.853 369.596,869.167 370.155,882.632 370.715,890.446 371.274,883.265 371.833,860.07 372.392,857.335 372.952,837.01 373.511,816.222 374.07,833.861 374.629,835.555 375.189,850.181 375.748,813.171 376.307,810.489 376.866,814.595 377.426,762.853 377.985,765.633 378.544,771.418 379.103,726.209 379.663,745.571 380.222,732.014 380.781,768.264 381.34,765.212 381.9,747.824 382.459,782.701 383.018,780.323 383.577,796.647 384.137,780.152 384.696,761.678 385.255,762.872 385.814,748.489 386.374,750.088 386.933,780.4 387.492,812.416 388.051,840.889 388.611,802.47 389.17,816.354 389.729,828.36 390.288,822.13 390.848,802.066 391.407,801.29 391.966,816.252 392.525,797.951 393.085,744.606 393.644,745.995 394.203,809.106 394.762,806.143 395.322,819.812 395.881,815.475 396.44,814.308 396.999,831.061 397.559,826.009 398.118,836.209 398.677,833.947 399.236,817.109 399.796,841.254 400.355,839.471 400.914,835.362 401.473,847.777 402.033,844.526 402.592,871.392 403.151,862.475 403.71,840.512 404.27,854.68 404.829,880.193 405.388,856.358 405.947,869.045 406.507,862.218 407.066,852.509 407.625,851.756 408.184,848.86 408.744,861.224 409.303,837.02 409.862,864.651 410.421,842.116 410.981,855.447 411.54,853.208 412.099,801.083 412.658,797.79 413.218,827.687 413.777,805.672 414.336,822.891 414.895,802.966 415.455,767.85 416.014,784.85 416.573,783.551 417.132,831.284 417.692,793.54 418.251,778.77 418.81,762.511 419.369,748.605 419.929,733.79 420.488,715.27 421.047,752.02 421.606,747.112 422.166,729.03 422.725,747.916 423.284,748.254 423.843,778.833 424.403,798.961 424.962,797.631 425.521,797.384 426.08,793.569 426.64,790.207 427.199,789.542 427.758,819.739 428.318,817.653 428.877,817.684 429.436,831.604 429.995,811.374 430.555,823.16 431.114,804.64 431.673,784.301 432.232,783.064 432.792,769.787 433.351,766.853 433.91,768.362 434.469,769.219 435.029,815.298 435.588,812.464 436.147,826.615 436.706,789.661 437.266,752.747 437.825,733.352 438.384,753.579 438.943,753.548 439.503,773.009 440.062,771.586 440.621,756.613 441.18,757.286 441.74,740.617 442.299,757.261 442.858,771.574 443.417,768.188 443.977,765.758 444.536,778.38 445.095,795.269 445.654,795.818 446.214,793.596 446.773,808.737 447.332,790.048 447.891,771.021 448.451,788.888 449.01,758.321 449.569,726.916 450.128,727.565 450.688,712.041 451.247,746.715 451.806,731.775 452.365,730.426 452.925,714.403 453.484,715.845 454.043,681.103 454.602,662.74 455.162,650.767 455.721,652.998 456.28,671.661 456.839,720.941 457.399,739.069 457.958,723.693 458.517,727.423 459.076,744.132 459.636,791.021 460.195,788.469 460.754,789.336 461.313,785.354 461.873,796.856 462.432,759.784 462.991,771.956 463.55,753.818 464.11,752.494 464.669,750.831 465.228,750.275 465.787,733.669 466.347,750.847 466.906,765.874 467.465,764.158 468.024,777.543 468.584,741.495 469.143,725.718 469.702,744.843 470.261,730.225 470.821,763.946 471.38,797.006 471.939,779.376 472.498,795.187 473.058,794.719 473.617,791.68 474.176,769.787 474.735,768.757 475.295,783.976 475.854,764.279 476.413,797.92 476.972,793.491 477.532,755.438 478.091,737.02 478.65,786.374 479.209,766.252 479.769,735.874 480.328,738.455 480.887,739.123 481.446,721.31 482.006,723.757 482.565,725.767 483.124,725.81 483.683,738.079 484.243,718.874 484.802,738.344 485.361,738.737 485.92,787.22 486.48,770.891 487.039,764.56 487.598,795.954 488.157,762.596 488.717,744.761 489.276,746.916 489.835,747.431 490.394,716.092 490.954,735.627 491.513,722.113 492.072,721.567 492.631,723.758 493.191,725.576 493.75,708.424 494.309,707.848 494.868,726.153 495.428,709.526 495.987,740.838 496.546,754.111 497.105,767.38 497.665,762.488 498.224,759.135 498.783,758.426 499.342,769.501 499.902,729.64 500.461,694.961 501.02,697.344 501.579,698.929 502.139,717.5 502.698,734.045 503.257,747.341 503.816,729.049 504.376,745.477 504.935,746.118 505.494,730.803 506.053,712.266 506.613,700.049 507.172,683.732 507.731,666.514 508.29,687.196 508.85,690.53 509.409,678.588 509.968,714.282 510.527,745.324 511.087,745.541 511.646,747.794 512.205,746.13 512.764,777.277 513.324,772.983 513.883,756.376 514.442,769.673 515.001,782.642 515.561,750.542 516.12,728.918 516.679,746.986 517.238,745.213 517.798,742.067 518.357,739.185 518.916,754.714 519.475,750.274 520.035,747.334 520.594,744.359 521.153,744.196 521.712,710.789 522.272,714.427 522.831,716.564 523.39,796.906 523.949,758.51 524.509,774.7 525.068,756.435 525.627,741.049 526.186,758.861 526.746,773.363 527.305,771.713 527.864,781.538 528.423,814.4 528.983,806.045 529.542,786.674 530.101,767.436 530.66,733.574 531.22,750.108 531.779,748.235 532.338,746.64 532.897,761.191 533.457,773.885 534.016,783.707 534.575,763.221 535.134,759.981 535.694,739.465 536.253,738.412 536.812,718.319 537.371,732.378 537.931,747.241 538.49,724.361 539.049,757.008 539.608,708.84 540.168,739.601 540.727,722.815 541.286,741.099 541.845,739.187 542.405,722.913 542.964,756.377 543.523,769.992 544.082,803.277 544.642,780.23 545.201,807.1 545.76,785.688 546.319,812.662 546.879,807.337 547.438,786.9 547.997,755.882 548.556,720.342 549.116,703.174 549.675,734.523 550.234,763.08 550.793,725.522 551.353,675.95 551.912,680.889 552.471,652.882 553.031,655.051 553.59,641.478 554.149,646.394 554.708,616.429 555.268,624.468 555.827,629.025 556.386,605.571 556.945,593.656 557.505,583.587 558.064,574.305 558.623,598.383 559.182,591.219 559.742,629.518 560.301,651.366 560.86,640.328 561.419,676.078 561.979,674.614 562.538,645.216 563.097,681.136 563.656,683.858 564.216,717.602 564.775,701.19 565.334,736.439 565.893,704.05 566.453,673.513 567.012,675.501 567.571,675.542 568.13,694.854 568.69,728.114 569.249,710.458 569.808,712.603 570.367,712.746 570.927,713.454 571.486,729.686 572.045,728.062 572.604,746.89 573.164,778.891 573.723,757.56 574.282,703.129 574.841,719.724 575.401,719.031 575.96,690.189 576.519,671.017 577.078,705.98 577.638,673.879 578.197,663.565 578.756,665.248 579.315,650.928 579.875,636.092 580.434,660.496 580.993,664.404 581.552,681.866 582.112,683.164 582.671,687.699 583.23,688.083 583.789,703.349 584.349,690.657 584.908,703.422 585.467,703.312 586.026,736.108 586.586,734.473 587.145,735.095 587.704,749.335 588.263,761.044 588.823,744.896 589.382,742.243 589.941,774.29 590.5,753.023 591.06,738.184 591.619,772.316 592.178,738.266 592.737,720.253 593.297,786.077 593.856,795.66 594.415,789.571 594.974,787.316 595.534,783.268 596.093,779.277 596.652,729.623 597.211,725.169 597.771,755.53 598.33,768.61 598.889,798.242 599.448,775.623 600.008,820.405 600.567,826.155 601.126,820.276 601.685,795.545 602.245,789.161 602.804,769.656 603.363,814.717 603.922,805.394 604.482,780.355 605.041,776.026 605.6,791.536 606.159,739.24 606.719,739.161 607.278,733.039 607.837,761.506 608.396,743.954 608.956,789.94 609.515,786.695 610.074,766.481 610.633,793.515 611.193,770.744 611.752,786.847 612.311,767.236 612.87,744.888 613.43,758.418 613.989,802.577 614.548,800.214 615.107,807.752 615.667,800.353 616.226,779.233 616.785,757.333 617.344,770.722 617.904,783.691 618.463,743.219 619.022,722.389 619.581,702.609 620.141,667.528 620.7,636.813 621.259,623.84 621.818,643.34 622.378,632.802 622.937,634.431 623.496,619.221 624.055,668.947 624.615,638.708 625.174,623.723 625.733,630.436 626.292,602.093 626.852,655.991 627.411,638.176 627.97,629.956 628.529,633.082 629.089,634.198 629.648,639.195 630.207,641.539 630.766,644.787 631.326,676.914 631.885,691.895 632.444,675.803 633.003,677.521 633.563,677.892 634.122,677.334 634.681,679.673 635.24,665.924 635.8,687.683 636.359,673.116 636.918,678.464 637.477,661.907 638.037,666.193 638.596,668.255 639.155,686.208 639.714,687.157 640.274,688.874 640.833,656.045 641.392,689.983 641.951,756.169 642.511,766.273 643.07,758.925 643.629,706.559 644.188,708.05 644.748,773.979 645.307,788.59 645.866,735.664 646.425,731.138 646.985,697.95 647.544,680.427 648.103,698.562 648.662,680.83 649.222,695.844 649.781,724.217 650.34,723.929 650.899,707.289 651.459,706.847 652.018,705.47 652.577,701.912 653.136,700.846 653.696,700.45 654.255,719.659 654.814,735.178 655.373,719.898 655.933,733.893 656.492,712.637 657.051,726.42 657.61,745.435 658.17,762.679 658.729,758.124 659.288,736.045 659.847,764.921 660.407,745.44 660.966,724.593 661.525,724.093 662.084,751.191 662.644,728.118 663.203,744.796 663.762,727.117 664.321,742.661 664.881,741.316 665.44,753.685 665.999,735.951 666.558,749.353 667.118,699.062 667.677,748.132 668.236,730.015 668.795,696.576 669.355,696.627 669.914,664.054 670.473,663.669 671.032,647.321 671.592,633.375 672.151,669.171 672.71,658.133 673.269,691.688 673.829,690.754 674.388,692.36 674.947,678.03 675.506,710.337 676.066,711.772 676.625,714.608 677.184,712.935 677.743,694.442 678.303,676.452 678.862,659.987 679.421,676.981 679.981,680.67 680.54,664.354 681.099,664.417 681.658,648.172 682.218,649.702 682.777,639.059 683.336,593.765 683.895,583.884 684.455,637.83 685.014,637.988 685.573,657.7 686.132,674.6 686.692,661.942 687.251,663.335 687.81,616.811 688.369,669.179 688.929,706.02 689.488,672.446 690.047,672.818 690.606,704.937 691.166,738.418 691.725,721.767 692.284,707.347 692.843,704.366 693.403,702.176 693.962,669.25 694.521,638.675 695.08,642.961 695.64,632.266 696.199,650.361 696.758,651.737 697.317,636.2 697.877,624.357 698.436,647.347 698.995,651.544 699.554,653.732 700.114,654.558 700.673,658.075 701.232,642.613 701.791,647.157 702.351,665.782 702.91,667.376 703.469,686.271 704.028,720.842 704.588,722.035 705.147,685.305 705.706,653.163 706.265,688.364 706.825,657.316 707.384,676.545 707.943,673.584 708.502,654.178 709.062,674.076 709.621,660.613 710.18,645.561 710.739,649.085 711.299,700.534 711.858,716.976 712.417,715.842 712.976,702.525 713.536,704.421 714.095,685.306 714.654,703.064 715.213,719.6 715.773,702.113 716.332,721.171 716.891,672.392 717.45,670.795 718.01,673.591 718.569,677.301 719.128,680.127 719.687,682.322 720.247,668.59 720.806,654.996 721.365,673.851 721.924,640.077 722.484,663.034 723.043,650.337 723.602,652.885 724.161,635.545 724.721,638.639 725.28,641.272 725.839,662.324 726.398,679.048 726.958,667.072 727.517,705.175 728.076,705.229 728.635,688.056 729.195,703.028 729.754,699.53 730.313,697.489 730.872,665.263 731.432,621.118 731.991,625.7 732.55,614.404 733.109,682.473 733.669,701.987 734.228,683.855 734.787,684.598 735.346,719.679 735.906,702.978 736.465,730.906 737.024,728.68 737.583,760.505 738.143,741.565 738.702,757.933 739.261,772.452 739.82,768.236 740.38,778.679 740.939,772.463 741.498,770.708 742.057,798.718 742.617,838.311 743.176,846.817 743.735,873.476 744.294,878.36 744.854,882.926 745.413,872.995 745.972,861.627 746.531,854.592 747.091,864.038 747.65,854.816 748.209,845.884 748.768,805.522 749.328,815.316 749.887,808.95 750.446,800.565 751.005,805.169 751.565,782.294 752.124,746.21 752.683,759.889 753.242,736.772 753.802,700.633 754.361,670.502 754.92,655.427 755.479,642.248 756.039,659.209 756.598,662.704 757.157,697.004 757.716,677.949 758.276,648.339 758.835,650.873 759.394,683.987 759.953,685.355 760.513,667.89 761.072,633.391 761.631,670.304 762.19,704.696 762.75,703.1 763.309,716.699 763.868,729.914 764.427,747.634 764.987,729.187 765.546,709.241 766.105,706.939 766.664,689.917 767.224,686.756 767.783,700.101 768.342,651.001 768.901,623.691 769.461,628.021 770.02,643.735 770.579,615.297 771.138,616.88 771.698,636.665 772.257,627.125 772.816,535.287 773.375,540.822 773.935,515.212 774.494,523.794 775.053,532.689 775.612,522.702 776.172,516.37 776.731,543.024 777.29,550.339 777.849,544.401 778.409,550.48 778.968,542.299 779.527,551.655 780.086,559.211 780.646,597.226 781.205,619.977 781.764,608.326 782.323,596.201 782.883,632.785 783.442,652.12 784.001,653.067 784.56,669.807 785.12,657.392 785.679,614.679 786.238,636.457 786.797,688.995 787.357,687.462 787.916,722.35 788.475,702.248 789.034,690.953 789.594,705.721 790.153,704.273 790.712,714.18 791.271,703.648 791.831,702.291 792.39,698.003 792.949,731.148 793.508,732.51 794.068,730.463 794.627,681.6 795.186,683.91 795.745,685.868 796.305,683.176 796.864,715.126 797.423,710.642 797.982,691.728 798.542,692.021 799.101,692.446 799.66,678.627 800.219,662.068 800.779,650.678 801.338,589.273 801.897,595.49 802.456,635.034 803.016,652.909 803.575,656.523 804.134,672.681 804.693,658.532 805.253,658.691 805.812,676.332 806.371,674.725 806.931,677.805 807.49,626 808.049,614.771 808.608,636.867 809.168,640.224 809.727,643.741 810.286,658.762 810.845,662.046 811.405,676.966 811.964,676.428 812.523,662.844 813.082,663.926 813.642,665.368 814.201,680.312 814.76,695.52 815.319,661.327 815.879,662.892 816.438,665.95 816.997,687 817.556,704.706 818.116,700.601 818.675,667.687 819.234,688.282 819.793,706.759 820.353,705.356 820.912,675.308 821.471,721.311 822.03,736.894 822.59,750.68 823.149,766.639 823.708,760.574 824.267,753.394 824.827,733.837 825.386,762.155 825.945,772.387 826.504,735.822 827.064,717.723 827.623,686.455 828.182,656.039 828.741,654.06 829.301,654.391 829.86,672.071 830.419,660.738 830.978,647.878 831.538,651.625 832.097,685.963 832.656,653.566 833.215,670.581 833.775,658.338 834.334,676.376 834.893,678.43 835.452,712.003 836.012,693.886 836.571,679.528 837.13,692.076 837.689,710.201 838.249,726.398 838.808,769.961 839.367,732.769 839.926,731.975 840.486,746.765 841.045,808.536 841.604,815.494 842.163,806.614 842.723,785.891 843.282,797.496 843.841,757.219 844.4,704.112 844.96,702.41 845.519,722.751 846.078,706.498 846.637,705.744 847.197,705.405 847.756,702.096 848.315,684.992 848.874,701.093 849.434,669.586 849.993,671.355 850.552,638.372 851.111,638.342 851.671,655.021 852.23,673.471 852.789,705.68 853.348,702.9 853.908,736.335 854.467,720.649 855.026,731.601 855.585,711.01 856.145,740.634 856.704,754.116 857.263,782.011 857.822,774.335 858.382,801.34 858.941,794.847 859.5,789.657 860.059,764.729 860.619,731.3 861.178,697.347 861.737,678.806 862.296,645.763 862.856,615.733 863.415,601.119 863.974,617.764 864.533,637.185 865.093,637.603 865.652,655.036 866.211,657.743 866.77,659.196 867.33,625.678 867.889,611.395 868.448,678.127 869.007,663.251 869.567,682.167 870.126,632.227 870.685,639.361 871.244,656.386 871.804,655.478 872.363,658.23 872.922,655.106 873.481,669.193 874.041,670.423 874.6,640.797 875.159,644.414 875.718,643.157 876.278,660.372 876.837,661.792 877.396,630.815 877.955,616.859 878.515,624.105 879.074,621.085 879.633,606.99 880.192,642.408 880.752,661.089 881.311,664.412 881.87,670.477 882.429,688.157 882.989,738.505 883.548,752.984 884.107,751.064 884.666,781.257 885.226,760.298 885.785,753.098 886.344,721.03 886.903,735.431 887.463,750.171 888.022,762.357 888.581,728.168 889.14,723.314 889.7,705.13 890.259,684.316 890.818,700.447 891.377,697.291 891.937,664.97 892.496,682.105 893.055,683.326 893.614,700.008 894.174,683.322 894.733,650.381 895.292,603.907 895.851,607.311 896.411,611.105 896.97,597.684 897.529,601.285 898.088,602.989 898.648,607.181 899.207,592.303 899.766,584.622 900.325,658.731 900.885,676.981 901.444,662.88 902.003,664.337 902.562,677.985 903.122,709.002 903.681,693.886 904.24,727.898 904.799,710.756 905.359,709.835 905.918,643.973 906.477,645.615 907.036,631.044 907.596,615.986 908.155,620.999 908.714,672.196 909.273,658.153 909.833,692.71 910.392,675.897 910.951,694.325 911.51,709.117 912.07,662.632 912.629,645.211 913.188,666.619 913.747,667.749 914.307,669.013 914.866,685.254 915.425,654.072 915.984,675.142 916.544,672.862 917.103,674.898 917.662,676.355 918.221,674.519 918.781,678.258 919.34,663.818 919.899,682.127 920.458,666.406 921.018,695.762 921.577,691.897 922.136,694.435 922.695,695.549 923.255,691.954 923.814,709.749 924.373,724.554 924.932,737.442 925.492,733.669 926.051,733.292 926.61,747.335 927.169,761.189 927.729,709.701 928.288,706.447 928.847,703.91 929.406,720.908 929.966,720.799 930.525,749.152 931.084,774.872 931.644,799.184 932.203,823.316 932.762,813.919 933.321,808.393 933.881,815.532 934.44,810.576 934.999,789.003 935.558,734.993 936.118,733.723 936.677,713.811 937.236,698.164 937.795,681.988 938.355,698.419 938.914,712.872 939.473,682.035 940.032,681.171 940.592,678.731 941.151,709.096 941.71,691.804 942.269,708.445 942.829,710.977 943.388,695.165 943.947,680.648 944.506,714.582 945.066,715.6 945.625,692.843 946.184,691.891 946.743,723.939 947.303,704.865 947.862,703.837 948.421,704.244 948.98,688.322 949.54,687.821 950.099,688.642 950.658,705.869 951.217,737.76 951.777,702.94 952.336,670.429 952.895,667.094 953.454,694.765 954.014,727.537 954.573,708.923 955.132,725.035 955.691,672.975 956.251,690.871 956.81,662.01 957.369,661.896 957.928,614.88 958.488,634.258 959.047,634.389 959.606,621.602 960.165,625.565 960.725,594.865 961.284,566.346 961.843,588.219 962.402,622.981 962.962,657.759 963.521,660.852 964.08,679.859 964.639,694.842 965.199,694.151 965.758,708.588 966.317,720.578 966.876,700.982 967.436,717.788 967.995,700.743 968.554,683.505 969.113,717.182 969.673,731.113 970.232,709.288 970.791,707.128 971.35,718.815 971.91,699.31 972.469,732.407 973.028,762.425 973.587,739.995 974.147,785.167 974.706,747.65 975.265,712.491 975.824,725.971 976.384,756.548 976.943,755.28 977.502,737.667 978.061,718.508 978.621,716.612 979.18,720.212 979.739,699.205 980.298,698.308 980.858,695.542 981.417,695.761 981.976,730.904 982.535,726.175 983.095,726.59 983.654,725.076 984.213,739.87 984.772,771.178 985.332,783.53 985.891,762.938 986.45,758.72 987.009,738.042 987.569,717.556 988.128,714.432 988.687,679.485 989.246,680.613 989.806,710.9 990.365,723.5 990.924,706.165 991.483,701.311 992.043,715.593 992.602,697.163 993.161,746.111 993.72,758.08 994.28,752.849 994.839,747.86 995.398,730.877 995.957,726.293 996.517,686.638 997.076,683.487 997.635,652.279 998.194,654.013 998.754,669.276 999.313,699.884 999.872,699.925 1000.43,664.316 1000.99,682.873 1001.55,684.629 1002.11,718.419 1002.67,684.334 1003.23,687.226 1003.79,688.344 1004.35,673.559 1004.91,674.415 1005.46,688.701 1006.02,689.337 1006.58,689.085 1007.14,704.588 1007.7,702.198 1008.26,700.699 1008.82,715.818 1009.38,729.513 1009.94,743.764 1010.5,738.18 1011.06,735.42 1011.62,782.399 1012.18,792.36 1012.73,787.764 1013.29,799.476 1013.85,793.019 1014.41,770.186 1014.97,766.834 1015.53,793.734 1016.09,722.511 1016.65,719.435 1017.21,702.512 1017.77,700.697 1018.33,698.825 1018.89,698.187 1019.45,650.641 1020.01,636.32 1020.56,623.539 1021.12,626.053 1021.68,660.523 1022.24,648.003 1022.8,638.377 1023.36,640.259 1023.92,637.768 1024.48,655.211 1025.04,656.557 1025.6,674.642 1026.16,626.043 1026.72,628.546 1027.28,632.517 1027.83,633.381 1028.39,671.913 1028.95,687.532 1029.51,685.725 1030.07,655.311 1030.63,624.084 1031.19,660.054 1031.75,676.319 1032.31,743.734 1032.87,742.113 1033.43,740.469 1033.99,707.328 1034.55,705.615 1035.1,706.514 1035.66,720.341 1036.22,716.185 1036.78,713.846 1037.34,696.018 1037.9,697.796 1038.46,666.228 1039.02,649.259 1039.58,634.49 1040.14,655.086 1040.7,671.006 1041.26,641.257 1041.82,659.066 1042.38,611.845 1042.93,649.285 1043.49,685.167 1044.05,668.244 1044.61,603.775 1045.17,623.832 1045.73,645.221 1046.29,633.204 1046.85,635.121 1047.41,621.061 1047.97,607.429 1048.53,615.012 1049.09,605.334 1049.65,625.588 1050.2,643.865 1050.76,645.93 1051.32,677.226 1051.88,644.178 1052.44,659.161 1053,660.514 1053.56,694.47 1054.12,688.797 1054.68,673.704 1055.24,691.35 1055.8,674.773 1056.36,675.465 1056.92,672.748 1057.48,660.626 1058.03,631.751 1058.59,617.303 1059.15,638.762 1059.71,644.431 1060.27,648.131 1060.83,638.31 1061.39,675.872 1061.95,677.476 1062.51,662.479 1063.07,664.654 1063.63,666.332 1064.19,686.026 1064.75,683.2 1065.3,698.126 1065.86,680.541 1066.42,695.141 1066.98,694.636 1067.54,678.871 1068.1,679.13 1068.66,695.04 1069.22,710.858 1069.78,646.311 1070.34,697.08 1070.9,697.334 1071.46,730.815 1072.02,730.236 1072.57,728.258 1073.13,772.08 1073.69,767.42 1074.25,762.643 1074.81,774.78 1075.37,770.944 1075.93,768.634 1076.49,750.314 1077.05,717.715 1077.61,681.858 1078.17,665.639 1078.73,681.709 1079.29,664.965 1079.85,662.592 1080.4,662.299 1080.96,713.682 1081.52,726.548 1082.08,707.475 1082.64,769.927 1083.2,749.795 1083.76,778.202 1084.32,757.301 1084.88,739.446 1085.44,705.908 1086,707.291 1086.56,674.531 1087.12,690.82 1087.67,710.093 1088.23,708.111 1088.79,694.412 1089.35,709.005 1089.91,691.673 1090.47,692.407 1091.03,705.641 1091.59,704.756 1092.15,732.552 1092.71,746.608 1093.27,776.878 1093.83,754.226 1094.39,797.189 1094.94,793.39 1095.5,756.266 1096.06,755.648 1096.62,732.484 1097.18,729.133 1097.74,712.347 1098.3,712.181 1098.86,725.046 1099.42,685.6 1099.98,651.263 1100.54,668.961 1101.1,672.582 1101.66,689.134 1102.22,687.787 1102.77,651.529 1103.33,670.434 1103.89,701.174 1104.45,666.687 1105.01,668.051 1105.57,633.899 1106.13,684.324 1106.69,702.164 1107.25,686.366 1107.81,667.194 1108.37,668.971 1108.93,680.857 1109.49,664.16 1110.04,663.819 1110.6,661.575 1111.16,666.185 1111.72,700.646 1112.28,681.962 1112.84,718.521 1113.4,668.94 1113.96,620.295 1114.52,637.678 1115.08,624.592 1115.64,627.053 1116.2,631.389 1116.76,651.766 1117.31,653.615 1117.87,670.171 1118.43,650.019 1118.99,668.313 1119.55,652.565 1120.11,669.784 1120.67,667.915 1121.23,658.307 1121.79,658.286 1122.35,659.666 1122.91,646.802 1123.47,647.813 1124.03,650.561 1124.59,629.88 1125.14,630.861 1125.7,666.08 1126.26,685.482 1126.82,653.798 1127.38,668.969 1127.94,653.734 1128.5,619.366 1129.06,591.631 1129.62,644.794 1130.18,645.278 1130.74,643.681 1131.3,645.793 1131.86,647.184 1132.41,651.456 1132.97,655.431 1133.53,656.718 1134.09,674.209 1134.65,659.1 1135.21,646.172 1135.77,632.86 1136.33,623.254 1136.89,642.901 1137.45,678.401 1138.01,712.787 1138.57,727.633 1139.13,706.755 1139.68,705.78 1140.24,708.333 1140.8,721.822 1141.36,703.991 1141.92,736.287 1142.48,701.919 1143.04,686.579 1143.6,672.438 1144.16,673.978 1144.72,691.197 1145.28,677.363 1145.84,647.841 1146.4,637.661 1146.96,604.688 1147.51,608.118 1148.07,630.285 1148.63,596.089 1149.19,601.866 1149.75,592.061 1150.31,613.705 1150.87,619.201 1151.43,625.266 1151.99,628.653 1152.55,632.673 1153.11,619.394 1153.67,640.234 1154.23,627.274 1154.78,612.657 1155.34,629.932 1155.9,646.324 1156.46,633.042 1157.02,650.32 1157.58,653.802 1158.14,638.57 1158.7,626.16 1159.26,611.663 1159.82,567.688 1160.38,575.333 1160.94,597.291 1161.5,584.024 1162.05,591.534 1162.61,581.627 1163.17,605.703 1163.73,607.555 1164.29,644.366 1164.85,678.641 1165.41,691.93 1165.97,691.923 1166.53,675.156 1167.09,677.422 1167.65,708.578 1168.21,704.963 1168.77,673.551 1169.33,675.227 1169.88,710.655 1170.44,710.698 1171,710.059 1171.56,707.481 1172.12,738.101 1172.68,749.364 1173.24,715.973 1173.8,720.208 1174.36,751.234 1174.92,749.747 1175.48,809.108 1176.04,784.806 1176.6,794.581 1177.15,741.34 1177.71,738.093 1178.27,751.318 1178.83,746.883 1179.39,759.612 1179.95,753.715 1180.51,748.81 1181.07,731.101 1181.63,744.234 1182.19,691.896 1182.75,695.3 1183.31,695.822 1183.87,665.098 1184.43,650.159 1184.98,607.584 1185.54,630.743 1186.1,632.949 1186.66,650.989 1187.22,652.265 1187.78,655.119 1188.34,656.29 1188.9,719.874 1189.46,716.111 1190.02,696.951 1190.58,745.318 1191.14,743.19 1191.7,738.738 1192.25,734.636 1192.81,696.947 1193.37,662.457 1193.93,666.675 1194.49,635.091 1195.05,634.765 1195.61,640.654 1196.17,690.267 1196.73,690.284 1197.29,705.554 1197.85,720.089 1198.41,715.031 1198.97,698.4 1199.52,699.325 1200.08,686.042 1200.64,667.187 1201.2,666.898 1201.76,651.834 1202.32,617.078 1202.88,653.571 1203.44,655.789 1204,670.393 1204.56,689.96 1205.12,674.707 1205.68,691.117 1206.24,708.523 1206.8,708.445 1207.35,704.121 1207.91,702.435 1208.47,733.551 1209.03,749.366 1209.59,776.363 1210.15,803.609 1210.71,797.817 1211.27,825.158 1211.83,785.926 1212.39,764.778 1212.95,760.13 1213.51,727.699 1214.07,720.797 1214.62,717.603 1215.18,681.957 1215.74,696.872 1216.3,692.158 1216.86,670.22 1217.42,652.77 1217.98,703.529 1218.54,721.77 1219.1,736.512 1219.66,750.816 1220.22,747.588 1220.78,744.899 1221.34,728.703 1221.89,694.532 1222.45,695.471 1223.01,693.605 1223.57,697.515 1224.13,667.012 1224.69,665.933 1225.25,652.545 1225.81,639.588 1226.37,625.967 1226.93,581.931 1227.49,585.789 1228.05,554.692 1228.61,563.28 1229.17,585.126 1229.72,540.156 1230.28,564.035 1230.84,590.238 1231.4,598.229 1231.96,637.681 1232.52,641.115 1233.08,614.467 1233.64,653.909 1234.2,655.34 1234.76,672.146 1235.32,670.623 1235.88,702.835 1236.44,732.921 1236.99,733.365 1237.55,759.344 1238.11,744.641 1238.67,727.5 1239.23,722.6 1239.79,703.409 1240.35,673.469 1240.91,676.477 1241.47,644.456 1242.03,676.866 1242.59,707.261 1243.15,706.35 1243.71,721.268 1244.26,735.934 1244.82,702.691 1245.38,698.199 1245.94,681.709 1246.5,665.757 1247.06,652.055 1247.62,655.961 1248.18,677.495 1248.74,691.926 1249.3,693.809 1249.86,708.634 1250.42,689.547 1250.98,689.084 1251.54,656.491 1252.09,674.214 1252.65,658.152 1253.21,659.324 1253.77,660.874 1254.33,682.134 1254.89,665.603 1255.45,698.99 1256.01,665.988 1256.57,703.101 1257.13,690.831 1257.69,674.83 1258.25,722.992 1258.81,754.351 1259.36,715.969 1259.92,730.654 1260.48,719.37 1261.04,716.57 1261.6,715.07 1262.16,663.163 1262.72,696.594 1263.28,727.768 1263.84,677.079 1264.4,697.632 1264.96,663.58 1265.52,682.933 1266.08,683.382 1266.63,634.892 1267.19,665.664 1267.75,684.81 1268.31,688.432 1268.87,667.92 1269.43,634.602 1269.99,624.92 1270.55,626.292 1271.11,642.713 1271.67,662.555 1272.23,662.659 1272.79,681.034 1273.35,683.187 1273.91,665.097 1274.46,664.911 1275.02,660.932 1275.58,696.274 1276.14,678.314 1276.7,673.029 1277.26,673.784 1277.82,690.408 1278.38,674.522 1278.94,693.625 1279.5,677.764 1280.06,724.779 1280.62,737.563 1281.18,733.789 1281.73,715.136 1282.29,708.869 1282.85,687.243 1283.41,720.899 1283.97,733.152 1284.53,777.74 1285.09,740.323 1285.65,688.52 1286.21,689.65 1286.77,688.18 1287.33,672.773 1287.89,673.538 1288.45,676.307 1289,688.927 1289.56,722.119 1290.12,734.901 1290.68,714.07 1291.24,715.846 1291.8,715.164 1292.36,697.42 1292.92,698.338 1293.48,699.014 1294.04,682.964 1294.6,714.957 1295.16,728.506 1295.72,756.225 1296.28,769.168 1296.83,750.671 1297.39,748.682 1297.95,713.846 1298.51,715.217 1299.07,714.254 1299.63,731.48 1300.19,727.179 1300.75,708.375 1301.31,708.113 1301.87,722.335 1302.43,721.051 1302.99,716.134 1303.55,680.998 1304.1,680.575 1304.66,682.339 1305.22,697.043 1305.78,726.498 1306.34,737.523 1306.9,752.236 1307.46,782.772 1308.02,779.659 1308.58,779.729 1309.14,758.995 1309.7,756.055 1310.26,705.575 1310.82,720.096 1311.38,732.33 1311.93,728.178 1312.49,724.971 1313.05,694.297 1313.61,707.866 1314.17,703.58 1314.73,733.541 1315.29,712.357 1315.85,712.35 1316.41,726.106 1316.97,721.763 1317.53,654.576 1318.09,736.864 1318.65,718.694 1319.2,748.899 1319.76,748.218 1320.32,759.252 1320.88,752.838 1321.44,731.754 1322,715.6 1322.56,699.631 1323.12,729.007 1323.68,741.27 1324.24,755.321 1324.8,767.972 1325.36,775.582 1325.92,721.089 1326.47,716.414 1327.03,744.771 1327.59,755.315 1328.15,700.111 1328.71,665.332 1329.27,642.577 1329.83,644.794 1330.39,647.422 1330.95,629.762 1331.51,616.948 1332.07,599.973 1332.63,587.701 1333.19,593.998 1333.75,614.918 1334.3,616.58 1334.86,586.224 1335.42,624.735 1335.98,626.917 1336.54,599.621 1337.1,605.357 1337.66,623.989 1338.22,580.813 1338.78,559.566 1339.34,552.57 1339.9,547.64 1340.46,555.298 1341.02,546.161 1341.57,550.5 1342.13,556.495 1342.69,564.595 1343.25,571.892 1343.81,544.648 1344.37,550.003 1344.93,576.141 1345.49,580.449 1346.05,588.369 1346.61,607.314 1347.17,613.068 1347.73,617.864 1348.29,620.658 1348.84,625.374 1349.4,619.826 1349.96,608.677 1350.52,598.939 1351.08,604.171 1351.64,593.558 1352.2,583.766 1352.76,541.487 1353.32,529.217 1353.88,522.911 1354.44,498.704 1355,524.135 1355.56,532.567 1356.12,540.536 1356.67,516.822 1357.23,528.131 1357.79,588.016 1358.35,610.791 1358.91,650.648 1359.47,652.27 1360.03,638.239 1360.59,647.487 1361.15,632.88 1361.71,617.167 1362.27,605.653 1362.83,627.912 1363.39,634.125 1363.94,641.622 1364.5,641.444 1365.06,643.787 1365.62,658.379 1366.18,664.968 1366.74,680.376 1367.3,682.309 1367.86,716.845 1368.42,717.733 1368.98,731.777 1369.54,714.341 1370.1,746.099 1370.66,745.637 1371.21,746.474 1371.77,759.319 1372.33,758.107 1372.89,753.547 1373.45,747.094 1374.01,745.754 1374.57,778.049 1375.13,756.19 1375.69,753.475 1376.25,748.896 1376.81,760.193 1377.37,756.405 1377.93,753.441 1378.49,752.048 1379.04,753.525 1379.6,750.258 1380.16,697.297 1380.72,680.112 1381.28,679.432 1381.84,680.637 1382.4,683.97 1382.96,728.723 1383.52,709.655 1384.08,708.851 1384.64,672.305 1385.2,671.79 1385.76,704 1386.31,706.512 1386.87,686.316 1387.43,701.283 1387.99,701.586 1388.55,712.902 1389.11,757.783 1389.67,754.686 1390.23,730.709 1390.79,728.045 1391.35,741.446 1391.91,720.168 1392.47,749.461 1393.03,745.618 1393.58,758.403 1394.14,738.902 1394.7,687.393 1395.26,733.647 1395.82,715.281 1396.38,713.853 1396.94,708.91 1397.5,706.477 1398.06,707.518 1398.62,738.17 1399.18,735.783 1399.74,737.127 1400.3,750.662 1400.86,728.999 1401.41,724.21 1401.97,706.834 1402.53,690.718 1403.09,686.76 1403.65,665.999 1404.21,631.281 1404.77,648.188 1405.33,666.818 1405.89,682.767 1406.45,652.405 1407.01,606.554 1407.57,544.553 1408.13,572.758 1408.68,563.731 1409.24,569.377 1409.8,607.512 1410.36,626.291 1410.92,643.971 1411.48,629.388 1412.04,635.266 1412.6,637.933 1413.16,643.065 1413.72,645.724 1414.28,663.758 1414.84,662.271 1415.4,663.213 1415.95,678.475 1416.51,694.713 1417.07,696.274 1417.63,696.485 1418.19,662.471 1418.75,663.08 1419.31,675.256 1419.87,677.859 1420.43,664.892 1420.99,668.364 1421.55,669.279 1422.11,681.928 1422.67,692.095 1423.23,694.815 1423.78,695.434 1424.34,677.114 1424.9,676.913 1425.46,675.168 1426.02,658.995 1426.58,691.9 1427.14,643.547 1427.7,710.31 1428.26,726.481 1428.82,741.148 1429.38,737.52 1429.94,737.145 1430.5,716.668 1431.05,715.726 1431.61,747.156 1432.17,742.548 1432.73,739.157 1433.29,751.416 1433.85,766.169 1434.41,731.693 1434.97,718.048 1435.53,731.789 1436.09,728.262 1436.65,726.323 1437.21,708.943 1437.77,690.515 1438.33,657.44 1438.88,659.756 1439.44,646.342 1440,646.619 1440.56,648.575 1441.12,664.459 1441.68,664.868 1442.24,663.041 1442.8,680.255 1443.36,662.492 1443.92,666.05 1444.48,683.833 1445.04,698.606 1445.6,698.376 1446.15,665.875 1446.71,665.313 1447.27,649.145 1447.83,651.591 1448.39,653.658 1448.95,621.004 1449.51,608.767 1450.07,597.039 1450.63,570.791 1451.19,592.061 1451.75,582.412 1452.31,557.403 1452.87,563.702 1453.42,565.896 1453.98,572.484 1454.54,595.041 1455.1,630.736 1455.66,649.836 1456.22,650.636 1456.78,653.694 1457.34,653.532 1457.9,667.174 1458.46,667.338 1459.02,685.216 1459.58,701.202 1460.14,731.922 1460.7,746.196 1461.25,727.902 1461.81,740.479 1462.37,741.063 1462.93,724.569 1463.49,692.281 1464.05,723.204 1464.61,708.522 1465.17,724.208 1465.73,720.964 1466.29,734.379 1466.85,711.992 1467.41,760.396 1467.97,772.194 1468.52,782.71 1469.08,763.943 1469.64,791.211 1470.2,784.961 1470.76,777.277 1471.32,786.956 1471.88,748.779 1472.44,728.206 1473,722.627 1473.56,702.485 1474.12,685.393 1474.68,682.274 1475.24,715.543 1475.79,700.213 1476.35,685.049 1476.91,685.828 1477.47,651.947 1478.03,655.026 1478.59,657.411 1479.15,692.46 1479.71,708.464 1480.27,708.286 1480.83,735.523 1481.39,731.815 1481.95,713.309 1482.51,697.109 1483.07,676.052 1483.62,691.867 1484.18,709.029 1484.74,690.441 1485.3,675.178 1485.86,676.887 1486.42,677.043 1486.98,644.535 1487.54,631.074 1488.1,652.754 1488.66,638.78 1489.22,610.255 1489.78,630.716 1490.34,699.315 1490.89,732.291 1491.45,744.506 1492.01,742.688 1492.57,757.175 1493.13,767.214 1493.69,824.058 1494.25,818.026 1494.81,778.37 1495.37,790.14 1495.93,788.588 1496.49,769.677 1497.05,720.318 1497.61,668.07 1498.16,668.991 1498.72,704.092 1499.28,670.72 1499.84,690.193 1500.4,724.069 1500.96,721.592 1501.52,733.66 1502.08,732.28 1502.64,746.349 1503.2,740.371 1503.76,736.256 1504.32,717.356 1504.88,749.043 1505.44,748.208 1505.99,751.151 1506.55,764.622 1507.11,741.325 1507.67,755.756 1508.23,751.835 1508.79,778.462 1509.35,773.554 1509.91,706.275 1510.47,674.445 1511.03,689.82 1511.59,691.656 1512.15,735.532 1512.71,730.841 1513.26,744.686 1513.82,740.861 1514.38,720.776 1514.94,718.916 1515.5,701.82 1516.06,732.786 1516.62,711.474 1517.18,691.784 1517.74,642.441 1518.3,627.241 1518.86,660.116 1519.42,662.673 1519.98,648.642 1520.53,649.518 1521.09,650.45 1521.65,683.367 1522.21,683.71 1522.77,665.561 1523.33,633.17 1523.89,619.777 1524.45,623.421 1525.01,593.022 1525.57,580.075 1526.13,589.244 1526.69,611.444 1527.25,634.061 1527.81,652.571 1528.36,625.551 1528.92,630.665 1529.48,668.709 1530.04,669.681 1530.6,638.564 1531.16,656.852 1531.72,707.996 1532.28,712.018 1532.84,677.628 1533.4,693.305 1533.96,707.207 1534.52,704.703 1535.08,702.758 1535.63,703.189 1536.19,701.411 1536.75,688.276 1537.31,704.004 1537.87,719.628 1538.43,736.285 1538.99,734.772 1539.55,732.559 1540.11,712.998 1540.67,691.837 1541.23,693.476 1541.79,709.055 1542.35,706.601 1542.9,701.364 1543.46,715.326 1544.02,696.625 1544.58,674.971 1545.14,673.892 1545.7,673.109 1546.26,657.597 1546.82,658.353 1547.38,673.517 1547.94,673.94 1548.5,677.011 1549.06,628.406 1549.62,619.406 1550.18,625.388 1550.73,626.597 1551.29,640.797 1551.85,656.867 1552.41,657.156 1552.97,679.418 1553.53,713.38 1554.09,695.967 1554.65,679.319 1555.21,696.496 1555.77,710.986 1556.33,711.118 1556.89,741.038 1557.45,738.92 1558,740.891 1558.56,720.084 1559.12,704.447 1559.68,703.606 1560.24,701.158 1560.8,718.49 1561.36,750.113 1561.92,744.291 1562.48,739.993 1563.04,720.918 1563.6,735.238 1564.16,716.32 1564.72,681.765 1565.28,682.589 1565.83,679.595 1566.39,697.765 1566.95,710.821 1567.51,722.945 1568.07,750.956 1568.63,782.013 1569.19,765.199 1569.75,763.575 1570.31,746.912 1570.87,712.465 1571.43,711.922 1571.99,711.692 1572.55,723.255 1573.1,707.522 1573.66,722.51 1574.22,719.281 1574.78,698.237 1575.34,679.486 1575.9,649.22 1576.46,670.583 1577.02,703.685 1577.58,701.046 1578.14,700.295 1578.7,699.247 1579.26,665.514 1579.82,695.282 1580.37,707.256 1580.93,687.822 1581.49,682.433 1582.05,667.583 1582.61,685.204 1583.17,668.794 1583.73,687.47 1584.29,672.32 1584.85,672.799 1585.41,644.477 1585.97,614.494 1586.53,632.061 1587.09,630.908 1587.65,634.22 1588.2,653.819 1588.76,657.052 1589.32,643.304 1589.88,643.873 1590.44,646.31 1591,649.075 1591.56,648 1592.12,647.079 1592.68,650.116 1593.24,637.729 1593.8,637.509 1594.36,624.726 1594.92,624.57 1595.47,675.573 1596.03,643.919 1596.59,678.871 1597.15,694.872 1597.71,665.566 1598.27,667.984 1598.83,685.631 1599.39,702.797 1599.95,698.166 1600.51,728.757 1601.07,693.675 1601.63,691.366 1602.19,672.509 1602.74,651.124 1603.3,636.067 1603.86,658.141 1604.42,671.842 1604.98,637.473 1605.54,655.988 1606.1,709.533 1606.66,706.427 1607.22,723.949 1607.78,722.383 1608.34,723.37 1608.9,736.635 1609.46,734.049 1610.02,730.52 1610.57,761.89 1611.13,757.062 1611.69,700.435 1612.25,713.583 1612.81,697.238 1613.37,695.286 1613.93,696.858 1614.49,659.541 1615.05,675.601 1615.61,727.42 1616.17,707.058 1616.73,739.976 1617.29,754.187 1617.84,749.46 1618.4,729.657 1618.96,726.964 1619.52,707.321 1620.08,709.732 1620.64,691.915 1621.2,708.732 1621.76,664.273 1622.32,664.971 1622.88,696.971 1623.44,714.544 1624,715.368 1624.56,713.803 1625.11,695.771 1625.67,730.432 1626.23,727.492 1626.79,710.965 1627.35,709.844 1627.91,754.434 1628.47,753.356 1629.03,761.504 1629.59,773.489 1630.15,751.486 1630.71,733.652 1631.27,760.351 1631.83,756.403 1632.39,734.553 1632.94,715.283 1633.5,679.547 1634.06,679.18 1634.62,695.333 1635.18,696.943 1635.74,694.492 1636.3,693.081 1636.86,725.407 1637.42,723.497 1637.98,707.494 1638.54,691.73 1639.1,658.772 1639.66,656.136 1640.21,693.832 1640.77,692.615 1641.33,677.483 1641.89,695.243 1642.45,675.061 1643.01,661.071 1643.57,643.598 1644.13,628.417 1644.69,617.231 1645.25,672.87 1645.81,687.315 1646.37,717.474 1646.93,731.442 1647.48,776.258 1648.04,738.714 1648.6,701.023 1649.16,732.018 1649.72,715.318 1650.28,633.644 1650.84,649.534 1651.4,634.586 1651.96,608.041 1652.52,595.495 1653.08,631.152 1653.64,637.631 1654.2,655.337 1654.76,655.709 1655.31,642.142 1655.87,678.113 1656.43,666.957 1656.99,651.473 1657.55,636.734 1658.11,654.599 1658.67,685.433 1659.23,683.247 1659.79,652.806 1660.35,654.497 1660.91,656.953 1661.47,658.318 1662.03,656.79 1662.58,659.452 1663.14,677.412 1663.7,679.579 1664.26,664.793 1664.82,636.636 1665.38,624.48 1665.94,614.402 1666.5,616.055 1667.06,620.11 1667.62,639.453 1668.18,641.172 1668.74,624.792 1669.3,609.597 1669.85,577.642 1670.41,581.714 1670.97,567.905 1671.53,557.579 1672.09,566.702 1672.65,574.891 1673.21,585.721 1673.77,575.157 1674.33,567.151 1674.89,557.202 1675.45,582.865 1676.01,591.025 1676.57,627.777 1677.13,645.946 1677.68,615.43 1678.24,622.59 1678.8,657.872 1679.36,644.787 1679.92,631.543 1680.48,637.7 1681.04,657.893 1681.6,640.477 1682.16,644.478 1682.72,627.714 1683.28,634.813 1683.84,637.519 1684.4,656.425 1684.95,655.841 1685.51,656.308 1686.07,675.478 1686.63,662.65 1687.19,681.857 1687.75,666.562 1688.31,649.545 1688.87,630.154 1689.43,633.249 1689.99,652.338 1690.55,634.789 1691.11,650.252 1691.67,701.459 1692.23,717.111 1692.78,716.849 1693.34,745.837 1693.9,728.585 1694.46,756.726 1695.02,751.627 1695.58,796.149 1696.14,792.024 1696.7,805.075 1697.26,781.526 1697.82,786.816 1698.38,748.947 1698.94,747.539 1699.5,729.461 1700.05,759.502 1700.61,770.977 1701.17,782.984 1701.73,795.882 1702.29,790.877 1702.85,769.536 1703.41,798.808 1703.97,788.035 1704.53,782.725 1705.09,777.063 1705.65,768.928 1706.21,776.959 1706.77,772.84 1707.32,733.749 1707.88,726.3 1708.44,721.508 1709,718.178 1709.56,713.809 1710.12,728.824 1710.68,693.029 1711.24,693.664 1711.8,709.025 1712.36,656.227 1712.92,657.44 1713.48,674.185 1714.04,641.728 1714.6,644.899 1715.15,659.662 1715.71,646.017 1716.27,651.716 1716.83,664.946 1717.39,650.833 1717.95,682.276 1718.51,664.691 1719.07,652.394 1719.63,637.263 1720.19,672.205 1720.75,672.573 1721.31,673.242 1721.87,657.693 1722.42,658.784 1722.98,661.927 1723.54,683.57 1724.1,669.028 1724.66,670.581 1725.22,652.911 1725.78,654.55 1726.34,655.398 1726.9,670.046 1727.46,686.685 1728.02,654.063 1728.58,639.85 1729.14,625.762 1729.69,608.764 1730.25,582.156 1730.81,638.327 1731.37,667.974 1731.93,715.075 1732.49,727.524 1733.05,726.291 1733.61,739.135 1734.17,721.149 1734.73,702.17 1735.29,683.014 1735.85,669.763 1736.41,651.942 1736.97,654.055 1737.52,639.2 1738.08,655.185 1738.64,622.07 1739.2,593.121 1739.76,602.402 1740.32,603.565 1740.88,591.595 1741.44,596.869 1742,601.785 1742.56,589.035 1743.12,595.648 1743.68,616.437 1744.24,620.823 1744.79,641.395 1745.35,662.239 1745.91,643.925 1746.47,662.606 1747.03,698.833 1747.59,700.482 1748.15,732.505 1748.71,763.413 1749.27,730.316 1749.83,711.572 1750.39,727.898 1750.95,695.252 1751.51,680.308 1752.06,694.765 1752.62,711.668 1753.18,710.842 1753.74,710.647 1754.3,711.707 1754.86,727.695 1755.42,724.847 1755.98,755.416 1756.54,801.369 1757.1,796.921 1757.66,810.667 1758.22,755.733 1758.78,751.121 1759.34,729.296 1759.89,680.587 1760.45,729.606 1761.01,774.928 1761.57,755.288 1762.13,767.813 1762.69,760.571 1763.25,754.89 1763.81,783.088 1764.37,759.961 1764.93,756.583 1765.49,723.576 1766.05,736.07 1766.61,732.668 1767.16,755.065 1767.72,736.332 1768.28,750.793 1768.84,743.857 1769.4,724.693 1769.96,740.844 1770.52,721.116 1771.08,719.188 1771.64,702.79 1772.2,718.325 1772.76,748.708 1773.32,729.062 1773.88,710.404 1774.43,677.318 1774.99,695.277 1775.55,709.186 1776.11,690.054 1776.67,673.23 1777.23,637.505 1777.79,637.512 1778.35,720.827 1778.91,719.114 1779.47,703.171 1780.03,698.326 1780.59,681.182 1781.15,698.399 1781.71,698.475 1782.26,711.565 1782.82,727.639 1783.38,723.178 1783.94,687.928 1784.5,671.09 1785.06,675.538 1785.62,674.188 1786.18,694.031 1786.74,692.566 1787.3,660.902 1787.86,692.182 1788.42,677.14 1788.98,676.68 1789.53,646.158 1790.09,648.799 1790.65,668.735 1791.21,654.294 1791.77,654.255 1792.33,687.618 1792.89,641.027 1793.45,593.992 1794.01,579.197 1794.57,602.238 1795.13,610.993 1795.69,615.335 1796.25,650.374 1796.8,632.974 1797.36,649.39 1797.92,669.864 1798.48,654.379 1799.04,690.031 1799.6,692.069 1800.16,692.351 1800.72,725.448 1801.28,707.916 1801.84,726.6 1802.4,738.904 1802.96,751.145 1803.52,718.491 1804.08,717.482 1804.63,713.798 1805.19,715.017 1805.75,715.457 1806.31,714.864 1806.87,712.778 1807.43,710.855 1807.99,728.186 1808.55,726.713 1809.11,707.768 1809.67,709.542 1810.23,692.222 1810.79,659.12 1811.35,628.436 1811.9,629.464 1812.46,648.569 1813.02,621.873 1813.58,644.784 1814.14,626.375 1814.7,644.483 1815.26,647.685 1815.82,663.62 1816.38,647.534 1816.94,634.851 1817.5,655.255 1818.06,673.32 1818.62,677.616 1819.18,660.186 1819.73,661.928 1820.29,662.583 1820.85,651.613 1821.41,668.627 1821.97,617.181 1822.53,632.518 1823.09,663.848 1823.65,664.321 1824.21,668.139 1824.77,669.408 1825.33,668.361 1825.89,702.376 1826.45,699.393 1827,697.663 1827.56,711.185 1828.12,708.391 1828.68,664.917 1829.24,666.325 1829.8,650.221 1830.36,634.895 1830.92,622.088 1831.48,627.122 1832.04,629.201 1832.6,650.613 1833.16,681.54 1833.72,682.279 1834.27,679.696 1834.83,666.512 1835.39,651.359 1835.95,655.288 1836.51,641.719 1837.07,644.819 1837.63,643.325 1838.19,662.347 \"/>\n<path clip-path=\"url(#clip143)\" d=\"M720.247 691.004 L720.806 691.004 L721.365 691.004 L721.924 691.004 L722.484 691.004 L723.043 691.004 L723.602 691.004 L724.161 691.004 L724.721 691.004 L725.28 691.004 L725.839 691.004 L726.398 691.004 L726.958 691.004 L727.517 691.004 L728.076 691.004 L728.635 691.004 L729.195 691.004 L729.754 691.004 L730.313 691.004 L730.872 691.004 L731.432 691.004 L731.991 691.004 L732.55 691.004 L733.109 691.004 L733.669 691.004 L734.228 691.004 L734.787 691.004 L735.346 691.004 L735.906 691.004 L736.465 691.004 L737.024 691.004 L737.583 691.004 L738.143 691.004 L738.702 691.004 L739.261 691.004 L739.82 691.004 L740.38 691.004 L740.939 691.004 L741.498 691.004 L742.057 691.004 L742.617 691.004 L743.176 691.004 L743.735 691.004 L744.294 691.004 L744.854 691.004 L745.413 691.004 L745.972 691.004 L746.531 691.004 L747.091 691.004 L747.65 691.004 L748.209 691.004 L748.768 691.004 L749.328 691.004 L749.887 691.004 L750.446 691.004 L751.005 691.004 L751.565 691.004 L752.124 691.004 L752.683 691.004 L753.242 691.004 L753.802 691.004 L754.361 691.004 L754.92 691.004 L755.479 691.004 L756.039 691.004 L756.598 691.004 L757.157 691.004 L757.716 691.004 L758.276 691.004 L758.835 691.004 L759.394 691.004 L759.953 691.004 L760.513 691.004 L761.072 691.004 L761.631 691.004 L762.19 691.004 L762.75 691.004 L763.309 691.004 L763.868 691.004 L764.427 691.004 L764.987 691.004 L765.546 691.004 L766.105 691.004 L766.664 691.004 L767.224 691.004 L767.783 691.004 L768.342 691.004 L768.901 691.004 L769.461 691.004 L770.02 691.004 L770.579 691.004 L771.138 691.004 L771.698 691.004 L772.257 691.004 L772.816 691.004 L773.375 691.004 L773.935 691.004 L774.494 691.004 L775.053 691.004 L775.612 691.004 L776.172 691.004 L776.731 691.004 L777.29 691.004 L777.849 691.004 L778.409 691.004 L778.968 691.004 L779.527 691.004 L780.086 691.004 L780.646 691.004 L781.205 691.004 L781.764 691.004 L782.323 691.004 L782.883 691.004 L783.442 691.004 L784.001 691.004 L784.56 691.004 L785.12 691.004 L785.679 691.004 L786.238 691.004 L786.797 691.004 L787.357 691.004 L787.916 691.004 L788.475 691.004 L789.034 691.004 L789.594 691.004 L790.153 691.004 L790.712 691.004 L791.271 691.004 L791.831 691.004 L792.39 691.004 L792.949 691.004 L793.508 691.004 L794.068 691.004 L794.627 691.004 L795.186 691.004 L795.745 691.004 L796.305 691.004 L796.864 691.004 L797.423 691.004 L797.982 691.004 L798.542 691.004 L799.101 691.004 L799.66 691.004 L800.219 691.004 L800.779 691.004 L801.338 691.004 L801.897 691.004 L802.456 691.004 L803.016 691.004 L803.575 691.004 L804.134 691.004 L804.693 691.004 L805.253 691.004 L805.812 691.004 L806.371 691.004 L806.931 691.004 L807.49 691.004 L808.049 691.004 L808.608 691.004 L809.168 691.004 L809.727 691.004 L810.286 691.004 L810.845 691.004 L811.405 691.004 L811.964 691.004 L812.523 691.004 L813.082 691.004 L813.642 691.004 L814.201 691.004 L814.76 691.004 L815.319 691.004 L815.879 691.004 L816.438 691.004 L816.997 691.004 L817.556 691.004 L818.116 691.004 L818.675 691.004 L819.234 691.004 L819.793 691.004 L820.353 691.004 L820.912 691.004 L821.471 691.004 L822.03 691.004 L822.59 691.004 L823.149 691.004 L823.708 691.004 L824.267 691.004 L824.827 691.004 L825.386 691.004 L825.945 691.004 L826.504 691.004 L827.064 691.004 L827.623 691.004 L828.182 691.004 L828.741 691.004 L829.301 691.004 L829.86 691.004 L830.419 691.004 L830.978 691.004 L831.538 691.004 L832.097 691.004 L832.656 691.004 L833.215 691.004 L833.775 691.004 L834.334 691.004 L834.893 691.004 L835.452 691.004 L836.012 691.004 L836.571 691.004 L837.13 691.004 L837.689 691.004 L838.249 691.004 L838.808 691.004 L839.367 691.004 L839.926 691.004 L840.486 691.004 L841.045 691.004 L841.604 691.004 L842.163 691.004 L842.723 691.004 L843.282 691.004 L843.841 691.004 L844.4 691.004 L844.96 691.004 L845.519 691.004 L846.078 691.004 L846.637 691.004 L847.197 691.004 L847.756 691.004 L848.315 691.004 L848.874 691.004 L849.434 691.004 L849.993 691.004 L850.552 691.004 L851.111 691.004 L851.671 691.004 L852.23 691.004 L852.789 691.004 L853.348 691.004 L853.908 691.004 L854.467 691.004 L855.026 691.004 L855.585 691.004 L856.145 691.004 L856.704 691.004 L857.263 691.004 L857.822 691.004 L858.382 691.004 L858.941 691.004 L859.5 691.004 L860.059 691.004 L860.619 691.004 L861.178 691.004 L861.737 691.004 L862.296 691.004 L862.856 691.004 L863.415 691.004 L863.974 691.004 L864.533 691.004 L865.093 691.004 L865.652 691.004 L866.211 691.004 L866.77 691.004 L867.33 691.004 L867.889 691.004 L868.448 691.004 L869.007 691.004 L869.567 691.004 L870.126 691.004 L870.685 691.004 L871.244 691.004 L871.804 691.004 L872.363 691.004 L872.922 691.004 L873.481 691.004 L874.041 691.004 L874.6 691.004 L875.159 691.004 L875.718 691.004 L876.278 691.004 L876.837 691.004 L877.396 691.004 L877.955 691.004 L878.515 691.004 L879.074 691.004 L879.633 691.004 L880.192 691.004 L880.752 691.004 L881.311 691.004 L881.87 691.004 L882.429 691.004 L882.989 691.004 L883.548 691.004 L884.107 691.004 L884.666 691.004 L885.226 691.004 L885.785 691.004 L886.344 691.004 L886.903 691.004 L887.463 691.004 L888.022 691.004 L888.581 691.004 L889.14 691.004 L889.7 691.004 L890.259 691.004 L890.818 691.004 L891.377 691.004 L891.937 691.004 L892.496 691.004 L893.055 691.004 L893.614 691.004 L894.174 691.004 L894.733 691.004 L895.292 691.004 L895.851 691.004 L896.411 691.004 L896.97 691.004 L897.529 691.004 L898.088 691.004 L898.648 691.004 L899.207 691.004 L899.766 691.004 L900.325 691.004 L900.885 691.004 L901.444 691.004 L902.003 691.004 L902.562 691.004 L903.122 691.004 L903.681 691.004 L904.24 691.004 L904.799 691.004 L905.359 691.004 L905.918 691.004 L906.477 691.004 L907.036 691.004 L907.596 691.004 L908.155 691.004 L908.714 691.004 L909.273 691.004 L909.833 691.004 L910.392 691.004 L910.951 691.004 L911.51 691.004 L912.07 691.004 L912.629 691.004 L913.188 691.004 L913.747 691.004 L914.307 691.004 L914.866 691.004 L915.425 691.004 L915.984 691.004 L916.544 691.004 L917.103 691.004 L917.662 691.004 L918.221 691.004 L918.781 691.004 L919.34 691.004 L919.899 691.004 L920.458 691.004 L921.018 691.004 L921.577 691.004 L922.136 691.004 L922.695 691.004 L923.255 691.004 L923.814 691.004 L924.373 691.004 L924.932 691.004 L925.492 691.004 L926.051 691.004 L926.61 691.004 L927.169 691.004 L927.729 691.004 L928.288 691.004 L928.847 691.004 L929.406 691.004 L929.966 691.004 L930.525 691.004 L931.084 691.004 L931.644 691.004 L932.203 691.004 L932.762 691.004 L933.321 691.004 L933.881 691.004 L934.44 691.004 L934.999 691.004 L935.558 691.004 L936.118 691.004 L936.677 691.004 L937.236 691.004 L937.795 691.004 L938.355 691.004 L938.914 691.004 L939.473 691.004 L940.032 691.004 L940.592 691.004 L941.151 691.004 L941.71 691.004 L942.269 691.004 L942.829 691.004 L943.388 691.004 L943.947 691.004 L944.506 691.004 L945.066 691.004 L945.625 691.004 L946.184 691.004 L946.743 691.004 L947.303 691.004 L947.862 691.004 L948.421 691.004 L948.98 691.004 L949.54 691.004 L950.099 691.004 L950.658 691.004 L951.217 691.004 L951.777 691.004 L952.336 691.004 L952.895 691.004 L953.454 691.004 L954.014 691.004 L954.573 691.004 L955.132 691.004 L955.691 691.004 L956.251 691.004 L956.81 691.004 L957.369 691.004 L957.928 691.004 L958.488 691.004 L959.047 691.004 L959.606 691.004 L960.165 691.004 L960.725 691.004 L961.284 691.004 L961.843 691.004 L962.402 691.004 L962.962 691.004 L963.521 691.004 L964.08 691.004 L964.639 691.004 L965.199 691.004 L965.758 691.004 L966.317 691.004 L966.876 691.004 L967.436 691.004 L967.995 691.004 L968.554 691.004 L969.113 691.004 L969.673 691.004 L970.232 691.004 L970.791 691.004 L971.35 691.004 L971.91 691.004 L972.469 691.004 L973.028 691.004 L973.587 691.004 L974.147 691.004 L974.706 691.004 L975.265 691.004 L975.824 691.004 L976.384 691.004 L976.943 691.004 L977.502 691.004 L978.061 691.004 L978.621 691.004 L979.18 691.004 L979.739 691.004 L980.298 691.004 L980.858 691.004 L981.417 691.004 L981.976 691.004 L982.535 691.004 L983.095 691.004 L983.654 691.004 L984.213 691.004 L984.772 691.004 L985.332 691.004 L985.891 691.004 L986.45 691.004 L987.009 691.004 L987.569 691.004 L988.128 691.004 L988.687 691.004 L989.246 691.004 L989.806 691.004 L990.365 691.004 L990.924 691.004 L991.483 691.004 L992.043 691.004 L992.602 691.004 L993.161 691.004 L993.72 691.004 L994.28 691.004 L994.839 691.004 L995.398 691.004 L995.957 691.004 L996.517 691.004 L997.076 691.004 L997.635 691.004 L998.194 691.004 L998.754 691.004 L999.313 691.004 L999.872 691.004 L1000.43 691.004 L1000.99 691.004 L1001.55 691.004 L1002.11 691.004 L1002.67 691.004 L1003.23 691.004 L1003.79 691.004 L1004.35 691.004 L1004.91 691.004 L1005.46 691.004 L1006.02 691.004 L1006.58 691.004 L1007.14 691.004 L1007.7 691.004 L1008.26 691.004 L1008.82 691.004 L1009.38 691.004 L1009.94 691.004 L1010.5 691.004 L1011.06 691.004 L1011.62 691.004 L1012.18 691.004 L1012.73 691.004 L1013.29 691.004 L1013.85 691.004 L1014.41 691.004 L1014.97 691.004 L1015.53 691.004 L1016.09 691.004 L1016.65 691.004 L1017.21 691.004 L1017.77 691.004 L1018.33 691.004 L1018.89 691.004 L1019.45 691.004 L1020.01 691.004 L1020.56 691.004 L1021.12 691.004 L1021.68 691.004 L1022.24 691.004 L1022.8 691.004 L1023.36 691.004 L1023.92 691.004 L1024.48 691.004 L1025.04 691.004 L1025.6 691.004 L1026.16 691.004 L1026.72 691.004 L1027.28 691.004 L1027.83 691.004 L1028.39 691.004 L1028.95 691.004 L1029.51 691.004 L1030.07 691.004 L1030.63 691.004 L1031.19 691.004 L1031.75 691.004 L1032.31 691.004 L1032.87 691.004 L1033.43 691.004 L1033.99 691.004 L1034.55 691.004 L1035.1 691.004 L1035.66 691.004 L1036.22 691.004 L1036.78 691.004 L1037.34 691.004 L1037.9 691.004 L1038.46 691.004 L1039.02 691.004 L1039.58 691.004 L1040.14 691.004 L1040.7 691.004 L1041.26 691.004 L1041.82 691.004 L1042.38 691.004 L1042.93 691.004 L1043.49 691.004 L1044.05 691.004 L1044.61 691.004 L1045.17 691.004 L1045.73 691.004 L1046.29 691.004 L1046.85 691.004 L1047.41 691.004 L1047.97 691.004 L1048.53 691.004 L1049.09 691.004 L1049.65 691.004 L1050.2 691.004 L1050.76 691.004 L1051.32 691.004 L1051.88 691.004 L1052.44 691.004 L1053 691.004 L1053.56 691.004 L1054.12 691.004 L1054.68 691.004 L1055.24 691.004 L1055.8 691.004 L1056.36 691.004 L1056.92 691.004 L1057.48 691.004 L1058.03 691.004 L1058.59 691.004 L1059.15 691.004 L1059.71 691.004 L1060.27 691.004 L1060.83 691.004 L1061.39 691.004 L1061.95 691.004 L1062.51 691.004 L1063.07 691.004 L1063.63 691.004 L1064.19 691.004 L1064.75 691.004 L1065.3 691.004 L1065.86 691.004 L1066.42 691.004 L1066.98 691.004 L1067.54 691.004 L1068.1 691.004 L1068.66 691.004 L1069.22 691.004 L1069.78 691.004 L1070.34 691.004 L1070.9 691.004 L1071.46 691.004 L1072.02 691.004 L1072.57 691.004 L1073.13 691.004 L1073.69 691.004 L1074.25 691.004 L1074.81 691.004 L1075.37 691.004 L1075.93 691.004 L1076.49 691.004 L1077.05 691.004 L1077.61 691.004 L1078.17 691.004 L1078.73 691.004 L1079.29 691.004 L1079.85 691.004 L1080.4 691.004 L1080.96 691.004 L1081.52 691.004 L1082.08 691.004 L1082.64 691.004 L1083.2 691.004 L1083.76 691.004 L1084.32 691.004 L1084.88 691.004 L1085.44 691.004 L1086 691.004 L1086.56 691.004 L1087.12 691.004 L1087.67 691.004 L1088.23 691.004 L1088.79 691.004 L1089.35 691.004 L1089.91 691.004 L1090.47 691.004 L1091.03 691.004 L1091.59 691.004 L1092.15 691.004 L1092.71 691.004 L1093.27 691.004 L1093.83 691.004 L1094.39 691.004 L1094.94 691.004 L1095.5 691.004 L1096.06 691.004 L1096.62 691.004 L1097.18 691.004 L1097.74 691.004 L1098.3 691.004 L1098.86 691.004 L1099.42 691.004 L1099.98 691.004 L1100.54 691.004 L1101.1 691.004 L1101.66 691.004 L1102.22 691.004 L1102.77 691.004 L1103.33 691.004 L1103.89 691.004 L1104.45 691.004 L1105.01 691.004 L1105.57 691.004 L1106.13 691.004 L1106.69 691.004 L1107.25 691.004 L1107.81 691.004 L1108.37 691.004 L1108.93 691.004 L1109.49 691.004 L1110.04 691.004 L1110.6 691.004 L1111.16 691.004 L1111.72 691.004 L1112.28 691.004 L1112.84 691.004 L1113.4 691.004 L1113.96 691.004 L1114.52 691.004 L1115.08 691.004 L1115.64 691.004 L1116.2 691.004 L1116.76 691.004 L1117.31 691.004 L1117.87 691.004 L1118.43 691.004 L1118.99 691.004 L1119.55 691.004 L1120.11 691.004 L1120.67 691.004 L1121.23 691.004 L1121.79 691.004 L1122.35 691.004 L1122.91 691.004 L1123.47 691.004 L1124.03 691.004 L1124.59 691.004 L1125.14 691.004 L1125.7 691.004 L1126.26 691.004 L1126.82 691.004 L1127.38 691.004 L1127.94 691.004 L1128.5 691.004 L1129.06 691.004 L1129.62 691.004 L1130.18 691.004 L1130.74 691.004 L1131.3 691.004 L1131.86 691.004 L1132.41 691.004 L1132.97 691.004 L1133.53 691.004 L1134.09 691.004 L1134.65 691.004 L1135.21 691.004 L1135.77 691.004 L1136.33 691.004 L1136.89 691.004 L1137.45 691.004 L1138.01 691.004 L1138.57 691.004 L1139.13 691.004 L1139.68 691.004 L1140.24 691.004 L1140.8 691.004 L1141.36 691.004 L1141.92 691.004 L1142.48 691.004 L1143.04 691.004 L1143.6 691.004 L1144.16 691.004 L1144.72 691.004 L1145.28 691.004 L1145.84 691.004 L1146.4 691.004 L1146.96 691.004 L1147.51 691.004 L1148.07 691.004 L1148.63 691.004 L1149.19 691.004 L1149.75 691.004 L1150.31 691.004 L1150.87 691.004 L1151.43 691.004 L1151.99 691.004 L1152.55 691.004 L1153.11 691.004 L1153.67 691.004 L1154.23 691.004 L1154.78 691.004 L1155.34 691.004 L1155.9 691.004 L1156.46 691.004 L1157.02 691.004 L1157.58 691.004 L1158.14 691.004 L1158.7 691.004 L1159.26 691.004 L1159.82 691.004 L1160.38 691.004 L1160.94 691.004 L1161.5 691.004 L1162.05 691.004 L1162.61 691.004 L1163.17 691.004 L1163.73 691.004 L1164.29 691.004 L1164.85 691.004 L1165.41 691.004 L1165.97 691.004 L1166.53 691.004 L1167.09 691.004 L1167.65 691.004 L1168.21 691.004 L1168.77 691.004 L1169.33 691.004 L1169.88 691.004 L1170.44 691.004 L1171 691.004 L1171.56 691.004 L1172.12 691.004 L1172.68 691.004 L1173.24 691.004 L1173.8 691.004 L1174.36 691.004 L1174.92 691.004 L1175.48 691.004 L1176.04 691.004 L1176.6 691.004 L1177.15 691.004 L1177.71 691.004 L1178.27 691.004 L1178.83 691.004 L1179.39 691.004 L1179.95 691.004 L1180.51 691.004 L1181.07 691.004 L1181.63 691.004 L1182.19 691.004 L1182.75 691.004 L1183.31 691.004 L1183.87 691.004 L1184.43 691.004 L1184.98 691.004 L1185.54 691.004 L1186.1 691.004 L1186.66 691.004 L1187.22 691.004 L1187.78 691.004 L1188.34 691.004 L1188.9 691.004 L1189.46 691.004 L1190.02 691.004 L1190.58 691.004 L1191.14 691.004 L1191.7 691.004 L1192.25 691.004 L1192.81 691.004 L1193.37 691.004 L1193.93 691.004 L1194.49 691.004 L1195.05 691.004 L1195.61 691.004 L1196.17 691.004 L1196.73 691.004 L1197.29 691.004 L1197.85 691.004 L1198.41 691.004 L1198.97 691.004 L1199.52 691.004 L1200.08 691.004 L1200.64 691.004 L1201.2 691.004 L1201.76 691.004 L1202.32 691.004 L1202.88 691.004 L1203.44 691.004 L1204 691.004 L1204.56 691.004 L1205.12 691.004 L1205.68 691.004 L1206.24 691.004 L1206.8 691.004 L1207.35 691.004 L1207.91 691.004 L1208.47 691.004 L1209.03 691.004 L1209.59 691.004 L1210.15 691.004 L1210.71 691.004 L1211.27 691.004 L1211.83 691.004 L1212.39 691.004 L1212.95 691.004 L1213.51 691.004 L1214.07 691.004 L1214.62 691.004 L1215.18 691.004 L1215.74 691.004 L1216.3 691.004 L1216.86 691.004 L1217.42 691.004 L1217.98 691.004 L1218.54 691.004 L1219.1 691.004 L1219.66 691.004 L1220.22 691.004 L1220.78 691.004 L1221.34 691.004 L1221.89 691.004 L1222.45 691.004 L1223.01 691.004 L1223.57 691.004 L1224.13 691.004 L1224.69 691.004 L1225.25 691.004 L1225.81 691.004 L1226.37 691.004 L1226.93 691.004 L1227.49 691.004 L1228.05 691.004 L1228.61 691.004 L1229.17 691.004 L1229.72 691.004 L1230.28 691.004 L1230.84 691.004 L1231.4 691.004 L1231.96 691.004 L1232.52 691.004 L1233.08 691.004 L1233.64 691.004 L1234.2 691.004 L1234.76 691.004 L1235.32 691.004 L1235.88 691.004 L1236.44 691.004 L1236.99 691.004 L1237.55 691.004 L1238.11 691.004 L1238.67 691.004 L1239.23 691.004 L1239.79 691.004 L1240.35 691.004 L1240.91 691.004 L1241.47 691.004 L1242.03 691.004 L1242.59 691.004 L1243.15 691.004 L1243.71 691.004 L1244.26 691.004 L1244.82 691.004 L1245.38 691.004 L1245.94 691.004 L1246.5 691.004 L1247.06 691.004 L1247.62 691.004 L1248.18 691.004 L1248.74 691.004 L1249.3 691.004 L1249.86 691.004 L1250.42 691.004 L1250.98 691.004 L1251.54 691.004 L1252.09 691.004 L1252.65 691.004 L1253.21 691.004 L1253.77 691.004 L1254.33 691.004 L1254.89 691.004 L1255.45 691.004 L1256.01 691.004 L1256.57 691.004 L1257.13 691.004 L1257.69 691.004 L1258.25 691.004 L1258.81 691.004 L1259.36 691.004 L1259.92 691.004 L1260.48 691.004 L1261.04 691.004 L1261.6 691.004 L1262.16 691.004 L1262.72 691.004 L1263.28 691.004 L1263.84 691.004 L1264.4 691.004 L1264.96 691.004 L1265.52 691.004 L1266.08 691.004 L1266.63 691.004 L1267.19 691.004 L1267.75 691.004 L1268.31 691.004 L1268.87 691.004 L1269.43 691.004 L1269.99 691.004 L1270.55 691.004 L1271.11 691.004 L1271.67 691.004 L1272.23 691.004 L1272.79 691.004 L1273.35 691.004 L1273.91 691.004 L1274.46 691.004 L1275.02 691.004 L1275.58 691.004 L1276.14 691.004 L1276.7 691.004 L1277.26 691.004 L1277.82 691.004 L1278.38 691.004 L1278.94 691.004 L1279.5 691.004 L1280.06 691.004 L1280.62 691.004 L1281.18 691.004 L1281.73 691.004 L1282.29 691.004 L1282.85 691.004 L1283.41 691.004 L1283.97 691.004 L1284.53 691.004 L1285.09 691.004 L1285.65 691.004 L1286.21 691.004 L1286.77 691.004 L1287.33 691.004 L1287.89 691.004 L1288.45 691.004 L1289 691.004 L1289.56 691.004 L1290.12 691.004 L1290.68 691.004 L1291.24 691.004 L1291.8 691.004 L1292.36 691.004 L1292.92 691.004 L1293.48 691.004 L1294.04 691.004 L1294.6 691.004 L1295.16 691.004 L1295.72 691.004 L1296.28 691.004 L1296.83 691.004 L1297.39 691.004 L1297.95 691.004 L1298.51 691.004 L1299.07 691.004 L1299.63 691.004 L1300.19 691.004 L1300.75 691.004 L1301.31 691.004 L1301.87 691.004 L1302.43 691.004 L1302.99 691.004 L1303.55 691.004 L1304.1 691.004 L1304.66 691.004 L1305.22 691.004 L1305.78 691.004 L1306.34 691.004 L1306.9 691.004 L1307.46 691.004 L1308.02 691.004 L1308.58 691.004 L1309.14 691.004 L1309.7 691.004 L1310.26 691.004 L1310.82 691.004 L1311.38 691.004 L1311.93 691.004 L1312.49 691.004 L1313.05 691.004 L1313.61 691.004 L1314.17 691.004 L1314.73 691.004 L1315.29 691.004 L1315.85 691.004 L1316.41 691.004 L1316.97 691.004 L1317.53 691.004 L1318.09 691.004 L1318.65 691.004 L1319.2 691.004 L1319.76 691.004 L1320.32 691.004 L1320.88 691.004 L1321.44 691.004 L1322 691.004 L1322.56 691.004 L1323.12 691.004 L1323.68 691.004 L1324.24 691.004 L1324.8 691.004 L1325.36 691.004 L1325.92 691.004 L1326.47 691.004 L1327.03 691.004 L1327.59 691.004 L1328.15 691.004 L1328.71 691.004 L1329.27 691.004 L1329.83 691.004 L1330.39 691.004 L1330.95 691.004 L1331.51 691.004 L1332.07 691.004 L1332.63 691.004 L1333.19 691.004 L1333.75 691.004 L1334.3 691.004 L1334.86 691.004 L1335.42 691.004 L1335.98 691.004 L1336.54 691.004 L1337.1 691.004 L1337.66 691.004 L1338.22 691.004 L1338.78 691.004 L1339.34 691.004 L1339.9 691.004 L1340.46 691.004 L1341.02 691.004 L1341.57 691.004 L1342.13 691.004 L1342.69 691.004 L1343.25 691.004 L1343.81 691.004 L1344.37 691.004 L1344.93 691.004 L1345.49 691.004 L1346.05 691.004 L1346.61 691.004 L1347.17 691.004 L1347.73 691.004 L1348.29 691.004 L1348.84 691.004 L1349.4 691.004 L1349.96 691.004 L1350.52 691.004 L1351.08 691.004 L1351.64 691.004 L1352.2 691.004 L1352.76 691.004 L1353.32 691.004 L1353.88 691.004 L1354.44 691.004 L1355 691.004 L1355.56 691.004 L1356.12 691.004 L1356.67 691.004 L1357.23 691.004 L1357.79 691.004 L1358.35 691.004 L1358.91 691.004 L1359.47 691.004 L1360.03 691.004 L1360.59 691.004 L1361.15 691.004 L1361.71 691.004 L1362.27 691.004 L1362.83 691.004 L1363.39 691.004 L1363.94 691.004 L1364.5 691.004 L1365.06 691.004 L1365.62 691.004 L1366.18 691.004 L1366.74 691.004 L1367.3 691.004 L1367.86 691.004 L1368.42 691.004 L1368.98 691.004 L1369.54 691.004 L1370.1 691.004 L1370.66 691.004 L1371.21 691.004 L1371.77 691.004 L1372.33 691.004 L1372.89 691.004 L1373.45 691.004 L1374.01 691.004 L1374.57 691.004 L1375.13 691.004 L1375.69 691.004 L1376.25 691.004 L1376.81 691.004 L1377.37 691.004 L1377.93 691.004 L1378.49 691.004 L1379.04 691.004 L1379.6 691.004 L1380.16 691.004 L1380.72 691.004 L1381.28 691.004 L1381.84 691.004 L1382.4 691.004 L1382.96 691.004 L1383.52 691.004 L1384.08 691.004 L1384.64 691.004 L1385.2 691.004 L1385.76 691.004 L1386.31 691.004 L1386.87 691.004 L1387.43 691.004 L1387.99 691.004 L1388.55 691.004 L1389.11 691.004 L1389.67 691.004 L1390.23 691.004 L1390.79 691.004 L1391.35 691.004 L1391.91 691.004 L1392.47 691.004 L1393.03 691.004 L1393.58 691.004 L1394.14 691.004 L1394.7 691.004 L1395.26 691.004 L1395.82 691.004 L1396.38 691.004 L1396.94 691.004 L1397.5 691.004 L1398.06 691.004 L1398.62 691.004 L1399.18 691.004 L1399.74 691.004 L1400.3 691.004 L1400.86 691.004 L1401.41 691.004 L1401.97 691.004 L1402.53 691.004 L1403.09 691.004 L1403.65 691.004 L1404.21 691.004 L1404.77 691.004 L1405.33 691.004 L1405.89 691.004 L1406.45 691.004 L1407.01 691.004 L1407.57 691.004 L1408.13 691.004 L1408.68 691.004 L1409.24 691.004 L1409.8 691.004 L1410.36 691.004 L1410.92 691.004 L1411.48 691.004 L1412.04 691.004 L1412.6 691.004 L1413.16 691.004 L1413.72 691.004 L1414.28 691.004 L1414.84 691.004 L1415.4 691.004 L1415.95 691.004 L1416.51 691.004 L1417.07 691.004 L1417.63 691.004 L1418.19 691.004 L1418.75 691.004 L1419.31 691.004 L1419.87 691.004 L1420.43 691.004 L1420.99 691.004 L1421.55 691.004 L1422.11 691.004 L1422.67 691.004 L1423.23 691.004 L1423.78 691.004 L1424.34 691.004 L1424.9 691.004 L1425.46 691.004 L1426.02 691.004 L1426.58 691.004 L1427.14 691.004 L1427.7 691.004 L1428.26 691.004 L1428.82 691.004 L1429.38 691.004 L1429.94 691.004 L1430.5 691.004 L1431.05 691.004 L1431.61 691.004 L1432.17 691.004 L1432.73 691.004 L1433.29 691.004 L1433.85 691.004 L1434.41 691.004 L1434.97 691.004 L1435.53 691.004 L1436.09 691.004 L1436.65 691.004 L1437.21 691.004 L1437.77 691.004 L1438.33 691.004 L1438.88 691.004 L1439.44 691.004 L1440 691.004 L1440.56 691.004 L1441.12 691.004 L1441.68 691.004 L1442.24 691.004 L1442.8 691.004 L1443.36 691.004 L1443.92 691.004 L1444.48 691.004 L1445.04 691.004 L1445.6 691.004 L1446.15 691.004 L1446.71 691.004 L1447.27 691.004 L1447.83 691.004 L1448.39 691.004 L1448.95 691.004 L1449.51 691.004 L1450.07 691.004 L1450.63 691.004 L1451.19 691.004 L1451.75 691.004 L1452.31 691.004 L1452.87 691.004 L1453.42 691.004 L1453.98 691.004 L1454.54 691.004 L1455.1 691.004 L1455.66 691.004 L1456.22 691.004 L1456.78 691.004 L1457.34 691.004 L1457.9 691.004 L1458.46 691.004 L1459.02 691.004 L1459.58 691.004 L1460.14 691.004 L1460.7 691.004 L1461.25 691.004 L1461.81 691.004 L1462.37 691.004 L1462.93 691.004 L1463.49 691.004 L1464.05 691.004 L1464.61 691.004 L1465.17 691.004 L1465.73 691.004 L1466.29 691.004 L1466.85 691.004 L1467.41 691.004 L1467.97 691.004 L1468.52 691.004 L1469.08 691.004 L1469.64 691.004 L1470.2 691.004 L1470.76 691.004 L1471.32 691.004 L1471.88 691.004 L1472.44 691.004 L1473 691.004 L1473.56 691.004 L1474.12 691.004 L1474.68 691.004 L1475.24 691.004 L1475.79 691.004 L1476.35 691.004 L1476.91 691.004 L1477.47 691.004 L1478.03 691.004 L1478.59 691.004 L1479.15 691.004 L1479.71 691.004 L1480.27 691.004 L1480.83 691.004 L1481.39 691.004 L1481.95 691.004 L1482.51 691.004 L1483.07 691.004 L1483.62 691.004 L1484.18 691.004 L1484.74 691.004 L1485.3 691.004 L1485.86 691.004 L1486.42 691.004 L1486.98 691.004 L1487.54 691.004 L1488.1 691.004 L1488.66 691.004 L1489.22 691.004 L1489.78 691.004 L1490.34 691.004 L1490.89 691.004 L1491.45 691.004 L1492.01 691.004 L1492.57 691.004 L1493.13 691.004 L1493.69 691.004 L1494.25 691.004 L1494.81 691.004 L1495.37 691.004 L1495.93 691.004 L1496.49 691.004 L1497.05 691.004 L1497.61 691.004 L1498.16 691.004 L1498.72 691.004 L1499.28 691.004 L1499.84 691.004 L1500.4 691.004 L1500.96 691.004 L1501.52 691.004 L1502.08 691.004 L1502.64 691.004 L1503.2 691.004 L1503.76 691.004 L1504.32 691.004 L1504.88 691.004 L1505.44 691.004 L1505.99 691.004 L1506.55 691.004 L1507.11 691.004 L1507.67 691.004 L1508.23 691.004 L1508.79 691.004 L1509.35 691.004 L1509.91 691.004 L1510.47 691.004 L1511.03 691.004 L1511.59 691.004 L1512.15 691.004 L1512.71 691.004 L1513.26 691.004 L1513.82 691.004 L1514.38 691.004 L1514.94 691.004 L1515.5 691.004 L1516.06 691.004 L1516.62 691.004 L1517.18 691.004 L1517.74 691.004 L1518.3 691.004 L1518.86 691.004 L1519.42 691.004 L1519.98 691.004 L1520.53 691.004 L1521.09 691.004 L1521.65 691.004 L1522.21 691.004 L1522.77 691.004 L1523.33 691.004 L1523.89 691.004 L1524.45 691.004 L1525.01 691.004 L1525.57 691.004 L1526.13 691.004 L1526.69 691.004 L1527.25 691.004 L1527.81 691.004 L1528.36 691.004 L1528.92 691.004 L1529.48 691.004 L1530.04 691.004 L1530.6 691.004 L1531.16 691.004 L1531.72 691.004 L1532.28 691.004 L1532.84 691.004 L1533.4 691.004 L1533.96 691.004 L1534.52 691.004 L1535.08 691.004 L1535.63 691.004 L1536.19 691.004 L1536.75 691.004 L1537.31 691.004 L1537.87 691.004 L1538.43 691.004 L1538.99 691.004 L1539.55 691.004 L1540.11 691.004 L1540.67 691.004 L1541.23 691.004 L1541.79 691.004 L1542.35 691.004 L1542.9 691.004 L1543.46 691.004 L1544.02 691.004 L1544.58 691.004 L1545.14 691.004 L1545.7 691.004 L1546.26 691.004 L1546.82 691.004 L1547.38 691.004 L1547.94 691.004 L1548.5 691.004 L1549.06 691.004 L1549.62 691.004 L1550.18 691.004 L1550.73 691.004 L1551.29 691.004 L1551.85 691.004 L1552.41 691.004 L1552.97 691.004 L1553.53 691.004 L1554.09 691.004 L1554.65 691.004 L1555.21 691.004 L1555.77 691.004 L1556.33 691.004 L1556.89 691.004 L1557.45 691.004 L1558 691.004 L1558.56 691.004 L1559.12 691.004 L1559.68 691.004 L1560.24 691.004 L1560.8 691.004 L1561.36 691.004 L1561.92 691.004 L1562.48 691.004 L1563.04 691.004 L1563.6 691.004 L1564.16 691.004 L1564.72 691.004 L1565.28 691.004 L1565.83 691.004 L1566.39 691.004 L1566.95 691.004 L1567.51 691.004 L1568.07 691.004 L1568.63 691.004 L1569.19 691.004 L1569.75 691.004 L1570.31 691.004 L1570.87 691.004 L1571.43 691.004 L1571.99 691.004 L1572.55 691.004 L1573.1 691.004 L1573.66 691.004 L1574.22 691.004 L1574.78 691.004 L1575.34 691.004 L1575.9 691.004 L1576.46 691.004 L1577.02 691.004 L1577.58 691.004 L1578.14 691.004 L1578.7 691.004 L1579.26 691.004 L1579.82 691.004 L1580.37 691.004 L1580.93 691.004 L1581.49 691.004 L1582.05 691.004 L1582.61 691.004 L1583.17 691.004 L1583.73 691.004 L1584.29 691.004 L1584.85 691.004 L1585.41 691.004 L1585.97 691.004 L1586.53 691.004 L1587.09 691.004 L1587.65 691.004 L1588.2 691.004 L1588.76 691.004 L1589.32 691.004 L1589.88 691.004 L1590.44 691.004 L1591 691.004 L1591.56 691.004 L1592.12 691.004 L1592.68 691.004 L1593.24 691.004 L1593.8 691.004 L1594.36 691.004 L1594.92 691.004 L1595.47 691.004 L1596.03 691.004 L1596.59 691.004 L1597.15 691.004 L1597.71 691.004 L1598.27 691.004 L1598.83 691.004 L1599.39 691.004 L1599.95 691.004 L1600.51 691.004 L1601.07 691.004 L1601.63 691.004 L1602.19 691.004 L1602.74 691.004 L1603.3 691.004 L1603.86 691.004 L1604.42 691.004 L1604.98 691.004 L1605.54 691.004 L1606.1 691.004 L1606.66 691.004 L1607.22 691.004 L1607.78 691.004 L1608.34 691.004 L1608.9 691.004 L1609.46 691.004 L1610.02 691.004 L1610.57 691.004 L1611.13 691.004 L1611.69 691.004 L1612.25 691.004 L1612.81 691.004 L1613.37 691.004 L1613.93 691.004 L1614.49 691.004 L1615.05 691.004 L1615.61 691.004 L1616.17 691.004 L1616.73 691.004 L1617.29 691.004 L1617.84 691.004 L1618.4 691.004 L1618.96 691.004 L1619.52 691.004 L1620.08 691.004 L1620.64 691.004 L1621.2 691.004 L1621.76 691.004 L1622.32 691.004 L1622.88 691.004 L1623.44 691.004 L1624 691.004 L1624.56 691.004 L1625.11 691.004 L1625.67 691.004 L1626.23 691.004 L1626.79 691.004 L1627.35 691.004 L1627.91 691.004 L1628.47 691.004 L1629.03 691.004 L1629.59 691.004 L1630.15 691.004 L1630.71 691.004 L1631.27 691.004 L1631.83 691.004 L1632.39 691.004 L1632.94 691.004 L1633.5 691.004 L1634.06 691.004 L1634.62 691.004 L1635.18 691.004 L1635.74 691.004 L1636.3 691.004 L1636.86 691.004 L1637.42 691.004 L1637.98 691.004 L1638.54 691.004 L1639.1 691.004 L1639.66 691.004 L1640.21 691.004 L1640.77 691.004 L1641.33 691.004 L1641.89 691.004 L1642.45 691.004 L1643.01 691.004 L1643.57 691.004 L1644.13 691.004 L1644.69 691.004 L1645.25 691.004 L1645.81 691.004 L1646.37 691.004 L1646.93 691.004 L1647.48 691.004 L1648.04 691.004 L1648.6 691.004 L1649.16 691.004 L1649.72 691.004 L1650.28 691.004 L1650.84 691.004 L1651.4 691.004 L1651.96 691.004 L1652.52 691.004 L1653.08 691.004 L1653.64 691.004 L1654.2 691.004 L1654.76 691.004 L1655.31 691.004 L1655.87 691.004 L1656.43 691.004 L1656.99 691.004 L1657.55 691.004 L1658.11 691.004 L1658.67 691.004 L1659.23 691.004 L1659.79 691.004 L1660.35 691.004 L1660.91 691.004 L1661.47 691.004 L1662.03 691.004 L1662.58 691.004 L1663.14 691.004 L1663.7 691.004 L1664.26 691.004 L1664.82 691.004 L1665.38 691.004 L1665.94 691.004 L1666.5 691.004 L1667.06 691.004 L1667.62 691.004 L1668.18 691.004 L1668.74 691.004 L1669.3 691.004 L1669.85 691.004 L1670.41 691.004 L1670.97 691.004 L1671.53 691.004 L1672.09 691.004 L1672.65 691.004 L1673.21 691.004 L1673.77 691.004 L1674.33 691.004 L1674.89 691.004 L1675.45 691.004 L1676.01 691.004 L1676.57 691.004 L1677.13 691.004 L1677.68 691.004 L1678.24 691.004 L1678.8 691.004 L1679.36 691.004 L1679.92 691.004 L1680.48 691.004 L1681.04 691.004 L1681.6 691.004 L1682.16 691.004 L1682.72 691.004 L1683.28 691.004 L1683.84 691.004 L1684.4 691.004 L1684.95 691.004 L1685.51 691.004 L1686.07 691.004 L1686.63 691.004 L1687.19 691.004 L1687.75 691.004 L1688.31 691.004 L1688.87 691.004 L1689.43 691.004 L1689.99 691.004 L1690.55 691.004 L1691.11 691.004 L1691.67 691.004 L1692.23 691.004 L1692.78 691.004 L1693.34 691.004 L1693.9 691.004 L1694.46 691.004 L1695.02 691.004 L1695.58 691.004 L1696.14 691.004 L1696.7 691.004 L1697.26 691.004 L1697.82 691.004 L1698.38 691.004 L1698.94 691.004 L1699.5 691.004 L1700.05 691.004 L1700.61 691.004 L1701.17 691.004 L1701.73 691.004 L1702.29 691.004 L1702.85 691.004 L1703.41 691.004 L1703.97 691.004 L1704.53 691.004 L1705.09 691.004 L1705.65 691.004 L1706.21 691.004 L1706.77 691.004 L1707.32 691.004 L1707.88 691.004 L1708.44 691.004 L1709 691.004 L1709.56 691.004 L1710.12 691.004 L1710.68 691.004 L1711.24 691.004 L1711.8 691.004 L1712.36 691.004 L1712.92 691.004 L1713.48 691.004 L1714.04 691.004 L1714.6 691.004 L1715.15 691.004 L1715.71 691.004 L1716.27 691.004 L1716.83 691.004 L1717.39 691.004 L1717.95 691.004 L1718.51 691.004 L1719.07 691.004 L1719.63 691.004 L1720.19 691.004 L1720.75 691.004 L1721.31 691.004 L1721.87 691.004 L1722.42 691.004 L1722.98 691.004 L1723.54 691.004 L1724.1 691.004 L1724.66 691.004 L1725.22 691.004 L1725.78 691.004 L1726.34 691.004 L1726.9 691.004 L1727.46 691.004 L1728.02 691.004 L1728.58 691.004 L1729.14 691.004 L1729.69 691.004 L1730.25 691.004 L1730.81 691.004 L1731.37 691.004 L1731.93 691.004 L1732.49 691.004 L1733.05 691.004 L1733.61 691.004 L1734.17 691.004 L1734.73 691.004 L1735.29 691.004 L1735.85 691.004 L1736.41 691.004 L1736.97 691.004 L1737.52 691.004 L1738.08 691.004 L1738.64 691.004 L1739.2 691.004 L1739.76 691.004 L1740.32 691.004 L1740.88 691.004 L1741.44 691.004 L1742 691.004 L1742.56 691.004 L1743.12 691.004 L1743.68 691.004 L1744.24 691.004 L1744.79 691.004 L1745.35 691.004 L1745.91 691.004 L1746.47 691.004 L1747.03 691.004 L1747.59 691.004 L1748.15 691.004 L1748.71 691.004 L1749.27 691.004 L1749.83 691.004 L1750.39 691.004 L1750.95 691.004 L1751.51 691.004 L1752.06 691.004 L1752.62 691.004 L1753.18 691.004 L1753.74 691.004 L1754.3 691.004 L1754.86 691.004 L1755.42 691.004 L1755.98 691.004 L1756.54 691.004 L1757.1 691.004 L1757.66 691.004 L1758.22 691.004 L1758.78 691.004 L1759.34 691.004 L1759.89 691.004 L1760.45 691.004 L1761.01 691.004 L1761.57 691.004 L1762.13 691.004 L1762.69 691.004 L1763.25 691.004 L1763.81 691.004 L1764.37 691.004 L1764.93 691.004 L1765.49 691.004 L1766.05 691.004 L1766.61 691.004 L1767.16 691.004 L1767.72 691.004 L1768.28 691.004 L1768.84 691.004 L1769.4 691.004 L1769.96 691.004 L1770.52 691.004 L1771.08 691.004 L1771.64 691.004 L1772.2 691.004 L1772.76 691.004 L1773.32 691.004 L1773.88 691.004 L1774.43 691.004 L1774.99 691.004 L1775.55 691.004 L1776.11 691.004 L1776.67 691.004 L1777.23 691.004 L1777.79 691.004 L1778.35 691.004 L1778.91 691.004 L1779.47 691.004 L1780.03 691.004 L1780.59 691.004 L1781.15 691.004 L1781.71 691.004 L1782.26 691.004 L1782.82 691.004 L1783.38 691.004 L1783.94 691.004 L1784.5 691.004 L1785.06 691.004 L1785.62 691.004 L1786.18 691.004 L1786.74 691.004 L1787.3 691.004 L1787.86 691.004 L1788.42 691.004 L1788.98 691.004 L1789.53 691.004 L1790.09 691.004 L1790.65 691.004 L1791.21 691.004 L1791.77 691.004 L1792.33 691.004 L1792.89 691.004 L1793.45 691.004 L1794.01 691.004 L1794.57 691.004 L1795.13 691.004 L1795.69 691.004 L1796.25 691.004 L1796.8 691.004 L1797.36 691.004 L1797.92 691.004 L1798.48 691.004 L1799.04 691.004 L1799.6 691.004 L1800.16 691.004 L1800.72 691.004 L1801.28 691.004 L1801.84 691.004 L1802.4 691.004 L1802.96 691.004 L1803.52 691.004 L1804.08 691.004 L1804.63 691.004 L1805.19 691.004 L1805.75 691.004 L1806.31 691.004 L1806.87 691.004 L1807.43 691.004 L1807.99 691.004 L1808.55 691.004 L1809.11 691.004 L1809.67 691.004 L1810.23 691.004 L1810.79 691.004 L1811.35 691.004 L1811.9 691.004 L1812.46 691.004 L1813.02 691.004 L1813.58 691.004 L1814.14 691.004 L1814.7 691.004 L1815.26 691.004 L1815.82 691.004 L1816.38 691.004 L1816.94 691.004 L1817.5 691.004 L1818.06 691.004 L1818.62 691.004 L1819.18 691.004 L1819.73 691.004 L1820.29 691.004 L1820.85 691.004 L1821.41 691.004 L1821.97 691.004 L1822.53 691.004 L1823.09 691.004 L1823.65 691.004 L1824.21 691.004 L1824.77 691.004 L1825.33 691.004 L1825.89 691.004 L1826.45 691.004 L1827 691.004 L1827.56 691.004 L1828.12 691.004 L1828.68 691.004 L1829.24 691.004 L1829.8 691.004 L1830.36 691.004 L1830.92 691.004 L1831.48 691.004 L1832.04 691.004 L1832.6 691.004 L1833.16 691.004 L1833.72 691.004 L1834.27 691.004 L1834.83 691.004 L1835.39 691.004 L1835.95 691.004 L1836.51 691.004 L1837.07 691.004 L1837.63 691.004 L1838.19 691.004 L1838.19 681.62 L1837.63 681.62 L1837.07 681.62 L1836.51 681.62 L1835.95 681.62 L1835.39 681.62 L1834.83 681.62 L1834.27 681.62 L1833.72 681.62 L1833.16 681.62 L1832.6 681.62 L1832.04 681.62 L1831.48 681.62 L1830.92 681.62 L1830.36 681.62 L1829.8 681.62 L1829.24 681.62 L1828.68 681.62 L1828.12 681.62 L1827.56 681.62 L1827 681.62 L1826.45 681.62 L1825.89 681.62 L1825.33 681.62 L1824.77 681.62 L1824.21 681.62 L1823.65 681.62 L1823.09 681.62 L1822.53 681.62 L1821.97 681.62 L1821.41 681.62 L1820.85 681.62 L1820.29 681.62 L1819.73 681.62 L1819.18 681.62 L1818.62 681.62 L1818.06 681.62 L1817.5 681.62 L1816.94 681.62 L1816.38 681.62 L1815.82 681.62 L1815.26 681.62 L1814.7 681.62 L1814.14 681.62 L1813.58 681.62 L1813.02 681.62 L1812.46 681.62 L1811.9 681.62 L1811.35 681.62 L1810.79 681.62 L1810.23 681.62 L1809.67 681.62 L1809.11 681.62 L1808.55 681.62 L1807.99 681.62 L1807.43 681.62 L1806.87 681.62 L1806.31 681.62 L1805.75 681.62 L1805.19 681.62 L1804.63 681.62 L1804.08 681.62 L1803.52 681.62 L1802.96 681.62 L1802.4 681.62 L1801.84 681.62 L1801.28 681.62 L1800.72 681.62 L1800.16 681.62 L1799.6 681.62 L1799.04 681.62 L1798.48 681.62 L1797.92 681.62 L1797.36 681.62 L1796.8 681.62 L1796.25 681.62 L1795.69 681.62 L1795.13 681.62 L1794.57 681.62 L1794.01 681.62 L1793.45 681.62 L1792.89 681.62 L1792.33 681.62 L1791.77 681.62 L1791.21 681.62 L1790.65 681.62 L1790.09 681.62 L1789.53 681.62 L1788.98 681.62 L1788.42 681.62 L1787.86 681.62 L1787.3 681.62 L1786.74 681.62 L1786.18 681.62 L1785.62 681.62 L1785.06 681.62 L1784.5 681.62 L1783.94 681.62 L1783.38 681.62 L1782.82 681.62 L1782.26 681.62 L1781.71 681.62 L1781.15 681.62 L1780.59 681.62 L1780.03 681.62 L1779.47 681.62 L1778.91 681.62 L1778.35 681.62 L1777.79 681.62 L1777.23 681.62 L1776.67 681.62 L1776.11 681.62 L1775.55 681.62 L1774.99 681.62 L1774.43 681.62 L1773.88 681.62 L1773.32 681.62 L1772.76 681.62 L1772.2 681.62 L1771.64 681.62 L1771.08 681.62 L1770.52 681.62 L1769.96 681.62 L1769.4 681.62 L1768.84 681.62 L1768.28 681.62 L1767.72 681.62 L1767.16 681.62 L1766.61 681.62 L1766.05 681.62 L1765.49 681.62 L1764.93 681.62 L1764.37 681.62 L1763.81 681.62 L1763.25 681.62 L1762.69 681.62 L1762.13 681.62 L1761.57 681.62 L1761.01 681.62 L1760.45 681.62 L1759.89 681.62 L1759.34 681.62 L1758.78 681.62 L1758.22 681.62 L1757.66 681.62 L1757.1 681.62 L1756.54 681.62 L1755.98 681.62 L1755.42 681.62 L1754.86 681.62 L1754.3 681.62 L1753.74 681.62 L1753.18 681.62 L1752.62 681.62 L1752.06 681.62 L1751.51 681.62 L1750.95 681.62 L1750.39 681.62 L1749.83 681.62 L1749.27 681.62 L1748.71 681.62 L1748.15 681.62 L1747.59 681.62 L1747.03 681.62 L1746.47 681.62 L1745.91 681.62 L1745.35 681.62 L1744.79 681.62 L1744.24 681.62 L1743.68 681.62 L1743.12 681.62 L1742.56 681.62 L1742 681.62 L1741.44 681.62 L1740.88 681.62 L1740.32 681.62 L1739.76 681.62 L1739.2 681.62 L1738.64 681.62 L1738.08 681.62 L1737.52 681.62 L1736.97 681.62 L1736.41 681.62 L1735.85 681.62 L1735.29 681.62 L1734.73 681.62 L1734.17 681.62 L1733.61 681.62 L1733.05 681.62 L1732.49 681.62 L1731.93 681.62 L1731.37 681.62 L1730.81 681.62 L1730.25 681.62 L1729.69 681.62 L1729.14 681.62 L1728.58 681.62 L1728.02 681.62 L1727.46 681.62 L1726.9 681.62 L1726.34 681.62 L1725.78 681.62 L1725.22 681.62 L1724.66 681.62 L1724.1 681.62 L1723.54 681.62 L1722.98 681.62 L1722.42 681.62 L1721.87 681.62 L1721.31 681.62 L1720.75 681.62 L1720.19 681.62 L1719.63 681.62 L1719.07 681.62 L1718.51 681.62 L1717.95 681.62 L1717.39 681.62 L1716.83 681.62 L1716.27 681.62 L1715.71 681.62 L1715.15 681.62 L1714.6 681.62 L1714.04 681.62 L1713.48 681.62 L1712.92 681.62 L1712.36 681.62 L1711.8 681.62 L1711.24 681.62 L1710.68 681.62 L1710.12 681.62 L1709.56 681.62 L1709 681.62 L1708.44 681.62 L1707.88 681.62 L1707.32 681.62 L1706.77 681.62 L1706.21 681.62 L1705.65 681.62 L1705.09 681.62 L1704.53 681.62 L1703.97 681.62 L1703.41 681.62 L1702.85 681.62 L1702.29 681.62 L1701.73 681.62 L1701.17 681.62 L1700.61 681.62 L1700.05 681.62 L1699.5 681.62 L1698.94 681.62 L1698.38 681.62 L1697.82 681.62 L1697.26 681.62 L1696.7 681.62 L1696.14 681.62 L1695.58 681.62 L1695.02 681.62 L1694.46 681.62 L1693.9 681.62 L1693.34 681.62 L1692.78 681.62 L1692.23 681.62 L1691.67 681.62 L1691.11 681.62 L1690.55 681.62 L1689.99 681.62 L1689.43 681.62 L1688.87 681.62 L1688.31 681.62 L1687.75 681.62 L1687.19 681.62 L1686.63 681.62 L1686.07 681.62 L1685.51 681.62 L1684.95 681.62 L1684.4 681.62 L1683.84 681.62 L1683.28 681.62 L1682.72 681.62 L1682.16 681.62 L1681.6 681.62 L1681.04 681.62 L1680.48 681.62 L1679.92 681.62 L1679.36 681.62 L1678.8 681.62 L1678.24 681.62 L1677.68 681.62 L1677.13 681.62 L1676.57 681.62 L1676.01 681.62 L1675.45 681.62 L1674.89 681.62 L1674.33 681.62 L1673.77 681.62 L1673.21 681.62 L1672.65 681.62 L1672.09 681.62 L1671.53 681.62 L1670.97 681.62 L1670.41 681.62 L1669.85 681.62 L1669.3 681.62 L1668.74 681.62 L1668.18 681.62 L1667.62 681.62 L1667.06 681.62 L1666.5 681.62 L1665.94 681.62 L1665.38 681.62 L1664.82 681.62 L1664.26 681.62 L1663.7 681.62 L1663.14 681.62 L1662.58 681.62 L1662.03 681.62 L1661.47 681.62 L1660.91 681.62 L1660.35 681.62 L1659.79 681.62 L1659.23 681.62 L1658.67 681.62 L1658.11 681.62 L1657.55 681.62 L1656.99 681.62 L1656.43 681.62 L1655.87 681.62 L1655.31 681.62 L1654.76 681.62 L1654.2 681.62 L1653.64 681.62 L1653.08 681.62 L1652.52 681.62 L1651.96 681.62 L1651.4 681.62 L1650.84 681.62 L1650.28 681.62 L1649.72 681.62 L1649.16 681.62 L1648.6 681.62 L1648.04 681.62 L1647.48 681.62 L1646.93 681.62 L1646.37 681.62 L1645.81 681.62 L1645.25 681.62 L1644.69 681.62 L1644.13 681.62 L1643.57 681.62 L1643.01 681.62 L1642.45 681.62 L1641.89 681.62 L1641.33 681.62 L1640.77 681.62 L1640.21 681.62 L1639.66 681.62 L1639.1 681.62 L1638.54 681.62 L1637.98 681.62 L1637.42 681.62 L1636.86 681.62 L1636.3 681.62 L1635.74 681.62 L1635.18 681.62 L1634.62 681.62 L1634.06 681.62 L1633.5 681.62 L1632.94 681.62 L1632.39 681.62 L1631.83 681.62 L1631.27 681.62 L1630.71 681.62 L1630.15 681.62 L1629.59 681.62 L1629.03 681.62 L1628.47 681.62 L1627.91 681.62 L1627.35 681.62 L1626.79 681.62 L1626.23 681.62 L1625.67 681.62 L1625.11 681.62 L1624.56 681.62 L1624 681.62 L1623.44 681.62 L1622.88 681.62 L1622.32 681.62 L1621.76 681.62 L1621.2 681.62 L1620.64 681.62 L1620.08 681.62 L1619.52 681.62 L1618.96 681.62 L1618.4 681.62 L1617.84 681.62 L1617.29 681.62 L1616.73 681.62 L1616.17 681.62 L1615.61 681.62 L1615.05 681.62 L1614.49 681.62 L1613.93 681.62 L1613.37 681.62 L1612.81 681.62 L1612.25 681.62 L1611.69 681.62 L1611.13 681.62 L1610.57 681.62 L1610.02 681.62 L1609.46 681.62 L1608.9 681.62 L1608.34 681.62 L1607.78 681.62 L1607.22 681.62 L1606.66 681.62 L1606.1 681.62 L1605.54 681.62 L1604.98 681.62 L1604.42 681.62 L1603.86 681.62 L1603.3 681.62 L1602.74 681.62 L1602.19 681.62 L1601.63 681.62 L1601.07 681.62 L1600.51 681.62 L1599.95 681.62 L1599.39 681.62 L1598.83 681.62 L1598.27 681.62 L1597.71 681.62 L1597.15 681.62 L1596.59 681.62 L1596.03 681.62 L1595.47 681.62 L1594.92 681.62 L1594.36 681.62 L1593.8 681.62 L1593.24 681.62 L1592.68 681.62 L1592.12 681.62 L1591.56 681.62 L1591 681.62 L1590.44 681.62 L1589.88 681.62 L1589.32 681.62 L1588.76 681.62 L1588.2 681.62 L1587.65 681.62 L1587.09 681.62 L1586.53 681.62 L1585.97 681.62 L1585.41 681.62 L1584.85 681.62 L1584.29 681.62 L1583.73 681.62 L1583.17 681.62 L1582.61 681.62 L1582.05 681.62 L1581.49 681.62 L1580.93 681.62 L1580.37 681.62 L1579.82 681.62 L1579.26 681.62 L1578.7 681.62 L1578.14 681.62 L1577.58 681.62 L1577.02 681.62 L1576.46 681.62 L1575.9 681.62 L1575.34 681.62 L1574.78 681.62 L1574.22 681.62 L1573.66 681.62 L1573.1 681.62 L1572.55 681.62 L1571.99 681.62 L1571.43 681.62 L1570.87 681.62 L1570.31 681.62 L1569.75 681.62 L1569.19 681.62 L1568.63 681.62 L1568.07 681.62 L1567.51 681.62 L1566.95 681.62 L1566.39 681.62 L1565.83 681.62 L1565.28 681.62 L1564.72 681.62 L1564.16 681.62 L1563.6 681.62 L1563.04 681.62 L1562.48 681.62 L1561.92 681.62 L1561.36 681.62 L1560.8 681.62 L1560.24 681.62 L1559.68 681.62 L1559.12 681.62 L1558.56 681.62 L1558 681.62 L1557.45 681.62 L1556.89 681.62 L1556.33 681.62 L1555.77 681.62 L1555.21 681.62 L1554.65 681.62 L1554.09 681.62 L1553.53 681.62 L1552.97 681.62 L1552.41 681.62 L1551.85 681.62 L1551.29 681.62 L1550.73 681.62 L1550.18 681.62 L1549.62 681.62 L1549.06 681.62 L1548.5 681.62 L1547.94 681.62 L1547.38 681.62 L1546.82 681.62 L1546.26 681.62 L1545.7 681.62 L1545.14 681.62 L1544.58 681.62 L1544.02 681.62 L1543.46 681.62 L1542.9 681.62 L1542.35 681.62 L1541.79 681.62 L1541.23 681.62 L1540.67 681.62 L1540.11 681.62 L1539.55 681.62 L1538.99 681.62 L1538.43 681.62 L1537.87 681.62 L1537.31 681.62 L1536.75 681.62 L1536.19 681.62 L1535.63 681.62 L1535.08 681.62 L1534.52 681.62 L1533.96 681.62 L1533.4 681.62 L1532.84 681.62 L1532.28 681.62 L1531.72 681.62 L1531.16 681.62 L1530.6 681.62 L1530.04 681.62 L1529.48 681.62 L1528.92 681.62 L1528.36 681.62 L1527.81 681.62 L1527.25 681.62 L1526.69 681.62 L1526.13 681.62 L1525.57 681.62 L1525.01 681.62 L1524.45 681.62 L1523.89 681.62 L1523.33 681.62 L1522.77 681.62 L1522.21 681.62 L1521.65 681.62 L1521.09 681.62 L1520.53 681.62 L1519.98 681.62 L1519.42 681.62 L1518.86 681.62 L1518.3 681.62 L1517.74 681.62 L1517.18 681.62 L1516.62 681.62 L1516.06 681.62 L1515.5 681.62 L1514.94 681.62 L1514.38 681.62 L1513.82 681.62 L1513.26 681.62 L1512.71 681.62 L1512.15 681.62 L1511.59 681.62 L1511.03 681.62 L1510.47 681.62 L1509.91 681.62 L1509.35 681.62 L1508.79 681.62 L1508.23 681.62 L1507.67 681.62 L1507.11 681.62 L1506.55 681.62 L1505.99 681.62 L1505.44 681.62 L1504.88 681.62 L1504.32 681.62 L1503.76 681.62 L1503.2 681.62 L1502.64 681.62 L1502.08 681.62 L1501.52 681.62 L1500.96 681.62 L1500.4 681.62 L1499.84 681.62 L1499.28 681.62 L1498.72 681.62 L1498.16 681.62 L1497.61 681.62 L1497.05 681.62 L1496.49 681.62 L1495.93 681.62 L1495.37 681.62 L1494.81 681.62 L1494.25 681.62 L1493.69 681.62 L1493.13 681.62 L1492.57 681.62 L1492.01 681.62 L1491.45 681.62 L1490.89 681.62 L1490.34 681.62 L1489.78 681.62 L1489.22 681.62 L1488.66 681.62 L1488.1 681.62 L1487.54 681.62 L1486.98 681.62 L1486.42 681.62 L1485.86 681.62 L1485.3 681.62 L1484.74 681.62 L1484.18 681.62 L1483.62 681.62 L1483.07 681.62 L1482.51 681.62 L1481.95 681.62 L1481.39 681.62 L1480.83 681.62 L1480.27 681.62 L1479.71 681.62 L1479.15 681.62 L1478.59 681.62 L1478.03 681.62 L1477.47 681.62 L1476.91 681.62 L1476.35 681.62 L1475.79 681.62 L1475.24 681.62 L1474.68 681.62 L1474.12 681.62 L1473.56 681.62 L1473 681.62 L1472.44 681.62 L1471.88 681.62 L1471.32 681.62 L1470.76 681.62 L1470.2 681.62 L1469.64 681.62 L1469.08 681.62 L1468.52 681.62 L1467.97 681.62 L1467.41 681.62 L1466.85 681.62 L1466.29 681.62 L1465.73 681.62 L1465.17 681.62 L1464.61 681.62 L1464.05 681.62 L1463.49 681.62 L1462.93 681.62 L1462.37 681.62 L1461.81 681.62 L1461.25 681.62 L1460.7 681.62 L1460.14 681.62 L1459.58 681.62 L1459.02 681.62 L1458.46 681.62 L1457.9 681.62 L1457.34 681.62 L1456.78 681.62 L1456.22 681.62 L1455.66 681.62 L1455.1 681.62 L1454.54 681.62 L1453.98 681.62 L1453.42 681.62 L1452.87 681.62 L1452.31 681.62 L1451.75 681.62 L1451.19 681.62 L1450.63 681.62 L1450.07 681.62 L1449.51 681.62 L1448.95 681.62 L1448.39 681.62 L1447.83 681.62 L1447.27 681.62 L1446.71 681.62 L1446.15 681.62 L1445.6 681.62 L1445.04 681.62 L1444.48 681.62 L1443.92 681.62 L1443.36 681.62 L1442.8 681.62 L1442.24 681.62 L1441.68 681.62 L1441.12 681.62 L1440.56 681.62 L1440 681.62 L1439.44 681.62 L1438.88 681.62 L1438.33 681.62 L1437.77 681.62 L1437.21 681.62 L1436.65 681.62 L1436.09 681.62 L1435.53 681.62 L1434.97 681.62 L1434.41 681.62 L1433.85 681.62 L1433.29 681.62 L1432.73 681.62 L1432.17 681.62 L1431.61 681.62 L1431.05 681.62 L1430.5 681.62 L1429.94 681.62 L1429.38 681.62 L1428.82 681.62 L1428.26 681.62 L1427.7 681.62 L1427.14 681.62 L1426.58 681.62 L1426.02 681.62 L1425.46 681.62 L1424.9 681.62 L1424.34 681.62 L1423.78 681.62 L1423.23 681.62 L1422.67 681.62 L1422.11 681.62 L1421.55 681.62 L1420.99 681.62 L1420.43 681.62 L1419.87 681.62 L1419.31 681.62 L1418.75 681.62 L1418.19 681.62 L1417.63 681.62 L1417.07 681.62 L1416.51 681.62 L1415.95 681.62 L1415.4 681.62 L1414.84 681.62 L1414.28 681.62 L1413.72 681.62 L1413.16 681.62 L1412.6 681.62 L1412.04 681.62 L1411.48 681.62 L1410.92 681.62 L1410.36 681.62 L1409.8 681.62 L1409.24 681.62 L1408.68 681.62 L1408.13 681.62 L1407.57 681.62 L1407.01 681.62 L1406.45 681.62 L1405.89 681.62 L1405.33 681.62 L1404.77 681.62 L1404.21 681.62 L1403.65 681.62 L1403.09 681.62 L1402.53 681.62 L1401.97 681.62 L1401.41 681.62 L1400.86 681.62 L1400.3 681.62 L1399.74 681.62 L1399.18 681.62 L1398.62 681.62 L1398.06 681.62 L1397.5 681.62 L1396.94 681.62 L1396.38 681.62 L1395.82 681.62 L1395.26 681.62 L1394.7 681.62 L1394.14 681.62 L1393.58 681.62 L1393.03 681.62 L1392.47 681.62 L1391.91 681.62 L1391.35 681.62 L1390.79 681.62 L1390.23 681.62 L1389.67 681.62 L1389.11 681.62 L1388.55 681.62 L1387.99 681.62 L1387.43 681.62 L1386.87 681.62 L1386.31 681.62 L1385.76 681.62 L1385.2 681.62 L1384.64 681.62 L1384.08 681.62 L1383.52 681.62 L1382.96 681.62 L1382.4 681.62 L1381.84 681.62 L1381.28 681.62 L1380.72 681.62 L1380.16 681.62 L1379.6 681.62 L1379.04 681.62 L1378.49 681.62 L1377.93 681.62 L1377.37 681.62 L1376.81 681.62 L1376.25 681.62 L1375.69 681.62 L1375.13 681.62 L1374.57 681.62 L1374.01 681.62 L1373.45 681.62 L1372.89 681.62 L1372.33 681.62 L1371.77 681.62 L1371.21 681.62 L1370.66 681.62 L1370.1 681.62 L1369.54 681.62 L1368.98 681.62 L1368.42 681.62 L1367.86 681.62 L1367.3 681.62 L1366.74 681.62 L1366.18 681.62 L1365.62 681.62 L1365.06 681.62 L1364.5 681.62 L1363.94 681.62 L1363.39 681.62 L1362.83 681.62 L1362.27 681.62 L1361.71 681.62 L1361.15 681.62 L1360.59 681.62 L1360.03 681.62 L1359.47 681.62 L1358.91 681.62 L1358.35 681.62 L1357.79 681.62 L1357.23 681.62 L1356.67 681.62 L1356.12 681.62 L1355.56 681.62 L1355 681.62 L1354.44 681.62 L1353.88 681.62 L1353.32 681.62 L1352.76 681.62 L1352.2 681.62 L1351.64 681.62 L1351.08 681.62 L1350.52 681.62 L1349.96 681.62 L1349.4 681.62 L1348.84 681.62 L1348.29 681.62 L1347.73 681.62 L1347.17 681.62 L1346.61 681.62 L1346.05 681.62 L1345.49 681.62 L1344.93 681.62 L1344.37 681.62 L1343.81 681.62 L1343.25 681.62 L1342.69 681.62 L1342.13 681.62 L1341.57 681.62 L1341.02 681.62 L1340.46 681.62 L1339.9 681.62 L1339.34 681.62 L1338.78 681.62 L1338.22 681.62 L1337.66 681.62 L1337.1 681.62 L1336.54 681.62 L1335.98 681.62 L1335.42 681.62 L1334.86 681.62 L1334.3 681.62 L1333.75 681.62 L1333.19 681.62 L1332.63 681.62 L1332.07 681.62 L1331.51 681.62 L1330.95 681.62 L1330.39 681.62 L1329.83 681.62 L1329.27 681.62 L1328.71 681.62 L1328.15 681.62 L1327.59 681.62 L1327.03 681.62 L1326.47 681.62 L1325.92 681.62 L1325.36 681.62 L1324.8 681.62 L1324.24 681.62 L1323.68 681.62 L1323.12 681.62 L1322.56 681.62 L1322 681.62 L1321.44 681.62 L1320.88 681.62 L1320.32 681.62 L1319.76 681.62 L1319.2 681.62 L1318.65 681.62 L1318.09 681.62 L1317.53 681.62 L1316.97 681.62 L1316.41 681.62 L1315.85 681.62 L1315.29 681.62 L1314.73 681.62 L1314.17 681.62 L1313.61 681.62 L1313.05 681.62 L1312.49 681.62 L1311.93 681.62 L1311.38 681.62 L1310.82 681.62 L1310.26 681.62 L1309.7 681.62 L1309.14 681.62 L1308.58 681.62 L1308.02 681.62 L1307.46 681.62 L1306.9 681.62 L1306.34 681.62 L1305.78 681.62 L1305.22 681.62 L1304.66 681.62 L1304.1 681.62 L1303.55 681.62 L1302.99 681.62 L1302.43 681.62 L1301.87 681.62 L1301.31 681.62 L1300.75 681.62 L1300.19 681.62 L1299.63 681.62 L1299.07 681.62 L1298.51 681.62 L1297.95 681.62 L1297.39 681.62 L1296.83 681.62 L1296.28 681.62 L1295.72 681.62 L1295.16 681.62 L1294.6 681.62 L1294.04 681.62 L1293.48 681.62 L1292.92 681.62 L1292.36 681.62 L1291.8 681.62 L1291.24 681.62 L1290.68 681.62 L1290.12 681.62 L1289.56 681.62 L1289 681.62 L1288.45 681.62 L1287.89 681.62 L1287.33 681.62 L1286.77 681.62 L1286.21 681.62 L1285.65 681.62 L1285.09 681.62 L1284.53 681.62 L1283.97 681.62 L1283.41 681.62 L1282.85 681.62 L1282.29 681.62 L1281.73 681.62 L1281.18 681.62 L1280.62 681.62 L1280.06 681.62 L1279.5 681.62 L1278.94 681.62 L1278.38 681.62 L1277.82 681.62 L1277.26 681.62 L1276.7 681.62 L1276.14 681.62 L1275.58 681.62 L1275.02 681.62 L1274.46 681.62 L1273.91 681.62 L1273.35 681.62 L1272.79 681.62 L1272.23 681.62 L1271.67 681.62 L1271.11 681.62 L1270.55 681.62 L1269.99 681.62 L1269.43 681.62 L1268.87 681.62 L1268.31 681.62 L1267.75 681.62 L1267.19 681.62 L1266.63 681.62 L1266.08 681.62 L1265.52 681.62 L1264.96 681.62 L1264.4 681.62 L1263.84 681.62 L1263.28 681.62 L1262.72 681.62 L1262.16 681.62 L1261.6 681.62 L1261.04 681.62 L1260.48 681.62 L1259.92 681.62 L1259.36 681.62 L1258.81 681.62 L1258.25 681.62 L1257.69 681.62 L1257.13 681.62 L1256.57 681.62 L1256.01 681.62 L1255.45 681.62 L1254.89 681.62 L1254.33 681.62 L1253.77 681.62 L1253.21 681.62 L1252.65 681.62 L1252.09 681.62 L1251.54 681.62 L1250.98 681.62 L1250.42 681.62 L1249.86 681.62 L1249.3 681.62 L1248.74 681.62 L1248.18 681.62 L1247.62 681.62 L1247.06 681.62 L1246.5 681.62 L1245.94 681.62 L1245.38 681.62 L1244.82 681.62 L1244.26 681.62 L1243.71 681.62 L1243.15 681.62 L1242.59 681.62 L1242.03 681.62 L1241.47 681.62 L1240.91 681.62 L1240.35 681.62 L1239.79 681.62 L1239.23 681.62 L1238.67 681.62 L1238.11 681.62 L1237.55 681.62 L1236.99 681.62 L1236.44 681.62 L1235.88 681.62 L1235.32 681.62 L1234.76 681.62 L1234.2 681.62 L1233.64 681.62 L1233.08 681.62 L1232.52 681.62 L1231.96 681.62 L1231.4 681.62 L1230.84 681.62 L1230.28 681.62 L1229.72 681.62 L1229.17 681.62 L1228.61 681.62 L1228.05 681.62 L1227.49 681.62 L1226.93 681.62 L1226.37 681.62 L1225.81 681.62 L1225.25 681.62 L1224.69 681.62 L1224.13 681.62 L1223.57 681.62 L1223.01 681.62 L1222.45 681.62 L1221.89 681.62 L1221.34 681.62 L1220.78 681.62 L1220.22 681.62 L1219.66 681.62 L1219.1 681.62 L1218.54 681.62 L1217.98 681.62 L1217.42 681.62 L1216.86 681.62 L1216.3 681.62 L1215.74 681.62 L1215.18 681.62 L1214.62 681.62 L1214.07 681.62 L1213.51 681.62 L1212.95 681.62 L1212.39 681.62 L1211.83 681.62 L1211.27 681.62 L1210.71 681.62 L1210.15 681.62 L1209.59 681.62 L1209.03 681.62 L1208.47 681.62 L1207.91 681.62 L1207.35 681.62 L1206.8 681.62 L1206.24 681.62 L1205.68 681.62 L1205.12 681.62 L1204.56 681.62 L1204 681.62 L1203.44 681.62 L1202.88 681.62 L1202.32 681.62 L1201.76 681.62 L1201.2 681.62 L1200.64 681.62 L1200.08 681.62 L1199.52 681.62 L1198.97 681.62 L1198.41 681.62 L1197.85 681.62 L1197.29 681.62 L1196.73 681.62 L1196.17 681.62 L1195.61 681.62 L1195.05 681.62 L1194.49 681.62 L1193.93 681.62 L1193.37 681.62 L1192.81 681.62 L1192.25 681.62 L1191.7 681.62 L1191.14 681.62 L1190.58 681.62 L1190.02 681.62 L1189.46 681.62 L1188.9 681.62 L1188.34 681.62 L1187.78 681.62 L1187.22 681.62 L1186.66 681.62 L1186.1 681.62 L1185.54 681.62 L1184.98 681.62 L1184.43 681.62 L1183.87 681.62 L1183.31 681.62 L1182.75 681.62 L1182.19 681.62 L1181.63 681.62 L1181.07 681.62 L1180.51 681.62 L1179.95 681.62 L1179.39 681.62 L1178.83 681.62 L1178.27 681.62 L1177.71 681.62 L1177.15 681.62 L1176.6 681.62 L1176.04 681.62 L1175.48 681.62 L1174.92 681.62 L1174.36 681.62 L1173.8 681.62 L1173.24 681.62 L1172.68 681.62 L1172.12 681.62 L1171.56 681.62 L1171 681.62 L1170.44 681.62 L1169.88 681.62 L1169.33 681.62 L1168.77 681.62 L1168.21 681.62 L1167.65 681.62 L1167.09 681.62 L1166.53 681.62 L1165.97 681.62 L1165.41 681.62 L1164.85 681.62 L1164.29 681.62 L1163.73 681.62 L1163.17 681.62 L1162.61 681.62 L1162.05 681.62 L1161.5 681.62 L1160.94 681.62 L1160.38 681.62 L1159.82 681.62 L1159.26 681.62 L1158.7 681.62 L1158.14 681.62 L1157.58 681.62 L1157.02 681.62 L1156.46 681.62 L1155.9 681.62 L1155.34 681.62 L1154.78 681.62 L1154.23 681.62 L1153.67 681.62 L1153.11 681.62 L1152.55 681.62 L1151.99 681.62 L1151.43 681.62 L1150.87 681.62 L1150.31 681.62 L1149.75 681.62 L1149.19 681.62 L1148.63 681.62 L1148.07 681.62 L1147.51 681.62 L1146.96 681.62 L1146.4 681.62 L1145.84 681.62 L1145.28 681.62 L1144.72 681.62 L1144.16 681.62 L1143.6 681.62 L1143.04 681.62 L1142.48 681.62 L1141.92 681.62 L1141.36 681.62 L1140.8 681.62 L1140.24 681.62 L1139.68 681.62 L1139.13 681.62 L1138.57 681.62 L1138.01 681.62 L1137.45 681.62 L1136.89 681.62 L1136.33 681.62 L1135.77 681.62 L1135.21 681.62 L1134.65 681.62 L1134.09 681.62 L1133.53 681.62 L1132.97 681.62 L1132.41 681.62 L1131.86 681.62 L1131.3 681.62 L1130.74 681.62 L1130.18 681.62 L1129.62 681.62 L1129.06 681.62 L1128.5 681.62 L1127.94 681.62 L1127.38 681.62 L1126.82 681.62 L1126.26 681.62 L1125.7 681.62 L1125.14 681.62 L1124.59 681.62 L1124.03 681.62 L1123.47 681.62 L1122.91 681.62 L1122.35 681.62 L1121.79 681.62 L1121.23 681.62 L1120.67 681.62 L1120.11 681.62 L1119.55 681.62 L1118.99 681.62 L1118.43 681.62 L1117.87 681.62 L1117.31 681.62 L1116.76 681.62 L1116.2 681.62 L1115.64 681.62 L1115.08 681.62 L1114.52 681.62 L1113.96 681.62 L1113.4 681.62 L1112.84 681.62 L1112.28 681.62 L1111.72 681.62 L1111.16 681.62 L1110.6 681.62 L1110.04 681.62 L1109.49 681.62 L1108.93 681.62 L1108.37 681.62 L1107.81 681.62 L1107.25 681.62 L1106.69 681.62 L1106.13 681.62 L1105.57 681.62 L1105.01 681.62 L1104.45 681.62 L1103.89 681.62 L1103.33 681.62 L1102.77 681.62 L1102.22 681.62 L1101.66 681.62 L1101.1 681.62 L1100.54 681.62 L1099.98 681.62 L1099.42 681.62 L1098.86 681.62 L1098.3 681.62 L1097.74 681.62 L1097.18 681.62 L1096.62 681.62 L1096.06 681.62 L1095.5 681.62 L1094.94 681.62 L1094.39 681.62 L1093.83 681.62 L1093.27 681.62 L1092.71 681.62 L1092.15 681.62 L1091.59 681.62 L1091.03 681.62 L1090.47 681.62 L1089.91 681.62 L1089.35 681.62 L1088.79 681.62 L1088.23 681.62 L1087.67 681.62 L1087.12 681.62 L1086.56 681.62 L1086 681.62 L1085.44 681.62 L1084.88 681.62 L1084.32 681.62 L1083.76 681.62 L1083.2 681.62 L1082.64 681.62 L1082.08 681.62 L1081.52 681.62 L1080.96 681.62 L1080.4 681.62 L1079.85 681.62 L1079.29 681.62 L1078.73 681.62 L1078.17 681.62 L1077.61 681.62 L1077.05 681.62 L1076.49 681.62 L1075.93 681.62 L1075.37 681.62 L1074.81 681.62 L1074.25 681.62 L1073.69 681.62 L1073.13 681.62 L1072.57 681.62 L1072.02 681.62 L1071.46 681.62 L1070.9 681.62 L1070.34 681.62 L1069.78 681.62 L1069.22 681.62 L1068.66 681.62 L1068.1 681.62 L1067.54 681.62 L1066.98 681.62 L1066.42 681.62 L1065.86 681.62 L1065.3 681.62 L1064.75 681.62 L1064.19 681.62 L1063.63 681.62 L1063.07 681.62 L1062.51 681.62 L1061.95 681.62 L1061.39 681.62 L1060.83 681.62 L1060.27 681.62 L1059.71 681.62 L1059.15 681.62 L1058.59 681.62 L1058.03 681.62 L1057.48 681.62 L1056.92 681.62 L1056.36 681.62 L1055.8 681.62 L1055.24 681.62 L1054.68 681.62 L1054.12 681.62 L1053.56 681.62 L1053 681.62 L1052.44 681.62 L1051.88 681.62 L1051.32 681.62 L1050.76 681.62 L1050.2 681.62 L1049.65 681.62 L1049.09 681.62 L1048.53 681.62 L1047.97 681.62 L1047.41 681.62 L1046.85 681.62 L1046.29 681.62 L1045.73 681.62 L1045.17 681.62 L1044.61 681.62 L1044.05 681.62 L1043.49 681.62 L1042.93 681.62 L1042.38 681.62 L1041.82 681.62 L1041.26 681.62 L1040.7 681.62 L1040.14 681.62 L1039.58 681.62 L1039.02 681.62 L1038.46 681.62 L1037.9 681.62 L1037.34 681.62 L1036.78 681.62 L1036.22 681.62 L1035.66 681.62 L1035.1 681.62 L1034.55 681.62 L1033.99 681.62 L1033.43 681.62 L1032.87 681.62 L1032.31 681.62 L1031.75 681.62 L1031.19 681.62 L1030.63 681.62 L1030.07 681.62 L1029.51 681.62 L1028.95 681.62 L1028.39 681.62 L1027.83 681.62 L1027.28 681.62 L1026.72 681.62 L1026.16 681.62 L1025.6 681.62 L1025.04 681.62 L1024.48 681.62 L1023.92 681.62 L1023.36 681.62 L1022.8 681.62 L1022.24 681.62 L1021.68 681.62 L1021.12 681.62 L1020.56 681.62 L1020.01 681.62 L1019.45 681.62 L1018.89 681.62 L1018.33 681.62 L1017.77 681.62 L1017.21 681.62 L1016.65 681.62 L1016.09 681.62 L1015.53 681.62 L1014.97 681.62 L1014.41 681.62 L1013.85 681.62 L1013.29 681.62 L1012.73 681.62 L1012.18 681.62 L1011.62 681.62 L1011.06 681.62 L1010.5 681.62 L1009.94 681.62 L1009.38 681.62 L1008.82 681.62 L1008.26 681.62 L1007.7 681.62 L1007.14 681.62 L1006.58 681.62 L1006.02 681.62 L1005.46 681.62 L1004.91 681.62 L1004.35 681.62 L1003.79 681.62 L1003.23 681.62 L1002.67 681.62 L1002.11 681.62 L1001.55 681.62 L1000.99 681.62 L1000.43 681.62 L999.872 681.62 L999.313 681.62 L998.754 681.62 L998.194 681.62 L997.635 681.62 L997.076 681.62 L996.517 681.62 L995.957 681.62 L995.398 681.62 L994.839 681.62 L994.28 681.62 L993.72 681.62 L993.161 681.62 L992.602 681.62 L992.043 681.62 L991.483 681.62 L990.924 681.62 L990.365 681.62 L989.806 681.62 L989.246 681.62 L988.687 681.62 L988.128 681.62 L987.569 681.62 L987.009 681.62 L986.45 681.62 L985.891 681.62 L985.332 681.62 L984.772 681.62 L984.213 681.62 L983.654 681.62 L983.095 681.62 L982.535 681.62 L981.976 681.62 L981.417 681.62 L980.858 681.62 L980.298 681.62 L979.739 681.62 L979.18 681.62 L978.621 681.62 L978.061 681.62 L977.502 681.62 L976.943 681.62 L976.384 681.62 L975.824 681.62 L975.265 681.62 L974.706 681.62 L974.147 681.62 L973.587 681.62 L973.028 681.62 L972.469 681.62 L971.91 681.62 L971.35 681.62 L970.791 681.62 L970.232 681.62 L969.673 681.62 L969.113 681.62 L968.554 681.62 L967.995 681.62 L967.436 681.62 L966.876 681.62 L966.317 681.62 L965.758 681.62 L965.199 681.62 L964.639 681.62 L964.08 681.62 L963.521 681.62 L962.962 681.62 L962.402 681.62 L961.843 681.62 L961.284 681.62 L960.725 681.62 L960.165 681.62 L959.606 681.62 L959.047 681.62 L958.488 681.62 L957.928 681.62 L957.369 681.62 L956.81 681.62 L956.251 681.62 L955.691 681.62 L955.132 681.62 L954.573 681.62 L954.014 681.62 L953.454 681.62 L952.895 681.62 L952.336 681.62 L951.777 681.62 L951.217 681.62 L950.658 681.62 L950.099 681.62 L949.54 681.62 L948.98 681.62 L948.421 681.62 L947.862 681.62 L947.303 681.62 L946.743 681.62 L946.184 681.62 L945.625 681.62 L945.066 681.62 L944.506 681.62 L943.947 681.62 L943.388 681.62 L942.829 681.62 L942.269 681.62 L941.71 681.62 L941.151 681.62 L940.592 681.62 L940.032 681.62 L939.473 681.62 L938.914 681.62 L938.355 681.62 L937.795 681.62 L937.236 681.62 L936.677 681.62 L936.118 681.62 L935.558 681.62 L934.999 681.62 L934.44 681.62 L933.881 681.62 L933.321 681.62 L932.762 681.62 L932.203 681.62 L931.644 681.62 L931.084 681.62 L930.525 681.62 L929.966 681.62 L929.406 681.62 L928.847 681.62 L928.288 681.62 L927.729 681.62 L927.169 681.62 L926.61 681.62 L926.051 681.62 L925.492 681.62 L924.932 681.62 L924.373 681.62 L923.814 681.62 L923.255 681.62 L922.695 681.62 L922.136 681.62 L921.577 681.62 L921.018 681.62 L920.458 681.62 L919.899 681.62 L919.34 681.62 L918.781 681.62 L918.221 681.62 L917.662 681.62 L917.103 681.62 L916.544 681.62 L915.984 681.62 L915.425 681.62 L914.866 681.62 L914.307 681.62 L913.747 681.62 L913.188 681.62 L912.629 681.62 L912.07 681.62 L911.51 681.62 L910.951 681.62 L910.392 681.62 L909.833 681.62 L909.273 681.62 L908.714 681.62 L908.155 681.62 L907.596 681.62 L907.036 681.62 L906.477 681.62 L905.918 681.62 L905.359 681.62 L904.799 681.62 L904.24 681.62 L903.681 681.62 L903.122 681.62 L902.562 681.62 L902.003 681.62 L901.444 681.62 L900.885 681.62 L900.325 681.62 L899.766 681.62 L899.207 681.62 L898.648 681.62 L898.088 681.62 L897.529 681.62 L896.97 681.62 L896.411 681.62 L895.851 681.62 L895.292 681.62 L894.733 681.62 L894.174 681.62 L893.614 681.62 L893.055 681.62 L892.496 681.62 L891.937 681.62 L891.377 681.62 L890.818 681.62 L890.259 681.62 L889.7 681.62 L889.14 681.62 L888.581 681.62 L888.022 681.62 L887.463 681.62 L886.903 681.62 L886.344 681.62 L885.785 681.62 L885.226 681.62 L884.666 681.62 L884.107 681.62 L883.548 681.62 L882.989 681.62 L882.429 681.62 L881.87 681.62 L881.311 681.62 L880.752 681.62 L880.192 681.62 L879.633 681.62 L879.074 681.62 L878.515 681.62 L877.955 681.62 L877.396 681.62 L876.837 681.62 L876.278 681.62 L875.718 681.62 L875.159 681.62 L874.6 681.62 L874.041 681.62 L873.481 681.62 L872.922 681.62 L872.363 681.62 L871.804 681.62 L871.244 681.62 L870.685 681.62 L870.126 681.62 L869.567 681.62 L869.007 681.62 L868.448 681.62 L867.889 681.62 L867.33 681.62 L866.77 681.62 L866.211 681.62 L865.652 681.62 L865.093 681.62 L864.533 681.62 L863.974 681.62 L863.415 681.62 L862.856 681.62 L862.296 681.62 L861.737 681.62 L861.178 681.62 L860.619 681.62 L860.059 681.62 L859.5 681.62 L858.941 681.62 L858.382 681.62 L857.822 681.62 L857.263 681.62 L856.704 681.62 L856.145 681.62 L855.585 681.62 L855.026 681.62 L854.467 681.62 L853.908 681.62 L853.348 681.62 L852.789 681.62 L852.23 681.62 L851.671 681.62 L851.111 681.62 L850.552 681.62 L849.993 681.62 L849.434 681.62 L848.874 681.62 L848.315 681.62 L847.756 681.62 L847.197 681.62 L846.637 681.62 L846.078 681.62 L845.519 681.62 L844.96 681.62 L844.4 681.62 L843.841 681.62 L843.282 681.62 L842.723 681.62 L842.163 681.62 L841.604 681.62 L841.045 681.62 L840.486 681.62 L839.926 681.62 L839.367 681.62 L838.808 681.62 L838.249 681.62 L837.689 681.62 L837.13 681.62 L836.571 681.62 L836.012 681.62 L835.452 681.62 L834.893 681.62 L834.334 681.62 L833.775 681.62 L833.215 681.62 L832.656 681.62 L832.097 681.62 L831.538 681.62 L830.978 681.62 L830.419 681.62 L829.86 681.62 L829.301 681.62 L828.741 681.62 L828.182 681.62 L827.623 681.62 L827.064 681.62 L826.504 681.62 L825.945 681.62 L825.386 681.62 L824.827 681.62 L824.267 681.62 L823.708 681.62 L823.149 681.62 L822.59 681.62 L822.03 681.62 L821.471 681.62 L820.912 681.62 L820.353 681.62 L819.793 681.62 L819.234 681.62 L818.675 681.62 L818.116 681.62 L817.556 681.62 L816.997 681.62 L816.438 681.62 L815.879 681.62 L815.319 681.62 L814.76 681.62 L814.201 681.62 L813.642 681.62 L813.082 681.62 L812.523 681.62 L811.964 681.62 L811.405 681.62 L810.845 681.62 L810.286 681.62 L809.727 681.62 L809.168 681.62 L808.608 681.62 L808.049 681.62 L807.49 681.62 L806.931 681.62 L806.371 681.62 L805.812 681.62 L805.253 681.62 L804.693 681.62 L804.134 681.62 L803.575 681.62 L803.016 681.62 L802.456 681.62 L801.897 681.62 L801.338 681.62 L800.779 681.62 L800.219 681.62 L799.66 681.62 L799.101 681.62 L798.542 681.62 L797.982 681.62 L797.423 681.62 L796.864 681.62 L796.305 681.62 L795.745 681.62 L795.186 681.62 L794.627 681.62 L794.068 681.62 L793.508 681.62 L792.949 681.62 L792.39 681.62 L791.831 681.62 L791.271 681.62 L790.712 681.62 L790.153 681.62 L789.594 681.62 L789.034 681.62 L788.475 681.62 L787.916 681.62 L787.357 681.62 L786.797 681.62 L786.238 681.62 L785.679 681.62 L785.12 681.62 L784.56 681.62 L784.001 681.62 L783.442 681.62 L782.883 681.62 L782.323 681.62 L781.764 681.62 L781.205 681.62 L780.646 681.62 L780.086 681.62 L779.527 681.62 L778.968 681.62 L778.409 681.62 L777.849 681.62 L777.29 681.62 L776.731 681.62 L776.172 681.62 L775.612 681.62 L775.053 681.62 L774.494 681.62 L773.935 681.62 L773.375 681.62 L772.816 681.62 L772.257 681.62 L771.698 681.62 L771.138 681.62 L770.579 681.62 L770.02 681.62 L769.461 681.62 L768.901 681.62 L768.342 681.62 L767.783 681.62 L767.224 681.62 L766.664 681.62 L766.105 681.62 L765.546 681.62 L764.987 681.62 L764.427 681.62 L763.868 681.62 L763.309 681.62 L762.75 681.62 L762.19 681.62 L761.631 681.62 L761.072 681.62 L760.513 681.62 L759.953 681.62 L759.394 681.62 L758.835 681.62 L758.276 681.62 L757.716 681.62 L757.157 681.62 L756.598 681.62 L756.039 681.62 L755.479 681.62 L754.92 681.62 L754.361 681.62 L753.802 681.62 L753.242 681.62 L752.683 681.62 L752.124 681.62 L751.565 681.62 L751.005 681.62 L750.446 681.62 L749.887 681.62 L749.328 681.62 L748.768 681.62 L748.209 681.62 L747.65 681.62 L747.091 681.62 L746.531 681.62 L745.972 681.62 L745.413 681.62 L744.854 681.62 L744.294 681.62 L743.735 681.62 L743.176 681.62 L742.617 681.62 L742.057 681.62 L741.498 681.62 L740.939 681.62 L740.38 681.62 L739.82 681.62 L739.261 681.62 L738.702 681.62 L738.143 681.62 L737.583 681.62 L737.024 681.62 L736.465 681.62 L735.906 681.62 L735.346 681.62 L734.787 681.62 L734.228 681.62 L733.669 681.62 L733.109 681.62 L732.55 681.62 L731.991 681.62 L731.432 681.62 L730.872 681.62 L730.313 681.62 L729.754 681.62 L729.195 681.62 L728.635 681.62 L728.076 681.62 L727.517 681.62 L726.958 681.62 L726.398 681.62 L725.839 681.62 L725.28 681.62 L724.721 681.62 L724.161 681.62 L723.602 681.62 L723.043 681.62 L722.484 681.62 L721.924 681.62 L721.365 681.62 L720.806 681.62 L720.247 681.62  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.312 720.806,686.312 721.365,686.312 721.924,686.312 722.484,686.312 723.043,686.312 723.602,686.312 724.161,686.312 724.721,686.312 725.28,686.312 725.839,686.312 726.398,686.312 726.958,686.312 727.517,686.312 728.076,686.312 728.635,686.312 729.195,686.312 729.754,686.312 730.313,686.312 730.872,686.312 731.432,686.312 731.991,686.312 732.55,686.312 733.109,686.312 733.669,686.312 734.228,686.312 734.787,686.312 735.346,686.312 735.906,686.312 736.465,686.312 737.024,686.312 737.583,686.312 738.143,686.312 738.702,686.312 739.261,686.312 739.82,686.312 740.38,686.312 740.939,686.312 741.498,686.312 742.057,686.312 742.617,686.312 743.176,686.312 743.735,686.312 744.294,686.312 744.854,686.312 745.413,686.312 745.972,686.312 746.531,686.312 747.091,686.312 747.65,686.312 748.209,686.312 748.768,686.312 749.328,686.312 749.887,686.312 750.446,686.312 751.005,686.312 751.565,686.312 752.124,686.312 752.683,686.312 753.242,686.312 753.802,686.312 754.361,686.312 754.92,686.312 755.479,686.312 756.039,686.312 756.598,686.312 757.157,686.312 757.716,686.312 758.276,686.312 758.835,686.312 759.394,686.312 759.953,686.312 760.513,686.312 761.072,686.312 761.631,686.312 762.19,686.312 762.75,686.312 763.309,686.312 763.868,686.312 764.427,686.312 764.987,686.312 765.546,686.312 766.105,686.312 766.664,686.312 767.224,686.312 767.783,686.312 768.342,686.312 768.901,686.312 769.461,686.312 770.02,686.312 770.579,686.312 771.138,686.312 771.698,686.312 772.257,686.312 772.816,686.312 773.375,686.312 773.935,686.312 774.494,686.312 775.053,686.312 775.612,686.312 776.172,686.312 776.731,686.312 777.29,686.312 777.849,686.312 778.409,686.312 778.968,686.312 779.527,686.312 780.086,686.312 780.646,686.312 781.205,686.312 781.764,686.312 782.323,686.312 782.883,686.312 783.442,686.312 784.001,686.312 784.56,686.312 785.12,686.312 785.679,686.312 786.238,686.312 786.797,686.312 787.357,686.312 787.916,686.312 788.475,686.312 789.034,686.312 789.594,686.312 790.153,686.312 790.712,686.312 791.271,686.312 791.831,686.312 792.39,686.312 792.949,686.312 793.508,686.312 794.068,686.312 794.627,686.312 795.186,686.312 795.745,686.312 796.305,686.312 796.864,686.312 797.423,686.312 797.982,686.312 798.542,686.312 799.101,686.312 799.66,686.312 800.219,686.312 800.779,686.312 801.338,686.312 801.897,686.312 802.456,686.312 803.016,686.312 803.575,686.312 804.134,686.312 804.693,686.312 805.253,686.312 805.812,686.312 806.371,686.312 806.931,686.312 807.49,686.312 808.049,686.312 808.608,686.312 809.168,686.312 809.727,686.312 810.286,686.312 810.845,686.312 811.405,686.312 811.964,686.312 812.523,686.312 813.082,686.312 813.642,686.312 814.201,686.312 814.76,686.312 815.319,686.312 815.879,686.312 816.438,686.312 816.997,686.312 817.556,686.312 818.116,686.312 818.675,686.312 819.234,686.312 819.793,686.312 820.353,686.312 820.912,686.312 821.471,686.312 822.03,686.312 822.59,686.312 823.149,686.312 823.708,686.312 824.267,686.312 824.827,686.312 825.386,686.312 825.945,686.312 826.504,686.312 827.064,686.312 827.623,686.312 828.182,686.312 828.741,686.312 829.301,686.312 829.86,686.312 830.419,686.312 830.978,686.312 831.538,686.312 832.097,686.312 832.656,686.312 833.215,686.312 833.775,686.312 834.334,686.312 834.893,686.312 835.452,686.312 836.012,686.312 836.571,686.312 837.13,686.312 837.689,686.312 838.249,686.312 838.808,686.312 839.367,686.312 839.926,686.312 840.486,686.312 841.045,686.312 841.604,686.312 842.163,686.312 842.723,686.312 843.282,686.312 843.841,686.312 844.4,686.312 844.96,686.312 845.519,686.312 846.078,686.312 846.637,686.312 847.197,686.312 847.756,686.312 848.315,686.312 848.874,686.312 849.434,686.312 849.993,686.312 850.552,686.312 851.111,686.312 851.671,686.312 852.23,686.312 852.789,686.312 853.348,686.312 853.908,686.312 854.467,686.312 855.026,686.312 855.585,686.312 856.145,686.312 856.704,686.312 857.263,686.312 857.822,686.312 858.382,686.312 858.941,686.312 859.5,686.312 860.059,686.312 860.619,686.312 861.178,686.312 861.737,686.312 862.296,686.312 862.856,686.312 863.415,686.312 863.974,686.312 864.533,686.312 865.093,686.312 865.652,686.312 866.211,686.312 866.77,686.312 867.33,686.312 867.889,686.312 868.448,686.312 869.007,686.312 869.567,686.312 870.126,686.312 870.685,686.312 871.244,686.312 871.804,686.312 872.363,686.312 872.922,686.312 873.481,686.312 874.041,686.312 874.6,686.312 875.159,686.312 875.718,686.312 876.278,686.312 876.837,686.312 877.396,686.312 877.955,686.312 878.515,686.312 879.074,686.312 879.633,686.312 880.192,686.312 880.752,686.312 881.311,686.312 881.87,686.312 882.429,686.312 882.989,686.312 883.548,686.312 884.107,686.312 884.666,686.312 885.226,686.312 885.785,686.312 886.344,686.312 886.903,686.312 887.463,686.312 888.022,686.312 888.581,686.312 889.14,686.312 889.7,686.312 890.259,686.312 890.818,686.312 891.377,686.312 891.937,686.312 892.496,686.312 893.055,686.312 893.614,686.312 894.174,686.312 894.733,686.312 895.292,686.312 895.851,686.312 896.411,686.312 896.97,686.312 897.529,686.312 898.088,686.312 898.648,686.312 899.207,686.312 899.766,686.312 900.325,686.312 900.885,686.312 901.444,686.312 902.003,686.312 902.562,686.312 903.122,686.312 903.681,686.312 904.24,686.312 904.799,686.312 905.359,686.312 905.918,686.312 906.477,686.312 907.036,686.312 907.596,686.312 908.155,686.312 908.714,686.312 909.273,686.312 909.833,686.312 910.392,686.312 910.951,686.312 911.51,686.312 912.07,686.312 912.629,686.312 913.188,686.312 913.747,686.312 914.307,686.312 914.866,686.312 915.425,686.312 915.984,686.312 916.544,686.312 917.103,686.312 917.662,686.312 918.221,686.312 918.781,686.312 919.34,686.312 919.899,686.312 920.458,686.312 921.018,686.312 921.577,686.312 922.136,686.312 922.695,686.312 923.255,686.312 923.814,686.312 924.373,686.312 924.932,686.312 925.492,686.312 926.051,686.312 926.61,686.312 927.169,686.312 927.729,686.312 928.288,686.312 928.847,686.312 929.406,686.312 929.966,686.312 930.525,686.312 931.084,686.312 931.644,686.312 932.203,686.312 932.762,686.312 933.321,686.312 933.881,686.312 934.44,686.312 934.999,686.312 935.558,686.312 936.118,686.312 936.677,686.312 937.236,686.312 937.795,686.312 938.355,686.312 938.914,686.312 939.473,686.312 940.032,686.312 940.592,686.312 941.151,686.312 941.71,686.312 942.269,686.312 942.829,686.312 943.388,686.312 943.947,686.312 944.506,686.312 945.066,686.312 945.625,686.312 946.184,686.312 946.743,686.312 947.303,686.312 947.862,686.312 948.421,686.312 948.98,686.312 949.54,686.312 950.099,686.312 950.658,686.312 951.217,686.312 951.777,686.312 952.336,686.312 952.895,686.312 953.454,686.312 954.014,686.312 954.573,686.312 955.132,686.312 955.691,686.312 956.251,686.312 956.81,686.312 957.369,686.312 957.928,686.312 958.488,686.312 959.047,686.312 959.606,686.312 960.165,686.312 960.725,686.312 961.284,686.312 961.843,686.312 962.402,686.312 962.962,686.312 963.521,686.312 964.08,686.312 964.639,686.312 965.199,686.312 965.758,686.312 966.317,686.312 966.876,686.312 967.436,686.312 967.995,686.312 968.554,686.312 969.113,686.312 969.673,686.312 970.232,686.312 970.791,686.312 971.35,686.312 971.91,686.312 972.469,686.312 973.028,686.312 973.587,686.312 974.147,686.312 974.706,686.312 975.265,686.312 975.824,686.312 976.384,686.312 976.943,686.312 977.502,686.312 978.061,686.312 978.621,686.312 979.18,686.312 979.739,686.312 980.298,686.312 980.858,686.312 981.417,686.312 981.976,686.312 982.535,686.312 983.095,686.312 983.654,686.312 984.213,686.312 984.772,686.312 985.332,686.312 985.891,686.312 986.45,686.312 987.009,686.312 987.569,686.312 988.128,686.312 988.687,686.312 989.246,686.312 989.806,686.312 990.365,686.312 990.924,686.312 991.483,686.312 992.043,686.312 992.602,686.312 993.161,686.312 993.72,686.312 994.28,686.312 994.839,686.312 995.398,686.312 995.957,686.312 996.517,686.312 997.076,686.312 997.635,686.312 998.194,686.312 998.754,686.312 999.313,686.312 999.872,686.312 1000.43,686.312 1000.99,686.312 1001.55,686.312 1002.11,686.312 1002.67,686.312 1003.23,686.312 1003.79,686.312 1004.35,686.312 1004.91,686.312 1005.46,686.312 1006.02,686.312 1006.58,686.312 1007.14,686.312 1007.7,686.312 1008.26,686.312 1008.82,686.312 1009.38,686.312 1009.94,686.312 1010.5,686.312 1011.06,686.312 1011.62,686.312 1012.18,686.312 1012.73,686.312 1013.29,686.312 1013.85,686.312 1014.41,686.312 1014.97,686.312 1015.53,686.312 1016.09,686.312 1016.65,686.312 1017.21,686.312 1017.77,686.312 1018.33,686.312 1018.89,686.312 1019.45,686.312 1020.01,686.312 1020.56,686.312 1021.12,686.312 1021.68,686.312 1022.24,686.312 1022.8,686.312 1023.36,686.312 1023.92,686.312 1024.48,686.312 1025.04,686.312 1025.6,686.312 1026.16,686.312 1026.72,686.312 1027.28,686.312 1027.83,686.312 1028.39,686.312 1028.95,686.312 1029.51,686.312 1030.07,686.312 1030.63,686.312 1031.19,686.312 1031.75,686.312 1032.31,686.312 1032.87,686.312 1033.43,686.312 1033.99,686.312 1034.55,686.312 1035.1,686.312 1035.66,686.312 1036.22,686.312 1036.78,686.312 1037.34,686.312 1037.9,686.312 1038.46,686.312 1039.02,686.312 1039.58,686.312 1040.14,686.312 1040.7,686.312 1041.26,686.312 1041.82,686.312 1042.38,686.312 1042.93,686.312 1043.49,686.312 1044.05,686.312 1044.61,686.312 1045.17,686.312 1045.73,686.312 1046.29,686.312 1046.85,686.312 1047.41,686.312 1047.97,686.312 1048.53,686.312 1049.09,686.312 1049.65,686.312 1050.2,686.312 1050.76,686.312 1051.32,686.312 1051.88,686.312 1052.44,686.312 1053,686.312 1053.56,686.312 1054.12,686.312 1054.68,686.312 1055.24,686.312 1055.8,686.312 1056.36,686.312 1056.92,686.312 1057.48,686.312 1058.03,686.312 1058.59,686.312 1059.15,686.312 1059.71,686.312 1060.27,686.312 1060.83,686.312 1061.39,686.312 1061.95,686.312 1062.51,686.312 1063.07,686.312 1063.63,686.312 1064.19,686.312 1064.75,686.312 1065.3,686.312 1065.86,686.312 1066.42,686.312 1066.98,686.312 1067.54,686.312 1068.1,686.312 1068.66,686.312 1069.22,686.312 1069.78,686.312 1070.34,686.312 1070.9,686.312 1071.46,686.312 1072.02,686.312 1072.57,686.312 1073.13,686.312 1073.69,686.312 1074.25,686.312 1074.81,686.312 1075.37,686.312 1075.93,686.312 1076.49,686.312 1077.05,686.312 1077.61,686.312 1078.17,686.312 1078.73,686.312 1079.29,686.312 1079.85,686.312 1080.4,686.312 1080.96,686.312 1081.52,686.312 1082.08,686.312 1082.64,686.312 1083.2,686.312 1083.76,686.312 1084.32,686.312 1084.88,686.312 1085.44,686.312 1086,686.312 1086.56,686.312 1087.12,686.312 1087.67,686.312 1088.23,686.312 1088.79,686.312 1089.35,686.312 1089.91,686.312 1090.47,686.312 1091.03,686.312 1091.59,686.312 1092.15,686.312 1092.71,686.312 1093.27,686.312 1093.83,686.312 1094.39,686.312 1094.94,686.312 1095.5,686.312 1096.06,686.312 1096.62,686.312 1097.18,686.312 1097.74,686.312 1098.3,686.312 1098.86,686.312 1099.42,686.312 1099.98,686.312 1100.54,686.312 1101.1,686.312 1101.66,686.312 1102.22,686.312 1102.77,686.312 1103.33,686.312 1103.89,686.312 1104.45,686.312 1105.01,686.312 1105.57,686.312 1106.13,686.312 1106.69,686.312 1107.25,686.312 1107.81,686.312 1108.37,686.312 1108.93,686.312 1109.49,686.312 1110.04,686.312 1110.6,686.312 1111.16,686.312 1111.72,686.312 1112.28,686.312 1112.84,686.312 1113.4,686.312 1113.96,686.312 1114.52,686.312 1115.08,686.312 1115.64,686.312 1116.2,686.312 1116.76,686.312 1117.31,686.312 1117.87,686.312 1118.43,686.312 1118.99,686.312 1119.55,686.312 1120.11,686.312 1120.67,686.312 1121.23,686.312 1121.79,686.312 1122.35,686.312 1122.91,686.312 1123.47,686.312 1124.03,686.312 1124.59,686.312 1125.14,686.312 1125.7,686.312 1126.26,686.312 1126.82,686.312 1127.38,686.312 1127.94,686.312 1128.5,686.312 1129.06,686.312 1129.62,686.312 1130.18,686.312 1130.74,686.312 1131.3,686.312 1131.86,686.312 1132.41,686.312 1132.97,686.312 1133.53,686.312 1134.09,686.312 1134.65,686.312 1135.21,686.312 1135.77,686.312 1136.33,686.312 1136.89,686.312 1137.45,686.312 1138.01,686.312 1138.57,686.312 1139.13,686.312 1139.68,686.312 1140.24,686.312 1140.8,686.312 1141.36,686.312 1141.92,686.312 1142.48,686.312 1143.04,686.312 1143.6,686.312 1144.16,686.312 1144.72,686.312 1145.28,686.312 1145.84,686.312 1146.4,686.312 1146.96,686.312 1147.51,686.312 1148.07,686.312 1148.63,686.312 1149.19,686.312 1149.75,686.312 1150.31,686.312 1150.87,686.312 1151.43,686.312 1151.99,686.312 1152.55,686.312 1153.11,686.312 1153.67,686.312 1154.23,686.312 1154.78,686.312 1155.34,686.312 1155.9,686.312 1156.46,686.312 1157.02,686.312 1157.58,686.312 1158.14,686.312 1158.7,686.312 1159.26,686.312 1159.82,686.312 1160.38,686.312 1160.94,686.312 1161.5,686.312 1162.05,686.312 1162.61,686.312 1163.17,686.312 1163.73,686.312 1164.29,686.312 1164.85,686.312 1165.41,686.312 1165.97,686.312 1166.53,686.312 1167.09,686.312 1167.65,686.312 1168.21,686.312 1168.77,686.312 1169.33,686.312 1169.88,686.312 1170.44,686.312 1171,686.312 1171.56,686.312 1172.12,686.312 1172.68,686.312 1173.24,686.312 1173.8,686.312 1174.36,686.312 1174.92,686.312 1175.48,686.312 1176.04,686.312 1176.6,686.312 1177.15,686.312 1177.71,686.312 1178.27,686.312 1178.83,686.312 1179.39,686.312 1179.95,686.312 1180.51,686.312 1181.07,686.312 1181.63,686.312 1182.19,686.312 1182.75,686.312 1183.31,686.312 1183.87,686.312 1184.43,686.312 1184.98,686.312 1185.54,686.312 1186.1,686.312 1186.66,686.312 1187.22,686.312 1187.78,686.312 1188.34,686.312 1188.9,686.312 1189.46,686.312 1190.02,686.312 1190.58,686.312 1191.14,686.312 1191.7,686.312 1192.25,686.312 1192.81,686.312 1193.37,686.312 1193.93,686.312 1194.49,686.312 1195.05,686.312 1195.61,686.312 1196.17,686.312 1196.73,686.312 1197.29,686.312 1197.85,686.312 1198.41,686.312 1198.97,686.312 1199.52,686.312 1200.08,686.312 1200.64,686.312 1201.2,686.312 1201.76,686.312 1202.32,686.312 1202.88,686.312 1203.44,686.312 1204,686.312 1204.56,686.312 1205.12,686.312 1205.68,686.312 1206.24,686.312 1206.8,686.312 1207.35,686.312 1207.91,686.312 1208.47,686.312 1209.03,686.312 1209.59,686.312 1210.15,686.312 1210.71,686.312 1211.27,686.312 1211.83,686.312 1212.39,686.312 1212.95,686.312 1213.51,686.312 1214.07,686.312 1214.62,686.312 1215.18,686.312 1215.74,686.312 1216.3,686.312 1216.86,686.312 1217.42,686.312 1217.98,686.312 1218.54,686.312 1219.1,686.312 1219.66,686.312 1220.22,686.312 1220.78,686.312 1221.34,686.312 1221.89,686.312 1222.45,686.312 1223.01,686.312 1223.57,686.312 1224.13,686.312 1224.69,686.312 1225.25,686.312 1225.81,686.312 1226.37,686.312 1226.93,686.312 1227.49,686.312 1228.05,686.312 1228.61,686.312 1229.17,686.312 1229.72,686.312 1230.28,686.312 1230.84,686.312 1231.4,686.312 1231.96,686.312 1232.52,686.312 1233.08,686.312 1233.64,686.312 1234.2,686.312 1234.76,686.312 1235.32,686.312 1235.88,686.312 1236.44,686.312 1236.99,686.312 1237.55,686.312 1238.11,686.312 1238.67,686.312 1239.23,686.312 1239.79,686.312 1240.35,686.312 1240.91,686.312 1241.47,686.312 1242.03,686.312 1242.59,686.312 1243.15,686.312 1243.71,686.312 1244.26,686.312 1244.82,686.312 1245.38,686.312 1245.94,686.312 1246.5,686.312 1247.06,686.312 1247.62,686.312 1248.18,686.312 1248.74,686.312 1249.3,686.312 1249.86,686.312 1250.42,686.312 1250.98,686.312 1251.54,686.312 1252.09,686.312 1252.65,686.312 1253.21,686.312 1253.77,686.312 1254.33,686.312 1254.89,686.312 1255.45,686.312 1256.01,686.312 1256.57,686.312 1257.13,686.312 1257.69,686.312 1258.25,686.312 1258.81,686.312 1259.36,686.312 1259.92,686.312 1260.48,686.312 1261.04,686.312 1261.6,686.312 1262.16,686.312 1262.72,686.312 1263.28,686.312 1263.84,686.312 1264.4,686.312 1264.96,686.312 1265.52,686.312 1266.08,686.312 1266.63,686.312 1267.19,686.312 1267.75,686.312 1268.31,686.312 1268.87,686.312 1269.43,686.312 1269.99,686.312 1270.55,686.312 1271.11,686.312 1271.67,686.312 1272.23,686.312 1272.79,686.312 1273.35,686.312 1273.91,686.312 1274.46,686.312 1275.02,686.312 1275.58,686.312 1276.14,686.312 1276.7,686.312 1277.26,686.312 1277.82,686.312 1278.38,686.312 1278.94,686.312 1279.5,686.312 1280.06,686.312 1280.62,686.312 1281.18,686.312 1281.73,686.312 1282.29,686.312 1282.85,686.312 1283.41,686.312 1283.97,686.312 1284.53,686.312 1285.09,686.312 1285.65,686.312 1286.21,686.312 1286.77,686.312 1287.33,686.312 1287.89,686.312 1288.45,686.312 1289,686.312 1289.56,686.312 1290.12,686.312 1290.68,686.312 1291.24,686.312 1291.8,686.312 1292.36,686.312 1292.92,686.312 1293.48,686.312 1294.04,686.312 1294.6,686.312 1295.16,686.312 1295.72,686.312 1296.28,686.312 1296.83,686.312 1297.39,686.312 1297.95,686.312 1298.51,686.312 1299.07,686.312 1299.63,686.312 1300.19,686.312 1300.75,686.312 1301.31,686.312 1301.87,686.312 1302.43,686.312 1302.99,686.312 1303.55,686.312 1304.1,686.312 1304.66,686.312 1305.22,686.312 1305.78,686.312 1306.34,686.312 1306.9,686.312 1307.46,686.312 1308.02,686.312 1308.58,686.312 1309.14,686.312 1309.7,686.312 1310.26,686.312 1310.82,686.312 1311.38,686.312 1311.93,686.312 1312.49,686.312 1313.05,686.312 1313.61,686.312 1314.17,686.312 1314.73,686.312 1315.29,686.312 1315.85,686.312 1316.41,686.312 1316.97,686.312 1317.53,686.312 1318.09,686.312 1318.65,686.312 1319.2,686.312 1319.76,686.312 1320.32,686.312 1320.88,686.312 1321.44,686.312 1322,686.312 1322.56,686.312 1323.12,686.312 1323.68,686.312 1324.24,686.312 1324.8,686.312 1325.36,686.312 1325.92,686.312 1326.47,686.312 1327.03,686.312 1327.59,686.312 1328.15,686.312 1328.71,686.312 1329.27,686.312 1329.83,686.312 1330.39,686.312 1330.95,686.312 1331.51,686.312 1332.07,686.312 1332.63,686.312 1333.19,686.312 1333.75,686.312 1334.3,686.312 1334.86,686.312 1335.42,686.312 1335.98,686.312 1336.54,686.312 1337.1,686.312 1337.66,686.312 1338.22,686.312 1338.78,686.312 1339.34,686.312 1339.9,686.312 1340.46,686.312 1341.02,686.312 1341.57,686.312 1342.13,686.312 1342.69,686.312 1343.25,686.312 1343.81,686.312 1344.37,686.312 1344.93,686.312 1345.49,686.312 1346.05,686.312 1346.61,686.312 1347.17,686.312 1347.73,686.312 1348.29,686.312 1348.84,686.312 1349.4,686.312 1349.96,686.312 1350.52,686.312 1351.08,686.312 1351.64,686.312 1352.2,686.312 1352.76,686.312 1353.32,686.312 1353.88,686.312 1354.44,686.312 1355,686.312 1355.56,686.312 1356.12,686.312 1356.67,686.312 1357.23,686.312 1357.79,686.312 1358.35,686.312 1358.91,686.312 1359.47,686.312 1360.03,686.312 1360.59,686.312 1361.15,686.312 1361.71,686.312 1362.27,686.312 1362.83,686.312 1363.39,686.312 1363.94,686.312 1364.5,686.312 1365.06,686.312 1365.62,686.312 1366.18,686.312 1366.74,686.312 1367.3,686.312 1367.86,686.312 1368.42,686.312 1368.98,686.312 1369.54,686.312 1370.1,686.312 1370.66,686.312 1371.21,686.312 1371.77,686.312 1372.33,686.312 1372.89,686.312 1373.45,686.312 1374.01,686.312 1374.57,686.312 1375.13,686.312 1375.69,686.312 1376.25,686.312 1376.81,686.312 1377.37,686.312 1377.93,686.312 1378.49,686.312 1379.04,686.312 1379.6,686.312 1380.16,686.312 1380.72,686.312 1381.28,686.312 1381.84,686.312 1382.4,686.312 1382.96,686.312 1383.52,686.312 1384.08,686.312 1384.64,686.312 1385.2,686.312 1385.76,686.312 1386.31,686.312 1386.87,686.312 1387.43,686.312 1387.99,686.312 1388.55,686.312 1389.11,686.312 1389.67,686.312 1390.23,686.312 1390.79,686.312 1391.35,686.312 1391.91,686.312 1392.47,686.312 1393.03,686.312 1393.58,686.312 1394.14,686.312 1394.7,686.312 1395.26,686.312 1395.82,686.312 1396.38,686.312 1396.94,686.312 1397.5,686.312 1398.06,686.312 1398.62,686.312 1399.18,686.312 1399.74,686.312 1400.3,686.312 1400.86,686.312 1401.41,686.312 1401.97,686.312 1402.53,686.312 1403.09,686.312 1403.65,686.312 1404.21,686.312 1404.77,686.312 1405.33,686.312 1405.89,686.312 1406.45,686.312 1407.01,686.312 1407.57,686.312 1408.13,686.312 1408.68,686.312 1409.24,686.312 1409.8,686.312 1410.36,686.312 1410.92,686.312 1411.48,686.312 1412.04,686.312 1412.6,686.312 1413.16,686.312 1413.72,686.312 1414.28,686.312 1414.84,686.312 1415.4,686.312 1415.95,686.312 1416.51,686.312 1417.07,686.312 1417.63,686.312 1418.19,686.312 1418.75,686.312 1419.31,686.312 1419.87,686.312 1420.43,686.312 1420.99,686.312 1421.55,686.312 1422.11,686.312 1422.67,686.312 1423.23,686.312 1423.78,686.312 1424.34,686.312 1424.9,686.312 1425.46,686.312 1426.02,686.312 1426.58,686.312 1427.14,686.312 1427.7,686.312 1428.26,686.312 1428.82,686.312 1429.38,686.312 1429.94,686.312 1430.5,686.312 1431.05,686.312 1431.61,686.312 1432.17,686.312 1432.73,686.312 1433.29,686.312 1433.85,686.312 1434.41,686.312 1434.97,686.312 1435.53,686.312 1436.09,686.312 1436.65,686.312 1437.21,686.312 1437.77,686.312 1438.33,686.312 1438.88,686.312 1439.44,686.312 1440,686.312 1440.56,686.312 1441.12,686.312 1441.68,686.312 1442.24,686.312 1442.8,686.312 1443.36,686.312 1443.92,686.312 1444.48,686.312 1445.04,686.312 1445.6,686.312 1446.15,686.312 1446.71,686.312 1447.27,686.312 1447.83,686.312 1448.39,686.312 1448.95,686.312 1449.51,686.312 1450.07,686.312 1450.63,686.312 1451.19,686.312 1451.75,686.312 1452.31,686.312 1452.87,686.312 1453.42,686.312 1453.98,686.312 1454.54,686.312 1455.1,686.312 1455.66,686.312 1456.22,686.312 1456.78,686.312 1457.34,686.312 1457.9,686.312 1458.46,686.312 1459.02,686.312 1459.58,686.312 1460.14,686.312 1460.7,686.312 1461.25,686.312 1461.81,686.312 1462.37,686.312 1462.93,686.312 1463.49,686.312 1464.05,686.312 1464.61,686.312 1465.17,686.312 1465.73,686.312 1466.29,686.312 1466.85,686.312 1467.41,686.312 1467.97,686.312 1468.52,686.312 1469.08,686.312 1469.64,686.312 1470.2,686.312 1470.76,686.312 1471.32,686.312 1471.88,686.312 1472.44,686.312 1473,686.312 1473.56,686.312 1474.12,686.312 1474.68,686.312 1475.24,686.312 1475.79,686.312 1476.35,686.312 1476.91,686.312 1477.47,686.312 1478.03,686.312 1478.59,686.312 1479.15,686.312 1479.71,686.312 1480.27,686.312 1480.83,686.312 1481.39,686.312 1481.95,686.312 1482.51,686.312 1483.07,686.312 1483.62,686.312 1484.18,686.312 1484.74,686.312 1485.3,686.312 1485.86,686.312 1486.42,686.312 1486.98,686.312 1487.54,686.312 1488.1,686.312 1488.66,686.312 1489.22,686.312 1489.78,686.312 1490.34,686.312 1490.89,686.312 1491.45,686.312 1492.01,686.312 1492.57,686.312 1493.13,686.312 1493.69,686.312 1494.25,686.312 1494.81,686.312 1495.37,686.312 1495.93,686.312 1496.49,686.312 1497.05,686.312 1497.61,686.312 1498.16,686.312 1498.72,686.312 1499.28,686.312 1499.84,686.312 1500.4,686.312 1500.96,686.312 1501.52,686.312 1502.08,686.312 1502.64,686.312 1503.2,686.312 1503.76,686.312 1504.32,686.312 1504.88,686.312 1505.44,686.312 1505.99,686.312 1506.55,686.312 1507.11,686.312 1507.67,686.312 1508.23,686.312 1508.79,686.312 1509.35,686.312 1509.91,686.312 1510.47,686.312 1511.03,686.312 1511.59,686.312 1512.15,686.312 1512.71,686.312 1513.26,686.312 1513.82,686.312 1514.38,686.312 1514.94,686.312 1515.5,686.312 1516.06,686.312 1516.62,686.312 1517.18,686.312 1517.74,686.312 1518.3,686.312 1518.86,686.312 1519.42,686.312 1519.98,686.312 1520.53,686.312 1521.09,686.312 1521.65,686.312 1522.21,686.312 1522.77,686.312 1523.33,686.312 1523.89,686.312 1524.45,686.312 1525.01,686.312 1525.57,686.312 1526.13,686.312 1526.69,686.312 1527.25,686.312 1527.81,686.312 1528.36,686.312 1528.92,686.312 1529.48,686.312 1530.04,686.312 1530.6,686.312 1531.16,686.312 1531.72,686.312 1532.28,686.312 1532.84,686.312 1533.4,686.312 1533.96,686.312 1534.52,686.312 1535.08,686.312 1535.63,686.312 1536.19,686.312 1536.75,686.312 1537.31,686.312 1537.87,686.312 1538.43,686.312 1538.99,686.312 1539.55,686.312 1540.11,686.312 1540.67,686.312 1541.23,686.312 1541.79,686.312 1542.35,686.312 1542.9,686.312 1543.46,686.312 1544.02,686.312 1544.58,686.312 1545.14,686.312 1545.7,686.312 1546.26,686.312 1546.82,686.312 1547.38,686.312 1547.94,686.312 1548.5,686.312 1549.06,686.312 1549.62,686.312 1550.18,686.312 1550.73,686.312 1551.29,686.312 1551.85,686.312 1552.41,686.312 1552.97,686.312 1553.53,686.312 1554.09,686.312 1554.65,686.312 1555.21,686.312 1555.77,686.312 1556.33,686.312 1556.89,686.312 1557.45,686.312 1558,686.312 1558.56,686.312 1559.12,686.312 1559.68,686.312 1560.24,686.312 1560.8,686.312 1561.36,686.312 1561.92,686.312 1562.48,686.312 1563.04,686.312 1563.6,686.312 1564.16,686.312 1564.72,686.312 1565.28,686.312 1565.83,686.312 1566.39,686.312 1566.95,686.312 1567.51,686.312 1568.07,686.312 1568.63,686.312 1569.19,686.312 1569.75,686.312 1570.31,686.312 1570.87,686.312 1571.43,686.312 1571.99,686.312 1572.55,686.312 1573.1,686.312 1573.66,686.312 1574.22,686.312 1574.78,686.312 1575.34,686.312 1575.9,686.312 1576.46,686.312 1577.02,686.312 1577.58,686.312 1578.14,686.312 1578.7,686.312 1579.26,686.312 1579.82,686.312 1580.37,686.312 1580.93,686.312 1581.49,686.312 1582.05,686.312 1582.61,686.312 1583.17,686.312 1583.73,686.312 1584.29,686.312 1584.85,686.312 1585.41,686.312 1585.97,686.312 1586.53,686.312 1587.09,686.312 1587.65,686.312 1588.2,686.312 1588.76,686.312 1589.32,686.312 1589.88,686.312 1590.44,686.312 1591,686.312 1591.56,686.312 1592.12,686.312 1592.68,686.312 1593.24,686.312 1593.8,686.312 1594.36,686.312 1594.92,686.312 1595.47,686.312 1596.03,686.312 1596.59,686.312 1597.15,686.312 1597.71,686.312 1598.27,686.312 1598.83,686.312 1599.39,686.312 1599.95,686.312 1600.51,686.312 1601.07,686.312 1601.63,686.312 1602.19,686.312 1602.74,686.312 1603.3,686.312 1603.86,686.312 1604.42,686.312 1604.98,686.312 1605.54,686.312 1606.1,686.312 1606.66,686.312 1607.22,686.312 1607.78,686.312 1608.34,686.312 1608.9,686.312 1609.46,686.312 1610.02,686.312 1610.57,686.312 1611.13,686.312 1611.69,686.312 1612.25,686.312 1612.81,686.312 1613.37,686.312 1613.93,686.312 1614.49,686.312 1615.05,686.312 1615.61,686.312 1616.17,686.312 1616.73,686.312 1617.29,686.312 1617.84,686.312 1618.4,686.312 1618.96,686.312 1619.52,686.312 1620.08,686.312 1620.64,686.312 1621.2,686.312 1621.76,686.312 1622.32,686.312 1622.88,686.312 1623.44,686.312 1624,686.312 1624.56,686.312 1625.11,686.312 1625.67,686.312 1626.23,686.312 1626.79,686.312 1627.35,686.312 1627.91,686.312 1628.47,686.312 1629.03,686.312 1629.59,686.312 1630.15,686.312 1630.71,686.312 1631.27,686.312 1631.83,686.312 1632.39,686.312 1632.94,686.312 1633.5,686.312 1634.06,686.312 1634.62,686.312 1635.18,686.312 1635.74,686.312 1636.3,686.312 1636.86,686.312 1637.42,686.312 1637.98,686.312 1638.54,686.312 1639.1,686.312 1639.66,686.312 1640.21,686.312 1640.77,686.312 1641.33,686.312 1641.89,686.312 1642.45,686.312 1643.01,686.312 1643.57,686.312 1644.13,686.312 1644.69,686.312 1645.25,686.312 1645.81,686.312 1646.37,686.312 1646.93,686.312 1647.48,686.312 1648.04,686.312 1648.6,686.312 1649.16,686.312 1649.72,686.312 1650.28,686.312 1650.84,686.312 1651.4,686.312 1651.96,686.312 1652.52,686.312 1653.08,686.312 1653.64,686.312 1654.2,686.312 1654.76,686.312 1655.31,686.312 1655.87,686.312 1656.43,686.312 1656.99,686.312 1657.55,686.312 1658.11,686.312 1658.67,686.312 1659.23,686.312 1659.79,686.312 1660.35,686.312 1660.91,686.312 1661.47,686.312 1662.03,686.312 1662.58,686.312 1663.14,686.312 1663.7,686.312 1664.26,686.312 1664.82,686.312 1665.38,686.312 1665.94,686.312 1666.5,686.312 1667.06,686.312 1667.62,686.312 1668.18,686.312 1668.74,686.312 1669.3,686.312 1669.85,686.312 1670.41,686.312 1670.97,686.312 1671.53,686.312 1672.09,686.312 1672.65,686.312 1673.21,686.312 1673.77,686.312 1674.33,686.312 1674.89,686.312 1675.45,686.312 1676.01,686.312 1676.57,686.312 1677.13,686.312 1677.68,686.312 1678.24,686.312 1678.8,686.312 1679.36,686.312 1679.92,686.312 1680.48,686.312 1681.04,686.312 1681.6,686.312 1682.16,686.312 1682.72,686.312 1683.28,686.312 1683.84,686.312 1684.4,686.312 1684.95,686.312 1685.51,686.312 1686.07,686.312 1686.63,686.312 1687.19,686.312 1687.75,686.312 1688.31,686.312 1688.87,686.312 1689.43,686.312 1689.99,686.312 1690.55,686.312 1691.11,686.312 1691.67,686.312 1692.23,686.312 1692.78,686.312 1693.34,686.312 1693.9,686.312 1694.46,686.312 1695.02,686.312 1695.58,686.312 1696.14,686.312 1696.7,686.312 1697.26,686.312 1697.82,686.312 1698.38,686.312 1698.94,686.312 1699.5,686.312 1700.05,686.312 1700.61,686.312 1701.17,686.312 1701.73,686.312 1702.29,686.312 1702.85,686.312 1703.41,686.312 1703.97,686.312 1704.53,686.312 1705.09,686.312 1705.65,686.312 1706.21,686.312 1706.77,686.312 1707.32,686.312 1707.88,686.312 1708.44,686.312 1709,686.312 1709.56,686.312 1710.12,686.312 1710.68,686.312 1711.24,686.312 1711.8,686.312 1712.36,686.312 1712.92,686.312 1713.48,686.312 1714.04,686.312 1714.6,686.312 1715.15,686.312 1715.71,686.312 1716.27,686.312 1716.83,686.312 1717.39,686.312 1717.95,686.312 1718.51,686.312 1719.07,686.312 1719.63,686.312 1720.19,686.312 1720.75,686.312 1721.31,686.312 1721.87,686.312 1722.42,686.312 1722.98,686.312 1723.54,686.312 1724.1,686.312 1724.66,686.312 1725.22,686.312 1725.78,686.312 1726.34,686.312 1726.9,686.312 1727.46,686.312 1728.02,686.312 1728.58,686.312 1729.14,686.312 1729.69,686.312 1730.25,686.312 1730.81,686.312 1731.37,686.312 1731.93,686.312 1732.49,686.312 1733.05,686.312 1733.61,686.312 1734.17,686.312 1734.73,686.312 1735.29,686.312 1735.85,686.312 1736.41,686.312 1736.97,686.312 1737.52,686.312 1738.08,686.312 1738.64,686.312 1739.2,686.312 1739.76,686.312 1740.32,686.312 1740.88,686.312 1741.44,686.312 1742,686.312 1742.56,686.312 1743.12,686.312 1743.68,686.312 1744.24,686.312 1744.79,686.312 1745.35,686.312 1745.91,686.312 1746.47,686.312 1747.03,686.312 1747.59,686.312 1748.15,686.312 1748.71,686.312 1749.27,686.312 1749.83,686.312 1750.39,686.312 1750.95,686.312 1751.51,686.312 1752.06,686.312 1752.62,686.312 1753.18,686.312 1753.74,686.312 1754.3,686.312 1754.86,686.312 1755.42,686.312 1755.98,686.312 1756.54,686.312 1757.1,686.312 1757.66,686.312 1758.22,686.312 1758.78,686.312 1759.34,686.312 1759.89,686.312 1760.45,686.312 1761.01,686.312 1761.57,686.312 1762.13,686.312 1762.69,686.312 1763.25,686.312 1763.81,686.312 1764.37,686.312 1764.93,686.312 1765.49,686.312 1766.05,686.312 1766.61,686.312 1767.16,686.312 1767.72,686.312 1768.28,686.312 1768.84,686.312 1769.4,686.312 1769.96,686.312 1770.52,686.312 1771.08,686.312 1771.64,686.312 1772.2,686.312 1772.76,686.312 1773.32,686.312 1773.88,686.312 1774.43,686.312 1774.99,686.312 1775.55,686.312 1776.11,686.312 1776.67,686.312 1777.23,686.312 1777.79,686.312 1778.35,686.312 1778.91,686.312 1779.47,686.312 1780.03,686.312 1780.59,686.312 1781.15,686.312 1781.71,686.312 1782.26,686.312 1782.82,686.312 1783.38,686.312 1783.94,686.312 1784.5,686.312 1785.06,686.312 1785.62,686.312 1786.18,686.312 1786.74,686.312 1787.3,686.312 1787.86,686.312 1788.42,686.312 1788.98,686.312 1789.53,686.312 1790.09,686.312 1790.65,686.312 1791.21,686.312 1791.77,686.312 1792.33,686.312 1792.89,686.312 1793.45,686.312 1794.01,686.312 1794.57,686.312 1795.13,686.312 1795.69,686.312 1796.25,686.312 1796.8,686.312 1797.36,686.312 1797.92,686.312 1798.48,686.312 1799.04,686.312 1799.6,686.312 1800.16,686.312 1800.72,686.312 1801.28,686.312 1801.84,686.312 1802.4,686.312 1802.96,686.312 1803.52,686.312 1804.08,686.312 1804.63,686.312 1805.19,686.312 1805.75,686.312 1806.31,686.312 1806.87,686.312 1807.43,686.312 1807.99,686.312 1808.55,686.312 1809.11,686.312 1809.67,686.312 1810.23,686.312 1810.79,686.312 1811.35,686.312 1811.9,686.312 1812.46,686.312 1813.02,686.312 1813.58,686.312 1814.14,686.312 1814.7,686.312 1815.26,686.312 1815.82,686.312 1816.38,686.312 1816.94,686.312 1817.5,686.312 1818.06,686.312 1818.62,686.312 1819.18,686.312 1819.73,686.312 1820.29,686.312 1820.85,686.312 1821.41,686.312 1821.97,686.312 1822.53,686.312 1823.09,686.312 1823.65,686.312 1824.21,686.312 1824.77,686.312 1825.33,686.312 1825.89,686.312 1826.45,686.312 1827,686.312 1827.56,686.312 1828.12,686.312 1828.68,686.312 1829.24,686.312 1829.8,686.312 1830.36,686.312 1830.92,686.312 1831.48,686.312 1832.04,686.312 1832.6,686.312 1833.16,686.312 1833.72,686.312 1834.27,686.312 1834.83,686.312 1835.39,686.312 1835.95,686.312 1836.51,686.312 1837.07,686.312 1837.63,686.312 1838.19,686.312 \"/>\n<path clip-path=\"url(#clip143)\" d=\"M720.247 684.204 L720.806 684.204 L721.365 684.204 L721.924 684.204 L722.484 684.204 L723.043 684.204 L723.602 684.204 L724.161 684.204 L724.721 684.204 L725.28 684.204 L725.839 684.204 L726.398 684.204 L726.958 684.204 L727.517 684.204 L728.076 684.204 L728.635 684.204 L729.195 684.204 L729.754 684.204 L730.313 684.204 L730.872 684.204 L731.432 684.204 L731.991 684.204 L732.55 684.204 L733.109 684.204 L733.669 684.204 L734.228 684.204 L734.787 684.204 L735.346 684.204 L735.906 684.204 L736.465 684.204 L737.024 684.204 L737.583 684.204 L738.143 684.204 L738.702 684.204 L739.261 684.204 L739.82 684.204 L740.38 684.204 L740.939 684.204 L741.498 684.204 L742.057 684.204 L742.617 684.204 L743.176 684.204 L743.735 684.204 L744.294 684.204 L744.854 684.204 L745.413 684.204 L745.972 684.204 L746.531 684.204 L747.091 684.204 L747.65 684.204 L748.209 684.204 L748.768 684.204 L749.328 684.204 L749.887 684.204 L750.446 684.204 L751.005 684.204 L751.565 684.204 L752.124 684.204 L752.683 684.204 L753.242 684.204 L753.802 684.204 L754.361 684.204 L754.92 684.204 L755.479 684.204 L756.039 684.204 L756.598 684.204 L757.157 684.204 L757.716 684.204 L758.276 684.204 L758.835 684.204 L759.394 684.204 L759.953 684.204 L760.513 684.204 L761.072 684.204 L761.631 684.204 L762.19 684.204 L762.75 684.204 L763.309 684.204 L763.868 684.204 L764.427 684.204 L764.987 684.204 L765.546 684.204 L766.105 684.204 L766.664 684.204 L767.224 684.204 L767.783 684.204 L768.342 684.204 L768.901 684.204 L769.461 684.204 L770.02 684.204 L770.579 684.204 L771.138 684.204 L771.698 684.204 L772.257 684.204 L772.816 684.204 L773.375 684.204 L773.935 684.204 L774.494 684.204 L775.053 684.204 L775.612 684.204 L776.172 684.204 L776.731 684.204 L777.29 684.204 L777.849 684.204 L778.409 684.204 L778.968 684.204 L779.527 684.204 L780.086 684.204 L780.646 684.204 L781.205 684.204 L781.764 684.204 L782.323 684.204 L782.883 684.204 L783.442 684.204 L784.001 684.204 L784.56 684.204 L785.12 684.204 L785.679 684.204 L786.238 684.204 L786.797 684.204 L787.357 684.204 L787.916 684.204 L788.475 684.204 L789.034 684.204 L789.594 684.204 L790.153 684.204 L790.712 684.204 L791.271 684.204 L791.831 684.204 L792.39 684.204 L792.949 684.204 L793.508 684.204 L794.068 684.204 L794.627 684.204 L795.186 684.204 L795.745 684.204 L796.305 684.204 L796.864 684.204 L797.423 684.204 L797.982 684.204 L798.542 684.204 L799.101 684.204 L799.66 684.204 L800.219 684.204 L800.779 684.204 L801.338 684.204 L801.897 684.204 L802.456 684.204 L803.016 684.204 L803.575 684.204 L804.134 684.204 L804.693 684.204 L805.253 684.204 L805.812 684.204 L806.371 684.204 L806.931 684.204 L807.49 684.204 L808.049 684.204 L808.608 684.204 L809.168 684.204 L809.727 684.204 L810.286 684.204 L810.845 684.204 L811.405 684.204 L811.964 684.204 L812.523 684.204 L813.082 684.204 L813.642 684.204 L814.201 684.204 L814.76 684.204 L815.319 684.204 L815.879 684.204 L816.438 684.204 L816.997 684.204 L817.556 684.204 L818.116 684.204 L818.675 684.204 L819.234 684.204 L819.793 684.204 L820.353 684.204 L820.912 684.204 L821.471 684.204 L822.03 684.204 L822.59 684.204 L823.149 684.204 L823.708 684.204 L824.267 684.204 L824.827 684.204 L825.386 684.204 L825.945 684.204 L826.504 684.204 L827.064 684.204 L827.623 684.204 L828.182 684.204 L828.741 684.204 L829.301 684.204 L829.86 684.204 L830.419 684.204 L830.978 684.204 L831.538 684.204 L832.097 684.204 L832.656 684.204 L833.215 684.204 L833.775 684.204 L834.334 684.204 L834.893 684.204 L835.452 684.204 L836.012 684.204 L836.571 684.204 L837.13 684.204 L837.689 684.204 L838.249 684.204 L838.808 684.204 L839.367 684.204 L839.926 684.204 L840.486 684.204 L841.045 684.204 L841.604 684.204 L842.163 684.204 L842.723 684.204 L843.282 684.204 L843.841 684.204 L844.4 684.204 L844.96 684.204 L845.519 684.204 L846.078 684.204 L846.637 684.204 L847.197 684.204 L847.756 684.204 L848.315 684.204 L848.874 684.204 L849.434 684.204 L849.993 684.204 L850.552 684.204 L851.111 684.204 L851.671 684.204 L852.23 684.204 L852.789 684.204 L853.348 684.204 L853.908 684.204 L854.467 684.204 L855.026 684.204 L855.585 684.204 L856.145 684.204 L856.704 684.204 L857.263 684.204 L857.822 684.204 L858.382 684.204 L858.941 684.204 L859.5 684.204 L860.059 684.204 L860.619 684.204 L861.178 684.204 L861.737 684.204 L862.296 684.204 L862.856 684.204 L863.415 684.204 L863.974 684.204 L864.533 684.204 L865.093 684.204 L865.652 684.204 L866.211 684.204 L866.77 684.204 L867.33 684.204 L867.889 684.204 L868.448 684.204 L869.007 684.204 L869.567 684.204 L870.126 684.204 L870.685 684.204 L871.244 684.204 L871.804 684.204 L872.363 684.204 L872.922 684.204 L873.481 684.204 L874.041 684.204 L874.6 684.204 L875.159 684.204 L875.718 684.204 L876.278 684.204 L876.837 684.204 L877.396 684.204 L877.955 684.204 L878.515 684.204 L879.074 684.204 L879.633 684.204 L880.192 684.204 L880.752 684.204 L881.311 684.204 L881.87 684.204 L882.429 684.204 L882.989 684.204 L883.548 684.204 L884.107 684.204 L884.666 684.204 L885.226 684.204 L885.785 684.204 L886.344 684.204 L886.903 684.204 L887.463 684.204 L888.022 684.204 L888.581 684.204 L889.14 684.204 L889.7 684.204 L890.259 684.204 L890.818 684.204 L891.377 684.204 L891.937 684.204 L892.496 684.204 L893.055 684.204 L893.614 684.204 L894.174 684.204 L894.733 684.204 L895.292 684.204 L895.851 684.204 L896.411 684.204 L896.97 684.204 L897.529 684.204 L898.088 684.204 L898.648 684.204 L899.207 684.204 L899.766 684.204 L900.325 684.204 L900.885 684.204 L901.444 684.204 L902.003 684.204 L902.562 684.204 L903.122 684.204 L903.681 684.204 L904.24 684.204 L904.799 684.204 L905.359 684.204 L905.918 684.204 L906.477 684.204 L907.036 684.204 L907.596 684.204 L908.155 684.204 L908.714 684.204 L909.273 684.204 L909.833 684.204 L910.392 684.204 L910.951 684.204 L911.51 684.204 L912.07 684.204 L912.629 684.204 L913.188 684.204 L913.747 684.204 L914.307 684.204 L914.866 684.204 L915.425 684.204 L915.984 684.204 L916.544 684.204 L917.103 684.204 L917.662 684.204 L918.221 684.204 L918.781 684.204 L919.34 684.204 L919.899 684.204 L920.458 684.204 L921.018 684.204 L921.577 684.204 L922.136 684.204 L922.695 684.204 L923.255 684.204 L923.814 684.204 L924.373 684.204 L924.932 684.204 L925.492 684.204 L926.051 684.204 L926.61 684.204 L927.169 684.204 L927.729 684.204 L928.288 684.204 L928.847 684.204 L929.406 684.204 L929.966 684.204 L930.525 684.204 L931.084 684.204 L931.644 684.204 L932.203 684.204 L932.762 684.204 L933.321 684.204 L933.881 684.204 L934.44 684.204 L934.999 684.204 L935.558 684.204 L936.118 684.204 L936.677 684.204 L937.236 684.204 L937.795 684.204 L938.355 684.204 L938.914 684.204 L939.473 684.204 L940.032 684.204 L940.592 684.204 L941.151 684.204 L941.71 684.204 L942.269 684.204 L942.829 684.204 L943.388 684.204 L943.947 684.204 L944.506 684.204 L945.066 684.204 L945.625 684.204 L946.184 684.204 L946.743 684.204 L947.303 684.204 L947.862 684.204 L948.421 684.204 L948.98 684.204 L949.54 684.204 L950.099 684.204 L950.658 684.204 L951.217 684.204 L951.777 684.204 L952.336 684.204 L952.895 684.204 L953.454 684.204 L954.014 684.204 L954.573 684.204 L955.132 684.204 L955.691 684.204 L956.251 684.204 L956.81 684.204 L957.369 684.204 L957.928 684.204 L958.488 684.204 L959.047 684.204 L959.606 684.204 L960.165 684.204 L960.725 684.204 L961.284 684.204 L961.843 684.204 L962.402 684.204 L962.962 684.204 L963.521 684.204 L964.08 684.204 L964.639 684.204 L965.199 684.204 L965.758 684.204 L966.317 684.204 L966.876 684.204 L967.436 684.204 L967.995 684.204 L968.554 684.204 L969.113 684.204 L969.673 684.204 L970.232 684.204 L970.791 684.204 L971.35 684.204 L971.91 684.204 L972.469 684.204 L973.028 684.204 L973.587 684.204 L974.147 684.204 L974.706 684.204 L975.265 684.204 L975.824 684.204 L976.384 684.204 L976.943 684.204 L977.502 684.204 L978.061 684.204 L978.621 684.204 L979.18 684.204 L979.739 684.204 L980.298 684.204 L980.858 684.204 L981.417 684.204 L981.976 684.204 L982.535 684.204 L983.095 684.204 L983.654 684.204 L984.213 684.204 L984.772 684.204 L985.332 684.204 L985.891 684.204 L986.45 684.204 L987.009 684.204 L987.569 684.204 L988.128 684.204 L988.687 684.204 L989.246 684.204 L989.806 684.204 L990.365 684.204 L990.924 684.204 L991.483 684.204 L992.043 684.204 L992.602 684.204 L993.161 684.204 L993.72 684.204 L994.28 684.204 L994.839 684.204 L995.398 684.204 L995.957 684.204 L996.517 684.204 L997.076 684.204 L997.635 684.204 L998.194 684.204 L998.754 684.204 L999.313 684.204 L999.872 684.204 L1000.43 684.204 L1000.99 684.204 L1001.55 684.204 L1002.11 684.204 L1002.67 684.204 L1003.23 684.204 L1003.79 684.204 L1004.35 684.204 L1004.91 684.204 L1005.46 684.204 L1006.02 684.204 L1006.58 684.204 L1007.14 684.204 L1007.7 684.204 L1008.26 684.204 L1008.82 684.204 L1009.38 684.204 L1009.94 684.204 L1010.5 684.204 L1011.06 684.204 L1011.62 684.204 L1012.18 684.204 L1012.73 684.204 L1013.29 684.204 L1013.85 684.204 L1014.41 684.204 L1014.97 684.204 L1015.53 684.204 L1016.09 684.204 L1016.65 684.204 L1017.21 684.204 L1017.77 684.204 L1018.33 684.204 L1018.89 684.204 L1019.45 684.204 L1020.01 684.204 L1020.56 684.204 L1021.12 684.204 L1021.68 684.204 L1022.24 684.204 L1022.8 684.204 L1023.36 684.204 L1023.92 684.204 L1024.48 684.204 L1025.04 684.204 L1025.6 684.204 L1026.16 684.204 L1026.72 684.204 L1027.28 684.204 L1027.83 684.204 L1028.39 684.204 L1028.95 684.204 L1029.51 684.204 L1030.07 684.204 L1030.63 684.204 L1031.19 684.204 L1031.75 684.204 L1032.31 684.204 L1032.87 684.204 L1033.43 684.204 L1033.99 684.204 L1034.55 684.204 L1035.1 684.204 L1035.66 684.204 L1036.22 684.204 L1036.78 684.204 L1037.34 684.204 L1037.9 684.204 L1038.46 684.204 L1039.02 684.204 L1039.58 684.204 L1040.14 684.204 L1040.7 684.204 L1041.26 684.204 L1041.82 684.204 L1042.38 684.204 L1042.93 684.204 L1043.49 684.204 L1044.05 684.204 L1044.61 684.204 L1045.17 684.204 L1045.73 684.204 L1046.29 684.204 L1046.85 684.204 L1047.41 684.204 L1047.97 684.204 L1048.53 684.204 L1049.09 684.204 L1049.65 684.204 L1050.2 684.204 L1050.76 684.204 L1051.32 684.204 L1051.88 684.204 L1052.44 684.204 L1053 684.204 L1053.56 684.204 L1054.12 684.204 L1054.68 684.204 L1055.24 684.204 L1055.8 684.204 L1056.36 684.204 L1056.92 684.204 L1057.48 684.204 L1058.03 684.204 L1058.59 684.204 L1059.15 684.204 L1059.71 684.204 L1060.27 684.204 L1060.83 684.204 L1061.39 684.204 L1061.95 684.204 L1062.51 684.204 L1063.07 684.204 L1063.63 684.204 L1064.19 684.204 L1064.75 684.204 L1065.3 684.204 L1065.86 684.204 L1066.42 684.204 L1066.98 684.204 L1067.54 684.204 L1068.1 684.204 L1068.66 684.204 L1069.22 684.204 L1069.78 684.204 L1070.34 684.204 L1070.9 684.204 L1071.46 684.204 L1072.02 684.204 L1072.57 684.204 L1073.13 684.204 L1073.69 684.204 L1074.25 684.204 L1074.81 684.204 L1075.37 684.204 L1075.93 684.204 L1076.49 684.204 L1077.05 684.204 L1077.61 684.204 L1078.17 684.204 L1078.73 684.204 L1079.29 684.204 L1079.85 684.204 L1080.4 684.204 L1080.96 684.204 L1081.52 684.204 L1082.08 684.204 L1082.64 684.204 L1083.2 684.204 L1083.76 684.204 L1084.32 684.204 L1084.88 684.204 L1085.44 684.204 L1086 684.204 L1086.56 684.204 L1087.12 684.204 L1087.67 684.204 L1088.23 684.204 L1088.79 684.204 L1089.35 684.204 L1089.91 684.204 L1090.47 684.204 L1091.03 684.204 L1091.59 684.204 L1092.15 684.204 L1092.71 684.204 L1093.27 684.204 L1093.83 684.204 L1094.39 684.204 L1094.94 684.204 L1095.5 684.204 L1096.06 684.204 L1096.62 684.204 L1097.18 684.204 L1097.74 684.204 L1098.3 684.204 L1098.86 684.204 L1099.42 684.204 L1099.98 684.204 L1100.54 684.204 L1101.1 684.204 L1101.66 684.204 L1102.22 684.204 L1102.77 684.204 L1103.33 684.204 L1103.89 684.204 L1104.45 684.204 L1105.01 684.204 L1105.57 684.204 L1106.13 684.204 L1106.69 684.204 L1107.25 684.204 L1107.81 684.204 L1108.37 684.204 L1108.93 684.204 L1109.49 684.204 L1110.04 684.204 L1110.6 684.204 L1111.16 684.204 L1111.72 684.204 L1112.28 684.204 L1112.84 684.204 L1113.4 684.204 L1113.96 684.204 L1114.52 684.204 L1115.08 684.204 L1115.64 684.204 L1116.2 684.204 L1116.76 684.204 L1117.31 684.204 L1117.87 684.204 L1118.43 684.204 L1118.99 684.204 L1119.55 684.204 L1120.11 684.204 L1120.67 684.204 L1121.23 684.204 L1121.79 684.204 L1122.35 684.204 L1122.91 684.204 L1123.47 684.204 L1124.03 684.204 L1124.59 684.204 L1125.14 684.204 L1125.7 684.204 L1126.26 684.204 L1126.82 684.204 L1127.38 684.204 L1127.94 684.204 L1128.5 684.204 L1129.06 684.204 L1129.62 684.204 L1130.18 684.204 L1130.74 684.204 L1131.3 684.204 L1131.86 684.204 L1132.41 684.204 L1132.97 684.204 L1133.53 684.204 L1134.09 684.204 L1134.65 684.204 L1135.21 684.204 L1135.77 684.204 L1136.33 684.204 L1136.89 684.204 L1137.45 684.204 L1138.01 684.204 L1138.57 684.204 L1139.13 684.204 L1139.68 684.204 L1140.24 684.204 L1140.8 684.204 L1141.36 684.204 L1141.92 684.204 L1142.48 684.204 L1143.04 684.204 L1143.6 684.204 L1144.16 684.204 L1144.72 684.204 L1145.28 684.204 L1145.84 684.204 L1146.4 684.204 L1146.96 684.204 L1147.51 684.204 L1148.07 684.204 L1148.63 684.204 L1149.19 684.204 L1149.75 684.204 L1150.31 684.204 L1150.87 684.204 L1151.43 684.204 L1151.99 684.204 L1152.55 684.204 L1153.11 684.204 L1153.67 684.204 L1154.23 684.204 L1154.78 684.204 L1155.34 684.204 L1155.9 684.204 L1156.46 684.204 L1157.02 684.204 L1157.58 684.204 L1158.14 684.204 L1158.7 684.204 L1159.26 684.204 L1159.82 684.204 L1160.38 684.204 L1160.94 684.204 L1161.5 684.204 L1162.05 684.204 L1162.61 684.204 L1163.17 684.204 L1163.73 684.204 L1164.29 684.204 L1164.85 684.204 L1165.41 684.204 L1165.97 684.204 L1166.53 684.204 L1167.09 684.204 L1167.65 684.204 L1168.21 684.204 L1168.77 684.204 L1169.33 684.204 L1169.88 684.204 L1170.44 684.204 L1171 684.204 L1171.56 684.204 L1172.12 684.204 L1172.68 684.204 L1173.24 684.204 L1173.8 684.204 L1174.36 684.204 L1174.92 684.204 L1175.48 684.204 L1176.04 684.204 L1176.6 684.204 L1177.15 684.204 L1177.71 684.204 L1178.27 684.204 L1178.83 684.204 L1179.39 684.204 L1179.95 684.204 L1180.51 684.204 L1181.07 684.204 L1181.63 684.204 L1182.19 684.204 L1182.75 684.204 L1183.31 684.204 L1183.87 684.204 L1184.43 684.204 L1184.98 684.204 L1185.54 684.204 L1186.1 684.204 L1186.66 684.204 L1187.22 684.204 L1187.78 684.204 L1188.34 684.204 L1188.9 684.204 L1189.46 684.204 L1190.02 684.204 L1190.58 684.204 L1191.14 684.204 L1191.7 684.204 L1192.25 684.204 L1192.81 684.204 L1193.37 684.204 L1193.93 684.204 L1194.49 684.204 L1195.05 684.204 L1195.61 684.204 L1196.17 684.204 L1196.73 684.204 L1197.29 684.204 L1197.85 684.204 L1198.41 684.204 L1198.97 684.204 L1199.52 684.204 L1200.08 684.204 L1200.64 684.204 L1201.2 684.204 L1201.76 684.204 L1202.32 684.204 L1202.88 684.204 L1203.44 684.204 L1204 684.204 L1204.56 684.204 L1205.12 684.204 L1205.68 684.204 L1206.24 684.204 L1206.8 684.204 L1207.35 684.204 L1207.91 684.204 L1208.47 684.204 L1209.03 684.204 L1209.59 684.204 L1210.15 684.204 L1210.71 684.204 L1211.27 684.204 L1211.83 684.204 L1212.39 684.204 L1212.95 684.204 L1213.51 684.204 L1214.07 684.204 L1214.62 684.204 L1215.18 684.204 L1215.74 684.204 L1216.3 684.204 L1216.86 684.204 L1217.42 684.204 L1217.98 684.204 L1218.54 684.204 L1219.1 684.204 L1219.66 684.204 L1220.22 684.204 L1220.78 684.204 L1221.34 684.204 L1221.89 684.204 L1222.45 684.204 L1223.01 684.204 L1223.57 684.204 L1224.13 684.204 L1224.69 684.204 L1225.25 684.204 L1225.81 684.204 L1226.37 684.204 L1226.93 684.204 L1227.49 684.204 L1228.05 684.204 L1228.61 684.204 L1229.17 684.204 L1229.72 684.204 L1230.28 684.204 L1230.84 684.204 L1231.4 684.204 L1231.96 684.204 L1232.52 684.204 L1233.08 684.204 L1233.64 684.204 L1234.2 684.204 L1234.76 684.204 L1235.32 684.204 L1235.88 684.204 L1236.44 684.204 L1236.99 684.204 L1237.55 684.204 L1238.11 684.204 L1238.67 684.204 L1239.23 684.204 L1239.79 684.204 L1240.35 684.204 L1240.91 684.204 L1241.47 684.204 L1242.03 684.204 L1242.59 684.204 L1243.15 684.204 L1243.71 684.204 L1244.26 684.204 L1244.82 684.204 L1245.38 684.204 L1245.94 684.204 L1246.5 684.204 L1247.06 684.204 L1247.62 684.204 L1248.18 684.204 L1248.74 684.204 L1249.3 684.204 L1249.86 684.204 L1250.42 684.204 L1250.98 684.204 L1251.54 684.204 L1252.09 684.204 L1252.65 684.204 L1253.21 684.204 L1253.77 684.204 L1254.33 684.204 L1254.89 684.204 L1255.45 684.204 L1256.01 684.204 L1256.57 684.204 L1257.13 684.204 L1257.69 684.204 L1258.25 684.204 L1258.81 684.204 L1259.36 684.204 L1259.92 684.204 L1260.48 684.204 L1261.04 684.204 L1261.6 684.204 L1262.16 684.204 L1262.72 684.204 L1263.28 684.204 L1263.84 684.204 L1264.4 684.204 L1264.96 684.204 L1265.52 684.204 L1266.08 684.204 L1266.63 684.204 L1267.19 684.204 L1267.75 684.204 L1268.31 684.204 L1268.87 684.204 L1269.43 684.204 L1269.99 684.204 L1270.55 684.204 L1271.11 684.204 L1271.67 684.204 L1272.23 684.204 L1272.79 684.204 L1273.35 684.204 L1273.91 684.204 L1274.46 684.204 L1275.02 684.204 L1275.58 684.204 L1276.14 684.204 L1276.7 684.204 L1277.26 684.204 L1277.82 684.204 L1278.38 684.204 L1278.94 684.204 L1279.5 684.204 L1280.06 684.204 L1280.62 684.204 L1281.18 684.204 L1281.73 684.204 L1282.29 684.204 L1282.85 684.204 L1283.41 684.204 L1283.97 684.204 L1284.53 684.204 L1285.09 684.204 L1285.65 684.204 L1286.21 684.204 L1286.77 684.204 L1287.33 684.204 L1287.89 684.204 L1288.45 684.204 L1289 684.204 L1289.56 684.204 L1290.12 684.204 L1290.68 684.204 L1291.24 684.204 L1291.8 684.204 L1292.36 684.204 L1292.92 684.204 L1293.48 684.204 L1294.04 684.204 L1294.6 684.204 L1295.16 684.204 L1295.72 684.204 L1296.28 684.204 L1296.83 684.204 L1297.39 684.204 L1297.95 684.204 L1298.51 684.204 L1299.07 684.204 L1299.63 684.204 L1300.19 684.204 L1300.75 684.204 L1301.31 684.204 L1301.87 684.204 L1302.43 684.204 L1302.99 684.204 L1303.55 684.204 L1304.1 684.204 L1304.66 684.204 L1305.22 684.204 L1305.78 684.204 L1306.34 684.204 L1306.9 684.204 L1307.46 684.204 L1308.02 684.204 L1308.58 684.204 L1309.14 684.204 L1309.7 684.204 L1310.26 684.204 L1310.82 684.204 L1311.38 684.204 L1311.93 684.204 L1312.49 684.204 L1313.05 684.204 L1313.61 684.204 L1314.17 684.204 L1314.73 684.204 L1315.29 684.204 L1315.85 684.204 L1316.41 684.204 L1316.97 684.204 L1317.53 684.204 L1318.09 684.204 L1318.65 684.204 L1319.2 684.204 L1319.76 684.204 L1320.32 684.204 L1320.88 684.204 L1321.44 684.204 L1322 684.204 L1322.56 684.204 L1323.12 684.204 L1323.68 684.204 L1324.24 684.204 L1324.8 684.204 L1325.36 684.204 L1325.92 684.204 L1326.47 684.204 L1327.03 684.204 L1327.59 684.204 L1328.15 684.204 L1328.71 684.204 L1329.27 684.204 L1329.83 684.204 L1330.39 684.204 L1330.95 684.204 L1331.51 684.204 L1332.07 684.204 L1332.63 684.204 L1333.19 684.204 L1333.75 684.204 L1334.3 684.204 L1334.86 684.204 L1335.42 684.204 L1335.98 684.204 L1336.54 684.204 L1337.1 684.204 L1337.66 684.204 L1338.22 684.204 L1338.78 684.204 L1339.34 684.204 L1339.9 684.204 L1340.46 684.204 L1341.02 684.204 L1341.57 684.204 L1342.13 684.204 L1342.69 684.204 L1343.25 684.204 L1343.81 684.204 L1344.37 684.204 L1344.93 684.204 L1345.49 684.204 L1346.05 684.204 L1346.61 684.204 L1347.17 684.204 L1347.73 684.204 L1348.29 684.204 L1348.84 684.204 L1349.4 684.204 L1349.96 684.204 L1350.52 684.204 L1351.08 684.204 L1351.64 684.204 L1352.2 684.204 L1352.76 684.204 L1353.32 684.204 L1353.88 684.204 L1354.44 684.204 L1355 684.204 L1355.56 684.204 L1356.12 684.204 L1356.67 684.204 L1357.23 684.204 L1357.79 684.204 L1358.35 684.204 L1358.91 684.204 L1359.47 684.204 L1360.03 684.204 L1360.59 684.204 L1361.15 684.204 L1361.71 684.204 L1362.27 684.204 L1362.83 684.204 L1363.39 684.204 L1363.94 684.204 L1364.5 684.204 L1365.06 684.204 L1365.62 684.204 L1366.18 684.204 L1366.74 684.204 L1367.3 684.204 L1367.86 684.204 L1368.42 684.204 L1368.98 684.204 L1369.54 684.204 L1370.1 684.204 L1370.66 684.204 L1371.21 684.204 L1371.77 684.204 L1372.33 684.204 L1372.89 684.204 L1373.45 684.204 L1374.01 684.204 L1374.57 684.204 L1375.13 684.204 L1375.69 684.204 L1376.25 684.204 L1376.81 684.204 L1377.37 684.204 L1377.93 684.204 L1378.49 684.204 L1379.04 684.204 L1379.6 684.204 L1380.16 684.204 L1380.72 684.204 L1381.28 684.204 L1381.84 684.204 L1382.4 684.204 L1382.96 684.204 L1383.52 684.204 L1384.08 684.204 L1384.64 684.204 L1385.2 684.204 L1385.76 684.204 L1386.31 684.204 L1386.87 684.204 L1387.43 684.204 L1387.99 684.204 L1388.55 684.204 L1389.11 684.204 L1389.67 684.204 L1390.23 684.204 L1390.79 684.204 L1391.35 684.204 L1391.91 684.204 L1392.47 684.204 L1393.03 684.204 L1393.58 684.204 L1394.14 684.204 L1394.7 684.204 L1395.26 684.204 L1395.82 684.204 L1396.38 684.204 L1396.94 684.204 L1397.5 684.204 L1398.06 684.204 L1398.62 684.204 L1399.18 684.204 L1399.74 684.204 L1400.3 684.204 L1400.86 684.204 L1401.41 684.204 L1401.97 684.204 L1402.53 684.204 L1403.09 684.204 L1403.65 684.204 L1404.21 684.204 L1404.77 684.204 L1405.33 684.204 L1405.89 684.204 L1406.45 684.204 L1407.01 684.204 L1407.57 684.204 L1408.13 684.204 L1408.68 684.204 L1409.24 684.204 L1409.8 684.204 L1410.36 684.204 L1410.92 684.204 L1411.48 684.204 L1412.04 684.204 L1412.6 684.204 L1413.16 684.204 L1413.72 684.204 L1414.28 684.204 L1414.84 684.204 L1415.4 684.204 L1415.95 684.204 L1416.51 684.204 L1417.07 684.204 L1417.63 684.204 L1418.19 684.204 L1418.75 684.204 L1419.31 684.204 L1419.87 684.204 L1420.43 684.204 L1420.99 684.204 L1421.55 684.204 L1422.11 684.204 L1422.67 684.204 L1423.23 684.204 L1423.78 684.204 L1424.34 684.204 L1424.9 684.204 L1425.46 684.204 L1426.02 684.204 L1426.58 684.204 L1427.14 684.204 L1427.7 684.204 L1428.26 684.204 L1428.82 684.204 L1429.38 684.204 L1429.94 684.204 L1430.5 684.204 L1431.05 684.204 L1431.61 684.204 L1432.17 684.204 L1432.73 684.204 L1433.29 684.204 L1433.85 684.204 L1434.41 684.204 L1434.97 684.204 L1435.53 684.204 L1436.09 684.204 L1436.65 684.204 L1437.21 684.204 L1437.77 684.204 L1438.33 684.204 L1438.88 684.204 L1439.44 684.204 L1440 684.204 L1440.56 684.204 L1441.12 684.204 L1441.68 684.204 L1442.24 684.204 L1442.8 684.204 L1443.36 684.204 L1443.92 684.204 L1444.48 684.204 L1445.04 684.204 L1445.6 684.204 L1446.15 684.204 L1446.71 684.204 L1447.27 684.204 L1447.83 684.204 L1448.39 684.204 L1448.95 684.204 L1449.51 684.204 L1450.07 684.204 L1450.63 684.204 L1451.19 684.204 L1451.75 684.204 L1452.31 684.204 L1452.87 684.204 L1453.42 684.204 L1453.98 684.204 L1454.54 684.204 L1455.1 684.204 L1455.66 684.204 L1456.22 684.204 L1456.78 684.204 L1457.34 684.204 L1457.9 684.204 L1458.46 684.204 L1459.02 684.204 L1459.58 684.204 L1460.14 684.204 L1460.7 684.204 L1461.25 684.204 L1461.81 684.204 L1462.37 684.204 L1462.93 684.204 L1463.49 684.204 L1464.05 684.204 L1464.61 684.204 L1465.17 684.204 L1465.73 684.204 L1466.29 684.204 L1466.85 684.204 L1467.41 684.204 L1467.97 684.204 L1468.52 684.204 L1469.08 684.204 L1469.64 684.204 L1470.2 684.204 L1470.76 684.204 L1471.32 684.204 L1471.88 684.204 L1472.44 684.204 L1473 684.204 L1473.56 684.204 L1474.12 684.204 L1474.68 684.204 L1475.24 684.204 L1475.79 684.204 L1476.35 684.204 L1476.91 684.204 L1477.47 684.204 L1478.03 684.204 L1478.59 684.204 L1479.15 684.204 L1479.71 684.204 L1480.27 684.204 L1480.83 684.204 L1481.39 684.204 L1481.95 684.204 L1482.51 684.204 L1483.07 684.204 L1483.62 684.204 L1484.18 684.204 L1484.74 684.204 L1485.3 684.204 L1485.86 684.204 L1486.42 684.204 L1486.98 684.204 L1487.54 684.204 L1488.1 684.204 L1488.66 684.204 L1489.22 684.204 L1489.78 684.204 L1490.34 684.204 L1490.89 684.204 L1491.45 684.204 L1492.01 684.204 L1492.57 684.204 L1493.13 684.204 L1493.69 684.204 L1494.25 684.204 L1494.81 684.204 L1495.37 684.204 L1495.93 684.204 L1496.49 684.204 L1497.05 684.204 L1497.61 684.204 L1498.16 684.204 L1498.72 684.204 L1499.28 684.204 L1499.84 684.204 L1500.4 684.204 L1500.96 684.204 L1501.52 684.204 L1502.08 684.204 L1502.64 684.204 L1503.2 684.204 L1503.76 684.204 L1504.32 684.204 L1504.88 684.204 L1505.44 684.204 L1505.99 684.204 L1506.55 684.204 L1507.11 684.204 L1507.67 684.204 L1508.23 684.204 L1508.79 684.204 L1509.35 684.204 L1509.91 684.204 L1510.47 684.204 L1511.03 684.204 L1511.59 684.204 L1512.15 684.204 L1512.71 684.204 L1513.26 684.204 L1513.82 684.204 L1514.38 684.204 L1514.94 684.204 L1515.5 684.204 L1516.06 684.204 L1516.62 684.204 L1517.18 684.204 L1517.74 684.204 L1518.3 684.204 L1518.86 684.204 L1519.42 684.204 L1519.98 684.204 L1520.53 684.204 L1521.09 684.204 L1521.65 684.204 L1522.21 684.204 L1522.77 684.204 L1523.33 684.204 L1523.89 684.204 L1524.45 684.204 L1525.01 684.204 L1525.57 684.204 L1526.13 684.204 L1526.69 684.204 L1527.25 684.204 L1527.81 684.204 L1528.36 684.204 L1528.92 684.204 L1529.48 684.204 L1530.04 684.204 L1530.6 684.204 L1531.16 684.204 L1531.72 684.204 L1532.28 684.204 L1532.84 684.204 L1533.4 684.204 L1533.96 684.204 L1534.52 684.204 L1535.08 684.204 L1535.63 684.204 L1536.19 684.204 L1536.75 684.204 L1537.31 684.204 L1537.87 684.204 L1538.43 684.204 L1538.99 684.204 L1539.55 684.204 L1540.11 684.204 L1540.67 684.204 L1541.23 684.204 L1541.79 684.204 L1542.35 684.204 L1542.9 684.204 L1543.46 684.204 L1544.02 684.204 L1544.58 684.204 L1545.14 684.204 L1545.7 684.204 L1546.26 684.204 L1546.82 684.204 L1547.38 684.204 L1547.94 684.204 L1548.5 684.204 L1549.06 684.204 L1549.62 684.204 L1550.18 684.204 L1550.73 684.204 L1551.29 684.204 L1551.85 684.204 L1552.41 684.204 L1552.97 684.204 L1553.53 684.204 L1554.09 684.204 L1554.65 684.204 L1555.21 684.204 L1555.77 684.204 L1556.33 684.204 L1556.89 684.204 L1557.45 684.204 L1558 684.204 L1558.56 684.204 L1559.12 684.204 L1559.68 684.204 L1560.24 684.204 L1560.8 684.204 L1561.36 684.204 L1561.92 684.204 L1562.48 684.204 L1563.04 684.204 L1563.6 684.204 L1564.16 684.204 L1564.72 684.204 L1565.28 684.204 L1565.83 684.204 L1566.39 684.204 L1566.95 684.204 L1567.51 684.204 L1568.07 684.204 L1568.63 684.204 L1569.19 684.204 L1569.75 684.204 L1570.31 684.204 L1570.87 684.204 L1571.43 684.204 L1571.99 684.204 L1572.55 684.204 L1573.1 684.204 L1573.66 684.204 L1574.22 684.204 L1574.78 684.204 L1575.34 684.204 L1575.9 684.204 L1576.46 684.204 L1577.02 684.204 L1577.58 684.204 L1578.14 684.204 L1578.7 684.204 L1579.26 684.204 L1579.82 684.204 L1580.37 684.204 L1580.93 684.204 L1581.49 684.204 L1582.05 684.204 L1582.61 684.204 L1583.17 684.204 L1583.73 684.204 L1584.29 684.204 L1584.85 684.204 L1585.41 684.204 L1585.97 684.204 L1586.53 684.204 L1587.09 684.204 L1587.65 684.204 L1588.2 684.204 L1588.76 684.204 L1589.32 684.204 L1589.88 684.204 L1590.44 684.204 L1591 684.204 L1591.56 684.204 L1592.12 684.204 L1592.68 684.204 L1593.24 684.204 L1593.8 684.204 L1594.36 684.204 L1594.92 684.204 L1595.47 684.204 L1596.03 684.204 L1596.59 684.204 L1597.15 684.204 L1597.71 684.204 L1598.27 684.204 L1598.83 684.204 L1599.39 684.204 L1599.95 684.204 L1600.51 684.204 L1601.07 684.204 L1601.63 684.204 L1602.19 684.204 L1602.74 684.204 L1603.3 684.204 L1603.86 684.204 L1604.42 684.204 L1604.98 684.204 L1605.54 684.204 L1606.1 684.204 L1606.66 684.204 L1607.22 684.204 L1607.78 684.204 L1608.34 684.204 L1608.9 684.204 L1609.46 684.204 L1610.02 684.204 L1610.57 684.204 L1611.13 684.204 L1611.69 684.204 L1612.25 684.204 L1612.81 684.204 L1613.37 684.204 L1613.93 684.204 L1614.49 684.204 L1615.05 684.204 L1615.61 684.204 L1616.17 684.204 L1616.73 684.204 L1617.29 684.204 L1617.84 684.204 L1618.4 684.204 L1618.96 684.204 L1619.52 684.204 L1620.08 684.204 L1620.64 684.204 L1621.2 684.204 L1621.76 684.204 L1622.32 684.204 L1622.88 684.204 L1623.44 684.204 L1624 684.204 L1624.56 684.204 L1625.11 684.204 L1625.67 684.204 L1626.23 684.204 L1626.79 684.204 L1627.35 684.204 L1627.91 684.204 L1628.47 684.204 L1629.03 684.204 L1629.59 684.204 L1630.15 684.204 L1630.71 684.204 L1631.27 684.204 L1631.83 684.204 L1632.39 684.204 L1632.94 684.204 L1633.5 684.204 L1634.06 684.204 L1634.62 684.204 L1635.18 684.204 L1635.74 684.204 L1636.3 684.204 L1636.86 684.204 L1637.42 684.204 L1637.98 684.204 L1638.54 684.204 L1639.1 684.204 L1639.66 684.204 L1640.21 684.204 L1640.77 684.204 L1641.33 684.204 L1641.89 684.204 L1642.45 684.204 L1643.01 684.204 L1643.57 684.204 L1644.13 684.204 L1644.69 684.204 L1645.25 684.204 L1645.81 684.204 L1646.37 684.204 L1646.93 684.204 L1647.48 684.204 L1648.04 684.204 L1648.6 684.204 L1649.16 684.204 L1649.72 684.204 L1650.28 684.204 L1650.84 684.204 L1651.4 684.204 L1651.96 684.204 L1652.52 684.204 L1653.08 684.204 L1653.64 684.204 L1654.2 684.204 L1654.76 684.204 L1655.31 684.204 L1655.87 684.204 L1656.43 684.204 L1656.99 684.204 L1657.55 684.204 L1658.11 684.204 L1658.67 684.204 L1659.23 684.204 L1659.79 684.204 L1660.35 684.204 L1660.91 684.204 L1661.47 684.204 L1662.03 684.204 L1662.58 684.204 L1663.14 684.204 L1663.7 684.204 L1664.26 684.204 L1664.82 684.204 L1665.38 684.204 L1665.94 684.204 L1666.5 684.204 L1667.06 684.204 L1667.62 684.204 L1668.18 684.204 L1668.74 684.204 L1669.3 684.204 L1669.85 684.204 L1670.41 684.204 L1670.97 684.204 L1671.53 684.204 L1672.09 684.204 L1672.65 684.204 L1673.21 684.204 L1673.77 684.204 L1674.33 684.204 L1674.89 684.204 L1675.45 684.204 L1676.01 684.204 L1676.57 684.204 L1677.13 684.204 L1677.68 684.204 L1678.24 684.204 L1678.8 684.204 L1679.36 684.204 L1679.92 684.204 L1680.48 684.204 L1681.04 684.204 L1681.6 684.204 L1682.16 684.204 L1682.72 684.204 L1683.28 684.204 L1683.84 684.204 L1684.4 684.204 L1684.95 684.204 L1685.51 684.204 L1686.07 684.204 L1686.63 684.204 L1687.19 684.204 L1687.75 684.204 L1688.31 684.204 L1688.87 684.204 L1689.43 684.204 L1689.99 684.204 L1690.55 684.204 L1691.11 684.204 L1691.67 684.204 L1692.23 684.204 L1692.78 684.204 L1693.34 684.204 L1693.9 684.204 L1694.46 684.204 L1695.02 684.204 L1695.58 684.204 L1696.14 684.204 L1696.7 684.204 L1697.26 684.204 L1697.82 684.204 L1698.38 684.204 L1698.94 684.204 L1699.5 684.204 L1700.05 684.204 L1700.61 684.204 L1701.17 684.204 L1701.73 684.204 L1702.29 684.204 L1702.85 684.204 L1703.41 684.204 L1703.97 684.204 L1704.53 684.204 L1705.09 684.204 L1705.65 684.204 L1706.21 684.204 L1706.77 684.204 L1707.32 684.204 L1707.88 684.204 L1708.44 684.204 L1709 684.204 L1709.56 684.204 L1710.12 684.204 L1710.68 684.204 L1711.24 684.204 L1711.8 684.204 L1712.36 684.204 L1712.92 684.204 L1713.48 684.204 L1714.04 684.204 L1714.6 684.204 L1715.15 684.204 L1715.71 684.204 L1716.27 684.204 L1716.83 684.204 L1717.39 684.204 L1717.95 684.204 L1718.51 684.204 L1719.07 684.204 L1719.63 684.204 L1720.19 684.204 L1720.75 684.204 L1721.31 684.204 L1721.87 684.204 L1722.42 684.204 L1722.98 684.204 L1723.54 684.204 L1724.1 684.204 L1724.66 684.204 L1725.22 684.204 L1725.78 684.204 L1726.34 684.204 L1726.9 684.204 L1727.46 684.204 L1728.02 684.204 L1728.58 684.204 L1729.14 684.204 L1729.69 684.204 L1730.25 684.204 L1730.81 684.204 L1731.37 684.204 L1731.93 684.204 L1732.49 684.204 L1733.05 684.204 L1733.61 684.204 L1734.17 684.204 L1734.73 684.204 L1735.29 684.204 L1735.85 684.204 L1736.41 684.204 L1736.97 684.204 L1737.52 684.204 L1738.08 684.204 L1738.64 684.204 L1739.2 684.204 L1739.76 684.204 L1740.32 684.204 L1740.88 684.204 L1741.44 684.204 L1742 684.204 L1742.56 684.204 L1743.12 684.204 L1743.68 684.204 L1744.24 684.204 L1744.79 684.204 L1745.35 684.204 L1745.91 684.204 L1746.47 684.204 L1747.03 684.204 L1747.59 684.204 L1748.15 684.204 L1748.71 684.204 L1749.27 684.204 L1749.83 684.204 L1750.39 684.204 L1750.95 684.204 L1751.51 684.204 L1752.06 684.204 L1752.62 684.204 L1753.18 684.204 L1753.74 684.204 L1754.3 684.204 L1754.86 684.204 L1755.42 684.204 L1755.98 684.204 L1756.54 684.204 L1757.1 684.204 L1757.66 684.204 L1758.22 684.204 L1758.78 684.204 L1759.34 684.204 L1759.89 684.204 L1760.45 684.204 L1761.01 684.204 L1761.57 684.204 L1762.13 684.204 L1762.69 684.204 L1763.25 684.204 L1763.81 684.204 L1764.37 684.204 L1764.93 684.204 L1765.49 684.204 L1766.05 684.204 L1766.61 684.204 L1767.16 684.204 L1767.72 684.204 L1768.28 684.204 L1768.84 684.204 L1769.4 684.204 L1769.96 684.204 L1770.52 684.204 L1771.08 684.204 L1771.64 684.204 L1772.2 684.204 L1772.76 684.204 L1773.32 684.204 L1773.88 684.204 L1774.43 684.204 L1774.99 684.204 L1775.55 684.204 L1776.11 684.204 L1776.67 684.204 L1777.23 684.204 L1777.79 684.204 L1778.35 684.204 L1778.91 684.204 L1779.47 684.204 L1780.03 684.204 L1780.59 684.204 L1781.15 684.204 L1781.71 684.204 L1782.26 684.204 L1782.82 684.204 L1783.38 684.204 L1783.94 684.204 L1784.5 684.204 L1785.06 684.204 L1785.62 684.204 L1786.18 684.204 L1786.74 684.204 L1787.3 684.204 L1787.86 684.204 L1788.42 684.204 L1788.98 684.204 L1789.53 684.204 L1790.09 684.204 L1790.65 684.204 L1791.21 684.204 L1791.77 684.204 L1792.33 684.204 L1792.89 684.204 L1793.45 684.204 L1794.01 684.204 L1794.57 684.204 L1795.13 684.204 L1795.69 684.204 L1796.25 684.204 L1796.8 684.204 L1797.36 684.204 L1797.92 684.204 L1798.48 684.204 L1799.04 684.204 L1799.6 684.204 L1800.16 684.204 L1800.72 684.204 L1801.28 684.204 L1801.84 684.204 L1802.4 684.204 L1802.96 684.204 L1803.52 684.204 L1804.08 684.204 L1804.63 684.204 L1805.19 684.204 L1805.75 684.204 L1806.31 684.204 L1806.87 684.204 L1807.43 684.204 L1807.99 684.204 L1808.55 684.204 L1809.11 684.204 L1809.67 684.204 L1810.23 684.204 L1810.79 684.204 L1811.35 684.204 L1811.9 684.204 L1812.46 684.204 L1813.02 684.204 L1813.58 684.204 L1814.14 684.204 L1814.7 684.204 L1815.26 684.204 L1815.82 684.204 L1816.38 684.204 L1816.94 684.204 L1817.5 684.204 L1818.06 684.204 L1818.62 684.204 L1819.18 684.204 L1819.73 684.204 L1820.29 684.204 L1820.85 684.204 L1821.41 684.204 L1821.97 684.204 L1822.53 684.204 L1823.09 684.204 L1823.65 684.204 L1824.21 684.204 L1824.77 684.204 L1825.33 684.204 L1825.89 684.204 L1826.45 684.204 L1827 684.204 L1827.56 684.204 L1828.12 684.204 L1828.68 684.204 L1829.24 684.204 L1829.8 684.204 L1830.36 684.204 L1830.92 684.204 L1831.48 684.204 L1832.04 684.204 L1832.6 684.204 L1833.16 684.204 L1833.72 684.204 L1834.27 684.204 L1834.83 684.204 L1835.39 684.204 L1835.95 684.204 L1836.51 684.204 L1837.07 684.204 L1837.63 684.204 L1838.19 684.204 L1838.19 682.031 L1837.63 682.031 L1837.07 682.031 L1836.51 682.031 L1835.95 682.031 L1835.39 682.031 L1834.83 682.031 L1834.27 682.031 L1833.72 682.031 L1833.16 682.031 L1832.6 682.031 L1832.04 682.031 L1831.48 682.031 L1830.92 682.031 L1830.36 682.031 L1829.8 682.031 L1829.24 682.031 L1828.68 682.031 L1828.12 682.031 L1827.56 682.031 L1827 682.031 L1826.45 682.031 L1825.89 682.031 L1825.33 682.031 L1824.77 682.031 L1824.21 682.031 L1823.65 682.031 L1823.09 682.031 L1822.53 682.031 L1821.97 682.031 L1821.41 682.031 L1820.85 682.031 L1820.29 682.031 L1819.73 682.031 L1819.18 682.031 L1818.62 682.031 L1818.06 682.031 L1817.5 682.031 L1816.94 682.031 L1816.38 682.031 L1815.82 682.031 L1815.26 682.031 L1814.7 682.031 L1814.14 682.031 L1813.58 682.031 L1813.02 682.031 L1812.46 682.031 L1811.9 682.031 L1811.35 682.031 L1810.79 682.031 L1810.23 682.031 L1809.67 682.031 L1809.11 682.031 L1808.55 682.031 L1807.99 682.031 L1807.43 682.031 L1806.87 682.031 L1806.31 682.031 L1805.75 682.031 L1805.19 682.031 L1804.63 682.031 L1804.08 682.031 L1803.52 682.031 L1802.96 682.031 L1802.4 682.031 L1801.84 682.031 L1801.28 682.031 L1800.72 682.031 L1800.16 682.031 L1799.6 682.031 L1799.04 682.031 L1798.48 682.031 L1797.92 682.031 L1797.36 682.031 L1796.8 682.031 L1796.25 682.031 L1795.69 682.031 L1795.13 682.031 L1794.57 682.031 L1794.01 682.031 L1793.45 682.031 L1792.89 682.031 L1792.33 682.031 L1791.77 682.031 L1791.21 682.031 L1790.65 682.031 L1790.09 682.031 L1789.53 682.031 L1788.98 682.031 L1788.42 682.031 L1787.86 682.031 L1787.3 682.031 L1786.74 682.031 L1786.18 682.031 L1785.62 682.031 L1785.06 682.031 L1784.5 682.031 L1783.94 682.031 L1783.38 682.031 L1782.82 682.031 L1782.26 682.031 L1781.71 682.031 L1781.15 682.031 L1780.59 682.031 L1780.03 682.031 L1779.47 682.031 L1778.91 682.031 L1778.35 682.031 L1777.79 682.031 L1777.23 682.031 L1776.67 682.031 L1776.11 682.031 L1775.55 682.031 L1774.99 682.031 L1774.43 682.031 L1773.88 682.031 L1773.32 682.031 L1772.76 682.031 L1772.2 682.031 L1771.64 682.031 L1771.08 682.031 L1770.52 682.031 L1769.96 682.031 L1769.4 682.031 L1768.84 682.031 L1768.28 682.031 L1767.72 682.031 L1767.16 682.031 L1766.61 682.031 L1766.05 682.031 L1765.49 682.031 L1764.93 682.031 L1764.37 682.031 L1763.81 682.031 L1763.25 682.031 L1762.69 682.031 L1762.13 682.031 L1761.57 682.031 L1761.01 682.031 L1760.45 682.031 L1759.89 682.031 L1759.34 682.031 L1758.78 682.031 L1758.22 682.031 L1757.66 682.031 L1757.1 682.031 L1756.54 682.031 L1755.98 682.031 L1755.42 682.031 L1754.86 682.031 L1754.3 682.031 L1753.74 682.031 L1753.18 682.031 L1752.62 682.031 L1752.06 682.031 L1751.51 682.031 L1750.95 682.031 L1750.39 682.031 L1749.83 682.031 L1749.27 682.031 L1748.71 682.031 L1748.15 682.031 L1747.59 682.031 L1747.03 682.031 L1746.47 682.031 L1745.91 682.031 L1745.35 682.031 L1744.79 682.031 L1744.24 682.031 L1743.68 682.031 L1743.12 682.031 L1742.56 682.031 L1742 682.031 L1741.44 682.031 L1740.88 682.031 L1740.32 682.031 L1739.76 682.031 L1739.2 682.031 L1738.64 682.031 L1738.08 682.031 L1737.52 682.031 L1736.97 682.031 L1736.41 682.031 L1735.85 682.031 L1735.29 682.031 L1734.73 682.031 L1734.17 682.031 L1733.61 682.031 L1733.05 682.031 L1732.49 682.031 L1731.93 682.031 L1731.37 682.031 L1730.81 682.031 L1730.25 682.031 L1729.69 682.031 L1729.14 682.031 L1728.58 682.031 L1728.02 682.031 L1727.46 682.031 L1726.9 682.031 L1726.34 682.031 L1725.78 682.031 L1725.22 682.031 L1724.66 682.031 L1724.1 682.031 L1723.54 682.031 L1722.98 682.031 L1722.42 682.031 L1721.87 682.031 L1721.31 682.031 L1720.75 682.031 L1720.19 682.031 L1719.63 682.031 L1719.07 682.031 L1718.51 682.031 L1717.95 682.031 L1717.39 682.031 L1716.83 682.031 L1716.27 682.031 L1715.71 682.031 L1715.15 682.031 L1714.6 682.031 L1714.04 682.031 L1713.48 682.031 L1712.92 682.031 L1712.36 682.031 L1711.8 682.031 L1711.24 682.031 L1710.68 682.031 L1710.12 682.031 L1709.56 682.031 L1709 682.031 L1708.44 682.031 L1707.88 682.031 L1707.32 682.031 L1706.77 682.031 L1706.21 682.031 L1705.65 682.031 L1705.09 682.031 L1704.53 682.031 L1703.97 682.031 L1703.41 682.031 L1702.85 682.031 L1702.29 682.031 L1701.73 682.031 L1701.17 682.031 L1700.61 682.031 L1700.05 682.031 L1699.5 682.031 L1698.94 682.031 L1698.38 682.031 L1697.82 682.031 L1697.26 682.031 L1696.7 682.031 L1696.14 682.031 L1695.58 682.031 L1695.02 682.031 L1694.46 682.031 L1693.9 682.031 L1693.34 682.031 L1692.78 682.031 L1692.23 682.031 L1691.67 682.031 L1691.11 682.031 L1690.55 682.031 L1689.99 682.031 L1689.43 682.031 L1688.87 682.031 L1688.31 682.031 L1687.75 682.031 L1687.19 682.031 L1686.63 682.031 L1686.07 682.031 L1685.51 682.031 L1684.95 682.031 L1684.4 682.031 L1683.84 682.031 L1683.28 682.031 L1682.72 682.031 L1682.16 682.031 L1681.6 682.031 L1681.04 682.031 L1680.48 682.031 L1679.92 682.031 L1679.36 682.031 L1678.8 682.031 L1678.24 682.031 L1677.68 682.031 L1677.13 682.031 L1676.57 682.031 L1676.01 682.031 L1675.45 682.031 L1674.89 682.031 L1674.33 682.031 L1673.77 682.031 L1673.21 682.031 L1672.65 682.031 L1672.09 682.031 L1671.53 682.031 L1670.97 682.031 L1670.41 682.031 L1669.85 682.031 L1669.3 682.031 L1668.74 682.031 L1668.18 682.031 L1667.62 682.031 L1667.06 682.031 L1666.5 682.031 L1665.94 682.031 L1665.38 682.031 L1664.82 682.031 L1664.26 682.031 L1663.7 682.031 L1663.14 682.031 L1662.58 682.031 L1662.03 682.031 L1661.47 682.031 L1660.91 682.031 L1660.35 682.031 L1659.79 682.031 L1659.23 682.031 L1658.67 682.031 L1658.11 682.031 L1657.55 682.031 L1656.99 682.031 L1656.43 682.031 L1655.87 682.031 L1655.31 682.031 L1654.76 682.031 L1654.2 682.031 L1653.64 682.031 L1653.08 682.031 L1652.52 682.031 L1651.96 682.031 L1651.4 682.031 L1650.84 682.031 L1650.28 682.031 L1649.72 682.031 L1649.16 682.031 L1648.6 682.031 L1648.04 682.031 L1647.48 682.031 L1646.93 682.031 L1646.37 682.031 L1645.81 682.031 L1645.25 682.031 L1644.69 682.031 L1644.13 682.031 L1643.57 682.031 L1643.01 682.031 L1642.45 682.031 L1641.89 682.031 L1641.33 682.031 L1640.77 682.031 L1640.21 682.031 L1639.66 682.031 L1639.1 682.031 L1638.54 682.031 L1637.98 682.031 L1637.42 682.031 L1636.86 682.031 L1636.3 682.031 L1635.74 682.031 L1635.18 682.031 L1634.62 682.031 L1634.06 682.031 L1633.5 682.031 L1632.94 682.031 L1632.39 682.031 L1631.83 682.031 L1631.27 682.031 L1630.71 682.031 L1630.15 682.031 L1629.59 682.031 L1629.03 682.031 L1628.47 682.031 L1627.91 682.031 L1627.35 682.031 L1626.79 682.031 L1626.23 682.031 L1625.67 682.031 L1625.11 682.031 L1624.56 682.031 L1624 682.031 L1623.44 682.031 L1622.88 682.031 L1622.32 682.031 L1621.76 682.031 L1621.2 682.031 L1620.64 682.031 L1620.08 682.031 L1619.52 682.031 L1618.96 682.031 L1618.4 682.031 L1617.84 682.031 L1617.29 682.031 L1616.73 682.031 L1616.17 682.031 L1615.61 682.031 L1615.05 682.031 L1614.49 682.031 L1613.93 682.031 L1613.37 682.031 L1612.81 682.031 L1612.25 682.031 L1611.69 682.031 L1611.13 682.031 L1610.57 682.031 L1610.02 682.031 L1609.46 682.031 L1608.9 682.031 L1608.34 682.031 L1607.78 682.031 L1607.22 682.031 L1606.66 682.031 L1606.1 682.031 L1605.54 682.031 L1604.98 682.031 L1604.42 682.031 L1603.86 682.031 L1603.3 682.031 L1602.74 682.031 L1602.19 682.031 L1601.63 682.031 L1601.07 682.031 L1600.51 682.031 L1599.95 682.031 L1599.39 682.031 L1598.83 682.031 L1598.27 682.031 L1597.71 682.031 L1597.15 682.031 L1596.59 682.031 L1596.03 682.031 L1595.47 682.031 L1594.92 682.031 L1594.36 682.031 L1593.8 682.031 L1593.24 682.031 L1592.68 682.031 L1592.12 682.031 L1591.56 682.031 L1591 682.031 L1590.44 682.031 L1589.88 682.031 L1589.32 682.031 L1588.76 682.031 L1588.2 682.031 L1587.65 682.031 L1587.09 682.031 L1586.53 682.031 L1585.97 682.031 L1585.41 682.031 L1584.85 682.031 L1584.29 682.031 L1583.73 682.031 L1583.17 682.031 L1582.61 682.031 L1582.05 682.031 L1581.49 682.031 L1580.93 682.031 L1580.37 682.031 L1579.82 682.031 L1579.26 682.031 L1578.7 682.031 L1578.14 682.031 L1577.58 682.031 L1577.02 682.031 L1576.46 682.031 L1575.9 682.031 L1575.34 682.031 L1574.78 682.031 L1574.22 682.031 L1573.66 682.031 L1573.1 682.031 L1572.55 682.031 L1571.99 682.031 L1571.43 682.031 L1570.87 682.031 L1570.31 682.031 L1569.75 682.031 L1569.19 682.031 L1568.63 682.031 L1568.07 682.031 L1567.51 682.031 L1566.95 682.031 L1566.39 682.031 L1565.83 682.031 L1565.28 682.031 L1564.72 682.031 L1564.16 682.031 L1563.6 682.031 L1563.04 682.031 L1562.48 682.031 L1561.92 682.031 L1561.36 682.031 L1560.8 682.031 L1560.24 682.031 L1559.68 682.031 L1559.12 682.031 L1558.56 682.031 L1558 682.031 L1557.45 682.031 L1556.89 682.031 L1556.33 682.031 L1555.77 682.031 L1555.21 682.031 L1554.65 682.031 L1554.09 682.031 L1553.53 682.031 L1552.97 682.031 L1552.41 682.031 L1551.85 682.031 L1551.29 682.031 L1550.73 682.031 L1550.18 682.031 L1549.62 682.031 L1549.06 682.031 L1548.5 682.031 L1547.94 682.031 L1547.38 682.031 L1546.82 682.031 L1546.26 682.031 L1545.7 682.031 L1545.14 682.031 L1544.58 682.031 L1544.02 682.031 L1543.46 682.031 L1542.9 682.031 L1542.35 682.031 L1541.79 682.031 L1541.23 682.031 L1540.67 682.031 L1540.11 682.031 L1539.55 682.031 L1538.99 682.031 L1538.43 682.031 L1537.87 682.031 L1537.31 682.031 L1536.75 682.031 L1536.19 682.031 L1535.63 682.031 L1535.08 682.031 L1534.52 682.031 L1533.96 682.031 L1533.4 682.031 L1532.84 682.031 L1532.28 682.031 L1531.72 682.031 L1531.16 682.031 L1530.6 682.031 L1530.04 682.031 L1529.48 682.031 L1528.92 682.031 L1528.36 682.031 L1527.81 682.031 L1527.25 682.031 L1526.69 682.031 L1526.13 682.031 L1525.57 682.031 L1525.01 682.031 L1524.45 682.031 L1523.89 682.031 L1523.33 682.031 L1522.77 682.031 L1522.21 682.031 L1521.65 682.031 L1521.09 682.031 L1520.53 682.031 L1519.98 682.031 L1519.42 682.031 L1518.86 682.031 L1518.3 682.031 L1517.74 682.031 L1517.18 682.031 L1516.62 682.031 L1516.06 682.031 L1515.5 682.031 L1514.94 682.031 L1514.38 682.031 L1513.82 682.031 L1513.26 682.031 L1512.71 682.031 L1512.15 682.031 L1511.59 682.031 L1511.03 682.031 L1510.47 682.031 L1509.91 682.031 L1509.35 682.031 L1508.79 682.031 L1508.23 682.031 L1507.67 682.031 L1507.11 682.031 L1506.55 682.031 L1505.99 682.031 L1505.44 682.031 L1504.88 682.031 L1504.32 682.031 L1503.76 682.031 L1503.2 682.031 L1502.64 682.031 L1502.08 682.031 L1501.52 682.031 L1500.96 682.031 L1500.4 682.031 L1499.84 682.031 L1499.28 682.031 L1498.72 682.031 L1498.16 682.031 L1497.61 682.031 L1497.05 682.031 L1496.49 682.031 L1495.93 682.031 L1495.37 682.031 L1494.81 682.031 L1494.25 682.031 L1493.69 682.031 L1493.13 682.031 L1492.57 682.031 L1492.01 682.031 L1491.45 682.031 L1490.89 682.031 L1490.34 682.031 L1489.78 682.031 L1489.22 682.031 L1488.66 682.031 L1488.1 682.031 L1487.54 682.031 L1486.98 682.031 L1486.42 682.031 L1485.86 682.031 L1485.3 682.031 L1484.74 682.031 L1484.18 682.031 L1483.62 682.031 L1483.07 682.031 L1482.51 682.031 L1481.95 682.031 L1481.39 682.031 L1480.83 682.031 L1480.27 682.031 L1479.71 682.031 L1479.15 682.031 L1478.59 682.031 L1478.03 682.031 L1477.47 682.031 L1476.91 682.031 L1476.35 682.031 L1475.79 682.031 L1475.24 682.031 L1474.68 682.031 L1474.12 682.031 L1473.56 682.031 L1473 682.031 L1472.44 682.031 L1471.88 682.031 L1471.32 682.031 L1470.76 682.031 L1470.2 682.031 L1469.64 682.031 L1469.08 682.031 L1468.52 682.031 L1467.97 682.031 L1467.41 682.031 L1466.85 682.031 L1466.29 682.031 L1465.73 682.031 L1465.17 682.031 L1464.61 682.031 L1464.05 682.031 L1463.49 682.031 L1462.93 682.031 L1462.37 682.031 L1461.81 682.031 L1461.25 682.031 L1460.7 682.031 L1460.14 682.031 L1459.58 682.031 L1459.02 682.031 L1458.46 682.031 L1457.9 682.031 L1457.34 682.031 L1456.78 682.031 L1456.22 682.031 L1455.66 682.031 L1455.1 682.031 L1454.54 682.031 L1453.98 682.031 L1453.42 682.031 L1452.87 682.031 L1452.31 682.031 L1451.75 682.031 L1451.19 682.031 L1450.63 682.031 L1450.07 682.031 L1449.51 682.031 L1448.95 682.031 L1448.39 682.031 L1447.83 682.031 L1447.27 682.031 L1446.71 682.031 L1446.15 682.031 L1445.6 682.031 L1445.04 682.031 L1444.48 682.031 L1443.92 682.031 L1443.36 682.031 L1442.8 682.031 L1442.24 682.031 L1441.68 682.031 L1441.12 682.031 L1440.56 682.031 L1440 682.031 L1439.44 682.031 L1438.88 682.031 L1438.33 682.031 L1437.77 682.031 L1437.21 682.031 L1436.65 682.031 L1436.09 682.031 L1435.53 682.031 L1434.97 682.031 L1434.41 682.031 L1433.85 682.031 L1433.29 682.031 L1432.73 682.031 L1432.17 682.031 L1431.61 682.031 L1431.05 682.031 L1430.5 682.031 L1429.94 682.031 L1429.38 682.031 L1428.82 682.031 L1428.26 682.031 L1427.7 682.031 L1427.14 682.031 L1426.58 682.031 L1426.02 682.031 L1425.46 682.031 L1424.9 682.031 L1424.34 682.031 L1423.78 682.031 L1423.23 682.031 L1422.67 682.031 L1422.11 682.031 L1421.55 682.031 L1420.99 682.031 L1420.43 682.031 L1419.87 682.031 L1419.31 682.031 L1418.75 682.031 L1418.19 682.031 L1417.63 682.031 L1417.07 682.031 L1416.51 682.031 L1415.95 682.031 L1415.4 682.031 L1414.84 682.031 L1414.28 682.031 L1413.72 682.031 L1413.16 682.031 L1412.6 682.031 L1412.04 682.031 L1411.48 682.031 L1410.92 682.031 L1410.36 682.031 L1409.8 682.031 L1409.24 682.031 L1408.68 682.031 L1408.13 682.031 L1407.57 682.031 L1407.01 682.031 L1406.45 682.031 L1405.89 682.031 L1405.33 682.031 L1404.77 682.031 L1404.21 682.031 L1403.65 682.031 L1403.09 682.031 L1402.53 682.031 L1401.97 682.031 L1401.41 682.031 L1400.86 682.031 L1400.3 682.031 L1399.74 682.031 L1399.18 682.031 L1398.62 682.031 L1398.06 682.031 L1397.5 682.031 L1396.94 682.031 L1396.38 682.031 L1395.82 682.031 L1395.26 682.031 L1394.7 682.031 L1394.14 682.031 L1393.58 682.031 L1393.03 682.031 L1392.47 682.031 L1391.91 682.031 L1391.35 682.031 L1390.79 682.031 L1390.23 682.031 L1389.67 682.031 L1389.11 682.031 L1388.55 682.031 L1387.99 682.031 L1387.43 682.031 L1386.87 682.031 L1386.31 682.031 L1385.76 682.031 L1385.2 682.031 L1384.64 682.031 L1384.08 682.031 L1383.52 682.031 L1382.96 682.031 L1382.4 682.031 L1381.84 682.031 L1381.28 682.031 L1380.72 682.031 L1380.16 682.031 L1379.6 682.031 L1379.04 682.031 L1378.49 682.031 L1377.93 682.031 L1377.37 682.031 L1376.81 682.031 L1376.25 682.031 L1375.69 682.031 L1375.13 682.031 L1374.57 682.031 L1374.01 682.031 L1373.45 682.031 L1372.89 682.031 L1372.33 682.031 L1371.77 682.031 L1371.21 682.031 L1370.66 682.031 L1370.1 682.031 L1369.54 682.031 L1368.98 682.031 L1368.42 682.031 L1367.86 682.031 L1367.3 682.031 L1366.74 682.031 L1366.18 682.031 L1365.62 682.031 L1365.06 682.031 L1364.5 682.031 L1363.94 682.031 L1363.39 682.031 L1362.83 682.031 L1362.27 682.031 L1361.71 682.031 L1361.15 682.031 L1360.59 682.031 L1360.03 682.031 L1359.47 682.031 L1358.91 682.031 L1358.35 682.031 L1357.79 682.031 L1357.23 682.031 L1356.67 682.031 L1356.12 682.031 L1355.56 682.031 L1355 682.031 L1354.44 682.031 L1353.88 682.031 L1353.32 682.031 L1352.76 682.031 L1352.2 682.031 L1351.64 682.031 L1351.08 682.031 L1350.52 682.031 L1349.96 682.031 L1349.4 682.031 L1348.84 682.031 L1348.29 682.031 L1347.73 682.031 L1347.17 682.031 L1346.61 682.031 L1346.05 682.031 L1345.49 682.031 L1344.93 682.031 L1344.37 682.031 L1343.81 682.031 L1343.25 682.031 L1342.69 682.031 L1342.13 682.031 L1341.57 682.031 L1341.02 682.031 L1340.46 682.031 L1339.9 682.031 L1339.34 682.031 L1338.78 682.031 L1338.22 682.031 L1337.66 682.031 L1337.1 682.031 L1336.54 682.031 L1335.98 682.031 L1335.42 682.031 L1334.86 682.031 L1334.3 682.031 L1333.75 682.031 L1333.19 682.031 L1332.63 682.031 L1332.07 682.031 L1331.51 682.031 L1330.95 682.031 L1330.39 682.031 L1329.83 682.031 L1329.27 682.031 L1328.71 682.031 L1328.15 682.031 L1327.59 682.031 L1327.03 682.031 L1326.47 682.031 L1325.92 682.031 L1325.36 682.031 L1324.8 682.031 L1324.24 682.031 L1323.68 682.031 L1323.12 682.031 L1322.56 682.031 L1322 682.031 L1321.44 682.031 L1320.88 682.031 L1320.32 682.031 L1319.76 682.031 L1319.2 682.031 L1318.65 682.031 L1318.09 682.031 L1317.53 682.031 L1316.97 682.031 L1316.41 682.031 L1315.85 682.031 L1315.29 682.031 L1314.73 682.031 L1314.17 682.031 L1313.61 682.031 L1313.05 682.031 L1312.49 682.031 L1311.93 682.031 L1311.38 682.031 L1310.82 682.031 L1310.26 682.031 L1309.7 682.031 L1309.14 682.031 L1308.58 682.031 L1308.02 682.031 L1307.46 682.031 L1306.9 682.031 L1306.34 682.031 L1305.78 682.031 L1305.22 682.031 L1304.66 682.031 L1304.1 682.031 L1303.55 682.031 L1302.99 682.031 L1302.43 682.031 L1301.87 682.031 L1301.31 682.031 L1300.75 682.031 L1300.19 682.031 L1299.63 682.031 L1299.07 682.031 L1298.51 682.031 L1297.95 682.031 L1297.39 682.031 L1296.83 682.031 L1296.28 682.031 L1295.72 682.031 L1295.16 682.031 L1294.6 682.031 L1294.04 682.031 L1293.48 682.031 L1292.92 682.031 L1292.36 682.031 L1291.8 682.031 L1291.24 682.031 L1290.68 682.031 L1290.12 682.031 L1289.56 682.031 L1289 682.031 L1288.45 682.031 L1287.89 682.031 L1287.33 682.031 L1286.77 682.031 L1286.21 682.031 L1285.65 682.031 L1285.09 682.031 L1284.53 682.031 L1283.97 682.031 L1283.41 682.031 L1282.85 682.031 L1282.29 682.031 L1281.73 682.031 L1281.18 682.031 L1280.62 682.031 L1280.06 682.031 L1279.5 682.031 L1278.94 682.031 L1278.38 682.031 L1277.82 682.031 L1277.26 682.031 L1276.7 682.031 L1276.14 682.031 L1275.58 682.031 L1275.02 682.031 L1274.46 682.031 L1273.91 682.031 L1273.35 682.031 L1272.79 682.031 L1272.23 682.031 L1271.67 682.031 L1271.11 682.031 L1270.55 682.031 L1269.99 682.031 L1269.43 682.031 L1268.87 682.031 L1268.31 682.031 L1267.75 682.031 L1267.19 682.031 L1266.63 682.031 L1266.08 682.031 L1265.52 682.031 L1264.96 682.031 L1264.4 682.031 L1263.84 682.031 L1263.28 682.031 L1262.72 682.031 L1262.16 682.031 L1261.6 682.031 L1261.04 682.031 L1260.48 682.031 L1259.92 682.031 L1259.36 682.031 L1258.81 682.031 L1258.25 682.031 L1257.69 682.031 L1257.13 682.031 L1256.57 682.031 L1256.01 682.031 L1255.45 682.031 L1254.89 682.031 L1254.33 682.031 L1253.77 682.031 L1253.21 682.031 L1252.65 682.031 L1252.09 682.031 L1251.54 682.031 L1250.98 682.031 L1250.42 682.031 L1249.86 682.031 L1249.3 682.031 L1248.74 682.031 L1248.18 682.031 L1247.62 682.031 L1247.06 682.031 L1246.5 682.031 L1245.94 682.031 L1245.38 682.031 L1244.82 682.031 L1244.26 682.031 L1243.71 682.031 L1243.15 682.031 L1242.59 682.031 L1242.03 682.031 L1241.47 682.031 L1240.91 682.031 L1240.35 682.031 L1239.79 682.031 L1239.23 682.031 L1238.67 682.031 L1238.11 682.031 L1237.55 682.031 L1236.99 682.031 L1236.44 682.031 L1235.88 682.031 L1235.32 682.031 L1234.76 682.031 L1234.2 682.031 L1233.64 682.031 L1233.08 682.031 L1232.52 682.031 L1231.96 682.031 L1231.4 682.031 L1230.84 682.031 L1230.28 682.031 L1229.72 682.031 L1229.17 682.031 L1228.61 682.031 L1228.05 682.031 L1227.49 682.031 L1226.93 682.031 L1226.37 682.031 L1225.81 682.031 L1225.25 682.031 L1224.69 682.031 L1224.13 682.031 L1223.57 682.031 L1223.01 682.031 L1222.45 682.031 L1221.89 682.031 L1221.34 682.031 L1220.78 682.031 L1220.22 682.031 L1219.66 682.031 L1219.1 682.031 L1218.54 682.031 L1217.98 682.031 L1217.42 682.031 L1216.86 682.031 L1216.3 682.031 L1215.74 682.031 L1215.18 682.031 L1214.62 682.031 L1214.07 682.031 L1213.51 682.031 L1212.95 682.031 L1212.39 682.031 L1211.83 682.031 L1211.27 682.031 L1210.71 682.031 L1210.15 682.031 L1209.59 682.031 L1209.03 682.031 L1208.47 682.031 L1207.91 682.031 L1207.35 682.031 L1206.8 682.031 L1206.24 682.031 L1205.68 682.031 L1205.12 682.031 L1204.56 682.031 L1204 682.031 L1203.44 682.031 L1202.88 682.031 L1202.32 682.031 L1201.76 682.031 L1201.2 682.031 L1200.64 682.031 L1200.08 682.031 L1199.52 682.031 L1198.97 682.031 L1198.41 682.031 L1197.85 682.031 L1197.29 682.031 L1196.73 682.031 L1196.17 682.031 L1195.61 682.031 L1195.05 682.031 L1194.49 682.031 L1193.93 682.031 L1193.37 682.031 L1192.81 682.031 L1192.25 682.031 L1191.7 682.031 L1191.14 682.031 L1190.58 682.031 L1190.02 682.031 L1189.46 682.031 L1188.9 682.031 L1188.34 682.031 L1187.78 682.031 L1187.22 682.031 L1186.66 682.031 L1186.1 682.031 L1185.54 682.031 L1184.98 682.031 L1184.43 682.031 L1183.87 682.031 L1183.31 682.031 L1182.75 682.031 L1182.19 682.031 L1181.63 682.031 L1181.07 682.031 L1180.51 682.031 L1179.95 682.031 L1179.39 682.031 L1178.83 682.031 L1178.27 682.031 L1177.71 682.031 L1177.15 682.031 L1176.6 682.031 L1176.04 682.031 L1175.48 682.031 L1174.92 682.031 L1174.36 682.031 L1173.8 682.031 L1173.24 682.031 L1172.68 682.031 L1172.12 682.031 L1171.56 682.031 L1171 682.031 L1170.44 682.031 L1169.88 682.031 L1169.33 682.031 L1168.77 682.031 L1168.21 682.031 L1167.65 682.031 L1167.09 682.031 L1166.53 682.031 L1165.97 682.031 L1165.41 682.031 L1164.85 682.031 L1164.29 682.031 L1163.73 682.031 L1163.17 682.031 L1162.61 682.031 L1162.05 682.031 L1161.5 682.031 L1160.94 682.031 L1160.38 682.031 L1159.82 682.031 L1159.26 682.031 L1158.7 682.031 L1158.14 682.031 L1157.58 682.031 L1157.02 682.031 L1156.46 682.031 L1155.9 682.031 L1155.34 682.031 L1154.78 682.031 L1154.23 682.031 L1153.67 682.031 L1153.11 682.031 L1152.55 682.031 L1151.99 682.031 L1151.43 682.031 L1150.87 682.031 L1150.31 682.031 L1149.75 682.031 L1149.19 682.031 L1148.63 682.031 L1148.07 682.031 L1147.51 682.031 L1146.96 682.031 L1146.4 682.031 L1145.84 682.031 L1145.28 682.031 L1144.72 682.031 L1144.16 682.031 L1143.6 682.031 L1143.04 682.031 L1142.48 682.031 L1141.92 682.031 L1141.36 682.031 L1140.8 682.031 L1140.24 682.031 L1139.68 682.031 L1139.13 682.031 L1138.57 682.031 L1138.01 682.031 L1137.45 682.031 L1136.89 682.031 L1136.33 682.031 L1135.77 682.031 L1135.21 682.031 L1134.65 682.031 L1134.09 682.031 L1133.53 682.031 L1132.97 682.031 L1132.41 682.031 L1131.86 682.031 L1131.3 682.031 L1130.74 682.031 L1130.18 682.031 L1129.62 682.031 L1129.06 682.031 L1128.5 682.031 L1127.94 682.031 L1127.38 682.031 L1126.82 682.031 L1126.26 682.031 L1125.7 682.031 L1125.14 682.031 L1124.59 682.031 L1124.03 682.031 L1123.47 682.031 L1122.91 682.031 L1122.35 682.031 L1121.79 682.031 L1121.23 682.031 L1120.67 682.031 L1120.11 682.031 L1119.55 682.031 L1118.99 682.031 L1118.43 682.031 L1117.87 682.031 L1117.31 682.031 L1116.76 682.031 L1116.2 682.031 L1115.64 682.031 L1115.08 682.031 L1114.52 682.031 L1113.96 682.031 L1113.4 682.031 L1112.84 682.031 L1112.28 682.031 L1111.72 682.031 L1111.16 682.031 L1110.6 682.031 L1110.04 682.031 L1109.49 682.031 L1108.93 682.031 L1108.37 682.031 L1107.81 682.031 L1107.25 682.031 L1106.69 682.031 L1106.13 682.031 L1105.57 682.031 L1105.01 682.031 L1104.45 682.031 L1103.89 682.031 L1103.33 682.031 L1102.77 682.031 L1102.22 682.031 L1101.66 682.031 L1101.1 682.031 L1100.54 682.031 L1099.98 682.031 L1099.42 682.031 L1098.86 682.031 L1098.3 682.031 L1097.74 682.031 L1097.18 682.031 L1096.62 682.031 L1096.06 682.031 L1095.5 682.031 L1094.94 682.031 L1094.39 682.031 L1093.83 682.031 L1093.27 682.031 L1092.71 682.031 L1092.15 682.031 L1091.59 682.031 L1091.03 682.031 L1090.47 682.031 L1089.91 682.031 L1089.35 682.031 L1088.79 682.031 L1088.23 682.031 L1087.67 682.031 L1087.12 682.031 L1086.56 682.031 L1086 682.031 L1085.44 682.031 L1084.88 682.031 L1084.32 682.031 L1083.76 682.031 L1083.2 682.031 L1082.64 682.031 L1082.08 682.031 L1081.52 682.031 L1080.96 682.031 L1080.4 682.031 L1079.85 682.031 L1079.29 682.031 L1078.73 682.031 L1078.17 682.031 L1077.61 682.031 L1077.05 682.031 L1076.49 682.031 L1075.93 682.031 L1075.37 682.031 L1074.81 682.031 L1074.25 682.031 L1073.69 682.031 L1073.13 682.031 L1072.57 682.031 L1072.02 682.031 L1071.46 682.031 L1070.9 682.031 L1070.34 682.031 L1069.78 682.031 L1069.22 682.031 L1068.66 682.031 L1068.1 682.031 L1067.54 682.031 L1066.98 682.031 L1066.42 682.031 L1065.86 682.031 L1065.3 682.031 L1064.75 682.031 L1064.19 682.031 L1063.63 682.031 L1063.07 682.031 L1062.51 682.031 L1061.95 682.031 L1061.39 682.031 L1060.83 682.031 L1060.27 682.031 L1059.71 682.031 L1059.15 682.031 L1058.59 682.031 L1058.03 682.031 L1057.48 682.031 L1056.92 682.031 L1056.36 682.031 L1055.8 682.031 L1055.24 682.031 L1054.68 682.031 L1054.12 682.031 L1053.56 682.031 L1053 682.031 L1052.44 682.031 L1051.88 682.031 L1051.32 682.031 L1050.76 682.031 L1050.2 682.031 L1049.65 682.031 L1049.09 682.031 L1048.53 682.031 L1047.97 682.031 L1047.41 682.031 L1046.85 682.031 L1046.29 682.031 L1045.73 682.031 L1045.17 682.031 L1044.61 682.031 L1044.05 682.031 L1043.49 682.031 L1042.93 682.031 L1042.38 682.031 L1041.82 682.031 L1041.26 682.031 L1040.7 682.031 L1040.14 682.031 L1039.58 682.031 L1039.02 682.031 L1038.46 682.031 L1037.9 682.031 L1037.34 682.031 L1036.78 682.031 L1036.22 682.031 L1035.66 682.031 L1035.1 682.031 L1034.55 682.031 L1033.99 682.031 L1033.43 682.031 L1032.87 682.031 L1032.31 682.031 L1031.75 682.031 L1031.19 682.031 L1030.63 682.031 L1030.07 682.031 L1029.51 682.031 L1028.95 682.031 L1028.39 682.031 L1027.83 682.031 L1027.28 682.031 L1026.72 682.031 L1026.16 682.031 L1025.6 682.031 L1025.04 682.031 L1024.48 682.031 L1023.92 682.031 L1023.36 682.031 L1022.8 682.031 L1022.24 682.031 L1021.68 682.031 L1021.12 682.031 L1020.56 682.031 L1020.01 682.031 L1019.45 682.031 L1018.89 682.031 L1018.33 682.031 L1017.77 682.031 L1017.21 682.031 L1016.65 682.031 L1016.09 682.031 L1015.53 682.031 L1014.97 682.031 L1014.41 682.031 L1013.85 682.031 L1013.29 682.031 L1012.73 682.031 L1012.18 682.031 L1011.62 682.031 L1011.06 682.031 L1010.5 682.031 L1009.94 682.031 L1009.38 682.031 L1008.82 682.031 L1008.26 682.031 L1007.7 682.031 L1007.14 682.031 L1006.58 682.031 L1006.02 682.031 L1005.46 682.031 L1004.91 682.031 L1004.35 682.031 L1003.79 682.031 L1003.23 682.031 L1002.67 682.031 L1002.11 682.031 L1001.55 682.031 L1000.99 682.031 L1000.43 682.031 L999.872 682.031 L999.313 682.031 L998.754 682.031 L998.194 682.031 L997.635 682.031 L997.076 682.031 L996.517 682.031 L995.957 682.031 L995.398 682.031 L994.839 682.031 L994.28 682.031 L993.72 682.031 L993.161 682.031 L992.602 682.031 L992.043 682.031 L991.483 682.031 L990.924 682.031 L990.365 682.031 L989.806 682.031 L989.246 682.031 L988.687 682.031 L988.128 682.031 L987.569 682.031 L987.009 682.031 L986.45 682.031 L985.891 682.031 L985.332 682.031 L984.772 682.031 L984.213 682.031 L983.654 682.031 L983.095 682.031 L982.535 682.031 L981.976 682.031 L981.417 682.031 L980.858 682.031 L980.298 682.031 L979.739 682.031 L979.18 682.031 L978.621 682.031 L978.061 682.031 L977.502 682.031 L976.943 682.031 L976.384 682.031 L975.824 682.031 L975.265 682.031 L974.706 682.031 L974.147 682.031 L973.587 682.031 L973.028 682.031 L972.469 682.031 L971.91 682.031 L971.35 682.031 L970.791 682.031 L970.232 682.031 L969.673 682.031 L969.113 682.031 L968.554 682.031 L967.995 682.031 L967.436 682.031 L966.876 682.031 L966.317 682.031 L965.758 682.031 L965.199 682.031 L964.639 682.031 L964.08 682.031 L963.521 682.031 L962.962 682.031 L962.402 682.031 L961.843 682.031 L961.284 682.031 L960.725 682.031 L960.165 682.031 L959.606 682.031 L959.047 682.031 L958.488 682.031 L957.928 682.031 L957.369 682.031 L956.81 682.031 L956.251 682.031 L955.691 682.031 L955.132 682.031 L954.573 682.031 L954.014 682.031 L953.454 682.031 L952.895 682.031 L952.336 682.031 L951.777 682.031 L951.217 682.031 L950.658 682.031 L950.099 682.031 L949.54 682.031 L948.98 682.031 L948.421 682.031 L947.862 682.031 L947.303 682.031 L946.743 682.031 L946.184 682.031 L945.625 682.031 L945.066 682.031 L944.506 682.031 L943.947 682.031 L943.388 682.031 L942.829 682.031 L942.269 682.031 L941.71 682.031 L941.151 682.031 L940.592 682.031 L940.032 682.031 L939.473 682.031 L938.914 682.031 L938.355 682.031 L937.795 682.031 L937.236 682.031 L936.677 682.031 L936.118 682.031 L935.558 682.031 L934.999 682.031 L934.44 682.031 L933.881 682.031 L933.321 682.031 L932.762 682.031 L932.203 682.031 L931.644 682.031 L931.084 682.031 L930.525 682.031 L929.966 682.031 L929.406 682.031 L928.847 682.031 L928.288 682.031 L927.729 682.031 L927.169 682.031 L926.61 682.031 L926.051 682.031 L925.492 682.031 L924.932 682.031 L924.373 682.031 L923.814 682.031 L923.255 682.031 L922.695 682.031 L922.136 682.031 L921.577 682.031 L921.018 682.031 L920.458 682.031 L919.899 682.031 L919.34 682.031 L918.781 682.031 L918.221 682.031 L917.662 682.031 L917.103 682.031 L916.544 682.031 L915.984 682.031 L915.425 682.031 L914.866 682.031 L914.307 682.031 L913.747 682.031 L913.188 682.031 L912.629 682.031 L912.07 682.031 L911.51 682.031 L910.951 682.031 L910.392 682.031 L909.833 682.031 L909.273 682.031 L908.714 682.031 L908.155 682.031 L907.596 682.031 L907.036 682.031 L906.477 682.031 L905.918 682.031 L905.359 682.031 L904.799 682.031 L904.24 682.031 L903.681 682.031 L903.122 682.031 L902.562 682.031 L902.003 682.031 L901.444 682.031 L900.885 682.031 L900.325 682.031 L899.766 682.031 L899.207 682.031 L898.648 682.031 L898.088 682.031 L897.529 682.031 L896.97 682.031 L896.411 682.031 L895.851 682.031 L895.292 682.031 L894.733 682.031 L894.174 682.031 L893.614 682.031 L893.055 682.031 L892.496 682.031 L891.937 682.031 L891.377 682.031 L890.818 682.031 L890.259 682.031 L889.7 682.031 L889.14 682.031 L888.581 682.031 L888.022 682.031 L887.463 682.031 L886.903 682.031 L886.344 682.031 L885.785 682.031 L885.226 682.031 L884.666 682.031 L884.107 682.031 L883.548 682.031 L882.989 682.031 L882.429 682.031 L881.87 682.031 L881.311 682.031 L880.752 682.031 L880.192 682.031 L879.633 682.031 L879.074 682.031 L878.515 682.031 L877.955 682.031 L877.396 682.031 L876.837 682.031 L876.278 682.031 L875.718 682.031 L875.159 682.031 L874.6 682.031 L874.041 682.031 L873.481 682.031 L872.922 682.031 L872.363 682.031 L871.804 682.031 L871.244 682.031 L870.685 682.031 L870.126 682.031 L869.567 682.031 L869.007 682.031 L868.448 682.031 L867.889 682.031 L867.33 682.031 L866.77 682.031 L866.211 682.031 L865.652 682.031 L865.093 682.031 L864.533 682.031 L863.974 682.031 L863.415 682.031 L862.856 682.031 L862.296 682.031 L861.737 682.031 L861.178 682.031 L860.619 682.031 L860.059 682.031 L859.5 682.031 L858.941 682.031 L858.382 682.031 L857.822 682.031 L857.263 682.031 L856.704 682.031 L856.145 682.031 L855.585 682.031 L855.026 682.031 L854.467 682.031 L853.908 682.031 L853.348 682.031 L852.789 682.031 L852.23 682.031 L851.671 682.031 L851.111 682.031 L850.552 682.031 L849.993 682.031 L849.434 682.031 L848.874 682.031 L848.315 682.031 L847.756 682.031 L847.197 682.031 L846.637 682.031 L846.078 682.031 L845.519 682.031 L844.96 682.031 L844.4 682.031 L843.841 682.031 L843.282 682.031 L842.723 682.031 L842.163 682.031 L841.604 682.031 L841.045 682.031 L840.486 682.031 L839.926 682.031 L839.367 682.031 L838.808 682.031 L838.249 682.031 L837.689 682.031 L837.13 682.031 L836.571 682.031 L836.012 682.031 L835.452 682.031 L834.893 682.031 L834.334 682.031 L833.775 682.031 L833.215 682.031 L832.656 682.031 L832.097 682.031 L831.538 682.031 L830.978 682.031 L830.419 682.031 L829.86 682.031 L829.301 682.031 L828.741 682.031 L828.182 682.031 L827.623 682.031 L827.064 682.031 L826.504 682.031 L825.945 682.031 L825.386 682.031 L824.827 682.031 L824.267 682.031 L823.708 682.031 L823.149 682.031 L822.59 682.031 L822.03 682.031 L821.471 682.031 L820.912 682.031 L820.353 682.031 L819.793 682.031 L819.234 682.031 L818.675 682.031 L818.116 682.031 L817.556 682.031 L816.997 682.031 L816.438 682.031 L815.879 682.031 L815.319 682.031 L814.76 682.031 L814.201 682.031 L813.642 682.031 L813.082 682.031 L812.523 682.031 L811.964 682.031 L811.405 682.031 L810.845 682.031 L810.286 682.031 L809.727 682.031 L809.168 682.031 L808.608 682.031 L808.049 682.031 L807.49 682.031 L806.931 682.031 L806.371 682.031 L805.812 682.031 L805.253 682.031 L804.693 682.031 L804.134 682.031 L803.575 682.031 L803.016 682.031 L802.456 682.031 L801.897 682.031 L801.338 682.031 L800.779 682.031 L800.219 682.031 L799.66 682.031 L799.101 682.031 L798.542 682.031 L797.982 682.031 L797.423 682.031 L796.864 682.031 L796.305 682.031 L795.745 682.031 L795.186 682.031 L794.627 682.031 L794.068 682.031 L793.508 682.031 L792.949 682.031 L792.39 682.031 L791.831 682.031 L791.271 682.031 L790.712 682.031 L790.153 682.031 L789.594 682.031 L789.034 682.031 L788.475 682.031 L787.916 682.031 L787.357 682.031 L786.797 682.031 L786.238 682.031 L785.679 682.031 L785.12 682.031 L784.56 682.031 L784.001 682.031 L783.442 682.031 L782.883 682.031 L782.323 682.031 L781.764 682.031 L781.205 682.031 L780.646 682.031 L780.086 682.031 L779.527 682.031 L778.968 682.031 L778.409 682.031 L777.849 682.031 L777.29 682.031 L776.731 682.031 L776.172 682.031 L775.612 682.031 L775.053 682.031 L774.494 682.031 L773.935 682.031 L773.375 682.031 L772.816 682.031 L772.257 682.031 L771.698 682.031 L771.138 682.031 L770.579 682.031 L770.02 682.031 L769.461 682.031 L768.901 682.031 L768.342 682.031 L767.783 682.031 L767.224 682.031 L766.664 682.031 L766.105 682.031 L765.546 682.031 L764.987 682.031 L764.427 682.031 L763.868 682.031 L763.309 682.031 L762.75 682.031 L762.19 682.031 L761.631 682.031 L761.072 682.031 L760.513 682.031 L759.953 682.031 L759.394 682.031 L758.835 682.031 L758.276 682.031 L757.716 682.031 L757.157 682.031 L756.598 682.031 L756.039 682.031 L755.479 682.031 L754.92 682.031 L754.361 682.031 L753.802 682.031 L753.242 682.031 L752.683 682.031 L752.124 682.031 L751.565 682.031 L751.005 682.031 L750.446 682.031 L749.887 682.031 L749.328 682.031 L748.768 682.031 L748.209 682.031 L747.65 682.031 L747.091 682.031 L746.531 682.031 L745.972 682.031 L745.413 682.031 L744.854 682.031 L744.294 682.031 L743.735 682.031 L743.176 682.031 L742.617 682.031 L742.057 682.031 L741.498 682.031 L740.939 682.031 L740.38 682.031 L739.82 682.031 L739.261 682.031 L738.702 682.031 L738.143 682.031 L737.583 682.031 L737.024 682.031 L736.465 682.031 L735.906 682.031 L735.346 682.031 L734.787 682.031 L734.228 682.031 L733.669 682.031 L733.109 682.031 L732.55 682.031 L731.991 682.031 L731.432 682.031 L730.872 682.031 L730.313 682.031 L729.754 682.031 L729.195 682.031 L728.635 682.031 L728.076 682.031 L727.517 682.031 L726.958 682.031 L726.398 682.031 L725.839 682.031 L725.28 682.031 L724.721 682.031 L724.161 682.031 L723.602 682.031 L723.043 682.031 L722.484 682.031 L721.924 682.031 L721.365 682.031 L720.806 682.031 L720.247 682.031  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.097 720.806,683.097 721.365,683.097 721.924,683.097 722.484,683.097 723.043,683.097 723.602,683.097 724.161,683.097 724.721,683.097 725.28,683.097 725.839,683.097 726.398,683.097 726.958,683.097 727.517,683.097 728.076,683.097 728.635,683.097 729.195,683.097 729.754,683.097 730.313,683.097 730.872,683.097 731.432,683.097 731.991,683.097 732.55,683.097 733.109,683.097 733.669,683.097 734.228,683.097 734.787,683.097 735.346,683.097 735.906,683.097 736.465,683.097 737.024,683.097 737.583,683.097 738.143,683.097 738.702,683.097 739.261,683.097 739.82,683.097 740.38,683.097 740.939,683.097 741.498,683.097 742.057,683.097 742.617,683.097 743.176,683.097 743.735,683.097 744.294,683.097 744.854,683.097 745.413,683.097 745.972,683.097 746.531,683.097 747.091,683.097 747.65,683.097 748.209,683.097 748.768,683.097 749.328,683.097 749.887,683.097 750.446,683.097 751.005,683.097 751.565,683.097 752.124,683.097 752.683,683.097 753.242,683.097 753.802,683.097 754.361,683.097 754.92,683.097 755.479,683.097 756.039,683.097 756.598,683.097 757.157,683.097 757.716,683.097 758.276,683.097 758.835,683.097 759.394,683.097 759.953,683.097 760.513,683.097 761.072,683.097 761.631,683.097 762.19,683.097 762.75,683.097 763.309,683.097 763.868,683.097 764.427,683.097 764.987,683.097 765.546,683.097 766.105,683.097 766.664,683.097 767.224,683.097 767.783,683.097 768.342,683.097 768.901,683.097 769.461,683.097 770.02,683.097 770.579,683.097 771.138,683.097 771.698,683.097 772.257,683.097 772.816,683.097 773.375,683.097 773.935,683.097 774.494,683.097 775.053,683.097 775.612,683.097 776.172,683.097 776.731,683.097 777.29,683.097 777.849,683.097 778.409,683.097 778.968,683.097 779.527,683.097 780.086,683.097 780.646,683.097 781.205,683.097 781.764,683.097 782.323,683.097 782.883,683.097 783.442,683.097 784.001,683.097 784.56,683.097 785.12,683.097 785.679,683.097 786.238,683.097 786.797,683.097 787.357,683.097 787.916,683.097 788.475,683.097 789.034,683.097 789.594,683.097 790.153,683.097 790.712,683.097 791.271,683.097 791.831,683.097 792.39,683.097 792.949,683.097 793.508,683.097 794.068,683.097 794.627,683.097 795.186,683.097 795.745,683.097 796.305,683.097 796.864,683.097 797.423,683.097 797.982,683.097 798.542,683.097 799.101,683.097 799.66,683.097 800.219,683.097 800.779,683.097 801.338,683.097 801.897,683.097 802.456,683.097 803.016,683.097 803.575,683.097 804.134,683.097 804.693,683.097 805.253,683.097 805.812,683.097 806.371,683.097 806.931,683.097 807.49,683.097 808.049,683.097 808.608,683.097 809.168,683.097 809.727,683.097 810.286,683.097 810.845,683.097 811.405,683.097 811.964,683.097 812.523,683.097 813.082,683.097 813.642,683.097 814.201,683.097 814.76,683.097 815.319,683.097 815.879,683.097 816.438,683.097 816.997,683.097 817.556,683.097 818.116,683.097 818.675,683.097 819.234,683.097 819.793,683.097 820.353,683.097 820.912,683.097 821.471,683.097 822.03,683.097 822.59,683.097 823.149,683.097 823.708,683.097 824.267,683.097 824.827,683.097 825.386,683.097 825.945,683.097 826.504,683.097 827.064,683.097 827.623,683.097 828.182,683.097 828.741,683.097 829.301,683.097 829.86,683.097 830.419,683.097 830.978,683.097 831.538,683.097 832.097,683.097 832.656,683.097 833.215,683.097 833.775,683.097 834.334,683.097 834.893,683.097 835.452,683.097 836.012,683.097 836.571,683.097 837.13,683.097 837.689,683.097 838.249,683.097 838.808,683.097 839.367,683.097 839.926,683.097 840.486,683.097 841.045,683.097 841.604,683.097 842.163,683.097 842.723,683.097 843.282,683.097 843.841,683.097 844.4,683.097 844.96,683.097 845.519,683.097 846.078,683.097 846.637,683.097 847.197,683.097 847.756,683.097 848.315,683.097 848.874,683.097 849.434,683.097 849.993,683.097 850.552,683.097 851.111,683.097 851.671,683.097 852.23,683.097 852.789,683.097 853.348,683.097 853.908,683.097 854.467,683.097 855.026,683.097 855.585,683.097 856.145,683.097 856.704,683.097 857.263,683.097 857.822,683.097 858.382,683.097 858.941,683.097 859.5,683.097 860.059,683.097 860.619,683.097 861.178,683.097 861.737,683.097 862.296,683.097 862.856,683.097 863.415,683.097 863.974,683.097 864.533,683.097 865.093,683.097 865.652,683.097 866.211,683.097 866.77,683.097 867.33,683.097 867.889,683.097 868.448,683.097 869.007,683.097 869.567,683.097 870.126,683.097 870.685,683.097 871.244,683.097 871.804,683.097 872.363,683.097 872.922,683.097 873.481,683.097 874.041,683.097 874.6,683.097 875.159,683.097 875.718,683.097 876.278,683.097 876.837,683.097 877.396,683.097 877.955,683.097 878.515,683.097 879.074,683.097 879.633,683.097 880.192,683.097 880.752,683.097 881.311,683.097 881.87,683.097 882.429,683.097 882.989,683.097 883.548,683.097 884.107,683.097 884.666,683.097 885.226,683.097 885.785,683.097 886.344,683.097 886.903,683.097 887.463,683.097 888.022,683.097 888.581,683.097 889.14,683.097 889.7,683.097 890.259,683.097 890.818,683.097 891.377,683.097 891.937,683.097 892.496,683.097 893.055,683.097 893.614,683.097 894.174,683.097 894.733,683.097 895.292,683.097 895.851,683.097 896.411,683.097 896.97,683.097 897.529,683.097 898.088,683.097 898.648,683.097 899.207,683.097 899.766,683.097 900.325,683.097 900.885,683.097 901.444,683.097 902.003,683.097 902.562,683.097 903.122,683.097 903.681,683.097 904.24,683.097 904.799,683.097 905.359,683.097 905.918,683.097 906.477,683.097 907.036,683.097 907.596,683.097 908.155,683.097 908.714,683.097 909.273,683.097 909.833,683.097 910.392,683.097 910.951,683.097 911.51,683.097 912.07,683.097 912.629,683.097 913.188,683.097 913.747,683.097 914.307,683.097 914.866,683.097 915.425,683.097 915.984,683.097 916.544,683.097 917.103,683.097 917.662,683.097 918.221,683.097 918.781,683.097 919.34,683.097 919.899,683.097 920.458,683.097 921.018,683.097 921.577,683.097 922.136,683.097 922.695,683.097 923.255,683.097 923.814,683.097 924.373,683.097 924.932,683.097 925.492,683.097 926.051,683.097 926.61,683.097 927.169,683.097 927.729,683.097 928.288,683.097 928.847,683.097 929.406,683.097 929.966,683.097 930.525,683.097 931.084,683.097 931.644,683.097 932.203,683.097 932.762,683.097 933.321,683.097 933.881,683.097 934.44,683.097 934.999,683.097 935.558,683.097 936.118,683.097 936.677,683.097 937.236,683.097 937.795,683.097 938.355,683.097 938.914,683.097 939.473,683.097 940.032,683.097 940.592,683.097 941.151,683.097 941.71,683.097 942.269,683.097 942.829,683.097 943.388,683.097 943.947,683.097 944.506,683.097 945.066,683.097 945.625,683.097 946.184,683.097 946.743,683.097 947.303,683.097 947.862,683.097 948.421,683.097 948.98,683.097 949.54,683.097 950.099,683.097 950.658,683.097 951.217,683.097 951.777,683.097 952.336,683.097 952.895,683.097 953.454,683.097 954.014,683.097 954.573,683.097 955.132,683.097 955.691,683.097 956.251,683.097 956.81,683.097 957.369,683.097 957.928,683.097 958.488,683.097 959.047,683.097 959.606,683.097 960.165,683.097 960.725,683.097 961.284,683.097 961.843,683.097 962.402,683.097 962.962,683.097 963.521,683.097 964.08,683.097 964.639,683.097 965.199,683.097 965.758,683.097 966.317,683.097 966.876,683.097 967.436,683.097 967.995,683.097 968.554,683.097 969.113,683.097 969.673,683.097 970.232,683.097 970.791,683.097 971.35,683.097 971.91,683.097 972.469,683.097 973.028,683.097 973.587,683.097 974.147,683.097 974.706,683.097 975.265,683.097 975.824,683.097 976.384,683.097 976.943,683.097 977.502,683.097 978.061,683.097 978.621,683.097 979.18,683.097 979.739,683.097 980.298,683.097 980.858,683.097 981.417,683.097 981.976,683.097 982.535,683.097 983.095,683.097 983.654,683.097 984.213,683.097 984.772,683.097 985.332,683.097 985.891,683.097 986.45,683.097 987.009,683.097 987.569,683.097 988.128,683.097 988.687,683.097 989.246,683.097 989.806,683.097 990.365,683.097 990.924,683.097 991.483,683.097 992.043,683.097 992.602,683.097 993.161,683.097 993.72,683.097 994.28,683.097 994.839,683.097 995.398,683.097 995.957,683.097 996.517,683.097 997.076,683.097 997.635,683.097 998.194,683.097 998.754,683.097 999.313,683.097 999.872,683.097 1000.43,683.097 1000.99,683.097 1001.55,683.097 1002.11,683.097 1002.67,683.097 1003.23,683.097 1003.79,683.097 1004.35,683.097 1004.91,683.097 1005.46,683.097 1006.02,683.097 1006.58,683.097 1007.14,683.097 1007.7,683.097 1008.26,683.097 1008.82,683.097 1009.38,683.097 1009.94,683.097 1010.5,683.097 1011.06,683.097 1011.62,683.097 1012.18,683.097 1012.73,683.097 1013.29,683.097 1013.85,683.097 1014.41,683.097 1014.97,683.097 1015.53,683.097 1016.09,683.097 1016.65,683.097 1017.21,683.097 1017.77,683.097 1018.33,683.097 1018.89,683.097 1019.45,683.097 1020.01,683.097 1020.56,683.097 1021.12,683.097 1021.68,683.097 1022.24,683.097 1022.8,683.097 1023.36,683.097 1023.92,683.097 1024.48,683.097 1025.04,683.097 1025.6,683.097 1026.16,683.097 1026.72,683.097 1027.28,683.097 1027.83,683.097 1028.39,683.097 1028.95,683.097 1029.51,683.097 1030.07,683.097 1030.63,683.097 1031.19,683.097 1031.75,683.097 1032.31,683.097 1032.87,683.097 1033.43,683.097 1033.99,683.097 1034.55,683.097 1035.1,683.097 1035.66,683.097 1036.22,683.097 1036.78,683.097 1037.34,683.097 1037.9,683.097 1038.46,683.097 1039.02,683.097 1039.58,683.097 1040.14,683.097 1040.7,683.097 1041.26,683.097 1041.82,683.097 1042.38,683.097 1042.93,683.097 1043.49,683.097 1044.05,683.097 1044.61,683.097 1045.17,683.097 1045.73,683.097 1046.29,683.097 1046.85,683.097 1047.41,683.097 1047.97,683.097 1048.53,683.097 1049.09,683.097 1049.65,683.097 1050.2,683.097 1050.76,683.097 1051.32,683.097 1051.88,683.097 1052.44,683.097 1053,683.097 1053.56,683.097 1054.12,683.097 1054.68,683.097 1055.24,683.097 1055.8,683.097 1056.36,683.097 1056.92,683.097 1057.48,683.097 1058.03,683.097 1058.59,683.097 1059.15,683.097 1059.71,683.097 1060.27,683.097 1060.83,683.097 1061.39,683.097 1061.95,683.097 1062.51,683.097 1063.07,683.097 1063.63,683.097 1064.19,683.097 1064.75,683.097 1065.3,683.097 1065.86,683.097 1066.42,683.097 1066.98,683.097 1067.54,683.097 1068.1,683.097 1068.66,683.097 1069.22,683.097 1069.78,683.097 1070.34,683.097 1070.9,683.097 1071.46,683.097 1072.02,683.097 1072.57,683.097 1073.13,683.097 1073.69,683.097 1074.25,683.097 1074.81,683.097 1075.37,683.097 1075.93,683.097 1076.49,683.097 1077.05,683.097 1077.61,683.097 1078.17,683.097 1078.73,683.097 1079.29,683.097 1079.85,683.097 1080.4,683.097 1080.96,683.097 1081.52,683.097 1082.08,683.097 1082.64,683.097 1083.2,683.097 1083.76,683.097 1084.32,683.097 1084.88,683.097 1085.44,683.097 1086,683.097 1086.56,683.097 1087.12,683.097 1087.67,683.097 1088.23,683.097 1088.79,683.097 1089.35,683.097 1089.91,683.097 1090.47,683.097 1091.03,683.097 1091.59,683.097 1092.15,683.097 1092.71,683.097 1093.27,683.097 1093.83,683.097 1094.39,683.097 1094.94,683.097 1095.5,683.097 1096.06,683.097 1096.62,683.097 1097.18,683.097 1097.74,683.097 1098.3,683.097 1098.86,683.097 1099.42,683.097 1099.98,683.097 1100.54,683.097 1101.1,683.097 1101.66,683.097 1102.22,683.097 1102.77,683.097 1103.33,683.097 1103.89,683.097 1104.45,683.097 1105.01,683.097 1105.57,683.097 1106.13,683.097 1106.69,683.097 1107.25,683.097 1107.81,683.097 1108.37,683.097 1108.93,683.097 1109.49,683.097 1110.04,683.097 1110.6,683.097 1111.16,683.097 1111.72,683.097 1112.28,683.097 1112.84,683.097 1113.4,683.097 1113.96,683.097 1114.52,683.097 1115.08,683.097 1115.64,683.097 1116.2,683.097 1116.76,683.097 1117.31,683.097 1117.87,683.097 1118.43,683.097 1118.99,683.097 1119.55,683.097 1120.11,683.097 1120.67,683.097 1121.23,683.097 1121.79,683.097 1122.35,683.097 1122.91,683.097 1123.47,683.097 1124.03,683.097 1124.59,683.097 1125.14,683.097 1125.7,683.097 1126.26,683.097 1126.82,683.097 1127.38,683.097 1127.94,683.097 1128.5,683.097 1129.06,683.097 1129.62,683.097 1130.18,683.097 1130.74,683.097 1131.3,683.097 1131.86,683.097 1132.41,683.097 1132.97,683.097 1133.53,683.097 1134.09,683.097 1134.65,683.097 1135.21,683.097 1135.77,683.097 1136.33,683.097 1136.89,683.097 1137.45,683.097 1138.01,683.097 1138.57,683.097 1139.13,683.097 1139.68,683.097 1140.24,683.097 1140.8,683.097 1141.36,683.097 1141.92,683.097 1142.48,683.097 1143.04,683.097 1143.6,683.097 1144.16,683.097 1144.72,683.097 1145.28,683.097 1145.84,683.097 1146.4,683.097 1146.96,683.097 1147.51,683.097 1148.07,683.097 1148.63,683.097 1149.19,683.097 1149.75,683.097 1150.31,683.097 1150.87,683.097 1151.43,683.097 1151.99,683.097 1152.55,683.097 1153.11,683.097 1153.67,683.097 1154.23,683.097 1154.78,683.097 1155.34,683.097 1155.9,683.097 1156.46,683.097 1157.02,683.097 1157.58,683.097 1158.14,683.097 1158.7,683.097 1159.26,683.097 1159.82,683.097 1160.38,683.097 1160.94,683.097 1161.5,683.097 1162.05,683.097 1162.61,683.097 1163.17,683.097 1163.73,683.097 1164.29,683.097 1164.85,683.097 1165.41,683.097 1165.97,683.097 1166.53,683.097 1167.09,683.097 1167.65,683.097 1168.21,683.097 1168.77,683.097 1169.33,683.097 1169.88,683.097 1170.44,683.097 1171,683.097 1171.56,683.097 1172.12,683.097 1172.68,683.097 1173.24,683.097 1173.8,683.097 1174.36,683.097 1174.92,683.097 1175.48,683.097 1176.04,683.097 1176.6,683.097 1177.15,683.097 1177.71,683.097 1178.27,683.097 1178.83,683.097 1179.39,683.097 1179.95,683.097 1180.51,683.097 1181.07,683.097 1181.63,683.097 1182.19,683.097 1182.75,683.097 1183.31,683.097 1183.87,683.097 1184.43,683.097 1184.98,683.097 1185.54,683.097 1186.1,683.097 1186.66,683.097 1187.22,683.097 1187.78,683.097 1188.34,683.097 1188.9,683.097 1189.46,683.097 1190.02,683.097 1190.58,683.097 1191.14,683.097 1191.7,683.097 1192.25,683.097 1192.81,683.097 1193.37,683.097 1193.93,683.097 1194.49,683.097 1195.05,683.097 1195.61,683.097 1196.17,683.097 1196.73,683.097 1197.29,683.097 1197.85,683.097 1198.41,683.097 1198.97,683.097 1199.52,683.097 1200.08,683.097 1200.64,683.097 1201.2,683.097 1201.76,683.097 1202.32,683.097 1202.88,683.097 1203.44,683.097 1204,683.097 1204.56,683.097 1205.12,683.097 1205.68,683.097 1206.24,683.097 1206.8,683.097 1207.35,683.097 1207.91,683.097 1208.47,683.097 1209.03,683.097 1209.59,683.097 1210.15,683.097 1210.71,683.097 1211.27,683.097 1211.83,683.097 1212.39,683.097 1212.95,683.097 1213.51,683.097 1214.07,683.097 1214.62,683.097 1215.18,683.097 1215.74,683.097 1216.3,683.097 1216.86,683.097 1217.42,683.097 1217.98,683.097 1218.54,683.097 1219.1,683.097 1219.66,683.097 1220.22,683.097 1220.78,683.097 1221.34,683.097 1221.89,683.097 1222.45,683.097 1223.01,683.097 1223.57,683.097 1224.13,683.097 1224.69,683.097 1225.25,683.097 1225.81,683.097 1226.37,683.097 1226.93,683.097 1227.49,683.097 1228.05,683.097 1228.61,683.097 1229.17,683.097 1229.72,683.097 1230.28,683.097 1230.84,683.097 1231.4,683.097 1231.96,683.097 1232.52,683.097 1233.08,683.097 1233.64,683.097 1234.2,683.097 1234.76,683.097 1235.32,683.097 1235.88,683.097 1236.44,683.097 1236.99,683.097 1237.55,683.097 1238.11,683.097 1238.67,683.097 1239.23,683.097 1239.79,683.097 1240.35,683.097 1240.91,683.097 1241.47,683.097 1242.03,683.097 1242.59,683.097 1243.15,683.097 1243.71,683.097 1244.26,683.097 1244.82,683.097 1245.38,683.097 1245.94,683.097 1246.5,683.097 1247.06,683.097 1247.62,683.097 1248.18,683.097 1248.74,683.097 1249.3,683.097 1249.86,683.097 1250.42,683.097 1250.98,683.097 1251.54,683.097 1252.09,683.097 1252.65,683.097 1253.21,683.097 1253.77,683.097 1254.33,683.097 1254.89,683.097 1255.45,683.097 1256.01,683.097 1256.57,683.097 1257.13,683.097 1257.69,683.097 1258.25,683.097 1258.81,683.097 1259.36,683.097 1259.92,683.097 1260.48,683.097 1261.04,683.097 1261.6,683.097 1262.16,683.097 1262.72,683.097 1263.28,683.097 1263.84,683.097 1264.4,683.097 1264.96,683.097 1265.52,683.097 1266.08,683.097 1266.63,683.097 1267.19,683.097 1267.75,683.097 1268.31,683.097 1268.87,683.097 1269.43,683.097 1269.99,683.097 1270.55,683.097 1271.11,683.097 1271.67,683.097 1272.23,683.097 1272.79,683.097 1273.35,683.097 1273.91,683.097 1274.46,683.097 1275.02,683.097 1275.58,683.097 1276.14,683.097 1276.7,683.097 1277.26,683.097 1277.82,683.097 1278.38,683.097 1278.94,683.097 1279.5,683.097 1280.06,683.097 1280.62,683.097 1281.18,683.097 1281.73,683.097 1282.29,683.097 1282.85,683.097 1283.41,683.097 1283.97,683.097 1284.53,683.097 1285.09,683.097 1285.65,683.097 1286.21,683.097 1286.77,683.097 1287.33,683.097 1287.89,683.097 1288.45,683.097 1289,683.097 1289.56,683.097 1290.12,683.097 1290.68,683.097 1291.24,683.097 1291.8,683.097 1292.36,683.097 1292.92,683.097 1293.48,683.097 1294.04,683.097 1294.6,683.097 1295.16,683.097 1295.72,683.097 1296.28,683.097 1296.83,683.097 1297.39,683.097 1297.95,683.097 1298.51,683.097 1299.07,683.097 1299.63,683.097 1300.19,683.097 1300.75,683.097 1301.31,683.097 1301.87,683.097 1302.43,683.097 1302.99,683.097 1303.55,683.097 1304.1,683.097 1304.66,683.097 1305.22,683.097 1305.78,683.097 1306.34,683.097 1306.9,683.097 1307.46,683.097 1308.02,683.097 1308.58,683.097 1309.14,683.097 1309.7,683.097 1310.26,683.097 1310.82,683.097 1311.38,683.097 1311.93,683.097 1312.49,683.097 1313.05,683.097 1313.61,683.097 1314.17,683.097 1314.73,683.097 1315.29,683.097 1315.85,683.097 1316.41,683.097 1316.97,683.097 1317.53,683.097 1318.09,683.097 1318.65,683.097 1319.2,683.097 1319.76,683.097 1320.32,683.097 1320.88,683.097 1321.44,683.097 1322,683.097 1322.56,683.097 1323.12,683.097 1323.68,683.097 1324.24,683.097 1324.8,683.097 1325.36,683.097 1325.92,683.097 1326.47,683.097 1327.03,683.097 1327.59,683.097 1328.15,683.097 1328.71,683.097 1329.27,683.097 1329.83,683.097 1330.39,683.097 1330.95,683.097 1331.51,683.097 1332.07,683.097 1332.63,683.097 1333.19,683.097 1333.75,683.097 1334.3,683.097 1334.86,683.097 1335.42,683.097 1335.98,683.097 1336.54,683.097 1337.1,683.097 1337.66,683.097 1338.22,683.097 1338.78,683.097 1339.34,683.097 1339.9,683.097 1340.46,683.097 1341.02,683.097 1341.57,683.097 1342.13,683.097 1342.69,683.097 1343.25,683.097 1343.81,683.097 1344.37,683.097 1344.93,683.097 1345.49,683.097 1346.05,683.097 1346.61,683.097 1347.17,683.097 1347.73,683.097 1348.29,683.097 1348.84,683.097 1349.4,683.097 1349.96,683.097 1350.52,683.097 1351.08,683.097 1351.64,683.097 1352.2,683.097 1352.76,683.097 1353.32,683.097 1353.88,683.097 1354.44,683.097 1355,683.097 1355.56,683.097 1356.12,683.097 1356.67,683.097 1357.23,683.097 1357.79,683.097 1358.35,683.097 1358.91,683.097 1359.47,683.097 1360.03,683.097 1360.59,683.097 1361.15,683.097 1361.71,683.097 1362.27,683.097 1362.83,683.097 1363.39,683.097 1363.94,683.097 1364.5,683.097 1365.06,683.097 1365.62,683.097 1366.18,683.097 1366.74,683.097 1367.3,683.097 1367.86,683.097 1368.42,683.097 1368.98,683.097 1369.54,683.097 1370.1,683.097 1370.66,683.097 1371.21,683.097 1371.77,683.097 1372.33,683.097 1372.89,683.097 1373.45,683.097 1374.01,683.097 1374.57,683.097 1375.13,683.097 1375.69,683.097 1376.25,683.097 1376.81,683.097 1377.37,683.097 1377.93,683.097 1378.49,683.097 1379.04,683.097 1379.6,683.097 1380.16,683.097 1380.72,683.097 1381.28,683.097 1381.84,683.097 1382.4,683.097 1382.96,683.097 1383.52,683.097 1384.08,683.097 1384.64,683.097 1385.2,683.097 1385.76,683.097 1386.31,683.097 1386.87,683.097 1387.43,683.097 1387.99,683.097 1388.55,683.097 1389.11,683.097 1389.67,683.097 1390.23,683.097 1390.79,683.097 1391.35,683.097 1391.91,683.097 1392.47,683.097 1393.03,683.097 1393.58,683.097 1394.14,683.097 1394.7,683.097 1395.26,683.097 1395.82,683.097 1396.38,683.097 1396.94,683.097 1397.5,683.097 1398.06,683.097 1398.62,683.097 1399.18,683.097 1399.74,683.097 1400.3,683.097 1400.86,683.097 1401.41,683.097 1401.97,683.097 1402.53,683.097 1403.09,683.097 1403.65,683.097 1404.21,683.097 1404.77,683.097 1405.33,683.097 1405.89,683.097 1406.45,683.097 1407.01,683.097 1407.57,683.097 1408.13,683.097 1408.68,683.097 1409.24,683.097 1409.8,683.097 1410.36,683.097 1410.92,683.097 1411.48,683.097 1412.04,683.097 1412.6,683.097 1413.16,683.097 1413.72,683.097 1414.28,683.097 1414.84,683.097 1415.4,683.097 1415.95,683.097 1416.51,683.097 1417.07,683.097 1417.63,683.097 1418.19,683.097 1418.75,683.097 1419.31,683.097 1419.87,683.097 1420.43,683.097 1420.99,683.097 1421.55,683.097 1422.11,683.097 1422.67,683.097 1423.23,683.097 1423.78,683.097 1424.34,683.097 1424.9,683.097 1425.46,683.097 1426.02,683.097 1426.58,683.097 1427.14,683.097 1427.7,683.097 1428.26,683.097 1428.82,683.097 1429.38,683.097 1429.94,683.097 1430.5,683.097 1431.05,683.097 1431.61,683.097 1432.17,683.097 1432.73,683.097 1433.29,683.097 1433.85,683.097 1434.41,683.097 1434.97,683.097 1435.53,683.097 1436.09,683.097 1436.65,683.097 1437.21,683.097 1437.77,683.097 1438.33,683.097 1438.88,683.097 1439.44,683.097 1440,683.097 1440.56,683.097 1441.12,683.097 1441.68,683.097 1442.24,683.097 1442.8,683.097 1443.36,683.097 1443.92,683.097 1444.48,683.097 1445.04,683.097 1445.6,683.097 1446.15,683.097 1446.71,683.097 1447.27,683.097 1447.83,683.097 1448.39,683.097 1448.95,683.097 1449.51,683.097 1450.07,683.097 1450.63,683.097 1451.19,683.097 1451.75,683.097 1452.31,683.097 1452.87,683.097 1453.42,683.097 1453.98,683.097 1454.54,683.097 1455.1,683.097 1455.66,683.097 1456.22,683.097 1456.78,683.097 1457.34,683.097 1457.9,683.097 1458.46,683.097 1459.02,683.097 1459.58,683.097 1460.14,683.097 1460.7,683.097 1461.25,683.097 1461.81,683.097 1462.37,683.097 1462.93,683.097 1463.49,683.097 1464.05,683.097 1464.61,683.097 1465.17,683.097 1465.73,683.097 1466.29,683.097 1466.85,683.097 1467.41,683.097 1467.97,683.097 1468.52,683.097 1469.08,683.097 1469.64,683.097 1470.2,683.097 1470.76,683.097 1471.32,683.097 1471.88,683.097 1472.44,683.097 1473,683.097 1473.56,683.097 1474.12,683.097 1474.68,683.097 1475.24,683.097 1475.79,683.097 1476.35,683.097 1476.91,683.097 1477.47,683.097 1478.03,683.097 1478.59,683.097 1479.15,683.097 1479.71,683.097 1480.27,683.097 1480.83,683.097 1481.39,683.097 1481.95,683.097 1482.51,683.097 1483.07,683.097 1483.62,683.097 1484.18,683.097 1484.74,683.097 1485.3,683.097 1485.86,683.097 1486.42,683.097 1486.98,683.097 1487.54,683.097 1488.1,683.097 1488.66,683.097 1489.22,683.097 1489.78,683.097 1490.34,683.097 1490.89,683.097 1491.45,683.097 1492.01,683.097 1492.57,683.097 1493.13,683.097 1493.69,683.097 1494.25,683.097 1494.81,683.097 1495.37,683.097 1495.93,683.097 1496.49,683.097 1497.05,683.097 1497.61,683.097 1498.16,683.097 1498.72,683.097 1499.28,683.097 1499.84,683.097 1500.4,683.097 1500.96,683.097 1501.52,683.097 1502.08,683.097 1502.64,683.097 1503.2,683.097 1503.76,683.097 1504.32,683.097 1504.88,683.097 1505.44,683.097 1505.99,683.097 1506.55,683.097 1507.11,683.097 1507.67,683.097 1508.23,683.097 1508.79,683.097 1509.35,683.097 1509.91,683.097 1510.47,683.097 1511.03,683.097 1511.59,683.097 1512.15,683.097 1512.71,683.097 1513.26,683.097 1513.82,683.097 1514.38,683.097 1514.94,683.097 1515.5,683.097 1516.06,683.097 1516.62,683.097 1517.18,683.097 1517.74,683.097 1518.3,683.097 1518.86,683.097 1519.42,683.097 1519.98,683.097 1520.53,683.097 1521.09,683.097 1521.65,683.097 1522.21,683.097 1522.77,683.097 1523.33,683.097 1523.89,683.097 1524.45,683.097 1525.01,683.097 1525.57,683.097 1526.13,683.097 1526.69,683.097 1527.25,683.097 1527.81,683.097 1528.36,683.097 1528.92,683.097 1529.48,683.097 1530.04,683.097 1530.6,683.097 1531.16,683.097 1531.72,683.097 1532.28,683.097 1532.84,683.097 1533.4,683.097 1533.96,683.097 1534.52,683.097 1535.08,683.097 1535.63,683.097 1536.19,683.097 1536.75,683.097 1537.31,683.097 1537.87,683.097 1538.43,683.097 1538.99,683.097 1539.55,683.097 1540.11,683.097 1540.67,683.097 1541.23,683.097 1541.79,683.097 1542.35,683.097 1542.9,683.097 1543.46,683.097 1544.02,683.097 1544.58,683.097 1545.14,683.097 1545.7,683.097 1546.26,683.097 1546.82,683.097 1547.38,683.097 1547.94,683.097 1548.5,683.097 1549.06,683.097 1549.62,683.097 1550.18,683.097 1550.73,683.097 1551.29,683.097 1551.85,683.097 1552.41,683.097 1552.97,683.097 1553.53,683.097 1554.09,683.097 1554.65,683.097 1555.21,683.097 1555.77,683.097 1556.33,683.097 1556.89,683.097 1557.45,683.097 1558,683.097 1558.56,683.097 1559.12,683.097 1559.68,683.097 1560.24,683.097 1560.8,683.097 1561.36,683.097 1561.92,683.097 1562.48,683.097 1563.04,683.097 1563.6,683.097 1564.16,683.097 1564.72,683.097 1565.28,683.097 1565.83,683.097 1566.39,683.097 1566.95,683.097 1567.51,683.097 1568.07,683.097 1568.63,683.097 1569.19,683.097 1569.75,683.097 1570.31,683.097 1570.87,683.097 1571.43,683.097 1571.99,683.097 1572.55,683.097 1573.1,683.097 1573.66,683.097 1574.22,683.097 1574.78,683.097 1575.34,683.097 1575.9,683.097 1576.46,683.097 1577.02,683.097 1577.58,683.097 1578.14,683.097 1578.7,683.097 1579.26,683.097 1579.82,683.097 1580.37,683.097 1580.93,683.097 1581.49,683.097 1582.05,683.097 1582.61,683.097 1583.17,683.097 1583.73,683.097 1584.29,683.097 1584.85,683.097 1585.41,683.097 1585.97,683.097 1586.53,683.097 1587.09,683.097 1587.65,683.097 1588.2,683.097 1588.76,683.097 1589.32,683.097 1589.88,683.097 1590.44,683.097 1591,683.097 1591.56,683.097 1592.12,683.097 1592.68,683.097 1593.24,683.097 1593.8,683.097 1594.36,683.097 1594.92,683.097 1595.47,683.097 1596.03,683.097 1596.59,683.097 1597.15,683.097 1597.71,683.097 1598.27,683.097 1598.83,683.097 1599.39,683.097 1599.95,683.097 1600.51,683.097 1601.07,683.097 1601.63,683.097 1602.19,683.097 1602.74,683.097 1603.3,683.097 1603.86,683.097 1604.42,683.097 1604.98,683.097 1605.54,683.097 1606.1,683.097 1606.66,683.097 1607.22,683.097 1607.78,683.097 1608.34,683.097 1608.9,683.097 1609.46,683.097 1610.02,683.097 1610.57,683.097 1611.13,683.097 1611.69,683.097 1612.25,683.097 1612.81,683.097 1613.37,683.097 1613.93,683.097 1614.49,683.097 1615.05,683.097 1615.61,683.097 1616.17,683.097 1616.73,683.097 1617.29,683.097 1617.84,683.097 1618.4,683.097 1618.96,683.097 1619.52,683.097 1620.08,683.097 1620.64,683.097 1621.2,683.097 1621.76,683.097 1622.32,683.097 1622.88,683.097 1623.44,683.097 1624,683.097 1624.56,683.097 1625.11,683.097 1625.67,683.097 1626.23,683.097 1626.79,683.097 1627.35,683.097 1627.91,683.097 1628.47,683.097 1629.03,683.097 1629.59,683.097 1630.15,683.097 1630.71,683.097 1631.27,683.097 1631.83,683.097 1632.39,683.097 1632.94,683.097 1633.5,683.097 1634.06,683.097 1634.62,683.097 1635.18,683.097 1635.74,683.097 1636.3,683.097 1636.86,683.097 1637.42,683.097 1637.98,683.097 1638.54,683.097 1639.1,683.097 1639.66,683.097 1640.21,683.097 1640.77,683.097 1641.33,683.097 1641.89,683.097 1642.45,683.097 1643.01,683.097 1643.57,683.097 1644.13,683.097 1644.69,683.097 1645.25,683.097 1645.81,683.097 1646.37,683.097 1646.93,683.097 1647.48,683.097 1648.04,683.097 1648.6,683.097 1649.16,683.097 1649.72,683.097 1650.28,683.097 1650.84,683.097 1651.4,683.097 1651.96,683.097 1652.52,683.097 1653.08,683.097 1653.64,683.097 1654.2,683.097 1654.76,683.097 1655.31,683.097 1655.87,683.097 1656.43,683.097 1656.99,683.097 1657.55,683.097 1658.11,683.097 1658.67,683.097 1659.23,683.097 1659.79,683.097 1660.35,683.097 1660.91,683.097 1661.47,683.097 1662.03,683.097 1662.58,683.097 1663.14,683.097 1663.7,683.097 1664.26,683.097 1664.82,683.097 1665.38,683.097 1665.94,683.097 1666.5,683.097 1667.06,683.097 1667.62,683.097 1668.18,683.097 1668.74,683.097 1669.3,683.097 1669.85,683.097 1670.41,683.097 1670.97,683.097 1671.53,683.097 1672.09,683.097 1672.65,683.097 1673.21,683.097 1673.77,683.097 1674.33,683.097 1674.89,683.097 1675.45,683.097 1676.01,683.097 1676.57,683.097 1677.13,683.097 1677.68,683.097 1678.24,683.097 1678.8,683.097 1679.36,683.097 1679.92,683.097 1680.48,683.097 1681.04,683.097 1681.6,683.097 1682.16,683.097 1682.72,683.097 1683.28,683.097 1683.84,683.097 1684.4,683.097 1684.95,683.097 1685.51,683.097 1686.07,683.097 1686.63,683.097 1687.19,683.097 1687.75,683.097 1688.31,683.097 1688.87,683.097 1689.43,683.097 1689.99,683.097 1690.55,683.097 1691.11,683.097 1691.67,683.097 1692.23,683.097 1692.78,683.097 1693.34,683.097 1693.9,683.097 1694.46,683.097 1695.02,683.097 1695.58,683.097 1696.14,683.097 1696.7,683.097 1697.26,683.097 1697.82,683.097 1698.38,683.097 1698.94,683.097 1699.5,683.097 1700.05,683.097 1700.61,683.097 1701.17,683.097 1701.73,683.097 1702.29,683.097 1702.85,683.097 1703.41,683.097 1703.97,683.097 1704.53,683.097 1705.09,683.097 1705.65,683.097 1706.21,683.097 1706.77,683.097 1707.32,683.097 1707.88,683.097 1708.44,683.097 1709,683.097 1709.56,683.097 1710.12,683.097 1710.68,683.097 1711.24,683.097 1711.8,683.097 1712.36,683.097 1712.92,683.097 1713.48,683.097 1714.04,683.097 1714.6,683.097 1715.15,683.097 1715.71,683.097 1716.27,683.097 1716.83,683.097 1717.39,683.097 1717.95,683.097 1718.51,683.097 1719.07,683.097 1719.63,683.097 1720.19,683.097 1720.75,683.097 1721.31,683.097 1721.87,683.097 1722.42,683.097 1722.98,683.097 1723.54,683.097 1724.1,683.097 1724.66,683.097 1725.22,683.097 1725.78,683.097 1726.34,683.097 1726.9,683.097 1727.46,683.097 1728.02,683.097 1728.58,683.097 1729.14,683.097 1729.69,683.097 1730.25,683.097 1730.81,683.097 1731.37,683.097 1731.93,683.097 1732.49,683.097 1733.05,683.097 1733.61,683.097 1734.17,683.097 1734.73,683.097 1735.29,683.097 1735.85,683.097 1736.41,683.097 1736.97,683.097 1737.52,683.097 1738.08,683.097 1738.64,683.097 1739.2,683.097 1739.76,683.097 1740.32,683.097 1740.88,683.097 1741.44,683.097 1742,683.097 1742.56,683.097 1743.12,683.097 1743.68,683.097 1744.24,683.097 1744.79,683.097 1745.35,683.097 1745.91,683.097 1746.47,683.097 1747.03,683.097 1747.59,683.097 1748.15,683.097 1748.71,683.097 1749.27,683.097 1749.83,683.097 1750.39,683.097 1750.95,683.097 1751.51,683.097 1752.06,683.097 1752.62,683.097 1753.18,683.097 1753.74,683.097 1754.3,683.097 1754.86,683.097 1755.42,683.097 1755.98,683.097 1756.54,683.097 1757.1,683.097 1757.66,683.097 1758.22,683.097 1758.78,683.097 1759.34,683.097 1759.89,683.097 1760.45,683.097 1761.01,683.097 1761.57,683.097 1762.13,683.097 1762.69,683.097 1763.25,683.097 1763.81,683.097 1764.37,683.097 1764.93,683.097 1765.49,683.097 1766.05,683.097 1766.61,683.097 1767.16,683.097 1767.72,683.097 1768.28,683.097 1768.84,683.097 1769.4,683.097 1769.96,683.097 1770.52,683.097 1771.08,683.097 1771.64,683.097 1772.2,683.097 1772.76,683.097 1773.32,683.097 1773.88,683.097 1774.43,683.097 1774.99,683.097 1775.55,683.097 1776.11,683.097 1776.67,683.097 1777.23,683.097 1777.79,683.097 1778.35,683.097 1778.91,683.097 1779.47,683.097 1780.03,683.097 1780.59,683.097 1781.15,683.097 1781.71,683.097 1782.26,683.097 1782.82,683.097 1783.38,683.097 1783.94,683.097 1784.5,683.097 1785.06,683.097 1785.62,683.097 1786.18,683.097 1786.74,683.097 1787.3,683.097 1787.86,683.097 1788.42,683.097 1788.98,683.097 1789.53,683.097 1790.09,683.097 1790.65,683.097 1791.21,683.097 1791.77,683.097 1792.33,683.097 1792.89,683.097 1793.45,683.097 1794.01,683.097 1794.57,683.097 1795.13,683.097 1795.69,683.097 1796.25,683.097 1796.8,683.097 1797.36,683.097 1797.92,683.097 1798.48,683.097 1799.04,683.097 1799.6,683.097 1800.16,683.097 1800.72,683.097 1801.28,683.097 1801.84,683.097 1802.4,683.097 1802.96,683.097 1803.52,683.097 1804.08,683.097 1804.63,683.097 1805.19,683.097 1805.75,683.097 1806.31,683.097 1806.87,683.097 1807.43,683.097 1807.99,683.097 1808.55,683.097 1809.11,683.097 1809.67,683.097 1810.23,683.097 1810.79,683.097 1811.35,683.097 1811.9,683.097 1812.46,683.097 1813.02,683.097 1813.58,683.097 1814.14,683.097 1814.7,683.097 1815.26,683.097 1815.82,683.097 1816.38,683.097 1816.94,683.097 1817.5,683.097 1818.06,683.097 1818.62,683.097 1819.18,683.097 1819.73,683.097 1820.29,683.097 1820.85,683.097 1821.41,683.097 1821.97,683.097 1822.53,683.097 1823.09,683.097 1823.65,683.097 1824.21,683.097 1824.77,683.097 1825.33,683.097 1825.89,683.097 1826.45,683.097 1827,683.097 1827.56,683.097 1828.12,683.097 1828.68,683.097 1829.24,683.097 1829.8,683.097 1830.36,683.097 1830.92,683.097 1831.48,683.097 1832.04,683.097 1832.6,683.097 1833.16,683.097 1833.72,683.097 1834.27,683.097 1834.83,683.097 1835.39,683.097 1835.95,683.097 1836.51,683.097 1837.07,683.097 1837.63,683.097 1838.19,683.097 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0288147094768165 ± 0.023620103702171345\nProjected Energy: -4.01262865189716 ± (0.005573913513492457, 0.005364068976767555)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.463452</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4177e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0259e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.258e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.343e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.455e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.935e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.363124291613378\n -0.759019192277087\n  0.13584182219622498\n  0.15789998694608087\n  0.8767114411781343\n  1.5305929970973366\n  1.5835732611867357\n  3.07287033032586\n  3.125672653951849\n  4.862107221562171\n  6.260694850380591\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
