var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20956936881461238 ± 0.001341760654172498\n   G2(1) = 0.9182446875918391 ± 0.0006894461050652572\n   G2(2) = 0.9820477067679031 ± 0.0006906042705861501\n   G2(3) = 0.989845842465904 ± 0.0008193467492499635\n   G2(4) = 0.9820477067679031 ± 0.0006906042705861501\n   G2(5) = 0.9182446875918391 ± 0.0006894461050652572\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.032899872653686 ± 0.119382958379616\n   Replica 2: -3.943919784435774 ± 0.13753864393580048\n   Replica 3: -4.038928263092191 ± 0.15349245078027174\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip110\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip111\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip112\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.94 2211.02,1003.94 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.005 2211.02,746.005 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.071 2211.02,488.071 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.137 2211.02,230.137 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.94 423.181,1003.94 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.005 423.181,746.005 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.071 423.181,488.071 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.137 423.181,230.137 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.01 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.01 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.57 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.63 365.205 1275.24 Q362.149 1279.82 356.339 1279.82 Q350.529 1279.82 347.45 1275.24 Q344.395 1270.63 344.395 1261.91 Q344.395 1253.16 347.45 1248.57 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M290.043 1017.28 L306.363 1017.28 L306.363 1021.22 L284.418 1021.22 L284.418 1017.28 Q287.08 1014.53 291.664 1009.9 Q296.27 1005.25 297.451 1003.9 Q299.696 1001.38 300.576 999.645 Q301.478 997.886 301.478 996.196 Q301.478 993.442 299.534 991.705 Q297.613 989.969 294.511 989.969 Q292.312 989.969 289.858 990.733 Q287.427 991.497 284.65 993.048 L284.65 988.326 Q287.474 987.192 289.927 986.613 Q292.381 986.034 294.418 986.034 Q299.789 986.034 302.983 988.719 Q306.177 991.405 306.177 995.895 Q306.177 998.025 305.367 999.946 Q304.58 1001.84 302.474 1004.44 Q301.895 1005.11 298.793 1008.33 Q295.691 1011.52 290.043 1017.28 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M316.224 986.659 L334.58 986.659 L334.58 990.594 L320.506 990.594 L320.506 999.067 Q321.524 998.719 322.543 998.557 Q323.562 998.372 324.58 998.372 Q330.367 998.372 333.747 1001.54 Q337.126 1004.71 337.126 1010.13 Q337.126 1015.71 333.654 1018.81 Q330.182 1021.89 323.862 1021.89 Q321.687 1021.89 319.418 1021.52 Q317.173 1021.15 314.765 1020.41 L314.765 1015.71 Q316.849 1016.84 319.071 1017.4 Q321.293 1017.96 323.77 1017.96 Q327.774 1017.96 330.112 1015.85 Q332.45 1013.74 332.45 1010.13 Q332.45 1006.52 330.112 1004.41 Q327.774 1002.31 323.77 1002.31 Q321.895 1002.31 320.02 1002.72 Q318.168 1003.14 316.224 1004.02 L316.224 986.659 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 989.738 Q352.728 989.738 350.899 993.303 Q349.094 996.844 349.094 1003.97 Q349.094 1011.08 350.899 1014.65 Q352.728 1018.19 356.339 1018.19 Q359.973 1018.19 361.779 1014.65 Q363.608 1011.08 363.608 1003.97 Q363.608 996.844 361.779 993.303 Q359.973 989.738 356.339 989.738 M356.339 986.034 Q362.149 986.034 365.205 990.641 Q368.284 995.224 368.284 1003.97 Q368.284 1012.7 365.205 1017.31 Q362.149 1021.89 356.339 1021.89 Q350.529 1021.89 347.45 1017.31 Q344.395 1012.7 344.395 1003.97 Q344.395 995.224 347.45 990.641 Q350.529 986.034 356.339 986.034 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M286.062 728.725 L304.418 728.725 L304.418 732.66 L290.344 732.66 L290.344 741.132 Q291.363 740.785 292.381 740.623 Q293.4 740.438 294.418 740.438 Q300.205 740.438 303.585 743.609 Q306.964 746.78 306.964 752.197 Q306.964 757.776 303.492 760.878 Q300.02 763.956 293.701 763.956 Q291.525 763.956 289.256 763.586 Q287.011 763.216 284.603 762.475 L284.603 757.776 Q286.687 758.91 288.909 759.466 Q291.131 760.021 293.608 760.021 Q297.613 760.021 299.951 757.915 Q302.288 755.808 302.288 752.197 Q302.288 748.586 299.951 746.48 Q297.613 744.373 293.608 744.373 Q291.733 744.373 289.858 744.79 Q288.006 745.206 286.062 746.086 L286.062 728.725 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M326.177 731.804 Q322.566 731.804 320.737 735.368 Q318.932 738.91 318.932 746.04 Q318.932 753.146 320.737 756.711 Q322.566 760.253 326.177 760.253 Q329.811 760.253 331.617 756.711 Q333.446 753.146 333.446 746.04 Q333.446 738.91 331.617 735.368 Q329.811 731.804 326.177 731.804 M326.177 728.1 Q331.987 728.1 335.043 732.706 Q338.122 737.29 338.122 746.04 Q338.122 754.767 335.043 759.373 Q331.987 763.956 326.177 763.956 Q320.367 763.956 317.288 759.373 Q314.233 754.767 314.233 746.04 Q314.233 737.29 317.288 732.706 Q320.367 728.1 326.177 728.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 731.804 Q352.728 731.804 350.899 735.368 Q349.094 738.91 349.094 746.04 Q349.094 753.146 350.899 756.711 Q352.728 760.253 356.339 760.253 Q359.973 760.253 361.779 756.711 Q363.608 753.146 363.608 746.04 Q363.608 738.91 361.779 735.368 Q359.973 731.804 356.339 731.804 M356.339 728.1 Q362.149 728.1 365.205 732.706 Q368.284 737.29 368.284 746.04 Q368.284 754.767 365.205 759.373 Q362.149 763.956 356.339 763.956 Q350.529 763.956 347.45 759.373 Q344.395 754.767 344.395 746.04 Q344.395 737.29 347.45 732.706 Q350.529 728.1 356.339 728.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M284.835 470.791 L307.057 470.791 L307.057 472.781 L294.511 505.351 L289.627 505.351 L301.432 474.726 L284.835 474.726 L284.835 470.791 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M316.224 470.791 L334.58 470.791 L334.58 474.726 L320.506 474.726 L320.506 483.198 Q321.524 482.851 322.543 482.689 Q323.562 482.504 324.58 482.504 Q330.367 482.504 333.747 485.675 Q337.126 488.846 337.126 494.263 Q337.126 499.842 333.654 502.943 Q330.182 506.022 323.862 506.022 Q321.687 506.022 319.418 505.652 Q317.173 505.281 314.765 504.541 L314.765 499.842 Q316.849 500.976 319.071 501.531 Q321.293 502.087 323.77 502.087 Q327.774 502.087 330.112 499.98 Q332.45 497.874 332.45 494.263 Q332.45 490.652 330.112 488.545 Q327.774 486.439 323.77 486.439 Q321.895 486.439 320.02 486.855 Q318.168 487.272 316.224 488.152 L316.224 470.791 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 473.869 Q352.728 473.869 350.899 477.434 Q349.094 480.976 349.094 488.105 Q349.094 495.212 350.899 498.777 Q352.728 502.318 356.339 502.318 Q359.973 502.318 361.779 498.777 Q363.608 495.212 363.608 488.105 Q363.608 480.976 361.779 477.434 Q359.973 473.869 356.339 473.869 M356.339 470.166 Q362.149 470.166 365.205 474.772 Q368.284 479.356 368.284 488.105 Q368.284 496.832 365.205 501.439 Q362.149 506.022 356.339 506.022 Q350.529 506.022 347.45 501.439 Q344.395 496.832 344.395 488.105 Q344.395 479.356 347.45 474.772 Q350.529 470.166 356.339 470.166 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M256.664 243.481 L264.303 243.481 L264.303 217.116 L255.992 218.782 L255.992 214.523 L264.256 212.857 L268.932 212.857 L268.932 243.481 L276.571 243.481 L276.571 247.417 L256.664 247.417 L256.664 243.481 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M296.015 215.935 Q292.404 215.935 290.576 219.5 Q288.77 223.042 288.77 230.171 Q288.77 237.278 290.576 240.842 Q292.404 244.384 296.015 244.384 Q299.65 244.384 301.455 240.842 Q303.284 237.278 303.284 230.171 Q303.284 223.042 301.455 219.5 Q299.65 215.935 296.015 215.935 M296.015 212.232 Q301.826 212.232 304.881 216.838 Q307.96 221.421 307.96 230.171 Q307.96 238.898 304.881 243.505 Q301.826 248.088 296.015 248.088 Q290.205 248.088 287.127 243.505 Q284.071 238.898 284.071 230.171 Q284.071 221.421 287.127 216.838 Q290.205 212.232 296.015 212.232 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M326.177 215.935 Q322.566 215.935 320.737 219.5 Q318.932 223.042 318.932 230.171 Q318.932 237.278 320.737 240.842 Q322.566 244.384 326.177 244.384 Q329.811 244.384 331.617 240.842 Q333.446 237.278 333.446 230.171 Q333.446 223.042 331.617 219.5 Q329.811 215.935 326.177 215.935 M326.177 212.232 Q331.987 212.232 335.043 216.838 Q338.122 221.421 338.122 230.171 Q338.122 238.898 335.043 243.505 Q331.987 248.088 326.177 248.088 Q320.367 248.088 317.288 243.505 Q314.233 238.898 314.233 230.171 Q314.233 221.421 317.288 216.838 Q320.367 212.232 326.177 212.232 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 215.935 Q352.728 215.935 350.899 219.5 Q349.094 223.042 349.094 230.171 Q349.094 237.278 350.899 240.842 Q352.728 244.384 356.339 244.384 Q359.973 244.384 361.779 240.842 Q363.608 237.278 363.608 230.171 Q363.608 223.042 361.779 219.5 Q359.973 215.935 356.339 215.935 M356.339 212.232 Q362.149 212.232 365.205 216.838 Q368.284 221.421 368.284 230.171 Q368.284 238.898 365.205 243.505 Q362.149 248.088 356.339 248.088 Q350.529 248.088 347.45 243.505 Q344.395 238.898 344.395 230.171 Q344.395 221.421 347.45 216.838 Q350.529 212.232 356.339 212.232 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip112)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.137 4017.76,230.137 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.52 455.986,1250.53 456.554,1250.44 457.123,1250.26 457.691,1250.04 458.259,1249.75 458.828,1249.39 459.396,1248.92 459.964,1248.37 460.533,1247.81 461.101,1247.15 461.669,1245.38 462.238,1244.57 462.806,1243.69 463.375,1242.71 463.943,1241.65 464.511,1239.45 465.08,1238.19 465.648,1236.8 466.216,1235.31 466.785,1233.69 467.353,1231.96 467.921,1230.09 468.49,1227.04 469.058,1223.84 469.626,1220.49 470.195,1218.01 470.763,1215.4 471.331,1212.58 471.9,1208.56 472.468,1204.33 473.036,1200.95 473.605,1196.34 474.173,1191.5 474.741,1187.41 475.31,1183.16 475.878,1178.68 476.446,1173.01 477.015,1168 477.583,1161.85 478.152,1154.47 478.72,1148.88 479.288,1142.06 479.857,1136.11 480.425,1129.96 480.993,1122.56 481.562,1115.97 482.13,1108.11 482.698,1100.16 483.267,1091 483.835,1083.74 484.403,1075.31 484.972,1067.59 485.54,1059.73 486.108,1050.72 486.677,1039.5 487.245,1031.08 487.813,1021.53 488.382,1012.76 488.95,1003.94 489.518,994.908 490.087,984.727 490.655,974.203 491.224,961.677 491.792,951.223 492.36,941.625 492.929,931.981 493.497,922.205 494.065,910.207 494.634,900.329 495.202,890.333 495.77,879.23 496.339,869.14 496.907,856.005 497.475,843.839 498.044,831.896 498.612,819.89 499.18,806.993 499.749,797.334 500.317,785.761 500.885,774.187 501.454,764.77 502.022,753.288 502.59,737.797 503.159,726.857 503.727,716.942 504.295,706.135 504.864,697.48 505.432,688.758 506.001,679.091 506.569,669.688 507.137,661.406 507.706,652.15 508.274,644.072 508.842,634.803 509.411,622.737 509.979,613.152 510.547,602.566 511.116,594.317 511.684,584.166 512.252,576.276 512.821,568.232 513.389,559.38 513.957,550.678 514.526,543.213 515.094,535.78 515.662,527.565 516.231,521.679 516.799,510.635 517.367,501.87 517.936,495.621 518.504,487.452 519.072,482.43 519.641,475.233 520.209,470.43 520.778,465.827 521.346,460.131 521.914,455.552 522.483,448.987 523.051,442.931 523.619,439.004 524.188,434.916 524.756,430.903 525.324,425.958 525.893,422.417 526.461,417.577 527.029,412.85 527.598,408.104 528.166,405.74 528.734,403.29 529.303,397.441 529.871,393.927 530.439,386.267 531.008,381.247 531.576,378.503 532.144,373.86 532.713,372.255 533.281,367.422 533.85,362.705 534.418,359.194 534.986,356.663 535.555,353.189 536.123,348.829 536.691,344.621 537.26,341.58 537.828,338.903 538.396,336.449 538.965,333.848 539.533,328.124 540.101,327.101 540.67,324.858 541.238,322.533 541.806,320.204 542.375,319.203 542.943,315.984 543.511,314.154 544.08,311.286 544.648,309.28 545.216,309.612 545.785,307.71 546.353,306.817 546.921,303.885 547.49,302.984 548.058,302.089 548.627,302.336 549.195,300.294 549.763,299.453 550.332,299.522 550.9,299.609 551.468,297.462 552.037,295.299 552.605,292.501 553.173,288.628 553.742,287.277 554.31,286.647 554.878,281.842 555.447,282.872 556.015,280.555 556.583,280.491 557.152,280.344 557.72,278.989 558.288,278.608 558.857,278.128 559.425,276.807 559.993,276.572 560.562,276.215 561.13,275.959 561.698,272.312 562.267,271.204 562.835,269.02 563.404,271.007 563.972,270.866 564.54,267.588 565.109,266.388 565.677,265.151 566.245,265.159 566.814,265.474 567.382,266.509 567.95,263.245 568.519,262.178 569.087,259.196 569.655,258.349 570.224,256.684 570.792,255.975 571.36,255.199 571.929,255 572.497,253.408 573.065,254.944 573.634,252.399 574.202,254.111 574.77,251.681 575.339,249.272 575.907,246.977 576.476,249.819 577.044,249.699 577.612,250.417 578.181,250.061 578.749,253.732 579.317,255.168 579.886,256.289 580.454,256.481 581.022,258.58 581.591,257.346 582.159,256.246 582.727,256.348 583.296,257.364 583.864,255.32 584.432,254.383 585.001,254.787 585.569,254.696 586.137,255.736 586.706,255.62 587.274,255.43 587.842,254.403 588.411,252.355 588.979,252.298 589.547,251.263 590.116,251.295 590.684,253.363 591.253,254.111 591.821,252.993 592.389,254.011 592.958,255.082 593.526,257.74 594.094,258.175 594.663,257.397 595.231,254.871 595.799,255.516 596.368,255.199 596.936,252.519 597.504,251.183 598.073,250.033 598.641,249.608 599.209,245.123 599.778,244.292 600.346,243.419 600.914,244.414 601.483,243.344 602.051,244.31 602.619,244.456 603.188,244.644 603.756,245.509 604.325,245.444 604.893,242.491 605.461,244.662 606.03,244.732 606.598,243.663 607.166,241.8 607.735,241.984 608.303,241.353 608.871,241.554 609.44,240.761 610.008,240.984 610.576,244.047 611.145,244.962 611.713,243.897 612.281,243.948 612.85,245.93 613.418,245.867 613.986,247.694 614.555,246.208 615.123,245.877 615.691,245.595 616.26,244.489 616.828,243.246 617.396,240.788 617.965,241.896 618.533,240.757 619.102,244.029 619.67,243.593 620.238,242.326 620.807,241.124 621.375,241.07 621.943,238.1 622.512,238.435 623.08,237.459 623.648,234.619 624.217,235.137 624.785,237.443 625.353,236.583 625.922,238.85 626.49,237.959 627.058,238.068 627.627,240.238 628.195,241.246 628.763,241.052 629.332,239.859 629.9,238.654 630.468,240.803 631.037,241.72 631.605,241.416 632.173,239.477 632.742,240.401 633.31,240.425 633.879,242.374 634.447,239.999 635.015,239.767 635.584,238.665 636.152,237.783 636.72,240.803 637.289,240.708 637.857,238.632 638.425,237.695 638.994,236.569 639.562,236.785 640.13,235.847 640.699,234.141 641.267,232.125 641.835,232.353 642.404,232.646 642.972,232.86 643.54,232.164 644.109,234.508 644.677,234.908 645.245,236.173 645.814,233.435 646.382,234.799 646.951,235.091 647.519,233.176 648.087,233.522 648.656,231.5 649.224,231.732 649.792,230.071 650.361,230.702 650.929,229.155 651.497,228.565 652.066,227.058 652.634,228.704 653.202,228.133 653.771,229.851 654.339,230.293 654.907,231.817 655.476,232.273 656.044,233.864 656.612,231.972 657.181,232.135 657.749,230.568 658.317,229.988 658.886,228.588 659.454,230.38 660.022,229.005 660.591,229.736 661.159,232.24 661.728,232.517 662.296,236.273 662.864,233.314 663.433,231.636 664.001,232.814 664.569,229.065 665.138,228.521 665.706,230.362 666.274,231.043 666.843,232.793 667.411,232.074 667.979,233.484 668.548,233.86 669.116,234.502 669.684,235.82 670.253,236.128 670.821,239.435 671.389,239.496 671.958,239.365 672.526,239.237 673.094,241.234 673.663,241.155 674.231,243.125 674.799,242.812 675.368,242.654 675.936,243.262 676.505,241.904 677.073,243.759 677.641,241.974 678.21,240.384 678.778,240.949 679.346,240.566 679.915,242.335 680.483,240.913 681.051,240.475 681.62,241.308 682.188,238.7 682.756,238.261 683.325,237.967 683.893,236.724 684.461,237.59 685.03,237.375 685.598,237.219 686.166,238.024 686.735,237.739 687.303,241.784 687.871,240.285 688.44,240.978 689.008,240.712 689.577,241.307 690.145,242.683 690.713,241.007 691.282,241.375 691.85,239.896 692.418,240.266 692.987,238.714 693.555,238.247 694.123,236.832 694.692,237.281 695.26,239.136 695.828,236.6 696.397,234.158 696.965,236.115 697.533,233.78 698.102,234.755 698.67,234.6 699.238,234.689 699.807,234.404 700.375,233.221 700.943,232.125 701.512,230.888 702.08,230.995 702.648,230.78 703.217,230.826 703.785,231.869 704.354,233.959 704.922,233.733 705.49,233.674 706.059,234.404 706.627,234.345 707.195,233.976 707.764,231.628 708.332,231.268 708.9,231.061 709.469,230.181 710.037,231.571 710.605,230.454 711.174,230.146 711.742,230.391 712.31,230.388 712.879,226.448 713.447,227.839 714.015,228.901 714.584,226.152 715.152,227.581 715.72,227.804 716.289,230.182 716.857,229.408 717.425,228.708 717.994,230.783 718.562,228.879 719.131,228.004 719.699,225.321 720.267,225.844 720.836,226.354 721.404,225.914 721.972,225.59 722.541,226.012 723.109,225.475 723.677,225.099 724.246,223.786 724.814,225.435 725.382,226.177 725.951,226.501 726.519,228.127 727.087,228.8 727.656,229.422 728.224,227.627 728.792,227.184 729.361,225.614 729.929,230.174 730.497,230.341 731.066,230.463 731.634,229.767 732.203,231.911 732.771,231.898 733.339,235.203 733.908,234.147 734.476,234.135 735.044,235.162 735.613,235.045 736.181,236.077 736.749,235.828 737.318,233.514 737.886,232.616 738.454,234.732 739.023,230.507 739.591,227.502 740.159,226.858 740.728,225.164 741.296,226.727 741.864,227.119 742.433,231.739 743.001,226.724 743.569,227.039 744.138,228.634 744.706,230.193 745.274,229.307 745.843,229.816 746.411,229.192 746.98,227.52 747.548,228.71 748.116,232.199 748.685,235.419 749.253,234.258 749.821,235.432 750.39,235.381 750.958,237.259 751.526,238.023 752.095,238.686 752.663,236.223 753.231,238.045 753.8,241.835 754.368,242.169 754.936,242.646 755.505,242.155 756.073,239.468 756.641,236.933 757.21,235.696 757.778,236.329 758.346,235.096 758.915,236.98 759.483,235.488 760.052,237.047 760.62,235.634 761.188,234.512 761.757,233.46 762.325,231.543 762.893,231.615 763.462,229.675 764.03,230.95 764.598,231.091 765.167,231.997 765.735,231.985 766.303,232.32 766.872,232.385 767.44,232.332 768.008,233.246 768.577,231.196 769.145,230.193 769.713,231.408 770.282,232.609 770.85,231.648 771.418,232.698 771.987,232.578 772.555,231.578 773.123,232.679 773.692,233.761 774.26,233.874 774.829,232.809 775.397,235.896 775.965,234.475 776.534,234.088 777.102,235.04 777.67,233.726 778.239,233.64 778.807,232.246 779.375,233.297 779.944,234.035 780.512,233.682 781.08,235.676 781.649,236.397 782.217,236.005 782.785,236.735 783.354,235.401 783.922,235.102 784.49,234.817 785.059,234.524 785.627,232.302 786.195,232.141 786.764,231.963 787.332,230.629 787.9,229.301 788.469,231.551 789.037,229.514 789.606,228.584 790.174,228.776 790.742,230.004 791.311,231.321 791.879,231.3 792.447,230.955 793.016,232.689 793.584,233.552 794.152,233.347 794.721,233.212 795.289,231.847 795.857,226.817 796.426,226.054 796.994,227.354 797.562,227.725 798.131,227.839 798.699,230.349 799.267,229.376 799.836,227.627 800.404,226.821 800.972,226.963 801.541,228.452 802.109,227.663 802.678,229.016 803.246,228.148 803.814,228.274 804.383,229.392 804.951,229.681 805.519,229.833 806.088,231.926 806.656,230.849 807.224,229.923 807.793,228.89 808.361,229.042 808.929,226.035 809.498,228.327 810.066,227.513 810.634,227.743 811.203,226.861 811.771,227.352 812.339,230.84 812.908,230.724 813.476,228.677 814.044,227.763 814.613,227.104 815.181,228.502 815.749,228.839 816.318,230.089 816.886,229.076 817.455,231.363 818.023,230.399 818.591,230.599 819.16,229.574 819.728,227.63 820.296,227.898 820.865,227.245 821.433,226.673 822.001,230.174 822.57,227.313 823.138,228.86 823.706,227.842 824.275,227.05 824.843,225.296 825.411,222.728 825.98,222.505 826.548,224.245 827.116,224.812 827.685,226.351 828.253,226.902 828.821,227.429 829.39,230.011 829.958,230.198 830.526,230.168 831.095,231.329 831.663,230.583 832.232,228.827 832.8,228.033 833.368,227.041 833.937,227.631 834.505,229.105 835.073,231.478 835.642,231.475 836.21,229.608 836.778,230.845 837.347,229.881 837.915,231.187 838.483,232.208 839.052,234.172 839.62,233.067 840.188,234.107 840.757,233.185 841.325,234.424 841.893,230.227 842.462,228.067 843.03,227.465 843.598,228.773 844.167,228.948 844.735,230.169 845.304,231.513 845.872,234.666 846.44,233.372 847.009,233.226 847.577,233.176 848.145,234.111 848.714,233.964 849.282,232.994 849.85,232.868 850.419,231.667 850.987,230.822 851.555,229.648 852.124,228.8 852.692,230.062 853.26,230.112 853.829,231.194 854.397,232.069 854.965,232.098 855.534,230.977 856.102,231.028 856.67,233.129 857.239,232.841 857.807,233.96 858.375,232.951 858.944,232.89 859.512,233.685 860.081,231.377 860.649,229.4 861.217,231.505 861.786,230.692 862.354,230.866 862.922,229.865 863.491,228.059 864.059,230.403 864.627,231.474 865.196,231.413 865.764,233.458 866.332,235.443 866.901,237.303 867.469,235.942 868.037,231.437 868.606,232.494 869.174,233.521 869.742,232.453 870.311,231.393 870.879,231.469 871.447,228.351 872.016,227.697 872.584,227.766 873.152,229.12 873.721,229.169 874.289,230.407 874.858,230.509 875.426,231.659 875.994,232.426 876.563,230.435 877.131,231.533 877.699,232.604 878.268,232.722 878.836,233.847 879.404,234.658 879.973,234.339 880.541,235.352 881.109,232.821 881.678,232.842 882.246,233.629 882.814,230.356 883.383,230.347 883.951,231.471 884.519,231.355 885.088,231.404 885.656,230.27 886.224,229.122 886.793,230.312 887.361,227.144 887.93,226.453 888.498,226.984 889.066,226.119 889.635,225.391 890.203,224.782 890.771,224.3 891.34,225.018 891.908,224.541 892.476,225.213 893.045,224.881 893.613,225.473 894.181,224.916 894.75,226.514 895.318,229.181 895.886,229.351 896.455,226.482 897.023,227.82 897.591,228.159 898.16,226.431 898.728,227.963 899.296,230.477 899.865,229.469 900.433,229.863 901.001,227.976 901.57,230.988 902.138,232.118 902.707,233.265 903.275,234.301 903.843,231.959 904.412,232.936 904.98,233.922 905.548,235.836 906.117,237.615 906.685,236.214 907.253,236.003 907.822,237.887 908.39,233.368 908.958,234.425 909.527,235.31 910.095,235.108 910.663,236.018 911.232,235.656 911.8,234.291 912.368,234.254 912.937,234.037 913.505,233.915 914.073,231.581 914.642,231.613 915.21,229.442 915.779,230.543 916.347,230.577 916.915,228.676 917.484,227.812 918.052,230.126 918.62,230.251 919.189,230.467 919.757,230.324 920.325,231.366 920.894,230.358 921.462,228.535 922.03,228.711 922.599,228.973 923.167,228.953 923.735,228.949 924.304,231.392 924.872,230.389 925.44,227.438 926.009,226.7 926.577,228.989 927.145,231.155 927.714,231.159 928.282,233.348 928.85,234.228 929.419,233.713 929.987,232.512 930.556,232.376 931.124,234.266 931.692,234.991 932.261,233.713 932.829,234.334 933.397,234.99 933.966,235.823 934.534,234.429 935.102,234.197 935.671,233.658 936.239,234.515 936.807,233.227 937.376,231.018 937.944,230.966 938.512,230.934 939.081,228.868 939.649,232.324 940.217,231.159 940.786,227.622 941.354,230.968 941.922,233.877 942.491,234.823 943.059,232.417 943.627,232.282 944.196,233.063 944.764,231.839 945.333,230.575 945.901,230.434 946.469,230.446 947.038,229.363 947.606,229.498 948.174,230.795 948.743,232.838 949.311,232.721 949.879,233.623 950.448,234.662 951.016,233.271 951.584,234.047 952.153,234.942 952.721,234.494 953.289,234.021 953.858,233.854 954.426,235.454 954.994,235.235 955.563,232.801 956.131,231.703 956.699,228.496 957.268,228.653 957.836,228.644 958.405,229.812 958.973,228.792 959.541,227.634 960.11,229.725 960.678,230.995 961.246,230.965 961.815,232 962.383,230.895 962.951,231.762 963.52,230.66 964.088,230.483 964.656,229.338 965.225,229.414 965.793,230.375 966.361,230.569 966.93,229.315 967.498,230.374 968.066,231.399 968.635,232.359 969.203,232.22 969.771,233.103 970.34,232.705 970.908,233.142 971.476,233.971 972.045,233.592 972.613,232.341 973.182,232.246 973.75,230.073 974.318,230.056 974.887,229.94 975.455,227.911 976.023,228.032 976.592,229.311 977.16,229.33 977.728,229.527 978.297,230.511 978.865,231.334 979.433,231.205 980.002,231.24 980.57,230.954 981.138,229.687 981.707,229.697 982.275,230.671 982.843,230.616 983.412,229.277 983.98,229.191 984.548,225.988 985.117,227.073 985.685,231.338 986.253,229.187 986.822,227.121 987.39,227.408 987.959,228.588 988.527,228.621 989.095,227.805 989.664,228.87 990.232,229.935 990.8,229.915 991.369,229.939 991.937,228.884 992.505,227.969 993.074,229.007 993.642,229.036 994.21,230.163 994.779,229.13 995.347,231.464 995.915,231.419 996.484,229.49 997.052,230.546 997.62,231.609 998.189,231.369 998.757,231.021 999.325,230.737 999.894,233.714 1000.46,235.579 1001.03,234.061 1001.6,233.691 1002.17,231.31 1002.74,231.27 1003.3,231.149 1003.87,230.939 1004.44,227.885 1005.01,226.959 1005.58,226.091 1006.15,226.407 1006.71,224.547 1007.28,224.849 1007.85,225.033 1008.42,225.346 1008.99,224.573 1009.56,224.883 1010.12,224.28 1010.69,227.792 1011.26,229.001 1011.83,228.867 1012.4,230.95 1012.97,228.953 1013.53,227.974 1014.1,227.062 1014.67,227.441 1015.24,229.863 1015.81,231.009 1016.38,230.02 1016.94,229.301 1017.51,231.449 1018.08,230.391 1018.65,231.482 1019.22,231.419 1019.79,230.269 1020.35,230.105 1020.92,229.069 1021.49,231.301 1022.06,234.331 1022.63,234.489 1023.2,232.155 1023.76,232.24 1024.33,232.137 1024.9,232.976 1025.47,232.947 1026.04,233.838 1026.61,234.467 1027.17,234.233 1027.74,234.952 1028.31,235.562 1028.88,235.08 1029.45,234.603 1030.02,234.376 1030.58,232.99 1031.15,231.819 1031.72,230.524 1032.29,231.348 1032.86,230.3 1033.43,230.12 1033.99,229.993 1034.56,228.891 1035.13,228.873 1035.7,228.836 1036.27,229.993 1036.84,228.921 1037.4,228.957 1037.97,232.043 1038.54,233.955 1039.11,232.469 1039.68,232.57 1040.25,232.479 1040.81,233.473 1041.38,231.225 1041.95,230.075 1042.52,231.121 1043.09,232.095 1043.66,231.881 1044.22,233.843 1044.79,232.618 1045.36,232.299 1045.93,231.076 1046.5,228.978 1047.07,229.041 1047.63,227.938 1048.2,228.019 1048.77,227.994 1049.34,228.186 1049.91,228.481 1050.48,228.633 1051.05,226.52 1051.61,225.66 1052.18,228.137 1052.75,227.349 1053.32,228.689 1053.89,228.844 1054.46,230.057 1055.02,226.901 1055.59,227.142 1056.16,228.261 1056.73,226.375 1057.3,225.738 1057.87,226.132 1058.43,226.532 1059,224.542 1059.57,222.653 1060.14,219.997 1060.71,220.779 1061.28,221.751 1061.84,223.356 1062.41,224.758 1062.98,226.224 1063.55,226.799 1064.12,225.218 1064.69,223.585 1065.25,222.15 1065.82,222.866 1066.39,223.484 1066.96,225.084 1067.53,225.586 1068.1,225.824 1068.66,224.907 1069.23,224.32 1069.8,225.957 1070.37,226.354 1070.94,226.756 1071.51,229.35 1072.07,230.458 1072.64,231.464 1073.21,232.429 1073.78,231.423 1074.35,232.297 1074.92,233.466 1075.48,236.423 1076.05,237.152 1076.62,236.743 1077.19,237.362 1077.76,236.829 1078.33,237.555 1078.89,237.117 1079.46,237.663 1080.03,237.377 1080.6,236.193 1081.17,234.903 1081.74,235.542 1082.3,236.309 1082.87,236.907 1083.44,236.359 1084.01,236.988 1084.58,236.562 1085.15,236.11 1085.71,236.499 1086.28,235.168 1086.85,235.83 1087.42,234.575 1087.99,231.228 1088.56,234.185 1089.12,234.093 1089.69,234.931 1090.26,235.651 1090.83,236.168 1091.4,235.794 1091.97,232.346 1092.53,229.839 1093.1,229.81 1093.67,230.794 1094.24,229.689 1094.81,228.683 1095.38,227.63 1095.94,228.691 1096.51,228.772 1097.08,229.887 1097.65,229.879 1098.22,227.635 1098.79,226.752 1099.35,227.048 1099.92,226.468 1100.49,225.424 1101.06,222.639 1101.63,224.219 1102.2,226.642 1102.76,226.909 1103.33,228.243 1103.9,229.477 1104.47,231.697 1105.04,231.726 1105.61,231.74 1106.17,232.552 1106.74,231.308 1107.31,229.13 1107.88,229.337 1108.45,230.344 1109.02,229.574 1109.58,230.623 1110.15,230.443 1110.72,228.26 1111.29,227.536 1111.86,224.605 1112.43,225.228 1112.99,222.776 1113.56,222.439 1114.13,224.158 1114.7,224.549 1115.27,226.924 1115.84,229.136 1116.4,229.254 1116.97,228.15 1117.54,229.222 1118.11,231.467 1118.68,230.267 1119.25,228.217 1119.81,229.571 1120.38,229.669 1120.95,227.754 1121.52,230.051 1122.09,227.908 1122.66,229.036 1123.23,230.272 1123.79,231.069 1124.36,232.181 1124.93,233.23 1125.5,232.257 1126.07,232.319 1126.64,233.095 1127.2,232.694 1127.77,233.687 1128.34,234.503 1128.91,234.035 1129.48,233.634 1130.05,234.331 1130.61,232.91 1131.18,231.746 1131.75,232.736 1132.32,232.711 1132.89,232.501 1133.46,231.219 1134.02,231.241 1134.59,232.238 1135.16,232.313 1135.73,232.02 1136.3,229.933 1136.87,232.044 1137.43,231.13 1138,230.201 1138.57,229.201 1139.14,232.31 1139.71,236.22 1140.28,235.879 1140.84,233.403 1141.41,233.347 1141.98,234.099 1142.55,233.829 1143.12,233.683 1143.69,231.327 1144.25,232.061 1144.82,229.716 1145.39,229.75 1145.96,230.625 1146.53,230.583 1147.1,231.389 1147.66,231.293 1148.23,231.893 1148.8,231.703 1149.37,232.436 1149.94,232.32 1150.51,231.951 1151.07,233.692 1151.64,231.529 1152.21,232.586 1152.78,233.426 1153.35,232.183 1153.92,230.872 1154.48,231.804 1155.05,232.663 1155.62,231.145 1156.19,231.106 1156.76,231.965 1157.33,229.934 1157.89,226.827 1158.46,226.026 1159.03,227.214 1159.6,227.48 1160.17,226.749 1160.74,224.809 1161.3,225.036 1161.87,223.355 1162.44,222.906 1163.01,223.459 1163.58,225.194 1164.15,226.317 1164.71,226.56 1165.28,226.855 1165.85,228.194 1166.42,231.51 1166.99,231.518 1167.56,232.587 1168.12,231.613 1168.69,232.594 1169.26,232.593 1169.83,231.525 1170.4,230.405 1170.97,230.457 1171.53,231.509 1172.1,231.341 1172.67,231.142 1173.24,232.859 1173.81,233.687 1174.38,232.548 1174.94,231.41 1175.51,231.389 1176.08,229.233 1176.65,230.339 1177.22,231.348 1177.79,232.077 1178.35,230.768 1178.92,227.714 1179.49,228.868 1180.06,228.804 1180.63,231.152 1181.2,229.92 1181.76,230.047 1182.33,235.369 1182.9,236.85 1183.47,235.361 1184.04,233.963 1184.61,233.613 1185.17,232.164 1185.74,231.122 1186.31,232.09 1186.88,233.028 1187.45,230.753 1188.02,228.725 1188.58,230.761 1189.15,232.609 1189.72,231.337 1190.29,231.153 1190.86,232.869 1191.43,231.57 1192,229.406 1192.56,231.337 1193.13,230.037 1193.7,227.913 1194.27,227.846 1194.84,228.08 1195.41,227.946 1195.97,229.022 1196.54,230.093 1197.11,230.149 1197.68,231.051 1198.25,229.722 1198.82,227.649 1199.38,228.905 1199.95,229.094 1200.52,227.027 1201.09,227.202 1201.66,226.301 1202.23,227.403 1202.79,231.644 1203.36,231.45 1203.93,230.173 1204.5,231.099 1205.07,230.749 1205.64,230.52 1206.2,229.433 1206.77,229.352 1207.34,228.528 1207.91,229.775 1208.48,230.527 1209.05,230.514 1209.61,230.429 1210.18,229.431 1210.75,227.322 1211.32,229.564 1211.89,229.446 1212.46,228.377 1213.02,229.579 1213.59,228.513 1214.16,226.633 1214.73,226.734 1215.3,227.952 1215.87,228.11 1216.43,230.131 1217,230.213 1217.57,228.105 1218.14,229.1 1218.71,227.033 1219.28,223.076 1219.84,223.47 1220.41,222.772 1220.98,223.103 1221.55,222.752 1222.12,225.503 1222.69,226.085 1223.25,226.383 1223.82,225.504 1224.39,224.797 1224.96,223.202 1225.53,223.885 1226.1,226.496 1226.66,227.06 1227.23,226.474 1227.8,226.776 1228.37,225.853 1228.94,226.225 1229.51,227.599 1230.07,227.013 1230.64,229.364 1231.21,228.577 1231.78,227.799 1232.35,227.085 1232.92,227.168 1233.48,229.425 1234.05,230.631 1234.62,230.955 1235.19,230.044 1235.76,230.189 1236.33,231.374 1236.89,230.4 1237.46,227.52 1238.03,227.793 1238.6,226.217 1239.17,225.523 1239.74,227.253 1240.3,228.728 1240.87,229.069 1241.44,228.377 1242.01,231.64 1242.58,233.728 1243.15,234.565 1243.71,232.289 1244.28,232.442 1244.85,229.076 1245.42,230.18 1245.99,230.063 1246.56,231.161 1247.12,229.334 1247.69,227.518 1248.26,229.885 1248.83,228.839 1249.4,228.048 1249.97,227.394 1250.53,229.984 1251.1,228.06 1251.67,229.533 1252.24,229.659 1252.81,229.667 1253.38,227.823 1253.94,226.99 1254.51,227.451 1255.08,227.898 1255.65,227.064 1256.22,229.793 1256.79,229.885 1257.35,229.056 1257.92,232.466 1258.49,235.332 1259.06,234.276 1259.63,236.149 1260.2,236.875 1260.76,235.464 1261.33,235.036 1261.9,235.824 1262.47,235.613 1263.04,236.407 1263.61,237.014 1264.18,237.297 1264.74,237.775 1265.31,234.938 1265.88,234.752 1266.45,237.592 1267.02,240.102 1267.59,238.633 1268.15,237.03 1268.72,236.441 1269.29,233.793 1269.86,233.668 1270.43,232.439 1271,232.303 1271.56,233.46 1272.13,232.252 1272.7,232.118 1273.27,229.836 1273.84,229.836 1274.41,231.126 1274.97,232.213 1275.54,228.83 1276.11,228.939 1276.68,232.032 1277.25,230.795 1277.82,229.688 1278.38,228.722 1278.95,226.929 1279.52,224.321 1280.09,224.672 1280.66,224.968 1281.23,224.576 1281.79,224.941 1282.36,224.094 1282.93,226.644 1283.5,226.931 1284.07,231.439 1284.64,232.441 1285.2,233.246 1285.77,233.24 1286.34,231.891 1286.91,230.763 1287.48,232.758 1288.05,232.392 1288.61,232.467 1289.18,232.416 1289.75,233.495 1290.32,233.275 1290.89,234.093 1291.46,232.691 1292.02,232.616 1292.59,233.127 1293.16,233.87 1293.73,234.623 1294.3,234.263 1294.87,233.857 1295.43,232.45 1296,233.148 1296.57,232.801 1297.14,231.33 1297.71,229.064 1298.28,228.114 1298.84,229.084 1299.41,228.875 1299.98,228.104 1300.55,229.14 1301.12,228.307 1301.69,225.049 1302.25,225.562 1302.82,225.882 1303.39,226.342 1303.96,226.592 1304.53,228.856 1305.1,228.976 1305.66,227.975 1306.23,227.114 1306.8,226.314 1307.37,226.634 1307.94,226.814 1308.51,225.938 1309.07,227.101 1309.64,227.43 1310.21,227.73 1310.78,226.763 1311.35,226.999 1311.92,224.952 1312.48,227.539 1313.05,229.708 1313.62,229.666 1314.19,232.878 1314.76,232.734 1315.33,231.531 1315.89,231.499 1316.46,231.435 1317.03,230.409 1317.6,230.423 1318.17,229.148 1318.74,228.703 1319.3,230.127 1319.87,230.19 1320.44,230.19 1321.01,229.373 1321.58,230.675 1322.15,233.829 1322.71,233.558 1323.28,232.41 1323.85,231.222 1324.42,230.036 1324.99,231.252 1325.56,233.247 1326.12,228.781 1326.69,228.897 1327.26,229.968 1327.83,230.936 1328.4,232.94 1328.97,233.908 1329.53,233.494 1330.1,231.117 1330.67,230.146 1331.24,229.196 1331.81,230.206 1332.38,229.109 1332.94,229.194 1333.51,230.23 1334.08,228.153 1334.65,227.332 1335.22,227.649 1335.79,228.024 1336.36,230.031 1336.92,230.1 1337.49,232.987 1338.06,230.712 1338.63,230.642 1339.2,232.874 1339.77,232.79 1340.33,233.751 1340.9,233.651 1341.47,230.249 1342.04,230.163 1342.61,230.223 1343.18,230.309 1343.74,230.288 1344.31,229.184 1344.88,228.163 1345.45,228.277 1346.02,228.235 1346.59,228.314 1347.15,229.587 1347.72,231.726 1348.29,231.691 1348.86,232.568 1349.43,233.534 1350,234.621 1350.56,233.262 1351.13,232.043 1351.7,230.792 1352.27,227.757 1352.84,226.806 1353.41,227.089 1353.97,226.42 1354.54,223.628 1355.11,222.214 1355.68,222.943 1356.25,227.848 1356.82,231.255 1357.38,232.193 1357.95,231.985 1358.52,230.758 1359.09,233.029 1359.66,233.848 1360.23,231.587 1360.79,231.546 1361.36,232.605 1361.93,233.379 1362.5,232.29 1363.07,232.105 1363.64,231.343 1364.2,232.282 1364.77,232.189 1365.34,234.044 1365.91,231.594 1366.48,231.532 1367.05,232.541 1367.61,232.301 1368.18,232.182 1368.75,230.921 1369.32,230.793 1369.89,230.941 1370.46,228.784 1371.02,230.993 1371.59,234.035 1372.16,233.544 1372.73,235.36 1373.3,234.968 1373.87,231.665 1374.43,232.289 1375,232.27 1375.57,229.984 1376.14,230.834 1376.71,229.702 1377.28,229.638 1377.84,230.992 1378.41,229.857 1378.98,228.778 1379.55,229.691 1380.12,228.42 1380.69,226.137 1381.25,224.3 1381.82,224.721 1382.39,225.92 1382.96,224.99 1383.53,225.433 1384.1,226.713 1384.66,229.113 1385.23,228.018 1385.8,228.13 1386.37,228.448 1386.94,229.66 1387.51,227.536 1388.07,229.92 1388.64,231.071 1389.21,231.087 1389.78,231.137 1390.35,228.813 1390.92,228.978 1391.48,227.957 1392.05,229.153 1392.62,228.2 1393.19,229.173 1393.76,228.054 1394.33,229.13 1394.89,229.088 1395.46,231.087 1396.03,229.092 1396.6,229.194 1397.17,231.299 1397.74,234.387 1398.3,233.198 1398.87,234.99 1399.44,233.616 1400.01,233.411 1400.58,232.054 1401.15,230.659 1401.71,229.406 1402.28,230.156 1402.85,229.052 1403.42,229.253 1403.99,231.472 1404.56,233.315 1405.13,233.12 1405.69,232.88 1406.26,232.762 1406.83,232.371 1407.4,233.29 1407.97,232.073 1408.54,234.047 1409.1,233.472 1409.67,232.105 1410.24,230.848 1410.81,230.779 1411.38,231.744 1411.95,230.496 1412.51,232.466 1413.08,231.264 1413.65,230.256 1414.22,231.228 1414.79,230.211 1415.36,230.022 1415.92,229.874 1416.49,227.746 1417.06,229.854 1417.63,228.926 1418.2,228.911 1418.77,229.684 1419.33,228.626 1419.9,230.751 1420.47,231.657 1421.04,231.654 1421.61,231.329 1422.18,230.384 1422.74,228.403 1423.31,228.651 1423.88,229.741 1424.45,229.813 1425.02,228.766 1425.59,229.626 1426.15,229.55 1426.72,227.43 1427.29,227.487 1427.86,228.584 1428.43,228.454 1429,228.568 1429.56,229.754 1430.13,228.787 1430.7,228.887 1431.27,226.213 1431.84,225.353 1432.41,226.707 1432.97,225.016 1433.54,224.479 1434.11,227.094 1434.68,228.358 1435.25,229.651 1435.82,230.929 1436.38,229.921 1436.95,231.084 1437.52,232.245 1438.09,231.118 1438.66,230.968 1439.23,229.845 1439.79,227.994 1440.36,229.358 1440.93,228.574 1441.5,228.511 1442.07,230.674 1442.64,231.434 1443.2,232.459 1443.77,234.465 1444.34,234.239 1444.91,237.299 1445.48,235.787 1446.05,234.481 1446.61,234.166 1447.18,233.961 1447.75,233.709 1448.32,235.485 1448.89,237.248 1449.46,235.859 1450.02,236.455 1450.59,234.978 1451.16,236.688 1451.73,236.304 1452.3,234.733 1452.87,234.246 1453.43,232.8 1454,232.478 1454.57,230.975 1455.14,230.728 1455.71,229.579 1456.28,227.405 1456.84,227.637 1457.41,229.829 1457.98,231.593 1458.55,231.613 1459.12,230.474 1459.69,229.383 1460.25,230.18 1460.82,231.007 1461.39,230.738 1461.96,230.449 1462.53,230.385 1463.1,230.56 1463.66,229.186 1464.23,228.131 1464.8,226.118 1465.37,226.301 1465.94,228.704 1466.51,226.716 1467.07,227.945 1467.64,226.816 1468.21,230.073 1468.78,232.102 1469.35,233.912 1469.92,233.609 1470.48,230.372 1471.05,230.186 1471.62,231.238 1472.19,232.103 1472.76,231.861 1473.33,230.877 1473.89,229.71 1474.46,229.466 1475.03,225.18 1475.6,225.404 1476.17,224.599 1476.74,222.979 1477.31,225.572 1477.87,225.102 1478.44,226.68 1479.01,227.977 1479.58,229.18 1480.15,229.199 1480.72,227.537 1481.28,228.947 1481.85,228.988 1482.42,230.093 1482.99,228.976 1483.56,228.274 1484.13,229.343 1484.69,229.448 1485.26,229.656 1485.83,228.505 1486.4,226.746 1486.97,226.858 1487.54,228.14 1488.1,229.377 1488.67,230.357 1489.24,231.376 1489.81,232.354 1490.38,232.275 1490.95,231.188 1491.51,230.91 1492.08,230.849 1492.65,230.759 1493.22,231.694 1493.79,233.432 1494.36,231.935 1494.92,232.631 1495.49,231.306 1496.06,232.038 1496.63,233.924 1497.2,234.481 1497.77,234.106 1498.33,232.427 1498.9,231.199 1499.47,230.946 1500.04,229.656 1500.61,229.643 1501.18,229.55 1501.74,229.707 1502.31,230.689 1502.88,230.705 1503.45,227.538 1504.02,228.65 1504.59,229.808 1505.15,229.818 1505.72,230.868 1506.29,230.764 1506.86,230.512 1507.43,230.366 1508,229.949 1508.56,232.134 1509.13,232.015 1509.7,230.684 1510.27,230.634 1510.84,229.472 1511.41,229.493 1511.97,228.279 1512.54,228.255 1513.11,228.449 1513.68,226.583 1514.25,227.754 1514.82,227.021 1515.38,228.338 1515.95,228.377 1516.52,228.455 1517.09,230.849 1517.66,230.768 1518.23,228.543 1518.79,228.496 1519.36,227.497 1519.93,226.471 1520.5,226.808 1521.07,221.97 1521.64,220.197 1522.2,219.895 1522.77,220.618 1523.34,220.194 1523.91,220.004 1524.48,221.909 1525.05,224.557 1525.61,224.837 1526.18,226.12 1526.75,225.428 1527.32,228.81 1527.89,231.954 1528.46,231.091 1529.02,232.218 1529.59,231.013 1530.16,231.167 1530.73,232.146 1531.3,232.169 1531.87,232.237 1532.43,232.053 1533,234.192 1533.57,235.127 1534.14,234.768 1534.71,235.621 1535.28,234.218 1535.84,231.893 1536.41,231.854 1536.98,231.721 1537.55,232.846 1538.12,231.634 1538.69,232.591 1539.25,232.356 1539.82,231.126 1540.39,231.489 1540.96,231.465 1541.53,229.462 1542.1,231.706 1542.66,231.429 1543.23,231.555 1543.8,232.405 1544.37,231.157 1544.94,231.977 1545.51,233.975 1546.08,233.709 1546.64,233.2 1547.21,233.119 1547.78,231.9 1548.35,231.585 1548.92,231.593 1549.49,232.641 1550.05,230.654 1550.62,230.585 1551.19,231.286 1551.76,231.11 1552.33,229.954 1552.9,228.923 1553.46,228.024 1554.03,230.054 1554.6,228.04 1555.17,228.042 1555.74,230.398 1556.31,230.53 1556.87,228.466 1557.44,229.697 1558.01,231.69 1558.58,231.552 1559.15,232.672 1559.72,231.469 1560.28,234.568 1560.85,233.418 1561.42,232.047 1561.99,229.906 1562.56,230.822 1563.13,233.677 1563.69,233.518 1564.26,233.276 1564.83,230.015 1565.4,231.022 1565.97,230.817 1566.54,229.632 1567.1,231.683 1567.67,234.406 1568.24,234.031 1568.81,233.358 1569.38,232.81 1569.95,228.699 1570.51,228.574 1571.08,228.562 1571.65,228.482 1572.22,228.548 1572.79,228.407 1573.36,226.233 1573.92,226.385 1574.49,228.61 1575.06,230.842 1575.63,230.81 1576.2,229.661 1576.77,230.606 1577.33,231.635 1577.9,233.547 1578.47,232.401 1579.04,232.078 1579.61,232.884 1580.18,233.553 1580.74,233.155 1581.31,234.995 1581.88,235.668 1582.45,235.127 1583.02,235.647 1583.59,235.216 1584.15,235.084 1584.72,233.702 1585.29,233.393 1585.86,232.149 1586.43,231.675 1587,231.26 1587.56,229.003 1588.13,230.064 1588.7,233.162 1589.27,232.875 1589.84,233.684 1590.41,232.132 1590.97,230.887 1591.54,229.717 1592.11,228.347 1592.68,228.232 1593.25,229.42 1593.82,230.36 1594.38,232.328 1594.95,231.151 1595.52,230.189 1596.09,231.075 1596.66,229.834 1597.23,229.743 1597.79,231.824 1598.36,230.473 1598.93,231.439 1599.5,229.187 1600.07,229.04 1600.64,226.067 1601.2,224.081 1601.77,223.499 1602.34,222.984 1602.91,223.39 1603.48,224.186 1604.05,225.621 1604.61,226.955 1605.18,226.115 1605.75,227.238 1606.32,225.24 1606.89,224.738 1607.46,225.112 1608.02,226.627 1608.59,228.97 1609.16,228.969 1609.73,229.192 1610.3,230.255 1610.87,231.085 1611.43,229.802 1612,228.74 1612.57,226.767 1613.14,225.063 1613.71,226.16 1614.28,226.35 1614.84,228.614 1615.41,227.523 1615.98,227.869 1616.55,226.711 1617.12,225.873 1617.69,227.107 1618.26,225.492 1618.82,228.94 1619.39,228.819 1619.96,230.045 1620.53,231.864 1621.1,229.668 1621.67,227.629 1622.23,227.785 1622.8,227.909 1623.37,229.13 1623.94,228.3 1624.51,227.514 1625.08,227.834 1625.64,227.03 1626.21,228.352 1626.78,229.61 1627.35,231.889 1627.92,230.857 1628.49,228.975 1629.05,228.002 1629.62,228.292 1630.19,228.367 1630.76,228.575 1631.33,226.631 1631.9,227.357 1632.46,227.86 1633.03,228.115 1633.6,228.29 1634.17,229.391 1634.74,228.44 1635.31,228.656 1635.87,228.683 1636.44,229.747 1637.01,230.889 1637.58,231.959 1638.15,231.859 1638.72,233.84 1639.28,233.754 1639.85,231.697 1640.42,232.721 1640.99,230.508 1641.56,229.646 1642.13,231.727 1642.69,230.783 1643.26,230.775 1643.83,230.732 1644.4,231.974 1644.97,231.733 1645.54,229.694 1646.1,228.898 1646.67,229.03 1647.24,227.896 1647.81,226.804 1648.38,223.839 1648.95,225.162 1649.51,225.45 1650.08,225.911 1650.65,226.122 1651.22,226.491 1651.79,227.939 1652.36,226.136 1652.92,226.502 1653.49,225.689 1654.06,228.367 1654.63,226.64 1655.2,225.922 1655.77,225.336 1656.33,222.744 1656.9,223.483 1657.47,225.122 1658.04,224.423 1658.61,224.845 1659.18,226.233 1659.74,225.451 1660.31,226.921 1660.88,225.481 1661.45,225.858 1662.02,226.291 1662.59,227.825 1663.15,227.219 1663.72,229.5 1664.29,228.7 1664.86,226.854 1665.43,229.228 1666,230.606 1666.56,229.943 1667.13,232.131 1667.7,232.183 1668.27,231.948 1668.84,231.103 1669.41,231.157 1669.97,234.548 1670.54,235.559 1671.11,237.355 1671.68,239.088 1672.25,237.532 1672.82,240.071 1673.38,239.594 1673.95,237.159 1674.52,235.809 1675.09,233.575 1675.66,231.513 1676.23,231.696 1676.79,230.484 1677.36,230.72 1677.93,232.989 1678.5,232.829 1679.07,233.778 1679.64,234.367 1680.2,235.801 1680.77,234.474 1681.34,233.087 1681.91,233.114 1682.48,231.861 1683.05,231.779 1683.61,231.61 1684.18,229.556 1684.75,230.967 1685.32,233.193 1685.89,235.34 1686.46,234.942 1687.02,235.635 1687.59,235.346 1688.16,236.022 1688.73,235.64 1689.3,233.2 1689.87,233.1 1690.44,232.69 1691,233.456 1691.57,234.401 1692.14,231.964 1692.71,231.614 1693.28,231.369 1693.85,229.994 1694.41,229.988 1694.98,230.117 1695.55,230.167 1696.12,231.286 1696.69,230.22 1697.26,231.216 1697.82,231.144 1698.39,232.029 1698.96,231.791 1699.53,230.443 1700.1,228.153 1700.67,229.262 1701.23,231.329 1701.8,231.372 1702.37,232.997 1702.94,233.763 1703.51,232.377 1704.08,234.158 1704.64,233.805 1705.21,235.523 1705.78,235.11 1706.35,236.697 1706.92,235.194 1707.49,234.819 1708.05,233.242 1708.62,233.985 1709.19,234.691 1709.76,234.552 1710.33,235.091 1710.9,235.758 1711.46,236.206 1712.03,235.602 1712.6,235.369 1713.17,235.643 1713.74,235.145 1714.31,232.705 1714.87,233.349 1715.44,232.824 1716.01,234.59 1716.58,233.168 1717.15,233.591 1717.72,232.213 1718.28,230.9 1718.85,230.744 1719.42,228.482 1719.99,227.533 1720.56,226.418 1721.13,228.847 1721.69,228.779 1722.26,230.74 1722.83,230.524 1723.4,229.224 1723.97,229.071 1724.54,229.991 1725.1,229.778 1725.67,230.735 1726.24,228.572 1726.81,225.335 1727.38,224.209 1727.95,225.636 1728.51,226.949 1729.08,227.14 1729.65,226.274 1730.22,226.421 1730.79,226.709 1731.36,229.567 1731.92,229.579 1732.49,229.368 1733.06,229.454 1733.63,230.532 1734.2,229.318 1734.77,227.151 1735.33,227.134 1735.9,227.223 1736.47,226.194 1737.04,227.398 1737.61,227.552 1738.18,227.715 1738.74,227.55 1739.31,226.63 1739.88,225.968 1740.45,228.412 1741.02,228.565 1741.59,227.612 1742.15,226.713 1742.72,227.098 1743.29,229.313 1743.86,229.432 1744.43,228.497 1745,227.372 1745.56,229.414 1746.13,230.462 1746.7,228.375 1747.27,230.553 1747.84,230.343 1748.41,229.989 1748.97,227.887 1749.54,227.046 1750.11,227.331 1750.68,225.676 1751.25,222.775 1751.82,222.057 1752.38,223.666 1752.95,221.149 1753.52,223.04 1754.09,225.761 1754.66,226.157 1755.23,226.457 1755.79,226.751 1756.36,225.847 1756.93,226.142 1757.5,226.257 1758.07,226.643 1758.64,224.813 1759.21,224.183 1759.77,224.546 1760.34,224.943 1760.91,224.292 1761.48,224.574 1762.05,225.203 1762.62,227.793 1763.18,228.962 1763.75,229.987 1764.32,228.996 1764.89,230.391 1765.46,228.455 1766.03,227.802 1766.59,228.001 1767.16,226.431 1767.73,226.712 1768.3,229.116 1768.87,229.299 1769.44,229.693 1770,232.902 1770.57,233.876 1771.14,234.698 1771.71,234.363 1772.28,234.365 1772.85,234.289 1773.41,230.962 1773.98,231.014 1774.55,230.105 1775.12,231.347 1775.69,231.126 1776.26,231.069 1776.82,231.081 1777.39,231.191 1777.96,232.12 1778.53,232.066 1779.1,233.934 1779.67,233.738 1780.23,234.69 1780.8,234.401 1781.37,233.129 1781.94,234.948 1782.51,235.048 1783.08,236.783 1783.64,235.246 1784.21,236.01 1784.78,237.771 1785.35,237.928 1785.92,237.425 1786.49,236.833 1787.05,238.588 1787.62,237.918 1788.19,240.385 1788.76,238.82 1789.33,239.162 1789.9,237.383 1790.46,236.477 1791.03,237.002 1791.6,236.425 1792.17,236.029 1792.74,234.552 1793.31,234.043 1793.87,234.765 1794.44,233.446 1795.01,233.104 1795.58,232.9 1796.15,232.547 1796.72,231.975 1797.28,228.646 1797.85,227.469 1798.42,227.399 1798.99,225.352 1799.56,225.667 1800.13,227.847 1800.69,226.701 1801.26,227.788 1801.83,226.755 1802.4,228.806 1802.97,227.804 1803.54,227.934 1804.1,227.921 1804.67,227.913 1805.24,227.795 1805.81,228.006 1806.38,230.165 1806.95,229.038 1807.51,227.912 1808.08,229.081 1808.65,230.4 1809.22,229.124 1809.79,227.039 1810.36,229.283 1810.92,228.349 1811.49,226.327 1812.06,226.365 1812.63,225.505 1813.2,224.746 1813.77,225.019 1814.33,223.219 1814.9,224.604 1815.47,226.928 1816.04,228.083 1816.61,229.149 1817.18,230.274 1817.74,230.421 1818.31,229.304 1818.88,228.392 1819.45,228.468 1820.02,228.677 1820.59,228.761 1821.15,227.807 1821.72,227.522 1822.29,226.563 1822.86,223.623 1823.43,224.111 1824,226.528 1824.56,226.522 1825.13,227.049 1825.7,228.464 1826.27,227.689 1826.84,227.054 1827.41,227.382 1827.97,225.444 1828.54,226.779 1829.11,225.957 1829.68,227.286 1830.25,228.232 1830.82,230.567 1831.39,229.698 1831.95,229.8 1832.52,229.893 1833.09,230.065 1833.66,230.157 1834.23,229.369 1834.8,229.239 1835.36,228.241 1835.93,229.602 1836.5,228.547 1837.07,228.637 1837.64,228.726 1838.21,227.876 1838.77,228.198 1839.34,229.288 1839.91,230.535 1840.48,228.545 1841.05,227.861 1841.62,229.187 1842.18,228.333 1842.75,230.856 1843.32,231.988 1843.89,231.909 1844.46,230.817 1845.03,228.662 1845.59,228.003 1846.16,226.359 1846.73,226.834 1847.3,228.3 1847.87,229.421 1848.44,229.609 1849,229.944 1849.57,231.21 1850.14,232.005 1850.71,228.892 1851.28,228.309 1851.85,227.515 1852.41,227.795 1852.98,228.178 1853.55,229.332 1854.12,231.466 1854.69,233.635 1855.26,233.081 1855.82,233.07 1856.39,233.933 1856.96,233.672 1857.53,232.433 1858.1,234.313 1858.67,232.185 1859.23,232.179 1859.8,231.029 1860.37,232.006 1860.94,229.877 1861.51,230.953 1862.08,233.122 1862.64,230.983 1863.21,228.969 1863.78,227.993 1864.35,229.399 1864.92,226.491 1865.49,226.603 1866.05,226.957 1866.62,226.172 1867.19,224.506 1867.76,226.112 1868.33,225.335 1868.9,225.933 1869.46,225.393 1870.03,228.882 1870.6,225.871 1871.17,226.347 1871.74,224.693 1872.31,226.062 1872.87,229.618 1873.44,228.9 1874.01,227.025 1874.58,227.393 1875.15,227.499 1875.72,228.897 1876.28,229.177 1876.85,229.565 1877.42,227.51 1877.99,227.757 1878.56,227.75 1879.13,228.985 1879.69,230.3 1880.26,230.208 1880.83,229.263 1881.4,229.577 1881.97,231.89 1882.54,230.786 1883.1,229.684 1883.67,231.193 1884.24,233.347 1884.81,233.467 1885.38,235.347 1885.95,236.133 1886.51,234.948 1887.08,234.72 1887.65,234.51 1888.22,236.261 1888.79,235.794 1889.36,235.602 1889.92,235.525 1890.49,237.134 1891.06,233.832 1891.63,232.72 1892.2,231.375 1892.77,230.477 1893.33,229.329 1893.9,229.247 1894.47,229.226 1895.04,232.433 1895.61,232.323 1896.18,234.118 1896.74,234.976 1897.31,235.767 1897.88,237.341 1898.45,233.635 1899.02,234.584 1899.59,231.283 1900.16,231.39 1900.72,233.468 1901.29,232.102 1901.86,229.986 1902.43,229.092 1903,229.277 1903.57,228.229 1904.13,227.285 1904.7,229.679 1905.27,228.762 1905.84,231.048 1906.41,230.088 1906.98,230.039 1907.54,228.847 1908.11,227.904 1908.68,228.313 1909.25,229.834 1909.82,230.047 1910.39,231.227 1910.95,231.21 1911.52,233.33 1912.09,234.303 1912.66,234.041 1913.23,233.725 1913.8,231.638 1914.36,230.558 1914.93,228.691 1915.5,229.814 1916.07,228.978 1916.64,228.877 1917.21,227.962 1917.77,228.141 1918.34,229.268 1918.91,231.418 1919.48,228.501 1920.05,227.538 1920.62,227.029 1921.18,227.338 1921.75,226.559 1922.32,227.743 1922.89,226.064 1923.46,226.381 1924.03,228.676 1924.59,229.838 1925.16,232.165 1925.73,233.02 1926.3,234.052 1926.87,234.942 1927.44,234.559 1928,234.155 1928.57,231.829 1929.14,231.627 1929.71,231.615 1930.28,233.615 1930.85,233.443 1931.41,233.307 1931.98,233.045 1932.55,230.624 1933.12,230.437 1933.69,231.451 1934.26,232.528 1934.82,232.324 1935.39,231.051 1935.96,231.166 1936.53,231.194 1937.1,231.282 1937.67,231.203 1938.23,231.088 1938.8,231.267 1939.37,231.302 1939.94,231.219 1940.51,229.108 1941.08,228.394 1941.64,227.43 1942.21,226.729 1942.78,226.934 1943.35,227.957 1943.92,229.96 1944.49,232.898 1945.05,227.396 1945.62,228.354 1946.19,228.363 1946.76,228.318 1947.33,229.508 1947.9,230.775 1948.46,229.791 1949.03,227.747 1949.6,225.899 1950.17,226.415 1950.74,229.8 1951.31,228.655 1951.87,229.805 1952.44,228.633 1953.01,231.695 1953.58,231.401 1954.15,231.289 1954.72,232.324 1955.28,233.469 1955.85,235.364 1956.42,237.203 1956.99,236.538 1957.56,237.049 1958.13,237.535 1958.69,233.854 1959.26,232.614 1959.83,231.392 1960.4,231.936 1960.97,230.754 1961.54,229.643 1962.1,229.603 1962.67,229.725 1963.24,228.489 1963.81,228.615 1964.38,228.579 1964.95,229.709 1965.51,230.814 1966.08,231.726 1966.65,233.555 1967.22,231.164 1967.79,231.899 1968.36,231.673 1968.92,230.433 1969.49,230.592 1970.06,230.636 1970.63,231.59 1971.2,231.593 1971.77,231.4 1972.34,230.026 1972.9,229.664 1973.47,227.524 1974.04,228.574 1974.61,227.481 1975.18,228.581 1975.75,227.593 1976.31,228.715 1976.88,227.821 1977.45,227.906 1978.02,227.034 1978.59,226.042 1979.16,224.235 1979.72,223.745 1980.29,227.369 1980.86,228.705 1981.43,230.727 1982,229.693 1982.57,229.585 1983.13,230.663 1983.7,228.53 1984.27,229.788 1984.84,229.907 1985.41,230.116 1985.98,230.221 1986.54,230.034 1987.11,231.094 1987.68,231.24 1988.25,231.026 1988.82,231.13 1989.39,233.332 1989.95,234.084 1990.52,232.876 1991.09,233.791 1991.66,232.282 1992.23,230.054 1992.8,227.811 1993.36,228.046 1993.93,230.409 1994.5,232.412 1995.07,234.286 1995.64,234.768 1996.21,234.214 1996.77,233.842 1997.34,234.554 1997.91,235.038 1998.48,234.507 1999.05,234.245 1999.62,233.701 2000.18,233.368 2000.75,231.866 2001.32,229.629 2001.89,228.476 2002.46,228.584 2003.03,231.543 2003.59,234.337 2004.16,233.95 2004.73,233.598 2005.3,235.43 2005.87,235.977 2006.44,237.446 2007,236.763 2007.57,237.429 2008.14,235.85 2008.71,236.263 2009.28,235.794 2009.85,235.514 2010.41,236.161 2010.98,235.571 2011.55,236.114 2012.12,235.513 2012.69,234.796 2013.26,234.303 2013.82,233.66 2014.39,233.054 2014.96,229.384 2015.53,229.204 2016.1,228.186 2016.67,227.281 2017.23,228.344 2017.8,225.192 2018.37,225.475 2018.94,224.717 2019.51,222.795 2020.08,221.258 2020.64,222.814 2021.21,224.31 2021.78,225.606 2022.35,225.829 2022.92,226.085 2023.49,225.327 2024.05,225.59 2024.62,224.841 2025.19,225.07 2025.76,225.374 2026.33,225.725 2026.9,225.865 2027.46,225.045 2028.03,224.214 2028.6,225.59 2029.17,225.034 2029.74,226.321 2030.31,227.556 2030.87,226.476 2031.44,223.676 2032.01,224.151 2032.58,225.573 2033.15,223.78 2033.72,225.222 2034.28,224.314 2034.85,223.482 2035.42,224.714 2035.99,224.197 2036.56,224.608 2037.13,225.997 2037.69,227.531 2038.26,226.803 2038.83,226.144 2039.4,227.473 2039.97,229.83 2040.54,229.98 2041.11,228.909 2041.67,230.21 2042.24,230.44 2042.81,231.422 2043.38,232.351 2043.95,230.376 2044.52,230.647 2045.08,231.713 2045.65,231.569 2046.22,233.766 2046.79,233.662 2047.36,234.361 2047.93,234.188 2048.49,233.663 2049.06,231.339 2049.63,229.253 2050.2,229.502 2050.77,230.625 2051.34,234.693 2051.9,234.318 2052.47,236.169 2053.04,234.563 2053.61,236.289 2054.18,234.756 2054.75,233.605 2055.31,233.18 2055.88,233.164 2056.45,233.037 2057.02,231.821 2057.59,231.467 2058.16,231.293 2058.72,232.08 2059.29,232.874 2059.86,233.781 2060.43,234.531 2061,234.224 2061.57,233.948 2062.13,233.564 2062.7,235.987 2063.27,237.663 2063.84,238.927 2064.41,238.27 2064.98,237.418 2065.54,234.505 2066.11,231.201 2066.68,228.835 2067.25,228.833 2067.82,227.749 2068.39,227.925 2068.95,228.977 2069.52,230.103 2070.09,232.067 2070.66,231.954 2071.23,231.678 2071.8,229.419 2072.36,230.196 2072.93,230.135 2073.5,230.018 2074.07,226.822 2074.64,225.08 2075.21,225.369 2075.77,225.586 2076.34,227.156 2076.91,228.367 2077.48,229.525 2078.05,228.525 2078.62,227.749 2079.18,225.653 2079.75,225.883 2080.32,226.995 2080.89,228.235 2081.46,230.389 2082.03,228.213 2082.59,228.207 2083.16,230.44 2083.73,229.209 2084.3,231.43 2084.87,229.453 2085.44,229.469 2086,231.532 2086.57,231.328 2087.14,231.339 2087.71,232.185 2088.28,232.977 2088.85,232.709 2089.41,231.322 2089.98,230.411 2090.55,228.306 2091.12,230.571 2091.69,229.494 2092.26,228.343 2092.82,227.244 2093.39,225.359 2093.96,226.627 2094.53,225.759 2095.1,224.894 2095.67,224.013 2096.23,224.332 2096.8,225.841 2097.37,227.223 2097.94,227.546 2098.51,226.618 2099.08,221.736 2099.64,223.089 2100.21,221.638 2100.78,222.208 2101.35,221.638 2101.92,222.291 2102.49,220.052 2103.05,221.585 2103.62,222.334 2104.19,222.892 2104.76,222.744 2105.33,223.218 2105.9,224.815 2106.46,223.021 2107.03,224.488 2107.6,225.856 2108.17,225.484 2108.74,225.964 2109.31,227.393 2109.87,227.701 2110.44,231.032 2111.01,231.005 2111.58,232.026 2112.15,232.185 2112.72,232.257 2113.29,232.462 2113.85,232.449 2114.42,232.615 2114.99,231.313 2115.56,231.59 2116.13,231.778 2116.7,230.742 2117.26,230.846 2117.83,232.979 2118.4,232.844 2118.97,232.586 2119.54,232.343 2120.11,231.448 2120.67,231.459 2121.24,230.455 2121.81,229.532 2122.38,229.611 2122.95,229.863 2123.52,230.076 2124.08,230.374 2124.65,229.578 2125.22,227.61 2125.79,226.921 2126.36,226.329 2126.93,225.697 2127.49,226.254 2128.06,226.641 2128.63,227.841 2129.2,231.179 2129.77,231.115 2130.34,231.266 2130.9,231.399 2131.47,230.068 2132.04,231.257 2132.61,229.124 2133.18,231.166 2133.75,233.259 2134.31,232.89 2134.88,234.577 2135.45,232.412 2136.02,232.504 2136.59,232.667 2137.16,231.653 2137.72,230.8 2138.29,231.974 2138.86,231.897 2139.43,230.564 2140,232.945 2140.57,231.775 2141.13,230.654 2141.7,228.685 2142.27,232.137 2142.84,234.21 2143.41,234.079 2143.98,232.827 2144.54,235.845 2145.11,236.788 2145.68,235.297 2146.25,238.199 2146.82,236.699 2147.39,234.165 2147.95,234.942 2148.52,236.606 2149.09,233.138 2149.66,232.696 2150.23,232.499 2150.8,231.291 2151.36,232.157 2151.93,232.003 2152.5,233.088 2153.07,234.998 2153.64,235.859 2154.21,235.23 2154.77,233.779 2155.34,232.507 2155.91,233.392 2156.48,235.145 2157.05,233.557 2157.62,234.21 2158.18,235.921 2158.75,232.592 2159.32,234.551 2159.89,233.203 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.024\n  with uncertainty of ± 0.0021573385042165877\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01714 ± (0.00187253, 0.0018553) (MC)\n  95% confidence interval: [-4.02088, -4.01351] (MC)\n  linear error propagation: -4.01727 ± 0.00188955\n  |δ_y| = |0.00164722| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017141310802907, val_l = 0.0037352269846744335, val_u = 0.0036354391381347995)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip140\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip141\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip142\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.69 2211.02,1142.69 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,991.385 2211.02,991.385 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,840.077 2211.02,840.077 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,688.768 2211.02,688.768 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,537.46 2211.02,537.46 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,386.152 2211.02,386.152 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,234.843 2211.02,234.843 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.69 365.751,1142.69 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,991.385 365.751,991.385 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,840.077 365.751,840.077 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,688.768 365.751,688.768 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,537.46 365.751,537.46 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,386.152 365.751,386.152 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,234.843 365.751,234.843 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M298.909 1128.49 Q295.298 1128.49 293.469 1132.06 Q291.664 1135.6 291.664 1142.73 Q291.664 1149.83 293.469 1153.4 Q295.298 1156.94 298.909 1156.94 Q302.543 1156.94 304.349 1153.4 Q306.177 1149.83 306.177 1142.73 Q306.177 1135.6 304.349 1132.06 Q302.543 1128.49 298.909 1128.49 M298.909 1124.79 Q304.719 1124.79 307.775 1129.39 Q310.853 1133.98 310.853 1142.73 Q310.853 1151.45 307.775 1156.06 Q304.719 1160.64 298.909 1160.64 Q293.099 1160.64 290.02 1156.06 Q286.964 1151.45 286.964 1142.73 Q286.964 1133.98 290.02 1129.39 Q293.099 1124.79 298.909 1124.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M259.557 1004.73 L267.196 1004.73 L267.196 978.364 L258.886 980.031 L258.886 975.772 L267.15 974.105 L271.826 974.105 L271.826 1004.73 L279.465 1004.73 L279.465 1008.66 L259.557 1008.66 L259.557 1004.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 977.184 Q295.298 977.184 293.469 980.748 Q291.664 984.29 291.664 991.42 Q291.664 998.526 293.469 1002.09 Q295.298 1005.63 298.909 1005.63 Q302.543 1005.63 304.349 1002.09 Q306.177 998.526 306.177 991.42 Q306.177 984.29 304.349 980.748 Q302.543 977.184 298.909 977.184 M298.909 973.48 Q304.719 973.48 307.775 978.086 Q310.853 982.67 310.853 991.42 Q310.853 1000.15 307.775 1004.75 Q304.719 1009.34 298.909 1009.34 Q293.099 1009.34 290.02 1004.75 Q286.964 1000.15 286.964 991.42 Q286.964 982.67 290.02 978.086 Q293.099 973.48 298.909 973.48 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M262.775 853.421 L279.094 853.421 L279.094 857.357 L257.15 857.357 L257.15 853.421 Q259.812 850.667 264.395 846.037 Q269.002 841.384 270.182 840.042 Q272.428 837.519 273.307 835.783 Q274.21 834.023 274.21 832.334 Q274.21 829.579 272.266 827.843 Q270.344 826.107 267.242 826.107 Q265.043 826.107 262.59 826.871 Q260.159 827.635 257.381 829.185 L257.381 824.463 Q260.205 823.329 262.659 822.75 Q265.113 822.172 267.15 822.172 Q272.52 822.172 275.715 824.857 Q278.909 827.542 278.909 832.033 Q278.909 834.162 278.099 836.084 Q277.312 837.982 275.205 840.574 Q274.627 841.246 271.525 844.463 Q268.423 847.658 262.775 853.421 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 825.875 Q295.298 825.875 293.469 829.44 Q291.664 832.982 291.664 840.111 Q291.664 847.218 293.469 850.783 Q295.298 854.324 298.909 854.324 Q302.543 854.324 304.349 850.783 Q306.177 847.218 306.177 840.111 Q306.177 832.982 304.349 829.44 Q302.543 825.875 298.909 825.875 M298.909 822.172 Q304.719 822.172 307.775 826.778 Q310.853 831.361 310.853 840.111 Q310.853 848.838 307.775 853.445 Q304.719 858.028 298.909 858.028 Q293.099 858.028 290.02 853.445 Q286.964 848.838 286.964 840.111 Q286.964 831.361 290.02 826.778 Q293.099 822.172 298.909 822.172 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M272.914 687.414 Q276.27 688.132 278.145 690.4 Q280.043 692.669 280.043 696.002 Q280.043 701.118 276.525 703.919 Q273.006 706.72 266.525 706.72 Q264.349 706.72 262.034 706.28 Q259.742 705.863 257.289 705.007 L257.289 700.493 Q259.233 701.627 261.548 702.206 Q263.863 702.784 266.386 702.784 Q270.784 702.784 273.076 701.048 Q275.39 699.312 275.39 696.002 Q275.39 692.946 273.238 691.234 Q271.108 689.497 267.289 689.497 L263.261 689.497 L263.261 685.655 L267.474 685.655 Q270.923 685.655 272.752 684.289 Q274.58 682.9 274.58 680.308 Q274.58 677.646 272.682 676.234 Q270.807 674.798 267.289 674.798 Q265.367 674.798 263.168 675.215 Q260.969 675.632 258.33 676.511 L258.33 672.345 Q260.992 671.604 263.307 671.234 Q265.645 670.863 267.705 670.863 Q273.029 670.863 276.131 673.294 Q279.233 675.701 279.233 679.822 Q279.233 682.692 277.59 684.683 Q275.946 686.65 272.914 687.414 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 674.567 Q295.298 674.567 293.469 678.132 Q291.664 681.673 291.664 688.803 Q291.664 695.909 293.469 699.474 Q295.298 703.016 298.909 703.016 Q302.543 703.016 304.349 699.474 Q306.177 695.909 306.177 688.803 Q306.177 681.673 304.349 678.132 Q302.543 674.567 298.909 674.567 M298.909 670.863 Q304.719 670.863 307.775 675.47 Q310.853 680.053 310.853 688.803 Q310.853 697.53 307.775 702.136 Q304.719 706.72 298.909 706.72 Q293.099 706.72 290.02 702.136 Q286.964 697.53 286.964 688.803 Q286.964 680.053 290.02 675.47 Q293.099 670.863 298.909 670.863 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M271.594 524.254 L259.789 542.703 L271.594 542.703 L271.594 524.254 M270.367 520.18 L276.247 520.18 L276.247 542.703 L281.177 542.703 L281.177 546.592 L276.247 546.592 L276.247 554.74 L271.594 554.74 L271.594 546.592 L255.992 546.592 L255.992 542.078 L270.367 520.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 523.259 Q295.298 523.259 293.469 526.823 Q291.664 530.365 291.664 537.495 Q291.664 544.601 293.469 548.166 Q295.298 551.707 298.909 551.707 Q302.543 551.707 304.349 548.166 Q306.177 544.601 306.177 537.495 Q306.177 530.365 304.349 526.823 Q302.543 523.259 298.909 523.259 M298.909 519.555 Q304.719 519.555 307.775 524.161 Q310.853 528.745 310.853 537.495 Q310.853 546.221 307.775 550.828 Q304.719 555.411 298.909 555.411 Q293.099 555.411 290.02 550.828 Q286.964 546.221 286.964 537.495 Q286.964 528.745 290.02 524.161 Q293.099 519.555 298.909 519.555 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M258.793 368.872 L277.15 368.872 L277.15 372.807 L263.076 372.807 L263.076 381.279 Q264.094 380.932 265.113 380.77 Q266.131 380.584 267.15 380.584 Q272.937 380.584 276.316 383.756 Q279.696 386.927 279.696 392.344 Q279.696 397.922 276.224 401.024 Q272.752 404.103 266.432 404.103 Q264.256 404.103 261.988 403.732 Q259.742 403.362 257.335 402.621 L257.335 397.922 Q259.418 399.057 261.641 399.612 Q263.863 400.168 266.34 400.168 Q270.344 400.168 272.682 398.061 Q275.02 395.955 275.02 392.344 Q275.02 388.733 272.682 386.626 Q270.344 384.52 266.34 384.52 Q264.465 384.52 262.59 384.936 Q260.738 385.353 258.793 386.233 L258.793 368.872 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 371.95 Q295.298 371.95 293.469 375.515 Q291.664 379.057 291.664 386.186 Q291.664 393.293 293.469 396.857 Q295.298 400.399 298.909 400.399 Q302.543 400.399 304.349 396.857 Q306.177 393.293 306.177 386.186 Q306.177 379.057 304.349 375.515 Q302.543 371.95 298.909 371.95 M298.909 368.247 Q304.719 368.247 307.775 372.853 Q310.853 377.436 310.853 386.186 Q310.853 394.913 307.775 399.519 Q304.719 404.103 298.909 404.103 Q293.099 404.103 290.02 399.519 Q286.964 394.913 286.964 386.186 Q286.964 377.436 290.02 372.853 Q293.099 368.247 298.909 368.247 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M269.326 232.98 Q266.178 232.98 264.326 235.133 Q262.497 237.285 262.497 241.035 Q262.497 244.762 264.326 246.938 Q266.178 249.091 269.326 249.091 Q272.474 249.091 274.303 246.938 Q276.154 244.762 276.154 241.035 Q276.154 237.285 274.303 235.133 Q272.474 232.98 269.326 232.98 M278.608 218.327 L278.608 222.586 Q276.849 221.753 275.043 221.313 Q273.261 220.873 271.502 220.873 Q266.872 220.873 264.418 223.998 Q261.988 227.123 261.641 233.443 Q263.006 231.429 265.066 230.364 Q267.127 229.276 269.603 229.276 Q274.812 229.276 277.821 232.447 Q280.853 235.595 280.853 241.035 Q280.853 246.359 277.705 249.577 Q274.557 252.794 269.326 252.794 Q263.33 252.794 260.159 248.211 Q256.988 243.605 256.988 234.878 Q256.988 226.683 260.877 221.822 Q264.766 216.938 271.316 216.938 Q273.076 216.938 274.858 217.285 Q276.664 217.633 278.608 218.327 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 220.642 Q295.298 220.642 293.469 224.207 Q291.664 227.748 291.664 234.878 Q291.664 241.984 293.469 245.549 Q295.298 249.091 298.909 249.091 Q302.543 249.091 304.349 245.549 Q306.177 241.984 306.177 234.878 Q306.177 227.748 304.349 224.207 Q302.543 220.642 298.909 220.642 M298.909 216.938 Q304.719 216.938 307.775 221.545 Q310.853 226.128 310.853 234.878 Q310.853 243.605 307.775 248.211 Q304.719 252.794 298.909 252.794 Q293.099 252.794 290.02 248.211 Q286.964 243.605 286.964 234.878 Q286.964 226.128 290.02 221.545 Q293.099 216.938 298.909 216.938 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip142)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1148.88 400.199,1039.24 400.786,939.898 401.372,850.126 401.958,764.478 402.545,686.124 403.131,614.584 403.718,553.088 404.304,498.609 404.891,444.413 405.477,396.962 406.063,434.059 406.65,393.215 407.236,355.657 407.823,322.203 408.409,292.586 408.995,324.712 409.582,299.613 410.168,278.496 410.755,259.627 411.341,244.328 411.927,230.882 412.514,219.895 413.1,248.861 413.687,275.083 414.273,299.54 414.86,293.495 415.446,288.458 416.032,286.212 416.619,309.381 417.205,331.777 417.792,332.423 418.378,353.939 418.964,375.243 419.551,379.917 420.137,384.923 420.724,390.894 421.31,411.336 421.896,419.688 422.483,440.014 423.069,471.436 423.656,479.342 424.242,498.159 424.829,505.902 425.415,513.896 426.001,531.433 426.588,540.028 427.174,557.478 427.761,573.628 428.347,596.815 428.933,604.665 429.52,619.224 430.106,627.889 430.693,636.417 431.279,650.794 431.865,676.304 432.452,685.035 433.038,698.832 433.625,707.839 434.211,716.393 434.798,725.314 435.384,738.795 435.97,752.989 436.557,774.691 437.143,787.066 437.73,795.577 438.316,803.889 438.902,812.342 439.489,828.304 440.075,836.448 440.662,844.736 441.248,856.366 441.835,864.487 442.421,881.723 443.007,895.602 443.594,908.51 444.18,921.325 444.767,936.312 445.353,942.43 445.939,953.493 446.526,964.426 447.112,969.899 447.699,980.415 448.285,1000.34 448.871,1009.45 449.458,1016.22 450.044,1025.01 450.631,1029.12 451.217,1033.45 451.804,1039.86 452.39,1045.8 452.976,1049.51 453.563,1055.29 454.149,1058.8 454.736,1064.78 455.322,1076.25 455.908,1083.04 456.495,1091.79 457.081,1096.3 457.668,1104.39 458.254,1108.51 458.84,1113.02 459.427,1119.06 460.013,1124.96 460.6,1128.84 461.186,1132.79 461.773,1138.18 462.359,1139.8 462.945,1150.05 463.532,1156.69 464.118,1159.4 464.705,1165.29 465.291,1166.33 465.877,1170.89 466.464,1171.84 467.05,1172.58 467.637,1175.1 468.223,1176.03 468.809,1180.07 469.396,1183.46 469.982,1183.78 470.569,1184.42 471.155,1185.04 471.742,1187.13 472.328,1187.25 472.914,1189.36 473.501,1191.4 474.087,1193.56 474.674,1192.39 475.26,1191.4 475.846,1195.34 476.433,1196.06 477.019,1202.73 477.606,1205.81 478.192,1205.82 478.778,1208.53 479.365,1207.13 479.951,1210.23 480.538,1213.27 481.124,1214.75 481.711,1214.97 482.297,1216.54 482.883,1219.37 483.47,1222.09 484.056,1223.33 484.643,1224.15 485.229,1224.73 485.815,1225.56 486.402,1230.59 486.988,1229.53 487.575,1230.1 488.161,1230.82 488.748,1231.61 489.334,1230.71 489.92,1232.73 490.507,1233.02 491.093,1234.69 491.68,1235.31 492.266,1232.95 492.852,1233.47 493.439,1232.73 494.025,1234.65 494.612,1234.01 495.198,1233.39 495.784,1231.33 496.371,1232.19 496.957,1231.57 497.544,1229.8 498.13,1228 498.717,1229.06 499.303,1230.2 499.889,1232.18 500.476,1235.6 501.062,1235.9 501.649,1235.32 502.235,1240.02 502.821,1237.48 503.408,1239.13 503.994,1238 504.581,1236.97 505.167,1237.46 505.753,1236.77 506.34,1236.21 506.926,1236.71 507.513,1235.88 508.099,1235.22 508.686,1234.43 509.272,1237.89 509.858,1238.26 510.445,1240 511.031,1236.59 511.618,1235.79 512.204,1238.89 512.79,1239.49 513.377,1240.15 513.963,1239.31 514.55,1238.08 515.136,1235.95 515.722,1239.13 516.309,1239.66 516.895,1242.57 517.482,1242.92 518.068,1244.3 518.655,1244.54 519.241,1244.87 519.827,1244.52 520.414,1245.88 521,1243.45 521.587,1245.98 522.173,1243.35 522.759,1245.76 523.346,1248.19 523.932,1250.53 524.519,1246.67 525.105,1246.35 525.691,1245.01 526.278,1244.96 526.864,1240 527.451,1237.68 528.037,1235.71 528.624,1234.86 529.21,1231.65 529.796,1232.49 530.383,1233.19 530.969,1232.45 531.556,1230.58 532.142,1232.44 532.728,1232.99 533.315,1231.92 533.901,1231.45 534.488,1229.59 535.074,1229.12 535.661,1228.75 536.247,1229.41 536.833,1231.34 537.42,1230.88 538.006,1231.62 538.593,1231.08 539.179,1228.05 539.765,1226.58 540.352,1227.38 540.938,1225.59 541.525,1223.71 542.111,1219.86 542.697,1218.66 543.284,1218.95 543.87,1221.41 544.457,1220.03 545.043,1219.82 545.63,1222.5 546.216,1223.6 546.802,1224.51 547.389,1224.56 547.975,1229.55 548.562,1230.21 549.148,1230.93 549.734,1229.41 550.321,1230.37 550.907,1228.89 551.494,1228.38 552.08,1227.81 552.666,1226.42 553.253,1226.13 553.839,1229.35 554.426,1226.43 555.012,1226 555.599,1226.95 556.185,1228.89 556.771,1228.39 557.358,1228.88 557.944,1228.37 558.531,1229.06 559.117,1228.54 559.703,1224.57 560.29,1223.13 560.876,1224.07 561.463,1223.69 562.049,1220.96 562.635,1220.66 563.222,1218.06 563.808,1219.46 564.395,1219.48 564.981,1219.45 565.568,1220.43 566.154,1221.59 566.74,1224.26 567.327,1222.67 567.913,1223.77 568.5,1219.56 569.086,1219.76 569.672,1220.97 570.259,1222.14 570.845,1221.95 571.432,1225.28 572.018,1224.68 572.605,1225.67 573.191,1228.91 573.777,1228.18 574.364,1225.29 574.95,1226.15 575.537,1223.27 576.123,1224.14 576.709,1223.82 577.296,1221.02 577.882,1219.56 578.469,1219.53 579.055,1220.72 579.641,1221.94 580.228,1219.15 580.814,1217.79 581.401,1217.88 581.987,1219.96 582.574,1218.62 583.16,1218.35 583.746,1215.75 584.333,1218.33 584.919,1218.38 585.506,1219.48 586.092,1220.35 586.678,1216.52 587.265,1216.38 587.851,1218.64 588.438,1219.57 589.024,1220.75 589.61,1220.34 590.197,1221.31 590.783,1223.23 591.37,1225.55 591.956,1225.23 592.543,1224.83 593.129,1224.52 593.715,1225.29 594.302,1222.42 594.888,1221.84 595.475,1220.21 596.061,1223.36 596.647,1221.64 597.234,1221.18 597.82,1223.36 598.407,1222.88 598.993,1225.22 599.579,1224.91 600.166,1226.86 600.752,1226.11 601.339,1227.95 601.925,1228.68 602.512,1230.51 603.098,1228.62 603.684,1229.33 604.271,1227.33 604.857,1226.81 605.444,1224.98 606.03,1224.39 606.616,1222.43 607.203,1224.61 607.789,1224.38 608.376,1226.21 608.962,1226.89 609.548,1228.57 610.135,1226.46 610.721,1228.1 611.308,1227.25 611.894,1224.26 612.481,1223.88 613.067,1219.31 613.653,1222.72 614.24,1224.66 614.826,1223.21 615.413,1227.64 615.999,1228.32 616.585,1226.15 617.172,1225.33 617.758,1223.21 618.345,1224.01 618.931,1222.28 619.518,1221.75 620.104,1220.89 620.69,1219.2 621.277,1218.7 621.863,1214.57 622.45,1214.27 623.036,1214.21 623.622,1214.15 624.209,1211.52 624.795,1211.35 625.382,1208.71 625.968,1208.78 626.554,1208.67 627.141,1207.64 627.727,1208.98 628.314,1206.45 628.9,1208.29 629.487,1209.94 630.073,1209.01 630.659,1209.22 631.246,1206.83 631.832,1208.27 632.419,1208.54 633.005,1207.29 633.591,1210.18 634.178,1210.51 634.764,1210.67 635.351,1211.98 635.937,1210.78 636.523,1210.87 637.11,1210.88 637.696,1209.75 638.283,1209.91 638.869,1204.84 639.456,1206.38 640.042,1205.3 640.628,1205.37 641.215,1204.4 641.801,1202.47 642.388,1204.2 642.974,1203.5 643.56,1205.02 644.147,1204.35 644.733,1205.98 645.32,1206.34 645.906,1207.86 646.492,1207.16 647.079,1204.75 647.665,1207.6 648.252,1210.38 648.838,1207.94 649.425,1210.6 650.011,1209.35 650.597,1209.42 651.184,1209.21 651.77,1209.45 652.357,1210.77 652.943,1212.01 653.529,1213.44 654.116,1213.3 654.702,1213.54 655.289,1213.47 655.875,1212.2 656.462,1209.65 657.048,1209.83 657.634,1209.82 658.221,1208.86 658.807,1208.83 659.394,1209.17 659.98,1211.9 660.566,1212.3 661.153,1212.52 661.739,1213.55 662.326,1211.88 662.912,1213.19 663.498,1213.55 664.085,1213.26 664.671,1213.26 665.258,1217.96 665.844,1216.38 666.431,1215.17 667.017,1218.48 667.603,1216.87 668.19,1216.66 668.776,1213.87 669.363,1214.8 669.949,1215.65 670.535,1213.2 671.122,1215.46 671.708,1216.54 672.295,1219.79 672.881,1219.28 673.467,1218.77 674.054,1219.39 674.64,1219.87 675.227,1219.47 675.813,1220.21 676.4,1220.77 676.986,1222.45 677.572,1220.63 678.159,1219.86 678.745,1219.57 679.332,1217.71 679.918,1216.95 680.504,1216.24 681.091,1218.4 681.677,1218.99 682.264,1220.93 682.85,1215.59 683.436,1215.39 684.023,1215.24 684.609,1216.07 685.196,1213.51 685.782,1213.48 686.369,1209.47 686.955,1210.62 687.541,1210.54 688.128,1209.21 688.714,1209.24 689.301,1207.88 689.887,1208.04 690.473,1210.69 691.06,1211.69 691.646,1209.09 692.233,1214.05 692.819,1217.63 693.405,1218.46 693.992,1220.55 694.578,1218.81 695.165,1218.42 695.751,1212.97 696.338,1218.92 696.924,1218.63 697.51,1216.8 698.097,1214.97 698.683,1216.03 699.27,1215.44 699.856,1216.19 700.442,1218.21 701.029,1216.85 701.615,1212.71 702.202,1208.79 702.788,1210.06 703.375,1208.56 703.961,1208.49 704.547,1206.11 705.134,1205.02 705.72,1204.03 706.307,1206.8 706.893,1204.46 707.479,1199.7 708.066,1199.02 708.652,1198.16 709.239,1198.45 709.825,1201.42 710.411,1204.26 710.998,1205.59 711.584,1204.69 712.171,1206.03 712.757,1203.65 713.344,1205.28 713.93,1203.28 714.516,1204.82 715.103,1206.04 715.689,1207.2 716.276,1209.42 716.862,1209.3 717.448,1211.59 718.035,1210.07 718.621,1209.89 719.208,1208.78 719.794,1208.75 720.38,1208.3 720.967,1208.17 721.553,1208.18 722.14,1207.04 722.726,1209.42 723.313,1210.6 723.899,1209.14 724.485,1207.67 725.072,1208.77 725.658,1207.47 726.245,1207.55 726.831,1208.7 727.417,1207.34 728.004,1205.98 728.59,1205.76 729.177,1206.95 729.763,1203.18 730.349,1204.76 730.936,1205.12 731.522,1203.88 732.109,1205.34 732.695,1205.36 733.282,1206.95 733.868,1205.64 734.454,1204.68 735.041,1205.01 735.627,1202.54 736.214,1201.54 736.8,1201.86 737.386,1200.84 737.973,1202.29 738.559,1202.53 739.146,1202.76 739.732,1203 740.318,1205.56 740.905,1205.7 741.491,1205.87 742.078,1207.43 742.664,1209 743.251,1206.33 743.837,1208.74 744.423,1209.86 745.01,1209.67 745.596,1208.23 746.183,1206.66 746.769,1206.66 747.355,1207.04 747.942,1204.94 748.528,1203.85 749.115,1204.01 749.701,1204.1 750.288,1205.67 750.874,1211.64 751.46,1212.63 752.047,1211.17 752.633,1210.8 753.22,1210.72 753.806,1207.77 754.392,1208.93 754.979,1211.04 755.565,1212.06 756.152,1211.96 756.738,1210.26 757.324,1211.24 757.911,1209.69 758.497,1210.75 759.084,1210.65 759.67,1209.35 760.257,1209.02 760.843,1208.85 761.429,1206.35 762.016,1207.6 762.602,1208.69 763.189,1209.93 763.775,1209.78 764.361,1213.4 764.948,1210.76 765.534,1211.77 766.121,1211.56 766.707,1212.67 767.293,1212.16 767.88,1208.05 768.466,1208.18 769.053,1210.61 769.639,1211.74 770.226,1212.58 770.812,1210.98 771.398,1210.62 771.985,1209.15 772.571,1210.37 773.158,1207.65 773.744,1208.78 774.33,1208.53 774.917,1209.75 775.503,1212.08 776.09,1211.82 776.676,1212.66 777.262,1213.4 777.849,1209.3 778.435,1212.72 779.022,1210.94 779.608,1212.19 780.195,1213.19 780.781,1215.35 781.367,1218.52 781.954,1218.96 782.54,1217.07 783.127,1216.53 783.713,1214.82 784.299,1214.25 784.886,1213.7 785.472,1210.68 786.059,1210.46 786.645,1210.49 787.232,1209.1 787.818,1209.96 788.404,1212.05 788.991,1213.03 789.577,1214.27 790.164,1213.64 790.75,1211.93 791.336,1209.12 791.923,1209.09 792.509,1211.29 793.096,1209.82 793.682,1210.96 794.268,1209.4 794.855,1208.16 795.441,1205.75 796.028,1206.98 796.614,1205.66 797.201,1206.68 797.787,1205.12 798.373,1210.05 798.96,1212.63 799.546,1213.4 800.133,1211.9 800.719,1211.72 801.305,1210.29 801.892,1208.68 802.478,1204.86 803.065,1206.31 803.651,1206.41 804.237,1206.4 804.824,1205.2 805.41,1205.29 805.997,1206.36 806.583,1206.44 807.17,1207.82 807.756,1208.8 808.342,1210.19 808.929,1211.21 809.515,1209.73 810.102,1209.68 810.688,1208.38 811.274,1207.31 811.861,1207.23 812.447,1208.52 813.034,1208.44 813.62,1205.9 814.206,1206.18 814.793,1204.77 815.379,1205.89 815.966,1205.9 816.552,1204.88 817.139,1207.57 817.725,1209.9 818.311,1207.4 818.898,1208.34 819.484,1208.12 820.071,1209.3 820.657,1211.47 821.243,1208.71 821.83,1207.42 822.416,1207.47 823.003,1204.98 823.589,1202.52 824.175,1200.16 824.762,1201.63 825.348,1206.9 825.935,1205.6 826.521,1204.31 827.108,1205.52 827.694,1206.73 828.28,1206.61 828.867,1210.31 829.453,1211.13 830.04,1211.11 830.626,1209.55 831.212,1209.51 831.799,1208.05 832.385,1207.92 832.972,1206.54 833.558,1205.58 834.145,1207.92 834.731,1206.59 835.317,1205.28 835.904,1205.08 836.49,1203.67 837.077,1202.6 837.663,1202.88 838.249,1201.56 838.836,1204.48 839.422,1204.39 840.009,1203.39 840.595,1207.23 841.181,1207.23 841.768,1205.88 842.354,1205.99 842.941,1205.9 843.527,1207.23 844.114,1208.6 844.7,1207.2 845.286,1210.98 845.873,1211.88 846.459,1211.33 847.046,1212.44 847.632,1213.4 848.218,1214.23 848.805,1214.93 849.391,1214.21 849.978,1214.9 850.564,1214.23 851.15,1214.74 851.737,1214.16 852.323,1214.93 852.91,1213.15 853.496,1210.05 854.083,1209.87 854.669,1213.32 855.255,1211.8 855.842,1211.45 856.428,1213.56 857.015,1211.82 857.601,1208.87 858.187,1210.07 858.774,1209.61 859.36,1211.87 859.947,1208.32 860.533,1206.95 861.119,1205.52 861.706,1204.2 862.292,1206.92 862.879,1205.7 863.465,1204.45 864.052,1202.06 864.638,1199.79 865.224,1201.3 865.811,1201.41 866.397,1199 866.984,1204.26 867.57,1202.91 868.156,1201.75 868.743,1201.87 869.329,1200.66 869.916,1200.95 870.502,1202.46 871.089,1202.41 871.675,1202.57 872.261,1202.63 872.848,1205.34 873.434,1205.27 874.021,1207.83 874.607,1206.53 875.193,1206.48 875.78,1208.75 876.366,1209.81 876.953,1207.1 877.539,1206.95 878.125,1206.69 878.712,1206.85 879.298,1205.6 879.885,1206.78 880.471,1208.95 881.058,1208.78 881.644,1208.5 882.23,1208.55 882.817,1208.58 883.403,1205.69 883.99,1206.86 884.576,1210.38 885.162,1211.33 885.749,1208.67 886.335,1206.11 886.922,1206.08 887.508,1203.43 888.094,1202.3 888.681,1202.82 889.267,1204.18 889.854,1204.29 890.44,1201.96 891.027,1201 891.613,1202.42 892.199,1201.59 892.786,1200.7 893.372,1199.58 893.959,1201.13 894.545,1201.3 895.131,1201.86 895.718,1200.74 896.304,1202.19 896.891,1204.76 897.477,1204.81 898.063,1204.82 898.65,1207.28 899.236,1203.17 899.823,1204.51 900.409,1208.72 900.996,1204.78 901.582,1201.27 902.168,1200.05 902.755,1202.82 903.341,1202.93 903.928,1201.94 904.514,1203.34 905.1,1204.82 905.687,1204.98 906.273,1204.96 906.86,1206.24 907.446,1206.1 908.032,1204.56 908.619,1202.1 909.205,1202.18 909.792,1201.03 910.378,1199.7 910.965,1201.27 911.551,1200.26 912.137,1199.09 912.724,1199.52 913.31,1199.99 913.897,1200.09 914.483,1198.08 915.069,1198.22 915.656,1201.03 916.242,1202.28 916.829,1206.08 917.415,1205.93 918.002,1205.98 918.588,1204.62 919.174,1205.84 919.761,1207.26 920.347,1204.82 920.934,1203.31 921.52,1203.32 922.106,1202.06 922.693,1203.34 923.279,1202.29 923.866,1203.57 924.452,1203.77 925.038,1205.13 925.625,1205.06 926.211,1203.93 926.798,1203.69 927.384,1205.18 927.971,1203.93 928.557,1202.7 929.143,1201.52 929.73,1201.63 930.316,1200.52 930.903,1200.93 931.489,1200.35 932.075,1199.28 932.662,1199.65 933.248,1201.07 933.835,1201.13 934.421,1203.68 935.007,1203.7 935.594,1203.84 936.18,1206.27 936.767,1206.18 937.353,1204.7 937.94,1204.7 938.526,1204.48 939.112,1203.32 939.699,1202.32 940.285,1202.45 940.872,1202.38 941.458,1202.7 942.044,1204.2 942.631,1204.2 943.217,1203.04 943.804,1203.09 944.39,1204.69 944.976,1204.81 945.563,1208.65 946.149,1207.46 946.736,1202.43 947.322,1204.98 947.909,1207.47 948.495,1207.19 949.081,1205.85 949.668,1205.85 950.254,1206.86 950.841,1205.64 951.427,1204.39 952.013,1204.42 952.6,1204.4 953.186,1205.67 953.773,1206.79 954.359,1205.6 954.945,1205.59 955.532,1204.27 956.118,1205.5 956.705,1202.73 957.291,1202.76 957.878,1205.04 958.464,1203.79 959.05,1202.5 959.637,1202.76 960.223,1203.14 960.81,1203.46 961.396,1199.88 961.982,1197.55 962.569,1199.25 963.155,1199.6 963.742,1202.38 964.328,1202.4 964.915,1202.52 965.501,1202.74 966.087,1206.38 966.674,1207.53 967.26,1208.64 967.847,1208.36 968.433,1210.66 969.019,1210.44 969.606,1210.34 970.192,1210.09 970.779,1211.12 971.365,1210.88 971.951,1211.72 972.538,1207.67 973.124,1206.28 973.711,1206.47 974.297,1204.01 974.884,1206.38 975.47,1207.58 976.056,1208.71 976.643,1208.33 977.229,1205.5 977.816,1204.14 978.402,1205.3 978.988,1206.16 979.575,1203.61 980.161,1204.85 980.748,1203.54 981.334,1203.58 981.92,1204.93 982.507,1205.12 983.093,1206.36 983.68,1203.71 984.266,1200.05 984.853,1199.76 985.439,1202.46 986.025,1202.31 986.612,1202.39 987.198,1201.33 987.785,1201.3 988.371,1200.17 988.957,1199.32 989.544,1199.5 990.13,1198.54 990.717,1197.69 991.303,1198.15 991.889,1198.61 992.476,1198.77 993.062,1200.34 993.649,1201.67 994.235,1203.19 994.822,1202.19 995.408,1203.42 995.994,1203.63 996.581,1203.78 997.167,1205.1 997.754,1205.15 998.34,1205.23 998.926,1203.87 999.513,1205.16 1000.1,1205.14 1000.69,1201.48 1001.27,1199.14 1001.86,1200.83 1002.44,1200.66 1003.03,1200.71 1003.62,1199.46 1004.2,1202.08 1004.79,1203.43 1005.38,1202.18 1005.96,1200.99 1006.55,1201.2 1007.14,1198.8 1007.72,1200.19 1008.31,1200.51 1008.9,1201.93 1009.48,1204.41 1010.07,1204.37 1010.65,1205.71 1011.24,1205.66 1011.83,1205.74 1012.41,1205.56 1013,1205.26 1013.59,1205.12 1014.17,1207.67 1014.76,1208.78 1015.35,1205.93 1015.93,1206.92 1016.52,1205.39 1017.11,1205.23 1017.69,1203.81 1018.28,1207.59 1018.86,1207.37 1019.45,1206.11 1020.04,1208.4 1020.62,1209.25 1021.21,1208.88 1021.8,1208.5 1022.38,1210.96 1022.97,1213.33 1023.56,1216.66 1024.14,1215.97 1024.73,1215.04 1025.32,1213.33 1025.9,1211.82 1026.49,1210.2 1027.07,1209.6 1027.66,1211.56 1028.25,1213.62 1028.83,1215.48 1029.42,1214.82 1030.01,1214.25 1030.59,1212.5 1031.18,1212.02 1031.77,1211.85 1032.35,1213.04 1032.94,1213.86 1033.52,1212.05 1034.11,1211.67 1034.7,1211.28 1035.28,1208.26 1035.87,1206.96 1036.46,1205.74 1037.04,1204.56 1037.63,1205.71 1038.22,1204.63 1038.8,1203.18 1039.39,1199.54 1039.98,1198.52 1040.56,1198.84 1041.15,1197.94 1041.73,1198.42 1042.32,1197.38 1042.91,1197.74 1043.49,1196.91 1044.08,1197.08 1044.67,1198.34 1045.25,1199.75 1045.84,1198.87 1046.43,1197.82 1047.01,1196.95 1047.6,1197.45 1048.19,1196.55 1048.77,1196.9 1049.36,1197.29 1049.94,1196.68 1050.53,1198.13 1051.12,1197.22 1051.7,1198.59 1052.29,1202.51 1052.88,1198.93 1053.46,1198.95 1054.05,1197.85 1054.64,1196.87 1055.22,1196.12 1055.81,1196.43 1056.39,1200.43 1056.98,1203.39 1057.57,1203.43 1058.15,1202.26 1058.74,1203.56 1059.33,1204.78 1059.91,1206.07 1060.5,1204.86 1061.09,1204.8 1061.67,1203.5 1062.26,1203.51 1062.85,1206.2 1063.43,1207.31 1064.02,1207.04 1064.6,1207.8 1065.19,1209.13 1065.78,1212.56 1066.36,1210.85 1066.95,1208.11 1067.54,1207.87 1068.12,1206.35 1068.71,1204.92 1069.3,1202.28 1069.88,1202.21 1070.47,1202.15 1071.06,1201.14 1071.64,1202.58 1072.23,1205.16 1072.81,1204.93 1073.4,1203.75 1073.99,1204.66 1074.57,1203.42 1075.16,1203.62 1075.75,1206.23 1076.33,1207.14 1076.92,1210.69 1077.51,1210.08 1078.09,1213.11 1078.68,1213.68 1079.26,1211.82 1079.85,1211.49 1080.44,1208.8 1081.02,1206.23 1081.61,1206.11 1082.2,1207.45 1082.78,1206.22 1083.37,1203.55 1083.96,1204.96 1084.54,1207.4 1085.13,1205.83 1085.72,1205.73 1086.3,1208.03 1086.89,1205.34 1087.47,1207.9 1088.06,1206.6 1088.65,1205.15 1089.23,1204.19 1089.82,1202.84 1090.41,1201.53 1090.99,1202.63 1091.58,1202.5 1092.17,1201.52 1092.75,1201.93 1093.34,1200.68 1093.93,1199.62 1094.51,1200.08 1095.1,1200.47 1095.68,1199.55 1096.27,1201.16 1096.86,1202.49 1097.44,1201.26 1098.03,1201.23 1098.62,1201.42 1099.2,1202.9 1099.79,1202.85 1100.38,1201.63 1100.96,1201.49 1101.55,1201.79 1102.14,1204.25 1102.72,1201.72 1103.31,1202.77 1103.89,1203.86 1104.48,1205.06 1105.07,1201.36 1105.65,1196.61 1106.24,1196.87 1106.83,1199.72 1107.41,1199.71 1108,1198.73 1108.59,1198.96 1109.17,1199.05 1109.76,1201.79 1110.34,1200.88 1110.93,1203.64 1111.52,1203.61 1112.1,1202.58 1112.69,1202.62 1113.28,1201.64 1113.86,1201.73 1114.45,1200.98 1115.04,1201.17 1115.62,1200.25 1116.21,1200.33 1116.8,1200.73 1117.38,1198.59 1117.97,1201.11 1118.55,1199.81 1119.14,1198.74 1119.73,1200.15 1120.31,1201.68 1120.9,1200.54 1121.49,1199.47 1122.07,1201.23 1122.66,1201.26 1123.25,1200.21 1123.83,1202.59 1124.42,1206.31 1125.01,1207.34 1125.59,1206.02 1126.18,1205.77 1126.76,1206.71 1127.35,1209.1 1127.94,1208.95 1128.52,1211.07 1129.11,1211.77 1129.7,1211.28 1130.28,1209.37 1130.87,1208.15 1131.46,1207.95 1132.04,1207.68 1132.63,1206.16 1133.21,1202.24 1133.8,1202.19 1134.39,1200.88 1134.97,1201.99 1135.56,1200.78 1136.15,1200.72 1136.73,1201.94 1137.32,1203.25 1137.91,1203.19 1138.49,1201.92 1139.08,1202.09 1139.67,1202.3 1140.25,1200.21 1140.84,1199.16 1141.42,1200.44 1142.01,1201.75 1142.6,1201.74 1143.18,1204.29 1143.77,1202.99 1144.36,1201.78 1144.94,1200.88 1145.53,1202.4 1146.12,1206.04 1146.7,1204.72 1147.29,1204.82 1147.88,1202.04 1148.46,1203.49 1149.05,1203.35 1149.63,1196.97 1150.22,1195.06 1150.81,1196.69 1151.39,1198.25 1151.98,1198.58 1152.57,1200.24 1153.15,1201.44 1153.74,1200.26 1154.33,1199.09 1154.91,1201.74 1155.5,1204.16 1156.09,1201.75 1156.67,1199.52 1157.26,1200.99 1157.84,1201.18 1158.43,1199.1 1159.02,1200.6 1159.6,1203.15 1160.19,1200.86 1160.78,1202.39 1161.36,1204.93 1161.95,1205.06 1162.54,1204.83 1163.12,1205.04 1163.71,1203.81 1164.29,1202.55 1164.88,1202.49 1165.47,1201.41 1166.05,1202.98 1166.64,1205.46 1167.23,1204.02 1167.81,1203.82 1168.4,1206.32 1168.99,1206.18 1169.57,1207.32 1170.16,1206.1 1170.75,1201.09 1171.33,1201.29 1171.92,1202.79 1172.5,1201.68 1173.09,1202.07 1173.68,1202.33 1174.26,1203.63 1174.85,1203.74 1175.44,1204.74 1176.02,1203.29 1176.61,1202.4 1177.2,1202.4 1177.78,1202.5 1178.37,1203.68 1178.96,1206.22 1179.54,1203.61 1180.13,1203.76 1180.71,1205.06 1181.3,1203.66 1181.89,1204.95 1182.47,1207.23 1183.06,1207.19 1183.65,1205.82 1184.23,1205.68 1184.82,1203.31 1185.41,1203.21 1185.99,1205.73 1186.58,1204.59 1187.16,1207.08 1187.75,1211.87 1188.34,1211.57 1188.92,1212.55 1189.51,1212.33 1190.1,1212.91 1190.68,1209.81 1191.27,1209.23 1191.86,1208.97 1192.44,1210.1 1193.03,1211.05 1193.62,1213.07 1194.2,1212.42 1194.79,1209.46 1195.37,1208.87 1195.96,1209.64 1196.55,1209.37 1197.13,1210.55 1197.72,1210.21 1198.31,1208.66 1198.89,1209.42 1199.48,1206.68 1200.07,1207.64 1200.65,1208.61 1201.24,1209.51 1201.83,1209.49 1202.41,1206.86 1203,1205.43 1203.58,1205.03 1204.17,1206.1 1204.76,1205.93 1205.34,1204.51 1205.93,1205.65 1206.52,1209.09 1207.1,1208.82 1207.69,1210.76 1208.28,1211.68 1208.86,1209.72 1209.45,1208.03 1210.03,1207.65 1210.62,1208.51 1211.21,1204.64 1211.79,1202.1 1212.38,1201.01 1212.97,1203.64 1213.55,1203.41 1214.14,1207.38 1214.73,1206.09 1215.31,1206.23 1215.9,1204.91 1216.49,1207.08 1217.07,1209.26 1217.66,1206.5 1218.24,1207.75 1218.83,1208.73 1219.42,1209.56 1220,1206.53 1220.59,1208.83 1221.18,1207.12 1221.76,1206.98 1222.35,1206.99 1222.94,1209.2 1223.52,1210.25 1224.11,1209.77 1224.7,1209.3 1225.28,1210.35 1225.87,1207.16 1226.45,1207.06 1227.04,1208.06 1227.63,1204 1228.21,1200.5 1228.8,1201.65 1229.39,1199.3 1229.97,1198.28 1230.56,1199.82 1231.15,1200.21 1231.73,1199.15 1232.32,1199.27 1232.91,1198.18 1233.49,1197.31 1234.08,1196.8 1234.66,1196.06 1235.25,1199.29 1235.84,1199.41 1236.42,1195.88 1237.01,1192.67 1237.6,1194.21 1238.18,1195.94 1238.77,1196.49 1239.36,1199.53 1239.94,1199.59 1240.53,1200.98 1241.11,1201.09 1241.7,1199.65 1242.29,1201.02 1242.87,1201.14 1243.46,1203.82 1244.05,1203.83 1244.63,1202.29 1245.22,1200.97 1245.81,1204.97 1246.39,1204.87 1246.98,1201.19 1247.57,1202.63 1248.15,1203.94 1248.74,1205.11 1249.32,1207.28 1249.91,1210.46 1250.5,1210.18 1251.08,1209.96 1251.67,1210.54 1252.26,1210.24 1252.84,1211.37 1253.43,1208.47 1254.02,1208.21 1254.6,1202.9 1255.19,1201.67 1255.78,1200.65 1256.36,1200.58 1256.95,1202.13 1257.53,1203.43 1258.12,1201.03 1258.71,1201.41 1259.29,1201.26 1259.88,1201.27 1260.47,1199.92 1261.05,1200.11 1261.64,1199.05 1262.23,1200.64 1262.81,1200.67 1263.4,1200 1263.98,1199.04 1264.57,1198.04 1265.16,1198.37 1265.74,1198.76 1266.33,1200.36 1266.92,1199.47 1267.5,1199.82 1268.09,1201.52 1268.68,1204.2 1269.26,1205.36 1269.85,1204.25 1270.44,1204.53 1271.02,1205.48 1271.61,1204.29 1272.19,1205.31 1272.78,1209.23 1273.37,1208.74 1273.95,1208.47 1274.54,1208.02 1275.13,1207.81 1275.71,1205.19 1276.3,1205.08 1276.89,1206.3 1277.47,1207.38 1278.06,1208.4 1278.65,1208.11 1279.23,1207.98 1279.82,1209.1 1280.4,1207.81 1280.99,1207.49 1281.58,1207.2 1282.16,1208.41 1282.75,1208.2 1283.34,1210.72 1283.92,1207.75 1284.51,1205.22 1285.1,1205.28 1285.68,1201.45 1286.27,1201.56 1286.86,1202.94 1287.44,1202.94 1288.03,1202.99 1288.61,1204.19 1289.2,1204.16 1289.79,1205.68 1290.37,1206.24 1290.96,1204.57 1291.55,1204.49 1292.13,1204.49 1292.72,1205.47 1293.31,1203.93 1293.89,1200.13 1294.48,1200.37 1295.06,1201.67 1295.65,1203.04 1296.24,1204.43 1296.82,1202.98 1297.41,1200.56 1298,1205.84 1298.58,1205.73 1299.17,1204.48 1299.76,1203.32 1300.34,1200.9 1300.93,1199.67 1301.52,1200.08 1302.1,1202.85 1302.69,1203.99 1303.27,1205.13 1303.86,1203.94 1304.45,1205.25 1305.03,1205.18 1305.62,1203.96 1306.21,1206.44 1306.79,1207.47 1307.38,1207.15 1307.97,1206.76 1308.55,1204.41 1309.14,1204.33 1309.73,1200.88 1310.31,1203.54 1310.9,1203.61 1311.48,1200.92 1312.07,1200.96 1312.66,1199.74 1313.24,1199.77 1313.83,1203.77 1314.42,1203.87 1315,1203.8 1315.59,1203.69 1316.18,1203.71 1316.76,1205.03 1317.35,1206.27 1317.93,1206.18 1318.52,1206.28 1319.11,1206.23 1319.69,1204.75 1320.28,1202.2 1320.87,1202.21 1321.45,1201.12 1322.04,1199.9 1322.63,1198.52 1323.21,1200.04 1323.8,1201.43 1324.39,1202.89 1324.97,1206.5 1325.56,1207.69 1326.14,1207.43 1326.73,1208.3 1327.32,1211.71 1327.9,1213.54 1328.49,1212.86 1329.08,1207.19 1329.66,1203.17 1330.25,1202.02 1330.84,1202.22 1331.42,1203.64 1332.01,1200.91 1332.6,1199.86 1333.18,1202.48 1333.77,1202.5 1334.35,1201.19 1334.94,1200.21 1335.53,1201.44 1336.11,1201.61 1336.7,1202.48 1337.29,1201.32 1337.87,1201.38 1338.46,1199.11 1339.05,1201.96 1339.63,1202 1340.22,1200.75 1340.8,1200.98 1341.39,1201.08 1341.98,1202.54 1342.56,1202.67 1343.15,1202.48 1343.74,1205.04 1344.32,1202.43 1344.91,1198.76 1345.5,1199.26 1346.08,1197 1346.67,1197.35 1347.26,1201.2 1347.84,1200.42 1348.43,1200.39 1349.01,1203.08 1349.6,1202.06 1350.19,1203.4 1350.77,1203.49 1351.36,1201.88 1351.95,1203.22 1352.53,1204.51 1353.12,1203.45 1353.71,1204.98 1354.29,1207.75 1354.88,1210.03 1355.47,1209.67 1356.05,1208.36 1356.64,1209.57 1357.22,1209.16 1357.81,1207.75 1358.4,1204.96 1358.98,1206.29 1359.57,1206.21 1360.16,1205.88 1360.74,1204.47 1361.33,1207.02 1361.92,1204.23 1362.5,1202.86 1363.09,1202.82 1363.68,1202.73 1364.26,1205.49 1364.85,1205.32 1365.43,1206.57 1366.02,1205.19 1366.61,1206.36 1367.19,1205.24 1367.78,1206.6 1368.37,1205.36 1368.95,1205.43 1369.54,1203.07 1370.13,1205.43 1370.71,1205.33 1371.3,1202.84 1371.88,1199.1 1372.47,1200.43 1373.06,1198.21 1373.64,1199.75 1374.23,1199.91 1374.82,1201.46 1375.4,1203.09 1375.99,1204.57 1376.58,1203.69 1377.16,1205.01 1377.75,1204.8 1378.34,1202.16 1378.92,1199.92 1379.51,1200.08 1380.09,1200.3 1380.68,1200.38 1381.27,1200.78 1381.85,1199.63 1382.44,1201.01 1383.03,1198.6 1383.61,1199.2 1384.2,1200.76 1384.79,1202.22 1385.37,1202.29 1385.96,1201.12 1386.55,1202.57 1387.13,1200.2 1387.72,1201.59 1388.3,1202.77 1388.89,1201.6 1389.48,1202.79 1390.06,1203.02 1390.65,1203.2 1391.24,1205.75 1391.82,1203.29 1392.41,1204.4 1393,1204.45 1393.58,1203.55 1394.17,1204.83 1394.75,1202.32 1395.34,1201.22 1395.93,1201.19 1396.51,1201.54 1397.1,1202.65 1397.69,1205.01 1398.27,1204.75 1398.86,1203.49 1399.45,1203.41 1400.03,1204.67 1400.62,1203.67 1401.21,1203.78 1401.79,1206.32 1402.38,1206.32 1402.96,1205.07 1403.55,1205.26 1404.14,1205.16 1404.72,1203.78 1405.31,1204.95 1405.9,1204.86 1406.48,1208.08 1407.07,1209.2 1407.66,1207.7 1408.24,1209.79 1408.83,1210.55 1409.42,1207.57 1410,1206.13 1410.59,1204.63 1411.17,1203.11 1411.76,1204.3 1412.35,1202.91 1412.93,1201.5 1413.52,1202.8 1414.11,1202.95 1414.69,1204.28 1415.28,1206.5 1415.87,1204.92 1416.45,1205.87 1417.04,1205.98 1417.63,1203.44 1418.21,1202.51 1418.8,1201.25 1419.38,1198.79 1419.97,1198.96 1420.56,1195.18 1421.14,1196.83 1421.73,1198.27 1422.32,1198.55 1422.9,1198.7 1423.49,1198.91 1424.08,1196.69 1424.66,1194.44 1425.25,1195.95 1425.83,1195.1 1426.42,1196.73 1427.01,1194.56 1427.59,1194.86 1428.18,1196.61 1428.77,1197.08 1429.35,1198.72 1429.94,1199.05 1430.53,1200.79 1431.11,1201.07 1431.7,1202.43 1432.29,1205.04 1432.87,1204.83 1433.46,1202.27 1434.04,1200.16 1434.63,1200.11 1435.22,1201.44 1435.8,1202.73 1436.39,1201.8 1436.98,1200.81 1437.56,1201.11 1438.15,1201.44 1438.74,1201.51 1439.32,1201.29 1439.91,1202.93 1440.5,1204.21 1441.08,1206.66 1441.67,1206.54 1442.25,1203.76 1442.84,1206.16 1443.43,1204.78 1444.01,1206.18 1444.6,1202.36 1445.19,1199.93 1445.77,1197.72 1446.36,1197.99 1446.95,1201.79 1447.53,1202.01 1448.12,1200.75 1448.7,1199.68 1449.29,1199.93 1449.88,1201.07 1450.46,1202.45 1451.05,1202.75 1451.64,1207.88 1452.22,1207.73 1452.81,1208.8 1453.4,1210.85 1453.98,1207.93 1454.57,1208.6 1455.16,1206.84 1455.74,1205.37 1456.33,1203.98 1456.91,1203.98 1457.5,1205.99 1458.09,1204.37 1458.67,1204.35 1459.26,1203.05 1459.85,1204.39 1460.43,1205.26 1461.02,1204.02 1461.61,1203.92 1462.19,1203.68 1462.78,1205.07 1463.37,1207.21 1463.95,1207.15 1464.54,1205.7 1465.12,1204.27 1465.71,1203.11 1466.3,1201.89 1466.88,1200.69 1467.47,1200.73 1468.06,1201.98 1468.64,1202.29 1469.23,1202.34 1469.82,1202.44 1470.4,1201.3 1470.99,1199.18 1471.57,1200.9 1472.16,1200.02 1472.75,1201.55 1473.33,1200.65 1473.92,1198.34 1474.51,1197.58 1475.09,1197.93 1475.68,1199.85 1476.27,1201.27 1476.85,1201.55 1477.44,1203.07 1478.03,1203.1 1478.61,1203.22 1479.2,1203.05 1479.78,1201.88 1480.37,1201.85 1480.96,1205.62 1481.54,1204.36 1482.13,1203.01 1482.72,1203 1483.3,1201.75 1483.89,1201.86 1484.48,1202.15 1485.06,1202.31 1485.65,1202.81 1486.24,1200.19 1486.82,1200.29 1487.41,1201.84 1487.99,1201.89 1488.58,1203.27 1489.17,1203.26 1489.75,1204.72 1490.34,1204.8 1490.93,1204.61 1491.51,1206.87 1492.1,1205.56 1492.69,1206.49 1493.27,1204.99 1493.86,1204.99 1494.45,1204.94 1495.03,1202.11 1495.62,1202.19 1496.2,1204.84 1496.79,1204.93 1497.38,1206.16 1497.96,1207.45 1498.55,1207.13 1499.14,1212.97 1499.72,1215.26 1500.31,1215.85 1500.9,1215.23 1501.48,1215.96 1502.07,1216.42 1502.65,1214.39 1503.24,1211.44 1503.83,1211.24 1504.41,1209.83 1505,1210.75 1505.59,1206.83 1506.17,1203.09 1506.76,1204.08 1507.35,1202.71 1507.93,1204.11 1508.52,1203.9 1509.11,1202.7 1509.69,1202.63 1510.28,1202.5 1510.86,1202.67 1511.45,1200.06 1512.04,1198.84 1512.62,1199.15 1513.21,1198.02 1513.8,1199.58 1514.38,1202.27 1514.97,1202.28 1515.56,1202.4 1516.14,1201.01 1516.73,1202.4 1517.32,1201.22 1517.9,1201.44 1518.49,1202.86 1519.07,1202.41 1519.66,1202.4 1520.25,1204.77 1520.83,1202.1 1521.42,1202.39 1522.01,1202.21 1522.59,1201.16 1523.18,1202.6 1523.77,1201.59 1524.35,1199.15 1524.94,1199.38 1525.52,1199.91 1526.11,1199.94 1526.7,1201.33 1527.28,1201.66 1527.87,1201.62 1528.46,1200.33 1529.04,1202.65 1529.63,1202.72 1530.22,1201.87 1530.8,1202.06 1531.39,1203.42 1531.98,1204.65 1532.56,1205.76 1533.15,1203.38 1533.73,1205.79 1534.32,1205.84 1534.91,1203.07 1535.49,1202.9 1536.08,1205.36 1536.67,1203.93 1537.25,1201.56 1537.84,1201.68 1538.43,1200.31 1539.01,1201.69 1539.6,1197.94 1540.19,1199.22 1540.77,1200.79 1541.36,1203.3 1541.94,1202.21 1542.53,1198.77 1543.12,1198.88 1543.7,1199.09 1544.29,1202.93 1544.88,1201.72 1545.46,1201.95 1546.05,1203.35 1546.64,1200.91 1547.22,1197.6 1547.81,1197.95 1548.4,1198.67 1548.98,1199.25 1549.57,1204.11 1550.15,1204.29 1550.74,1204.35 1551.33,1204.48 1551.91,1204.44 1552.5,1204.64 1553.09,1207.28 1553.67,1207.19 1554.26,1204.62 1554.85,1201.99 1555.43,1202.01 1556.02,1203.37 1556.6,1202.25 1557.19,1201.01 1557.78,1198.68 1558.36,1199.97 1558.95,1200.31 1559.54,1199.29 1560.12,1198.43 1560.71,1198.82 1561.3,1196.54 1561.88,1195.62 1562.47,1196.14 1563.06,1195.4 1563.64,1195.78 1564.23,1195.82 1564.81,1197.37 1565.4,1197.66 1565.99,1199.07 1566.57,1199.59 1567.16,1200.05 1567.75,1202.73 1568.33,1201.49 1568.92,1197.78 1569.51,1198.05 1570.09,1197.01 1570.68,1198.79 1571.27,1200.24 1571.85,1201.62 1572.44,1203.27 1573.02,1203.45 1573.61,1202.07 1574.2,1200.96 1574.78,1198.6 1575.37,1199.96 1575.96,1201.09 1576.54,1200.03 1577.13,1201.49 1577.72,1201.61 1578.3,1199.12 1578.89,1200.7 1579.47,1199.54 1580.06,1202.2 1580.65,1202.4 1581.23,1205.97 1581.82,1208.43 1582.41,1209.27 1582.99,1210.04 1583.58,1209.72 1584.17,1208.93 1584.75,1207.36 1585.34,1205.88 1585.93,1206.95 1586.51,1205.71 1587.1,1208.16 1587.68,1208.87 1588.27,1208.55 1588.86,1206.86 1589.44,1204.15 1590.03,1204.18 1590.62,1203.94 1591.2,1202.69 1591.79,1201.69 1592.38,1203.2 1592.96,1204.48 1593.55,1206.87 1594.14,1208.98 1594.72,1207.79 1595.31,1207.66 1595.89,1205.05 1596.48,1206.38 1597.07,1206.03 1597.65,1207.47 1598.24,1208.55 1598.83,1207.17 1599.41,1209.17 1600,1205.17 1600.59,1205.34 1601.17,1203.9 1601.76,1201.73 1602.34,1204.32 1602.93,1206.76 1603.52,1206.64 1604.1,1206.54 1604.69,1205.14 1605.28,1206.15 1605.86,1207.13 1606.45,1206.81 1607.04,1207.83 1607.62,1206.32 1608.21,1204.86 1608.8,1202.14 1609.38,1203.34 1609.97,1205.57 1610.55,1206.76 1611.14,1206.47 1611.73,1206.42 1612.31,1206.21 1612.9,1208.57 1613.49,1207.79 1614.07,1207.25 1614.66,1207 1615.25,1206.84 1615.83,1205.57 1616.42,1206.72 1617.01,1206.5 1617.59,1206.5 1618.18,1205.27 1618.76,1203.91 1619.35,1202.61 1619.94,1202.69 1620.52,1200.27 1621.11,1200.28 1621.7,1202.67 1622.28,1201.4 1622.87,1203.99 1623.46,1205.02 1624.04,1202.54 1624.63,1203.63 1625.22,1203.62 1625.8,1203.66 1626.39,1202.16 1626.97,1202.4 1627.56,1204.81 1628.15,1205.77 1628.73,1205.64 1629.32,1207.02 1629.91,1208.38 1630.49,1211.99 1631.08,1210.56 1631.67,1210.33 1632.25,1209.89 1632.84,1209.74 1633.42,1209.4 1634.01,1207.75 1634.6,1209.96 1635.18,1209.61 1635.77,1210.67 1636.36,1207.58 1636.94,1209.68 1637.53,1210.62 1638.12,1211.41 1638.7,1214.61 1639.29,1213.9 1639.88,1212.11 1640.46,1213.06 1641.05,1212.69 1641.63,1211.16 1642.22,1212.18 1642.81,1210.54 1643.39,1212.33 1643.98,1211.99 1644.57,1211.58 1645.15,1209.84 1645.74,1210.62 1646.33,1207.96 1646.91,1208.93 1647.5,1211.17 1648.09,1208.41 1648.67,1206.78 1649.26,1207.56 1649.84,1204.95 1650.43,1204.84 1651.02,1205.07 1651.6,1206.04 1652.19,1205.96 1652.78,1201.86 1653.36,1200.54 1653.95,1198.25 1654.54,1195.99 1655.12,1197.66 1655.71,1194.42 1656.29,1194.76 1656.88,1197.48 1657.47,1198.94 1658.05,1201.49 1658.64,1203.88 1659.23,1203.63 1659.81,1205.04 1660.4,1204.75 1660.99,1202.02 1661.57,1202.15 1662.16,1200.94 1662.75,1200.15 1663.33,1198.33 1663.92,1199.79 1664.5,1201.35 1665.09,1201.25 1665.68,1202.68 1666.26,1202.74 1666.85,1202.91 1667.44,1205.33 1668.02,1203.65 1668.61,1200.97 1669.2,1198.32 1669.78,1198.67 1670.37,1197.72 1670.96,1197.94 1671.54,1197.01 1672.13,1197.33 1672.71,1200.13 1673.3,1200.18 1673.89,1200.6 1674.47,1199.62 1675.06,1198.41 1675.65,1201.23 1676.23,1201.61 1676.82,1201.87 1677.41,1203.49 1677.99,1203.5 1678.58,1203.35 1679.17,1203.29 1679.75,1201.95 1680.34,1203.2 1680.92,1202 1681.51,1202.06 1682.1,1200.98 1682.68,1201.22 1683.27,1202.79 1683.86,1205.53 1684.44,1204.25 1685.03,1201.79 1685.62,1201.71 1686.2,1199.74 1686.79,1198.75 1687.37,1200.33 1687.96,1198.14 1688.55,1198.47 1689.13,1196.31 1689.72,1196.69 1690.31,1194.66 1690.89,1196.31 1691.48,1196.64 1692.07,1198.43 1692.65,1197.46 1693.24,1196.53 1693.83,1196.59 1694.41,1195.83 1695,1194.91 1695.58,1194.24 1696.17,1194.83 1696.76,1194.98 1697.34,1194.53 1697.93,1195 1698.52,1197.81 1699.1,1196.98 1699.69,1197.53 1700.28,1195.35 1700.86,1196.95 1701.45,1196.37 1702.04,1197.94 1702.62,1199.47 1703.21,1199.64 1703.79,1202.33 1704.38,1203.5 1704.97,1204.89 1705.55,1202.08 1706.14,1202.19 1706.73,1199.88 1707.31,1200.12 1707.9,1201.67 1708.49,1201.87 1709.07,1200.79 1709.66,1201.05 1710.24,1199.92 1710.83,1202.49 1711.42,1206.39 1712,1207.84 1712.59,1206.28 1713.18,1204.82 1713.76,1204.67 1714.35,1205.77 1714.94,1205.69 1715.52,1205.43 1716.11,1202.1 1716.7,1202.09 1717.28,1202.36 1717.87,1202.28 1718.45,1201 1719.04,1202.44 1719.63,1205.05 1720.21,1205.14 1720.8,1205.11 1721.39,1206.4 1721.97,1205.06 1722.56,1204.94 1723.15,1204.81 1723.73,1205.06 1724.32,1206.22 1724.91,1207.09 1725.49,1204.27 1726.08,1204.13 1726.66,1205.3 1727.25,1206.43 1727.84,1206.06 1728.42,1203.48 1729.01,1203.36 1729.6,1204.49 1730.18,1205.87 1730.77,1203.5 1731.36,1202.26 1731.94,1204.75 1732.53,1202.19 1733.11,1202.43 1733.7,1202.85 1734.29,1205.36 1734.87,1206.42 1735.46,1206.15 1736.05,1208.19 1736.63,1211.75 1737.22,1212.77 1737.81,1211.05 1738.39,1214.19 1738.98,1212.16 1739.57,1209.08 1740.15,1208.71 1740.74,1208.45 1741.32,1208.18 1741.91,1209.34 1742.5,1209.09 1743.08,1209.05 1743.67,1208.68 1744.26,1210.94 1744.84,1211.81 1745.43,1211.52 1746.02,1211.18 1746.6,1212.08 1747.19,1211.88 1747.78,1211.26 1748.36,1208.29 1748.95,1206.94 1749.53,1205.75 1750.12,1206.93 1750.71,1205.29 1751.29,1207.6 1751.88,1208.42 1752.47,1208.24 1753.05,1210.16 1753.64,1209.91 1754.23,1207.12 1754.81,1206.93 1755.4,1206.48 1755.99,1202.64 1756.57,1201.41 1757.16,1200.33 1757.74,1200.63 1758.33,1200.53 1758.92,1200.52 1759.5,1204.41 1760.09,1204.33 1760.68,1205.4 1761.26,1203.91 1761.85,1204.15 1762.44,1204.19 1763.02,1204.16 1763.61,1204 1764.19,1202.86 1764.78,1202.88 1765.37,1200.6 1765.95,1200.74 1766.54,1199.51 1767.13,1199.75 1767.71,1201.18 1768.3,1198.93 1768.89,1198.69 1769.47,1196.49 1770.06,1198.18 1770.65,1197.14 1771.23,1194.88 1771.82,1194.51 1772.4,1194.94 1772.99,1195.48 1773.58,1193.2 1774.16,1193.81 1774.75,1190.65 1775.34,1192.3 1775.92,1191.68 1776.51,1193.62 1777.1,1194.54 1777.68,1193.76 1778.27,1194.29 1778.86,1194.62 1779.44,1196.26 1780.03,1196.76 1780.61,1195.8 1781.2,1197.28 1781.79,1197.61 1782.37,1197.79 1782.96,1198.15 1783.55,1198.77 1784.13,1202.72 1784.72,1204.16 1785.31,1204.3 1785.89,1206.81 1786.48,1206.54 1787.06,1204.05 1787.65,1205.47 1788.24,1204.25 1788.82,1205.54 1789.41,1203.17 1790,1204.4 1790.58,1204.3 1791.17,1204.37 1791.76,1204.43 1792.34,1204.62 1792.93,1204.42 1793.52,1201.89 1794.1,1203.24 1794.69,1204.61 1795.27,1203.27 1795.86,1201.71 1796.45,1203.23 1797.03,1205.75 1797.62,1203.14 1798.21,1204.28 1798.79,1206.73 1799.38,1206.78 1799.97,1207.89 1800.55,1208.9 1801.14,1208.7 1801.73,1210.96 1802.31,1209.48 1802.9,1206.84 1803.48,1205.53 1804.07,1204.31 1804.66,1202.99 1805.24,1202.81 1805.83,1204.14 1806.42,1205.25 1807,1205.2 1807.59,1204.99 1808.18,1204.92 1808.76,1206.09 1809.35,1206.49 1809.94,1207.69 1810.52,1211.28 1811.11,1210.85 1811.69,1208.11 1812.28,1208.2 1812.87,1207.66 1813.45,1206.04 1814.04,1207.01 1814.63,1207.82 1815.21,1207.5 1815.8,1209.88 1816.39,1208.4 1816.97,1209.45 1817.56,1207.97 1818.14,1206.9 1818.73,1204.16 1819.32,1205.19 1819.9,1205.08 1820.49,1204.97 1821.08,1204.77 1821.66,1204.66 1822.25,1205.6 1822.84,1205.78 1823.42,1206.99 1824.01,1205.41 1824.6,1206.68 1825.18,1206.61 1825.77,1206.54 1826.35,1207.59 1826.94,1207.26 1827.53,1206 1828.11,1204.53 1828.7,1206.9 1829.29,1207.76 1829.87,1206.22 1830.46,1207.27 1831.05,1204.29 1831.63,1202.92 1832.22,1202.97 1832.81,1204.24 1833.39,1206.8 1833.98,1207.62 1834.56,1209.63 1835.15,1209.15 1835.74,1207.48 1836.32,1206.18 1836.91,1205.98 1837.5,1205.59 1838.08,1204.08 1838.67,1203.1 1839.26,1206.78 1839.84,1207.51 1840.43,1208.5 1841.01,1208.23 1841.6,1207.82 1842.19,1206.49 1842.77,1203.95 1843.36,1201.32 1843.95,1201.9 1844.53,1201.85 1845.12,1200.74 1845.71,1200.97 1846.29,1202.37 1846.88,1200.06 1847.47,1202.52 1848.05,1202.47 1848.64,1203.81 1849.22,1202.61 1849.81,1205.12 1850.4,1203.84 1850.98,1201.22 1851.57,1203.71 1852.16,1206.1 1852.74,1207.3 1853.33,1205.67 1853.92,1209.16 1854.5,1209.11 1855.09,1208.77 1855.68,1209.78 1856.26,1211.86 1856.85,1210.07 1857.43,1211.1 1858.02,1210.49 1858.61,1211.24 1859.19,1207.18 1859.78,1210.81 1860.37,1210.34 1860.95,1212.4 1861.54,1210.9 1862.13,1206.75 1862.71,1207.62 1863.3,1209.88 1863.88,1209.52 1864.47,1209.46 1865.06,1207.85 1865.64,1207.54 1866.23,1207.1 1866.82,1209.57 1867.4,1209.34 1867.99,1209.4 1868.58,1207.98 1869.16,1206.44 1869.75,1206.54 1870.34,1207.67 1870.92,1207.31 1871.51,1204.56 1872.09,1205.84 1872.68,1207.14 1873.27,1205.35 1873.85,1202.74 1874.44,1202.52 1875.03,1200.18 1875.61,1199.12 1876.2,1200.4 1876.79,1200.56 1877.37,1200.7 1877.96,1198.5 1878.55,1198.91 1879.13,1199.01 1879.72,1198.98 1880.3,1196.91 1880.89,1200.72 1881.48,1201.97 1882.06,1203.52 1882.65,1204.57 1883.24,1205.93 1883.82,1206.05 1884.41,1206.09 1885,1202.27 1885.58,1202.35 1886.17,1200.15 1886.76,1199.02 1887.34,1197.96 1887.93,1195.93 1888.51,1200.22 1889.1,1198.99 1889.69,1202.85 1890.27,1202.7 1890.86,1200.17 1891.45,1201.74 1892.03,1204.22 1892.62,1205.3 1893.21,1205.1 1893.79,1206.37 1894.38,1207.54 1894.96,1204.75 1895.55,1205.86 1896.14,1203.16 1896.72,1204.28 1897.31,1204.34 1897.9,1205.77 1898.48,1206.93 1899.07,1206.49 1899.66,1204.72 1900.24,1204.47 1900.83,1203.06 1901.42,1203.05 1902,1200.48 1902.59,1199.24 1903.17,1199.46 1903.76,1199.75 1904.35,1202.16 1904.93,1203.42 1905.52,1205.65 1906.11,1204.34 1906.69,1205.34 1907.28,1205.49 1907.87,1206.62 1908.45,1206.45 1909.04,1205.15 1909.63,1202.6 1910.21,1206.06 1910.8,1207.25 1911.38,1207.92 1911.97,1207.62 1912.56,1208.62 1913.14,1207.29 1913.73,1209.35 1914.32,1209.06 1914.9,1206.41 1915.49,1205.06 1916.08,1202.28 1916.66,1201.2 1917.25,1199.9 1917.83,1198.73 1918.42,1199.08 1919.01,1199.46 1919.59,1202.16 1920.18,1202.36 1920.77,1202.34 1921.35,1199.91 1921.94,1200.03 1922.53,1200.12 1923.11,1200.36 1923.7,1203.19 1924.29,1203.4 1924.87,1202.18 1925.46,1200.86 1926.04,1201.05 1926.63,1202.52 1927.22,1202.36 1927.8,1202.31 1928.39,1202.18 1928.98,1202.24 1929.56,1202.36 1930.15,1202.12 1930.74,1202.05 1931.32,1202.12 1931.91,1204.62 1932.5,1205.5 1933.08,1206.69 1933.67,1207.59 1934.25,1207.43 1934.84,1206.28 1935.43,1203.94 1936.01,1200.42 1936.6,1206.94 1937.19,1205.86 1937.77,1205.89 1938.36,1205.99 1938.95,1204.61 1939.53,1203.11 1940.12,1204.27 1940.71,1206.72 1941.29,1208.98 1941.88,1208.47 1942.46,1204.51 1943.05,1205.89 1943.64,1204.55 1944.22,1205.96 1944.81,1202.33 1945.4,1202.64 1945.98,1202.75 1946.57,1201.48 1947.16,1200.05 1947.74,1197.7 1948.33,1195.36 1948.91,1196 1949.5,1195.23 1950.09,1194.48 1950.67,1198.74 1951.26,1200.14 1951.85,1201.54 1952.43,1200.86 1953.02,1202.24 1953.61,1203.55 1954.19,1203.61 1954.78,1203.48 1955.37,1204.97 1955.95,1204.85 1956.54,1204.93 1957.12,1203.62 1957.71,1202.31 1958.3,1201.2 1958.88,1198.97 1959.47,1201.75 1960.06,1200.85 1960.64,1201.08 1961.23,1202.53 1961.82,1202.33 1962.4,1202.27 1962.99,1201.11 1963.58,1201.07 1964.16,1201.27 1964.75,1202.89 1965.33,1203.32 1965.92,1205.89 1966.51,1204.7 1967.09,1206.04 1967.68,1204.79 1968.27,1206 1968.85,1204.72 1969.44,1205.83 1970.03,1205.78 1970.61,1206.87 1971.2,1208.13 1971.78,1210.37 1972.37,1211.1 1972.96,1206.93 1973.54,1205.4 1974.13,1203.01 1974.72,1204.24 1975.3,1204.37 1975.89,1203.1 1976.48,1205.64 1977.06,1204.17 1977.65,1204.04 1978.24,1203.79 1978.82,1203.67 1979.41,1203.89 1979.99,1202.62 1980.58,1202.42 1981.17,1202.66 1981.75,1202.51 1982.34,1199.85 1982.93,1198.87 1983.51,1200.22 1984.1,1199.06 1984.69,1200.79 1985.27,1203.41 1985.86,1206.09 1986.45,1205.86 1987.03,1203.09 1987.62,1200.68 1988.2,1198.38 1988.79,1197.7 1989.38,1198.26 1989.96,1198.61 1990.55,1197.67 1991.14,1196.98 1991.72,1197.5 1992.31,1197.71 1992.9,1198.27 1993.48,1198.59 1994.07,1200.31 1994.65,1202.95 1995.24,1204.34 1995.83,1204.25 1996.41,1200.75 1997,1197.36 1997.59,1197.73 1998.17,1198.06 1998.76,1195.78 1999.35,1195 1999.93,1193.09 2000.52,1193.74 2001.11,1192.78 2001.69,1194.51 2002.28,1193.88 2002.86,1194.3 2003.45,1194.5 2004.04,1193.6 2004.62,1194.17 2005.21,1193.38 2005.8,1193.97 2006.38,1194.7 2006.97,1195.19 2007.56,1195.86 2008.14,1196.5 2008.73,1200.83 2009.32,1201.07 2009.9,1202.3 2010.49,1203.43 2011.07,1202.23 2011.66,1206.03 2012.25,1205.81 2012.83,1206.82 2013.42,1209.23 2014.01,1211.23 2014.59,1209.59 2015.18,1207.98 2015.77,1206.57 2016.35,1206.42 2016.94,1206.21 2017.53,1207.21 2018.11,1207.01 2018.7,1208.01 2019.28,1207.86 2019.87,1207.62 2020.46,1207.31 2021.04,1207.24 2021.63,1208.32 2022.22,1209.43 2022.8,1207.93 2023.39,1208.7 2023.98,1207.28 2024.56,1205.9 2025.15,1207.25 2025.73,1210.67 2026.32,1210.26 2026.91,1208.7 2027.49,1210.94 2028.08,1209.38 2028.67,1210.57 2029.25,1211.7 2029.84,1210.39 2030.43,1211.13 2031.01,1210.78 2031.6,1209.26 2032.19,1207.52 2032.77,1208.45 2033.36,1209.32 2033.94,1207.82 2034.53,1205.07 2035.12,1204.9 2035.7,1206.18 2036.29,1204.66 2036.88,1204.38 2037.46,1203.19 2038.05,1202.05 2038.64,1204.37 2039.22,1204.04 2039.81,1202.75 2040.4,1202.88 2040.98,1200.21 2041.57,1200.25 2042.15,1199.33 2042.74,1199.44 2043.33,1199.97 2043.91,1202.68 2044.5,1205.15 2045.09,1204.87 2045.67,1203.54 2046.26,1198.65 2046.85,1198.99 2047.43,1196.67 2048.02,1198.46 2048.6,1196.28 2049.19,1197.98 2049.78,1199.25 2050.36,1199.68 2050.95,1199.63 2051.54,1199.71 2052.12,1201.1 2052.71,1201.48 2053.3,1201.66 2053.88,1200.69 2054.47,1199.69 2055.06,1198.54 2055.64,1197.55 2056.23,1197.82 2056.81,1198.05 2057.4,1198.43 2057.99,1195.43 2058.57,1193.28 2059.16,1191.57 2059.75,1192.16 2060.33,1193 2060.92,1196.33 2061.51,1200.19 2062.09,1203 2062.68,1203.03 2063.27,1204.36 2063.85,1204.2 2064.44,1203 2065.02,1201.68 2065.61,1199.33 2066.2,1199.42 2066.78,1199.7 2067.37,1202.37 2067.96,1201.46 2068.54,1201.53 2069.13,1201.67 2069.72,1205.49 2070.3,1207.65 2070.89,1207.42 2071.48,1207.27 2072.06,1205.51 2072.65,1204.13 2073.23,1202.79 2073.82,1204 2074.41,1204.96 2074.99,1207.52 2075.58,1207.35 2076.17,1206.12 2076.75,1204.72 2077.34,1202.19 2077.93,1204.78 2078.51,1204.83 2079.1,1202.21 2079.68,1203.67 2080.27,1201.04 2080.86,1203.37 2081.44,1203.37 2082.03,1200.92 2082.62,1201.13 2083.2,1201.09 2083.79,1200.05 2084.38,1199.05 2084.96,1199.3 2085.55,1200.9 2086.14,1201.97 2086.72,1204.48 2087.31,1201.81 2087.89,1203.09 2088.48,1204.48 2089.07,1205.84 2089.65,1208.15 2090.24,1206.75 2090.83,1207.87 2091.41,1209 2092,1210.17 2092.59,1209.94 2093.17,1208.28 2093.76,1206.73 2094.35,1206.41 2094.93,1207.58 2095.52,1213.47 2096.1,1212.06 2096.69,1213.95 2097.28,1213.47 2097.86,1214.33 2098.45,1213.76 2099.04,1216.59 2099.62,1215.01 2100.21,1214.32 2100.8,1213.84 2101.38,1214.19 2101.97,1213.8 2102.55,1212.06 2103.14,1214.32 2103.73,1212.74 2104.31,1211.24 2104.9,1211.78 2105.49,1211.32 2106.07,1209.72 2106.66,1209.41 2107.25,1205.49 2107.83,1205.5 2108.42,1204.25 2109.01,1204.02 2109.59,1203.88 2110.18,1203.59 2110.76,1203.55 2111.35,1203.3 2111.94,1204.8 2112.52,1204.44 2113.11,1204.18 2113.7,1205.38 2114.28,1205.24 2114.87,1202.67 2115.46,1202.76 2116.04,1203.01 2116.63,1203.24 2117.22,1204.27 2117.8,1204.22 2118.39,1205.39 2118.97,1206.49 2119.56,1206.41 2120.15,1206.12 2120.73,1205.87 2121.32,1205.52 2121.91,1206.46 2122.49,1208.83 2123.08,1209.71 2123.67,1210.49 2124.25,1211.33 2124.84,1210.77 2125.42,1210.4 2126.01,1209.05 2126.6,1205.11 2127.18,1205.17 2127.77,1204.96 2128.36,1204.78 2128.94,1206.34 2129.53,1204.92 2130.12,1207.45 2130.7,1205.03 2131.29,1202.49 2131.88,1202.86 2132.46,1200.77 2133.05,1203.27 2133.63,1203.1 2134.22,1202.85 2134.81,1204.01 2135.39,1204.99 2135.98,1203.57 2136.57,1203.62 2137.15,1205.18 2137.74,1202.31 2138.33,1203.65 2138.91,1204.95 2139.5,1207.3 2140.09,1203.2 2140.67,1200.66 2141.26,1200.72 2141.84,1202.14 2142.43,1198.45 2143.02,1197.18 2143.6,1198.81 2144.19,1195.2 2144.78,1196.82 2145.36,1199.71 2145.95,1198.68 2146.54,1196.57 2147.12,1200.58 2147.71,1201.04 2148.3,1201.22 2148.88,1202.61 2149.47,1201.55 2150.05,1201.68 2150.64,1200.34 2151.23,1197.97 2151.81,1196.82 2152.4,1197.45 2152.99,1199.07 2153.57,1200.51 2154.16,1199.39 2154.75,1197.21 2155.33,1199 2155.92,1198.14 2156.5,1195.98 2157.09,1199.85 2157.68,1197.44 2158.26,1198.95 \"/>\n<path clip-path=\"url(#clip142)\" d=\"M986.025 1204.06 L986.612 1204.06 L987.198 1204.06 L987.785 1204.06 L988.371 1204.06 L988.957 1204.06 L989.544 1204.06 L990.13 1204.06 L990.717 1204.06 L991.303 1204.06 L991.889 1204.06 L992.476 1204.06 L993.062 1204.06 L993.649 1204.06 L994.235 1204.06 L994.822 1204.06 L995.408 1204.06 L995.994 1204.06 L996.581 1204.06 L997.167 1204.06 L997.754 1204.06 L998.34 1204.06 L998.926 1204.06 L999.513 1204.06 L1000.1 1204.06 L1000.69 1204.06 L1001.27 1204.06 L1001.86 1204.06 L1002.44 1204.06 L1003.03 1204.06 L1003.62 1204.06 L1004.2 1204.06 L1004.79 1204.06 L1005.38 1204.06 L1005.96 1204.06 L1006.55 1204.06 L1007.14 1204.06 L1007.72 1204.06 L1008.31 1204.06 L1008.9 1204.06 L1009.48 1204.06 L1010.07 1204.06 L1010.65 1204.06 L1011.24 1204.06 L1011.83 1204.06 L1012.41 1204.06 L1013 1204.06 L1013.59 1204.06 L1014.17 1204.06 L1014.76 1204.06 L1015.35 1204.06 L1015.93 1204.06 L1016.52 1204.06 L1017.11 1204.06 L1017.69 1204.06 L1018.28 1204.06 L1018.86 1204.06 L1019.45 1204.06 L1020.04 1204.06 L1020.62 1204.06 L1021.21 1204.06 L1021.8 1204.06 L1022.38 1204.06 L1022.97 1204.06 L1023.56 1204.06 L1024.14 1204.06 L1024.73 1204.06 L1025.32 1204.06 L1025.9 1204.06 L1026.49 1204.06 L1027.07 1204.06 L1027.66 1204.06 L1028.25 1204.06 L1028.83 1204.06 L1029.42 1204.06 L1030.01 1204.06 L1030.59 1204.06 L1031.18 1204.06 L1031.77 1204.06 L1032.35 1204.06 L1032.94 1204.06 L1033.52 1204.06 L1034.11 1204.06 L1034.7 1204.06 L1035.28 1204.06 L1035.87 1204.06 L1036.46 1204.06 L1037.04 1204.06 L1037.63 1204.06 L1038.22 1204.06 L1038.8 1204.06 L1039.39 1204.06 L1039.98 1204.06 L1040.56 1204.06 L1041.15 1204.06 L1041.73 1204.06 L1042.32 1204.06 L1042.91 1204.06 L1043.49 1204.06 L1044.08 1204.06 L1044.67 1204.06 L1045.25 1204.06 L1045.84 1204.06 L1046.43 1204.06 L1047.01 1204.06 L1047.6 1204.06 L1048.19 1204.06 L1048.77 1204.06 L1049.36 1204.06 L1049.94 1204.06 L1050.53 1204.06 L1051.12 1204.06 L1051.7 1204.06 L1052.29 1204.06 L1052.88 1204.06 L1053.46 1204.06 L1054.05 1204.06 L1054.64 1204.06 L1055.22 1204.06 L1055.81 1204.06 L1056.39 1204.06 L1056.98 1204.06 L1057.57 1204.06 L1058.15 1204.06 L1058.74 1204.06 L1059.33 1204.06 L1059.91 1204.06 L1060.5 1204.06 L1061.09 1204.06 L1061.67 1204.06 L1062.26 1204.06 L1062.85 1204.06 L1063.43 1204.06 L1064.02 1204.06 L1064.6 1204.06 L1065.19 1204.06 L1065.78 1204.06 L1066.36 1204.06 L1066.95 1204.06 L1067.54 1204.06 L1068.12 1204.06 L1068.71 1204.06 L1069.3 1204.06 L1069.88 1204.06 L1070.47 1204.06 L1071.06 1204.06 L1071.64 1204.06 L1072.23 1204.06 L1072.81 1204.06 L1073.4 1204.06 L1073.99 1204.06 L1074.57 1204.06 L1075.16 1204.06 L1075.75 1204.06 L1076.33 1204.06 L1076.92 1204.06 L1077.51 1204.06 L1078.09 1204.06 L1078.68 1204.06 L1079.26 1204.06 L1079.85 1204.06 L1080.44 1204.06 L1081.02 1204.06 L1081.61 1204.06 L1082.2 1204.06 L1082.78 1204.06 L1083.37 1204.06 L1083.96 1204.06 L1084.54 1204.06 L1085.13 1204.06 L1085.72 1204.06 L1086.3 1204.06 L1086.89 1204.06 L1087.47 1204.06 L1088.06 1204.06 L1088.65 1204.06 L1089.23 1204.06 L1089.82 1204.06 L1090.41 1204.06 L1090.99 1204.06 L1091.58 1204.06 L1092.17 1204.06 L1092.75 1204.06 L1093.34 1204.06 L1093.93 1204.06 L1094.51 1204.06 L1095.1 1204.06 L1095.68 1204.06 L1096.27 1204.06 L1096.86 1204.06 L1097.44 1204.06 L1098.03 1204.06 L1098.62 1204.06 L1099.2 1204.06 L1099.79 1204.06 L1100.38 1204.06 L1100.96 1204.06 L1101.55 1204.06 L1102.14 1204.06 L1102.72 1204.06 L1103.31 1204.06 L1103.89 1204.06 L1104.48 1204.06 L1105.07 1204.06 L1105.65 1204.06 L1106.24 1204.06 L1106.83 1204.06 L1107.41 1204.06 L1108 1204.06 L1108.59 1204.06 L1109.17 1204.06 L1109.76 1204.06 L1110.34 1204.06 L1110.93 1204.06 L1111.52 1204.06 L1112.1 1204.06 L1112.69 1204.06 L1113.28 1204.06 L1113.86 1204.06 L1114.45 1204.06 L1115.04 1204.06 L1115.62 1204.06 L1116.21 1204.06 L1116.8 1204.06 L1117.38 1204.06 L1117.97 1204.06 L1118.55 1204.06 L1119.14 1204.06 L1119.73 1204.06 L1120.31 1204.06 L1120.9 1204.06 L1121.49 1204.06 L1122.07 1204.06 L1122.66 1204.06 L1123.25 1204.06 L1123.83 1204.06 L1124.42 1204.06 L1125.01 1204.06 L1125.59 1204.06 L1126.18 1204.06 L1126.76 1204.06 L1127.35 1204.06 L1127.94 1204.06 L1128.52 1204.06 L1129.11 1204.06 L1129.7 1204.06 L1130.28 1204.06 L1130.87 1204.06 L1131.46 1204.06 L1132.04 1204.06 L1132.63 1204.06 L1133.21 1204.06 L1133.8 1204.06 L1134.39 1204.06 L1134.97 1204.06 L1135.56 1204.06 L1136.15 1204.06 L1136.73 1204.06 L1137.32 1204.06 L1137.91 1204.06 L1138.49 1204.06 L1139.08 1204.06 L1139.67 1204.06 L1140.25 1204.06 L1140.84 1204.06 L1141.42 1204.06 L1142.01 1204.06 L1142.6 1204.06 L1143.18 1204.06 L1143.77 1204.06 L1144.36 1204.06 L1144.94 1204.06 L1145.53 1204.06 L1146.12 1204.06 L1146.7 1204.06 L1147.29 1204.06 L1147.88 1204.06 L1148.46 1204.06 L1149.05 1204.06 L1149.63 1204.06 L1150.22 1204.06 L1150.81 1204.06 L1151.39 1204.06 L1151.98 1204.06 L1152.57 1204.06 L1153.15 1204.06 L1153.74 1204.06 L1154.33 1204.06 L1154.91 1204.06 L1155.5 1204.06 L1156.09 1204.06 L1156.67 1204.06 L1157.26 1204.06 L1157.84 1204.06 L1158.43 1204.06 L1159.02 1204.06 L1159.6 1204.06 L1160.19 1204.06 L1160.78 1204.06 L1161.36 1204.06 L1161.95 1204.06 L1162.54 1204.06 L1163.12 1204.06 L1163.71 1204.06 L1164.29 1204.06 L1164.88 1204.06 L1165.47 1204.06 L1166.05 1204.06 L1166.64 1204.06 L1167.23 1204.06 L1167.81 1204.06 L1168.4 1204.06 L1168.99 1204.06 L1169.57 1204.06 L1170.16 1204.06 L1170.75 1204.06 L1171.33 1204.06 L1171.92 1204.06 L1172.5 1204.06 L1173.09 1204.06 L1173.68 1204.06 L1174.26 1204.06 L1174.85 1204.06 L1175.44 1204.06 L1176.02 1204.06 L1176.61 1204.06 L1177.2 1204.06 L1177.78 1204.06 L1178.37 1204.06 L1178.96 1204.06 L1179.54 1204.06 L1180.13 1204.06 L1180.71 1204.06 L1181.3 1204.06 L1181.89 1204.06 L1182.47 1204.06 L1183.06 1204.06 L1183.65 1204.06 L1184.23 1204.06 L1184.82 1204.06 L1185.41 1204.06 L1185.99 1204.06 L1186.58 1204.06 L1187.16 1204.06 L1187.75 1204.06 L1188.34 1204.06 L1188.92 1204.06 L1189.51 1204.06 L1190.1 1204.06 L1190.68 1204.06 L1191.27 1204.06 L1191.86 1204.06 L1192.44 1204.06 L1193.03 1204.06 L1193.62 1204.06 L1194.2 1204.06 L1194.79 1204.06 L1195.37 1204.06 L1195.96 1204.06 L1196.55 1204.06 L1197.13 1204.06 L1197.72 1204.06 L1198.31 1204.06 L1198.89 1204.06 L1199.48 1204.06 L1200.07 1204.06 L1200.65 1204.06 L1201.24 1204.06 L1201.83 1204.06 L1202.41 1204.06 L1203 1204.06 L1203.58 1204.06 L1204.17 1204.06 L1204.76 1204.06 L1205.34 1204.06 L1205.93 1204.06 L1206.52 1204.06 L1207.1 1204.06 L1207.69 1204.06 L1208.28 1204.06 L1208.86 1204.06 L1209.45 1204.06 L1210.03 1204.06 L1210.62 1204.06 L1211.21 1204.06 L1211.79 1204.06 L1212.38 1204.06 L1212.97 1204.06 L1213.55 1204.06 L1214.14 1204.06 L1214.73 1204.06 L1215.31 1204.06 L1215.9 1204.06 L1216.49 1204.06 L1217.07 1204.06 L1217.66 1204.06 L1218.24 1204.06 L1218.83 1204.06 L1219.42 1204.06 L1220 1204.06 L1220.59 1204.06 L1221.18 1204.06 L1221.76 1204.06 L1222.35 1204.06 L1222.94 1204.06 L1223.52 1204.06 L1224.11 1204.06 L1224.7 1204.06 L1225.28 1204.06 L1225.87 1204.06 L1226.45 1204.06 L1227.04 1204.06 L1227.63 1204.06 L1228.21 1204.06 L1228.8 1204.06 L1229.39 1204.06 L1229.97 1204.06 L1230.56 1204.06 L1231.15 1204.06 L1231.73 1204.06 L1232.32 1204.06 L1232.91 1204.06 L1233.49 1204.06 L1234.08 1204.06 L1234.66 1204.06 L1235.25 1204.06 L1235.84 1204.06 L1236.42 1204.06 L1237.01 1204.06 L1237.6 1204.06 L1238.18 1204.06 L1238.77 1204.06 L1239.36 1204.06 L1239.94 1204.06 L1240.53 1204.06 L1241.11 1204.06 L1241.7 1204.06 L1242.29 1204.06 L1242.87 1204.06 L1243.46 1204.06 L1244.05 1204.06 L1244.63 1204.06 L1245.22 1204.06 L1245.81 1204.06 L1246.39 1204.06 L1246.98 1204.06 L1247.57 1204.06 L1248.15 1204.06 L1248.74 1204.06 L1249.32 1204.06 L1249.91 1204.06 L1250.5 1204.06 L1251.08 1204.06 L1251.67 1204.06 L1252.26 1204.06 L1252.84 1204.06 L1253.43 1204.06 L1254.02 1204.06 L1254.6 1204.06 L1255.19 1204.06 L1255.78 1204.06 L1256.36 1204.06 L1256.95 1204.06 L1257.53 1204.06 L1258.12 1204.06 L1258.71 1204.06 L1259.29 1204.06 L1259.88 1204.06 L1260.47 1204.06 L1261.05 1204.06 L1261.64 1204.06 L1262.23 1204.06 L1262.81 1204.06 L1263.4 1204.06 L1263.98 1204.06 L1264.57 1204.06 L1265.16 1204.06 L1265.74 1204.06 L1266.33 1204.06 L1266.92 1204.06 L1267.5 1204.06 L1268.09 1204.06 L1268.68 1204.06 L1269.26 1204.06 L1269.85 1204.06 L1270.44 1204.06 L1271.02 1204.06 L1271.61 1204.06 L1272.19 1204.06 L1272.78 1204.06 L1273.37 1204.06 L1273.95 1204.06 L1274.54 1204.06 L1275.13 1204.06 L1275.71 1204.06 L1276.3 1204.06 L1276.89 1204.06 L1277.47 1204.06 L1278.06 1204.06 L1278.65 1204.06 L1279.23 1204.06 L1279.82 1204.06 L1280.4 1204.06 L1280.99 1204.06 L1281.58 1204.06 L1282.16 1204.06 L1282.75 1204.06 L1283.34 1204.06 L1283.92 1204.06 L1284.51 1204.06 L1285.1 1204.06 L1285.68 1204.06 L1286.27 1204.06 L1286.86 1204.06 L1287.44 1204.06 L1288.03 1204.06 L1288.61 1204.06 L1289.2 1204.06 L1289.79 1204.06 L1290.37 1204.06 L1290.96 1204.06 L1291.55 1204.06 L1292.13 1204.06 L1292.72 1204.06 L1293.31 1204.06 L1293.89 1204.06 L1294.48 1204.06 L1295.06 1204.06 L1295.65 1204.06 L1296.24 1204.06 L1296.82 1204.06 L1297.41 1204.06 L1298 1204.06 L1298.58 1204.06 L1299.17 1204.06 L1299.76 1204.06 L1300.34 1204.06 L1300.93 1204.06 L1301.52 1204.06 L1302.1 1204.06 L1302.69 1204.06 L1303.27 1204.06 L1303.86 1204.06 L1304.45 1204.06 L1305.03 1204.06 L1305.62 1204.06 L1306.21 1204.06 L1306.79 1204.06 L1307.38 1204.06 L1307.97 1204.06 L1308.55 1204.06 L1309.14 1204.06 L1309.73 1204.06 L1310.31 1204.06 L1310.9 1204.06 L1311.48 1204.06 L1312.07 1204.06 L1312.66 1204.06 L1313.24 1204.06 L1313.83 1204.06 L1314.42 1204.06 L1315 1204.06 L1315.59 1204.06 L1316.18 1204.06 L1316.76 1204.06 L1317.35 1204.06 L1317.93 1204.06 L1318.52 1204.06 L1319.11 1204.06 L1319.69 1204.06 L1320.28 1204.06 L1320.87 1204.06 L1321.45 1204.06 L1322.04 1204.06 L1322.63 1204.06 L1323.21 1204.06 L1323.8 1204.06 L1324.39 1204.06 L1324.97 1204.06 L1325.56 1204.06 L1326.14 1204.06 L1326.73 1204.06 L1327.32 1204.06 L1327.9 1204.06 L1328.49 1204.06 L1329.08 1204.06 L1329.66 1204.06 L1330.25 1204.06 L1330.84 1204.06 L1331.42 1204.06 L1332.01 1204.06 L1332.6 1204.06 L1333.18 1204.06 L1333.77 1204.06 L1334.35 1204.06 L1334.94 1204.06 L1335.53 1204.06 L1336.11 1204.06 L1336.7 1204.06 L1337.29 1204.06 L1337.87 1204.06 L1338.46 1204.06 L1339.05 1204.06 L1339.63 1204.06 L1340.22 1204.06 L1340.8 1204.06 L1341.39 1204.06 L1341.98 1204.06 L1342.56 1204.06 L1343.15 1204.06 L1343.74 1204.06 L1344.32 1204.06 L1344.91 1204.06 L1345.5 1204.06 L1346.08 1204.06 L1346.67 1204.06 L1347.26 1204.06 L1347.84 1204.06 L1348.43 1204.06 L1349.01 1204.06 L1349.6 1204.06 L1350.19 1204.06 L1350.77 1204.06 L1351.36 1204.06 L1351.95 1204.06 L1352.53 1204.06 L1353.12 1204.06 L1353.71 1204.06 L1354.29 1204.06 L1354.88 1204.06 L1355.47 1204.06 L1356.05 1204.06 L1356.64 1204.06 L1357.22 1204.06 L1357.81 1204.06 L1358.4 1204.06 L1358.98 1204.06 L1359.57 1204.06 L1360.16 1204.06 L1360.74 1204.06 L1361.33 1204.06 L1361.92 1204.06 L1362.5 1204.06 L1363.09 1204.06 L1363.68 1204.06 L1364.26 1204.06 L1364.85 1204.06 L1365.43 1204.06 L1366.02 1204.06 L1366.61 1204.06 L1367.19 1204.06 L1367.78 1204.06 L1368.37 1204.06 L1368.95 1204.06 L1369.54 1204.06 L1370.13 1204.06 L1370.71 1204.06 L1371.3 1204.06 L1371.88 1204.06 L1372.47 1204.06 L1373.06 1204.06 L1373.64 1204.06 L1374.23 1204.06 L1374.82 1204.06 L1375.4 1204.06 L1375.99 1204.06 L1376.58 1204.06 L1377.16 1204.06 L1377.75 1204.06 L1378.34 1204.06 L1378.92 1204.06 L1379.51 1204.06 L1380.09 1204.06 L1380.68 1204.06 L1381.27 1204.06 L1381.85 1204.06 L1382.44 1204.06 L1383.03 1204.06 L1383.61 1204.06 L1384.2 1204.06 L1384.79 1204.06 L1385.37 1204.06 L1385.96 1204.06 L1386.55 1204.06 L1387.13 1204.06 L1387.72 1204.06 L1388.3 1204.06 L1388.89 1204.06 L1389.48 1204.06 L1390.06 1204.06 L1390.65 1204.06 L1391.24 1204.06 L1391.82 1204.06 L1392.41 1204.06 L1393 1204.06 L1393.58 1204.06 L1394.17 1204.06 L1394.75 1204.06 L1395.34 1204.06 L1395.93 1204.06 L1396.51 1204.06 L1397.1 1204.06 L1397.69 1204.06 L1398.27 1204.06 L1398.86 1204.06 L1399.45 1204.06 L1400.03 1204.06 L1400.62 1204.06 L1401.21 1204.06 L1401.79 1204.06 L1402.38 1204.06 L1402.96 1204.06 L1403.55 1204.06 L1404.14 1204.06 L1404.72 1204.06 L1405.31 1204.06 L1405.9 1204.06 L1406.48 1204.06 L1407.07 1204.06 L1407.66 1204.06 L1408.24 1204.06 L1408.83 1204.06 L1409.42 1204.06 L1410 1204.06 L1410.59 1204.06 L1411.17 1204.06 L1411.76 1204.06 L1412.35 1204.06 L1412.93 1204.06 L1413.52 1204.06 L1414.11 1204.06 L1414.69 1204.06 L1415.28 1204.06 L1415.87 1204.06 L1416.45 1204.06 L1417.04 1204.06 L1417.63 1204.06 L1418.21 1204.06 L1418.8 1204.06 L1419.38 1204.06 L1419.97 1204.06 L1420.56 1204.06 L1421.14 1204.06 L1421.73 1204.06 L1422.32 1204.06 L1422.9 1204.06 L1423.49 1204.06 L1424.08 1204.06 L1424.66 1204.06 L1425.25 1204.06 L1425.83 1204.06 L1426.42 1204.06 L1427.01 1204.06 L1427.59 1204.06 L1428.18 1204.06 L1428.77 1204.06 L1429.35 1204.06 L1429.94 1204.06 L1430.53 1204.06 L1431.11 1204.06 L1431.7 1204.06 L1432.29 1204.06 L1432.87 1204.06 L1433.46 1204.06 L1434.04 1204.06 L1434.63 1204.06 L1435.22 1204.06 L1435.8 1204.06 L1436.39 1204.06 L1436.98 1204.06 L1437.56 1204.06 L1438.15 1204.06 L1438.74 1204.06 L1439.32 1204.06 L1439.91 1204.06 L1440.5 1204.06 L1441.08 1204.06 L1441.67 1204.06 L1442.25 1204.06 L1442.84 1204.06 L1443.43 1204.06 L1444.01 1204.06 L1444.6 1204.06 L1445.19 1204.06 L1445.77 1204.06 L1446.36 1204.06 L1446.95 1204.06 L1447.53 1204.06 L1448.12 1204.06 L1448.7 1204.06 L1449.29 1204.06 L1449.88 1204.06 L1450.46 1204.06 L1451.05 1204.06 L1451.64 1204.06 L1452.22 1204.06 L1452.81 1204.06 L1453.4 1204.06 L1453.98 1204.06 L1454.57 1204.06 L1455.16 1204.06 L1455.74 1204.06 L1456.33 1204.06 L1456.91 1204.06 L1457.5 1204.06 L1458.09 1204.06 L1458.67 1204.06 L1459.26 1204.06 L1459.85 1204.06 L1460.43 1204.06 L1461.02 1204.06 L1461.61 1204.06 L1462.19 1204.06 L1462.78 1204.06 L1463.37 1204.06 L1463.95 1204.06 L1464.54 1204.06 L1465.12 1204.06 L1465.71 1204.06 L1466.3 1204.06 L1466.88 1204.06 L1467.47 1204.06 L1468.06 1204.06 L1468.64 1204.06 L1469.23 1204.06 L1469.82 1204.06 L1470.4 1204.06 L1470.99 1204.06 L1471.57 1204.06 L1472.16 1204.06 L1472.75 1204.06 L1473.33 1204.06 L1473.92 1204.06 L1474.51 1204.06 L1475.09 1204.06 L1475.68 1204.06 L1476.27 1204.06 L1476.85 1204.06 L1477.44 1204.06 L1478.03 1204.06 L1478.61 1204.06 L1479.2 1204.06 L1479.78 1204.06 L1480.37 1204.06 L1480.96 1204.06 L1481.54 1204.06 L1482.13 1204.06 L1482.72 1204.06 L1483.3 1204.06 L1483.89 1204.06 L1484.48 1204.06 L1485.06 1204.06 L1485.65 1204.06 L1486.24 1204.06 L1486.82 1204.06 L1487.41 1204.06 L1487.99 1204.06 L1488.58 1204.06 L1489.17 1204.06 L1489.75 1204.06 L1490.34 1204.06 L1490.93 1204.06 L1491.51 1204.06 L1492.1 1204.06 L1492.69 1204.06 L1493.27 1204.06 L1493.86 1204.06 L1494.45 1204.06 L1495.03 1204.06 L1495.62 1204.06 L1496.2 1204.06 L1496.79 1204.06 L1497.38 1204.06 L1497.96 1204.06 L1498.55 1204.06 L1499.14 1204.06 L1499.72 1204.06 L1500.31 1204.06 L1500.9 1204.06 L1501.48 1204.06 L1502.07 1204.06 L1502.65 1204.06 L1503.24 1204.06 L1503.83 1204.06 L1504.41 1204.06 L1505 1204.06 L1505.59 1204.06 L1506.17 1204.06 L1506.76 1204.06 L1507.35 1204.06 L1507.93 1204.06 L1508.52 1204.06 L1509.11 1204.06 L1509.69 1204.06 L1510.28 1204.06 L1510.86 1204.06 L1511.45 1204.06 L1512.04 1204.06 L1512.62 1204.06 L1513.21 1204.06 L1513.8 1204.06 L1514.38 1204.06 L1514.97 1204.06 L1515.56 1204.06 L1516.14 1204.06 L1516.73 1204.06 L1517.32 1204.06 L1517.9 1204.06 L1518.49 1204.06 L1519.07 1204.06 L1519.66 1204.06 L1520.25 1204.06 L1520.83 1204.06 L1521.42 1204.06 L1522.01 1204.06 L1522.59 1204.06 L1523.18 1204.06 L1523.77 1204.06 L1524.35 1204.06 L1524.94 1204.06 L1525.52 1204.06 L1526.11 1204.06 L1526.7 1204.06 L1527.28 1204.06 L1527.87 1204.06 L1528.46 1204.06 L1529.04 1204.06 L1529.63 1204.06 L1530.22 1204.06 L1530.8 1204.06 L1531.39 1204.06 L1531.98 1204.06 L1532.56 1204.06 L1533.15 1204.06 L1533.73 1204.06 L1534.32 1204.06 L1534.91 1204.06 L1535.49 1204.06 L1536.08 1204.06 L1536.67 1204.06 L1537.25 1204.06 L1537.84 1204.06 L1538.43 1204.06 L1539.01 1204.06 L1539.6 1204.06 L1540.19 1204.06 L1540.77 1204.06 L1541.36 1204.06 L1541.94 1204.06 L1542.53 1204.06 L1543.12 1204.06 L1543.7 1204.06 L1544.29 1204.06 L1544.88 1204.06 L1545.46 1204.06 L1546.05 1204.06 L1546.64 1204.06 L1547.22 1204.06 L1547.81 1204.06 L1548.4 1204.06 L1548.98 1204.06 L1549.57 1204.06 L1550.15 1204.06 L1550.74 1204.06 L1551.33 1204.06 L1551.91 1204.06 L1552.5 1204.06 L1553.09 1204.06 L1553.67 1204.06 L1554.26 1204.06 L1554.85 1204.06 L1555.43 1204.06 L1556.02 1204.06 L1556.6 1204.06 L1557.19 1204.06 L1557.78 1204.06 L1558.36 1204.06 L1558.95 1204.06 L1559.54 1204.06 L1560.12 1204.06 L1560.71 1204.06 L1561.3 1204.06 L1561.88 1204.06 L1562.47 1204.06 L1563.06 1204.06 L1563.64 1204.06 L1564.23 1204.06 L1564.81 1204.06 L1565.4 1204.06 L1565.99 1204.06 L1566.57 1204.06 L1567.16 1204.06 L1567.75 1204.06 L1568.33 1204.06 L1568.92 1204.06 L1569.51 1204.06 L1570.09 1204.06 L1570.68 1204.06 L1571.27 1204.06 L1571.85 1204.06 L1572.44 1204.06 L1573.02 1204.06 L1573.61 1204.06 L1574.2 1204.06 L1574.78 1204.06 L1575.37 1204.06 L1575.96 1204.06 L1576.54 1204.06 L1577.13 1204.06 L1577.72 1204.06 L1578.3 1204.06 L1578.89 1204.06 L1579.47 1204.06 L1580.06 1204.06 L1580.65 1204.06 L1581.23 1204.06 L1581.82 1204.06 L1582.41 1204.06 L1582.99 1204.06 L1583.58 1204.06 L1584.17 1204.06 L1584.75 1204.06 L1585.34 1204.06 L1585.93 1204.06 L1586.51 1204.06 L1587.1 1204.06 L1587.68 1204.06 L1588.27 1204.06 L1588.86 1204.06 L1589.44 1204.06 L1590.03 1204.06 L1590.62 1204.06 L1591.2 1204.06 L1591.79 1204.06 L1592.38 1204.06 L1592.96 1204.06 L1593.55 1204.06 L1594.14 1204.06 L1594.72 1204.06 L1595.31 1204.06 L1595.89 1204.06 L1596.48 1204.06 L1597.07 1204.06 L1597.65 1204.06 L1598.24 1204.06 L1598.83 1204.06 L1599.41 1204.06 L1600 1204.06 L1600.59 1204.06 L1601.17 1204.06 L1601.76 1204.06 L1602.34 1204.06 L1602.93 1204.06 L1603.52 1204.06 L1604.1 1204.06 L1604.69 1204.06 L1605.28 1204.06 L1605.86 1204.06 L1606.45 1204.06 L1607.04 1204.06 L1607.62 1204.06 L1608.21 1204.06 L1608.8 1204.06 L1609.38 1204.06 L1609.97 1204.06 L1610.55 1204.06 L1611.14 1204.06 L1611.73 1204.06 L1612.31 1204.06 L1612.9 1204.06 L1613.49 1204.06 L1614.07 1204.06 L1614.66 1204.06 L1615.25 1204.06 L1615.83 1204.06 L1616.42 1204.06 L1617.01 1204.06 L1617.59 1204.06 L1618.18 1204.06 L1618.76 1204.06 L1619.35 1204.06 L1619.94 1204.06 L1620.52 1204.06 L1621.11 1204.06 L1621.7 1204.06 L1622.28 1204.06 L1622.87 1204.06 L1623.46 1204.06 L1624.04 1204.06 L1624.63 1204.06 L1625.22 1204.06 L1625.8 1204.06 L1626.39 1204.06 L1626.97 1204.06 L1627.56 1204.06 L1628.15 1204.06 L1628.73 1204.06 L1629.32 1204.06 L1629.91 1204.06 L1630.49 1204.06 L1631.08 1204.06 L1631.67 1204.06 L1632.25 1204.06 L1632.84 1204.06 L1633.42 1204.06 L1634.01 1204.06 L1634.6 1204.06 L1635.18 1204.06 L1635.77 1204.06 L1636.36 1204.06 L1636.94 1204.06 L1637.53 1204.06 L1638.12 1204.06 L1638.7 1204.06 L1639.29 1204.06 L1639.88 1204.06 L1640.46 1204.06 L1641.05 1204.06 L1641.63 1204.06 L1642.22 1204.06 L1642.81 1204.06 L1643.39 1204.06 L1643.98 1204.06 L1644.57 1204.06 L1645.15 1204.06 L1645.74 1204.06 L1646.33 1204.06 L1646.91 1204.06 L1647.5 1204.06 L1648.09 1204.06 L1648.67 1204.06 L1649.26 1204.06 L1649.84 1204.06 L1650.43 1204.06 L1651.02 1204.06 L1651.6 1204.06 L1652.19 1204.06 L1652.78 1204.06 L1653.36 1204.06 L1653.95 1204.06 L1654.54 1204.06 L1655.12 1204.06 L1655.71 1204.06 L1656.29 1204.06 L1656.88 1204.06 L1657.47 1204.06 L1658.05 1204.06 L1658.64 1204.06 L1659.23 1204.06 L1659.81 1204.06 L1660.4 1204.06 L1660.99 1204.06 L1661.57 1204.06 L1662.16 1204.06 L1662.75 1204.06 L1663.33 1204.06 L1663.92 1204.06 L1664.5 1204.06 L1665.09 1204.06 L1665.68 1204.06 L1666.26 1204.06 L1666.85 1204.06 L1667.44 1204.06 L1668.02 1204.06 L1668.61 1204.06 L1669.2 1204.06 L1669.78 1204.06 L1670.37 1204.06 L1670.96 1204.06 L1671.54 1204.06 L1672.13 1204.06 L1672.71 1204.06 L1673.3 1204.06 L1673.89 1204.06 L1674.47 1204.06 L1675.06 1204.06 L1675.65 1204.06 L1676.23 1204.06 L1676.82 1204.06 L1677.41 1204.06 L1677.99 1204.06 L1678.58 1204.06 L1679.17 1204.06 L1679.75 1204.06 L1680.34 1204.06 L1680.92 1204.06 L1681.51 1204.06 L1682.1 1204.06 L1682.68 1204.06 L1683.27 1204.06 L1683.86 1204.06 L1684.44 1204.06 L1685.03 1204.06 L1685.62 1204.06 L1686.2 1204.06 L1686.79 1204.06 L1687.37 1204.06 L1687.96 1204.06 L1688.55 1204.06 L1689.13 1204.06 L1689.72 1204.06 L1690.31 1204.06 L1690.89 1204.06 L1691.48 1204.06 L1692.07 1204.06 L1692.65 1204.06 L1693.24 1204.06 L1693.83 1204.06 L1694.41 1204.06 L1695 1204.06 L1695.58 1204.06 L1696.17 1204.06 L1696.76 1204.06 L1697.34 1204.06 L1697.93 1204.06 L1698.52 1204.06 L1699.1 1204.06 L1699.69 1204.06 L1700.28 1204.06 L1700.86 1204.06 L1701.45 1204.06 L1702.04 1204.06 L1702.62 1204.06 L1703.21 1204.06 L1703.79 1204.06 L1704.38 1204.06 L1704.97 1204.06 L1705.55 1204.06 L1706.14 1204.06 L1706.73 1204.06 L1707.31 1204.06 L1707.9 1204.06 L1708.49 1204.06 L1709.07 1204.06 L1709.66 1204.06 L1710.24 1204.06 L1710.83 1204.06 L1711.42 1204.06 L1712 1204.06 L1712.59 1204.06 L1713.18 1204.06 L1713.76 1204.06 L1714.35 1204.06 L1714.94 1204.06 L1715.52 1204.06 L1716.11 1204.06 L1716.7 1204.06 L1717.28 1204.06 L1717.87 1204.06 L1718.45 1204.06 L1719.04 1204.06 L1719.63 1204.06 L1720.21 1204.06 L1720.8 1204.06 L1721.39 1204.06 L1721.97 1204.06 L1722.56 1204.06 L1723.15 1204.06 L1723.73 1204.06 L1724.32 1204.06 L1724.91 1204.06 L1725.49 1204.06 L1726.08 1204.06 L1726.66 1204.06 L1727.25 1204.06 L1727.84 1204.06 L1728.42 1204.06 L1729.01 1204.06 L1729.6 1204.06 L1730.18 1204.06 L1730.77 1204.06 L1731.36 1204.06 L1731.94 1204.06 L1732.53 1204.06 L1733.11 1204.06 L1733.7 1204.06 L1734.29 1204.06 L1734.87 1204.06 L1735.46 1204.06 L1736.05 1204.06 L1736.63 1204.06 L1737.22 1204.06 L1737.81 1204.06 L1738.39 1204.06 L1738.98 1204.06 L1739.57 1204.06 L1740.15 1204.06 L1740.74 1204.06 L1741.32 1204.06 L1741.91 1204.06 L1742.5 1204.06 L1743.08 1204.06 L1743.67 1204.06 L1744.26 1204.06 L1744.84 1204.06 L1745.43 1204.06 L1746.02 1204.06 L1746.6 1204.06 L1747.19 1204.06 L1747.78 1204.06 L1748.36 1204.06 L1748.95 1204.06 L1749.53 1204.06 L1750.12 1204.06 L1750.71 1204.06 L1751.29 1204.06 L1751.88 1204.06 L1752.47 1204.06 L1753.05 1204.06 L1753.64 1204.06 L1754.23 1204.06 L1754.81 1204.06 L1755.4 1204.06 L1755.99 1204.06 L1756.57 1204.06 L1757.16 1204.06 L1757.74 1204.06 L1758.33 1204.06 L1758.92 1204.06 L1759.5 1204.06 L1760.09 1204.06 L1760.68 1204.06 L1761.26 1204.06 L1761.85 1204.06 L1762.44 1204.06 L1763.02 1204.06 L1763.61 1204.06 L1764.19 1204.06 L1764.78 1204.06 L1765.37 1204.06 L1765.95 1204.06 L1766.54 1204.06 L1767.13 1204.06 L1767.71 1204.06 L1768.3 1204.06 L1768.89 1204.06 L1769.47 1204.06 L1770.06 1204.06 L1770.65 1204.06 L1771.23 1204.06 L1771.82 1204.06 L1772.4 1204.06 L1772.99 1204.06 L1773.58 1204.06 L1774.16 1204.06 L1774.75 1204.06 L1775.34 1204.06 L1775.92 1204.06 L1776.51 1204.06 L1777.1 1204.06 L1777.68 1204.06 L1778.27 1204.06 L1778.86 1204.06 L1779.44 1204.06 L1780.03 1204.06 L1780.61 1204.06 L1781.2 1204.06 L1781.79 1204.06 L1782.37 1204.06 L1782.96 1204.06 L1783.55 1204.06 L1784.13 1204.06 L1784.72 1204.06 L1785.31 1204.06 L1785.89 1204.06 L1786.48 1204.06 L1787.06 1204.06 L1787.65 1204.06 L1788.24 1204.06 L1788.82 1204.06 L1789.41 1204.06 L1790 1204.06 L1790.58 1204.06 L1791.17 1204.06 L1791.76 1204.06 L1792.34 1204.06 L1792.93 1204.06 L1793.52 1204.06 L1794.1 1204.06 L1794.69 1204.06 L1795.27 1204.06 L1795.86 1204.06 L1796.45 1204.06 L1797.03 1204.06 L1797.62 1204.06 L1798.21 1204.06 L1798.79 1204.06 L1799.38 1204.06 L1799.97 1204.06 L1800.55 1204.06 L1801.14 1204.06 L1801.73 1204.06 L1802.31 1204.06 L1802.9 1204.06 L1803.48 1204.06 L1804.07 1204.06 L1804.66 1204.06 L1805.24 1204.06 L1805.83 1204.06 L1806.42 1204.06 L1807 1204.06 L1807.59 1204.06 L1808.18 1204.06 L1808.76 1204.06 L1809.35 1204.06 L1809.94 1204.06 L1810.52 1204.06 L1811.11 1204.06 L1811.69 1204.06 L1812.28 1204.06 L1812.87 1204.06 L1813.45 1204.06 L1814.04 1204.06 L1814.63 1204.06 L1815.21 1204.06 L1815.8 1204.06 L1816.39 1204.06 L1816.97 1204.06 L1817.56 1204.06 L1818.14 1204.06 L1818.73 1204.06 L1819.32 1204.06 L1819.9 1204.06 L1820.49 1204.06 L1821.08 1204.06 L1821.66 1204.06 L1822.25 1204.06 L1822.84 1204.06 L1823.42 1204.06 L1824.01 1204.06 L1824.6 1204.06 L1825.18 1204.06 L1825.77 1204.06 L1826.35 1204.06 L1826.94 1204.06 L1827.53 1204.06 L1828.11 1204.06 L1828.7 1204.06 L1829.29 1204.06 L1829.87 1204.06 L1830.46 1204.06 L1831.05 1204.06 L1831.63 1204.06 L1832.22 1204.06 L1832.81 1204.06 L1833.39 1204.06 L1833.98 1204.06 L1834.56 1204.06 L1835.15 1204.06 L1835.74 1204.06 L1836.32 1204.06 L1836.91 1204.06 L1837.5 1204.06 L1838.08 1204.06 L1838.67 1204.06 L1839.26 1204.06 L1839.84 1204.06 L1840.43 1204.06 L1841.01 1204.06 L1841.6 1204.06 L1842.19 1204.06 L1842.77 1204.06 L1843.36 1204.06 L1843.95 1204.06 L1844.53 1204.06 L1845.12 1204.06 L1845.71 1204.06 L1846.29 1204.06 L1846.88 1204.06 L1847.47 1204.06 L1848.05 1204.06 L1848.64 1204.06 L1849.22 1204.06 L1849.81 1204.06 L1850.4 1204.06 L1850.98 1204.06 L1851.57 1204.06 L1852.16 1204.06 L1852.74 1204.06 L1853.33 1204.06 L1853.92 1204.06 L1854.5 1204.06 L1855.09 1204.06 L1855.68 1204.06 L1856.26 1204.06 L1856.85 1204.06 L1857.43 1204.06 L1858.02 1204.06 L1858.61 1204.06 L1859.19 1204.06 L1859.78 1204.06 L1860.37 1204.06 L1860.95 1204.06 L1861.54 1204.06 L1862.13 1204.06 L1862.71 1204.06 L1863.3 1204.06 L1863.88 1204.06 L1864.47 1204.06 L1865.06 1204.06 L1865.64 1204.06 L1866.23 1204.06 L1866.82 1204.06 L1867.4 1204.06 L1867.99 1204.06 L1868.58 1204.06 L1869.16 1204.06 L1869.75 1204.06 L1870.34 1204.06 L1870.92 1204.06 L1871.51 1204.06 L1872.09 1204.06 L1872.68 1204.06 L1873.27 1204.06 L1873.85 1204.06 L1874.44 1204.06 L1875.03 1204.06 L1875.61 1204.06 L1876.2 1204.06 L1876.79 1204.06 L1877.37 1204.06 L1877.96 1204.06 L1878.55 1204.06 L1879.13 1204.06 L1879.72 1204.06 L1880.3 1204.06 L1880.89 1204.06 L1881.48 1204.06 L1882.06 1204.06 L1882.65 1204.06 L1883.24 1204.06 L1883.82 1204.06 L1884.41 1204.06 L1885 1204.06 L1885.58 1204.06 L1886.17 1204.06 L1886.76 1204.06 L1887.34 1204.06 L1887.93 1204.06 L1888.51 1204.06 L1889.1 1204.06 L1889.69 1204.06 L1890.27 1204.06 L1890.86 1204.06 L1891.45 1204.06 L1892.03 1204.06 L1892.62 1204.06 L1893.21 1204.06 L1893.79 1204.06 L1894.38 1204.06 L1894.96 1204.06 L1895.55 1204.06 L1896.14 1204.06 L1896.72 1204.06 L1897.31 1204.06 L1897.9 1204.06 L1898.48 1204.06 L1899.07 1204.06 L1899.66 1204.06 L1900.24 1204.06 L1900.83 1204.06 L1901.42 1204.06 L1902 1204.06 L1902.59 1204.06 L1903.17 1204.06 L1903.76 1204.06 L1904.35 1204.06 L1904.93 1204.06 L1905.52 1204.06 L1906.11 1204.06 L1906.69 1204.06 L1907.28 1204.06 L1907.87 1204.06 L1908.45 1204.06 L1909.04 1204.06 L1909.63 1204.06 L1910.21 1204.06 L1910.8 1204.06 L1911.38 1204.06 L1911.97 1204.06 L1912.56 1204.06 L1913.14 1204.06 L1913.73 1204.06 L1914.32 1204.06 L1914.9 1204.06 L1915.49 1204.06 L1916.08 1204.06 L1916.66 1204.06 L1917.25 1204.06 L1917.83 1204.06 L1918.42 1204.06 L1919.01 1204.06 L1919.59 1204.06 L1920.18 1204.06 L1920.77 1204.06 L1921.35 1204.06 L1921.94 1204.06 L1922.53 1204.06 L1923.11 1204.06 L1923.7 1204.06 L1924.29 1204.06 L1924.87 1204.06 L1925.46 1204.06 L1926.04 1204.06 L1926.63 1204.06 L1927.22 1204.06 L1927.8 1204.06 L1928.39 1204.06 L1928.98 1204.06 L1929.56 1204.06 L1930.15 1204.06 L1930.74 1204.06 L1931.32 1204.06 L1931.91 1204.06 L1932.5 1204.06 L1933.08 1204.06 L1933.67 1204.06 L1934.25 1204.06 L1934.84 1204.06 L1935.43 1204.06 L1936.01 1204.06 L1936.6 1204.06 L1937.19 1204.06 L1937.77 1204.06 L1938.36 1204.06 L1938.95 1204.06 L1939.53 1204.06 L1940.12 1204.06 L1940.71 1204.06 L1941.29 1204.06 L1941.88 1204.06 L1942.46 1204.06 L1943.05 1204.06 L1943.64 1204.06 L1944.22 1204.06 L1944.81 1204.06 L1945.4 1204.06 L1945.98 1204.06 L1946.57 1204.06 L1947.16 1204.06 L1947.74 1204.06 L1948.33 1204.06 L1948.91 1204.06 L1949.5 1204.06 L1950.09 1204.06 L1950.67 1204.06 L1951.26 1204.06 L1951.85 1204.06 L1952.43 1204.06 L1953.02 1204.06 L1953.61 1204.06 L1954.19 1204.06 L1954.78 1204.06 L1955.37 1204.06 L1955.95 1204.06 L1956.54 1204.06 L1957.12 1204.06 L1957.71 1204.06 L1958.3 1204.06 L1958.88 1204.06 L1959.47 1204.06 L1960.06 1204.06 L1960.64 1204.06 L1961.23 1204.06 L1961.82 1204.06 L1962.4 1204.06 L1962.99 1204.06 L1963.58 1204.06 L1964.16 1204.06 L1964.75 1204.06 L1965.33 1204.06 L1965.92 1204.06 L1966.51 1204.06 L1967.09 1204.06 L1967.68 1204.06 L1968.27 1204.06 L1968.85 1204.06 L1969.44 1204.06 L1970.03 1204.06 L1970.61 1204.06 L1971.2 1204.06 L1971.78 1204.06 L1972.37 1204.06 L1972.96 1204.06 L1973.54 1204.06 L1974.13 1204.06 L1974.72 1204.06 L1975.3 1204.06 L1975.89 1204.06 L1976.48 1204.06 L1977.06 1204.06 L1977.65 1204.06 L1978.24 1204.06 L1978.82 1204.06 L1979.41 1204.06 L1979.99 1204.06 L1980.58 1204.06 L1981.17 1204.06 L1981.75 1204.06 L1982.34 1204.06 L1982.93 1204.06 L1983.51 1204.06 L1984.1 1204.06 L1984.69 1204.06 L1985.27 1204.06 L1985.86 1204.06 L1986.45 1204.06 L1987.03 1204.06 L1987.62 1204.06 L1988.2 1204.06 L1988.79 1204.06 L1989.38 1204.06 L1989.96 1204.06 L1990.55 1204.06 L1991.14 1204.06 L1991.72 1204.06 L1992.31 1204.06 L1992.9 1204.06 L1993.48 1204.06 L1994.07 1204.06 L1994.65 1204.06 L1995.24 1204.06 L1995.83 1204.06 L1996.41 1204.06 L1997 1204.06 L1997.59 1204.06 L1998.17 1204.06 L1998.76 1204.06 L1999.35 1204.06 L1999.93 1204.06 L2000.52 1204.06 L2001.11 1204.06 L2001.69 1204.06 L2002.28 1204.06 L2002.86 1204.06 L2003.45 1204.06 L2004.04 1204.06 L2004.62 1204.06 L2005.21 1204.06 L2005.8 1204.06 L2006.38 1204.06 L2006.97 1204.06 L2007.56 1204.06 L2008.14 1204.06 L2008.73 1204.06 L2009.32 1204.06 L2009.9 1204.06 L2010.49 1204.06 L2011.07 1204.06 L2011.66 1204.06 L2012.25 1204.06 L2012.83 1204.06 L2013.42 1204.06 L2014.01 1204.06 L2014.59 1204.06 L2015.18 1204.06 L2015.77 1204.06 L2016.35 1204.06 L2016.94 1204.06 L2017.53 1204.06 L2018.11 1204.06 L2018.7 1204.06 L2019.28 1204.06 L2019.87 1204.06 L2020.46 1204.06 L2021.04 1204.06 L2021.63 1204.06 L2022.22 1204.06 L2022.8 1204.06 L2023.39 1204.06 L2023.98 1204.06 L2024.56 1204.06 L2025.15 1204.06 L2025.73 1204.06 L2026.32 1204.06 L2026.91 1204.06 L2027.49 1204.06 L2028.08 1204.06 L2028.67 1204.06 L2029.25 1204.06 L2029.84 1204.06 L2030.43 1204.06 L2031.01 1204.06 L2031.6 1204.06 L2032.19 1204.06 L2032.77 1204.06 L2033.36 1204.06 L2033.94 1204.06 L2034.53 1204.06 L2035.12 1204.06 L2035.7 1204.06 L2036.29 1204.06 L2036.88 1204.06 L2037.46 1204.06 L2038.05 1204.06 L2038.64 1204.06 L2039.22 1204.06 L2039.81 1204.06 L2040.4 1204.06 L2040.98 1204.06 L2041.57 1204.06 L2042.15 1204.06 L2042.74 1204.06 L2043.33 1204.06 L2043.91 1204.06 L2044.5 1204.06 L2045.09 1204.06 L2045.67 1204.06 L2046.26 1204.06 L2046.85 1204.06 L2047.43 1204.06 L2048.02 1204.06 L2048.6 1204.06 L2049.19 1204.06 L2049.78 1204.06 L2050.36 1204.06 L2050.95 1204.06 L2051.54 1204.06 L2052.12 1204.06 L2052.71 1204.06 L2053.3 1204.06 L2053.88 1204.06 L2054.47 1204.06 L2055.06 1204.06 L2055.64 1204.06 L2056.23 1204.06 L2056.81 1204.06 L2057.4 1204.06 L2057.99 1204.06 L2058.57 1204.06 L2059.16 1204.06 L2059.75 1204.06 L2060.33 1204.06 L2060.92 1204.06 L2061.51 1204.06 L2062.09 1204.06 L2062.68 1204.06 L2063.27 1204.06 L2063.85 1204.06 L2064.44 1204.06 L2065.02 1204.06 L2065.61 1204.06 L2066.2 1204.06 L2066.78 1204.06 L2067.37 1204.06 L2067.96 1204.06 L2068.54 1204.06 L2069.13 1204.06 L2069.72 1204.06 L2070.3 1204.06 L2070.89 1204.06 L2071.48 1204.06 L2072.06 1204.06 L2072.65 1204.06 L2073.23 1204.06 L2073.82 1204.06 L2074.41 1204.06 L2074.99 1204.06 L2075.58 1204.06 L2076.17 1204.06 L2076.75 1204.06 L2077.34 1204.06 L2077.93 1204.06 L2078.51 1204.06 L2079.1 1204.06 L2079.68 1204.06 L2080.27 1204.06 L2080.86 1204.06 L2081.44 1204.06 L2082.03 1204.06 L2082.62 1204.06 L2083.2 1204.06 L2083.79 1204.06 L2084.38 1204.06 L2084.96 1204.06 L2085.55 1204.06 L2086.14 1204.06 L2086.72 1204.06 L2087.31 1204.06 L2087.89 1204.06 L2088.48 1204.06 L2089.07 1204.06 L2089.65 1204.06 L2090.24 1204.06 L2090.83 1204.06 L2091.41 1204.06 L2092 1204.06 L2092.59 1204.06 L2093.17 1204.06 L2093.76 1204.06 L2094.35 1204.06 L2094.93 1204.06 L2095.52 1204.06 L2096.1 1204.06 L2096.69 1204.06 L2097.28 1204.06 L2097.86 1204.06 L2098.45 1204.06 L2099.04 1204.06 L2099.62 1204.06 L2100.21 1204.06 L2100.8 1204.06 L2101.38 1204.06 L2101.97 1204.06 L2102.55 1204.06 L2103.14 1204.06 L2103.73 1204.06 L2104.31 1204.06 L2104.9 1204.06 L2105.49 1204.06 L2106.07 1204.06 L2106.66 1204.06 L2107.25 1204.06 L2107.83 1204.06 L2108.42 1204.06 L2109.01 1204.06 L2109.59 1204.06 L2110.18 1204.06 L2110.76 1204.06 L2111.35 1204.06 L2111.94 1204.06 L2112.52 1204.06 L2113.11 1204.06 L2113.7 1204.06 L2114.28 1204.06 L2114.87 1204.06 L2115.46 1204.06 L2116.04 1204.06 L2116.63 1204.06 L2117.22 1204.06 L2117.8 1204.06 L2118.39 1204.06 L2118.97 1204.06 L2119.56 1204.06 L2120.15 1204.06 L2120.73 1204.06 L2121.32 1204.06 L2121.91 1204.06 L2122.49 1204.06 L2123.08 1204.06 L2123.67 1204.06 L2124.25 1204.06 L2124.84 1204.06 L2125.42 1204.06 L2126.01 1204.06 L2126.6 1204.06 L2127.18 1204.06 L2127.77 1204.06 L2128.36 1204.06 L2128.94 1204.06 L2129.53 1204.06 L2130.12 1204.06 L2130.7 1204.06 L2131.29 1204.06 L2131.88 1204.06 L2132.46 1204.06 L2133.05 1204.06 L2133.63 1204.06 L2134.22 1204.06 L2134.81 1204.06 L2135.39 1204.06 L2135.98 1204.06 L2136.57 1204.06 L2137.15 1204.06 L2137.74 1204.06 L2138.33 1204.06 L2138.91 1204.06 L2139.5 1204.06 L2140.09 1204.06 L2140.67 1204.06 L2141.26 1204.06 L2141.84 1204.06 L2142.43 1204.06 L2143.02 1204.06 L2143.6 1204.06 L2144.19 1204.06 L2144.78 1204.06 L2145.36 1204.06 L2145.95 1204.06 L2146.54 1204.06 L2147.12 1204.06 L2147.71 1204.06 L2148.3 1204.06 L2148.88 1204.06 L2149.47 1204.06 L2150.05 1204.06 L2150.64 1204.06 L2151.23 1204.06 L2151.81 1204.06 L2152.4 1204.06 L2152.99 1204.06 L2153.57 1204.06 L2154.16 1204.06 L2154.75 1204.06 L2155.33 1204.06 L2155.92 1204.06 L2156.5 1204.06 L2157.09 1204.06 L2157.68 1204.06 L2158.26 1204.06 L2158.26 1203.34 L2157.68 1203.34 L2157.09 1203.34 L2156.5 1203.34 L2155.92 1203.34 L2155.33 1203.34 L2154.75 1203.34 L2154.16 1203.34 L2153.57 1203.34 L2152.99 1203.34 L2152.4 1203.34 L2151.81 1203.34 L2151.23 1203.34 L2150.64 1203.34 L2150.05 1203.34 L2149.47 1203.34 L2148.88 1203.34 L2148.3 1203.34 L2147.71 1203.34 L2147.12 1203.34 L2146.54 1203.34 L2145.95 1203.34 L2145.36 1203.34 L2144.78 1203.34 L2144.19 1203.34 L2143.6 1203.34 L2143.02 1203.34 L2142.43 1203.34 L2141.84 1203.34 L2141.26 1203.34 L2140.67 1203.34 L2140.09 1203.34 L2139.5 1203.34 L2138.91 1203.34 L2138.33 1203.34 L2137.74 1203.34 L2137.15 1203.34 L2136.57 1203.34 L2135.98 1203.34 L2135.39 1203.34 L2134.81 1203.34 L2134.22 1203.34 L2133.63 1203.34 L2133.05 1203.34 L2132.46 1203.34 L2131.88 1203.34 L2131.29 1203.34 L2130.7 1203.34 L2130.12 1203.34 L2129.53 1203.34 L2128.94 1203.34 L2128.36 1203.34 L2127.77 1203.34 L2127.18 1203.34 L2126.6 1203.34 L2126.01 1203.34 L2125.42 1203.34 L2124.84 1203.34 L2124.25 1203.34 L2123.67 1203.34 L2123.08 1203.34 L2122.49 1203.34 L2121.91 1203.34 L2121.32 1203.34 L2120.73 1203.34 L2120.15 1203.34 L2119.56 1203.34 L2118.97 1203.34 L2118.39 1203.34 L2117.8 1203.34 L2117.22 1203.34 L2116.63 1203.34 L2116.04 1203.34 L2115.46 1203.34 L2114.87 1203.34 L2114.28 1203.34 L2113.7 1203.34 L2113.11 1203.34 L2112.52 1203.34 L2111.94 1203.34 L2111.35 1203.34 L2110.76 1203.34 L2110.18 1203.34 L2109.59 1203.34 L2109.01 1203.34 L2108.42 1203.34 L2107.83 1203.34 L2107.25 1203.34 L2106.66 1203.34 L2106.07 1203.34 L2105.49 1203.34 L2104.9 1203.34 L2104.31 1203.34 L2103.73 1203.34 L2103.14 1203.34 L2102.55 1203.34 L2101.97 1203.34 L2101.38 1203.34 L2100.8 1203.34 L2100.21 1203.34 L2099.62 1203.34 L2099.04 1203.34 L2098.45 1203.34 L2097.86 1203.34 L2097.28 1203.34 L2096.69 1203.34 L2096.1 1203.34 L2095.52 1203.34 L2094.93 1203.34 L2094.35 1203.34 L2093.76 1203.34 L2093.17 1203.34 L2092.59 1203.34 L2092 1203.34 L2091.41 1203.34 L2090.83 1203.34 L2090.24 1203.34 L2089.65 1203.34 L2089.07 1203.34 L2088.48 1203.34 L2087.89 1203.34 L2087.31 1203.34 L2086.72 1203.34 L2086.14 1203.34 L2085.55 1203.34 L2084.96 1203.34 L2084.38 1203.34 L2083.79 1203.34 L2083.2 1203.34 L2082.62 1203.34 L2082.03 1203.34 L2081.44 1203.34 L2080.86 1203.34 L2080.27 1203.34 L2079.68 1203.34 L2079.1 1203.34 L2078.51 1203.34 L2077.93 1203.34 L2077.34 1203.34 L2076.75 1203.34 L2076.17 1203.34 L2075.58 1203.34 L2074.99 1203.34 L2074.41 1203.34 L2073.82 1203.34 L2073.23 1203.34 L2072.65 1203.34 L2072.06 1203.34 L2071.48 1203.34 L2070.89 1203.34 L2070.3 1203.34 L2069.72 1203.34 L2069.13 1203.34 L2068.54 1203.34 L2067.96 1203.34 L2067.37 1203.34 L2066.78 1203.34 L2066.2 1203.34 L2065.61 1203.34 L2065.02 1203.34 L2064.44 1203.34 L2063.85 1203.34 L2063.27 1203.34 L2062.68 1203.34 L2062.09 1203.34 L2061.51 1203.34 L2060.92 1203.34 L2060.33 1203.34 L2059.75 1203.34 L2059.16 1203.34 L2058.57 1203.34 L2057.99 1203.34 L2057.4 1203.34 L2056.81 1203.34 L2056.23 1203.34 L2055.64 1203.34 L2055.06 1203.34 L2054.47 1203.34 L2053.88 1203.34 L2053.3 1203.34 L2052.71 1203.34 L2052.12 1203.34 L2051.54 1203.34 L2050.95 1203.34 L2050.36 1203.34 L2049.78 1203.34 L2049.19 1203.34 L2048.6 1203.34 L2048.02 1203.34 L2047.43 1203.34 L2046.85 1203.34 L2046.26 1203.34 L2045.67 1203.34 L2045.09 1203.34 L2044.5 1203.34 L2043.91 1203.34 L2043.33 1203.34 L2042.74 1203.34 L2042.15 1203.34 L2041.57 1203.34 L2040.98 1203.34 L2040.4 1203.34 L2039.81 1203.34 L2039.22 1203.34 L2038.64 1203.34 L2038.05 1203.34 L2037.46 1203.34 L2036.88 1203.34 L2036.29 1203.34 L2035.7 1203.34 L2035.12 1203.34 L2034.53 1203.34 L2033.94 1203.34 L2033.36 1203.34 L2032.77 1203.34 L2032.19 1203.34 L2031.6 1203.34 L2031.01 1203.34 L2030.43 1203.34 L2029.84 1203.34 L2029.25 1203.34 L2028.67 1203.34 L2028.08 1203.34 L2027.49 1203.34 L2026.91 1203.34 L2026.32 1203.34 L2025.73 1203.34 L2025.15 1203.34 L2024.56 1203.34 L2023.98 1203.34 L2023.39 1203.34 L2022.8 1203.34 L2022.22 1203.34 L2021.63 1203.34 L2021.04 1203.34 L2020.46 1203.34 L2019.87 1203.34 L2019.28 1203.34 L2018.7 1203.34 L2018.11 1203.34 L2017.53 1203.34 L2016.94 1203.34 L2016.35 1203.34 L2015.77 1203.34 L2015.18 1203.34 L2014.59 1203.34 L2014.01 1203.34 L2013.42 1203.34 L2012.83 1203.34 L2012.25 1203.34 L2011.66 1203.34 L2011.07 1203.34 L2010.49 1203.34 L2009.9 1203.34 L2009.32 1203.34 L2008.73 1203.34 L2008.14 1203.34 L2007.56 1203.34 L2006.97 1203.34 L2006.38 1203.34 L2005.8 1203.34 L2005.21 1203.34 L2004.62 1203.34 L2004.04 1203.34 L2003.45 1203.34 L2002.86 1203.34 L2002.28 1203.34 L2001.69 1203.34 L2001.11 1203.34 L2000.52 1203.34 L1999.93 1203.34 L1999.35 1203.34 L1998.76 1203.34 L1998.17 1203.34 L1997.59 1203.34 L1997 1203.34 L1996.41 1203.34 L1995.83 1203.34 L1995.24 1203.34 L1994.65 1203.34 L1994.07 1203.34 L1993.48 1203.34 L1992.9 1203.34 L1992.31 1203.34 L1991.72 1203.34 L1991.14 1203.34 L1990.55 1203.34 L1989.96 1203.34 L1989.38 1203.34 L1988.79 1203.34 L1988.2 1203.34 L1987.62 1203.34 L1987.03 1203.34 L1986.45 1203.34 L1985.86 1203.34 L1985.27 1203.34 L1984.69 1203.34 L1984.1 1203.34 L1983.51 1203.34 L1982.93 1203.34 L1982.34 1203.34 L1981.75 1203.34 L1981.17 1203.34 L1980.58 1203.34 L1979.99 1203.34 L1979.41 1203.34 L1978.82 1203.34 L1978.24 1203.34 L1977.65 1203.34 L1977.06 1203.34 L1976.48 1203.34 L1975.89 1203.34 L1975.3 1203.34 L1974.72 1203.34 L1974.13 1203.34 L1973.54 1203.34 L1972.96 1203.34 L1972.37 1203.34 L1971.78 1203.34 L1971.2 1203.34 L1970.61 1203.34 L1970.03 1203.34 L1969.44 1203.34 L1968.85 1203.34 L1968.27 1203.34 L1967.68 1203.34 L1967.09 1203.34 L1966.51 1203.34 L1965.92 1203.34 L1965.33 1203.34 L1964.75 1203.34 L1964.16 1203.34 L1963.58 1203.34 L1962.99 1203.34 L1962.4 1203.34 L1961.82 1203.34 L1961.23 1203.34 L1960.64 1203.34 L1960.06 1203.34 L1959.47 1203.34 L1958.88 1203.34 L1958.3 1203.34 L1957.71 1203.34 L1957.12 1203.34 L1956.54 1203.34 L1955.95 1203.34 L1955.37 1203.34 L1954.78 1203.34 L1954.19 1203.34 L1953.61 1203.34 L1953.02 1203.34 L1952.43 1203.34 L1951.85 1203.34 L1951.26 1203.34 L1950.67 1203.34 L1950.09 1203.34 L1949.5 1203.34 L1948.91 1203.34 L1948.33 1203.34 L1947.74 1203.34 L1947.16 1203.34 L1946.57 1203.34 L1945.98 1203.34 L1945.4 1203.34 L1944.81 1203.34 L1944.22 1203.34 L1943.64 1203.34 L1943.05 1203.34 L1942.46 1203.34 L1941.88 1203.34 L1941.29 1203.34 L1940.71 1203.34 L1940.12 1203.34 L1939.53 1203.34 L1938.95 1203.34 L1938.36 1203.34 L1937.77 1203.34 L1937.19 1203.34 L1936.6 1203.34 L1936.01 1203.34 L1935.43 1203.34 L1934.84 1203.34 L1934.25 1203.34 L1933.67 1203.34 L1933.08 1203.34 L1932.5 1203.34 L1931.91 1203.34 L1931.32 1203.34 L1930.74 1203.34 L1930.15 1203.34 L1929.56 1203.34 L1928.98 1203.34 L1928.39 1203.34 L1927.8 1203.34 L1927.22 1203.34 L1926.63 1203.34 L1926.04 1203.34 L1925.46 1203.34 L1924.87 1203.34 L1924.29 1203.34 L1923.7 1203.34 L1923.11 1203.34 L1922.53 1203.34 L1921.94 1203.34 L1921.35 1203.34 L1920.77 1203.34 L1920.18 1203.34 L1919.59 1203.34 L1919.01 1203.34 L1918.42 1203.34 L1917.83 1203.34 L1917.25 1203.34 L1916.66 1203.34 L1916.08 1203.34 L1915.49 1203.34 L1914.9 1203.34 L1914.32 1203.34 L1913.73 1203.34 L1913.14 1203.34 L1912.56 1203.34 L1911.97 1203.34 L1911.38 1203.34 L1910.8 1203.34 L1910.21 1203.34 L1909.63 1203.34 L1909.04 1203.34 L1908.45 1203.34 L1907.87 1203.34 L1907.28 1203.34 L1906.69 1203.34 L1906.11 1203.34 L1905.52 1203.34 L1904.93 1203.34 L1904.35 1203.34 L1903.76 1203.34 L1903.17 1203.34 L1902.59 1203.34 L1902 1203.34 L1901.42 1203.34 L1900.83 1203.34 L1900.24 1203.34 L1899.66 1203.34 L1899.07 1203.34 L1898.48 1203.34 L1897.9 1203.34 L1897.31 1203.34 L1896.72 1203.34 L1896.14 1203.34 L1895.55 1203.34 L1894.96 1203.34 L1894.38 1203.34 L1893.79 1203.34 L1893.21 1203.34 L1892.62 1203.34 L1892.03 1203.34 L1891.45 1203.34 L1890.86 1203.34 L1890.27 1203.34 L1889.69 1203.34 L1889.1 1203.34 L1888.51 1203.34 L1887.93 1203.34 L1887.34 1203.34 L1886.76 1203.34 L1886.17 1203.34 L1885.58 1203.34 L1885 1203.34 L1884.41 1203.34 L1883.82 1203.34 L1883.24 1203.34 L1882.65 1203.34 L1882.06 1203.34 L1881.48 1203.34 L1880.89 1203.34 L1880.3 1203.34 L1879.72 1203.34 L1879.13 1203.34 L1878.55 1203.34 L1877.96 1203.34 L1877.37 1203.34 L1876.79 1203.34 L1876.2 1203.34 L1875.61 1203.34 L1875.03 1203.34 L1874.44 1203.34 L1873.85 1203.34 L1873.27 1203.34 L1872.68 1203.34 L1872.09 1203.34 L1871.51 1203.34 L1870.92 1203.34 L1870.34 1203.34 L1869.75 1203.34 L1869.16 1203.34 L1868.58 1203.34 L1867.99 1203.34 L1867.4 1203.34 L1866.82 1203.34 L1866.23 1203.34 L1865.64 1203.34 L1865.06 1203.34 L1864.47 1203.34 L1863.88 1203.34 L1863.3 1203.34 L1862.71 1203.34 L1862.13 1203.34 L1861.54 1203.34 L1860.95 1203.34 L1860.37 1203.34 L1859.78 1203.34 L1859.19 1203.34 L1858.61 1203.34 L1858.02 1203.34 L1857.43 1203.34 L1856.85 1203.34 L1856.26 1203.34 L1855.68 1203.34 L1855.09 1203.34 L1854.5 1203.34 L1853.92 1203.34 L1853.33 1203.34 L1852.74 1203.34 L1852.16 1203.34 L1851.57 1203.34 L1850.98 1203.34 L1850.4 1203.34 L1849.81 1203.34 L1849.22 1203.34 L1848.64 1203.34 L1848.05 1203.34 L1847.47 1203.34 L1846.88 1203.34 L1846.29 1203.34 L1845.71 1203.34 L1845.12 1203.34 L1844.53 1203.34 L1843.95 1203.34 L1843.36 1203.34 L1842.77 1203.34 L1842.19 1203.34 L1841.6 1203.34 L1841.01 1203.34 L1840.43 1203.34 L1839.84 1203.34 L1839.26 1203.34 L1838.67 1203.34 L1838.08 1203.34 L1837.5 1203.34 L1836.91 1203.34 L1836.32 1203.34 L1835.74 1203.34 L1835.15 1203.34 L1834.56 1203.34 L1833.98 1203.34 L1833.39 1203.34 L1832.81 1203.34 L1832.22 1203.34 L1831.63 1203.34 L1831.05 1203.34 L1830.46 1203.34 L1829.87 1203.34 L1829.29 1203.34 L1828.7 1203.34 L1828.11 1203.34 L1827.53 1203.34 L1826.94 1203.34 L1826.35 1203.34 L1825.77 1203.34 L1825.18 1203.34 L1824.6 1203.34 L1824.01 1203.34 L1823.42 1203.34 L1822.84 1203.34 L1822.25 1203.34 L1821.66 1203.34 L1821.08 1203.34 L1820.49 1203.34 L1819.9 1203.34 L1819.32 1203.34 L1818.73 1203.34 L1818.14 1203.34 L1817.56 1203.34 L1816.97 1203.34 L1816.39 1203.34 L1815.8 1203.34 L1815.21 1203.34 L1814.63 1203.34 L1814.04 1203.34 L1813.45 1203.34 L1812.87 1203.34 L1812.28 1203.34 L1811.69 1203.34 L1811.11 1203.34 L1810.52 1203.34 L1809.94 1203.34 L1809.35 1203.34 L1808.76 1203.34 L1808.18 1203.34 L1807.59 1203.34 L1807 1203.34 L1806.42 1203.34 L1805.83 1203.34 L1805.24 1203.34 L1804.66 1203.34 L1804.07 1203.34 L1803.48 1203.34 L1802.9 1203.34 L1802.31 1203.34 L1801.73 1203.34 L1801.14 1203.34 L1800.55 1203.34 L1799.97 1203.34 L1799.38 1203.34 L1798.79 1203.34 L1798.21 1203.34 L1797.62 1203.34 L1797.03 1203.34 L1796.45 1203.34 L1795.86 1203.34 L1795.27 1203.34 L1794.69 1203.34 L1794.1 1203.34 L1793.52 1203.34 L1792.93 1203.34 L1792.34 1203.34 L1791.76 1203.34 L1791.17 1203.34 L1790.58 1203.34 L1790 1203.34 L1789.41 1203.34 L1788.82 1203.34 L1788.24 1203.34 L1787.65 1203.34 L1787.06 1203.34 L1786.48 1203.34 L1785.89 1203.34 L1785.31 1203.34 L1784.72 1203.34 L1784.13 1203.34 L1783.55 1203.34 L1782.96 1203.34 L1782.37 1203.34 L1781.79 1203.34 L1781.2 1203.34 L1780.61 1203.34 L1780.03 1203.34 L1779.44 1203.34 L1778.86 1203.34 L1778.27 1203.34 L1777.68 1203.34 L1777.1 1203.34 L1776.51 1203.34 L1775.92 1203.34 L1775.34 1203.34 L1774.75 1203.34 L1774.16 1203.34 L1773.58 1203.34 L1772.99 1203.34 L1772.4 1203.34 L1771.82 1203.34 L1771.23 1203.34 L1770.65 1203.34 L1770.06 1203.34 L1769.47 1203.34 L1768.89 1203.34 L1768.3 1203.34 L1767.71 1203.34 L1767.13 1203.34 L1766.54 1203.34 L1765.95 1203.34 L1765.37 1203.34 L1764.78 1203.34 L1764.19 1203.34 L1763.61 1203.34 L1763.02 1203.34 L1762.44 1203.34 L1761.85 1203.34 L1761.26 1203.34 L1760.68 1203.34 L1760.09 1203.34 L1759.5 1203.34 L1758.92 1203.34 L1758.33 1203.34 L1757.74 1203.34 L1757.16 1203.34 L1756.57 1203.34 L1755.99 1203.34 L1755.4 1203.34 L1754.81 1203.34 L1754.23 1203.34 L1753.64 1203.34 L1753.05 1203.34 L1752.47 1203.34 L1751.88 1203.34 L1751.29 1203.34 L1750.71 1203.34 L1750.12 1203.34 L1749.53 1203.34 L1748.95 1203.34 L1748.36 1203.34 L1747.78 1203.34 L1747.19 1203.34 L1746.6 1203.34 L1746.02 1203.34 L1745.43 1203.34 L1744.84 1203.34 L1744.26 1203.34 L1743.67 1203.34 L1743.08 1203.34 L1742.5 1203.34 L1741.91 1203.34 L1741.32 1203.34 L1740.74 1203.34 L1740.15 1203.34 L1739.57 1203.34 L1738.98 1203.34 L1738.39 1203.34 L1737.81 1203.34 L1737.22 1203.34 L1736.63 1203.34 L1736.05 1203.34 L1735.46 1203.34 L1734.87 1203.34 L1734.29 1203.34 L1733.7 1203.34 L1733.11 1203.34 L1732.53 1203.34 L1731.94 1203.34 L1731.36 1203.34 L1730.77 1203.34 L1730.18 1203.34 L1729.6 1203.34 L1729.01 1203.34 L1728.42 1203.34 L1727.84 1203.34 L1727.25 1203.34 L1726.66 1203.34 L1726.08 1203.34 L1725.49 1203.34 L1724.91 1203.34 L1724.32 1203.34 L1723.73 1203.34 L1723.15 1203.34 L1722.56 1203.34 L1721.97 1203.34 L1721.39 1203.34 L1720.8 1203.34 L1720.21 1203.34 L1719.63 1203.34 L1719.04 1203.34 L1718.45 1203.34 L1717.87 1203.34 L1717.28 1203.34 L1716.7 1203.34 L1716.11 1203.34 L1715.52 1203.34 L1714.94 1203.34 L1714.35 1203.34 L1713.76 1203.34 L1713.18 1203.34 L1712.59 1203.34 L1712 1203.34 L1711.42 1203.34 L1710.83 1203.34 L1710.24 1203.34 L1709.66 1203.34 L1709.07 1203.34 L1708.49 1203.34 L1707.9 1203.34 L1707.31 1203.34 L1706.73 1203.34 L1706.14 1203.34 L1705.55 1203.34 L1704.97 1203.34 L1704.38 1203.34 L1703.79 1203.34 L1703.21 1203.34 L1702.62 1203.34 L1702.04 1203.34 L1701.45 1203.34 L1700.86 1203.34 L1700.28 1203.34 L1699.69 1203.34 L1699.1 1203.34 L1698.52 1203.34 L1697.93 1203.34 L1697.34 1203.34 L1696.76 1203.34 L1696.17 1203.34 L1695.58 1203.34 L1695 1203.34 L1694.41 1203.34 L1693.83 1203.34 L1693.24 1203.34 L1692.65 1203.34 L1692.07 1203.34 L1691.48 1203.34 L1690.89 1203.34 L1690.31 1203.34 L1689.72 1203.34 L1689.13 1203.34 L1688.55 1203.34 L1687.96 1203.34 L1687.37 1203.34 L1686.79 1203.34 L1686.2 1203.34 L1685.62 1203.34 L1685.03 1203.34 L1684.44 1203.34 L1683.86 1203.34 L1683.27 1203.34 L1682.68 1203.34 L1682.1 1203.34 L1681.51 1203.34 L1680.92 1203.34 L1680.34 1203.34 L1679.75 1203.34 L1679.17 1203.34 L1678.58 1203.34 L1677.99 1203.34 L1677.41 1203.34 L1676.82 1203.34 L1676.23 1203.34 L1675.65 1203.34 L1675.06 1203.34 L1674.47 1203.34 L1673.89 1203.34 L1673.3 1203.34 L1672.71 1203.34 L1672.13 1203.34 L1671.54 1203.34 L1670.96 1203.34 L1670.37 1203.34 L1669.78 1203.34 L1669.2 1203.34 L1668.61 1203.34 L1668.02 1203.34 L1667.44 1203.34 L1666.85 1203.34 L1666.26 1203.34 L1665.68 1203.34 L1665.09 1203.34 L1664.5 1203.34 L1663.92 1203.34 L1663.33 1203.34 L1662.75 1203.34 L1662.16 1203.34 L1661.57 1203.34 L1660.99 1203.34 L1660.4 1203.34 L1659.81 1203.34 L1659.23 1203.34 L1658.64 1203.34 L1658.05 1203.34 L1657.47 1203.34 L1656.88 1203.34 L1656.29 1203.34 L1655.71 1203.34 L1655.12 1203.34 L1654.54 1203.34 L1653.95 1203.34 L1653.36 1203.34 L1652.78 1203.34 L1652.19 1203.34 L1651.6 1203.34 L1651.02 1203.34 L1650.43 1203.34 L1649.84 1203.34 L1649.26 1203.34 L1648.67 1203.34 L1648.09 1203.34 L1647.5 1203.34 L1646.91 1203.34 L1646.33 1203.34 L1645.74 1203.34 L1645.15 1203.34 L1644.57 1203.34 L1643.98 1203.34 L1643.39 1203.34 L1642.81 1203.34 L1642.22 1203.34 L1641.63 1203.34 L1641.05 1203.34 L1640.46 1203.34 L1639.88 1203.34 L1639.29 1203.34 L1638.7 1203.34 L1638.12 1203.34 L1637.53 1203.34 L1636.94 1203.34 L1636.36 1203.34 L1635.77 1203.34 L1635.18 1203.34 L1634.6 1203.34 L1634.01 1203.34 L1633.42 1203.34 L1632.84 1203.34 L1632.25 1203.34 L1631.67 1203.34 L1631.08 1203.34 L1630.49 1203.34 L1629.91 1203.34 L1629.32 1203.34 L1628.73 1203.34 L1628.15 1203.34 L1627.56 1203.34 L1626.97 1203.34 L1626.39 1203.34 L1625.8 1203.34 L1625.22 1203.34 L1624.63 1203.34 L1624.04 1203.34 L1623.46 1203.34 L1622.87 1203.34 L1622.28 1203.34 L1621.7 1203.34 L1621.11 1203.34 L1620.52 1203.34 L1619.94 1203.34 L1619.35 1203.34 L1618.76 1203.34 L1618.18 1203.34 L1617.59 1203.34 L1617.01 1203.34 L1616.42 1203.34 L1615.83 1203.34 L1615.25 1203.34 L1614.66 1203.34 L1614.07 1203.34 L1613.49 1203.34 L1612.9 1203.34 L1612.31 1203.34 L1611.73 1203.34 L1611.14 1203.34 L1610.55 1203.34 L1609.97 1203.34 L1609.38 1203.34 L1608.8 1203.34 L1608.21 1203.34 L1607.62 1203.34 L1607.04 1203.34 L1606.45 1203.34 L1605.86 1203.34 L1605.28 1203.34 L1604.69 1203.34 L1604.1 1203.34 L1603.52 1203.34 L1602.93 1203.34 L1602.34 1203.34 L1601.76 1203.34 L1601.17 1203.34 L1600.59 1203.34 L1600 1203.34 L1599.41 1203.34 L1598.83 1203.34 L1598.24 1203.34 L1597.65 1203.34 L1597.07 1203.34 L1596.48 1203.34 L1595.89 1203.34 L1595.31 1203.34 L1594.72 1203.34 L1594.14 1203.34 L1593.55 1203.34 L1592.96 1203.34 L1592.38 1203.34 L1591.79 1203.34 L1591.2 1203.34 L1590.62 1203.34 L1590.03 1203.34 L1589.44 1203.34 L1588.86 1203.34 L1588.27 1203.34 L1587.68 1203.34 L1587.1 1203.34 L1586.51 1203.34 L1585.93 1203.34 L1585.34 1203.34 L1584.75 1203.34 L1584.17 1203.34 L1583.58 1203.34 L1582.99 1203.34 L1582.41 1203.34 L1581.82 1203.34 L1581.23 1203.34 L1580.65 1203.34 L1580.06 1203.34 L1579.47 1203.34 L1578.89 1203.34 L1578.3 1203.34 L1577.72 1203.34 L1577.13 1203.34 L1576.54 1203.34 L1575.96 1203.34 L1575.37 1203.34 L1574.78 1203.34 L1574.2 1203.34 L1573.61 1203.34 L1573.02 1203.34 L1572.44 1203.34 L1571.85 1203.34 L1571.27 1203.34 L1570.68 1203.34 L1570.09 1203.34 L1569.51 1203.34 L1568.92 1203.34 L1568.33 1203.34 L1567.75 1203.34 L1567.16 1203.34 L1566.57 1203.34 L1565.99 1203.34 L1565.4 1203.34 L1564.81 1203.34 L1564.23 1203.34 L1563.64 1203.34 L1563.06 1203.34 L1562.47 1203.34 L1561.88 1203.34 L1561.3 1203.34 L1560.71 1203.34 L1560.12 1203.34 L1559.54 1203.34 L1558.95 1203.34 L1558.36 1203.34 L1557.78 1203.34 L1557.19 1203.34 L1556.6 1203.34 L1556.02 1203.34 L1555.43 1203.34 L1554.85 1203.34 L1554.26 1203.34 L1553.67 1203.34 L1553.09 1203.34 L1552.5 1203.34 L1551.91 1203.34 L1551.33 1203.34 L1550.74 1203.34 L1550.15 1203.34 L1549.57 1203.34 L1548.98 1203.34 L1548.4 1203.34 L1547.81 1203.34 L1547.22 1203.34 L1546.64 1203.34 L1546.05 1203.34 L1545.46 1203.34 L1544.88 1203.34 L1544.29 1203.34 L1543.7 1203.34 L1543.12 1203.34 L1542.53 1203.34 L1541.94 1203.34 L1541.36 1203.34 L1540.77 1203.34 L1540.19 1203.34 L1539.6 1203.34 L1539.01 1203.34 L1538.43 1203.34 L1537.84 1203.34 L1537.25 1203.34 L1536.67 1203.34 L1536.08 1203.34 L1535.49 1203.34 L1534.91 1203.34 L1534.32 1203.34 L1533.73 1203.34 L1533.15 1203.34 L1532.56 1203.34 L1531.98 1203.34 L1531.39 1203.34 L1530.8 1203.34 L1530.22 1203.34 L1529.63 1203.34 L1529.04 1203.34 L1528.46 1203.34 L1527.87 1203.34 L1527.28 1203.34 L1526.7 1203.34 L1526.11 1203.34 L1525.52 1203.34 L1524.94 1203.34 L1524.35 1203.34 L1523.77 1203.34 L1523.18 1203.34 L1522.59 1203.34 L1522.01 1203.34 L1521.42 1203.34 L1520.83 1203.34 L1520.25 1203.34 L1519.66 1203.34 L1519.07 1203.34 L1518.49 1203.34 L1517.9 1203.34 L1517.32 1203.34 L1516.73 1203.34 L1516.14 1203.34 L1515.56 1203.34 L1514.97 1203.34 L1514.38 1203.34 L1513.8 1203.34 L1513.21 1203.34 L1512.62 1203.34 L1512.04 1203.34 L1511.45 1203.34 L1510.86 1203.34 L1510.28 1203.34 L1509.69 1203.34 L1509.11 1203.34 L1508.52 1203.34 L1507.93 1203.34 L1507.35 1203.34 L1506.76 1203.34 L1506.17 1203.34 L1505.59 1203.34 L1505 1203.34 L1504.41 1203.34 L1503.83 1203.34 L1503.24 1203.34 L1502.65 1203.34 L1502.07 1203.34 L1501.48 1203.34 L1500.9 1203.34 L1500.31 1203.34 L1499.72 1203.34 L1499.14 1203.34 L1498.55 1203.34 L1497.96 1203.34 L1497.38 1203.34 L1496.79 1203.34 L1496.2 1203.34 L1495.62 1203.34 L1495.03 1203.34 L1494.45 1203.34 L1493.86 1203.34 L1493.27 1203.34 L1492.69 1203.34 L1492.1 1203.34 L1491.51 1203.34 L1490.93 1203.34 L1490.34 1203.34 L1489.75 1203.34 L1489.17 1203.34 L1488.58 1203.34 L1487.99 1203.34 L1487.41 1203.34 L1486.82 1203.34 L1486.24 1203.34 L1485.65 1203.34 L1485.06 1203.34 L1484.48 1203.34 L1483.89 1203.34 L1483.3 1203.34 L1482.72 1203.34 L1482.13 1203.34 L1481.54 1203.34 L1480.96 1203.34 L1480.37 1203.34 L1479.78 1203.34 L1479.2 1203.34 L1478.61 1203.34 L1478.03 1203.34 L1477.44 1203.34 L1476.85 1203.34 L1476.27 1203.34 L1475.68 1203.34 L1475.09 1203.34 L1474.51 1203.34 L1473.92 1203.34 L1473.33 1203.34 L1472.75 1203.34 L1472.16 1203.34 L1471.57 1203.34 L1470.99 1203.34 L1470.4 1203.34 L1469.82 1203.34 L1469.23 1203.34 L1468.64 1203.34 L1468.06 1203.34 L1467.47 1203.34 L1466.88 1203.34 L1466.3 1203.34 L1465.71 1203.34 L1465.12 1203.34 L1464.54 1203.34 L1463.95 1203.34 L1463.37 1203.34 L1462.78 1203.34 L1462.19 1203.34 L1461.61 1203.34 L1461.02 1203.34 L1460.43 1203.34 L1459.85 1203.34 L1459.26 1203.34 L1458.67 1203.34 L1458.09 1203.34 L1457.5 1203.34 L1456.91 1203.34 L1456.33 1203.34 L1455.74 1203.34 L1455.16 1203.34 L1454.57 1203.34 L1453.98 1203.34 L1453.4 1203.34 L1452.81 1203.34 L1452.22 1203.34 L1451.64 1203.34 L1451.05 1203.34 L1450.46 1203.34 L1449.88 1203.34 L1449.29 1203.34 L1448.7 1203.34 L1448.12 1203.34 L1447.53 1203.34 L1446.95 1203.34 L1446.36 1203.34 L1445.77 1203.34 L1445.19 1203.34 L1444.6 1203.34 L1444.01 1203.34 L1443.43 1203.34 L1442.84 1203.34 L1442.25 1203.34 L1441.67 1203.34 L1441.08 1203.34 L1440.5 1203.34 L1439.91 1203.34 L1439.32 1203.34 L1438.74 1203.34 L1438.15 1203.34 L1437.56 1203.34 L1436.98 1203.34 L1436.39 1203.34 L1435.8 1203.34 L1435.22 1203.34 L1434.63 1203.34 L1434.04 1203.34 L1433.46 1203.34 L1432.87 1203.34 L1432.29 1203.34 L1431.7 1203.34 L1431.11 1203.34 L1430.53 1203.34 L1429.94 1203.34 L1429.35 1203.34 L1428.77 1203.34 L1428.18 1203.34 L1427.59 1203.34 L1427.01 1203.34 L1426.42 1203.34 L1425.83 1203.34 L1425.25 1203.34 L1424.66 1203.34 L1424.08 1203.34 L1423.49 1203.34 L1422.9 1203.34 L1422.32 1203.34 L1421.73 1203.34 L1421.14 1203.34 L1420.56 1203.34 L1419.97 1203.34 L1419.38 1203.34 L1418.8 1203.34 L1418.21 1203.34 L1417.63 1203.34 L1417.04 1203.34 L1416.45 1203.34 L1415.87 1203.34 L1415.28 1203.34 L1414.69 1203.34 L1414.11 1203.34 L1413.52 1203.34 L1412.93 1203.34 L1412.35 1203.34 L1411.76 1203.34 L1411.17 1203.34 L1410.59 1203.34 L1410 1203.34 L1409.42 1203.34 L1408.83 1203.34 L1408.24 1203.34 L1407.66 1203.34 L1407.07 1203.34 L1406.48 1203.34 L1405.9 1203.34 L1405.31 1203.34 L1404.72 1203.34 L1404.14 1203.34 L1403.55 1203.34 L1402.96 1203.34 L1402.38 1203.34 L1401.79 1203.34 L1401.21 1203.34 L1400.62 1203.34 L1400.03 1203.34 L1399.45 1203.34 L1398.86 1203.34 L1398.27 1203.34 L1397.69 1203.34 L1397.1 1203.34 L1396.51 1203.34 L1395.93 1203.34 L1395.34 1203.34 L1394.75 1203.34 L1394.17 1203.34 L1393.58 1203.34 L1393 1203.34 L1392.41 1203.34 L1391.82 1203.34 L1391.24 1203.34 L1390.65 1203.34 L1390.06 1203.34 L1389.48 1203.34 L1388.89 1203.34 L1388.3 1203.34 L1387.72 1203.34 L1387.13 1203.34 L1386.55 1203.34 L1385.96 1203.34 L1385.37 1203.34 L1384.79 1203.34 L1384.2 1203.34 L1383.61 1203.34 L1383.03 1203.34 L1382.44 1203.34 L1381.85 1203.34 L1381.27 1203.34 L1380.68 1203.34 L1380.09 1203.34 L1379.51 1203.34 L1378.92 1203.34 L1378.34 1203.34 L1377.75 1203.34 L1377.16 1203.34 L1376.58 1203.34 L1375.99 1203.34 L1375.4 1203.34 L1374.82 1203.34 L1374.23 1203.34 L1373.64 1203.34 L1373.06 1203.34 L1372.47 1203.34 L1371.88 1203.34 L1371.3 1203.34 L1370.71 1203.34 L1370.13 1203.34 L1369.54 1203.34 L1368.95 1203.34 L1368.37 1203.34 L1367.78 1203.34 L1367.19 1203.34 L1366.61 1203.34 L1366.02 1203.34 L1365.43 1203.34 L1364.85 1203.34 L1364.26 1203.34 L1363.68 1203.34 L1363.09 1203.34 L1362.5 1203.34 L1361.92 1203.34 L1361.33 1203.34 L1360.74 1203.34 L1360.16 1203.34 L1359.57 1203.34 L1358.98 1203.34 L1358.4 1203.34 L1357.81 1203.34 L1357.22 1203.34 L1356.64 1203.34 L1356.05 1203.34 L1355.47 1203.34 L1354.88 1203.34 L1354.29 1203.34 L1353.71 1203.34 L1353.12 1203.34 L1352.53 1203.34 L1351.95 1203.34 L1351.36 1203.34 L1350.77 1203.34 L1350.19 1203.34 L1349.6 1203.34 L1349.01 1203.34 L1348.43 1203.34 L1347.84 1203.34 L1347.26 1203.34 L1346.67 1203.34 L1346.08 1203.34 L1345.5 1203.34 L1344.91 1203.34 L1344.32 1203.34 L1343.74 1203.34 L1343.15 1203.34 L1342.56 1203.34 L1341.98 1203.34 L1341.39 1203.34 L1340.8 1203.34 L1340.22 1203.34 L1339.63 1203.34 L1339.05 1203.34 L1338.46 1203.34 L1337.87 1203.34 L1337.29 1203.34 L1336.7 1203.34 L1336.11 1203.34 L1335.53 1203.34 L1334.94 1203.34 L1334.35 1203.34 L1333.77 1203.34 L1333.18 1203.34 L1332.6 1203.34 L1332.01 1203.34 L1331.42 1203.34 L1330.84 1203.34 L1330.25 1203.34 L1329.66 1203.34 L1329.08 1203.34 L1328.49 1203.34 L1327.9 1203.34 L1327.32 1203.34 L1326.73 1203.34 L1326.14 1203.34 L1325.56 1203.34 L1324.97 1203.34 L1324.39 1203.34 L1323.8 1203.34 L1323.21 1203.34 L1322.63 1203.34 L1322.04 1203.34 L1321.45 1203.34 L1320.87 1203.34 L1320.28 1203.34 L1319.69 1203.34 L1319.11 1203.34 L1318.52 1203.34 L1317.93 1203.34 L1317.35 1203.34 L1316.76 1203.34 L1316.18 1203.34 L1315.59 1203.34 L1315 1203.34 L1314.42 1203.34 L1313.83 1203.34 L1313.24 1203.34 L1312.66 1203.34 L1312.07 1203.34 L1311.48 1203.34 L1310.9 1203.34 L1310.31 1203.34 L1309.73 1203.34 L1309.14 1203.34 L1308.55 1203.34 L1307.97 1203.34 L1307.38 1203.34 L1306.79 1203.34 L1306.21 1203.34 L1305.62 1203.34 L1305.03 1203.34 L1304.45 1203.34 L1303.86 1203.34 L1303.27 1203.34 L1302.69 1203.34 L1302.1 1203.34 L1301.52 1203.34 L1300.93 1203.34 L1300.34 1203.34 L1299.76 1203.34 L1299.17 1203.34 L1298.58 1203.34 L1298 1203.34 L1297.41 1203.34 L1296.82 1203.34 L1296.24 1203.34 L1295.65 1203.34 L1295.06 1203.34 L1294.48 1203.34 L1293.89 1203.34 L1293.31 1203.34 L1292.72 1203.34 L1292.13 1203.34 L1291.55 1203.34 L1290.96 1203.34 L1290.37 1203.34 L1289.79 1203.34 L1289.2 1203.34 L1288.61 1203.34 L1288.03 1203.34 L1287.44 1203.34 L1286.86 1203.34 L1286.27 1203.34 L1285.68 1203.34 L1285.1 1203.34 L1284.51 1203.34 L1283.92 1203.34 L1283.34 1203.34 L1282.75 1203.34 L1282.16 1203.34 L1281.58 1203.34 L1280.99 1203.34 L1280.4 1203.34 L1279.82 1203.34 L1279.23 1203.34 L1278.65 1203.34 L1278.06 1203.34 L1277.47 1203.34 L1276.89 1203.34 L1276.3 1203.34 L1275.71 1203.34 L1275.13 1203.34 L1274.54 1203.34 L1273.95 1203.34 L1273.37 1203.34 L1272.78 1203.34 L1272.19 1203.34 L1271.61 1203.34 L1271.02 1203.34 L1270.44 1203.34 L1269.85 1203.34 L1269.26 1203.34 L1268.68 1203.34 L1268.09 1203.34 L1267.5 1203.34 L1266.92 1203.34 L1266.33 1203.34 L1265.74 1203.34 L1265.16 1203.34 L1264.57 1203.34 L1263.98 1203.34 L1263.4 1203.34 L1262.81 1203.34 L1262.23 1203.34 L1261.64 1203.34 L1261.05 1203.34 L1260.47 1203.34 L1259.88 1203.34 L1259.29 1203.34 L1258.71 1203.34 L1258.12 1203.34 L1257.53 1203.34 L1256.95 1203.34 L1256.36 1203.34 L1255.78 1203.34 L1255.19 1203.34 L1254.6 1203.34 L1254.02 1203.34 L1253.43 1203.34 L1252.84 1203.34 L1252.26 1203.34 L1251.67 1203.34 L1251.08 1203.34 L1250.5 1203.34 L1249.91 1203.34 L1249.32 1203.34 L1248.74 1203.34 L1248.15 1203.34 L1247.57 1203.34 L1246.98 1203.34 L1246.39 1203.34 L1245.81 1203.34 L1245.22 1203.34 L1244.63 1203.34 L1244.05 1203.34 L1243.46 1203.34 L1242.87 1203.34 L1242.29 1203.34 L1241.7 1203.34 L1241.11 1203.34 L1240.53 1203.34 L1239.94 1203.34 L1239.36 1203.34 L1238.77 1203.34 L1238.18 1203.34 L1237.6 1203.34 L1237.01 1203.34 L1236.42 1203.34 L1235.84 1203.34 L1235.25 1203.34 L1234.66 1203.34 L1234.08 1203.34 L1233.49 1203.34 L1232.91 1203.34 L1232.32 1203.34 L1231.73 1203.34 L1231.15 1203.34 L1230.56 1203.34 L1229.97 1203.34 L1229.39 1203.34 L1228.8 1203.34 L1228.21 1203.34 L1227.63 1203.34 L1227.04 1203.34 L1226.45 1203.34 L1225.87 1203.34 L1225.28 1203.34 L1224.7 1203.34 L1224.11 1203.34 L1223.52 1203.34 L1222.94 1203.34 L1222.35 1203.34 L1221.76 1203.34 L1221.18 1203.34 L1220.59 1203.34 L1220 1203.34 L1219.42 1203.34 L1218.83 1203.34 L1218.24 1203.34 L1217.66 1203.34 L1217.07 1203.34 L1216.49 1203.34 L1215.9 1203.34 L1215.31 1203.34 L1214.73 1203.34 L1214.14 1203.34 L1213.55 1203.34 L1212.97 1203.34 L1212.38 1203.34 L1211.79 1203.34 L1211.21 1203.34 L1210.62 1203.34 L1210.03 1203.34 L1209.45 1203.34 L1208.86 1203.34 L1208.28 1203.34 L1207.69 1203.34 L1207.1 1203.34 L1206.52 1203.34 L1205.93 1203.34 L1205.34 1203.34 L1204.76 1203.34 L1204.17 1203.34 L1203.58 1203.34 L1203 1203.34 L1202.41 1203.34 L1201.83 1203.34 L1201.24 1203.34 L1200.65 1203.34 L1200.07 1203.34 L1199.48 1203.34 L1198.89 1203.34 L1198.31 1203.34 L1197.72 1203.34 L1197.13 1203.34 L1196.55 1203.34 L1195.96 1203.34 L1195.37 1203.34 L1194.79 1203.34 L1194.2 1203.34 L1193.62 1203.34 L1193.03 1203.34 L1192.44 1203.34 L1191.86 1203.34 L1191.27 1203.34 L1190.68 1203.34 L1190.1 1203.34 L1189.51 1203.34 L1188.92 1203.34 L1188.34 1203.34 L1187.75 1203.34 L1187.16 1203.34 L1186.58 1203.34 L1185.99 1203.34 L1185.41 1203.34 L1184.82 1203.34 L1184.23 1203.34 L1183.65 1203.34 L1183.06 1203.34 L1182.47 1203.34 L1181.89 1203.34 L1181.3 1203.34 L1180.71 1203.34 L1180.13 1203.34 L1179.54 1203.34 L1178.96 1203.34 L1178.37 1203.34 L1177.78 1203.34 L1177.2 1203.34 L1176.61 1203.34 L1176.02 1203.34 L1175.44 1203.34 L1174.85 1203.34 L1174.26 1203.34 L1173.68 1203.34 L1173.09 1203.34 L1172.5 1203.34 L1171.92 1203.34 L1171.33 1203.34 L1170.75 1203.34 L1170.16 1203.34 L1169.57 1203.34 L1168.99 1203.34 L1168.4 1203.34 L1167.81 1203.34 L1167.23 1203.34 L1166.64 1203.34 L1166.05 1203.34 L1165.47 1203.34 L1164.88 1203.34 L1164.29 1203.34 L1163.71 1203.34 L1163.12 1203.34 L1162.54 1203.34 L1161.95 1203.34 L1161.36 1203.34 L1160.78 1203.34 L1160.19 1203.34 L1159.6 1203.34 L1159.02 1203.34 L1158.43 1203.34 L1157.84 1203.34 L1157.26 1203.34 L1156.67 1203.34 L1156.09 1203.34 L1155.5 1203.34 L1154.91 1203.34 L1154.33 1203.34 L1153.74 1203.34 L1153.15 1203.34 L1152.57 1203.34 L1151.98 1203.34 L1151.39 1203.34 L1150.81 1203.34 L1150.22 1203.34 L1149.63 1203.34 L1149.05 1203.34 L1148.46 1203.34 L1147.88 1203.34 L1147.29 1203.34 L1146.7 1203.34 L1146.12 1203.34 L1145.53 1203.34 L1144.94 1203.34 L1144.36 1203.34 L1143.77 1203.34 L1143.18 1203.34 L1142.6 1203.34 L1142.01 1203.34 L1141.42 1203.34 L1140.84 1203.34 L1140.25 1203.34 L1139.67 1203.34 L1139.08 1203.34 L1138.49 1203.34 L1137.91 1203.34 L1137.32 1203.34 L1136.73 1203.34 L1136.15 1203.34 L1135.56 1203.34 L1134.97 1203.34 L1134.39 1203.34 L1133.8 1203.34 L1133.21 1203.34 L1132.63 1203.34 L1132.04 1203.34 L1131.46 1203.34 L1130.87 1203.34 L1130.28 1203.34 L1129.7 1203.34 L1129.11 1203.34 L1128.52 1203.34 L1127.94 1203.34 L1127.35 1203.34 L1126.76 1203.34 L1126.18 1203.34 L1125.59 1203.34 L1125.01 1203.34 L1124.42 1203.34 L1123.83 1203.34 L1123.25 1203.34 L1122.66 1203.34 L1122.07 1203.34 L1121.49 1203.34 L1120.9 1203.34 L1120.31 1203.34 L1119.73 1203.34 L1119.14 1203.34 L1118.55 1203.34 L1117.97 1203.34 L1117.38 1203.34 L1116.8 1203.34 L1116.21 1203.34 L1115.62 1203.34 L1115.04 1203.34 L1114.45 1203.34 L1113.86 1203.34 L1113.28 1203.34 L1112.69 1203.34 L1112.1 1203.34 L1111.52 1203.34 L1110.93 1203.34 L1110.34 1203.34 L1109.76 1203.34 L1109.17 1203.34 L1108.59 1203.34 L1108 1203.34 L1107.41 1203.34 L1106.83 1203.34 L1106.24 1203.34 L1105.65 1203.34 L1105.07 1203.34 L1104.48 1203.34 L1103.89 1203.34 L1103.31 1203.34 L1102.72 1203.34 L1102.14 1203.34 L1101.55 1203.34 L1100.96 1203.34 L1100.38 1203.34 L1099.79 1203.34 L1099.2 1203.34 L1098.62 1203.34 L1098.03 1203.34 L1097.44 1203.34 L1096.86 1203.34 L1096.27 1203.34 L1095.68 1203.34 L1095.1 1203.34 L1094.51 1203.34 L1093.93 1203.34 L1093.34 1203.34 L1092.75 1203.34 L1092.17 1203.34 L1091.58 1203.34 L1090.99 1203.34 L1090.41 1203.34 L1089.82 1203.34 L1089.23 1203.34 L1088.65 1203.34 L1088.06 1203.34 L1087.47 1203.34 L1086.89 1203.34 L1086.3 1203.34 L1085.72 1203.34 L1085.13 1203.34 L1084.54 1203.34 L1083.96 1203.34 L1083.37 1203.34 L1082.78 1203.34 L1082.2 1203.34 L1081.61 1203.34 L1081.02 1203.34 L1080.44 1203.34 L1079.85 1203.34 L1079.26 1203.34 L1078.68 1203.34 L1078.09 1203.34 L1077.51 1203.34 L1076.92 1203.34 L1076.33 1203.34 L1075.75 1203.34 L1075.16 1203.34 L1074.57 1203.34 L1073.99 1203.34 L1073.4 1203.34 L1072.81 1203.34 L1072.23 1203.34 L1071.64 1203.34 L1071.06 1203.34 L1070.47 1203.34 L1069.88 1203.34 L1069.3 1203.34 L1068.71 1203.34 L1068.12 1203.34 L1067.54 1203.34 L1066.95 1203.34 L1066.36 1203.34 L1065.78 1203.34 L1065.19 1203.34 L1064.6 1203.34 L1064.02 1203.34 L1063.43 1203.34 L1062.85 1203.34 L1062.26 1203.34 L1061.67 1203.34 L1061.09 1203.34 L1060.5 1203.34 L1059.91 1203.34 L1059.33 1203.34 L1058.74 1203.34 L1058.15 1203.34 L1057.57 1203.34 L1056.98 1203.34 L1056.39 1203.34 L1055.81 1203.34 L1055.22 1203.34 L1054.64 1203.34 L1054.05 1203.34 L1053.46 1203.34 L1052.88 1203.34 L1052.29 1203.34 L1051.7 1203.34 L1051.12 1203.34 L1050.53 1203.34 L1049.94 1203.34 L1049.36 1203.34 L1048.77 1203.34 L1048.19 1203.34 L1047.6 1203.34 L1047.01 1203.34 L1046.43 1203.34 L1045.84 1203.34 L1045.25 1203.34 L1044.67 1203.34 L1044.08 1203.34 L1043.49 1203.34 L1042.91 1203.34 L1042.32 1203.34 L1041.73 1203.34 L1041.15 1203.34 L1040.56 1203.34 L1039.98 1203.34 L1039.39 1203.34 L1038.8 1203.34 L1038.22 1203.34 L1037.63 1203.34 L1037.04 1203.34 L1036.46 1203.34 L1035.87 1203.34 L1035.28 1203.34 L1034.7 1203.34 L1034.11 1203.34 L1033.52 1203.34 L1032.94 1203.34 L1032.35 1203.34 L1031.77 1203.34 L1031.18 1203.34 L1030.59 1203.34 L1030.01 1203.34 L1029.42 1203.34 L1028.83 1203.34 L1028.25 1203.34 L1027.66 1203.34 L1027.07 1203.34 L1026.49 1203.34 L1025.9 1203.34 L1025.32 1203.34 L1024.73 1203.34 L1024.14 1203.34 L1023.56 1203.34 L1022.97 1203.34 L1022.38 1203.34 L1021.8 1203.34 L1021.21 1203.34 L1020.62 1203.34 L1020.04 1203.34 L1019.45 1203.34 L1018.86 1203.34 L1018.28 1203.34 L1017.69 1203.34 L1017.11 1203.34 L1016.52 1203.34 L1015.93 1203.34 L1015.35 1203.34 L1014.76 1203.34 L1014.17 1203.34 L1013.59 1203.34 L1013 1203.34 L1012.41 1203.34 L1011.83 1203.34 L1011.24 1203.34 L1010.65 1203.34 L1010.07 1203.34 L1009.48 1203.34 L1008.9 1203.34 L1008.31 1203.34 L1007.72 1203.34 L1007.14 1203.34 L1006.55 1203.34 L1005.96 1203.34 L1005.38 1203.34 L1004.79 1203.34 L1004.2 1203.34 L1003.62 1203.34 L1003.03 1203.34 L1002.44 1203.34 L1001.86 1203.34 L1001.27 1203.34 L1000.69 1203.34 L1000.1 1203.34 L999.513 1203.34 L998.926 1203.34 L998.34 1203.34 L997.754 1203.34 L997.167 1203.34 L996.581 1203.34 L995.994 1203.34 L995.408 1203.34 L994.822 1203.34 L994.235 1203.34 L993.649 1203.34 L993.062 1203.34 L992.476 1203.34 L991.889 1203.34 L991.303 1203.34 L990.717 1203.34 L990.13 1203.34 L989.544 1203.34 L988.957 1203.34 L988.371 1203.34 L987.785 1203.34 L987.198 1203.34 L986.612 1203.34 L986.025 1203.34  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1203.7 986.612,1203.7 987.198,1203.7 987.785,1203.7 988.371,1203.7 988.957,1203.7 989.544,1203.7 990.13,1203.7 990.717,1203.7 991.303,1203.7 991.889,1203.7 992.476,1203.7 993.062,1203.7 993.649,1203.7 994.235,1203.7 994.822,1203.7 995.408,1203.7 995.994,1203.7 996.581,1203.7 997.167,1203.7 997.754,1203.7 998.34,1203.7 998.926,1203.7 999.513,1203.7 1000.1,1203.7 1000.69,1203.7 1001.27,1203.7 1001.86,1203.7 1002.44,1203.7 1003.03,1203.7 1003.62,1203.7 1004.2,1203.7 1004.79,1203.7 1005.38,1203.7 1005.96,1203.7 1006.55,1203.7 1007.14,1203.7 1007.72,1203.7 1008.31,1203.7 1008.9,1203.7 1009.48,1203.7 1010.07,1203.7 1010.65,1203.7 1011.24,1203.7 1011.83,1203.7 1012.41,1203.7 1013,1203.7 1013.59,1203.7 1014.17,1203.7 1014.76,1203.7 1015.35,1203.7 1015.93,1203.7 1016.52,1203.7 1017.11,1203.7 1017.69,1203.7 1018.28,1203.7 1018.86,1203.7 1019.45,1203.7 1020.04,1203.7 1020.62,1203.7 1021.21,1203.7 1021.8,1203.7 1022.38,1203.7 1022.97,1203.7 1023.56,1203.7 1024.14,1203.7 1024.73,1203.7 1025.32,1203.7 1025.9,1203.7 1026.49,1203.7 1027.07,1203.7 1027.66,1203.7 1028.25,1203.7 1028.83,1203.7 1029.42,1203.7 1030.01,1203.7 1030.59,1203.7 1031.18,1203.7 1031.77,1203.7 1032.35,1203.7 1032.94,1203.7 1033.52,1203.7 1034.11,1203.7 1034.7,1203.7 1035.28,1203.7 1035.87,1203.7 1036.46,1203.7 1037.04,1203.7 1037.63,1203.7 1038.22,1203.7 1038.8,1203.7 1039.39,1203.7 1039.98,1203.7 1040.56,1203.7 1041.15,1203.7 1041.73,1203.7 1042.32,1203.7 1042.91,1203.7 1043.49,1203.7 1044.08,1203.7 1044.67,1203.7 1045.25,1203.7 1045.84,1203.7 1046.43,1203.7 1047.01,1203.7 1047.6,1203.7 1048.19,1203.7 1048.77,1203.7 1049.36,1203.7 1049.94,1203.7 1050.53,1203.7 1051.12,1203.7 1051.7,1203.7 1052.29,1203.7 1052.88,1203.7 1053.46,1203.7 1054.05,1203.7 1054.64,1203.7 1055.22,1203.7 1055.81,1203.7 1056.39,1203.7 1056.98,1203.7 1057.57,1203.7 1058.15,1203.7 1058.74,1203.7 1059.33,1203.7 1059.91,1203.7 1060.5,1203.7 1061.09,1203.7 1061.67,1203.7 1062.26,1203.7 1062.85,1203.7 1063.43,1203.7 1064.02,1203.7 1064.6,1203.7 1065.19,1203.7 1065.78,1203.7 1066.36,1203.7 1066.95,1203.7 1067.54,1203.7 1068.12,1203.7 1068.71,1203.7 1069.3,1203.7 1069.88,1203.7 1070.47,1203.7 1071.06,1203.7 1071.64,1203.7 1072.23,1203.7 1072.81,1203.7 1073.4,1203.7 1073.99,1203.7 1074.57,1203.7 1075.16,1203.7 1075.75,1203.7 1076.33,1203.7 1076.92,1203.7 1077.51,1203.7 1078.09,1203.7 1078.68,1203.7 1079.26,1203.7 1079.85,1203.7 1080.44,1203.7 1081.02,1203.7 1081.61,1203.7 1082.2,1203.7 1082.78,1203.7 1083.37,1203.7 1083.96,1203.7 1084.54,1203.7 1085.13,1203.7 1085.72,1203.7 1086.3,1203.7 1086.89,1203.7 1087.47,1203.7 1088.06,1203.7 1088.65,1203.7 1089.23,1203.7 1089.82,1203.7 1090.41,1203.7 1090.99,1203.7 1091.58,1203.7 1092.17,1203.7 1092.75,1203.7 1093.34,1203.7 1093.93,1203.7 1094.51,1203.7 1095.1,1203.7 1095.68,1203.7 1096.27,1203.7 1096.86,1203.7 1097.44,1203.7 1098.03,1203.7 1098.62,1203.7 1099.2,1203.7 1099.79,1203.7 1100.38,1203.7 1100.96,1203.7 1101.55,1203.7 1102.14,1203.7 1102.72,1203.7 1103.31,1203.7 1103.89,1203.7 1104.48,1203.7 1105.07,1203.7 1105.65,1203.7 1106.24,1203.7 1106.83,1203.7 1107.41,1203.7 1108,1203.7 1108.59,1203.7 1109.17,1203.7 1109.76,1203.7 1110.34,1203.7 1110.93,1203.7 1111.52,1203.7 1112.1,1203.7 1112.69,1203.7 1113.28,1203.7 1113.86,1203.7 1114.45,1203.7 1115.04,1203.7 1115.62,1203.7 1116.21,1203.7 1116.8,1203.7 1117.38,1203.7 1117.97,1203.7 1118.55,1203.7 1119.14,1203.7 1119.73,1203.7 1120.31,1203.7 1120.9,1203.7 1121.49,1203.7 1122.07,1203.7 1122.66,1203.7 1123.25,1203.7 1123.83,1203.7 1124.42,1203.7 1125.01,1203.7 1125.59,1203.7 1126.18,1203.7 1126.76,1203.7 1127.35,1203.7 1127.94,1203.7 1128.52,1203.7 1129.11,1203.7 1129.7,1203.7 1130.28,1203.7 1130.87,1203.7 1131.46,1203.7 1132.04,1203.7 1132.63,1203.7 1133.21,1203.7 1133.8,1203.7 1134.39,1203.7 1134.97,1203.7 1135.56,1203.7 1136.15,1203.7 1136.73,1203.7 1137.32,1203.7 1137.91,1203.7 1138.49,1203.7 1139.08,1203.7 1139.67,1203.7 1140.25,1203.7 1140.84,1203.7 1141.42,1203.7 1142.01,1203.7 1142.6,1203.7 1143.18,1203.7 1143.77,1203.7 1144.36,1203.7 1144.94,1203.7 1145.53,1203.7 1146.12,1203.7 1146.7,1203.7 1147.29,1203.7 1147.88,1203.7 1148.46,1203.7 1149.05,1203.7 1149.63,1203.7 1150.22,1203.7 1150.81,1203.7 1151.39,1203.7 1151.98,1203.7 1152.57,1203.7 1153.15,1203.7 1153.74,1203.7 1154.33,1203.7 1154.91,1203.7 1155.5,1203.7 1156.09,1203.7 1156.67,1203.7 1157.26,1203.7 1157.84,1203.7 1158.43,1203.7 1159.02,1203.7 1159.6,1203.7 1160.19,1203.7 1160.78,1203.7 1161.36,1203.7 1161.95,1203.7 1162.54,1203.7 1163.12,1203.7 1163.71,1203.7 1164.29,1203.7 1164.88,1203.7 1165.47,1203.7 1166.05,1203.7 1166.64,1203.7 1167.23,1203.7 1167.81,1203.7 1168.4,1203.7 1168.99,1203.7 1169.57,1203.7 1170.16,1203.7 1170.75,1203.7 1171.33,1203.7 1171.92,1203.7 1172.5,1203.7 1173.09,1203.7 1173.68,1203.7 1174.26,1203.7 1174.85,1203.7 1175.44,1203.7 1176.02,1203.7 1176.61,1203.7 1177.2,1203.7 1177.78,1203.7 1178.37,1203.7 1178.96,1203.7 1179.54,1203.7 1180.13,1203.7 1180.71,1203.7 1181.3,1203.7 1181.89,1203.7 1182.47,1203.7 1183.06,1203.7 1183.65,1203.7 1184.23,1203.7 1184.82,1203.7 1185.41,1203.7 1185.99,1203.7 1186.58,1203.7 1187.16,1203.7 1187.75,1203.7 1188.34,1203.7 1188.92,1203.7 1189.51,1203.7 1190.1,1203.7 1190.68,1203.7 1191.27,1203.7 1191.86,1203.7 1192.44,1203.7 1193.03,1203.7 1193.62,1203.7 1194.2,1203.7 1194.79,1203.7 1195.37,1203.7 1195.96,1203.7 1196.55,1203.7 1197.13,1203.7 1197.72,1203.7 1198.31,1203.7 1198.89,1203.7 1199.48,1203.7 1200.07,1203.7 1200.65,1203.7 1201.24,1203.7 1201.83,1203.7 1202.41,1203.7 1203,1203.7 1203.58,1203.7 1204.17,1203.7 1204.76,1203.7 1205.34,1203.7 1205.93,1203.7 1206.52,1203.7 1207.1,1203.7 1207.69,1203.7 1208.28,1203.7 1208.86,1203.7 1209.45,1203.7 1210.03,1203.7 1210.62,1203.7 1211.21,1203.7 1211.79,1203.7 1212.38,1203.7 1212.97,1203.7 1213.55,1203.7 1214.14,1203.7 1214.73,1203.7 1215.31,1203.7 1215.9,1203.7 1216.49,1203.7 1217.07,1203.7 1217.66,1203.7 1218.24,1203.7 1218.83,1203.7 1219.42,1203.7 1220,1203.7 1220.59,1203.7 1221.18,1203.7 1221.76,1203.7 1222.35,1203.7 1222.94,1203.7 1223.52,1203.7 1224.11,1203.7 1224.7,1203.7 1225.28,1203.7 1225.87,1203.7 1226.45,1203.7 1227.04,1203.7 1227.63,1203.7 1228.21,1203.7 1228.8,1203.7 1229.39,1203.7 1229.97,1203.7 1230.56,1203.7 1231.15,1203.7 1231.73,1203.7 1232.32,1203.7 1232.91,1203.7 1233.49,1203.7 1234.08,1203.7 1234.66,1203.7 1235.25,1203.7 1235.84,1203.7 1236.42,1203.7 1237.01,1203.7 1237.6,1203.7 1238.18,1203.7 1238.77,1203.7 1239.36,1203.7 1239.94,1203.7 1240.53,1203.7 1241.11,1203.7 1241.7,1203.7 1242.29,1203.7 1242.87,1203.7 1243.46,1203.7 1244.05,1203.7 1244.63,1203.7 1245.22,1203.7 1245.81,1203.7 1246.39,1203.7 1246.98,1203.7 1247.57,1203.7 1248.15,1203.7 1248.74,1203.7 1249.32,1203.7 1249.91,1203.7 1250.5,1203.7 1251.08,1203.7 1251.67,1203.7 1252.26,1203.7 1252.84,1203.7 1253.43,1203.7 1254.02,1203.7 1254.6,1203.7 1255.19,1203.7 1255.78,1203.7 1256.36,1203.7 1256.95,1203.7 1257.53,1203.7 1258.12,1203.7 1258.71,1203.7 1259.29,1203.7 1259.88,1203.7 1260.47,1203.7 1261.05,1203.7 1261.64,1203.7 1262.23,1203.7 1262.81,1203.7 1263.4,1203.7 1263.98,1203.7 1264.57,1203.7 1265.16,1203.7 1265.74,1203.7 1266.33,1203.7 1266.92,1203.7 1267.5,1203.7 1268.09,1203.7 1268.68,1203.7 1269.26,1203.7 1269.85,1203.7 1270.44,1203.7 1271.02,1203.7 1271.61,1203.7 1272.19,1203.7 1272.78,1203.7 1273.37,1203.7 1273.95,1203.7 1274.54,1203.7 1275.13,1203.7 1275.71,1203.7 1276.3,1203.7 1276.89,1203.7 1277.47,1203.7 1278.06,1203.7 1278.65,1203.7 1279.23,1203.7 1279.82,1203.7 1280.4,1203.7 1280.99,1203.7 1281.58,1203.7 1282.16,1203.7 1282.75,1203.7 1283.34,1203.7 1283.92,1203.7 1284.51,1203.7 1285.1,1203.7 1285.68,1203.7 1286.27,1203.7 1286.86,1203.7 1287.44,1203.7 1288.03,1203.7 1288.61,1203.7 1289.2,1203.7 1289.79,1203.7 1290.37,1203.7 1290.96,1203.7 1291.55,1203.7 1292.13,1203.7 1292.72,1203.7 1293.31,1203.7 1293.89,1203.7 1294.48,1203.7 1295.06,1203.7 1295.65,1203.7 1296.24,1203.7 1296.82,1203.7 1297.41,1203.7 1298,1203.7 1298.58,1203.7 1299.17,1203.7 1299.76,1203.7 1300.34,1203.7 1300.93,1203.7 1301.52,1203.7 1302.1,1203.7 1302.69,1203.7 1303.27,1203.7 1303.86,1203.7 1304.45,1203.7 1305.03,1203.7 1305.62,1203.7 1306.21,1203.7 1306.79,1203.7 1307.38,1203.7 1307.97,1203.7 1308.55,1203.7 1309.14,1203.7 1309.73,1203.7 1310.31,1203.7 1310.9,1203.7 1311.48,1203.7 1312.07,1203.7 1312.66,1203.7 1313.24,1203.7 1313.83,1203.7 1314.42,1203.7 1315,1203.7 1315.59,1203.7 1316.18,1203.7 1316.76,1203.7 1317.35,1203.7 1317.93,1203.7 1318.52,1203.7 1319.11,1203.7 1319.69,1203.7 1320.28,1203.7 1320.87,1203.7 1321.45,1203.7 1322.04,1203.7 1322.63,1203.7 1323.21,1203.7 1323.8,1203.7 1324.39,1203.7 1324.97,1203.7 1325.56,1203.7 1326.14,1203.7 1326.73,1203.7 1327.32,1203.7 1327.9,1203.7 1328.49,1203.7 1329.08,1203.7 1329.66,1203.7 1330.25,1203.7 1330.84,1203.7 1331.42,1203.7 1332.01,1203.7 1332.6,1203.7 1333.18,1203.7 1333.77,1203.7 1334.35,1203.7 1334.94,1203.7 1335.53,1203.7 1336.11,1203.7 1336.7,1203.7 1337.29,1203.7 1337.87,1203.7 1338.46,1203.7 1339.05,1203.7 1339.63,1203.7 1340.22,1203.7 1340.8,1203.7 1341.39,1203.7 1341.98,1203.7 1342.56,1203.7 1343.15,1203.7 1343.74,1203.7 1344.32,1203.7 1344.91,1203.7 1345.5,1203.7 1346.08,1203.7 1346.67,1203.7 1347.26,1203.7 1347.84,1203.7 1348.43,1203.7 1349.01,1203.7 1349.6,1203.7 1350.19,1203.7 1350.77,1203.7 1351.36,1203.7 1351.95,1203.7 1352.53,1203.7 1353.12,1203.7 1353.71,1203.7 1354.29,1203.7 1354.88,1203.7 1355.47,1203.7 1356.05,1203.7 1356.64,1203.7 1357.22,1203.7 1357.81,1203.7 1358.4,1203.7 1358.98,1203.7 1359.57,1203.7 1360.16,1203.7 1360.74,1203.7 1361.33,1203.7 1361.92,1203.7 1362.5,1203.7 1363.09,1203.7 1363.68,1203.7 1364.26,1203.7 1364.85,1203.7 1365.43,1203.7 1366.02,1203.7 1366.61,1203.7 1367.19,1203.7 1367.78,1203.7 1368.37,1203.7 1368.95,1203.7 1369.54,1203.7 1370.13,1203.7 1370.71,1203.7 1371.3,1203.7 1371.88,1203.7 1372.47,1203.7 1373.06,1203.7 1373.64,1203.7 1374.23,1203.7 1374.82,1203.7 1375.4,1203.7 1375.99,1203.7 1376.58,1203.7 1377.16,1203.7 1377.75,1203.7 1378.34,1203.7 1378.92,1203.7 1379.51,1203.7 1380.09,1203.7 1380.68,1203.7 1381.27,1203.7 1381.85,1203.7 1382.44,1203.7 1383.03,1203.7 1383.61,1203.7 1384.2,1203.7 1384.79,1203.7 1385.37,1203.7 1385.96,1203.7 1386.55,1203.7 1387.13,1203.7 1387.72,1203.7 1388.3,1203.7 1388.89,1203.7 1389.48,1203.7 1390.06,1203.7 1390.65,1203.7 1391.24,1203.7 1391.82,1203.7 1392.41,1203.7 1393,1203.7 1393.58,1203.7 1394.17,1203.7 1394.75,1203.7 1395.34,1203.7 1395.93,1203.7 1396.51,1203.7 1397.1,1203.7 1397.69,1203.7 1398.27,1203.7 1398.86,1203.7 1399.45,1203.7 1400.03,1203.7 1400.62,1203.7 1401.21,1203.7 1401.79,1203.7 1402.38,1203.7 1402.96,1203.7 1403.55,1203.7 1404.14,1203.7 1404.72,1203.7 1405.31,1203.7 1405.9,1203.7 1406.48,1203.7 1407.07,1203.7 1407.66,1203.7 1408.24,1203.7 1408.83,1203.7 1409.42,1203.7 1410,1203.7 1410.59,1203.7 1411.17,1203.7 1411.76,1203.7 1412.35,1203.7 1412.93,1203.7 1413.52,1203.7 1414.11,1203.7 1414.69,1203.7 1415.28,1203.7 1415.87,1203.7 1416.45,1203.7 1417.04,1203.7 1417.63,1203.7 1418.21,1203.7 1418.8,1203.7 1419.38,1203.7 1419.97,1203.7 1420.56,1203.7 1421.14,1203.7 1421.73,1203.7 1422.32,1203.7 1422.9,1203.7 1423.49,1203.7 1424.08,1203.7 1424.66,1203.7 1425.25,1203.7 1425.83,1203.7 1426.42,1203.7 1427.01,1203.7 1427.59,1203.7 1428.18,1203.7 1428.77,1203.7 1429.35,1203.7 1429.94,1203.7 1430.53,1203.7 1431.11,1203.7 1431.7,1203.7 1432.29,1203.7 1432.87,1203.7 1433.46,1203.7 1434.04,1203.7 1434.63,1203.7 1435.22,1203.7 1435.8,1203.7 1436.39,1203.7 1436.98,1203.7 1437.56,1203.7 1438.15,1203.7 1438.74,1203.7 1439.32,1203.7 1439.91,1203.7 1440.5,1203.7 1441.08,1203.7 1441.67,1203.7 1442.25,1203.7 1442.84,1203.7 1443.43,1203.7 1444.01,1203.7 1444.6,1203.7 1445.19,1203.7 1445.77,1203.7 1446.36,1203.7 1446.95,1203.7 1447.53,1203.7 1448.12,1203.7 1448.7,1203.7 1449.29,1203.7 1449.88,1203.7 1450.46,1203.7 1451.05,1203.7 1451.64,1203.7 1452.22,1203.7 1452.81,1203.7 1453.4,1203.7 1453.98,1203.7 1454.57,1203.7 1455.16,1203.7 1455.74,1203.7 1456.33,1203.7 1456.91,1203.7 1457.5,1203.7 1458.09,1203.7 1458.67,1203.7 1459.26,1203.7 1459.85,1203.7 1460.43,1203.7 1461.02,1203.7 1461.61,1203.7 1462.19,1203.7 1462.78,1203.7 1463.37,1203.7 1463.95,1203.7 1464.54,1203.7 1465.12,1203.7 1465.71,1203.7 1466.3,1203.7 1466.88,1203.7 1467.47,1203.7 1468.06,1203.7 1468.64,1203.7 1469.23,1203.7 1469.82,1203.7 1470.4,1203.7 1470.99,1203.7 1471.57,1203.7 1472.16,1203.7 1472.75,1203.7 1473.33,1203.7 1473.92,1203.7 1474.51,1203.7 1475.09,1203.7 1475.68,1203.7 1476.27,1203.7 1476.85,1203.7 1477.44,1203.7 1478.03,1203.7 1478.61,1203.7 1479.2,1203.7 1479.78,1203.7 1480.37,1203.7 1480.96,1203.7 1481.54,1203.7 1482.13,1203.7 1482.72,1203.7 1483.3,1203.7 1483.89,1203.7 1484.48,1203.7 1485.06,1203.7 1485.65,1203.7 1486.24,1203.7 1486.82,1203.7 1487.41,1203.7 1487.99,1203.7 1488.58,1203.7 1489.17,1203.7 1489.75,1203.7 1490.34,1203.7 1490.93,1203.7 1491.51,1203.7 1492.1,1203.7 1492.69,1203.7 1493.27,1203.7 1493.86,1203.7 1494.45,1203.7 1495.03,1203.7 1495.62,1203.7 1496.2,1203.7 1496.79,1203.7 1497.38,1203.7 1497.96,1203.7 1498.55,1203.7 1499.14,1203.7 1499.72,1203.7 1500.31,1203.7 1500.9,1203.7 1501.48,1203.7 1502.07,1203.7 1502.65,1203.7 1503.24,1203.7 1503.83,1203.7 1504.41,1203.7 1505,1203.7 1505.59,1203.7 1506.17,1203.7 1506.76,1203.7 1507.35,1203.7 1507.93,1203.7 1508.52,1203.7 1509.11,1203.7 1509.69,1203.7 1510.28,1203.7 1510.86,1203.7 1511.45,1203.7 1512.04,1203.7 1512.62,1203.7 1513.21,1203.7 1513.8,1203.7 1514.38,1203.7 1514.97,1203.7 1515.56,1203.7 1516.14,1203.7 1516.73,1203.7 1517.32,1203.7 1517.9,1203.7 1518.49,1203.7 1519.07,1203.7 1519.66,1203.7 1520.25,1203.7 1520.83,1203.7 1521.42,1203.7 1522.01,1203.7 1522.59,1203.7 1523.18,1203.7 1523.77,1203.7 1524.35,1203.7 1524.94,1203.7 1525.52,1203.7 1526.11,1203.7 1526.7,1203.7 1527.28,1203.7 1527.87,1203.7 1528.46,1203.7 1529.04,1203.7 1529.63,1203.7 1530.22,1203.7 1530.8,1203.7 1531.39,1203.7 1531.98,1203.7 1532.56,1203.7 1533.15,1203.7 1533.73,1203.7 1534.32,1203.7 1534.91,1203.7 1535.49,1203.7 1536.08,1203.7 1536.67,1203.7 1537.25,1203.7 1537.84,1203.7 1538.43,1203.7 1539.01,1203.7 1539.6,1203.7 1540.19,1203.7 1540.77,1203.7 1541.36,1203.7 1541.94,1203.7 1542.53,1203.7 1543.12,1203.7 1543.7,1203.7 1544.29,1203.7 1544.88,1203.7 1545.46,1203.7 1546.05,1203.7 1546.64,1203.7 1547.22,1203.7 1547.81,1203.7 1548.4,1203.7 1548.98,1203.7 1549.57,1203.7 1550.15,1203.7 1550.74,1203.7 1551.33,1203.7 1551.91,1203.7 1552.5,1203.7 1553.09,1203.7 1553.67,1203.7 1554.26,1203.7 1554.85,1203.7 1555.43,1203.7 1556.02,1203.7 1556.6,1203.7 1557.19,1203.7 1557.78,1203.7 1558.36,1203.7 1558.95,1203.7 1559.54,1203.7 1560.12,1203.7 1560.71,1203.7 1561.3,1203.7 1561.88,1203.7 1562.47,1203.7 1563.06,1203.7 1563.64,1203.7 1564.23,1203.7 1564.81,1203.7 1565.4,1203.7 1565.99,1203.7 1566.57,1203.7 1567.16,1203.7 1567.75,1203.7 1568.33,1203.7 1568.92,1203.7 1569.51,1203.7 1570.09,1203.7 1570.68,1203.7 1571.27,1203.7 1571.85,1203.7 1572.44,1203.7 1573.02,1203.7 1573.61,1203.7 1574.2,1203.7 1574.78,1203.7 1575.37,1203.7 1575.96,1203.7 1576.54,1203.7 1577.13,1203.7 1577.72,1203.7 1578.3,1203.7 1578.89,1203.7 1579.47,1203.7 1580.06,1203.7 1580.65,1203.7 1581.23,1203.7 1581.82,1203.7 1582.41,1203.7 1582.99,1203.7 1583.58,1203.7 1584.17,1203.7 1584.75,1203.7 1585.34,1203.7 1585.93,1203.7 1586.51,1203.7 1587.1,1203.7 1587.68,1203.7 1588.27,1203.7 1588.86,1203.7 1589.44,1203.7 1590.03,1203.7 1590.62,1203.7 1591.2,1203.7 1591.79,1203.7 1592.38,1203.7 1592.96,1203.7 1593.55,1203.7 1594.14,1203.7 1594.72,1203.7 1595.31,1203.7 1595.89,1203.7 1596.48,1203.7 1597.07,1203.7 1597.65,1203.7 1598.24,1203.7 1598.83,1203.7 1599.41,1203.7 1600,1203.7 1600.59,1203.7 1601.17,1203.7 1601.76,1203.7 1602.34,1203.7 1602.93,1203.7 1603.52,1203.7 1604.1,1203.7 1604.69,1203.7 1605.28,1203.7 1605.86,1203.7 1606.45,1203.7 1607.04,1203.7 1607.62,1203.7 1608.21,1203.7 1608.8,1203.7 1609.38,1203.7 1609.97,1203.7 1610.55,1203.7 1611.14,1203.7 1611.73,1203.7 1612.31,1203.7 1612.9,1203.7 1613.49,1203.7 1614.07,1203.7 1614.66,1203.7 1615.25,1203.7 1615.83,1203.7 1616.42,1203.7 1617.01,1203.7 1617.59,1203.7 1618.18,1203.7 1618.76,1203.7 1619.35,1203.7 1619.94,1203.7 1620.52,1203.7 1621.11,1203.7 1621.7,1203.7 1622.28,1203.7 1622.87,1203.7 1623.46,1203.7 1624.04,1203.7 1624.63,1203.7 1625.22,1203.7 1625.8,1203.7 1626.39,1203.7 1626.97,1203.7 1627.56,1203.7 1628.15,1203.7 1628.73,1203.7 1629.32,1203.7 1629.91,1203.7 1630.49,1203.7 1631.08,1203.7 1631.67,1203.7 1632.25,1203.7 1632.84,1203.7 1633.42,1203.7 1634.01,1203.7 1634.6,1203.7 1635.18,1203.7 1635.77,1203.7 1636.36,1203.7 1636.94,1203.7 1637.53,1203.7 1638.12,1203.7 1638.7,1203.7 1639.29,1203.7 1639.88,1203.7 1640.46,1203.7 1641.05,1203.7 1641.63,1203.7 1642.22,1203.7 1642.81,1203.7 1643.39,1203.7 1643.98,1203.7 1644.57,1203.7 1645.15,1203.7 1645.74,1203.7 1646.33,1203.7 1646.91,1203.7 1647.5,1203.7 1648.09,1203.7 1648.67,1203.7 1649.26,1203.7 1649.84,1203.7 1650.43,1203.7 1651.02,1203.7 1651.6,1203.7 1652.19,1203.7 1652.78,1203.7 1653.36,1203.7 1653.95,1203.7 1654.54,1203.7 1655.12,1203.7 1655.71,1203.7 1656.29,1203.7 1656.88,1203.7 1657.47,1203.7 1658.05,1203.7 1658.64,1203.7 1659.23,1203.7 1659.81,1203.7 1660.4,1203.7 1660.99,1203.7 1661.57,1203.7 1662.16,1203.7 1662.75,1203.7 1663.33,1203.7 1663.92,1203.7 1664.5,1203.7 1665.09,1203.7 1665.68,1203.7 1666.26,1203.7 1666.85,1203.7 1667.44,1203.7 1668.02,1203.7 1668.61,1203.7 1669.2,1203.7 1669.78,1203.7 1670.37,1203.7 1670.96,1203.7 1671.54,1203.7 1672.13,1203.7 1672.71,1203.7 1673.3,1203.7 1673.89,1203.7 1674.47,1203.7 1675.06,1203.7 1675.65,1203.7 1676.23,1203.7 1676.82,1203.7 1677.41,1203.7 1677.99,1203.7 1678.58,1203.7 1679.17,1203.7 1679.75,1203.7 1680.34,1203.7 1680.92,1203.7 1681.51,1203.7 1682.1,1203.7 1682.68,1203.7 1683.27,1203.7 1683.86,1203.7 1684.44,1203.7 1685.03,1203.7 1685.62,1203.7 1686.2,1203.7 1686.79,1203.7 1687.37,1203.7 1687.96,1203.7 1688.55,1203.7 1689.13,1203.7 1689.72,1203.7 1690.31,1203.7 1690.89,1203.7 1691.48,1203.7 1692.07,1203.7 1692.65,1203.7 1693.24,1203.7 1693.83,1203.7 1694.41,1203.7 1695,1203.7 1695.58,1203.7 1696.17,1203.7 1696.76,1203.7 1697.34,1203.7 1697.93,1203.7 1698.52,1203.7 1699.1,1203.7 1699.69,1203.7 1700.28,1203.7 1700.86,1203.7 1701.45,1203.7 1702.04,1203.7 1702.62,1203.7 1703.21,1203.7 1703.79,1203.7 1704.38,1203.7 1704.97,1203.7 1705.55,1203.7 1706.14,1203.7 1706.73,1203.7 1707.31,1203.7 1707.9,1203.7 1708.49,1203.7 1709.07,1203.7 1709.66,1203.7 1710.24,1203.7 1710.83,1203.7 1711.42,1203.7 1712,1203.7 1712.59,1203.7 1713.18,1203.7 1713.76,1203.7 1714.35,1203.7 1714.94,1203.7 1715.52,1203.7 1716.11,1203.7 1716.7,1203.7 1717.28,1203.7 1717.87,1203.7 1718.45,1203.7 1719.04,1203.7 1719.63,1203.7 1720.21,1203.7 1720.8,1203.7 1721.39,1203.7 1721.97,1203.7 1722.56,1203.7 1723.15,1203.7 1723.73,1203.7 1724.32,1203.7 1724.91,1203.7 1725.49,1203.7 1726.08,1203.7 1726.66,1203.7 1727.25,1203.7 1727.84,1203.7 1728.42,1203.7 1729.01,1203.7 1729.6,1203.7 1730.18,1203.7 1730.77,1203.7 1731.36,1203.7 1731.94,1203.7 1732.53,1203.7 1733.11,1203.7 1733.7,1203.7 1734.29,1203.7 1734.87,1203.7 1735.46,1203.7 1736.05,1203.7 1736.63,1203.7 1737.22,1203.7 1737.81,1203.7 1738.39,1203.7 1738.98,1203.7 1739.57,1203.7 1740.15,1203.7 1740.74,1203.7 1741.32,1203.7 1741.91,1203.7 1742.5,1203.7 1743.08,1203.7 1743.67,1203.7 1744.26,1203.7 1744.84,1203.7 1745.43,1203.7 1746.02,1203.7 1746.6,1203.7 1747.19,1203.7 1747.78,1203.7 1748.36,1203.7 1748.95,1203.7 1749.53,1203.7 1750.12,1203.7 1750.71,1203.7 1751.29,1203.7 1751.88,1203.7 1752.47,1203.7 1753.05,1203.7 1753.64,1203.7 1754.23,1203.7 1754.81,1203.7 1755.4,1203.7 1755.99,1203.7 1756.57,1203.7 1757.16,1203.7 1757.74,1203.7 1758.33,1203.7 1758.92,1203.7 1759.5,1203.7 1760.09,1203.7 1760.68,1203.7 1761.26,1203.7 1761.85,1203.7 1762.44,1203.7 1763.02,1203.7 1763.61,1203.7 1764.19,1203.7 1764.78,1203.7 1765.37,1203.7 1765.95,1203.7 1766.54,1203.7 1767.13,1203.7 1767.71,1203.7 1768.3,1203.7 1768.89,1203.7 1769.47,1203.7 1770.06,1203.7 1770.65,1203.7 1771.23,1203.7 1771.82,1203.7 1772.4,1203.7 1772.99,1203.7 1773.58,1203.7 1774.16,1203.7 1774.75,1203.7 1775.34,1203.7 1775.92,1203.7 1776.51,1203.7 1777.1,1203.7 1777.68,1203.7 1778.27,1203.7 1778.86,1203.7 1779.44,1203.7 1780.03,1203.7 1780.61,1203.7 1781.2,1203.7 1781.79,1203.7 1782.37,1203.7 1782.96,1203.7 1783.55,1203.7 1784.13,1203.7 1784.72,1203.7 1785.31,1203.7 1785.89,1203.7 1786.48,1203.7 1787.06,1203.7 1787.65,1203.7 1788.24,1203.7 1788.82,1203.7 1789.41,1203.7 1790,1203.7 1790.58,1203.7 1791.17,1203.7 1791.76,1203.7 1792.34,1203.7 1792.93,1203.7 1793.52,1203.7 1794.1,1203.7 1794.69,1203.7 1795.27,1203.7 1795.86,1203.7 1796.45,1203.7 1797.03,1203.7 1797.62,1203.7 1798.21,1203.7 1798.79,1203.7 1799.38,1203.7 1799.97,1203.7 1800.55,1203.7 1801.14,1203.7 1801.73,1203.7 1802.31,1203.7 1802.9,1203.7 1803.48,1203.7 1804.07,1203.7 1804.66,1203.7 1805.24,1203.7 1805.83,1203.7 1806.42,1203.7 1807,1203.7 1807.59,1203.7 1808.18,1203.7 1808.76,1203.7 1809.35,1203.7 1809.94,1203.7 1810.52,1203.7 1811.11,1203.7 1811.69,1203.7 1812.28,1203.7 1812.87,1203.7 1813.45,1203.7 1814.04,1203.7 1814.63,1203.7 1815.21,1203.7 1815.8,1203.7 1816.39,1203.7 1816.97,1203.7 1817.56,1203.7 1818.14,1203.7 1818.73,1203.7 1819.32,1203.7 1819.9,1203.7 1820.49,1203.7 1821.08,1203.7 1821.66,1203.7 1822.25,1203.7 1822.84,1203.7 1823.42,1203.7 1824.01,1203.7 1824.6,1203.7 1825.18,1203.7 1825.77,1203.7 1826.35,1203.7 1826.94,1203.7 1827.53,1203.7 1828.11,1203.7 1828.7,1203.7 1829.29,1203.7 1829.87,1203.7 1830.46,1203.7 1831.05,1203.7 1831.63,1203.7 1832.22,1203.7 1832.81,1203.7 1833.39,1203.7 1833.98,1203.7 1834.56,1203.7 1835.15,1203.7 1835.74,1203.7 1836.32,1203.7 1836.91,1203.7 1837.5,1203.7 1838.08,1203.7 1838.67,1203.7 1839.26,1203.7 1839.84,1203.7 1840.43,1203.7 1841.01,1203.7 1841.6,1203.7 1842.19,1203.7 1842.77,1203.7 1843.36,1203.7 1843.95,1203.7 1844.53,1203.7 1845.12,1203.7 1845.71,1203.7 1846.29,1203.7 1846.88,1203.7 1847.47,1203.7 1848.05,1203.7 1848.64,1203.7 1849.22,1203.7 1849.81,1203.7 1850.4,1203.7 1850.98,1203.7 1851.57,1203.7 1852.16,1203.7 1852.74,1203.7 1853.33,1203.7 1853.92,1203.7 1854.5,1203.7 1855.09,1203.7 1855.68,1203.7 1856.26,1203.7 1856.85,1203.7 1857.43,1203.7 1858.02,1203.7 1858.61,1203.7 1859.19,1203.7 1859.78,1203.7 1860.37,1203.7 1860.95,1203.7 1861.54,1203.7 1862.13,1203.7 1862.71,1203.7 1863.3,1203.7 1863.88,1203.7 1864.47,1203.7 1865.06,1203.7 1865.64,1203.7 1866.23,1203.7 1866.82,1203.7 1867.4,1203.7 1867.99,1203.7 1868.58,1203.7 1869.16,1203.7 1869.75,1203.7 1870.34,1203.7 1870.92,1203.7 1871.51,1203.7 1872.09,1203.7 1872.68,1203.7 1873.27,1203.7 1873.85,1203.7 1874.44,1203.7 1875.03,1203.7 1875.61,1203.7 1876.2,1203.7 1876.79,1203.7 1877.37,1203.7 1877.96,1203.7 1878.55,1203.7 1879.13,1203.7 1879.72,1203.7 1880.3,1203.7 1880.89,1203.7 1881.48,1203.7 1882.06,1203.7 1882.65,1203.7 1883.24,1203.7 1883.82,1203.7 1884.41,1203.7 1885,1203.7 1885.58,1203.7 1886.17,1203.7 1886.76,1203.7 1887.34,1203.7 1887.93,1203.7 1888.51,1203.7 1889.1,1203.7 1889.69,1203.7 1890.27,1203.7 1890.86,1203.7 1891.45,1203.7 1892.03,1203.7 1892.62,1203.7 1893.21,1203.7 1893.79,1203.7 1894.38,1203.7 1894.96,1203.7 1895.55,1203.7 1896.14,1203.7 1896.72,1203.7 1897.31,1203.7 1897.9,1203.7 1898.48,1203.7 1899.07,1203.7 1899.66,1203.7 1900.24,1203.7 1900.83,1203.7 1901.42,1203.7 1902,1203.7 1902.59,1203.7 1903.17,1203.7 1903.76,1203.7 1904.35,1203.7 1904.93,1203.7 1905.52,1203.7 1906.11,1203.7 1906.69,1203.7 1907.28,1203.7 1907.87,1203.7 1908.45,1203.7 1909.04,1203.7 1909.63,1203.7 1910.21,1203.7 1910.8,1203.7 1911.38,1203.7 1911.97,1203.7 1912.56,1203.7 1913.14,1203.7 1913.73,1203.7 1914.32,1203.7 1914.9,1203.7 1915.49,1203.7 1916.08,1203.7 1916.66,1203.7 1917.25,1203.7 1917.83,1203.7 1918.42,1203.7 1919.01,1203.7 1919.59,1203.7 1920.18,1203.7 1920.77,1203.7 1921.35,1203.7 1921.94,1203.7 1922.53,1203.7 1923.11,1203.7 1923.7,1203.7 1924.29,1203.7 1924.87,1203.7 1925.46,1203.7 1926.04,1203.7 1926.63,1203.7 1927.22,1203.7 1927.8,1203.7 1928.39,1203.7 1928.98,1203.7 1929.56,1203.7 1930.15,1203.7 1930.74,1203.7 1931.32,1203.7 1931.91,1203.7 1932.5,1203.7 1933.08,1203.7 1933.67,1203.7 1934.25,1203.7 1934.84,1203.7 1935.43,1203.7 1936.01,1203.7 1936.6,1203.7 1937.19,1203.7 1937.77,1203.7 1938.36,1203.7 1938.95,1203.7 1939.53,1203.7 1940.12,1203.7 1940.71,1203.7 1941.29,1203.7 1941.88,1203.7 1942.46,1203.7 1943.05,1203.7 1943.64,1203.7 1944.22,1203.7 1944.81,1203.7 1945.4,1203.7 1945.98,1203.7 1946.57,1203.7 1947.16,1203.7 1947.74,1203.7 1948.33,1203.7 1948.91,1203.7 1949.5,1203.7 1950.09,1203.7 1950.67,1203.7 1951.26,1203.7 1951.85,1203.7 1952.43,1203.7 1953.02,1203.7 1953.61,1203.7 1954.19,1203.7 1954.78,1203.7 1955.37,1203.7 1955.95,1203.7 1956.54,1203.7 1957.12,1203.7 1957.71,1203.7 1958.3,1203.7 1958.88,1203.7 1959.47,1203.7 1960.06,1203.7 1960.64,1203.7 1961.23,1203.7 1961.82,1203.7 1962.4,1203.7 1962.99,1203.7 1963.58,1203.7 1964.16,1203.7 1964.75,1203.7 1965.33,1203.7 1965.92,1203.7 1966.51,1203.7 1967.09,1203.7 1967.68,1203.7 1968.27,1203.7 1968.85,1203.7 1969.44,1203.7 1970.03,1203.7 1970.61,1203.7 1971.2,1203.7 1971.78,1203.7 1972.37,1203.7 1972.96,1203.7 1973.54,1203.7 1974.13,1203.7 1974.72,1203.7 1975.3,1203.7 1975.89,1203.7 1976.48,1203.7 1977.06,1203.7 1977.65,1203.7 1978.24,1203.7 1978.82,1203.7 1979.41,1203.7 1979.99,1203.7 1980.58,1203.7 1981.17,1203.7 1981.75,1203.7 1982.34,1203.7 1982.93,1203.7 1983.51,1203.7 1984.1,1203.7 1984.69,1203.7 1985.27,1203.7 1985.86,1203.7 1986.45,1203.7 1987.03,1203.7 1987.62,1203.7 1988.2,1203.7 1988.79,1203.7 1989.38,1203.7 1989.96,1203.7 1990.55,1203.7 1991.14,1203.7 1991.72,1203.7 1992.31,1203.7 1992.9,1203.7 1993.48,1203.7 1994.07,1203.7 1994.65,1203.7 1995.24,1203.7 1995.83,1203.7 1996.41,1203.7 1997,1203.7 1997.59,1203.7 1998.17,1203.7 1998.76,1203.7 1999.35,1203.7 1999.93,1203.7 2000.52,1203.7 2001.11,1203.7 2001.69,1203.7 2002.28,1203.7 2002.86,1203.7 2003.45,1203.7 2004.04,1203.7 2004.62,1203.7 2005.21,1203.7 2005.8,1203.7 2006.38,1203.7 2006.97,1203.7 2007.56,1203.7 2008.14,1203.7 2008.73,1203.7 2009.32,1203.7 2009.9,1203.7 2010.49,1203.7 2011.07,1203.7 2011.66,1203.7 2012.25,1203.7 2012.83,1203.7 2013.42,1203.7 2014.01,1203.7 2014.59,1203.7 2015.18,1203.7 2015.77,1203.7 2016.35,1203.7 2016.94,1203.7 2017.53,1203.7 2018.11,1203.7 2018.7,1203.7 2019.28,1203.7 2019.87,1203.7 2020.46,1203.7 2021.04,1203.7 2021.63,1203.7 2022.22,1203.7 2022.8,1203.7 2023.39,1203.7 2023.98,1203.7 2024.56,1203.7 2025.15,1203.7 2025.73,1203.7 2026.32,1203.7 2026.91,1203.7 2027.49,1203.7 2028.08,1203.7 2028.67,1203.7 2029.25,1203.7 2029.84,1203.7 2030.43,1203.7 2031.01,1203.7 2031.6,1203.7 2032.19,1203.7 2032.77,1203.7 2033.36,1203.7 2033.94,1203.7 2034.53,1203.7 2035.12,1203.7 2035.7,1203.7 2036.29,1203.7 2036.88,1203.7 2037.46,1203.7 2038.05,1203.7 2038.64,1203.7 2039.22,1203.7 2039.81,1203.7 2040.4,1203.7 2040.98,1203.7 2041.57,1203.7 2042.15,1203.7 2042.74,1203.7 2043.33,1203.7 2043.91,1203.7 2044.5,1203.7 2045.09,1203.7 2045.67,1203.7 2046.26,1203.7 2046.85,1203.7 2047.43,1203.7 2048.02,1203.7 2048.6,1203.7 2049.19,1203.7 2049.78,1203.7 2050.36,1203.7 2050.95,1203.7 2051.54,1203.7 2052.12,1203.7 2052.71,1203.7 2053.3,1203.7 2053.88,1203.7 2054.47,1203.7 2055.06,1203.7 2055.64,1203.7 2056.23,1203.7 2056.81,1203.7 2057.4,1203.7 2057.99,1203.7 2058.57,1203.7 2059.16,1203.7 2059.75,1203.7 2060.33,1203.7 2060.92,1203.7 2061.51,1203.7 2062.09,1203.7 2062.68,1203.7 2063.27,1203.7 2063.85,1203.7 2064.44,1203.7 2065.02,1203.7 2065.61,1203.7 2066.2,1203.7 2066.78,1203.7 2067.37,1203.7 2067.96,1203.7 2068.54,1203.7 2069.13,1203.7 2069.72,1203.7 2070.3,1203.7 2070.89,1203.7 2071.48,1203.7 2072.06,1203.7 2072.65,1203.7 2073.23,1203.7 2073.82,1203.7 2074.41,1203.7 2074.99,1203.7 2075.58,1203.7 2076.17,1203.7 2076.75,1203.7 2077.34,1203.7 2077.93,1203.7 2078.51,1203.7 2079.1,1203.7 2079.68,1203.7 2080.27,1203.7 2080.86,1203.7 2081.44,1203.7 2082.03,1203.7 2082.62,1203.7 2083.2,1203.7 2083.79,1203.7 2084.38,1203.7 2084.96,1203.7 2085.55,1203.7 2086.14,1203.7 2086.72,1203.7 2087.31,1203.7 2087.89,1203.7 2088.48,1203.7 2089.07,1203.7 2089.65,1203.7 2090.24,1203.7 2090.83,1203.7 2091.41,1203.7 2092,1203.7 2092.59,1203.7 2093.17,1203.7 2093.76,1203.7 2094.35,1203.7 2094.93,1203.7 2095.52,1203.7 2096.1,1203.7 2096.69,1203.7 2097.28,1203.7 2097.86,1203.7 2098.45,1203.7 2099.04,1203.7 2099.62,1203.7 2100.21,1203.7 2100.8,1203.7 2101.38,1203.7 2101.97,1203.7 2102.55,1203.7 2103.14,1203.7 2103.73,1203.7 2104.31,1203.7 2104.9,1203.7 2105.49,1203.7 2106.07,1203.7 2106.66,1203.7 2107.25,1203.7 2107.83,1203.7 2108.42,1203.7 2109.01,1203.7 2109.59,1203.7 2110.18,1203.7 2110.76,1203.7 2111.35,1203.7 2111.94,1203.7 2112.52,1203.7 2113.11,1203.7 2113.7,1203.7 2114.28,1203.7 2114.87,1203.7 2115.46,1203.7 2116.04,1203.7 2116.63,1203.7 2117.22,1203.7 2117.8,1203.7 2118.39,1203.7 2118.97,1203.7 2119.56,1203.7 2120.15,1203.7 2120.73,1203.7 2121.32,1203.7 2121.91,1203.7 2122.49,1203.7 2123.08,1203.7 2123.67,1203.7 2124.25,1203.7 2124.84,1203.7 2125.42,1203.7 2126.01,1203.7 2126.6,1203.7 2127.18,1203.7 2127.77,1203.7 2128.36,1203.7 2128.94,1203.7 2129.53,1203.7 2130.12,1203.7 2130.7,1203.7 2131.29,1203.7 2131.88,1203.7 2132.46,1203.7 2133.05,1203.7 2133.63,1203.7 2134.22,1203.7 2134.81,1203.7 2135.39,1203.7 2135.98,1203.7 2136.57,1203.7 2137.15,1203.7 2137.74,1203.7 2138.33,1203.7 2138.91,1203.7 2139.5,1203.7 2140.09,1203.7 2140.67,1203.7 2141.26,1203.7 2141.84,1203.7 2142.43,1203.7 2143.02,1203.7 2143.6,1203.7 2144.19,1203.7 2144.78,1203.7 2145.36,1203.7 2145.95,1203.7 2146.54,1203.7 2147.12,1203.7 2147.71,1203.7 2148.3,1203.7 2148.88,1203.7 2149.47,1203.7 2150.05,1203.7 2150.64,1203.7 2151.23,1203.7 2151.81,1203.7 2152.4,1203.7 2152.99,1203.7 2153.57,1203.7 2154.16,1203.7 2154.75,1203.7 2155.33,1203.7 2155.92,1203.7 2156.5,1203.7 2157.09,1203.7 2157.68,1203.7 2158.26,1203.7 \"/>\n<path clip-path=\"url(#clip142)\" d=\"M986.025 1203.53 L986.612 1203.53 L987.198 1203.53 L987.785 1203.53 L988.371 1203.53 L988.957 1203.53 L989.544 1203.53 L990.13 1203.53 L990.717 1203.53 L991.303 1203.53 L991.889 1203.53 L992.476 1203.53 L993.062 1203.53 L993.649 1203.53 L994.235 1203.53 L994.822 1203.53 L995.408 1203.53 L995.994 1203.53 L996.581 1203.53 L997.167 1203.53 L997.754 1203.53 L998.34 1203.53 L998.926 1203.53 L999.513 1203.53 L1000.1 1203.53 L1000.69 1203.53 L1001.27 1203.53 L1001.86 1203.53 L1002.44 1203.53 L1003.03 1203.53 L1003.62 1203.53 L1004.2 1203.53 L1004.79 1203.53 L1005.38 1203.53 L1005.96 1203.53 L1006.55 1203.53 L1007.14 1203.53 L1007.72 1203.53 L1008.31 1203.53 L1008.9 1203.53 L1009.48 1203.53 L1010.07 1203.53 L1010.65 1203.53 L1011.24 1203.53 L1011.83 1203.53 L1012.41 1203.53 L1013 1203.53 L1013.59 1203.53 L1014.17 1203.53 L1014.76 1203.53 L1015.35 1203.53 L1015.93 1203.53 L1016.52 1203.53 L1017.11 1203.53 L1017.69 1203.53 L1018.28 1203.53 L1018.86 1203.53 L1019.45 1203.53 L1020.04 1203.53 L1020.62 1203.53 L1021.21 1203.53 L1021.8 1203.53 L1022.38 1203.53 L1022.97 1203.53 L1023.56 1203.53 L1024.14 1203.53 L1024.73 1203.53 L1025.32 1203.53 L1025.9 1203.53 L1026.49 1203.53 L1027.07 1203.53 L1027.66 1203.53 L1028.25 1203.53 L1028.83 1203.53 L1029.42 1203.53 L1030.01 1203.53 L1030.59 1203.53 L1031.18 1203.53 L1031.77 1203.53 L1032.35 1203.53 L1032.94 1203.53 L1033.52 1203.53 L1034.11 1203.53 L1034.7 1203.53 L1035.28 1203.53 L1035.87 1203.53 L1036.46 1203.53 L1037.04 1203.53 L1037.63 1203.53 L1038.22 1203.53 L1038.8 1203.53 L1039.39 1203.53 L1039.98 1203.53 L1040.56 1203.53 L1041.15 1203.53 L1041.73 1203.53 L1042.32 1203.53 L1042.91 1203.53 L1043.49 1203.53 L1044.08 1203.53 L1044.67 1203.53 L1045.25 1203.53 L1045.84 1203.53 L1046.43 1203.53 L1047.01 1203.53 L1047.6 1203.53 L1048.19 1203.53 L1048.77 1203.53 L1049.36 1203.53 L1049.94 1203.53 L1050.53 1203.53 L1051.12 1203.53 L1051.7 1203.53 L1052.29 1203.53 L1052.88 1203.53 L1053.46 1203.53 L1054.05 1203.53 L1054.64 1203.53 L1055.22 1203.53 L1055.81 1203.53 L1056.39 1203.53 L1056.98 1203.53 L1057.57 1203.53 L1058.15 1203.53 L1058.74 1203.53 L1059.33 1203.53 L1059.91 1203.53 L1060.5 1203.53 L1061.09 1203.53 L1061.67 1203.53 L1062.26 1203.53 L1062.85 1203.53 L1063.43 1203.53 L1064.02 1203.53 L1064.6 1203.53 L1065.19 1203.53 L1065.78 1203.53 L1066.36 1203.53 L1066.95 1203.53 L1067.54 1203.53 L1068.12 1203.53 L1068.71 1203.53 L1069.3 1203.53 L1069.88 1203.53 L1070.47 1203.53 L1071.06 1203.53 L1071.64 1203.53 L1072.23 1203.53 L1072.81 1203.53 L1073.4 1203.53 L1073.99 1203.53 L1074.57 1203.53 L1075.16 1203.53 L1075.75 1203.53 L1076.33 1203.53 L1076.92 1203.53 L1077.51 1203.53 L1078.09 1203.53 L1078.68 1203.53 L1079.26 1203.53 L1079.85 1203.53 L1080.44 1203.53 L1081.02 1203.53 L1081.61 1203.53 L1082.2 1203.53 L1082.78 1203.53 L1083.37 1203.53 L1083.96 1203.53 L1084.54 1203.53 L1085.13 1203.53 L1085.72 1203.53 L1086.3 1203.53 L1086.89 1203.53 L1087.47 1203.53 L1088.06 1203.53 L1088.65 1203.53 L1089.23 1203.53 L1089.82 1203.53 L1090.41 1203.53 L1090.99 1203.53 L1091.58 1203.53 L1092.17 1203.53 L1092.75 1203.53 L1093.34 1203.53 L1093.93 1203.53 L1094.51 1203.53 L1095.1 1203.53 L1095.68 1203.53 L1096.27 1203.53 L1096.86 1203.53 L1097.44 1203.53 L1098.03 1203.53 L1098.62 1203.53 L1099.2 1203.53 L1099.79 1203.53 L1100.38 1203.53 L1100.96 1203.53 L1101.55 1203.53 L1102.14 1203.53 L1102.72 1203.53 L1103.31 1203.53 L1103.89 1203.53 L1104.48 1203.53 L1105.07 1203.53 L1105.65 1203.53 L1106.24 1203.53 L1106.83 1203.53 L1107.41 1203.53 L1108 1203.53 L1108.59 1203.53 L1109.17 1203.53 L1109.76 1203.53 L1110.34 1203.53 L1110.93 1203.53 L1111.52 1203.53 L1112.1 1203.53 L1112.69 1203.53 L1113.28 1203.53 L1113.86 1203.53 L1114.45 1203.53 L1115.04 1203.53 L1115.62 1203.53 L1116.21 1203.53 L1116.8 1203.53 L1117.38 1203.53 L1117.97 1203.53 L1118.55 1203.53 L1119.14 1203.53 L1119.73 1203.53 L1120.31 1203.53 L1120.9 1203.53 L1121.49 1203.53 L1122.07 1203.53 L1122.66 1203.53 L1123.25 1203.53 L1123.83 1203.53 L1124.42 1203.53 L1125.01 1203.53 L1125.59 1203.53 L1126.18 1203.53 L1126.76 1203.53 L1127.35 1203.53 L1127.94 1203.53 L1128.52 1203.53 L1129.11 1203.53 L1129.7 1203.53 L1130.28 1203.53 L1130.87 1203.53 L1131.46 1203.53 L1132.04 1203.53 L1132.63 1203.53 L1133.21 1203.53 L1133.8 1203.53 L1134.39 1203.53 L1134.97 1203.53 L1135.56 1203.53 L1136.15 1203.53 L1136.73 1203.53 L1137.32 1203.53 L1137.91 1203.53 L1138.49 1203.53 L1139.08 1203.53 L1139.67 1203.53 L1140.25 1203.53 L1140.84 1203.53 L1141.42 1203.53 L1142.01 1203.53 L1142.6 1203.53 L1143.18 1203.53 L1143.77 1203.53 L1144.36 1203.53 L1144.94 1203.53 L1145.53 1203.53 L1146.12 1203.53 L1146.7 1203.53 L1147.29 1203.53 L1147.88 1203.53 L1148.46 1203.53 L1149.05 1203.53 L1149.63 1203.53 L1150.22 1203.53 L1150.81 1203.53 L1151.39 1203.53 L1151.98 1203.53 L1152.57 1203.53 L1153.15 1203.53 L1153.74 1203.53 L1154.33 1203.53 L1154.91 1203.53 L1155.5 1203.53 L1156.09 1203.53 L1156.67 1203.53 L1157.26 1203.53 L1157.84 1203.53 L1158.43 1203.53 L1159.02 1203.53 L1159.6 1203.53 L1160.19 1203.53 L1160.78 1203.53 L1161.36 1203.53 L1161.95 1203.53 L1162.54 1203.53 L1163.12 1203.53 L1163.71 1203.53 L1164.29 1203.53 L1164.88 1203.53 L1165.47 1203.53 L1166.05 1203.53 L1166.64 1203.53 L1167.23 1203.53 L1167.81 1203.53 L1168.4 1203.53 L1168.99 1203.53 L1169.57 1203.53 L1170.16 1203.53 L1170.75 1203.53 L1171.33 1203.53 L1171.92 1203.53 L1172.5 1203.53 L1173.09 1203.53 L1173.68 1203.53 L1174.26 1203.53 L1174.85 1203.53 L1175.44 1203.53 L1176.02 1203.53 L1176.61 1203.53 L1177.2 1203.53 L1177.78 1203.53 L1178.37 1203.53 L1178.96 1203.53 L1179.54 1203.53 L1180.13 1203.53 L1180.71 1203.53 L1181.3 1203.53 L1181.89 1203.53 L1182.47 1203.53 L1183.06 1203.53 L1183.65 1203.53 L1184.23 1203.53 L1184.82 1203.53 L1185.41 1203.53 L1185.99 1203.53 L1186.58 1203.53 L1187.16 1203.53 L1187.75 1203.53 L1188.34 1203.53 L1188.92 1203.53 L1189.51 1203.53 L1190.1 1203.53 L1190.68 1203.53 L1191.27 1203.53 L1191.86 1203.53 L1192.44 1203.53 L1193.03 1203.53 L1193.62 1203.53 L1194.2 1203.53 L1194.79 1203.53 L1195.37 1203.53 L1195.96 1203.53 L1196.55 1203.53 L1197.13 1203.53 L1197.72 1203.53 L1198.31 1203.53 L1198.89 1203.53 L1199.48 1203.53 L1200.07 1203.53 L1200.65 1203.53 L1201.24 1203.53 L1201.83 1203.53 L1202.41 1203.53 L1203 1203.53 L1203.58 1203.53 L1204.17 1203.53 L1204.76 1203.53 L1205.34 1203.53 L1205.93 1203.53 L1206.52 1203.53 L1207.1 1203.53 L1207.69 1203.53 L1208.28 1203.53 L1208.86 1203.53 L1209.45 1203.53 L1210.03 1203.53 L1210.62 1203.53 L1211.21 1203.53 L1211.79 1203.53 L1212.38 1203.53 L1212.97 1203.53 L1213.55 1203.53 L1214.14 1203.53 L1214.73 1203.53 L1215.31 1203.53 L1215.9 1203.53 L1216.49 1203.53 L1217.07 1203.53 L1217.66 1203.53 L1218.24 1203.53 L1218.83 1203.53 L1219.42 1203.53 L1220 1203.53 L1220.59 1203.53 L1221.18 1203.53 L1221.76 1203.53 L1222.35 1203.53 L1222.94 1203.53 L1223.52 1203.53 L1224.11 1203.53 L1224.7 1203.53 L1225.28 1203.53 L1225.87 1203.53 L1226.45 1203.53 L1227.04 1203.53 L1227.63 1203.53 L1228.21 1203.53 L1228.8 1203.53 L1229.39 1203.53 L1229.97 1203.53 L1230.56 1203.53 L1231.15 1203.53 L1231.73 1203.53 L1232.32 1203.53 L1232.91 1203.53 L1233.49 1203.53 L1234.08 1203.53 L1234.66 1203.53 L1235.25 1203.53 L1235.84 1203.53 L1236.42 1203.53 L1237.01 1203.53 L1237.6 1203.53 L1238.18 1203.53 L1238.77 1203.53 L1239.36 1203.53 L1239.94 1203.53 L1240.53 1203.53 L1241.11 1203.53 L1241.7 1203.53 L1242.29 1203.53 L1242.87 1203.53 L1243.46 1203.53 L1244.05 1203.53 L1244.63 1203.53 L1245.22 1203.53 L1245.81 1203.53 L1246.39 1203.53 L1246.98 1203.53 L1247.57 1203.53 L1248.15 1203.53 L1248.74 1203.53 L1249.32 1203.53 L1249.91 1203.53 L1250.5 1203.53 L1251.08 1203.53 L1251.67 1203.53 L1252.26 1203.53 L1252.84 1203.53 L1253.43 1203.53 L1254.02 1203.53 L1254.6 1203.53 L1255.19 1203.53 L1255.78 1203.53 L1256.36 1203.53 L1256.95 1203.53 L1257.53 1203.53 L1258.12 1203.53 L1258.71 1203.53 L1259.29 1203.53 L1259.88 1203.53 L1260.47 1203.53 L1261.05 1203.53 L1261.64 1203.53 L1262.23 1203.53 L1262.81 1203.53 L1263.4 1203.53 L1263.98 1203.53 L1264.57 1203.53 L1265.16 1203.53 L1265.74 1203.53 L1266.33 1203.53 L1266.92 1203.53 L1267.5 1203.53 L1268.09 1203.53 L1268.68 1203.53 L1269.26 1203.53 L1269.85 1203.53 L1270.44 1203.53 L1271.02 1203.53 L1271.61 1203.53 L1272.19 1203.53 L1272.78 1203.53 L1273.37 1203.53 L1273.95 1203.53 L1274.54 1203.53 L1275.13 1203.53 L1275.71 1203.53 L1276.3 1203.53 L1276.89 1203.53 L1277.47 1203.53 L1278.06 1203.53 L1278.65 1203.53 L1279.23 1203.53 L1279.82 1203.53 L1280.4 1203.53 L1280.99 1203.53 L1281.58 1203.53 L1282.16 1203.53 L1282.75 1203.53 L1283.34 1203.53 L1283.92 1203.53 L1284.51 1203.53 L1285.1 1203.53 L1285.68 1203.53 L1286.27 1203.53 L1286.86 1203.53 L1287.44 1203.53 L1288.03 1203.53 L1288.61 1203.53 L1289.2 1203.53 L1289.79 1203.53 L1290.37 1203.53 L1290.96 1203.53 L1291.55 1203.53 L1292.13 1203.53 L1292.72 1203.53 L1293.31 1203.53 L1293.89 1203.53 L1294.48 1203.53 L1295.06 1203.53 L1295.65 1203.53 L1296.24 1203.53 L1296.82 1203.53 L1297.41 1203.53 L1298 1203.53 L1298.58 1203.53 L1299.17 1203.53 L1299.76 1203.53 L1300.34 1203.53 L1300.93 1203.53 L1301.52 1203.53 L1302.1 1203.53 L1302.69 1203.53 L1303.27 1203.53 L1303.86 1203.53 L1304.45 1203.53 L1305.03 1203.53 L1305.62 1203.53 L1306.21 1203.53 L1306.79 1203.53 L1307.38 1203.53 L1307.97 1203.53 L1308.55 1203.53 L1309.14 1203.53 L1309.73 1203.53 L1310.31 1203.53 L1310.9 1203.53 L1311.48 1203.53 L1312.07 1203.53 L1312.66 1203.53 L1313.24 1203.53 L1313.83 1203.53 L1314.42 1203.53 L1315 1203.53 L1315.59 1203.53 L1316.18 1203.53 L1316.76 1203.53 L1317.35 1203.53 L1317.93 1203.53 L1318.52 1203.53 L1319.11 1203.53 L1319.69 1203.53 L1320.28 1203.53 L1320.87 1203.53 L1321.45 1203.53 L1322.04 1203.53 L1322.63 1203.53 L1323.21 1203.53 L1323.8 1203.53 L1324.39 1203.53 L1324.97 1203.53 L1325.56 1203.53 L1326.14 1203.53 L1326.73 1203.53 L1327.32 1203.53 L1327.9 1203.53 L1328.49 1203.53 L1329.08 1203.53 L1329.66 1203.53 L1330.25 1203.53 L1330.84 1203.53 L1331.42 1203.53 L1332.01 1203.53 L1332.6 1203.53 L1333.18 1203.53 L1333.77 1203.53 L1334.35 1203.53 L1334.94 1203.53 L1335.53 1203.53 L1336.11 1203.53 L1336.7 1203.53 L1337.29 1203.53 L1337.87 1203.53 L1338.46 1203.53 L1339.05 1203.53 L1339.63 1203.53 L1340.22 1203.53 L1340.8 1203.53 L1341.39 1203.53 L1341.98 1203.53 L1342.56 1203.53 L1343.15 1203.53 L1343.74 1203.53 L1344.32 1203.53 L1344.91 1203.53 L1345.5 1203.53 L1346.08 1203.53 L1346.67 1203.53 L1347.26 1203.53 L1347.84 1203.53 L1348.43 1203.53 L1349.01 1203.53 L1349.6 1203.53 L1350.19 1203.53 L1350.77 1203.53 L1351.36 1203.53 L1351.95 1203.53 L1352.53 1203.53 L1353.12 1203.53 L1353.71 1203.53 L1354.29 1203.53 L1354.88 1203.53 L1355.47 1203.53 L1356.05 1203.53 L1356.64 1203.53 L1357.22 1203.53 L1357.81 1203.53 L1358.4 1203.53 L1358.98 1203.53 L1359.57 1203.53 L1360.16 1203.53 L1360.74 1203.53 L1361.33 1203.53 L1361.92 1203.53 L1362.5 1203.53 L1363.09 1203.53 L1363.68 1203.53 L1364.26 1203.53 L1364.85 1203.53 L1365.43 1203.53 L1366.02 1203.53 L1366.61 1203.53 L1367.19 1203.53 L1367.78 1203.53 L1368.37 1203.53 L1368.95 1203.53 L1369.54 1203.53 L1370.13 1203.53 L1370.71 1203.53 L1371.3 1203.53 L1371.88 1203.53 L1372.47 1203.53 L1373.06 1203.53 L1373.64 1203.53 L1374.23 1203.53 L1374.82 1203.53 L1375.4 1203.53 L1375.99 1203.53 L1376.58 1203.53 L1377.16 1203.53 L1377.75 1203.53 L1378.34 1203.53 L1378.92 1203.53 L1379.51 1203.53 L1380.09 1203.53 L1380.68 1203.53 L1381.27 1203.53 L1381.85 1203.53 L1382.44 1203.53 L1383.03 1203.53 L1383.61 1203.53 L1384.2 1203.53 L1384.79 1203.53 L1385.37 1203.53 L1385.96 1203.53 L1386.55 1203.53 L1387.13 1203.53 L1387.72 1203.53 L1388.3 1203.53 L1388.89 1203.53 L1389.48 1203.53 L1390.06 1203.53 L1390.65 1203.53 L1391.24 1203.53 L1391.82 1203.53 L1392.41 1203.53 L1393 1203.53 L1393.58 1203.53 L1394.17 1203.53 L1394.75 1203.53 L1395.34 1203.53 L1395.93 1203.53 L1396.51 1203.53 L1397.1 1203.53 L1397.69 1203.53 L1398.27 1203.53 L1398.86 1203.53 L1399.45 1203.53 L1400.03 1203.53 L1400.62 1203.53 L1401.21 1203.53 L1401.79 1203.53 L1402.38 1203.53 L1402.96 1203.53 L1403.55 1203.53 L1404.14 1203.53 L1404.72 1203.53 L1405.31 1203.53 L1405.9 1203.53 L1406.48 1203.53 L1407.07 1203.53 L1407.66 1203.53 L1408.24 1203.53 L1408.83 1203.53 L1409.42 1203.53 L1410 1203.53 L1410.59 1203.53 L1411.17 1203.53 L1411.76 1203.53 L1412.35 1203.53 L1412.93 1203.53 L1413.52 1203.53 L1414.11 1203.53 L1414.69 1203.53 L1415.28 1203.53 L1415.87 1203.53 L1416.45 1203.53 L1417.04 1203.53 L1417.63 1203.53 L1418.21 1203.53 L1418.8 1203.53 L1419.38 1203.53 L1419.97 1203.53 L1420.56 1203.53 L1421.14 1203.53 L1421.73 1203.53 L1422.32 1203.53 L1422.9 1203.53 L1423.49 1203.53 L1424.08 1203.53 L1424.66 1203.53 L1425.25 1203.53 L1425.83 1203.53 L1426.42 1203.53 L1427.01 1203.53 L1427.59 1203.53 L1428.18 1203.53 L1428.77 1203.53 L1429.35 1203.53 L1429.94 1203.53 L1430.53 1203.53 L1431.11 1203.53 L1431.7 1203.53 L1432.29 1203.53 L1432.87 1203.53 L1433.46 1203.53 L1434.04 1203.53 L1434.63 1203.53 L1435.22 1203.53 L1435.8 1203.53 L1436.39 1203.53 L1436.98 1203.53 L1437.56 1203.53 L1438.15 1203.53 L1438.74 1203.53 L1439.32 1203.53 L1439.91 1203.53 L1440.5 1203.53 L1441.08 1203.53 L1441.67 1203.53 L1442.25 1203.53 L1442.84 1203.53 L1443.43 1203.53 L1444.01 1203.53 L1444.6 1203.53 L1445.19 1203.53 L1445.77 1203.53 L1446.36 1203.53 L1446.95 1203.53 L1447.53 1203.53 L1448.12 1203.53 L1448.7 1203.53 L1449.29 1203.53 L1449.88 1203.53 L1450.46 1203.53 L1451.05 1203.53 L1451.64 1203.53 L1452.22 1203.53 L1452.81 1203.53 L1453.4 1203.53 L1453.98 1203.53 L1454.57 1203.53 L1455.16 1203.53 L1455.74 1203.53 L1456.33 1203.53 L1456.91 1203.53 L1457.5 1203.53 L1458.09 1203.53 L1458.67 1203.53 L1459.26 1203.53 L1459.85 1203.53 L1460.43 1203.53 L1461.02 1203.53 L1461.61 1203.53 L1462.19 1203.53 L1462.78 1203.53 L1463.37 1203.53 L1463.95 1203.53 L1464.54 1203.53 L1465.12 1203.53 L1465.71 1203.53 L1466.3 1203.53 L1466.88 1203.53 L1467.47 1203.53 L1468.06 1203.53 L1468.64 1203.53 L1469.23 1203.53 L1469.82 1203.53 L1470.4 1203.53 L1470.99 1203.53 L1471.57 1203.53 L1472.16 1203.53 L1472.75 1203.53 L1473.33 1203.53 L1473.92 1203.53 L1474.51 1203.53 L1475.09 1203.53 L1475.68 1203.53 L1476.27 1203.53 L1476.85 1203.53 L1477.44 1203.53 L1478.03 1203.53 L1478.61 1203.53 L1479.2 1203.53 L1479.78 1203.53 L1480.37 1203.53 L1480.96 1203.53 L1481.54 1203.53 L1482.13 1203.53 L1482.72 1203.53 L1483.3 1203.53 L1483.89 1203.53 L1484.48 1203.53 L1485.06 1203.53 L1485.65 1203.53 L1486.24 1203.53 L1486.82 1203.53 L1487.41 1203.53 L1487.99 1203.53 L1488.58 1203.53 L1489.17 1203.53 L1489.75 1203.53 L1490.34 1203.53 L1490.93 1203.53 L1491.51 1203.53 L1492.1 1203.53 L1492.69 1203.53 L1493.27 1203.53 L1493.86 1203.53 L1494.45 1203.53 L1495.03 1203.53 L1495.62 1203.53 L1496.2 1203.53 L1496.79 1203.53 L1497.38 1203.53 L1497.96 1203.53 L1498.55 1203.53 L1499.14 1203.53 L1499.72 1203.53 L1500.31 1203.53 L1500.9 1203.53 L1501.48 1203.53 L1502.07 1203.53 L1502.65 1203.53 L1503.24 1203.53 L1503.83 1203.53 L1504.41 1203.53 L1505 1203.53 L1505.59 1203.53 L1506.17 1203.53 L1506.76 1203.53 L1507.35 1203.53 L1507.93 1203.53 L1508.52 1203.53 L1509.11 1203.53 L1509.69 1203.53 L1510.28 1203.53 L1510.86 1203.53 L1511.45 1203.53 L1512.04 1203.53 L1512.62 1203.53 L1513.21 1203.53 L1513.8 1203.53 L1514.38 1203.53 L1514.97 1203.53 L1515.56 1203.53 L1516.14 1203.53 L1516.73 1203.53 L1517.32 1203.53 L1517.9 1203.53 L1518.49 1203.53 L1519.07 1203.53 L1519.66 1203.53 L1520.25 1203.53 L1520.83 1203.53 L1521.42 1203.53 L1522.01 1203.53 L1522.59 1203.53 L1523.18 1203.53 L1523.77 1203.53 L1524.35 1203.53 L1524.94 1203.53 L1525.52 1203.53 L1526.11 1203.53 L1526.7 1203.53 L1527.28 1203.53 L1527.87 1203.53 L1528.46 1203.53 L1529.04 1203.53 L1529.63 1203.53 L1530.22 1203.53 L1530.8 1203.53 L1531.39 1203.53 L1531.98 1203.53 L1532.56 1203.53 L1533.15 1203.53 L1533.73 1203.53 L1534.32 1203.53 L1534.91 1203.53 L1535.49 1203.53 L1536.08 1203.53 L1536.67 1203.53 L1537.25 1203.53 L1537.84 1203.53 L1538.43 1203.53 L1539.01 1203.53 L1539.6 1203.53 L1540.19 1203.53 L1540.77 1203.53 L1541.36 1203.53 L1541.94 1203.53 L1542.53 1203.53 L1543.12 1203.53 L1543.7 1203.53 L1544.29 1203.53 L1544.88 1203.53 L1545.46 1203.53 L1546.05 1203.53 L1546.64 1203.53 L1547.22 1203.53 L1547.81 1203.53 L1548.4 1203.53 L1548.98 1203.53 L1549.57 1203.53 L1550.15 1203.53 L1550.74 1203.53 L1551.33 1203.53 L1551.91 1203.53 L1552.5 1203.53 L1553.09 1203.53 L1553.67 1203.53 L1554.26 1203.53 L1554.85 1203.53 L1555.43 1203.53 L1556.02 1203.53 L1556.6 1203.53 L1557.19 1203.53 L1557.78 1203.53 L1558.36 1203.53 L1558.95 1203.53 L1559.54 1203.53 L1560.12 1203.53 L1560.71 1203.53 L1561.3 1203.53 L1561.88 1203.53 L1562.47 1203.53 L1563.06 1203.53 L1563.64 1203.53 L1564.23 1203.53 L1564.81 1203.53 L1565.4 1203.53 L1565.99 1203.53 L1566.57 1203.53 L1567.16 1203.53 L1567.75 1203.53 L1568.33 1203.53 L1568.92 1203.53 L1569.51 1203.53 L1570.09 1203.53 L1570.68 1203.53 L1571.27 1203.53 L1571.85 1203.53 L1572.44 1203.53 L1573.02 1203.53 L1573.61 1203.53 L1574.2 1203.53 L1574.78 1203.53 L1575.37 1203.53 L1575.96 1203.53 L1576.54 1203.53 L1577.13 1203.53 L1577.72 1203.53 L1578.3 1203.53 L1578.89 1203.53 L1579.47 1203.53 L1580.06 1203.53 L1580.65 1203.53 L1581.23 1203.53 L1581.82 1203.53 L1582.41 1203.53 L1582.99 1203.53 L1583.58 1203.53 L1584.17 1203.53 L1584.75 1203.53 L1585.34 1203.53 L1585.93 1203.53 L1586.51 1203.53 L1587.1 1203.53 L1587.68 1203.53 L1588.27 1203.53 L1588.86 1203.53 L1589.44 1203.53 L1590.03 1203.53 L1590.62 1203.53 L1591.2 1203.53 L1591.79 1203.53 L1592.38 1203.53 L1592.96 1203.53 L1593.55 1203.53 L1594.14 1203.53 L1594.72 1203.53 L1595.31 1203.53 L1595.89 1203.53 L1596.48 1203.53 L1597.07 1203.53 L1597.65 1203.53 L1598.24 1203.53 L1598.83 1203.53 L1599.41 1203.53 L1600 1203.53 L1600.59 1203.53 L1601.17 1203.53 L1601.76 1203.53 L1602.34 1203.53 L1602.93 1203.53 L1603.52 1203.53 L1604.1 1203.53 L1604.69 1203.53 L1605.28 1203.53 L1605.86 1203.53 L1606.45 1203.53 L1607.04 1203.53 L1607.62 1203.53 L1608.21 1203.53 L1608.8 1203.53 L1609.38 1203.53 L1609.97 1203.53 L1610.55 1203.53 L1611.14 1203.53 L1611.73 1203.53 L1612.31 1203.53 L1612.9 1203.53 L1613.49 1203.53 L1614.07 1203.53 L1614.66 1203.53 L1615.25 1203.53 L1615.83 1203.53 L1616.42 1203.53 L1617.01 1203.53 L1617.59 1203.53 L1618.18 1203.53 L1618.76 1203.53 L1619.35 1203.53 L1619.94 1203.53 L1620.52 1203.53 L1621.11 1203.53 L1621.7 1203.53 L1622.28 1203.53 L1622.87 1203.53 L1623.46 1203.53 L1624.04 1203.53 L1624.63 1203.53 L1625.22 1203.53 L1625.8 1203.53 L1626.39 1203.53 L1626.97 1203.53 L1627.56 1203.53 L1628.15 1203.53 L1628.73 1203.53 L1629.32 1203.53 L1629.91 1203.53 L1630.49 1203.53 L1631.08 1203.53 L1631.67 1203.53 L1632.25 1203.53 L1632.84 1203.53 L1633.42 1203.53 L1634.01 1203.53 L1634.6 1203.53 L1635.18 1203.53 L1635.77 1203.53 L1636.36 1203.53 L1636.94 1203.53 L1637.53 1203.53 L1638.12 1203.53 L1638.7 1203.53 L1639.29 1203.53 L1639.88 1203.53 L1640.46 1203.53 L1641.05 1203.53 L1641.63 1203.53 L1642.22 1203.53 L1642.81 1203.53 L1643.39 1203.53 L1643.98 1203.53 L1644.57 1203.53 L1645.15 1203.53 L1645.74 1203.53 L1646.33 1203.53 L1646.91 1203.53 L1647.5 1203.53 L1648.09 1203.53 L1648.67 1203.53 L1649.26 1203.53 L1649.84 1203.53 L1650.43 1203.53 L1651.02 1203.53 L1651.6 1203.53 L1652.19 1203.53 L1652.78 1203.53 L1653.36 1203.53 L1653.95 1203.53 L1654.54 1203.53 L1655.12 1203.53 L1655.71 1203.53 L1656.29 1203.53 L1656.88 1203.53 L1657.47 1203.53 L1658.05 1203.53 L1658.64 1203.53 L1659.23 1203.53 L1659.81 1203.53 L1660.4 1203.53 L1660.99 1203.53 L1661.57 1203.53 L1662.16 1203.53 L1662.75 1203.53 L1663.33 1203.53 L1663.92 1203.53 L1664.5 1203.53 L1665.09 1203.53 L1665.68 1203.53 L1666.26 1203.53 L1666.85 1203.53 L1667.44 1203.53 L1668.02 1203.53 L1668.61 1203.53 L1669.2 1203.53 L1669.78 1203.53 L1670.37 1203.53 L1670.96 1203.53 L1671.54 1203.53 L1672.13 1203.53 L1672.71 1203.53 L1673.3 1203.53 L1673.89 1203.53 L1674.47 1203.53 L1675.06 1203.53 L1675.65 1203.53 L1676.23 1203.53 L1676.82 1203.53 L1677.41 1203.53 L1677.99 1203.53 L1678.58 1203.53 L1679.17 1203.53 L1679.75 1203.53 L1680.34 1203.53 L1680.92 1203.53 L1681.51 1203.53 L1682.1 1203.53 L1682.68 1203.53 L1683.27 1203.53 L1683.86 1203.53 L1684.44 1203.53 L1685.03 1203.53 L1685.62 1203.53 L1686.2 1203.53 L1686.79 1203.53 L1687.37 1203.53 L1687.96 1203.53 L1688.55 1203.53 L1689.13 1203.53 L1689.72 1203.53 L1690.31 1203.53 L1690.89 1203.53 L1691.48 1203.53 L1692.07 1203.53 L1692.65 1203.53 L1693.24 1203.53 L1693.83 1203.53 L1694.41 1203.53 L1695 1203.53 L1695.58 1203.53 L1696.17 1203.53 L1696.76 1203.53 L1697.34 1203.53 L1697.93 1203.53 L1698.52 1203.53 L1699.1 1203.53 L1699.69 1203.53 L1700.28 1203.53 L1700.86 1203.53 L1701.45 1203.53 L1702.04 1203.53 L1702.62 1203.53 L1703.21 1203.53 L1703.79 1203.53 L1704.38 1203.53 L1704.97 1203.53 L1705.55 1203.53 L1706.14 1203.53 L1706.73 1203.53 L1707.31 1203.53 L1707.9 1203.53 L1708.49 1203.53 L1709.07 1203.53 L1709.66 1203.53 L1710.24 1203.53 L1710.83 1203.53 L1711.42 1203.53 L1712 1203.53 L1712.59 1203.53 L1713.18 1203.53 L1713.76 1203.53 L1714.35 1203.53 L1714.94 1203.53 L1715.52 1203.53 L1716.11 1203.53 L1716.7 1203.53 L1717.28 1203.53 L1717.87 1203.53 L1718.45 1203.53 L1719.04 1203.53 L1719.63 1203.53 L1720.21 1203.53 L1720.8 1203.53 L1721.39 1203.53 L1721.97 1203.53 L1722.56 1203.53 L1723.15 1203.53 L1723.73 1203.53 L1724.32 1203.53 L1724.91 1203.53 L1725.49 1203.53 L1726.08 1203.53 L1726.66 1203.53 L1727.25 1203.53 L1727.84 1203.53 L1728.42 1203.53 L1729.01 1203.53 L1729.6 1203.53 L1730.18 1203.53 L1730.77 1203.53 L1731.36 1203.53 L1731.94 1203.53 L1732.53 1203.53 L1733.11 1203.53 L1733.7 1203.53 L1734.29 1203.53 L1734.87 1203.53 L1735.46 1203.53 L1736.05 1203.53 L1736.63 1203.53 L1737.22 1203.53 L1737.81 1203.53 L1738.39 1203.53 L1738.98 1203.53 L1739.57 1203.53 L1740.15 1203.53 L1740.74 1203.53 L1741.32 1203.53 L1741.91 1203.53 L1742.5 1203.53 L1743.08 1203.53 L1743.67 1203.53 L1744.26 1203.53 L1744.84 1203.53 L1745.43 1203.53 L1746.02 1203.53 L1746.6 1203.53 L1747.19 1203.53 L1747.78 1203.53 L1748.36 1203.53 L1748.95 1203.53 L1749.53 1203.53 L1750.12 1203.53 L1750.71 1203.53 L1751.29 1203.53 L1751.88 1203.53 L1752.47 1203.53 L1753.05 1203.53 L1753.64 1203.53 L1754.23 1203.53 L1754.81 1203.53 L1755.4 1203.53 L1755.99 1203.53 L1756.57 1203.53 L1757.16 1203.53 L1757.74 1203.53 L1758.33 1203.53 L1758.92 1203.53 L1759.5 1203.53 L1760.09 1203.53 L1760.68 1203.53 L1761.26 1203.53 L1761.85 1203.53 L1762.44 1203.53 L1763.02 1203.53 L1763.61 1203.53 L1764.19 1203.53 L1764.78 1203.53 L1765.37 1203.53 L1765.95 1203.53 L1766.54 1203.53 L1767.13 1203.53 L1767.71 1203.53 L1768.3 1203.53 L1768.89 1203.53 L1769.47 1203.53 L1770.06 1203.53 L1770.65 1203.53 L1771.23 1203.53 L1771.82 1203.53 L1772.4 1203.53 L1772.99 1203.53 L1773.58 1203.53 L1774.16 1203.53 L1774.75 1203.53 L1775.34 1203.53 L1775.92 1203.53 L1776.51 1203.53 L1777.1 1203.53 L1777.68 1203.53 L1778.27 1203.53 L1778.86 1203.53 L1779.44 1203.53 L1780.03 1203.53 L1780.61 1203.53 L1781.2 1203.53 L1781.79 1203.53 L1782.37 1203.53 L1782.96 1203.53 L1783.55 1203.53 L1784.13 1203.53 L1784.72 1203.53 L1785.31 1203.53 L1785.89 1203.53 L1786.48 1203.53 L1787.06 1203.53 L1787.65 1203.53 L1788.24 1203.53 L1788.82 1203.53 L1789.41 1203.53 L1790 1203.53 L1790.58 1203.53 L1791.17 1203.53 L1791.76 1203.53 L1792.34 1203.53 L1792.93 1203.53 L1793.52 1203.53 L1794.1 1203.53 L1794.69 1203.53 L1795.27 1203.53 L1795.86 1203.53 L1796.45 1203.53 L1797.03 1203.53 L1797.62 1203.53 L1798.21 1203.53 L1798.79 1203.53 L1799.38 1203.53 L1799.97 1203.53 L1800.55 1203.53 L1801.14 1203.53 L1801.73 1203.53 L1802.31 1203.53 L1802.9 1203.53 L1803.48 1203.53 L1804.07 1203.53 L1804.66 1203.53 L1805.24 1203.53 L1805.83 1203.53 L1806.42 1203.53 L1807 1203.53 L1807.59 1203.53 L1808.18 1203.53 L1808.76 1203.53 L1809.35 1203.53 L1809.94 1203.53 L1810.52 1203.53 L1811.11 1203.53 L1811.69 1203.53 L1812.28 1203.53 L1812.87 1203.53 L1813.45 1203.53 L1814.04 1203.53 L1814.63 1203.53 L1815.21 1203.53 L1815.8 1203.53 L1816.39 1203.53 L1816.97 1203.53 L1817.56 1203.53 L1818.14 1203.53 L1818.73 1203.53 L1819.32 1203.53 L1819.9 1203.53 L1820.49 1203.53 L1821.08 1203.53 L1821.66 1203.53 L1822.25 1203.53 L1822.84 1203.53 L1823.42 1203.53 L1824.01 1203.53 L1824.6 1203.53 L1825.18 1203.53 L1825.77 1203.53 L1826.35 1203.53 L1826.94 1203.53 L1827.53 1203.53 L1828.11 1203.53 L1828.7 1203.53 L1829.29 1203.53 L1829.87 1203.53 L1830.46 1203.53 L1831.05 1203.53 L1831.63 1203.53 L1832.22 1203.53 L1832.81 1203.53 L1833.39 1203.53 L1833.98 1203.53 L1834.56 1203.53 L1835.15 1203.53 L1835.74 1203.53 L1836.32 1203.53 L1836.91 1203.53 L1837.5 1203.53 L1838.08 1203.53 L1838.67 1203.53 L1839.26 1203.53 L1839.84 1203.53 L1840.43 1203.53 L1841.01 1203.53 L1841.6 1203.53 L1842.19 1203.53 L1842.77 1203.53 L1843.36 1203.53 L1843.95 1203.53 L1844.53 1203.53 L1845.12 1203.53 L1845.71 1203.53 L1846.29 1203.53 L1846.88 1203.53 L1847.47 1203.53 L1848.05 1203.53 L1848.64 1203.53 L1849.22 1203.53 L1849.81 1203.53 L1850.4 1203.53 L1850.98 1203.53 L1851.57 1203.53 L1852.16 1203.53 L1852.74 1203.53 L1853.33 1203.53 L1853.92 1203.53 L1854.5 1203.53 L1855.09 1203.53 L1855.68 1203.53 L1856.26 1203.53 L1856.85 1203.53 L1857.43 1203.53 L1858.02 1203.53 L1858.61 1203.53 L1859.19 1203.53 L1859.78 1203.53 L1860.37 1203.53 L1860.95 1203.53 L1861.54 1203.53 L1862.13 1203.53 L1862.71 1203.53 L1863.3 1203.53 L1863.88 1203.53 L1864.47 1203.53 L1865.06 1203.53 L1865.64 1203.53 L1866.23 1203.53 L1866.82 1203.53 L1867.4 1203.53 L1867.99 1203.53 L1868.58 1203.53 L1869.16 1203.53 L1869.75 1203.53 L1870.34 1203.53 L1870.92 1203.53 L1871.51 1203.53 L1872.09 1203.53 L1872.68 1203.53 L1873.27 1203.53 L1873.85 1203.53 L1874.44 1203.53 L1875.03 1203.53 L1875.61 1203.53 L1876.2 1203.53 L1876.79 1203.53 L1877.37 1203.53 L1877.96 1203.53 L1878.55 1203.53 L1879.13 1203.53 L1879.72 1203.53 L1880.3 1203.53 L1880.89 1203.53 L1881.48 1203.53 L1882.06 1203.53 L1882.65 1203.53 L1883.24 1203.53 L1883.82 1203.53 L1884.41 1203.53 L1885 1203.53 L1885.58 1203.53 L1886.17 1203.53 L1886.76 1203.53 L1887.34 1203.53 L1887.93 1203.53 L1888.51 1203.53 L1889.1 1203.53 L1889.69 1203.53 L1890.27 1203.53 L1890.86 1203.53 L1891.45 1203.53 L1892.03 1203.53 L1892.62 1203.53 L1893.21 1203.53 L1893.79 1203.53 L1894.38 1203.53 L1894.96 1203.53 L1895.55 1203.53 L1896.14 1203.53 L1896.72 1203.53 L1897.31 1203.53 L1897.9 1203.53 L1898.48 1203.53 L1899.07 1203.53 L1899.66 1203.53 L1900.24 1203.53 L1900.83 1203.53 L1901.42 1203.53 L1902 1203.53 L1902.59 1203.53 L1903.17 1203.53 L1903.76 1203.53 L1904.35 1203.53 L1904.93 1203.53 L1905.52 1203.53 L1906.11 1203.53 L1906.69 1203.53 L1907.28 1203.53 L1907.87 1203.53 L1908.45 1203.53 L1909.04 1203.53 L1909.63 1203.53 L1910.21 1203.53 L1910.8 1203.53 L1911.38 1203.53 L1911.97 1203.53 L1912.56 1203.53 L1913.14 1203.53 L1913.73 1203.53 L1914.32 1203.53 L1914.9 1203.53 L1915.49 1203.53 L1916.08 1203.53 L1916.66 1203.53 L1917.25 1203.53 L1917.83 1203.53 L1918.42 1203.53 L1919.01 1203.53 L1919.59 1203.53 L1920.18 1203.53 L1920.77 1203.53 L1921.35 1203.53 L1921.94 1203.53 L1922.53 1203.53 L1923.11 1203.53 L1923.7 1203.53 L1924.29 1203.53 L1924.87 1203.53 L1925.46 1203.53 L1926.04 1203.53 L1926.63 1203.53 L1927.22 1203.53 L1927.8 1203.53 L1928.39 1203.53 L1928.98 1203.53 L1929.56 1203.53 L1930.15 1203.53 L1930.74 1203.53 L1931.32 1203.53 L1931.91 1203.53 L1932.5 1203.53 L1933.08 1203.53 L1933.67 1203.53 L1934.25 1203.53 L1934.84 1203.53 L1935.43 1203.53 L1936.01 1203.53 L1936.6 1203.53 L1937.19 1203.53 L1937.77 1203.53 L1938.36 1203.53 L1938.95 1203.53 L1939.53 1203.53 L1940.12 1203.53 L1940.71 1203.53 L1941.29 1203.53 L1941.88 1203.53 L1942.46 1203.53 L1943.05 1203.53 L1943.64 1203.53 L1944.22 1203.53 L1944.81 1203.53 L1945.4 1203.53 L1945.98 1203.53 L1946.57 1203.53 L1947.16 1203.53 L1947.74 1203.53 L1948.33 1203.53 L1948.91 1203.53 L1949.5 1203.53 L1950.09 1203.53 L1950.67 1203.53 L1951.26 1203.53 L1951.85 1203.53 L1952.43 1203.53 L1953.02 1203.53 L1953.61 1203.53 L1954.19 1203.53 L1954.78 1203.53 L1955.37 1203.53 L1955.95 1203.53 L1956.54 1203.53 L1957.12 1203.53 L1957.71 1203.53 L1958.3 1203.53 L1958.88 1203.53 L1959.47 1203.53 L1960.06 1203.53 L1960.64 1203.53 L1961.23 1203.53 L1961.82 1203.53 L1962.4 1203.53 L1962.99 1203.53 L1963.58 1203.53 L1964.16 1203.53 L1964.75 1203.53 L1965.33 1203.53 L1965.92 1203.53 L1966.51 1203.53 L1967.09 1203.53 L1967.68 1203.53 L1968.27 1203.53 L1968.85 1203.53 L1969.44 1203.53 L1970.03 1203.53 L1970.61 1203.53 L1971.2 1203.53 L1971.78 1203.53 L1972.37 1203.53 L1972.96 1203.53 L1973.54 1203.53 L1974.13 1203.53 L1974.72 1203.53 L1975.3 1203.53 L1975.89 1203.53 L1976.48 1203.53 L1977.06 1203.53 L1977.65 1203.53 L1978.24 1203.53 L1978.82 1203.53 L1979.41 1203.53 L1979.99 1203.53 L1980.58 1203.53 L1981.17 1203.53 L1981.75 1203.53 L1982.34 1203.53 L1982.93 1203.53 L1983.51 1203.53 L1984.1 1203.53 L1984.69 1203.53 L1985.27 1203.53 L1985.86 1203.53 L1986.45 1203.53 L1987.03 1203.53 L1987.62 1203.53 L1988.2 1203.53 L1988.79 1203.53 L1989.38 1203.53 L1989.96 1203.53 L1990.55 1203.53 L1991.14 1203.53 L1991.72 1203.53 L1992.31 1203.53 L1992.9 1203.53 L1993.48 1203.53 L1994.07 1203.53 L1994.65 1203.53 L1995.24 1203.53 L1995.83 1203.53 L1996.41 1203.53 L1997 1203.53 L1997.59 1203.53 L1998.17 1203.53 L1998.76 1203.53 L1999.35 1203.53 L1999.93 1203.53 L2000.52 1203.53 L2001.11 1203.53 L2001.69 1203.53 L2002.28 1203.53 L2002.86 1203.53 L2003.45 1203.53 L2004.04 1203.53 L2004.62 1203.53 L2005.21 1203.53 L2005.8 1203.53 L2006.38 1203.53 L2006.97 1203.53 L2007.56 1203.53 L2008.14 1203.53 L2008.73 1203.53 L2009.32 1203.53 L2009.9 1203.53 L2010.49 1203.53 L2011.07 1203.53 L2011.66 1203.53 L2012.25 1203.53 L2012.83 1203.53 L2013.42 1203.53 L2014.01 1203.53 L2014.59 1203.53 L2015.18 1203.53 L2015.77 1203.53 L2016.35 1203.53 L2016.94 1203.53 L2017.53 1203.53 L2018.11 1203.53 L2018.7 1203.53 L2019.28 1203.53 L2019.87 1203.53 L2020.46 1203.53 L2021.04 1203.53 L2021.63 1203.53 L2022.22 1203.53 L2022.8 1203.53 L2023.39 1203.53 L2023.98 1203.53 L2024.56 1203.53 L2025.15 1203.53 L2025.73 1203.53 L2026.32 1203.53 L2026.91 1203.53 L2027.49 1203.53 L2028.08 1203.53 L2028.67 1203.53 L2029.25 1203.53 L2029.84 1203.53 L2030.43 1203.53 L2031.01 1203.53 L2031.6 1203.53 L2032.19 1203.53 L2032.77 1203.53 L2033.36 1203.53 L2033.94 1203.53 L2034.53 1203.53 L2035.12 1203.53 L2035.7 1203.53 L2036.29 1203.53 L2036.88 1203.53 L2037.46 1203.53 L2038.05 1203.53 L2038.64 1203.53 L2039.22 1203.53 L2039.81 1203.53 L2040.4 1203.53 L2040.98 1203.53 L2041.57 1203.53 L2042.15 1203.53 L2042.74 1203.53 L2043.33 1203.53 L2043.91 1203.53 L2044.5 1203.53 L2045.09 1203.53 L2045.67 1203.53 L2046.26 1203.53 L2046.85 1203.53 L2047.43 1203.53 L2048.02 1203.53 L2048.6 1203.53 L2049.19 1203.53 L2049.78 1203.53 L2050.36 1203.53 L2050.95 1203.53 L2051.54 1203.53 L2052.12 1203.53 L2052.71 1203.53 L2053.3 1203.53 L2053.88 1203.53 L2054.47 1203.53 L2055.06 1203.53 L2055.64 1203.53 L2056.23 1203.53 L2056.81 1203.53 L2057.4 1203.53 L2057.99 1203.53 L2058.57 1203.53 L2059.16 1203.53 L2059.75 1203.53 L2060.33 1203.53 L2060.92 1203.53 L2061.51 1203.53 L2062.09 1203.53 L2062.68 1203.53 L2063.27 1203.53 L2063.85 1203.53 L2064.44 1203.53 L2065.02 1203.53 L2065.61 1203.53 L2066.2 1203.53 L2066.78 1203.53 L2067.37 1203.53 L2067.96 1203.53 L2068.54 1203.53 L2069.13 1203.53 L2069.72 1203.53 L2070.3 1203.53 L2070.89 1203.53 L2071.48 1203.53 L2072.06 1203.53 L2072.65 1203.53 L2073.23 1203.53 L2073.82 1203.53 L2074.41 1203.53 L2074.99 1203.53 L2075.58 1203.53 L2076.17 1203.53 L2076.75 1203.53 L2077.34 1203.53 L2077.93 1203.53 L2078.51 1203.53 L2079.1 1203.53 L2079.68 1203.53 L2080.27 1203.53 L2080.86 1203.53 L2081.44 1203.53 L2082.03 1203.53 L2082.62 1203.53 L2083.2 1203.53 L2083.79 1203.53 L2084.38 1203.53 L2084.96 1203.53 L2085.55 1203.53 L2086.14 1203.53 L2086.72 1203.53 L2087.31 1203.53 L2087.89 1203.53 L2088.48 1203.53 L2089.07 1203.53 L2089.65 1203.53 L2090.24 1203.53 L2090.83 1203.53 L2091.41 1203.53 L2092 1203.53 L2092.59 1203.53 L2093.17 1203.53 L2093.76 1203.53 L2094.35 1203.53 L2094.93 1203.53 L2095.52 1203.53 L2096.1 1203.53 L2096.69 1203.53 L2097.28 1203.53 L2097.86 1203.53 L2098.45 1203.53 L2099.04 1203.53 L2099.62 1203.53 L2100.21 1203.53 L2100.8 1203.53 L2101.38 1203.53 L2101.97 1203.53 L2102.55 1203.53 L2103.14 1203.53 L2103.73 1203.53 L2104.31 1203.53 L2104.9 1203.53 L2105.49 1203.53 L2106.07 1203.53 L2106.66 1203.53 L2107.25 1203.53 L2107.83 1203.53 L2108.42 1203.53 L2109.01 1203.53 L2109.59 1203.53 L2110.18 1203.53 L2110.76 1203.53 L2111.35 1203.53 L2111.94 1203.53 L2112.52 1203.53 L2113.11 1203.53 L2113.7 1203.53 L2114.28 1203.53 L2114.87 1203.53 L2115.46 1203.53 L2116.04 1203.53 L2116.63 1203.53 L2117.22 1203.53 L2117.8 1203.53 L2118.39 1203.53 L2118.97 1203.53 L2119.56 1203.53 L2120.15 1203.53 L2120.73 1203.53 L2121.32 1203.53 L2121.91 1203.53 L2122.49 1203.53 L2123.08 1203.53 L2123.67 1203.53 L2124.25 1203.53 L2124.84 1203.53 L2125.42 1203.53 L2126.01 1203.53 L2126.6 1203.53 L2127.18 1203.53 L2127.77 1203.53 L2128.36 1203.53 L2128.94 1203.53 L2129.53 1203.53 L2130.12 1203.53 L2130.7 1203.53 L2131.29 1203.53 L2131.88 1203.53 L2132.46 1203.53 L2133.05 1203.53 L2133.63 1203.53 L2134.22 1203.53 L2134.81 1203.53 L2135.39 1203.53 L2135.98 1203.53 L2136.57 1203.53 L2137.15 1203.53 L2137.74 1203.53 L2138.33 1203.53 L2138.91 1203.53 L2139.5 1203.53 L2140.09 1203.53 L2140.67 1203.53 L2141.26 1203.53 L2141.84 1203.53 L2142.43 1203.53 L2143.02 1203.53 L2143.6 1203.53 L2144.19 1203.53 L2144.78 1203.53 L2145.36 1203.53 L2145.95 1203.53 L2146.54 1203.53 L2147.12 1203.53 L2147.71 1203.53 L2148.3 1203.53 L2148.88 1203.53 L2149.47 1203.53 L2150.05 1203.53 L2150.64 1203.53 L2151.23 1203.53 L2151.81 1203.53 L2152.4 1203.53 L2152.99 1203.53 L2153.57 1203.53 L2154.16 1203.53 L2154.75 1203.53 L2155.33 1203.53 L2155.92 1203.53 L2156.5 1203.53 L2157.09 1203.53 L2157.68 1203.53 L2158.26 1203.53 L2158.26 1203.42 L2157.68 1203.42 L2157.09 1203.42 L2156.5 1203.42 L2155.92 1203.42 L2155.33 1203.42 L2154.75 1203.42 L2154.16 1203.42 L2153.57 1203.42 L2152.99 1203.42 L2152.4 1203.42 L2151.81 1203.42 L2151.23 1203.42 L2150.64 1203.42 L2150.05 1203.42 L2149.47 1203.42 L2148.88 1203.42 L2148.3 1203.42 L2147.71 1203.42 L2147.12 1203.42 L2146.54 1203.42 L2145.95 1203.42 L2145.36 1203.42 L2144.78 1203.42 L2144.19 1203.42 L2143.6 1203.42 L2143.02 1203.42 L2142.43 1203.42 L2141.84 1203.42 L2141.26 1203.42 L2140.67 1203.42 L2140.09 1203.42 L2139.5 1203.42 L2138.91 1203.42 L2138.33 1203.42 L2137.74 1203.42 L2137.15 1203.42 L2136.57 1203.42 L2135.98 1203.42 L2135.39 1203.42 L2134.81 1203.42 L2134.22 1203.42 L2133.63 1203.42 L2133.05 1203.42 L2132.46 1203.42 L2131.88 1203.42 L2131.29 1203.42 L2130.7 1203.42 L2130.12 1203.42 L2129.53 1203.42 L2128.94 1203.42 L2128.36 1203.42 L2127.77 1203.42 L2127.18 1203.42 L2126.6 1203.42 L2126.01 1203.42 L2125.42 1203.42 L2124.84 1203.42 L2124.25 1203.42 L2123.67 1203.42 L2123.08 1203.42 L2122.49 1203.42 L2121.91 1203.42 L2121.32 1203.42 L2120.73 1203.42 L2120.15 1203.42 L2119.56 1203.42 L2118.97 1203.42 L2118.39 1203.42 L2117.8 1203.42 L2117.22 1203.42 L2116.63 1203.42 L2116.04 1203.42 L2115.46 1203.42 L2114.87 1203.42 L2114.28 1203.42 L2113.7 1203.42 L2113.11 1203.42 L2112.52 1203.42 L2111.94 1203.42 L2111.35 1203.42 L2110.76 1203.42 L2110.18 1203.42 L2109.59 1203.42 L2109.01 1203.42 L2108.42 1203.42 L2107.83 1203.42 L2107.25 1203.42 L2106.66 1203.42 L2106.07 1203.42 L2105.49 1203.42 L2104.9 1203.42 L2104.31 1203.42 L2103.73 1203.42 L2103.14 1203.42 L2102.55 1203.42 L2101.97 1203.42 L2101.38 1203.42 L2100.8 1203.42 L2100.21 1203.42 L2099.62 1203.42 L2099.04 1203.42 L2098.45 1203.42 L2097.86 1203.42 L2097.28 1203.42 L2096.69 1203.42 L2096.1 1203.42 L2095.52 1203.42 L2094.93 1203.42 L2094.35 1203.42 L2093.76 1203.42 L2093.17 1203.42 L2092.59 1203.42 L2092 1203.42 L2091.41 1203.42 L2090.83 1203.42 L2090.24 1203.42 L2089.65 1203.42 L2089.07 1203.42 L2088.48 1203.42 L2087.89 1203.42 L2087.31 1203.42 L2086.72 1203.42 L2086.14 1203.42 L2085.55 1203.42 L2084.96 1203.42 L2084.38 1203.42 L2083.79 1203.42 L2083.2 1203.42 L2082.62 1203.42 L2082.03 1203.42 L2081.44 1203.42 L2080.86 1203.42 L2080.27 1203.42 L2079.68 1203.42 L2079.1 1203.42 L2078.51 1203.42 L2077.93 1203.42 L2077.34 1203.42 L2076.75 1203.42 L2076.17 1203.42 L2075.58 1203.42 L2074.99 1203.42 L2074.41 1203.42 L2073.82 1203.42 L2073.23 1203.42 L2072.65 1203.42 L2072.06 1203.42 L2071.48 1203.42 L2070.89 1203.42 L2070.3 1203.42 L2069.72 1203.42 L2069.13 1203.42 L2068.54 1203.42 L2067.96 1203.42 L2067.37 1203.42 L2066.78 1203.42 L2066.2 1203.42 L2065.61 1203.42 L2065.02 1203.42 L2064.44 1203.42 L2063.85 1203.42 L2063.27 1203.42 L2062.68 1203.42 L2062.09 1203.42 L2061.51 1203.42 L2060.92 1203.42 L2060.33 1203.42 L2059.75 1203.42 L2059.16 1203.42 L2058.57 1203.42 L2057.99 1203.42 L2057.4 1203.42 L2056.81 1203.42 L2056.23 1203.42 L2055.64 1203.42 L2055.06 1203.42 L2054.47 1203.42 L2053.88 1203.42 L2053.3 1203.42 L2052.71 1203.42 L2052.12 1203.42 L2051.54 1203.42 L2050.95 1203.42 L2050.36 1203.42 L2049.78 1203.42 L2049.19 1203.42 L2048.6 1203.42 L2048.02 1203.42 L2047.43 1203.42 L2046.85 1203.42 L2046.26 1203.42 L2045.67 1203.42 L2045.09 1203.42 L2044.5 1203.42 L2043.91 1203.42 L2043.33 1203.42 L2042.74 1203.42 L2042.15 1203.42 L2041.57 1203.42 L2040.98 1203.42 L2040.4 1203.42 L2039.81 1203.42 L2039.22 1203.42 L2038.64 1203.42 L2038.05 1203.42 L2037.46 1203.42 L2036.88 1203.42 L2036.29 1203.42 L2035.7 1203.42 L2035.12 1203.42 L2034.53 1203.42 L2033.94 1203.42 L2033.36 1203.42 L2032.77 1203.42 L2032.19 1203.42 L2031.6 1203.42 L2031.01 1203.42 L2030.43 1203.42 L2029.84 1203.42 L2029.25 1203.42 L2028.67 1203.42 L2028.08 1203.42 L2027.49 1203.42 L2026.91 1203.42 L2026.32 1203.42 L2025.73 1203.42 L2025.15 1203.42 L2024.56 1203.42 L2023.98 1203.42 L2023.39 1203.42 L2022.8 1203.42 L2022.22 1203.42 L2021.63 1203.42 L2021.04 1203.42 L2020.46 1203.42 L2019.87 1203.42 L2019.28 1203.42 L2018.7 1203.42 L2018.11 1203.42 L2017.53 1203.42 L2016.94 1203.42 L2016.35 1203.42 L2015.77 1203.42 L2015.18 1203.42 L2014.59 1203.42 L2014.01 1203.42 L2013.42 1203.42 L2012.83 1203.42 L2012.25 1203.42 L2011.66 1203.42 L2011.07 1203.42 L2010.49 1203.42 L2009.9 1203.42 L2009.32 1203.42 L2008.73 1203.42 L2008.14 1203.42 L2007.56 1203.42 L2006.97 1203.42 L2006.38 1203.42 L2005.8 1203.42 L2005.21 1203.42 L2004.62 1203.42 L2004.04 1203.42 L2003.45 1203.42 L2002.86 1203.42 L2002.28 1203.42 L2001.69 1203.42 L2001.11 1203.42 L2000.52 1203.42 L1999.93 1203.42 L1999.35 1203.42 L1998.76 1203.42 L1998.17 1203.42 L1997.59 1203.42 L1997 1203.42 L1996.41 1203.42 L1995.83 1203.42 L1995.24 1203.42 L1994.65 1203.42 L1994.07 1203.42 L1993.48 1203.42 L1992.9 1203.42 L1992.31 1203.42 L1991.72 1203.42 L1991.14 1203.42 L1990.55 1203.42 L1989.96 1203.42 L1989.38 1203.42 L1988.79 1203.42 L1988.2 1203.42 L1987.62 1203.42 L1987.03 1203.42 L1986.45 1203.42 L1985.86 1203.42 L1985.27 1203.42 L1984.69 1203.42 L1984.1 1203.42 L1983.51 1203.42 L1982.93 1203.42 L1982.34 1203.42 L1981.75 1203.42 L1981.17 1203.42 L1980.58 1203.42 L1979.99 1203.42 L1979.41 1203.42 L1978.82 1203.42 L1978.24 1203.42 L1977.65 1203.42 L1977.06 1203.42 L1976.48 1203.42 L1975.89 1203.42 L1975.3 1203.42 L1974.72 1203.42 L1974.13 1203.42 L1973.54 1203.42 L1972.96 1203.42 L1972.37 1203.42 L1971.78 1203.42 L1971.2 1203.42 L1970.61 1203.42 L1970.03 1203.42 L1969.44 1203.42 L1968.85 1203.42 L1968.27 1203.42 L1967.68 1203.42 L1967.09 1203.42 L1966.51 1203.42 L1965.92 1203.42 L1965.33 1203.42 L1964.75 1203.42 L1964.16 1203.42 L1963.58 1203.42 L1962.99 1203.42 L1962.4 1203.42 L1961.82 1203.42 L1961.23 1203.42 L1960.64 1203.42 L1960.06 1203.42 L1959.47 1203.42 L1958.88 1203.42 L1958.3 1203.42 L1957.71 1203.42 L1957.12 1203.42 L1956.54 1203.42 L1955.95 1203.42 L1955.37 1203.42 L1954.78 1203.42 L1954.19 1203.42 L1953.61 1203.42 L1953.02 1203.42 L1952.43 1203.42 L1951.85 1203.42 L1951.26 1203.42 L1950.67 1203.42 L1950.09 1203.42 L1949.5 1203.42 L1948.91 1203.42 L1948.33 1203.42 L1947.74 1203.42 L1947.16 1203.42 L1946.57 1203.42 L1945.98 1203.42 L1945.4 1203.42 L1944.81 1203.42 L1944.22 1203.42 L1943.64 1203.42 L1943.05 1203.42 L1942.46 1203.42 L1941.88 1203.42 L1941.29 1203.42 L1940.71 1203.42 L1940.12 1203.42 L1939.53 1203.42 L1938.95 1203.42 L1938.36 1203.42 L1937.77 1203.42 L1937.19 1203.42 L1936.6 1203.42 L1936.01 1203.42 L1935.43 1203.42 L1934.84 1203.42 L1934.25 1203.42 L1933.67 1203.42 L1933.08 1203.42 L1932.5 1203.42 L1931.91 1203.42 L1931.32 1203.42 L1930.74 1203.42 L1930.15 1203.42 L1929.56 1203.42 L1928.98 1203.42 L1928.39 1203.42 L1927.8 1203.42 L1927.22 1203.42 L1926.63 1203.42 L1926.04 1203.42 L1925.46 1203.42 L1924.87 1203.42 L1924.29 1203.42 L1923.7 1203.42 L1923.11 1203.42 L1922.53 1203.42 L1921.94 1203.42 L1921.35 1203.42 L1920.77 1203.42 L1920.18 1203.42 L1919.59 1203.42 L1919.01 1203.42 L1918.42 1203.42 L1917.83 1203.42 L1917.25 1203.42 L1916.66 1203.42 L1916.08 1203.42 L1915.49 1203.42 L1914.9 1203.42 L1914.32 1203.42 L1913.73 1203.42 L1913.14 1203.42 L1912.56 1203.42 L1911.97 1203.42 L1911.38 1203.42 L1910.8 1203.42 L1910.21 1203.42 L1909.63 1203.42 L1909.04 1203.42 L1908.45 1203.42 L1907.87 1203.42 L1907.28 1203.42 L1906.69 1203.42 L1906.11 1203.42 L1905.52 1203.42 L1904.93 1203.42 L1904.35 1203.42 L1903.76 1203.42 L1903.17 1203.42 L1902.59 1203.42 L1902 1203.42 L1901.42 1203.42 L1900.83 1203.42 L1900.24 1203.42 L1899.66 1203.42 L1899.07 1203.42 L1898.48 1203.42 L1897.9 1203.42 L1897.31 1203.42 L1896.72 1203.42 L1896.14 1203.42 L1895.55 1203.42 L1894.96 1203.42 L1894.38 1203.42 L1893.79 1203.42 L1893.21 1203.42 L1892.62 1203.42 L1892.03 1203.42 L1891.45 1203.42 L1890.86 1203.42 L1890.27 1203.42 L1889.69 1203.42 L1889.1 1203.42 L1888.51 1203.42 L1887.93 1203.42 L1887.34 1203.42 L1886.76 1203.42 L1886.17 1203.42 L1885.58 1203.42 L1885 1203.42 L1884.41 1203.42 L1883.82 1203.42 L1883.24 1203.42 L1882.65 1203.42 L1882.06 1203.42 L1881.48 1203.42 L1880.89 1203.42 L1880.3 1203.42 L1879.72 1203.42 L1879.13 1203.42 L1878.55 1203.42 L1877.96 1203.42 L1877.37 1203.42 L1876.79 1203.42 L1876.2 1203.42 L1875.61 1203.42 L1875.03 1203.42 L1874.44 1203.42 L1873.85 1203.42 L1873.27 1203.42 L1872.68 1203.42 L1872.09 1203.42 L1871.51 1203.42 L1870.92 1203.42 L1870.34 1203.42 L1869.75 1203.42 L1869.16 1203.42 L1868.58 1203.42 L1867.99 1203.42 L1867.4 1203.42 L1866.82 1203.42 L1866.23 1203.42 L1865.64 1203.42 L1865.06 1203.42 L1864.47 1203.42 L1863.88 1203.42 L1863.3 1203.42 L1862.71 1203.42 L1862.13 1203.42 L1861.54 1203.42 L1860.95 1203.42 L1860.37 1203.42 L1859.78 1203.42 L1859.19 1203.42 L1858.61 1203.42 L1858.02 1203.42 L1857.43 1203.42 L1856.85 1203.42 L1856.26 1203.42 L1855.68 1203.42 L1855.09 1203.42 L1854.5 1203.42 L1853.92 1203.42 L1853.33 1203.42 L1852.74 1203.42 L1852.16 1203.42 L1851.57 1203.42 L1850.98 1203.42 L1850.4 1203.42 L1849.81 1203.42 L1849.22 1203.42 L1848.64 1203.42 L1848.05 1203.42 L1847.47 1203.42 L1846.88 1203.42 L1846.29 1203.42 L1845.71 1203.42 L1845.12 1203.42 L1844.53 1203.42 L1843.95 1203.42 L1843.36 1203.42 L1842.77 1203.42 L1842.19 1203.42 L1841.6 1203.42 L1841.01 1203.42 L1840.43 1203.42 L1839.84 1203.42 L1839.26 1203.42 L1838.67 1203.42 L1838.08 1203.42 L1837.5 1203.42 L1836.91 1203.42 L1836.32 1203.42 L1835.74 1203.42 L1835.15 1203.42 L1834.56 1203.42 L1833.98 1203.42 L1833.39 1203.42 L1832.81 1203.42 L1832.22 1203.42 L1831.63 1203.42 L1831.05 1203.42 L1830.46 1203.42 L1829.87 1203.42 L1829.29 1203.42 L1828.7 1203.42 L1828.11 1203.42 L1827.53 1203.42 L1826.94 1203.42 L1826.35 1203.42 L1825.77 1203.42 L1825.18 1203.42 L1824.6 1203.42 L1824.01 1203.42 L1823.42 1203.42 L1822.84 1203.42 L1822.25 1203.42 L1821.66 1203.42 L1821.08 1203.42 L1820.49 1203.42 L1819.9 1203.42 L1819.32 1203.42 L1818.73 1203.42 L1818.14 1203.42 L1817.56 1203.42 L1816.97 1203.42 L1816.39 1203.42 L1815.8 1203.42 L1815.21 1203.42 L1814.63 1203.42 L1814.04 1203.42 L1813.45 1203.42 L1812.87 1203.42 L1812.28 1203.42 L1811.69 1203.42 L1811.11 1203.42 L1810.52 1203.42 L1809.94 1203.42 L1809.35 1203.42 L1808.76 1203.42 L1808.18 1203.42 L1807.59 1203.42 L1807 1203.42 L1806.42 1203.42 L1805.83 1203.42 L1805.24 1203.42 L1804.66 1203.42 L1804.07 1203.42 L1803.48 1203.42 L1802.9 1203.42 L1802.31 1203.42 L1801.73 1203.42 L1801.14 1203.42 L1800.55 1203.42 L1799.97 1203.42 L1799.38 1203.42 L1798.79 1203.42 L1798.21 1203.42 L1797.62 1203.42 L1797.03 1203.42 L1796.45 1203.42 L1795.86 1203.42 L1795.27 1203.42 L1794.69 1203.42 L1794.1 1203.42 L1793.52 1203.42 L1792.93 1203.42 L1792.34 1203.42 L1791.76 1203.42 L1791.17 1203.42 L1790.58 1203.42 L1790 1203.42 L1789.41 1203.42 L1788.82 1203.42 L1788.24 1203.42 L1787.65 1203.42 L1787.06 1203.42 L1786.48 1203.42 L1785.89 1203.42 L1785.31 1203.42 L1784.72 1203.42 L1784.13 1203.42 L1783.55 1203.42 L1782.96 1203.42 L1782.37 1203.42 L1781.79 1203.42 L1781.2 1203.42 L1780.61 1203.42 L1780.03 1203.42 L1779.44 1203.42 L1778.86 1203.42 L1778.27 1203.42 L1777.68 1203.42 L1777.1 1203.42 L1776.51 1203.42 L1775.92 1203.42 L1775.34 1203.42 L1774.75 1203.42 L1774.16 1203.42 L1773.58 1203.42 L1772.99 1203.42 L1772.4 1203.42 L1771.82 1203.42 L1771.23 1203.42 L1770.65 1203.42 L1770.06 1203.42 L1769.47 1203.42 L1768.89 1203.42 L1768.3 1203.42 L1767.71 1203.42 L1767.13 1203.42 L1766.54 1203.42 L1765.95 1203.42 L1765.37 1203.42 L1764.78 1203.42 L1764.19 1203.42 L1763.61 1203.42 L1763.02 1203.42 L1762.44 1203.42 L1761.85 1203.42 L1761.26 1203.42 L1760.68 1203.42 L1760.09 1203.42 L1759.5 1203.42 L1758.92 1203.42 L1758.33 1203.42 L1757.74 1203.42 L1757.16 1203.42 L1756.57 1203.42 L1755.99 1203.42 L1755.4 1203.42 L1754.81 1203.42 L1754.23 1203.42 L1753.64 1203.42 L1753.05 1203.42 L1752.47 1203.42 L1751.88 1203.42 L1751.29 1203.42 L1750.71 1203.42 L1750.12 1203.42 L1749.53 1203.42 L1748.95 1203.42 L1748.36 1203.42 L1747.78 1203.42 L1747.19 1203.42 L1746.6 1203.42 L1746.02 1203.42 L1745.43 1203.42 L1744.84 1203.42 L1744.26 1203.42 L1743.67 1203.42 L1743.08 1203.42 L1742.5 1203.42 L1741.91 1203.42 L1741.32 1203.42 L1740.74 1203.42 L1740.15 1203.42 L1739.57 1203.42 L1738.98 1203.42 L1738.39 1203.42 L1737.81 1203.42 L1737.22 1203.42 L1736.63 1203.42 L1736.05 1203.42 L1735.46 1203.42 L1734.87 1203.42 L1734.29 1203.42 L1733.7 1203.42 L1733.11 1203.42 L1732.53 1203.42 L1731.94 1203.42 L1731.36 1203.42 L1730.77 1203.42 L1730.18 1203.42 L1729.6 1203.42 L1729.01 1203.42 L1728.42 1203.42 L1727.84 1203.42 L1727.25 1203.42 L1726.66 1203.42 L1726.08 1203.42 L1725.49 1203.42 L1724.91 1203.42 L1724.32 1203.42 L1723.73 1203.42 L1723.15 1203.42 L1722.56 1203.42 L1721.97 1203.42 L1721.39 1203.42 L1720.8 1203.42 L1720.21 1203.42 L1719.63 1203.42 L1719.04 1203.42 L1718.45 1203.42 L1717.87 1203.42 L1717.28 1203.42 L1716.7 1203.42 L1716.11 1203.42 L1715.52 1203.42 L1714.94 1203.42 L1714.35 1203.42 L1713.76 1203.42 L1713.18 1203.42 L1712.59 1203.42 L1712 1203.42 L1711.42 1203.42 L1710.83 1203.42 L1710.24 1203.42 L1709.66 1203.42 L1709.07 1203.42 L1708.49 1203.42 L1707.9 1203.42 L1707.31 1203.42 L1706.73 1203.42 L1706.14 1203.42 L1705.55 1203.42 L1704.97 1203.42 L1704.38 1203.42 L1703.79 1203.42 L1703.21 1203.42 L1702.62 1203.42 L1702.04 1203.42 L1701.45 1203.42 L1700.86 1203.42 L1700.28 1203.42 L1699.69 1203.42 L1699.1 1203.42 L1698.52 1203.42 L1697.93 1203.42 L1697.34 1203.42 L1696.76 1203.42 L1696.17 1203.42 L1695.58 1203.42 L1695 1203.42 L1694.41 1203.42 L1693.83 1203.42 L1693.24 1203.42 L1692.65 1203.42 L1692.07 1203.42 L1691.48 1203.42 L1690.89 1203.42 L1690.31 1203.42 L1689.72 1203.42 L1689.13 1203.42 L1688.55 1203.42 L1687.96 1203.42 L1687.37 1203.42 L1686.79 1203.42 L1686.2 1203.42 L1685.62 1203.42 L1685.03 1203.42 L1684.44 1203.42 L1683.86 1203.42 L1683.27 1203.42 L1682.68 1203.42 L1682.1 1203.42 L1681.51 1203.42 L1680.92 1203.42 L1680.34 1203.42 L1679.75 1203.42 L1679.17 1203.42 L1678.58 1203.42 L1677.99 1203.42 L1677.41 1203.42 L1676.82 1203.42 L1676.23 1203.42 L1675.65 1203.42 L1675.06 1203.42 L1674.47 1203.42 L1673.89 1203.42 L1673.3 1203.42 L1672.71 1203.42 L1672.13 1203.42 L1671.54 1203.42 L1670.96 1203.42 L1670.37 1203.42 L1669.78 1203.42 L1669.2 1203.42 L1668.61 1203.42 L1668.02 1203.42 L1667.44 1203.42 L1666.85 1203.42 L1666.26 1203.42 L1665.68 1203.42 L1665.09 1203.42 L1664.5 1203.42 L1663.92 1203.42 L1663.33 1203.42 L1662.75 1203.42 L1662.16 1203.42 L1661.57 1203.42 L1660.99 1203.42 L1660.4 1203.42 L1659.81 1203.42 L1659.23 1203.42 L1658.64 1203.42 L1658.05 1203.42 L1657.47 1203.42 L1656.88 1203.42 L1656.29 1203.42 L1655.71 1203.42 L1655.12 1203.42 L1654.54 1203.42 L1653.95 1203.42 L1653.36 1203.42 L1652.78 1203.42 L1652.19 1203.42 L1651.6 1203.42 L1651.02 1203.42 L1650.43 1203.42 L1649.84 1203.42 L1649.26 1203.42 L1648.67 1203.42 L1648.09 1203.42 L1647.5 1203.42 L1646.91 1203.42 L1646.33 1203.42 L1645.74 1203.42 L1645.15 1203.42 L1644.57 1203.42 L1643.98 1203.42 L1643.39 1203.42 L1642.81 1203.42 L1642.22 1203.42 L1641.63 1203.42 L1641.05 1203.42 L1640.46 1203.42 L1639.88 1203.42 L1639.29 1203.42 L1638.7 1203.42 L1638.12 1203.42 L1637.53 1203.42 L1636.94 1203.42 L1636.36 1203.42 L1635.77 1203.42 L1635.18 1203.42 L1634.6 1203.42 L1634.01 1203.42 L1633.42 1203.42 L1632.84 1203.42 L1632.25 1203.42 L1631.67 1203.42 L1631.08 1203.42 L1630.49 1203.42 L1629.91 1203.42 L1629.32 1203.42 L1628.73 1203.42 L1628.15 1203.42 L1627.56 1203.42 L1626.97 1203.42 L1626.39 1203.42 L1625.8 1203.42 L1625.22 1203.42 L1624.63 1203.42 L1624.04 1203.42 L1623.46 1203.42 L1622.87 1203.42 L1622.28 1203.42 L1621.7 1203.42 L1621.11 1203.42 L1620.52 1203.42 L1619.94 1203.42 L1619.35 1203.42 L1618.76 1203.42 L1618.18 1203.42 L1617.59 1203.42 L1617.01 1203.42 L1616.42 1203.42 L1615.83 1203.42 L1615.25 1203.42 L1614.66 1203.42 L1614.07 1203.42 L1613.49 1203.42 L1612.9 1203.42 L1612.31 1203.42 L1611.73 1203.42 L1611.14 1203.42 L1610.55 1203.42 L1609.97 1203.42 L1609.38 1203.42 L1608.8 1203.42 L1608.21 1203.42 L1607.62 1203.42 L1607.04 1203.42 L1606.45 1203.42 L1605.86 1203.42 L1605.28 1203.42 L1604.69 1203.42 L1604.1 1203.42 L1603.52 1203.42 L1602.93 1203.42 L1602.34 1203.42 L1601.76 1203.42 L1601.17 1203.42 L1600.59 1203.42 L1600 1203.42 L1599.41 1203.42 L1598.83 1203.42 L1598.24 1203.42 L1597.65 1203.42 L1597.07 1203.42 L1596.48 1203.42 L1595.89 1203.42 L1595.31 1203.42 L1594.72 1203.42 L1594.14 1203.42 L1593.55 1203.42 L1592.96 1203.42 L1592.38 1203.42 L1591.79 1203.42 L1591.2 1203.42 L1590.62 1203.42 L1590.03 1203.42 L1589.44 1203.42 L1588.86 1203.42 L1588.27 1203.42 L1587.68 1203.42 L1587.1 1203.42 L1586.51 1203.42 L1585.93 1203.42 L1585.34 1203.42 L1584.75 1203.42 L1584.17 1203.42 L1583.58 1203.42 L1582.99 1203.42 L1582.41 1203.42 L1581.82 1203.42 L1581.23 1203.42 L1580.65 1203.42 L1580.06 1203.42 L1579.47 1203.42 L1578.89 1203.42 L1578.3 1203.42 L1577.72 1203.42 L1577.13 1203.42 L1576.54 1203.42 L1575.96 1203.42 L1575.37 1203.42 L1574.78 1203.42 L1574.2 1203.42 L1573.61 1203.42 L1573.02 1203.42 L1572.44 1203.42 L1571.85 1203.42 L1571.27 1203.42 L1570.68 1203.42 L1570.09 1203.42 L1569.51 1203.42 L1568.92 1203.42 L1568.33 1203.42 L1567.75 1203.42 L1567.16 1203.42 L1566.57 1203.42 L1565.99 1203.42 L1565.4 1203.42 L1564.81 1203.42 L1564.23 1203.42 L1563.64 1203.42 L1563.06 1203.42 L1562.47 1203.42 L1561.88 1203.42 L1561.3 1203.42 L1560.71 1203.42 L1560.12 1203.42 L1559.54 1203.42 L1558.95 1203.42 L1558.36 1203.42 L1557.78 1203.42 L1557.19 1203.42 L1556.6 1203.42 L1556.02 1203.42 L1555.43 1203.42 L1554.85 1203.42 L1554.26 1203.42 L1553.67 1203.42 L1553.09 1203.42 L1552.5 1203.42 L1551.91 1203.42 L1551.33 1203.42 L1550.74 1203.42 L1550.15 1203.42 L1549.57 1203.42 L1548.98 1203.42 L1548.4 1203.42 L1547.81 1203.42 L1547.22 1203.42 L1546.64 1203.42 L1546.05 1203.42 L1545.46 1203.42 L1544.88 1203.42 L1544.29 1203.42 L1543.7 1203.42 L1543.12 1203.42 L1542.53 1203.42 L1541.94 1203.42 L1541.36 1203.42 L1540.77 1203.42 L1540.19 1203.42 L1539.6 1203.42 L1539.01 1203.42 L1538.43 1203.42 L1537.84 1203.42 L1537.25 1203.42 L1536.67 1203.42 L1536.08 1203.42 L1535.49 1203.42 L1534.91 1203.42 L1534.32 1203.42 L1533.73 1203.42 L1533.15 1203.42 L1532.56 1203.42 L1531.98 1203.42 L1531.39 1203.42 L1530.8 1203.42 L1530.22 1203.42 L1529.63 1203.42 L1529.04 1203.42 L1528.46 1203.42 L1527.87 1203.42 L1527.28 1203.42 L1526.7 1203.42 L1526.11 1203.42 L1525.52 1203.42 L1524.94 1203.42 L1524.35 1203.42 L1523.77 1203.42 L1523.18 1203.42 L1522.59 1203.42 L1522.01 1203.42 L1521.42 1203.42 L1520.83 1203.42 L1520.25 1203.42 L1519.66 1203.42 L1519.07 1203.42 L1518.49 1203.42 L1517.9 1203.42 L1517.32 1203.42 L1516.73 1203.42 L1516.14 1203.42 L1515.56 1203.42 L1514.97 1203.42 L1514.38 1203.42 L1513.8 1203.42 L1513.21 1203.42 L1512.62 1203.42 L1512.04 1203.42 L1511.45 1203.42 L1510.86 1203.42 L1510.28 1203.42 L1509.69 1203.42 L1509.11 1203.42 L1508.52 1203.42 L1507.93 1203.42 L1507.35 1203.42 L1506.76 1203.42 L1506.17 1203.42 L1505.59 1203.42 L1505 1203.42 L1504.41 1203.42 L1503.83 1203.42 L1503.24 1203.42 L1502.65 1203.42 L1502.07 1203.42 L1501.48 1203.42 L1500.9 1203.42 L1500.31 1203.42 L1499.72 1203.42 L1499.14 1203.42 L1498.55 1203.42 L1497.96 1203.42 L1497.38 1203.42 L1496.79 1203.42 L1496.2 1203.42 L1495.62 1203.42 L1495.03 1203.42 L1494.45 1203.42 L1493.86 1203.42 L1493.27 1203.42 L1492.69 1203.42 L1492.1 1203.42 L1491.51 1203.42 L1490.93 1203.42 L1490.34 1203.42 L1489.75 1203.42 L1489.17 1203.42 L1488.58 1203.42 L1487.99 1203.42 L1487.41 1203.42 L1486.82 1203.42 L1486.24 1203.42 L1485.65 1203.42 L1485.06 1203.42 L1484.48 1203.42 L1483.89 1203.42 L1483.3 1203.42 L1482.72 1203.42 L1482.13 1203.42 L1481.54 1203.42 L1480.96 1203.42 L1480.37 1203.42 L1479.78 1203.42 L1479.2 1203.42 L1478.61 1203.42 L1478.03 1203.42 L1477.44 1203.42 L1476.85 1203.42 L1476.27 1203.42 L1475.68 1203.42 L1475.09 1203.42 L1474.51 1203.42 L1473.92 1203.42 L1473.33 1203.42 L1472.75 1203.42 L1472.16 1203.42 L1471.57 1203.42 L1470.99 1203.42 L1470.4 1203.42 L1469.82 1203.42 L1469.23 1203.42 L1468.64 1203.42 L1468.06 1203.42 L1467.47 1203.42 L1466.88 1203.42 L1466.3 1203.42 L1465.71 1203.42 L1465.12 1203.42 L1464.54 1203.42 L1463.95 1203.42 L1463.37 1203.42 L1462.78 1203.42 L1462.19 1203.42 L1461.61 1203.42 L1461.02 1203.42 L1460.43 1203.42 L1459.85 1203.42 L1459.26 1203.42 L1458.67 1203.42 L1458.09 1203.42 L1457.5 1203.42 L1456.91 1203.42 L1456.33 1203.42 L1455.74 1203.42 L1455.16 1203.42 L1454.57 1203.42 L1453.98 1203.42 L1453.4 1203.42 L1452.81 1203.42 L1452.22 1203.42 L1451.64 1203.42 L1451.05 1203.42 L1450.46 1203.42 L1449.88 1203.42 L1449.29 1203.42 L1448.7 1203.42 L1448.12 1203.42 L1447.53 1203.42 L1446.95 1203.42 L1446.36 1203.42 L1445.77 1203.42 L1445.19 1203.42 L1444.6 1203.42 L1444.01 1203.42 L1443.43 1203.42 L1442.84 1203.42 L1442.25 1203.42 L1441.67 1203.42 L1441.08 1203.42 L1440.5 1203.42 L1439.91 1203.42 L1439.32 1203.42 L1438.74 1203.42 L1438.15 1203.42 L1437.56 1203.42 L1436.98 1203.42 L1436.39 1203.42 L1435.8 1203.42 L1435.22 1203.42 L1434.63 1203.42 L1434.04 1203.42 L1433.46 1203.42 L1432.87 1203.42 L1432.29 1203.42 L1431.7 1203.42 L1431.11 1203.42 L1430.53 1203.42 L1429.94 1203.42 L1429.35 1203.42 L1428.77 1203.42 L1428.18 1203.42 L1427.59 1203.42 L1427.01 1203.42 L1426.42 1203.42 L1425.83 1203.42 L1425.25 1203.42 L1424.66 1203.42 L1424.08 1203.42 L1423.49 1203.42 L1422.9 1203.42 L1422.32 1203.42 L1421.73 1203.42 L1421.14 1203.42 L1420.56 1203.42 L1419.97 1203.42 L1419.38 1203.42 L1418.8 1203.42 L1418.21 1203.42 L1417.63 1203.42 L1417.04 1203.42 L1416.45 1203.42 L1415.87 1203.42 L1415.28 1203.42 L1414.69 1203.42 L1414.11 1203.42 L1413.52 1203.42 L1412.93 1203.42 L1412.35 1203.42 L1411.76 1203.42 L1411.17 1203.42 L1410.59 1203.42 L1410 1203.42 L1409.42 1203.42 L1408.83 1203.42 L1408.24 1203.42 L1407.66 1203.42 L1407.07 1203.42 L1406.48 1203.42 L1405.9 1203.42 L1405.31 1203.42 L1404.72 1203.42 L1404.14 1203.42 L1403.55 1203.42 L1402.96 1203.42 L1402.38 1203.42 L1401.79 1203.42 L1401.21 1203.42 L1400.62 1203.42 L1400.03 1203.42 L1399.45 1203.42 L1398.86 1203.42 L1398.27 1203.42 L1397.69 1203.42 L1397.1 1203.42 L1396.51 1203.42 L1395.93 1203.42 L1395.34 1203.42 L1394.75 1203.42 L1394.17 1203.42 L1393.58 1203.42 L1393 1203.42 L1392.41 1203.42 L1391.82 1203.42 L1391.24 1203.42 L1390.65 1203.42 L1390.06 1203.42 L1389.48 1203.42 L1388.89 1203.42 L1388.3 1203.42 L1387.72 1203.42 L1387.13 1203.42 L1386.55 1203.42 L1385.96 1203.42 L1385.37 1203.42 L1384.79 1203.42 L1384.2 1203.42 L1383.61 1203.42 L1383.03 1203.42 L1382.44 1203.42 L1381.85 1203.42 L1381.27 1203.42 L1380.68 1203.42 L1380.09 1203.42 L1379.51 1203.42 L1378.92 1203.42 L1378.34 1203.42 L1377.75 1203.42 L1377.16 1203.42 L1376.58 1203.42 L1375.99 1203.42 L1375.4 1203.42 L1374.82 1203.42 L1374.23 1203.42 L1373.64 1203.42 L1373.06 1203.42 L1372.47 1203.42 L1371.88 1203.42 L1371.3 1203.42 L1370.71 1203.42 L1370.13 1203.42 L1369.54 1203.42 L1368.95 1203.42 L1368.37 1203.42 L1367.78 1203.42 L1367.19 1203.42 L1366.61 1203.42 L1366.02 1203.42 L1365.43 1203.42 L1364.85 1203.42 L1364.26 1203.42 L1363.68 1203.42 L1363.09 1203.42 L1362.5 1203.42 L1361.92 1203.42 L1361.33 1203.42 L1360.74 1203.42 L1360.16 1203.42 L1359.57 1203.42 L1358.98 1203.42 L1358.4 1203.42 L1357.81 1203.42 L1357.22 1203.42 L1356.64 1203.42 L1356.05 1203.42 L1355.47 1203.42 L1354.88 1203.42 L1354.29 1203.42 L1353.71 1203.42 L1353.12 1203.42 L1352.53 1203.42 L1351.95 1203.42 L1351.36 1203.42 L1350.77 1203.42 L1350.19 1203.42 L1349.6 1203.42 L1349.01 1203.42 L1348.43 1203.42 L1347.84 1203.42 L1347.26 1203.42 L1346.67 1203.42 L1346.08 1203.42 L1345.5 1203.42 L1344.91 1203.42 L1344.32 1203.42 L1343.74 1203.42 L1343.15 1203.42 L1342.56 1203.42 L1341.98 1203.42 L1341.39 1203.42 L1340.8 1203.42 L1340.22 1203.42 L1339.63 1203.42 L1339.05 1203.42 L1338.46 1203.42 L1337.87 1203.42 L1337.29 1203.42 L1336.7 1203.42 L1336.11 1203.42 L1335.53 1203.42 L1334.94 1203.42 L1334.35 1203.42 L1333.77 1203.42 L1333.18 1203.42 L1332.6 1203.42 L1332.01 1203.42 L1331.42 1203.42 L1330.84 1203.42 L1330.25 1203.42 L1329.66 1203.42 L1329.08 1203.42 L1328.49 1203.42 L1327.9 1203.42 L1327.32 1203.42 L1326.73 1203.42 L1326.14 1203.42 L1325.56 1203.42 L1324.97 1203.42 L1324.39 1203.42 L1323.8 1203.42 L1323.21 1203.42 L1322.63 1203.42 L1322.04 1203.42 L1321.45 1203.42 L1320.87 1203.42 L1320.28 1203.42 L1319.69 1203.42 L1319.11 1203.42 L1318.52 1203.42 L1317.93 1203.42 L1317.35 1203.42 L1316.76 1203.42 L1316.18 1203.42 L1315.59 1203.42 L1315 1203.42 L1314.42 1203.42 L1313.83 1203.42 L1313.24 1203.42 L1312.66 1203.42 L1312.07 1203.42 L1311.48 1203.42 L1310.9 1203.42 L1310.31 1203.42 L1309.73 1203.42 L1309.14 1203.42 L1308.55 1203.42 L1307.97 1203.42 L1307.38 1203.42 L1306.79 1203.42 L1306.21 1203.42 L1305.62 1203.42 L1305.03 1203.42 L1304.45 1203.42 L1303.86 1203.42 L1303.27 1203.42 L1302.69 1203.42 L1302.1 1203.42 L1301.52 1203.42 L1300.93 1203.42 L1300.34 1203.42 L1299.76 1203.42 L1299.17 1203.42 L1298.58 1203.42 L1298 1203.42 L1297.41 1203.42 L1296.82 1203.42 L1296.24 1203.42 L1295.65 1203.42 L1295.06 1203.42 L1294.48 1203.42 L1293.89 1203.42 L1293.31 1203.42 L1292.72 1203.42 L1292.13 1203.42 L1291.55 1203.42 L1290.96 1203.42 L1290.37 1203.42 L1289.79 1203.42 L1289.2 1203.42 L1288.61 1203.42 L1288.03 1203.42 L1287.44 1203.42 L1286.86 1203.42 L1286.27 1203.42 L1285.68 1203.42 L1285.1 1203.42 L1284.51 1203.42 L1283.92 1203.42 L1283.34 1203.42 L1282.75 1203.42 L1282.16 1203.42 L1281.58 1203.42 L1280.99 1203.42 L1280.4 1203.42 L1279.82 1203.42 L1279.23 1203.42 L1278.65 1203.42 L1278.06 1203.42 L1277.47 1203.42 L1276.89 1203.42 L1276.3 1203.42 L1275.71 1203.42 L1275.13 1203.42 L1274.54 1203.42 L1273.95 1203.42 L1273.37 1203.42 L1272.78 1203.42 L1272.19 1203.42 L1271.61 1203.42 L1271.02 1203.42 L1270.44 1203.42 L1269.85 1203.42 L1269.26 1203.42 L1268.68 1203.42 L1268.09 1203.42 L1267.5 1203.42 L1266.92 1203.42 L1266.33 1203.42 L1265.74 1203.42 L1265.16 1203.42 L1264.57 1203.42 L1263.98 1203.42 L1263.4 1203.42 L1262.81 1203.42 L1262.23 1203.42 L1261.64 1203.42 L1261.05 1203.42 L1260.47 1203.42 L1259.88 1203.42 L1259.29 1203.42 L1258.71 1203.42 L1258.12 1203.42 L1257.53 1203.42 L1256.95 1203.42 L1256.36 1203.42 L1255.78 1203.42 L1255.19 1203.42 L1254.6 1203.42 L1254.02 1203.42 L1253.43 1203.42 L1252.84 1203.42 L1252.26 1203.42 L1251.67 1203.42 L1251.08 1203.42 L1250.5 1203.42 L1249.91 1203.42 L1249.32 1203.42 L1248.74 1203.42 L1248.15 1203.42 L1247.57 1203.42 L1246.98 1203.42 L1246.39 1203.42 L1245.81 1203.42 L1245.22 1203.42 L1244.63 1203.42 L1244.05 1203.42 L1243.46 1203.42 L1242.87 1203.42 L1242.29 1203.42 L1241.7 1203.42 L1241.11 1203.42 L1240.53 1203.42 L1239.94 1203.42 L1239.36 1203.42 L1238.77 1203.42 L1238.18 1203.42 L1237.6 1203.42 L1237.01 1203.42 L1236.42 1203.42 L1235.84 1203.42 L1235.25 1203.42 L1234.66 1203.42 L1234.08 1203.42 L1233.49 1203.42 L1232.91 1203.42 L1232.32 1203.42 L1231.73 1203.42 L1231.15 1203.42 L1230.56 1203.42 L1229.97 1203.42 L1229.39 1203.42 L1228.8 1203.42 L1228.21 1203.42 L1227.63 1203.42 L1227.04 1203.42 L1226.45 1203.42 L1225.87 1203.42 L1225.28 1203.42 L1224.7 1203.42 L1224.11 1203.42 L1223.52 1203.42 L1222.94 1203.42 L1222.35 1203.42 L1221.76 1203.42 L1221.18 1203.42 L1220.59 1203.42 L1220 1203.42 L1219.42 1203.42 L1218.83 1203.42 L1218.24 1203.42 L1217.66 1203.42 L1217.07 1203.42 L1216.49 1203.42 L1215.9 1203.42 L1215.31 1203.42 L1214.73 1203.42 L1214.14 1203.42 L1213.55 1203.42 L1212.97 1203.42 L1212.38 1203.42 L1211.79 1203.42 L1211.21 1203.42 L1210.62 1203.42 L1210.03 1203.42 L1209.45 1203.42 L1208.86 1203.42 L1208.28 1203.42 L1207.69 1203.42 L1207.1 1203.42 L1206.52 1203.42 L1205.93 1203.42 L1205.34 1203.42 L1204.76 1203.42 L1204.17 1203.42 L1203.58 1203.42 L1203 1203.42 L1202.41 1203.42 L1201.83 1203.42 L1201.24 1203.42 L1200.65 1203.42 L1200.07 1203.42 L1199.48 1203.42 L1198.89 1203.42 L1198.31 1203.42 L1197.72 1203.42 L1197.13 1203.42 L1196.55 1203.42 L1195.96 1203.42 L1195.37 1203.42 L1194.79 1203.42 L1194.2 1203.42 L1193.62 1203.42 L1193.03 1203.42 L1192.44 1203.42 L1191.86 1203.42 L1191.27 1203.42 L1190.68 1203.42 L1190.1 1203.42 L1189.51 1203.42 L1188.92 1203.42 L1188.34 1203.42 L1187.75 1203.42 L1187.16 1203.42 L1186.58 1203.42 L1185.99 1203.42 L1185.41 1203.42 L1184.82 1203.42 L1184.23 1203.42 L1183.65 1203.42 L1183.06 1203.42 L1182.47 1203.42 L1181.89 1203.42 L1181.3 1203.42 L1180.71 1203.42 L1180.13 1203.42 L1179.54 1203.42 L1178.96 1203.42 L1178.37 1203.42 L1177.78 1203.42 L1177.2 1203.42 L1176.61 1203.42 L1176.02 1203.42 L1175.44 1203.42 L1174.85 1203.42 L1174.26 1203.42 L1173.68 1203.42 L1173.09 1203.42 L1172.5 1203.42 L1171.92 1203.42 L1171.33 1203.42 L1170.75 1203.42 L1170.16 1203.42 L1169.57 1203.42 L1168.99 1203.42 L1168.4 1203.42 L1167.81 1203.42 L1167.23 1203.42 L1166.64 1203.42 L1166.05 1203.42 L1165.47 1203.42 L1164.88 1203.42 L1164.29 1203.42 L1163.71 1203.42 L1163.12 1203.42 L1162.54 1203.42 L1161.95 1203.42 L1161.36 1203.42 L1160.78 1203.42 L1160.19 1203.42 L1159.6 1203.42 L1159.02 1203.42 L1158.43 1203.42 L1157.84 1203.42 L1157.26 1203.42 L1156.67 1203.42 L1156.09 1203.42 L1155.5 1203.42 L1154.91 1203.42 L1154.33 1203.42 L1153.74 1203.42 L1153.15 1203.42 L1152.57 1203.42 L1151.98 1203.42 L1151.39 1203.42 L1150.81 1203.42 L1150.22 1203.42 L1149.63 1203.42 L1149.05 1203.42 L1148.46 1203.42 L1147.88 1203.42 L1147.29 1203.42 L1146.7 1203.42 L1146.12 1203.42 L1145.53 1203.42 L1144.94 1203.42 L1144.36 1203.42 L1143.77 1203.42 L1143.18 1203.42 L1142.6 1203.42 L1142.01 1203.42 L1141.42 1203.42 L1140.84 1203.42 L1140.25 1203.42 L1139.67 1203.42 L1139.08 1203.42 L1138.49 1203.42 L1137.91 1203.42 L1137.32 1203.42 L1136.73 1203.42 L1136.15 1203.42 L1135.56 1203.42 L1134.97 1203.42 L1134.39 1203.42 L1133.8 1203.42 L1133.21 1203.42 L1132.63 1203.42 L1132.04 1203.42 L1131.46 1203.42 L1130.87 1203.42 L1130.28 1203.42 L1129.7 1203.42 L1129.11 1203.42 L1128.52 1203.42 L1127.94 1203.42 L1127.35 1203.42 L1126.76 1203.42 L1126.18 1203.42 L1125.59 1203.42 L1125.01 1203.42 L1124.42 1203.42 L1123.83 1203.42 L1123.25 1203.42 L1122.66 1203.42 L1122.07 1203.42 L1121.49 1203.42 L1120.9 1203.42 L1120.31 1203.42 L1119.73 1203.42 L1119.14 1203.42 L1118.55 1203.42 L1117.97 1203.42 L1117.38 1203.42 L1116.8 1203.42 L1116.21 1203.42 L1115.62 1203.42 L1115.04 1203.42 L1114.45 1203.42 L1113.86 1203.42 L1113.28 1203.42 L1112.69 1203.42 L1112.1 1203.42 L1111.52 1203.42 L1110.93 1203.42 L1110.34 1203.42 L1109.76 1203.42 L1109.17 1203.42 L1108.59 1203.42 L1108 1203.42 L1107.41 1203.42 L1106.83 1203.42 L1106.24 1203.42 L1105.65 1203.42 L1105.07 1203.42 L1104.48 1203.42 L1103.89 1203.42 L1103.31 1203.42 L1102.72 1203.42 L1102.14 1203.42 L1101.55 1203.42 L1100.96 1203.42 L1100.38 1203.42 L1099.79 1203.42 L1099.2 1203.42 L1098.62 1203.42 L1098.03 1203.42 L1097.44 1203.42 L1096.86 1203.42 L1096.27 1203.42 L1095.68 1203.42 L1095.1 1203.42 L1094.51 1203.42 L1093.93 1203.42 L1093.34 1203.42 L1092.75 1203.42 L1092.17 1203.42 L1091.58 1203.42 L1090.99 1203.42 L1090.41 1203.42 L1089.82 1203.42 L1089.23 1203.42 L1088.65 1203.42 L1088.06 1203.42 L1087.47 1203.42 L1086.89 1203.42 L1086.3 1203.42 L1085.72 1203.42 L1085.13 1203.42 L1084.54 1203.42 L1083.96 1203.42 L1083.37 1203.42 L1082.78 1203.42 L1082.2 1203.42 L1081.61 1203.42 L1081.02 1203.42 L1080.44 1203.42 L1079.85 1203.42 L1079.26 1203.42 L1078.68 1203.42 L1078.09 1203.42 L1077.51 1203.42 L1076.92 1203.42 L1076.33 1203.42 L1075.75 1203.42 L1075.16 1203.42 L1074.57 1203.42 L1073.99 1203.42 L1073.4 1203.42 L1072.81 1203.42 L1072.23 1203.42 L1071.64 1203.42 L1071.06 1203.42 L1070.47 1203.42 L1069.88 1203.42 L1069.3 1203.42 L1068.71 1203.42 L1068.12 1203.42 L1067.54 1203.42 L1066.95 1203.42 L1066.36 1203.42 L1065.78 1203.42 L1065.19 1203.42 L1064.6 1203.42 L1064.02 1203.42 L1063.43 1203.42 L1062.85 1203.42 L1062.26 1203.42 L1061.67 1203.42 L1061.09 1203.42 L1060.5 1203.42 L1059.91 1203.42 L1059.33 1203.42 L1058.74 1203.42 L1058.15 1203.42 L1057.57 1203.42 L1056.98 1203.42 L1056.39 1203.42 L1055.81 1203.42 L1055.22 1203.42 L1054.64 1203.42 L1054.05 1203.42 L1053.46 1203.42 L1052.88 1203.42 L1052.29 1203.42 L1051.7 1203.42 L1051.12 1203.42 L1050.53 1203.42 L1049.94 1203.42 L1049.36 1203.42 L1048.77 1203.42 L1048.19 1203.42 L1047.6 1203.42 L1047.01 1203.42 L1046.43 1203.42 L1045.84 1203.42 L1045.25 1203.42 L1044.67 1203.42 L1044.08 1203.42 L1043.49 1203.42 L1042.91 1203.42 L1042.32 1203.42 L1041.73 1203.42 L1041.15 1203.42 L1040.56 1203.42 L1039.98 1203.42 L1039.39 1203.42 L1038.8 1203.42 L1038.22 1203.42 L1037.63 1203.42 L1037.04 1203.42 L1036.46 1203.42 L1035.87 1203.42 L1035.28 1203.42 L1034.7 1203.42 L1034.11 1203.42 L1033.52 1203.42 L1032.94 1203.42 L1032.35 1203.42 L1031.77 1203.42 L1031.18 1203.42 L1030.59 1203.42 L1030.01 1203.42 L1029.42 1203.42 L1028.83 1203.42 L1028.25 1203.42 L1027.66 1203.42 L1027.07 1203.42 L1026.49 1203.42 L1025.9 1203.42 L1025.32 1203.42 L1024.73 1203.42 L1024.14 1203.42 L1023.56 1203.42 L1022.97 1203.42 L1022.38 1203.42 L1021.8 1203.42 L1021.21 1203.42 L1020.62 1203.42 L1020.04 1203.42 L1019.45 1203.42 L1018.86 1203.42 L1018.28 1203.42 L1017.69 1203.42 L1017.11 1203.42 L1016.52 1203.42 L1015.93 1203.42 L1015.35 1203.42 L1014.76 1203.42 L1014.17 1203.42 L1013.59 1203.42 L1013 1203.42 L1012.41 1203.42 L1011.83 1203.42 L1011.24 1203.42 L1010.65 1203.42 L1010.07 1203.42 L1009.48 1203.42 L1008.9 1203.42 L1008.31 1203.42 L1007.72 1203.42 L1007.14 1203.42 L1006.55 1203.42 L1005.96 1203.42 L1005.38 1203.42 L1004.79 1203.42 L1004.2 1203.42 L1003.62 1203.42 L1003.03 1203.42 L1002.44 1203.42 L1001.86 1203.42 L1001.27 1203.42 L1000.69 1203.42 L1000.1 1203.42 L999.513 1203.42 L998.926 1203.42 L998.34 1203.42 L997.754 1203.42 L997.167 1203.42 L996.581 1203.42 L995.994 1203.42 L995.408 1203.42 L994.822 1203.42 L994.235 1203.42 L993.649 1203.42 L993.062 1203.42 L992.476 1203.42 L991.889 1203.42 L991.303 1203.42 L990.717 1203.42 L990.13 1203.42 L989.544 1203.42 L988.957 1203.42 L988.371 1203.42 L987.785 1203.42 L987.198 1203.42 L986.612 1203.42 L986.025 1203.42  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1203.48 986.612,1203.48 987.198,1203.48 987.785,1203.48 988.371,1203.48 988.957,1203.48 989.544,1203.48 990.13,1203.48 990.717,1203.48 991.303,1203.48 991.889,1203.48 992.476,1203.48 993.062,1203.48 993.649,1203.48 994.235,1203.48 994.822,1203.48 995.408,1203.48 995.994,1203.48 996.581,1203.48 997.167,1203.48 997.754,1203.48 998.34,1203.48 998.926,1203.48 999.513,1203.48 1000.1,1203.48 1000.69,1203.48 1001.27,1203.48 1001.86,1203.48 1002.44,1203.48 1003.03,1203.48 1003.62,1203.48 1004.2,1203.48 1004.79,1203.48 1005.38,1203.48 1005.96,1203.48 1006.55,1203.48 1007.14,1203.48 1007.72,1203.48 1008.31,1203.48 1008.9,1203.48 1009.48,1203.48 1010.07,1203.48 1010.65,1203.48 1011.24,1203.48 1011.83,1203.48 1012.41,1203.48 1013,1203.48 1013.59,1203.48 1014.17,1203.48 1014.76,1203.48 1015.35,1203.48 1015.93,1203.48 1016.52,1203.48 1017.11,1203.48 1017.69,1203.48 1018.28,1203.48 1018.86,1203.48 1019.45,1203.48 1020.04,1203.48 1020.62,1203.48 1021.21,1203.48 1021.8,1203.48 1022.38,1203.48 1022.97,1203.48 1023.56,1203.48 1024.14,1203.48 1024.73,1203.48 1025.32,1203.48 1025.9,1203.48 1026.49,1203.48 1027.07,1203.48 1027.66,1203.48 1028.25,1203.48 1028.83,1203.48 1029.42,1203.48 1030.01,1203.48 1030.59,1203.48 1031.18,1203.48 1031.77,1203.48 1032.35,1203.48 1032.94,1203.48 1033.52,1203.48 1034.11,1203.48 1034.7,1203.48 1035.28,1203.48 1035.87,1203.48 1036.46,1203.48 1037.04,1203.48 1037.63,1203.48 1038.22,1203.48 1038.8,1203.48 1039.39,1203.48 1039.98,1203.48 1040.56,1203.48 1041.15,1203.48 1041.73,1203.48 1042.32,1203.48 1042.91,1203.48 1043.49,1203.48 1044.08,1203.48 1044.67,1203.48 1045.25,1203.48 1045.84,1203.48 1046.43,1203.48 1047.01,1203.48 1047.6,1203.48 1048.19,1203.48 1048.77,1203.48 1049.36,1203.48 1049.94,1203.48 1050.53,1203.48 1051.12,1203.48 1051.7,1203.48 1052.29,1203.48 1052.88,1203.48 1053.46,1203.48 1054.05,1203.48 1054.64,1203.48 1055.22,1203.48 1055.81,1203.48 1056.39,1203.48 1056.98,1203.48 1057.57,1203.48 1058.15,1203.48 1058.74,1203.48 1059.33,1203.48 1059.91,1203.48 1060.5,1203.48 1061.09,1203.48 1061.67,1203.48 1062.26,1203.48 1062.85,1203.48 1063.43,1203.48 1064.02,1203.48 1064.6,1203.48 1065.19,1203.48 1065.78,1203.48 1066.36,1203.48 1066.95,1203.48 1067.54,1203.48 1068.12,1203.48 1068.71,1203.48 1069.3,1203.48 1069.88,1203.48 1070.47,1203.48 1071.06,1203.48 1071.64,1203.48 1072.23,1203.48 1072.81,1203.48 1073.4,1203.48 1073.99,1203.48 1074.57,1203.48 1075.16,1203.48 1075.75,1203.48 1076.33,1203.48 1076.92,1203.48 1077.51,1203.48 1078.09,1203.48 1078.68,1203.48 1079.26,1203.48 1079.85,1203.48 1080.44,1203.48 1081.02,1203.48 1081.61,1203.48 1082.2,1203.48 1082.78,1203.48 1083.37,1203.48 1083.96,1203.48 1084.54,1203.48 1085.13,1203.48 1085.72,1203.48 1086.3,1203.48 1086.89,1203.48 1087.47,1203.48 1088.06,1203.48 1088.65,1203.48 1089.23,1203.48 1089.82,1203.48 1090.41,1203.48 1090.99,1203.48 1091.58,1203.48 1092.17,1203.48 1092.75,1203.48 1093.34,1203.48 1093.93,1203.48 1094.51,1203.48 1095.1,1203.48 1095.68,1203.48 1096.27,1203.48 1096.86,1203.48 1097.44,1203.48 1098.03,1203.48 1098.62,1203.48 1099.2,1203.48 1099.79,1203.48 1100.38,1203.48 1100.96,1203.48 1101.55,1203.48 1102.14,1203.48 1102.72,1203.48 1103.31,1203.48 1103.89,1203.48 1104.48,1203.48 1105.07,1203.48 1105.65,1203.48 1106.24,1203.48 1106.83,1203.48 1107.41,1203.48 1108,1203.48 1108.59,1203.48 1109.17,1203.48 1109.76,1203.48 1110.34,1203.48 1110.93,1203.48 1111.52,1203.48 1112.1,1203.48 1112.69,1203.48 1113.28,1203.48 1113.86,1203.48 1114.45,1203.48 1115.04,1203.48 1115.62,1203.48 1116.21,1203.48 1116.8,1203.48 1117.38,1203.48 1117.97,1203.48 1118.55,1203.48 1119.14,1203.48 1119.73,1203.48 1120.31,1203.48 1120.9,1203.48 1121.49,1203.48 1122.07,1203.48 1122.66,1203.48 1123.25,1203.48 1123.83,1203.48 1124.42,1203.48 1125.01,1203.48 1125.59,1203.48 1126.18,1203.48 1126.76,1203.48 1127.35,1203.48 1127.94,1203.48 1128.52,1203.48 1129.11,1203.48 1129.7,1203.48 1130.28,1203.48 1130.87,1203.48 1131.46,1203.48 1132.04,1203.48 1132.63,1203.48 1133.21,1203.48 1133.8,1203.48 1134.39,1203.48 1134.97,1203.48 1135.56,1203.48 1136.15,1203.48 1136.73,1203.48 1137.32,1203.48 1137.91,1203.48 1138.49,1203.48 1139.08,1203.48 1139.67,1203.48 1140.25,1203.48 1140.84,1203.48 1141.42,1203.48 1142.01,1203.48 1142.6,1203.48 1143.18,1203.48 1143.77,1203.48 1144.36,1203.48 1144.94,1203.48 1145.53,1203.48 1146.12,1203.48 1146.7,1203.48 1147.29,1203.48 1147.88,1203.48 1148.46,1203.48 1149.05,1203.48 1149.63,1203.48 1150.22,1203.48 1150.81,1203.48 1151.39,1203.48 1151.98,1203.48 1152.57,1203.48 1153.15,1203.48 1153.74,1203.48 1154.33,1203.48 1154.91,1203.48 1155.5,1203.48 1156.09,1203.48 1156.67,1203.48 1157.26,1203.48 1157.84,1203.48 1158.43,1203.48 1159.02,1203.48 1159.6,1203.48 1160.19,1203.48 1160.78,1203.48 1161.36,1203.48 1161.95,1203.48 1162.54,1203.48 1163.12,1203.48 1163.71,1203.48 1164.29,1203.48 1164.88,1203.48 1165.47,1203.48 1166.05,1203.48 1166.64,1203.48 1167.23,1203.48 1167.81,1203.48 1168.4,1203.48 1168.99,1203.48 1169.57,1203.48 1170.16,1203.48 1170.75,1203.48 1171.33,1203.48 1171.92,1203.48 1172.5,1203.48 1173.09,1203.48 1173.68,1203.48 1174.26,1203.48 1174.85,1203.48 1175.44,1203.48 1176.02,1203.48 1176.61,1203.48 1177.2,1203.48 1177.78,1203.48 1178.37,1203.48 1178.96,1203.48 1179.54,1203.48 1180.13,1203.48 1180.71,1203.48 1181.3,1203.48 1181.89,1203.48 1182.47,1203.48 1183.06,1203.48 1183.65,1203.48 1184.23,1203.48 1184.82,1203.48 1185.41,1203.48 1185.99,1203.48 1186.58,1203.48 1187.16,1203.48 1187.75,1203.48 1188.34,1203.48 1188.92,1203.48 1189.51,1203.48 1190.1,1203.48 1190.68,1203.48 1191.27,1203.48 1191.86,1203.48 1192.44,1203.48 1193.03,1203.48 1193.62,1203.48 1194.2,1203.48 1194.79,1203.48 1195.37,1203.48 1195.96,1203.48 1196.55,1203.48 1197.13,1203.48 1197.72,1203.48 1198.31,1203.48 1198.89,1203.48 1199.48,1203.48 1200.07,1203.48 1200.65,1203.48 1201.24,1203.48 1201.83,1203.48 1202.41,1203.48 1203,1203.48 1203.58,1203.48 1204.17,1203.48 1204.76,1203.48 1205.34,1203.48 1205.93,1203.48 1206.52,1203.48 1207.1,1203.48 1207.69,1203.48 1208.28,1203.48 1208.86,1203.48 1209.45,1203.48 1210.03,1203.48 1210.62,1203.48 1211.21,1203.48 1211.79,1203.48 1212.38,1203.48 1212.97,1203.48 1213.55,1203.48 1214.14,1203.48 1214.73,1203.48 1215.31,1203.48 1215.9,1203.48 1216.49,1203.48 1217.07,1203.48 1217.66,1203.48 1218.24,1203.48 1218.83,1203.48 1219.42,1203.48 1220,1203.48 1220.59,1203.48 1221.18,1203.48 1221.76,1203.48 1222.35,1203.48 1222.94,1203.48 1223.52,1203.48 1224.11,1203.48 1224.7,1203.48 1225.28,1203.48 1225.87,1203.48 1226.45,1203.48 1227.04,1203.48 1227.63,1203.48 1228.21,1203.48 1228.8,1203.48 1229.39,1203.48 1229.97,1203.48 1230.56,1203.48 1231.15,1203.48 1231.73,1203.48 1232.32,1203.48 1232.91,1203.48 1233.49,1203.48 1234.08,1203.48 1234.66,1203.48 1235.25,1203.48 1235.84,1203.48 1236.42,1203.48 1237.01,1203.48 1237.6,1203.48 1238.18,1203.48 1238.77,1203.48 1239.36,1203.48 1239.94,1203.48 1240.53,1203.48 1241.11,1203.48 1241.7,1203.48 1242.29,1203.48 1242.87,1203.48 1243.46,1203.48 1244.05,1203.48 1244.63,1203.48 1245.22,1203.48 1245.81,1203.48 1246.39,1203.48 1246.98,1203.48 1247.57,1203.48 1248.15,1203.48 1248.74,1203.48 1249.32,1203.48 1249.91,1203.48 1250.5,1203.48 1251.08,1203.48 1251.67,1203.48 1252.26,1203.48 1252.84,1203.48 1253.43,1203.48 1254.02,1203.48 1254.6,1203.48 1255.19,1203.48 1255.78,1203.48 1256.36,1203.48 1256.95,1203.48 1257.53,1203.48 1258.12,1203.48 1258.71,1203.48 1259.29,1203.48 1259.88,1203.48 1260.47,1203.48 1261.05,1203.48 1261.64,1203.48 1262.23,1203.48 1262.81,1203.48 1263.4,1203.48 1263.98,1203.48 1264.57,1203.48 1265.16,1203.48 1265.74,1203.48 1266.33,1203.48 1266.92,1203.48 1267.5,1203.48 1268.09,1203.48 1268.68,1203.48 1269.26,1203.48 1269.85,1203.48 1270.44,1203.48 1271.02,1203.48 1271.61,1203.48 1272.19,1203.48 1272.78,1203.48 1273.37,1203.48 1273.95,1203.48 1274.54,1203.48 1275.13,1203.48 1275.71,1203.48 1276.3,1203.48 1276.89,1203.48 1277.47,1203.48 1278.06,1203.48 1278.65,1203.48 1279.23,1203.48 1279.82,1203.48 1280.4,1203.48 1280.99,1203.48 1281.58,1203.48 1282.16,1203.48 1282.75,1203.48 1283.34,1203.48 1283.92,1203.48 1284.51,1203.48 1285.1,1203.48 1285.68,1203.48 1286.27,1203.48 1286.86,1203.48 1287.44,1203.48 1288.03,1203.48 1288.61,1203.48 1289.2,1203.48 1289.79,1203.48 1290.37,1203.48 1290.96,1203.48 1291.55,1203.48 1292.13,1203.48 1292.72,1203.48 1293.31,1203.48 1293.89,1203.48 1294.48,1203.48 1295.06,1203.48 1295.65,1203.48 1296.24,1203.48 1296.82,1203.48 1297.41,1203.48 1298,1203.48 1298.58,1203.48 1299.17,1203.48 1299.76,1203.48 1300.34,1203.48 1300.93,1203.48 1301.52,1203.48 1302.1,1203.48 1302.69,1203.48 1303.27,1203.48 1303.86,1203.48 1304.45,1203.48 1305.03,1203.48 1305.62,1203.48 1306.21,1203.48 1306.79,1203.48 1307.38,1203.48 1307.97,1203.48 1308.55,1203.48 1309.14,1203.48 1309.73,1203.48 1310.31,1203.48 1310.9,1203.48 1311.48,1203.48 1312.07,1203.48 1312.66,1203.48 1313.24,1203.48 1313.83,1203.48 1314.42,1203.48 1315,1203.48 1315.59,1203.48 1316.18,1203.48 1316.76,1203.48 1317.35,1203.48 1317.93,1203.48 1318.52,1203.48 1319.11,1203.48 1319.69,1203.48 1320.28,1203.48 1320.87,1203.48 1321.45,1203.48 1322.04,1203.48 1322.63,1203.48 1323.21,1203.48 1323.8,1203.48 1324.39,1203.48 1324.97,1203.48 1325.56,1203.48 1326.14,1203.48 1326.73,1203.48 1327.32,1203.48 1327.9,1203.48 1328.49,1203.48 1329.08,1203.48 1329.66,1203.48 1330.25,1203.48 1330.84,1203.48 1331.42,1203.48 1332.01,1203.48 1332.6,1203.48 1333.18,1203.48 1333.77,1203.48 1334.35,1203.48 1334.94,1203.48 1335.53,1203.48 1336.11,1203.48 1336.7,1203.48 1337.29,1203.48 1337.87,1203.48 1338.46,1203.48 1339.05,1203.48 1339.63,1203.48 1340.22,1203.48 1340.8,1203.48 1341.39,1203.48 1341.98,1203.48 1342.56,1203.48 1343.15,1203.48 1343.74,1203.48 1344.32,1203.48 1344.91,1203.48 1345.5,1203.48 1346.08,1203.48 1346.67,1203.48 1347.26,1203.48 1347.84,1203.48 1348.43,1203.48 1349.01,1203.48 1349.6,1203.48 1350.19,1203.48 1350.77,1203.48 1351.36,1203.48 1351.95,1203.48 1352.53,1203.48 1353.12,1203.48 1353.71,1203.48 1354.29,1203.48 1354.88,1203.48 1355.47,1203.48 1356.05,1203.48 1356.64,1203.48 1357.22,1203.48 1357.81,1203.48 1358.4,1203.48 1358.98,1203.48 1359.57,1203.48 1360.16,1203.48 1360.74,1203.48 1361.33,1203.48 1361.92,1203.48 1362.5,1203.48 1363.09,1203.48 1363.68,1203.48 1364.26,1203.48 1364.85,1203.48 1365.43,1203.48 1366.02,1203.48 1366.61,1203.48 1367.19,1203.48 1367.78,1203.48 1368.37,1203.48 1368.95,1203.48 1369.54,1203.48 1370.13,1203.48 1370.71,1203.48 1371.3,1203.48 1371.88,1203.48 1372.47,1203.48 1373.06,1203.48 1373.64,1203.48 1374.23,1203.48 1374.82,1203.48 1375.4,1203.48 1375.99,1203.48 1376.58,1203.48 1377.16,1203.48 1377.75,1203.48 1378.34,1203.48 1378.92,1203.48 1379.51,1203.48 1380.09,1203.48 1380.68,1203.48 1381.27,1203.48 1381.85,1203.48 1382.44,1203.48 1383.03,1203.48 1383.61,1203.48 1384.2,1203.48 1384.79,1203.48 1385.37,1203.48 1385.96,1203.48 1386.55,1203.48 1387.13,1203.48 1387.72,1203.48 1388.3,1203.48 1388.89,1203.48 1389.48,1203.48 1390.06,1203.48 1390.65,1203.48 1391.24,1203.48 1391.82,1203.48 1392.41,1203.48 1393,1203.48 1393.58,1203.48 1394.17,1203.48 1394.75,1203.48 1395.34,1203.48 1395.93,1203.48 1396.51,1203.48 1397.1,1203.48 1397.69,1203.48 1398.27,1203.48 1398.86,1203.48 1399.45,1203.48 1400.03,1203.48 1400.62,1203.48 1401.21,1203.48 1401.79,1203.48 1402.38,1203.48 1402.96,1203.48 1403.55,1203.48 1404.14,1203.48 1404.72,1203.48 1405.31,1203.48 1405.9,1203.48 1406.48,1203.48 1407.07,1203.48 1407.66,1203.48 1408.24,1203.48 1408.83,1203.48 1409.42,1203.48 1410,1203.48 1410.59,1203.48 1411.17,1203.48 1411.76,1203.48 1412.35,1203.48 1412.93,1203.48 1413.52,1203.48 1414.11,1203.48 1414.69,1203.48 1415.28,1203.48 1415.87,1203.48 1416.45,1203.48 1417.04,1203.48 1417.63,1203.48 1418.21,1203.48 1418.8,1203.48 1419.38,1203.48 1419.97,1203.48 1420.56,1203.48 1421.14,1203.48 1421.73,1203.48 1422.32,1203.48 1422.9,1203.48 1423.49,1203.48 1424.08,1203.48 1424.66,1203.48 1425.25,1203.48 1425.83,1203.48 1426.42,1203.48 1427.01,1203.48 1427.59,1203.48 1428.18,1203.48 1428.77,1203.48 1429.35,1203.48 1429.94,1203.48 1430.53,1203.48 1431.11,1203.48 1431.7,1203.48 1432.29,1203.48 1432.87,1203.48 1433.46,1203.48 1434.04,1203.48 1434.63,1203.48 1435.22,1203.48 1435.8,1203.48 1436.39,1203.48 1436.98,1203.48 1437.56,1203.48 1438.15,1203.48 1438.74,1203.48 1439.32,1203.48 1439.91,1203.48 1440.5,1203.48 1441.08,1203.48 1441.67,1203.48 1442.25,1203.48 1442.84,1203.48 1443.43,1203.48 1444.01,1203.48 1444.6,1203.48 1445.19,1203.48 1445.77,1203.48 1446.36,1203.48 1446.95,1203.48 1447.53,1203.48 1448.12,1203.48 1448.7,1203.48 1449.29,1203.48 1449.88,1203.48 1450.46,1203.48 1451.05,1203.48 1451.64,1203.48 1452.22,1203.48 1452.81,1203.48 1453.4,1203.48 1453.98,1203.48 1454.57,1203.48 1455.16,1203.48 1455.74,1203.48 1456.33,1203.48 1456.91,1203.48 1457.5,1203.48 1458.09,1203.48 1458.67,1203.48 1459.26,1203.48 1459.85,1203.48 1460.43,1203.48 1461.02,1203.48 1461.61,1203.48 1462.19,1203.48 1462.78,1203.48 1463.37,1203.48 1463.95,1203.48 1464.54,1203.48 1465.12,1203.48 1465.71,1203.48 1466.3,1203.48 1466.88,1203.48 1467.47,1203.48 1468.06,1203.48 1468.64,1203.48 1469.23,1203.48 1469.82,1203.48 1470.4,1203.48 1470.99,1203.48 1471.57,1203.48 1472.16,1203.48 1472.75,1203.48 1473.33,1203.48 1473.92,1203.48 1474.51,1203.48 1475.09,1203.48 1475.68,1203.48 1476.27,1203.48 1476.85,1203.48 1477.44,1203.48 1478.03,1203.48 1478.61,1203.48 1479.2,1203.48 1479.78,1203.48 1480.37,1203.48 1480.96,1203.48 1481.54,1203.48 1482.13,1203.48 1482.72,1203.48 1483.3,1203.48 1483.89,1203.48 1484.48,1203.48 1485.06,1203.48 1485.65,1203.48 1486.24,1203.48 1486.82,1203.48 1487.41,1203.48 1487.99,1203.48 1488.58,1203.48 1489.17,1203.48 1489.75,1203.48 1490.34,1203.48 1490.93,1203.48 1491.51,1203.48 1492.1,1203.48 1492.69,1203.48 1493.27,1203.48 1493.86,1203.48 1494.45,1203.48 1495.03,1203.48 1495.62,1203.48 1496.2,1203.48 1496.79,1203.48 1497.38,1203.48 1497.96,1203.48 1498.55,1203.48 1499.14,1203.48 1499.72,1203.48 1500.31,1203.48 1500.9,1203.48 1501.48,1203.48 1502.07,1203.48 1502.65,1203.48 1503.24,1203.48 1503.83,1203.48 1504.41,1203.48 1505,1203.48 1505.59,1203.48 1506.17,1203.48 1506.76,1203.48 1507.35,1203.48 1507.93,1203.48 1508.52,1203.48 1509.11,1203.48 1509.69,1203.48 1510.28,1203.48 1510.86,1203.48 1511.45,1203.48 1512.04,1203.48 1512.62,1203.48 1513.21,1203.48 1513.8,1203.48 1514.38,1203.48 1514.97,1203.48 1515.56,1203.48 1516.14,1203.48 1516.73,1203.48 1517.32,1203.48 1517.9,1203.48 1518.49,1203.48 1519.07,1203.48 1519.66,1203.48 1520.25,1203.48 1520.83,1203.48 1521.42,1203.48 1522.01,1203.48 1522.59,1203.48 1523.18,1203.48 1523.77,1203.48 1524.35,1203.48 1524.94,1203.48 1525.52,1203.48 1526.11,1203.48 1526.7,1203.48 1527.28,1203.48 1527.87,1203.48 1528.46,1203.48 1529.04,1203.48 1529.63,1203.48 1530.22,1203.48 1530.8,1203.48 1531.39,1203.48 1531.98,1203.48 1532.56,1203.48 1533.15,1203.48 1533.73,1203.48 1534.32,1203.48 1534.91,1203.48 1535.49,1203.48 1536.08,1203.48 1536.67,1203.48 1537.25,1203.48 1537.84,1203.48 1538.43,1203.48 1539.01,1203.48 1539.6,1203.48 1540.19,1203.48 1540.77,1203.48 1541.36,1203.48 1541.94,1203.48 1542.53,1203.48 1543.12,1203.48 1543.7,1203.48 1544.29,1203.48 1544.88,1203.48 1545.46,1203.48 1546.05,1203.48 1546.64,1203.48 1547.22,1203.48 1547.81,1203.48 1548.4,1203.48 1548.98,1203.48 1549.57,1203.48 1550.15,1203.48 1550.74,1203.48 1551.33,1203.48 1551.91,1203.48 1552.5,1203.48 1553.09,1203.48 1553.67,1203.48 1554.26,1203.48 1554.85,1203.48 1555.43,1203.48 1556.02,1203.48 1556.6,1203.48 1557.19,1203.48 1557.78,1203.48 1558.36,1203.48 1558.95,1203.48 1559.54,1203.48 1560.12,1203.48 1560.71,1203.48 1561.3,1203.48 1561.88,1203.48 1562.47,1203.48 1563.06,1203.48 1563.64,1203.48 1564.23,1203.48 1564.81,1203.48 1565.4,1203.48 1565.99,1203.48 1566.57,1203.48 1567.16,1203.48 1567.75,1203.48 1568.33,1203.48 1568.92,1203.48 1569.51,1203.48 1570.09,1203.48 1570.68,1203.48 1571.27,1203.48 1571.85,1203.48 1572.44,1203.48 1573.02,1203.48 1573.61,1203.48 1574.2,1203.48 1574.78,1203.48 1575.37,1203.48 1575.96,1203.48 1576.54,1203.48 1577.13,1203.48 1577.72,1203.48 1578.3,1203.48 1578.89,1203.48 1579.47,1203.48 1580.06,1203.48 1580.65,1203.48 1581.23,1203.48 1581.82,1203.48 1582.41,1203.48 1582.99,1203.48 1583.58,1203.48 1584.17,1203.48 1584.75,1203.48 1585.34,1203.48 1585.93,1203.48 1586.51,1203.48 1587.1,1203.48 1587.68,1203.48 1588.27,1203.48 1588.86,1203.48 1589.44,1203.48 1590.03,1203.48 1590.62,1203.48 1591.2,1203.48 1591.79,1203.48 1592.38,1203.48 1592.96,1203.48 1593.55,1203.48 1594.14,1203.48 1594.72,1203.48 1595.31,1203.48 1595.89,1203.48 1596.48,1203.48 1597.07,1203.48 1597.65,1203.48 1598.24,1203.48 1598.83,1203.48 1599.41,1203.48 1600,1203.48 1600.59,1203.48 1601.17,1203.48 1601.76,1203.48 1602.34,1203.48 1602.93,1203.48 1603.52,1203.48 1604.1,1203.48 1604.69,1203.48 1605.28,1203.48 1605.86,1203.48 1606.45,1203.48 1607.04,1203.48 1607.62,1203.48 1608.21,1203.48 1608.8,1203.48 1609.38,1203.48 1609.97,1203.48 1610.55,1203.48 1611.14,1203.48 1611.73,1203.48 1612.31,1203.48 1612.9,1203.48 1613.49,1203.48 1614.07,1203.48 1614.66,1203.48 1615.25,1203.48 1615.83,1203.48 1616.42,1203.48 1617.01,1203.48 1617.59,1203.48 1618.18,1203.48 1618.76,1203.48 1619.35,1203.48 1619.94,1203.48 1620.52,1203.48 1621.11,1203.48 1621.7,1203.48 1622.28,1203.48 1622.87,1203.48 1623.46,1203.48 1624.04,1203.48 1624.63,1203.48 1625.22,1203.48 1625.8,1203.48 1626.39,1203.48 1626.97,1203.48 1627.56,1203.48 1628.15,1203.48 1628.73,1203.48 1629.32,1203.48 1629.91,1203.48 1630.49,1203.48 1631.08,1203.48 1631.67,1203.48 1632.25,1203.48 1632.84,1203.48 1633.42,1203.48 1634.01,1203.48 1634.6,1203.48 1635.18,1203.48 1635.77,1203.48 1636.36,1203.48 1636.94,1203.48 1637.53,1203.48 1638.12,1203.48 1638.7,1203.48 1639.29,1203.48 1639.88,1203.48 1640.46,1203.48 1641.05,1203.48 1641.63,1203.48 1642.22,1203.48 1642.81,1203.48 1643.39,1203.48 1643.98,1203.48 1644.57,1203.48 1645.15,1203.48 1645.74,1203.48 1646.33,1203.48 1646.91,1203.48 1647.5,1203.48 1648.09,1203.48 1648.67,1203.48 1649.26,1203.48 1649.84,1203.48 1650.43,1203.48 1651.02,1203.48 1651.6,1203.48 1652.19,1203.48 1652.78,1203.48 1653.36,1203.48 1653.95,1203.48 1654.54,1203.48 1655.12,1203.48 1655.71,1203.48 1656.29,1203.48 1656.88,1203.48 1657.47,1203.48 1658.05,1203.48 1658.64,1203.48 1659.23,1203.48 1659.81,1203.48 1660.4,1203.48 1660.99,1203.48 1661.57,1203.48 1662.16,1203.48 1662.75,1203.48 1663.33,1203.48 1663.92,1203.48 1664.5,1203.48 1665.09,1203.48 1665.68,1203.48 1666.26,1203.48 1666.85,1203.48 1667.44,1203.48 1668.02,1203.48 1668.61,1203.48 1669.2,1203.48 1669.78,1203.48 1670.37,1203.48 1670.96,1203.48 1671.54,1203.48 1672.13,1203.48 1672.71,1203.48 1673.3,1203.48 1673.89,1203.48 1674.47,1203.48 1675.06,1203.48 1675.65,1203.48 1676.23,1203.48 1676.82,1203.48 1677.41,1203.48 1677.99,1203.48 1678.58,1203.48 1679.17,1203.48 1679.75,1203.48 1680.34,1203.48 1680.92,1203.48 1681.51,1203.48 1682.1,1203.48 1682.68,1203.48 1683.27,1203.48 1683.86,1203.48 1684.44,1203.48 1685.03,1203.48 1685.62,1203.48 1686.2,1203.48 1686.79,1203.48 1687.37,1203.48 1687.96,1203.48 1688.55,1203.48 1689.13,1203.48 1689.72,1203.48 1690.31,1203.48 1690.89,1203.48 1691.48,1203.48 1692.07,1203.48 1692.65,1203.48 1693.24,1203.48 1693.83,1203.48 1694.41,1203.48 1695,1203.48 1695.58,1203.48 1696.17,1203.48 1696.76,1203.48 1697.34,1203.48 1697.93,1203.48 1698.52,1203.48 1699.1,1203.48 1699.69,1203.48 1700.28,1203.48 1700.86,1203.48 1701.45,1203.48 1702.04,1203.48 1702.62,1203.48 1703.21,1203.48 1703.79,1203.48 1704.38,1203.48 1704.97,1203.48 1705.55,1203.48 1706.14,1203.48 1706.73,1203.48 1707.31,1203.48 1707.9,1203.48 1708.49,1203.48 1709.07,1203.48 1709.66,1203.48 1710.24,1203.48 1710.83,1203.48 1711.42,1203.48 1712,1203.48 1712.59,1203.48 1713.18,1203.48 1713.76,1203.48 1714.35,1203.48 1714.94,1203.48 1715.52,1203.48 1716.11,1203.48 1716.7,1203.48 1717.28,1203.48 1717.87,1203.48 1718.45,1203.48 1719.04,1203.48 1719.63,1203.48 1720.21,1203.48 1720.8,1203.48 1721.39,1203.48 1721.97,1203.48 1722.56,1203.48 1723.15,1203.48 1723.73,1203.48 1724.32,1203.48 1724.91,1203.48 1725.49,1203.48 1726.08,1203.48 1726.66,1203.48 1727.25,1203.48 1727.84,1203.48 1728.42,1203.48 1729.01,1203.48 1729.6,1203.48 1730.18,1203.48 1730.77,1203.48 1731.36,1203.48 1731.94,1203.48 1732.53,1203.48 1733.11,1203.48 1733.7,1203.48 1734.29,1203.48 1734.87,1203.48 1735.46,1203.48 1736.05,1203.48 1736.63,1203.48 1737.22,1203.48 1737.81,1203.48 1738.39,1203.48 1738.98,1203.48 1739.57,1203.48 1740.15,1203.48 1740.74,1203.48 1741.32,1203.48 1741.91,1203.48 1742.5,1203.48 1743.08,1203.48 1743.67,1203.48 1744.26,1203.48 1744.84,1203.48 1745.43,1203.48 1746.02,1203.48 1746.6,1203.48 1747.19,1203.48 1747.78,1203.48 1748.36,1203.48 1748.95,1203.48 1749.53,1203.48 1750.12,1203.48 1750.71,1203.48 1751.29,1203.48 1751.88,1203.48 1752.47,1203.48 1753.05,1203.48 1753.64,1203.48 1754.23,1203.48 1754.81,1203.48 1755.4,1203.48 1755.99,1203.48 1756.57,1203.48 1757.16,1203.48 1757.74,1203.48 1758.33,1203.48 1758.92,1203.48 1759.5,1203.48 1760.09,1203.48 1760.68,1203.48 1761.26,1203.48 1761.85,1203.48 1762.44,1203.48 1763.02,1203.48 1763.61,1203.48 1764.19,1203.48 1764.78,1203.48 1765.37,1203.48 1765.95,1203.48 1766.54,1203.48 1767.13,1203.48 1767.71,1203.48 1768.3,1203.48 1768.89,1203.48 1769.47,1203.48 1770.06,1203.48 1770.65,1203.48 1771.23,1203.48 1771.82,1203.48 1772.4,1203.48 1772.99,1203.48 1773.58,1203.48 1774.16,1203.48 1774.75,1203.48 1775.34,1203.48 1775.92,1203.48 1776.51,1203.48 1777.1,1203.48 1777.68,1203.48 1778.27,1203.48 1778.86,1203.48 1779.44,1203.48 1780.03,1203.48 1780.61,1203.48 1781.2,1203.48 1781.79,1203.48 1782.37,1203.48 1782.96,1203.48 1783.55,1203.48 1784.13,1203.48 1784.72,1203.48 1785.31,1203.48 1785.89,1203.48 1786.48,1203.48 1787.06,1203.48 1787.65,1203.48 1788.24,1203.48 1788.82,1203.48 1789.41,1203.48 1790,1203.48 1790.58,1203.48 1791.17,1203.48 1791.76,1203.48 1792.34,1203.48 1792.93,1203.48 1793.52,1203.48 1794.1,1203.48 1794.69,1203.48 1795.27,1203.48 1795.86,1203.48 1796.45,1203.48 1797.03,1203.48 1797.62,1203.48 1798.21,1203.48 1798.79,1203.48 1799.38,1203.48 1799.97,1203.48 1800.55,1203.48 1801.14,1203.48 1801.73,1203.48 1802.31,1203.48 1802.9,1203.48 1803.48,1203.48 1804.07,1203.48 1804.66,1203.48 1805.24,1203.48 1805.83,1203.48 1806.42,1203.48 1807,1203.48 1807.59,1203.48 1808.18,1203.48 1808.76,1203.48 1809.35,1203.48 1809.94,1203.48 1810.52,1203.48 1811.11,1203.48 1811.69,1203.48 1812.28,1203.48 1812.87,1203.48 1813.45,1203.48 1814.04,1203.48 1814.63,1203.48 1815.21,1203.48 1815.8,1203.48 1816.39,1203.48 1816.97,1203.48 1817.56,1203.48 1818.14,1203.48 1818.73,1203.48 1819.32,1203.48 1819.9,1203.48 1820.49,1203.48 1821.08,1203.48 1821.66,1203.48 1822.25,1203.48 1822.84,1203.48 1823.42,1203.48 1824.01,1203.48 1824.6,1203.48 1825.18,1203.48 1825.77,1203.48 1826.35,1203.48 1826.94,1203.48 1827.53,1203.48 1828.11,1203.48 1828.7,1203.48 1829.29,1203.48 1829.87,1203.48 1830.46,1203.48 1831.05,1203.48 1831.63,1203.48 1832.22,1203.48 1832.81,1203.48 1833.39,1203.48 1833.98,1203.48 1834.56,1203.48 1835.15,1203.48 1835.74,1203.48 1836.32,1203.48 1836.91,1203.48 1837.5,1203.48 1838.08,1203.48 1838.67,1203.48 1839.26,1203.48 1839.84,1203.48 1840.43,1203.48 1841.01,1203.48 1841.6,1203.48 1842.19,1203.48 1842.77,1203.48 1843.36,1203.48 1843.95,1203.48 1844.53,1203.48 1845.12,1203.48 1845.71,1203.48 1846.29,1203.48 1846.88,1203.48 1847.47,1203.48 1848.05,1203.48 1848.64,1203.48 1849.22,1203.48 1849.81,1203.48 1850.4,1203.48 1850.98,1203.48 1851.57,1203.48 1852.16,1203.48 1852.74,1203.48 1853.33,1203.48 1853.92,1203.48 1854.5,1203.48 1855.09,1203.48 1855.68,1203.48 1856.26,1203.48 1856.85,1203.48 1857.43,1203.48 1858.02,1203.48 1858.61,1203.48 1859.19,1203.48 1859.78,1203.48 1860.37,1203.48 1860.95,1203.48 1861.54,1203.48 1862.13,1203.48 1862.71,1203.48 1863.3,1203.48 1863.88,1203.48 1864.47,1203.48 1865.06,1203.48 1865.64,1203.48 1866.23,1203.48 1866.82,1203.48 1867.4,1203.48 1867.99,1203.48 1868.58,1203.48 1869.16,1203.48 1869.75,1203.48 1870.34,1203.48 1870.92,1203.48 1871.51,1203.48 1872.09,1203.48 1872.68,1203.48 1873.27,1203.48 1873.85,1203.48 1874.44,1203.48 1875.03,1203.48 1875.61,1203.48 1876.2,1203.48 1876.79,1203.48 1877.37,1203.48 1877.96,1203.48 1878.55,1203.48 1879.13,1203.48 1879.72,1203.48 1880.3,1203.48 1880.89,1203.48 1881.48,1203.48 1882.06,1203.48 1882.65,1203.48 1883.24,1203.48 1883.82,1203.48 1884.41,1203.48 1885,1203.48 1885.58,1203.48 1886.17,1203.48 1886.76,1203.48 1887.34,1203.48 1887.93,1203.48 1888.51,1203.48 1889.1,1203.48 1889.69,1203.48 1890.27,1203.48 1890.86,1203.48 1891.45,1203.48 1892.03,1203.48 1892.62,1203.48 1893.21,1203.48 1893.79,1203.48 1894.38,1203.48 1894.96,1203.48 1895.55,1203.48 1896.14,1203.48 1896.72,1203.48 1897.31,1203.48 1897.9,1203.48 1898.48,1203.48 1899.07,1203.48 1899.66,1203.48 1900.24,1203.48 1900.83,1203.48 1901.42,1203.48 1902,1203.48 1902.59,1203.48 1903.17,1203.48 1903.76,1203.48 1904.35,1203.48 1904.93,1203.48 1905.52,1203.48 1906.11,1203.48 1906.69,1203.48 1907.28,1203.48 1907.87,1203.48 1908.45,1203.48 1909.04,1203.48 1909.63,1203.48 1910.21,1203.48 1910.8,1203.48 1911.38,1203.48 1911.97,1203.48 1912.56,1203.48 1913.14,1203.48 1913.73,1203.48 1914.32,1203.48 1914.9,1203.48 1915.49,1203.48 1916.08,1203.48 1916.66,1203.48 1917.25,1203.48 1917.83,1203.48 1918.42,1203.48 1919.01,1203.48 1919.59,1203.48 1920.18,1203.48 1920.77,1203.48 1921.35,1203.48 1921.94,1203.48 1922.53,1203.48 1923.11,1203.48 1923.7,1203.48 1924.29,1203.48 1924.87,1203.48 1925.46,1203.48 1926.04,1203.48 1926.63,1203.48 1927.22,1203.48 1927.8,1203.48 1928.39,1203.48 1928.98,1203.48 1929.56,1203.48 1930.15,1203.48 1930.74,1203.48 1931.32,1203.48 1931.91,1203.48 1932.5,1203.48 1933.08,1203.48 1933.67,1203.48 1934.25,1203.48 1934.84,1203.48 1935.43,1203.48 1936.01,1203.48 1936.6,1203.48 1937.19,1203.48 1937.77,1203.48 1938.36,1203.48 1938.95,1203.48 1939.53,1203.48 1940.12,1203.48 1940.71,1203.48 1941.29,1203.48 1941.88,1203.48 1942.46,1203.48 1943.05,1203.48 1943.64,1203.48 1944.22,1203.48 1944.81,1203.48 1945.4,1203.48 1945.98,1203.48 1946.57,1203.48 1947.16,1203.48 1947.74,1203.48 1948.33,1203.48 1948.91,1203.48 1949.5,1203.48 1950.09,1203.48 1950.67,1203.48 1951.26,1203.48 1951.85,1203.48 1952.43,1203.48 1953.02,1203.48 1953.61,1203.48 1954.19,1203.48 1954.78,1203.48 1955.37,1203.48 1955.95,1203.48 1956.54,1203.48 1957.12,1203.48 1957.71,1203.48 1958.3,1203.48 1958.88,1203.48 1959.47,1203.48 1960.06,1203.48 1960.64,1203.48 1961.23,1203.48 1961.82,1203.48 1962.4,1203.48 1962.99,1203.48 1963.58,1203.48 1964.16,1203.48 1964.75,1203.48 1965.33,1203.48 1965.92,1203.48 1966.51,1203.48 1967.09,1203.48 1967.68,1203.48 1968.27,1203.48 1968.85,1203.48 1969.44,1203.48 1970.03,1203.48 1970.61,1203.48 1971.2,1203.48 1971.78,1203.48 1972.37,1203.48 1972.96,1203.48 1973.54,1203.48 1974.13,1203.48 1974.72,1203.48 1975.3,1203.48 1975.89,1203.48 1976.48,1203.48 1977.06,1203.48 1977.65,1203.48 1978.24,1203.48 1978.82,1203.48 1979.41,1203.48 1979.99,1203.48 1980.58,1203.48 1981.17,1203.48 1981.75,1203.48 1982.34,1203.48 1982.93,1203.48 1983.51,1203.48 1984.1,1203.48 1984.69,1203.48 1985.27,1203.48 1985.86,1203.48 1986.45,1203.48 1987.03,1203.48 1987.62,1203.48 1988.2,1203.48 1988.79,1203.48 1989.38,1203.48 1989.96,1203.48 1990.55,1203.48 1991.14,1203.48 1991.72,1203.48 1992.31,1203.48 1992.9,1203.48 1993.48,1203.48 1994.07,1203.48 1994.65,1203.48 1995.24,1203.48 1995.83,1203.48 1996.41,1203.48 1997,1203.48 1997.59,1203.48 1998.17,1203.48 1998.76,1203.48 1999.35,1203.48 1999.93,1203.48 2000.52,1203.48 2001.11,1203.48 2001.69,1203.48 2002.28,1203.48 2002.86,1203.48 2003.45,1203.48 2004.04,1203.48 2004.62,1203.48 2005.21,1203.48 2005.8,1203.48 2006.38,1203.48 2006.97,1203.48 2007.56,1203.48 2008.14,1203.48 2008.73,1203.48 2009.32,1203.48 2009.9,1203.48 2010.49,1203.48 2011.07,1203.48 2011.66,1203.48 2012.25,1203.48 2012.83,1203.48 2013.42,1203.48 2014.01,1203.48 2014.59,1203.48 2015.18,1203.48 2015.77,1203.48 2016.35,1203.48 2016.94,1203.48 2017.53,1203.48 2018.11,1203.48 2018.7,1203.48 2019.28,1203.48 2019.87,1203.48 2020.46,1203.48 2021.04,1203.48 2021.63,1203.48 2022.22,1203.48 2022.8,1203.48 2023.39,1203.48 2023.98,1203.48 2024.56,1203.48 2025.15,1203.48 2025.73,1203.48 2026.32,1203.48 2026.91,1203.48 2027.49,1203.48 2028.08,1203.48 2028.67,1203.48 2029.25,1203.48 2029.84,1203.48 2030.43,1203.48 2031.01,1203.48 2031.6,1203.48 2032.19,1203.48 2032.77,1203.48 2033.36,1203.48 2033.94,1203.48 2034.53,1203.48 2035.12,1203.48 2035.7,1203.48 2036.29,1203.48 2036.88,1203.48 2037.46,1203.48 2038.05,1203.48 2038.64,1203.48 2039.22,1203.48 2039.81,1203.48 2040.4,1203.48 2040.98,1203.48 2041.57,1203.48 2042.15,1203.48 2042.74,1203.48 2043.33,1203.48 2043.91,1203.48 2044.5,1203.48 2045.09,1203.48 2045.67,1203.48 2046.26,1203.48 2046.85,1203.48 2047.43,1203.48 2048.02,1203.48 2048.6,1203.48 2049.19,1203.48 2049.78,1203.48 2050.36,1203.48 2050.95,1203.48 2051.54,1203.48 2052.12,1203.48 2052.71,1203.48 2053.3,1203.48 2053.88,1203.48 2054.47,1203.48 2055.06,1203.48 2055.64,1203.48 2056.23,1203.48 2056.81,1203.48 2057.4,1203.48 2057.99,1203.48 2058.57,1203.48 2059.16,1203.48 2059.75,1203.48 2060.33,1203.48 2060.92,1203.48 2061.51,1203.48 2062.09,1203.48 2062.68,1203.48 2063.27,1203.48 2063.85,1203.48 2064.44,1203.48 2065.02,1203.48 2065.61,1203.48 2066.2,1203.48 2066.78,1203.48 2067.37,1203.48 2067.96,1203.48 2068.54,1203.48 2069.13,1203.48 2069.72,1203.48 2070.3,1203.48 2070.89,1203.48 2071.48,1203.48 2072.06,1203.48 2072.65,1203.48 2073.23,1203.48 2073.82,1203.48 2074.41,1203.48 2074.99,1203.48 2075.58,1203.48 2076.17,1203.48 2076.75,1203.48 2077.34,1203.48 2077.93,1203.48 2078.51,1203.48 2079.1,1203.48 2079.68,1203.48 2080.27,1203.48 2080.86,1203.48 2081.44,1203.48 2082.03,1203.48 2082.62,1203.48 2083.2,1203.48 2083.79,1203.48 2084.38,1203.48 2084.96,1203.48 2085.55,1203.48 2086.14,1203.48 2086.72,1203.48 2087.31,1203.48 2087.89,1203.48 2088.48,1203.48 2089.07,1203.48 2089.65,1203.48 2090.24,1203.48 2090.83,1203.48 2091.41,1203.48 2092,1203.48 2092.59,1203.48 2093.17,1203.48 2093.76,1203.48 2094.35,1203.48 2094.93,1203.48 2095.52,1203.48 2096.1,1203.48 2096.69,1203.48 2097.28,1203.48 2097.86,1203.48 2098.45,1203.48 2099.04,1203.48 2099.62,1203.48 2100.21,1203.48 2100.8,1203.48 2101.38,1203.48 2101.97,1203.48 2102.55,1203.48 2103.14,1203.48 2103.73,1203.48 2104.31,1203.48 2104.9,1203.48 2105.49,1203.48 2106.07,1203.48 2106.66,1203.48 2107.25,1203.48 2107.83,1203.48 2108.42,1203.48 2109.01,1203.48 2109.59,1203.48 2110.18,1203.48 2110.76,1203.48 2111.35,1203.48 2111.94,1203.48 2112.52,1203.48 2113.11,1203.48 2113.7,1203.48 2114.28,1203.48 2114.87,1203.48 2115.46,1203.48 2116.04,1203.48 2116.63,1203.48 2117.22,1203.48 2117.8,1203.48 2118.39,1203.48 2118.97,1203.48 2119.56,1203.48 2120.15,1203.48 2120.73,1203.48 2121.32,1203.48 2121.91,1203.48 2122.49,1203.48 2123.08,1203.48 2123.67,1203.48 2124.25,1203.48 2124.84,1203.48 2125.42,1203.48 2126.01,1203.48 2126.6,1203.48 2127.18,1203.48 2127.77,1203.48 2128.36,1203.48 2128.94,1203.48 2129.53,1203.48 2130.12,1203.48 2130.7,1203.48 2131.29,1203.48 2131.88,1203.48 2132.46,1203.48 2133.05,1203.48 2133.63,1203.48 2134.22,1203.48 2134.81,1203.48 2135.39,1203.48 2135.98,1203.48 2136.57,1203.48 2137.15,1203.48 2137.74,1203.48 2138.33,1203.48 2138.91,1203.48 2139.5,1203.48 2140.09,1203.48 2140.67,1203.48 2141.26,1203.48 2141.84,1203.48 2142.43,1203.48 2143.02,1203.48 2143.6,1203.48 2144.19,1203.48 2144.78,1203.48 2145.36,1203.48 2145.95,1203.48 2146.54,1203.48 2147.12,1203.48 2147.71,1203.48 2148.3,1203.48 2148.88,1203.48 2149.47,1203.48 2150.05,1203.48 2150.64,1203.48 2151.23,1203.48 2151.81,1203.48 2152.4,1203.48 2152.99,1203.48 2153.57,1203.48 2154.16,1203.48 2154.75,1203.48 2155.33,1203.48 2155.92,1203.48 2156.5,1203.48 2157.09,1203.48 2157.68,1203.48 2158.26,1203.48 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.52,1186.57 1401.4,899.083 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1219.86 985.439,1186.57 2158.26,1186.57 2158.26,1219.86 985.439,1219.86 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip143\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip143)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1471.99 162.114,-2776.15 162.673,-3954.63 163.232,-5078.99 163.792,-6107.58 164.351,-7046.72 164.91,-7854.03 165.469,-8569.2 166.029,-9280.66 166.588,-9903.57 167.147,-9416.59 167.706,-9952.76 168.266,-10445.8 168.825,-10885 169.384,-11273.8 169.943,-10852 170.503,-11181.5 171.062,-11458.7 171.621,-11706.5 172.18,-11907.3 172.74,-12083.8 173.299,-12228 173.858,-11847.8 174.417,-11503.5 174.977,-11182.5 175.536,-11261.8 176.095,-11328 176.655,-11357.5 177.214,-11053.3 177.773,-10759.3 178.332,-10750.8 178.892,-10468.4 179.451,-10188.7 180.01,-10127.3 180.569,-10061.6 181.129,-9983.24 181.688,-9714.89 182.247,-9605.23 182.806,-9338.41 183.366,-8925.92 183.925,-8822.12 184.484,-8575.11 185.043,-8473.46 185.603,-8368.51 186.162,-8138.3 186.721,-8025.47 187.28,-7796.4 187.84,-7584.38 188.399,-7280 188.958,-7176.94 189.517,-6985.82 190.077,-6872.07 190.636,-6760.12 191.195,-6571.38 191.754,-6236.5 192.314,-6121.87 192.873,-5940.76 193.432,-5822.52 193.991,-5710.23 194.551,-5593.11 195.11,-5416.14 195.669,-5229.81 196.228,-4944.91 196.788,-4782.45 197.347,-4670.72 197.906,-4561.62 198.465,-4450.65 199.025,-4241.11 199.584,-4134.19 200.143,-4025.39 200.702,-3872.71 201.262,-3766.1 201.821,-3539.84 202.38,-3357.65 202.939,-3188.2 203.499,-3019.97 204.058,-2823.22 204.617,-2742.91 205.176,-2597.68 205.736,-2454.16 206.295,-2382.31 206.854,-2244.25 207.413,-1982.73 207.973,-1863.16 208.532,-1774.22 209.091,-1658.81 209.65,-1604.94 210.21,-1548.09 210.769,-1463.84 211.328,-1385.94 211.887,-1337.25 212.447,-1261.36 213.006,-1215.2 213.565,-1136.8 214.124,-986.143 214.684,-897.071 215.243,-782.175 215.802,-722.945 216.361,-616.714 216.921,-562.664 217.48,-503.492 218.039,-424.145 218.598,-346.757 219.158,-295.767 219.717,-243.909 220.276,-173.201 220.835,-151.879 221.395,-17.3644 221.954,69.8002 222.513,105.397 223.072,182.717 223.632,196.321 224.191,256.173 224.75,268.641 225.309,278.369 225.869,311.505 226.428,323.657 226.987,376.756 227.546,421.281 228.106,425.417 228.665,433.852 229.224,441.987 229.783,469.395 230.343,471.007 230.902,498.638 231.461,525.426 232.02,553.832 232.58,538.479 233.139,525.491 233.698,577.142 234.257,586.669 234.817,674.144 235.376,714.673 235.935,714.763 236.494,750.384 237.054,731.978 237.613,772.697 238.172,812.565 238.731,832.026 239.291,834.93 239.85,855.439 240.409,892.667 240.968,928.357 241.528,944.623 242.087,955.37 242.646,963.008 243.205,973.942 243.765,1039.94 244.324,1025.97 244.883,1033.45 245.442,1043.01 246.002,1053.33 246.561,1041.52 247.12,1068.07 247.679,1071.8 248.239,1093.77 248.798,1101.91 249.357,1070.9 249.916,1077.76 250.476,1068.08 251.035,1093.22 251.594,1084.88 252.153,1076.74 252.713,1049.59 253.272,1060.99 253.831,1052.78 254.39,1029.51 254.95,1005.92 255.509,1019.89 256.068,1034.77 256.627,1060.87 257.187,1105.69 257.746,1109.63 258.305,1101.99 258.864,1163.75 259.424,1130.37 259.983,1152.02 260.542,1137.15 261.101,1123.68 261.661,1130.17 262.22,1121.04 262.779,1113.65 263.338,1120.27 263.898,1109.43 264.457,1100.67 265.016,1090.35 265.575,1135.76 266.135,1140.63 266.694,1163.41 267.253,1118.74 267.812,1108.2 268.372,1148.93 268.931,1156.72 269.49,1165.48 270.049,1154.38 270.609,1138.27 271.168,1110.35 271.727,1152.02 272.286,1158.95 272.846,1197.21 273.405,1201.82 273.964,1219.88 274.523,1223.02 275.083,1227.46 275.642,1222.84 276.201,1240.7 276.76,1208.74 277.32,1241.93 277.879,1207.49 278.438,1239.04 278.997,1270.94 279.557,1301.68 280.116,1251 280.675,1246.8 281.234,1229.21 281.794,1228.62 282.353,1163.51 282.912,1133.05 283.471,1107.19 284.031,1095.93 284.59,1053.83 285.149,1064.88 285.708,1074.12 286.268,1064.33 286.827,1039.76 287.386,1064.22 287.945,1071.44 288.505,1057.38 289.064,1051.16 289.623,1026.76 290.182,1020.64 290.742,1015.76 291.301,1024.39 291.86,1049.75 292.419,1043.75 292.979,1053.44 293.538,1046.37 294.097,1006.57 294.656,987.304 295.216,997.809 295.775,974.33 296.334,949.649 296.893,899.034 297.453,883.379 298.012,887.191 298.571,919.383 299.13,901.287 299.69,898.486 300.249,933.758 300.808,948.228 301.368,960.107 301.927,960.723 302.486,1026.33 303.045,1034.92 303.605,1044.43 304.164,1024.46 304.723,1037.07 305.282,1017.6 305.842,1010.88 306.401,1003.44 306.96,985.154 307.519,981.42 308.079,1023.68 308.638,985.306 309.197,979.679 309.756,992.176 310.316,1017.62 310.875,1011.08 311.434,1017.42 311.993,1010.76 312.553,1019.82 313.112,1012.99 313.671,960.936 314.23,942.034 314.79,954.398 315.349,949.319 315.908,913.456 316.467,909.547 317.027,875.495 317.586,893.774 318.145,894.065 318.704,893.67 319.264,906.512 319.823,921.841 320.382,956.851 320.941,935.946 321.501,950.405 322.06,895.094 322.619,897.724 323.178,913.702 323.738,929.025 324.297,926.489 324.856,970.191 325.415,962.413 325.975,975.301 326.534,1017.91 327.093,1008.36 327.652,970.361 328.212,981.708 328.771,943.835 329.33,955.248 329.889,951.102 330.449,914.267 331.008,895.128 331.567,894.778 332.126,910.332 332.686,926.421 333.245,889.713 333.804,871.847 334.363,873.084 334.923,900.361 335.482,882.803 336.041,879.257 336.6,845.105 337.16,879.027 337.719,879.662 338.278,894.142 338.837,905.476 339.397,855.246 339.956,853.447 340.515,883.086 341.074,895.305 341.634,910.777 342.193,905.371 342.752,918.144 343.311,943.306 343.871,973.835 344.43,969.634 344.989,964.337 345.548,960.187 346.108,970.302 346.667,932.744 347.226,925.074 347.785,903.638 348.345,944.967 348.904,922.442 349.463,916.391 350.022,945.068 350.582,938.684 351.141,969.466 351.7,965.394 352.259,991.023 352.819,981.126 353.378,1005.25 353.937,1014.81 354.496,1038.91 355.056,1014.06 355.615,1023.45 356.174,997.115 356.733,990.263 357.293,966.251 357.852,958.549 358.411,932.834 358.97,961.485 359.53,958.351 360.089,982.385 360.648,991.364 361.207,1013.38 361.767,985.722 362.326,1007.24 362.885,996.107 363.444,956.863 364.004,951.856 364.563,891.869 365.122,936.678 365.681,962.121 366.241,943.107 366.8,1001.22 367.359,1010.1 367.918,981.683 368.478,970.914 369.037,943.084 369.596,953.585 370.155,930.781 370.715,923.831 371.274,912.559 371.833,890.392 372.392,883.784 372.952,829.585 373.511,825.749 374.07,824.925 374.629,824.094 375.189,789.6 375.748,787.419 376.307,752.684 376.866,753.644 377.426,752.226 377.985,738.679 378.544,756.2 379.103,723.056 379.663,747.226 380.222,768.8 380.781,756.654 381.34,759.393 381.9,728.069 382.459,746.873 383.018,750.492 383.577,734.067 384.137,771.975 384.696,776.27 385.255,778.421 385.814,795.659 386.374,779.936 386.933,781.018 387.492,781.248 388.051,766.322 388.611,768.399 389.17,701.897 389.729,722.091 390.288,707.958 390.848,708.82 391.407,696.1 391.966,670.766 392.525,693.515 393.085,684.299 393.644,704.302 394.203,695.403 394.762,716.872 395.322,721.621 395.881,741.505 396.44,732.333 396.999,700.751 397.559,738.102 398.118,774.663 398.677,742.531 399.236,777.547 399.796,761.039 400.355,762.067 400.914,759.279 401.473,762.376 402.033,779.708 402.592,796.018 403.151,814.855 403.71,812.938 404.27,816.052 404.829,815.14 405.388,798.519 405.947,765.066 406.507,767.455 407.066,767.266 407.625,754.664 408.184,754.282 408.744,758.805 409.303,794.596 409.862,799.803 410.421,802.7 410.981,816.248 411.54,794.38 412.099,811.505 412.658,816.241 413.218,812.403 413.777,812.369 414.336,874.073 414.895,853.431 415.455,837.485 416.014,880.931 416.573,859.784 417.132,857.065 417.692,820.467 418.251,832.608 418.81,843.821 419.369,811.683 419.929,841.377 420.488,855.494 421.047,898.163 421.606,891.45 422.166,884.801 422.725,892.849 423.284,899.203 423.843,894.006 424.403,903.672 424.962,910.988 425.521,933.051 426.08,909.227 426.64,899.07 427.199,895.219 427.758,870.85 428.318,860.928 428.877,851.575 429.436,879.95 429.995,887.659 430.555,913.142 431.114,843.057 431.673,840.409 432.232,838.437 432.792,849.274 433.351,815.677 433.91,815.338 434.469,762.699 435.029,777.795 435.588,776.754 436.147,759.316 436.706,759.598 437.266,741.798 437.825,743.893 438.384,778.645 438.943,791.758 439.503,757.634 440.062,822.751 440.621,869.783 441.18,880.685 441.74,908.195 442.299,885.27 442.858,880.181 443.417,808.581 443.977,886.797 444.536,882.923 445.095,858.873 445.654,834.866 446.214,848.76 446.773,841.018 447.332,850.919 447.891,877.426 448.451,859.57 449.01,805.19 449.569,753.786 450.128,770.472 450.688,750.675 451.247,749.841 451.806,718.551 452.365,704.25 452.925,691.319 453.484,727.645 454.043,696.946 454.602,634.386 455.162,625.457 455.721,614.145 456.28,618.068 456.839,657.004 457.399,694.257 457.958,711.699 458.517,699.979 459.076,717.539 459.636,686.237 460.195,707.713 460.754,681.417 461.313,701.615 461.873,717.631 462.432,732.863 462.991,762.018 463.55,760.456 464.11,790.499 464.669,770.595 465.228,768.13 465.787,753.581 466.347,753.2 466.906,747.367 467.465,745.655 468.024,745.799 468.584,730.729 469.143,762.047 469.702,777.483 470.261,758.365 470.821,739.076 471.38,753.439 471.939,736.442 472.498,737.536 473.058,752.522 473.617,734.754 474.176,716.926 474.735,714.014 475.295,729.643 475.854,680.135 476.413,700.785 476.972,705.55 477.532,689.304 478.091,708.523 478.65,708.772 479.209,729.651 479.769,712.454 480.328,699.841 480.887,704.192 481.446,671.649 482.006,658.541 482.565,662.808 483.124,649.444 483.683,668.482 484.243,671.585 484.802,674.548 485.361,677.72 485.92,711.39 486.48,713.252 487.039,715.445 487.598,735.863 488.157,756.564 488.717,721.47 489.276,753.045 489.835,767.834 490.394,765.289 490.954,746.434 491.513,725.783 492.072,725.734 492.631,730.801 493.191,703.271 493.75,688.879 494.309,691.06 494.868,692.206 495.428,712.749 495.987,791.17 496.546,804.139 497.105,785.048 497.665,780.085 498.224,779.045 498.783,740.348 499.342,755.567 499.902,783.232 500.461,796.639 501.02,795.425 501.579,773.075 502.139,785.963 502.698,765.509 503.257,779.463 503.816,778.105 504.376,761.131 504.935,756.817 505.494,754.575 506.053,721.76 506.613,738.156 507.172,752.484 507.731,768.762 508.29,766.763 508.85,814.221 509.409,779.587 509.968,792.898 510.527,790.092 511.087,804.652 511.646,797.967 512.205,744.094 512.764,745.7 513.324,777.659 513.883,792.445 514.442,803.495 515.001,782.511 515.561,777.738 516.12,758.499 516.679,774.431 517.238,738.818 517.798,753.602 518.357,750.369 518.916,766.332 519.475,797.003 520.035,793.577 520.594,804.491 521.153,814.335 521.712,760.493 522.272,805.364 522.831,781.987 523.39,798.347 523.949,811.464 524.509,839.852 525.068,881.451 525.627,887.204 526.186,862.388 526.746,855.344 527.305,832.901 527.864,825.433 528.423,818.176 528.983,778.512 529.542,775.613 530.101,776.066 530.66,757.806 531.22,769.167 531.779,796.604 532.338,809.459 532.897,825.649 533.457,817.356 534.016,795.005 534.575,758.038 535.134,757.672 535.694,786.611 536.253,767.338 536.812,782.268 537.371,761.821 537.931,745.428 538.49,713.84 539.049,730.015 539.608,712.725 540.168,726.021 540.727,705.549 541.286,770.304 541.845,804.183 542.405,814.242 542.964,794.556 543.523,792.236 544.082,773.437 544.642,752.287 545.201,702.197 545.76,721.204 546.319,722.496 546.879,722.333 547.438,706.662 547.997,707.761 548.556,721.856 549.116,722.961 549.675,741.026 550.234,753.845 550.793,772.073 551.353,785.545 551.912,766.135 552.471,765.379 553.031,748.374 553.59,734.292 554.149,733.229 554.708,750.267 555.268,749.205 555.827,715.856 556.386,719.474 556.945,701.001 557.505,715.726 558.064,715.81 558.623,702.44 559.182,737.687 559.742,768.372 560.301,735.513 560.86,747.875 561.419,744.976 561.979,760.485 562.538,788.898 563.097,752.752 563.656,735.832 564.216,736.372 564.775,703.788 565.334,671.448 565.893,640.412 566.453,659.706 567.012,728.941 567.571,711.901 568.13,694.992 568.69,710.777 569.249,726.742 569.808,725.154 570.367,773.712 570.927,784.515 571.486,784.184 572.045,763.69 572.604,763.222 573.164,744.08 573.723,742.391 574.282,724.201 574.841,711.655 575.401,742.274 575.96,724.907 576.519,707.622 577.078,705.004 577.638,686.483 578.197,672.55 578.756,676.175 579.315,658.894 579.875,697.202 580.434,696.037 580.993,682.814 581.552,733.243 582.112,733.311 582.671,715.583 583.23,717 583.789,715.842 584.349,733.285 584.908,751.263 585.467,732.898 586.026,782.547 586.586,794.278 587.145,787.096 587.704,801.606 588.263,814.237 588.823,825.21 589.382,834.385 589.941,824.967 590.5,833.986 591.06,825.203 591.619,831.913 592.178,824.271 592.737,834.409 593.297,811.01 593.856,770.324 594.415,767.954 594.974,813.172 595.534,793.327 596.093,788.727 596.652,816.415 597.211,793.558 597.771,754.757 598.33,770.492 598.889,764.512 599.448,794.203 600.008,747.583 600.567,729.547 601.126,710.859 601.685,693.562 602.245,729.186 602.804,713.237 603.363,696.826 603.922,665.454 604.482,635.572 605.041,655.418 605.6,656.863 606.159,625.265 606.719,694.238 607.278,676.582 607.837,661.291 608.396,662.876 608.956,646.967 609.515,650.88 610.074,670.715 610.633,670.007 611.193,672.164 611.752,672.885 612.311,708.472 612.87,707.522 613.43,741.188 613.989,724.116 614.548,723.459 615.107,753.166 615.667,767.163 616.226,731.573 616.785,729.611 617.344,726.185 617.904,728.32 618.463,711.886 619.022,727.356 619.581,755.901 620.141,753.632 620.7,749.971 621.259,750.643 621.818,751.058 622.378,713.052 622.937,728.434 623.496,774.656 624.055,787.052 624.615,752.231 625.174,718.557 625.733,718.17 626.292,683.395 626.852,668.539 627.411,675.387 627.97,693.221 628.529,694.615 629.089,664.147 629.648,651.434 630.207,670.091 630.766,659.192 631.326,647.546 631.885,632.895 632.444,653.151 633.003,655.476 633.563,662.731 634.122,648.128 634.681,667.089 635.24,700.898 635.8,701.447 636.359,701.696 636.918,733.902 637.477,679.968 638.037,697.618 638.596,752.84 639.155,701.093 639.714,655.038 640.274,638.957 640.833,675.438 641.392,676.852 641.951,663.891 642.511,682.26 643.07,701.609 643.629,703.696 644.188,703.415 644.748,720.332 645.307,718.442 645.866,698.267 646.425,665.916 646.985,666.931 647.544,651.927 648.103,634.463 648.662,654.991 649.222,641.79 649.781,626.473 650.34,632.052 650.899,638.17 651.459,639.6 652.018,613.203 652.577,615.022 653.136,651.841 653.696,668.301 654.255,718.191 654.814,716.23 655.373,716.828 655.933,698.966 656.492,715.074 657.051,733.65 657.61,701.615 658.17,681.786 658.729,681.992 659.288,665.447 659.847,682.261 660.407,668.392 660.966,685.219 661.525,687.842 662.084,705.713 662.644,704.765 663.203,689.903 663.762,686.769 664.321,706.343 664.881,689.959 665.44,673.771 665.999,658.282 666.558,659.778 667.118,645.233 667.677,650.589 668.236,642.914 668.795,628.921 669.355,633.715 669.914,652.352 670.473,653.167 671.032,686.685 671.592,686.975 672.151,688.826 672.71,720.721 673.269,719.498 673.829,700.093 674.388,700.051 674.947,697.197 675.506,681.927 676.066,668.88 676.625,670.54 677.184,669.649 677.743,673.808 678.303,693.466 678.862,693.446 679.421,678.283 679.981,678.985 680.54,699.875 681.099,701.484 681.658,751.975 682.218,736.251 682.777,670.252 683.336,703.681 683.895,736.378 684.455,732.796 685.014,715.139 685.573,715.103 686.132,728.368 686.692,712.379 687.251,696.051 687.81,696.429 688.369,696.123 688.929,712.734 689.488,727.478 690.047,711.869 690.606,711.76 691.166,694.402 691.725,710.616 692.284,674.246 692.843,674.549 693.403,704.468 693.962,688.076 694.521,671.239 695.08,674.55 695.64,679.646 696.199,683.843 696.758,636.792 697.317,606.26 697.877,628.539 698.436,633.162 698.995,669.553 699.554,669.826 700.114,671.382 700.673,674.358 701.232,722.068 701.791,737.264 702.351,751.837 702.91,748.126 703.469,778.363 704.028,775.363 704.588,774.108 705.147,770.789 705.706,784.332 706.265,781.209 706.825,792.24 707.384,739.081 707.943,720.842 708.502,723.292 709.062,690.967 709.621,722.091 710.18,737.805 710.739,752.768 711.299,747.778 711.858,710.604 712.417,692.678 712.976,707.963 713.536,719.285 714.095,685.781 714.654,702.017 715.213,684.786 715.773,685.361 716.332,703.04 716.891,705.58 717.45,721.851 718.01,687.126 718.569,639.036 719.128,635.246 719.687,670.691 720.247,668.723 720.806,669.697 721.365,655.865 721.924,655.455 722.484,640.539 723.043,629.479 723.602,631.833 724.161,619.221 724.721,608.101 725.28,614.037 725.839,620.05 726.398,622.246 726.958,642.782 727.517,660.348 728.076,680.181 728.635,667.113 729.195,683.208 729.754,685.99 730.313,687.989 730.872,705.337 731.432,706.006 731.991,706.968 732.55,689.203 733.109,706.083 733.669,705.9 734.228,657.767 734.787,627.056 735.346,649.294 735.906,646.972 736.465,647.667 737.024,631.273 737.583,665.634 738.143,683.38 738.702,666.961 739.261,651.329 739.82,654.095 740.38,622.657 740.939,640.816 741.498,645.078 742.057,663.643 742.617,696.318 743.176,695.679 743.735,713.319 744.294,712.728 744.854,713.763 745.413,711.414 745.972,707.398 746.531,705.511 747.091,739.089 747.65,753.667 748.209,716.239 748.768,729.209 749.328,709.056 749.887,707.078 750.446,688.425 751.005,737.958 751.565,735.175 752.124,718.564 752.683,748.689 753.242,759.814 753.802,754.997 754.361,749.971 754.92,782.2 755.479,813.406 756.039,857.069 756.598,848.018 757.157,835.745 757.716,813.291 758.276,793.474 758.835,772.197 759.394,764.397 759.953,790.165 760.513,817.191 761.072,841.575 761.631,832.862 762.19,825.452 762.75,802.509 763.309,796.209 763.868,793.887 764.427,809.555 764.987,820.334 765.546,796.519 766.105,791.594 766.664,786.47 767.224,746.831 767.783,729.667 768.342,713.761 768.901,698.159 769.461,713.287 770.02,699.143 770.579,680.065 771.138,632.354 771.698,618.894 772.257,623.182 772.816,611.353 773.375,617.559 773.935,603.999 774.494,608.645 775.053,597.845 775.612,600.045 776.172,616.522 776.731,635.018 777.29,623.468 777.849,609.681 778.409,598.325 778.968,604.893 779.527,593.028 780.086,597.647 780.646,602.801 781.205,594.804 781.764,613.868 782.323,601.86 782.883,619.905 783.442,671.256 784.001,624.361 784.56,624.552 785.12,610.11 785.679,597.27 786.238,587.399 786.797,591.439 787.357,644.064 787.916,682.805 788.475,683.364 789.034,667.991 789.594,685.151 790.153,701.079 790.712,718.048 791.271,702.183 791.831,701.353 792.39,684.273 792.949,684.471 793.508,719.753 794.068,734.351 794.627,730.763 795.186,740.794 795.745,758.259 796.305,803.192 796.864,780.842 797.423,744.766 797.982,741.657 798.542,721.742 799.101,702.971 799.66,668.283 800.219,667.348 800.779,666.625 801.338,653.357 801.897,672.188 802.456,706.052 803.016,703.103 803.575,687.539 804.134,699.562 804.693,683.259 805.253,685.946 805.812,720.111 806.371,732.049 806.931,778.706 807.49,770.673 808.049,810.463 808.608,817.979 809.168,793.514 809.727,789.254 810.286,753.819 810.845,720.115 811.405,718.578 811.964,736.173 812.523,719.966 813.082,684.965 813.642,703.415 814.201,735.564 814.76,714.908 815.319,713.537 815.879,743.727 816.438,708.419 816.997,742.072 817.556,725.064 818.116,705.99 818.675,693.424 819.234,675.647 819.793,658.493 820.353,672.865 820.912,671.23 821.471,658.342 822.03,663.744 822.59,647.309 823.149,633.346 823.708,639.386 824.267,644.506 824.827,632.433 825.386,653.526 825.945,671.009 826.504,654.916 827.064,654.51 827.623,657.033 828.182,676.476 828.741,675.792 829.301,659.768 829.86,657.931 830.419,661.885 830.978,694.116 831.538,660.985 832.097,674.775 832.656,689.074 833.215,704.75 833.775,656.172 834.334,593.828 834.893,597.333 835.452,634.636 836.012,634.504 836.571,621.657 837.13,624.686 837.689,625.848 838.249,661.855 838.808,649.946 839.367,686.209 839.926,685.812 840.486,672.176 841.045,672.696 841.604,659.881 842.163,661.008 842.723,651.205 843.282,653.665 843.841,641.64 844.4,642.751 844.96,647.895 845.519,619.914 846.078,652.879 846.637,635.813 847.197,621.814 847.756,640.378 848.315,660.38 848.874,645.492 849.434,631.448 849.993,654.57 850.552,654.87 851.111,641.055 851.671,672.416 852.23,721.208 852.789,734.766 853.348,717.438 853.908,714.162 854.467,726.435 855.026,757.817 855.585,755.906 856.145,783.731 856.704,792.816 857.263,786.418 857.822,761.365 858.382,745.318 858.941,742.688 859.5,739.159 860.059,719.189 860.619,667.704 861.178,667.158 861.737,649.912 862.296,664.477 862.856,648.585 863.415,647.849 863.974,663.889 864.533,681.079 865.093,680.175 865.652,663.531 866.211,665.765 866.77,668.509 867.33,641.18 867.889,627.304 868.448,644.139 869.007,661.306 869.567,661.252 870.126,694.738 870.685,677.642 871.244,661.717 871.804,649.883 872.363,669.873 872.922,717.615 873.481,700.269 874.041,701.652 874.6,665.183 875.159,684.241 875.718,682.315 876.278,598.525 876.837,573.507 877.396,594.959 877.955,615.406 878.515,619.743 879.074,641.486 879.633,657.255 880.192,641.72 880.752,626.358 881.311,661.258 881.87,692.926 882.429,661.381 882.989,632.119 883.548,651.367 884.107,653.898 884.666,626.566 885.226,646.179 885.785,679.745 886.344,649.622 886.903,669.696 887.463,703.044 888.022,704.78 888.581,701.82 889.14,704.548 889.7,688.358 890.259,671.877 890.818,671.01 891.377,656.828 891.937,677.436 892.496,710.08 893.055,691.151 893.614,688.56 894.174,721.287 894.733,719.512 895.292,734.513 895.851,718.433 896.411,652.688 896.97,655.276 897.529,674.948 898.088,660.382 898.648,665.598 899.207,669.009 899.766,685.966 900.325,687.45 900.885,700.612 901.444,681.549 902.003,669.846 902.562,669.924 903.122,671.137 903.681,686.728 904.24,720.016 904.799,685.729 905.359,687.749 905.918,704.734 906.477,686.411 907.036,703.324 907.596,733.275 908.155,732.769 908.714,714.736 909.273,712.935 909.833,681.84 910.392,680.552 910.951,713.616 911.51,698.639 912.07,731.351 912.629,794.176 913.188,790.188 913.747,803.132 914.307,800.224 914.866,807.855 915.425,767.159 915.984,759.471 916.544,756.057 917.103,770.972 917.662,783.451 918.221,809.994 918.781,801.455 919.34,762.554 919.899,754.851 920.458,764.973 921.018,761.365 921.577,776.851 922.136,772.338 922.695,752.019 923.255,761.995 923.814,726.087 924.373,738.674 924.932,751.354 925.492,763.265 926.051,762.903 926.61,728.419 927.169,709.684 927.729,704.442 928.288,718.504 928.847,716.263 929.406,697.615 929.966,712.549 930.525,757.657 931.084,754.181 931.644,779.585 932.203,791.647 932.762,765.994 933.321,743.759 933.881,738.833 934.44,750.019 934.999,699.304 935.558,665.962 936.118,651.648 936.677,686.161 937.236,683.082 937.795,735.277 938.355,718.278 938.914,720.101 939.473,702.869 940.032,731.26 940.592,759.987 941.151,723.657 941.71,740.152 942.269,752.959 942.829,763.853 943.388,724.068 943.947,754.305 944.506,731.826 945.066,730.043 945.625,730.063 946.184,759.14 946.743,772.892 947.303,766.649 947.862,760.469 948.421,774.216 948.98,732.37 949.54,731.035 950.099,744.114 950.658,690.847 951.217,644.944 951.777,660.001 952.336,629.159 952.895,615.82 953.454,636.029 954.014,641.142 954.573,627.197 955.132,628.763 955.691,614.535 956.251,602.999 956.81,596.402 957.369,586.622 957.928,629.092 958.488,630.557 959.047,584.248 959.606,542.182 960.165,562.371 960.725,585.122 961.284,592.294 961.843,632.149 962.402,632.999 962.962,651.268 963.521,652.699 964.08,633.811 964.639,651.802 965.199,653.264 965.758,688.539 966.317,688.631 966.876,668.455 967.436,651.041 967.995,703.574 968.554,702.255 969.113,654.015 969.673,672.885 970.232,690.083 970.791,705.388 971.35,733.927 971.91,775.708 972.469,772 973.028,769.063 973.587,776.771 974.147,772.776 974.706,787.61 975.265,749.584 975.824,746.161 976.384,676.393 976.943,660.223 977.502,646.833 978.061,645.979 978.621,666.258 979.18,683.449 979.739,651.88 980.298,656.821 980.858,654.946 981.417,655.039 981.976,637.339 982.535,639.768 983.095,625.905 983.654,646.778 984.213,647.175 984.772,638.353 985.332,625.729 985.891,612.691 986.45,616.983 987.009,622.126 987.569,643.138 988.128,631.436 988.687,635.972 989.246,658.294 989.806,693.526 990.365,708.761 990.924,694.169 991.483,697.773 992.043,710.252 992.602,694.637 993.161,708.005 993.72,759.583 994.28,753.116 994.839,749.518 995.398,743.635 995.957,740.877 996.517,706.487 997.076,705.003 997.635,721.051 998.194,735.223 998.754,748.665 999.313,744.837 999.872,743.096 1000.43,757.824 1000.99,740.914 1001.55,736.699 1002.11,732.83 1002.67,748.713 1003.23,746.058 1003.79,779.049 1004.35,740.155 1004.91,706.926 1005.46,707.716 1006.02,657.35 1006.58,658.777 1007.14,676.9 1007.7,676.986 1008.26,677.572 1008.82,693.304 1009.38,692.987 1009.94,712.927 1010.5,720.22 1011.06,698.306 1011.62,697.313 1012.18,697.299 1012.73,710.119 1013.29,689.895 1013.85,640.077 1014.41,643.213 1014.97,660.247 1015.53,678.235 1016.09,696.54 1016.65,677.452 1017.21,645.71 1017.77,714.975 1018.33,713.565 1018.89,697.141 1019.45,681.981 1020.01,650.196 1020.56,634.078 1021.12,639.438 1021.68,675.823 1022.24,690.772 1022.8,705.694 1023.36,690.127 1023.92,707.321 1024.48,706.314 1025.04,690.337 1025.6,722.901 1026.16,736.373 1026.72,732.28 1027.28,727.159 1027.83,696.319 1028.39,695.262 1028.95,649.853 1029.51,684.777 1030.07,685.704 1030.63,650.429 1031.19,650.912 1031.75,634.941 1032.31,635.399 1032.87,687.867 1033.43,689.176 1033.99,688.231 1034.55,686.846 1035.1,687.12 1035.66,704.413 1036.22,720.72 1036.78,719.545 1037.34,720.772 1037.9,720.114 1038.46,700.702 1039.02,667.263 1039.58,667.318 1040.14,653.03 1040.7,637.063 1041.26,618.873 1041.82,638.919 1042.38,657.157 1042.93,676.248 1043.49,723.683 1044.05,739.303 1044.61,735.894 1045.17,747.307 1045.73,792.095 1046.29,816.157 1046.85,807.218 1047.41,732.727 1047.97,679.945 1048.53,664.833 1049.09,667.479 1049.65,686.204 1050.2,650.272 1050.76,636.469 1051.32,670.935 1051.88,671.133 1052.44,654.033 1053,641.076 1053.56,657.225 1054.12,659.48 1054.68,670.855 1055.24,655.714 1055.8,656.517 1056.36,626.652 1056.92,664.041 1057.48,664.565 1058.03,648.261 1058.59,651.291 1059.15,652.505 1059.71,671.704 1060.27,673.474 1060.83,670.94 1061.39,704.578 1061.95,670.302 1062.51,622.132 1063.07,628.68 1063.63,598.968 1064.19,603.547 1064.75,654.105 1065.3,643.815 1065.86,643.443 1066.42,678.746 1066.98,665.428 1067.54,683.005 1068.1,684.142 1068.66,663.011 1069.22,680.593 1069.78,697.617 1070.34,683.702 1070.9,703.784 1071.46,740.076 1072.02,770.033 1072.57,765.25 1073.13,748.155 1073.69,763.997 1074.25,758.657 1074.81,740.075 1075.37,703.501 1075.93,720.999 1076.49,719.89 1077.05,715.524 1077.61,697.016 1078.17,730.479 1078.73,693.886 1079.29,675.861 1079.85,675.328 1080.4,674.245 1080.96,710.431 1081.52,708.26 1082.08,724.625 1082.64,706.535 1083.2,721.788 1083.76,707.124 1084.32,724.97 1084.88,708.739 1085.44,709.708 1086,678.621 1086.56,709.665 1087.12,708.387 1087.67,675.609 1088.23,626.611 1088.79,644.05 1089.35,614.836 1089.91,635.017 1090.47,637.174 1091.03,657.534 1091.59,678.876 1092.15,698.4 1092.71,686.852 1093.27,704.183 1093.83,701.362 1094.39,666.766 1094.94,637.343 1095.5,639.435 1096.06,642.283 1096.62,643.307 1097.18,648.648 1097.74,633.486 1098.3,651.671 1098.86,619.986 1099.42,627.835 1099.98,648.348 1100.54,667.503 1101.1,668.365 1101.66,652.999 1102.22,672.123 1102.77,641.026 1103.33,659.229 1103.89,674.729 1104.45,659.405 1105.01,675.053 1105.57,677.994 1106.13,680.364 1106.69,713.833 1107.25,681.49 1107.81,696.143 1108.37,696.749 1108.93,685.005 1109.49,701.742 1110.04,668.839 1110.6,654.397 1111.16,653.985 1111.72,658.617 1112.28,673.116 1112.84,704.138 1113.4,700.78 1113.96,684.125 1114.52,683.112 1115.08,699.658 1115.64,686.572 1116.2,687.934 1116.76,721.36 1117.31,721.304 1117.87,704.92 1118.43,707.426 1118.99,706.156 1119.55,688.036 1120.11,703.327 1120.67,702.182 1121.23,744.456 1121.79,759.118 1122.35,739.399 1122.91,766.921 1123.47,776.875 1124.03,737.712 1124.59,718.837 1125.14,699.09 1125.7,679.157 1126.26,694.758 1126.82,676.539 1127.38,657.994 1127.94,675.071 1128.5,677.119 1129.06,694.521 1129.62,723.657 1130.18,702.92 1130.74,715.462 1131.3,716.929 1131.86,683.456 1132.41,671.341 1132.97,654.814 1133.53,622.484 1134.09,624.712 1134.65,575.103 1135.21,596.794 1135.77,615.672 1136.33,619.294 1136.89,621.286 1137.45,624.086 1138.01,594.963 1138.57,565.436 1139.13,585.206 1139.68,574.015 1140.24,595.392 1140.8,566.883 1141.36,570.924 1141.92,593.826 1142.48,600.09 1143.04,621.621 1143.6,625.872 1144.16,648.792 1144.72,652.425 1145.28,670.289 1145.84,704.557 1146.4,701.758 1146.96,668.134 1147.51,640.507 1148.07,639.753 1148.63,657.206 1149.19,674.231 1149.75,661.955 1150.31,648.938 1150.87,652.901 1151.43,657.254 1151.99,658.156 1152.55,655.334 1153.11,676.786 1153.67,693.63 1154.23,725.777 1154.78,724.155 1155.34,687.671 1155.9,719.276 1156.46,701.071 1157.02,719.438 1157.58,669.371 1158.14,637.492 1158.7,608.373 1159.26,611.977 1159.82,661.845 1160.38,664.693 1160.94,648.147 1161.5,634.205 1162.05,637.408 1162.61,652.347 1163.17,670.463 1163.73,674.416 1164.29,741.779 1164.85,739.791 1165.41,753.828 1165.97,780.832 1166.53,742.522 1167.09,751.272 1167.65,728.124 1168.21,708.88 1168.77,690.672 1169.33,690.661 1169.88,717.015 1170.44,695.704 1171,695.432 1171.56,678.441 1172.12,695.983 1172.68,707.362 1173.24,691.158 1173.8,689.76 1174.36,686.693 1174.92,704.917 1175.48,732.977 1176.04,732.273 1176.6,713.181 1177.15,694.398 1177.71,679.244 1178.27,663.147 1178.83,647.37 1179.39,647.936 1179.95,664.375 1180.51,668.423 1181.07,669.142 1181.63,670.34 1182.19,655.454 1182.75,627.604 1183.31,650.165 1183.87,638.651 1184.43,658.737 1184.98,646.859 1185.54,616.554 1186.1,606.6 1186.66,611.182 1187.22,636.414 1187.78,655.02 1188.34,658.682 1188.9,678.702 1189.46,679.056 1190.02,680.657 1190.58,678.382 1191.14,663.079 1191.7,662.662 1192.25,712.183 1192.81,695.559 1193.37,677.831 1193.93,677.776 1194.49,661.375 1195.05,662.79 1195.61,666.549 1196.17,668.739 1196.73,675.216 1197.29,640.921 1197.85,642.178 1198.41,662.523 1198.97,663.143 1199.52,681.239 1200.08,681.119 1200.64,700.369 1201.2,701.317 1201.76,698.844 1202.32,728.605 1202.88,711.367 1203.44,723.584 1204,703.897 1204.56,703.842 1205.12,703.16 1205.68,666.074 1206.24,667.134 1206.8,701.883 1207.35,703.102 1207.91,719.271 1208.47,736.148 1209.03,732.006 1209.59,808.613 1210.15,838.73 1210.71,846.467 1211.27,838.356 1211.83,847.877 1212.39,853.886 1212.95,827.32 1213.51,788.532 1214.07,785.861 1214.62,767.43 1215.18,779.491 1215.74,727.958 1216.3,678.967 1216.86,691.974 1217.42,673.956 1217.98,692.27 1218.54,689.583 1219.1,673.855 1219.66,672.872 1220.22,671.189 1220.78,673.431 1221.34,639.139 1221.89,623.127 1222.45,627.26 1223.01,612.366 1223.57,632.807 1224.13,668.179 1224.69,668.251 1225.25,669.817 1225.81,651.612 1226.37,669.86 1226.93,654.332 1227.49,657.278 1228.05,675.95 1228.61,669.937 1229.17,669.897 1229.72,700.965 1230.28,665.901 1230.84,669.772 1231.4,667.401 1231.96,653.573 1232.52,672.519 1233.08,659.297 1233.64,627.263 1234.2,630.267 1234.76,637.192 1235.32,637.523 1235.88,655.796 1236.44,660.214 1236.99,659.632 1237.55,642.69 1238.11,673.174 1238.67,674.104 1239.23,662.944 1239.79,665.356 1240.35,683.234 1240.91,699.467 1241.47,713.941 1242.03,682.739 1242.59,714.363 1243.15,714.985 1243.71,678.65 1244.26,676.494 1244.82,708.772 1245.38,689.974 1245.94,658.782 1246.5,660.476 1247.06,642.399 1247.62,660.559 1248.18,611.324 1248.74,628.1 1249.3,648.67 1249.86,681.744 1250.42,667.424 1250.98,622.268 1251.54,623.687 1252.09,626.452 1252.65,676.788 1253.21,660.998 1253.77,663.952 1254.33,682.361 1254.89,650.282 1255.45,606.909 1256.01,611.504 1256.57,620.907 1257.13,628.549 1257.69,692.337 1258.25,694.743 1258.81,695.413 1259.36,697.156 1259.92,696.627 1260.48,699.33 1261.04,733.93 1261.6,732.748 1262.16,699.035 1262.72,664.45 1263.28,664.74 1263.84,682.586 1264.4,667.88 1264.96,651.557 1265.52,620.987 1266.08,637.988 1266.63,642.374 1267.19,629.089 1267.75,617.691 1268.31,622.907 1268.87,592.959 1269.43,580.843 1269.99,587.673 1270.55,577.921 1271.11,583.018 1271.67,583.543 1272.23,603.812 1272.79,607.587 1273.35,626.179 1273.91,633.014 1274.46,639.057 1275.02,674.181 1275.58,657.868 1276.14,609.153 1276.7,612.734 1277.26,599.138 1277.82,622.497 1278.38,641.461 1278.94,659.617 1279.5,681.25 1280.06,683.605 1280.62,665.556 1281.18,651.013 1281.73,619.977 1282.29,637.82 1282.85,652.632 1283.41,638.7 1283.97,657.912 1284.53,659.433 1285.09,626.842 1285.65,647.563 1286.21,632.274 1286.77,667.252 1287.33,669.846 1287.89,716.785 1288.45,749.084 1289,760.027 1289.56,770.098 1290.12,765.967 1290.68,755.607 1291.24,734.999 1291.8,715.517 1292.36,729.635 1292.92,713.291 1293.48,745.457 1294.04,754.807 1294.6,750.622 1295.16,728.466 1295.72,692.816 1296.28,693.182 1296.83,690.049 1297.39,673.641 1297.95,660.568 1298.51,680.427 1299.07,697.205 1299.63,728.561 1300.19,756.257 1300.75,740.663 1301.31,738.908 1301.87,704.601 1302.43,722.172 1302.99,717.543 1303.55,736.386 1304.1,750.561 1304.66,732.549 1305.22,758.762 1305.78,706.175 1306.34,708.446 1306.9,689.6 1307.46,661.028 1308.02,695.017 1308.58,727.151 1309.14,725.474 1309.7,724.253 1310.26,705.781 1310.82,719.123 1311.38,732.003 1311.93,727.794 1312.49,741.104 1313.05,721.346 1313.61,702.139 1314.17,666.49 1314.73,682.172 1315.29,711.517 1315.85,727.134 1316.41,723.24 1316.97,722.635 1317.53,719.922 1318.09,750.867 1318.65,740.562 1319.2,733.534 1319.76,730.246 1320.32,728.13 1320.88,711.418 1321.44,726.573 1322,723.705 1322.56,723.739 1323.12,707.482 1323.68,689.653 1324.24,672.603 1324.8,673.611 1325.36,641.868 1325.92,642.084 1326.47,673.359 1327.03,656.76 1327.59,690.781 1328.15,704.205 1328.71,671.649 1329.27,686.013 1329.83,685.934 1330.39,686.409 1330.95,666.693 1331.51,669.928 1332.07,701.472 1332.63,714.117 1333.19,712.425 1333.75,730.543 1334.3,748.34 1334.86,795.728 1335.42,777.003 1335.98,774.018 1336.54,768.258 1337.1,766.246 1337.66,761.703 1338.22,740.138 1338.78,769.066 1339.34,764.555 1339.9,778.394 1340.46,737.827 1341.02,765.433 1341.57,777.751 1342.13,788.212 1342.69,830.163 1343.25,820.891 1343.81,797.339 1344.37,809.808 1344.93,804.966 1345.49,784.877 1346.05,798.312 1346.61,776.756 1347.17,800.277 1347.73,795.813 1348.29,790.348 1348.84,767.497 1349.4,777.718 1349.96,742.831 1350.52,755.582 1351.08,784.96 1351.64,748.749 1352.2,727.387 1352.76,737.657 1353.32,703.325 1353.88,701.888 1354.44,704.948 1355,717.694 1355.56,716.544 1356.12,662.809 1356.67,645.488 1357.23,615.425 1357.79,585.759 1358.35,607.636 1358.91,565.115 1359.47,569.61 1360.03,605.236 1360.59,624.403 1361.15,657.903 1361.71,689.32 1362.27,686.016 1362.83,704.588 1363.39,700.779 1363.94,664.886 1364.5,666.524 1365.06,650.751 1365.62,640.331 1366.18,616.397 1366.74,635.594 1367.3,656.119 1367.86,654.783 1368.42,673.598 1368.98,674.352 1369.54,676.511 1370.1,708.326 1370.66,686.337 1371.21,651.046 1371.77,616.242 1372.33,620.914 1372.89,608.492 1373.45,611.36 1374.01,599.079 1374.57,603.293 1375.13,640.085 1375.69,640.712 1376.25,646.251 1376.81,633.403 1377.37,617.477 1377.93,654.553 1378.49,659.501 1379.04,662.906 1379.6,684.136 1380.16,684.277 1380.72,682.284 1381.28,681.51 1381.84,663.912 1382.4,680.307 1382.96,664.632 1383.52,665.435 1384.08,651.194 1384.64,654.353 1385.2,675.047 1385.76,710.905 1386.31,694.11 1386.87,661.897 1387.43,660.857 1387.99,634.902 1388.55,621.952 1389.11,642.663 1389.67,613.903 1390.23,618.232 1390.79,589.985 1391.35,594.844 1391.91,568.239 1392.47,589.965 1393.03,594.313 1393.58,617.736 1394.14,605.07 1394.7,592.746 1395.26,593.541 1395.82,583.662 1396.38,571.606 1396.94,562.79 1397.5,570.455 1398.06,572.445 1398.62,566.496 1399.18,572.672 1399.74,609.598 1400.3,598.66 1400.86,605.929 1401.41,577.27 1401.97,598.318 1402.53,590.709 1403.09,611.354 1403.65,631.366 1404.21,633.58 1404.77,668.912 1405.33,684.308 1405.89,702.568 1406.45,665.642 1407.01,667.113 1407.57,636.73 1408.13,639.94 1408.68,660.235 1409.24,662.917 1409.8,648.797 1410.36,652.192 1410.92,637.27 1411.48,671.039 1412.04,722.226 1412.6,741.297 1413.16,720.812 1413.72,701.643 1414.28,699.629 1414.84,714.108 1415.4,713.004 1415.95,709.631 1416.51,665.879 1417.07,665.862 1417.63,669.35 1418.19,668.231 1418.75,651.511 1419.31,670.452 1419.87,704.697 1420.43,705.883 1420.99,705.399 1421.55,722.416 1422.11,704.771 1422.67,703.2 1423.23,701.446 1423.78,704.78 1424.34,719.975 1424.9,731.423 1425.46,694.416 1426.02,692.544 1426.58,707.969 1427.14,722.83 1427.7,717.859 1428.26,684.048 1428.82,682.44 1429.38,697.323 1429.94,715.466 1430.5,684.291 1431.05,668.053 1431.61,700.713 1432.17,667.064 1432.73,670.234 1433.29,675.742 1433.85,708.764 1434.41,722.635 1434.97,719.121 1435.53,745.898 1436.09,792.576 1436.65,806.043 1437.21,783.408 1437.77,824.645 1438.33,797.931 1438.88,757.603 1439.44,752.748 1440,749.272 1440.56,745.807 1441.12,760.989 1441.68,757.696 1442.24,757.123 1442.8,752.271 1443.36,781.982 1443.92,793.458 1444.48,789.604 1445.04,785.12 1445.6,796.9 1446.15,794.275 1446.71,786.156 1447.27,747.136 1447.83,729.512 1448.39,713.791 1448.95,729.39 1449.51,707.838 1450.07,738.151 1450.63,748.901 1451.19,746.503 1451.75,771.764 1452.31,768.494 1452.87,731.863 1453.42,729.31 1453.98,723.376 1454.54,673.051 1455.1,656.846 1455.66,642.724 1456.22,646.595 1456.78,645.261 1457.34,645.159 1457.9,696.274 1458.46,695.199 1459.02,709.216 1459.58,689.699 1460.14,692.809 1460.7,693.393 1461.25,692.919 1461.81,690.907 1462.37,675.964 1462.93,676.201 1463.49,646.178 1464.05,648.098 1464.61,631.973 1465.17,635.114 1465.73,653.861 1466.29,624.256 1466.85,621.179 1467.41,592.253 1467.97,614.492 1468.52,600.851 1469.08,571.177 1469.64,566.336 1470.2,571.897 1470.76,579.004 1471.32,549.158 1471.88,557.149 1472.44,515.641 1473,537.286 1473.56,529.184 1474.12,554.562 1474.68,566.654 1475.24,556.391 1475.79,563.391 1476.35,567.709 1476.91,589.2 1477.47,595.863 1478.03,583.276 1478.59,602.643 1479.15,607.011 1479.71,609.319 1480.27,614.024 1480.83,622.274 1481.39,674.013 1481.95,692.933 1482.51,694.848 1483.07,727.727 1483.62,724.281 1484.18,691.509 1484.74,710.175 1485.3,694.204 1485.86,711.104 1486.42,679.993 1486.98,696.12 1487.54,694.8 1488.1,695.689 1488.66,696.493 1489.22,699.031 1489.78,696.43 1490.34,663.212 1490.89,680.896 1491.45,698.902 1492.01,681.24 1492.57,660.859 1493.13,680.812 1493.69,713.809 1494.25,679.579 1494.81,694.495 1495.37,726.726 1495.93,727.302 1496.49,741.927 1497.05,755.203 1497.61,752.606 1498.16,782.288 1498.72,762.784 1499.28,728.122 1499.84,711.016 1500.4,694.919 1500.96,677.556 1501.52,675.213 1502.08,692.667 1502.64,707.236 1503.2,706.571 1503.76,703.809 1504.32,702.936 1504.88,718.322 1505.44,723.504 1505.99,739.326 1506.55,786.397 1507.11,780.772 1507.67,744.828 1508.23,746.04 1508.79,738.888 1509.35,717.658 1509.91,730.333 1510.47,741.027 1511.03,736.835 1511.59,768.023 1512.15,748.581 1512.71,762.478 1513.26,742.958 1513.82,729.002 1514.38,692.933 1514.94,706.447 1515.5,704.985 1516.06,703.627 1516.62,701.002 1517.18,699.579 1517.74,711.94 1518.3,714.227 1518.86,730.156 1519.42,709.38 1519.98,726.102 1520.53,725.176 1521.09,724.244 1521.65,738.005 1522.21,733.662 1522.77,717.15 1523.33,697.825 1523.89,728.948 1524.45,740.17 1525.01,720.065 1525.57,733.761 1526.13,694.699 1526.69,676.675 1527.25,677.351 1527.81,693.971 1528.36,727.611 1528.92,738.397 1529.48,764.804 1530.04,758.531 1530.6,736.568 1531.16,719.544 1531.72,716.819 1532.28,711.724 1532.84,691.888 1533.4,679.035 1533.96,727.381 1534.52,736.913 1535.08,749.927 1535.63,746.34 1536.19,741.059 1536.75,723.558 1537.31,690.265 1537.87,655.701 1538.43,663.364 1538.99,662.618 1539.55,648.112 1540.11,651.051 1540.67,669.486 1541.23,639.148 1541.79,671.399 1542.35,670.85 1542.9,688.322 1543.46,672.677 1544.02,705.565 1544.58,688.74 1545.14,654.35 1545.7,687.101 1546.26,718.475 1546.82,734.139 1547.38,712.741 1547.94,758.562 1548.5,757.923 1549.06,753.46 1549.62,766.739 1550.18,794.011 1550.73,770.616 1551.29,784.018 1551.85,776.133 1552.41,785.881 1552.97,732.676 1553.53,780.239 1554.09,774.106 1554.65,801.141 1555.21,781.407 1555.77,726.91 1556.33,738.345 1556.89,768.126 1557.45,763.318 1558,762.501 1558.56,741.381 1559.12,737.366 1559.68,731.582 1560.24,763.994 1560.8,760.916 1561.36,761.766 1561.92,743.133 1562.48,722.838 1563.04,724.238 1563.6,739.051 1564.16,734.389 1564.72,698.211 1565.28,715.027 1565.83,732.149 1566.39,708.564 1566.95,674.33 1567.51,671.455 1568.07,640.769 1568.63,626.745 1569.19,643.599 1569.75,645.716 1570.31,647.616 1570.87,618.612 1571.43,624.105 1571.99,625.383 1572.55,624.912 1573.1,597.819 1573.66,647.811 1574.22,664.185 1574.78,684.564 1575.34,698.29 1575.9,716.225 1576.46,717.757 1577.02,718.363 1577.58,668.226 1578.14,669.248 1578.7,640.285 1579.26,625.522 1579.82,611.537 1580.37,584.919 1580.93,641.212 1581.49,625.166 1582.05,675.791 1582.61,673.757 1583.17,640.651 1583.73,661.151 1584.29,693.812 1584.85,707.885 1585.41,705.311 1585.97,722.009 1586.53,737.398 1587.09,700.723 1587.65,715.254 1588.2,679.781 1588.76,694.593 1589.32,695.372 1589.88,714.116 1590.44,729.303 1591,723.576 1591.56,700.259 1592.12,697.017 1592.68,678.487 1593.24,678.419 1593.8,644.721 1594.36,628.398 1594.92,631.248 1595.47,635.023 1596.03,666.782 1596.59,683.303 1597.15,712.484 1597.71,695.297 1598.27,708.524 1598.83,710.467 1599.39,725.211 1599.95,723.072 1600.51,706.003 1601.07,672.483 1601.63,717.916 1602.19,733.514 1602.74,742.288 1603.3,738.406 1603.86,751.456 1604.42,734.011 1604.98,761.044 1605.54,757.331 1606.1,722.521 1606.66,704.731 1607.22,668.245 1607.78,654.16 1608.34,637 1608.9,621.747 1609.46,626.307 1610.02,631.323 1610.57,666.724 1611.13,669.372 1611.69,669.109 1612.25,637.146 1612.81,638.789 1613.37,639.92 1613.93,643.057 1614.49,680.262 1615.05,683.056 1615.61,667.016 1616.17,649.663 1616.73,652.142 1617.29,671.489 1617.84,669.407 1618.4,668.639 1618.96,666.925 1619.52,667.822 1620.08,669.3 1620.64,666.196 1621.2,665.298 1621.76,666.242 1622.32,699.074 1622.88,710.593 1623.44,726.244 1624,738.043 1624.56,735.886 1625.11,720.84 1625.67,690.082 1626.23,643.928 1626.79,729.504 1627.35,715.336 1627.91,715.741 1628.47,716.995 1629.03,698.885 1629.59,679.17 1630.15,694.428 1630.71,726.608 1631.27,756.283 1631.83,749.507 1632.39,697.579 1632.94,715.658 1633.5,698.056 1634.06,716.568 1634.62,668.919 1635.18,673.071 1635.74,674.438 1636.3,657.794 1636.86,639.076 1637.42,608.167 1637.98,577.49 1638.54,585.813 1639.1,575.757 1639.66,565.925 1640.21,621.789 1640.77,640.177 1641.33,658.643 1641.89,649.702 1642.45,667.73 1643.01,684.997 1643.57,685.778 1644.13,684.032 1644.69,703.549 1645.25,702.081 1645.81,703.116 1646.37,685.865 1646.93,668.634 1647.48,654.073 1648.04,624.782 1648.6,661.379 1649.16,649.496 1649.72,652.502 1650.28,671.539 1650.84,668.948 1651.4,668.11 1651.96,652.956 1652.52,652.463 1653.08,655.046 1653.64,676.26 1654.2,681.98 1654.76,715.688 1655.31,700.033 1655.87,717.655 1656.43,701.222 1656.99,717.187 1657.55,700.379 1658.11,714.841 1658.67,714.223 1659.23,728.566 1659.79,745.055 1660.35,774.554 1660.91,784.03 1661.47,729.303 1662.03,709.213 1662.58,677.906 1663.14,693.962 1663.7,695.793 1664.26,679.037 1664.82,712.363 1665.38,693.103 1665.94,691.344 1666.5,688.141 1667.06,686.501 1667.62,689.408 1668.18,672.78 1668.74,670.184 1669.3,673.215 1669.85,671.301 1670.41,636.333 1670.97,623.498 1671.53,641.314 1672.09,626.056 1672.65,648.687 1673.21,683.067 1673.77,718.293 1674.33,715.327 1674.89,678.875 1675.45,647.28 1676.01,617.047 1676.57,608.166 1677.13,615.474 1677.68,620.086 1678.24,607.716 1678.8,598.711 1679.36,605.573 1679.92,608.362 1680.48,615.673 1681.04,619.823 1681.6,642.468 1682.16,677.113 1682.72,695.363 1683.28,694.177 1683.84,648.164 1684.4,603.72 1684.95,608.523 1685.51,612.898 1686.07,582.935 1686.63,572.663 1687.19,547.631 1687.75,556.169 1688.31,543.592 1688.87,566.304 1689.43,558.009 1689.99,563.53 1690.55,566.199 1691.11,554.315 1691.67,561.778 1692.23,551.514 1692.78,559.176 1693.34,568.834 1693.9,575.168 1694.46,584.019 1695.02,592.476 1695.58,649.299 1696.14,652.352 1696.7,668.607 1697.26,683.4 1697.82,667.621 1698.38,717.522 1698.94,714.621 1699.5,727.891 1700.05,759.569 1700.61,785.777 1701.17,764.245 1701.73,743.15 1702.29,724.671 1702.85,722.582 1703.41,719.905 1703.97,733.006 1704.53,730.374 1705.09,743.473 1705.65,741.519 1706.21,738.33 1706.77,734.308 1707.32,733.467 1707.88,747.61 1708.44,762.153 1709,742.46 1709.56,752.565 1710.12,733.988 1710.68,715.818 1711.24,733.537 1711.8,778.431 1712.36,773 1712.92,752.61 1713.48,782.039 1714.04,761.455 1714.6,777.163 1715.15,791.933 1715.71,774.743 1716.27,784.475 1716.83,779.877 1717.39,759.864 1717.95,737.119 1718.51,749.328 1719.07,760.661 1719.63,741.078 1720.19,704.918 1720.75,702.659 1721.31,719.527 1721.87,699.476 1722.42,695.839 1722.98,680.302 1723.54,665.295 1724.1,695.668 1724.66,691.341 1725.22,674.419 1725.78,676.195 1726.34,641.154 1726.9,641.68 1727.46,629.566 1728.02,630.997 1728.58,638.016 1729.14,673.521 1729.69,705.927 1730.25,702.294 1730.81,684.843 1731.37,620.64 1731.93,625.146 1732.49,594.625 1733.05,618.121 1733.61,589.503 1734.17,611.813 1734.73,628.539 1735.29,634.171 1735.85,633.474 1736.41,634.552 1736.97,652.795 1737.52,657.853 1738.08,660.17 1738.64,647.434 1739.2,634.34 1739.76,619.199 1740.32,606.236 1740.88,609.731 1741.44,612.825 1742,617.691 1742.56,578.396 1743.12,550.094 1743.68,527.75 1744.24,535.437 1744.79,546.403 1745.35,590.188 1745.91,640.868 1746.47,677.716 1747.03,678.142 1747.59,695.546 1748.15,693.518 1748.71,677.708 1749.27,660.375 1749.83,629.512 1750.39,630.691 1750.95,634.48 1751.51,669.494 1752.06,657.512 1752.62,658.46 1753.18,660.303 1753.74,710.456 1754.3,738.739 1754.86,735.762 1755.42,733.834 1755.98,710.665 1756.54,692.606 1757.1,674.977 1757.66,690.855 1758.22,703.525 1758.78,737.07 1759.34,734.851 1759.89,718.746 1760.45,700.286 1761.01,667.053 1761.57,701.143 1762.13,701.821 1762.69,667.373 1763.25,686.604 1763.81,651.993 1764.37,682.662 1764.93,682.625 1765.49,650.414 1766.05,653.183 1766.61,652.65 1767.16,638.967 1767.72,625.862 1768.28,629.202 1768.84,650.234 1769.4,664.192 1769.96,697.149 1770.52,662.16 1771.08,678.947 1771.64,697.198 1772.2,714.981 1772.76,745.367 1773.32,727.004 1773.88,741.658 1774.43,756.534 1774.99,771.906 1775.55,768.807 1776.11,746.997 1776.67,726.687 1777.23,722.526 1777.79,737.852 1778.35,815.196 1778.91,796.666 1779.47,821.465 1780.03,815.18 1780.59,826.499 1781.15,818.936 1781.71,856.2 1782.26,835.438 1782.82,826.387 1783.38,820.065 1783.94,824.612 1784.5,819.482 1785.06,796.668 1785.62,826.306 1786.18,805.591 1786.74,785.934 1787.3,793.066 1787.86,786.994 1788.42,765.897 1788.98,761.92 1789.53,710.373 1790.09,710.532 1790.65,694.202 1791.21,691.11 1791.77,689.348 1792.33,685.46 1792.89,684.952 1793.45,681.624 1794.01,701.354 1794.57,696.641 1795.13,693.227 1795.69,709.014 1796.25,707.202 1796.8,673.401 1797.36,674.652 1797.92,677.892 1798.48,680.956 1799.04,694.367 1799.6,693.789 1800.16,709.164 1800.72,723.562 1801.28,722.503 1801.84,718.713 1802.4,715.451 1802.96,710.791 1803.52,723.219 1804.08,754.264 1804.63,765.835 1805.19,776.092 1805.75,787.149 1806.31,779.804 1806.87,774.934 1807.43,757.206 1807.99,705.502 1808.55,706.192 1809.11,703.514 1809.67,701.085 1810.23,721.61 1810.79,702.943 1811.35,736.112 1811.9,704.337 1812.46,671.078 1813.02,675.923 1813.58,648.482 1814.14,681.241 1814.7,679.091 1815.26,675.788 1815.82,690.965 1816.38,703.916 1816.94,685.25 1817.5,685.892 1818.06,706.306 1818.62,668.715 1819.18,686.277 1819.73,703.4 1820.29,734.145 1820.85,680.361 1821.41,647.068 1821.97,647.877 1822.53,666.4 1823.09,617.96 1823.65,601.302 1824.21,622.795 1824.77,575.329 1825.33,596.568 1825.89,634.543 1826.45,621.049 1827,593.284 1827.56,646.009 1828.12,652.041 1828.68,654.356 1829.24,672.64 1829.8,658.663 1830.36,660.456 1830.92,642.8 1831.48,611.767 1832.04,596.675 1832.6,604.842 1833.16,626.155 1833.72,645.075 1834.27,630.396 1834.83,601.741 1835.39,625.256 1835.95,613.893 1836.51,585.637 1837.07,636.355 1837.63,604.714 1838.19,624.609 \"/>\n<path clip-path=\"url(#clip143)\" d=\"M720.247 691.668 L720.806 691.668 L721.365 691.668 L721.924 691.668 L722.484 691.668 L723.043 691.668 L723.602 691.668 L724.161 691.668 L724.721 691.668 L725.28 691.668 L725.839 691.668 L726.398 691.668 L726.958 691.668 L727.517 691.668 L728.076 691.668 L728.635 691.668 L729.195 691.668 L729.754 691.668 L730.313 691.668 L730.872 691.668 L731.432 691.668 L731.991 691.668 L732.55 691.668 L733.109 691.668 L733.669 691.668 L734.228 691.668 L734.787 691.668 L735.346 691.668 L735.906 691.668 L736.465 691.668 L737.024 691.668 L737.583 691.668 L738.143 691.668 L738.702 691.668 L739.261 691.668 L739.82 691.668 L740.38 691.668 L740.939 691.668 L741.498 691.668 L742.057 691.668 L742.617 691.668 L743.176 691.668 L743.735 691.668 L744.294 691.668 L744.854 691.668 L745.413 691.668 L745.972 691.668 L746.531 691.668 L747.091 691.668 L747.65 691.668 L748.209 691.668 L748.768 691.668 L749.328 691.668 L749.887 691.668 L750.446 691.668 L751.005 691.668 L751.565 691.668 L752.124 691.668 L752.683 691.668 L753.242 691.668 L753.802 691.668 L754.361 691.668 L754.92 691.668 L755.479 691.668 L756.039 691.668 L756.598 691.668 L757.157 691.668 L757.716 691.668 L758.276 691.668 L758.835 691.668 L759.394 691.668 L759.953 691.668 L760.513 691.668 L761.072 691.668 L761.631 691.668 L762.19 691.668 L762.75 691.668 L763.309 691.668 L763.868 691.668 L764.427 691.668 L764.987 691.668 L765.546 691.668 L766.105 691.668 L766.664 691.668 L767.224 691.668 L767.783 691.668 L768.342 691.668 L768.901 691.668 L769.461 691.668 L770.02 691.668 L770.579 691.668 L771.138 691.668 L771.698 691.668 L772.257 691.668 L772.816 691.668 L773.375 691.668 L773.935 691.668 L774.494 691.668 L775.053 691.668 L775.612 691.668 L776.172 691.668 L776.731 691.668 L777.29 691.668 L777.849 691.668 L778.409 691.668 L778.968 691.668 L779.527 691.668 L780.086 691.668 L780.646 691.668 L781.205 691.668 L781.764 691.668 L782.323 691.668 L782.883 691.668 L783.442 691.668 L784.001 691.668 L784.56 691.668 L785.12 691.668 L785.679 691.668 L786.238 691.668 L786.797 691.668 L787.357 691.668 L787.916 691.668 L788.475 691.668 L789.034 691.668 L789.594 691.668 L790.153 691.668 L790.712 691.668 L791.271 691.668 L791.831 691.668 L792.39 691.668 L792.949 691.668 L793.508 691.668 L794.068 691.668 L794.627 691.668 L795.186 691.668 L795.745 691.668 L796.305 691.668 L796.864 691.668 L797.423 691.668 L797.982 691.668 L798.542 691.668 L799.101 691.668 L799.66 691.668 L800.219 691.668 L800.779 691.668 L801.338 691.668 L801.897 691.668 L802.456 691.668 L803.016 691.668 L803.575 691.668 L804.134 691.668 L804.693 691.668 L805.253 691.668 L805.812 691.668 L806.371 691.668 L806.931 691.668 L807.49 691.668 L808.049 691.668 L808.608 691.668 L809.168 691.668 L809.727 691.668 L810.286 691.668 L810.845 691.668 L811.405 691.668 L811.964 691.668 L812.523 691.668 L813.082 691.668 L813.642 691.668 L814.201 691.668 L814.76 691.668 L815.319 691.668 L815.879 691.668 L816.438 691.668 L816.997 691.668 L817.556 691.668 L818.116 691.668 L818.675 691.668 L819.234 691.668 L819.793 691.668 L820.353 691.668 L820.912 691.668 L821.471 691.668 L822.03 691.668 L822.59 691.668 L823.149 691.668 L823.708 691.668 L824.267 691.668 L824.827 691.668 L825.386 691.668 L825.945 691.668 L826.504 691.668 L827.064 691.668 L827.623 691.668 L828.182 691.668 L828.741 691.668 L829.301 691.668 L829.86 691.668 L830.419 691.668 L830.978 691.668 L831.538 691.668 L832.097 691.668 L832.656 691.668 L833.215 691.668 L833.775 691.668 L834.334 691.668 L834.893 691.668 L835.452 691.668 L836.012 691.668 L836.571 691.668 L837.13 691.668 L837.689 691.668 L838.249 691.668 L838.808 691.668 L839.367 691.668 L839.926 691.668 L840.486 691.668 L841.045 691.668 L841.604 691.668 L842.163 691.668 L842.723 691.668 L843.282 691.668 L843.841 691.668 L844.4 691.668 L844.96 691.668 L845.519 691.668 L846.078 691.668 L846.637 691.668 L847.197 691.668 L847.756 691.668 L848.315 691.668 L848.874 691.668 L849.434 691.668 L849.993 691.668 L850.552 691.668 L851.111 691.668 L851.671 691.668 L852.23 691.668 L852.789 691.668 L853.348 691.668 L853.908 691.668 L854.467 691.668 L855.026 691.668 L855.585 691.668 L856.145 691.668 L856.704 691.668 L857.263 691.668 L857.822 691.668 L858.382 691.668 L858.941 691.668 L859.5 691.668 L860.059 691.668 L860.619 691.668 L861.178 691.668 L861.737 691.668 L862.296 691.668 L862.856 691.668 L863.415 691.668 L863.974 691.668 L864.533 691.668 L865.093 691.668 L865.652 691.668 L866.211 691.668 L866.77 691.668 L867.33 691.668 L867.889 691.668 L868.448 691.668 L869.007 691.668 L869.567 691.668 L870.126 691.668 L870.685 691.668 L871.244 691.668 L871.804 691.668 L872.363 691.668 L872.922 691.668 L873.481 691.668 L874.041 691.668 L874.6 691.668 L875.159 691.668 L875.718 691.668 L876.278 691.668 L876.837 691.668 L877.396 691.668 L877.955 691.668 L878.515 691.668 L879.074 691.668 L879.633 691.668 L880.192 691.668 L880.752 691.668 L881.311 691.668 L881.87 691.668 L882.429 691.668 L882.989 691.668 L883.548 691.668 L884.107 691.668 L884.666 691.668 L885.226 691.668 L885.785 691.668 L886.344 691.668 L886.903 691.668 L887.463 691.668 L888.022 691.668 L888.581 691.668 L889.14 691.668 L889.7 691.668 L890.259 691.668 L890.818 691.668 L891.377 691.668 L891.937 691.668 L892.496 691.668 L893.055 691.668 L893.614 691.668 L894.174 691.668 L894.733 691.668 L895.292 691.668 L895.851 691.668 L896.411 691.668 L896.97 691.668 L897.529 691.668 L898.088 691.668 L898.648 691.668 L899.207 691.668 L899.766 691.668 L900.325 691.668 L900.885 691.668 L901.444 691.668 L902.003 691.668 L902.562 691.668 L903.122 691.668 L903.681 691.668 L904.24 691.668 L904.799 691.668 L905.359 691.668 L905.918 691.668 L906.477 691.668 L907.036 691.668 L907.596 691.668 L908.155 691.668 L908.714 691.668 L909.273 691.668 L909.833 691.668 L910.392 691.668 L910.951 691.668 L911.51 691.668 L912.07 691.668 L912.629 691.668 L913.188 691.668 L913.747 691.668 L914.307 691.668 L914.866 691.668 L915.425 691.668 L915.984 691.668 L916.544 691.668 L917.103 691.668 L917.662 691.668 L918.221 691.668 L918.781 691.668 L919.34 691.668 L919.899 691.668 L920.458 691.668 L921.018 691.668 L921.577 691.668 L922.136 691.668 L922.695 691.668 L923.255 691.668 L923.814 691.668 L924.373 691.668 L924.932 691.668 L925.492 691.668 L926.051 691.668 L926.61 691.668 L927.169 691.668 L927.729 691.668 L928.288 691.668 L928.847 691.668 L929.406 691.668 L929.966 691.668 L930.525 691.668 L931.084 691.668 L931.644 691.668 L932.203 691.668 L932.762 691.668 L933.321 691.668 L933.881 691.668 L934.44 691.668 L934.999 691.668 L935.558 691.668 L936.118 691.668 L936.677 691.668 L937.236 691.668 L937.795 691.668 L938.355 691.668 L938.914 691.668 L939.473 691.668 L940.032 691.668 L940.592 691.668 L941.151 691.668 L941.71 691.668 L942.269 691.668 L942.829 691.668 L943.388 691.668 L943.947 691.668 L944.506 691.668 L945.066 691.668 L945.625 691.668 L946.184 691.668 L946.743 691.668 L947.303 691.668 L947.862 691.668 L948.421 691.668 L948.98 691.668 L949.54 691.668 L950.099 691.668 L950.658 691.668 L951.217 691.668 L951.777 691.668 L952.336 691.668 L952.895 691.668 L953.454 691.668 L954.014 691.668 L954.573 691.668 L955.132 691.668 L955.691 691.668 L956.251 691.668 L956.81 691.668 L957.369 691.668 L957.928 691.668 L958.488 691.668 L959.047 691.668 L959.606 691.668 L960.165 691.668 L960.725 691.668 L961.284 691.668 L961.843 691.668 L962.402 691.668 L962.962 691.668 L963.521 691.668 L964.08 691.668 L964.639 691.668 L965.199 691.668 L965.758 691.668 L966.317 691.668 L966.876 691.668 L967.436 691.668 L967.995 691.668 L968.554 691.668 L969.113 691.668 L969.673 691.668 L970.232 691.668 L970.791 691.668 L971.35 691.668 L971.91 691.668 L972.469 691.668 L973.028 691.668 L973.587 691.668 L974.147 691.668 L974.706 691.668 L975.265 691.668 L975.824 691.668 L976.384 691.668 L976.943 691.668 L977.502 691.668 L978.061 691.668 L978.621 691.668 L979.18 691.668 L979.739 691.668 L980.298 691.668 L980.858 691.668 L981.417 691.668 L981.976 691.668 L982.535 691.668 L983.095 691.668 L983.654 691.668 L984.213 691.668 L984.772 691.668 L985.332 691.668 L985.891 691.668 L986.45 691.668 L987.009 691.668 L987.569 691.668 L988.128 691.668 L988.687 691.668 L989.246 691.668 L989.806 691.668 L990.365 691.668 L990.924 691.668 L991.483 691.668 L992.043 691.668 L992.602 691.668 L993.161 691.668 L993.72 691.668 L994.28 691.668 L994.839 691.668 L995.398 691.668 L995.957 691.668 L996.517 691.668 L997.076 691.668 L997.635 691.668 L998.194 691.668 L998.754 691.668 L999.313 691.668 L999.872 691.668 L1000.43 691.668 L1000.99 691.668 L1001.55 691.668 L1002.11 691.668 L1002.67 691.668 L1003.23 691.668 L1003.79 691.668 L1004.35 691.668 L1004.91 691.668 L1005.46 691.668 L1006.02 691.668 L1006.58 691.668 L1007.14 691.668 L1007.7 691.668 L1008.26 691.668 L1008.82 691.668 L1009.38 691.668 L1009.94 691.668 L1010.5 691.668 L1011.06 691.668 L1011.62 691.668 L1012.18 691.668 L1012.73 691.668 L1013.29 691.668 L1013.85 691.668 L1014.41 691.668 L1014.97 691.668 L1015.53 691.668 L1016.09 691.668 L1016.65 691.668 L1017.21 691.668 L1017.77 691.668 L1018.33 691.668 L1018.89 691.668 L1019.45 691.668 L1020.01 691.668 L1020.56 691.668 L1021.12 691.668 L1021.68 691.668 L1022.24 691.668 L1022.8 691.668 L1023.36 691.668 L1023.92 691.668 L1024.48 691.668 L1025.04 691.668 L1025.6 691.668 L1026.16 691.668 L1026.72 691.668 L1027.28 691.668 L1027.83 691.668 L1028.39 691.668 L1028.95 691.668 L1029.51 691.668 L1030.07 691.668 L1030.63 691.668 L1031.19 691.668 L1031.75 691.668 L1032.31 691.668 L1032.87 691.668 L1033.43 691.668 L1033.99 691.668 L1034.55 691.668 L1035.1 691.668 L1035.66 691.668 L1036.22 691.668 L1036.78 691.668 L1037.34 691.668 L1037.9 691.668 L1038.46 691.668 L1039.02 691.668 L1039.58 691.668 L1040.14 691.668 L1040.7 691.668 L1041.26 691.668 L1041.82 691.668 L1042.38 691.668 L1042.93 691.668 L1043.49 691.668 L1044.05 691.668 L1044.61 691.668 L1045.17 691.668 L1045.73 691.668 L1046.29 691.668 L1046.85 691.668 L1047.41 691.668 L1047.97 691.668 L1048.53 691.668 L1049.09 691.668 L1049.65 691.668 L1050.2 691.668 L1050.76 691.668 L1051.32 691.668 L1051.88 691.668 L1052.44 691.668 L1053 691.668 L1053.56 691.668 L1054.12 691.668 L1054.68 691.668 L1055.24 691.668 L1055.8 691.668 L1056.36 691.668 L1056.92 691.668 L1057.48 691.668 L1058.03 691.668 L1058.59 691.668 L1059.15 691.668 L1059.71 691.668 L1060.27 691.668 L1060.83 691.668 L1061.39 691.668 L1061.95 691.668 L1062.51 691.668 L1063.07 691.668 L1063.63 691.668 L1064.19 691.668 L1064.75 691.668 L1065.3 691.668 L1065.86 691.668 L1066.42 691.668 L1066.98 691.668 L1067.54 691.668 L1068.1 691.668 L1068.66 691.668 L1069.22 691.668 L1069.78 691.668 L1070.34 691.668 L1070.9 691.668 L1071.46 691.668 L1072.02 691.668 L1072.57 691.668 L1073.13 691.668 L1073.69 691.668 L1074.25 691.668 L1074.81 691.668 L1075.37 691.668 L1075.93 691.668 L1076.49 691.668 L1077.05 691.668 L1077.61 691.668 L1078.17 691.668 L1078.73 691.668 L1079.29 691.668 L1079.85 691.668 L1080.4 691.668 L1080.96 691.668 L1081.52 691.668 L1082.08 691.668 L1082.64 691.668 L1083.2 691.668 L1083.76 691.668 L1084.32 691.668 L1084.88 691.668 L1085.44 691.668 L1086 691.668 L1086.56 691.668 L1087.12 691.668 L1087.67 691.668 L1088.23 691.668 L1088.79 691.668 L1089.35 691.668 L1089.91 691.668 L1090.47 691.668 L1091.03 691.668 L1091.59 691.668 L1092.15 691.668 L1092.71 691.668 L1093.27 691.668 L1093.83 691.668 L1094.39 691.668 L1094.94 691.668 L1095.5 691.668 L1096.06 691.668 L1096.62 691.668 L1097.18 691.668 L1097.74 691.668 L1098.3 691.668 L1098.86 691.668 L1099.42 691.668 L1099.98 691.668 L1100.54 691.668 L1101.1 691.668 L1101.66 691.668 L1102.22 691.668 L1102.77 691.668 L1103.33 691.668 L1103.89 691.668 L1104.45 691.668 L1105.01 691.668 L1105.57 691.668 L1106.13 691.668 L1106.69 691.668 L1107.25 691.668 L1107.81 691.668 L1108.37 691.668 L1108.93 691.668 L1109.49 691.668 L1110.04 691.668 L1110.6 691.668 L1111.16 691.668 L1111.72 691.668 L1112.28 691.668 L1112.84 691.668 L1113.4 691.668 L1113.96 691.668 L1114.52 691.668 L1115.08 691.668 L1115.64 691.668 L1116.2 691.668 L1116.76 691.668 L1117.31 691.668 L1117.87 691.668 L1118.43 691.668 L1118.99 691.668 L1119.55 691.668 L1120.11 691.668 L1120.67 691.668 L1121.23 691.668 L1121.79 691.668 L1122.35 691.668 L1122.91 691.668 L1123.47 691.668 L1124.03 691.668 L1124.59 691.668 L1125.14 691.668 L1125.7 691.668 L1126.26 691.668 L1126.82 691.668 L1127.38 691.668 L1127.94 691.668 L1128.5 691.668 L1129.06 691.668 L1129.62 691.668 L1130.18 691.668 L1130.74 691.668 L1131.3 691.668 L1131.86 691.668 L1132.41 691.668 L1132.97 691.668 L1133.53 691.668 L1134.09 691.668 L1134.65 691.668 L1135.21 691.668 L1135.77 691.668 L1136.33 691.668 L1136.89 691.668 L1137.45 691.668 L1138.01 691.668 L1138.57 691.668 L1139.13 691.668 L1139.68 691.668 L1140.24 691.668 L1140.8 691.668 L1141.36 691.668 L1141.92 691.668 L1142.48 691.668 L1143.04 691.668 L1143.6 691.668 L1144.16 691.668 L1144.72 691.668 L1145.28 691.668 L1145.84 691.668 L1146.4 691.668 L1146.96 691.668 L1147.51 691.668 L1148.07 691.668 L1148.63 691.668 L1149.19 691.668 L1149.75 691.668 L1150.31 691.668 L1150.87 691.668 L1151.43 691.668 L1151.99 691.668 L1152.55 691.668 L1153.11 691.668 L1153.67 691.668 L1154.23 691.668 L1154.78 691.668 L1155.34 691.668 L1155.9 691.668 L1156.46 691.668 L1157.02 691.668 L1157.58 691.668 L1158.14 691.668 L1158.7 691.668 L1159.26 691.668 L1159.82 691.668 L1160.38 691.668 L1160.94 691.668 L1161.5 691.668 L1162.05 691.668 L1162.61 691.668 L1163.17 691.668 L1163.73 691.668 L1164.29 691.668 L1164.85 691.668 L1165.41 691.668 L1165.97 691.668 L1166.53 691.668 L1167.09 691.668 L1167.65 691.668 L1168.21 691.668 L1168.77 691.668 L1169.33 691.668 L1169.88 691.668 L1170.44 691.668 L1171 691.668 L1171.56 691.668 L1172.12 691.668 L1172.68 691.668 L1173.24 691.668 L1173.8 691.668 L1174.36 691.668 L1174.92 691.668 L1175.48 691.668 L1176.04 691.668 L1176.6 691.668 L1177.15 691.668 L1177.71 691.668 L1178.27 691.668 L1178.83 691.668 L1179.39 691.668 L1179.95 691.668 L1180.51 691.668 L1181.07 691.668 L1181.63 691.668 L1182.19 691.668 L1182.75 691.668 L1183.31 691.668 L1183.87 691.668 L1184.43 691.668 L1184.98 691.668 L1185.54 691.668 L1186.1 691.668 L1186.66 691.668 L1187.22 691.668 L1187.78 691.668 L1188.34 691.668 L1188.9 691.668 L1189.46 691.668 L1190.02 691.668 L1190.58 691.668 L1191.14 691.668 L1191.7 691.668 L1192.25 691.668 L1192.81 691.668 L1193.37 691.668 L1193.93 691.668 L1194.49 691.668 L1195.05 691.668 L1195.61 691.668 L1196.17 691.668 L1196.73 691.668 L1197.29 691.668 L1197.85 691.668 L1198.41 691.668 L1198.97 691.668 L1199.52 691.668 L1200.08 691.668 L1200.64 691.668 L1201.2 691.668 L1201.76 691.668 L1202.32 691.668 L1202.88 691.668 L1203.44 691.668 L1204 691.668 L1204.56 691.668 L1205.12 691.668 L1205.68 691.668 L1206.24 691.668 L1206.8 691.668 L1207.35 691.668 L1207.91 691.668 L1208.47 691.668 L1209.03 691.668 L1209.59 691.668 L1210.15 691.668 L1210.71 691.668 L1211.27 691.668 L1211.83 691.668 L1212.39 691.668 L1212.95 691.668 L1213.51 691.668 L1214.07 691.668 L1214.62 691.668 L1215.18 691.668 L1215.74 691.668 L1216.3 691.668 L1216.86 691.668 L1217.42 691.668 L1217.98 691.668 L1218.54 691.668 L1219.1 691.668 L1219.66 691.668 L1220.22 691.668 L1220.78 691.668 L1221.34 691.668 L1221.89 691.668 L1222.45 691.668 L1223.01 691.668 L1223.57 691.668 L1224.13 691.668 L1224.69 691.668 L1225.25 691.668 L1225.81 691.668 L1226.37 691.668 L1226.93 691.668 L1227.49 691.668 L1228.05 691.668 L1228.61 691.668 L1229.17 691.668 L1229.72 691.668 L1230.28 691.668 L1230.84 691.668 L1231.4 691.668 L1231.96 691.668 L1232.52 691.668 L1233.08 691.668 L1233.64 691.668 L1234.2 691.668 L1234.76 691.668 L1235.32 691.668 L1235.88 691.668 L1236.44 691.668 L1236.99 691.668 L1237.55 691.668 L1238.11 691.668 L1238.67 691.668 L1239.23 691.668 L1239.79 691.668 L1240.35 691.668 L1240.91 691.668 L1241.47 691.668 L1242.03 691.668 L1242.59 691.668 L1243.15 691.668 L1243.71 691.668 L1244.26 691.668 L1244.82 691.668 L1245.38 691.668 L1245.94 691.668 L1246.5 691.668 L1247.06 691.668 L1247.62 691.668 L1248.18 691.668 L1248.74 691.668 L1249.3 691.668 L1249.86 691.668 L1250.42 691.668 L1250.98 691.668 L1251.54 691.668 L1252.09 691.668 L1252.65 691.668 L1253.21 691.668 L1253.77 691.668 L1254.33 691.668 L1254.89 691.668 L1255.45 691.668 L1256.01 691.668 L1256.57 691.668 L1257.13 691.668 L1257.69 691.668 L1258.25 691.668 L1258.81 691.668 L1259.36 691.668 L1259.92 691.668 L1260.48 691.668 L1261.04 691.668 L1261.6 691.668 L1262.16 691.668 L1262.72 691.668 L1263.28 691.668 L1263.84 691.668 L1264.4 691.668 L1264.96 691.668 L1265.52 691.668 L1266.08 691.668 L1266.63 691.668 L1267.19 691.668 L1267.75 691.668 L1268.31 691.668 L1268.87 691.668 L1269.43 691.668 L1269.99 691.668 L1270.55 691.668 L1271.11 691.668 L1271.67 691.668 L1272.23 691.668 L1272.79 691.668 L1273.35 691.668 L1273.91 691.668 L1274.46 691.668 L1275.02 691.668 L1275.58 691.668 L1276.14 691.668 L1276.7 691.668 L1277.26 691.668 L1277.82 691.668 L1278.38 691.668 L1278.94 691.668 L1279.5 691.668 L1280.06 691.668 L1280.62 691.668 L1281.18 691.668 L1281.73 691.668 L1282.29 691.668 L1282.85 691.668 L1283.41 691.668 L1283.97 691.668 L1284.53 691.668 L1285.09 691.668 L1285.65 691.668 L1286.21 691.668 L1286.77 691.668 L1287.33 691.668 L1287.89 691.668 L1288.45 691.668 L1289 691.668 L1289.56 691.668 L1290.12 691.668 L1290.68 691.668 L1291.24 691.668 L1291.8 691.668 L1292.36 691.668 L1292.92 691.668 L1293.48 691.668 L1294.04 691.668 L1294.6 691.668 L1295.16 691.668 L1295.72 691.668 L1296.28 691.668 L1296.83 691.668 L1297.39 691.668 L1297.95 691.668 L1298.51 691.668 L1299.07 691.668 L1299.63 691.668 L1300.19 691.668 L1300.75 691.668 L1301.31 691.668 L1301.87 691.668 L1302.43 691.668 L1302.99 691.668 L1303.55 691.668 L1304.1 691.668 L1304.66 691.668 L1305.22 691.668 L1305.78 691.668 L1306.34 691.668 L1306.9 691.668 L1307.46 691.668 L1308.02 691.668 L1308.58 691.668 L1309.14 691.668 L1309.7 691.668 L1310.26 691.668 L1310.82 691.668 L1311.38 691.668 L1311.93 691.668 L1312.49 691.668 L1313.05 691.668 L1313.61 691.668 L1314.17 691.668 L1314.73 691.668 L1315.29 691.668 L1315.85 691.668 L1316.41 691.668 L1316.97 691.668 L1317.53 691.668 L1318.09 691.668 L1318.65 691.668 L1319.2 691.668 L1319.76 691.668 L1320.32 691.668 L1320.88 691.668 L1321.44 691.668 L1322 691.668 L1322.56 691.668 L1323.12 691.668 L1323.68 691.668 L1324.24 691.668 L1324.8 691.668 L1325.36 691.668 L1325.92 691.668 L1326.47 691.668 L1327.03 691.668 L1327.59 691.668 L1328.15 691.668 L1328.71 691.668 L1329.27 691.668 L1329.83 691.668 L1330.39 691.668 L1330.95 691.668 L1331.51 691.668 L1332.07 691.668 L1332.63 691.668 L1333.19 691.668 L1333.75 691.668 L1334.3 691.668 L1334.86 691.668 L1335.42 691.668 L1335.98 691.668 L1336.54 691.668 L1337.1 691.668 L1337.66 691.668 L1338.22 691.668 L1338.78 691.668 L1339.34 691.668 L1339.9 691.668 L1340.46 691.668 L1341.02 691.668 L1341.57 691.668 L1342.13 691.668 L1342.69 691.668 L1343.25 691.668 L1343.81 691.668 L1344.37 691.668 L1344.93 691.668 L1345.49 691.668 L1346.05 691.668 L1346.61 691.668 L1347.17 691.668 L1347.73 691.668 L1348.29 691.668 L1348.84 691.668 L1349.4 691.668 L1349.96 691.668 L1350.52 691.668 L1351.08 691.668 L1351.64 691.668 L1352.2 691.668 L1352.76 691.668 L1353.32 691.668 L1353.88 691.668 L1354.44 691.668 L1355 691.668 L1355.56 691.668 L1356.12 691.668 L1356.67 691.668 L1357.23 691.668 L1357.79 691.668 L1358.35 691.668 L1358.91 691.668 L1359.47 691.668 L1360.03 691.668 L1360.59 691.668 L1361.15 691.668 L1361.71 691.668 L1362.27 691.668 L1362.83 691.668 L1363.39 691.668 L1363.94 691.668 L1364.5 691.668 L1365.06 691.668 L1365.62 691.668 L1366.18 691.668 L1366.74 691.668 L1367.3 691.668 L1367.86 691.668 L1368.42 691.668 L1368.98 691.668 L1369.54 691.668 L1370.1 691.668 L1370.66 691.668 L1371.21 691.668 L1371.77 691.668 L1372.33 691.668 L1372.89 691.668 L1373.45 691.668 L1374.01 691.668 L1374.57 691.668 L1375.13 691.668 L1375.69 691.668 L1376.25 691.668 L1376.81 691.668 L1377.37 691.668 L1377.93 691.668 L1378.49 691.668 L1379.04 691.668 L1379.6 691.668 L1380.16 691.668 L1380.72 691.668 L1381.28 691.668 L1381.84 691.668 L1382.4 691.668 L1382.96 691.668 L1383.52 691.668 L1384.08 691.668 L1384.64 691.668 L1385.2 691.668 L1385.76 691.668 L1386.31 691.668 L1386.87 691.668 L1387.43 691.668 L1387.99 691.668 L1388.55 691.668 L1389.11 691.668 L1389.67 691.668 L1390.23 691.668 L1390.79 691.668 L1391.35 691.668 L1391.91 691.668 L1392.47 691.668 L1393.03 691.668 L1393.58 691.668 L1394.14 691.668 L1394.7 691.668 L1395.26 691.668 L1395.82 691.668 L1396.38 691.668 L1396.94 691.668 L1397.5 691.668 L1398.06 691.668 L1398.62 691.668 L1399.18 691.668 L1399.74 691.668 L1400.3 691.668 L1400.86 691.668 L1401.41 691.668 L1401.97 691.668 L1402.53 691.668 L1403.09 691.668 L1403.65 691.668 L1404.21 691.668 L1404.77 691.668 L1405.33 691.668 L1405.89 691.668 L1406.45 691.668 L1407.01 691.668 L1407.57 691.668 L1408.13 691.668 L1408.68 691.668 L1409.24 691.668 L1409.8 691.668 L1410.36 691.668 L1410.92 691.668 L1411.48 691.668 L1412.04 691.668 L1412.6 691.668 L1413.16 691.668 L1413.72 691.668 L1414.28 691.668 L1414.84 691.668 L1415.4 691.668 L1415.95 691.668 L1416.51 691.668 L1417.07 691.668 L1417.63 691.668 L1418.19 691.668 L1418.75 691.668 L1419.31 691.668 L1419.87 691.668 L1420.43 691.668 L1420.99 691.668 L1421.55 691.668 L1422.11 691.668 L1422.67 691.668 L1423.23 691.668 L1423.78 691.668 L1424.34 691.668 L1424.9 691.668 L1425.46 691.668 L1426.02 691.668 L1426.58 691.668 L1427.14 691.668 L1427.7 691.668 L1428.26 691.668 L1428.82 691.668 L1429.38 691.668 L1429.94 691.668 L1430.5 691.668 L1431.05 691.668 L1431.61 691.668 L1432.17 691.668 L1432.73 691.668 L1433.29 691.668 L1433.85 691.668 L1434.41 691.668 L1434.97 691.668 L1435.53 691.668 L1436.09 691.668 L1436.65 691.668 L1437.21 691.668 L1437.77 691.668 L1438.33 691.668 L1438.88 691.668 L1439.44 691.668 L1440 691.668 L1440.56 691.668 L1441.12 691.668 L1441.68 691.668 L1442.24 691.668 L1442.8 691.668 L1443.36 691.668 L1443.92 691.668 L1444.48 691.668 L1445.04 691.668 L1445.6 691.668 L1446.15 691.668 L1446.71 691.668 L1447.27 691.668 L1447.83 691.668 L1448.39 691.668 L1448.95 691.668 L1449.51 691.668 L1450.07 691.668 L1450.63 691.668 L1451.19 691.668 L1451.75 691.668 L1452.31 691.668 L1452.87 691.668 L1453.42 691.668 L1453.98 691.668 L1454.54 691.668 L1455.1 691.668 L1455.66 691.668 L1456.22 691.668 L1456.78 691.668 L1457.34 691.668 L1457.9 691.668 L1458.46 691.668 L1459.02 691.668 L1459.58 691.668 L1460.14 691.668 L1460.7 691.668 L1461.25 691.668 L1461.81 691.668 L1462.37 691.668 L1462.93 691.668 L1463.49 691.668 L1464.05 691.668 L1464.61 691.668 L1465.17 691.668 L1465.73 691.668 L1466.29 691.668 L1466.85 691.668 L1467.41 691.668 L1467.97 691.668 L1468.52 691.668 L1469.08 691.668 L1469.64 691.668 L1470.2 691.668 L1470.76 691.668 L1471.32 691.668 L1471.88 691.668 L1472.44 691.668 L1473 691.668 L1473.56 691.668 L1474.12 691.668 L1474.68 691.668 L1475.24 691.668 L1475.79 691.668 L1476.35 691.668 L1476.91 691.668 L1477.47 691.668 L1478.03 691.668 L1478.59 691.668 L1479.15 691.668 L1479.71 691.668 L1480.27 691.668 L1480.83 691.668 L1481.39 691.668 L1481.95 691.668 L1482.51 691.668 L1483.07 691.668 L1483.62 691.668 L1484.18 691.668 L1484.74 691.668 L1485.3 691.668 L1485.86 691.668 L1486.42 691.668 L1486.98 691.668 L1487.54 691.668 L1488.1 691.668 L1488.66 691.668 L1489.22 691.668 L1489.78 691.668 L1490.34 691.668 L1490.89 691.668 L1491.45 691.668 L1492.01 691.668 L1492.57 691.668 L1493.13 691.668 L1493.69 691.668 L1494.25 691.668 L1494.81 691.668 L1495.37 691.668 L1495.93 691.668 L1496.49 691.668 L1497.05 691.668 L1497.61 691.668 L1498.16 691.668 L1498.72 691.668 L1499.28 691.668 L1499.84 691.668 L1500.4 691.668 L1500.96 691.668 L1501.52 691.668 L1502.08 691.668 L1502.64 691.668 L1503.2 691.668 L1503.76 691.668 L1504.32 691.668 L1504.88 691.668 L1505.44 691.668 L1505.99 691.668 L1506.55 691.668 L1507.11 691.668 L1507.67 691.668 L1508.23 691.668 L1508.79 691.668 L1509.35 691.668 L1509.91 691.668 L1510.47 691.668 L1511.03 691.668 L1511.59 691.668 L1512.15 691.668 L1512.71 691.668 L1513.26 691.668 L1513.82 691.668 L1514.38 691.668 L1514.94 691.668 L1515.5 691.668 L1516.06 691.668 L1516.62 691.668 L1517.18 691.668 L1517.74 691.668 L1518.3 691.668 L1518.86 691.668 L1519.42 691.668 L1519.98 691.668 L1520.53 691.668 L1521.09 691.668 L1521.65 691.668 L1522.21 691.668 L1522.77 691.668 L1523.33 691.668 L1523.89 691.668 L1524.45 691.668 L1525.01 691.668 L1525.57 691.668 L1526.13 691.668 L1526.69 691.668 L1527.25 691.668 L1527.81 691.668 L1528.36 691.668 L1528.92 691.668 L1529.48 691.668 L1530.04 691.668 L1530.6 691.668 L1531.16 691.668 L1531.72 691.668 L1532.28 691.668 L1532.84 691.668 L1533.4 691.668 L1533.96 691.668 L1534.52 691.668 L1535.08 691.668 L1535.63 691.668 L1536.19 691.668 L1536.75 691.668 L1537.31 691.668 L1537.87 691.668 L1538.43 691.668 L1538.99 691.668 L1539.55 691.668 L1540.11 691.668 L1540.67 691.668 L1541.23 691.668 L1541.79 691.668 L1542.35 691.668 L1542.9 691.668 L1543.46 691.668 L1544.02 691.668 L1544.58 691.668 L1545.14 691.668 L1545.7 691.668 L1546.26 691.668 L1546.82 691.668 L1547.38 691.668 L1547.94 691.668 L1548.5 691.668 L1549.06 691.668 L1549.62 691.668 L1550.18 691.668 L1550.73 691.668 L1551.29 691.668 L1551.85 691.668 L1552.41 691.668 L1552.97 691.668 L1553.53 691.668 L1554.09 691.668 L1554.65 691.668 L1555.21 691.668 L1555.77 691.668 L1556.33 691.668 L1556.89 691.668 L1557.45 691.668 L1558 691.668 L1558.56 691.668 L1559.12 691.668 L1559.68 691.668 L1560.24 691.668 L1560.8 691.668 L1561.36 691.668 L1561.92 691.668 L1562.48 691.668 L1563.04 691.668 L1563.6 691.668 L1564.16 691.668 L1564.72 691.668 L1565.28 691.668 L1565.83 691.668 L1566.39 691.668 L1566.95 691.668 L1567.51 691.668 L1568.07 691.668 L1568.63 691.668 L1569.19 691.668 L1569.75 691.668 L1570.31 691.668 L1570.87 691.668 L1571.43 691.668 L1571.99 691.668 L1572.55 691.668 L1573.1 691.668 L1573.66 691.668 L1574.22 691.668 L1574.78 691.668 L1575.34 691.668 L1575.9 691.668 L1576.46 691.668 L1577.02 691.668 L1577.58 691.668 L1578.14 691.668 L1578.7 691.668 L1579.26 691.668 L1579.82 691.668 L1580.37 691.668 L1580.93 691.668 L1581.49 691.668 L1582.05 691.668 L1582.61 691.668 L1583.17 691.668 L1583.73 691.668 L1584.29 691.668 L1584.85 691.668 L1585.41 691.668 L1585.97 691.668 L1586.53 691.668 L1587.09 691.668 L1587.65 691.668 L1588.2 691.668 L1588.76 691.668 L1589.32 691.668 L1589.88 691.668 L1590.44 691.668 L1591 691.668 L1591.56 691.668 L1592.12 691.668 L1592.68 691.668 L1593.24 691.668 L1593.8 691.668 L1594.36 691.668 L1594.92 691.668 L1595.47 691.668 L1596.03 691.668 L1596.59 691.668 L1597.15 691.668 L1597.71 691.668 L1598.27 691.668 L1598.83 691.668 L1599.39 691.668 L1599.95 691.668 L1600.51 691.668 L1601.07 691.668 L1601.63 691.668 L1602.19 691.668 L1602.74 691.668 L1603.3 691.668 L1603.86 691.668 L1604.42 691.668 L1604.98 691.668 L1605.54 691.668 L1606.1 691.668 L1606.66 691.668 L1607.22 691.668 L1607.78 691.668 L1608.34 691.668 L1608.9 691.668 L1609.46 691.668 L1610.02 691.668 L1610.57 691.668 L1611.13 691.668 L1611.69 691.668 L1612.25 691.668 L1612.81 691.668 L1613.37 691.668 L1613.93 691.668 L1614.49 691.668 L1615.05 691.668 L1615.61 691.668 L1616.17 691.668 L1616.73 691.668 L1617.29 691.668 L1617.84 691.668 L1618.4 691.668 L1618.96 691.668 L1619.52 691.668 L1620.08 691.668 L1620.64 691.668 L1621.2 691.668 L1621.76 691.668 L1622.32 691.668 L1622.88 691.668 L1623.44 691.668 L1624 691.668 L1624.56 691.668 L1625.11 691.668 L1625.67 691.668 L1626.23 691.668 L1626.79 691.668 L1627.35 691.668 L1627.91 691.668 L1628.47 691.668 L1629.03 691.668 L1629.59 691.668 L1630.15 691.668 L1630.71 691.668 L1631.27 691.668 L1631.83 691.668 L1632.39 691.668 L1632.94 691.668 L1633.5 691.668 L1634.06 691.668 L1634.62 691.668 L1635.18 691.668 L1635.74 691.668 L1636.3 691.668 L1636.86 691.668 L1637.42 691.668 L1637.98 691.668 L1638.54 691.668 L1639.1 691.668 L1639.66 691.668 L1640.21 691.668 L1640.77 691.668 L1641.33 691.668 L1641.89 691.668 L1642.45 691.668 L1643.01 691.668 L1643.57 691.668 L1644.13 691.668 L1644.69 691.668 L1645.25 691.668 L1645.81 691.668 L1646.37 691.668 L1646.93 691.668 L1647.48 691.668 L1648.04 691.668 L1648.6 691.668 L1649.16 691.668 L1649.72 691.668 L1650.28 691.668 L1650.84 691.668 L1651.4 691.668 L1651.96 691.668 L1652.52 691.668 L1653.08 691.668 L1653.64 691.668 L1654.2 691.668 L1654.76 691.668 L1655.31 691.668 L1655.87 691.668 L1656.43 691.668 L1656.99 691.668 L1657.55 691.668 L1658.11 691.668 L1658.67 691.668 L1659.23 691.668 L1659.79 691.668 L1660.35 691.668 L1660.91 691.668 L1661.47 691.668 L1662.03 691.668 L1662.58 691.668 L1663.14 691.668 L1663.7 691.668 L1664.26 691.668 L1664.82 691.668 L1665.38 691.668 L1665.94 691.668 L1666.5 691.668 L1667.06 691.668 L1667.62 691.668 L1668.18 691.668 L1668.74 691.668 L1669.3 691.668 L1669.85 691.668 L1670.41 691.668 L1670.97 691.668 L1671.53 691.668 L1672.09 691.668 L1672.65 691.668 L1673.21 691.668 L1673.77 691.668 L1674.33 691.668 L1674.89 691.668 L1675.45 691.668 L1676.01 691.668 L1676.57 691.668 L1677.13 691.668 L1677.68 691.668 L1678.24 691.668 L1678.8 691.668 L1679.36 691.668 L1679.92 691.668 L1680.48 691.668 L1681.04 691.668 L1681.6 691.668 L1682.16 691.668 L1682.72 691.668 L1683.28 691.668 L1683.84 691.668 L1684.4 691.668 L1684.95 691.668 L1685.51 691.668 L1686.07 691.668 L1686.63 691.668 L1687.19 691.668 L1687.75 691.668 L1688.31 691.668 L1688.87 691.668 L1689.43 691.668 L1689.99 691.668 L1690.55 691.668 L1691.11 691.668 L1691.67 691.668 L1692.23 691.668 L1692.78 691.668 L1693.34 691.668 L1693.9 691.668 L1694.46 691.668 L1695.02 691.668 L1695.58 691.668 L1696.14 691.668 L1696.7 691.668 L1697.26 691.668 L1697.82 691.668 L1698.38 691.668 L1698.94 691.668 L1699.5 691.668 L1700.05 691.668 L1700.61 691.668 L1701.17 691.668 L1701.73 691.668 L1702.29 691.668 L1702.85 691.668 L1703.41 691.668 L1703.97 691.668 L1704.53 691.668 L1705.09 691.668 L1705.65 691.668 L1706.21 691.668 L1706.77 691.668 L1707.32 691.668 L1707.88 691.668 L1708.44 691.668 L1709 691.668 L1709.56 691.668 L1710.12 691.668 L1710.68 691.668 L1711.24 691.668 L1711.8 691.668 L1712.36 691.668 L1712.92 691.668 L1713.48 691.668 L1714.04 691.668 L1714.6 691.668 L1715.15 691.668 L1715.71 691.668 L1716.27 691.668 L1716.83 691.668 L1717.39 691.668 L1717.95 691.668 L1718.51 691.668 L1719.07 691.668 L1719.63 691.668 L1720.19 691.668 L1720.75 691.668 L1721.31 691.668 L1721.87 691.668 L1722.42 691.668 L1722.98 691.668 L1723.54 691.668 L1724.1 691.668 L1724.66 691.668 L1725.22 691.668 L1725.78 691.668 L1726.34 691.668 L1726.9 691.668 L1727.46 691.668 L1728.02 691.668 L1728.58 691.668 L1729.14 691.668 L1729.69 691.668 L1730.25 691.668 L1730.81 691.668 L1731.37 691.668 L1731.93 691.668 L1732.49 691.668 L1733.05 691.668 L1733.61 691.668 L1734.17 691.668 L1734.73 691.668 L1735.29 691.668 L1735.85 691.668 L1736.41 691.668 L1736.97 691.668 L1737.52 691.668 L1738.08 691.668 L1738.64 691.668 L1739.2 691.668 L1739.76 691.668 L1740.32 691.668 L1740.88 691.668 L1741.44 691.668 L1742 691.668 L1742.56 691.668 L1743.12 691.668 L1743.68 691.668 L1744.24 691.668 L1744.79 691.668 L1745.35 691.668 L1745.91 691.668 L1746.47 691.668 L1747.03 691.668 L1747.59 691.668 L1748.15 691.668 L1748.71 691.668 L1749.27 691.668 L1749.83 691.668 L1750.39 691.668 L1750.95 691.668 L1751.51 691.668 L1752.06 691.668 L1752.62 691.668 L1753.18 691.668 L1753.74 691.668 L1754.3 691.668 L1754.86 691.668 L1755.42 691.668 L1755.98 691.668 L1756.54 691.668 L1757.1 691.668 L1757.66 691.668 L1758.22 691.668 L1758.78 691.668 L1759.34 691.668 L1759.89 691.668 L1760.45 691.668 L1761.01 691.668 L1761.57 691.668 L1762.13 691.668 L1762.69 691.668 L1763.25 691.668 L1763.81 691.668 L1764.37 691.668 L1764.93 691.668 L1765.49 691.668 L1766.05 691.668 L1766.61 691.668 L1767.16 691.668 L1767.72 691.668 L1768.28 691.668 L1768.84 691.668 L1769.4 691.668 L1769.96 691.668 L1770.52 691.668 L1771.08 691.668 L1771.64 691.668 L1772.2 691.668 L1772.76 691.668 L1773.32 691.668 L1773.88 691.668 L1774.43 691.668 L1774.99 691.668 L1775.55 691.668 L1776.11 691.668 L1776.67 691.668 L1777.23 691.668 L1777.79 691.668 L1778.35 691.668 L1778.91 691.668 L1779.47 691.668 L1780.03 691.668 L1780.59 691.668 L1781.15 691.668 L1781.71 691.668 L1782.26 691.668 L1782.82 691.668 L1783.38 691.668 L1783.94 691.668 L1784.5 691.668 L1785.06 691.668 L1785.62 691.668 L1786.18 691.668 L1786.74 691.668 L1787.3 691.668 L1787.86 691.668 L1788.42 691.668 L1788.98 691.668 L1789.53 691.668 L1790.09 691.668 L1790.65 691.668 L1791.21 691.668 L1791.77 691.668 L1792.33 691.668 L1792.89 691.668 L1793.45 691.668 L1794.01 691.668 L1794.57 691.668 L1795.13 691.668 L1795.69 691.668 L1796.25 691.668 L1796.8 691.668 L1797.36 691.668 L1797.92 691.668 L1798.48 691.668 L1799.04 691.668 L1799.6 691.668 L1800.16 691.668 L1800.72 691.668 L1801.28 691.668 L1801.84 691.668 L1802.4 691.668 L1802.96 691.668 L1803.52 691.668 L1804.08 691.668 L1804.63 691.668 L1805.19 691.668 L1805.75 691.668 L1806.31 691.668 L1806.87 691.668 L1807.43 691.668 L1807.99 691.668 L1808.55 691.668 L1809.11 691.668 L1809.67 691.668 L1810.23 691.668 L1810.79 691.668 L1811.35 691.668 L1811.9 691.668 L1812.46 691.668 L1813.02 691.668 L1813.58 691.668 L1814.14 691.668 L1814.7 691.668 L1815.26 691.668 L1815.82 691.668 L1816.38 691.668 L1816.94 691.668 L1817.5 691.668 L1818.06 691.668 L1818.62 691.668 L1819.18 691.668 L1819.73 691.668 L1820.29 691.668 L1820.85 691.668 L1821.41 691.668 L1821.97 691.668 L1822.53 691.668 L1823.09 691.668 L1823.65 691.668 L1824.21 691.668 L1824.77 691.668 L1825.33 691.668 L1825.89 691.668 L1826.45 691.668 L1827 691.668 L1827.56 691.668 L1828.12 691.668 L1828.68 691.668 L1829.24 691.668 L1829.8 691.668 L1830.36 691.668 L1830.92 691.668 L1831.48 691.668 L1832.04 691.668 L1832.6 691.668 L1833.16 691.668 L1833.72 691.668 L1834.27 691.668 L1834.83 691.668 L1835.39 691.668 L1835.95 691.668 L1836.51 691.668 L1837.07 691.668 L1837.63 691.668 L1838.19 691.668 L1838.19 682.202 L1837.63 682.202 L1837.07 682.202 L1836.51 682.202 L1835.95 682.202 L1835.39 682.202 L1834.83 682.202 L1834.27 682.202 L1833.72 682.202 L1833.16 682.202 L1832.6 682.202 L1832.04 682.202 L1831.48 682.202 L1830.92 682.202 L1830.36 682.202 L1829.8 682.202 L1829.24 682.202 L1828.68 682.202 L1828.12 682.202 L1827.56 682.202 L1827 682.202 L1826.45 682.202 L1825.89 682.202 L1825.33 682.202 L1824.77 682.202 L1824.21 682.202 L1823.65 682.202 L1823.09 682.202 L1822.53 682.202 L1821.97 682.202 L1821.41 682.202 L1820.85 682.202 L1820.29 682.202 L1819.73 682.202 L1819.18 682.202 L1818.62 682.202 L1818.06 682.202 L1817.5 682.202 L1816.94 682.202 L1816.38 682.202 L1815.82 682.202 L1815.26 682.202 L1814.7 682.202 L1814.14 682.202 L1813.58 682.202 L1813.02 682.202 L1812.46 682.202 L1811.9 682.202 L1811.35 682.202 L1810.79 682.202 L1810.23 682.202 L1809.67 682.202 L1809.11 682.202 L1808.55 682.202 L1807.99 682.202 L1807.43 682.202 L1806.87 682.202 L1806.31 682.202 L1805.75 682.202 L1805.19 682.202 L1804.63 682.202 L1804.08 682.202 L1803.52 682.202 L1802.96 682.202 L1802.4 682.202 L1801.84 682.202 L1801.28 682.202 L1800.72 682.202 L1800.16 682.202 L1799.6 682.202 L1799.04 682.202 L1798.48 682.202 L1797.92 682.202 L1797.36 682.202 L1796.8 682.202 L1796.25 682.202 L1795.69 682.202 L1795.13 682.202 L1794.57 682.202 L1794.01 682.202 L1793.45 682.202 L1792.89 682.202 L1792.33 682.202 L1791.77 682.202 L1791.21 682.202 L1790.65 682.202 L1790.09 682.202 L1789.53 682.202 L1788.98 682.202 L1788.42 682.202 L1787.86 682.202 L1787.3 682.202 L1786.74 682.202 L1786.18 682.202 L1785.62 682.202 L1785.06 682.202 L1784.5 682.202 L1783.94 682.202 L1783.38 682.202 L1782.82 682.202 L1782.26 682.202 L1781.71 682.202 L1781.15 682.202 L1780.59 682.202 L1780.03 682.202 L1779.47 682.202 L1778.91 682.202 L1778.35 682.202 L1777.79 682.202 L1777.23 682.202 L1776.67 682.202 L1776.11 682.202 L1775.55 682.202 L1774.99 682.202 L1774.43 682.202 L1773.88 682.202 L1773.32 682.202 L1772.76 682.202 L1772.2 682.202 L1771.64 682.202 L1771.08 682.202 L1770.52 682.202 L1769.96 682.202 L1769.4 682.202 L1768.84 682.202 L1768.28 682.202 L1767.72 682.202 L1767.16 682.202 L1766.61 682.202 L1766.05 682.202 L1765.49 682.202 L1764.93 682.202 L1764.37 682.202 L1763.81 682.202 L1763.25 682.202 L1762.69 682.202 L1762.13 682.202 L1761.57 682.202 L1761.01 682.202 L1760.45 682.202 L1759.89 682.202 L1759.34 682.202 L1758.78 682.202 L1758.22 682.202 L1757.66 682.202 L1757.1 682.202 L1756.54 682.202 L1755.98 682.202 L1755.42 682.202 L1754.86 682.202 L1754.3 682.202 L1753.74 682.202 L1753.18 682.202 L1752.62 682.202 L1752.06 682.202 L1751.51 682.202 L1750.95 682.202 L1750.39 682.202 L1749.83 682.202 L1749.27 682.202 L1748.71 682.202 L1748.15 682.202 L1747.59 682.202 L1747.03 682.202 L1746.47 682.202 L1745.91 682.202 L1745.35 682.202 L1744.79 682.202 L1744.24 682.202 L1743.68 682.202 L1743.12 682.202 L1742.56 682.202 L1742 682.202 L1741.44 682.202 L1740.88 682.202 L1740.32 682.202 L1739.76 682.202 L1739.2 682.202 L1738.64 682.202 L1738.08 682.202 L1737.52 682.202 L1736.97 682.202 L1736.41 682.202 L1735.85 682.202 L1735.29 682.202 L1734.73 682.202 L1734.17 682.202 L1733.61 682.202 L1733.05 682.202 L1732.49 682.202 L1731.93 682.202 L1731.37 682.202 L1730.81 682.202 L1730.25 682.202 L1729.69 682.202 L1729.14 682.202 L1728.58 682.202 L1728.02 682.202 L1727.46 682.202 L1726.9 682.202 L1726.34 682.202 L1725.78 682.202 L1725.22 682.202 L1724.66 682.202 L1724.1 682.202 L1723.54 682.202 L1722.98 682.202 L1722.42 682.202 L1721.87 682.202 L1721.31 682.202 L1720.75 682.202 L1720.19 682.202 L1719.63 682.202 L1719.07 682.202 L1718.51 682.202 L1717.95 682.202 L1717.39 682.202 L1716.83 682.202 L1716.27 682.202 L1715.71 682.202 L1715.15 682.202 L1714.6 682.202 L1714.04 682.202 L1713.48 682.202 L1712.92 682.202 L1712.36 682.202 L1711.8 682.202 L1711.24 682.202 L1710.68 682.202 L1710.12 682.202 L1709.56 682.202 L1709 682.202 L1708.44 682.202 L1707.88 682.202 L1707.32 682.202 L1706.77 682.202 L1706.21 682.202 L1705.65 682.202 L1705.09 682.202 L1704.53 682.202 L1703.97 682.202 L1703.41 682.202 L1702.85 682.202 L1702.29 682.202 L1701.73 682.202 L1701.17 682.202 L1700.61 682.202 L1700.05 682.202 L1699.5 682.202 L1698.94 682.202 L1698.38 682.202 L1697.82 682.202 L1697.26 682.202 L1696.7 682.202 L1696.14 682.202 L1695.58 682.202 L1695.02 682.202 L1694.46 682.202 L1693.9 682.202 L1693.34 682.202 L1692.78 682.202 L1692.23 682.202 L1691.67 682.202 L1691.11 682.202 L1690.55 682.202 L1689.99 682.202 L1689.43 682.202 L1688.87 682.202 L1688.31 682.202 L1687.75 682.202 L1687.19 682.202 L1686.63 682.202 L1686.07 682.202 L1685.51 682.202 L1684.95 682.202 L1684.4 682.202 L1683.84 682.202 L1683.28 682.202 L1682.72 682.202 L1682.16 682.202 L1681.6 682.202 L1681.04 682.202 L1680.48 682.202 L1679.92 682.202 L1679.36 682.202 L1678.8 682.202 L1678.24 682.202 L1677.68 682.202 L1677.13 682.202 L1676.57 682.202 L1676.01 682.202 L1675.45 682.202 L1674.89 682.202 L1674.33 682.202 L1673.77 682.202 L1673.21 682.202 L1672.65 682.202 L1672.09 682.202 L1671.53 682.202 L1670.97 682.202 L1670.41 682.202 L1669.85 682.202 L1669.3 682.202 L1668.74 682.202 L1668.18 682.202 L1667.62 682.202 L1667.06 682.202 L1666.5 682.202 L1665.94 682.202 L1665.38 682.202 L1664.82 682.202 L1664.26 682.202 L1663.7 682.202 L1663.14 682.202 L1662.58 682.202 L1662.03 682.202 L1661.47 682.202 L1660.91 682.202 L1660.35 682.202 L1659.79 682.202 L1659.23 682.202 L1658.67 682.202 L1658.11 682.202 L1657.55 682.202 L1656.99 682.202 L1656.43 682.202 L1655.87 682.202 L1655.31 682.202 L1654.76 682.202 L1654.2 682.202 L1653.64 682.202 L1653.08 682.202 L1652.52 682.202 L1651.96 682.202 L1651.4 682.202 L1650.84 682.202 L1650.28 682.202 L1649.72 682.202 L1649.16 682.202 L1648.6 682.202 L1648.04 682.202 L1647.48 682.202 L1646.93 682.202 L1646.37 682.202 L1645.81 682.202 L1645.25 682.202 L1644.69 682.202 L1644.13 682.202 L1643.57 682.202 L1643.01 682.202 L1642.45 682.202 L1641.89 682.202 L1641.33 682.202 L1640.77 682.202 L1640.21 682.202 L1639.66 682.202 L1639.1 682.202 L1638.54 682.202 L1637.98 682.202 L1637.42 682.202 L1636.86 682.202 L1636.3 682.202 L1635.74 682.202 L1635.18 682.202 L1634.62 682.202 L1634.06 682.202 L1633.5 682.202 L1632.94 682.202 L1632.39 682.202 L1631.83 682.202 L1631.27 682.202 L1630.71 682.202 L1630.15 682.202 L1629.59 682.202 L1629.03 682.202 L1628.47 682.202 L1627.91 682.202 L1627.35 682.202 L1626.79 682.202 L1626.23 682.202 L1625.67 682.202 L1625.11 682.202 L1624.56 682.202 L1624 682.202 L1623.44 682.202 L1622.88 682.202 L1622.32 682.202 L1621.76 682.202 L1621.2 682.202 L1620.64 682.202 L1620.08 682.202 L1619.52 682.202 L1618.96 682.202 L1618.4 682.202 L1617.84 682.202 L1617.29 682.202 L1616.73 682.202 L1616.17 682.202 L1615.61 682.202 L1615.05 682.202 L1614.49 682.202 L1613.93 682.202 L1613.37 682.202 L1612.81 682.202 L1612.25 682.202 L1611.69 682.202 L1611.13 682.202 L1610.57 682.202 L1610.02 682.202 L1609.46 682.202 L1608.9 682.202 L1608.34 682.202 L1607.78 682.202 L1607.22 682.202 L1606.66 682.202 L1606.1 682.202 L1605.54 682.202 L1604.98 682.202 L1604.42 682.202 L1603.86 682.202 L1603.3 682.202 L1602.74 682.202 L1602.19 682.202 L1601.63 682.202 L1601.07 682.202 L1600.51 682.202 L1599.95 682.202 L1599.39 682.202 L1598.83 682.202 L1598.27 682.202 L1597.71 682.202 L1597.15 682.202 L1596.59 682.202 L1596.03 682.202 L1595.47 682.202 L1594.92 682.202 L1594.36 682.202 L1593.8 682.202 L1593.24 682.202 L1592.68 682.202 L1592.12 682.202 L1591.56 682.202 L1591 682.202 L1590.44 682.202 L1589.88 682.202 L1589.32 682.202 L1588.76 682.202 L1588.2 682.202 L1587.65 682.202 L1587.09 682.202 L1586.53 682.202 L1585.97 682.202 L1585.41 682.202 L1584.85 682.202 L1584.29 682.202 L1583.73 682.202 L1583.17 682.202 L1582.61 682.202 L1582.05 682.202 L1581.49 682.202 L1580.93 682.202 L1580.37 682.202 L1579.82 682.202 L1579.26 682.202 L1578.7 682.202 L1578.14 682.202 L1577.58 682.202 L1577.02 682.202 L1576.46 682.202 L1575.9 682.202 L1575.34 682.202 L1574.78 682.202 L1574.22 682.202 L1573.66 682.202 L1573.1 682.202 L1572.55 682.202 L1571.99 682.202 L1571.43 682.202 L1570.87 682.202 L1570.31 682.202 L1569.75 682.202 L1569.19 682.202 L1568.63 682.202 L1568.07 682.202 L1567.51 682.202 L1566.95 682.202 L1566.39 682.202 L1565.83 682.202 L1565.28 682.202 L1564.72 682.202 L1564.16 682.202 L1563.6 682.202 L1563.04 682.202 L1562.48 682.202 L1561.92 682.202 L1561.36 682.202 L1560.8 682.202 L1560.24 682.202 L1559.68 682.202 L1559.12 682.202 L1558.56 682.202 L1558 682.202 L1557.45 682.202 L1556.89 682.202 L1556.33 682.202 L1555.77 682.202 L1555.21 682.202 L1554.65 682.202 L1554.09 682.202 L1553.53 682.202 L1552.97 682.202 L1552.41 682.202 L1551.85 682.202 L1551.29 682.202 L1550.73 682.202 L1550.18 682.202 L1549.62 682.202 L1549.06 682.202 L1548.5 682.202 L1547.94 682.202 L1547.38 682.202 L1546.82 682.202 L1546.26 682.202 L1545.7 682.202 L1545.14 682.202 L1544.58 682.202 L1544.02 682.202 L1543.46 682.202 L1542.9 682.202 L1542.35 682.202 L1541.79 682.202 L1541.23 682.202 L1540.67 682.202 L1540.11 682.202 L1539.55 682.202 L1538.99 682.202 L1538.43 682.202 L1537.87 682.202 L1537.31 682.202 L1536.75 682.202 L1536.19 682.202 L1535.63 682.202 L1535.08 682.202 L1534.52 682.202 L1533.96 682.202 L1533.4 682.202 L1532.84 682.202 L1532.28 682.202 L1531.72 682.202 L1531.16 682.202 L1530.6 682.202 L1530.04 682.202 L1529.48 682.202 L1528.92 682.202 L1528.36 682.202 L1527.81 682.202 L1527.25 682.202 L1526.69 682.202 L1526.13 682.202 L1525.57 682.202 L1525.01 682.202 L1524.45 682.202 L1523.89 682.202 L1523.33 682.202 L1522.77 682.202 L1522.21 682.202 L1521.65 682.202 L1521.09 682.202 L1520.53 682.202 L1519.98 682.202 L1519.42 682.202 L1518.86 682.202 L1518.3 682.202 L1517.74 682.202 L1517.18 682.202 L1516.62 682.202 L1516.06 682.202 L1515.5 682.202 L1514.94 682.202 L1514.38 682.202 L1513.82 682.202 L1513.26 682.202 L1512.71 682.202 L1512.15 682.202 L1511.59 682.202 L1511.03 682.202 L1510.47 682.202 L1509.91 682.202 L1509.35 682.202 L1508.79 682.202 L1508.23 682.202 L1507.67 682.202 L1507.11 682.202 L1506.55 682.202 L1505.99 682.202 L1505.44 682.202 L1504.88 682.202 L1504.32 682.202 L1503.76 682.202 L1503.2 682.202 L1502.64 682.202 L1502.08 682.202 L1501.52 682.202 L1500.96 682.202 L1500.4 682.202 L1499.84 682.202 L1499.28 682.202 L1498.72 682.202 L1498.16 682.202 L1497.61 682.202 L1497.05 682.202 L1496.49 682.202 L1495.93 682.202 L1495.37 682.202 L1494.81 682.202 L1494.25 682.202 L1493.69 682.202 L1493.13 682.202 L1492.57 682.202 L1492.01 682.202 L1491.45 682.202 L1490.89 682.202 L1490.34 682.202 L1489.78 682.202 L1489.22 682.202 L1488.66 682.202 L1488.1 682.202 L1487.54 682.202 L1486.98 682.202 L1486.42 682.202 L1485.86 682.202 L1485.3 682.202 L1484.74 682.202 L1484.18 682.202 L1483.62 682.202 L1483.07 682.202 L1482.51 682.202 L1481.95 682.202 L1481.39 682.202 L1480.83 682.202 L1480.27 682.202 L1479.71 682.202 L1479.15 682.202 L1478.59 682.202 L1478.03 682.202 L1477.47 682.202 L1476.91 682.202 L1476.35 682.202 L1475.79 682.202 L1475.24 682.202 L1474.68 682.202 L1474.12 682.202 L1473.56 682.202 L1473 682.202 L1472.44 682.202 L1471.88 682.202 L1471.32 682.202 L1470.76 682.202 L1470.2 682.202 L1469.64 682.202 L1469.08 682.202 L1468.52 682.202 L1467.97 682.202 L1467.41 682.202 L1466.85 682.202 L1466.29 682.202 L1465.73 682.202 L1465.17 682.202 L1464.61 682.202 L1464.05 682.202 L1463.49 682.202 L1462.93 682.202 L1462.37 682.202 L1461.81 682.202 L1461.25 682.202 L1460.7 682.202 L1460.14 682.202 L1459.58 682.202 L1459.02 682.202 L1458.46 682.202 L1457.9 682.202 L1457.34 682.202 L1456.78 682.202 L1456.22 682.202 L1455.66 682.202 L1455.1 682.202 L1454.54 682.202 L1453.98 682.202 L1453.42 682.202 L1452.87 682.202 L1452.31 682.202 L1451.75 682.202 L1451.19 682.202 L1450.63 682.202 L1450.07 682.202 L1449.51 682.202 L1448.95 682.202 L1448.39 682.202 L1447.83 682.202 L1447.27 682.202 L1446.71 682.202 L1446.15 682.202 L1445.6 682.202 L1445.04 682.202 L1444.48 682.202 L1443.92 682.202 L1443.36 682.202 L1442.8 682.202 L1442.24 682.202 L1441.68 682.202 L1441.12 682.202 L1440.56 682.202 L1440 682.202 L1439.44 682.202 L1438.88 682.202 L1438.33 682.202 L1437.77 682.202 L1437.21 682.202 L1436.65 682.202 L1436.09 682.202 L1435.53 682.202 L1434.97 682.202 L1434.41 682.202 L1433.85 682.202 L1433.29 682.202 L1432.73 682.202 L1432.17 682.202 L1431.61 682.202 L1431.05 682.202 L1430.5 682.202 L1429.94 682.202 L1429.38 682.202 L1428.82 682.202 L1428.26 682.202 L1427.7 682.202 L1427.14 682.202 L1426.58 682.202 L1426.02 682.202 L1425.46 682.202 L1424.9 682.202 L1424.34 682.202 L1423.78 682.202 L1423.23 682.202 L1422.67 682.202 L1422.11 682.202 L1421.55 682.202 L1420.99 682.202 L1420.43 682.202 L1419.87 682.202 L1419.31 682.202 L1418.75 682.202 L1418.19 682.202 L1417.63 682.202 L1417.07 682.202 L1416.51 682.202 L1415.95 682.202 L1415.4 682.202 L1414.84 682.202 L1414.28 682.202 L1413.72 682.202 L1413.16 682.202 L1412.6 682.202 L1412.04 682.202 L1411.48 682.202 L1410.92 682.202 L1410.36 682.202 L1409.8 682.202 L1409.24 682.202 L1408.68 682.202 L1408.13 682.202 L1407.57 682.202 L1407.01 682.202 L1406.45 682.202 L1405.89 682.202 L1405.33 682.202 L1404.77 682.202 L1404.21 682.202 L1403.65 682.202 L1403.09 682.202 L1402.53 682.202 L1401.97 682.202 L1401.41 682.202 L1400.86 682.202 L1400.3 682.202 L1399.74 682.202 L1399.18 682.202 L1398.62 682.202 L1398.06 682.202 L1397.5 682.202 L1396.94 682.202 L1396.38 682.202 L1395.82 682.202 L1395.26 682.202 L1394.7 682.202 L1394.14 682.202 L1393.58 682.202 L1393.03 682.202 L1392.47 682.202 L1391.91 682.202 L1391.35 682.202 L1390.79 682.202 L1390.23 682.202 L1389.67 682.202 L1389.11 682.202 L1388.55 682.202 L1387.99 682.202 L1387.43 682.202 L1386.87 682.202 L1386.31 682.202 L1385.76 682.202 L1385.2 682.202 L1384.64 682.202 L1384.08 682.202 L1383.52 682.202 L1382.96 682.202 L1382.4 682.202 L1381.84 682.202 L1381.28 682.202 L1380.72 682.202 L1380.16 682.202 L1379.6 682.202 L1379.04 682.202 L1378.49 682.202 L1377.93 682.202 L1377.37 682.202 L1376.81 682.202 L1376.25 682.202 L1375.69 682.202 L1375.13 682.202 L1374.57 682.202 L1374.01 682.202 L1373.45 682.202 L1372.89 682.202 L1372.33 682.202 L1371.77 682.202 L1371.21 682.202 L1370.66 682.202 L1370.1 682.202 L1369.54 682.202 L1368.98 682.202 L1368.42 682.202 L1367.86 682.202 L1367.3 682.202 L1366.74 682.202 L1366.18 682.202 L1365.62 682.202 L1365.06 682.202 L1364.5 682.202 L1363.94 682.202 L1363.39 682.202 L1362.83 682.202 L1362.27 682.202 L1361.71 682.202 L1361.15 682.202 L1360.59 682.202 L1360.03 682.202 L1359.47 682.202 L1358.91 682.202 L1358.35 682.202 L1357.79 682.202 L1357.23 682.202 L1356.67 682.202 L1356.12 682.202 L1355.56 682.202 L1355 682.202 L1354.44 682.202 L1353.88 682.202 L1353.32 682.202 L1352.76 682.202 L1352.2 682.202 L1351.64 682.202 L1351.08 682.202 L1350.52 682.202 L1349.96 682.202 L1349.4 682.202 L1348.84 682.202 L1348.29 682.202 L1347.73 682.202 L1347.17 682.202 L1346.61 682.202 L1346.05 682.202 L1345.49 682.202 L1344.93 682.202 L1344.37 682.202 L1343.81 682.202 L1343.25 682.202 L1342.69 682.202 L1342.13 682.202 L1341.57 682.202 L1341.02 682.202 L1340.46 682.202 L1339.9 682.202 L1339.34 682.202 L1338.78 682.202 L1338.22 682.202 L1337.66 682.202 L1337.1 682.202 L1336.54 682.202 L1335.98 682.202 L1335.42 682.202 L1334.86 682.202 L1334.3 682.202 L1333.75 682.202 L1333.19 682.202 L1332.63 682.202 L1332.07 682.202 L1331.51 682.202 L1330.95 682.202 L1330.39 682.202 L1329.83 682.202 L1329.27 682.202 L1328.71 682.202 L1328.15 682.202 L1327.59 682.202 L1327.03 682.202 L1326.47 682.202 L1325.92 682.202 L1325.36 682.202 L1324.8 682.202 L1324.24 682.202 L1323.68 682.202 L1323.12 682.202 L1322.56 682.202 L1322 682.202 L1321.44 682.202 L1320.88 682.202 L1320.32 682.202 L1319.76 682.202 L1319.2 682.202 L1318.65 682.202 L1318.09 682.202 L1317.53 682.202 L1316.97 682.202 L1316.41 682.202 L1315.85 682.202 L1315.29 682.202 L1314.73 682.202 L1314.17 682.202 L1313.61 682.202 L1313.05 682.202 L1312.49 682.202 L1311.93 682.202 L1311.38 682.202 L1310.82 682.202 L1310.26 682.202 L1309.7 682.202 L1309.14 682.202 L1308.58 682.202 L1308.02 682.202 L1307.46 682.202 L1306.9 682.202 L1306.34 682.202 L1305.78 682.202 L1305.22 682.202 L1304.66 682.202 L1304.1 682.202 L1303.55 682.202 L1302.99 682.202 L1302.43 682.202 L1301.87 682.202 L1301.31 682.202 L1300.75 682.202 L1300.19 682.202 L1299.63 682.202 L1299.07 682.202 L1298.51 682.202 L1297.95 682.202 L1297.39 682.202 L1296.83 682.202 L1296.28 682.202 L1295.72 682.202 L1295.16 682.202 L1294.6 682.202 L1294.04 682.202 L1293.48 682.202 L1292.92 682.202 L1292.36 682.202 L1291.8 682.202 L1291.24 682.202 L1290.68 682.202 L1290.12 682.202 L1289.56 682.202 L1289 682.202 L1288.45 682.202 L1287.89 682.202 L1287.33 682.202 L1286.77 682.202 L1286.21 682.202 L1285.65 682.202 L1285.09 682.202 L1284.53 682.202 L1283.97 682.202 L1283.41 682.202 L1282.85 682.202 L1282.29 682.202 L1281.73 682.202 L1281.18 682.202 L1280.62 682.202 L1280.06 682.202 L1279.5 682.202 L1278.94 682.202 L1278.38 682.202 L1277.82 682.202 L1277.26 682.202 L1276.7 682.202 L1276.14 682.202 L1275.58 682.202 L1275.02 682.202 L1274.46 682.202 L1273.91 682.202 L1273.35 682.202 L1272.79 682.202 L1272.23 682.202 L1271.67 682.202 L1271.11 682.202 L1270.55 682.202 L1269.99 682.202 L1269.43 682.202 L1268.87 682.202 L1268.31 682.202 L1267.75 682.202 L1267.19 682.202 L1266.63 682.202 L1266.08 682.202 L1265.52 682.202 L1264.96 682.202 L1264.4 682.202 L1263.84 682.202 L1263.28 682.202 L1262.72 682.202 L1262.16 682.202 L1261.6 682.202 L1261.04 682.202 L1260.48 682.202 L1259.92 682.202 L1259.36 682.202 L1258.81 682.202 L1258.25 682.202 L1257.69 682.202 L1257.13 682.202 L1256.57 682.202 L1256.01 682.202 L1255.45 682.202 L1254.89 682.202 L1254.33 682.202 L1253.77 682.202 L1253.21 682.202 L1252.65 682.202 L1252.09 682.202 L1251.54 682.202 L1250.98 682.202 L1250.42 682.202 L1249.86 682.202 L1249.3 682.202 L1248.74 682.202 L1248.18 682.202 L1247.62 682.202 L1247.06 682.202 L1246.5 682.202 L1245.94 682.202 L1245.38 682.202 L1244.82 682.202 L1244.26 682.202 L1243.71 682.202 L1243.15 682.202 L1242.59 682.202 L1242.03 682.202 L1241.47 682.202 L1240.91 682.202 L1240.35 682.202 L1239.79 682.202 L1239.23 682.202 L1238.67 682.202 L1238.11 682.202 L1237.55 682.202 L1236.99 682.202 L1236.44 682.202 L1235.88 682.202 L1235.32 682.202 L1234.76 682.202 L1234.2 682.202 L1233.64 682.202 L1233.08 682.202 L1232.52 682.202 L1231.96 682.202 L1231.4 682.202 L1230.84 682.202 L1230.28 682.202 L1229.72 682.202 L1229.17 682.202 L1228.61 682.202 L1228.05 682.202 L1227.49 682.202 L1226.93 682.202 L1226.37 682.202 L1225.81 682.202 L1225.25 682.202 L1224.69 682.202 L1224.13 682.202 L1223.57 682.202 L1223.01 682.202 L1222.45 682.202 L1221.89 682.202 L1221.34 682.202 L1220.78 682.202 L1220.22 682.202 L1219.66 682.202 L1219.1 682.202 L1218.54 682.202 L1217.98 682.202 L1217.42 682.202 L1216.86 682.202 L1216.3 682.202 L1215.74 682.202 L1215.18 682.202 L1214.62 682.202 L1214.07 682.202 L1213.51 682.202 L1212.95 682.202 L1212.39 682.202 L1211.83 682.202 L1211.27 682.202 L1210.71 682.202 L1210.15 682.202 L1209.59 682.202 L1209.03 682.202 L1208.47 682.202 L1207.91 682.202 L1207.35 682.202 L1206.8 682.202 L1206.24 682.202 L1205.68 682.202 L1205.12 682.202 L1204.56 682.202 L1204 682.202 L1203.44 682.202 L1202.88 682.202 L1202.32 682.202 L1201.76 682.202 L1201.2 682.202 L1200.64 682.202 L1200.08 682.202 L1199.52 682.202 L1198.97 682.202 L1198.41 682.202 L1197.85 682.202 L1197.29 682.202 L1196.73 682.202 L1196.17 682.202 L1195.61 682.202 L1195.05 682.202 L1194.49 682.202 L1193.93 682.202 L1193.37 682.202 L1192.81 682.202 L1192.25 682.202 L1191.7 682.202 L1191.14 682.202 L1190.58 682.202 L1190.02 682.202 L1189.46 682.202 L1188.9 682.202 L1188.34 682.202 L1187.78 682.202 L1187.22 682.202 L1186.66 682.202 L1186.1 682.202 L1185.54 682.202 L1184.98 682.202 L1184.43 682.202 L1183.87 682.202 L1183.31 682.202 L1182.75 682.202 L1182.19 682.202 L1181.63 682.202 L1181.07 682.202 L1180.51 682.202 L1179.95 682.202 L1179.39 682.202 L1178.83 682.202 L1178.27 682.202 L1177.71 682.202 L1177.15 682.202 L1176.6 682.202 L1176.04 682.202 L1175.48 682.202 L1174.92 682.202 L1174.36 682.202 L1173.8 682.202 L1173.24 682.202 L1172.68 682.202 L1172.12 682.202 L1171.56 682.202 L1171 682.202 L1170.44 682.202 L1169.88 682.202 L1169.33 682.202 L1168.77 682.202 L1168.21 682.202 L1167.65 682.202 L1167.09 682.202 L1166.53 682.202 L1165.97 682.202 L1165.41 682.202 L1164.85 682.202 L1164.29 682.202 L1163.73 682.202 L1163.17 682.202 L1162.61 682.202 L1162.05 682.202 L1161.5 682.202 L1160.94 682.202 L1160.38 682.202 L1159.82 682.202 L1159.26 682.202 L1158.7 682.202 L1158.14 682.202 L1157.58 682.202 L1157.02 682.202 L1156.46 682.202 L1155.9 682.202 L1155.34 682.202 L1154.78 682.202 L1154.23 682.202 L1153.67 682.202 L1153.11 682.202 L1152.55 682.202 L1151.99 682.202 L1151.43 682.202 L1150.87 682.202 L1150.31 682.202 L1149.75 682.202 L1149.19 682.202 L1148.63 682.202 L1148.07 682.202 L1147.51 682.202 L1146.96 682.202 L1146.4 682.202 L1145.84 682.202 L1145.28 682.202 L1144.72 682.202 L1144.16 682.202 L1143.6 682.202 L1143.04 682.202 L1142.48 682.202 L1141.92 682.202 L1141.36 682.202 L1140.8 682.202 L1140.24 682.202 L1139.68 682.202 L1139.13 682.202 L1138.57 682.202 L1138.01 682.202 L1137.45 682.202 L1136.89 682.202 L1136.33 682.202 L1135.77 682.202 L1135.21 682.202 L1134.65 682.202 L1134.09 682.202 L1133.53 682.202 L1132.97 682.202 L1132.41 682.202 L1131.86 682.202 L1131.3 682.202 L1130.74 682.202 L1130.18 682.202 L1129.62 682.202 L1129.06 682.202 L1128.5 682.202 L1127.94 682.202 L1127.38 682.202 L1126.82 682.202 L1126.26 682.202 L1125.7 682.202 L1125.14 682.202 L1124.59 682.202 L1124.03 682.202 L1123.47 682.202 L1122.91 682.202 L1122.35 682.202 L1121.79 682.202 L1121.23 682.202 L1120.67 682.202 L1120.11 682.202 L1119.55 682.202 L1118.99 682.202 L1118.43 682.202 L1117.87 682.202 L1117.31 682.202 L1116.76 682.202 L1116.2 682.202 L1115.64 682.202 L1115.08 682.202 L1114.52 682.202 L1113.96 682.202 L1113.4 682.202 L1112.84 682.202 L1112.28 682.202 L1111.72 682.202 L1111.16 682.202 L1110.6 682.202 L1110.04 682.202 L1109.49 682.202 L1108.93 682.202 L1108.37 682.202 L1107.81 682.202 L1107.25 682.202 L1106.69 682.202 L1106.13 682.202 L1105.57 682.202 L1105.01 682.202 L1104.45 682.202 L1103.89 682.202 L1103.33 682.202 L1102.77 682.202 L1102.22 682.202 L1101.66 682.202 L1101.1 682.202 L1100.54 682.202 L1099.98 682.202 L1099.42 682.202 L1098.86 682.202 L1098.3 682.202 L1097.74 682.202 L1097.18 682.202 L1096.62 682.202 L1096.06 682.202 L1095.5 682.202 L1094.94 682.202 L1094.39 682.202 L1093.83 682.202 L1093.27 682.202 L1092.71 682.202 L1092.15 682.202 L1091.59 682.202 L1091.03 682.202 L1090.47 682.202 L1089.91 682.202 L1089.35 682.202 L1088.79 682.202 L1088.23 682.202 L1087.67 682.202 L1087.12 682.202 L1086.56 682.202 L1086 682.202 L1085.44 682.202 L1084.88 682.202 L1084.32 682.202 L1083.76 682.202 L1083.2 682.202 L1082.64 682.202 L1082.08 682.202 L1081.52 682.202 L1080.96 682.202 L1080.4 682.202 L1079.85 682.202 L1079.29 682.202 L1078.73 682.202 L1078.17 682.202 L1077.61 682.202 L1077.05 682.202 L1076.49 682.202 L1075.93 682.202 L1075.37 682.202 L1074.81 682.202 L1074.25 682.202 L1073.69 682.202 L1073.13 682.202 L1072.57 682.202 L1072.02 682.202 L1071.46 682.202 L1070.9 682.202 L1070.34 682.202 L1069.78 682.202 L1069.22 682.202 L1068.66 682.202 L1068.1 682.202 L1067.54 682.202 L1066.98 682.202 L1066.42 682.202 L1065.86 682.202 L1065.3 682.202 L1064.75 682.202 L1064.19 682.202 L1063.63 682.202 L1063.07 682.202 L1062.51 682.202 L1061.95 682.202 L1061.39 682.202 L1060.83 682.202 L1060.27 682.202 L1059.71 682.202 L1059.15 682.202 L1058.59 682.202 L1058.03 682.202 L1057.48 682.202 L1056.92 682.202 L1056.36 682.202 L1055.8 682.202 L1055.24 682.202 L1054.68 682.202 L1054.12 682.202 L1053.56 682.202 L1053 682.202 L1052.44 682.202 L1051.88 682.202 L1051.32 682.202 L1050.76 682.202 L1050.2 682.202 L1049.65 682.202 L1049.09 682.202 L1048.53 682.202 L1047.97 682.202 L1047.41 682.202 L1046.85 682.202 L1046.29 682.202 L1045.73 682.202 L1045.17 682.202 L1044.61 682.202 L1044.05 682.202 L1043.49 682.202 L1042.93 682.202 L1042.38 682.202 L1041.82 682.202 L1041.26 682.202 L1040.7 682.202 L1040.14 682.202 L1039.58 682.202 L1039.02 682.202 L1038.46 682.202 L1037.9 682.202 L1037.34 682.202 L1036.78 682.202 L1036.22 682.202 L1035.66 682.202 L1035.1 682.202 L1034.55 682.202 L1033.99 682.202 L1033.43 682.202 L1032.87 682.202 L1032.31 682.202 L1031.75 682.202 L1031.19 682.202 L1030.63 682.202 L1030.07 682.202 L1029.51 682.202 L1028.95 682.202 L1028.39 682.202 L1027.83 682.202 L1027.28 682.202 L1026.72 682.202 L1026.16 682.202 L1025.6 682.202 L1025.04 682.202 L1024.48 682.202 L1023.92 682.202 L1023.36 682.202 L1022.8 682.202 L1022.24 682.202 L1021.68 682.202 L1021.12 682.202 L1020.56 682.202 L1020.01 682.202 L1019.45 682.202 L1018.89 682.202 L1018.33 682.202 L1017.77 682.202 L1017.21 682.202 L1016.65 682.202 L1016.09 682.202 L1015.53 682.202 L1014.97 682.202 L1014.41 682.202 L1013.85 682.202 L1013.29 682.202 L1012.73 682.202 L1012.18 682.202 L1011.62 682.202 L1011.06 682.202 L1010.5 682.202 L1009.94 682.202 L1009.38 682.202 L1008.82 682.202 L1008.26 682.202 L1007.7 682.202 L1007.14 682.202 L1006.58 682.202 L1006.02 682.202 L1005.46 682.202 L1004.91 682.202 L1004.35 682.202 L1003.79 682.202 L1003.23 682.202 L1002.67 682.202 L1002.11 682.202 L1001.55 682.202 L1000.99 682.202 L1000.43 682.202 L999.872 682.202 L999.313 682.202 L998.754 682.202 L998.194 682.202 L997.635 682.202 L997.076 682.202 L996.517 682.202 L995.957 682.202 L995.398 682.202 L994.839 682.202 L994.28 682.202 L993.72 682.202 L993.161 682.202 L992.602 682.202 L992.043 682.202 L991.483 682.202 L990.924 682.202 L990.365 682.202 L989.806 682.202 L989.246 682.202 L988.687 682.202 L988.128 682.202 L987.569 682.202 L987.009 682.202 L986.45 682.202 L985.891 682.202 L985.332 682.202 L984.772 682.202 L984.213 682.202 L983.654 682.202 L983.095 682.202 L982.535 682.202 L981.976 682.202 L981.417 682.202 L980.858 682.202 L980.298 682.202 L979.739 682.202 L979.18 682.202 L978.621 682.202 L978.061 682.202 L977.502 682.202 L976.943 682.202 L976.384 682.202 L975.824 682.202 L975.265 682.202 L974.706 682.202 L974.147 682.202 L973.587 682.202 L973.028 682.202 L972.469 682.202 L971.91 682.202 L971.35 682.202 L970.791 682.202 L970.232 682.202 L969.673 682.202 L969.113 682.202 L968.554 682.202 L967.995 682.202 L967.436 682.202 L966.876 682.202 L966.317 682.202 L965.758 682.202 L965.199 682.202 L964.639 682.202 L964.08 682.202 L963.521 682.202 L962.962 682.202 L962.402 682.202 L961.843 682.202 L961.284 682.202 L960.725 682.202 L960.165 682.202 L959.606 682.202 L959.047 682.202 L958.488 682.202 L957.928 682.202 L957.369 682.202 L956.81 682.202 L956.251 682.202 L955.691 682.202 L955.132 682.202 L954.573 682.202 L954.014 682.202 L953.454 682.202 L952.895 682.202 L952.336 682.202 L951.777 682.202 L951.217 682.202 L950.658 682.202 L950.099 682.202 L949.54 682.202 L948.98 682.202 L948.421 682.202 L947.862 682.202 L947.303 682.202 L946.743 682.202 L946.184 682.202 L945.625 682.202 L945.066 682.202 L944.506 682.202 L943.947 682.202 L943.388 682.202 L942.829 682.202 L942.269 682.202 L941.71 682.202 L941.151 682.202 L940.592 682.202 L940.032 682.202 L939.473 682.202 L938.914 682.202 L938.355 682.202 L937.795 682.202 L937.236 682.202 L936.677 682.202 L936.118 682.202 L935.558 682.202 L934.999 682.202 L934.44 682.202 L933.881 682.202 L933.321 682.202 L932.762 682.202 L932.203 682.202 L931.644 682.202 L931.084 682.202 L930.525 682.202 L929.966 682.202 L929.406 682.202 L928.847 682.202 L928.288 682.202 L927.729 682.202 L927.169 682.202 L926.61 682.202 L926.051 682.202 L925.492 682.202 L924.932 682.202 L924.373 682.202 L923.814 682.202 L923.255 682.202 L922.695 682.202 L922.136 682.202 L921.577 682.202 L921.018 682.202 L920.458 682.202 L919.899 682.202 L919.34 682.202 L918.781 682.202 L918.221 682.202 L917.662 682.202 L917.103 682.202 L916.544 682.202 L915.984 682.202 L915.425 682.202 L914.866 682.202 L914.307 682.202 L913.747 682.202 L913.188 682.202 L912.629 682.202 L912.07 682.202 L911.51 682.202 L910.951 682.202 L910.392 682.202 L909.833 682.202 L909.273 682.202 L908.714 682.202 L908.155 682.202 L907.596 682.202 L907.036 682.202 L906.477 682.202 L905.918 682.202 L905.359 682.202 L904.799 682.202 L904.24 682.202 L903.681 682.202 L903.122 682.202 L902.562 682.202 L902.003 682.202 L901.444 682.202 L900.885 682.202 L900.325 682.202 L899.766 682.202 L899.207 682.202 L898.648 682.202 L898.088 682.202 L897.529 682.202 L896.97 682.202 L896.411 682.202 L895.851 682.202 L895.292 682.202 L894.733 682.202 L894.174 682.202 L893.614 682.202 L893.055 682.202 L892.496 682.202 L891.937 682.202 L891.377 682.202 L890.818 682.202 L890.259 682.202 L889.7 682.202 L889.14 682.202 L888.581 682.202 L888.022 682.202 L887.463 682.202 L886.903 682.202 L886.344 682.202 L885.785 682.202 L885.226 682.202 L884.666 682.202 L884.107 682.202 L883.548 682.202 L882.989 682.202 L882.429 682.202 L881.87 682.202 L881.311 682.202 L880.752 682.202 L880.192 682.202 L879.633 682.202 L879.074 682.202 L878.515 682.202 L877.955 682.202 L877.396 682.202 L876.837 682.202 L876.278 682.202 L875.718 682.202 L875.159 682.202 L874.6 682.202 L874.041 682.202 L873.481 682.202 L872.922 682.202 L872.363 682.202 L871.804 682.202 L871.244 682.202 L870.685 682.202 L870.126 682.202 L869.567 682.202 L869.007 682.202 L868.448 682.202 L867.889 682.202 L867.33 682.202 L866.77 682.202 L866.211 682.202 L865.652 682.202 L865.093 682.202 L864.533 682.202 L863.974 682.202 L863.415 682.202 L862.856 682.202 L862.296 682.202 L861.737 682.202 L861.178 682.202 L860.619 682.202 L860.059 682.202 L859.5 682.202 L858.941 682.202 L858.382 682.202 L857.822 682.202 L857.263 682.202 L856.704 682.202 L856.145 682.202 L855.585 682.202 L855.026 682.202 L854.467 682.202 L853.908 682.202 L853.348 682.202 L852.789 682.202 L852.23 682.202 L851.671 682.202 L851.111 682.202 L850.552 682.202 L849.993 682.202 L849.434 682.202 L848.874 682.202 L848.315 682.202 L847.756 682.202 L847.197 682.202 L846.637 682.202 L846.078 682.202 L845.519 682.202 L844.96 682.202 L844.4 682.202 L843.841 682.202 L843.282 682.202 L842.723 682.202 L842.163 682.202 L841.604 682.202 L841.045 682.202 L840.486 682.202 L839.926 682.202 L839.367 682.202 L838.808 682.202 L838.249 682.202 L837.689 682.202 L837.13 682.202 L836.571 682.202 L836.012 682.202 L835.452 682.202 L834.893 682.202 L834.334 682.202 L833.775 682.202 L833.215 682.202 L832.656 682.202 L832.097 682.202 L831.538 682.202 L830.978 682.202 L830.419 682.202 L829.86 682.202 L829.301 682.202 L828.741 682.202 L828.182 682.202 L827.623 682.202 L827.064 682.202 L826.504 682.202 L825.945 682.202 L825.386 682.202 L824.827 682.202 L824.267 682.202 L823.708 682.202 L823.149 682.202 L822.59 682.202 L822.03 682.202 L821.471 682.202 L820.912 682.202 L820.353 682.202 L819.793 682.202 L819.234 682.202 L818.675 682.202 L818.116 682.202 L817.556 682.202 L816.997 682.202 L816.438 682.202 L815.879 682.202 L815.319 682.202 L814.76 682.202 L814.201 682.202 L813.642 682.202 L813.082 682.202 L812.523 682.202 L811.964 682.202 L811.405 682.202 L810.845 682.202 L810.286 682.202 L809.727 682.202 L809.168 682.202 L808.608 682.202 L808.049 682.202 L807.49 682.202 L806.931 682.202 L806.371 682.202 L805.812 682.202 L805.253 682.202 L804.693 682.202 L804.134 682.202 L803.575 682.202 L803.016 682.202 L802.456 682.202 L801.897 682.202 L801.338 682.202 L800.779 682.202 L800.219 682.202 L799.66 682.202 L799.101 682.202 L798.542 682.202 L797.982 682.202 L797.423 682.202 L796.864 682.202 L796.305 682.202 L795.745 682.202 L795.186 682.202 L794.627 682.202 L794.068 682.202 L793.508 682.202 L792.949 682.202 L792.39 682.202 L791.831 682.202 L791.271 682.202 L790.712 682.202 L790.153 682.202 L789.594 682.202 L789.034 682.202 L788.475 682.202 L787.916 682.202 L787.357 682.202 L786.797 682.202 L786.238 682.202 L785.679 682.202 L785.12 682.202 L784.56 682.202 L784.001 682.202 L783.442 682.202 L782.883 682.202 L782.323 682.202 L781.764 682.202 L781.205 682.202 L780.646 682.202 L780.086 682.202 L779.527 682.202 L778.968 682.202 L778.409 682.202 L777.849 682.202 L777.29 682.202 L776.731 682.202 L776.172 682.202 L775.612 682.202 L775.053 682.202 L774.494 682.202 L773.935 682.202 L773.375 682.202 L772.816 682.202 L772.257 682.202 L771.698 682.202 L771.138 682.202 L770.579 682.202 L770.02 682.202 L769.461 682.202 L768.901 682.202 L768.342 682.202 L767.783 682.202 L767.224 682.202 L766.664 682.202 L766.105 682.202 L765.546 682.202 L764.987 682.202 L764.427 682.202 L763.868 682.202 L763.309 682.202 L762.75 682.202 L762.19 682.202 L761.631 682.202 L761.072 682.202 L760.513 682.202 L759.953 682.202 L759.394 682.202 L758.835 682.202 L758.276 682.202 L757.716 682.202 L757.157 682.202 L756.598 682.202 L756.039 682.202 L755.479 682.202 L754.92 682.202 L754.361 682.202 L753.802 682.202 L753.242 682.202 L752.683 682.202 L752.124 682.202 L751.565 682.202 L751.005 682.202 L750.446 682.202 L749.887 682.202 L749.328 682.202 L748.768 682.202 L748.209 682.202 L747.65 682.202 L747.091 682.202 L746.531 682.202 L745.972 682.202 L745.413 682.202 L744.854 682.202 L744.294 682.202 L743.735 682.202 L743.176 682.202 L742.617 682.202 L742.057 682.202 L741.498 682.202 L740.939 682.202 L740.38 682.202 L739.82 682.202 L739.261 682.202 L738.702 682.202 L738.143 682.202 L737.583 682.202 L737.024 682.202 L736.465 682.202 L735.906 682.202 L735.346 682.202 L734.787 682.202 L734.228 682.202 L733.669 682.202 L733.109 682.202 L732.55 682.202 L731.991 682.202 L731.432 682.202 L730.872 682.202 L730.313 682.202 L729.754 682.202 L729.195 682.202 L728.635 682.202 L728.076 682.202 L727.517 682.202 L726.958 682.202 L726.398 682.202 L725.839 682.202 L725.28 682.202 L724.721 682.202 L724.161 682.202 L723.602 682.202 L723.043 682.202 L722.484 682.202 L721.924 682.202 L721.365 682.202 L720.806 682.202 L720.247 682.202  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.935 720.806,686.935 721.365,686.935 721.924,686.935 722.484,686.935 723.043,686.935 723.602,686.935 724.161,686.935 724.721,686.935 725.28,686.935 725.839,686.935 726.398,686.935 726.958,686.935 727.517,686.935 728.076,686.935 728.635,686.935 729.195,686.935 729.754,686.935 730.313,686.935 730.872,686.935 731.432,686.935 731.991,686.935 732.55,686.935 733.109,686.935 733.669,686.935 734.228,686.935 734.787,686.935 735.346,686.935 735.906,686.935 736.465,686.935 737.024,686.935 737.583,686.935 738.143,686.935 738.702,686.935 739.261,686.935 739.82,686.935 740.38,686.935 740.939,686.935 741.498,686.935 742.057,686.935 742.617,686.935 743.176,686.935 743.735,686.935 744.294,686.935 744.854,686.935 745.413,686.935 745.972,686.935 746.531,686.935 747.091,686.935 747.65,686.935 748.209,686.935 748.768,686.935 749.328,686.935 749.887,686.935 750.446,686.935 751.005,686.935 751.565,686.935 752.124,686.935 752.683,686.935 753.242,686.935 753.802,686.935 754.361,686.935 754.92,686.935 755.479,686.935 756.039,686.935 756.598,686.935 757.157,686.935 757.716,686.935 758.276,686.935 758.835,686.935 759.394,686.935 759.953,686.935 760.513,686.935 761.072,686.935 761.631,686.935 762.19,686.935 762.75,686.935 763.309,686.935 763.868,686.935 764.427,686.935 764.987,686.935 765.546,686.935 766.105,686.935 766.664,686.935 767.224,686.935 767.783,686.935 768.342,686.935 768.901,686.935 769.461,686.935 770.02,686.935 770.579,686.935 771.138,686.935 771.698,686.935 772.257,686.935 772.816,686.935 773.375,686.935 773.935,686.935 774.494,686.935 775.053,686.935 775.612,686.935 776.172,686.935 776.731,686.935 777.29,686.935 777.849,686.935 778.409,686.935 778.968,686.935 779.527,686.935 780.086,686.935 780.646,686.935 781.205,686.935 781.764,686.935 782.323,686.935 782.883,686.935 783.442,686.935 784.001,686.935 784.56,686.935 785.12,686.935 785.679,686.935 786.238,686.935 786.797,686.935 787.357,686.935 787.916,686.935 788.475,686.935 789.034,686.935 789.594,686.935 790.153,686.935 790.712,686.935 791.271,686.935 791.831,686.935 792.39,686.935 792.949,686.935 793.508,686.935 794.068,686.935 794.627,686.935 795.186,686.935 795.745,686.935 796.305,686.935 796.864,686.935 797.423,686.935 797.982,686.935 798.542,686.935 799.101,686.935 799.66,686.935 800.219,686.935 800.779,686.935 801.338,686.935 801.897,686.935 802.456,686.935 803.016,686.935 803.575,686.935 804.134,686.935 804.693,686.935 805.253,686.935 805.812,686.935 806.371,686.935 806.931,686.935 807.49,686.935 808.049,686.935 808.608,686.935 809.168,686.935 809.727,686.935 810.286,686.935 810.845,686.935 811.405,686.935 811.964,686.935 812.523,686.935 813.082,686.935 813.642,686.935 814.201,686.935 814.76,686.935 815.319,686.935 815.879,686.935 816.438,686.935 816.997,686.935 817.556,686.935 818.116,686.935 818.675,686.935 819.234,686.935 819.793,686.935 820.353,686.935 820.912,686.935 821.471,686.935 822.03,686.935 822.59,686.935 823.149,686.935 823.708,686.935 824.267,686.935 824.827,686.935 825.386,686.935 825.945,686.935 826.504,686.935 827.064,686.935 827.623,686.935 828.182,686.935 828.741,686.935 829.301,686.935 829.86,686.935 830.419,686.935 830.978,686.935 831.538,686.935 832.097,686.935 832.656,686.935 833.215,686.935 833.775,686.935 834.334,686.935 834.893,686.935 835.452,686.935 836.012,686.935 836.571,686.935 837.13,686.935 837.689,686.935 838.249,686.935 838.808,686.935 839.367,686.935 839.926,686.935 840.486,686.935 841.045,686.935 841.604,686.935 842.163,686.935 842.723,686.935 843.282,686.935 843.841,686.935 844.4,686.935 844.96,686.935 845.519,686.935 846.078,686.935 846.637,686.935 847.197,686.935 847.756,686.935 848.315,686.935 848.874,686.935 849.434,686.935 849.993,686.935 850.552,686.935 851.111,686.935 851.671,686.935 852.23,686.935 852.789,686.935 853.348,686.935 853.908,686.935 854.467,686.935 855.026,686.935 855.585,686.935 856.145,686.935 856.704,686.935 857.263,686.935 857.822,686.935 858.382,686.935 858.941,686.935 859.5,686.935 860.059,686.935 860.619,686.935 861.178,686.935 861.737,686.935 862.296,686.935 862.856,686.935 863.415,686.935 863.974,686.935 864.533,686.935 865.093,686.935 865.652,686.935 866.211,686.935 866.77,686.935 867.33,686.935 867.889,686.935 868.448,686.935 869.007,686.935 869.567,686.935 870.126,686.935 870.685,686.935 871.244,686.935 871.804,686.935 872.363,686.935 872.922,686.935 873.481,686.935 874.041,686.935 874.6,686.935 875.159,686.935 875.718,686.935 876.278,686.935 876.837,686.935 877.396,686.935 877.955,686.935 878.515,686.935 879.074,686.935 879.633,686.935 880.192,686.935 880.752,686.935 881.311,686.935 881.87,686.935 882.429,686.935 882.989,686.935 883.548,686.935 884.107,686.935 884.666,686.935 885.226,686.935 885.785,686.935 886.344,686.935 886.903,686.935 887.463,686.935 888.022,686.935 888.581,686.935 889.14,686.935 889.7,686.935 890.259,686.935 890.818,686.935 891.377,686.935 891.937,686.935 892.496,686.935 893.055,686.935 893.614,686.935 894.174,686.935 894.733,686.935 895.292,686.935 895.851,686.935 896.411,686.935 896.97,686.935 897.529,686.935 898.088,686.935 898.648,686.935 899.207,686.935 899.766,686.935 900.325,686.935 900.885,686.935 901.444,686.935 902.003,686.935 902.562,686.935 903.122,686.935 903.681,686.935 904.24,686.935 904.799,686.935 905.359,686.935 905.918,686.935 906.477,686.935 907.036,686.935 907.596,686.935 908.155,686.935 908.714,686.935 909.273,686.935 909.833,686.935 910.392,686.935 910.951,686.935 911.51,686.935 912.07,686.935 912.629,686.935 913.188,686.935 913.747,686.935 914.307,686.935 914.866,686.935 915.425,686.935 915.984,686.935 916.544,686.935 917.103,686.935 917.662,686.935 918.221,686.935 918.781,686.935 919.34,686.935 919.899,686.935 920.458,686.935 921.018,686.935 921.577,686.935 922.136,686.935 922.695,686.935 923.255,686.935 923.814,686.935 924.373,686.935 924.932,686.935 925.492,686.935 926.051,686.935 926.61,686.935 927.169,686.935 927.729,686.935 928.288,686.935 928.847,686.935 929.406,686.935 929.966,686.935 930.525,686.935 931.084,686.935 931.644,686.935 932.203,686.935 932.762,686.935 933.321,686.935 933.881,686.935 934.44,686.935 934.999,686.935 935.558,686.935 936.118,686.935 936.677,686.935 937.236,686.935 937.795,686.935 938.355,686.935 938.914,686.935 939.473,686.935 940.032,686.935 940.592,686.935 941.151,686.935 941.71,686.935 942.269,686.935 942.829,686.935 943.388,686.935 943.947,686.935 944.506,686.935 945.066,686.935 945.625,686.935 946.184,686.935 946.743,686.935 947.303,686.935 947.862,686.935 948.421,686.935 948.98,686.935 949.54,686.935 950.099,686.935 950.658,686.935 951.217,686.935 951.777,686.935 952.336,686.935 952.895,686.935 953.454,686.935 954.014,686.935 954.573,686.935 955.132,686.935 955.691,686.935 956.251,686.935 956.81,686.935 957.369,686.935 957.928,686.935 958.488,686.935 959.047,686.935 959.606,686.935 960.165,686.935 960.725,686.935 961.284,686.935 961.843,686.935 962.402,686.935 962.962,686.935 963.521,686.935 964.08,686.935 964.639,686.935 965.199,686.935 965.758,686.935 966.317,686.935 966.876,686.935 967.436,686.935 967.995,686.935 968.554,686.935 969.113,686.935 969.673,686.935 970.232,686.935 970.791,686.935 971.35,686.935 971.91,686.935 972.469,686.935 973.028,686.935 973.587,686.935 974.147,686.935 974.706,686.935 975.265,686.935 975.824,686.935 976.384,686.935 976.943,686.935 977.502,686.935 978.061,686.935 978.621,686.935 979.18,686.935 979.739,686.935 980.298,686.935 980.858,686.935 981.417,686.935 981.976,686.935 982.535,686.935 983.095,686.935 983.654,686.935 984.213,686.935 984.772,686.935 985.332,686.935 985.891,686.935 986.45,686.935 987.009,686.935 987.569,686.935 988.128,686.935 988.687,686.935 989.246,686.935 989.806,686.935 990.365,686.935 990.924,686.935 991.483,686.935 992.043,686.935 992.602,686.935 993.161,686.935 993.72,686.935 994.28,686.935 994.839,686.935 995.398,686.935 995.957,686.935 996.517,686.935 997.076,686.935 997.635,686.935 998.194,686.935 998.754,686.935 999.313,686.935 999.872,686.935 1000.43,686.935 1000.99,686.935 1001.55,686.935 1002.11,686.935 1002.67,686.935 1003.23,686.935 1003.79,686.935 1004.35,686.935 1004.91,686.935 1005.46,686.935 1006.02,686.935 1006.58,686.935 1007.14,686.935 1007.7,686.935 1008.26,686.935 1008.82,686.935 1009.38,686.935 1009.94,686.935 1010.5,686.935 1011.06,686.935 1011.62,686.935 1012.18,686.935 1012.73,686.935 1013.29,686.935 1013.85,686.935 1014.41,686.935 1014.97,686.935 1015.53,686.935 1016.09,686.935 1016.65,686.935 1017.21,686.935 1017.77,686.935 1018.33,686.935 1018.89,686.935 1019.45,686.935 1020.01,686.935 1020.56,686.935 1021.12,686.935 1021.68,686.935 1022.24,686.935 1022.8,686.935 1023.36,686.935 1023.92,686.935 1024.48,686.935 1025.04,686.935 1025.6,686.935 1026.16,686.935 1026.72,686.935 1027.28,686.935 1027.83,686.935 1028.39,686.935 1028.95,686.935 1029.51,686.935 1030.07,686.935 1030.63,686.935 1031.19,686.935 1031.75,686.935 1032.31,686.935 1032.87,686.935 1033.43,686.935 1033.99,686.935 1034.55,686.935 1035.1,686.935 1035.66,686.935 1036.22,686.935 1036.78,686.935 1037.34,686.935 1037.9,686.935 1038.46,686.935 1039.02,686.935 1039.58,686.935 1040.14,686.935 1040.7,686.935 1041.26,686.935 1041.82,686.935 1042.38,686.935 1042.93,686.935 1043.49,686.935 1044.05,686.935 1044.61,686.935 1045.17,686.935 1045.73,686.935 1046.29,686.935 1046.85,686.935 1047.41,686.935 1047.97,686.935 1048.53,686.935 1049.09,686.935 1049.65,686.935 1050.2,686.935 1050.76,686.935 1051.32,686.935 1051.88,686.935 1052.44,686.935 1053,686.935 1053.56,686.935 1054.12,686.935 1054.68,686.935 1055.24,686.935 1055.8,686.935 1056.36,686.935 1056.92,686.935 1057.48,686.935 1058.03,686.935 1058.59,686.935 1059.15,686.935 1059.71,686.935 1060.27,686.935 1060.83,686.935 1061.39,686.935 1061.95,686.935 1062.51,686.935 1063.07,686.935 1063.63,686.935 1064.19,686.935 1064.75,686.935 1065.3,686.935 1065.86,686.935 1066.42,686.935 1066.98,686.935 1067.54,686.935 1068.1,686.935 1068.66,686.935 1069.22,686.935 1069.78,686.935 1070.34,686.935 1070.9,686.935 1071.46,686.935 1072.02,686.935 1072.57,686.935 1073.13,686.935 1073.69,686.935 1074.25,686.935 1074.81,686.935 1075.37,686.935 1075.93,686.935 1076.49,686.935 1077.05,686.935 1077.61,686.935 1078.17,686.935 1078.73,686.935 1079.29,686.935 1079.85,686.935 1080.4,686.935 1080.96,686.935 1081.52,686.935 1082.08,686.935 1082.64,686.935 1083.2,686.935 1083.76,686.935 1084.32,686.935 1084.88,686.935 1085.44,686.935 1086,686.935 1086.56,686.935 1087.12,686.935 1087.67,686.935 1088.23,686.935 1088.79,686.935 1089.35,686.935 1089.91,686.935 1090.47,686.935 1091.03,686.935 1091.59,686.935 1092.15,686.935 1092.71,686.935 1093.27,686.935 1093.83,686.935 1094.39,686.935 1094.94,686.935 1095.5,686.935 1096.06,686.935 1096.62,686.935 1097.18,686.935 1097.74,686.935 1098.3,686.935 1098.86,686.935 1099.42,686.935 1099.98,686.935 1100.54,686.935 1101.1,686.935 1101.66,686.935 1102.22,686.935 1102.77,686.935 1103.33,686.935 1103.89,686.935 1104.45,686.935 1105.01,686.935 1105.57,686.935 1106.13,686.935 1106.69,686.935 1107.25,686.935 1107.81,686.935 1108.37,686.935 1108.93,686.935 1109.49,686.935 1110.04,686.935 1110.6,686.935 1111.16,686.935 1111.72,686.935 1112.28,686.935 1112.84,686.935 1113.4,686.935 1113.96,686.935 1114.52,686.935 1115.08,686.935 1115.64,686.935 1116.2,686.935 1116.76,686.935 1117.31,686.935 1117.87,686.935 1118.43,686.935 1118.99,686.935 1119.55,686.935 1120.11,686.935 1120.67,686.935 1121.23,686.935 1121.79,686.935 1122.35,686.935 1122.91,686.935 1123.47,686.935 1124.03,686.935 1124.59,686.935 1125.14,686.935 1125.7,686.935 1126.26,686.935 1126.82,686.935 1127.38,686.935 1127.94,686.935 1128.5,686.935 1129.06,686.935 1129.62,686.935 1130.18,686.935 1130.74,686.935 1131.3,686.935 1131.86,686.935 1132.41,686.935 1132.97,686.935 1133.53,686.935 1134.09,686.935 1134.65,686.935 1135.21,686.935 1135.77,686.935 1136.33,686.935 1136.89,686.935 1137.45,686.935 1138.01,686.935 1138.57,686.935 1139.13,686.935 1139.68,686.935 1140.24,686.935 1140.8,686.935 1141.36,686.935 1141.92,686.935 1142.48,686.935 1143.04,686.935 1143.6,686.935 1144.16,686.935 1144.72,686.935 1145.28,686.935 1145.84,686.935 1146.4,686.935 1146.96,686.935 1147.51,686.935 1148.07,686.935 1148.63,686.935 1149.19,686.935 1149.75,686.935 1150.31,686.935 1150.87,686.935 1151.43,686.935 1151.99,686.935 1152.55,686.935 1153.11,686.935 1153.67,686.935 1154.23,686.935 1154.78,686.935 1155.34,686.935 1155.9,686.935 1156.46,686.935 1157.02,686.935 1157.58,686.935 1158.14,686.935 1158.7,686.935 1159.26,686.935 1159.82,686.935 1160.38,686.935 1160.94,686.935 1161.5,686.935 1162.05,686.935 1162.61,686.935 1163.17,686.935 1163.73,686.935 1164.29,686.935 1164.85,686.935 1165.41,686.935 1165.97,686.935 1166.53,686.935 1167.09,686.935 1167.65,686.935 1168.21,686.935 1168.77,686.935 1169.33,686.935 1169.88,686.935 1170.44,686.935 1171,686.935 1171.56,686.935 1172.12,686.935 1172.68,686.935 1173.24,686.935 1173.8,686.935 1174.36,686.935 1174.92,686.935 1175.48,686.935 1176.04,686.935 1176.6,686.935 1177.15,686.935 1177.71,686.935 1178.27,686.935 1178.83,686.935 1179.39,686.935 1179.95,686.935 1180.51,686.935 1181.07,686.935 1181.63,686.935 1182.19,686.935 1182.75,686.935 1183.31,686.935 1183.87,686.935 1184.43,686.935 1184.98,686.935 1185.54,686.935 1186.1,686.935 1186.66,686.935 1187.22,686.935 1187.78,686.935 1188.34,686.935 1188.9,686.935 1189.46,686.935 1190.02,686.935 1190.58,686.935 1191.14,686.935 1191.7,686.935 1192.25,686.935 1192.81,686.935 1193.37,686.935 1193.93,686.935 1194.49,686.935 1195.05,686.935 1195.61,686.935 1196.17,686.935 1196.73,686.935 1197.29,686.935 1197.85,686.935 1198.41,686.935 1198.97,686.935 1199.52,686.935 1200.08,686.935 1200.64,686.935 1201.2,686.935 1201.76,686.935 1202.32,686.935 1202.88,686.935 1203.44,686.935 1204,686.935 1204.56,686.935 1205.12,686.935 1205.68,686.935 1206.24,686.935 1206.8,686.935 1207.35,686.935 1207.91,686.935 1208.47,686.935 1209.03,686.935 1209.59,686.935 1210.15,686.935 1210.71,686.935 1211.27,686.935 1211.83,686.935 1212.39,686.935 1212.95,686.935 1213.51,686.935 1214.07,686.935 1214.62,686.935 1215.18,686.935 1215.74,686.935 1216.3,686.935 1216.86,686.935 1217.42,686.935 1217.98,686.935 1218.54,686.935 1219.1,686.935 1219.66,686.935 1220.22,686.935 1220.78,686.935 1221.34,686.935 1221.89,686.935 1222.45,686.935 1223.01,686.935 1223.57,686.935 1224.13,686.935 1224.69,686.935 1225.25,686.935 1225.81,686.935 1226.37,686.935 1226.93,686.935 1227.49,686.935 1228.05,686.935 1228.61,686.935 1229.17,686.935 1229.72,686.935 1230.28,686.935 1230.84,686.935 1231.4,686.935 1231.96,686.935 1232.52,686.935 1233.08,686.935 1233.64,686.935 1234.2,686.935 1234.76,686.935 1235.32,686.935 1235.88,686.935 1236.44,686.935 1236.99,686.935 1237.55,686.935 1238.11,686.935 1238.67,686.935 1239.23,686.935 1239.79,686.935 1240.35,686.935 1240.91,686.935 1241.47,686.935 1242.03,686.935 1242.59,686.935 1243.15,686.935 1243.71,686.935 1244.26,686.935 1244.82,686.935 1245.38,686.935 1245.94,686.935 1246.5,686.935 1247.06,686.935 1247.62,686.935 1248.18,686.935 1248.74,686.935 1249.3,686.935 1249.86,686.935 1250.42,686.935 1250.98,686.935 1251.54,686.935 1252.09,686.935 1252.65,686.935 1253.21,686.935 1253.77,686.935 1254.33,686.935 1254.89,686.935 1255.45,686.935 1256.01,686.935 1256.57,686.935 1257.13,686.935 1257.69,686.935 1258.25,686.935 1258.81,686.935 1259.36,686.935 1259.92,686.935 1260.48,686.935 1261.04,686.935 1261.6,686.935 1262.16,686.935 1262.72,686.935 1263.28,686.935 1263.84,686.935 1264.4,686.935 1264.96,686.935 1265.52,686.935 1266.08,686.935 1266.63,686.935 1267.19,686.935 1267.75,686.935 1268.31,686.935 1268.87,686.935 1269.43,686.935 1269.99,686.935 1270.55,686.935 1271.11,686.935 1271.67,686.935 1272.23,686.935 1272.79,686.935 1273.35,686.935 1273.91,686.935 1274.46,686.935 1275.02,686.935 1275.58,686.935 1276.14,686.935 1276.7,686.935 1277.26,686.935 1277.82,686.935 1278.38,686.935 1278.94,686.935 1279.5,686.935 1280.06,686.935 1280.62,686.935 1281.18,686.935 1281.73,686.935 1282.29,686.935 1282.85,686.935 1283.41,686.935 1283.97,686.935 1284.53,686.935 1285.09,686.935 1285.65,686.935 1286.21,686.935 1286.77,686.935 1287.33,686.935 1287.89,686.935 1288.45,686.935 1289,686.935 1289.56,686.935 1290.12,686.935 1290.68,686.935 1291.24,686.935 1291.8,686.935 1292.36,686.935 1292.92,686.935 1293.48,686.935 1294.04,686.935 1294.6,686.935 1295.16,686.935 1295.72,686.935 1296.28,686.935 1296.83,686.935 1297.39,686.935 1297.95,686.935 1298.51,686.935 1299.07,686.935 1299.63,686.935 1300.19,686.935 1300.75,686.935 1301.31,686.935 1301.87,686.935 1302.43,686.935 1302.99,686.935 1303.55,686.935 1304.1,686.935 1304.66,686.935 1305.22,686.935 1305.78,686.935 1306.34,686.935 1306.9,686.935 1307.46,686.935 1308.02,686.935 1308.58,686.935 1309.14,686.935 1309.7,686.935 1310.26,686.935 1310.82,686.935 1311.38,686.935 1311.93,686.935 1312.49,686.935 1313.05,686.935 1313.61,686.935 1314.17,686.935 1314.73,686.935 1315.29,686.935 1315.85,686.935 1316.41,686.935 1316.97,686.935 1317.53,686.935 1318.09,686.935 1318.65,686.935 1319.2,686.935 1319.76,686.935 1320.32,686.935 1320.88,686.935 1321.44,686.935 1322,686.935 1322.56,686.935 1323.12,686.935 1323.68,686.935 1324.24,686.935 1324.8,686.935 1325.36,686.935 1325.92,686.935 1326.47,686.935 1327.03,686.935 1327.59,686.935 1328.15,686.935 1328.71,686.935 1329.27,686.935 1329.83,686.935 1330.39,686.935 1330.95,686.935 1331.51,686.935 1332.07,686.935 1332.63,686.935 1333.19,686.935 1333.75,686.935 1334.3,686.935 1334.86,686.935 1335.42,686.935 1335.98,686.935 1336.54,686.935 1337.1,686.935 1337.66,686.935 1338.22,686.935 1338.78,686.935 1339.34,686.935 1339.9,686.935 1340.46,686.935 1341.02,686.935 1341.57,686.935 1342.13,686.935 1342.69,686.935 1343.25,686.935 1343.81,686.935 1344.37,686.935 1344.93,686.935 1345.49,686.935 1346.05,686.935 1346.61,686.935 1347.17,686.935 1347.73,686.935 1348.29,686.935 1348.84,686.935 1349.4,686.935 1349.96,686.935 1350.52,686.935 1351.08,686.935 1351.64,686.935 1352.2,686.935 1352.76,686.935 1353.32,686.935 1353.88,686.935 1354.44,686.935 1355,686.935 1355.56,686.935 1356.12,686.935 1356.67,686.935 1357.23,686.935 1357.79,686.935 1358.35,686.935 1358.91,686.935 1359.47,686.935 1360.03,686.935 1360.59,686.935 1361.15,686.935 1361.71,686.935 1362.27,686.935 1362.83,686.935 1363.39,686.935 1363.94,686.935 1364.5,686.935 1365.06,686.935 1365.62,686.935 1366.18,686.935 1366.74,686.935 1367.3,686.935 1367.86,686.935 1368.42,686.935 1368.98,686.935 1369.54,686.935 1370.1,686.935 1370.66,686.935 1371.21,686.935 1371.77,686.935 1372.33,686.935 1372.89,686.935 1373.45,686.935 1374.01,686.935 1374.57,686.935 1375.13,686.935 1375.69,686.935 1376.25,686.935 1376.81,686.935 1377.37,686.935 1377.93,686.935 1378.49,686.935 1379.04,686.935 1379.6,686.935 1380.16,686.935 1380.72,686.935 1381.28,686.935 1381.84,686.935 1382.4,686.935 1382.96,686.935 1383.52,686.935 1384.08,686.935 1384.64,686.935 1385.2,686.935 1385.76,686.935 1386.31,686.935 1386.87,686.935 1387.43,686.935 1387.99,686.935 1388.55,686.935 1389.11,686.935 1389.67,686.935 1390.23,686.935 1390.79,686.935 1391.35,686.935 1391.91,686.935 1392.47,686.935 1393.03,686.935 1393.58,686.935 1394.14,686.935 1394.7,686.935 1395.26,686.935 1395.82,686.935 1396.38,686.935 1396.94,686.935 1397.5,686.935 1398.06,686.935 1398.62,686.935 1399.18,686.935 1399.74,686.935 1400.3,686.935 1400.86,686.935 1401.41,686.935 1401.97,686.935 1402.53,686.935 1403.09,686.935 1403.65,686.935 1404.21,686.935 1404.77,686.935 1405.33,686.935 1405.89,686.935 1406.45,686.935 1407.01,686.935 1407.57,686.935 1408.13,686.935 1408.68,686.935 1409.24,686.935 1409.8,686.935 1410.36,686.935 1410.92,686.935 1411.48,686.935 1412.04,686.935 1412.6,686.935 1413.16,686.935 1413.72,686.935 1414.28,686.935 1414.84,686.935 1415.4,686.935 1415.95,686.935 1416.51,686.935 1417.07,686.935 1417.63,686.935 1418.19,686.935 1418.75,686.935 1419.31,686.935 1419.87,686.935 1420.43,686.935 1420.99,686.935 1421.55,686.935 1422.11,686.935 1422.67,686.935 1423.23,686.935 1423.78,686.935 1424.34,686.935 1424.9,686.935 1425.46,686.935 1426.02,686.935 1426.58,686.935 1427.14,686.935 1427.7,686.935 1428.26,686.935 1428.82,686.935 1429.38,686.935 1429.94,686.935 1430.5,686.935 1431.05,686.935 1431.61,686.935 1432.17,686.935 1432.73,686.935 1433.29,686.935 1433.85,686.935 1434.41,686.935 1434.97,686.935 1435.53,686.935 1436.09,686.935 1436.65,686.935 1437.21,686.935 1437.77,686.935 1438.33,686.935 1438.88,686.935 1439.44,686.935 1440,686.935 1440.56,686.935 1441.12,686.935 1441.68,686.935 1442.24,686.935 1442.8,686.935 1443.36,686.935 1443.92,686.935 1444.48,686.935 1445.04,686.935 1445.6,686.935 1446.15,686.935 1446.71,686.935 1447.27,686.935 1447.83,686.935 1448.39,686.935 1448.95,686.935 1449.51,686.935 1450.07,686.935 1450.63,686.935 1451.19,686.935 1451.75,686.935 1452.31,686.935 1452.87,686.935 1453.42,686.935 1453.98,686.935 1454.54,686.935 1455.1,686.935 1455.66,686.935 1456.22,686.935 1456.78,686.935 1457.34,686.935 1457.9,686.935 1458.46,686.935 1459.02,686.935 1459.58,686.935 1460.14,686.935 1460.7,686.935 1461.25,686.935 1461.81,686.935 1462.37,686.935 1462.93,686.935 1463.49,686.935 1464.05,686.935 1464.61,686.935 1465.17,686.935 1465.73,686.935 1466.29,686.935 1466.85,686.935 1467.41,686.935 1467.97,686.935 1468.52,686.935 1469.08,686.935 1469.64,686.935 1470.2,686.935 1470.76,686.935 1471.32,686.935 1471.88,686.935 1472.44,686.935 1473,686.935 1473.56,686.935 1474.12,686.935 1474.68,686.935 1475.24,686.935 1475.79,686.935 1476.35,686.935 1476.91,686.935 1477.47,686.935 1478.03,686.935 1478.59,686.935 1479.15,686.935 1479.71,686.935 1480.27,686.935 1480.83,686.935 1481.39,686.935 1481.95,686.935 1482.51,686.935 1483.07,686.935 1483.62,686.935 1484.18,686.935 1484.74,686.935 1485.3,686.935 1485.86,686.935 1486.42,686.935 1486.98,686.935 1487.54,686.935 1488.1,686.935 1488.66,686.935 1489.22,686.935 1489.78,686.935 1490.34,686.935 1490.89,686.935 1491.45,686.935 1492.01,686.935 1492.57,686.935 1493.13,686.935 1493.69,686.935 1494.25,686.935 1494.81,686.935 1495.37,686.935 1495.93,686.935 1496.49,686.935 1497.05,686.935 1497.61,686.935 1498.16,686.935 1498.72,686.935 1499.28,686.935 1499.84,686.935 1500.4,686.935 1500.96,686.935 1501.52,686.935 1502.08,686.935 1502.64,686.935 1503.2,686.935 1503.76,686.935 1504.32,686.935 1504.88,686.935 1505.44,686.935 1505.99,686.935 1506.55,686.935 1507.11,686.935 1507.67,686.935 1508.23,686.935 1508.79,686.935 1509.35,686.935 1509.91,686.935 1510.47,686.935 1511.03,686.935 1511.59,686.935 1512.15,686.935 1512.71,686.935 1513.26,686.935 1513.82,686.935 1514.38,686.935 1514.94,686.935 1515.5,686.935 1516.06,686.935 1516.62,686.935 1517.18,686.935 1517.74,686.935 1518.3,686.935 1518.86,686.935 1519.42,686.935 1519.98,686.935 1520.53,686.935 1521.09,686.935 1521.65,686.935 1522.21,686.935 1522.77,686.935 1523.33,686.935 1523.89,686.935 1524.45,686.935 1525.01,686.935 1525.57,686.935 1526.13,686.935 1526.69,686.935 1527.25,686.935 1527.81,686.935 1528.36,686.935 1528.92,686.935 1529.48,686.935 1530.04,686.935 1530.6,686.935 1531.16,686.935 1531.72,686.935 1532.28,686.935 1532.84,686.935 1533.4,686.935 1533.96,686.935 1534.52,686.935 1535.08,686.935 1535.63,686.935 1536.19,686.935 1536.75,686.935 1537.31,686.935 1537.87,686.935 1538.43,686.935 1538.99,686.935 1539.55,686.935 1540.11,686.935 1540.67,686.935 1541.23,686.935 1541.79,686.935 1542.35,686.935 1542.9,686.935 1543.46,686.935 1544.02,686.935 1544.58,686.935 1545.14,686.935 1545.7,686.935 1546.26,686.935 1546.82,686.935 1547.38,686.935 1547.94,686.935 1548.5,686.935 1549.06,686.935 1549.62,686.935 1550.18,686.935 1550.73,686.935 1551.29,686.935 1551.85,686.935 1552.41,686.935 1552.97,686.935 1553.53,686.935 1554.09,686.935 1554.65,686.935 1555.21,686.935 1555.77,686.935 1556.33,686.935 1556.89,686.935 1557.45,686.935 1558,686.935 1558.56,686.935 1559.12,686.935 1559.68,686.935 1560.24,686.935 1560.8,686.935 1561.36,686.935 1561.92,686.935 1562.48,686.935 1563.04,686.935 1563.6,686.935 1564.16,686.935 1564.72,686.935 1565.28,686.935 1565.83,686.935 1566.39,686.935 1566.95,686.935 1567.51,686.935 1568.07,686.935 1568.63,686.935 1569.19,686.935 1569.75,686.935 1570.31,686.935 1570.87,686.935 1571.43,686.935 1571.99,686.935 1572.55,686.935 1573.1,686.935 1573.66,686.935 1574.22,686.935 1574.78,686.935 1575.34,686.935 1575.9,686.935 1576.46,686.935 1577.02,686.935 1577.58,686.935 1578.14,686.935 1578.7,686.935 1579.26,686.935 1579.82,686.935 1580.37,686.935 1580.93,686.935 1581.49,686.935 1582.05,686.935 1582.61,686.935 1583.17,686.935 1583.73,686.935 1584.29,686.935 1584.85,686.935 1585.41,686.935 1585.97,686.935 1586.53,686.935 1587.09,686.935 1587.65,686.935 1588.2,686.935 1588.76,686.935 1589.32,686.935 1589.88,686.935 1590.44,686.935 1591,686.935 1591.56,686.935 1592.12,686.935 1592.68,686.935 1593.24,686.935 1593.8,686.935 1594.36,686.935 1594.92,686.935 1595.47,686.935 1596.03,686.935 1596.59,686.935 1597.15,686.935 1597.71,686.935 1598.27,686.935 1598.83,686.935 1599.39,686.935 1599.95,686.935 1600.51,686.935 1601.07,686.935 1601.63,686.935 1602.19,686.935 1602.74,686.935 1603.3,686.935 1603.86,686.935 1604.42,686.935 1604.98,686.935 1605.54,686.935 1606.1,686.935 1606.66,686.935 1607.22,686.935 1607.78,686.935 1608.34,686.935 1608.9,686.935 1609.46,686.935 1610.02,686.935 1610.57,686.935 1611.13,686.935 1611.69,686.935 1612.25,686.935 1612.81,686.935 1613.37,686.935 1613.93,686.935 1614.49,686.935 1615.05,686.935 1615.61,686.935 1616.17,686.935 1616.73,686.935 1617.29,686.935 1617.84,686.935 1618.4,686.935 1618.96,686.935 1619.52,686.935 1620.08,686.935 1620.64,686.935 1621.2,686.935 1621.76,686.935 1622.32,686.935 1622.88,686.935 1623.44,686.935 1624,686.935 1624.56,686.935 1625.11,686.935 1625.67,686.935 1626.23,686.935 1626.79,686.935 1627.35,686.935 1627.91,686.935 1628.47,686.935 1629.03,686.935 1629.59,686.935 1630.15,686.935 1630.71,686.935 1631.27,686.935 1631.83,686.935 1632.39,686.935 1632.94,686.935 1633.5,686.935 1634.06,686.935 1634.62,686.935 1635.18,686.935 1635.74,686.935 1636.3,686.935 1636.86,686.935 1637.42,686.935 1637.98,686.935 1638.54,686.935 1639.1,686.935 1639.66,686.935 1640.21,686.935 1640.77,686.935 1641.33,686.935 1641.89,686.935 1642.45,686.935 1643.01,686.935 1643.57,686.935 1644.13,686.935 1644.69,686.935 1645.25,686.935 1645.81,686.935 1646.37,686.935 1646.93,686.935 1647.48,686.935 1648.04,686.935 1648.6,686.935 1649.16,686.935 1649.72,686.935 1650.28,686.935 1650.84,686.935 1651.4,686.935 1651.96,686.935 1652.52,686.935 1653.08,686.935 1653.64,686.935 1654.2,686.935 1654.76,686.935 1655.31,686.935 1655.87,686.935 1656.43,686.935 1656.99,686.935 1657.55,686.935 1658.11,686.935 1658.67,686.935 1659.23,686.935 1659.79,686.935 1660.35,686.935 1660.91,686.935 1661.47,686.935 1662.03,686.935 1662.58,686.935 1663.14,686.935 1663.7,686.935 1664.26,686.935 1664.82,686.935 1665.38,686.935 1665.94,686.935 1666.5,686.935 1667.06,686.935 1667.62,686.935 1668.18,686.935 1668.74,686.935 1669.3,686.935 1669.85,686.935 1670.41,686.935 1670.97,686.935 1671.53,686.935 1672.09,686.935 1672.65,686.935 1673.21,686.935 1673.77,686.935 1674.33,686.935 1674.89,686.935 1675.45,686.935 1676.01,686.935 1676.57,686.935 1677.13,686.935 1677.68,686.935 1678.24,686.935 1678.8,686.935 1679.36,686.935 1679.92,686.935 1680.48,686.935 1681.04,686.935 1681.6,686.935 1682.16,686.935 1682.72,686.935 1683.28,686.935 1683.84,686.935 1684.4,686.935 1684.95,686.935 1685.51,686.935 1686.07,686.935 1686.63,686.935 1687.19,686.935 1687.75,686.935 1688.31,686.935 1688.87,686.935 1689.43,686.935 1689.99,686.935 1690.55,686.935 1691.11,686.935 1691.67,686.935 1692.23,686.935 1692.78,686.935 1693.34,686.935 1693.9,686.935 1694.46,686.935 1695.02,686.935 1695.58,686.935 1696.14,686.935 1696.7,686.935 1697.26,686.935 1697.82,686.935 1698.38,686.935 1698.94,686.935 1699.5,686.935 1700.05,686.935 1700.61,686.935 1701.17,686.935 1701.73,686.935 1702.29,686.935 1702.85,686.935 1703.41,686.935 1703.97,686.935 1704.53,686.935 1705.09,686.935 1705.65,686.935 1706.21,686.935 1706.77,686.935 1707.32,686.935 1707.88,686.935 1708.44,686.935 1709,686.935 1709.56,686.935 1710.12,686.935 1710.68,686.935 1711.24,686.935 1711.8,686.935 1712.36,686.935 1712.92,686.935 1713.48,686.935 1714.04,686.935 1714.6,686.935 1715.15,686.935 1715.71,686.935 1716.27,686.935 1716.83,686.935 1717.39,686.935 1717.95,686.935 1718.51,686.935 1719.07,686.935 1719.63,686.935 1720.19,686.935 1720.75,686.935 1721.31,686.935 1721.87,686.935 1722.42,686.935 1722.98,686.935 1723.54,686.935 1724.1,686.935 1724.66,686.935 1725.22,686.935 1725.78,686.935 1726.34,686.935 1726.9,686.935 1727.46,686.935 1728.02,686.935 1728.58,686.935 1729.14,686.935 1729.69,686.935 1730.25,686.935 1730.81,686.935 1731.37,686.935 1731.93,686.935 1732.49,686.935 1733.05,686.935 1733.61,686.935 1734.17,686.935 1734.73,686.935 1735.29,686.935 1735.85,686.935 1736.41,686.935 1736.97,686.935 1737.52,686.935 1738.08,686.935 1738.64,686.935 1739.2,686.935 1739.76,686.935 1740.32,686.935 1740.88,686.935 1741.44,686.935 1742,686.935 1742.56,686.935 1743.12,686.935 1743.68,686.935 1744.24,686.935 1744.79,686.935 1745.35,686.935 1745.91,686.935 1746.47,686.935 1747.03,686.935 1747.59,686.935 1748.15,686.935 1748.71,686.935 1749.27,686.935 1749.83,686.935 1750.39,686.935 1750.95,686.935 1751.51,686.935 1752.06,686.935 1752.62,686.935 1753.18,686.935 1753.74,686.935 1754.3,686.935 1754.86,686.935 1755.42,686.935 1755.98,686.935 1756.54,686.935 1757.1,686.935 1757.66,686.935 1758.22,686.935 1758.78,686.935 1759.34,686.935 1759.89,686.935 1760.45,686.935 1761.01,686.935 1761.57,686.935 1762.13,686.935 1762.69,686.935 1763.25,686.935 1763.81,686.935 1764.37,686.935 1764.93,686.935 1765.49,686.935 1766.05,686.935 1766.61,686.935 1767.16,686.935 1767.72,686.935 1768.28,686.935 1768.84,686.935 1769.4,686.935 1769.96,686.935 1770.52,686.935 1771.08,686.935 1771.64,686.935 1772.2,686.935 1772.76,686.935 1773.32,686.935 1773.88,686.935 1774.43,686.935 1774.99,686.935 1775.55,686.935 1776.11,686.935 1776.67,686.935 1777.23,686.935 1777.79,686.935 1778.35,686.935 1778.91,686.935 1779.47,686.935 1780.03,686.935 1780.59,686.935 1781.15,686.935 1781.71,686.935 1782.26,686.935 1782.82,686.935 1783.38,686.935 1783.94,686.935 1784.5,686.935 1785.06,686.935 1785.62,686.935 1786.18,686.935 1786.74,686.935 1787.3,686.935 1787.86,686.935 1788.42,686.935 1788.98,686.935 1789.53,686.935 1790.09,686.935 1790.65,686.935 1791.21,686.935 1791.77,686.935 1792.33,686.935 1792.89,686.935 1793.45,686.935 1794.01,686.935 1794.57,686.935 1795.13,686.935 1795.69,686.935 1796.25,686.935 1796.8,686.935 1797.36,686.935 1797.92,686.935 1798.48,686.935 1799.04,686.935 1799.6,686.935 1800.16,686.935 1800.72,686.935 1801.28,686.935 1801.84,686.935 1802.4,686.935 1802.96,686.935 1803.52,686.935 1804.08,686.935 1804.63,686.935 1805.19,686.935 1805.75,686.935 1806.31,686.935 1806.87,686.935 1807.43,686.935 1807.99,686.935 1808.55,686.935 1809.11,686.935 1809.67,686.935 1810.23,686.935 1810.79,686.935 1811.35,686.935 1811.9,686.935 1812.46,686.935 1813.02,686.935 1813.58,686.935 1814.14,686.935 1814.7,686.935 1815.26,686.935 1815.82,686.935 1816.38,686.935 1816.94,686.935 1817.5,686.935 1818.06,686.935 1818.62,686.935 1819.18,686.935 1819.73,686.935 1820.29,686.935 1820.85,686.935 1821.41,686.935 1821.97,686.935 1822.53,686.935 1823.09,686.935 1823.65,686.935 1824.21,686.935 1824.77,686.935 1825.33,686.935 1825.89,686.935 1826.45,686.935 1827,686.935 1827.56,686.935 1828.12,686.935 1828.68,686.935 1829.24,686.935 1829.8,686.935 1830.36,686.935 1830.92,686.935 1831.48,686.935 1832.04,686.935 1832.6,686.935 1833.16,686.935 1833.72,686.935 1834.27,686.935 1834.83,686.935 1835.39,686.935 1835.95,686.935 1836.51,686.935 1837.07,686.935 1837.63,686.935 1838.19,686.935 \"/>\n<path clip-path=\"url(#clip143)\" d=\"M720.247 684.735 L720.806 684.735 L721.365 684.735 L721.924 684.735 L722.484 684.735 L723.043 684.735 L723.602 684.735 L724.161 684.735 L724.721 684.735 L725.28 684.735 L725.839 684.735 L726.398 684.735 L726.958 684.735 L727.517 684.735 L728.076 684.735 L728.635 684.735 L729.195 684.735 L729.754 684.735 L730.313 684.735 L730.872 684.735 L731.432 684.735 L731.991 684.735 L732.55 684.735 L733.109 684.735 L733.669 684.735 L734.228 684.735 L734.787 684.735 L735.346 684.735 L735.906 684.735 L736.465 684.735 L737.024 684.735 L737.583 684.735 L738.143 684.735 L738.702 684.735 L739.261 684.735 L739.82 684.735 L740.38 684.735 L740.939 684.735 L741.498 684.735 L742.057 684.735 L742.617 684.735 L743.176 684.735 L743.735 684.735 L744.294 684.735 L744.854 684.735 L745.413 684.735 L745.972 684.735 L746.531 684.735 L747.091 684.735 L747.65 684.735 L748.209 684.735 L748.768 684.735 L749.328 684.735 L749.887 684.735 L750.446 684.735 L751.005 684.735 L751.565 684.735 L752.124 684.735 L752.683 684.735 L753.242 684.735 L753.802 684.735 L754.361 684.735 L754.92 684.735 L755.479 684.735 L756.039 684.735 L756.598 684.735 L757.157 684.735 L757.716 684.735 L758.276 684.735 L758.835 684.735 L759.394 684.735 L759.953 684.735 L760.513 684.735 L761.072 684.735 L761.631 684.735 L762.19 684.735 L762.75 684.735 L763.309 684.735 L763.868 684.735 L764.427 684.735 L764.987 684.735 L765.546 684.735 L766.105 684.735 L766.664 684.735 L767.224 684.735 L767.783 684.735 L768.342 684.735 L768.901 684.735 L769.461 684.735 L770.02 684.735 L770.579 684.735 L771.138 684.735 L771.698 684.735 L772.257 684.735 L772.816 684.735 L773.375 684.735 L773.935 684.735 L774.494 684.735 L775.053 684.735 L775.612 684.735 L776.172 684.735 L776.731 684.735 L777.29 684.735 L777.849 684.735 L778.409 684.735 L778.968 684.735 L779.527 684.735 L780.086 684.735 L780.646 684.735 L781.205 684.735 L781.764 684.735 L782.323 684.735 L782.883 684.735 L783.442 684.735 L784.001 684.735 L784.56 684.735 L785.12 684.735 L785.679 684.735 L786.238 684.735 L786.797 684.735 L787.357 684.735 L787.916 684.735 L788.475 684.735 L789.034 684.735 L789.594 684.735 L790.153 684.735 L790.712 684.735 L791.271 684.735 L791.831 684.735 L792.39 684.735 L792.949 684.735 L793.508 684.735 L794.068 684.735 L794.627 684.735 L795.186 684.735 L795.745 684.735 L796.305 684.735 L796.864 684.735 L797.423 684.735 L797.982 684.735 L798.542 684.735 L799.101 684.735 L799.66 684.735 L800.219 684.735 L800.779 684.735 L801.338 684.735 L801.897 684.735 L802.456 684.735 L803.016 684.735 L803.575 684.735 L804.134 684.735 L804.693 684.735 L805.253 684.735 L805.812 684.735 L806.371 684.735 L806.931 684.735 L807.49 684.735 L808.049 684.735 L808.608 684.735 L809.168 684.735 L809.727 684.735 L810.286 684.735 L810.845 684.735 L811.405 684.735 L811.964 684.735 L812.523 684.735 L813.082 684.735 L813.642 684.735 L814.201 684.735 L814.76 684.735 L815.319 684.735 L815.879 684.735 L816.438 684.735 L816.997 684.735 L817.556 684.735 L818.116 684.735 L818.675 684.735 L819.234 684.735 L819.793 684.735 L820.353 684.735 L820.912 684.735 L821.471 684.735 L822.03 684.735 L822.59 684.735 L823.149 684.735 L823.708 684.735 L824.267 684.735 L824.827 684.735 L825.386 684.735 L825.945 684.735 L826.504 684.735 L827.064 684.735 L827.623 684.735 L828.182 684.735 L828.741 684.735 L829.301 684.735 L829.86 684.735 L830.419 684.735 L830.978 684.735 L831.538 684.735 L832.097 684.735 L832.656 684.735 L833.215 684.735 L833.775 684.735 L834.334 684.735 L834.893 684.735 L835.452 684.735 L836.012 684.735 L836.571 684.735 L837.13 684.735 L837.689 684.735 L838.249 684.735 L838.808 684.735 L839.367 684.735 L839.926 684.735 L840.486 684.735 L841.045 684.735 L841.604 684.735 L842.163 684.735 L842.723 684.735 L843.282 684.735 L843.841 684.735 L844.4 684.735 L844.96 684.735 L845.519 684.735 L846.078 684.735 L846.637 684.735 L847.197 684.735 L847.756 684.735 L848.315 684.735 L848.874 684.735 L849.434 684.735 L849.993 684.735 L850.552 684.735 L851.111 684.735 L851.671 684.735 L852.23 684.735 L852.789 684.735 L853.348 684.735 L853.908 684.735 L854.467 684.735 L855.026 684.735 L855.585 684.735 L856.145 684.735 L856.704 684.735 L857.263 684.735 L857.822 684.735 L858.382 684.735 L858.941 684.735 L859.5 684.735 L860.059 684.735 L860.619 684.735 L861.178 684.735 L861.737 684.735 L862.296 684.735 L862.856 684.735 L863.415 684.735 L863.974 684.735 L864.533 684.735 L865.093 684.735 L865.652 684.735 L866.211 684.735 L866.77 684.735 L867.33 684.735 L867.889 684.735 L868.448 684.735 L869.007 684.735 L869.567 684.735 L870.126 684.735 L870.685 684.735 L871.244 684.735 L871.804 684.735 L872.363 684.735 L872.922 684.735 L873.481 684.735 L874.041 684.735 L874.6 684.735 L875.159 684.735 L875.718 684.735 L876.278 684.735 L876.837 684.735 L877.396 684.735 L877.955 684.735 L878.515 684.735 L879.074 684.735 L879.633 684.735 L880.192 684.735 L880.752 684.735 L881.311 684.735 L881.87 684.735 L882.429 684.735 L882.989 684.735 L883.548 684.735 L884.107 684.735 L884.666 684.735 L885.226 684.735 L885.785 684.735 L886.344 684.735 L886.903 684.735 L887.463 684.735 L888.022 684.735 L888.581 684.735 L889.14 684.735 L889.7 684.735 L890.259 684.735 L890.818 684.735 L891.377 684.735 L891.937 684.735 L892.496 684.735 L893.055 684.735 L893.614 684.735 L894.174 684.735 L894.733 684.735 L895.292 684.735 L895.851 684.735 L896.411 684.735 L896.97 684.735 L897.529 684.735 L898.088 684.735 L898.648 684.735 L899.207 684.735 L899.766 684.735 L900.325 684.735 L900.885 684.735 L901.444 684.735 L902.003 684.735 L902.562 684.735 L903.122 684.735 L903.681 684.735 L904.24 684.735 L904.799 684.735 L905.359 684.735 L905.918 684.735 L906.477 684.735 L907.036 684.735 L907.596 684.735 L908.155 684.735 L908.714 684.735 L909.273 684.735 L909.833 684.735 L910.392 684.735 L910.951 684.735 L911.51 684.735 L912.07 684.735 L912.629 684.735 L913.188 684.735 L913.747 684.735 L914.307 684.735 L914.866 684.735 L915.425 684.735 L915.984 684.735 L916.544 684.735 L917.103 684.735 L917.662 684.735 L918.221 684.735 L918.781 684.735 L919.34 684.735 L919.899 684.735 L920.458 684.735 L921.018 684.735 L921.577 684.735 L922.136 684.735 L922.695 684.735 L923.255 684.735 L923.814 684.735 L924.373 684.735 L924.932 684.735 L925.492 684.735 L926.051 684.735 L926.61 684.735 L927.169 684.735 L927.729 684.735 L928.288 684.735 L928.847 684.735 L929.406 684.735 L929.966 684.735 L930.525 684.735 L931.084 684.735 L931.644 684.735 L932.203 684.735 L932.762 684.735 L933.321 684.735 L933.881 684.735 L934.44 684.735 L934.999 684.735 L935.558 684.735 L936.118 684.735 L936.677 684.735 L937.236 684.735 L937.795 684.735 L938.355 684.735 L938.914 684.735 L939.473 684.735 L940.032 684.735 L940.592 684.735 L941.151 684.735 L941.71 684.735 L942.269 684.735 L942.829 684.735 L943.388 684.735 L943.947 684.735 L944.506 684.735 L945.066 684.735 L945.625 684.735 L946.184 684.735 L946.743 684.735 L947.303 684.735 L947.862 684.735 L948.421 684.735 L948.98 684.735 L949.54 684.735 L950.099 684.735 L950.658 684.735 L951.217 684.735 L951.777 684.735 L952.336 684.735 L952.895 684.735 L953.454 684.735 L954.014 684.735 L954.573 684.735 L955.132 684.735 L955.691 684.735 L956.251 684.735 L956.81 684.735 L957.369 684.735 L957.928 684.735 L958.488 684.735 L959.047 684.735 L959.606 684.735 L960.165 684.735 L960.725 684.735 L961.284 684.735 L961.843 684.735 L962.402 684.735 L962.962 684.735 L963.521 684.735 L964.08 684.735 L964.639 684.735 L965.199 684.735 L965.758 684.735 L966.317 684.735 L966.876 684.735 L967.436 684.735 L967.995 684.735 L968.554 684.735 L969.113 684.735 L969.673 684.735 L970.232 684.735 L970.791 684.735 L971.35 684.735 L971.91 684.735 L972.469 684.735 L973.028 684.735 L973.587 684.735 L974.147 684.735 L974.706 684.735 L975.265 684.735 L975.824 684.735 L976.384 684.735 L976.943 684.735 L977.502 684.735 L978.061 684.735 L978.621 684.735 L979.18 684.735 L979.739 684.735 L980.298 684.735 L980.858 684.735 L981.417 684.735 L981.976 684.735 L982.535 684.735 L983.095 684.735 L983.654 684.735 L984.213 684.735 L984.772 684.735 L985.332 684.735 L985.891 684.735 L986.45 684.735 L987.009 684.735 L987.569 684.735 L988.128 684.735 L988.687 684.735 L989.246 684.735 L989.806 684.735 L990.365 684.735 L990.924 684.735 L991.483 684.735 L992.043 684.735 L992.602 684.735 L993.161 684.735 L993.72 684.735 L994.28 684.735 L994.839 684.735 L995.398 684.735 L995.957 684.735 L996.517 684.735 L997.076 684.735 L997.635 684.735 L998.194 684.735 L998.754 684.735 L999.313 684.735 L999.872 684.735 L1000.43 684.735 L1000.99 684.735 L1001.55 684.735 L1002.11 684.735 L1002.67 684.735 L1003.23 684.735 L1003.79 684.735 L1004.35 684.735 L1004.91 684.735 L1005.46 684.735 L1006.02 684.735 L1006.58 684.735 L1007.14 684.735 L1007.7 684.735 L1008.26 684.735 L1008.82 684.735 L1009.38 684.735 L1009.94 684.735 L1010.5 684.735 L1011.06 684.735 L1011.62 684.735 L1012.18 684.735 L1012.73 684.735 L1013.29 684.735 L1013.85 684.735 L1014.41 684.735 L1014.97 684.735 L1015.53 684.735 L1016.09 684.735 L1016.65 684.735 L1017.21 684.735 L1017.77 684.735 L1018.33 684.735 L1018.89 684.735 L1019.45 684.735 L1020.01 684.735 L1020.56 684.735 L1021.12 684.735 L1021.68 684.735 L1022.24 684.735 L1022.8 684.735 L1023.36 684.735 L1023.92 684.735 L1024.48 684.735 L1025.04 684.735 L1025.6 684.735 L1026.16 684.735 L1026.72 684.735 L1027.28 684.735 L1027.83 684.735 L1028.39 684.735 L1028.95 684.735 L1029.51 684.735 L1030.07 684.735 L1030.63 684.735 L1031.19 684.735 L1031.75 684.735 L1032.31 684.735 L1032.87 684.735 L1033.43 684.735 L1033.99 684.735 L1034.55 684.735 L1035.1 684.735 L1035.66 684.735 L1036.22 684.735 L1036.78 684.735 L1037.34 684.735 L1037.9 684.735 L1038.46 684.735 L1039.02 684.735 L1039.58 684.735 L1040.14 684.735 L1040.7 684.735 L1041.26 684.735 L1041.82 684.735 L1042.38 684.735 L1042.93 684.735 L1043.49 684.735 L1044.05 684.735 L1044.61 684.735 L1045.17 684.735 L1045.73 684.735 L1046.29 684.735 L1046.85 684.735 L1047.41 684.735 L1047.97 684.735 L1048.53 684.735 L1049.09 684.735 L1049.65 684.735 L1050.2 684.735 L1050.76 684.735 L1051.32 684.735 L1051.88 684.735 L1052.44 684.735 L1053 684.735 L1053.56 684.735 L1054.12 684.735 L1054.68 684.735 L1055.24 684.735 L1055.8 684.735 L1056.36 684.735 L1056.92 684.735 L1057.48 684.735 L1058.03 684.735 L1058.59 684.735 L1059.15 684.735 L1059.71 684.735 L1060.27 684.735 L1060.83 684.735 L1061.39 684.735 L1061.95 684.735 L1062.51 684.735 L1063.07 684.735 L1063.63 684.735 L1064.19 684.735 L1064.75 684.735 L1065.3 684.735 L1065.86 684.735 L1066.42 684.735 L1066.98 684.735 L1067.54 684.735 L1068.1 684.735 L1068.66 684.735 L1069.22 684.735 L1069.78 684.735 L1070.34 684.735 L1070.9 684.735 L1071.46 684.735 L1072.02 684.735 L1072.57 684.735 L1073.13 684.735 L1073.69 684.735 L1074.25 684.735 L1074.81 684.735 L1075.37 684.735 L1075.93 684.735 L1076.49 684.735 L1077.05 684.735 L1077.61 684.735 L1078.17 684.735 L1078.73 684.735 L1079.29 684.735 L1079.85 684.735 L1080.4 684.735 L1080.96 684.735 L1081.52 684.735 L1082.08 684.735 L1082.64 684.735 L1083.2 684.735 L1083.76 684.735 L1084.32 684.735 L1084.88 684.735 L1085.44 684.735 L1086 684.735 L1086.56 684.735 L1087.12 684.735 L1087.67 684.735 L1088.23 684.735 L1088.79 684.735 L1089.35 684.735 L1089.91 684.735 L1090.47 684.735 L1091.03 684.735 L1091.59 684.735 L1092.15 684.735 L1092.71 684.735 L1093.27 684.735 L1093.83 684.735 L1094.39 684.735 L1094.94 684.735 L1095.5 684.735 L1096.06 684.735 L1096.62 684.735 L1097.18 684.735 L1097.74 684.735 L1098.3 684.735 L1098.86 684.735 L1099.42 684.735 L1099.98 684.735 L1100.54 684.735 L1101.1 684.735 L1101.66 684.735 L1102.22 684.735 L1102.77 684.735 L1103.33 684.735 L1103.89 684.735 L1104.45 684.735 L1105.01 684.735 L1105.57 684.735 L1106.13 684.735 L1106.69 684.735 L1107.25 684.735 L1107.81 684.735 L1108.37 684.735 L1108.93 684.735 L1109.49 684.735 L1110.04 684.735 L1110.6 684.735 L1111.16 684.735 L1111.72 684.735 L1112.28 684.735 L1112.84 684.735 L1113.4 684.735 L1113.96 684.735 L1114.52 684.735 L1115.08 684.735 L1115.64 684.735 L1116.2 684.735 L1116.76 684.735 L1117.31 684.735 L1117.87 684.735 L1118.43 684.735 L1118.99 684.735 L1119.55 684.735 L1120.11 684.735 L1120.67 684.735 L1121.23 684.735 L1121.79 684.735 L1122.35 684.735 L1122.91 684.735 L1123.47 684.735 L1124.03 684.735 L1124.59 684.735 L1125.14 684.735 L1125.7 684.735 L1126.26 684.735 L1126.82 684.735 L1127.38 684.735 L1127.94 684.735 L1128.5 684.735 L1129.06 684.735 L1129.62 684.735 L1130.18 684.735 L1130.74 684.735 L1131.3 684.735 L1131.86 684.735 L1132.41 684.735 L1132.97 684.735 L1133.53 684.735 L1134.09 684.735 L1134.65 684.735 L1135.21 684.735 L1135.77 684.735 L1136.33 684.735 L1136.89 684.735 L1137.45 684.735 L1138.01 684.735 L1138.57 684.735 L1139.13 684.735 L1139.68 684.735 L1140.24 684.735 L1140.8 684.735 L1141.36 684.735 L1141.92 684.735 L1142.48 684.735 L1143.04 684.735 L1143.6 684.735 L1144.16 684.735 L1144.72 684.735 L1145.28 684.735 L1145.84 684.735 L1146.4 684.735 L1146.96 684.735 L1147.51 684.735 L1148.07 684.735 L1148.63 684.735 L1149.19 684.735 L1149.75 684.735 L1150.31 684.735 L1150.87 684.735 L1151.43 684.735 L1151.99 684.735 L1152.55 684.735 L1153.11 684.735 L1153.67 684.735 L1154.23 684.735 L1154.78 684.735 L1155.34 684.735 L1155.9 684.735 L1156.46 684.735 L1157.02 684.735 L1157.58 684.735 L1158.14 684.735 L1158.7 684.735 L1159.26 684.735 L1159.82 684.735 L1160.38 684.735 L1160.94 684.735 L1161.5 684.735 L1162.05 684.735 L1162.61 684.735 L1163.17 684.735 L1163.73 684.735 L1164.29 684.735 L1164.85 684.735 L1165.41 684.735 L1165.97 684.735 L1166.53 684.735 L1167.09 684.735 L1167.65 684.735 L1168.21 684.735 L1168.77 684.735 L1169.33 684.735 L1169.88 684.735 L1170.44 684.735 L1171 684.735 L1171.56 684.735 L1172.12 684.735 L1172.68 684.735 L1173.24 684.735 L1173.8 684.735 L1174.36 684.735 L1174.92 684.735 L1175.48 684.735 L1176.04 684.735 L1176.6 684.735 L1177.15 684.735 L1177.71 684.735 L1178.27 684.735 L1178.83 684.735 L1179.39 684.735 L1179.95 684.735 L1180.51 684.735 L1181.07 684.735 L1181.63 684.735 L1182.19 684.735 L1182.75 684.735 L1183.31 684.735 L1183.87 684.735 L1184.43 684.735 L1184.98 684.735 L1185.54 684.735 L1186.1 684.735 L1186.66 684.735 L1187.22 684.735 L1187.78 684.735 L1188.34 684.735 L1188.9 684.735 L1189.46 684.735 L1190.02 684.735 L1190.58 684.735 L1191.14 684.735 L1191.7 684.735 L1192.25 684.735 L1192.81 684.735 L1193.37 684.735 L1193.93 684.735 L1194.49 684.735 L1195.05 684.735 L1195.61 684.735 L1196.17 684.735 L1196.73 684.735 L1197.29 684.735 L1197.85 684.735 L1198.41 684.735 L1198.97 684.735 L1199.52 684.735 L1200.08 684.735 L1200.64 684.735 L1201.2 684.735 L1201.76 684.735 L1202.32 684.735 L1202.88 684.735 L1203.44 684.735 L1204 684.735 L1204.56 684.735 L1205.12 684.735 L1205.68 684.735 L1206.24 684.735 L1206.8 684.735 L1207.35 684.735 L1207.91 684.735 L1208.47 684.735 L1209.03 684.735 L1209.59 684.735 L1210.15 684.735 L1210.71 684.735 L1211.27 684.735 L1211.83 684.735 L1212.39 684.735 L1212.95 684.735 L1213.51 684.735 L1214.07 684.735 L1214.62 684.735 L1215.18 684.735 L1215.74 684.735 L1216.3 684.735 L1216.86 684.735 L1217.42 684.735 L1217.98 684.735 L1218.54 684.735 L1219.1 684.735 L1219.66 684.735 L1220.22 684.735 L1220.78 684.735 L1221.34 684.735 L1221.89 684.735 L1222.45 684.735 L1223.01 684.735 L1223.57 684.735 L1224.13 684.735 L1224.69 684.735 L1225.25 684.735 L1225.81 684.735 L1226.37 684.735 L1226.93 684.735 L1227.49 684.735 L1228.05 684.735 L1228.61 684.735 L1229.17 684.735 L1229.72 684.735 L1230.28 684.735 L1230.84 684.735 L1231.4 684.735 L1231.96 684.735 L1232.52 684.735 L1233.08 684.735 L1233.64 684.735 L1234.2 684.735 L1234.76 684.735 L1235.32 684.735 L1235.88 684.735 L1236.44 684.735 L1236.99 684.735 L1237.55 684.735 L1238.11 684.735 L1238.67 684.735 L1239.23 684.735 L1239.79 684.735 L1240.35 684.735 L1240.91 684.735 L1241.47 684.735 L1242.03 684.735 L1242.59 684.735 L1243.15 684.735 L1243.71 684.735 L1244.26 684.735 L1244.82 684.735 L1245.38 684.735 L1245.94 684.735 L1246.5 684.735 L1247.06 684.735 L1247.62 684.735 L1248.18 684.735 L1248.74 684.735 L1249.3 684.735 L1249.86 684.735 L1250.42 684.735 L1250.98 684.735 L1251.54 684.735 L1252.09 684.735 L1252.65 684.735 L1253.21 684.735 L1253.77 684.735 L1254.33 684.735 L1254.89 684.735 L1255.45 684.735 L1256.01 684.735 L1256.57 684.735 L1257.13 684.735 L1257.69 684.735 L1258.25 684.735 L1258.81 684.735 L1259.36 684.735 L1259.92 684.735 L1260.48 684.735 L1261.04 684.735 L1261.6 684.735 L1262.16 684.735 L1262.72 684.735 L1263.28 684.735 L1263.84 684.735 L1264.4 684.735 L1264.96 684.735 L1265.52 684.735 L1266.08 684.735 L1266.63 684.735 L1267.19 684.735 L1267.75 684.735 L1268.31 684.735 L1268.87 684.735 L1269.43 684.735 L1269.99 684.735 L1270.55 684.735 L1271.11 684.735 L1271.67 684.735 L1272.23 684.735 L1272.79 684.735 L1273.35 684.735 L1273.91 684.735 L1274.46 684.735 L1275.02 684.735 L1275.58 684.735 L1276.14 684.735 L1276.7 684.735 L1277.26 684.735 L1277.82 684.735 L1278.38 684.735 L1278.94 684.735 L1279.5 684.735 L1280.06 684.735 L1280.62 684.735 L1281.18 684.735 L1281.73 684.735 L1282.29 684.735 L1282.85 684.735 L1283.41 684.735 L1283.97 684.735 L1284.53 684.735 L1285.09 684.735 L1285.65 684.735 L1286.21 684.735 L1286.77 684.735 L1287.33 684.735 L1287.89 684.735 L1288.45 684.735 L1289 684.735 L1289.56 684.735 L1290.12 684.735 L1290.68 684.735 L1291.24 684.735 L1291.8 684.735 L1292.36 684.735 L1292.92 684.735 L1293.48 684.735 L1294.04 684.735 L1294.6 684.735 L1295.16 684.735 L1295.72 684.735 L1296.28 684.735 L1296.83 684.735 L1297.39 684.735 L1297.95 684.735 L1298.51 684.735 L1299.07 684.735 L1299.63 684.735 L1300.19 684.735 L1300.75 684.735 L1301.31 684.735 L1301.87 684.735 L1302.43 684.735 L1302.99 684.735 L1303.55 684.735 L1304.1 684.735 L1304.66 684.735 L1305.22 684.735 L1305.78 684.735 L1306.34 684.735 L1306.9 684.735 L1307.46 684.735 L1308.02 684.735 L1308.58 684.735 L1309.14 684.735 L1309.7 684.735 L1310.26 684.735 L1310.82 684.735 L1311.38 684.735 L1311.93 684.735 L1312.49 684.735 L1313.05 684.735 L1313.61 684.735 L1314.17 684.735 L1314.73 684.735 L1315.29 684.735 L1315.85 684.735 L1316.41 684.735 L1316.97 684.735 L1317.53 684.735 L1318.09 684.735 L1318.65 684.735 L1319.2 684.735 L1319.76 684.735 L1320.32 684.735 L1320.88 684.735 L1321.44 684.735 L1322 684.735 L1322.56 684.735 L1323.12 684.735 L1323.68 684.735 L1324.24 684.735 L1324.8 684.735 L1325.36 684.735 L1325.92 684.735 L1326.47 684.735 L1327.03 684.735 L1327.59 684.735 L1328.15 684.735 L1328.71 684.735 L1329.27 684.735 L1329.83 684.735 L1330.39 684.735 L1330.95 684.735 L1331.51 684.735 L1332.07 684.735 L1332.63 684.735 L1333.19 684.735 L1333.75 684.735 L1334.3 684.735 L1334.86 684.735 L1335.42 684.735 L1335.98 684.735 L1336.54 684.735 L1337.1 684.735 L1337.66 684.735 L1338.22 684.735 L1338.78 684.735 L1339.34 684.735 L1339.9 684.735 L1340.46 684.735 L1341.02 684.735 L1341.57 684.735 L1342.13 684.735 L1342.69 684.735 L1343.25 684.735 L1343.81 684.735 L1344.37 684.735 L1344.93 684.735 L1345.49 684.735 L1346.05 684.735 L1346.61 684.735 L1347.17 684.735 L1347.73 684.735 L1348.29 684.735 L1348.84 684.735 L1349.4 684.735 L1349.96 684.735 L1350.52 684.735 L1351.08 684.735 L1351.64 684.735 L1352.2 684.735 L1352.76 684.735 L1353.32 684.735 L1353.88 684.735 L1354.44 684.735 L1355 684.735 L1355.56 684.735 L1356.12 684.735 L1356.67 684.735 L1357.23 684.735 L1357.79 684.735 L1358.35 684.735 L1358.91 684.735 L1359.47 684.735 L1360.03 684.735 L1360.59 684.735 L1361.15 684.735 L1361.71 684.735 L1362.27 684.735 L1362.83 684.735 L1363.39 684.735 L1363.94 684.735 L1364.5 684.735 L1365.06 684.735 L1365.62 684.735 L1366.18 684.735 L1366.74 684.735 L1367.3 684.735 L1367.86 684.735 L1368.42 684.735 L1368.98 684.735 L1369.54 684.735 L1370.1 684.735 L1370.66 684.735 L1371.21 684.735 L1371.77 684.735 L1372.33 684.735 L1372.89 684.735 L1373.45 684.735 L1374.01 684.735 L1374.57 684.735 L1375.13 684.735 L1375.69 684.735 L1376.25 684.735 L1376.81 684.735 L1377.37 684.735 L1377.93 684.735 L1378.49 684.735 L1379.04 684.735 L1379.6 684.735 L1380.16 684.735 L1380.72 684.735 L1381.28 684.735 L1381.84 684.735 L1382.4 684.735 L1382.96 684.735 L1383.52 684.735 L1384.08 684.735 L1384.64 684.735 L1385.2 684.735 L1385.76 684.735 L1386.31 684.735 L1386.87 684.735 L1387.43 684.735 L1387.99 684.735 L1388.55 684.735 L1389.11 684.735 L1389.67 684.735 L1390.23 684.735 L1390.79 684.735 L1391.35 684.735 L1391.91 684.735 L1392.47 684.735 L1393.03 684.735 L1393.58 684.735 L1394.14 684.735 L1394.7 684.735 L1395.26 684.735 L1395.82 684.735 L1396.38 684.735 L1396.94 684.735 L1397.5 684.735 L1398.06 684.735 L1398.62 684.735 L1399.18 684.735 L1399.74 684.735 L1400.3 684.735 L1400.86 684.735 L1401.41 684.735 L1401.97 684.735 L1402.53 684.735 L1403.09 684.735 L1403.65 684.735 L1404.21 684.735 L1404.77 684.735 L1405.33 684.735 L1405.89 684.735 L1406.45 684.735 L1407.01 684.735 L1407.57 684.735 L1408.13 684.735 L1408.68 684.735 L1409.24 684.735 L1409.8 684.735 L1410.36 684.735 L1410.92 684.735 L1411.48 684.735 L1412.04 684.735 L1412.6 684.735 L1413.16 684.735 L1413.72 684.735 L1414.28 684.735 L1414.84 684.735 L1415.4 684.735 L1415.95 684.735 L1416.51 684.735 L1417.07 684.735 L1417.63 684.735 L1418.19 684.735 L1418.75 684.735 L1419.31 684.735 L1419.87 684.735 L1420.43 684.735 L1420.99 684.735 L1421.55 684.735 L1422.11 684.735 L1422.67 684.735 L1423.23 684.735 L1423.78 684.735 L1424.34 684.735 L1424.9 684.735 L1425.46 684.735 L1426.02 684.735 L1426.58 684.735 L1427.14 684.735 L1427.7 684.735 L1428.26 684.735 L1428.82 684.735 L1429.38 684.735 L1429.94 684.735 L1430.5 684.735 L1431.05 684.735 L1431.61 684.735 L1432.17 684.735 L1432.73 684.735 L1433.29 684.735 L1433.85 684.735 L1434.41 684.735 L1434.97 684.735 L1435.53 684.735 L1436.09 684.735 L1436.65 684.735 L1437.21 684.735 L1437.77 684.735 L1438.33 684.735 L1438.88 684.735 L1439.44 684.735 L1440 684.735 L1440.56 684.735 L1441.12 684.735 L1441.68 684.735 L1442.24 684.735 L1442.8 684.735 L1443.36 684.735 L1443.92 684.735 L1444.48 684.735 L1445.04 684.735 L1445.6 684.735 L1446.15 684.735 L1446.71 684.735 L1447.27 684.735 L1447.83 684.735 L1448.39 684.735 L1448.95 684.735 L1449.51 684.735 L1450.07 684.735 L1450.63 684.735 L1451.19 684.735 L1451.75 684.735 L1452.31 684.735 L1452.87 684.735 L1453.42 684.735 L1453.98 684.735 L1454.54 684.735 L1455.1 684.735 L1455.66 684.735 L1456.22 684.735 L1456.78 684.735 L1457.34 684.735 L1457.9 684.735 L1458.46 684.735 L1459.02 684.735 L1459.58 684.735 L1460.14 684.735 L1460.7 684.735 L1461.25 684.735 L1461.81 684.735 L1462.37 684.735 L1462.93 684.735 L1463.49 684.735 L1464.05 684.735 L1464.61 684.735 L1465.17 684.735 L1465.73 684.735 L1466.29 684.735 L1466.85 684.735 L1467.41 684.735 L1467.97 684.735 L1468.52 684.735 L1469.08 684.735 L1469.64 684.735 L1470.2 684.735 L1470.76 684.735 L1471.32 684.735 L1471.88 684.735 L1472.44 684.735 L1473 684.735 L1473.56 684.735 L1474.12 684.735 L1474.68 684.735 L1475.24 684.735 L1475.79 684.735 L1476.35 684.735 L1476.91 684.735 L1477.47 684.735 L1478.03 684.735 L1478.59 684.735 L1479.15 684.735 L1479.71 684.735 L1480.27 684.735 L1480.83 684.735 L1481.39 684.735 L1481.95 684.735 L1482.51 684.735 L1483.07 684.735 L1483.62 684.735 L1484.18 684.735 L1484.74 684.735 L1485.3 684.735 L1485.86 684.735 L1486.42 684.735 L1486.98 684.735 L1487.54 684.735 L1488.1 684.735 L1488.66 684.735 L1489.22 684.735 L1489.78 684.735 L1490.34 684.735 L1490.89 684.735 L1491.45 684.735 L1492.01 684.735 L1492.57 684.735 L1493.13 684.735 L1493.69 684.735 L1494.25 684.735 L1494.81 684.735 L1495.37 684.735 L1495.93 684.735 L1496.49 684.735 L1497.05 684.735 L1497.61 684.735 L1498.16 684.735 L1498.72 684.735 L1499.28 684.735 L1499.84 684.735 L1500.4 684.735 L1500.96 684.735 L1501.52 684.735 L1502.08 684.735 L1502.64 684.735 L1503.2 684.735 L1503.76 684.735 L1504.32 684.735 L1504.88 684.735 L1505.44 684.735 L1505.99 684.735 L1506.55 684.735 L1507.11 684.735 L1507.67 684.735 L1508.23 684.735 L1508.79 684.735 L1509.35 684.735 L1509.91 684.735 L1510.47 684.735 L1511.03 684.735 L1511.59 684.735 L1512.15 684.735 L1512.71 684.735 L1513.26 684.735 L1513.82 684.735 L1514.38 684.735 L1514.94 684.735 L1515.5 684.735 L1516.06 684.735 L1516.62 684.735 L1517.18 684.735 L1517.74 684.735 L1518.3 684.735 L1518.86 684.735 L1519.42 684.735 L1519.98 684.735 L1520.53 684.735 L1521.09 684.735 L1521.65 684.735 L1522.21 684.735 L1522.77 684.735 L1523.33 684.735 L1523.89 684.735 L1524.45 684.735 L1525.01 684.735 L1525.57 684.735 L1526.13 684.735 L1526.69 684.735 L1527.25 684.735 L1527.81 684.735 L1528.36 684.735 L1528.92 684.735 L1529.48 684.735 L1530.04 684.735 L1530.6 684.735 L1531.16 684.735 L1531.72 684.735 L1532.28 684.735 L1532.84 684.735 L1533.4 684.735 L1533.96 684.735 L1534.52 684.735 L1535.08 684.735 L1535.63 684.735 L1536.19 684.735 L1536.75 684.735 L1537.31 684.735 L1537.87 684.735 L1538.43 684.735 L1538.99 684.735 L1539.55 684.735 L1540.11 684.735 L1540.67 684.735 L1541.23 684.735 L1541.79 684.735 L1542.35 684.735 L1542.9 684.735 L1543.46 684.735 L1544.02 684.735 L1544.58 684.735 L1545.14 684.735 L1545.7 684.735 L1546.26 684.735 L1546.82 684.735 L1547.38 684.735 L1547.94 684.735 L1548.5 684.735 L1549.06 684.735 L1549.62 684.735 L1550.18 684.735 L1550.73 684.735 L1551.29 684.735 L1551.85 684.735 L1552.41 684.735 L1552.97 684.735 L1553.53 684.735 L1554.09 684.735 L1554.65 684.735 L1555.21 684.735 L1555.77 684.735 L1556.33 684.735 L1556.89 684.735 L1557.45 684.735 L1558 684.735 L1558.56 684.735 L1559.12 684.735 L1559.68 684.735 L1560.24 684.735 L1560.8 684.735 L1561.36 684.735 L1561.92 684.735 L1562.48 684.735 L1563.04 684.735 L1563.6 684.735 L1564.16 684.735 L1564.72 684.735 L1565.28 684.735 L1565.83 684.735 L1566.39 684.735 L1566.95 684.735 L1567.51 684.735 L1568.07 684.735 L1568.63 684.735 L1569.19 684.735 L1569.75 684.735 L1570.31 684.735 L1570.87 684.735 L1571.43 684.735 L1571.99 684.735 L1572.55 684.735 L1573.1 684.735 L1573.66 684.735 L1574.22 684.735 L1574.78 684.735 L1575.34 684.735 L1575.9 684.735 L1576.46 684.735 L1577.02 684.735 L1577.58 684.735 L1578.14 684.735 L1578.7 684.735 L1579.26 684.735 L1579.82 684.735 L1580.37 684.735 L1580.93 684.735 L1581.49 684.735 L1582.05 684.735 L1582.61 684.735 L1583.17 684.735 L1583.73 684.735 L1584.29 684.735 L1584.85 684.735 L1585.41 684.735 L1585.97 684.735 L1586.53 684.735 L1587.09 684.735 L1587.65 684.735 L1588.2 684.735 L1588.76 684.735 L1589.32 684.735 L1589.88 684.735 L1590.44 684.735 L1591 684.735 L1591.56 684.735 L1592.12 684.735 L1592.68 684.735 L1593.24 684.735 L1593.8 684.735 L1594.36 684.735 L1594.92 684.735 L1595.47 684.735 L1596.03 684.735 L1596.59 684.735 L1597.15 684.735 L1597.71 684.735 L1598.27 684.735 L1598.83 684.735 L1599.39 684.735 L1599.95 684.735 L1600.51 684.735 L1601.07 684.735 L1601.63 684.735 L1602.19 684.735 L1602.74 684.735 L1603.3 684.735 L1603.86 684.735 L1604.42 684.735 L1604.98 684.735 L1605.54 684.735 L1606.1 684.735 L1606.66 684.735 L1607.22 684.735 L1607.78 684.735 L1608.34 684.735 L1608.9 684.735 L1609.46 684.735 L1610.02 684.735 L1610.57 684.735 L1611.13 684.735 L1611.69 684.735 L1612.25 684.735 L1612.81 684.735 L1613.37 684.735 L1613.93 684.735 L1614.49 684.735 L1615.05 684.735 L1615.61 684.735 L1616.17 684.735 L1616.73 684.735 L1617.29 684.735 L1617.84 684.735 L1618.4 684.735 L1618.96 684.735 L1619.52 684.735 L1620.08 684.735 L1620.64 684.735 L1621.2 684.735 L1621.76 684.735 L1622.32 684.735 L1622.88 684.735 L1623.44 684.735 L1624 684.735 L1624.56 684.735 L1625.11 684.735 L1625.67 684.735 L1626.23 684.735 L1626.79 684.735 L1627.35 684.735 L1627.91 684.735 L1628.47 684.735 L1629.03 684.735 L1629.59 684.735 L1630.15 684.735 L1630.71 684.735 L1631.27 684.735 L1631.83 684.735 L1632.39 684.735 L1632.94 684.735 L1633.5 684.735 L1634.06 684.735 L1634.62 684.735 L1635.18 684.735 L1635.74 684.735 L1636.3 684.735 L1636.86 684.735 L1637.42 684.735 L1637.98 684.735 L1638.54 684.735 L1639.1 684.735 L1639.66 684.735 L1640.21 684.735 L1640.77 684.735 L1641.33 684.735 L1641.89 684.735 L1642.45 684.735 L1643.01 684.735 L1643.57 684.735 L1644.13 684.735 L1644.69 684.735 L1645.25 684.735 L1645.81 684.735 L1646.37 684.735 L1646.93 684.735 L1647.48 684.735 L1648.04 684.735 L1648.6 684.735 L1649.16 684.735 L1649.72 684.735 L1650.28 684.735 L1650.84 684.735 L1651.4 684.735 L1651.96 684.735 L1652.52 684.735 L1653.08 684.735 L1653.64 684.735 L1654.2 684.735 L1654.76 684.735 L1655.31 684.735 L1655.87 684.735 L1656.43 684.735 L1656.99 684.735 L1657.55 684.735 L1658.11 684.735 L1658.67 684.735 L1659.23 684.735 L1659.79 684.735 L1660.35 684.735 L1660.91 684.735 L1661.47 684.735 L1662.03 684.735 L1662.58 684.735 L1663.14 684.735 L1663.7 684.735 L1664.26 684.735 L1664.82 684.735 L1665.38 684.735 L1665.94 684.735 L1666.5 684.735 L1667.06 684.735 L1667.62 684.735 L1668.18 684.735 L1668.74 684.735 L1669.3 684.735 L1669.85 684.735 L1670.41 684.735 L1670.97 684.735 L1671.53 684.735 L1672.09 684.735 L1672.65 684.735 L1673.21 684.735 L1673.77 684.735 L1674.33 684.735 L1674.89 684.735 L1675.45 684.735 L1676.01 684.735 L1676.57 684.735 L1677.13 684.735 L1677.68 684.735 L1678.24 684.735 L1678.8 684.735 L1679.36 684.735 L1679.92 684.735 L1680.48 684.735 L1681.04 684.735 L1681.6 684.735 L1682.16 684.735 L1682.72 684.735 L1683.28 684.735 L1683.84 684.735 L1684.4 684.735 L1684.95 684.735 L1685.51 684.735 L1686.07 684.735 L1686.63 684.735 L1687.19 684.735 L1687.75 684.735 L1688.31 684.735 L1688.87 684.735 L1689.43 684.735 L1689.99 684.735 L1690.55 684.735 L1691.11 684.735 L1691.67 684.735 L1692.23 684.735 L1692.78 684.735 L1693.34 684.735 L1693.9 684.735 L1694.46 684.735 L1695.02 684.735 L1695.58 684.735 L1696.14 684.735 L1696.7 684.735 L1697.26 684.735 L1697.82 684.735 L1698.38 684.735 L1698.94 684.735 L1699.5 684.735 L1700.05 684.735 L1700.61 684.735 L1701.17 684.735 L1701.73 684.735 L1702.29 684.735 L1702.85 684.735 L1703.41 684.735 L1703.97 684.735 L1704.53 684.735 L1705.09 684.735 L1705.65 684.735 L1706.21 684.735 L1706.77 684.735 L1707.32 684.735 L1707.88 684.735 L1708.44 684.735 L1709 684.735 L1709.56 684.735 L1710.12 684.735 L1710.68 684.735 L1711.24 684.735 L1711.8 684.735 L1712.36 684.735 L1712.92 684.735 L1713.48 684.735 L1714.04 684.735 L1714.6 684.735 L1715.15 684.735 L1715.71 684.735 L1716.27 684.735 L1716.83 684.735 L1717.39 684.735 L1717.95 684.735 L1718.51 684.735 L1719.07 684.735 L1719.63 684.735 L1720.19 684.735 L1720.75 684.735 L1721.31 684.735 L1721.87 684.735 L1722.42 684.735 L1722.98 684.735 L1723.54 684.735 L1724.1 684.735 L1724.66 684.735 L1725.22 684.735 L1725.78 684.735 L1726.34 684.735 L1726.9 684.735 L1727.46 684.735 L1728.02 684.735 L1728.58 684.735 L1729.14 684.735 L1729.69 684.735 L1730.25 684.735 L1730.81 684.735 L1731.37 684.735 L1731.93 684.735 L1732.49 684.735 L1733.05 684.735 L1733.61 684.735 L1734.17 684.735 L1734.73 684.735 L1735.29 684.735 L1735.85 684.735 L1736.41 684.735 L1736.97 684.735 L1737.52 684.735 L1738.08 684.735 L1738.64 684.735 L1739.2 684.735 L1739.76 684.735 L1740.32 684.735 L1740.88 684.735 L1741.44 684.735 L1742 684.735 L1742.56 684.735 L1743.12 684.735 L1743.68 684.735 L1744.24 684.735 L1744.79 684.735 L1745.35 684.735 L1745.91 684.735 L1746.47 684.735 L1747.03 684.735 L1747.59 684.735 L1748.15 684.735 L1748.71 684.735 L1749.27 684.735 L1749.83 684.735 L1750.39 684.735 L1750.95 684.735 L1751.51 684.735 L1752.06 684.735 L1752.62 684.735 L1753.18 684.735 L1753.74 684.735 L1754.3 684.735 L1754.86 684.735 L1755.42 684.735 L1755.98 684.735 L1756.54 684.735 L1757.1 684.735 L1757.66 684.735 L1758.22 684.735 L1758.78 684.735 L1759.34 684.735 L1759.89 684.735 L1760.45 684.735 L1761.01 684.735 L1761.57 684.735 L1762.13 684.735 L1762.69 684.735 L1763.25 684.735 L1763.81 684.735 L1764.37 684.735 L1764.93 684.735 L1765.49 684.735 L1766.05 684.735 L1766.61 684.735 L1767.16 684.735 L1767.72 684.735 L1768.28 684.735 L1768.84 684.735 L1769.4 684.735 L1769.96 684.735 L1770.52 684.735 L1771.08 684.735 L1771.64 684.735 L1772.2 684.735 L1772.76 684.735 L1773.32 684.735 L1773.88 684.735 L1774.43 684.735 L1774.99 684.735 L1775.55 684.735 L1776.11 684.735 L1776.67 684.735 L1777.23 684.735 L1777.79 684.735 L1778.35 684.735 L1778.91 684.735 L1779.47 684.735 L1780.03 684.735 L1780.59 684.735 L1781.15 684.735 L1781.71 684.735 L1782.26 684.735 L1782.82 684.735 L1783.38 684.735 L1783.94 684.735 L1784.5 684.735 L1785.06 684.735 L1785.62 684.735 L1786.18 684.735 L1786.74 684.735 L1787.3 684.735 L1787.86 684.735 L1788.42 684.735 L1788.98 684.735 L1789.53 684.735 L1790.09 684.735 L1790.65 684.735 L1791.21 684.735 L1791.77 684.735 L1792.33 684.735 L1792.89 684.735 L1793.45 684.735 L1794.01 684.735 L1794.57 684.735 L1795.13 684.735 L1795.69 684.735 L1796.25 684.735 L1796.8 684.735 L1797.36 684.735 L1797.92 684.735 L1798.48 684.735 L1799.04 684.735 L1799.6 684.735 L1800.16 684.735 L1800.72 684.735 L1801.28 684.735 L1801.84 684.735 L1802.4 684.735 L1802.96 684.735 L1803.52 684.735 L1804.08 684.735 L1804.63 684.735 L1805.19 684.735 L1805.75 684.735 L1806.31 684.735 L1806.87 684.735 L1807.43 684.735 L1807.99 684.735 L1808.55 684.735 L1809.11 684.735 L1809.67 684.735 L1810.23 684.735 L1810.79 684.735 L1811.35 684.735 L1811.9 684.735 L1812.46 684.735 L1813.02 684.735 L1813.58 684.735 L1814.14 684.735 L1814.7 684.735 L1815.26 684.735 L1815.82 684.735 L1816.38 684.735 L1816.94 684.735 L1817.5 684.735 L1818.06 684.735 L1818.62 684.735 L1819.18 684.735 L1819.73 684.735 L1820.29 684.735 L1820.85 684.735 L1821.41 684.735 L1821.97 684.735 L1822.53 684.735 L1823.09 684.735 L1823.65 684.735 L1824.21 684.735 L1824.77 684.735 L1825.33 684.735 L1825.89 684.735 L1826.45 684.735 L1827 684.735 L1827.56 684.735 L1828.12 684.735 L1828.68 684.735 L1829.24 684.735 L1829.8 684.735 L1830.36 684.735 L1830.92 684.735 L1831.48 684.735 L1832.04 684.735 L1832.6 684.735 L1833.16 684.735 L1833.72 684.735 L1834.27 684.735 L1834.83 684.735 L1835.39 684.735 L1835.95 684.735 L1836.51 684.735 L1837.07 684.735 L1837.63 684.735 L1838.19 684.735 L1838.19 683.271 L1837.63 683.271 L1837.07 683.271 L1836.51 683.271 L1835.95 683.271 L1835.39 683.271 L1834.83 683.271 L1834.27 683.271 L1833.72 683.271 L1833.16 683.271 L1832.6 683.271 L1832.04 683.271 L1831.48 683.271 L1830.92 683.271 L1830.36 683.271 L1829.8 683.271 L1829.24 683.271 L1828.68 683.271 L1828.12 683.271 L1827.56 683.271 L1827 683.271 L1826.45 683.271 L1825.89 683.271 L1825.33 683.271 L1824.77 683.271 L1824.21 683.271 L1823.65 683.271 L1823.09 683.271 L1822.53 683.271 L1821.97 683.271 L1821.41 683.271 L1820.85 683.271 L1820.29 683.271 L1819.73 683.271 L1819.18 683.271 L1818.62 683.271 L1818.06 683.271 L1817.5 683.271 L1816.94 683.271 L1816.38 683.271 L1815.82 683.271 L1815.26 683.271 L1814.7 683.271 L1814.14 683.271 L1813.58 683.271 L1813.02 683.271 L1812.46 683.271 L1811.9 683.271 L1811.35 683.271 L1810.79 683.271 L1810.23 683.271 L1809.67 683.271 L1809.11 683.271 L1808.55 683.271 L1807.99 683.271 L1807.43 683.271 L1806.87 683.271 L1806.31 683.271 L1805.75 683.271 L1805.19 683.271 L1804.63 683.271 L1804.08 683.271 L1803.52 683.271 L1802.96 683.271 L1802.4 683.271 L1801.84 683.271 L1801.28 683.271 L1800.72 683.271 L1800.16 683.271 L1799.6 683.271 L1799.04 683.271 L1798.48 683.271 L1797.92 683.271 L1797.36 683.271 L1796.8 683.271 L1796.25 683.271 L1795.69 683.271 L1795.13 683.271 L1794.57 683.271 L1794.01 683.271 L1793.45 683.271 L1792.89 683.271 L1792.33 683.271 L1791.77 683.271 L1791.21 683.271 L1790.65 683.271 L1790.09 683.271 L1789.53 683.271 L1788.98 683.271 L1788.42 683.271 L1787.86 683.271 L1787.3 683.271 L1786.74 683.271 L1786.18 683.271 L1785.62 683.271 L1785.06 683.271 L1784.5 683.271 L1783.94 683.271 L1783.38 683.271 L1782.82 683.271 L1782.26 683.271 L1781.71 683.271 L1781.15 683.271 L1780.59 683.271 L1780.03 683.271 L1779.47 683.271 L1778.91 683.271 L1778.35 683.271 L1777.79 683.271 L1777.23 683.271 L1776.67 683.271 L1776.11 683.271 L1775.55 683.271 L1774.99 683.271 L1774.43 683.271 L1773.88 683.271 L1773.32 683.271 L1772.76 683.271 L1772.2 683.271 L1771.64 683.271 L1771.08 683.271 L1770.52 683.271 L1769.96 683.271 L1769.4 683.271 L1768.84 683.271 L1768.28 683.271 L1767.72 683.271 L1767.16 683.271 L1766.61 683.271 L1766.05 683.271 L1765.49 683.271 L1764.93 683.271 L1764.37 683.271 L1763.81 683.271 L1763.25 683.271 L1762.69 683.271 L1762.13 683.271 L1761.57 683.271 L1761.01 683.271 L1760.45 683.271 L1759.89 683.271 L1759.34 683.271 L1758.78 683.271 L1758.22 683.271 L1757.66 683.271 L1757.1 683.271 L1756.54 683.271 L1755.98 683.271 L1755.42 683.271 L1754.86 683.271 L1754.3 683.271 L1753.74 683.271 L1753.18 683.271 L1752.62 683.271 L1752.06 683.271 L1751.51 683.271 L1750.95 683.271 L1750.39 683.271 L1749.83 683.271 L1749.27 683.271 L1748.71 683.271 L1748.15 683.271 L1747.59 683.271 L1747.03 683.271 L1746.47 683.271 L1745.91 683.271 L1745.35 683.271 L1744.79 683.271 L1744.24 683.271 L1743.68 683.271 L1743.12 683.271 L1742.56 683.271 L1742 683.271 L1741.44 683.271 L1740.88 683.271 L1740.32 683.271 L1739.76 683.271 L1739.2 683.271 L1738.64 683.271 L1738.08 683.271 L1737.52 683.271 L1736.97 683.271 L1736.41 683.271 L1735.85 683.271 L1735.29 683.271 L1734.73 683.271 L1734.17 683.271 L1733.61 683.271 L1733.05 683.271 L1732.49 683.271 L1731.93 683.271 L1731.37 683.271 L1730.81 683.271 L1730.25 683.271 L1729.69 683.271 L1729.14 683.271 L1728.58 683.271 L1728.02 683.271 L1727.46 683.271 L1726.9 683.271 L1726.34 683.271 L1725.78 683.271 L1725.22 683.271 L1724.66 683.271 L1724.1 683.271 L1723.54 683.271 L1722.98 683.271 L1722.42 683.271 L1721.87 683.271 L1721.31 683.271 L1720.75 683.271 L1720.19 683.271 L1719.63 683.271 L1719.07 683.271 L1718.51 683.271 L1717.95 683.271 L1717.39 683.271 L1716.83 683.271 L1716.27 683.271 L1715.71 683.271 L1715.15 683.271 L1714.6 683.271 L1714.04 683.271 L1713.48 683.271 L1712.92 683.271 L1712.36 683.271 L1711.8 683.271 L1711.24 683.271 L1710.68 683.271 L1710.12 683.271 L1709.56 683.271 L1709 683.271 L1708.44 683.271 L1707.88 683.271 L1707.32 683.271 L1706.77 683.271 L1706.21 683.271 L1705.65 683.271 L1705.09 683.271 L1704.53 683.271 L1703.97 683.271 L1703.41 683.271 L1702.85 683.271 L1702.29 683.271 L1701.73 683.271 L1701.17 683.271 L1700.61 683.271 L1700.05 683.271 L1699.5 683.271 L1698.94 683.271 L1698.38 683.271 L1697.82 683.271 L1697.26 683.271 L1696.7 683.271 L1696.14 683.271 L1695.58 683.271 L1695.02 683.271 L1694.46 683.271 L1693.9 683.271 L1693.34 683.271 L1692.78 683.271 L1692.23 683.271 L1691.67 683.271 L1691.11 683.271 L1690.55 683.271 L1689.99 683.271 L1689.43 683.271 L1688.87 683.271 L1688.31 683.271 L1687.75 683.271 L1687.19 683.271 L1686.63 683.271 L1686.07 683.271 L1685.51 683.271 L1684.95 683.271 L1684.4 683.271 L1683.84 683.271 L1683.28 683.271 L1682.72 683.271 L1682.16 683.271 L1681.6 683.271 L1681.04 683.271 L1680.48 683.271 L1679.92 683.271 L1679.36 683.271 L1678.8 683.271 L1678.24 683.271 L1677.68 683.271 L1677.13 683.271 L1676.57 683.271 L1676.01 683.271 L1675.45 683.271 L1674.89 683.271 L1674.33 683.271 L1673.77 683.271 L1673.21 683.271 L1672.65 683.271 L1672.09 683.271 L1671.53 683.271 L1670.97 683.271 L1670.41 683.271 L1669.85 683.271 L1669.3 683.271 L1668.74 683.271 L1668.18 683.271 L1667.62 683.271 L1667.06 683.271 L1666.5 683.271 L1665.94 683.271 L1665.38 683.271 L1664.82 683.271 L1664.26 683.271 L1663.7 683.271 L1663.14 683.271 L1662.58 683.271 L1662.03 683.271 L1661.47 683.271 L1660.91 683.271 L1660.35 683.271 L1659.79 683.271 L1659.23 683.271 L1658.67 683.271 L1658.11 683.271 L1657.55 683.271 L1656.99 683.271 L1656.43 683.271 L1655.87 683.271 L1655.31 683.271 L1654.76 683.271 L1654.2 683.271 L1653.64 683.271 L1653.08 683.271 L1652.52 683.271 L1651.96 683.271 L1651.4 683.271 L1650.84 683.271 L1650.28 683.271 L1649.72 683.271 L1649.16 683.271 L1648.6 683.271 L1648.04 683.271 L1647.48 683.271 L1646.93 683.271 L1646.37 683.271 L1645.81 683.271 L1645.25 683.271 L1644.69 683.271 L1644.13 683.271 L1643.57 683.271 L1643.01 683.271 L1642.45 683.271 L1641.89 683.271 L1641.33 683.271 L1640.77 683.271 L1640.21 683.271 L1639.66 683.271 L1639.1 683.271 L1638.54 683.271 L1637.98 683.271 L1637.42 683.271 L1636.86 683.271 L1636.3 683.271 L1635.74 683.271 L1635.18 683.271 L1634.62 683.271 L1634.06 683.271 L1633.5 683.271 L1632.94 683.271 L1632.39 683.271 L1631.83 683.271 L1631.27 683.271 L1630.71 683.271 L1630.15 683.271 L1629.59 683.271 L1629.03 683.271 L1628.47 683.271 L1627.91 683.271 L1627.35 683.271 L1626.79 683.271 L1626.23 683.271 L1625.67 683.271 L1625.11 683.271 L1624.56 683.271 L1624 683.271 L1623.44 683.271 L1622.88 683.271 L1622.32 683.271 L1621.76 683.271 L1621.2 683.271 L1620.64 683.271 L1620.08 683.271 L1619.52 683.271 L1618.96 683.271 L1618.4 683.271 L1617.84 683.271 L1617.29 683.271 L1616.73 683.271 L1616.17 683.271 L1615.61 683.271 L1615.05 683.271 L1614.49 683.271 L1613.93 683.271 L1613.37 683.271 L1612.81 683.271 L1612.25 683.271 L1611.69 683.271 L1611.13 683.271 L1610.57 683.271 L1610.02 683.271 L1609.46 683.271 L1608.9 683.271 L1608.34 683.271 L1607.78 683.271 L1607.22 683.271 L1606.66 683.271 L1606.1 683.271 L1605.54 683.271 L1604.98 683.271 L1604.42 683.271 L1603.86 683.271 L1603.3 683.271 L1602.74 683.271 L1602.19 683.271 L1601.63 683.271 L1601.07 683.271 L1600.51 683.271 L1599.95 683.271 L1599.39 683.271 L1598.83 683.271 L1598.27 683.271 L1597.71 683.271 L1597.15 683.271 L1596.59 683.271 L1596.03 683.271 L1595.47 683.271 L1594.92 683.271 L1594.36 683.271 L1593.8 683.271 L1593.24 683.271 L1592.68 683.271 L1592.12 683.271 L1591.56 683.271 L1591 683.271 L1590.44 683.271 L1589.88 683.271 L1589.32 683.271 L1588.76 683.271 L1588.2 683.271 L1587.65 683.271 L1587.09 683.271 L1586.53 683.271 L1585.97 683.271 L1585.41 683.271 L1584.85 683.271 L1584.29 683.271 L1583.73 683.271 L1583.17 683.271 L1582.61 683.271 L1582.05 683.271 L1581.49 683.271 L1580.93 683.271 L1580.37 683.271 L1579.82 683.271 L1579.26 683.271 L1578.7 683.271 L1578.14 683.271 L1577.58 683.271 L1577.02 683.271 L1576.46 683.271 L1575.9 683.271 L1575.34 683.271 L1574.78 683.271 L1574.22 683.271 L1573.66 683.271 L1573.1 683.271 L1572.55 683.271 L1571.99 683.271 L1571.43 683.271 L1570.87 683.271 L1570.31 683.271 L1569.75 683.271 L1569.19 683.271 L1568.63 683.271 L1568.07 683.271 L1567.51 683.271 L1566.95 683.271 L1566.39 683.271 L1565.83 683.271 L1565.28 683.271 L1564.72 683.271 L1564.16 683.271 L1563.6 683.271 L1563.04 683.271 L1562.48 683.271 L1561.92 683.271 L1561.36 683.271 L1560.8 683.271 L1560.24 683.271 L1559.68 683.271 L1559.12 683.271 L1558.56 683.271 L1558 683.271 L1557.45 683.271 L1556.89 683.271 L1556.33 683.271 L1555.77 683.271 L1555.21 683.271 L1554.65 683.271 L1554.09 683.271 L1553.53 683.271 L1552.97 683.271 L1552.41 683.271 L1551.85 683.271 L1551.29 683.271 L1550.73 683.271 L1550.18 683.271 L1549.62 683.271 L1549.06 683.271 L1548.5 683.271 L1547.94 683.271 L1547.38 683.271 L1546.82 683.271 L1546.26 683.271 L1545.7 683.271 L1545.14 683.271 L1544.58 683.271 L1544.02 683.271 L1543.46 683.271 L1542.9 683.271 L1542.35 683.271 L1541.79 683.271 L1541.23 683.271 L1540.67 683.271 L1540.11 683.271 L1539.55 683.271 L1538.99 683.271 L1538.43 683.271 L1537.87 683.271 L1537.31 683.271 L1536.75 683.271 L1536.19 683.271 L1535.63 683.271 L1535.08 683.271 L1534.52 683.271 L1533.96 683.271 L1533.4 683.271 L1532.84 683.271 L1532.28 683.271 L1531.72 683.271 L1531.16 683.271 L1530.6 683.271 L1530.04 683.271 L1529.48 683.271 L1528.92 683.271 L1528.36 683.271 L1527.81 683.271 L1527.25 683.271 L1526.69 683.271 L1526.13 683.271 L1525.57 683.271 L1525.01 683.271 L1524.45 683.271 L1523.89 683.271 L1523.33 683.271 L1522.77 683.271 L1522.21 683.271 L1521.65 683.271 L1521.09 683.271 L1520.53 683.271 L1519.98 683.271 L1519.42 683.271 L1518.86 683.271 L1518.3 683.271 L1517.74 683.271 L1517.18 683.271 L1516.62 683.271 L1516.06 683.271 L1515.5 683.271 L1514.94 683.271 L1514.38 683.271 L1513.82 683.271 L1513.26 683.271 L1512.71 683.271 L1512.15 683.271 L1511.59 683.271 L1511.03 683.271 L1510.47 683.271 L1509.91 683.271 L1509.35 683.271 L1508.79 683.271 L1508.23 683.271 L1507.67 683.271 L1507.11 683.271 L1506.55 683.271 L1505.99 683.271 L1505.44 683.271 L1504.88 683.271 L1504.32 683.271 L1503.76 683.271 L1503.2 683.271 L1502.64 683.271 L1502.08 683.271 L1501.52 683.271 L1500.96 683.271 L1500.4 683.271 L1499.84 683.271 L1499.28 683.271 L1498.72 683.271 L1498.16 683.271 L1497.61 683.271 L1497.05 683.271 L1496.49 683.271 L1495.93 683.271 L1495.37 683.271 L1494.81 683.271 L1494.25 683.271 L1493.69 683.271 L1493.13 683.271 L1492.57 683.271 L1492.01 683.271 L1491.45 683.271 L1490.89 683.271 L1490.34 683.271 L1489.78 683.271 L1489.22 683.271 L1488.66 683.271 L1488.1 683.271 L1487.54 683.271 L1486.98 683.271 L1486.42 683.271 L1485.86 683.271 L1485.3 683.271 L1484.74 683.271 L1484.18 683.271 L1483.62 683.271 L1483.07 683.271 L1482.51 683.271 L1481.95 683.271 L1481.39 683.271 L1480.83 683.271 L1480.27 683.271 L1479.71 683.271 L1479.15 683.271 L1478.59 683.271 L1478.03 683.271 L1477.47 683.271 L1476.91 683.271 L1476.35 683.271 L1475.79 683.271 L1475.24 683.271 L1474.68 683.271 L1474.12 683.271 L1473.56 683.271 L1473 683.271 L1472.44 683.271 L1471.88 683.271 L1471.32 683.271 L1470.76 683.271 L1470.2 683.271 L1469.64 683.271 L1469.08 683.271 L1468.52 683.271 L1467.97 683.271 L1467.41 683.271 L1466.85 683.271 L1466.29 683.271 L1465.73 683.271 L1465.17 683.271 L1464.61 683.271 L1464.05 683.271 L1463.49 683.271 L1462.93 683.271 L1462.37 683.271 L1461.81 683.271 L1461.25 683.271 L1460.7 683.271 L1460.14 683.271 L1459.58 683.271 L1459.02 683.271 L1458.46 683.271 L1457.9 683.271 L1457.34 683.271 L1456.78 683.271 L1456.22 683.271 L1455.66 683.271 L1455.1 683.271 L1454.54 683.271 L1453.98 683.271 L1453.42 683.271 L1452.87 683.271 L1452.31 683.271 L1451.75 683.271 L1451.19 683.271 L1450.63 683.271 L1450.07 683.271 L1449.51 683.271 L1448.95 683.271 L1448.39 683.271 L1447.83 683.271 L1447.27 683.271 L1446.71 683.271 L1446.15 683.271 L1445.6 683.271 L1445.04 683.271 L1444.48 683.271 L1443.92 683.271 L1443.36 683.271 L1442.8 683.271 L1442.24 683.271 L1441.68 683.271 L1441.12 683.271 L1440.56 683.271 L1440 683.271 L1439.44 683.271 L1438.88 683.271 L1438.33 683.271 L1437.77 683.271 L1437.21 683.271 L1436.65 683.271 L1436.09 683.271 L1435.53 683.271 L1434.97 683.271 L1434.41 683.271 L1433.85 683.271 L1433.29 683.271 L1432.73 683.271 L1432.17 683.271 L1431.61 683.271 L1431.05 683.271 L1430.5 683.271 L1429.94 683.271 L1429.38 683.271 L1428.82 683.271 L1428.26 683.271 L1427.7 683.271 L1427.14 683.271 L1426.58 683.271 L1426.02 683.271 L1425.46 683.271 L1424.9 683.271 L1424.34 683.271 L1423.78 683.271 L1423.23 683.271 L1422.67 683.271 L1422.11 683.271 L1421.55 683.271 L1420.99 683.271 L1420.43 683.271 L1419.87 683.271 L1419.31 683.271 L1418.75 683.271 L1418.19 683.271 L1417.63 683.271 L1417.07 683.271 L1416.51 683.271 L1415.95 683.271 L1415.4 683.271 L1414.84 683.271 L1414.28 683.271 L1413.72 683.271 L1413.16 683.271 L1412.6 683.271 L1412.04 683.271 L1411.48 683.271 L1410.92 683.271 L1410.36 683.271 L1409.8 683.271 L1409.24 683.271 L1408.68 683.271 L1408.13 683.271 L1407.57 683.271 L1407.01 683.271 L1406.45 683.271 L1405.89 683.271 L1405.33 683.271 L1404.77 683.271 L1404.21 683.271 L1403.65 683.271 L1403.09 683.271 L1402.53 683.271 L1401.97 683.271 L1401.41 683.271 L1400.86 683.271 L1400.3 683.271 L1399.74 683.271 L1399.18 683.271 L1398.62 683.271 L1398.06 683.271 L1397.5 683.271 L1396.94 683.271 L1396.38 683.271 L1395.82 683.271 L1395.26 683.271 L1394.7 683.271 L1394.14 683.271 L1393.58 683.271 L1393.03 683.271 L1392.47 683.271 L1391.91 683.271 L1391.35 683.271 L1390.79 683.271 L1390.23 683.271 L1389.67 683.271 L1389.11 683.271 L1388.55 683.271 L1387.99 683.271 L1387.43 683.271 L1386.87 683.271 L1386.31 683.271 L1385.76 683.271 L1385.2 683.271 L1384.64 683.271 L1384.08 683.271 L1383.52 683.271 L1382.96 683.271 L1382.4 683.271 L1381.84 683.271 L1381.28 683.271 L1380.72 683.271 L1380.16 683.271 L1379.6 683.271 L1379.04 683.271 L1378.49 683.271 L1377.93 683.271 L1377.37 683.271 L1376.81 683.271 L1376.25 683.271 L1375.69 683.271 L1375.13 683.271 L1374.57 683.271 L1374.01 683.271 L1373.45 683.271 L1372.89 683.271 L1372.33 683.271 L1371.77 683.271 L1371.21 683.271 L1370.66 683.271 L1370.1 683.271 L1369.54 683.271 L1368.98 683.271 L1368.42 683.271 L1367.86 683.271 L1367.3 683.271 L1366.74 683.271 L1366.18 683.271 L1365.62 683.271 L1365.06 683.271 L1364.5 683.271 L1363.94 683.271 L1363.39 683.271 L1362.83 683.271 L1362.27 683.271 L1361.71 683.271 L1361.15 683.271 L1360.59 683.271 L1360.03 683.271 L1359.47 683.271 L1358.91 683.271 L1358.35 683.271 L1357.79 683.271 L1357.23 683.271 L1356.67 683.271 L1356.12 683.271 L1355.56 683.271 L1355 683.271 L1354.44 683.271 L1353.88 683.271 L1353.32 683.271 L1352.76 683.271 L1352.2 683.271 L1351.64 683.271 L1351.08 683.271 L1350.52 683.271 L1349.96 683.271 L1349.4 683.271 L1348.84 683.271 L1348.29 683.271 L1347.73 683.271 L1347.17 683.271 L1346.61 683.271 L1346.05 683.271 L1345.49 683.271 L1344.93 683.271 L1344.37 683.271 L1343.81 683.271 L1343.25 683.271 L1342.69 683.271 L1342.13 683.271 L1341.57 683.271 L1341.02 683.271 L1340.46 683.271 L1339.9 683.271 L1339.34 683.271 L1338.78 683.271 L1338.22 683.271 L1337.66 683.271 L1337.1 683.271 L1336.54 683.271 L1335.98 683.271 L1335.42 683.271 L1334.86 683.271 L1334.3 683.271 L1333.75 683.271 L1333.19 683.271 L1332.63 683.271 L1332.07 683.271 L1331.51 683.271 L1330.95 683.271 L1330.39 683.271 L1329.83 683.271 L1329.27 683.271 L1328.71 683.271 L1328.15 683.271 L1327.59 683.271 L1327.03 683.271 L1326.47 683.271 L1325.92 683.271 L1325.36 683.271 L1324.8 683.271 L1324.24 683.271 L1323.68 683.271 L1323.12 683.271 L1322.56 683.271 L1322 683.271 L1321.44 683.271 L1320.88 683.271 L1320.32 683.271 L1319.76 683.271 L1319.2 683.271 L1318.65 683.271 L1318.09 683.271 L1317.53 683.271 L1316.97 683.271 L1316.41 683.271 L1315.85 683.271 L1315.29 683.271 L1314.73 683.271 L1314.17 683.271 L1313.61 683.271 L1313.05 683.271 L1312.49 683.271 L1311.93 683.271 L1311.38 683.271 L1310.82 683.271 L1310.26 683.271 L1309.7 683.271 L1309.14 683.271 L1308.58 683.271 L1308.02 683.271 L1307.46 683.271 L1306.9 683.271 L1306.34 683.271 L1305.78 683.271 L1305.22 683.271 L1304.66 683.271 L1304.1 683.271 L1303.55 683.271 L1302.99 683.271 L1302.43 683.271 L1301.87 683.271 L1301.31 683.271 L1300.75 683.271 L1300.19 683.271 L1299.63 683.271 L1299.07 683.271 L1298.51 683.271 L1297.95 683.271 L1297.39 683.271 L1296.83 683.271 L1296.28 683.271 L1295.72 683.271 L1295.16 683.271 L1294.6 683.271 L1294.04 683.271 L1293.48 683.271 L1292.92 683.271 L1292.36 683.271 L1291.8 683.271 L1291.24 683.271 L1290.68 683.271 L1290.12 683.271 L1289.56 683.271 L1289 683.271 L1288.45 683.271 L1287.89 683.271 L1287.33 683.271 L1286.77 683.271 L1286.21 683.271 L1285.65 683.271 L1285.09 683.271 L1284.53 683.271 L1283.97 683.271 L1283.41 683.271 L1282.85 683.271 L1282.29 683.271 L1281.73 683.271 L1281.18 683.271 L1280.62 683.271 L1280.06 683.271 L1279.5 683.271 L1278.94 683.271 L1278.38 683.271 L1277.82 683.271 L1277.26 683.271 L1276.7 683.271 L1276.14 683.271 L1275.58 683.271 L1275.02 683.271 L1274.46 683.271 L1273.91 683.271 L1273.35 683.271 L1272.79 683.271 L1272.23 683.271 L1271.67 683.271 L1271.11 683.271 L1270.55 683.271 L1269.99 683.271 L1269.43 683.271 L1268.87 683.271 L1268.31 683.271 L1267.75 683.271 L1267.19 683.271 L1266.63 683.271 L1266.08 683.271 L1265.52 683.271 L1264.96 683.271 L1264.4 683.271 L1263.84 683.271 L1263.28 683.271 L1262.72 683.271 L1262.16 683.271 L1261.6 683.271 L1261.04 683.271 L1260.48 683.271 L1259.92 683.271 L1259.36 683.271 L1258.81 683.271 L1258.25 683.271 L1257.69 683.271 L1257.13 683.271 L1256.57 683.271 L1256.01 683.271 L1255.45 683.271 L1254.89 683.271 L1254.33 683.271 L1253.77 683.271 L1253.21 683.271 L1252.65 683.271 L1252.09 683.271 L1251.54 683.271 L1250.98 683.271 L1250.42 683.271 L1249.86 683.271 L1249.3 683.271 L1248.74 683.271 L1248.18 683.271 L1247.62 683.271 L1247.06 683.271 L1246.5 683.271 L1245.94 683.271 L1245.38 683.271 L1244.82 683.271 L1244.26 683.271 L1243.71 683.271 L1243.15 683.271 L1242.59 683.271 L1242.03 683.271 L1241.47 683.271 L1240.91 683.271 L1240.35 683.271 L1239.79 683.271 L1239.23 683.271 L1238.67 683.271 L1238.11 683.271 L1237.55 683.271 L1236.99 683.271 L1236.44 683.271 L1235.88 683.271 L1235.32 683.271 L1234.76 683.271 L1234.2 683.271 L1233.64 683.271 L1233.08 683.271 L1232.52 683.271 L1231.96 683.271 L1231.4 683.271 L1230.84 683.271 L1230.28 683.271 L1229.72 683.271 L1229.17 683.271 L1228.61 683.271 L1228.05 683.271 L1227.49 683.271 L1226.93 683.271 L1226.37 683.271 L1225.81 683.271 L1225.25 683.271 L1224.69 683.271 L1224.13 683.271 L1223.57 683.271 L1223.01 683.271 L1222.45 683.271 L1221.89 683.271 L1221.34 683.271 L1220.78 683.271 L1220.22 683.271 L1219.66 683.271 L1219.1 683.271 L1218.54 683.271 L1217.98 683.271 L1217.42 683.271 L1216.86 683.271 L1216.3 683.271 L1215.74 683.271 L1215.18 683.271 L1214.62 683.271 L1214.07 683.271 L1213.51 683.271 L1212.95 683.271 L1212.39 683.271 L1211.83 683.271 L1211.27 683.271 L1210.71 683.271 L1210.15 683.271 L1209.59 683.271 L1209.03 683.271 L1208.47 683.271 L1207.91 683.271 L1207.35 683.271 L1206.8 683.271 L1206.24 683.271 L1205.68 683.271 L1205.12 683.271 L1204.56 683.271 L1204 683.271 L1203.44 683.271 L1202.88 683.271 L1202.32 683.271 L1201.76 683.271 L1201.2 683.271 L1200.64 683.271 L1200.08 683.271 L1199.52 683.271 L1198.97 683.271 L1198.41 683.271 L1197.85 683.271 L1197.29 683.271 L1196.73 683.271 L1196.17 683.271 L1195.61 683.271 L1195.05 683.271 L1194.49 683.271 L1193.93 683.271 L1193.37 683.271 L1192.81 683.271 L1192.25 683.271 L1191.7 683.271 L1191.14 683.271 L1190.58 683.271 L1190.02 683.271 L1189.46 683.271 L1188.9 683.271 L1188.34 683.271 L1187.78 683.271 L1187.22 683.271 L1186.66 683.271 L1186.1 683.271 L1185.54 683.271 L1184.98 683.271 L1184.43 683.271 L1183.87 683.271 L1183.31 683.271 L1182.75 683.271 L1182.19 683.271 L1181.63 683.271 L1181.07 683.271 L1180.51 683.271 L1179.95 683.271 L1179.39 683.271 L1178.83 683.271 L1178.27 683.271 L1177.71 683.271 L1177.15 683.271 L1176.6 683.271 L1176.04 683.271 L1175.48 683.271 L1174.92 683.271 L1174.36 683.271 L1173.8 683.271 L1173.24 683.271 L1172.68 683.271 L1172.12 683.271 L1171.56 683.271 L1171 683.271 L1170.44 683.271 L1169.88 683.271 L1169.33 683.271 L1168.77 683.271 L1168.21 683.271 L1167.65 683.271 L1167.09 683.271 L1166.53 683.271 L1165.97 683.271 L1165.41 683.271 L1164.85 683.271 L1164.29 683.271 L1163.73 683.271 L1163.17 683.271 L1162.61 683.271 L1162.05 683.271 L1161.5 683.271 L1160.94 683.271 L1160.38 683.271 L1159.82 683.271 L1159.26 683.271 L1158.7 683.271 L1158.14 683.271 L1157.58 683.271 L1157.02 683.271 L1156.46 683.271 L1155.9 683.271 L1155.34 683.271 L1154.78 683.271 L1154.23 683.271 L1153.67 683.271 L1153.11 683.271 L1152.55 683.271 L1151.99 683.271 L1151.43 683.271 L1150.87 683.271 L1150.31 683.271 L1149.75 683.271 L1149.19 683.271 L1148.63 683.271 L1148.07 683.271 L1147.51 683.271 L1146.96 683.271 L1146.4 683.271 L1145.84 683.271 L1145.28 683.271 L1144.72 683.271 L1144.16 683.271 L1143.6 683.271 L1143.04 683.271 L1142.48 683.271 L1141.92 683.271 L1141.36 683.271 L1140.8 683.271 L1140.24 683.271 L1139.68 683.271 L1139.13 683.271 L1138.57 683.271 L1138.01 683.271 L1137.45 683.271 L1136.89 683.271 L1136.33 683.271 L1135.77 683.271 L1135.21 683.271 L1134.65 683.271 L1134.09 683.271 L1133.53 683.271 L1132.97 683.271 L1132.41 683.271 L1131.86 683.271 L1131.3 683.271 L1130.74 683.271 L1130.18 683.271 L1129.62 683.271 L1129.06 683.271 L1128.5 683.271 L1127.94 683.271 L1127.38 683.271 L1126.82 683.271 L1126.26 683.271 L1125.7 683.271 L1125.14 683.271 L1124.59 683.271 L1124.03 683.271 L1123.47 683.271 L1122.91 683.271 L1122.35 683.271 L1121.79 683.271 L1121.23 683.271 L1120.67 683.271 L1120.11 683.271 L1119.55 683.271 L1118.99 683.271 L1118.43 683.271 L1117.87 683.271 L1117.31 683.271 L1116.76 683.271 L1116.2 683.271 L1115.64 683.271 L1115.08 683.271 L1114.52 683.271 L1113.96 683.271 L1113.4 683.271 L1112.84 683.271 L1112.28 683.271 L1111.72 683.271 L1111.16 683.271 L1110.6 683.271 L1110.04 683.271 L1109.49 683.271 L1108.93 683.271 L1108.37 683.271 L1107.81 683.271 L1107.25 683.271 L1106.69 683.271 L1106.13 683.271 L1105.57 683.271 L1105.01 683.271 L1104.45 683.271 L1103.89 683.271 L1103.33 683.271 L1102.77 683.271 L1102.22 683.271 L1101.66 683.271 L1101.1 683.271 L1100.54 683.271 L1099.98 683.271 L1099.42 683.271 L1098.86 683.271 L1098.3 683.271 L1097.74 683.271 L1097.18 683.271 L1096.62 683.271 L1096.06 683.271 L1095.5 683.271 L1094.94 683.271 L1094.39 683.271 L1093.83 683.271 L1093.27 683.271 L1092.71 683.271 L1092.15 683.271 L1091.59 683.271 L1091.03 683.271 L1090.47 683.271 L1089.91 683.271 L1089.35 683.271 L1088.79 683.271 L1088.23 683.271 L1087.67 683.271 L1087.12 683.271 L1086.56 683.271 L1086 683.271 L1085.44 683.271 L1084.88 683.271 L1084.32 683.271 L1083.76 683.271 L1083.2 683.271 L1082.64 683.271 L1082.08 683.271 L1081.52 683.271 L1080.96 683.271 L1080.4 683.271 L1079.85 683.271 L1079.29 683.271 L1078.73 683.271 L1078.17 683.271 L1077.61 683.271 L1077.05 683.271 L1076.49 683.271 L1075.93 683.271 L1075.37 683.271 L1074.81 683.271 L1074.25 683.271 L1073.69 683.271 L1073.13 683.271 L1072.57 683.271 L1072.02 683.271 L1071.46 683.271 L1070.9 683.271 L1070.34 683.271 L1069.78 683.271 L1069.22 683.271 L1068.66 683.271 L1068.1 683.271 L1067.54 683.271 L1066.98 683.271 L1066.42 683.271 L1065.86 683.271 L1065.3 683.271 L1064.75 683.271 L1064.19 683.271 L1063.63 683.271 L1063.07 683.271 L1062.51 683.271 L1061.95 683.271 L1061.39 683.271 L1060.83 683.271 L1060.27 683.271 L1059.71 683.271 L1059.15 683.271 L1058.59 683.271 L1058.03 683.271 L1057.48 683.271 L1056.92 683.271 L1056.36 683.271 L1055.8 683.271 L1055.24 683.271 L1054.68 683.271 L1054.12 683.271 L1053.56 683.271 L1053 683.271 L1052.44 683.271 L1051.88 683.271 L1051.32 683.271 L1050.76 683.271 L1050.2 683.271 L1049.65 683.271 L1049.09 683.271 L1048.53 683.271 L1047.97 683.271 L1047.41 683.271 L1046.85 683.271 L1046.29 683.271 L1045.73 683.271 L1045.17 683.271 L1044.61 683.271 L1044.05 683.271 L1043.49 683.271 L1042.93 683.271 L1042.38 683.271 L1041.82 683.271 L1041.26 683.271 L1040.7 683.271 L1040.14 683.271 L1039.58 683.271 L1039.02 683.271 L1038.46 683.271 L1037.9 683.271 L1037.34 683.271 L1036.78 683.271 L1036.22 683.271 L1035.66 683.271 L1035.1 683.271 L1034.55 683.271 L1033.99 683.271 L1033.43 683.271 L1032.87 683.271 L1032.31 683.271 L1031.75 683.271 L1031.19 683.271 L1030.63 683.271 L1030.07 683.271 L1029.51 683.271 L1028.95 683.271 L1028.39 683.271 L1027.83 683.271 L1027.28 683.271 L1026.72 683.271 L1026.16 683.271 L1025.6 683.271 L1025.04 683.271 L1024.48 683.271 L1023.92 683.271 L1023.36 683.271 L1022.8 683.271 L1022.24 683.271 L1021.68 683.271 L1021.12 683.271 L1020.56 683.271 L1020.01 683.271 L1019.45 683.271 L1018.89 683.271 L1018.33 683.271 L1017.77 683.271 L1017.21 683.271 L1016.65 683.271 L1016.09 683.271 L1015.53 683.271 L1014.97 683.271 L1014.41 683.271 L1013.85 683.271 L1013.29 683.271 L1012.73 683.271 L1012.18 683.271 L1011.62 683.271 L1011.06 683.271 L1010.5 683.271 L1009.94 683.271 L1009.38 683.271 L1008.82 683.271 L1008.26 683.271 L1007.7 683.271 L1007.14 683.271 L1006.58 683.271 L1006.02 683.271 L1005.46 683.271 L1004.91 683.271 L1004.35 683.271 L1003.79 683.271 L1003.23 683.271 L1002.67 683.271 L1002.11 683.271 L1001.55 683.271 L1000.99 683.271 L1000.43 683.271 L999.872 683.271 L999.313 683.271 L998.754 683.271 L998.194 683.271 L997.635 683.271 L997.076 683.271 L996.517 683.271 L995.957 683.271 L995.398 683.271 L994.839 683.271 L994.28 683.271 L993.72 683.271 L993.161 683.271 L992.602 683.271 L992.043 683.271 L991.483 683.271 L990.924 683.271 L990.365 683.271 L989.806 683.271 L989.246 683.271 L988.687 683.271 L988.128 683.271 L987.569 683.271 L987.009 683.271 L986.45 683.271 L985.891 683.271 L985.332 683.271 L984.772 683.271 L984.213 683.271 L983.654 683.271 L983.095 683.271 L982.535 683.271 L981.976 683.271 L981.417 683.271 L980.858 683.271 L980.298 683.271 L979.739 683.271 L979.18 683.271 L978.621 683.271 L978.061 683.271 L977.502 683.271 L976.943 683.271 L976.384 683.271 L975.824 683.271 L975.265 683.271 L974.706 683.271 L974.147 683.271 L973.587 683.271 L973.028 683.271 L972.469 683.271 L971.91 683.271 L971.35 683.271 L970.791 683.271 L970.232 683.271 L969.673 683.271 L969.113 683.271 L968.554 683.271 L967.995 683.271 L967.436 683.271 L966.876 683.271 L966.317 683.271 L965.758 683.271 L965.199 683.271 L964.639 683.271 L964.08 683.271 L963.521 683.271 L962.962 683.271 L962.402 683.271 L961.843 683.271 L961.284 683.271 L960.725 683.271 L960.165 683.271 L959.606 683.271 L959.047 683.271 L958.488 683.271 L957.928 683.271 L957.369 683.271 L956.81 683.271 L956.251 683.271 L955.691 683.271 L955.132 683.271 L954.573 683.271 L954.014 683.271 L953.454 683.271 L952.895 683.271 L952.336 683.271 L951.777 683.271 L951.217 683.271 L950.658 683.271 L950.099 683.271 L949.54 683.271 L948.98 683.271 L948.421 683.271 L947.862 683.271 L947.303 683.271 L946.743 683.271 L946.184 683.271 L945.625 683.271 L945.066 683.271 L944.506 683.271 L943.947 683.271 L943.388 683.271 L942.829 683.271 L942.269 683.271 L941.71 683.271 L941.151 683.271 L940.592 683.271 L940.032 683.271 L939.473 683.271 L938.914 683.271 L938.355 683.271 L937.795 683.271 L937.236 683.271 L936.677 683.271 L936.118 683.271 L935.558 683.271 L934.999 683.271 L934.44 683.271 L933.881 683.271 L933.321 683.271 L932.762 683.271 L932.203 683.271 L931.644 683.271 L931.084 683.271 L930.525 683.271 L929.966 683.271 L929.406 683.271 L928.847 683.271 L928.288 683.271 L927.729 683.271 L927.169 683.271 L926.61 683.271 L926.051 683.271 L925.492 683.271 L924.932 683.271 L924.373 683.271 L923.814 683.271 L923.255 683.271 L922.695 683.271 L922.136 683.271 L921.577 683.271 L921.018 683.271 L920.458 683.271 L919.899 683.271 L919.34 683.271 L918.781 683.271 L918.221 683.271 L917.662 683.271 L917.103 683.271 L916.544 683.271 L915.984 683.271 L915.425 683.271 L914.866 683.271 L914.307 683.271 L913.747 683.271 L913.188 683.271 L912.629 683.271 L912.07 683.271 L911.51 683.271 L910.951 683.271 L910.392 683.271 L909.833 683.271 L909.273 683.271 L908.714 683.271 L908.155 683.271 L907.596 683.271 L907.036 683.271 L906.477 683.271 L905.918 683.271 L905.359 683.271 L904.799 683.271 L904.24 683.271 L903.681 683.271 L903.122 683.271 L902.562 683.271 L902.003 683.271 L901.444 683.271 L900.885 683.271 L900.325 683.271 L899.766 683.271 L899.207 683.271 L898.648 683.271 L898.088 683.271 L897.529 683.271 L896.97 683.271 L896.411 683.271 L895.851 683.271 L895.292 683.271 L894.733 683.271 L894.174 683.271 L893.614 683.271 L893.055 683.271 L892.496 683.271 L891.937 683.271 L891.377 683.271 L890.818 683.271 L890.259 683.271 L889.7 683.271 L889.14 683.271 L888.581 683.271 L888.022 683.271 L887.463 683.271 L886.903 683.271 L886.344 683.271 L885.785 683.271 L885.226 683.271 L884.666 683.271 L884.107 683.271 L883.548 683.271 L882.989 683.271 L882.429 683.271 L881.87 683.271 L881.311 683.271 L880.752 683.271 L880.192 683.271 L879.633 683.271 L879.074 683.271 L878.515 683.271 L877.955 683.271 L877.396 683.271 L876.837 683.271 L876.278 683.271 L875.718 683.271 L875.159 683.271 L874.6 683.271 L874.041 683.271 L873.481 683.271 L872.922 683.271 L872.363 683.271 L871.804 683.271 L871.244 683.271 L870.685 683.271 L870.126 683.271 L869.567 683.271 L869.007 683.271 L868.448 683.271 L867.889 683.271 L867.33 683.271 L866.77 683.271 L866.211 683.271 L865.652 683.271 L865.093 683.271 L864.533 683.271 L863.974 683.271 L863.415 683.271 L862.856 683.271 L862.296 683.271 L861.737 683.271 L861.178 683.271 L860.619 683.271 L860.059 683.271 L859.5 683.271 L858.941 683.271 L858.382 683.271 L857.822 683.271 L857.263 683.271 L856.704 683.271 L856.145 683.271 L855.585 683.271 L855.026 683.271 L854.467 683.271 L853.908 683.271 L853.348 683.271 L852.789 683.271 L852.23 683.271 L851.671 683.271 L851.111 683.271 L850.552 683.271 L849.993 683.271 L849.434 683.271 L848.874 683.271 L848.315 683.271 L847.756 683.271 L847.197 683.271 L846.637 683.271 L846.078 683.271 L845.519 683.271 L844.96 683.271 L844.4 683.271 L843.841 683.271 L843.282 683.271 L842.723 683.271 L842.163 683.271 L841.604 683.271 L841.045 683.271 L840.486 683.271 L839.926 683.271 L839.367 683.271 L838.808 683.271 L838.249 683.271 L837.689 683.271 L837.13 683.271 L836.571 683.271 L836.012 683.271 L835.452 683.271 L834.893 683.271 L834.334 683.271 L833.775 683.271 L833.215 683.271 L832.656 683.271 L832.097 683.271 L831.538 683.271 L830.978 683.271 L830.419 683.271 L829.86 683.271 L829.301 683.271 L828.741 683.271 L828.182 683.271 L827.623 683.271 L827.064 683.271 L826.504 683.271 L825.945 683.271 L825.386 683.271 L824.827 683.271 L824.267 683.271 L823.708 683.271 L823.149 683.271 L822.59 683.271 L822.03 683.271 L821.471 683.271 L820.912 683.271 L820.353 683.271 L819.793 683.271 L819.234 683.271 L818.675 683.271 L818.116 683.271 L817.556 683.271 L816.997 683.271 L816.438 683.271 L815.879 683.271 L815.319 683.271 L814.76 683.271 L814.201 683.271 L813.642 683.271 L813.082 683.271 L812.523 683.271 L811.964 683.271 L811.405 683.271 L810.845 683.271 L810.286 683.271 L809.727 683.271 L809.168 683.271 L808.608 683.271 L808.049 683.271 L807.49 683.271 L806.931 683.271 L806.371 683.271 L805.812 683.271 L805.253 683.271 L804.693 683.271 L804.134 683.271 L803.575 683.271 L803.016 683.271 L802.456 683.271 L801.897 683.271 L801.338 683.271 L800.779 683.271 L800.219 683.271 L799.66 683.271 L799.101 683.271 L798.542 683.271 L797.982 683.271 L797.423 683.271 L796.864 683.271 L796.305 683.271 L795.745 683.271 L795.186 683.271 L794.627 683.271 L794.068 683.271 L793.508 683.271 L792.949 683.271 L792.39 683.271 L791.831 683.271 L791.271 683.271 L790.712 683.271 L790.153 683.271 L789.594 683.271 L789.034 683.271 L788.475 683.271 L787.916 683.271 L787.357 683.271 L786.797 683.271 L786.238 683.271 L785.679 683.271 L785.12 683.271 L784.56 683.271 L784.001 683.271 L783.442 683.271 L782.883 683.271 L782.323 683.271 L781.764 683.271 L781.205 683.271 L780.646 683.271 L780.086 683.271 L779.527 683.271 L778.968 683.271 L778.409 683.271 L777.849 683.271 L777.29 683.271 L776.731 683.271 L776.172 683.271 L775.612 683.271 L775.053 683.271 L774.494 683.271 L773.935 683.271 L773.375 683.271 L772.816 683.271 L772.257 683.271 L771.698 683.271 L771.138 683.271 L770.579 683.271 L770.02 683.271 L769.461 683.271 L768.901 683.271 L768.342 683.271 L767.783 683.271 L767.224 683.271 L766.664 683.271 L766.105 683.271 L765.546 683.271 L764.987 683.271 L764.427 683.271 L763.868 683.271 L763.309 683.271 L762.75 683.271 L762.19 683.271 L761.631 683.271 L761.072 683.271 L760.513 683.271 L759.953 683.271 L759.394 683.271 L758.835 683.271 L758.276 683.271 L757.716 683.271 L757.157 683.271 L756.598 683.271 L756.039 683.271 L755.479 683.271 L754.92 683.271 L754.361 683.271 L753.802 683.271 L753.242 683.271 L752.683 683.271 L752.124 683.271 L751.565 683.271 L751.005 683.271 L750.446 683.271 L749.887 683.271 L749.328 683.271 L748.768 683.271 L748.209 683.271 L747.65 683.271 L747.091 683.271 L746.531 683.271 L745.972 683.271 L745.413 683.271 L744.854 683.271 L744.294 683.271 L743.735 683.271 L743.176 683.271 L742.617 683.271 L742.057 683.271 L741.498 683.271 L740.939 683.271 L740.38 683.271 L739.82 683.271 L739.261 683.271 L738.702 683.271 L738.143 683.271 L737.583 683.271 L737.024 683.271 L736.465 683.271 L735.906 683.271 L735.346 683.271 L734.787 683.271 L734.228 683.271 L733.669 683.271 L733.109 683.271 L732.55 683.271 L731.991 683.271 L731.432 683.271 L730.872 683.271 L730.313 683.271 L729.754 683.271 L729.195 683.271 L728.635 683.271 L728.076 683.271 L727.517 683.271 L726.958 683.271 L726.398 683.271 L725.839 683.271 L725.28 683.271 L724.721 683.271 L724.161 683.271 L723.602 683.271 L723.043 683.271 L722.484 683.271 L721.924 683.271 L721.365 683.271 L720.806 683.271 L720.247 683.271  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.993 720.806,683.993 721.365,683.993 721.924,683.993 722.484,683.993 723.043,683.993 723.602,683.993 724.161,683.993 724.721,683.993 725.28,683.993 725.839,683.993 726.398,683.993 726.958,683.993 727.517,683.993 728.076,683.993 728.635,683.993 729.195,683.993 729.754,683.993 730.313,683.993 730.872,683.993 731.432,683.993 731.991,683.993 732.55,683.993 733.109,683.993 733.669,683.993 734.228,683.993 734.787,683.993 735.346,683.993 735.906,683.993 736.465,683.993 737.024,683.993 737.583,683.993 738.143,683.993 738.702,683.993 739.261,683.993 739.82,683.993 740.38,683.993 740.939,683.993 741.498,683.993 742.057,683.993 742.617,683.993 743.176,683.993 743.735,683.993 744.294,683.993 744.854,683.993 745.413,683.993 745.972,683.993 746.531,683.993 747.091,683.993 747.65,683.993 748.209,683.993 748.768,683.993 749.328,683.993 749.887,683.993 750.446,683.993 751.005,683.993 751.565,683.993 752.124,683.993 752.683,683.993 753.242,683.993 753.802,683.993 754.361,683.993 754.92,683.993 755.479,683.993 756.039,683.993 756.598,683.993 757.157,683.993 757.716,683.993 758.276,683.993 758.835,683.993 759.394,683.993 759.953,683.993 760.513,683.993 761.072,683.993 761.631,683.993 762.19,683.993 762.75,683.993 763.309,683.993 763.868,683.993 764.427,683.993 764.987,683.993 765.546,683.993 766.105,683.993 766.664,683.993 767.224,683.993 767.783,683.993 768.342,683.993 768.901,683.993 769.461,683.993 770.02,683.993 770.579,683.993 771.138,683.993 771.698,683.993 772.257,683.993 772.816,683.993 773.375,683.993 773.935,683.993 774.494,683.993 775.053,683.993 775.612,683.993 776.172,683.993 776.731,683.993 777.29,683.993 777.849,683.993 778.409,683.993 778.968,683.993 779.527,683.993 780.086,683.993 780.646,683.993 781.205,683.993 781.764,683.993 782.323,683.993 782.883,683.993 783.442,683.993 784.001,683.993 784.56,683.993 785.12,683.993 785.679,683.993 786.238,683.993 786.797,683.993 787.357,683.993 787.916,683.993 788.475,683.993 789.034,683.993 789.594,683.993 790.153,683.993 790.712,683.993 791.271,683.993 791.831,683.993 792.39,683.993 792.949,683.993 793.508,683.993 794.068,683.993 794.627,683.993 795.186,683.993 795.745,683.993 796.305,683.993 796.864,683.993 797.423,683.993 797.982,683.993 798.542,683.993 799.101,683.993 799.66,683.993 800.219,683.993 800.779,683.993 801.338,683.993 801.897,683.993 802.456,683.993 803.016,683.993 803.575,683.993 804.134,683.993 804.693,683.993 805.253,683.993 805.812,683.993 806.371,683.993 806.931,683.993 807.49,683.993 808.049,683.993 808.608,683.993 809.168,683.993 809.727,683.993 810.286,683.993 810.845,683.993 811.405,683.993 811.964,683.993 812.523,683.993 813.082,683.993 813.642,683.993 814.201,683.993 814.76,683.993 815.319,683.993 815.879,683.993 816.438,683.993 816.997,683.993 817.556,683.993 818.116,683.993 818.675,683.993 819.234,683.993 819.793,683.993 820.353,683.993 820.912,683.993 821.471,683.993 822.03,683.993 822.59,683.993 823.149,683.993 823.708,683.993 824.267,683.993 824.827,683.993 825.386,683.993 825.945,683.993 826.504,683.993 827.064,683.993 827.623,683.993 828.182,683.993 828.741,683.993 829.301,683.993 829.86,683.993 830.419,683.993 830.978,683.993 831.538,683.993 832.097,683.993 832.656,683.993 833.215,683.993 833.775,683.993 834.334,683.993 834.893,683.993 835.452,683.993 836.012,683.993 836.571,683.993 837.13,683.993 837.689,683.993 838.249,683.993 838.808,683.993 839.367,683.993 839.926,683.993 840.486,683.993 841.045,683.993 841.604,683.993 842.163,683.993 842.723,683.993 843.282,683.993 843.841,683.993 844.4,683.993 844.96,683.993 845.519,683.993 846.078,683.993 846.637,683.993 847.197,683.993 847.756,683.993 848.315,683.993 848.874,683.993 849.434,683.993 849.993,683.993 850.552,683.993 851.111,683.993 851.671,683.993 852.23,683.993 852.789,683.993 853.348,683.993 853.908,683.993 854.467,683.993 855.026,683.993 855.585,683.993 856.145,683.993 856.704,683.993 857.263,683.993 857.822,683.993 858.382,683.993 858.941,683.993 859.5,683.993 860.059,683.993 860.619,683.993 861.178,683.993 861.737,683.993 862.296,683.993 862.856,683.993 863.415,683.993 863.974,683.993 864.533,683.993 865.093,683.993 865.652,683.993 866.211,683.993 866.77,683.993 867.33,683.993 867.889,683.993 868.448,683.993 869.007,683.993 869.567,683.993 870.126,683.993 870.685,683.993 871.244,683.993 871.804,683.993 872.363,683.993 872.922,683.993 873.481,683.993 874.041,683.993 874.6,683.993 875.159,683.993 875.718,683.993 876.278,683.993 876.837,683.993 877.396,683.993 877.955,683.993 878.515,683.993 879.074,683.993 879.633,683.993 880.192,683.993 880.752,683.993 881.311,683.993 881.87,683.993 882.429,683.993 882.989,683.993 883.548,683.993 884.107,683.993 884.666,683.993 885.226,683.993 885.785,683.993 886.344,683.993 886.903,683.993 887.463,683.993 888.022,683.993 888.581,683.993 889.14,683.993 889.7,683.993 890.259,683.993 890.818,683.993 891.377,683.993 891.937,683.993 892.496,683.993 893.055,683.993 893.614,683.993 894.174,683.993 894.733,683.993 895.292,683.993 895.851,683.993 896.411,683.993 896.97,683.993 897.529,683.993 898.088,683.993 898.648,683.993 899.207,683.993 899.766,683.993 900.325,683.993 900.885,683.993 901.444,683.993 902.003,683.993 902.562,683.993 903.122,683.993 903.681,683.993 904.24,683.993 904.799,683.993 905.359,683.993 905.918,683.993 906.477,683.993 907.036,683.993 907.596,683.993 908.155,683.993 908.714,683.993 909.273,683.993 909.833,683.993 910.392,683.993 910.951,683.993 911.51,683.993 912.07,683.993 912.629,683.993 913.188,683.993 913.747,683.993 914.307,683.993 914.866,683.993 915.425,683.993 915.984,683.993 916.544,683.993 917.103,683.993 917.662,683.993 918.221,683.993 918.781,683.993 919.34,683.993 919.899,683.993 920.458,683.993 921.018,683.993 921.577,683.993 922.136,683.993 922.695,683.993 923.255,683.993 923.814,683.993 924.373,683.993 924.932,683.993 925.492,683.993 926.051,683.993 926.61,683.993 927.169,683.993 927.729,683.993 928.288,683.993 928.847,683.993 929.406,683.993 929.966,683.993 930.525,683.993 931.084,683.993 931.644,683.993 932.203,683.993 932.762,683.993 933.321,683.993 933.881,683.993 934.44,683.993 934.999,683.993 935.558,683.993 936.118,683.993 936.677,683.993 937.236,683.993 937.795,683.993 938.355,683.993 938.914,683.993 939.473,683.993 940.032,683.993 940.592,683.993 941.151,683.993 941.71,683.993 942.269,683.993 942.829,683.993 943.388,683.993 943.947,683.993 944.506,683.993 945.066,683.993 945.625,683.993 946.184,683.993 946.743,683.993 947.303,683.993 947.862,683.993 948.421,683.993 948.98,683.993 949.54,683.993 950.099,683.993 950.658,683.993 951.217,683.993 951.777,683.993 952.336,683.993 952.895,683.993 953.454,683.993 954.014,683.993 954.573,683.993 955.132,683.993 955.691,683.993 956.251,683.993 956.81,683.993 957.369,683.993 957.928,683.993 958.488,683.993 959.047,683.993 959.606,683.993 960.165,683.993 960.725,683.993 961.284,683.993 961.843,683.993 962.402,683.993 962.962,683.993 963.521,683.993 964.08,683.993 964.639,683.993 965.199,683.993 965.758,683.993 966.317,683.993 966.876,683.993 967.436,683.993 967.995,683.993 968.554,683.993 969.113,683.993 969.673,683.993 970.232,683.993 970.791,683.993 971.35,683.993 971.91,683.993 972.469,683.993 973.028,683.993 973.587,683.993 974.147,683.993 974.706,683.993 975.265,683.993 975.824,683.993 976.384,683.993 976.943,683.993 977.502,683.993 978.061,683.993 978.621,683.993 979.18,683.993 979.739,683.993 980.298,683.993 980.858,683.993 981.417,683.993 981.976,683.993 982.535,683.993 983.095,683.993 983.654,683.993 984.213,683.993 984.772,683.993 985.332,683.993 985.891,683.993 986.45,683.993 987.009,683.993 987.569,683.993 988.128,683.993 988.687,683.993 989.246,683.993 989.806,683.993 990.365,683.993 990.924,683.993 991.483,683.993 992.043,683.993 992.602,683.993 993.161,683.993 993.72,683.993 994.28,683.993 994.839,683.993 995.398,683.993 995.957,683.993 996.517,683.993 997.076,683.993 997.635,683.993 998.194,683.993 998.754,683.993 999.313,683.993 999.872,683.993 1000.43,683.993 1000.99,683.993 1001.55,683.993 1002.11,683.993 1002.67,683.993 1003.23,683.993 1003.79,683.993 1004.35,683.993 1004.91,683.993 1005.46,683.993 1006.02,683.993 1006.58,683.993 1007.14,683.993 1007.7,683.993 1008.26,683.993 1008.82,683.993 1009.38,683.993 1009.94,683.993 1010.5,683.993 1011.06,683.993 1011.62,683.993 1012.18,683.993 1012.73,683.993 1013.29,683.993 1013.85,683.993 1014.41,683.993 1014.97,683.993 1015.53,683.993 1016.09,683.993 1016.65,683.993 1017.21,683.993 1017.77,683.993 1018.33,683.993 1018.89,683.993 1019.45,683.993 1020.01,683.993 1020.56,683.993 1021.12,683.993 1021.68,683.993 1022.24,683.993 1022.8,683.993 1023.36,683.993 1023.92,683.993 1024.48,683.993 1025.04,683.993 1025.6,683.993 1026.16,683.993 1026.72,683.993 1027.28,683.993 1027.83,683.993 1028.39,683.993 1028.95,683.993 1029.51,683.993 1030.07,683.993 1030.63,683.993 1031.19,683.993 1031.75,683.993 1032.31,683.993 1032.87,683.993 1033.43,683.993 1033.99,683.993 1034.55,683.993 1035.1,683.993 1035.66,683.993 1036.22,683.993 1036.78,683.993 1037.34,683.993 1037.9,683.993 1038.46,683.993 1039.02,683.993 1039.58,683.993 1040.14,683.993 1040.7,683.993 1041.26,683.993 1041.82,683.993 1042.38,683.993 1042.93,683.993 1043.49,683.993 1044.05,683.993 1044.61,683.993 1045.17,683.993 1045.73,683.993 1046.29,683.993 1046.85,683.993 1047.41,683.993 1047.97,683.993 1048.53,683.993 1049.09,683.993 1049.65,683.993 1050.2,683.993 1050.76,683.993 1051.32,683.993 1051.88,683.993 1052.44,683.993 1053,683.993 1053.56,683.993 1054.12,683.993 1054.68,683.993 1055.24,683.993 1055.8,683.993 1056.36,683.993 1056.92,683.993 1057.48,683.993 1058.03,683.993 1058.59,683.993 1059.15,683.993 1059.71,683.993 1060.27,683.993 1060.83,683.993 1061.39,683.993 1061.95,683.993 1062.51,683.993 1063.07,683.993 1063.63,683.993 1064.19,683.993 1064.75,683.993 1065.3,683.993 1065.86,683.993 1066.42,683.993 1066.98,683.993 1067.54,683.993 1068.1,683.993 1068.66,683.993 1069.22,683.993 1069.78,683.993 1070.34,683.993 1070.9,683.993 1071.46,683.993 1072.02,683.993 1072.57,683.993 1073.13,683.993 1073.69,683.993 1074.25,683.993 1074.81,683.993 1075.37,683.993 1075.93,683.993 1076.49,683.993 1077.05,683.993 1077.61,683.993 1078.17,683.993 1078.73,683.993 1079.29,683.993 1079.85,683.993 1080.4,683.993 1080.96,683.993 1081.52,683.993 1082.08,683.993 1082.64,683.993 1083.2,683.993 1083.76,683.993 1084.32,683.993 1084.88,683.993 1085.44,683.993 1086,683.993 1086.56,683.993 1087.12,683.993 1087.67,683.993 1088.23,683.993 1088.79,683.993 1089.35,683.993 1089.91,683.993 1090.47,683.993 1091.03,683.993 1091.59,683.993 1092.15,683.993 1092.71,683.993 1093.27,683.993 1093.83,683.993 1094.39,683.993 1094.94,683.993 1095.5,683.993 1096.06,683.993 1096.62,683.993 1097.18,683.993 1097.74,683.993 1098.3,683.993 1098.86,683.993 1099.42,683.993 1099.98,683.993 1100.54,683.993 1101.1,683.993 1101.66,683.993 1102.22,683.993 1102.77,683.993 1103.33,683.993 1103.89,683.993 1104.45,683.993 1105.01,683.993 1105.57,683.993 1106.13,683.993 1106.69,683.993 1107.25,683.993 1107.81,683.993 1108.37,683.993 1108.93,683.993 1109.49,683.993 1110.04,683.993 1110.6,683.993 1111.16,683.993 1111.72,683.993 1112.28,683.993 1112.84,683.993 1113.4,683.993 1113.96,683.993 1114.52,683.993 1115.08,683.993 1115.64,683.993 1116.2,683.993 1116.76,683.993 1117.31,683.993 1117.87,683.993 1118.43,683.993 1118.99,683.993 1119.55,683.993 1120.11,683.993 1120.67,683.993 1121.23,683.993 1121.79,683.993 1122.35,683.993 1122.91,683.993 1123.47,683.993 1124.03,683.993 1124.59,683.993 1125.14,683.993 1125.7,683.993 1126.26,683.993 1126.82,683.993 1127.38,683.993 1127.94,683.993 1128.5,683.993 1129.06,683.993 1129.62,683.993 1130.18,683.993 1130.74,683.993 1131.3,683.993 1131.86,683.993 1132.41,683.993 1132.97,683.993 1133.53,683.993 1134.09,683.993 1134.65,683.993 1135.21,683.993 1135.77,683.993 1136.33,683.993 1136.89,683.993 1137.45,683.993 1138.01,683.993 1138.57,683.993 1139.13,683.993 1139.68,683.993 1140.24,683.993 1140.8,683.993 1141.36,683.993 1141.92,683.993 1142.48,683.993 1143.04,683.993 1143.6,683.993 1144.16,683.993 1144.72,683.993 1145.28,683.993 1145.84,683.993 1146.4,683.993 1146.96,683.993 1147.51,683.993 1148.07,683.993 1148.63,683.993 1149.19,683.993 1149.75,683.993 1150.31,683.993 1150.87,683.993 1151.43,683.993 1151.99,683.993 1152.55,683.993 1153.11,683.993 1153.67,683.993 1154.23,683.993 1154.78,683.993 1155.34,683.993 1155.9,683.993 1156.46,683.993 1157.02,683.993 1157.58,683.993 1158.14,683.993 1158.7,683.993 1159.26,683.993 1159.82,683.993 1160.38,683.993 1160.94,683.993 1161.5,683.993 1162.05,683.993 1162.61,683.993 1163.17,683.993 1163.73,683.993 1164.29,683.993 1164.85,683.993 1165.41,683.993 1165.97,683.993 1166.53,683.993 1167.09,683.993 1167.65,683.993 1168.21,683.993 1168.77,683.993 1169.33,683.993 1169.88,683.993 1170.44,683.993 1171,683.993 1171.56,683.993 1172.12,683.993 1172.68,683.993 1173.24,683.993 1173.8,683.993 1174.36,683.993 1174.92,683.993 1175.48,683.993 1176.04,683.993 1176.6,683.993 1177.15,683.993 1177.71,683.993 1178.27,683.993 1178.83,683.993 1179.39,683.993 1179.95,683.993 1180.51,683.993 1181.07,683.993 1181.63,683.993 1182.19,683.993 1182.75,683.993 1183.31,683.993 1183.87,683.993 1184.43,683.993 1184.98,683.993 1185.54,683.993 1186.1,683.993 1186.66,683.993 1187.22,683.993 1187.78,683.993 1188.34,683.993 1188.9,683.993 1189.46,683.993 1190.02,683.993 1190.58,683.993 1191.14,683.993 1191.7,683.993 1192.25,683.993 1192.81,683.993 1193.37,683.993 1193.93,683.993 1194.49,683.993 1195.05,683.993 1195.61,683.993 1196.17,683.993 1196.73,683.993 1197.29,683.993 1197.85,683.993 1198.41,683.993 1198.97,683.993 1199.52,683.993 1200.08,683.993 1200.64,683.993 1201.2,683.993 1201.76,683.993 1202.32,683.993 1202.88,683.993 1203.44,683.993 1204,683.993 1204.56,683.993 1205.12,683.993 1205.68,683.993 1206.24,683.993 1206.8,683.993 1207.35,683.993 1207.91,683.993 1208.47,683.993 1209.03,683.993 1209.59,683.993 1210.15,683.993 1210.71,683.993 1211.27,683.993 1211.83,683.993 1212.39,683.993 1212.95,683.993 1213.51,683.993 1214.07,683.993 1214.62,683.993 1215.18,683.993 1215.74,683.993 1216.3,683.993 1216.86,683.993 1217.42,683.993 1217.98,683.993 1218.54,683.993 1219.1,683.993 1219.66,683.993 1220.22,683.993 1220.78,683.993 1221.34,683.993 1221.89,683.993 1222.45,683.993 1223.01,683.993 1223.57,683.993 1224.13,683.993 1224.69,683.993 1225.25,683.993 1225.81,683.993 1226.37,683.993 1226.93,683.993 1227.49,683.993 1228.05,683.993 1228.61,683.993 1229.17,683.993 1229.72,683.993 1230.28,683.993 1230.84,683.993 1231.4,683.993 1231.96,683.993 1232.52,683.993 1233.08,683.993 1233.64,683.993 1234.2,683.993 1234.76,683.993 1235.32,683.993 1235.88,683.993 1236.44,683.993 1236.99,683.993 1237.55,683.993 1238.11,683.993 1238.67,683.993 1239.23,683.993 1239.79,683.993 1240.35,683.993 1240.91,683.993 1241.47,683.993 1242.03,683.993 1242.59,683.993 1243.15,683.993 1243.71,683.993 1244.26,683.993 1244.82,683.993 1245.38,683.993 1245.94,683.993 1246.5,683.993 1247.06,683.993 1247.62,683.993 1248.18,683.993 1248.74,683.993 1249.3,683.993 1249.86,683.993 1250.42,683.993 1250.98,683.993 1251.54,683.993 1252.09,683.993 1252.65,683.993 1253.21,683.993 1253.77,683.993 1254.33,683.993 1254.89,683.993 1255.45,683.993 1256.01,683.993 1256.57,683.993 1257.13,683.993 1257.69,683.993 1258.25,683.993 1258.81,683.993 1259.36,683.993 1259.92,683.993 1260.48,683.993 1261.04,683.993 1261.6,683.993 1262.16,683.993 1262.72,683.993 1263.28,683.993 1263.84,683.993 1264.4,683.993 1264.96,683.993 1265.52,683.993 1266.08,683.993 1266.63,683.993 1267.19,683.993 1267.75,683.993 1268.31,683.993 1268.87,683.993 1269.43,683.993 1269.99,683.993 1270.55,683.993 1271.11,683.993 1271.67,683.993 1272.23,683.993 1272.79,683.993 1273.35,683.993 1273.91,683.993 1274.46,683.993 1275.02,683.993 1275.58,683.993 1276.14,683.993 1276.7,683.993 1277.26,683.993 1277.82,683.993 1278.38,683.993 1278.94,683.993 1279.5,683.993 1280.06,683.993 1280.62,683.993 1281.18,683.993 1281.73,683.993 1282.29,683.993 1282.85,683.993 1283.41,683.993 1283.97,683.993 1284.53,683.993 1285.09,683.993 1285.65,683.993 1286.21,683.993 1286.77,683.993 1287.33,683.993 1287.89,683.993 1288.45,683.993 1289,683.993 1289.56,683.993 1290.12,683.993 1290.68,683.993 1291.24,683.993 1291.8,683.993 1292.36,683.993 1292.92,683.993 1293.48,683.993 1294.04,683.993 1294.6,683.993 1295.16,683.993 1295.72,683.993 1296.28,683.993 1296.83,683.993 1297.39,683.993 1297.95,683.993 1298.51,683.993 1299.07,683.993 1299.63,683.993 1300.19,683.993 1300.75,683.993 1301.31,683.993 1301.87,683.993 1302.43,683.993 1302.99,683.993 1303.55,683.993 1304.1,683.993 1304.66,683.993 1305.22,683.993 1305.78,683.993 1306.34,683.993 1306.9,683.993 1307.46,683.993 1308.02,683.993 1308.58,683.993 1309.14,683.993 1309.7,683.993 1310.26,683.993 1310.82,683.993 1311.38,683.993 1311.93,683.993 1312.49,683.993 1313.05,683.993 1313.61,683.993 1314.17,683.993 1314.73,683.993 1315.29,683.993 1315.85,683.993 1316.41,683.993 1316.97,683.993 1317.53,683.993 1318.09,683.993 1318.65,683.993 1319.2,683.993 1319.76,683.993 1320.32,683.993 1320.88,683.993 1321.44,683.993 1322,683.993 1322.56,683.993 1323.12,683.993 1323.68,683.993 1324.24,683.993 1324.8,683.993 1325.36,683.993 1325.92,683.993 1326.47,683.993 1327.03,683.993 1327.59,683.993 1328.15,683.993 1328.71,683.993 1329.27,683.993 1329.83,683.993 1330.39,683.993 1330.95,683.993 1331.51,683.993 1332.07,683.993 1332.63,683.993 1333.19,683.993 1333.75,683.993 1334.3,683.993 1334.86,683.993 1335.42,683.993 1335.98,683.993 1336.54,683.993 1337.1,683.993 1337.66,683.993 1338.22,683.993 1338.78,683.993 1339.34,683.993 1339.9,683.993 1340.46,683.993 1341.02,683.993 1341.57,683.993 1342.13,683.993 1342.69,683.993 1343.25,683.993 1343.81,683.993 1344.37,683.993 1344.93,683.993 1345.49,683.993 1346.05,683.993 1346.61,683.993 1347.17,683.993 1347.73,683.993 1348.29,683.993 1348.84,683.993 1349.4,683.993 1349.96,683.993 1350.52,683.993 1351.08,683.993 1351.64,683.993 1352.2,683.993 1352.76,683.993 1353.32,683.993 1353.88,683.993 1354.44,683.993 1355,683.993 1355.56,683.993 1356.12,683.993 1356.67,683.993 1357.23,683.993 1357.79,683.993 1358.35,683.993 1358.91,683.993 1359.47,683.993 1360.03,683.993 1360.59,683.993 1361.15,683.993 1361.71,683.993 1362.27,683.993 1362.83,683.993 1363.39,683.993 1363.94,683.993 1364.5,683.993 1365.06,683.993 1365.62,683.993 1366.18,683.993 1366.74,683.993 1367.3,683.993 1367.86,683.993 1368.42,683.993 1368.98,683.993 1369.54,683.993 1370.1,683.993 1370.66,683.993 1371.21,683.993 1371.77,683.993 1372.33,683.993 1372.89,683.993 1373.45,683.993 1374.01,683.993 1374.57,683.993 1375.13,683.993 1375.69,683.993 1376.25,683.993 1376.81,683.993 1377.37,683.993 1377.93,683.993 1378.49,683.993 1379.04,683.993 1379.6,683.993 1380.16,683.993 1380.72,683.993 1381.28,683.993 1381.84,683.993 1382.4,683.993 1382.96,683.993 1383.52,683.993 1384.08,683.993 1384.64,683.993 1385.2,683.993 1385.76,683.993 1386.31,683.993 1386.87,683.993 1387.43,683.993 1387.99,683.993 1388.55,683.993 1389.11,683.993 1389.67,683.993 1390.23,683.993 1390.79,683.993 1391.35,683.993 1391.91,683.993 1392.47,683.993 1393.03,683.993 1393.58,683.993 1394.14,683.993 1394.7,683.993 1395.26,683.993 1395.82,683.993 1396.38,683.993 1396.94,683.993 1397.5,683.993 1398.06,683.993 1398.62,683.993 1399.18,683.993 1399.74,683.993 1400.3,683.993 1400.86,683.993 1401.41,683.993 1401.97,683.993 1402.53,683.993 1403.09,683.993 1403.65,683.993 1404.21,683.993 1404.77,683.993 1405.33,683.993 1405.89,683.993 1406.45,683.993 1407.01,683.993 1407.57,683.993 1408.13,683.993 1408.68,683.993 1409.24,683.993 1409.8,683.993 1410.36,683.993 1410.92,683.993 1411.48,683.993 1412.04,683.993 1412.6,683.993 1413.16,683.993 1413.72,683.993 1414.28,683.993 1414.84,683.993 1415.4,683.993 1415.95,683.993 1416.51,683.993 1417.07,683.993 1417.63,683.993 1418.19,683.993 1418.75,683.993 1419.31,683.993 1419.87,683.993 1420.43,683.993 1420.99,683.993 1421.55,683.993 1422.11,683.993 1422.67,683.993 1423.23,683.993 1423.78,683.993 1424.34,683.993 1424.9,683.993 1425.46,683.993 1426.02,683.993 1426.58,683.993 1427.14,683.993 1427.7,683.993 1428.26,683.993 1428.82,683.993 1429.38,683.993 1429.94,683.993 1430.5,683.993 1431.05,683.993 1431.61,683.993 1432.17,683.993 1432.73,683.993 1433.29,683.993 1433.85,683.993 1434.41,683.993 1434.97,683.993 1435.53,683.993 1436.09,683.993 1436.65,683.993 1437.21,683.993 1437.77,683.993 1438.33,683.993 1438.88,683.993 1439.44,683.993 1440,683.993 1440.56,683.993 1441.12,683.993 1441.68,683.993 1442.24,683.993 1442.8,683.993 1443.36,683.993 1443.92,683.993 1444.48,683.993 1445.04,683.993 1445.6,683.993 1446.15,683.993 1446.71,683.993 1447.27,683.993 1447.83,683.993 1448.39,683.993 1448.95,683.993 1449.51,683.993 1450.07,683.993 1450.63,683.993 1451.19,683.993 1451.75,683.993 1452.31,683.993 1452.87,683.993 1453.42,683.993 1453.98,683.993 1454.54,683.993 1455.1,683.993 1455.66,683.993 1456.22,683.993 1456.78,683.993 1457.34,683.993 1457.9,683.993 1458.46,683.993 1459.02,683.993 1459.58,683.993 1460.14,683.993 1460.7,683.993 1461.25,683.993 1461.81,683.993 1462.37,683.993 1462.93,683.993 1463.49,683.993 1464.05,683.993 1464.61,683.993 1465.17,683.993 1465.73,683.993 1466.29,683.993 1466.85,683.993 1467.41,683.993 1467.97,683.993 1468.52,683.993 1469.08,683.993 1469.64,683.993 1470.2,683.993 1470.76,683.993 1471.32,683.993 1471.88,683.993 1472.44,683.993 1473,683.993 1473.56,683.993 1474.12,683.993 1474.68,683.993 1475.24,683.993 1475.79,683.993 1476.35,683.993 1476.91,683.993 1477.47,683.993 1478.03,683.993 1478.59,683.993 1479.15,683.993 1479.71,683.993 1480.27,683.993 1480.83,683.993 1481.39,683.993 1481.95,683.993 1482.51,683.993 1483.07,683.993 1483.62,683.993 1484.18,683.993 1484.74,683.993 1485.3,683.993 1485.86,683.993 1486.42,683.993 1486.98,683.993 1487.54,683.993 1488.1,683.993 1488.66,683.993 1489.22,683.993 1489.78,683.993 1490.34,683.993 1490.89,683.993 1491.45,683.993 1492.01,683.993 1492.57,683.993 1493.13,683.993 1493.69,683.993 1494.25,683.993 1494.81,683.993 1495.37,683.993 1495.93,683.993 1496.49,683.993 1497.05,683.993 1497.61,683.993 1498.16,683.993 1498.72,683.993 1499.28,683.993 1499.84,683.993 1500.4,683.993 1500.96,683.993 1501.52,683.993 1502.08,683.993 1502.64,683.993 1503.2,683.993 1503.76,683.993 1504.32,683.993 1504.88,683.993 1505.44,683.993 1505.99,683.993 1506.55,683.993 1507.11,683.993 1507.67,683.993 1508.23,683.993 1508.79,683.993 1509.35,683.993 1509.91,683.993 1510.47,683.993 1511.03,683.993 1511.59,683.993 1512.15,683.993 1512.71,683.993 1513.26,683.993 1513.82,683.993 1514.38,683.993 1514.94,683.993 1515.5,683.993 1516.06,683.993 1516.62,683.993 1517.18,683.993 1517.74,683.993 1518.3,683.993 1518.86,683.993 1519.42,683.993 1519.98,683.993 1520.53,683.993 1521.09,683.993 1521.65,683.993 1522.21,683.993 1522.77,683.993 1523.33,683.993 1523.89,683.993 1524.45,683.993 1525.01,683.993 1525.57,683.993 1526.13,683.993 1526.69,683.993 1527.25,683.993 1527.81,683.993 1528.36,683.993 1528.92,683.993 1529.48,683.993 1530.04,683.993 1530.6,683.993 1531.16,683.993 1531.72,683.993 1532.28,683.993 1532.84,683.993 1533.4,683.993 1533.96,683.993 1534.52,683.993 1535.08,683.993 1535.63,683.993 1536.19,683.993 1536.75,683.993 1537.31,683.993 1537.87,683.993 1538.43,683.993 1538.99,683.993 1539.55,683.993 1540.11,683.993 1540.67,683.993 1541.23,683.993 1541.79,683.993 1542.35,683.993 1542.9,683.993 1543.46,683.993 1544.02,683.993 1544.58,683.993 1545.14,683.993 1545.7,683.993 1546.26,683.993 1546.82,683.993 1547.38,683.993 1547.94,683.993 1548.5,683.993 1549.06,683.993 1549.62,683.993 1550.18,683.993 1550.73,683.993 1551.29,683.993 1551.85,683.993 1552.41,683.993 1552.97,683.993 1553.53,683.993 1554.09,683.993 1554.65,683.993 1555.21,683.993 1555.77,683.993 1556.33,683.993 1556.89,683.993 1557.45,683.993 1558,683.993 1558.56,683.993 1559.12,683.993 1559.68,683.993 1560.24,683.993 1560.8,683.993 1561.36,683.993 1561.92,683.993 1562.48,683.993 1563.04,683.993 1563.6,683.993 1564.16,683.993 1564.72,683.993 1565.28,683.993 1565.83,683.993 1566.39,683.993 1566.95,683.993 1567.51,683.993 1568.07,683.993 1568.63,683.993 1569.19,683.993 1569.75,683.993 1570.31,683.993 1570.87,683.993 1571.43,683.993 1571.99,683.993 1572.55,683.993 1573.1,683.993 1573.66,683.993 1574.22,683.993 1574.78,683.993 1575.34,683.993 1575.9,683.993 1576.46,683.993 1577.02,683.993 1577.58,683.993 1578.14,683.993 1578.7,683.993 1579.26,683.993 1579.82,683.993 1580.37,683.993 1580.93,683.993 1581.49,683.993 1582.05,683.993 1582.61,683.993 1583.17,683.993 1583.73,683.993 1584.29,683.993 1584.85,683.993 1585.41,683.993 1585.97,683.993 1586.53,683.993 1587.09,683.993 1587.65,683.993 1588.2,683.993 1588.76,683.993 1589.32,683.993 1589.88,683.993 1590.44,683.993 1591,683.993 1591.56,683.993 1592.12,683.993 1592.68,683.993 1593.24,683.993 1593.8,683.993 1594.36,683.993 1594.92,683.993 1595.47,683.993 1596.03,683.993 1596.59,683.993 1597.15,683.993 1597.71,683.993 1598.27,683.993 1598.83,683.993 1599.39,683.993 1599.95,683.993 1600.51,683.993 1601.07,683.993 1601.63,683.993 1602.19,683.993 1602.74,683.993 1603.3,683.993 1603.86,683.993 1604.42,683.993 1604.98,683.993 1605.54,683.993 1606.1,683.993 1606.66,683.993 1607.22,683.993 1607.78,683.993 1608.34,683.993 1608.9,683.993 1609.46,683.993 1610.02,683.993 1610.57,683.993 1611.13,683.993 1611.69,683.993 1612.25,683.993 1612.81,683.993 1613.37,683.993 1613.93,683.993 1614.49,683.993 1615.05,683.993 1615.61,683.993 1616.17,683.993 1616.73,683.993 1617.29,683.993 1617.84,683.993 1618.4,683.993 1618.96,683.993 1619.52,683.993 1620.08,683.993 1620.64,683.993 1621.2,683.993 1621.76,683.993 1622.32,683.993 1622.88,683.993 1623.44,683.993 1624,683.993 1624.56,683.993 1625.11,683.993 1625.67,683.993 1626.23,683.993 1626.79,683.993 1627.35,683.993 1627.91,683.993 1628.47,683.993 1629.03,683.993 1629.59,683.993 1630.15,683.993 1630.71,683.993 1631.27,683.993 1631.83,683.993 1632.39,683.993 1632.94,683.993 1633.5,683.993 1634.06,683.993 1634.62,683.993 1635.18,683.993 1635.74,683.993 1636.3,683.993 1636.86,683.993 1637.42,683.993 1637.98,683.993 1638.54,683.993 1639.1,683.993 1639.66,683.993 1640.21,683.993 1640.77,683.993 1641.33,683.993 1641.89,683.993 1642.45,683.993 1643.01,683.993 1643.57,683.993 1644.13,683.993 1644.69,683.993 1645.25,683.993 1645.81,683.993 1646.37,683.993 1646.93,683.993 1647.48,683.993 1648.04,683.993 1648.6,683.993 1649.16,683.993 1649.72,683.993 1650.28,683.993 1650.84,683.993 1651.4,683.993 1651.96,683.993 1652.52,683.993 1653.08,683.993 1653.64,683.993 1654.2,683.993 1654.76,683.993 1655.31,683.993 1655.87,683.993 1656.43,683.993 1656.99,683.993 1657.55,683.993 1658.11,683.993 1658.67,683.993 1659.23,683.993 1659.79,683.993 1660.35,683.993 1660.91,683.993 1661.47,683.993 1662.03,683.993 1662.58,683.993 1663.14,683.993 1663.7,683.993 1664.26,683.993 1664.82,683.993 1665.38,683.993 1665.94,683.993 1666.5,683.993 1667.06,683.993 1667.62,683.993 1668.18,683.993 1668.74,683.993 1669.3,683.993 1669.85,683.993 1670.41,683.993 1670.97,683.993 1671.53,683.993 1672.09,683.993 1672.65,683.993 1673.21,683.993 1673.77,683.993 1674.33,683.993 1674.89,683.993 1675.45,683.993 1676.01,683.993 1676.57,683.993 1677.13,683.993 1677.68,683.993 1678.24,683.993 1678.8,683.993 1679.36,683.993 1679.92,683.993 1680.48,683.993 1681.04,683.993 1681.6,683.993 1682.16,683.993 1682.72,683.993 1683.28,683.993 1683.84,683.993 1684.4,683.993 1684.95,683.993 1685.51,683.993 1686.07,683.993 1686.63,683.993 1687.19,683.993 1687.75,683.993 1688.31,683.993 1688.87,683.993 1689.43,683.993 1689.99,683.993 1690.55,683.993 1691.11,683.993 1691.67,683.993 1692.23,683.993 1692.78,683.993 1693.34,683.993 1693.9,683.993 1694.46,683.993 1695.02,683.993 1695.58,683.993 1696.14,683.993 1696.7,683.993 1697.26,683.993 1697.82,683.993 1698.38,683.993 1698.94,683.993 1699.5,683.993 1700.05,683.993 1700.61,683.993 1701.17,683.993 1701.73,683.993 1702.29,683.993 1702.85,683.993 1703.41,683.993 1703.97,683.993 1704.53,683.993 1705.09,683.993 1705.65,683.993 1706.21,683.993 1706.77,683.993 1707.32,683.993 1707.88,683.993 1708.44,683.993 1709,683.993 1709.56,683.993 1710.12,683.993 1710.68,683.993 1711.24,683.993 1711.8,683.993 1712.36,683.993 1712.92,683.993 1713.48,683.993 1714.04,683.993 1714.6,683.993 1715.15,683.993 1715.71,683.993 1716.27,683.993 1716.83,683.993 1717.39,683.993 1717.95,683.993 1718.51,683.993 1719.07,683.993 1719.63,683.993 1720.19,683.993 1720.75,683.993 1721.31,683.993 1721.87,683.993 1722.42,683.993 1722.98,683.993 1723.54,683.993 1724.1,683.993 1724.66,683.993 1725.22,683.993 1725.78,683.993 1726.34,683.993 1726.9,683.993 1727.46,683.993 1728.02,683.993 1728.58,683.993 1729.14,683.993 1729.69,683.993 1730.25,683.993 1730.81,683.993 1731.37,683.993 1731.93,683.993 1732.49,683.993 1733.05,683.993 1733.61,683.993 1734.17,683.993 1734.73,683.993 1735.29,683.993 1735.85,683.993 1736.41,683.993 1736.97,683.993 1737.52,683.993 1738.08,683.993 1738.64,683.993 1739.2,683.993 1739.76,683.993 1740.32,683.993 1740.88,683.993 1741.44,683.993 1742,683.993 1742.56,683.993 1743.12,683.993 1743.68,683.993 1744.24,683.993 1744.79,683.993 1745.35,683.993 1745.91,683.993 1746.47,683.993 1747.03,683.993 1747.59,683.993 1748.15,683.993 1748.71,683.993 1749.27,683.993 1749.83,683.993 1750.39,683.993 1750.95,683.993 1751.51,683.993 1752.06,683.993 1752.62,683.993 1753.18,683.993 1753.74,683.993 1754.3,683.993 1754.86,683.993 1755.42,683.993 1755.98,683.993 1756.54,683.993 1757.1,683.993 1757.66,683.993 1758.22,683.993 1758.78,683.993 1759.34,683.993 1759.89,683.993 1760.45,683.993 1761.01,683.993 1761.57,683.993 1762.13,683.993 1762.69,683.993 1763.25,683.993 1763.81,683.993 1764.37,683.993 1764.93,683.993 1765.49,683.993 1766.05,683.993 1766.61,683.993 1767.16,683.993 1767.72,683.993 1768.28,683.993 1768.84,683.993 1769.4,683.993 1769.96,683.993 1770.52,683.993 1771.08,683.993 1771.64,683.993 1772.2,683.993 1772.76,683.993 1773.32,683.993 1773.88,683.993 1774.43,683.993 1774.99,683.993 1775.55,683.993 1776.11,683.993 1776.67,683.993 1777.23,683.993 1777.79,683.993 1778.35,683.993 1778.91,683.993 1779.47,683.993 1780.03,683.993 1780.59,683.993 1781.15,683.993 1781.71,683.993 1782.26,683.993 1782.82,683.993 1783.38,683.993 1783.94,683.993 1784.5,683.993 1785.06,683.993 1785.62,683.993 1786.18,683.993 1786.74,683.993 1787.3,683.993 1787.86,683.993 1788.42,683.993 1788.98,683.993 1789.53,683.993 1790.09,683.993 1790.65,683.993 1791.21,683.993 1791.77,683.993 1792.33,683.993 1792.89,683.993 1793.45,683.993 1794.01,683.993 1794.57,683.993 1795.13,683.993 1795.69,683.993 1796.25,683.993 1796.8,683.993 1797.36,683.993 1797.92,683.993 1798.48,683.993 1799.04,683.993 1799.6,683.993 1800.16,683.993 1800.72,683.993 1801.28,683.993 1801.84,683.993 1802.4,683.993 1802.96,683.993 1803.52,683.993 1804.08,683.993 1804.63,683.993 1805.19,683.993 1805.75,683.993 1806.31,683.993 1806.87,683.993 1807.43,683.993 1807.99,683.993 1808.55,683.993 1809.11,683.993 1809.67,683.993 1810.23,683.993 1810.79,683.993 1811.35,683.993 1811.9,683.993 1812.46,683.993 1813.02,683.993 1813.58,683.993 1814.14,683.993 1814.7,683.993 1815.26,683.993 1815.82,683.993 1816.38,683.993 1816.94,683.993 1817.5,683.993 1818.06,683.993 1818.62,683.993 1819.18,683.993 1819.73,683.993 1820.29,683.993 1820.85,683.993 1821.41,683.993 1821.97,683.993 1822.53,683.993 1823.09,683.993 1823.65,683.993 1824.21,683.993 1824.77,683.993 1825.33,683.993 1825.89,683.993 1826.45,683.993 1827,683.993 1827.56,683.993 1828.12,683.993 1828.68,683.993 1829.24,683.993 1829.8,683.993 1830.36,683.993 1830.92,683.993 1831.48,683.993 1832.04,683.993 1832.6,683.993 1833.16,683.993 1833.72,683.993 1834.27,683.993 1834.83,683.993 1835.39,683.993 1835.95,683.993 1836.51,683.993 1837.07,683.993 1837.63,683.993 1838.19,683.993 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0319521022044915 ± 0.023828582615350976\nProjected Energy: -4.017141310802907 ± (0.0037352269846744335, 0.0036354391381347995)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.509898</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3756e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1853e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0661e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.212e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.976e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.498e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.3631242916133672\n -0.7590191922770817\n  0.13584182219621432\n  0.1578999869460862\n  0.8767114411781378\n  1.5305929970973402\n  1.5835732611867375\n  3.072870330325868\n  3.1256726539518356\n  4.862107221562167\n  6.260694850380596\n  6.402671211183115\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
